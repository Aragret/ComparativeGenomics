%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAGUGUGUUGGGGGGGGGGAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAxxxxxxxxxxGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGCCCCCCCCCCUAAAGAGUGUU\
) } def
/len { sequence length } bind def

/coor [
[98.94750214 382.11917114]
[84.92556000 376.56616211]
[72.72560120 367.69982910]
[63.11453247 356.07751465]
[56.69650650 342.42980957]
[53.87496948 327.61462402]
[54.82728577 312.56326294]
[59.49359131 298.22183228]
[67.58055878 285.49188232]
[78.57983398 275.17358398]
[91.79998779 267.91561890]
[106.41000366 264.17419434]
[106.41000366 249.17417908]
[106.41000366 234.17417908]
[106.41000366 219.17417908]
[106.41000366 204.17417908]
[106.41000366 189.17417908]
[106.41000366 174.17417908]
[106.41000366 159.17417908]
[106.41000366 144.17417908]
[106.41000366 129.17417908]
[86.34483337 127.10631561]
[71.86196136 112.60655212]
[58.30006409 119.01552582]
[44.73816681 125.42449951]
[35.85098648 139.20674133]
[19.48714638 138.13119507]
[12.48036385 123.30428314]
[22.03861427 109.97867584]
[38.32918930 111.86260223]
[51.89108658 105.45362854]
[65.45298004 99.04465485]
[69.11168671 84.49770355]
[60.19553757 72.43527222]
[51.27938843 60.37283707]
[39.89611053 62.89735794]
[27.99393082 59.97937393]
[18.15415573 51.71525192]
[12.73948002 39.40856934]
[13.34100723 25.38060951]
[1.00972366 16.84015083]
[-11.32155991 8.29969215]
[-23.65284348 -0.24076699]
[-35.98412704 -8.78122616]
[-48.31541061 -17.32168388]
[-61.16316605 -15.79233456]
[-71.26999664 -23.21010017]
[-73.51358795 -35.13606262]
[-85.66691589 -43.92790222]
[-97.82025146 -52.71974564]
[-109.97358704 -61.51158905]
[-126.33295441 -62.65312195]
[-133.27987671 -77.50816345]
[-123.66796875 -90.79511261]
[-107.38512421 -88.84550476]
[-101.18173981 -73.66492462]
[-89.02841187 -64.87307739]
[-76.87507629 -56.08123779]
[-64.72174072 -47.28939438]
[-47.21848679 -46.46440506]
[-39.77495193 -29.65296936]
[-27.44366837 -21.11251068]
[-15.11238480 -12.57205105]
[-2.78110123 -4.03159189]
[9.55018234 4.50886679]
[21.88146591 13.04932594]
[35.09664917 5.95292234]
[34.78867340 -9.04391575]
[34.48069382 -24.04075432]
[34.17271805 -39.03759003]
[20.44882393 -45.81352997]
[11.45523548 -58.19795609]
[9.25861454 -73.34501648]
[14.36372757 -87.77402496]
[25.59745598 -98.16931152]
[40.37837219 -102.14210510]
[55.30992889 -98.77949524]
[66.96096802 -88.85417175]
[72.65415955 -74.64691925]
[71.08125305 -59.42244339]
[62.60369110 -46.67922974]
[49.16955566 -39.34556961]
[49.47753143 -24.34873199]
[49.78551102 -9.35189342]
[50.09348679 5.64494467]
[69.70279694 26.65927315]
[63.34181976 51.45668793]
[72.25797272 63.51911926]
[81.17411804 75.58155060]
[97.73656464 69.49156952]
[114.78188324 73.49128723]
[126.71665192 86.11183167]
[129.71070862 103.08144379]
[144.61515808 101.39104462]
[159.51959229 99.70064545]
[174.40589905 97.85732269]
[189.27250671 95.86126709]
[197.42036438 91.59415436]
[204.46447754 93.98008728]
[211.61141968 82.52012634]
[223.88253784 77.36251831]
[236.68975830 80.19161987]
[245.38394165 89.75004578]
[258.41134644 80.77243042]
[271.79821777 87.30240631]
[286.73422241 85.91838074]
[301.67025757 84.53435516]
[314.69763184 75.55673981]
[328.08453369 82.08670807]
[343.02053833 80.70268250]
[356.08557129 70.79121399]
[371.09469604 77.39865875]
[372.60781860 93.72785187]
[359.06835938 102.98071289]
[344.40457153 95.63869476]
[329.46856689 97.02272034]
[317.50949097 105.90134430]
[303.05426025 99.47036743]
[288.11825562 100.85439301]
[273.18225098 102.23841858]
[261.22317505 111.11703491]
[246.76795959 104.68605804]
[236.61808777 118.06078339]
[219.60414124 120.02474213]
[206.15487671 108.88453674]
[191.26855469 110.72785950]
[176.40196228 112.72392273]
[170.15257263 116.75595093]
[161.20999146 114.60509491]
[146.30554199 116.29548645]
[131.40110779 117.98588562]
[121.41000366 129.17417908]
[121.41000366 144.17417908]
[121.41000366 159.17417908]
[121.41000366 174.17417908]
[121.41000366 189.17417908]
[121.41000366 204.17417908]
[121.41000366 219.17417908]
[121.41000366 234.17417908]
[121.41000366 249.17417908]
[121.41000366 264.17419434]
[136.02001953 267.91561890]
[149.24017334 275.17358398]
[160.23945618 285.49188232]
[168.32641602 298.22183228]
[172.99272156 312.56326294]
[173.94503784 327.61462402]
[171.12350464 342.42980957]
[164.70547485 356.07751465]
[155.09440613 367.69982910]
[142.89443970 376.56616211]
[128.87249756 382.11917114]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 32]
[24 31]
[25 30]
[33 89]
[34 88]
[35 87]
[40 66]
[41 65]
[42 64]
[43 63]
[44 62]
[45 61]
[48 59]
[49 58]
[50 57]
[51 56]
[67 85]
[68 84]
[69 83]
[70 82]
[93 131]
[94 130]
[95 129]
[96 127]
[97 126]
[99 125]
[103 122]
[105 120]
[106 119]
[107 118]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
