%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUUAGUAUGGGGGGGGGGUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGxxxxxxxxxxAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCAACCCCCCCCCCCAACUUAAUAU\
) } def
/len { sequence length } bind def

/coor [
[23.66300583 608.57849121]
[9.64106274 603.02545166]
[-2.55889487 594.15911865]
[-12.16996574 582.53680420]
[-18.58799171 568.88909912]
[-21.40952873 554.07391357]
[-20.45721245 539.02258301]
[-15.79090691 524.68115234]
[-7.70394087 511.95117188]
[3.29533386 501.63290405]
[16.51549339 494.37493896]
[31.12550545 490.63348389]
[31.12550545 475.63348389]
[31.12550545 460.63348389]
[31.12550545 445.63348389]
[31.12550545 430.63348389]
[31.12550545 415.63348389]
[31.12550545 400.63348389]
[31.12550545 385.63348389]
[31.12550545 370.63348389]
[31.12550545 355.63348389]
[31.12550545 340.63348389]
[23.22128487 338.98703003]
[15.63610363 336.21102905]
[8.53053570 332.36315918]
[2.05515313 327.52389526]
[-3.65266895 321.79470825]
[-8.47166348 315.29595947]
[-12.29925060 308.16430664]
[-15.05371666 300.55001831]
[-16.67596626 292.61361694]
[-17.13077736 284.52252197]
[-16.40758133 276.44766235]
[-14.52069473 268.55969238]
[-11.50903797 261.02548218]
[-7.43533993 254.00454712]
[-2.38482499 247.64569092]
[3.53656650 242.08387756]
[10.20440102 237.43728638]
[17.47836685 233.80487061]
[25.20522881 231.26425171]
[33.22204971 229.86999512]
[41.35963440 229.65252686]
[49.44609451 230.61738586]
[54.28590775 216.41964722]
[59.12572479 202.22189331]
[63.96554184 188.02413940]
[68.65933990 173.77743530]
[73.20663452 159.48330688]
[77.75392151 145.18917847]
[82.30121613 130.89505005]
[86.84850311 116.60092163]
[79.71305084 106.08211517]
[79.88456726 93.37265015]
[87.30127716 83.05022430]
[99.29181671 78.83278656]
[104.13163757 64.63503265]
[101.26084137 49.07646179]
[112.69083405 39.52635956]
[116.94367981 25.14187813]
[120.60238647 10.59492493]
[124.26109314 -3.95202923]
[127.91979980 -18.49898338]
[131.57850647 -33.04593658]
[117.79902649 -39.06056595]
[105.19753265 -47.26132202]
[94.11782074 -57.42447662]
[84.86213684 -69.27277374]
[77.68298340 -82.48298645]
[72.77622223 -96.69472504]
[70.27571106 -111.52028656]
[70.24966431 -126.55522156]
[72.69879150 -141.38935852]
[77.55627441 -155.61801147]
[84.68960571 -168.85302734]
[93.90417480 -180.73332214]
[104.94860840 -190.93481445]
[117.52160645 -199.17918396]
[131.28016663 -205.24153137]
[145.84893799 -208.95645142]
[160.83047485 -210.22262573]
[175.81608582 -209.00549316]
[190.39694214 -205.33825684]
[204.17526245 -199.32096863]
[216.77516174 -191.11779785]
[227.85292053 -180.95249939]
[237.10632324 -169.10241699]
[244.28292847 -155.89082336]
[249.18695068 -141.67814636]
[251.68461609 -126.85209656]
[251.70776367 -111.81716156]
[249.25578308 -96.98349762]
[244.39555359 -82.75577545]
[237.25967407 -69.52214050]
[228.04281616 -57.64361191]
[216.99641418 -47.44425201]
[204.42182922 -39.20230484]
[190.66210938 -33.14261246]
[176.09262085 -29.43049240]
[161.11082458 -28.16720963]
[146.12545776 -29.38723183]
[142.46675110 -14.84027767]
[138.80804443 -0.29332343]
[135.14933777 14.25363064]
[131.49063110 28.80058479]
[132.87129211 31.30753899]
[133.31047058 34.52877426]
[132.52474976 38.09659576]
[130.37333679 41.54551315]
[126.88858795 44.36617661]
[130.10556030 58.90922928]
[118.32939148 69.47484589]
[113.48957062 83.67259979]
[121.10918427 98.28105927]
[115.95345306 113.92982483]
[101.14263153 121.14821625]
[96.59534454 135.44233704]
[92.04804993 149.73646545]
[87.50076294 164.03060913]
[82.95347595 178.32473755]
[83.33018494 187.51461792]
[78.16329193 192.86395264]
[73.32347870 207.06170654]
[68.48365784 221.25946045]
[63.64384460 235.45721436]
[81.99077606 250.23905945]
[92.61782837 271.22750854]
[93.66977692 294.69406128]
[84.98945618 316.48352051]
[68.14044952 332.74945068]
[46.12550354 340.63348389]
[46.12550354 355.63348389]
[46.12550354 370.63348389]
[46.12550354 385.63348389]
[46.12550354 400.63348389]
[46.12550354 415.63348389]
[46.12550354 430.63348389]
[46.12550354 445.63348389]
[46.12550354 460.63348389]
[46.12550354 475.63348389]
[46.12550354 490.63348389]
[60.73551941 494.37493896]
[73.95568085 501.63290405]
[84.95494843 511.95117188]
[93.04191589 524.68115234]
[97.70822144 539.02258301]
[98.66053772 554.07391357]
[95.83900452 568.88909912]
[89.42097473 582.53680420]
[79.80990601 594.15911865]
[67.60994720 603.02545166]
[53.58800507 608.57849121]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[44 125]
[45 124]
[46 123]
[47 122]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
[56 113]
[57 112]
[59 110]
[60 105]
[61 104]
[62 103]
[63 102]
[64 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
