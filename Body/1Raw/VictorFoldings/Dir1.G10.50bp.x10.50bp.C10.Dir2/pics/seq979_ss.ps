%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGUUCCAGGGGGGGGGGGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCAxxxxxxxxxxUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCCCCCCCCCCCUCGUUCCA\
) } def
/len { sequence length } bind def

/coor [
[85.74967957 391.82553101]
[71.90373993 385.80950928]
[60.19507599 376.28009033]
[51.49254990 363.94442749]
[46.44194794 349.71789551]
[45.41805649 334.65621948]
[48.49685669 319.87707520]
[55.44987869 306.47714233]
[65.76116180 295.45080566]
[78.66554260 287.61630249]
[93.20542908 283.55499268]
[93.20542908 268.55499268]
[93.20542908 253.55499268]
[93.20542908 238.55499268]
[93.20542908 223.55499268]
[93.20542908 208.55499268]
[93.20542908 193.55499268]
[93.20542908 178.55499268]
[93.20542908 163.55499268]
[93.20542908 148.55499268]
[93.20542908 133.55499268]
[93.20542908 118.55498505]
[87.31178284 114.51531219]
[83.37083435 108.76641083]
[81.80939484 102.15342712]
[66.99163818 99.82231903]
[52.17387772 97.49121857]
[47.18460846 99.42169952]
[42.43991089 99.22109985]
[38.72399902 97.35196686]
[36.51634979 94.52463531]
[21.87284851 91.27381134]
[7.22934723 88.02298737]
[-3.18273854 99.22725677]
[-17.70911407 103.68608856]
[-32.41915894 100.29773712]
[-43.38477325 90.06977081]
[-47.72928238 75.82228851]
[-62.37278366 72.57146454]
[-77.01628876 69.32064056]
[-91.26710510 76.68906403]
[-105.85381317 70.01019287]
[-109.58674622 54.40747452]
[-99.60231018 41.84998322]
[-83.55970764 41.97075272]
[-73.76545715 54.67713547]
[-59.12195969 57.92796326]
[-44.47845840 61.17878723]
[-34.51334763 50.10800552]
[-20.24992561 45.48083115]
[-5.48793745 48.63520813]
[5.78716087 58.82191467]
[10.48017311 73.37948608]
[25.12367439 76.63031006]
[39.76717758 79.88113403]
[54.50498199 82.67346191]
[69.32273865 85.00456238]
[84.14049530 87.33567047]
[96.40286255 78.69655609]
[99.19519043 63.95874786]
[101.98751831 49.22093964]
[104.77983856 34.48313522]
[103.29868317 25.40249443]
[107.78660583 19.46917534]
[106.07417297 12.97494030]
[107.69959259 7.44418049]
[111.33116913 4.25244379]
[115.03733063 -10.28249264]
[118.74349213 -24.81742859]
[122.44965363 -39.35236359]
[109.28681946 -46.72815323]
[98.48217773 -57.26010513]
[90.77239227 -70.23013306]
[86.68313599 -84.75392151]
[86.49322510 -99.84121704]
[90.21560669 -114.46333313]
[97.59647369 -127.62331390]
[108.13259888 -138.42388916]
[121.10560608 -146.12866211]
[135.63096619 -150.21231079]
[150.71833801 -150.39640808]
[165.33900452 -146.66838074]
[178.49613953 -139.28242493]
[189.29264832 -128.74212646]
[196.99241638 -115.76615143]
[201.07044983 -101.23921204]
[201.24871826 -86.15177917]
[197.51504517 -71.53253937]
[190.12402344 -58.37826157]
[179.57955933 -47.58581924]
[166.60060120 -39.89106750]
[152.07209778 -35.81863785]
[136.98458862 -35.64620209]
[133.27842712 -21.11126709]
[129.57226562 -6.57633114]
[125.86610413 7.95860481]
[122.46312714 22.56749725]
[119.51764679 37.27545929]
[116.72531891 52.01326370]
[113.93299866 66.75106812]
[111.14067078 81.48887634]
[120.28240967 93.38125610]
[135.24266052 94.47256470]
[150.20289612 95.56388092]
[165.16314697 96.65518951]
[180.12339783 97.74649811]
[186.04939270 83.81232452]
[196.18058777 72.55897522]
[209.41799927 65.20713806]
[224.32574463 62.55427551]
[239.28675842 64.88816071]
[252.67816162 71.95562744]
[263.04736328 82.99004364]
[269.26959229 96.79448700]
[270.66989136 111.87155151]
[267.09637451 126.58579254]
[258.93670654 139.34111023]
[247.07592773 148.75392151]
[232.80064392 153.80316162]
[217.65931702 153.94116211]
[203.29437256 149.15293884]
[191.26400757 139.95788574]
[182.87318420 127.35340881]
[179.03208923 112.70674896]
[164.07183838 111.61544037]
[149.11158752 110.52412415]
[134.15135193 109.43281555]
[119.19109344 108.34150696]
[108.20542908 118.55498505]
[108.20542908 133.55499268]
[108.20542908 148.55499268]
[108.20542908 163.55499268]
[108.20542908 178.55499268]
[108.20542908 193.55499268]
[108.20542908 208.55499268]
[108.20542908 223.55499268]
[108.20542908 238.55499268]
[108.20542908 253.55499268]
[108.20542908 268.55499268]
[108.20542908 283.55499268]
[122.74531555 287.61630249]
[135.64970398 295.45080566]
[145.96098328 306.47714233]
[152.91400146 319.87707520]
[155.99279785 334.65621948]
[154.96891785 349.71789551]
[149.91830444 363.94442749]
[141.21578979 376.28009033]
[129.50712585 385.80950928]
[115.66118622 391.82553101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 58]
[26 57]
[27 56]
[31 55]
[32 54]
[33 53]
[38 48]
[39 47]
[40 46]
[59 101]
[60 100]
[61 99]
[62 98]
[64 97]
[67 96]
[68 95]
[69 94]
[70 93]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
