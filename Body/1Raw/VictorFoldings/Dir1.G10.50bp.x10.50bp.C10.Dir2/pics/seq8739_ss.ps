%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAGAAAUGGGGGGGGGGCGCUGUCGCCUUAAUCCAAGCCUACGUUUUCACACUUCUAGUAAGCCUCUxxxxxxxxxxCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCCCCCCCCCCCAUCCUAGCAAU\
) } def
/len { sequence length } bind def

/coor [
[123.32434845 434.14126587]
[111.57875824 424.71493530]
[102.13450623 412.98379517]
[95.43330383 399.49645996]
[91.78859711 384.88378906]
[91.37084198 369.82925415]
[94.19957733 355.03692627]
[100.14250946 341.19873047]
[108.92166901 328.96188354]
[120.12643433 318.89874268]
[133.23274231 311.47991943]
[147.62759399 307.05249023]
[146.39698792 292.10302734]
[145.16638184 277.15359497]
[143.93576050 262.20416260]
[142.70515442 247.25474548]
[141.47453308 232.30529785]
[140.24392700 217.35586548]
[136.58522034 202.80891418]
[130.59692383 189.05609131]
[124.60862732 175.30325317]
[118.62033081 161.55043030]
[112.63203430 147.79760742]
[98.72019958 142.60179138]
[92.45130157 128.73977661]
[97.99546051 114.18299103]
[86.86701202 105.71839905]
[88.25170898 91.80530548]
[82.26341248 78.05247498]
[76.27511597 64.29964447]
[70.28681946 50.54681778]
[64.29852295 36.79399109]
[59.91110611 51.13799667]
[48.56027222 60.94404602]
[33.73109436 63.20135880]
[19.97660637 57.21686935]
[11.51988602 44.82801056]
[10.95741558 29.83856010]
[18.46189499 16.85076523]
[31.72920227 9.85229969]
[46.68584824 10.99191856]
[58.73854065 19.91826057]
[55.37928391 5.29925251]
[52.02002335 -9.31975460]
[48.66076660 -23.93876266]
[43.66006851 -31.65814209]
[45.38587952 -38.89234924]
[42.32748413 -53.57724762]
[39.26908875 -68.26214600]
[36.21069336 -82.94704437]
[21.21417046 -82.00626373]
[6.23640966 -83.20936584]
[-8.41765976 -86.53186035]
[-22.44970131 -91.90611267]
[-35.57403946 -99.22270203]
[-47.52348328 -108.33267975]
[-58.05475235 -119.05056763]
[-66.95344543 -131.15817261]
[-74.03839111 -144.40898132]
[-79.16535950 -158.53324890]
[-82.22997284 -173.24342346]
[-83.16982269 -188.24000549]
[-81.96579742 -203.21768188]
[-78.64238739 -217.87155151]
[-73.26727295 -231.90325928]
[-65.94986725 -245.02714539]
[-56.83915329 -256.97601318]
[-46.12061310 -267.50662231]
[-34.01246262 -276.40457153]
[-20.76120186 -283.48870850]
[-6.63661718 -288.61480713]
[8.07373714 -291.67849731]
[23.07037544 -292.61743164]
[38.04798889 -291.41247559]
[52.70164490 -288.08816528]
[66.73302460 -282.71215820]
[79.85645294 -275.39395142]
[91.80477142 -266.28250122]
[102.33470917 -255.56330872]
[111.23190308 -243.45460510]
[118.31521606 -230.20291138]
[123.44043732 -216.07800293]
[126.50321960 -201.36746216]
[127.44122314 -186.37075806]
[126.23533630 -171.39321899]
[122.91011810 -156.73977661]
[117.53326416 -142.70872498]
[110.21423340 -129.58575439]
[101.10204315 -117.63800049]
[90.38220215 -107.10871887]
[78.27294922 -98.21227264]
[65.02081299 -91.12978363]
[50.89559174 -86.00543976]
[53.95398712 -71.32054138]
[57.01238251 -56.63564301]
[60.07077789 -41.95074463]
[63.27977371 -27.29802132]
[66.63903046 -12.67901421]
[69.99829102 1.93999374]
[73.35755157 16.55900192]
[78.05135345 30.80569267]
[84.03964996 44.55852127]
[90.02794647 58.31135178]
[96.01624298 72.06417847]
[102.00453949 85.81700897]
[113.13298798 94.28160095]
[111.74829102 108.19469452]
[126.18158722 114.05283356]
[132.05865479 128.08546448]
[126.38486481 141.80931091]
[132.37315369 155.56213379]
[138.36145020 169.31495667]
[144.34974670 183.06779480]
[150.33804321 196.82061768]
[152.62794495 181.99644470]
[159.76666260 168.80406189]
[170.92376709 158.77813721]
[184.80137634 153.08497620]
[199.78511047 152.38682556]
[214.13197327 156.76490784]
[226.17300415 165.70994568]
[234.50749207 178.18136597]
[238.16590881 192.72839355]
[236.72267151 207.65879822]
[230.34568787 221.23576355]
[219.77674866 231.87989807]
[206.24534607 238.35299683]
[191.32554626 239.90205383]
[176.75294495 236.34686279]
[164.22274780 228.10101318]
[155.19335938 216.12525940]
[156.42398071 231.07469177]
[157.65458679 246.02412415]
[158.88519287 260.97357178]
[160.11581421 275.92300415]
[161.34642029 290.87243652]
[162.57704163 305.82186890]
[177.50212097 307.83575439]
[191.64520264 313.01141357]
[204.34474182 321.10681152]
[215.00680542 331.74331665]
[223.13267517 344.42337036]
[228.34230042 358.55398560]
[230.39201355 373.47418213]
[229.18595886 388.48617554]
[224.78053284 402.88778687]
[217.38177490 416.00543213]
[207.33576965 427.22558594]
[195.11236572 436.02343750]
[181.28327942 441.98751831]
[166.49531555 444.83889771]
[151.44013977 444.44415283]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 114]
[20 113]
[21 112]
[22 111]
[23 110]
[26 107]
[28 105]
[29 104]
[30 103]
[31 102]
[32 101]
[42 100]
[43 99]
[44 98]
[45 97]
[47 96]
[48 95]
[49 94]
[50 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
