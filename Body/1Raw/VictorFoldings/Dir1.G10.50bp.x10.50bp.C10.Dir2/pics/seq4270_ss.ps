%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCUCCCUGGGGGGGGGGGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCACCCCCCCCCCUAUCCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[95.32070160 363.26501465]
[81.47476196 357.24899292]
[69.76609802 347.71957397]
[61.06357574 335.38391113]
[56.01297379 321.15737915]
[54.98908234 306.09570312]
[58.06788254 291.31655884]
[65.02090454 277.91662598]
[75.33219147 266.89028931]
[88.23657227 259.05578613]
[102.77645874 254.99446106]
[102.77645874 239.99446106]
[102.77645874 224.99446106]
[102.77645874 209.99446106]
[102.77645874 194.99446106]
[102.77645874 179.99446106]
[102.77645874 164.99446106]
[102.77645874 149.99446106]
[102.77645874 134.99446106]
[102.77645874 119.99446106]
[90.51408386 111.35534668]
[76.38928223 116.40410614]
[62.26448059 121.45285797]
[48.13967896 126.50161743]
[45.46424103 141.62568665]
[35.57292175 153.37547302]
[21.12644386 158.59033203]
[6.01083040 155.86750793]
[-5.70789146 145.93940735]
[-10.87744522 131.47665405]
[-8.10724640 116.36965179]
[1.85753500 104.68210602]
[16.33642387 99.55790710]
[31.43466949 102.37545013]
[43.09092331 112.37681580]
[57.21572495 107.32805634]
[71.34053040 102.27930450]
[85.46533203 97.23054504]
[95.21298218 85.82952118]
[98.00531006 71.09172058]
[100.79763031 56.35391235]
[103.12873840 41.53615570]
[104.99634552 26.65287399]
[106.86396027 11.76959515]
[108.73157501 -3.11368513]
[97.13351440 -10.99600697]
[90.10883331 -23.05605888]
[88.98505402 -36.90098953]
[93.92541504 -49.81224060]
[103.90802765 -59.27936935]
[116.93668365 -63.48812103]
[119.11351776 -78.32933044]
[121.29035950 -93.17053223]
[123.46719360 -108.01174164]
[125.64402771 -122.85294342]
[111.18254089 -126.91417694]
[97.35913849 -132.79141235]
[84.40082550 -140.38815308]
[72.52037048 -149.57962036]
[61.91287994 -160.21492004]
[52.75253296 -172.11938477]
[45.18974686 -185.09754944]
[39.34870911 -198.93627930]
[35.32534027 -213.40835571]
[33.18570328 -228.27610779]
[32.96493530 -243.29542542]
[34.66666031 -258.21963501]
[38.26293564 -272.80371094]
[43.69470596 -286.80813599]
[50.87277603 -300.00299072]
[59.67927933 -312.17153931]
[69.96959686 -323.11401367]
[81.57476807 -332.65069580]
[94.30420685 -340.62503052]
[107.94889069 -346.90600586]
[122.28476715 -351.39053345]
[137.07643127 -354.00494385]
[152.08097839 -354.70635986]
[167.05201721 -353.48318481]
[181.74372864 -350.35556030]
[195.91484070 -345.37481689]
[209.33267212 -338.62277222]
[221.77687073 -330.21026611]
[233.04310608 -320.27545166]
[242.94636536 -308.98147583]
[251.32403564 -296.51382446]
[258.03854370 -283.07714844]
[262.97961426 -268.89215088]
[266.06616211 -254.19177246]
[267.24746704 -239.21736145]
[266.50411987 -224.21482849]
[263.84832764 -209.43054199]
[259.32373047 -195.10726929]
[253.00460815 -181.48019409]
[244.99473572 -168.77310181]
[235.42562866 -157.19465637]
[224.45442200 -146.93498230]
[212.26129150 -138.16253662]
[199.04643250 -131.02139282]
[185.02685547 -125.62880707]
[170.43278503 -122.07332611]
[155.50386047 -120.41333771]
[140.48522949 -120.67610931]
[138.30839539 -105.83489990]
[136.13156128 -90.99369812]
[133.95472717 -76.15248871]
[131.77789307 -61.31128693]
[144.67529297 -51.62579727]
[150.98182678 -36.67890167]
[148.89666748 -20.49612808]
[138.89302063 -7.48757029]
[123.61485291 -1.24607205]
[121.74724579 13.63720798]
[119.87963104 28.52048874]
[118.01201630 43.40376663]
[119.93132019 46.43423843]
[120.44068146 50.56246185]
[119.03259277 55.09784317]
[115.53543854 59.14623642]
[112.74311066 73.88404083]
[109.95079041 88.62184906]
[118.29743195 76.15856171]
[131.68437195 69.39174652]
[146.66941833 70.06134796]
[159.39945984 77.99520111]
[166.60122681 91.15326691]
[166.42291260 106.15220642]
[158.91036987 119.13533783]
[145.99531555 126.76431274]
[130.99858093 127.07747650]
[117.77645874 119.99446106]
[117.77645874 134.99446106]
[117.77645874 149.99446106]
[117.77645874 164.99446106]
[117.77645874 179.99446106]
[117.77645874 194.99446106]
[117.77645874 209.99446106]
[117.77645874 224.99446106]
[117.77645874 239.99446106]
[117.77645874 254.99446106]
[132.31634521 259.05578613]
[145.22071838 266.89028931]
[155.53201294 277.91662598]
[162.48503113 291.31655884]
[165.56382751 306.09570312]
[164.53993225 321.15737915]
[159.48933411 335.38391113]
[150.78680420 347.71957397]
[139.07815552 357.24899292]
[125.23220825 363.26501465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 38]
[22 37]
[23 36]
[24 35]
[39 121]
[40 120]
[41 119]
[42 115]
[43 114]
[44 113]
[45 112]
[51 107]
[52 106]
[53 105]
[54 104]
[55 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
