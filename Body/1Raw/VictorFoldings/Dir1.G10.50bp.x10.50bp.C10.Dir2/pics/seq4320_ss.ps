%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACACCUCGGGGGGGGGGCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUxxxxxxxxxxAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCCCCCCCCCCCAUACUCCUC\
) } def
/len { sequence length } bind def

/coor [
[100.89654541 459.55157471]
[87.05060577 453.53555298]
[75.34194183 444.00613403]
[66.63941956 431.67047119]
[61.58881760 417.44393921]
[60.56492615 402.38226318]
[63.64372635 387.60311890]
[70.59674835 374.20318604]
[80.90802765 363.17684937]
[93.81241608 355.34234619]
[108.35230255 351.28103638]
[108.35230255 336.28103638]
[108.35230255 321.28103638]
[108.35230255 306.28103638]
[108.35230255 291.28103638]
[108.35230255 276.28103638]
[108.35230255 261.28103638]
[108.35230255 246.28102112]
[108.35230255 231.28102112]
[108.35230255 216.28102112]
[108.35230255 201.28102112]
[108.35230255 186.28102112]
[108.35230255 171.28102112]
[100.61499786 158.55375671]
[108.35230255 144.75358582]
[108.35230255 129.75358582]
[90.18489075 127.41362000]
[77.58953857 115.64606476]
[74.45492554 99.79563141]
[80.73835754 86.08867645]
[71.97215271 73.91683960]
[63.20594406 61.74499893]
[54.43973541 49.57316208]
[40.09624863 42.89672089]
[38.93672943 28.04731560]
[30.17052460 15.87547874]
[21.40431595 3.70364165]
[7.61885643 9.74846554]
[-7.11646366 12.79364491]
[-22.15706062 12.70845413]
[-36.84551239 9.49905014]
[-50.54029846 3.30809379]
[-62.64381027 -5.59158850]
[-72.62843323 -16.80902481]
[-80.05955505 -29.85227776]
[-84.61447144 -44.15001297]
[-86.09638977 -59.07653046]
[-84.44296265 -73.97914124]
[-79.72888184 -88.20670319]
[-72.16250610 -101.13809967]
[-62.07666397 -112.20930481]
[-70.84287262 -124.38114166]
[-79.60907745 -136.55297852]
[-88.37528229 -148.72480774]
[-103.39525604 -146.01127625]
[-118.10284424 -150.09165955]
[-129.57785034 -160.15580750]
[-135.54191589 -174.20545959]
[-134.81085205 -189.45104980]
[-127.52981567 -202.86557007]
[-115.14447021 -211.78555298]
[-100.11392975 -214.43991089]
[-85.42252350 -210.30165100]
[-73.98723602 -200.19239807]
[-68.07855225 -186.11936951]
[-68.86964417 -170.87675476]
[-76.20344543 -157.49101257]
[-67.43724060 -145.31918335]
[-58.67103577 -133.14733887]
[-49.90482712 -120.97550964]
[-36.20790863 -127.03274536]
[-21.54516029 -130.11085510]
[-6.55700588 -130.07292175]
[8.10140800 -126.91817474]
[21.78883934 -120.78211975]
[33.90600586 -111.93074799]
[43.92182922 -100.74900818]
[51.39669037 -87.72402954]
[56.00175476 -73.42393494]
[57.53341293 -58.47304535]
[55.92230225 -43.52462387]
[51.23641968 -29.23234177]
[43.67827988 -16.22168159]
[33.57615280 -5.06256533]
[42.34236145 7.10927153]
[51.10856628 19.28110886]
[64.82503510 25.08694077]
[66.61157227 40.80695724]
[75.37777710 52.97879410]
[84.14398956 65.15062714]
[92.91019440 77.32246399]
[115.17646027 77.26889038]
[130.77742004 97.20951080]
[144.79412842 91.86799622]
[154.93441772 79.72364044]
[169.58264160 82.42155457]
[183.59934998 77.08003998]
[197.61605835 71.73852539]
[208.86439514 57.19703293]
[226.05593872 60.58091354]
[239.95849609 54.94895554]
[247.51226807 40.79550934]
[263.31317139 38.01856232]
[275.24008179 48.74834442]
[274.14370728 64.75389099]
[260.86508179 73.75711823]
[245.59045410 68.85150909]
[231.68789673 74.48346710]
[226.65742493 85.52890778]
[215.06805420 90.31487274]
[202.95758057 85.75524139]
[188.94087219 91.09675598]
[174.92414856 96.43826294]
[165.78643799 108.20056152]
[150.13565063 105.88471222]
[136.11892700 111.22622681]
[150.78146362 108.06235504]
[164.68826294 113.68385315]
[173.03349304 126.14807892]
[172.93330383 141.14775085]
[164.42230225 153.49937439]
[150.44165039 158.93458557]
[135.82269287 155.57513428]
[125.61732483 144.58192444]
[123.35230255 129.75358582]
[123.35230255 144.75358582]
[131.08959961 158.55375671]
[123.35230255 171.28102112]
[123.35230255 186.28102112]
[123.35230255 201.28102112]
[123.35230255 216.28102112]
[123.35230255 231.28102112]
[123.35230255 246.28102112]
[123.35230255 261.28103638]
[123.35230255 276.28103638]
[123.35230255 291.28103638]
[123.35230255 306.28103638]
[123.35230255 321.28103638]
[123.35230255 336.28103638]
[123.35230255 351.28103638]
[137.89218140 355.34234619]
[150.79656982 363.17684937]
[161.10784912 374.20318604]
[168.06086731 387.60311890]
[171.13967896 402.38226318]
[170.11578369 417.44393921]
[165.06518555 431.67047119]
[156.36265564 444.00613403]
[144.65399170 453.53555298]
[130.80805969 459.55157471]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[25 126]
[26 125]
[30 91]
[31 90]
[32 89]
[33 88]
[35 86]
[36 85]
[37 84]
[51 70]
[52 69]
[53 68]
[54 67]
[93 116]
[94 115]
[96 113]
[97 112]
[98 111]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
