%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCCCCUAGGGGGGGGGGGAAGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCxxxxxxxxxxCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACCCCCCCCCCCAACCCCCUAG\
) } def
/len { sequence length } bind def

/coor [
[73.84902954 477.86700439]
[60.97575760 469.96411133]
[50.85146332 458.75360107]
[44.29687881 445.14425659]
[41.84335709 430.23934937]
[43.68979645 415.24710083]
[49.68650818 401.38290405]
[59.34736633 389.77062988]
[71.88921356 381.35168457]
[86.29534149 376.80853271]
[85.98328400 361.81176758]
[85.67122650 346.81503296]
[85.35916901 331.81826782]
[85.04711151 316.82150269]
[84.73505402 301.82476807]
[84.42300415 286.82800293]
[84.11094666 271.83123779]
[83.79888916 256.83450317]
[83.48683167 241.83773804]
[83.17477417 226.84098816]
[70.56079865 215.76193237]
[69.81662750 198.65257263]
[81.88655090 186.03297424]
[81.10670471 171.05325317]
[80.17107391 156.08247375]
[79.23544312 141.11167908]
[78.29981995 126.14088440]
[69.15808105 114.24850464]
[54.93130493 109.49468994]
[40.70452499 104.74087524]
[26.47774506 99.98706055]
[12.25096607 95.23324585]
[-1.97581327 90.47943115]
[-10.02929211 103.22325134]
[-20.89903450 113.66892242]
[-33.95308685 121.20915985]
[-48.43250275 125.40557861]
[-63.49547195 126.01419830]
[-78.26625061 122.99964142]
[-91.88608551 116.53716278]
[-103.56313324 107.00249481]
[-112.61851501 94.94996643]
[-118.52574921 81.08028412]
[-120.94141388 66.19982910]
[-119.72505188 51.17372131]
[-114.94738770 36.87556076]
[-106.88618469 24.13662720]
[-96.01010895 13.69754410]
[-82.95148468 6.16522360]
[-68.46952820 1.97758734]
[-53.40619278 1.37809813]
[-38.63724518 4.40160942]
[-25.02133369 10.87233925]
[-13.35006523 20.41408539]
[-4.30199528 32.47210693]
[1.59683418 46.34536362]
[4.00347281 61.22728348]
[2.77800155 76.25264740]
[17.00477982 81.00646210]
[31.23155975 85.76027679]
[45.45833969 90.51409149]
[59.68511963 95.26790619]
[73.91189575 100.02172089]
[85.86669922 81.35996246]
[105.60301971 80.07631683]
[114.62054443 68.08947754]
[103.81803894 57.65466690]
[94.37975311 45.97140884]
[86.44879150 33.21682739]
[80.14536285 19.58427429]
[75.56504059 5.28041983]
[72.77725983 -9.47789574]
[71.82427979 -24.46693993]
[72.72054291 -39.45948410]
[75.45246887 -54.22824097]
[79.97863770 -68.54932404]
[86.23043823 -82.20562744]
[94.11309814 -94.99011993]
[103.50710297 -106.70900726]
[114.27005768 -117.18461609]
[126.23879242 -126.25814819]
[139.23187256 -133.79205322]
[153.05230713 -139.67211914]
[167.49060059 -143.80918884]
[182.32785034 -146.14056396]
[197.33915710 -146.63090515]
[212.29693604 -145.27276611]
[226.97442627 -142.08673096]
[241.14913940 -137.12112427]
[254.60617065 -130.45118713]
[267.14151001 -122.17807007]
[278.56515503 -112.42716980]
[288.70391846 -101.34631348]
[297.40405273 -89.10348511]
[304.53372192 -75.88427734]
[309.98483276 -61.88909912]
[313.67474365 -47.33010483]
[315.54748535 -32.42801285]
[315.57470703 -17.40872765]
[313.75598145 -2.49994397]
[310.11889648 12.07232857]
[304.71856689 26.08717537]
[297.63684082 39.33213806]
[288.98110962 51.60642624]
[278.88259888 62.72396088]
[267.49438477 72.51620483]
[254.98910522 80.83470917]
[241.55633545 87.55337524]
[227.39973450 92.57033539]
[212.73387146 95.80954742]
[197.78112793 97.22190094]
[182.76814270 96.78598785]
[167.92253113 94.50840759]
[153.46934509 90.42369080]
[139.62767029 84.59376526]
[126.60738373 77.10700989]
[117.58985138 89.09384155]
[122.02530670 100.91817474]
[118.78604889 113.93862915]
[108.15201569 123.35857391]
[93.27060699 125.20525360]
[94.20623779 140.17604065]
[95.14186859 155.14683533]
[96.07749176 170.11763000]
[99.75634766 178.55076599]
[96.87356567 185.40899658]
[107.79631805 193.35575867]
[112.06568909 205.96530151]
[108.32849121 218.53938293]
[98.17153168 226.52893066]
[98.48358917 241.52569580]
[98.79563904 256.52243042]
[99.10769653 271.51919556]
[99.41975403 286.51596069]
[99.73181152 301.51269531]
[100.04386902 316.50946045]
[100.35592651 331.50622559]
[100.66797638 346.50296021]
[100.98003387 361.49972534]
[101.29209137 376.49645996]
[115.87473297 380.43643188]
[128.75593567 388.32638550]
[138.89149475 399.52670288]
[145.45974731 413.12945557]
[147.92823792 428.03189087]
[146.09686279 443.02600098]
[140.11407471 456.89620972]
[130.46488953 468.51815796]
[117.93150330 476.94970703]
[103.52995300 481.50735474]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 126]
[24 124]
[25 123]
[26 122]
[27 121]
[28 63]
[29 62]
[30 61]
[31 60]
[32 59]
[33 58]
[65 117]
[66 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
