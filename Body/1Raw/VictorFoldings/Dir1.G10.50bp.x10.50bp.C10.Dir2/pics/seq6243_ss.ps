%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCACCCCGGGGGGGGGGCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUxxxxxxxxxxAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCCCCCCCCCCCACCUCAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 363.07766724]
[71.19830322 357.06164551]
[59.48964310 347.53222656]
[50.78712082 335.19653320]
[45.73651886 320.97003174]
[44.71262741 305.90835571]
[47.79142761 291.12918091]
[54.74444962 277.72924805]
[65.05573273 266.70291138]
[77.96011353 258.86840820]
[92.50000000 254.80709839]
[92.50000000 239.80709839]
[92.50000000 224.80709839]
[92.50000000 209.80709839]
[92.50000000 194.80709839]
[92.50000000 179.80709839]
[92.50000000 164.80709839]
[92.50000000 149.80709839]
[92.50000000 134.80709839]
[92.50000000 119.80709839]
[82.51039124 111.94507599]
[78.82164764 99.77967834]
[82.76268005 87.69365692]
[92.91368866 80.04116058]
[93.22573853 65.04440308]
[93.53779602 50.04764938]
[93.84985352 35.05089951]
[94.16191101 20.05414391]
[79.21151733 18.77171898]
[64.37548828 16.52424431]
[49.71604919 13.32114697]
[35.29469299 9.17586040]
[21.17190742 4.10577202]
[7.40692472 -1.86785233]
[-5.94251585 -8.71995640]
[-18.82042313 -16.42180061]
[-31.17278290 -24.94108009]
[-42.94778442 -34.24206161]
[-54.09603882 -44.28573608]
[-64.57078552 -55.02997208]
[-74.32808685 -66.42970276]
[-83.32701874 -78.43712616]
[-91.52984619 -91.00186157]
[-98.90214539 -104.07122040]
[-105.41300964 -117.59037018]
[-111.03511810 -131.50262451]
[-115.74489594 -145.74961853]
[-119.52259064 -160.27160645]
[-122.35235596 -175.00765991]
[-124.22231293 -189.89598083]
[-125.12463379 -204.87413025]
[-125.05552673 -219.87925720]
[-124.01527405 -234.84844971]
[-122.00825500 -249.71891785]
[-119.04287720 -264.42828369]
[-115.13157654 -278.91485596]
[-110.29076385 -293.11785889]
[-104.54074097 -306.97775269]
[-97.90562439 -320.43634033]
[-90.41325378 -333.43725586]
[-82.09503937 -345.92587280]
[-72.98588562 -357.84991455]
[-63.12398911 -369.15927124]
[-52.55072021 -379.80657959]
[-41.31042480 -389.74713135]
[-29.45024872 -398.93927002]
[-17.01993942 -407.34439087]
[-4.07163525 -414.92727661]
[9.34035587 -421.65612793]
[23.15977859 -427.50271606]
[37.32866669 -432.44250488]
[51.78759384 -436.45477295]
[66.47591400 -439.52270508]
[81.33201599 -441.63342285]
[96.29358673 -442.77807617]
[111.29788208 -442.95187378]
[126.28195190 -442.15408325]
[141.18295288 -440.38803101]
[155.93840027 -437.66113281]
[170.48638916 -433.98486328]
[184.76588440 -429.37460327]
[198.71702576 -423.84967041]
[212.28128052 -417.43328857]
[225.40174866 -410.15234375]
[238.02340698 -402.03738403]
[250.09332275 -393.12243652]
[261.56085205 -383.44491577]
[272.37789917 -373.04537964]
[282.49911499 -361.96746826]
[291.88201904 -350.25762939]
[300.48727417 -337.96502686]
[308.27877808 -325.14114380]
[315.22384644 -311.83984375]
[321.29336548 -298.11688232]
[326.46185303 -284.02981567]
[330.70764160 -269.63772583]
[334.01293945 -255.00099182]
[336.36386108 -240.18099976]
[337.75054932 -225.23991394]
[338.16720581 -210.24040222]
[337.61206055 -195.24537659]
[336.08746338 -180.31773376]
[333.59979248 -165.52009583]
[330.15948486 -150.91450500]
[325.78097534 -136.56224060]
[320.48260498 -122.52349854]
[314.28662109 -108.85715485]
[307.21902466 -95.62054443]
[299.30944824 -82.86917877]
[290.59106445 -70.65653992]
[281.10040283 -59.03385925]
[270.87734985 -48.04988098]
[259.96472168 -37.75067902]
[248.40830994 -28.17945099]
[236.25660706 -19.37634277]
[223.56054688 -11.37827682]
[210.37339783 -4.21880102]
[196.75047302 2.07205582]
[182.74891663 7.46790695]
[168.42744446 11.94612026]
[153.84613037 15.48791218]
[139.06614685 18.07842636]
[124.14946747 19.70680046]
[109.15866089 20.36619949]
[108.84661102 35.36295319]
[108.53455353 50.35970688]
[108.22249603 65.35646057]
[107.91043854 80.35321808]
[119.59657288 91.96597290]
[119.42519379 108.43997192]
[107.50000000 119.80709839]
[107.50000000 134.80709839]
[107.50000000 149.80709839]
[107.50000000 164.80709839]
[107.50000000 179.80709839]
[107.50000000 194.80709839]
[107.50000000 209.80709839]
[107.50000000 224.80709839]
[107.50000000 239.80709839]
[107.50000000 254.80709839]
[122.03988647 258.86840820]
[134.94427490 266.70291138]
[145.25555420 277.72924805]
[152.20857239 291.12918091]
[155.28736877 305.90835571]
[154.26348877 320.97003174]
[149.21287537 335.19653320]
[140.51036072 347.53222656]
[128.80169678 357.06164551]
[114.95575714 363.07766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
