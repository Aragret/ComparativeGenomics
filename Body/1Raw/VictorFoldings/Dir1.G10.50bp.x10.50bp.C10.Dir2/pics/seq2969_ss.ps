%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAAGUUAGGGGGGGGGGCCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGxxxxxxxxxxAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAAUCCCCCCCCCCGAACAAGAUA\
) } def
/len { sequence length } bind def

/coor [
[113.52086639 405.13262939]
[99.67492676 399.11657715]
[87.96626282 389.58715820]
[79.26374054 377.25149536]
[74.21314240 363.02499390]
[73.18924713 347.96328735]
[76.26805115 333.18414307]
[83.22106934 319.78421021]
[93.53235626 308.75787354]
[106.43673706 300.92337036]
[120.97662354 296.86206055]
[120.97662354 281.86206055]
[120.97662354 266.86206055]
[120.97662354 251.86206055]
[120.97662354 236.86206055]
[120.97662354 221.86206055]
[120.97662354 206.86206055]
[120.97662354 191.86206055]
[120.97662354 176.86206055]
[120.97662354 161.86206055]
[117.27046204 147.32711792]
[110.08795166 134.15853882]
[102.90544128 120.98995972]
[90.15673065 121.96594238]
[77.61545563 115.00973511]
[70.18357849 100.94990540]
[55.28167725 102.66259766]
[40.37977219 104.37528992]
[25.47787094 106.08797455]
[10.57596874 107.80066681]
[3.86414671 121.69149017]
[-9.30406380 129.72901917]
[-24.72673416 129.34849548]
[-37.48254395 120.67134857]
[-43.50116730 106.46643066]
[-40.86207581 91.26647186]
[-30.40739822 79.92172241]
[-15.47318363 76.05226135]
[-0.82488465 80.89280701]
[8.86327934 92.89876556]
[23.76518059 91.18607330]
[38.66708374 89.47338104]
[53.56898499 87.76069641]
[68.47088623 86.04800415]
[53.56965256 84.32952881]
[43.66754150 73.06239319]
[43.87703705 58.06385803]
[54.08997726 47.07769394]
[69.03340149 45.77608109]
[80.99198151 54.83104324]
[83.79110718 69.56950378]
[84.41508484 54.58249283]
[85.03906250 39.59547424]
[82.25578308 30.82591248]
[85.83513641 24.30410957]
[86.61497498 9.32439518]
[87.23895264 -5.66262054]
[87.86293030 -20.64963722]
[88.48690796 -35.63665390]
[75.65236664 -27.87298584]
[61.50787354 -32.86631012]
[56.39191055 -46.96691132]
[64.04383087 -59.86838913]
[78.87069702 -62.14080811]
[90.03502655 -52.12382126]
[92.21186066 -66.96502686]
[94.38869476 -81.80622864]
[96.56553650 -96.64743805]
[98.74237061 -111.48863983]
[85.09070587 -117.97889709]
[73.95970917 -128.20593262]
[66.33914185 -141.26037598]
[62.90661621 -155.98141479]
[63.96735382 -171.06008911]
[69.42703247 -185.15559387]
[78.80018616 -197.01457214]
[91.25334930 -205.58253479]
[105.67921448 -210.09762573]
[120.79502106 -210.15837097]
[135.25669861 -205.75933838]
[147.77832031 -197.29173279]
[157.24645996 -185.50845337]
[162.81922913 -171.45727539]
[164.00109863 -156.38761902]
[160.68698120 -141.63946533]
[153.17156982 -128.52421570]
[142.12310791 -118.20805359]
[128.52404785 -111.60830688]
[113.58358002 -109.31180573]
[111.40673828 -94.47059631]
[109.22990417 -79.62939453]
[107.05307007 -64.78818512]
[104.87622833 -49.94698334]
[103.47392273 -35.01267624]
[102.84994507 -20.02565956]
[102.22597504 -5.03864336]
[101.60199738 9.94837284]
[104.48477936 16.80659485]
[100.80592346 25.23973846]
[100.02607727 40.21945190]
[99.40209961 55.20647049]
[98.77812195 70.19348145]
[122.95960999 88.87983704]
[116.07402802 113.80744934]
[123.25653076 126.97602844]
[130.43904114 140.14460754]
[131.13713074 125.16086578]
[135.33535767 110.76035309]
[142.79879761 97.74892426]
[153.10977173 86.85472107]
[165.69128418 78.68737793]
[179.83926392 73.70394897]
[194.76199341 72.18330383]
[209.62437439 74.21054840]
[223.59469604 79.67223358]
[235.89118958 88.26271820]
[245.82571411 99.50127411]
[252.84234619 112.75898743]
[256.54843140 127.29394531]
[256.73654175 142.29275513]
[253.39619446 156.91610718]
[246.71429443 170.34562683]
[237.06477356 181.82981873]
[224.98762512 190.72602844]
[211.15867615 196.53639221]
[196.35182190 198.93577576]
[181.39566040 197.78988647]
[167.12713623 193.16288757]
[154.34472656 185.31367493]
[143.76374817 174.68151855]
[135.97662354 161.86206055]
[135.97662354 176.86206055]
[135.97662354 191.86206055]
[135.97662354 206.86206055]
[135.97662354 221.86206055]
[135.97662354 236.86206055]
[135.97662354 251.86206055]
[135.97662354 266.86206055]
[135.97662354 281.86206055]
[135.97662354 296.86206055]
[150.51651001 300.92337036]
[163.42088318 308.75787354]
[173.73217773 319.78421021]
[180.68519592 333.18414307]
[183.76399231 347.96328735]
[182.74009705 363.02499390]
[177.68949890 377.25149536]
[168.98698425 389.58715820]
[157.27832031 399.11657715]
[143.43237305 405.13262939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 106]
[22 105]
[23 104]
[26 44]
[27 43]
[28 42]
[29 41]
[30 40]
[51 102]
[52 101]
[53 100]
[55 99]
[56 97]
[57 96]
[58 95]
[59 94]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
