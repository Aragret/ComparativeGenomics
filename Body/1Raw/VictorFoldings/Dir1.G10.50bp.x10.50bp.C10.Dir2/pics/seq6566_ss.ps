%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAACCAUCGGGGGGGGGGUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUxxxxxxxxxxCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCUCCCCCCCCCCCCCUUACCAUC\
) } def
/len { sequence length } bind def

/coor [
[84.07933044 398.07723999]
[70.85913086 390.80477905]
[59.97232819 380.35775757]
[52.16119766 367.44851685]
[47.95831680 352.95721436]
[47.65024185 337.87185669]
[51.25798416 323.22103882]
[58.53555679 310.00366211]
[68.98676300 299.12088013]
[81.89902496 291.31472778]
[96.39196014 287.11746216]
[96.07991028 272.12069702]
[95.76785278 257.12393188]
[95.45579529 242.12718201]
[95.14373779 227.13043213]
[94.83168030 212.13368225]
[94.51962280 197.13693237]
[94.20757294 182.14016724]
[93.89551544 167.14341736]
[93.58345795 152.14666748]
[86.52571869 150.78277588]
[79.72019958 148.46830750]
[73.29429626 145.24656677]
[67.36828613 141.17788696]
[62.05309296 136.33839417]
[57.44821930 130.81871033]
[53.63985825 124.72213745]
[50.69929504 118.16279602]
[48.68157196 111.26347351]
[33.72132492 112.35478210]
[18.76107597 113.44609070]
[3.80082655 114.53740692]
[-11.15942192 115.62871552]
[-26.11967087 116.72002411]
[-41.47693253 123.90270233]
[-52.63022232 111.13397217]
[-43.44803619 96.88182068]
[-27.21098137 101.75977325]
[-12.25073242 100.66846466]
[2.70951581 99.57715607]
[17.66976547 98.48584747]
[32.63001251 97.39453125]
[47.59026337 96.30322266]
[56.81628418 70.07319641]
[78.13700867 52.22493744]
[105.58102417 47.75730896]
[109.28718567 33.22237015]
[112.99334717 18.68743515]
[116.69950867 4.15249872]
[110.78692627 -7.35816002]
[114.21833038 -19.41819572]
[124.61715698 -25.67692947]
[128.62489319 -40.13161850]
[132.63264465 -54.58630753]
[134.03494263 -69.52061462]
[132.78807068 -84.46870422]
[131.54119873 -99.41678619]
[130.29431152 -114.36487579]
[129.04743958 -129.31295776]
[114.11016846 -131.20281982]
[99.89237213 -136.15739441]
[87.01557922 -143.96008301]
[76.04271698 -154.26979065]
[67.45346832 -166.63581848]
[61.62332535 -180.51756287]
[58.80714798 -195.30819702]
[59.12805176 -210.36112976]
[62.57200623 -225.01831055]
[68.98846436 -238.63897705]
[78.09690857 -250.62771606]
[89.49917603 -260.46041870]
[102.69680023 -267.70724487]
[117.11283875 -272.05139160]
[132.11708069 -273.30294800]
[147.05360413 -271.40719604]
[161.26945496 -266.44705200]
[174.14317322 -258.63928223]
[185.11198425 -248.32527161]
[193.69636536 -235.95587158]
[199.52104187 -222.07182312]
[202.33140564 -207.28009033]
[202.00457764 -192.22727966]
[198.55485535 -177.57145691]
[192.13304138 -163.95330811]
[183.01988220 -151.96815491]
[171.61373901 -142.13993835]
[158.41326904 -134.89831543]
[143.99552917 -130.55982971]
[145.24240112 -115.61174774]
[146.48927307 -100.66366577]
[147.73616028 -85.71557617]
[148.98303223 -70.76748657]
[155.85824585 -84.09908295]
[166.62620544 -94.54183960]
[180.16230774 -101.00511169]
[195.05285645 -102.81388855]
[209.74267578 -99.77925873]
[222.69758606 -92.21815491]
[232.56459045 -80.92026520]
[238.31315613 -67.06552124]
[239.34294128 -52.10091400]
[235.54637146 -37.58932877]
[227.31996155 -25.04635429]
[215.52287292 -15.78196812]
[201.38719177 -10.76373768]
[186.38925171 -10.51576328]
[172.09539795 -15.06394482]
[159.99850464 -23.93327141]
[151.36193848 -36.19743729]
[147.08732605 -50.57856750]
[143.07958984 -36.12387848]
[139.07183838 -21.66918945]
[144.39651489 -4.97644138]
[131.23445129 7.85865974]
[127.52828217 22.39359665]
[123.82212067 36.92853165]
[120.11595917 51.46346664]
[129.30622864 56.39275360]
[137.34185791 63.04012299]
[143.90625000 71.14367676]
[148.74078369 80.38414001]
[151.65498352 90.39744568]
[152.53402710 100.78908539]
[151.34327698 111.14963531]
[148.12965393 121.07089996]
[143.01977539 130.16198730]
[136.21495056 138.06472778]
[127.98330688 144.46775818]
[118.64913940 149.11880493]
[108.58020782 151.83460999]
[108.89226532 166.83135986]
[109.20432281 181.82810974]
[109.51638031 196.82487488]
[109.82843781 211.82162476]
[110.14049530 226.81837463]
[110.45254517 241.81512451]
[110.76460266 256.81188965]
[111.07666016 271.80862427]
[111.38871765 286.80538940]
[126.04370880 290.39614868]
[139.26951599 297.65841675]
[150.16438293 308.09701538]
[157.98548889 321.00021362]
[162.19955444 335.48828125]
[162.51927185 350.57339478]
[158.92285156 365.22698975]
[151.65548706 378.44998169]
[141.21267700 389.34082031]
[128.30645752 397.15695190]
[113.81676483 401.36541748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[29 43]
[30 42]
[31 41]
[32 40]
[33 39]
[34 38]
[46 117]
[47 116]
[48 115]
[49 114]
[52 112]
[53 111]
[54 110]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
