%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUACGAUAGGGGGGGGGGGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGAGxxxxxxxxxxCAGAACCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGCCCCCCCCCCAACUACUAUA\
) } def
/len { sequence length } bind def

/coor [
[83.75836945 384.45648193]
[69.26867676 380.24801636]
[56.36244965 372.43191528]
[45.91964722 361.54107666]
[38.65228653 348.31805420]
[35.05585861 333.66445923]
[35.37557983 318.57937622]
[39.58964920 304.09130859]
[47.41074753 291.18807983]
[58.30561447 280.74948120]
[71.53142548 273.48724365]
[86.18641663 269.89645386]
[86.49847412 254.89970398]
[86.81053162 239.90295410]
[87.12258911 224.90620422]
[87.43463898 209.90945435]
[87.74669647 194.91268921]
[88.05875397 179.91593933]
[88.37081146 164.91918945]
[88.68286896 149.92243958]
[88.99492645 134.92567444]
[89.30697632 119.92892456]
[84.39389801 112.75547028]
[83.05464172 105.09578705]
[84.84336853 98.46408081]
[88.75423431 93.94229126]
[93.48664856 92.00436401]
[87.99961090 78.04397583]
[82.51258087 64.08358765]
[70.98780060 58.19858932]
[66.72418213 46.40704346]
[71.50467682 35.25114059]
[66.30925751 21.17962074]
[61.11384201 7.10810184]
[57.55342865 4.37224054]
[55.31375504 0.97298902]
[54.43999481 -2.57925367]
[54.80231476 -5.81386375]
[56.12511063 -8.35503387]
[44.98192596 -19.58624077]
[49.03743744 -33.91809845]
[45.02969360 -48.37278366]
[41.02195358 -62.82747269]
[29.87877083 -74.05867767]
[33.93428040 -88.39053345]
[29.92654037 -102.84522247]
[25.91880035 -117.29991150]
[21.91106033 -131.75460815]
[17.75317383 -146.16682434]
[13.44558811 -160.53500366]
[-8.18876362 -168.87338257]
[-14.30103493 -194.83502197]
[-24.51451492 -205.82067871]
[-34.72799301 -216.80635071]
[-44.94147491 -227.79200745]
[-60.76727676 -232.09039307]
[-64.69550323 -248.01211548]
[-52.68513489 -259.17825317]
[-37.09140778 -254.10208130]
[-33.95581055 -238.00549316]
[-23.74233055 -227.01983643]
[-13.52884960 -216.03416443]
[-3.31536984 -205.04849243]
[10.40468407 -211.11151123]
[9.15780926 -226.05960083]
[-5.47455263 -230.01811218]
[-17.86879921 -238.74499512]
[-26.52826500 -251.18643188]
[-30.40727615 -265.84005737]
[-29.03742409 -280.93640137]
[-22.58412552 -294.65246582]
[-11.82664585 -305.33200073]
[1.93599451 -311.68539429]
[17.04189110 -312.94543457]
[31.66693306 -308.95996094]
[44.04507446 -300.21026611]
[52.68159866 -287.75289917]
[56.53359985 -273.09213257]
[55.13592911 -257.99835205]
[48.65736389 -244.29417419]
[37.88022232 -233.63449097]
[24.10589600 -227.30647278]
[25.35276985 -212.35838318]
[37.03045654 -201.46240234]
[41.07126236 -187.06092834]
[37.29714584 -173.63658142]
[27.81377220 -164.84259033]
[32.12135696 -150.47439575]
[37.08694839 -144.93467712]
[36.36574936 -135.76234436]
[40.37348938 -121.30765533]
[44.38122940 -106.85296631]
[48.38896942 -92.39827728]
[59.24549484 -82.20096588]
[55.47664261 -66.83521271]
[59.48438263 -52.38052368]
[63.49212265 -37.92583847]
[74.34864807 -27.72852707]
[70.57979584 -12.36277390]
[75.18536377 1.91268635]
[80.38077545 15.98420525]
[85.57619476 30.05572510]
[99.65239716 40.48934174]
[96.47296906 58.59655380]
[101.96000671 72.55694580]
[107.44703674 86.51733398]
[118.94883728 96.14585876]
[133.65679932 99.09134674]
[148.36476135 102.03682709]
[161.42044067 93.54054260]
[176.29444885 96.73720551]
[184.31390381 109.23616028]
[199.02186584 112.18164825]
[213.72982788 115.12712860]
[228.43778992 118.07260895]
[242.53222656 110.40930176]
[257.25473022 116.78327179]
[261.31146240 132.30496216]
[251.59042358 145.06744385]
[235.54878235 145.28044128]
[225.49230957 132.78057861]
[210.78434753 129.83508301]
[196.07638550 126.88961029]
[181.36842346 123.94412231]
[169.15426636 132.39100647]
[154.19633484 129.61338806]
[145.41928101 116.74478912]
[130.71131897 113.79930878]
[116.00335693 110.85382080]
[104.30373383 120.24098206]
[103.99167633 135.23773193]
[103.67961884 150.23449707]
[103.36756134 165.23124695]
[103.05551147 180.22799683]
[102.74345398 195.22474670]
[102.43139648 210.22151184]
[102.11933899 225.21826172]
[101.80728149 240.21501160]
[101.49522400 255.21176147]
[101.18317413 270.20852661]
[115.67610931 274.40579224]
[128.58836365 282.21194458]
[139.03958130 293.09472656]
[146.31715393 306.31210327]
[149.92489624 320.96292114]
[149.61682129 336.04827881]
[145.41394043 350.53958130]
[137.60281372 363.44882202]
[126.71600342 373.89584351]
[113.49580383 381.16830444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[27 106]
[28 105]
[29 104]
[32 102]
[33 101]
[34 100]
[39 99]
[41 97]
[42 96]
[43 95]
[45 93]
[46 92]
[47 91]
[48 90]
[49 88]
[50 87]
[52 63]
[53 62]
[54 61]
[55 60]
[64 83]
[65 82]
[107 129]
[108 128]
[109 127]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
