%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUCAGGGUGGGGGGGGGGGAGCAUCAAACUCAAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCxxxxxxxxxxACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUCCCCCCCCCCUGAUGAGGGU\
) } def
/len { sequence length } bind def

/coor [
[62.30805588 391.90341187]
[47.81836319 387.69494629]
[34.91213608 379.87881470]
[24.46933365 368.98797607]
[17.20196915 355.76498413]
[13.60554314 341.11138916]
[13.92526531 326.02627563]
[18.13933563 311.53820801]
[25.96043205 298.63500977]
[36.85530090 288.19641113]
[50.08110809 280.93414307]
[64.73609924 277.34338379]
[65.04815674 262.34661865]
[65.36021423 247.34988403]
[65.67227173 232.35311890]
[65.98432922 217.35636902]
[66.29638672 202.35961914]
[66.60843658 187.36286926]
[66.92049408 172.36610413]
[67.23255157 157.36935425]
[67.54460907 142.37260437]
[67.85666656 127.37584686]
[87.97173309 89.15576935]
[84.26557159 74.62082672]
[80.55941010 60.08589554]
[75.80559540 45.85911560]
[70.02932739 32.01589584]
[64.25305176 18.17267990]
[58.47677994 4.32946205]
[52.70050812 -9.51375580]
[46.92423248 -23.35697365]
[32.03884125 -34.14608765]
[34.88464737 -51.43484879]
[28.82163429 -65.15490723]
[17.06201935 -70.55539703]
[12.31157970 -82.15937042]
[16.62386894 -93.50447845]
[10.84759617 -107.34769440]
[5.07132339 -121.19091797]
[-0.70494890 -135.03413391]
[-7.19311380 -148.55831909]
[-14.37562275 -161.72689819]
[-21.55813217 -174.89549255]
[-31.06649017 -186.49682617]
[-42.56829453 -196.12535095]
[-54.07009888 -205.75387573]
[-69.61847687 -208.67938232]
[-74.41099548 -222.78189087]
[-85.91279602 -232.41041565]
[-97.41460419 -242.03894043]
[-112.43310547 -238.13714600]
[-126.86441803 -243.83949280]
[-135.15940857 -256.95333862]
[-134.12846375 -272.43612671]
[-124.16802979 -284.33441162]
[-109.10808563 -288.07305908]
[-94.73947906 -282.21450806]
[-86.58724213 -269.01144409]
[-87.78607178 -253.54075623]
[-76.28427124 -243.91223145]
[-64.78247070 -234.28369141]
[-50.05677414 -232.04690552]
[-44.44157028 -217.25569153]
[-32.93976593 -207.62715149]
[-21.43796349 -197.99862671]
[-26.15753365 -212.23681641]
[-26.33350372 -227.23577881]
[-21.94927597 -241.58076477]
[-13.41839218 -253.91867065]
[-1.54552686 -263.08572388]
[12.54941368 -268.21725464]
[27.53692436 -268.82925415]
[42.00331116 -264.86395264]
[54.58403015 -256.69537354]
[64.09241486 -245.09405518]
[69.63157654 -231.15426636]
[70.67903900 -216.19088745]
[67.13600159 -201.61532593]
[59.33666611 -188.80242920]
[48.01669312 -178.96076965]
[34.24384308 -173.01866150]
[19.31724167 -171.53659058]
[4.64483500 -174.65435791]
[-8.38954926 -182.07800293]
[-1.20704043 -168.90940857]
[5.97546864 -155.74082947]
[12.97976780 -169.00506592]
[27.67606544 -172.00819397]
[39.32255554 -162.55520630]
[39.40659714 -147.55543518]
[27.86676407 -137.97251892]
[13.13826847 -140.81040955]
[18.91454124 -126.96718597]
[24.69081306 -113.12397003]
[30.46708679 -99.28075409]
[44.96512985 -89.44171143]
[42.54168701 -71.21791840]
[48.60470200 -57.49786377]
[59.80172348 -52.81448746]
[64.94698334 -41.38009644]
[60.76745224 -29.13324547]
[66.54372406 -15.29002857]
[72.31999969 -1.44681060]
[78.09626770 12.39640713]
[83.87254333 26.23962402]
[89.64881134 40.08284378]
[95.71718597 26.36515808]
[109.10533905 19.60074234]
[123.74831390 22.85394287]
[133.01269531 34.65102768]
[132.70162964 49.64780045]
[122.95603180 61.05057907]
[108.19075775 63.69379044]
[95.09434509 56.37973404]
[98.80050659 70.91467285]
[102.50666809 85.44960785]
[112.60531616 96.54092407]
[126.73012543 101.58967590]
[140.85491943 106.63843536]
[156.88238525 103.16675568]
[167.70080566 115.49127960]
[162.18112183 130.93359375]
[146.00151062 133.60797119]
[135.80616760 120.76323700]
[121.68136597 115.71447754]
[107.55656433 110.66572571]
[101.38077545 114.92127228]
[102.57611847 129.87356567]
[89.02920532 123.43235779]
[82.85341644 127.68790436]
[82.54135895 142.68466187]
[82.22930908 157.68141174]
[81.91725159 172.67816162]
[81.60519409 187.67491150]
[81.29313660 202.67167664]
[80.98107910 217.66842651]
[80.66902161 232.66517639]
[80.35697174 247.66192627]
[80.04491425 262.65869141]
[79.73285675 277.65542603]
[94.22579193 281.85272217]
[107.13805389 289.65887451]
[117.58926392 300.54162598]
[124.86683655 313.75903320]
[128.47457886 328.40985107]
[128.16650391 343.49517822]
[123.96362305 357.98651123]
[116.15248871 370.89575195]
[105.26568604 381.34277344]
[92.04549408 388.61523438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 116]
[24 115]
[25 114]
[26 106]
[27 105]
[28 104]
[29 103]
[30 102]
[31 101]
[33 98]
[34 97]
[37 95]
[38 94]
[39 93]
[40 92]
[41 86]
[42 85]
[43 84]
[44 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
