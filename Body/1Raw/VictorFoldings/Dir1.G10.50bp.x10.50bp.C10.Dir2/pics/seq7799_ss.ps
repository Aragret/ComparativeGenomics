%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCCCCAGGGGGGGGGGUUCGUAUAAUAAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCxxxxxxxxxxCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUACCCCCCCCCCGAAGGCCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 389.10064697]
[71.19830322 383.08459473]
[59.48964310 373.55517578]
[50.78712082 361.21951294]
[45.73651886 346.99301147]
[44.71262741 331.93130493]
[47.79142761 317.15216064]
[54.74444962 303.75222778]
[65.05573273 292.72589111]
[77.96011353 284.89138794]
[92.50000000 280.83007812]
[92.50000000 265.83007812]
[92.50000000 250.83007812]
[92.50000000 235.83007812]
[92.50000000 220.83007812]
[92.50000000 205.83007812]
[92.50000000 190.83007812]
[92.50000000 175.83007812]
[92.50000000 160.83007812]
[92.50000000 145.83007812]
[92.50000000 130.83007812]
[83.14591980 127.47082520]
[75.15458679 121.30432129]
[69.35774994 112.85234833]
[66.39492798 102.87933350]
[66.64398956 92.32350159]
[70.17584229 82.20866394]
[76.73844910 73.54490662]
[85.77261353 67.22787476]
[96.45881653 63.94657516]
[90.11168671 50.35562515]
[83.76455688 36.76467514]
[77.41742706 23.17372322]
[71.07029724 9.58277225]
[56.46180725 9.32892990]
[43.40539932 1.21576083]
[36.00384521 -13.11950970]
[37.03672409 -29.98291969]
[23.79413986 -37.02805328]
[10.55155468 -44.07318878]
[-3.10468650 -50.27859497]
[-17.12139893 -55.62010956]
[-31.13811302 -60.96162033]
[-45.15482712 -66.30313110]
[-61.25104141 -63.16563797]
[-71.81072235 -75.71255493]
[-65.97097015 -91.03669739]
[-49.73922348 -93.37390137]
[-39.81331253 -80.31984711]
[-25.79660034 -74.97833252]
[-11.77988720 -69.63682556]
[2.23682594 -64.29531097]
[-2.48777580 -78.53181458]
[4.06554174 -92.02455902]
[18.17610550 -97.11296844]
[31.83258820 -90.90809631]
[37.28146362 -76.93276978]
[31.42911530 -63.12154007]
[17.59668922 -57.31577301]
[30.83927536 -50.27064133]
[44.08185959 -43.22550583]
[57.25044250 -50.40801239]
[58.49731827 -65.35610199]
[59.74419403 -80.30418396]
[60.99106598 -95.25227356]
[46.70172882 -100.05625153]
[33.97765732 -108.14089966]
[23.55861282 -119.03617096]
[16.05034637 -132.10864258]
[11.88937759 -146.59828186]
[11.31762028 -161.66268921]
[14.36831570 -176.42604065]
[20.86410141 -190.03002930]
[30.42731857 -201.68370056]
[42.50197601 -210.70956421]
[56.38607025 -216.58283997]
[71.27239227 -218.96208191]
[86.29547882 -217.70895386]
[100.58190155 -212.89630127]
[113.30107117 -204.80395508]
[123.71350861 -193.90235901]
[131.21385193 -180.82534790]
[135.36602783 -166.33319092]
[135.92864990 -151.26843262]
[132.86900330 -136.50692749]
[126.36497498 -122.90689087]
[116.79469299 -111.25901031]
[104.71456909 -102.24047089]
[90.82691956 -96.37561035]
[75.93915558 -94.00540161]
[74.69227600 -79.05731201]
[73.44540405 -64.10923004]
[72.19853210 -49.16114044]
[91.29074860 -35.67833328]
[95.59917450 -14.14923382]
[84.66124725 3.23564267]
[91.00837708 16.82659340]
[97.35550690 30.41754532]
[103.70263672 44.00849533]
[110.04976654 57.59944534]
[123.83214569 63.51940918]
[138.05892944 58.76559448]
[152.28570557 54.01177979]
[162.74604797 41.38192749]
[178.86653137 44.39232254]
[184.06376648 59.94612503]
[172.99128723 72.04291534]
[157.03952026 68.23855591]
[142.81274414 72.99237061]
[128.58596802 77.74618530]
[132.02354431 88.64211273]
[131.72276306 99.35979462]
[146.36627197 102.61061859]
[161.00976562 105.86145020]
[175.65327454 109.11227417]
[188.84864807 100.41413116]
[204.31266785 103.67595673]
[212.87081909 116.96255493]
[209.44567871 132.39123535]
[196.06933594 140.80842590]
[180.67773438 137.22035217]
[172.40243530 123.75577545]
[157.75894165 120.50495148]
[143.11543274 117.25412750]
[128.47193909 114.00329590]
[125.59870911 118.74699402]
[121.94338226 122.91793060]
[117.61764526 126.38867950]
[112.75364685 129.05319214]
[107.50000000 130.83007812]
[107.50000000 145.83007812]
[107.50000000 160.83007812]
[107.50000000 175.83007812]
[107.50000000 190.83007812]
[107.50000000 205.83007812]
[107.50000000 220.83007812]
[107.50000000 235.83007812]
[107.50000000 250.83007812]
[107.50000000 265.83007812]
[107.50000000 280.83007812]
[122.03988647 284.89138794]
[134.94427490 292.72589111]
[145.25555420 303.75222778]
[152.20857239 317.15216064]
[155.28736877 331.93130493]
[154.26348877 346.99301147]
[149.21287537 361.21951294]
[140.51036072 373.55517578]
[128.80169678 383.08459473]
[114.95575714 389.10064697]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 100]
[31 99]
[32 98]
[33 97]
[34 96]
[38 61]
[39 60]
[40 59]
[41 52]
[42 51]
[43 50]
[44 49]
[62 93]
[63 92]
[64 91]
[65 90]
[101 110]
[102 109]
[103 108]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
