%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAACCAAACCGGGGGGGGGGCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACAxxxxxxxxxxCCUUCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCCCCCCCCCCCAACCAACCACACC\
) } def
/len { sequence length } bind def

/coor [
[37.21269608 210.50341797]
[39.35093689 195.65660095]
[43.12361145 181.13879395]
[48.48410416 167.12931824]
[55.36619949 153.80126953]
[63.68487167 141.31930542]
[73.33735657 129.83760071]
[84.20440674 119.49800873]
[96.15261841 110.42769623]
[82.91938019 117.49037170]
[69.68614197 124.55305481]
[56.45290375 131.61572266]
[51.69412231 148.42158508]
[36.56403732 156.45298767]
[20.61800766 151.18858337]
[7.52873421 158.51461792]
[-5.56053877 165.84066772]
[-18.64981079 173.16671753]
[-31.73908424 180.49275208]
[-44.82835770 187.81880188]
[-53.09171677 201.31056213]
[-67.97668457 200.77488708]
[-76.24005127 214.26663208]
[-91.12501526 213.73097229]
[-99.04380798 228.09149170]
[-115.44287109 228.14332581]
[-123.45226288 213.83312988]
[-114.83260345 199.88201904]
[-98.45106506 200.64169312]
[-91.12393188 187.67395020]
[-75.30273438 187.68560791]
[-67.97560120 174.71786499]
[-52.15440369 174.72952271]
[-39.06512833 167.40348816]
[-25.97585678 160.07743835]
[-12.88658333 152.75138855]
[0.20268929 145.42535400]
[13.29196262 138.09930420]
[15.03522301 125.29978180]
[23.97839546 115.71017456]
[37.00701904 112.99978638]
[49.39022827 118.38249207]
[62.62346649 111.31981659]
[75.85670471 104.25713348]
[89.08994293 97.19445801]
[81.97454834 95.26179504]
[74.87972260 93.25299072]
[64.76124573 82.17975616]
[54.64277267 71.10652161]
[44.52429962 60.03329468]
[34.18628693 49.16473770]
[23.63287735 38.50521088]
[13.07946777 27.84568024]
[2.52605820 17.18615150]
[-12.54326820 20.49053574]
[-26.99891090 15.10185051]
[-36.22812653 2.73960567]
[-37.28590775 -12.65145206]
[-29.83472061 -26.16009140]
[-16.25220871 -33.47575378]
[-0.87250447 -32.26403809]
[11.39678478 -22.91160202]
[16.64057350 -8.40276909]
[13.18558693 6.63274240]
[23.73899651 17.29227066]
[34.29240417 27.95179939]
[44.84581375 38.61132812]
[49.58513641 39.52648926]
[53.78073120 43.46368027]
[55.59753036 49.91481781]
[65.71600342 60.98804855]
[75.83448029 72.06127930]
[85.95295715 83.13451385]
[82.38195038 68.56578064]
[78.81094360 53.99705124]
[75.23992920 39.42832184]
[71.66892242 24.85959053]
[63.55770874 12.24181843]
[59.34329224 -2.15396929]
[59.36931992 -17.15394592]
[63.63366699 -31.53502274]
[71.78862000 -44.12456894]
[83.16923523 -53.89604568]
[96.84752655 -60.05268478]
[111.70819092 -62.09247971]
[126.53948212 -59.84910202]
[140.13208008 -53.50548553]
[151.37762451 -43.57887650]
[159.35917664 -30.87868881]
[163.42593384 -16.44049263]
[163.24627686 -1.44156849]
[158.83485413 12.89507675]
[150.55139160 25.40044022]
[139.07534790 35.05232239]
[131.35652161 47.91388321]
[123.63770294 60.77544022]
[115.91887665 73.63700104]
[108.20005035 86.49856567]
[121.14011383 78.91208649]
[134.08018494 71.32560730]
[147.02024841 63.73912430]
[150.76576233 48.38508224]
[164.31439209 40.24812317]
[179.62799072 44.15576172]
[187.62124634 57.78966522]
[183.55192566 73.06108093]
[169.83427429 80.90975189]
[154.60673523 76.67919159]
[141.66665649 84.26567078]
[128.72659302 91.85214996]
[115.78652954 99.43862915]
[129.76492310 93.99763489]
[144.26080322 90.14151764]
[159.09506226 87.91790009]
[174.08447266 87.35426331]
[189.04383850 88.45757294]
[203.78837585 91.21419525]
[218.13591003 95.59007263]
[231.90919495 101.53114319]
[244.93809509 108.96401978]
[257.06164551 117.79688263]
[268.13009644 127.92060089]
[278.00668335 139.21011353]
[286.56939697 151.52595520]
[293.71246338 164.71597290]
[299.34762573 178.61723328]
[303.40527344 193.05798340]
[305.83529663 207.85984802]
[306.60766602 222.83993530]
[305.71282959 237.81323242]
[303.16186523 252.59472656]
[298.98626709 267.00180054]
[293.23760986 280.85653687]
[285.98693848 293.98770142]
[277.32379150 306.23309326]
[267.35522461 317.44149780]
[256.20437622 327.47436523]
[244.00900269 336.20779419]
[230.91976929 343.53387451]
[217.09834290 349.36212158]
[202.71551514 353.62054443]
[187.94894409 356.25650024]
[172.98104858 357.23745728]
[157.99674988 356.55126953]
[143.18116760 354.20645142]
[128.71730042 350.23190308]
[114.78386688 344.67678833]
[101.55297852 337.60974121]
[89.18807983 329.11801147]
[77.84194183 319.30651855]
[67.65471649 308.29650879]
[58.75226974 296.22396851]
[51.24456406 283.23803711]
[45.22436142 269.49914551]
[40.76602554 255.17701721]
[37.92463684 240.44859314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 45]
[10 44]
[11 43]
[12 42]
[15 38]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[22 31]
[24 29]
[47 73]
[48 72]
[49 71]
[50 70]
[51 67]
[52 66]
[53 65]
[54 64]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
