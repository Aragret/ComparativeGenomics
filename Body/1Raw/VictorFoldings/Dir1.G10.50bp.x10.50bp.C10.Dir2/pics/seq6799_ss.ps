%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCCCAUUGGGGGGGGGGCUAUACCAACACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUxxxxxxxxxxCCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUCCCCCCCCCCAAACCCCAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 414.49649048]
[71.19830322 408.48046875]
[59.48964310 398.95104980]
[50.78712082 386.61538696]
[45.73651886 372.38885498]
[44.71262741 357.32717896]
[47.79142761 342.54803467]
[54.74444962 329.14810181]
[65.05573273 318.12176514]
[77.96011353 310.28726196]
[92.50000000 306.22595215]
[92.50000000 291.22595215]
[92.50000000 276.22595215]
[92.50000000 261.22595215]
[92.50000000 246.22593689]
[92.50000000 231.22593689]
[92.50000000 216.22593689]
[92.50000000 201.22593689]
[92.50000000 186.22593689]
[92.50000000 171.22593689]
[77.85705566 168.11074829]
[64.18161774 162.01957703]
[52.07120132 153.21856689]
[42.05495453 142.09223938]
[34.57052612 129.12677002]
[29.94492912 114.88865662]
[28.38027573 100.00000000]
[29.94492912 85.11134338]
[34.57052612 70.87322998]
[42.05495453 57.90776062]
[52.07120132 46.78144073]
[64.18161774 37.98041916]
[77.85705566 31.88924408]
[92.50000000 28.77405739]
[92.50000000 13.77405739]
[81.61714172 24.09701347]
[66.65659332 25.18419075]
[54.39562607 16.54308510]
[50.38858032 2.08820415]
[56.45068741 -11.63225079]
[69.83574677 -18.40277863]
[84.48020935 -15.15626431]
[93.75010681 -3.36302853]
[95.92694092 -18.20423317]
[98.10378265 -33.04544067]
[100.28061676 -47.88664627]
[102.45745087 -62.72785187]
[104.63429260 -77.56905365]
[90.07118988 -81.21525574]
[75.94351196 -86.29337311]
[62.39165878 -92.75293732]
[49.55032730 -100.52974701]
[37.54713821 -109.54650879]
[26.50138664 -119.71361542]
[16.52285576 -130.93000793]
[7.71072102 -143.08422852]
[0.15256119 -156.05545044]
[-6.07650471 -169.71478271]
[-10.91456795 -183.92646790]
[-14.31354427 -198.54924011]
[-16.23965263 -213.43777466]
[-16.67374802 -228.44412231]
[-15.61151981 -243.41911316]
[-13.06352139 -258.21392822]
[-9.05507851 -272.68148804]
[-3.62603021 -286.67807007]
[3.16966677 -300.06451416]
[11.26447105 -312.70782471]
[20.57793236 -324.48226929]
[31.01748466 -335.27090454]
[42.47937393 -344.96646118]
[54.84968185 -353.47256470]
[68.00546265 -360.70471191]
[81.81597137 -366.59103394]
[96.14394379 -371.07296753]
[110.84697723 -374.10601807]
[125.77894592 -375.66003418]
[140.79144287 -375.71954346]
[155.73526001 -374.28399658]
[170.46188354 -371.36764526]
[184.82495117 -366.99945068]
[198.68170166 -361.22283936]
[211.89440918 -354.09524536]
[224.33178711 -345.68746948]
[235.87019348 -336.08312988]
[246.39497375 -325.37762451]
[255.80151367 -313.67736816]
[263.99630737 -301.09869385]
[270.89794922 -287.76654053]
[276.43780518 -273.81344604]
[280.56085205 -259.37811279]
[283.22610474 -244.60397339]
[284.40704346 -229.63787842]
[284.09194946 -214.62857056]
[282.28396606 -199.72521973]
[279.00103760 -185.07595825]
[274.27584839 -170.82635498]
[268.15527344 -157.11805725]
[260.70022583 -144.08731079]
[251.98474121 -131.86360168]
[242.09545898 -120.56842804]
[231.13067627 -110.31404877]
[219.19937134 -101.20238495]
[206.42010498 -93.32399750]
[192.91990662 -86.75717163]
[178.83293152 -81.56719208]
[164.29920959 -77.80562592]
[149.46316528 -75.50985718]
[134.47227478 -74.70272064]
[119.47549438 -75.39221954]
[117.29866028 -60.55101395]
[115.12181854 -45.70980835]
[112.94498444 -30.86860275]
[110.76815033 -16.02739716]
[108.59130859 -1.18619144]
[107.50000000 13.77405739]
[107.50000000 28.77405739]
[122.14294434 31.88924408]
[135.81838989 37.98041916]
[147.92880249 46.78144073]
[157.94503784 57.90776062]
[165.42947388 70.87322998]
[170.05506897 85.11134338]
[171.61972046 100.00000000]
[170.05506897 114.88865662]
[165.42947388 129.12677002]
[157.94503784 142.09223938]
[147.92880249 153.21856689]
[135.81838989 162.01957703]
[122.14294434 168.11074829]
[107.50000000 171.22593689]
[107.50000000 186.22593689]
[107.50000000 201.22593689]
[107.50000000 216.22593689]
[107.50000000 231.22593689]
[107.50000000 246.22593689]
[107.50000000 261.22595215]
[107.50000000 276.22595215]
[107.50000000 291.22595215]
[107.50000000 306.22595215]
[122.03988647 310.28726196]
[134.94427490 318.12176514]
[145.25555420 329.14810181]
[152.20857239 342.54803467]
[155.28736877 357.32717896]
[154.26348877 372.38885498]
[149.21287537 386.61538696]
[140.51036072 398.95104980]
[128.80169678 408.48046875]
[114.95575714 414.49649048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 117]
[35 116]
[43 115]
[44 114]
[45 113]
[46 112]
[47 111]
[48 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
