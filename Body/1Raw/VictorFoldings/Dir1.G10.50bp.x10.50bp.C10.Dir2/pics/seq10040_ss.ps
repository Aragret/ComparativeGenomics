%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCCCACCUGGGGGGGGGGUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCxxxxxxxxxxACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAACCCCCCCCCCAUCUCCACCU\
) } def
/len { sequence length } bind def

/coor [
[84.73524475 429.59912109]
[71.51504517 422.32662964]
[60.62824249 411.87963867]
[52.81711197 398.97039795]
[48.61423111 384.47906494]
[48.30615997 369.39373779]
[51.91389847 354.74291992]
[59.19147110 341.52551270]
[69.64267731 330.64276123]
[82.55493927 322.83660889]
[97.04788208 318.63931274]
[96.73582458 303.64257812]
[96.42376709 288.64581299]
[96.11170959 273.64904785]
[95.79965210 258.65231323]
[95.48759460 243.65554810]
[95.17554474 228.65879822]
[94.86348724 213.66204834]
[94.55142975 198.66529846]
[86.55102539 186.10174561]
[93.99955750 172.14358521]
[93.68750000 157.14683533]
[93.37544250 142.15008545]
[78.39960480 143.46937561]
[62.25976562 139.19781494]
[47.06684113 128.85282898]
[35.07934952 112.73991394]
[20.31329346 115.37877655]
[5.54723835 118.01764679]
[-9.21881771 120.65650940]
[-23.98487282 123.29537201]
[-36.16736221 134.27348328]
[-51.68029785 128.95552063]
[-54.56530762 112.81214142]
[-41.85453796 102.45027161]
[-26.62373734 108.52931976]
[-11.85768127 105.89044952]
[2.90837383 103.25158691]
[17.67442894 100.61272430]
[32.44048309 97.97386169]
[33.68735886 83.02577209]
[19.56255722 77.97702026]
[5.43775368 72.92826080]
[-9.61959839 78.46501923]
[-23.26123810 70.02195740]
[-25.02246475 54.07587433]
[-13.55221844 42.85923767]
[2.35051084 44.97649002]
[10.48651028 58.80345917]
[24.61131287 63.85221481]
[38.73611450 68.90097046]
[43.24488068 62.90755463]
[31.25819778 53.88982391]
[40.27612686 41.90329361]
[52.26240921 50.92072296]
[56.77117538 44.92730331]
[48.00496674 32.75546646]
[32.36740494 30.46590233]
[22.99608612 17.73978806]
[25.45085335 2.12730455]
[38.27533722 -7.10894012]
[53.86099243 -4.48924494]
[62.96113586 8.43217087]
[60.17680359 23.98926163]
[68.94301605 36.16109848]
[83.43860626 32.30393982]
[84.99619293 17.38502693]
[86.55377197 2.46611404]
[88.11135101 -12.45279789]
[74.36886597 -18.81069565]
[63.43712234 -29.28808212]
[56.50190735 -42.74845123]
[54.31550217 -57.73171997]
[57.11507797 -72.61261749]
[64.59694672 -85.77697754]
[75.94954681 -95.79682159]
[89.94141388 -101.58528137]
[105.05483246 -102.51445770]
[119.65040588 -98.48356628]
[132.14491272 -89.92984772]
[141.18304443 -77.78115082]
[145.78440857 -63.35526276]
[145.44989014 -48.21700668]
[140.21575928 -34.00846481]
[130.64981079 -22.27087021]
[117.78964233 -14.27743149]
[103.03026581 -10.89521694]
[101.47268677 4.02369499]
[99.91510010 18.94260788]
[98.35752106 33.86151886]
[129.61041260 54.34896469]
[139.37945557 83.57525635]
[154.02296448 80.32443237]
[167.26251221 67.56925964]
[183.78099060 73.41219330]
[198.35368347 69.85743713]
[212.92639160 66.30267334]
[227.49909973 62.74790955]
[228.61289978 47.66101074]
[234.33619690 33.65746689]
[244.10823059 22.10920906]
[256.97167969 14.14761448]
[271.66629028 10.55268002]
[286.75244141 11.67660236]
[300.75213623 17.40926933]
[312.29385376 27.18905258]
[320.24682617 40.05782700]
[323.83190918 54.75484467]
[322.69787598 69.84024048]
[316.95584106 83.83610535]
[307.16833496 95.37125397]
[294.29421997 103.31560516]
[279.59481812 106.89083862]
[264.51016235 105.74670410]
[250.51817322 99.99527740]
[238.98957825 90.20003510]
[231.05384827 77.32061768]
[216.48115540 80.87537384]
[201.90844727 84.43013763]
[187.33573914 87.98490143]
[180.75558472 98.18337250]
[168.59436035 101.23679352]
[157.27378845 94.96793365]
[142.63029480 98.21875763]
[138.78460693 117.78394318]
[126.46867371 133.46525574]
[108.37220001 141.83802795]
[108.68425751 156.83477783]
[108.99631500 171.83152771]
[117.01903534 185.46775818]
[109.54817963 198.35324097]
[109.86023712 213.34999084]
[110.17229462 228.34674072]
[110.48435211 243.34350586]
[110.79640961 258.34024048]
[111.10846710 273.33700562]
[111.42051697 288.33377075]
[111.73257446 303.33050537]
[112.04463196 318.32727051]
[126.69962311 321.91802979]
[139.92543030 329.18029785]
[150.82029724 339.61889648]
[158.64140320 352.52209473]
[162.85546875 367.01016235]
[163.17518616 382.09527588]
[159.57876587 396.74887085]
[152.31140137 409.97186279]
[141.86860657 420.86270142]
[128.96237183 428.67883301]
[114.47267914 432.88729858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[23 127]
[27 40]
[28 39]
[29 38]
[30 37]
[31 36]
[41 51]
[42 50]
[43 49]
[56 65]
[57 64]
[66 90]
[67 89]
[68 88]
[69 87]
[92 124]
[93 123]
[95 120]
[96 119]
[97 118]
[98 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
