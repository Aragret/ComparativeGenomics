%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUGGCAUUUGGGGGGGGGGUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUxxxxxxxxxxUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUCCCCCCCCCCAUACUAGCAUUU\
) } def
/len { sequence length } bind def

/coor [
[59.00758362 540.61303711]
[44.84698105 535.45806885]
[32.25723648 527.17584229]
[21.91729736 516.21307373]
[14.38478565 503.16091919]
[10.06592083 488.72332764]
[9.19361210 473.67886353]
[11.81490231 458.83886719]
[17.78842926 445.00363159]
[26.79204750 432.91928101]
[38.34020233 423.23751831]
[51.81011963 416.48043823]
[66.47537994 413.01245117]
[66.47537994 398.01245117]
[66.47537994 383.01245117]
[66.47537994 368.01245117]
[66.47537994 353.01245117]
[66.47537994 338.01245117]
[66.47537994 323.01245117]
[66.47537994 308.01245117]
[66.47537994 293.01245117]
[66.47537994 278.01245117]
[55.79943848 271.52899170]
[50.74996948 258.42767334]
[36.39310837 262.77285767]
[34.08908844 277.86108398]
[25.45962524 290.45056152]
[12.21810150 298.04165649]
[-3.00636697 299.12716675]
[-17.19095230 293.49151611]
[-27.51929283 282.25372314]
[-31.94068909 267.64501953]
[-29.57727051 252.56600952]
[-20.89829636 240.01060486]
[-7.62698174 232.47171021]
[7.60164356 231.44616699]
[21.76392555 237.13761902]
[32.04793167 248.41600037]
[46.40479279 244.07081604]
[57.06500244 233.51809692]
[61.55544662 219.20600891]
[66.04589844 204.89392090]
[70.53633881 190.58183289]
[75.02678680 176.26974487]
[73.79554749 173.68919373]
[73.54325867 170.45167542]
[74.53070068 166.93919373]
[76.87133026 163.62275696]
[80.50421906 161.00708008]
[86.13897705 147.10565186]
[91.77372742 133.20423889]
[97.40848541 119.30281830]
[72.97677612 93.76412201]
[63.67545319 81.99614716]
[54.37413025 70.22816467]
[46.54964066 65.39923096]
[45.00644684 58.12611771]
[35.94553375 46.17204285]
[26.88462067 34.21797180]
[11.56936169 28.35496330]
[9.25680542 12.11968899]
[22.32591248 2.21360612]
[37.33230591 8.82724380]
[38.83869553 25.15705681]
[47.89960861 37.11112976]
[56.96051788 49.06520462]
[66.14211273 60.92684174]
[75.44343567 72.69482422]
[84.74475861 84.46279907]
[99.63397980 82.64314270]
[105.82746887 68.98149109]
[112.02095795 55.31984329]
[98.88945770 62.56993103]
[83.89598083 63.01211548]
[70.36003876 56.54849625]
[61.27847290 44.61010742]
[58.66192245 29.84008217]
[63.08967972 15.50847530]
[73.58145905 4.78827620]
[87.81438446 0.05291624]
[102.63733673 2.35079384]
[114.76852417 11.17316341]
[121.52214050 24.56677055]
[121.40337372 39.56456375]
[130.46427917 27.61049080]
[139.52519226 15.65641785]
[148.58610535 3.70234513]
[151.29966736 -5.08274603]
[157.95379639 -8.39970207]
[167.25511169 -20.16768265]
[176.55644226 -31.93566322]
[185.85775757 -43.70364380]
[190.93588257 -59.87921524]
[207.88505554 -59.47740173]
[212.19094849 -43.07936478]
[197.62574768 -34.40232086]
[188.32441711 -22.63434029]
[179.02310181 -10.86635876]
[169.72177124 0.90162158]
[160.54017639 12.76325798]
[151.47926331 24.71733093]
[142.41836548 36.67140579]
[133.35745239 48.62547684]
[125.68260956 61.51333237]
[119.48911285 75.17498016]
[113.29562378 88.83663177]
[121.98897552 101.06061554]
[136.92662048 99.69439697]
[151.86427307 98.32817841]
[166.80192566 96.96196747]
[181.73957825 95.59574890]
[193.06713867 84.23503113]
[208.99536133 86.15111542]
[217.30548096 99.87414551]
[211.62266541 114.87699127]
[196.30630493 119.65074921]
[183.10580444 110.53340149]
[168.16815186 111.89962006]
[153.23049927 113.26583099]
[138.29284668 114.63204956]
[123.35519409 115.99826813]
[111.30990601 124.93756866]
[105.67515564 138.83898926]
[100.04039764 152.74041748]
[94.40563965 166.64183044]
[89.33887482 180.76019287]
[84.84842682 195.07228088]
[80.35798645 209.38436890]
[75.86753845 223.69645691]
[71.37709045 238.00854492]
[90.03981018 246.64888000]
[93.58714294 265.35678101]
[81.47537994 278.01245117]
[81.47537994 293.01245117]
[81.47537994 308.01245117]
[81.47537994 323.01245117]
[81.47537994 338.01245117]
[81.47537994 353.01245117]
[81.47537994 368.01245117]
[81.47537994 383.01245117]
[81.47537994 398.01245117]
[81.47537994 413.01245117]
[96.14064026 416.48043823]
[109.61055756 423.23751831]
[121.15871429 432.91928101]
[130.16233826 445.00363159]
[136.13586426 458.83886719]
[138.75715637 473.67886353]
[137.88484192 488.72332764]
[133.56597900 503.16091919]
[126.03346252 516.21307373]
[115.69352722 527.17584229]
[103.10378265 535.45806885]
[88.94317627 540.61303711]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 39]
[25 38]
[40 130]
[41 129]
[42 128]
[43 127]
[44 126]
[49 125]
[50 124]
[51 123]
[52 122]
[53 69]
[54 68]
[55 67]
[57 66]
[58 65]
[59 64]
[70 106]
[71 105]
[72 104]
[84 103]
[85 102]
[86 101]
[87 100]
[89 99]
[90 98]
[91 97]
[92 96]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
