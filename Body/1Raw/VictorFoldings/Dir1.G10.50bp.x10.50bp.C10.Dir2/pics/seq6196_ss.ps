%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUAACCCCUGGGGGGGGGGGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACCCCxxxxxxxxxxGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUCCCCCCCCCCACGCCUAACCGCU\
) } def
/len { sequence length } bind def

/coor [
[78.27742004 420.96005249]
[63.61575699 417.53521729]
[49.98672104 411.13656616]
[37.98610687 402.04376221]
[28.13853264 390.65432739]
[20.87449265 377.46618652]
[16.51153946 363.05581665]
[15.24040031 348.05322266]
[17.11664581 333.11425781]
[22.05825615 318.89193726]
[29.84920120 306.00802612]
[40.14889908 295.02578735]
[52.50708389 286.42526245]
[66.38352203 280.58245850]
[81.17157745 277.75280762]
[81.47171021 262.75579834]
[81.77184296 247.75880432]
[82.07197571 232.76181030]
[82.37210846 217.76481628]
[82.67224121 202.76782227]
[82.97237396 187.77081299]
[83.27250671 172.77381897]
[83.57263947 157.77682495]
[83.87276459 142.77983093]
[74.69132233 154.64157104]
[61.10095596 160.98995972]
[46.11183167 160.41883850]
[33.04393387 153.05474854]
[24.79170799 140.52873230]
[23.18295860 125.61525726]
[28.57401276 111.61752319]
[39.77079391 101.63594055]
[54.29329300 97.88134003]
[68.92488861 101.18535614]
[80.42478180 110.81616974]
[86.24562073 124.63935089]
[89.81293488 110.06970978]
[86.08702087 96.59346771]
[95.61743164 86.36297607]
[94.61830902 77.22570038]
[99.40462494 71.53894806]
[103.26274872 57.04360962]
[107.12086487 42.54827118]
[99.45637512 28.98754120]
[103.57555389 14.34216404]
[116.55086517 7.11881590]
[120.40898895 -7.37652540]
[124.26710510 -21.87186623]
[110.13695526 -26.93204689]
[96.47979736 -33.15687180]
[83.39141083 -40.50267410]
[70.96362305 -48.91793060]
[59.28359222 -58.34361267]
[48.43325424 -68.71360016]
[38.48871613 -79.95516205]
[29.51973343 -91.98944092]
[21.58921623 -104.73202515]
[14.75279236 -118.09353638]
[9.05841732 -131.98023987]
[4.54603148 -146.29473877]
[1.24728775 -160.93663025]
[-0.81467545 -175.80319214]
[-1.62539482 -190.79016113]
[-1.17918348 -205.79241943]
[0.52082843 -220.70471191]
[3.46271658 -235.42245483]
[7.62584496 -249.84239197]
[12.98101234 -263.86340332]
[19.49065590 -277.38711548]
[27.10911179 -290.31869507]
[35.78294373 -302.56741333]
[45.45131302 -314.04736328]
[56.04639435 -324.67803955]
[67.49387360 -334.38482666]
[79.71345520 -343.09963989]
[92.61942291 -350.76141357]
[106.12125397 -357.31634521]
[120.12423706 -362.71847534]
[134.53015137 -366.92990112]
[149.23794556 -369.92111206]
[164.14445496 -371.67108154]
[179.14512634 -372.16757202]
[194.13473511 -371.40707397]
[209.00813293 -369.39495850]
[223.66099548 -366.14532471]
[237.99053955 -361.68093872]
[251.89624023 -356.03311157]
[265.28057861 -349.24151611]
[278.04968262 -341.35375977]
[290.11395264 -332.42517090]
[301.38879395 -322.51834106]
[311.79507446 -311.70281982]
[321.25985718 -300.05444336]
[329.71670532 -287.65493774]
[337.10635376 -274.59124756]
[343.37689209 -260.95501709]
[348.48440552 -246.84191895]
[352.39306641 -232.35092163]
[355.07537842 -217.58366394]
[356.51263428 -202.64375305]
[356.69467163 -187.63598633]
[355.62023926 -172.66560364]
[353.29687500 -157.83764648]
[349.74090576 -143.25608826]
[344.97720337 -129.02325439]
[339.03927612 -115.23893738]
[331.96868896 -101.99984741]
[323.81506348 -89.39884949]
[314.63562012 -77.52432251]
[304.49472046 -66.45957184]
[293.46353149 -56.28219604]
[281.61938477 -47.06359100]
[269.04534912 -38.86841965]
[255.82969666 -31.75416183]
[242.06506348 -25.77072334]
[227.84802246 -20.96007347]
[213.27830505 -17.35595703]
[198.45808411 -14.98365307]
[183.49134827 -13.85980225]
[168.48304749 -13.99228764]
[153.53846741 -15.38018131]
[138.76245117 -18.01374626]
[134.90432739 -3.51840520]
[131.04620361 10.97693539]
[138.71394348 23.69469643]
[135.00775146 38.44999313]
[121.61620331 46.40639114]
[117.75808716 60.90172958]
[113.89996338 75.39707184]
[110.18706512 89.93029022]
[113.91297913 103.40653229]
[104.38256836 113.63702393]
[100.81525421 128.20666504]
[98.86976624 143.07995605]
[98.56963348 158.07696533]
[98.26950073 173.07395935]
[97.96936798 188.07095337]
[97.66923523 203.06794739]
[97.36910248 218.06494141]
[97.06896973 233.06195068]
[96.76883698 248.05894470]
[96.46870422 263.05593872]
[96.16857910 278.05294800]
[110.83158112 281.47198486]
[124.46313477 287.86529541]
[136.46733093 296.95336914]
[146.31938171 308.33892822]
[153.58860779 321.52423096]
[157.95722961 335.93286133]
[159.23426819 350.93496704]
[157.36390686 365.87469482]
[152.42788696 380.09893799]
[144.64201355 392.98590088]
[134.34663391 403.97219849]
[121.99183655 412.57757568]
[108.11769867 418.42584229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[36 133]
[37 132]
[39 130]
[41 129]
[42 128]
[43 127]
[46 124]
[47 123]
[48 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
