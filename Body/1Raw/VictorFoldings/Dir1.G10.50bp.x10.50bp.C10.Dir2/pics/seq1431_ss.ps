%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACAGUUGGGGGGGGGGAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCxxxxxxxxxxUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAAUUAUAUCCUUCUUGCCCCCCCCCCCUCAUCAGUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 417.85577393]
[71.19830322 411.83975220]
[59.48964310 402.31033325]
[50.78712082 389.97463989]
[45.73651886 375.74813843]
[44.71262741 360.68646240]
[47.79142761 345.90728760]
[54.74444962 332.50735474]
[65.05573273 321.48101807]
[77.96011353 313.64651489]
[92.50000000 309.58520508]
[92.50000000 294.58520508]
[92.50000000 279.58520508]
[92.50000000 264.58520508]
[92.50000000 249.58520508]
[92.50000000 234.58520508]
[92.50000000 219.58520508]
[92.50000000 204.58520508]
[92.50000000 189.58520508]
[92.50000000 174.58520508]
[84.76270294 161.85794067]
[92.50000000 148.05776978]
[92.50000000 133.05776978]
[73.45444489 121.08078003]
[66.10262299 99.81739044]
[73.68311310 78.63443756]
[64.41816711 66.83779907]
[55.15321350 55.04116058]
[45.88826370 43.24451828]
[33.80827713 34.35216904]
[19.79156303 29.01065636]
[4.14076805 31.32650566]
[-4.99694109 19.56421280]
[-19.01365471 14.22269917]
[-33.19021225 9.32114887]
[-47.51280975 4.86433268]
[-61.83540726 0.40751719]
[-76.15800476 -4.04929829]
[-90.48059845 -8.50611401]
[-102.28308868 -3.19996667]
[-114.14841461 -7.25372648]
[-119.85805511 -17.96387672]
[-134.08483887 -22.71769142]
[-150.03660583 -18.91333199]
[-161.10906982 -31.01012611]
[-155.91183472 -46.56393051]
[-139.79136658 -49.57432175]
[-129.33102417 -36.94447327]
[-115.10424042 -32.19065475]
[-98.15723419 -36.64027405]
[-86.02378845 -22.82871056]
[-71.70118713 -18.37189674]
[-57.37858963 -13.91508007]
[-43.05599213 -9.45826435]
[-28.73339653 -5.00144863]
[-25.41253662 -6.35768461]
[-21.25908852 -6.13284874]
[-17.04216385 -3.94883490]
[-13.67214108 0.20598635]
[0.34457159 5.54749870]
[14.99279881 2.84958982]
[25.13307571 14.99394417]
[39.14978790 20.33545685]
[29.99125671 8.45600891]
[23.64816475 -5.13682652]
[20.42673874 -19.78682327]
[20.48250198 -34.78672028]
[23.81276321 -49.41236115]
[30.25674629 -62.95765686]
[39.50334930 -74.76868439]
[51.10617828 -84.27523041]
[64.50507355 -91.01834869]
[79.05316925 -94.67249298]
[94.04813385 -95.06126404]
[108.76603699 -92.16587830]
[122.49634552 -86.12612915]
[134.57620239 -77.23359680]
[144.42240906 -65.91757965]
[151.55963135 -52.72439957]
[155.64329529 -38.29097366]
[156.47624207 -23.31411934]
[154.01829529 -8.51687622]
[148.38807678 5.38638639]
[139.85742188 17.72445297]
[128.83816528 27.90167809]
[115.86227417 35.42673111]
[101.55620575 39.93631744]
[86.61061096 41.21273422]
[71.74702454 39.19435883]
[57.68490601 33.97956848]
[66.94985199 45.77621078]
[76.21480560 57.57284927]
[85.47975159 69.36949158]
[96.73382568 66.25984955]
[108.37539673 67.15310669]
[119.02332306 71.94329071]
[127.41432953 80.06209564]
[141.19671631 74.14212799]
[150.82302856 61.58646774]
[165.57080078 63.67269897]
[179.35317993 57.75273514]
[188.72747803 44.29707718]
[205.04238892 45.95703888]
[211.51455688 61.02499390]
[201.48594666 74.00032043]
[185.27314758 71.53511810]
[171.49076843 77.45507812]
[162.85026550 89.58730316]
[147.11668396 87.92451477]
[133.33428955 93.84447479]
[133.74942017 96.83099365]
[133.89750671 99.84258270]
[148.54100037 103.09340668]
[163.18450928 106.34423828]
[177.82801819 109.59506226]
[191.02339172 100.89691925]
[206.48741150 104.15874481]
[215.04554749 117.44534302]
[211.62042236 132.87402344]
[198.24407959 141.29121399]
[182.85247803 137.70314026]
[174.57717896 124.23856354]
[159.93368530 120.98773956]
[145.29017639 117.73690796]
[130.64668274 114.48608398]
[124.95001984 122.94693756]
[116.99435425 129.33015442]
[107.50000000 133.05776978]
[107.50000000 148.05776978]
[115.23729706 161.85794067]
[107.50000000 174.58520508]
[107.50000000 189.58520508]
[107.50000000 204.58520508]
[107.50000000 219.58520508]
[107.50000000 234.58520508]
[107.50000000 249.58520508]
[107.50000000 264.58520508]
[107.50000000 279.58520508]
[107.50000000 294.58520508]
[107.50000000 309.58520508]
[122.03988647 313.64651489]
[134.94427490 321.48101807]
[145.25555420 332.50735474]
[152.20857239 345.90728760]
[155.28736877 360.68646240]
[154.26348877 375.74813843]
[149.21287537 389.97463989]
[140.51036072 402.31033325]
[128.80169678 411.83975220]
[114.95575714 417.85577393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[26 93]
[27 92]
[28 91]
[29 90]
[30 63]
[31 62]
[33 60]
[34 59]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[42 49]
[43 48]
[97 110]
[98 109]
[100 107]
[101 106]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
