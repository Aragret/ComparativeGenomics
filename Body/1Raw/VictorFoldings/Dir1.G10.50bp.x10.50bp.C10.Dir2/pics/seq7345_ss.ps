%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUACCACACGGGGGGGGGGAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAxxxxxxxxxxAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACCCCCCCCCCCACCCGACCACAC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 379.77450562]
[70.75619507 374.96508789]
[57.85220718 367.19967651]
[46.91955185 356.84155273]
[38.46956635 344.37512207]
[32.89747238 330.38348389]
[30.46388245 315.52105713]
[31.28262329 300.48297119]
[35.31539917 285.97262573]
[42.37359238 272.66864014]
[52.12707901 261.19329834]
[64.11966705 252.08329773]
[77.79044342 245.76475525]
[92.50000000 242.53318787]
[92.50000000 227.53318787]
[92.50000000 212.53318787]
[92.50000000 197.53318787]
[92.50000000 182.53318787]
[92.50000000 167.53318787]
[92.50000000 152.53318787]
[92.50000000 137.53318787]
[92.50000000 122.53319550]
[92.50000000 107.53319550]
[91.45032501 92.56996918]
[89.35612488 77.71687317]
[87.26192474 62.86378479]
[85.16772461 48.01069260]
[82.92501831 33.17929840]
[80.53404999 18.37108231]
[78.14307404 3.56286645]
[63.19802856 4.91581249]
[48.19501877 5.22294474]
[33.20712662 4.48276663]
[18.30737877 2.69888449]
[3.56836390 -0.12001094]
[-10.93811035 -3.96018577]
[-25.14136887 -8.80293179]
[-38.97221375 -14.62465382]
[-52.36326218 -21.39698982]
[-65.24927521 -29.08694458]
[-77.56746674 -37.65705490]
[-89.25783539 -47.06556702]
[-100.26341248 -57.26663971]
[-110.53059387 -68.21057892]
[-120.00934601 -79.84406281]
[-128.65348816 -92.11042023]
[-136.42092896 -104.94988251]
[-143.27378845 -118.29989624]
[-149.17871094 -132.09542847]
[-154.10691833 -146.26925659]
[-158.03439331 -160.75233459]
[-160.94201660 -175.47410583]
[-162.81561279 -190.36283875]
[-163.64604187 -205.34600830]
[-163.42927551 -220.35058594]
[-162.16636658 -235.30351257]
[-159.86347961 -250.13191223]
[-156.53179932 -264.76354980]
[-152.18759155 -279.12713623]
[-146.85200500 -293.15267944]
[-140.55104065 -306.77188110]
[-133.31539917 -319.91836548]
[-125.18032074 -332.52810669]
[-116.18544769 -344.53964233]
[-106.37459564 -355.89443970]
[-95.79556274 -366.53723145]
[-84.49990082 -376.41613770]
[-72.54263306 -385.48303223]
[-59.98201752 -393.69372559]
[-46.87924194 -401.00823975]
[-33.29815292 -407.39093018]
[-19.30490685 -412.81069946]
[-4.96768475 -417.24111938]
[9.64366531 -420.66064453]
[24.45795822 -423.05261230]
[39.40301895 -424.40533447]
[54.40603638 -424.71224976]
[69.39391327 -423.97186279]
[84.29364014 -422.18777466]
[99.03261566 -419.36865234]
[113.53903198 -415.52828979]
[127.74221802 -410.68533325]
[141.57298279 -404.86340332]
[154.96392822 -398.09088135]
[167.84983826 -390.40075684]
[180.16790771 -381.83044434]
[191.85813904 -372.42178345]
[202.86357117 -362.22055054]
[213.13059998 -351.27645874]
[222.60917664 -339.64285278]
[231.25315857 -327.37637329]
[239.02040100 -314.53680420]
[245.87307739 -301.18667603]
[251.77780151 -287.39105225]
[256.70581055 -273.21716309]
[260.63305664 -258.73400879]
[263.54046631 -244.01220703]
[265.41384888 -229.12344360]
[266.24407959 -214.14027405]
[266.02709961 -199.13569641]
[264.76397705 -184.18278503]
[262.46087646 -169.35443115]
[259.12899780 -154.72283936]
[254.78457642 -140.35931396]
[249.44879150 -126.33383179]
[243.14762878 -112.71472931]
[235.91178894 -99.56834412]
[227.77653503 -86.95873260]
[218.78149414 -74.94732666]
[208.97047424 -63.59264755]
[198.39129639 -52.95001221]
[187.09548950 -43.07127380]
[175.13809204 -34.00455856]
[162.57736206 -25.79403687]
[149.47447205 -18.47971344]
[135.89329529 -12.09722233]
[121.89997101 -6.67765856]
[107.56268311 -2.24742603]
[92.95128632 1.17189169]
[95.34226227 15.98010731]
[97.73323822 30.78832245]
[101.92759705 36.92470551]
[100.02081299 45.91649246]
[102.11501312 60.76958084]
[104.20921326 75.62267303]
[106.30342102 90.47576141]
[115.58750153 78.69417572]
[130.23730469 75.47187042]
[143.60818481 82.27036285]
[149.63557434 96.00610352]
[145.58566284 110.44903564]
[133.29534912 119.04833984]
[118.33908844 117.90368652]
[107.50000000 107.53319550]
[107.50000000 122.53319550]
[107.50000000 137.53318787]
[107.50000000 152.53318787]
[107.50000000 167.53318787]
[107.50000000 182.53318787]
[107.50000000 197.53318787]
[107.50000000 212.53318787]
[107.50000000 227.53318787]
[107.50000000 242.53318787]
[122.20955658 245.76475525]
[135.88034058 252.08329773]
[147.87292480 261.19329834]
[157.62640381 272.66864014]
[164.68460083 285.97262573]
[168.71737671 300.48297119]
[169.53611755 315.52105713]
[167.10252380 330.38348389]
[161.53042603 344.37512207]
[153.08044434 356.84155273]
[142.14779663 367.19967651]
[129.24380493 374.96508789]
[114.97203827 379.77450562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 126]
[25 125]
[26 124]
[27 123]
[28 121]
[29 120]
[30 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
