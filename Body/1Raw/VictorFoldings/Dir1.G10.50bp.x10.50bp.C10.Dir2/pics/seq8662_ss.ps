%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUACUCAUGGGGGGGGGGGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUxxxxxxxxxxCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGCCCCCCCCCCACCUCCUCAU\
) } def
/len { sequence length } bind def

/coor [
[86.55078888 383.70172119]
[72.06109619 379.49325562]
[59.15486526 371.67712402]
[48.71206665 360.78628540]
[41.44470215 347.56329346]
[37.84827423 332.90969849]
[38.16799545 317.82458496]
[42.38206863 303.33651733]
[50.20316315 290.43331909]
[61.09803391 279.99472046]
[74.32384491 272.73245239]
[88.97883606 269.14169312]
[89.29088593 254.14494324]
[89.60294342 239.14819336]
[89.91500092 224.15142822]
[90.22705841 209.15467834]
[90.53911591 194.15792847]
[90.85117340 179.16117859]
[91.16323090 164.16441345]
[91.47528076 149.16766357]
[91.78733826 134.17091370]
[92.09939575 119.17415619]
[88.41136169 117.19800568]
[85.19506836 114.52177429]
[71.41268921 120.44173431]
[64.15499115 134.74926758]
[48.41529465 137.85433960]
[36.26774216 127.37499237]
[37.03089905 111.35010529]
[50.11933517 102.07258606]
[65.49272156 106.65935516]
[79.27510834 100.73939514]
[81.41481781 90.79897308]
[88.02249146 83.07051849]
[97.50962067 79.41199493]
[101.21578217 64.87705994]
[104.92194366 50.34212494]
[93.24900055 42.12364960]
[85.10832214 30.43277168]
[81.46512604 16.69149017]
[82.73913574 2.56270432]
[88.75625610 -10.25102997]
[98.77210236 -20.21265411]
[111.56400299 -26.13498497]
[125.58022308 -27.32216644]
[129.58796692 -41.77685547]
[133.44512939 -56.27244949]
[137.15129089 -70.80738831]
[140.85745239 -85.34232330]
[144.56361389 -99.87725830]
[148.26976013 -114.41219330]
[134.17190552 -119.57369232]
[120.66854858 -126.13499451]
[107.89829254 -134.02874756]
[95.99215698 -143.17398071]
[85.07234192 -153.47682190]
[75.25088501 -164.83154297]
[66.62857056 -177.12165833]
[59.29388809 -190.22102356]
[53.32209778 -203.99522400]
[48.77447891 -218.30293274]
[45.69770050 -232.99729919]
[44.12333298 -247.92755127]
[44.06753159 -262.94046021]
[45.53087234 -277.88201904]
[48.49833298 -292.59884644]
[52.93946838 -306.93994141]
[58.80870438 -320.75817871]
[66.04580688 -333.91168213]
[74.57652283 -346.26556396]
[84.31330109 -357.69299316]
[95.15623474 -368.07672119]
[106.99405670 -377.31018066]
[119.70528412 -385.29867554]
[133.15948486 -391.96014404]
[147.21859741 -397.22631836]
[161.73834229 -401.04309082]
[176.56974792 -403.37133789]
[191.56059265 -404.18713379]
[206.55705261 -403.48211670]
[221.40525818 -401.26354980]
[235.95281982 -397.55416870]
[250.05046082 -392.39205933]
[263.55352783 -385.83016968]
[276.32342529 -377.93582153]
[288.22915649 -368.79010010]
[299.14852905 -358.48675537]
[308.96948242 -347.13159180]
[317.59124756 -334.84109497]
[324.92535400 -321.74142456]
[330.89654541 -307.96694946]
[335.44354248 -293.65905762]
[338.51965332 -278.96453857]
[340.09338379 -264.03424072]
[340.14852905 -249.02130127]
[338.68450928 -234.07983398]
[335.71640015 -219.36312866]
[331.27462769 -205.02221680]
[325.40478516 -191.20425415]
[318.16711426 -178.05104065]
[309.63586426 -165.69755554]
[299.89855957 -154.27055359]
[289.05517578 -143.88731384]
[277.21694946 -134.65435791]
[264.50537109 -126.66644287]
[251.05088806 -120.00554657]
[236.99154663 -114.74000549]
[222.47161865 -110.92386627]
[207.64012146 -108.59628296]
[192.64923096 -107.78114319]
[177.65280151 -108.48680878]
[162.80470276 -110.70603180]
[159.09854126 -96.17109680]
[155.39237976 -81.63616180]
[151.68621826 -67.10122681]
[147.98005676 -52.56628799]
[149.38407898 -45.26051331]
[144.04264832 -37.76911545]
[140.03491211 -23.31442642]
[152.65232849 -13.77578163]
[160.67410278 -0.09902410]
[162.85163879 15.64523792]
[158.82373047 31.06026649]
[149.17605591 43.78804779]
[135.35629272 51.86998749]
[119.45687866 54.04828644]
[115.75071716 68.58322144]
[112.04455566 83.11815643]
[120.54873657 102.79595184]
[107.09615326 119.48621368]
[106.78409576 134.48297119]
[106.47203827 149.47972107]
[106.15998077 164.47647095]
[105.84792328 179.47323608]
[105.53586578 194.46998596]
[105.22380829 209.46673584]
[104.91175842 224.46348572]
[104.59970093 239.46025085]
[104.28764343 254.45700073]
[103.97558594 269.45376587]
[118.46852112 273.65103149]
[131.38078308 281.45718384]
[141.83200073 292.33996582]
[149.10957336 305.55734253]
[152.71730042 320.20816040]
[152.40924072 335.29351807]
[148.20635986 349.78482056]
[140.39521790 362.69406128]
[129.50842285 373.14108276]
[116.28822327 380.41354370]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 32]
[25 31]
[35 128]
[36 127]
[37 126]
[45 119]
[46 118]
[47 116]
[48 115]
[49 114]
[50 113]
[51 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
