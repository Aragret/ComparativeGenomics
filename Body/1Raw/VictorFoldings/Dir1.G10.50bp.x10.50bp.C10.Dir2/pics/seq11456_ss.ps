%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAUGAAAAGGGGGGGGGGACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAxxxxxxxxxxAAAUGGGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGCCCCCCCCCCGAGAUGAAAA\
) } def
/len { sequence length } bind def

/coor [
[97.14702606 373.66110229]
[83.30108643 367.64508057]
[71.59242249 358.11566162]
[62.88990021 345.77996826]
[57.83929825 331.55346680]
[56.81540680 316.49179077]
[59.89420700 301.71261597]
[66.84722900 288.31268311]
[77.15851593 277.28634644]
[90.06289673 269.45184326]
[104.60278320 265.39053345]
[104.60278320 250.39053345]
[104.60278320 235.39053345]
[104.60278320 220.39053345]
[104.60278320 205.39053345]
[104.60278320 190.39053345]
[104.60278320 175.39053345]
[104.60278320 160.39053345]
[104.60278320 145.39053345]
[104.60278320 130.39053345]
[98.80210876 125.63636017]
[96.36839294 140.43760681]
[82.33330536 145.73065186]
[70.73178864 136.22251892]
[73.16523743 121.42121887]
[87.20076752 116.12799835]
[81.40010071 111.37381744]
[66.69213867 114.31929779]
[51.98417282 117.26478577]
[37.27621460 120.21026611]
[27.21973991 132.71014404]
[11.17810154 132.49713135]
[1.45706844 119.73464966]
[5.51378632 104.21296692]
[20.23628807 97.83899689]
[34.33073044 105.50230408]
[49.03869247 102.55682373]
[63.74665451 99.61133575]
[78.45461273 96.66585541]
[89.54592896 86.56720734]
[93.85351562 72.19902039]
[98.16110229 57.83084106]
[102.46868134 43.46265411]
[106.77626801 29.09447098]
[111.08385468 14.72628689]
[115.39144135 0.35810283]
[101.14092255 -12.29454327]
[95.20237732 -30.89299011]
[99.69212341 -50.37244034]
[113.81613922 -65.17086792]
[133.96362305 -70.81632996]
[133.02798462 -85.78711700]
[132.09236145 -100.75791168]
[123.50933838 -114.04859924]
[130.43769836 -127.23370361]
[129.50207520 -142.20449829]
[128.56645203 -157.17527771]
[127.16414642 -172.10958862]
[125.29653168 -186.99287415]
[123.42891693 -201.87614441]
[121.56130219 -216.75942993]
[106.61267090 -218.80903625]
[92.70425415 -224.65867615]
[80.78435516 -233.90953064]
[71.66568756 -245.93086243]
[65.96997070 -259.90301514]
[64.08556366 -274.87338257]
[66.14093781 -289.82119751]
[71.99595642 -303.72735596]
[81.25141144 -315.64370728]
[93.27625275 -324.75772095]
[107.25061798 -330.44802856]
[122.22169495 -332.32666016]
[137.16873169 -330.26553345]
[151.07263184 -324.40515137]
[162.98538208 -315.14508057]
[172.09477234 -303.11672974]
[177.77969360 -289.14016724]
[179.65254211 -274.16836548]
[177.58561707 -259.22210693]
[171.71986389 -245.32048035]
[162.45521545 -233.41130066]
[150.42333984 -224.30656433]
[136.44458008 -218.62704468]
[138.31219482 -203.74375916]
[140.17980957 -188.86048889]
[142.04742432 -173.97720337]
[144.65597534 -171.51490784]
[146.16954041 -167.64053345]
[145.92570496 -162.89785767]
[143.53723145 -158.11091614]
[144.47286987 -143.14012146]
[145.40849304 -128.16932678]
[153.92459106 -115.94945526]
[147.06315613 -101.69354248]
[147.99877930 -86.72274780]
[148.93440247 -71.75196075]
[161.71176147 -63.89453125]
[175.49414062 -69.81449127]
[189.27653503 -75.73445892]
[203.05891418 -81.65441895]
[212.43319702 -95.11007690]
[228.74812317 -93.45011902]
[235.22027588 -78.38216400]
[225.19166565 -65.40683746]
[208.97886658 -67.87203979]
[195.19648743 -61.95207596]
[181.41410828 -56.03211212]
[167.63172913 -50.11214828]
[170.51928711 -42.05136490]
[171.60125732 -33.65326309]
[170.86761475 -25.31281471]
[168.39277649 -17.41363335]
[164.33030701 -10.31032753]
[158.90403748 -4.31259918]
[152.39598083 0.32821357]
[145.13192749 3.42956281]
[137.46524048 4.88465166]
[129.75962830 4.66568756]
[125.45203400 19.03387070]
[121.14445496 33.40205383]
[116.83686829 47.77024078]
[112.52928162 62.13842392]
[108.22170258 76.50660706]
[103.91411591 90.87479401]
[109.91258240 89.69075775]
[116.86019897 91.97122955]
[122.96579742 98.07008362]
[126.37590790 107.49177551]
[125.55050659 118.91790771]
[119.60278320 130.39053345]
[119.60278320 145.39053345]
[119.60278320 160.39053345]
[119.60278320 175.39053345]
[119.60278320 190.39053345]
[119.60278320 205.39053345]
[119.60278320 220.39053345]
[119.60278320 235.39053345]
[119.60278320 250.39053345]
[119.60278320 265.39053345]
[134.14266968 269.45184326]
[147.04704285 277.28634644]
[157.35833740 288.31268311]
[164.31135559 301.71261597]
[167.39015198 316.49179077]
[166.36625671 331.55346680]
[161.31565857 345.77996826]
[152.61312866 358.11566162]
[140.90447998 367.64508057]
[127.05853271 373.66110229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 39]
[28 38]
[29 37]
[30 36]
[40 125]
[41 124]
[42 123]
[43 122]
[44 121]
[45 120]
[46 119]
[51 97]
[52 96]
[53 95]
[55 93]
[56 92]
[57 91]
[58 87]
[59 86]
[60 85]
[61 84]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
