%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCGCAUCGGGGGGGGGGCAUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUxxxxxxxxxxUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCAAUCCUAUACCCCCCCCCCCAACCGUAUC\
) } def
/len { sequence length } bind def

/coor [
[93.08620453 570.25115967]
[79.24026489 564.23516846]
[67.53160858 554.70574951]
[58.82908249 542.37005615]
[53.77848053 528.14355469]
[52.75458908 513.08184814]
[55.83338547 498.30270386]
[62.78640747 484.90277100]
[73.09769440 473.87643433]
[86.00207520 466.04193115]
[100.54196167 461.98062134]
[100.54196167 446.98062134]
[100.54196167 431.98062134]
[100.54196167 416.98062134]
[100.54196167 401.98062134]
[100.54196167 386.98062134]
[100.54196167 371.98062134]
[100.54196167 356.98062134]
[100.54196167 341.98062134]
[100.54196167 326.98062134]
[92.80465698 314.25335693]
[100.54196167 300.45318604]
[100.54196167 285.45318604]
[100.54196167 270.45318604]
[100.22990417 255.45642090]
[99.60592651 240.46940613]
[89.41315460 226.21783447]
[97.99860382 209.96145630]
[97.06297302 194.99066162]
[96.12734222 180.01986694]
[87.24554443 171.74816895]
[86.37919617 159.23944092]
[94.54184723 149.19828796]
[93.91786957 134.21125793]
[93.29389191 119.22425079]
[80.17053223 104.61905670]
[85.48899841 85.71804047]
[79.42598724 71.99798584]
[73.36296844 58.27793121]
[71.43697357 73.15377045]
[65.93779755 87.10938263]
[57.19818878 99.30032349]
[45.74696350 108.98895264]
[32.27702713 115.58901215]
[17.60342598 118.70114899]
[2.61403608 118.13704681]
[-11.78415203 113.93083954]
[-24.71992302 106.33703613]
[-35.41055298 95.81513214]
[-43.20916367 83.00179291]
[-47.64387512 68.67234039]
[-48.44634628 53.69381714]
[-45.56802368 38.97256851]
[-39.18306732 25.39934540]
[-29.67782211 13.79545307]
[-17.62743950 4.86302328]
[-3.76107264 -0.85745305]
[11.08224487 -3.01983833]
[26.00436401 -1.49328959]
[40.10236740 3.62982416]
[52.52320480 12.03950977]
[62.51530838 23.22690964]
[69.47337341 36.51323318]
[70.40899658 21.54244232]
[71.34462738 6.57165146]
[56.99643707 1.92619801]
[44.25473785 -6.14225578]
[33.92048645 -17.12652016]
[26.64330101 -30.33611488]
[22.88063240 -44.94067383]
[22.86900330 -60.02214050]
[26.60914612 -74.63248444]
[33.86595154 -87.85328674]
[44.18325424 -98.85346985]
[56.91249466 -106.94156647]
[71.25350189 -111.60913849]
[86.30479431 -112.56278992]
[101.12023163 -109.74256134]
[114.76850128 -103.32574463]
[126.39166260 -93.71569824]
[135.25907898 -81.51652527]
[140.81332397 -67.49507141]
[142.70526123 -52.53274155]
[140.81597900 -37.57007599]
[135.26420593 -23.54764175]
[126.39894867 -11.34689999]
[114.77748871 -1.73480046]
[101.13035583 4.68443251]
[86.31542206 7.50727987]
[85.37979126 22.47807121]
[84.44416046 37.44886398]
[87.08302307 52.21492004]
[93.14604187 65.93497467]
[99.20905304 79.65502930]
[107.64456940 81.12928009]
[114.72779083 85.94170380]
[124.61322784 73.58901978]
[139.31440735 75.98160553]
[153.21696472 70.34964752]
[167.11952209 64.71769714]
[171.76559448 49.78625107]
[184.95031738 41.37808228]
[200.44824219 43.46326828]
[210.94175720 55.05724716]
[211.47612000 70.68569946]
[201.79902649 82.96934509]
[186.47970581 86.10822296]
[172.75148010 78.62024689]
[158.84892273 84.25220490]
[144.94636536 89.88416290]
[136.05532837 101.83400726]
[120.35974884 99.84426117]
[117.11779022 111.02382660]
[108.28091431 118.60027313]
[108.90489197 133.58728027]
[109.52886963 148.57431030]
[119.75594330 163.85130310]
[111.09813690 179.08424377]
[112.03376007 194.05502319]
[112.96939087 209.02581787]
[122.13058472 218.16510010]
[122.56781006 230.69618225]
[114.59294128 239.84542847]
[115.21691895 254.83244324]
[118.48083496 260.70223999]
[118.27233887 266.46310425]
[115.54196167 270.45318604]
[115.54196167 285.45318604]
[115.54196167 300.45318604]
[123.27925873 314.25335693]
[115.54196167 326.98062134]
[115.54196167 341.98062134]
[115.54196167 356.98062134]
[115.54196167 371.98062134]
[115.54196167 386.98062134]
[115.54196167 401.98062134]
[115.54196167 416.98062134]
[115.54196167 431.98062134]
[115.54196167 446.98062134]
[115.54196167 461.98062134]
[130.08184814 466.04193115]
[142.98622131 473.87643433]
[153.29751587 484.90277100]
[160.25053406 498.30270386]
[163.32933044 513.08184814]
[162.30543518 528.14355469]
[157.25483704 542.37005615]
[148.55232239 554.70574951]
[136.84365845 564.23516846]
[122.99771881 570.25115967]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 124]
[26 123]
[28 120]
[29 119]
[30 118]
[33 116]
[34 115]
[35 114]
[37 94]
[38 93]
[39 92]
[63 91]
[64 90]
[65 89]
[96 112]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
