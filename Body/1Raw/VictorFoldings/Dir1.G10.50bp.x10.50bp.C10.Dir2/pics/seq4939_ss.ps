%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUAAUCAGGGGGGGGGGUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCxxxxxxxxxxUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUCCCCCCCCCCUUAAUAAUCA\
) } def
/len { sequence length } bind def

/coor [
[83.68219757 416.30596924]
[69.83625793 410.28994751]
[58.12759781 400.76052856]
[49.42507553 388.42486572]
[44.37447357 374.19833374]
[43.35058212 359.13665771]
[46.42938232 344.35748291]
[53.38240433 330.95758057]
[63.69368744 319.93124390]
[76.59806824 312.09674072]
[91.13795471 308.03540039]
[91.13795471 293.03540039]
[91.13795471 278.03540039]
[91.13795471 263.03540039]
[91.13795471 248.03541565]
[91.13795471 233.03541565]
[91.13795471 218.03541565]
[91.13795471 203.03541565]
[91.13795471 188.03541565]
[91.13795471 173.03541565]
[87.97237396 166.30303955]
[91.29724121 157.72416687]
[91.60929108 142.72741699]
[91.92134857 127.73065948]
[76.02597046 120.43453217]
[66.14481354 104.23377991]
[52.02000809 109.28253937]
[41.82466888 122.12727356]
[25.64506149 119.45289612]
[20.12537384 104.01058197]
[30.94379044 91.68605804]
[46.97125244 95.15773773]
[61.09605408 90.10897827]
[67.44318390 76.51802826]
[62.24776840 62.44651031]
[57.05235291 48.37498856]
[50.98933792 34.65493393]
[44.08234024 21.33977890]
[37.17534256 8.02462387]
[30.26834297 -5.29053164]
[23.36134529 -18.60568810]
[16.45434570 -31.92084312]
[9.54734802 -45.23600006]
[2.64034939 -58.55115509]
[-11.41866016 -54.36859512]
[-26.00417137 -52.85491180]
[-40.61421585 -54.06066132]
[-54.74626160 -57.94283676]
[-67.91451263 -64.36640930]
[-79.66658020 -73.10899353]
[-89.59904480 -83.86859131]
[-97.37132263 -96.27397919]
[-102.71728516 -109.89755249]
[-105.45443726 -124.27002716]
[-105.49010468 -138.89663696]
[-102.82458496 -153.27416992]
[-97.55108643 -166.90823364]
[-89.85247040 -179.33030701]
[-79.99488831 -190.11381531]
[-68.31863403 -198.88879395]
[-74.94712830 -212.34475708]
[-81.57563019 -225.80072021]
[-95.50045776 -234.46278381]
[-94.69094849 -250.84193420]
[-79.97985840 -258.08871460]
[-66.50069427 -248.74826050]
[-68.11966705 -232.42922974]
[-61.49116516 -218.97326660]
[-54.86266708 -205.51728821]
[-40.04414368 -209.55743408]
[-24.71860695 -210.64447021]
[-9.46898365 -208.73524475]
[5.12433243 -203.90060425]
[18.50557518 -196.32276917]
[30.16477013 -186.28848267]
[39.65717316 -174.17813110]
[46.62022781 -160.45133972]
[50.78742218 -145.62953186]
[51.99848557 -130.27609253]
[50.20555115 -114.97503662]
[45.47503662 -100.30867004]
[37.98520660 -86.83554077]
[28.01943970 -75.06909180]
[15.95550537 -65.45815277]
[22.86250305 -52.14299774]
[29.76950264 -38.82784271]
[36.67650223 -25.51268578]
[43.58349991 -12.19752979]
[50.49049759 1.11762559]
[57.39749527 14.43278122]
[64.30449677 27.74793625]
[70.25273895 13.97773647]
[84.12364960 8.26829815]
[98.04197693 13.86117744]
[104.10552216 27.58099556]
[98.87168884 41.63827133]
[85.31200409 48.05192947]
[71.12387085 43.17957306]
[76.31929016 57.25109482]
[81.51470184 71.32260895]
[92.09575653 67.70695496]
[102.98942566 67.76457214]
[112.98836517 71.30110931]
[121.04539490 77.74684906]
[126.38292694 86.23909760]
[128.56665039 95.73381805]
[143.46855164 97.44651031]
[158.37046814 99.15920258]
[173.33070374 100.25051117]
[188.32341003 100.71855164]
[203.31610107 101.18659210]
[215.94615173 91.29410553]
[231.52119446 95.14084625]
[238.09339905 109.77592468]
[230.62112427 123.97257233]
[214.83647156 126.84032440]
[202.84805298 116.17929077]
[187.85536194 115.71125031]
[172.86267090 115.24320984]
[170.70736694 117.13053894]
[167.65075684 118.24908447]
[163.99264526 118.24204254]
[160.15945435 116.87173462]
[156.65777588 114.06110382]
[141.75587463 112.34841156]
[126.85396576 110.63572693]
[118.99707794 121.75695801]
[106.91810608 128.04270935]
[106.60604858 143.03947449]
[106.29399109 158.03622437]
[106.13795471 173.03541565]
[106.13795471 188.03541565]
[106.13795471 203.03541565]
[106.13795471 218.03541565]
[106.13795471 233.03541565]
[106.13795471 248.03541565]
[106.13795471 263.03540039]
[106.13795471 278.03540039]
[106.13795471 293.03540039]
[106.13795471 308.03540039]
[120.67784119 312.09674072]
[133.58222961 319.93124390]
[143.89350891 330.95758057]
[150.84652710 344.35748291]
[153.92532349 359.13665771]
[152.90144348 374.19833374]
[147.85083008 388.42486572]
[139.14831543 400.76052856]
[127.43965149 410.28994751]
[113.59371185 416.30596924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[26 33]
[27 32]
[34 100]
[35 99]
[36 98]
[37 91]
[38 90]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[60 69]
[61 68]
[62 67]
[106 126]
[107 125]
[108 124]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
