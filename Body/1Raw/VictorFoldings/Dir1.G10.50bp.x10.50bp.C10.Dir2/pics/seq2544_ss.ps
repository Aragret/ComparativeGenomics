%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGAUUAAAAGGGGGGGGGGCACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGUCAxxxxxxxxxxGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCCCCCCCCCCCUAAGAUUAAAA\
) } def
/len { sequence length } bind def

/coor [
[20.51251411 633.46246338]
[7.02363443 626.73095703]
[-4.46186590 616.96636963]
[-13.27623558 604.73645020]
[-18.90701675 590.75225830]
[-21.02684593 575.82678223]
[-19.51247597 560.82781982]
[-14.45195293 546.62725830]
[-6.13948822 534.05084229]
[4.94164276 523.82971191]
[18.14719772 516.55804443]
[32.70942307 512.65869141]
[32.40144348 497.66186523]
[32.09346771 482.66503906]
[31.78549004 467.66818237]
[31.47751236 452.67135620]
[31.16953468 437.67449951]
[30.86155701 422.67767334]
[30.55357933 407.68084717]
[30.24560165 392.68399048]
[29.93762398 377.68716431]
[19.04716110 367.59094238]
[18.52119255 352.38641357]
[29.18486595 341.03195190]
[25.88278389 334.36798096]
[29.02770615 325.72476196]
[29.02770615 310.72476196]
[29.02770615 295.72476196]
[20.31802750 307.93710327]
[7.22979021 315.26501465]
[-7.73397207 316.30703735]
[-21.71154404 310.86392212]
[-32.02981567 299.97662354]
[-36.71548843 285.72726440]
[-34.87245941 270.84091187]
[-26.85319710 258.16448975]
[-14.19132900 250.12229919]
[0.69165313 248.25230408]
[14.94948292 252.91217041]
[25.85545158 263.21069336]
[31.32407761 277.17974854]
[34.98278427 262.63278198]
[38.64148712 248.08584595]
[42.30019379 233.53887939]
[40.76495361 230.30001831]
[40.75968170 226.14434814]
[42.70327759 221.81675720]
[46.65796280 218.22291565]
[51.20525360 203.92878723]
[55.75254440 189.63465881]
[54.52883530 187.04747009]
[54.28878784 183.80529785]
[55.29266739 180.29261780]
[57.65230560 176.98268127]
[61.30409622 174.38189697]
[67.00875854 160.50901794]
[72.71342468 146.63613892]
[78.41808319 132.76325989]
[84.12274933 118.89037323]
[69.33448029 95.48793030]
[85.23659515 65.72994995]
[84.00598145 50.78051376]
[82.77536774 35.83107758]
[67.92784882 33.14525604]
[54.28180695 26.70725441]
[42.76764679 16.95602417]
[34.17042160 4.55642080]
[29.07630730 -9.64612865]
[27.83262825 -24.68327141]
[30.52418327 -39.52975082]
[36.96745300 -53.17330933]
[46.72312927 -64.68370819]
[59.12604904 -73.27613831]
[73.33056641 -78.36476898]
[88.36818695 -79.60264587]
[103.21363068 -76.90535736]
[116.85469818 -70.45681763]
[128.36132812 -60.69670105]
[136.94897461 -48.29046249]
[142.03211975 -34.08398438]
[143.26417542 -19.04588318]
[140.56115723 -4.20148706]
[134.10736084 9.43709087]
[124.34279633 20.93995094]
[111.93324280 29.52280617]
[97.72480774 34.60046387]
[98.95541382 49.54990005]
[100.18602753 64.49933624]
[106.96697998 67.70381927]
[113.37617493 54.14203262]
[126.93785858 60.55145645]
[120.52886963 74.11280060]
[127.30982208 77.31728363]
[139.64109802 68.77682495]
[151.97238159 60.23636627]
[164.21534729 51.56975937]
[176.36868286 42.77791595]
[182.57205200 27.59733391]
[198.85490417 25.64772224]
[208.46681213 38.93467712]
[201.51988220 53.78971481]
[185.16052246 54.93125153]
[173.00718689 63.72309113]
[169.40892029 70.23191071]
[160.51284790 72.56764984]
[148.18156433 81.10810852]
[135.85028076 89.64856720]
[135.17869568 101.44686127]
[130.94137573 111.76338959]
[123.99368286 119.62232971]
[115.42109680 124.42913055]
[106.38941956 126.00964355]
[97.99562836 124.59503937]
[92.29096222 138.46791077]
[86.58630371 152.34078979]
[80.88163757 166.21368408]
[75.17697906 180.08656311]
[70.04667664 194.18194580]
[65.49938202 208.47607422]
[60.95209503 222.77020264]
[56.84714890 237.19758606]
[53.18844223 251.74455261]
[49.52973557 266.29150391]
[45.87103271 280.83843994]
[44.02770615 295.72476196]
[44.02770615 310.72476196]
[44.02770615 325.72476196]
[44.18170547 340.72396851]
[55.30254364 351.63107300]
[55.40124130 366.84439087]
[44.93445969 377.37918091]
[45.24243927 392.37600708]
[45.55041504 407.37286377]
[45.85839462 422.36968994]
[46.16637039 437.36654663]
[46.47434998 452.36337280]
[46.78232574 467.36019897]
[47.09030533 482.35705566]
[47.39828110 497.35388184]
[47.70626068 512.35070801]
[62.41629410 515.64892578]
[75.90925598 522.37231445]
[87.40067291 532.12988281]
[96.22245789 544.35443115]
[101.86170959 558.33520508]
[103.99059296 573.25939941]
[102.48531342 588.25933838]
[97.43340302 602.46289062]
[89.12856293 615.04437256]
[78.05362701 625.27221680]
[64.85248566 632.55187988]
[50.29262924 636.46008301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 128]
[26 127]
[27 126]
[28 125]
[41 124]
[42 123]
[43 122]
[44 121]
[48 120]
[49 119]
[50 118]
[55 117]
[56 116]
[57 115]
[58 114]
[59 113]
[61 88]
[62 87]
[63 86]
[93 107]
[94 106]
[95 105]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
