%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGAACCAGGGGGGGGGGUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUAGGxxxxxxxxxxUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUCCCCCCCCCCAAGAGAACCA\
) } def
/len { sequence length } bind def

/coor [
[94.78298950 366.22836304]
[80.93704987 360.21234131]
[69.22839355 350.68292236]
[60.52586746 338.34725952]
[55.47526550 324.12072754]
[54.45137405 309.05905151]
[57.53017044 294.27990723]
[64.48319244 280.87997437]
[74.79447937 269.85363770]
[87.69886017 262.01913452]
[102.23874664 257.95782471]
[102.23874664 242.95780945]
[102.23874664 227.95780945]
[102.23874664 212.95780945]
[102.23874664 197.95780945]
[102.23874664 182.95780945]
[102.23874664 167.95780945]
[102.23874664 152.95780945]
[102.23874664 137.95780945]
[102.23874664 122.95780945]
[95.08953857 136.14450073]
[80.19902039 137.95350647]
[70.10034180 126.86222076]
[73.29341888 112.20601654]
[87.09077454 106.32083893]
[72.15646362 104.91853333]
[57.22215652 103.51622772]
[42.28784943 102.11392975]
[27.33976173 100.86705017]
[12.37951279 99.77574158]
[-2.58073616 98.68443298]
[-17.54098511 97.59312439]
[-32.50123215 96.50180817]
[-46.82775497 103.21458435]
[-58.95837784 94.57183075]
[-68.86495972 106.51499939]
[-83.90786743 110.32164764]
[-98.30279541 104.52804565]
[-106.51459503 91.36195374]
[-105.38566589 75.88600159]
[-95.35009766 64.05101013]
[-80.26678467 60.40776825]
[-65.93555450 66.35718536]
[-57.86706543 79.61157990]
[-44.61060333 72.82074738]
[-31.40992355 81.54156494]
[-16.44967461 82.63287354]
[-1.48942566 83.72418213]
[13.47082329 84.81549072]
[28.43107224 85.90680695]
[35.37590408 83.23941803]
[43.69015121 87.17961884]
[58.62445831 88.58192444]
[73.55876923 89.98423004]
[88.49307251 91.38652802]
[102.45346832 85.89949799]
[112.43618774 74.70373535]
[122.41891479 63.50796890]
[107.17270660 47.31532669]
[116.33058167 29.66509056]
[115.08370209 14.71700287]
[113.83683014 -0.23108383]
[112.58995819 -15.17917061]
[97.78995514 -18.20186043]
[84.44169617 -25.27297020]
[73.62725830 -35.81927872]
[66.22332001 -48.98584366]
[62.83008957 -63.70530701]
[63.72263718 -78.78443146]
[68.82861328 -93.00082397]
[77.73409271 -105.20201874]
[89.71714783 -114.39891815]
[103.80637360 -119.84597778]
[118.85961151 -121.10162354]
[133.65657043 -118.06406403]
[146.99772644 -110.97954559]
[157.80155945 -100.42237854]
[165.19226074 -87.24838257]
[168.57070923 -72.52552032]
[167.66300964 -57.44729614]
[162.54275513 -43.23604584]
[153.62501526 -31.04380417]
[141.63273621 -21.85894585]
[127.53804016 -16.42604446]
[128.78491211 -1.47795832]
[130.03178406 13.47012901]
[131.27867126 28.41821480]
[139.01660156 32.75544739]
[143.80308533 41.04816437]
[143.68551636 51.32782364]
[158.39347839 48.38233948]
[170.40562439 38.08580017]
[184.40444946 43.17326355]
[199.11241150 40.22778320]
[213.82037354 37.28229904]
[218.74339294 18.65698814]
[242.01925659 9.02662086]
[255.40554810 2.25850606]
[268.79183960 -4.50960875]
[282.17813110 -11.27772331]
[293.58511353 -23.82032967]
[308.79531860 -16.33127022]
[305.80953979 0.35769185]
[288.94622803 2.10856128]
[275.55993652 8.87667561]
[262.17367554 15.64479065]
[248.78738403 22.41290474]
[250.33653259 29.75116920]
[254.98402405 51.76595688]
[269.96374512 52.54580307]
[284.94345093 53.32564545]
[299.92315674 54.10549164]
[314.27856445 46.17739868]
[328.18054199 54.87605286]
[327.32797241 71.25302124]
[312.59786987 78.46109009]
[299.14331055 69.08520508]
[284.16360474 68.30535889]
[269.18389893 67.52551270]
[254.20417786 66.74567413]
[228.75152588 67.31571198]
[216.76585388 51.99026108]
[202.05789185 54.93574524]
[187.34992981 57.88122559]
[176.38978577 67.96708679]
[161.33895874 63.09030151]
[146.63099670 66.03578186]
[133.61468506 73.49069214]
[123.63195801 84.68646240]
[113.64923096 95.88222504]
[117.23874664 122.95780945]
[117.23874664 137.95780945]
[117.23874664 152.95780945]
[117.23874664 167.95780945]
[117.23874664 182.95780945]
[117.23874664 197.95780945]
[117.23874664 212.95780945]
[117.23874664 227.95780945]
[117.23874664 242.95780945]
[117.23874664 257.95782471]
[131.77862549 262.01913452]
[144.68301392 269.85363770]
[154.99429321 280.87997437]
[161.94732666 294.27990723]
[165.02612305 309.05905151]
[164.00222778 324.12072754]
[158.95162964 338.34725952]
[150.24909973 350.68292236]
[138.54043579 360.21234131]
[124.69450378 366.22836304]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 55]
[26 54]
[27 53]
[28 52]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[35 44]
[56 130]
[57 129]
[58 128]
[60 87]
[61 86]
[62 85]
[63 84]
[90 127]
[91 126]
[93 124]
[94 123]
[95 122]
[97 107]
[98 106]
[99 105]
[100 104]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
