%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAACCUCAAGGGGGGGGGGCACCACCUUCUUCGACCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACxxxxxxxxxxCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCGACCCCCCCCCCGCAAUCUCAA\
) } def
/len { sequence length } bind def

/coor [
[82.30053711 375.84854126]
[68.45459747 369.83251953]
[56.74593735 360.30310059]
[48.04341507 347.96743774]
[42.99281311 333.74090576]
[41.96892166 318.67922974]
[45.04771805 303.90005493]
[52.00074005 290.50012207]
[62.31202698 279.47381592]
[75.21640778 271.63928223]
[89.75629425 267.57797241]
[89.75629425 252.57798767]
[89.75629425 237.57798767]
[89.75629425 222.57798767]
[89.75629425 207.57798767]
[89.75629425 192.57798767]
[89.75629425 177.57798767]
[89.75629425 162.57798767]
[89.75629425 147.57798767]
[89.75629425 132.57798767]
[84.31687927 127.41438293]
[77.12549591 140.57812500]
[69.93411255 153.74185181]
[65.81986237 168.16659546]
[53.51504135 176.74513245]
[38.55755234 175.61662292]
[27.67916298 165.28895569]
[25.77580070 150.41020203]
[33.70409012 137.67669678]
[47.89393997 132.81924438]
[60.66599655 124.95320892]
[73.43805695 117.08717346]
[67.99864197 111.92356873]
[53.01892853 112.70341492]
[39.56437683 122.07929993]
[24.83427811 114.87123108]
[23.98169136 98.49426270]
[37.88368607 89.79560852]
[52.23908234 97.72370148]
[67.21879578 96.94385529]
[82.44402313 79.96570587]
[100.78763580 79.66251373]
[106.85065460 65.94245911]
[112.91366577 52.22240829]
[116.16448975 37.57890701]
[116.47654724 22.58215332]
[116.78860474 7.58539963]
[117.10066223 -7.41135406]
[117.41271210 -22.40810776]
[109.96418762 -36.36625671]
[117.96458435 -48.92980957]
[118.27664185 -63.92656326]
[103.42202759 -66.15563202]
[88.97443390 -70.26602173]
[75.17109680 -76.19023132]
[62.23868179 -83.83097839]
[50.38955688 -93.06280518]
[39.81829453 -103.73410797]
[30.69847679 -115.66965485]
[23.17986488 -128.67344666]
[17.38591957 -142.53196716]
[13.41178513 -157.01763916]
[11.32271767 -171.89259338]
[11.15302372 -186.91256714]
[12.90548706 -201.83091736]
[16.55133438 -216.40266418]
[22.03069305 -230.38854980]
[29.25359154 -243.55889893]
[38.10142136 -255.69744873]
[48.42889023 -266.60485840]
[60.06641769 -276.10202026]
[72.82289886 -284.03302002]
[86.48886871 -290.26757812]
[100.83990479 -294.70333862]
[115.64037323 -297.26742554]
[130.64721680 -297.91778564]
[145.61401367 -296.64373779]
[160.29499817 -293.46615601]
[174.44909668 -288.43728638]
[187.84388733 -281.63961792]
[200.25941467 -273.18487549]
[211.49179077 -263.21179199]
[221.35659790 -251.88423157]
[229.69181824 -239.38813782]
[236.36059570 -225.92872620]
[241.25343323 -211.72700500]
[244.28994751 -197.01620483]
[245.42031860 -182.03787231]
[244.62596130 -167.03794861]
[241.91992188 -152.26278687]
[237.34664917 -137.95497131]
[230.98123169 -124.34947205]
[222.92819214 -111.66968536]
[213.31976318 -100.12384033]
[202.31373596 -89.90152740]
[190.09083557 -81.17060089]
[176.85177612 -74.07443237]
[162.81394958 -68.72955322]
[148.20787048 -65.22371674]
[133.27339172 -63.61450958]
[132.96133423 -48.61775589]
[140.43218994 -35.73227310]
[132.40946960 -22.09605217]
[132.09741211 -7.09929752]
[131.78535461 7.89745617]
[131.47329712 22.89420891]
[131.16123962 37.89096451]
[139.26147461 25.26614189]
[150.66908264 15.52619648]
[164.40751648 9.50492287]
[179.30067444 7.71777058]
[194.07362366 10.31773186]
[207.46173096 17.08223534]
[218.31890869 27.43220329]
[225.71569824 40.48162079]
[229.01892090 55.11339188]
[227.94580078 70.07495880]
[222.58819580 84.08552551]
[213.40473938 95.94571686]
[201.18157959 104.64023590]
[186.96511841 109.42478180]
[171.97232056 109.88977814]
[157.48667908 105.99541473]
[144.74822998 98.07507324]
[134.84744263 86.80677795]
[128.63189697 73.15514374]
[126.63372040 58.28542328]
[120.57070160 72.00547791]
[114.50769043 85.72553253]
[125.24981689 108.48718262]
[104.75629425 132.57798767]
[104.75629425 147.57798767]
[104.75629425 162.57798767]
[104.75629425 177.57798767]
[104.75629425 192.57798767]
[104.75629425 207.57798767]
[104.75629425 222.57798767]
[104.75629425 237.57798767]
[104.75629425 252.57798767]
[104.75629425 267.57797241]
[119.29618073 271.63928223]
[132.20056152 279.47381592]
[142.51184082 290.50012207]
[149.46487427 303.90005493]
[152.54367065 318.67922974]
[151.51977539 333.74090576]
[146.46917725 347.96743774]
[137.76664734 360.30310059]
[126.05798340 369.83251953]
[112.21205139 375.84854126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 40]
[34 39]
[42 129]
[43 128]
[44 127]
[45 107]
[46 106]
[47 105]
[48 104]
[49 103]
[51 101]
[52 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
