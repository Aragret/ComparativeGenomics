%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCCUACGGGGGGGGGGACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAxxxxxxxxxxAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCCCCCCCCCCCUCUUCCUUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 563.64263916]
[71.19830322 557.62664795]
[59.48964310 548.09722900]
[50.78712082 535.76153564]
[45.73651886 521.53503418]
[44.71262741 506.47335815]
[47.79142761 491.69418335]
[54.74444962 478.29425049]
[65.05573273 467.26794434]
[77.96011353 459.43341064]
[92.50000000 455.37210083]
[92.50000000 440.37210083]
[92.50000000 425.37210083]
[92.50000000 410.37210083]
[92.50000000 395.37210083]
[92.50000000 380.37210083]
[92.50000000 365.37210083]
[92.50000000 350.37210083]
[92.50000000 335.37210083]
[92.50000000 320.37210083]
[92.50000000 305.37210083]
[79.01693726 298.99459839]
[69.60120392 287.34756470]
[66.16201019 272.70745850]
[69.43365479 257.96578979]
[78.81950378 246.05812073]
[92.50000000 239.37939453]
[84.76270294 226.65213013]
[92.50000000 212.85195923]
[92.50000000 197.85195923]
[92.50000000 182.85195923]
[92.50000000 167.85195923]
[92.50000000 152.85195923]
[80.56893921 149.71934509]
[69.67546844 143.93179321]
[60.40128326 135.79833984]
[53.24161530 125.75330353]
[48.57877731 114.33308411]
[46.66176224 102.14749146]
[47.59293365 89.84722900]
[51.32256699 78.08911133]
[57.65150833 67.50100708]
[66.24179840 58.64829636]
[76.63472748 52.00371170]
[72.02916718 37.72825241]
[67.42359924 23.45279121]
[60.10449600 10.35963726]
[50.35684204 -1.04138362]
[40.60919189 -12.44240475]
[30.62646484 -23.63817024]
[20.41298485 -34.62383652]
[10.19950485 -45.60950089]
[-0.01397479 -56.59516525]
[-10.22745419 -67.58082581]
[-26.02840614 -67.90558624]
[-36.91130066 -79.36587524]
[-36.41950607 -95.16250610]
[-24.84479713 -105.92362976]
[-9.05424404 -105.26484680]
[1.58389866 -93.57701111]
[0.75821006 -77.79431152]
[10.97169018 -66.80864716]
[21.18516922 -55.82297897]
[31.39864922 -44.83731461]
[41.61212921 -33.85165024]
[46.32862091 -32.78852844]
[50.40390396 -28.71135139]
[52.01021194 -22.19005585]
[61.75786591 -10.78903580]
[71.50551605 0.61198527]
[69.14939880 -14.20181561]
[71.18177795 -29.06349182]
[77.42867279 -42.70080566]
[87.35531616 -53.94632721]
[100.11193085 -61.83738327]
[114.60648346 -65.69844818]
[129.59817505 -65.19901276]
[143.80361938 -60.38180923]
[156.00674438 -51.65922928]
[165.16293335 -39.77796936]
[170.48834229 -25.75512886]
[171.52708435 -10.79113865]
[168.19026184 3.83300352]
[160.76348877 16.86539268]
[149.88256836 27.19038773]
[136.47895813 33.92411423]
[121.70005798 36.49012375]
[106.81105042 34.66875839]
[93.08650208 28.61593628]
[81.69905853 18.84722710]
[86.30462646 33.12268829]
[90.91018677 47.39814758]
[107.34853363 47.12677002]
[123.08984375 51.87060547]
[136.64100647 61.17968750]
[146.71662903 74.17102051]
[160.73333740 68.82950592]
[174.75004578 63.48799133]
[175.99005127 48.27532959]
[183.71519470 35.11155319]
[196.39164734 26.61034775]
[211.50247192 24.45962906]
[226.04742432 29.08642387]
[237.13858032 39.57207870]
[242.57379150 53.83466339]
[241.27388000 69.04232788]
[233.49696350 82.17557526]
[220.78713989 90.62680054]
[205.66795349 92.71799469]
[191.14134216 88.03395844]
[180.09156799 77.50470734]
[166.07484436 82.84621429]
[152.05813599 88.18772888]
[153.07350159 105.72557831]
[148.34106445 122.64334869]
[138.37332153 137.10887146]
[124.24977112 147.55552673]
[107.50000000 152.85195923]
[107.50000000 167.85195923]
[107.50000000 182.85195923]
[107.50000000 197.85195923]
[107.50000000 212.85195923]
[115.23729706 226.65213013]
[107.50000000 239.37939453]
[121.18049622 246.05812073]
[130.56634521 257.96578979]
[133.83798218 272.70745850]
[130.39880371 287.34756470]
[120.98306274 298.99459839]
[107.50000000 305.37210083]
[107.50000000 320.37210083]
[107.50000000 335.37210083]
[107.50000000 350.37210083]
[107.50000000 365.37210083]
[107.50000000 380.37210083]
[107.50000000 395.37210083]
[107.50000000 410.37210083]
[107.50000000 425.37210083]
[107.50000000 440.37210083]
[107.50000000 455.37210083]
[122.03988647 459.43341064]
[134.94427490 467.26794434]
[145.25555420 478.29425049]
[152.20857239 491.69418335]
[155.28736877 506.47335815]
[154.26348877 521.53503418]
[149.21287537 535.76153564]
[140.51036072 548.09722900]
[128.80169678 557.62664795]
[114.95575714 563.64263916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 124]
[29 122]
[30 121]
[31 120]
[32 119]
[33 118]
[44 92]
[45 91]
[46 90]
[47 70]
[48 69]
[49 68]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[96 113]
[97 112]
[98 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
