%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCCCCGGGGGGGGGGUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUxxxxxxxxxxCACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACCCCCCCCCCCUACUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[77.73239136 406.11389160]
[63.88645172 400.09786987]
[52.17779160 390.56845093]
[43.47526550 378.23275757]
[38.42466354 364.00625610]
[37.40077209 348.94458008]
[40.47957230 334.16540527]
[47.43259430 320.76547241]
[57.74387741 309.73913574]
[70.64826202 301.90463257]
[85.18814850 297.84332275]
[85.18814850 282.84332275]
[85.18814850 267.84332275]
[85.18814850 252.84332275]
[85.18814850 237.84332275]
[85.18814850 222.84332275]
[85.18814850 207.84332275]
[85.18814850 192.84332275]
[85.18814850 177.84332275]
[85.18814850 162.84332275]
[85.18814850 147.84332275]
[77.45084381 135.11605835]
[85.18814850 121.31587982]
[79.76886749 106.51909637]
[84.39382172 94.47833252]
[93.51490021 90.07859802]
[90.72257233 75.34078979]
[87.93025208 60.60298538]
[75.59440613 46.97188950]
[81.94991302 30.64377403]
[78.85159302 15.96724796]
[75.75327301 1.29072249]
[72.65495300 -13.38580322]
[69.55662537 -28.06232834]
[66.45830536 -42.73885345]
[51.55807114 -40.92989731]
[36.55687332 -40.42647934]
[21.56888390 -41.23242569]
[6.70817375 -43.34160614]
[-7.91215706 -46.73797226]
[-22.18083763 -51.39566803]
[-35.98926926 -57.27924728]
[-49.23236465 -64.34393311]
[-61.80933380 -72.53595734]
[-73.62445068 -81.79297638]
[-84.58779907 -92.04452515]
[-94.61593628 -103.21260071]
[-103.63254547 -115.21218872]
[-111.56900024 -127.95197296]
[-118.36489868 -141.33499146]
[-123.96852112 -155.25938416]
[-128.33721924 -169.61918640]
[-131.43772888 -184.30509949]
[-133.24647522 -199.20536804]
[-133.74969482 -214.20657349]
[-132.94352722 -229.19454956]
[-130.83413696 -244.05522156]
[-127.43756866 -258.67550659]
[-122.77967834 -272.94412231]
[-116.89590454 -286.75247192]
[-109.83103180 -299.99548340]
[-101.63883209 -312.57232666]
[-92.38164520 -324.38729858]
[-82.12993622 -335.35052490]
[-70.96173096 -345.37850952]
[-58.96201324 -354.39492798]
[-46.22211838 -362.33120728]
[-32.83900833 -369.12692261]
[-18.91453362 -374.73034668]
[-4.55467081 -379.09884644]
[10.13128948 -382.19915771]
[25.03157616 -384.00769043]
[40.03278732 -384.51068115]
[55.02075577 -383.70431519]
[69.88140869 -381.59472656]
[84.50164032 -378.19793701]
[98.77018738 -373.53985596]
[112.57846069 -367.65588379]
[125.82135773 -360.59082031]
[138.39808655 -352.39843750]
[150.21295166 -343.14111328]
[161.17601013 -332.88925171]
[171.20384216 -321.72088623]
[180.22010803 -309.72103882]
[188.15620422 -296.98104858]
[194.95173645 -283.59783936]
[200.55496216 -269.67327881]
[204.92324829 -255.31335449]
[208.02336121 -240.62736511]
[209.83168030 -225.72705078]
[210.33447266 -210.72583008]
[209.52789307 -195.73786926]
[207.41809082 -180.87724304]
[204.02111816 -166.25706482]
[199.36280823 -151.98857117]
[193.47865295 -138.18038940]
[186.41340637 -124.93759155]
[178.22085571 -112.36096954]
[168.96334839 -100.54624176]
[158.71133423 -89.58332825]
[147.54283142 -79.55565643]
[135.54286194 -70.53955078]
[122.80274963 -62.60363388]
[109.41944885 -55.80830002]
[95.49481964 -50.20526505]
[81.13483429 -45.83717728]
[84.23315430 -31.16065025]
[87.33147430 -16.48412514]
[90.42979431 -1.80759931]
[93.52812195 12.86892605]
[96.62644196 27.54545212]
[106.61462402 34.44062805]
[109.28710175 46.69121552]
[102.66805267 57.81066132]
[105.46038055 72.54846954]
[108.25270081 87.28627014]
[117.88123322 98.78807831]
[131.89794922 104.12958527]
[145.46742249 96.35764313]
[160.84872437 99.17713928]
[170.77926636 111.25680542]
[170.57014465 126.89299011]
[160.32011414 138.70275879]
[144.86891174 141.10990906]
[131.51213074 132.97785950]
[126.55642700 118.14630127]
[112.53971863 112.80478668]
[100.18814850 121.31587982]
[107.92544556 135.11605835]
[100.18814850 147.84332275]
[100.18814850 162.84332275]
[100.18814850 177.84332275]
[100.18814850 192.84332275]
[100.18814850 207.84332275]
[100.18814850 222.84332275]
[100.18814850 237.84332275]
[100.18814850 252.84332275]
[100.18814850 267.84332275]
[100.18814850 282.84332275]
[100.18814850 297.84332275]
[114.72803497 301.90463257]
[127.63241577 309.73913574]
[137.94369507 320.76547241]
[144.89671326 334.16540527]
[147.97552490 348.94458008]
[146.95162964 364.00625610]
[141.90103149 378.23275757]
[133.19850159 390.56845093]
[121.48983765 400.09786987]
[107.64389801 406.11389160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[26 116]
[27 115]
[28 114]
[30 111]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
