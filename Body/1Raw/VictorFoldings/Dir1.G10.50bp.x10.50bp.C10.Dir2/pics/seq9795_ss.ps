%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUAAUUAUGGGGGGGGGGUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAxxxxxxxxxxCCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGCCCCCCCCCCGCAUAAUUAU\
) } def
/len { sequence length } bind def

/coor [
[85.28728485 363.17562866]
[71.44134521 357.15960693]
[59.73268509 347.63018799]
[51.03016281 335.29452515]
[45.97956085 321.06799316]
[44.95566940 306.00631714]
[48.03446960 291.22714233]
[54.98748779 277.82720947]
[65.29877472 266.80087280]
[78.20315552 258.96636963]
[92.74304199 254.90505981]
[92.74304199 239.90505981]
[92.74304199 224.90505981]
[92.74304199 209.90505981]
[92.74304199 194.90505981]
[92.74304199 179.90505981]
[92.74304199 164.90505981]
[92.74304199 149.90505981]
[92.74304199 134.90505981]
[92.74304199 119.90506744]
[92.74304199 104.90506744]
[90.71244812 102.53639221]
[89.52348328 99.35817719]
[89.48427582 95.69014740]
[90.77687073 91.96360016]
[93.41893005 88.67117310]
[94.66580963 73.72308350]
[95.91268158 58.77500153]
[97.15955353 43.82691193]
[82.31690979 41.62427139]
[67.64588928 38.47518158]
[53.20677567 34.39258575]
[39.05889893 29.39325333]
[25.26040268 23.49773407]
[11.86798573 16.73025131]
[-1.06332040 9.11861610]
[-13.48037624 0.69410491]
[-25.33215714 -8.50866318]
[-36.56996155 -18.45187187]
[-47.14761353 -29.09466362]
[-57.02164078 -40.39330292]
[-66.15147400 -52.30136108]
[-74.49958801 -64.76990509]
[-82.03169250 -77.74769592]
[-88.71682739 -91.18141174]
[-94.52751923 -105.01583862]
[-99.43989563 -119.19414520]
[-103.43376923 -133.65805054]
[-106.49272919 -148.34812927]
[-108.60420227 -163.20401001]
[-109.75951385 -178.16465759]
[-109.95391846 -193.16859436]
[-109.18661499 -208.15414429]
[-107.46075439 -223.05975342]
[-104.78343201 -237.82415771]
[-101.16564941 -252.38668823]
[-96.62226868 -266.68750000]
[-91.17196655 -280.66784668]
[-84.83713531 -294.27026367]
[-77.64380646 -307.43884277]
[-69.62154388 -320.11950684]
[-60.80330276 -332.26010132]
[-51.22533035 -343.81079102]
[-40.92697906 -354.72406006]
[-29.95056725 -364.95507812]
[-18.34120178 -374.46185303]
[-6.14658785 -383.20523071]
[6.58316469 -391.14935303]
[19.79574585 -398.26156616]
[33.43686295 -404.51260376]
[47.45045853 -409.87683105]
[61.77894974 -414.33215332]
[76.36345673 -417.86029053]
[91.14405060 -420.44677734]
[106.05998993 -422.08093262]
[121.04998016 -422.75604248]
[136.05242920 -422.46936035]
[151.00569153 -421.22204590]
[165.84829712 -419.01925659]
[180.51928711 -415.86999512]
[194.95835876 -411.78723145]
[209.10618591 -406.78775024]
[222.90461731 -400.89208984]
[236.29695129 -394.12445068]
[249.22817993 -386.51266479]
[261.64514160 -378.08801270]
[273.49682617 -368.88513184]
[284.73452759 -358.94177246]
[295.31204224 -348.29888916]
[305.18594360 -337.00012207]
[314.31564331 -325.09197998]
[322.66363525 -312.62332153]
[330.19558716 -299.64544678]
[336.88058472 -286.21166992]
[342.69110107 -272.37716675]
[347.60333252 -258.19882202]
[351.59704590 -243.73486328]
[354.65585327 -229.04475403]
[356.76715088 -214.18884277]
[357.92230225 -199.22817993]
[358.11651611 -184.22425842]
[357.34906006 -169.23870850]
[355.62304688 -154.33311462]
[352.94555664 -139.56874084]
[349.32760620 -125.00624847]
[344.78405762 -110.70548248]
[339.33361816 -96.72520447]
[332.99862671 -83.12286377]
[325.80514526 -69.95436096]
[317.78274536 -57.27379608]
[308.96438599 -45.13328552]
[299.38626099 -33.58271790]
[289.08779907 -22.66955376]
[278.11126709 -12.43864155]
[266.50180054 -2.93201995]
[254.30709839 5.81124496]
[241.57725525 13.75522518]
[228.36459351 20.86727715]
[214.72340393 27.11817551]
[200.70974731 32.48223495]
[186.38121033 36.93740845]
[171.79666138 40.46539688]
[157.01605225 43.05169678]
[142.10008240 44.68568039]
[127.11009216 45.36063385]
[112.10764313 45.07378769]
[110.86077118 60.02187347]
[109.61389160 74.96996307]
[108.36701965 89.91804504]
[107.74304199 104.90506744]
[107.74304199 119.90506744]
[107.74304199 134.90505981]
[107.74304199 149.90505981]
[107.74304199 164.90505981]
[107.74304199 179.90505981]
[107.74304199 194.90505981]
[107.74304199 209.90505981]
[107.74304199 224.90505981]
[107.74304199 239.90505981]
[107.74304199 254.90505981]
[122.28292847 258.96636963]
[135.18731689 266.80087280]
[145.49859619 277.82720947]
[152.45161438 291.22714233]
[155.53041077 306.00631714]
[154.50653076 321.06799316]
[149.45591736 335.29452515]
[140.75340271 347.63018799]
[129.04473877 357.15960693]
[115.19879913 363.17562866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 129]
[27 128]
[28 127]
[29 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
