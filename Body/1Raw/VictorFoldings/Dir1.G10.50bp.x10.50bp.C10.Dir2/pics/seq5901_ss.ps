%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCUACCUGGGGGGGGGGAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGAxxxxxxxxxxAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGCCCCCCCCCCACUCUUACCU\
) } def
/len { sequence length } bind def

/coor [
[104.06236267 365.47537231]
[90.21642303 359.45935059]
[78.50775909 349.92993164]
[69.80523682 337.59426880]
[64.75463104 323.36773682]
[63.73074341 308.30606079]
[66.80953979 293.52688599]
[73.76256561 280.12698364]
[84.07384491 269.10064697]
[96.97822571 261.26614380]
[111.51811981 257.20480347]
[111.51811981 242.20481873]
[111.51811981 227.20481873]
[111.51811981 212.20481873]
[111.51811981 197.20481873]
[111.51811981 182.20481873]
[111.51811981 167.20481873]
[111.51811981 152.20481873]
[111.51811981 137.20481873]
[111.51811981 122.20481873]
[92.58302307 121.48761749]
[81.39173889 108.47890472]
[66.41202545 109.25875092]
[51.43230820 110.03859711]
[46.29968643 124.31906891]
[36.11811829 135.51632690]
[22.46216393 141.94505310]
[7.42602968 142.65377808]
[-6.69754362 137.56559753]
[-17.76690102 127.48519135]
[-24.11620903 113.97165680]
[-39.09592438 114.75150299]
[-54.07563782 115.53134918]
[-69.05535126 116.31118774]
[-82.50990295 125.68707275]
[-97.23999786 118.47900391]
[-98.09259033 102.10203552]
[-84.19058990 93.40338135]
[-69.83519745 101.33147430]
[-54.85548401 100.55163574]
[-39.87576675 99.77178955]
[-24.89605331 98.99194336]
[-19.98429680 84.89215851]
[-10.02151680 73.71680450]
[3.49735689 67.18956757]
[18.52580070 66.33312225]
[32.77548599 71.30907440]
[44.06472015 81.38857269]
[50.65246201 95.05888367]
[65.63217926 94.27903748]
[80.61189270 93.49919128]
[81.29595947 91.73451996]
[82.14025116 90.04064941]
[72.63188934 78.43930817]
[63.12353134 66.83796692]
[53.61517334 55.23662949]
[44.10681534 43.63528824]
[29.39016342 35.21765900]
[33.40485001 18.74590683]
[50.34425735 18.04386520]
[55.70815659 34.12693024]
[65.21651459 45.72827148]
[74.72487640 57.32961273]
[84.23323059 68.93095398]
[93.74159241 80.53229523]
[112.11817169 80.76776123]
[124.78599548 96.62729645]
[137.04837036 87.98817444]
[149.31072998 79.34906006]
[161.57310486 70.70994568]
[158.32826233 62.44634247]
[156.84455872 53.61712265]
[157.21627808 44.59659576]
[159.45837402 35.77367020]
[163.50448608 27.53508377]
[169.20854187 20.24848175]
[176.34985352 14.24601173]
[184.64147949 9.80925560]
[193.74183655 7.15611172]
[203.26861572 6.43027306]
[212.81492615 7.69377995]
[221.96665955 10.92304230]
[229.42156982 -2.09326744]
[236.87648010 -15.10957718]
[244.33139038 -28.12588692]
[241.52993774 -43.92245102]
[252.24121094 -55.86598969]
[268.24844360 -54.79444504]
[277.27224731 -41.52981186]
[272.39031982 -26.24758339]
[257.34768677 -20.67097664]
[249.89277649 -7.65466642]
[242.43786621 5.36164284]
[234.98295593 18.37795258]
[243.74917603 30.54978943]
[258.45712280 27.60430717]
[273.16510010 24.65882492]
[287.87304688 21.71334267]
[296.65011597 8.84473515]
[311.60803223 6.06711817]
[323.82220459 14.51400566]
[338.53015137 11.56852245]
[353.23812866 8.62304020]
[367.94607544 5.67755795]
[374.30151367 -8.47829247]
[387.78048706 -16.16576004]
[403.20004272 -14.42885590]
[414.63104248 -3.93545604]
[417.67807007 11.27951336]
[411.16946411 25.36558723]
[397.60787964 32.90637970]
[382.20806885 31.00230598]
[370.89157104 20.38551903]
[356.18359375 23.33100128]
[341.47564697 26.27648354]
[326.76766968 29.22196770]
[318.74822998 41.72092819]
[303.87423706 44.91758728]
[290.81854248 36.42130280]
[276.11056519 39.36678696]
[261.40261841 42.31226730]
[246.69465637 45.25775146]
[243.69937134 68.21836090]
[230.27252197 86.54927826]
[210.06939697 95.96483612]
[188.26095581 94.51448822]
[170.21221924 82.97231293]
[157.94984436 91.61142731]
[145.68748474 100.25054169]
[133.42510986 108.88966370]
[126.51811981 122.20481873]
[126.51811981 137.20481873]
[126.51811981 152.20481873]
[126.51811981 167.20481873]
[126.51811981 182.20481873]
[126.51811981 197.20481873]
[126.51811981 212.20481873]
[126.51811981 227.20481873]
[126.51811981 242.20481873]
[126.51811981 257.20480347]
[141.05799866 261.26614380]
[153.96238708 269.10064697]
[164.27366638 280.12698364]
[171.22668457 293.52688599]
[174.30549622 308.30606079]
[173.28160095 323.36773682]
[168.23100281 337.59426880]
[159.52847290 349.92993164]
[147.81980896 359.45935059]
[133.97387695 365.47537231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 51]
[23 50]
[24 49]
[31 42]
[32 41]
[33 40]
[34 39]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[67 130]
[68 129]
[69 128]
[70 127]
[82 94]
[83 93]
[84 92]
[85 91]
[95 122]
[96 121]
[97 120]
[98 119]
[101 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
