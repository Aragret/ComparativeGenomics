%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCACCCAGGGGGGGGGGACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAxxxxxxxxxxAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACCCCCCCCCCCAACCACCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.08004761]
[71.19830322 377.06402588]
[59.48964310 367.53460693]
[50.78712082 355.19894409]
[45.73651886 340.97241211]
[44.71262741 325.91073608]
[47.79142761 311.13159180]
[54.74444962 297.73165894]
[65.05573273 286.70532227]
[77.96011353 278.87081909]
[92.50000000 274.80950928]
[92.50000000 259.80950928]
[92.50000000 244.80950928]
[92.50000000 229.80950928]
[92.50000000 214.80950928]
[92.50000000 199.80950928]
[92.50000000 184.80950928]
[92.50000000 169.80950928]
[92.50000000 154.80950928]
[92.50000000 139.80950928]
[76.66872406 133.11643982]
[65.03762054 120.46163177]
[50.91281509 125.51039124]
[36.78801346 130.55914307]
[34.11257172 145.68322754]
[24.22125626 157.43299866]
[9.77477646 162.64787292]
[-5.34083652 159.92503357]
[-17.05955887 149.99693298]
[-22.22911263 135.53417969]
[-19.45891380 120.42717743]
[-9.49413204 108.73963165]
[4.98475647 103.61544037]
[20.08300209 106.43297577]
[31.73925591 116.43434143]
[45.86405945 111.38558960]
[59.98886108 106.33683014]
[58.36107254 97.60534668]
[58.67138290 88.47446442]
[61.01329041 79.38067627]
[65.38086700 70.78128052]
[53.11849976 62.14216614]
[37.38074875 60.51925278]
[31.43254662 46.86392212]
[19.17017746 38.22480392]
[6.34504271 46.38472748]
[-8.62736893 49.01062393]
[-23.46387291 45.70206070]
[-35.90201187 36.96356964]
[-44.04505539 24.12771225]
[-46.65125275 9.15185833]
[-43.32317352 -5.68028021]
[-34.56833267 -18.10691071]
[-21.72177315 -26.23306465]
[-6.74250364 -28.81955910]
[8.08524418 -25.47197342]
[20.50034904 -16.70079041]
[28.60959435 -3.84355307]
[31.17638206 11.13910484]
[27.80929375 25.96243668]
[40.07166290 34.60155106]
[54.93232346 35.60653687]
[61.75761414 49.87979889]
[74.01998138 58.51891327]
[87.80236816 52.59894943]
[89.97920227 37.75774384]
[92.15603638 22.91654015]
[94.33287811 8.07533360]
[96.50971222 -6.76587152]
[82.85804749 -13.25612736]
[71.72705078 -23.48316574]
[64.10647583 -36.53760147]
[60.67395401 -51.25864792]
[61.73469162 -66.33731842]
[67.19437408 -80.43282318]
[76.56752777 -92.29180145]
[89.02069092 -100.85977173]
[103.44654846 -105.37485504]
[118.56236267 -105.43559265]
[133.02403259 -101.03657532]
[145.54565430 -92.56895447]
[155.01379395 -80.78568268]
[160.58657837 -66.73450470]
[161.76844788 -51.66484451]
[158.45433044 -36.91669083]
[150.93890381 -23.80143738]
[139.89045715 -13.48528290]
[126.29138184 -6.88553381]
[111.35092163 -4.58903456]
[109.17407990 10.25217056]
[106.99724579 25.09337616]
[104.82040405 39.93458176]
[102.64356995 54.77578735]
[116.23322296 58.99264908]
[127.49189758 67.05932617]
[135.40840149 77.95958710]
[139.36573792 90.44046021]
[154.34545898 89.66061401]
[169.32518005 88.88076782]
[175.16069031 85.55596924]
[180.92343140 85.70453644]
[184.94168091 88.39324951]
[199.94087219 88.23721313]
[214.94004822 88.08117676]
[223.55305481 84.84574127]
[230.25212097 88.08117676]
[245.25131226 88.23721313]
[260.25051880 88.39324951]
[267.99871826 75.13201141]
[281.34744263 67.53548431]
[296.70593262 67.64711761]
[309.94284058 75.43686676]
[317.49746704 88.80933380]
[317.33770752 104.16739655]
[309.50650024 117.37980652]
[296.11041260 124.89250183]
[280.75292969 124.68459320]
[267.56512451 116.81201172]
[260.09448242 103.39244080]
[245.09527588 103.23640442]
[230.09608459 103.08036804]
[215.09608459 103.08036804]
[200.09690857 103.23640442]
[185.09771729 103.39244080]
[170.10501099 103.86048126]
[155.12530518 104.64032745]
[140.14558411 105.42017365]
[136.53321838 117.50344086]
[129.37995911 127.89022064]
[119.37911987 135.57382202]
[107.50000000 139.80950928]
[107.50000000 154.80950928]
[107.50000000 169.80950928]
[107.50000000 184.80950928]
[107.50000000 199.80950928]
[107.50000000 214.80950928]
[107.50000000 229.80950928]
[107.50000000 244.80950928]
[107.50000000 259.80950928]
[107.50000000 274.80950928]
[122.03988647 278.87081909]
[134.94427490 286.70532227]
[145.25555420 297.73165894]
[152.20857239 311.13159180]
[155.28736877 325.91073608]
[154.26348877 340.97241211]
[149.21287537 355.19894409]
[140.51036072 367.53460693]
[128.80169678 377.06402588]
[114.95575714 383.08004761]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 37]
[23 36]
[24 35]
[41 64]
[42 63]
[44 61]
[45 60]
[65 93]
[66 92]
[67 91]
[68 90]
[69 89]
[97 127]
[98 126]
[99 125]
[102 124]
[103 123]
[104 122]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
