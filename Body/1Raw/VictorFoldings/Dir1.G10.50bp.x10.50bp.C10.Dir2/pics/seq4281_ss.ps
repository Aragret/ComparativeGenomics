%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUAUGAAUGGGGGGGGGGUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUxxxxxxxxxxACCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCCCCCCCCCCCUCUUAUUAAU\
) } def
/len { sequence length } bind def

/coor [
[62.39986801 359.25823975]
[51.83636856 348.51766968]
[43.92816162 335.69549561]
[39.07192993 321.43487549]
[37.51124954 306.45117188]
[39.32441330 291.49588013]
[44.42046738 277.31921387]
[52.54379654 264.63223267]
[63.28694153 254.07135010]
[76.11103058 246.16624451]
[90.37280273 241.31347656]
[88.81522369 226.39456177]
[87.25764465 211.47564697]
[85.70006561 196.55673218]
[84.14247894 181.63781738]
[82.58489990 166.71890259]
[81.02732086 151.80000305]
[79.46974182 136.88108826]
[67.86840057 127.37272644]
[52.93408966 128.77502441]
[37.99978256 130.17733765]
[23.06547356 131.57963562]
[8.13116646 132.98193359]
[1.63484728 141.80708313]
[-8.45186329 145.48973083]
[-18.67753220 143.02908325]
[-25.68451881 135.48362732]
[-40.66423416 136.26347351]
[-55.64394760 137.04331970]
[-60.69009781 151.38223267]
[-70.84312439 162.69526672]
[-84.55475616 169.25723267]
[-99.73408508 170.06748962]
[-114.06636047 165.00248718]
[-125.36602020 154.83459473]
[-131.90994263 141.11433411]
[-132.70024109 125.93395233]
[-127.61637878 111.60835266]
[-117.43362427 100.32207489]
[-103.70477295 93.79620361]
[-88.52336884 93.02588654]
[-74.20446777 98.12857819]
[-62.93159866 108.32617188]
[-56.42379379 122.06359863]
[-41.44407654 121.28375244]
[-26.46436310 120.50390625]
[-11.12915325 108.78806305]
[6.72886276 118.04763031]
[21.66316986 116.64533234]
[36.59747696 115.24302673]
[51.53178406 113.84072113]
[66.46609497 112.43841553]
[66.24436951 94.91419220]
[74.20611572 80.21699524]
[87.64131927 71.70422363]
[85.15619659 56.91151428]
[82.67108154 42.11880875]
[80.18595886 27.32610130]
[77.70084381 12.53339386]
[62.66757965 11.40892982]
[48.34047699 6.71877718]
[35.55249023 -1.26438487]
[25.04710197 -12.07642555]
[17.43507767 -25.08874702]
[13.15897083 -39.54483032]
[12.46739101 -54.60421753]
[15.40054321 -69.39138031]
[21.78789902 -83.04660034]
[31.25810432 -94.77599335]
[43.26057816 -103.89762115]
[57.09750748 -109.88116455]
[71.96443176 -112.37875366]
[86.99700928 -111.24517822]
[101.32126617 -106.54634094]
[114.10441589 -98.55542755]
[124.60324860 -87.73701477]
[132.20738220 -74.72008514]
[136.47471619 -60.26140976]
[137.15716553 -45.20160294]
[134.21505737 -30.41622734]
[127.81941986 -16.76487923]
[118.34210205 -5.04123020]
[106.33410645 4.07311916]
[92.49355316 10.04827499]
[94.97866821 24.84098244]
[97.46379089 39.63368988]
[99.94890594 54.42639542]
[102.43402863 69.21910095]
[108.79051208 70.40076447]
[114.76158142 72.88019562]
[120.08542633 76.54869080]
[124.52862549 81.24541473]
[127.89637756 86.76442719]
[142.60433960 83.81894684]
[157.31230164 80.87346649]
[162.85710144 71.42145538]
[172.50688171 66.71131897]
[182.93278503 68.09685516]
[190.68540955 74.87392426]
[205.50317383 72.54282379]
[220.32092285 70.21172333]
[235.13868713 67.88061523]
[249.95643616 65.54951477]
[254.31195068 50.92103958]
[264.58953857 39.63680649]
[278.74859619 33.93730545]
[293.97778320 34.95418167]
[307.25338745 42.48553085]
[315.93951416 55.03599548]
[318.31149292 70.11367035]
[313.89840698 84.72488403]
[303.57647705 95.96855164]
[289.39508057 101.61225128]
[274.17001343 100.53540802]
[260.92416382 92.95184326]
[252.28755188 80.36727142]
[237.46978760 82.69837189]
[222.65202332 85.02947998]
[207.83427429 87.36058044]
[193.01651001 89.69168854]
[178.98075867 102.93658447]
[160.25778198 95.58142090]
[145.54981995 98.52690887]
[130.84185791 101.47238922]
[128.64978027 114.47612762]
[121.02431488 125.85177612]
[108.96798706 133.35966492]
[94.38864899 135.32350159]
[95.94622803 150.24241638]
[97.50381470 165.16133118]
[99.06139374 180.08024597]
[100.61897278 194.99914551]
[102.17655182 209.91806030]
[103.73413849 224.83697510]
[105.29171753 239.75588989]
[120.24830627 241.55818176]
[134.42868042 246.64392090]
[147.12155151 254.75802612]
[157.69024658 265.49349976]
[165.60467529 278.31182861]
[170.46781921 292.57006836]
[172.03575134 307.55303955]
[170.22984314 322.50918579]
[165.14065552 336.68832397]
[157.02346802 349.37924194]
[146.28544617 359.94534302]
[133.46519470 367.85665894]
[119.20577240 372.71633911]
[104.22242737 374.28063965]
[89.26671600 372.47113037]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 129]
[18 128]
[19 52]
[20 51]
[21 50]
[22 49]
[23 48]
[27 46]
[28 45]
[29 44]
[55 88]
[56 87]
[57 86]
[58 85]
[59 84]
[93 124]
[94 123]
[95 122]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
