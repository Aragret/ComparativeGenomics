%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCCUCAAGGGGGGGGGGACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAxxxxxxxxxxCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUCCCCCCCCCCUUCCCCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 389.60498047]
[71.01555634 384.05197144]
[58.81560135 375.18563843]
[49.20452881 363.56332397]
[42.78650284 349.91561890]
[39.96496582 335.10043335]
[40.91728210 320.04907227]
[45.58358765 305.70764160]
[53.67055511 292.97769165]
[64.66983032 282.65942383]
[77.88998413 275.40142822]
[92.50000000 271.66000366]
[92.50000000 256.66000366]
[92.50000000 241.66000366]
[92.50000000 226.66000366]
[92.50000000 211.66000366]
[92.50000000 196.66000366]
[92.50000000 181.66000366]
[92.50000000 166.66000366]
[92.50000000 151.66000366]
[92.50000000 136.66000366]
[92.50000000 121.66000366]
[83.23181915 117.27690887]
[76.41545868 108.96415710]
[73.68686676 98.05204773]
[75.97857666 86.53147125]
[61.01729584 85.45439911]
[46.05601501 84.37732697]
[31.73589134 91.10374451]
[19.59704590 82.47253418]
[4.63576508 81.39546967]
[-10.32551575 80.31839752]
[-15.12955189 82.65858459]
[-19.86932564 82.85897827]
[-23.72679901 81.31317902]
[-26.16551971 78.68642426]
[-41.03211975 76.69036865]
[-55.89871597 74.69430542]
[-68.30811310 84.48116302]
[-83.99320221 82.54380035]
[-93.64830780 70.03163147]
[-91.54522705 54.36789703]
[-78.93167114 44.84561539]
[-63.29104996 47.11418533]
[-53.90266037 59.82770920]
[-39.03606033 61.82376862]
[-24.16946220 63.81982422]
[-9.24844551 65.35711670]
[5.71283484 66.43418884]
[20.67411613 67.51125336]
[33.92411041 60.70780563]
[47.13308334 69.41604614]
[62.09436417 70.49311829]
[77.05564880 71.57019043]
[90.41374207 64.74661255]
[98.31022644 51.99335861]
[106.20671082 39.24010086]
[114.10319519 26.48684311]
[111.91663361 13.73448563]
[118.80603790 3.26035428]
[130.60116577 0.40779442]
[138.75782776 -12.18064499]
[146.91450500 -24.76908493]
[155.07116699 -37.35752487]
[141.56098938 -30.84022522]
[126.74257660 -28.51328278]
[111.88507843 -30.57599258]
[98.26099396 -36.85168839]
[87.03719330 -46.80287552]
[79.17494202 -59.57727051]
[75.34764099 -74.08078003]
[75.88306427 -89.07122040]
[80.73537445 -103.26470184]
[89.48897552 -115.44561005]
[101.39414978 -124.57067871]
[115.43125153 -129.85836792]
[130.39805603 -130.85581970]
[145.01268005 -127.47758484]
[158.02345276 -120.01300812]
[168.31602478 -109.10140991]
[175.00888062 -95.67733765]
[177.52877808 -80.89051056]
[175.65989685 -66.00739288]
[169.56115723 -52.30081940]
[181.89244080 -60.84127808]
[194.22372437 -69.38173676]
[206.55500793 -77.92219543]
[191.55519104 -77.84805298]
[177.77746582 -83.77886200]
[167.52137756 -94.72475433]
[162.49868774 -108.85884857]
[163.54768372 -123.82212067]
[170.49330139 -137.11717224]
[182.17628479 -146.52503967]
[196.64672852 -150.47550964]
[211.48947144 -148.30926514]
[224.22724915 -140.38783264]
[232.73408508 -128.03332520]
[235.59017944 -113.30774689]
[232.31881714 -98.66881561]
[223.46824646 -86.56180573]
[237.61555481 -91.54712677]
[251.76287842 -96.53244781]
[258.36184692 -110.89312744]
[273.21136475 -116.30306244]
[287.50146484 -109.55262756]
[292.75411987 -94.64674377]
[285.85296631 -80.42880249]
[270.89239502 -75.33406067]
[256.74819946 -82.38513184]
[242.60087585 -77.39981079]
[228.45356750 -72.41448975]
[215.09545898 -65.59091187]
[202.76417542 -57.05045319]
[190.43289185 -48.50999451]
[178.10160828 -39.96953583]
[167.65960693 -29.20085716]
[159.50294495 -16.61241913]
[151.34626770 -4.02397919]
[143.18960571 8.56445980]
[143.26380920 26.08698845]
[126.85645294 34.38332367]
[118.95996857 47.13658142]
[111.06348419 59.88983917]
[103.16699982 72.64309692]
[114.31240082 77.37731171]
[122.05818176 86.23580170]
[125.08081818 97.25421906]
[123.06245422 108.15259552]
[116.69821167 116.80628204]
[107.50000000 121.66000366]
[107.50000000 136.66000366]
[107.50000000 151.66000366]
[107.50000000 166.66000366]
[107.50000000 181.66000366]
[107.50000000 196.66000366]
[107.50000000 211.66000366]
[107.50000000 226.66000366]
[107.50000000 241.66000366]
[107.50000000 256.66000366]
[107.50000000 271.66000366]
[122.11001587 275.40142822]
[135.33016968 282.65942383]
[146.32945251 292.97769165]
[154.41641235 305.70764160]
[159.08271790 320.04907227]
[160.03503418 335.10043335]
[157.21350098 349.91561890]
[150.79547119 363.56332397]
[141.18440247 375.18563843]
[128.98443604 384.05197144]
[114.96250153 389.60498047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[26 54]
[27 53]
[28 52]
[30 50]
[31 49]
[32 48]
[36 47]
[37 46]
[38 45]
[55 125]
[56 124]
[57 123]
[58 122]
[61 120]
[62 119]
[63 118]
[64 117]
[84 116]
[85 115]
[86 114]
[87 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
