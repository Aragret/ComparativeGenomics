%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUCCUAGGGGGGGGGGGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCxxxxxxxxxxACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCCCCCCCCCCCAUCAUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[82.63780212 382.86822510]
[69.76452637 374.96533203]
[59.64023209 363.75485229]
[53.08564758 350.14550781]
[50.63212967 335.24057007]
[52.47856522 320.24832153]
[58.47527695 306.38412476]
[68.13613892 294.77188110]
[80.67798615 286.35293579]
[95.08410645 281.80975342]
[94.77204895 266.81301880]
[94.45999908 251.81625366]
[94.14794159 236.81950378]
[93.83588409 221.82273865]
[93.52382660 206.82598877]
[93.21176910 191.82923889]
[92.89971161 176.83248901]
[92.58766174 161.83572388]
[92.27560425 146.83897400]
[91.96354675 131.84222412]
[91.65148926 116.84546661]
[86.94472504 109.66662598]
[86.49544525 102.23519897]
[72.37064362 97.18643951]
[58.24584198 92.13768768]
[44.12104034 87.08892822]
[28.52180862 89.72987366]
[19.14137840 78.16022491]
[5.01657438 73.11146545]
[-9.10822868 68.06270599]
[-23.23303223 63.01395416]
[-37.35783386 57.96519852]
[-45.35184479 70.72881317]
[-55.90307999 81.47522736]
[-68.51804352 89.70182037]
[-82.60671234 95.02380371]
[-97.51012421 97.19227600]
[-112.53123474 96.10579681]
[-126.96746826 91.81519318]
[-140.14361572 84.52114868]
[-151.44340515 74.56480408]
[-160.33833313 62.41184998]
[-166.41236877 48.63069534]
[-169.38139343 33.86590958]
[-169.10658264 18.80806923]
[-165.60075378 4.16145754]
[-159.02789307 -9.38887691]
[-149.69541931 -21.20916176]
[-138.03984070 -30.74653816]
[-124.60630035 -37.55492783]
[-110.02311707 -41.31589127]
[-94.97237396 -41.85351944]
[-80.15801239 -39.14266586]
[-66.27292633 -33.31012344]
[-53.96655655 -24.62869072]
[-43.81448364 -13.50441265]
[-36.29154587 -0.45759395]
[-31.74960518 13.90154362]
[-30.40109062 28.90139580]
[-32.30907822 43.84039307]
[-18.18427467 48.88914871]
[-4.05947208 53.93790817]
[10.06533051 58.98666382]
[24.19013405 64.03541565]
[38.77906418 61.03335571]
[49.16979599 72.96412659]
[63.29459763 78.01288605]
[77.41940308 83.06163788]
[91.54420471 88.11039734]
[77.90045929 81.87757111]
[66.38756561 72.26230621]
[57.82326889 59.94756317]
[52.81588364 45.80804062]
[51.72107315 30.84804726]
[54.61660004 16.13017082]
[61.29679871 2.69979668]
[71.28718567 -8.48913288]
[83.87815857 -16.64188576]
[98.17539978 -21.17938232]
[113.16339874 -21.77933311]
[127.77758026 -18.39912224]
[140.97990417 -11.27884388]
[151.83265686 -0.92423844]
[159.56497192 11.92922020]
[163.62762451 26.36857033]
[163.73205566 41.36820602]
[159.87084961 55.86272812]
[152.31826782 68.82260895]
[141.61074829 79.32732391]
[128.50885010 86.63074493]
[113.94566345 90.21385193]
[128.76342773 87.88274384]
[138.06819153 75.39038849]
[153.12872314 73.23740387]
[164.98092651 82.18507385]
[179.79869080 79.85396576]
[194.61643982 77.52286530]
[209.43420410 75.19175720]
[224.25196838 72.86065674]
[229.71067810 68.94787598]
[235.45770264 68.49724579]
[239.73342896 70.75418091]
[254.63533020 69.04148865]
[269.53723145 67.32879639]
[274.49749756 52.89416885]
[285.23559570 42.04723740]
[299.61947632 36.94166565]
[314.79318237 38.59117126]
[327.74401855 46.66824722]
[335.90051270 59.56917572]
[337.64324951 74.73247528]
[332.62619019 89.14746094]
[321.84545898 99.95201874]
[307.44158936 105.00090790]
[292.27447510 103.29166412]
[279.35556030 95.16365051]
[271.24990845 82.23069763]
[256.34802246 83.94338989]
[241.44610596 85.65608215]
[226.58306885 87.67841339]
[211.76530457 90.00952148]
[196.94755554 92.34062195]
[182.12979126 94.67172241]
[167.31202698 97.00283051]
[158.77958679 109.15737152]
[143.78547668 111.73252869]
[131.09452820 102.70050812]
[116.27677155 105.03160858]
[106.64824677 116.53340912]
[106.96029663 131.53016663]
[107.27235413 146.52691650]
[107.58441162 161.52366638]
[107.89646912 176.52043152]
[108.20852661 191.51718140]
[108.52058411 206.51393127]
[108.83263397 221.51068115]
[109.14469147 236.50744629]
[109.45674896 251.50419617]
[109.76880646 266.50094604]
[110.08086395 281.49771118]
[124.66350555 285.43765259]
[137.54470825 293.32760620]
[147.68026733 304.52792358]
[154.24851990 318.13067627]
[156.71701050 333.03314209]
[154.88563538 348.02722168]
[148.90284729 361.89743042]
[139.25366211 373.51940918]
[126.72027588 381.95092773]
[112.31872559 386.50857544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 69]
[24 68]
[25 67]
[26 66]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[91 128]
[92 127]
[95 124]
[96 123]
[97 122]
[98 121]
[99 120]
[102 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
