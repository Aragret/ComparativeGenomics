%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAAUUAAGGGGGGGGGGUGCUUGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCxxxxxxxxxxCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUACCCCCCCCCCAAUAAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 392.04357910]
[71.19830322 386.02752686]
[59.48964310 376.49813843]
[50.78712082 364.16244507]
[45.73651886 349.93594360]
[44.71262741 334.87426758]
[47.79142761 320.09509277]
[54.74444962 306.69515991]
[65.05573273 295.66882324]
[77.96011353 287.83432007]
[92.50000000 283.77301025]
[92.50000000 268.77301025]
[92.50000000 253.77301025]
[92.50000000 238.77301025]
[92.50000000 223.77301025]
[92.50000000 208.77301025]
[92.50000000 193.77301025]
[92.50000000 178.77301025]
[92.50000000 163.77301025]
[92.50000000 148.77301025]
[92.50000000 133.77301025]
[81.87707520 129.46907043]
[73.24336243 121.93054199]
[67.54650879 111.98487854]
[52.68346405 114.00720978]
[37.82041931 116.02954865]
[22.95737076 118.05187988]
[19.12060738 132.76065063]
[9.94311714 144.87847900]
[-3.17560315 152.55752563]
[-18.23504257 154.62675476]
[-32.93874359 150.77066040]
[-45.04450226 141.57722473]
[-52.70627594 128.44842529]
[-54.75570297 113.38626862]
[-50.88025665 98.68765259]
[-41.67091370 86.59400177]
[-28.53203773 78.94950104]
[-13.46720695 76.91989136]
[1.22629964 80.81467438]
[13.30782890 90.03990936]
[20.93503571 103.18883514]
[35.79808426 101.16650391]
[50.66112900 99.14416504]
[65.52417755 97.12183380]
[72.49915314 79.01025391]
[88.12923431 67.50460052]
[107.49530029 66.22594452]
[113.84243011 52.63499451]
[120.18955994 39.04404449]
[125.53107452 25.02733231]
[129.83865356 10.65914822]
[134.14624023 -3.70903635]
[138.45382690 -18.07722092]
[142.76141357 -32.44540405]
[145.85974121 -47.12192917]
[147.72734070 -62.00521088]
[149.44003296 -76.90711212]
[150.99761963 -91.82602692]
[152.55520630 -106.74493408]
[154.11277771 -121.66384888]
[155.67036438 -136.58276367]
[141.27014160 -140.94511414]
[127.95585632 -147.95413208]
[116.20880890 -157.35644531]
[106.45365143 -168.81216431]
[99.04302979 -181.90716553]
[94.24482727 -196.16807556]
[92.23249054 -211.07937622]
[93.07877350 -226.10205078]
[96.75308228 -240.69299316]
[103.12259674 -254.32479858]
[111.95705414 -266.50463867]
[122.93709564 -276.79226685]
[135.66580200 -284.81576538]
[149.68304443 -290.28509521]
[164.48208618 -293.00253296]
[179.52798462 -292.86987305]
[194.27682495 -289.89187622]
[208.19543457 -284.17620850]
[220.78067017 -275.92950439]
[231.57759094 -265.44985962]
[240.19589233 -253.11611938]
[246.32403564 -239.37411499]
[249.74046326 -224.72064209]
[250.32170105 -209.68539429]
[248.04673767 -194.81188965]
[242.99780273 -180.63780212]
[235.35740662 -167.67552185]
[225.40176392 -156.39360046]
[213.49073792 -147.19990540]
[200.05493164 -140.42675781]
[185.58001709 -136.31903076]
[170.58927917 -135.02517700]
[169.03169250 -120.10626984]
[167.47410583 -105.18735504]
[165.91653442 -90.26844025]
[164.35894775 -75.34953308]
[166.80833435 -68.32485199]
[162.61062622 -60.13759613]
[160.74301147 -45.25431824]
[172.29634094 -54.82095337]
[187.25531006 -55.92976761]
[200.09286499 -48.17107773]
[206.06578064 -34.41156769]
[202.96719360 -19.73509598]
[191.94197083 -9.56433201]
[177.06372070 -7.65716791]
[163.82963562 -14.71826363]
[157.12959290 -28.13781929]
[152.82200623 -13.76963615]
[148.51443481 0.59854835]
[144.20684814 14.96673203]
[139.89926147 29.33491707]
[153.28817749 22.57202911]
[167.93078613 25.82690239]
[177.19381714 37.62504578]
[176.88104248 52.62178421]
[167.13415527 64.02344513]
[152.36857605 66.66497803]
[139.27325439 59.34972382]
[133.78051758 45.39117432]
[127.43338013 58.98212433]
[121.08625031 72.57307434]
[129.71882629 82.28961945]
[134.15670776 94.50589752]
[133.77352905 107.49765015]
[128.62336731 119.43114471]
[119.43313599 128.62200928]
[107.50000000 133.77301025]
[107.50000000 148.77301025]
[107.50000000 163.77301025]
[107.50000000 178.77301025]
[107.50000000 193.77301025]
[107.50000000 208.77301025]
[107.50000000 223.77301025]
[107.50000000 238.77301025]
[107.50000000 253.77301025]
[107.50000000 268.77301025]
[107.50000000 283.77301025]
[122.03988647 287.83432007]
[134.94427490 295.66882324]
[145.25555420 306.69515991]
[152.20857239 320.09509277]
[155.28736877 334.87426758]
[154.26348877 349.93594360]
[149.21287537 364.16244507]
[140.51036072 376.49813843]
[128.80169678 386.02752686]
[114.95575714 392.04357910]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 45]
[25 44]
[26 43]
[27 42]
[48 124]
[49 123]
[50 122]
[51 114]
[52 113]
[53 112]
[54 111]
[55 110]
[56 101]
[57 100]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
