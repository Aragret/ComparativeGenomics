%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUAUAACAAACCCGGGGGGGGGGUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAxxxxxxxxxxAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGCCCCCCCCCCAAUAAUAACACACCC\
) } def
/len { sequence length } bind def

/coor [
[83.54373169 496.65609741]
[69.10685730 492.41662598]
[55.73332214 485.52133179]
[43.90657425 476.21948242]
[34.05414200 464.84732056]
[26.53218460 451.81594849]
[21.61261559 437.59643555]
[19.47327614 422.70281982]
[20.19149971 407.67349243]
[23.74132538 393.05175781]
[29.99442673 379.36618042]
[38.72475815 367.11148071]
[49.61672974 356.73065186]
[62.27659225 348.59896851]
[76.24671173 343.01037598]
[91.02206421 340.16690063]
[91.02206421 325.16690063]
[91.02206421 310.16690063]
[91.02206421 295.16690063]
[91.02206421 280.16690063]
[91.02206421 265.16690063]
[91.02206421 250.16690063]
[91.02206421 235.16690063]
[91.02206421 220.16690063]
[91.02206421 205.16690063]
[91.02206421 190.16690063]
[82.67778015 181.36543274]
[82.58496094 168.83610535]
[91.34090424 159.32038879]
[91.63358307 144.32324219]
[91.92626190 129.32611084]
[84.16491699 125.97028351]
[77.62730408 120.60748291]
[72.81866455 113.65213013]
[70.11059570 105.64173889]
[69.71238708 97.19535828]
[55.57846832 92.17216492]
[41.44455719 87.14897156]
[27.31064224 82.12577820]
[13.17672825 77.10257721]
[-0.95718539 72.07938385]
[-15.13943481 67.19432831]
[-29.36866951 62.44786453]
[-43.59790421 57.70140457]
[-57.82713699 52.95494461]
[-71.85061646 60.24312210]
[-86.89485168 55.40094757]
[-94.03435516 41.30119324]
[-89.03339386 26.30900002]
[-74.85894775 19.31896400]
[-59.92045975 24.47815323]
[-53.08067703 38.72571182]
[-38.85144424 43.47217178]
[-24.62220955 48.21863174]
[-10.39297390 52.96509171]
[-3.01542974 52.09407043]
[4.06600904 57.94547272]
[18.19992256 62.96866608]
[32.33383560 67.99185944]
[46.46775055 73.01505280]
[60.60166550 78.03824615]
[74.73558044 83.06144714]
[84.66614532 73.73065186]
[97.67406464 69.67186737]
[111.14878082 71.69963837]
[119.91812897 59.53006744]
[128.68748474 47.36049652]
[117.49037933 37.35837173]
[107.40013885 26.24060440]
[98.52731323 14.12901115]
[90.96912384 1.15629172]
[84.80837250 -12.53541851]
[80.11257172 -26.79610443]
[76.93317413 -41.46952057]
[75.30500031 -56.39489365]
[75.24589539 -71.40869141]
[76.75650787 -86.34642029]
[79.82028961 -101.04441071]
[84.40366364 -115.34162903]
[90.45642090 -129.08142090]
[97.91224670 -142.11325073]
[106.68943787 -154.29431152]
[116.69183350 -165.49118042]
[127.80984497 -175.58116150]
[139.92166138 -184.45368958]
[152.89456177 -192.01156616]
[166.58642578 -198.17196655]
[180.84721375 -202.86743164]
[195.52070618 -206.04647827]
[210.44612122 -207.67428589]
[225.45993042 -207.73303223]
[240.39761353 -206.22204590]
[255.09553528 -203.15791321]
[269.39263916 -198.57418823]
[283.13229370 -192.52108765]
[296.16394043 -185.06495667]
[308.34478760 -176.28746033]
[319.54141235 -166.28479004]
[329.63110352 -155.16653442]
[338.50335693 -143.05451965]
[346.06091309 -130.08143616]
[352.22097778 -116.38941956]
[356.91610718 -102.12850952]
[360.09478760 -87.45493317]
[361.72222900 -72.52948761]
[361.78060913 -57.51568222]
[360.26925659 -42.57802582]
[357.20477295 -27.88018227]
[352.62069702 -13.58318996]
[346.56729126 0.15630594]
[339.11080933 13.18776798]
[330.33303833 25.36841774]
[320.33010864 36.56479263]
[309.21160889 46.65422440]
[297.09936523 55.52616882]
[284.12609863 63.08341217]
[270.43392944 69.24316406]
[256.17288208 73.93791962]
[241.49925232 77.11625671]
[226.57376099 78.74333954]
[211.55995178 78.80135345]
[196.62232971 77.28964996]
[181.92456055 74.22480011]
[167.62768555 69.64038086]
[153.88833618 63.58662033]
[140.85705566 56.12984848]
[132.08770752 68.29942322]
[123.31835175 80.46899414]
[130.41239929 99.45950317]
[123.99761963 118.69010162]
[106.92340088 129.61877441]
[106.63072968 144.61592102]
[106.33805084 159.61306763]
[115.61092377 175.49497986]
[106.02206421 190.16690063]
[106.02206421 205.16690063]
[106.02206421 220.16690063]
[106.02206421 235.16690063]
[106.02206421 250.16690063]
[106.02206421 265.16690063]
[106.02206421 280.16690063]
[106.02206421 295.16690063]
[106.02206421 310.16690063]
[106.02206421 325.16690063]
[106.02206421 340.16690063]
[120.79742432 343.01037598]
[134.76754761 348.59896851]
[147.42741394 356.73065186]
[158.31938171 367.11148071]
[167.04971313 379.36618042]
[173.30281067 393.05175781]
[176.85263062 407.67349243]
[177.57086182 422.70281982]
[175.43151855 437.59643555]
[170.51194763 451.81594849]
[162.98999023 464.84732056]
[153.13755798 476.21948242]
[141.31080627 485.52133179]
[127.93727875 492.41662598]
[113.50040436 496.65609741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[29 133]
[30 132]
[31 131]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[41 57]
[42 55]
[43 54]
[44 53]
[45 52]
[65 128]
[66 127]
[67 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
