%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCACACCGGGGGGGGGGCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAxxxxxxxxxxAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGCCCCCCCCCCUACCCACGCC\
) } def
/len { sequence length } bind def

/coor [
[96.40234375 378.04449463]
[82.55640411 372.02847290]
[70.84774017 362.49905396]
[62.14521790 350.16339111]
[57.09461594 335.93685913]
[56.07072449 320.87518311]
[59.14952469 306.09600830]
[66.10254669 292.69607544]
[76.41383362 281.66973877]
[89.31821442 273.83523560]
[103.85810089 269.77392578]
[103.85810089 254.77392578]
[103.85810089 239.77392578]
[103.85810089 224.77392578]
[103.85810089 209.77392578]
[103.85810089 194.77392578]
[103.85810089 179.77392578]
[103.85810089 164.77392578]
[103.85810089 149.77392578]
[103.85810089 134.77392578]
[103.85810089 119.77393341]
[91.50652313 111.26284027]
[77.48981476 116.60435486]
[63.47309875 121.94586182]
[49.45638657 127.28737640]
[44.50068665 142.11892700]
[31.14390373 150.25099182]
[15.69270229 147.84384155]
[5.44266653 136.03407288]
[5.23355007 120.39788055]
[15.16409206 108.31821442]
[30.54539299 105.49871826]
[44.11487579 113.27066803]
[58.13158798 107.92915344]
[72.14830017 102.58763885]
[86.16501617 97.24612427]
[71.42829132 94.44807434]
[62.37215424 82.49038696]
[63.67229843 67.54684448]
[74.65746307 57.33282089]
[89.65597534 57.12184906]
[100.92407990 67.02285767]
[102.64350891 81.92591095]
[108.99063873 68.33495331]
[115.33776855 54.74400711]
[121.68489838 41.15305328]
[128.03202820 27.56210327]
[134.23744202 13.90586281]
[140.30044556 0.18580884]
[146.36346436 -13.53424454]
[152.42646790 -27.25429916]
[139.29598999 -34.52731323]
[126.87033081 -42.94807053]
[115.24952698 -52.44876480]
[104.52715302 -62.95290375]
[94.78953552 -74.37590790]
[86.11508179 -86.62580872]
[78.57363129 -99.60397339]
[72.22590637 -113.20590973]
[67.12301636 -127.32209778]
[63.30604553 -141.83888245]
[60.80572510 -156.63937378]
[59.64219284 -171.60441589]
[59.82481384 -186.61351013]
[61.35211945 -201.54580688]
[64.21180725 -216.28108215]
[68.38085938 -230.70069885]
[73.82569885 -244.68855286]
[80.50249481 -258.13201904]
[88.35748291 -270.92285156]
[97.32742310 -282.95806885]
[107.34009552 -294.14074707]
[118.31487274 -304.38088989]
[130.16339111 -313.59603882]
[142.79026794 -321.71197510]
[156.09382629 -328.66336060]
[169.96693420 -334.39422607]
[184.29792786 -338.85842896]
[198.97138977 -342.02001953]
[213.86918640 -343.85357666]
[228.87136841 -344.34429932]
[243.85713196 -343.48825073]
[258.70584106 -341.29229736]
[273.29794312 -337.77416992]
[287.51589966 -332.96215820]
[301.24530029 -326.89501953]
[314.37554932 -319.62161255]
[326.80096436 -311.20046997]
[338.42147827 -301.69943237]
[349.14352417 -291.19494629]
[358.88079834 -279.77166748]
[367.55487061 -267.52148438]
[375.09591675 -254.54309082]
[381.44323730 -240.94096375]
[386.54568481 -226.82461548]
[390.36221313 -212.30772400]
[392.86209106 -197.50715637]
[394.02517700 -182.54206848]
[393.84210205 -167.53298950]
[392.31433105 -152.60073853]
[389.45419312 -137.86553955]
[385.28469849 -123.44605255]
[379.83941650 -109.45837402]
[373.16223145 -96.01511383]
[365.30685425 -83.22452545]
[356.33654785 -71.18958282]
[346.32351685 -60.00719070]
[335.34841919 -49.76738739]
[323.49963379 -40.55261230]
[310.87249756 -32.43706512]
[297.56875610 -25.48608780]
[283.69546509 -19.75564384]
[269.36431885 -15.29187298]
[254.69078064 -12.13071823]
[239.79292297 -10.29762936]
[224.79072571 -9.80736637]
[209.80497742 -10.66387653]
[194.95632935 -12.86026287]
[180.36436462 -16.37884331]
[166.14653015 -21.19128609]
[160.08351135 -7.47123146]
[154.02050781 6.24882221]
[147.95748901 19.96887589]
[148.13171387 27.40630150]
[141.62298584 33.90923309]
[135.27584839 47.50018311]
[128.92872620 61.09113312]
[122.58158875 74.68208313]
[116.23445892 88.27303314]
[118.85810089 119.77393341]
[118.85810089 134.77392578]
[118.85810089 149.77392578]
[118.85810089 164.77392578]
[118.85810089 179.77392578]
[118.85810089 194.77392578]
[118.85810089 209.77392578]
[118.85810089 224.77392578]
[118.85810089 239.77392578]
[118.85810089 254.77392578]
[118.85810089 269.77392578]
[133.39797974 273.83523560]
[146.30236816 281.66973877]
[156.61364746 292.69607544]
[163.56666565 306.09600830]
[166.64547729 320.87518311]
[165.62158203 335.93685913]
[160.57098389 350.16339111]
[151.86845398 362.49905396]
[140.15979004 372.02847290]
[126.31385040 378.04449463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 36]
[23 35]
[24 34]
[25 33]
[43 129]
[44 128]
[45 127]
[46 126]
[47 125]
[48 123]
[49 122]
[50 121]
[51 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
