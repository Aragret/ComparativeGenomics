%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUACUAGGGGGGGGGGUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACxxxxxxxxxxUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCCCCCCCCCCCUCCCUACAA\
) } def
/len { sequence length } bind def

/coor [
[108.54399109 656.06097412]
[94.69805908 650.04492188]
[82.98939514 640.51550293]
[74.28687286 628.17987061]
[69.23626709 613.95330811]
[68.21237946 598.89166260]
[71.29117584 584.11248779]
[78.24419403 570.71258545]
[88.55548096 559.68621826]
[101.45986176 551.85174561]
[115.99974823 547.79040527]
[115.99974823 532.79040527]
[115.99974823 517.79040527]
[115.99974823 502.79040527]
[115.99974823 487.79040527]
[115.99974823 472.79040527]
[115.99974823 457.79040527]
[115.99974823 442.79040527]
[115.99974823 427.79040527]
[115.99974823 412.79040527]
[99.95169067 404.52856445]
[90.22262573 389.22506714]
[89.54490662 371.01895142]
[98.18902588 354.88565063]
[113.86631012 345.27709961]
[112.93068695 330.30630493]
[111.99505615 315.33554077]
[111.05942535 300.36474609]
[109.96811676 285.40447998]
[108.72124481 270.45639038]
[107.47436523 255.50831604]
[92.18821716 252.87440491]
[78.08847046 246.38243103]
[66.13156128 236.46647644]
[57.13021851 223.79307556]
[51.69818878 209.21644592]
[50.20839310 193.72093201]
[52.76735306 178.35444641]
[59.20756531 164.15773010]
[69.09848022 152.09375000]
[81.77526093 142.98243713]
[96.38349152 137.44497681]
[94.82591248 122.52606964]
[93.26833344 107.60715485]
[89.34326935 100.50237274]
[91.83685303 92.36214447]
[90.58997345 77.41405487]
[88.25887299 62.59629440]
[84.85589600 47.98740387]
[81.45291901 33.37850952]
[78.04994202 18.76961899]
[71.84453583 5.11337709]
[63.07832336 -7.05845976]
[54.31211853 -19.23029709]
[45.54590988 -31.40213394]
[36.65356064 -43.48212051]
[27.63603020 -55.46895599]
[12.01611423 -59.12924576]
[5.26944160 -73.68472290]
[12.57148361 -87.96967316]
[28.32073975 -91.02590179]
[40.43572617 -80.50893402]
[39.62286377 -64.48648071]
[48.64039230 -52.49965286]
[55.21736526 -49.02271271]
[57.71774673 -40.16833878]
[66.48395538 -27.99650383]
[75.25016022 -15.82466698]
[84.01637268 -3.65283012]
[82.89980316 -18.61121559]
[86.16052246 -33.25251389]
[93.51940155 -46.32336044]
[104.34647369 -56.70481110]
[117.71488190 -63.50815964]
[132.48022461 -66.15100861]
[147.37850952 -64.40711212]
[161.13435364 -58.42575455]
[172.57020569 -48.71897888]
[180.70706177 -36.11772919]
[184.84838867 -21.70074654]
[184.63966370 -6.70219946]
[180.09873962 7.59395647]
[171.61436462 19.96389389]
[159.91284180 29.34867859]
[145.99586487 34.94492340]
[131.05482483 36.27355957]
[116.36875153 33.22084808]
[103.19483948 26.04812050]
[92.65882874 15.36664009]
[96.06181335 29.97553253]
[99.46479034 44.58442688]
[102.86776733 59.19331741]
[111.12494659 46.67057800]
[125.44877625 42.21772003]
[139.35041809 47.85193253]
[146.53228760 61.02085876]
[143.74093628 75.75885010]
[132.24087524 85.38945007]
[117.24173737 85.54990387]
[105.53806305 76.16718292]
[106.78493500 91.11526489]
[108.18724060 106.04957581]
[109.74481964 120.96848297]
[111.30240631 135.88740540]
[125.68399811 137.98899841]
[139.13084412 143.48022461]
[150.85720825 152.03527832]
[160.17901611 163.14945984]
[166.55386353 176.16897583]
[169.61248779 190.32934570]
[169.18025208 204.80036926]
[165.28698730 218.73469543]
[158.16510010 231.31750488]
[148.23562622 241.81417847]
[136.08335876 249.61312866]
[122.42245483 254.26144409]
[123.66932678 269.20953369]
[124.91620636 284.15762329]
[128.76969910 292.51239014]
[126.03022003 299.42910767]
[126.96585083 314.39990234]
[127.90147400 329.37069702]
[128.83709717 344.34149170]
[140.29533386 348.30908203]
[149.69979858 355.90826416]
[155.94888306 366.21847534]
[158.32090759 378.00357056]
[156.55741882 389.85980225]
[150.89109802 400.38311768]
[142.01539612 408.33551025]
[130.99975586 412.79040527]
[130.99975586 427.79040527]
[130.99975586 442.79040527]
[130.99975586 457.79040527]
[130.99975586 472.79040527]
[130.99975586 487.79040527]
[130.99975586 502.79040527]
[130.99975586 517.79040527]
[130.99975586 532.79040527]
[130.99975586 547.79040527]
[145.53964233 551.85174561]
[158.44401550 559.68621826]
[168.75529480 570.71258545]
[175.70832825 584.11248779]
[178.78712463 598.89166260]
[177.76322937 613.95330811]
[172.71263123 628.17987061]
[164.01010132 640.51550293]
[152.30143738 650.04492188]
[138.45550537 656.06097412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 123]
[26 122]
[27 121]
[28 120]
[29 118]
[30 117]
[31 116]
[42 104]
[43 103]
[44 102]
[46 101]
[47 100]
[48 92]
[49 91]
[50 90]
[51 89]
[52 69]
[53 68]
[54 67]
[55 66]
[56 64]
[57 63]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
