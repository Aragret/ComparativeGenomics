%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUAGACAUGGGGGGGGGGCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUxxxxxxxxxxGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCCCCCCCCCCCUCACUAAACAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 368.10754395]
[71.01555634 362.55453491]
[58.81560135 353.68820190]
[49.20452881 342.06588745]
[42.78650284 328.41818237]
[39.96496582 313.60299683]
[40.91728210 298.55163574]
[45.58358765 284.21020508]
[53.67055511 271.48025513]
[64.66983032 261.16198730]
[77.88998413 253.90399170]
[92.50000000 250.16256714]
[92.50000000 235.16256714]
[92.50000000 220.16256714]
[92.50000000 205.16256714]
[92.50000000 190.16256714]
[92.50000000 175.16256714]
[92.50000000 160.16256714]
[92.50000000 145.16256714]
[92.50000000 130.16256714]
[92.50000000 115.16255951]
[79.74674225 107.26608276]
[66.31929016 113.95215607]
[52.89184570 120.63822937]
[46.45068359 135.33146667]
[30.91063309 139.31723022]
[18.19268799 129.53799438]
[18.05296707 113.49555206]
[30.59865189 103.49628448]
[46.20576859 107.21077728]
[59.63321686 100.52470398]
[73.06066895 93.83863068]
[70.30442810 79.09403229]
[55.36841202 77.71000671]
[40.43239975 76.32598114]
[25.48296547 75.09536743]
[10.52168465 74.01830292]
[-4.43959618 72.94123077]
[-20.67199898 77.83464050]
[-29.86774826 63.59123611]
[-18.72661781 50.81189346]
[-3.36252666 57.97994995]
[11.59875393 59.05701828]
[26.56003571 60.13409042]
[33.50025177 57.46096802]
[41.81642532 61.38996887]
[56.75243759 62.77399445]
[71.68845367 64.15802002]
[89.88971710 75.45004272]
[99.16440582 92.62141418]
[107.32107544 80.03297424]
[115.47773743 67.44453430]
[103.57975769 58.29662323]
[92.45645905 48.22097778]
[82.17999268 37.28294754]
[72.81700134 25.55346680]
[64.42820740 13.10860825]
[57.06802368 0.02908321]
[50.78417587 -13.60028076]
[45.61742020 -27.69109154]
[41.60126495 -42.15196609]
[38.76176071 -56.88911438]
[37.11731720 -71.80696106]
[36.67860413 -86.80875397]
[37.44846344 -101.79720306]
[39.42190552 -116.67510223]
[42.58613205 -131.34596252]
[46.92061615 -145.71463013]
[52.39725113 -159.68791199]
[58.98051834 -173.17520142]
[66.62772369 -186.08901978]
[75.28926086 -198.34561157]
[84.90897369 -209.86547852]
[95.42445374 -220.57392883]
[106.76751709 -230.40150452]
[118.86459351 -239.28446960]
[131.63723755 -247.16520691]
[145.00259399 -253.99261475]
[158.87399292 -259.72241211]
[173.16146851 -264.31744385]
[187.77236938 -267.74789429]
[202.61192322 -269.99151611]
[217.58390808 -271.03378296]
[232.59118652 -270.86788940]
[247.53646851 -269.49496460]
[262.32281494 -266.92388916]
[276.85430908 -263.17132568]
[291.03674316 -258.26162720]
[304.77810669 -252.22663879]
[317.98928833 -245.10548401]
[330.58462524 -236.94435120]
[342.48242188 -227.79617310]
[353.60546875 -217.72029114]
[363.88171387 -206.78202820]
[373.24444580 -195.05233765]
[381.63296509 -182.60729980]
[388.99285889 -169.52761841]
[395.27639771 -155.89811707]
[400.44284058 -141.80718994]
[404.45867920 -127.34622192]
[407.29785156 -112.60901642]
[408.94198608 -97.69113159]
[409.38037109 -82.68932343]
[408.61016846 -67.70088959]
[406.63641357 -52.82304001]
[403.47186279 -38.15225220]
[399.13705444 -23.78368378]
[393.66009521 -9.81051540]
[387.07653809 3.67662716]
[379.42904663 16.59027481]
[370.76724243 28.84667397]
[361.14727783 40.36633682]
[350.63156128 51.07455826]
[339.28826904 60.90188217]
[327.19100952 69.78457642]
[314.41818237 77.66503906]
[301.05267334 84.49214935]
[287.18115234 90.22164154]
[272.89358521 94.81634521]
[258.28259277 98.24647522]
[243.44299316 100.48977661]
[228.47100830 101.53170776]
[213.46371460 101.36550140]
[198.51846313 99.99224091]
[183.73217773 97.42083740]
[169.20075989 93.66796112]
[155.01844788 88.75794983]
[141.27720642 82.72264862]
[128.06617737 75.60120392]
[119.90951538 88.18964386]
[111.75284576 100.77808380]
[107.50000000 115.16255951]
[107.50000000 130.16256714]
[107.50000000 145.16256714]
[107.50000000 160.16256714]
[107.50000000 175.16256714]
[107.50000000 190.16256714]
[107.50000000 205.16256714]
[107.50000000 220.16256714]
[107.50000000 235.16256714]
[107.50000000 250.16256714]
[122.11001587 253.90399170]
[135.33016968 261.16198730]
[146.32945251 271.48025513]
[154.41641235 284.21020508]
[159.08271790 298.55163574]
[160.03503418 313.60299683]
[157.21350098 328.41818237]
[150.79547119 342.06588745]
[141.18440247 353.68820190]
[128.98443604 362.55453491]
[114.96250153 368.10754395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 32]
[23 31]
[24 30]
[33 48]
[34 47]
[35 46]
[36 44]
[37 43]
[38 42]
[50 131]
[51 130]
[52 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
