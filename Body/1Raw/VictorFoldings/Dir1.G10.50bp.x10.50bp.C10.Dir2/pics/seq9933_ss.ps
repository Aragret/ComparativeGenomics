%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCUCACAAUCAUGGGGGGGGGGGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUxxxxxxxxxxGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAACCCCCCCCCCUACGCCUCACACUCAU\
) } def
/len { sequence length } bind def

/coor [
[46.23947144 514.36645508]
[31.74033165 510.36465454]
[18.18884659 503.83801270]
[6.02063990 494.99636841]
[-4.37312889 484.12396240]
[-12.65834427 471.57028198]
[-18.56867027 457.73886108]
[-21.91411591 443.07434082]
[-22.58713722 428.04815674]
[-20.56610107 413.14328003]
[-15.91597366 398.83886719]
[-8.78623772 385.59475708]
[0.59391427 373.83666992]
[11.92294979 363.94259644]
[24.83668709 356.23059082]
[38.92000580 350.94854736]
[53.72018051 348.26626587]
[53.72018051 333.26626587]
[53.72018051 318.26626587]
[53.72018051 303.26626587]
[53.72018051 288.26626587]
[53.72018051 273.26626587]
[53.72018051 258.26626587]
[53.72018051 243.26626587]
[53.72018051 228.26626587]
[53.72018051 213.26626587]
[41.73968124 204.24032593]
[27.32164001 208.37796021]
[12.90359974 212.51560974]
[7.72632408 227.14350891]
[-5.07928705 235.90684509]
[-20.58921432 235.43592834]
[-32.83957672 225.91183472]
[-37.11985397 210.99678040]
[-31.78419876 196.42590332]
[-18.88427544 187.80200195]
[-3.38036942 188.44114685]
[8.76595211 198.09757996]
[23.18399239 193.95993042]
[37.60203171 189.82228088]
[45.05265045 189.24288940]
[51.59856796 190.74658203]
[56.73144531 193.89152527]
[61.28413391 179.59910583]
[65.83683014 165.30670166]
[70.38951874 151.01429749]
[74.80426788 136.67866516]
[79.08066559 122.30117798]
[83.35706329 107.92367554]
[78.52976990 93.72166443]
[66.37754059 84.92829132]
[54.22531891 76.13491821]
[42.07309341 67.34154510]
[26.95245552 71.32907104]
[12.82835293 64.61760712]
[6.36975336 50.37610245]
[10.62620926 35.32895660]
[23.58795357 26.58097267]
[39.13484573 28.26268196]
[49.92612076 39.58003235]
[50.86646652 55.18931580]
[63.01869202 63.98269272]
[75.17091370 72.77606201]
[87.32314301 81.56943512]
[94.12891388 78.41800690]
[95.47621155 63.47863770]
[107.74044800 72.11515045]
[114.54621887 68.96371460]
[115.70148468 54.00827026]
[105.69674683 42.06914139]
[107.08139801 26.91864777]
[118.52519226 17.45423317]
[119.68045807 2.49878669]
[120.83573151 -12.45665932]
[106.84401703 -18.20879745]
[95.31592560 -28.00462914]
[87.38086700 -40.88446045]
[83.81623077 -55.58645248]
[84.97124481 -70.67025757]
[90.73275757 -84.65811157]
[100.53631592 -96.17963409]
[113.42145538 -104.10606384]
[128.12583923 -107.66084290]
[143.20886230 -106.49571991]
[157.19285583 -100.72483826]
[168.70780945 -90.91356659]
[176.62559509 -78.02310944]
[180.17053223 -63.31635666]
[178.99530029 -48.23411560]
[173.21504211 -34.25399017]
[163.39605713 -22.74561691]
[150.50030518 -14.83646297]
[135.79116821 -11.30138969]
[134.63591003 3.65405607]
[133.48063660 18.60950089]
[143.33514404 29.71915627]
[142.37657166 44.90256119]
[130.65693665 55.16353989]
[129.50166321 70.11898804]
[141.48216248 79.14492798]
[155.53869629 73.90912628]
[169.59524536 68.67331696]
[183.65177917 63.43751144]
[197.70832825 58.20170593]
[211.66134644 52.69596863]
[225.50567627 46.92234802]
[239.34999084 41.14872360]
[241.95129395 25.94225311]
[252.37773132 14.57155132]
[267.30227661 10.66497040]
[281.96255493 15.46908569]
[291.68054199 27.45092201]
[293.35525513 42.78711700]
[286.45227051 56.58395004]
[273.17434692 64.43889618]
[257.75842285 63.84547806]
[245.12361145 54.99304962]
[231.27929688 60.76667023]
[217.43496704 66.54029083]
[214.80802917 70.58095551]
[209.59323120 72.98785400]
[202.94413757 72.25824738]
[188.88758850 77.49404907]
[174.83105469 82.72985840]
[160.77450562 87.96566772]
[146.71797180 93.20146942]
[131.44528198 116.71037292]
[110.42948151 121.62551117]
[97.73455811 112.20007324]
[93.45816040 126.57757568]
[89.18176270 140.95506287]
[89.73265839 150.12202454]
[84.68193054 155.56698608]
[80.12923431 169.85939026]
[75.57654572 184.15180969]
[71.02385712 198.44421387]
[68.72017670 213.26626587]
[68.72017670 228.26626587]
[68.72017670 243.26626587]
[68.72017670 258.26626587]
[68.72017670 273.26626587]
[68.72017670 288.26626587]
[68.72017670 303.26626587]
[68.72017670 318.26626587]
[68.72017670 333.26626587]
[68.72017670 348.26626587]
[83.52035522 350.94854736]
[97.60366821 356.23059082]
[110.51741028 363.94259644]
[121.84644318 373.83666992]
[131.22659302 385.59475708]
[138.35633850 398.83886719]
[143.00645447 413.14328003]
[145.02749634 428.04815674]
[144.35447693 443.07434082]
[141.00903320 457.73886108]
[135.09870911 471.57028198]
[126.81348419 484.12396240]
[116.41971588 494.99636841]
[104.25151062 503.83801270]
[90.70002747 510.36465454]
[76.20088959 514.36645508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
[27 40]
[28 39]
[29 38]
[43 136]
[44 135]
[45 134]
[46 133]
[47 131]
[48 130]
[49 129]
[50 64]
[51 63]
[52 62]
[53 61]
[68 99]
[69 98]
[72 95]
[73 94]
[74 93]
[100 126]
[101 125]
[102 124]
[103 123]
[104 122]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
