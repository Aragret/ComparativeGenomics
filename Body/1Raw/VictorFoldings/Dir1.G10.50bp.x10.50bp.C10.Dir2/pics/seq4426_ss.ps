%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUCUCCAUGGGGGGGGGGACCCAUUACAAUCUCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAxxxxxxxxxxAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGCCCCCCCCCCUAUGUCUCCAU\
) } def
/len { sequence length } bind def

/coor [
[97.39890289 406.72317505]
[83.37696075 401.17016602]
[71.17700195 392.30383301]
[61.56592941 380.68151855]
[55.14790344 367.03381348]
[52.32636642 352.21862793]
[53.27868271 337.16723633]
[57.94498825 322.82583618]
[66.03195190 310.09588623]
[77.03122711 299.77758789]
[90.25138855 292.51962280]
[104.86139679 288.77819824]
[104.86139679 273.77819824]
[104.86139679 258.77819824]
[104.86139679 243.77818298]
[104.86139679 228.77818298]
[104.86139679 213.77818298]
[104.86139679 198.77818298]
[104.86139679 183.77818298]
[104.86139679 168.77818298]
[104.86139679 153.77818298]
[102.86534119 138.91159058]
[98.90872955 124.44281769]
[94.95212555 109.97405243]
[90.84717560 95.54666901]
[86.59432983 81.16218567]
[82.34148407 66.77770233]
[77.94118500 52.43764496]
[73.39389038 38.14351273]
[68.84660339 23.84938431]
[64.29931641 9.55525398]
[59.75202179 -4.73887634]
[43.65130997 -9.82485580]
[33.83342743 -23.35769463]
[33.99200821 -39.91023636]
[43.86756897 -52.98782730]
[39.02775192 -67.18557739]
[34.18793488 -81.38333130]
[29.34811974 -95.58108521]
[14.70883083 -92.24807739]
[-0.19865862 -90.46356964]
[-15.21101570 -90.24711609]
[-30.16375542 -91.60109711]
[-44.89305115 -94.51067352]
[-59.23751450 -98.94396210]
[-73.03998566 -104.85239410]
[-86.14923096 -112.17122650]
[-98.42162323 -120.82027435]
[-109.72270203 -130.70477295]
[-119.92863464 -141.71643066]
[-128.92761230 -153.73458862]
[-136.62103271 -166.62757874]
[-142.92460632 -180.25411987]
[-147.76925659 -194.46493530]
[-151.10191345 -209.10429382]
[-152.88604736 -224.01182556]
[-153.10214233 -239.02420044]
[-151.74778748 -253.97689819]
[-148.83786011 -268.70611572]
[-144.40422058 -283.05047607]
[-138.49546814 -296.85281372]
[-131.17630005 -309.96188354]
[-122.52696228 -322.23406982]
[-112.64218140 -333.53488159]
[-101.63027954 -343.74057007]
[-89.61190033 -352.73925781]
[-76.71873474 -360.43234253]
[-63.09203339 -366.73559570]
[-48.88110733 -371.57989502]
[-34.24165726 -374.91220093]
[-19.33408165 -376.69598389]
[-4.32171440 -376.91171265]
[10.63096046 -375.55700684]
[25.36011314 -372.64669800]
[39.70436096 -368.21270752]
[53.50654602 -362.30361938]
[66.61543274 -354.98416138]
[78.88740540 -346.33450317]
[90.18800354 -336.44946289]
[100.39340973 -325.43728638]
[109.39179993 -313.41870117]
[117.08459473 -300.52536011]
[123.38749695 -286.89849854]
[128.23146057 -272.68743896]
[131.56340027 -258.04791260]
[133.34681702 -243.14030457]
[133.56217957 -228.12792969]
[132.20710754 -213.17529297]
[129.29646301 -198.44621277]
[124.86212921 -184.10206604]
[118.95269012 -170.30001831]
[111.63290405 -157.19131470]
[102.98295593 -144.91954041]
[93.09763336 -133.61918640]
[82.08523560 -123.41405487]
[70.06642151 -114.41595459]
[57.17287445 -106.72347260]
[43.54587173 -100.42089844]
[48.38568878 -86.22314453]
[53.22550583 -72.02539825]
[58.06531906 -57.82764435]
[71.16328430 -55.07164383]
[81.25963593 -46.12007523]
[85.63430023 -33.24111176]
[83.03788757 -19.77909279]
[74.04615021 -9.28616619]
[78.59344482 5.00796366]
[83.14073181 19.30209351]
[87.68802643 33.59622192]
[92.23531342 47.89035416]
[97.29128265 53.34465027]
[96.72596741 62.52485657]
[100.97881317 76.90933990]
[105.23165894 91.29382324]
[110.38542175 97.56124878]
[109.42089081 106.01744080]
[113.37750244 120.48620605]
[117.33411407 134.95497131]
[122.24944305 120.78318787]
[132.42219543 109.75980377]
[146.15452576 103.72465515]
[161.15447998 103.68500519]
[174.91851807 109.64749146]
[185.14939880 120.61695099]
[190.13957214 134.76255798]
[189.05615234 149.72337341]
[182.07998657 163.00242615]
[170.37539673 172.38339233]
[155.89590454 176.30056763]
[141.05816650 174.10017395]
[128.33865356 166.14947510]
[119.86139679 153.77818298]
[119.86139679 168.77818298]
[119.86139679 183.77818298]
[119.86139679 198.77818298]
[119.86139679 213.77818298]
[119.86139679 228.77818298]
[119.86139679 243.77818298]
[119.86139679 258.77819824]
[119.86139679 273.77819824]
[119.86139679 288.77819824]
[134.47142029 292.51962280]
[147.69157410 299.77758789]
[158.69084167 310.09588623]
[166.77781677 322.82583618]
[171.44412231 337.16723633]
[172.39643860 352.21862793]
[169.57489014 367.03381348]
[163.15687561 380.68151855]
[153.54580688 392.30383301]
[141.34584045 401.17016602]
[127.32389832 406.72317505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 118]
[23 117]
[24 116]
[25 114]
[26 113]
[27 112]
[28 110]
[29 109]
[30 108]
[31 107]
[32 106]
[36 101]
[37 100]
[38 99]
[39 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
