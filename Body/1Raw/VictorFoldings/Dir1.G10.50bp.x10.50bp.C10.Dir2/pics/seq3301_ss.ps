%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUCCUCAUUGGGGGGGGGGGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUxxxxxxxxxxAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCCCCCCCCCCCAUACUCCUCAAU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 436.00250244]
[70.75619507 431.19308472]
[57.85220718 423.42767334]
[46.91955185 413.06954956]
[38.46956635 400.60311890]
[32.89747238 386.61148071]
[30.46388245 371.74905396]
[31.28262329 356.71096802]
[35.31539917 342.20062256]
[42.37359238 328.89663696]
[52.12707901 317.42126465]
[64.11966705 308.31127930]
[77.79044342 301.99273682]
[92.50000000 298.76119995]
[92.50000000 283.76119995]
[92.50000000 268.76119995]
[92.50000000 253.76118469]
[92.50000000 238.76118469]
[92.50000000 223.76118469]
[92.50000000 208.76118469]
[92.50000000 193.76118469]
[92.50000000 178.76118469]
[92.50000000 163.76118469]
[84.76270294 151.03392029]
[92.50000000 137.23374939]
[92.50000000 122.23374176]
[84.34567261 117.47945404]
[78.72452545 109.89663696]
[63.81527328 111.54414368]
[48.90602493 113.19165039]
[33.99677277 114.83915710]
[19.08752441 116.48666382]
[11.51807404 130.03225708]
[-2.58172870 136.51107788]
[-17.79022217 133.43190002]
[-28.25942993 121.97872162]
[-29.96372986 106.55552673]
[-22.24777985 93.09284973]
[-8.07852459 86.76735687]
[7.09567070 90.01133728]
[17.44001770 101.57741547]
[32.34926605 99.92990875]
[47.25851822 98.28240204]
[62.16776657 96.63489532]
[77.07701874 94.98738861]
[85.60723114 81.46793365]
[100.81742859 76.54959869]
[106.10411072 62.51211166]
[111.39078522 48.47462463]
[103.77177429 40.99686813]
[99.04768372 31.47829247]
[97.71202087 20.98566246]
[99.88053131 10.68320179]
[105.28194427 1.70341945]
[113.29143524 -4.97738600]
[108.85645294 -19.30675888]
[104.42147064 -33.63613129]
[99.98648834 -47.96550369]
[84.95152283 -46.94241714]
[70.08599854 -49.41480255]
[56.19157028 -55.24933243]
[44.01756287 -64.13134766]
[34.22050095 -75.58186340]
[27.32872963 -88.98336792]
[23.71390915 -103.61312103]
[23.57098579 -118.68217468]
[26.90766525 -133.37786865]
[33.54400635 -146.90766907]
[43.12211609 -158.54194641]
[55.12546539 -167.65328979]
[68.90672302 -173.75030518]
[83.72268677 -176.50421143]
[98.77434540 -175.76647949]
[113.24998474 -171.57690430]
[126.36895752 -164.16142273]
[137.42376709 -153.91995239]
[145.81823730 -141.40476990]
[151.09967041 -127.29084015]
[152.98326111 -112.33929443]
[151.36740112 -97.35644531]
[146.33924866 -83.15030670]
[138.16995239 -70.48699188]
[127.30009460 -60.04942703]
[114.31585693 -52.40048599]
[118.75083923 -38.07111359]
[123.18582916 -23.74174118]
[127.62081146 -9.41236973]
[141.63250732 -6.99233723]
[153.12718201 1.37765396]
[166.49908447 -5.41882849]
[172.77478027 -12.13476467]
[180.20724487 -12.21449852]
[193.71246338 -18.74206352]
[197.79353333 -24.05833435]
[203.15061951 -26.15739822]
[207.89114380 -25.24845123]
[221.64671326 -31.23045158]
[231.21635437 -43.82935715]
[245.97338867 -41.80959702]
[259.72894287 -47.79159927]
[273.48452759 -53.77359772]
[284.05587769 -68.81934357]
[301.38739014 -66.22130585]
[315.02050781 -72.47734070]
[321.92529297 -86.95848083]
[337.58413696 -90.44844055]
[349.98492432 -80.27002716]
[349.61480713 -64.23124695]
[336.75775146 -54.63567352]
[321.27651978 -58.84421539]
[307.64340210 -52.58818054]
[303.12197876 -41.33065033]
[291.76855469 -36.02217102]
[279.46652222 -40.01803207]
[265.71096802 -34.03602982]
[251.95538330 -28.05402946]
[243.36962891 -15.88299465]
[227.62870789 -17.47488403]
[213.87313843 -11.49288273]
[200.24002075 -5.23684692]
[186.73480225 1.29071879]
[173.29557800 7.95307636]
[159.92367554 14.74955845]
[158.37321472 34.51267242]
[145.18257141 49.55953979]
[125.42827606 53.76130295]
[120.14159393 67.79878998]
[114.85491943 81.83628082]
[123.10613251 95.91390228]
[120.18334198 111.96754456]
[107.50000000 122.23374176]
[107.50000000 137.23374939]
[115.23729706 151.03392029]
[107.50000000 163.76118469]
[107.50000000 178.76118469]
[107.50000000 193.76118469]
[107.50000000 208.76118469]
[107.50000000 223.76118469]
[107.50000000 238.76118469]
[107.50000000 253.76118469]
[107.50000000 268.76119995]
[107.50000000 283.76119995]
[107.50000000 298.76119995]
[122.20955658 301.99273682]
[135.88034058 308.31127930]
[147.87292480 317.42126465]
[157.62640381 328.89663696]
[164.68460083 342.20062256]
[168.71737671 356.71096802]
[169.53611755 371.74905396]
[167.10252380 386.61148071]
[161.53042603 400.60311890]
[153.08044434 413.06954956]
[142.14779663 423.42767334]
[129.24380493 431.19308472]
[114.97203827 436.00250244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 132]
[26 131]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[47 128]
[48 127]
[49 126]
[55 87]
[56 86]
[57 85]
[58 84]
[89 123]
[90 122]
[92 121]
[93 120]
[96 119]
[97 118]
[99 116]
[100 115]
[101 114]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
