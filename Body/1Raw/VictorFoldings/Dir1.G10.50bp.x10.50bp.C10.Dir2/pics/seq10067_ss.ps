%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUAUUCUGGGGGGGGGGACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACxxxxxxxxxxGCUUCACCGGCGCAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCACCCCCCCCCCUUACUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[58.48693466 384.34857178]
[45.26673508 377.07611084]
[34.37993240 366.62911987]
[26.56880188 353.71984863]
[22.36592102 339.22854614]
[22.05784798 324.14318848]
[25.66558838 309.49237061]
[32.94316101 296.27499390]
[43.39437103 285.39221191]
[56.30663300 277.58609009]
[70.79956818 273.38879395]
[70.48751068 258.39202881]
[70.17545319 243.39527893]
[69.86340332 228.39852905]
[69.55134583 213.40177917]
[69.23928833 198.40502930]
[68.92723083 183.40826416]
[68.61517334 168.41151428]
[68.30311584 153.41476440]
[79.53028870 70.25405121]
[69.78263855 58.85302734]
[60.03498459 47.45200729]
[50.28888702 50.64740753]
[40.07578278 50.75995255]
[30.34361267 47.80499268]
[21.98791504 42.08138657]
[15.76942921 34.14149475]
[12.24485588 24.73795319]
[-2.75433207 24.58191681]
[-17.75352097 24.42588043]
[-32.75270844 24.26984215]
[-47.75189590 24.11380577]
[-62.75108719 23.95776939]
[-71.14019012 36.90483093]
[-85.20667267 43.24027252]
[-100.46195221 40.94247437]
[-112.03813934 30.74465561]
[-116.24130249 15.90090561]
[-111.73023987 1.14780915]
[-99.94441223 -8.80697346]
[-84.64462280 -10.78690815]
[-70.71299744 -4.16020346]
[-62.59505081 8.95858097]
[-47.59585953 9.11461830]
[-32.59667206 9.27065468]
[-17.59748459 9.42669106]
[-2.59829569 9.58272743]
[12.40089321 9.73876381]
[15.15888596 2.40561032]
[19.57251549 -4.06753016]
[25.39149857 -9.31358624]
[32.28586197 -13.03507137]
[30.10902405 -27.87627602]
[27.93218803 -42.71748352]
[12.89962292 -43.07805634]
[-1.85574222 -45.97412491]
[-15.90936661 -51.32236481]
[-28.85689926 -58.96889496]
[-40.32581329 -68.69371033]
[-49.98612595 -80.21700287]
[-57.55989075 -93.20723724]
[-62.82919312 -107.29064941]
[-65.64243317 -122.06202698]
[-65.91865540 -137.09637451]
[-63.64992142 -151.96113586]
[-58.90150452 -166.22859192]
[-51.81002426 -179.48826599]
[-42.57952118 -191.35864258]
[-31.47557259 -201.49818420]
[-18.81766129 -209.61515808]
[-4.96998167 -215.47602844]
[9.66904259 -218.91215515]
[24.67821693 -219.82469177]
[39.62569809 -218.18736267]
[54.08141327 -214.04727173]
[67.62944794 -207.52357483]
[79.87999725 -198.80392456]
[90.48058319 -188.13925171]
[99.12621307 -175.83634949]
[105.56813049 -162.24923706]
[109.62099457 -147.76882935]
[111.16818237 -132.81175232]
[110.16519165 -117.80834961]
[106.64087677 -103.19029999]
[100.69664001 -89.37820435]
[92.50350952 -76.76945496]
[82.29721069 -65.72683716]
[70.37140656 -56.56805801]
[57.06922150 -49.55664062]
[42.77339172 -44.89431763]
[44.95022964 -30.05311394]
[47.12706757 -15.21190834]
[67.99436188 -5.71421909]
[77.73818970 15.25472260]
[71.43600464 37.70435715]
[81.18366241 49.10537720]
[90.93131256 60.50639725]
[105.57481384 63.75722504]
[119.23105621 57.55181503]
[132.88729858 51.34640884]
[139.84576416 36.89098740]
[155.51747131 33.45914841]
[167.88040161 43.68350601]
[167.45079041 59.72080612]
[154.55818176 69.26860809]
[139.09269714 65.00264740]
[125.43646240 71.20806122]
[111.78022003 77.41346741]
[115.18319702 92.02235413]
[130.17588806 91.55431366]
[143.82258606 82.46037292]
[158.39953613 89.97331238]
[158.91123962 106.36447906]
[144.83128357 114.77203369]
[130.64393616 106.54701233]
[115.65123749 107.01505280]
[113.16612244 121.80776215]
[127.18283081 127.14926910]
[140.75231934 119.37732697]
[156.13362122 122.19682312]
[166.06416321 134.27648926]
[165.85504150 149.91267395]
[155.60501099 161.72244263]
[140.15380859 164.12959290]
[126.79701996 155.99754333]
[121.84132385 141.16598511]
[107.82460785 135.82447815]
[101.69342804 140.14402771]
[103.04424286 155.08308411]
[89.43105316 148.78314209]
[83.29987335 153.10270691]
[83.61193085 168.09945679]
[83.92398071 183.09620667]
[84.23603821 198.09297180]
[84.54809570 213.08972168]
[84.86015320 228.08647156]
[85.17221069 243.08322144]
[85.48426819 258.07998657]
[85.79632568 273.07672119]
[100.45131683 276.66751099]
[113.67712402 283.92974854]
[124.57199097 294.36834717]
[132.39308167 307.27157593]
[136.60716248 321.75964355]
[136.92687988 336.84472656]
[133.33045959 351.49832153]
[126.06308746 364.72134399]
[115.62029266 375.61218262]
[102.71405792 383.42828369]
[88.22436523 387.63677979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 97]
[21 96]
[22 95]
[28 48]
[29 47]
[30 46]
[31 45]
[32 44]
[33 43]
[52 92]
[53 91]
[54 90]
[98 108]
[99 107]
[100 106]
[109 116]
[110 115]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
