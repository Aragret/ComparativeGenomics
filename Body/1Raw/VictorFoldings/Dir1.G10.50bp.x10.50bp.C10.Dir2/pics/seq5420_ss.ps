%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACUACUAGGGGGGGGGGUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACxxxxxxxxxxAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCCCCCCCCCCCUUACUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.05211639 359.81060791]
[71.03017426 354.25759888]
[58.83021545 345.39126587]
[49.21914673 333.76895142]
[42.80112076 320.12124634]
[39.97958374 305.30606079]
[40.93190002 290.25469971]
[45.59820557 275.91326904]
[53.68516922 263.18331909]
[64.68444824 252.86503601]
[77.90460205 245.60707092]
[92.51461792 241.86563110]
[92.51461792 226.86563110]
[92.51461792 211.86563110]
[92.51461792 196.86563110]
[92.51461792 181.86563110]
[92.51461792 166.86563110]
[92.51461792 151.86563110]
[92.51461792 136.86563110]
[92.51461792 121.86563110]
[92.51461792 106.86563110]
[89.34930420 99.39417267]
[92.67177582 91.55844116]
[92.97975159 76.56160736]
[78.02249146 75.37380981]
[63.16072464 73.31024933]
[48.44567490 70.37805176]
[33.92807388 66.58730316]
[19.65796471 61.95109177]
[5.68454218 56.48538589]
[-7.94402647 50.20903397]
[-21.18075943 43.14366913]
[-33.98002625 35.31364822]
[-46.29770660 26.74596024]
[-58.09133530 17.47014427]
[-69.32025909 7.51817465]
[-79.94577026 -3.07564306]
[-89.93124390 -14.27478886]
[-99.24224854 -26.04065704]
[-107.84669495 -38.33268738]
[-115.71492004 -51.10850525]
[-122.81979370 -64.32407379]
[-129.13682556 -77.93383026]
[-134.64425659 -91.89086151]
[-139.32307434 -106.14705658]
[-143.15718079 -120.65326691]
[-146.13331604 -135.35949707]
[-148.24127197 -150.21502686]
[-149.47373962 -165.16867065]
[-149.82649231 -180.16888428]
[-149.29830933 -195.16392517]
[-147.89100647 -210.10212708]
[-145.60943604 -224.93200684]
[-142.46147156 -239.60240173]
[-138.45796204 -254.06277466]
[-133.61270142 -268.26327515]
[-127.94239807 -282.15493774]
[-121.46659851 -295.68984985]
[-114.20762634 -308.82141113]
[-106.19050598 -321.50433350]
[-97.44287109 -333.69488525]
[-87.99487305 -345.35101318]
[-77.87908936 -356.43261719]
[-67.13038635 -366.90139771]
[-55.78582001 -376.72134399]
[-43.88449860 -385.85858154]
[-31.46744537 -394.28161621]
[-18.57746506 -401.96136475]
[-5.25899458 -408.87142944]
[8.44205570 -414.98794556]
[22.47845459 -420.28982544]
[36.80181885 -424.75878906]
[51.36276627 -428.37948608]
[66.11110687 -431.13934326]
[80.99599457 -433.02893066]
[95.96612549 -434.04168701]
[110.96989441 -434.17413330]
[125.95556641 -433.42581177]
[140.87149048 -431.79931641]
[155.66625977 -429.30023193]
[170.28886414 -425.93719482]
[184.68888855 -421.72177124]
[198.81669617 -416.66851807]
[212.62359619 -410.79483032]
[226.06198120 -404.12097168]
[239.08552551 -396.66995239]
[251.64935303 -388.46746826]
[263.71011353 -379.54177856]
[275.22628784 -369.92364502]
[286.15814209 -359.64620972]
[296.46795654 -348.74493408]
[306.12026978 -337.25741577]
[315.08175659 -325.22320557]
[323.32153320 -312.68380737]
[330.81118774 -299.68243408]
[337.52493286 -286.26394653]
[343.43960571 -272.47454834]
[348.53479004 -258.36181641]
[352.79296875 -243.97436523]
[356.19943237 -229.36181641]
[358.74246216 -214.57453918]
[360.41326904 -199.66351318]
[361.20608521 -184.68013000]
[361.11819458 -169.67602539]
[360.14990234 -154.70295715]
[358.30456543 -139.81251526]
[355.58850098 -125.05604553]
[352.01107788 -110.48441315]
[347.58468628 -96.14783478]
[342.32449341 -82.09574890]
[336.24871826 -68.37659454]
[329.37826538 -55.03765488]
[321.73681641 -42.12491989]
[313.35070801 -29.68290329]
[304.24887085 -17.75449371]
[294.46267700 -6.38080931]
[284.02581787 4.39894009]
[272.97433472 14.54759502]
[261.34631348 24.03017044]
[249.18180847 32.81398010]
[236.52276611 40.86874008]
[223.41282654 48.16668320]
[209.89718628 54.68265915]
[196.02243042 60.39419937]
[181.83639526 65.28161621]
[167.38798523 69.32806396]
[152.72698975 72.51959229]
[137.90396118 74.84519196]
[122.97000885 76.29685974]
[107.97659302 76.86958313]
[107.66861725 91.86641693]
[107.51461792 106.86563110]
[107.51461792 121.86563110]
[107.51461792 136.86563110]
[107.51461792 151.86563110]
[107.51461792 166.86563110]
[107.51461792 181.86563110]
[107.51461792 196.86563110]
[107.51461792 211.86563110]
[107.51461792 226.86563110]
[107.51461792 241.86563110]
[122.12462616 245.60707092]
[135.34478760 252.86503601]
[146.34407043 263.18331909]
[154.43103027 275.91326904]
[159.09733582 290.25469971]
[160.04965210 305.30606079]
[157.22811890 320.12124634]
[150.81008911 333.76895142]
[141.19902039 345.39126587]
[128.99905396 354.25759888]
[114.97711945 359.81060791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
