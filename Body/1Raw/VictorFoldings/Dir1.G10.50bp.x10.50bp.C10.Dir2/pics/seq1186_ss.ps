%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACGAUUAAGGGGGGGGGGCCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCxxxxxxxxxxCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUCCCCCCCCCCACACUAUUAA\
) } def
/len { sequence length } bind def

/coor [
[85.28728485 348.17562866]
[71.44134521 342.15960693]
[59.73268509 332.63018799]
[51.03016281 320.29452515]
[45.97956085 306.06799316]
[44.95566940 291.00631714]
[48.03446960 276.22714233]
[54.98748779 262.82720947]
[65.29877472 251.80088806]
[78.20315552 243.96638489]
[92.74304199 239.90505981]
[92.74304199 224.90505981]
[92.74304199 209.90505981]
[92.74304199 194.90505981]
[92.74304199 179.90505981]
[92.74304199 164.90505981]
[92.74304199 149.90505981]
[92.74304199 134.90505981]
[92.74304199 119.90506744]
[92.74304199 104.90506744]
[90.71244812 102.53639221]
[89.52348328 99.35817719]
[89.48427582 95.69014740]
[90.77687073 91.96360016]
[93.41893005 88.67117310]
[94.66580963 73.72308350]
[82.29679108 82.20880127]
[67.51624298 79.65236664]
[58.71587372 67.50520325]
[60.89213562 52.66391754]
[72.80944061 43.55470276]
[87.70169830 45.34935379]
[97.11420441 57.03043365]
[100.21252441 42.35390854]
[103.31085205 27.67738342]
[106.40917206 13.00085735]
[109.50749207 -1.67566824]
[95.08313751 -5.81466770]
[80.99081421 -10.97214794]
[67.30232239 -17.12182808]
[54.08742905 -24.23236847]
[41.41346741 -32.26753616]
[29.34502029 -41.18638611]
[17.94359016 -50.94347000]
[7.26727676 -61.48906326]
[-2.62951756 -72.76943207]
[-11.69635963 -84.72709656]
[-19.88704491 -97.30110931]
[-27.15983772 -110.42741394]
[-33.47767639 -124.03910065]
[-38.80836487 -138.06683350]
[-43.12474060 -152.43910217]
[-46.40480804 -167.08267212]
[-48.63185120 -181.92294312]
[-49.79452515 -196.88427734]
[-49.88689804 -211.89042664]
[-48.90850449 -226.86494446]
[-46.86433029 -241.73150635]
[-43.76479340 -256.41436768]
[-39.62568283 -270.83868408]
[-34.46809387 -284.93096924]
[-28.31830978 -298.61941528]
[-21.20766640 -311.83425903]
[-13.17240143 -324.50814819]
[-4.25345945 -336.57653809]
[5.50371075 -347.97787476]
[16.04938698 -358.65411377]
[27.32983208 -368.55081177]
[39.28756332 -377.61758423]
[51.86164474 -385.80816650]
[64.98799896 -393.08084106]
[78.59973907 -399.39859009]
[92.62750244 -404.72915649]
[106.99980927 -409.04544067]
[121.64340973 -412.32537842]
[136.48370361 -414.55230713]
[151.44503784 -415.71487427]
[166.45120239 -415.80712891]
[181.42570496 -414.82864380]
[196.29225159 -412.78433228]
[210.97506714 -409.68469238]
[225.39936829 -405.54547119]
[239.49160767 -400.38778687]
[253.18000793 -394.23788452]
[266.39477539 -387.12713623]
[279.06863403 -379.09176636]
[291.13693237 -370.17272949]
[302.53820801 -360.41549683]
[313.21438599 -349.86972046]
[323.11099243 -338.58920288]
[332.17764282 -326.63140869]
[340.36813354 -314.05725098]
[347.64074707 -300.93084717]
[353.95837402 -287.31906128]
[359.28884888 -273.29125977]
[363.60498047 -258.91891479]
[366.88482666 -244.27528381]
[369.11166382 -229.43498230]
[370.27410889 -214.47363281]
[370.36624146 -199.46748352]
[369.38760376 -184.49298096]
[367.34320068 -169.62644958]
[364.24343872 -154.94364929]
[360.10412598 -140.51939392]
[354.94631958 -126.42718506]
[348.79632568 -112.73883820]
[341.68548584 -99.52410889]
[333.65002441 -86.85032654]
[324.73089600 -74.78208923]
[314.97354126 -63.38088226]
[304.42770386 -52.70481110]
[293.14709473 -42.80827332]
[281.18923950 -33.74170685]
[268.61502075 -25.55131149]
[255.48857117 -18.27882004]
[241.87672424 -11.96129513]
[227.84887695 -6.63092852]
[213.47651672 -2.31488323]
[198.83285522 0.96484721]
[183.99253845 3.19154954]
[169.03117371 4.35387707]
[154.02502441 4.44590712]
[139.05053711 3.46716976]
[124.18402100 1.42265344]
[121.08569336 16.09917831]
[117.98737335 30.77570534]
[114.88905334 45.45222855]
[111.79073334 60.12875748]
[109.61389160 74.96996307]
[108.36701965 89.91804504]
[107.74304199 104.90506744]
[107.74304199 119.90506744]
[107.74304199 134.90505981]
[107.74304199 149.90505981]
[107.74304199 164.90505981]
[107.74304199 179.90505981]
[107.74304199 194.90505981]
[107.74304199 209.90505981]
[107.74304199 224.90505981]
[107.74304199 239.90505981]
[122.28292847 243.96638489]
[135.18731689 251.80088806]
[145.49859619 262.82720947]
[152.45161438 276.22714233]
[155.53041077 291.00631714]
[154.50653076 306.06799316]
[149.45591736 320.29452515]
[140.75340271 332.63018799]
[129.04473877 342.15960693]
[115.19879913 348.17562866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[33 128]
[34 127]
[35 126]
[36 125]
[37 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
