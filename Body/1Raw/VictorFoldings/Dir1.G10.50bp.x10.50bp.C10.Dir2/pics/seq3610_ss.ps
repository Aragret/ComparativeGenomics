%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCCAUACGGGGGGGGGGCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCxxxxxxxxxxUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCCCCCCCCCCCUCCUCAUAC\
) } def
/len { sequence length } bind def

/coor [
[86.86664581 495.32516479]
[73.02070618 489.30911255]
[61.31204605 479.77969360]
[52.60951996 467.44403076]
[47.55891800 453.21752930]
[46.53502655 438.15582275]
[49.61382675 423.37667847]
[56.56684875 409.97674561]
[66.87813568 398.95040894]
[79.78251648 391.11590576]
[94.32240295 387.05459595]
[94.32240295 372.05459595]
[94.32240295 357.05459595]
[94.32240295 342.05459595]
[94.32240295 327.05459595]
[94.32240295 312.05459595]
[94.32240295 297.05459595]
[94.32240295 282.05459595]
[94.32240295 267.05459595]
[94.32240295 252.05459595]
[94.32240295 237.05459595]
[79.40258789 232.38569641]
[66.63409424 223.33186340]
[57.26860428 210.76599121]
[52.22872543 195.90592957]
[52.01710892 180.19651794]
[56.66633987 165.16905212]
[65.73460388 152.29203796]
[78.34764099 142.82772827]
[93.28302002 137.70834351]
[92.97096252 122.71158600]
[92.65890503 107.71483612]
[91.10132599 92.79592133]
[88.30900574 78.05811310]
[85.51667786 63.32030869]
[82.45873260 60.03238678]
[80.81317902 56.30905151]
[80.54000854 52.66114044]
[81.43321228 49.53125763]
[83.15873718 47.24435806]
[81.60115814 32.32544708]
[67.82762146 21.59105682]
[66.08096313 4.55482388]
[76.95358276 -8.23751736]
[75.08597565 -23.12079811]
[73.21836090 -38.00407791]
[71.35074615 -52.88735580]
[69.48313141 -67.77063751]
[67.61551666 -82.65391541]
[65.74790955 -97.53719330]
[50.72515488 -97.71231079]
[35.86618042 -99.93145752]
[21.44779587 -104.15330505]
[7.73860884 -110.29919434]
[-5.00598717 -118.25463104]
[-16.54856873 -127.87142181]
[-26.67410278 -138.97039795]
[-35.19395828 -151.34480286]
[-41.94941711 -164.76409912]
[-46.81462860 -178.97830200]
[-49.69895172 -193.72259521]
[-50.54866028 -208.72232056]
[-49.34792328 -223.69802856]
[-46.11910629 -238.37074280]
[-40.92236328 -252.46711731]
[-33.85450363 -265.72454834]
[-25.04719925 -277.89602661]
[-14.66452503 -288.75485229]
[-2.89990354 -298.09869385]
[10.02749825 -305.75347900]
[23.87685013 -311.57666016]
[38.39014435 -315.45968628]
[53.29701233 -317.33026123]
[68.31974792 -317.15353394]
[83.17848206 -314.93276978]
[97.59640503 -310.70935059]
[111.30493164 -304.56198120]
[124.04866791 -296.60516357]
[135.59020996 -286.98712158]
[145.71453857 -275.88705444]
[154.23306274 -263.51171875]
[160.98706055 -250.09170532]
[165.85073853 -235.87698364]
[168.73345947 -221.13237000]
[169.58154297 -206.13255310]
[168.37918091 -191.15696716]
[165.14878845 -176.48460388]
[159.95051575 -162.38879395]
[152.88122559 -149.13214111]
[144.07260132 -136.96160889]
[133.68875122 -126.10391998]
[121.92311096 -116.76134491]
[108.99488831 -109.10794067]
[95.14490509 -103.28627777]
[80.63118744 -99.40480804]
[82.49880219 -84.52153015]
[84.36640930 -69.63825226]
[86.23402405 -54.75497055]
[88.10163879 -39.87168884]
[89.96925354 -24.98841095]
[91.83686829 -10.10513115]
[103.04576874 -3.67416811]
[108.56817627 8.22445774]
[106.17393494 21.32008743]
[96.52006531 30.76786613]
[98.07764435 45.68677902]
[100.25448608 60.52798462]
[103.04680634 75.26579285]
[105.83913422 90.00359344]
[113.89709473 77.35174561]
[127.79304504 71.70352173]
[142.39271545 75.14583588]
[152.30181885 86.40681458]
[153.85914612 101.32575989]
[146.48927307 114.39040375]
[132.91523743 120.77363586]
[118.15237427 118.11696625]
[107.65566254 107.40277863]
[107.96772003 122.39952850]
[108.27977753 137.39628601]
[122.16754150 141.31413269]
[134.36991882 148.98625183]
[143.89817810 159.78034973]
[149.98326111 172.81156921]
[152.13787842 187.01510620]
[150.19548035 201.23310852]
[144.32318115 214.30915833]
[135.00730896 225.18228149]
[123.01322174 232.97302246]
[109.32240295 237.05459595]
[109.32240295 252.05459595]
[109.32240295 267.05459595]
[109.32240295 282.05459595]
[109.32240295 297.05459595]
[109.32240295 312.05459595]
[109.32240295 327.05459595]
[109.32240295 342.05459595]
[109.32240295 357.05459595]
[109.32240295 372.05459595]
[109.32240295 387.05459595]
[123.86228943 391.11590576]
[136.76666260 398.95040894]
[147.07795715 409.97674561]
[154.03097534 423.37667847]
[157.10977173 438.15582275]
[156.08587646 453.21752930]
[151.03527832 467.44403076]
[142.33274841 479.77969360]
[130.62409973 489.30911255]
[116.77815247 495.32516479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 120]
[31 119]
[32 118]
[33 109]
[34 108]
[35 107]
[40 106]
[41 105]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[49 96]
[50 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
