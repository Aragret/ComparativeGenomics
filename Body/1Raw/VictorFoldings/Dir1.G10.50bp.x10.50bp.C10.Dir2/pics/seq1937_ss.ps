%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACCAGACGGGGGGGGGGAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAxxxxxxxxxxAGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAACCCCCCCCCCACUACCAAAC\
) } def
/len { sequence length } bind def

/coor [
[73.37026215 373.07827759]
[59.52432632 367.06225586]
[47.81566620 357.53283691]
[39.11314011 345.19717407]
[34.06253815 330.97064209]
[33.03864670 315.90896606]
[36.11744690 301.12982178]
[43.07046890 287.72988892]
[53.38175201 276.70355225]
[66.28613281 268.86904907]
[80.82601929 264.80773926]
[80.82601929 249.80773926]
[80.82601929 234.80773926]
[80.82601929 219.80773926]
[80.82601929 204.80773926]
[80.82601929 189.80773926]
[80.82601929 174.80773926]
[80.82601929 159.80773926]
[80.82601929 144.80773926]
[80.82601929 129.80773926]
[78.43965149 144.61668396]
[67.48761749 154.86622620]
[52.55317307 156.26707458]
[39.88613892 148.23300171]
[34.78746414 134.12614441]
[39.39086151 119.84998322]
[51.76988220 111.37886810]
[66.74527740 112.25829315]
[52.10177612 109.00746918]
[37.45827484 105.75664520]
[22.91209984 115.41822815]
[6.20049906 111.67570496]
[-2.48665977 97.30938721]
[-17.19462204 94.36390686]
[-23.67069244 96.14379883]
[-29.21806145 94.57599640]
[-32.44740295 90.97782135]
[-47.02010345 87.42305756]
[-61.59280777 83.86829376]
[-76.16551208 80.31353760]
[-89.53898621 88.73527527]
[-104.93180084 85.15245056]
[-113.21168518 71.69068909]
[-109.46631622 56.33660889]
[-95.91776276 48.19951630]
[-80.60414124 52.10700607]
[-72.61074829 65.74082947]
[-58.03804398 69.29559326]
[-43.46534348 72.85035706]
[-28.89264107 76.40511322]
[-14.24913883 79.65594482]
[0.45882276 82.60142517]
[10.11061859 74.00842285]
[23.14606094 72.54161072]
[34.80784988 78.96271515]
[40.70910263 91.11314392]
[55.35260391 94.36396790]
[69.99610138 97.61479187]
[79.61440277 81.73844910]
[95.36748505 75.80015564]
[109.76644897 80.38758087]
[120.64527130 70.06037140]
[131.52409363 59.73316956]
[128.01287842 43.77941132]
[135.29682922 28.10335350]
[151.43229675 19.60609245]
[170.35556030 22.77583313]
[179.37309265 10.78900051]
[188.39062500 -1.19783187]
[178.35113525 -13.01754856]
[171.18293762 -26.76156807]
[167.23953247 -41.74540329]
[166.71391296 -57.22358322]
[169.62915039 -72.42675781]
[175.83731079 -86.59992218]
[185.02705383 -99.03991699]
[196.73916626 -109.13032532]
[210.38955688 -116.37198639]
[225.29838562 -120.40772247]
[240.72387695 -121.03993225]
[255.89927673 -118.24027252]
[270.07095337 -112.15092468]
[278.83715820 -124.32276154]
[280.62368774 -140.04277039]
[294.34014893 -145.84860229]
[303.10635376 -158.02044678]
[311.87255859 -170.19227600]
[320.63876343 -182.36412048]
[321.74581909 -198.72586060]
[336.58618164 -205.70408630]
[349.89337158 -196.12019348]
[347.97808838 -179.83326721]
[332.81060791 -173.59791565]
[324.04440308 -161.42607117]
[315.27819824 -149.25424194]
[306.51199341 -137.08239746]
[305.35247803 -122.23299408]
[291.00897217 -115.55654907]
[282.24276733 -103.38471222]
[291.98480225 -92.60288239]
[299.26309204 -80.01882935]
[303.75439453 -66.18636322]
[305.25817871 -51.71486664]
[303.70559692 -37.24240494]
[299.16256714 -23.40763664]
[291.82711792 -10.82161045]
[282.02059937 -0.04077837]
[270.17370605 8.45760632]
[256.80752563 14.29661274]
[242.51060486 17.21635246]
[227.91311646 17.08554840]
[213.65896606 13.90742683]
[200.37745667 7.81969786]
[191.35992432 19.80653000]
[182.34239197 31.79336357]
[186.94795227 46.06882477]
[201.27055359 50.52563858]
[215.59315491 54.98245621]
[231.46232605 50.84706116]
[242.78405762 62.71088791]
[237.91152954 78.36944580]
[221.85716248 81.71455383]
[211.13633728 69.30505371]
[196.81373596 64.84823608]
[182.49113464 60.39142227]
[163.19938660 75.10530090]
[141.85130310 70.61199188]
[130.97247314 80.93920135]
[120.09365082 91.26640320]
[120.70212555 115.73638916]
[95.82601929 129.80773926]
[95.82601929 144.80773926]
[95.82601929 159.80773926]
[95.82601929 174.80773926]
[95.82601929 189.80773926]
[95.82601929 204.80773926]
[95.82601929 219.80773926]
[95.82601929 234.80773926]
[95.82601929 249.80773926]
[95.82601929 264.80773926]
[110.36590576 268.86904907]
[123.27028656 276.70355225]
[133.58157349 287.72988892]
[140.53459167 301.12982178]
[143.61338806 315.90896606]
[142.58950806 330.97064209]
[137.53889465 345.19717407]
[128.83638000 357.53283691]
[117.12771606 367.06225586]
[103.28177643 373.07827759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 58]
[29 57]
[30 56]
[33 52]
[34 51]
[37 50]
[38 49]
[39 48]
[40 47]
[61 129]
[62 128]
[63 127]
[67 115]
[68 114]
[69 113]
[82 99]
[83 98]
[85 96]
[86 95]
[87 94]
[88 93]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
