%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACCCCACUAGGGGGGGGGGUGCUUAGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAAxxxxxxxxxxAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAACCCCCCCCCCAUAGCCCACUA\
) } def
/len { sequence length } bind def

/coor [
[109.81949615 440.06396484]
[95.79755402 434.51095581]
[83.59759521 425.64462280]
[73.98651886 414.02230835]
[67.56849670 400.37460327]
[64.74696350 385.55941772]
[65.69927216 370.50802612]
[70.36557770 356.16662598]
[78.45254517 343.43664551]
[89.45182037 333.11837769]
[102.67198181 325.86041260]
[117.28199005 322.11895752]
[117.28199005 307.11895752]
[117.28199005 292.11895752]
[117.28199005 277.11895752]
[117.28199005 262.11895752]
[117.28199005 247.11897278]
[117.28199005 232.11897278]
[117.28199005 217.11897278]
[117.28199005 202.11897278]
[117.28199005 187.11897278]
[116.66616821 172.13162231]
[115.43555450 157.18217468]
[114.20494080 142.23274231]
[112.97432709 127.28330994]
[87.99213409 128.01889038]
[70.77776337 109.59117889]
[56.19401169 113.10034943]
[50.38790894 127.49023438]
[37.21468735 135.69059753]
[21.73971939 134.54821777]
[9.91344643 124.50237274]
[6.28331232 109.41590118]
[12.24517727 95.08984375]
[25.50658035 87.03287506]
[40.96824646 88.34305573]
[52.68484497 98.51660156]
[67.26859283 95.00743103]
[72.83052826 81.07671356]
[64.67386627 68.48827362]
[56.51719666 55.89983749]
[45.74851990 45.45782852]
[32.91486740 37.69269180]
[20.08121109 29.92755890]
[7.24755812 22.16242218]
[-5.58609581 14.39728737]
[-19.00328827 21.87221146]
[-34.36012650 21.62104607]
[-47.52569962 13.71134853]
[-54.95853043 0.27079141]
[-54.65922928 -15.08518410]
[-46.70830536 -28.22589874]
[-33.24451447 -35.61656570]
[-17.88955116 -35.26913071]
[-4.77382469 -27.27705383]
[2.57460213 -13.79016399]
[2.17903948 1.56363320]
[15.01269341 9.32876873]
[27.84634781 17.09390450]
[40.68000031 24.85903931]
[53.51365662 32.62417603]
[46.51092911 19.35911560]
[43.10931015 4.74990606]
[43.53216553 -10.24413300]
[47.75172806 -24.63841248]
[55.49091721 -37.48772812]
[66.24153900 -47.94832611]
[79.29765320 -55.33330536]
[93.80192566 -59.15772629]
[108.80191803 -59.17046356]
[123.31266022 -55.37067795]
[136.38130188 -48.00788498]
[147.14967346 -37.56555939]
[154.91067505 -24.72940826]
[159.15467834 -10.34231472]
[159.60299683 4.65098429]
[156.22619629 19.26594925]
[149.24600220 32.54288101]
[139.12078857 43.60995102]
[126.51541901 51.74043274]
[112.25763702 56.40043259]
[97.28367615 57.28395844]
[82.57682037 54.33298492]
[69.10563660 47.74317169]
[77.26230621 60.33161163]
[85.41896820 72.92005157]
[112.61656189 72.24987793]
[129.46009827 93.30558777]
[141.96412659 85.02011108]
[154.46817017 76.73464203]
[159.93603516 69.33881378]
[167.31507874 68.41049194]
[179.98660278 60.38349533]
[192.65811157 52.35649872]
[190.40406799 37.29531860]
[194.47706604 22.62117577]
[204.17146301 10.87645245]
[217.80764771 4.09599209]
[233.02304077 3.45455170]
[247.18151855 9.06326485]
[257.83001709 19.95038795]
[263.12362671 34.22966003]
[262.14517212 49.42711258]
[255.06422424 62.90969467]
[243.10757446 72.34146881]
[228.34678650 76.08831787]
[213.33924866 73.50108337]
[200.68511963 65.02801514]
[188.01359558 73.05501556]
[175.34208679 81.08200836]
[162.75364685 89.23867798]
[150.24960327 97.52414703]
[137.74557495 105.80962372]
[151.00494385 98.79615021]
[166.00320435 99.02537537]
[179.04205322 106.44078064]
[186.90640259 119.21388245]
[187.65704346 134.19508362]
[181.10890198 147.69033813]
[168.87660217 156.37197876]
[153.97639465 158.09930420]
[140.08235168 152.44638062]
[130.62046814 140.80709839]
[127.92376709 126.05270386]
[129.15437317 141.00213623]
[130.38499451 155.95156860]
[131.61560059 170.90100098]
[134.30711365 174.48645020]
[135.55229187 178.35595703]
[135.44404602 182.00767517]
[134.23243713 185.02449036]
[132.28199768 187.11897278]
[132.28199768 202.11897278]
[132.28199768 217.11897278]
[132.28199768 232.11897278]
[132.28199768 247.11897278]
[132.28199768 262.11895752]
[132.28199768 277.11895752]
[132.28199768 292.11895752]
[132.28199768 307.11895752]
[132.28199768 322.11895752]
[146.89201355 325.86041260]
[160.11216736 333.11837769]
[171.11143494 343.43664551]
[179.19841003 356.16662598]
[183.86471558 370.50802612]
[184.81703186 385.55941772]
[181.99548340 400.37460327]
[175.57746887 414.02230835]
[165.96640015 425.64462280]
[153.76643372 434.51095581]
[139.74449158 440.06396484]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 127]
[23 126]
[24 125]
[25 124]
[27 38]
[28 37]
[39 86]
[40 85]
[41 84]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[88 113]
[89 112]
[90 111]
[92 110]
[93 109]
[94 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
