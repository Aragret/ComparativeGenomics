%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACUACUAGGGGGGGGGGACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGAxxxxxxxxxxCGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUCCCCCCCCCCUAUAUUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.46157837]
[71.19830322 389.44555664]
[59.48964310 379.91613770]
[50.78712082 367.58047485]
[45.73651886 353.35394287]
[44.71262741 338.29226685]
[47.79142761 323.51312256]
[54.74444962 310.11318970]
[65.05573273 299.08685303]
[77.96011353 291.25234985]
[92.50000000 287.19104004]
[92.50000000 272.19104004]
[92.50000000 257.19104004]
[92.50000000 242.19102478]
[92.50000000 227.19102478]
[92.50000000 212.19102478]
[92.50000000 197.19102478]
[92.50000000 182.19102478]
[92.50000000 167.19102478]
[92.50000000 152.19102478]
[92.50000000 137.19102478]
[74.45733643 128.05343628]
[63.67300034 110.94403076]
[48.73869324 112.34632874]
[33.80438614 113.74863434]
[30.93581581 128.57928467]
[24.00394249 142.00038147]
[13.57070160 152.92393494]
[0.48186877 160.46443176]
[-14.20150280 164.01060486]
[-29.28909683 163.27496338]
[-43.55783081 158.31715393]
[-55.85100174 149.53907776]
[-65.17205811 137.65232849]
[-70.76538849 123.62052917]
[-72.17755127 108.58116913]
[-69.29408264 93.75341797]
[-62.34873199 80.33928680]
[-51.90452576 69.42621613]
[-38.80812454 61.89886856]
[-24.12119675 58.36745834]
[-9.03434849 59.11825562]
[5.22939825 64.09040070]
[17.51374435 72.88082123]
[26.82285500 84.77691650]
[32.40208054 98.81433105]
[47.33638763 97.41202545]
[62.27069855 96.00971985]
[63.54696655 89.48339081]
[65.94314575 83.28015900]
[54.05076218 74.13842010]
[37.73153687 72.52137756]
[31.21977043 57.47050095]
[41.21421432 44.46884155]
[57.43343735 46.89139175]
[63.19249725 62.24604416]
[75.08487701 71.38777924]
[83.13173676 66.01641083]
[92.27551270 62.85494995]
[101.92159271 62.10897064]
[105.62775421 47.57403564]
[109.33391571 33.03909683]
[113.04007721 18.50416183]
[108.95237732 3.22014189]
[119.59441376 -7.20081854]
[123.30057526 -21.73575401]
[127.00673676 -36.27069092]
[113.50701141 -42.93786240]
[101.68871307 -52.26639938]
[92.06849670 -63.84849930]
[85.06690216 -77.17784119]
[80.99002075 -91.67173004]
[80.01606750 -106.69654083]
[82.18762207 -121.59547424]
[87.40975952 -135.71719360]
[95.45418549 -148.44436646]
[105.96923065 -159.22061157]
[118.49521637 -167.57484436]
[132.48457336 -173.14184570]
[147.32574463 -175.67826843]
[162.36993408 -175.07319641]
[176.95947266 -171.35311890]
[190.45657349 -164.68063354]
[202.27119446 -155.34745789]
[211.88685608 -143.76156616]
[218.88320923 -130.42947388]
[222.95439148 -115.93398285]
[223.92242432 -100.90878296]
[221.74501038 -86.01071167]
[216.51731873 -71.89105225]
[208.46789551 -59.16704178]
[197.94860840 -48.39492798]
[185.41932678 -40.04562378]
[171.42778015 -34.48412323]
[156.58561707 -31.95355034]
[141.54167175 -32.56452942]
[137.83551025 -18.02959251]
[134.12934875 -3.49465704]
[138.48213196 10.74972725]
[127.57501221 22.21032333]
[123.86885071 36.74525833]
[120.16268921 51.28019714]
[116.45652771 65.81513214]
[127.43696594 73.79627228]
[134.90504456 85.13188934]
[137.90472412 98.37086487]
[152.72248840 100.70196533]
[159.35440063 87.11855316]
[169.69667053 76.09454346]
[182.82968140 68.61018372]
[197.58563232 65.33098602]
[212.65245056 66.54851532]
[226.69039917 72.15453339]
[238.45124817 81.65053558]
[246.88919067 94.19216156]
[251.25398254 108.66420746]
[251.15747070 123.77983093]
[246.60824585 138.19496155]
[238.01083374 150.62782288]
[226.12969971 159.97286987]
[212.02131653 165.39918518]
[196.94018555 166.42422485]
[182.22729492 162.95687866]
[169.19093323 155.30543518]
[158.99026489 144.15025330]
[152.53234863 130.48327637]
[150.39138794 115.51972961]
[135.57362366 113.18862152]
[124.65488434 128.83677673]
[107.50000000 137.19102478]
[107.50000000 152.19102478]
[107.50000000 167.19102478]
[107.50000000 182.19102478]
[107.50000000 197.19102478]
[107.50000000 212.19102478]
[107.50000000 227.19102478]
[107.50000000 242.19102478]
[107.50000000 257.19104004]
[107.50000000 272.19104004]
[107.50000000 287.19104004]
[122.03988647 291.25234985]
[134.94427490 299.08685303]
[145.25555420 310.11318970]
[152.20857239 323.51312256]
[155.28736877 338.29226685]
[154.26348877 353.35394287]
[149.21287537 367.58047485]
[140.51036072 379.91613770]
[128.80169678 389.44555664]
[114.95575714 395.46157837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 48]
[24 47]
[25 46]
[50 57]
[51 56]
[60 103]
[61 102]
[62 101]
[63 100]
[65 98]
[66 97]
[67 96]
[106 128]
[107 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
