%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACUGUCGGGGGGGGGGAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAAxxxxxxxxxxCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUCCCCCCCCCCCCUCACUCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 366.56054688]
[71.19830322 360.54452515]
[59.48964310 351.01510620]
[50.78712082 338.67944336]
[45.73651886 324.45291138]
[44.71262741 309.39123535]
[47.79142761 294.61206055]
[54.74444962 281.21212769]
[65.05573273 270.18582153]
[77.96011353 262.35128784]
[92.50000000 258.28997803]
[92.50000000 243.28999329]
[92.50000000 228.28999329]
[92.50000000 213.28999329]
[92.50000000 198.28999329]
[92.50000000 183.28999329]
[92.50000000 168.28999329]
[92.50000000 153.28999329]
[92.50000000 138.28999329]
[92.50000000 123.28998566]
[92.50000000 108.28998566]
[92.34396362 93.29080200]
[82.30126953 104.43280792]
[67.66158295 107.70076752]
[53.83397293 101.88722992]
[45.92746735 89.14018250]
[46.86336136 74.16941071]
[56.29586411 62.50630951]
[70.73984528 58.46016312]
[84.85855103 63.52594757]
[93.43514252 75.83111572]
[95.61197662 60.98991013]
[97.78881073 46.14870453]
[99.96565247 31.30749702]
[85.30406189 28.11085129]
[70.89795685 23.91029739]
[56.81597137 18.72585487]
[43.12522507 12.58222961]
[29.89095879 5.50869799]
[17.17623901 -2.46103048]
[5.04165792 -11.28897572]
[-6.45495605 -20.93306923]
[-17.25881767 -31.34735107]
[-27.31843948 -42.48219299]
[-36.58588028 -54.28452682]
[-45.01698303 -66.69812012]
[-52.57156372 -79.66380310]
[-59.21361923 -93.11979675]
[-64.91150665 -107.00196838]
[-69.63806152 -121.24417114]
[-73.37076569 -135.77853394]
[-76.09182739 -150.53578186]
[-77.78827667 -165.44560242]
[-78.45204163 -180.43693542]
[-78.07994843 -195.43833923]
[-76.67377472 -210.37834167]
[-74.24021912 -225.18571472]
[-70.79087830 -239.78991699]
[-66.34219360 -254.12135315]
[-60.91535568 -268.11169434]
[-54.53623962 -281.69433594]
[-47.23523712 -294.80447388]
[-39.04714584 -307.37966919]
[-30.01098061 -319.36001587]
[-20.16980553 -330.68838501]
[-9.57052040 -341.31079102]
[1.73636663 -351.17666626]
[13.69697094 -360.23892212]
[26.25429535 -368.45440674]
[39.34849548 -375.78396606]
[52.91717529 -382.19268799]
[66.89566803 -387.65002441]
[81.21736908 -392.12994385]
[95.81401062 -395.61111450]
[110.61605072 -398.07693481]
[125.55294037 -399.51568604]
[140.55349731 -399.92047119]
[155.54624939 -399.28939819]
[170.45973206 -397.62545776]
[185.22288513 -394.93658447]
[199.76533508 -391.23556519]
[214.01782227 -386.54006958]
[227.91238403 -380.87246704]
[241.38282776 -374.25976562]
[254.36494446 -366.73345947]
[266.79687500 -358.32946777]
[278.61941528 -349.08776855]
[289.77615356 -339.05245972]
[300.21395874 -328.27130127]
[309.88308716 -316.79574585]
[318.73748779 -304.68045044]
[326.73489380 -291.98312378]
[333.83728027 -278.76431274]
[340.01074219 -265.08700562]
[345.22586060 -251.01635742]
[349.45782471 -236.61943054]
[352.68643188 -221.96485901]
[354.89630127 -207.12245178]
[356.07690430 -192.16293335]
[356.22259521 -177.15762329]
[355.33273315 -162.17800903]
[353.41152954 -147.29548645]
[350.46810913 -132.58096313]
[346.51654053 -118.10458374]
[341.57565308 -103.93531036]
[335.66894531 -90.14068604]
[328.82464600 -76.78643799]
[321.07528687 -63.93621063]
[312.45785522 -51.65124130]
[303.01339722 -39.99007034]
[292.78692627 -29.00827408]
[281.82717896 -18.75818443]
[270.18634033 -9.28864574]
[257.91995239 -0.64478886]
[245.08644104 7.13219595]
[231.74696350 14.00524712]
[217.96507263 19.94161224]
[203.80647278 24.91300011]
[189.33862305 28.89571953]
[174.63047791 31.87079048]
[159.75212097 33.82403564]
[144.77445984 34.74615097]
[129.76887512 34.63273621]
[114.80685425 33.48433304]
[112.63002014 48.32553864]
[110.45318604 63.16674423]
[108.27634430 78.00794983]
[107.34071350 92.97874451]
[110.66161346 100.38520813]
[107.50000000 108.28998566]
[107.50000000 123.28998566]
[107.50000000 138.28999329]
[107.50000000 153.28999329]
[107.50000000 168.28999329]
[107.50000000 183.28999329]
[107.50000000 198.28999329]
[107.50000000 213.28999329]
[107.50000000 228.28999329]
[107.50000000 243.28999329]
[107.50000000 258.28997803]
[122.03988647 262.35128784]
[134.94427490 270.18582153]
[145.25555420 281.21212769]
[152.20857239 294.61206055]
[155.28736877 309.39123535]
[154.26348877 324.45291138]
[149.21287537 338.67944336]
[140.51036072 351.01510620]
[128.80169678 360.54452515]
[114.95575714 366.56054688]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[31 127]
[32 126]
[33 125]
[34 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
