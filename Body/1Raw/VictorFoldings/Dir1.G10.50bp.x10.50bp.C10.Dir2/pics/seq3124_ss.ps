%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCUCAACGGGGGGGGGGUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGxxxxxxxxxxCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUCCCCCCCCCCUCAUCACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.06340790 359.55346680]
[71.21747589 353.53744507]
[59.50881195 344.00802612]
[50.80628586 331.67236328]
[45.75568390 317.44583130]
[44.73179245 302.38415527]
[47.81059265 287.60498047]
[54.76361465 274.20504761]
[65.07489777 263.17874146]
[77.97927856 255.34422302]
[92.51916504 251.28291321]
[92.51916504 236.28291321]
[92.51916504 221.28291321]
[92.51916504 206.28291321]
[92.51916504 191.28291321]
[92.51916504 176.28291321]
[92.51916504 161.28291321]
[92.51916504 146.28291321]
[92.51916504 131.28291321]
[92.51916504 116.28290558]
[82.77151489 104.88188934]
[67.95375824 102.55078125]
[53.13599777 100.21968079]
[38.25271988 102.08728790]
[24.47033691 108.00725555]
[10.68795490 113.92721558]
[-1.47916842 125.73388672]
[-16.19262314 117.31066895]
[-12.17167950 100.84044647]
[4.76799250 100.14483643]
[18.55037308 94.22487640]
[32.33275604 88.30490875]
[32.09873581 80.80856323]
[31.39667130 58.31951904]
[17.27186775 53.27076340]
[1.67263722 55.91170502]
[-7.70779371 44.34205627]
[-21.83259583 39.29329681]
[-35.95740128 34.24454117]
[-50.08220291 29.19578552]
[-61.29821777 39.61017609]
[-76.07234955 43.60812759]
[-91.00961304 40.27093506]
[-102.67752838 30.36546516]
[-108.39489746 16.16792107]
[-106.84790802 0.94079256]
[-98.39205170 -11.81683540]
[-84.97042084 -19.17335320]
[-69.66720581 -19.43828773]
[-55.99897003 -12.55076027]
[-47.10658264 -0.09347177]
[-45.03344727 15.07098293]
[-30.90864372 20.11973953]
[-16.78384018 25.16849518]
[-2.65903735 30.21725273]
[11.92989254 27.21518898]
[22.32062340 39.14595795]
[36.44542694 44.19471359]
[57.41237640 64.39989471]
[55.46710205 85.40192413]
[70.28485870 87.73302460]
[85.10261536 90.06412506]
[99.37808228 85.45856476]
[110.03970337 74.90727234]
[120.70133209 64.35597992]
[131.36296082 53.80469131]
[142.02458191 43.25340271]
[152.68620300 32.70211411]
[161.70373535 20.71528053]
[168.88624573 7.54669762]
[155.88253784 15.02357292]
[141.27136230 18.41667747]
[126.30347443 17.43553925]
[112.26023865 12.16415215]
[100.34382629 3.05377483]
[91.57433319 -9.11569691]
[86.70248413 -23.30249023]
[86.14533234 -38.29213715]
[89.95058441 -52.80144882]
[97.79247284 -65.58834839]
[108.99969482 -75.55820465]
[122.61286163 -81.85755157]
[137.46659851 -83.94712830]
[152.28936768 -81.64804840]
[165.81224060 -75.15713501]
[176.87759399 -65.03004456]
[184.53816223 -52.13370895]
[188.13818359 -37.57211685]
[187.36946106 -22.59182930]
[182.29618835 -8.47222042]
[193.99581909 -17.85938263]
[205.69544983 -27.24654388]
[217.39506531 -36.63370514]
[229.09469604 -46.02086639]
[240.79431152 -55.40803146]
[249.36457825 -70.03632355]
[265.79367065 -65.85050201]
[266.31945801 -48.90471268]
[250.18147278 -43.70840454]
[238.48185730 -34.32124329]
[226.78222656 -24.93408203]
[215.08261108 -15.54692078]
[203.38298035 -6.15975904]
[191.68336487 3.22740293]
[182.05482483 14.72920609]
[174.87232971 27.89778900]
[182.59640503 40.75619125]
[197.59559631 40.60015488]
[212.59478760 40.44411850]
[222.38079834 28.24707794]
[237.72744751 25.24465179]
[251.38850403 32.85449600]
[256.91363525 47.48347473]
[251.69403076 62.22423172]
[238.19424438 70.11663055]
[222.78846741 67.43412018]
[212.75082397 55.44330597]
[197.75163269 55.59934235]
[182.75244141 55.75537872]
[170.21855164 51.66107178]
[163.23750305 43.36373901]
[152.57586670 53.91502762]
[141.91424561 64.46631622]
[131.25262451 75.01760864]
[120.59099579 85.56890106]
[109.92936707 96.12019348]
[112.08542633 99.14823914]
[113.20748138 103.11718750]
[112.93411255 107.64645386]
[111.04833984 112.22834778]
[107.51916504 116.28290558]
[107.51916504 131.28291321]
[107.51916504 146.28291321]
[107.51916504 161.28291321]
[107.51916504 176.28291321]
[107.51916504 191.28291321]
[107.51916504 206.28291321]
[107.51916504 221.28291321]
[107.51916504 236.28291321]
[107.51916504 251.28291321]
[122.05905151 255.34422302]
[134.96343994 263.17874146]
[145.27471924 274.20504761]
[152.22773743 287.60498047]
[155.30653381 302.38415527]
[154.28265381 317.44583130]
[149.23204041 331.67236328]
[140.52952576 344.00802612]
[128.82086182 353.53744507]
[114.97492218 359.55346680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 62]
[22 61]
[23 60]
[24 32]
[25 31]
[26 30]
[34 58]
[35 57]
[37 55]
[38 54]
[39 53]
[40 52]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[68 121]
[69 106]
[70 105]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
