%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGCCAAUGGGGGGGGGGAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGxxxxxxxxxxUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACCCCCCCCCCCUAAGCCAAU\
) } def
/len { sequence length } bind def

/coor [
[124.76765442 598.98291016]
[110.92171478 592.96685791]
[99.21305847 583.43743896]
[90.51052856 571.10174561]
[85.45993042 556.87524414]
[84.43604279 541.81359863]
[87.51483917 527.03442383]
[94.46785736 513.63446045]
[104.77914429 502.60815430]
[117.68352509 494.77365112]
[132.22341919 490.71234131]
[132.22341919 475.71234131]
[132.22341919 460.71234131]
[132.22341919 445.71234131]
[132.22341919 430.71234131]
[132.22341919 415.71234131]
[132.22341919 400.71234131]
[132.22341919 385.71234131]
[132.22341919 370.71234131]
[132.22341919 355.71234131]
[130.66583252 340.79342651]
[127.56751251 326.11688232]
[124.46918488 311.44036865]
[121.37086487 296.76382446]
[118.27254486 282.08731079]
[115.17422485 267.41079712]
[112.07589722 252.73426819]
[96.90396118 246.54414368]
[88.30518341 232.40104675]
[89.82225037 215.75231934]
[101.05626678 203.14878845]
[97.65328979 188.53990173]
[94.25031281 173.93101501]
[88.18903351 187.65182495]
[76.52603149 197.08445740]
[61.84105682 200.14247131]
[47.38228607 196.14947510]
[36.34787369 185.98867798]
[31.17852020 171.90757751]
[33.01764679 157.02073669]
[41.45845413 144.62103271]
[54.63391113 137.45114136]
[69.62973022 137.09698486]
[83.12897491 143.63690186]
[92.14651489 155.62612915]
[92.14651489 140.62612915]
[92.14651489 125.62612915]
[92.14651489 110.62612915]
[86.65948486 96.66574097]
[76.44600677 85.68007660]
[66.23252869 74.69440460]
[56.01904678 63.70874405]
[47.82804871 59.51834869]
[45.71029663 52.38667297]
[35.72756958 41.19091034]
[25.74484253 29.99514389]
[10.69076729 22.19699287]
[14.01677990 5.57249308]
[30.91231918 4.16640520]
[36.94060898 20.01241684]
[46.92333603 31.20818329]
[56.90605927 42.40394974]
[67.00470734 53.49526215]
[77.21819305 64.48092651]
[87.43167114 75.46659088]
[97.64514923 86.45225525]
[111.87192535 81.69844055]
[113.42951202 66.77953339]
[114.98709106 51.86061859]
[116.54467010 36.94170761]
[103.02431488 30.04501152]
[92.91124725 18.72731209]
[87.57318115 4.51923561]
[87.73204041 -10.65769482]
[93.36634064 -24.75092125]
[103.71409607 -35.85445404]
[117.37585449 -42.46662903]
[132.50396729 -43.69320297]
[147.05249023 -39.36829376]
[159.05386353 -30.07680893]
[166.88497925 -17.07534599]
[169.48675537 -2.12224698]
[166.50732422 12.76020622]
[158.34962463 25.55928230]
[146.11691284 34.54401398]
[131.46357727 38.49928665]
[129.90600586 53.41819763]
[128.34841919 68.33711243]
[126.79084015 83.25602722]
[141.07078552 78.66436005]
[156.02951050 79.77626038]
[169.47366333 86.42867279]
[179.43196106 97.64617920]
[184.44422913 111.78397369]
[183.77551270 126.76905823]
[177.52389526 140.40420532]
[166.60600281 150.69010925]
[152.62274170 156.11859131]
[137.62443542 155.89364624]
[123.81024170 150.04829407]
[113.20572662 139.43960571]
[107.36580658 125.62311554]
[107.14651489 110.62612915]
[107.14651489 125.62612915]
[107.14651489 140.62612915]
[107.14651489 155.62612915]
[108.85920715 170.52803040]
[112.26218414 185.13691711]
[115.66516113 199.74581909]
[128.75991821 204.16470337]
[137.87635803 214.40695190]
[140.70246887 227.71347046]
[136.60168457 240.57019043]
[126.75242615 249.63594055]
[129.85075378 264.31246948]
[132.94906616 278.98898315]
[136.04739380 293.66552734]
[139.14570618 308.34204102]
[142.24403381 323.01855469]
[145.34236145 337.69509888]
[152.07473755 324.29080200]
[164.53114319 315.93389893]
[179.48727417 314.78753662]
[193.07177734 321.14846802]
[201.76835632 333.37014771]
[203.32591248 348.28906250]
[197.34127808 362.04348755]
[185.36357117 371.07312012]
[170.49317932 373.04067993]
[156.57925415 367.43688965]
[147.22341919 355.71234131]
[147.22341919 370.71234131]
[147.22341919 385.71234131]
[147.22341919 400.71234131]
[147.22341919 415.71234131]
[147.22341919 430.71234131]
[147.22341919 445.71234131]
[147.22341919 460.71234131]
[147.22341919 475.71234131]
[147.22341919 490.71234131]
[161.76330566 494.77365112]
[174.66767883 502.60815430]
[184.97895813 513.63446045]
[191.93199158 527.03442383]
[195.01078796 541.81359863]
[193.98689270 556.87524414]
[188.93629456 571.10174561]
[180.23376465 583.43743896]
[168.52510071 592.96685791]
[154.67916870 598.98291016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 120]
[22 119]
[23 118]
[24 117]
[25 116]
[26 115]
[27 114]
[31 109]
[32 108]
[33 107]
[45 106]
[46 105]
[47 104]
[48 103]
[49 66]
[50 65]
[51 64]
[52 63]
[54 62]
[55 61]
[56 60]
[67 89]
[68 88]
[69 87]
[70 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
