%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCCCAUACGGGGGGGGGGCCCGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACxxxxxxxxxxAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUCCCCCCCCCCUAUCCCCAUAC\
) } def
/len { sequence length } bind def

/coor [
[-13.82376289 240.32780457]
[-13.34852219 225.33532715]
[-10.82881069 210.54847717]
[-6.31191254 196.24472046]
[0.11741349 182.69245911]
[8.33852100 170.14599609]
[18.19713974 158.84080505]
[29.50827217 148.98898315]
[42.05966568 140.77542114]
[55.61579132 134.35424805]
[69.91934967 129.84666443]
[81.03541565 119.77526093]
[66.45166016 123.28442383]
[51.86791229 126.79359436]
[37.28416443 130.30276489]
[22.70041466 133.81193542]
[8.11666584 137.32109070]
[-6.17746401 141.86837769]
[-20.10818100 147.43032837]
[-34.03889465 152.99226379]
[-47.96961212 158.55419922]
[-47.78445816 173.73083496]
[-53.09790039 187.94813538]
[-63.19134521 199.28334045]
[-76.69972992 206.20344543]
[-91.79616547 207.77256775]
[-106.43897247 203.77850342]
[-118.64784241 194.76141357]
[-126.77161407 181.94078064]
[-129.71162415 167.05049133]
[-127.07025909 152.10432434]
[-119.20473480 139.12365723]
[-107.17880249 129.86398315]
[-92.61887360 125.57761383]
[-77.49405670 126.84425354]
[-63.84986115 133.49258423]
[-53.53155136 144.62347412]
[-39.60083389 139.06153870]
[-25.67011833 133.49960327]
[-11.73940086 127.93766785]
[-25.37100792 121.67832947]
[-31.94562531 108.19596100]
[-28.48353958 93.60095978]
[-16.55382156 84.50800323]
[-1.56319237 85.03816223]
[9.69437027 94.95114136]
[12.11677265 109.75424957]
[4.60749865 122.73734283]
[19.19124794 119.22817993]
[33.77499771 115.71900940]
[48.35874557 112.20984650]
[62.94249725 108.70067596]
[77.52624512 105.19151306]
[82.07353210 90.89737701]
[72.19783020 79.60710144]
[62.32212448 68.31681824]
[46.47508240 65.81664276]
[38.67492676 51.79747391]
[44.90526581 37.01361847]
[60.38671875 32.80598450]
[73.24324036 42.40230942]
[73.61240387 58.44111252]
[83.48811340 69.73139191]
[93.36381531 81.02167511]
[100.86341858 81.09867096]
[97.60951996 66.45585632]
[94.35562134 51.81303406]
[91.10172272 37.17021561]
[87.84782410 22.52739716]
[84.59392548 7.88457775]
[81.34002686 -6.75824070]
[72.53858948 -18.90462685]
[68.69631958 -33.40417480]
[70.32775116 -48.31519318]
[77.21441650 -61.64087677]
[88.43409729 -71.59672546]
[102.48429871 -76.84950256]
[117.48351288 -76.69579315]
[131.42312622 -71.15618134]
[142.43641663 -60.97249603]
[149.04853821 -47.50848007]
[150.37405396 -32.56716156]
[146.23544312 -18.14939690]
[137.18577576 -6.18487215]
[133.63191223 8.38805103]
[130.07806396 22.96097565]
[126.52420044 37.53389740]
[122.97034454 52.10682297]
[119.41648865 66.67974854]
[115.86263275 81.25267029]
[123.36223602 81.32966614]
[133.46766663 70.24453735]
[136.44552612 54.11801910]
[151.98880005 48.88940430]
[164.10792542 59.93743896]
[160.33576965 75.89685059]
[144.55281067 80.34996796]
[134.44737244 91.43510437]
[136.94003296 98.50875854]
[151.08734131 93.52343750]
[165.23466492 88.53811646]
[179.38197327 83.55279541]
[193.52929688 78.56747437]
[207.67660522 73.58215332]
[219.59097290 64.46908569]
[231.93974304 72.98424530]
[227.65730286 87.35994720]
[212.66194153 87.72946930]
[198.51461792 92.71479034]
[184.36729431 97.70011139]
[170.21998596 102.68543243]
[156.07266235 107.67075348]
[141.92535400 112.65607452]
[144.41801453 119.72973633]
[159.24049377 122.03060913]
[174.06297302 124.33148193]
[189.15093994 117.90610504]
[202.09509277 127.97492218]
[199.57958984 144.17999268]
[184.19218445 149.85093689]
[171.76210022 139.15396118]
[156.93962097 136.85308838]
[142.11714172 134.55221558]
[154.02198792 143.67770386]
[166.13099670 152.53050232]
[176.91651917 162.95510864]
[186.17619324 174.75588989]
[193.73623657 187.71142578]
[199.45480347 201.57858276]
[203.22456360 216.09713745]
[204.97480774 230.99468994]
[204.67266846 245.99163818]
[202.32380676 260.80661011]
[197.97233582 275.16156006]
[191.69987488 288.78710938]
[183.62414551 301.42764282]
[173.89669800 312.84588623]
[162.70004272 322.82763672]
[150.24429321 331.18551636]
[136.76319885 337.76275635]
[122.50971985 342.43588257]
[107.75131989 345.11724854]
[92.76494598 345.75653076]
[77.83181763 344.34167480]
[63.23216248 340.89932251]
[49.23993301 335.49398804]
[36.11769867 328.22714233]
[24.11169815 319.23513794]
[13.44722462 308.68673706]
[4.32439852 296.77984619]
[-3.08559155 283.73791504]
[-8.64369583 269.80566406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 53]
[13 52]
[14 51]
[15 50]
[16 49]
[17 48]
[18 40]
[19 39]
[20 38]
[21 37]
[54 64]
[55 63]
[56 62]
[91 98]
[92 97]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
