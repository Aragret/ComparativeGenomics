%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCACAGCGGGGGGGGGGGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCxxxxxxxxxxCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUCCCCCCCCCCUCAUCACAAC\
) } def
/len { sequence length } bind def

/coor [
[46.58427048 564.75079346]
[32.73833084 558.73474121]
[21.02966881 549.20532227]
[12.32714462 536.86962891]
[7.27654266 522.64312744]
[6.25265169 507.58145142]
[9.33145046 492.80230713]
[16.28447151 479.40237427]
[26.59575653 468.37603760]
[39.50013733 460.54153442]
[54.04002380 456.48022461]
[54.04002380 441.48022461]
[54.04002380 426.48022461]
[54.04002380 411.48022461]
[54.04002380 396.48022461]
[54.04002380 381.48022461]
[54.04002380 366.48022461]
[54.04002380 351.48022461]
[54.04002380 336.48022461]
[54.04002380 321.48022461]
[41.18162155 313.75613403]
[27.93903732 320.80126953]
[24.86853981 336.13442993]
[12.62819290 345.86624146]
[-3.00248647 345.40161133]
[-14.64316940 334.95993042]
[-16.79748154 319.47146606]
[-8.44822311 306.24935913]
[6.46234274 301.53671265]
[20.89390182 307.55868530]
[34.13648605 300.51354980]
[34.81065750 280.56393433]
[46.37916946 265.79766846]
[63.27762222 261.03662109]
[66.37594604 246.36010742]
[69.47426605 231.68357849]
[72.57258606 217.00704956]
[62.50199890 228.12385559]
[47.60695267 226.35250854]
[40.42441177 213.18394470]
[46.99982071 199.70196533]
[61.79882431 197.25418091]
[47.78211212 191.91267395]
[33.76539993 186.57115173]
[17.66918373 189.70864868]
[7.10950518 177.16172791]
[12.94925499 161.83758545]
[29.18099976 159.50039673]
[39.10691071 172.55444336]
[53.12362289 177.89595032]
[67.14033508 183.23747253]
[81.21186066 178.04205322]
[88.39436340 164.87347412]
[95.57687378 151.70489502]
[102.75938416 138.53630066]
[64.86663818 119.49432373]
[66.26481628 75.44780731]
[63.47248840 60.70999908]
[60.68016434 45.97219467]
[57.88784027 31.23438835]
[42.84606934 29.95073700]
[28.70882034 24.65538597]
[16.52516747 15.74128723]
[7.19921780 3.86992431]
[1.42302096 -10.07776833]
[-0.37479156 -25.06677818]
[1.93918967 -39.98482513]
[8.19325161 -53.72488403]
[17.92330170 -65.26735687]
[30.40730667 -73.75571442]
[44.71886826 -78.56006622]
[59.79597473 -79.32389069]
[74.51980591 -75.99051666]
[87.79775238 -68.80729675]
[98.64450836 -58.30726624]
[106.25516510 -45.26961136]
[110.06496429 -30.66180611]
[109.79119873 -15.56784630]
[105.45417023 -1.10780418]
[97.37573242 11.64528847]
[86.15534973 21.74506760]
[72.62564850 28.44206238]
[75.41796875 43.17987061]
[78.21029663 57.91767502]
[81.00261688 72.65547943]
[88.03837585 75.25318909]
[93.23402405 61.18175507]
[107.30537415 66.37763977]
[102.10990143 80.44860077]
[109.14566040 83.04631042]
[120.84528351 73.65914917]
[132.54490662 64.27198792]
[144.24452209 54.88482666]
[155.94415283 45.49766541]
[167.64376831 36.11050415]
[176.21403503 21.48221016]
[192.64314270 25.66802788]
[193.16893005 42.61381912]
[177.03094482 47.81012726]
[165.33131409 57.19728851]
[153.63168335 66.58444977]
[141.93206787 75.97161102]
[130.23243713 85.35877228]
[118.53282166 94.74593353]
[121.05719757 101.80833435]
[126.10595703 115.93314362]
[128.63032532 122.99554443]
[143.62951660 122.83950806]
[158.62870789 122.68347168]
[168.41473389 110.48642731]
[183.76136780 107.48400116]
[197.42242432 115.09384918]
[202.94755554 129.72282410]
[197.72795105 144.46357727]
[184.22817993 152.35597229]
[168.82238770 149.67347717]
[158.78474426 137.68266296]
[143.78555298 137.83869934]
[128.78636169 137.99473572]
[115.92796326 145.71881104]
[108.74546051 158.88739014]
[101.56295013 172.05598450]
[94.38043976 185.22456360]
[87.24911499 220.10537720]
[84.15079498 234.78190613]
[81.05246735 249.45843506]
[77.95414734 264.13494873]
[91.17647552 275.80477905]
[95.02136230 293.95553589]
[86.90728760 311.65600586]
[69.04002380 321.48022461]
[69.04002380 336.48022461]
[69.04002380 351.48022461]
[69.04002380 366.48022461]
[69.04002380 381.48022461]
[69.04002380 396.48022461]
[69.04002380 411.48022461]
[69.04002380 426.48022461]
[69.04002380 441.48022461]
[69.04002380 456.48022461]
[83.57991028 460.54153442]
[96.48429108 468.37603760]
[106.79557800 479.40237427]
[113.74859619 492.80230713]
[116.82740021 507.58145142]
[115.80350494 522.64312744]
[110.75290680 536.86962891]
[102.05037689 549.20532227]
[90.34172058 558.73474121]
[76.49578094 564.75079346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 31]
[22 30]
[34 127]
[35 126]
[36 125]
[37 124]
[42 51]
[43 50]
[44 49]
[52 123]
[53 122]
[54 121]
[55 120]
[57 85]
[58 84]
[59 83]
[60 82]
[90 104]
[91 103]
[92 102]
[93 101]
[94 100]
[95 99]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
