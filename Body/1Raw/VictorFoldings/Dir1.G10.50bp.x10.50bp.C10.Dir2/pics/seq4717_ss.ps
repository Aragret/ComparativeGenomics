%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGCACUGAUUUGGGGGGGGGGUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCUxxxxxxxxxxAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCACCCCCCCCCCUCGCACUAAUUU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 421.24514771]
[70.87159729 416.09014893]
[58.28185654 407.80795288]
[47.94191742 396.84515381]
[40.40940475 383.79302979]
[36.09054184 369.35543823]
[35.21823120 354.31097412]
[37.83952332 339.47097778]
[43.81304932 325.63574219]
[52.81666565 313.55139160]
[64.36482239 303.86962891]
[77.83473969 297.11254883]
[92.50000000 293.64456177]
[92.50000000 278.64456177]
[92.50000000 263.64456177]
[92.50000000 248.64457703]
[92.50000000 233.64457703]
[92.50000000 218.64457703]
[92.50000000 203.64457703]
[92.50000000 188.64457703]
[92.50000000 173.64457703]
[92.50000000 158.64457703]
[92.50000000 143.64457703]
[81.19208527 140.09190369]
[71.23154449 133.66711426]
[63.33193970 124.83046722]
[58.05917358 114.21499634]
[55.79099274 102.58117676]
[56.68988037 90.76245117]
[60.69144058 79.60549164]
[67.50901031 69.90956116]
[76.65419006 62.36927032]
[71.01943207 48.46784592]
[65.38467407 34.56642532]
[59.74991989 20.66500473]
[52.20608139 7.70003271]
[42.90475845 -4.06794834]
[33.60343552 -15.83592892]
[24.30210876 -27.60391045]
[13.85796070 -38.37051392]
[2.37815833 -48.02526093]
[-9.10164452 -57.68000793]
[-20.58144569 -67.33475494]
[-32.53551865 -76.39566803]
[-44.93317795 -84.83948517]
[-57.33083725 -93.28330231]
[-69.72849274 -101.72711945]
[-82.12615204 -110.17094421]
[-95.92578125 -103.42810822]
[-111.24691010 -104.50446320]
[-123.96823120 -113.11048126]
[-130.66778564 -126.93117523]
[-129.54341125 -142.24885559]
[-120.89756012 -154.94314575]
[-107.05593109 -161.59933472]
[-91.74184418 -160.42695618]
[-79.07472229 -151.74134827]
[-72.46195221 -137.87893677]
[-73.68233490 -122.56860352]
[-61.28467560 -114.12477875]
[-48.88701630 -105.68096161]
[-36.48935699 -97.23714447]
[-24.09170151 -88.79332733]
[-23.94121170 -103.79257202]
[-12.24954510 -113.18963623]
[2.43107128 -110.11076355]
[9.36205101 -96.80807495]
[3.47351670 -83.01222992]
[-10.92669964 -78.81455994]
[0.55310261 -69.15981293]
[12.03290462 -59.50506210]
[23.51270676 -49.85031509]
[20.50500679 -64.54567719]
[25.12058830 -78.81790161]
[36.16363907 -88.96931458]
[50.77309799 -92.36985016]
[65.16391754 -88.13850403]
[75.60769653 -77.37154388]
[79.39862823 -62.85848618]
[75.55456543 -48.35941315]
[65.07141876 -37.63077164]
[50.66519547 -33.45216370]
[36.07009125 -36.90523529]
[45.37141418 -25.13725281]
[54.67273712 -13.36927223]
[63.97406387 -1.60129154]
[71.47406006 -1.60129154]
[86.47406006 -1.60129154]
[93.97406006 -1.60129154]
[103.27538300 -13.36927223]
[112.57671356 -25.13725281]
[112.14685822 -41.17454529]
[124.50964355 -51.39908600]
[140.18138123 -47.96747589]
[147.14007568 -33.51215744]
[140.04759216 -19.12201309]
[124.34468842 -15.83592892]
[115.04336548 -4.06794834]
[105.74204254 7.70003271]
[89.42126465 16.02351570]
[73.65134430 15.03024864]
[79.28610229 28.93166924]
[84.92085266 42.83309174]
[90.55561066 56.73451233]
[103.52453613 55.85618591]
[116.18979645 58.78120041]
[127.46017456 65.25755310]
[136.36463928 74.72724152]
[142.13598633 86.37438965]
[144.27699280 99.19548798]
[159.10401917 101.46690369]
[173.93103027 103.73831940]
[188.75805664 106.00973511]
[203.58508301 108.28115845]
[218.41210938 110.55257416]
[228.54455566 98.91912079]
[243.36439514 94.63240051]
[258.14266968 99.06028748]
[268.16369629 110.78985596]
[270.22976685 126.07823944]
[263.68167114 140.04698181]
[250.60881042 148.23869324]
[235.18273926 148.03944397]
[222.32583618 139.51280212]
[216.14070129 125.37959290]
[201.31367493 123.10817719]
[186.48664856 120.83676147]
[171.65962219 118.56534576]
[156.83259583 116.29393005]
[142.00556946 114.02251434]
[128.84556580 133.60107422]
[107.50000000 143.64457703]
[107.50000000 158.64457703]
[107.50000000 173.64457703]
[107.50000000 188.64457703]
[107.50000000 203.64457703]
[107.50000000 218.64457703]
[107.50000000 233.64457703]
[107.50000000 248.64457703]
[107.50000000 263.64456177]
[107.50000000 278.64456177]
[107.50000000 293.64456177]
[122.16526031 297.11254883]
[135.63517761 303.86962891]
[147.18333435 313.55139160]
[156.18695068 325.63574219]
[162.16047668 339.47097778]
[164.78176880 354.31097412]
[163.90945435 369.35543823]
[159.59059143 383.79302979]
[152.05809021 396.84515381]
[141.71813965 407.80795288]
[129.12840271 416.09014893]
[114.96779633 421.24514771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[32 104]
[33 103]
[34 102]
[35 101]
[36 86]
[37 85]
[38 84]
[39 83]
[40 72]
[41 71]
[42 70]
[43 69]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[89 99]
[90 98]
[91 97]
[110 130]
[111 129]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
