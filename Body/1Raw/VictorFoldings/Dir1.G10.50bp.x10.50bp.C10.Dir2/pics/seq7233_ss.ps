%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAAACAUCCGGGGGGGGGGUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUxxxxxxxxxxCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCCCCCCCCCCCUGAAUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[76.22921753 386.66577148]
[61.73952866 382.45730591]
[48.83329773 374.64117432]
[38.39049911 363.75036621]
[31.12313271 350.52734375]
[27.52670670 335.87374878]
[27.84642792 320.78863525]
[32.06049728 306.30056763]
[39.88159561 293.39736938]
[50.77646255 282.95877075]
[64.00227356 275.69650269]
[78.65726471 272.10574341]
[78.96932220 257.10900879]
[79.28137970 242.11224365]
[79.59343719 227.11549377]
[79.90548706 212.11872864]
[80.21754456 197.12197876]
[80.52960205 182.12522888]
[80.84165955 167.12847900]
[81.15371704 152.13171387]
[71.89025879 163.92953491]
[58.25827026 170.18803406]
[43.27302170 169.52291870]
[30.24911499 162.08128357]
[22.06731606 149.50917053]
[20.53736115 134.58740234]
[25.99766541 120.61653137]
[37.24045944 110.68679810]
[51.77893829 106.99456787]
[66.39733124 110.35651398]
[77.86217499 120.02902222]
[83.63787079 133.87457275]
[87.34402466 119.33963013]
[91.05018616 104.80469513]
[89.82890320 96.78019714]
[94.98759460 90.00751495]
[98.99533844 75.55282593]
[103.00307465 61.09814072]
[97.33124542 49.46696854]
[101.01279449 37.48093033]
[111.53957367 31.43988419]
[115.84716034 17.07170105]
[120.15474701 2.70351648]
[123.86090851 -11.83141994]
[126.95922852 -26.50794601]
[130.05755615 -41.18447113]
[133.15586853 -55.86099625]
[118.81735229 -60.30301666]
[104.94986725 -66.04909515]
[91.67172241 -73.05020905]
[79.09620667 -81.24661255]
[67.33061981 -90.56838989]
[56.47533417 -100.93600464]
[46.62297058 -112.26100159]
[37.85758591 -124.44676208]
[30.25396538 -137.38931274]
[23.87698364 -150.97822571]
[18.78104401 -165.09757996]
[15.00962639 -179.62689209]
[12.59490776 -194.44221497]
[11.55749035 -209.41714478]
[11.90622520 -224.42391968]
[13.63813591 -239.33448792]
[16.73844719 -254.02165222]
[21.18070793 -268.36007690]
[26.92701721 -282.22747803]
[33.92834854 -295.50552368]
[42.12496567 -308.08087158]
[51.44694138 -319.84631348]
[61.81473541 -330.70144653]
[73.13990021 -340.55361938]
[85.32579803 -349.31878662]
[98.26847839 -356.92218018]
[111.85750580 -363.29895020]
[125.97693634 -368.39465332]
[140.50631714 -372.16583252]
[155.32168579 -374.58029175]
[170.29663086 -375.61746216]
[185.30339050 -375.26849365]
[200.21392822 -373.53631592]
[214.90103149 -370.43576050]
[229.23941040 -365.99325562]
[243.10670471 -360.24673462]
[256.38461304 -353.24517822]
[268.95983887 -345.04833984]
[280.72512817 -335.72616577]
[291.58007812 -325.35821533]
[301.43206787 -314.03286743]
[310.19705200 -301.84683228]
[317.80023193 -288.90402222]
[324.17675781 -275.31488037]
[329.27221680 -261.19537354]
[333.04315186 -246.66592407]
[335.45739746 -231.85052490]
[336.49429321 -216.87556458]
[336.14508057 -201.86880493]
[334.41265869 -186.95829773]
[331.31185913 -172.27124023]
[326.86911011 -157.93293762]
[321.12234497 -144.06575012]
[314.12057495 -130.78794861]
[305.92355347 -118.21284485]
[296.60116577 -106.44772339]
[286.23300171 -95.59295654]
[274.90753174 -85.74115753]
[262.72134399 -76.97638702]
[249.77839661 -69.37341309]
[236.18916321 -62.99710464]
[222.06956482 -57.90187073]
[207.54005432 -54.13117981]
[192.72460938 -51.71720123]
[177.74963379 -50.68053436]
[162.74288940 -51.03001785]
[147.83239746 -52.76267624]
[144.73406982 -38.08614731]
[141.63575745 -23.40962410]
[138.53742981 -8.73309803]
[140.01615906 -6.27938604]
[140.57952881 -3.07367373]
[139.92904663 0.52615285]
[137.90576172 4.05848551]
[134.52293396 7.01110125]
[130.21534729 21.37928581]
[125.90776062 35.74747086]
[130.88400269 52.54737854]
[117.45776367 65.10588074]
[113.45002747 79.56056976]
[109.44228363 94.01525879]
[105.58512878 108.51085663]
[101.87896729 123.04579163]
[98.17280579 137.58073425]
[96.15046692 152.44377136]
[95.83840942 167.44052124]
[95.52635956 182.43728638]
[95.21430206 197.43403625]
[94.90224457 212.43078613]
[94.59018707 227.42753601]
[94.27812958 242.42430115]
[93.96607208 257.42105103]
[93.65402222 272.41781616]
[108.14695740 276.61508179]
[121.05921936 284.42123413]
[131.51042175 295.30401611]
[138.78799438 308.52139282]
[142.39573669 323.17221069]
[142.08766174 338.25756836]
[137.88478088 352.74887085]
[130.07365417 365.65811157]
[119.18685150 376.10513306]
[105.96665192 383.37759399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[32 131]
[33 130]
[34 129]
[36 128]
[37 127]
[38 126]
[41 124]
[42 123]
[43 122]
[44 117]
[45 116]
[46 115]
[47 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
