%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUGAACUAUCGGGGGGGGGGCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUxxxxxxxxxxCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCCCCUCAACUAUC\
) } def
/len { sequence length } bind def

/coor [
[68.78157043 377.79132080]
[56.22334671 369.44015503]
[46.13712311 358.22772217]
[39.15692902 344.85882568]
[35.72154617 330.17382812]
[36.04692459 315.09585571]
[40.11260605 300.57272339]
[47.66302872 287.51739502]
[58.22355652 276.75048828]
[71.13034821 268.94885254]
[85.57208252 264.60290527]
[84.94810486 249.61590576]
[84.32412720 234.62889099]
[83.70014954 219.64186096]
[83.07617188 204.65484619]
[82.45219421 189.66783142]
[81.82821655 174.68081665]
[81.20423889 159.69380188]
[80.58026123 144.70678711]
[79.95628357 129.71977234]
[76.31111145 104.74931335]
[89.57816315 93.14636230]
[81.58824158 80.45143127]
[68.29170227 87.41146088]
[54.48421097 93.29306793]
[40.25307083 98.05906677]
[25.68825722 101.67932892]
[10.88185310 104.13095856]
[-4.07252884 105.39846039]
[-19.08034134 105.47382355]
[-34.04669571 104.35655975]
[-48.87697220 102.05374146]
[-63.47740936 98.57993317]
[-77.75569153 93.95708466]
[-91.62155151 88.21443176]
[-104.98731995 81.38828278]
[-117.76849365 73.52178955]
[-129.88426208 64.66469574]
[-141.25804138 54.87298965]
[-151.81788635 44.20858383]
[-161.49707031 32.73890305]
[-170.23437500 20.53646278]
[-177.97457886 7.67841291]
[-184.66871643 -5.75395536]
[-190.27449036 -19.67571449]
[-194.75645447 -33.99884796]
[-198.08625793 -48.63279724]
[-200.24285889 -63.48504257]
[-201.21261597 -78.46167755]
[-200.98941040 -93.46801758]
[-199.57464600 -108.40918732]
[-196.97727966 -123.19071960]
[-193.21369934 -137.71916199]
[-188.30773926 -151.90266418]
[-182.29039001 -165.65153503]
[-175.19970703 -178.87886047]
[-167.08052063 -191.50102234]
[-157.98414612 -203.43820190]
[-147.96812439 -214.61494446]
[-137.09576416 -224.96055603]
[-125.43580627 -234.40965271]
[-113.06197357 -242.90249634]
[-100.05249023 -250.38537598]
[-86.48961639 -256.81097412]
[-72.45909119 -262.13870239]
[-58.04963684 -266.33483887]
[-43.35234070 -269.37289429]
[-28.46013641 -271.23361206]
[-13.46717072 -271.90524292]
[1.53176010 -271.38357544]
[16.44182777 -269.67184448]
[31.16876793 -266.78094482]
[45.61946487 -262.72909546]
[59.70256042 -257.54196167]
[73.32901764 -251.25228882]
[86.41267395 -243.89988708]
[98.87081909 -235.53120422]
[110.62468719 -226.19917297]
[121.59995270 -215.96279907]
[131.72724915 -204.88677979]
[140.94252014 -193.04116821]
[149.18753052 -180.50082397]
[156.41012573 -167.34506226]
[162.56466675 -153.65704346]
[167.61222839 -139.52331543]
[171.52088928 -125.03324127]
[174.26594543 -110.27841949]
[175.83004761 -95.35214233]
[176.20330811 -80.34878540]
[175.38336182 -65.36320496]
[173.37538147 -50.49013519]
[170.19207764 -35.82361984]
[165.85357666 -21.45638275]
[160.38729858 -7.47926188]
[153.82781982 6.01937532]
[146.21658325 18.95418358]
[137.60173035 31.24338722]
[128.03773499 42.80928421]
[117.58505249 53.57875443]
[106.30976868 63.48370361]
[94.28317261 72.46151733]
[102.27308655 85.15644836]
[115.44167328 92.33895111]
[130.44085693 92.18291473]
[145.44004822 92.02687836]
[160.43923950 91.87084198]
[175.43598938 91.55879211]
[190.42868042 91.09074402]
[205.42138672 90.62270355]
[216.05853271 78.93396759]
[231.84902954 78.27384186]
[243.42465210 89.03398132]
[243.91778564 104.83057404]
[233.03587341 116.29178619]
[217.23495483 116.61788177]
[205.88941956 105.61540222]
[190.89672852 106.08344269]
[175.90403748 106.55148315]
[169.27371216 109.92559052]
[160.59527588 106.87003326]
[145.59608459 107.02606964]
[130.59689331 107.18210602]
[115.59770966 107.33814240]
[110.43410492 112.77755737]
[123.97175598 119.23759460]
[122.01123810 134.10891724]
[107.26192474 136.83982849]
[100.10690308 123.65637970]
[94.94329834 129.09579468]
[95.56727600 144.08280945]
[96.19125366 159.06982422]
[96.81523132 174.05683899]
[97.43920898 189.04385376]
[98.06318665 204.03086853]
[98.68716431 219.01788330]
[99.31114197 234.00491333]
[99.93511963 248.99192810]
[100.55909729 263.97894287]
[115.31210327 267.10937500]
[128.82273865 273.81112671]
[140.24171448 283.66293335]
[148.85122681 296.04547119]
[154.11007690 310.18035889]
[155.68768311 325.17907715]
[153.48487854 340.09881592]
[147.64013672 354.00167847]
[138.52084351 366.01373291]
[126.70027924 375.37991333]
[112.92147064 381.51141357]
[98.05056763 384.02279663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 102]
[23 101]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
