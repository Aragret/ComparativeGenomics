%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGCUACUUCCCGGGGGGGGGGCUAUCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUxxxxxxxxxxACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCCCCCCCCCCCGCUACCUCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 387.72866821]
[71.01555634 382.17565918]
[58.81560135 373.30932617]
[49.20452881 361.68701172]
[42.78650284 348.03930664]
[39.96496582 333.22412109]
[40.91728210 318.17276001]
[45.58358765 303.83132935]
[53.67055511 291.10137939]
[64.66983032 280.78311157]
[77.88998413 273.52511597]
[92.50000000 269.78369141]
[92.50000000 254.78369141]
[92.50000000 239.78369141]
[92.50000000 224.78369141]
[92.50000000 209.78369141]
[92.50000000 194.78369141]
[92.50000000 179.78369141]
[92.50000000 164.78369141]
[92.50000000 149.78369141]
[92.50000000 134.78369141]
[79.97264862 129.41191101]
[70.38403320 119.72434235]
[65.14114380 107.14250183]
[50.14193726 106.98850250]
[35.14272690 106.83450317]
[20.14351654 106.68051147]
[5.14430714 106.52651215]
[-3.53074479 109.58253479]
[-10.16045952 106.21221161]
[-25.15334511 105.75028229]
[-40.14623260 105.28836060]
[-46.72785187 119.02160645]
[-58.33048248 128.88562012]
[-72.94390106 133.17140198]
[-88.03623962 131.13641357]
[-100.99266052 123.13323212]
[-109.56838989 110.54844666]
[-112.27762604 95.56245422]
[-108.65097809 80.77166748]
[-99.31678772 68.73868561]
[-85.89225006 61.54828644]
[-70.70326233 60.44625473]
[-56.38140106 65.62351990]
[-45.40801239 76.18309784]
[-39.68430710 90.29547119]
[-24.69141960 90.75740051]
[-9.69853401 91.21932220]
[5.29830408 91.52730560]
[20.29751396 91.68129730]
[35.29672241 91.83529663]
[50.29593277 91.98929596]
[65.29514313 92.14328766]
[71.95154572 78.10389709]
[83.95583344 68.23933411]
[99.01918793 64.43045044]
[101.77542877 49.68585205]
[87.48403931 45.06151962]
[73.90134430 38.64756393]
[61.25039673 30.54930496]
[49.73892975 20.89972115]
[39.55597687 9.85727024]
[30.86874199 -2.39672208]
[23.81988716 -15.66103363]
[18.52515411 -29.71785164]
[15.07149315 -44.33635330]
[13.51561165 -59.27648544]
[13.88306141 -74.29291534]
[16.16780663 -89.13906860]
[20.33233261 -103.57115936]
[26.30825043 -117.35218811]
[33.99743271 -130.25585938]
[43.27361298 -142.07028198]
[53.98447418 -152.60147095]
[65.95412445 -161.67648315]
[78.98602295 -169.14628601]
[92.86616516 -174.88822937]
[107.36663055 -178.80802917]
[122.24931335 -180.84130859]
[137.26980591 -180.95469666]
[152.18148804 -179.14631653]
[166.73947144 -175.44586182]
[180.70471191 -169.91410828]
[193.84790039 -162.64187622]
[205.95318604 -153.74859619]
[216.82179260 -143.38031006]
[226.27528381 -131.70726013]
[234.15837097 -118.92113495]
[240.34165955 -105.23188782]
[244.72357178 -90.86431885]
[247.23217773 -76.05434418]
[247.82627869 -61.04516983]
[246.49610901 -46.08325195]
[243.26351929 -31.41427994]
[238.18159485 -17.27913475]
[231.33378601 -3.90992451]
[222.83251953 8.47381401]
[212.81742859 19.66872978]
[201.45294189 29.49099159]
[188.92568970 37.77930832]
[175.44136047 44.39757919]
[161.22140503 49.23712540]
[146.49932861 52.21847916]
[131.51686096 53.29268265]
[116.52002716 52.44209290]
[113.76378632 67.18669128]
[125.09076691 74.76890564]
[132.73603821 86.05342865]
[135.57774353 99.38441467]
[150.29327393 102.29188538]
[165.00878906 105.19935608]
[179.72431946 108.10682678]
[188.12413025 95.43751526]
[200.73567200 86.95121765]
[215.63578796 83.94202423]
[230.55229187 86.86882782]
[243.21055603 95.28530121]
[251.68025208 107.90799713]
[254.66984558 122.81204987]
[251.72341919 137.72470093]
[243.29029846 150.37187195]
[230.65647888 158.82496643]
[215.74850464 161.79493713]
[200.83973694 158.82890320]
[188.20367432 150.37916565]
[179.76721191 137.73422241]
[176.81684875 122.82234955]
[162.10131836 119.91487885]
[147.38580322 117.00740814]
[132.67027283 114.09993744]
[122.59130859 127.49160004]
[107.50000000 134.78369141]
[107.50000000 149.78369141]
[107.50000000 164.78369141]
[107.50000000 179.78369141]
[107.50000000 194.78369141]
[107.50000000 209.78369141]
[107.50000000 224.78369141]
[107.50000000 239.78369141]
[107.50000000 254.78369141]
[107.50000000 269.78369141]
[122.11001587 273.52511597]
[135.33016968 280.78311157]
[146.32945251 291.10137939]
[154.41641235 303.83132935]
[159.08271790 318.17276001]
[160.03503418 333.22412109]
[157.21350098 348.03930664]
[150.79547119 361.68701172]
[141.18440247 373.30932617]
[128.98443604 382.17565918]
[114.96250153 387.72866821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[30 48]
[31 47]
[32 46]
[56 106]
[57 105]
[109 130]
[110 129]
[111 128]
[112 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
