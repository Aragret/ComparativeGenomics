%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUAUGAAAGGGGGGGGGGAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACxxxxxxxxxxAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUACCCCCCCCCCUCAAUAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 403.28982544]
[71.01555634 397.73681641]
[58.81560135 388.87048340]
[49.20452881 377.24816895]
[42.78650284 363.60046387]
[39.96496582 348.78527832]
[40.91728210 333.73391724]
[45.58358765 319.39248657]
[53.67055511 306.66253662]
[64.66983032 296.34423828]
[77.88998413 289.08627319]
[92.50000000 285.34484863]
[92.50000000 270.34484863]
[92.50000000 255.34484863]
[92.50000000 240.34484863]
[92.50000000 225.34484863]
[92.50000000 210.34484863]
[92.50000000 195.34484863]
[92.50000000 180.34484863]
[92.50000000 165.34484863]
[92.50000000 150.34484863]
[80.71808624 147.10690308]
[70.04729462 141.15444946]
[61.10252762 132.83045959]
[54.39921570 122.61463165]
[50.32364655 111.09563446]
[35.36236572 112.17270660]
[20.40108681 113.24977112]
[5.43980598 114.32684326]
[0.67930865 128.76312256]
[-9.24712849 140.27548218]
[-22.82579422 147.10835266]
[-37.98604202 148.21980286]
[-52.41604614 143.44030762]
[-63.91533279 133.49873352]
[-70.73034668 119.91109467]
[-71.82183838 104.74939728]
[-67.02338409 90.32569885]
[-57.06668854 78.83950043]
[-43.47009277 72.04236603]
[-28.30697250 70.97081757]
[-13.88959503 75.78824615]
[-2.41650414 85.76004028]
[4.36273623 99.36556244]
[19.32401657 98.28849030]
[34.28529739 97.21142578]
[49.24657822 96.13435364]
[51.75534439 83.77328491]
[57.22654724 72.40860748]
[65.32423401 62.73816681]
[75.55116272 55.35577011]
[87.27935791 50.71472549]
[99.78866577 49.10001755]
[101.93724060 34.25469208]
[104.08582306 19.40937042]
[106.23439789 4.56404781]
[108.38298035 -10.28127480]
[110.53156281 -25.12659836]
[96.97975159 -18.69631958]
[83.41186523 -25.09260178]
[79.74879456 -39.63845825]
[88.66899109 -51.69789886]
[103.64997101 -52.45301056]
[113.73740387 -41.35224533]
[117.39610291 -55.89920044]
[121.05480957 -70.44615173]
[124.71351624 -84.99311066]
[113.62357330 -74.89295197]
[99.54876709 -69.70644379]
[84.55674744 -70.19549561]
[70.84987640 -76.28826904]
[60.44176102 -87.08970642]
[54.86138153 -101.01304626]
[54.92851639 -116.01289368]
[60.63330460 -129.88572693]
[71.13769531 -140.59356689]
[84.89854431 -146.56340027]
[99.89434814 -146.91822815]
[113.92216492 -141.60594177]
[124.92125702 -131.40692139]
[131.27581787 -117.81944275]
[132.05244446 -102.84025574]
[139.68540955 -115.75295258]
[141.37634277 -124.79377747]
[147.60998535 -128.85011292]
[155.50646973 -141.60337830]
[163.40295410 -154.35662842]
[161.14434814 -170.23989868]
[172.25852966 -181.80944824]
[188.21963501 -180.19012451]
[196.78369141 -166.62411499]
[191.38107300 -151.51811218]
[176.15620422 -146.46014404]
[168.25971985 -133.70689392]
[160.36323547 -120.95363617]
[152.59809875 -108.11997986]
[144.96513367 -95.20728302]
[139.26046753 -81.33440399]
[135.60176086 -66.78745270]
[131.94305420 -52.24049377]
[128.28434753 -37.69354248]
[125.37688446 -22.97801781]
[123.22830200 -8.13269615]
[121.07972717 6.71262693]
[118.93114471 21.55794907]
[116.78256226 36.40327072]
[114.63398743 51.24859619]
[125.57212830 55.98955536]
[135.10752869 63.14468002]
[142.71713257 72.32148743]
[147.98350525 83.01657867]
[150.61776733 94.64328003]
[150.47543335 106.56382751]
[164.90281677 110.66876984]
[179.33020020 114.77371979]
[193.75758362 118.87866211]
[204.72790527 108.12935638]
[219.60713196 104.32089233]
[234.39280701 108.47772980]
[245.10768127 119.48169708]
[248.86947632 134.37277222]
[244.66632080 149.14535522]
[233.62881470 159.82566833]
[218.72601318 163.54078674]
[203.96669006 159.29133606]
[193.32101440 148.22042847]
[189.65263367 133.30604553]
[175.22525024 129.20109558]
[160.79786682 125.09615326]
[146.37048340 120.99121094]
[130.67436218 140.61941528]
[107.50000000 150.34484863]
[107.50000000 165.34484863]
[107.50000000 180.34484863]
[107.50000000 195.34484863]
[107.50000000 210.34484863]
[107.50000000 225.34484863]
[107.50000000 240.34484863]
[107.50000000 255.34484863]
[107.50000000 270.34484863]
[107.50000000 285.34484863]
[122.11001587 289.08627319]
[135.33016968 296.34423828]
[146.32945251 306.66253662]
[154.41641235 319.39248657]
[159.08271790 333.73391724]
[160.03503418 348.78527832]
[157.21350098 363.60046387]
[150.79547119 377.24816895]
[141.18440247 388.87048340]
[128.98443604 397.73681641]
[114.96250153 403.28982544]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 47]
[27 46]
[28 45]
[29 44]
[53 107]
[54 106]
[55 105]
[56 104]
[57 103]
[58 102]
[64 101]
[65 100]
[66 99]
[67 98]
[82 97]
[83 96]
[85 95]
[86 94]
[87 93]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
