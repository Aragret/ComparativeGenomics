%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCCUCCUGGGGGGGGGGUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACxxxxxxxxxxACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUCCCCCCCCCCAUCACUCUCCU\
) } def
/len { sequence length } bind def

/coor [
[83.07627106 355.91967773]
[69.58739471 349.18814087]
[58.10189438 339.42358398]
[49.28752518 327.19366455]
[43.65674210 313.20947266]
[41.53691483 298.28399658]
[43.05128479 283.28500366]
[48.11180496 269.08450317]
[56.42427063 256.50805664]
[67.50540161 246.28691101]
[80.71096039 239.01527405]
[95.27318573 235.11590576]
[94.96520233 220.11907959]
[94.65722656 205.12223816]
[94.34925079 190.12539673]
[94.04127502 175.12855530]
[93.73329163 160.13171387]
[93.42531586 145.13488770]
[93.11734009 130.13804626]
[92.80936432 115.14120483]
[85.98578644 101.78311157]
[74.01552582 92.74359131]
[62.04526901 83.70407104]
[51.85069656 94.72447205]
[40.60949326 104.67504883]
[28.43337822 113.45689392]
[15.44337177 120.98274231]
[1.76857424 127.17778015]
[-12.45510292 131.98045349]
[-27.08629608 135.34300232]
[-41.97958755 137.23204041]
[-56.98696136 137.62878418]
[-71.95925903 136.52926636]
[-86.74767303 133.94444275]
[-101.20523834 129.90000916]
[-115.18824768 124.43612671]
[-128.55773926 117.60712433]
[-141.18083191 109.48086548]
[-152.93208313 100.13812256]
[-163.69468689 89.67173767]
[-173.36166382 78.18575287]
[-181.83695984 65.79430389]
[-189.03633118 52.62055588]
[-194.88822937 38.79543686]
[-199.33450317 24.45635223]
[-202.33093262 9.74581242]
[-203.84776306 -5.18997765]
[-203.86991882 -20.20257568]
[-202.39715576 -35.14277649]
[-199.44413757 -49.86209488]
[-195.04020691 -64.21423340]
[-189.22912598 -78.05656433]
[-182.06864929 -91.25149536]
[-173.62995911 -103.66789246]
[-163.99690247 -115.18235779]
[-153.26524353 -125.68045044]
[-141.54161072 -135.05783081]
[-128.94255066 -143.22129822]
[-115.59326172 -150.08972168]
[-101.62643433 -155.59483337]
[-87.18087006 -159.68191528]
[-72.40013885 -162.31036377]
[-57.43115234 -163.45404053]
[-42.42267609 -163.10159302]
[-27.52387428 -161.25651550]
[-12.88282394 -157.93713379]
[1.35496259 -153.17645264]
[15.04797935 -147.02178955]
[28.06013680 -139.53431702]
[40.26210785 -130.78842163]
[51.53262329 -120.87106323]
[61.75967026 -109.88079071]
[70.84159851 -97.92682648]
[78.68815613 -85.12799072]
[85.22134399 -71.61148071]
[90.37624359 -57.51163864]
[94.10161591 -42.96858978]
[96.36043549 -28.12688065]
[97.13025665 -13.13401604]
[96.40341949 1.86099362]
[94.18715668 16.70911789]
[90.50349426 31.26278496]
[85.38903809 45.37734985]
[78.89461517 58.91253281]
[71.08478546 71.73381042]
[83.05504608 80.77333069]
[95.02530670 89.81285095]
[102.16495514 82.76548767]
[115.15157318 82.16378021]
[129.19354248 76.88903809]
[143.23551941 71.61429596]
[157.27749634 66.33955383]
[171.31947327 61.06481552]
[185.36145020 55.79007339]
[199.40342712 50.51533127]
[213.44540405 45.24058914]
[201.27827454 36.46785736]
[200.34085083 21.49717712]
[211.31858826 11.27517509]
[226.18450928 13.27621937]
[234.06860352 26.03713989]
[229.20642090 40.22665024]
[243.71504211 36.41879272]
[258.22366333 32.61093521]
[263.73309326 18.10487175]
[276.73516846 9.63577366]
[292.23034668 10.46017742]
[304.26037598 20.26108551]
[308.19949341 35.26984787]
[302.53302002 49.71529007]
[289.43984985 58.04284286]
[273.95452881 57.05039215]
[262.03152466 47.11956024]
[247.52290344 50.92741776]
[233.01428223 54.73527527]
[218.72015381 59.28256607]
[204.67817688 64.55731201]
[190.63619995 69.83205414]
[176.59422302 75.10678864]
[162.55224609 80.38153076]
[148.51026917 85.65627289]
[134.46829224 90.93101501]
[120.42631531 96.20575714]
[135.06344604 92.92634583]
[149.01412964 98.43798828]
[157.45741272 110.83601379]
[157.47552490 125.83599854]
[149.06219482 138.25437927]
[135.12486267 143.79968262]
[120.47985077 140.55561829]
[110.18810272 129.64324951]
[107.80619812 114.83322906]
[108.11417389 129.83006287]
[108.42215729 144.82690430]
[108.73013306 159.82374573]
[109.03810883 174.82058716]
[109.34608459 189.81741333]
[109.65406799 204.81425476]
[109.96204376 219.81109619]
[110.27001953 234.80793762]
[124.98005676 238.10615540]
[138.47300720 244.82951355]
[149.96443176 254.58711243]
[158.78620911 266.81167603]
[164.42547607 280.79244995]
[166.55435181 295.71661377]
[165.04907227 310.71655273]
[159.99716187 324.92013550]
[151.69232178 337.50158691]
[140.61738586 347.72946167]
[127.41624451 355.00909424]
[112.85639191 358.91729736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 87]
[22 86]
[23 85]
[89 123]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[102 115]
[103 114]
[104 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
