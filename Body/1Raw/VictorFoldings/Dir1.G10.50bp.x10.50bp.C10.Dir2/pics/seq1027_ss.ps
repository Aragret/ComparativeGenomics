%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACGAUCAAGGGGGGGGGGAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAxxxxxxxxxxCCACACUCAACAGAAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACACCCCCCCCCCACCACGACCAA\
) } def
/len { sequence length } bind def

/coor [
[87.59269714 403.96963501]
[73.57075500 398.41662598]
[61.37079620 389.55029297]
[51.75972366 377.92800903]
[45.34169769 364.28030396]
[42.52016068 349.46511841]
[43.47247696 334.41372681]
[48.13878250 320.07229614]
[56.22574997 307.34234619]
[67.22502136 297.02407837]
[80.44518280 289.76611328]
[95.05519867 286.02465820]
[95.05519867 271.02465820]
[95.05519867 256.02465820]
[95.05519867 241.02467346]
[95.05519867 226.02467346]
[95.05519867 211.02467346]
[95.05519867 196.02467346]
[95.05519867 181.02467346]
[95.05519867 166.02467346]
[95.05519867 151.02467346]
[86.70753479 142.21678162]
[86.62134552 129.68028259]
[95.39081573 120.16713715]
[86.43384552 132.19927979]
[71.43755341 131.86592102]
[63.02410889 119.44762421]
[68.27500153 105.39671326]
[82.77069855 101.53966522]
[68.72872925 96.26492310]
[54.68674850 90.99018097]
[40.64477158 85.71543884]
[27.38704872 97.17048645]
[10.24784184 100.35408020]
[-6.07235432 94.48407745]
[-17.14347839 81.24890900]
[-20.00836945 64.32315063]
[-34.25506210 59.62934875]
[-48.50175476 54.93555069]
[-60.38869858 60.04477692]
[-72.18391418 55.79691696]
[-77.71672058 44.99644470]
[-91.86403656 40.01111984]
[-106.01135254 35.02579880]
[-122.02307129 38.56936646]
[-132.89668274 26.29351234]
[-127.44635010 10.82658386]
[-111.27890015 8.07963085]
[-101.02603149 20.87848282]
[-86.87871552 25.86380386]
[-72.73139954 30.84912682]
[-55.71247864 26.67768288]
[-43.80795288 40.68885803]
[-29.56126213 45.38265610]
[-15.31456947 50.07645798]
[-6.80024624 40.65180969]
[4.69761038 35.14637756]
[17.47164345 34.41714859]
[29.60994339 38.60891724]
[39.28221130 47.12728119]
[45.01572037 58.72264862]
[45.91951370 71.67346191]
[59.96149063 76.94820404]
[74.00346375 82.22294617]
[88.04544067 87.49768829]
[102.79003906 84.74143982]
[113.97834015 74.75034332]
[125.06346893 64.64491272]
[136.04426575 54.42620468]
[127.10906982 42.35797882]
[119.58128357 29.36519051]
[113.55559540 15.61124229]
[109.10778046 1.26910412]
[106.29376984 -13.48085785]
[105.14896393 -28.45314598]
[105.68774414 -43.45946884]
[107.90335083 -58.31110382]
[111.76790619 -72.82128143]
[117.23281860 -86.80751801]
[124.22936249 -100.09391785]
[132.66954041 -112.51338959]
[142.44721985 -123.90975189]
[153.43942261 -134.13967896]
[165.50790405 -143.07452393]
[178.50091553 -150.60192871]
[192.25505066 -156.62719727]
[206.59732056 -161.07458496]
[221.34736633 -163.88815308]
[236.31968689 -165.03251648]
[251.32600403 -164.49328613]
[266.17758179 -162.27723694]
[280.68762207 -158.41224670]
[294.67370605 -152.94691467]
[307.95989990 -145.94998169]
[320.37911987 -137.50942993]
[331.77517700 -127.73141479]
[342.00479126 -116.73889923]
[350.93927002 -104.67014313]
[358.46627808 -91.67690277]
[364.49114990 -77.92259216]
[368.93811035 -63.58019257]
[371.75122070 -48.83006287]
[372.89514160 -33.85770416]
[372.35546875 -18.85141373]
[370.13897705 -3.99990988]
[366.27352905 10.51003456]
[360.80780029 24.49594116]
[353.81045532 37.78192520]
[345.36953735 50.20089340]
[335.59118652 61.59667206]
[324.59835815 71.82594299]
[312.52932739 80.76007080]
[299.53588867 88.28668213]
[285.78137207 94.31114197]
[271.43884277 98.75766754]
[256.68862915 101.57035828]
[241.71624756 102.71382141]
[226.70996094 102.17369080]
[211.85853577 99.95675659]
[197.34870911 96.09089661]
[183.36296082 90.62473297]
[170.07717896 83.62699890]
[157.65846252 75.18569946]
[146.26298523 65.40700531]
[135.28218079 75.62571716]
[132.51104736 82.52738190]
[123.96943665 85.93864441]
[112.78113556 95.92974091]
[116.77555847 107.02346039]
[110.38765717 120.47511292]
[119.64582825 136.35960388]
[110.05519867 151.02467346]
[110.05519867 166.02467346]
[110.05519867 181.02467346]
[110.05519867 196.02467346]
[110.05519867 211.02467346]
[110.05519867 226.02467346]
[110.05519867 241.02467346]
[110.05519867 256.02465820]
[110.05519867 271.02465820]
[110.05519867 286.02465820]
[124.66520691 289.76611328]
[137.88536072 297.02407837]
[148.88464355 307.34234619]
[156.97160339 320.07229614]
[161.63790894 334.41372681]
[162.59022522 349.46511841]
[159.76869202 364.28030396]
[153.35066223 377.92800903]
[143.73959351 389.55029297]
[131.53964233 398.41662598]
[117.51769257 403.96963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 130]
[29 65]
[30 64]
[31 63]
[32 62]
[37 55]
[38 54]
[39 53]
[42 51]
[43 50]
[44 49]
[66 128]
[67 127]
[68 125]
[69 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
