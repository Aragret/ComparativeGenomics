%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCAxxxxxxxxxxUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUCCCCCCCCCCACCCCUACCA\
) } def
/len { sequence length } bind def

/coor [
[96.63051605 395.34646606]
[82.78457642 389.33044434]
[71.07592010 379.80102539]
[62.37339401 367.46536255]
[57.32279205 353.23883057]
[56.29890060 338.17715454]
[59.37769699 323.39801025]
[66.33071899 309.99807739]
[76.64200592 298.97174072]
[89.54638672 291.13723755]
[104.08627319 287.07592773]
[104.08627319 272.07592773]
[104.08627319 257.07592773]
[104.08627319 242.07591248]
[104.08627319 227.07591248]
[104.08627319 212.07591248]
[104.08627319 197.07591248]
[104.08627319 182.07591248]
[104.08627319 167.07591248]
[104.08627319 152.07591248]
[91.73470306 143.56483459]
[77.71798706 148.90634155]
[63.70127487 154.24784851]
[49.68456268 159.58937073]
[35.66784668 164.93087769]
[30.71214867 179.76243591]
[17.35536575 187.89448547]
[1.90416384 185.48733521]
[-8.34587193 173.67756653]
[-8.55498886 158.04138184]
[1.37555289 145.96171570]
[16.75685501 143.14221191]
[30.32633591 150.91416931]
[44.34304810 145.57264709]
[58.35976028 140.23114014]
[72.37647247 134.88963318]
[86.39318848 129.54811096]
[71.81724548 106.47854614]
[80.44088745 83.94424438]
[72.18859863 71.41828156]
[63.93630600 58.89232254]
[55.68401718 46.36635971]
[46.17565918 34.76501846]
[35.51403427 24.21372795]
[24.85240555 13.66243744]
[9.27581882 13.57475853]
[-1.38627899 2.72237110]
[-1.20669770 -12.12698364]
[-11.86832428 -22.67827415]
[-22.63913155 -33.11808777]
[-33.73044968 -43.21673584]
[-45.02945328 -53.08245850]
[-56.32845688 -62.94818115]
[-72.23632050 -68.81130981]
[-71.00606537 -85.72055817]
[-54.41706085 -89.21932983]
[-46.46273422 -74.24718475]
[-35.16373062 -64.38146210]
[-23.86472511 -54.51573944]
[-19.06333733 -53.94812012]
[-14.58671570 -50.31615448]
[-12.31192780 -43.99691010]
[-5.24980640 -41.65766144]
[-1.31703377 -33.33990097]
[9.34459209 -22.78861046]
[24.19127655 -23.12265205]
[35.15398788 -12.57402134]
[35.40369797 3.00081086]
[46.06532288 13.55210114]
[56.72694778 24.10339165]
[54.97451401 9.20611095]
[60.77884293 -4.62536764]
[72.63749695 -13.81080723]
[87.48090363 -15.97258377]
[101.46688843 -10.55113029]
[110.97522736 1.05022800]
[113.54471588 15.82851410]
[108.51023865 29.95841408]
[97.17496490 39.78244781]
[82.47299957 42.75769043]
[68.20997620 38.11407089]
[76.46226501 50.64002991]
[84.71455383 63.16599274]
[92.96685028 75.69195557]
[114.49223328 76.37762451]
[129.58799744 94.35305023]
[126.02753448 119.51419830]
[139.93008423 113.88224792]
[149.81552124 101.52956390]
[164.51670837 103.92214966]
[178.41926575 98.29019165]
[192.32182312 92.65823364]
[194.94525146 89.01419067]
[198.27296448 86.66954041]
[201.79621887 85.68536377]
[205.04055786 85.94657898]
[207.62176514 87.18943787]
[221.94436646 82.73262024]
[236.26695251 78.27581024]
[238.00582886 63.14649200]
[245.75360107 50.03573990]
[258.16793823 41.21506500]
[273.09796143 38.21270752]
[287.95697021 41.54884338]
[300.17053223 50.64546204]
[307.62261963 63.92652512]
[309.02206421 79.09100342]
[304.12640381 93.51156616]
[293.78387451 104.68975830]
[279.78637695 110.68888855]
[264.55902100 110.46957397]
[250.74009705 104.06981659]
[240.72377014 92.59840393]
[226.40116882 97.05522156]
[212.07858276 101.51203918]
[197.95378113 106.56079102]
[184.05122375 112.19274902]
[170.14866638 117.82470703]
[161.25762939 129.77455139]
[145.56204224 127.78479767]
[131.65948486 133.41676331]
[146.03511047 129.13407898]
[160.54762268 132.92710876]
[170.98930359 143.69610596]
[174.33273315 158.31874084]
[169.60852051 172.55537415]
[158.18638611 182.27828979]
[143.37805176 184.66845703]
[129.47695923 179.03286743]
[120.51358032 167.00549316]
[119.08627319 152.07591248]
[119.08627319 167.07591248]
[119.08627319 182.07591248]
[119.08627319 197.07591248]
[119.08627319 212.07591248]
[119.08627319 227.07591248]
[119.08627319 242.07591248]
[119.08627319 257.07592773]
[119.08627319 272.07592773]
[119.08627319 287.07592773]
[133.62615967 291.13723755]
[146.53054810 298.97174072]
[156.84182739 309.99807739]
[163.79484558 323.39801025]
[166.87364197 338.17715454]
[165.84976196 353.23883057]
[160.79914856 367.46536255]
[152.09663391 379.80102539]
[140.38796997 389.33044434]
[126.54203033 395.34646606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[39 84]
[40 83]
[41 82]
[42 81]
[43 70]
[44 69]
[45 68]
[48 65]
[49 64]
[50 62]
[51 59]
[52 58]
[53 57]
[87 121]
[88 120]
[90 118]
[91 117]
[92 116]
[97 115]
[98 114]
[99 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
