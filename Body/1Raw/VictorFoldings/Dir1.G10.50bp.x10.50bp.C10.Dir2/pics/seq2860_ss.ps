%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCACAGGGGGGGGGGGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGxxxxxxxxxxACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUACCCCCCCCCCAAACUCACAG\
) } def
/len { sequence length } bind def

/coor [
[91.49048615 358.08819580]
[78.61721039 350.18533325]
[68.49291992 338.97482300]
[61.93833542 325.36547852]
[59.48481750 310.46057129]
[61.33125305 295.46832275]
[67.32796478 281.60412598]
[76.98882294 269.99185181]
[89.53067017 261.57290649]
[103.93679810 257.02975464]
[103.62474060 242.03298950]
[103.31268311 227.03623962]
[103.00062561 212.03948975]
[102.68856812 197.04272461]
[102.37651825 182.04597473]
[102.06446075 167.04922485]
[101.75240326 152.05247498]
[101.44034576 137.05570984]
[101.12828827 122.05895996]
[88.26988983 114.33487701]
[74.88360596 121.10298920]
[61.49731827 127.87110901]
[59.15512848 143.21038818]
[48.22013855 154.21974182]
[32.89707184 156.66581726]
[19.07796478 149.60806274]
[12.07654190 135.76033020]
[14.58499432 120.44735718]
[25.63877106 109.55728149]
[40.98746872 107.27757263]
[54.72920227 114.48482513]
[68.11548615 107.71670532]
[81.50177002 100.94859314]
[81.03395844 93.46319580]
[79.63051605 71.00701141]
[65.50571442 65.95825195]
[51.38090897 60.90949631]
[37.25610733 55.86074066]
[28.05560875 55.91270447]
[22.89183044 50.55723572]
[4.81867266 53.92484665]
[-5.76080799 39.95793915]
[-19.88561058 34.90918350]
[-34.01041412 29.86042595]
[-50.96048737 30.22278976]
[-56.00093842 14.03544140]
[-41.84153366 4.71087217]
[-28.96165657 15.73562336]
[-14.83685493 20.78437996]
[-0.71205151 25.83313560]
[10.39351940 20.93685150]
[22.22877884 25.07757950]
[28.23334312 36.54052353]
[42.30486298 41.73593903]
[56.42966461 46.78469467]
[70.55446625 51.83345032]
[84.67927551 56.88220596]
[98.95473480 52.27664185]
[107.46582031 39.92506790]
[115.97691345 27.57349586]
[124.48800659 15.22192383]
[126.80364227 6.31744909]
[133.30685425 2.70443916]
[142.07305908 -9.46739769]
[130.98786926 -19.59829140]
[121.15378571 -30.94762039]
[112.70379639 -43.36190033]
[105.75219727 -56.67323685]
[100.39298248 -70.70161438]
[96.69863129 -85.25730896]
[94.71911621 -100.14347839]
[94.48120117 -115.15880585]
[95.98810577 -130.10021973]
[99.21944427 -144.76564026]
[104.13152313 -158.95677185]
[110.65791321 -172.48165894]
[118.71035004 -185.15742493]
[128.17993164 -196.81262207]
[138.93859863 -207.28962708]
[150.84083557 -216.44674683]
[163.72570801 -224.16017151]
[177.41893005 -230.32556152]
[191.73535156 -234.85952759]
[206.48132324 -237.70077515]
[221.45744324 -238.81086731]
[236.46118164 -238.17480469]
[251.28961182 -235.80117798]
[265.74218750 -231.72207642]
[279.62350464 -225.99269104]
[292.74578857 -218.69047546]
[304.93157959 -209.91421509]
[316.01611328 -199.78259277]
[325.84942627 -188.43260193]
[334.29858398 -176.01776123]
[341.24929810 -162.70596313]
[346.60757446 -148.67721558]
[350.30096436 -134.12127686]
[352.27947998 -119.23497772]
[352.51638794 -104.21964264]
[351.00848389 -89.27832794]
[347.77618408 -74.61311340]
[342.86315918 -60.42231369]
[336.33584595 -46.89785385]
[328.28259277 -34.22263718]
[318.81222534 -22.56807518]
[308.05285645 -12.09178543]
[296.14999390 -2.93544865]
[283.26461792 4.77710724]
[269.57098389 10.94157887]
[255.25425720 15.47459793]
[240.50810242 18.31486130]
[225.53190613 19.42395782]
[210.52821350 18.78688622]
[195.69993591 16.41226578]
[181.24761963 12.33220673]
[167.36669922 6.60188913]
[154.24490356 -0.70119053]
[145.47869873 11.47064590]
[136.83956909 23.73301506]
[128.32849121 36.08458710]
[119.81739807 48.43616104]
[111.30630493 60.78773117]
[125.64953613 56.39778519]
[140.48062134 58.64256668]
[152.88227844 67.08052063]
[160.41508484 80.05190277]
[161.59735107 95.00524139]
[156.19651794 108.99919891]
[145.27493286 119.28118134]
[130.98088074 123.82869720]
[116.12504578 121.74690247]
[116.43710327 136.74365234]
[116.74915314 151.74041748]
[117.06121063 166.73716736]
[117.37326813 181.73391724]
[117.68532562 196.73066711]
[117.99738312 211.72743225]
[118.30944061 226.72418213]
[118.62149048 241.72093201]
[118.93354797 256.71768188]
[133.51618958 260.65765381]
[146.39739990 268.54757690]
[156.53294373 279.74792480]
[163.10119629 293.35064697]
[165.56968689 308.25311279]
[163.73831177 323.24722290]
[157.75553894 337.11743164]
[148.10635376 348.73937988]
[135.57296753 357.17092896]
[121.17140961 361.72854614]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 33]
[21 32]
[22 31]
[35 57]
[36 56]
[37 55]
[38 54]
[40 53]
[42 50]
[43 49]
[44 48]
[58 122]
[59 121]
[60 120]
[61 119]
[63 118]
[64 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
