%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCCUUCGGGGGGGGGGGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAUAxxxxxxxxxxCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUAUAACCCCCCCCCCAACCCCCUGC\
) } def
/len { sequence length } bind def

/coor [
[94.04183960 387.54763794]
[79.55215454 383.33917236]
[66.64591980 375.52307129]
[56.20312119 364.63223267]
[48.93575668 351.40921021]
[45.33933258 336.75561523]
[45.65905380 321.67050171]
[49.87312317 307.18246460]
[57.69422150 294.27923584]
[68.58908844 283.84063721]
[81.81489563 276.57839966]
[96.46988678 272.98760986]
[96.78194427 257.99087524]
[97.09400177 242.99411011]
[97.40605927 227.99736023]
[97.71811676 213.00061035]
[98.03017426 198.00384521]
[98.34222412 183.00709534]
[98.65428162 168.01034546]
[98.96633911 153.01359558]
[99.27839661 138.01683044]
[83.62758636 131.07087708]
[73.77600861 118.71543884]
[59.87345123 124.34738922]
[45.97089767 129.97935486]
[32.06834030 135.61131287]
[22.41614914 148.86903381]
[6.13929558 146.87001038]
[-0.01799027 131.67068481]
[10.27838039 118.90679169]
[26.43638420 121.70874786]
[40.33893967 116.07678986]
[54.24149704 110.44483948]
[68.14405060 104.81288147]
[68.68390656 92.43246460]
[73.85694885 81.17166901]
[82.89783478 72.69650269]
[94.46896362 68.26086426]
[95.40459442 53.29006958]
[80.48532104 49.37548065]
[66.61392212 42.64123917]
[54.31734848 33.34515762]
[44.06233215 21.84235001]
[36.23768234 8.57162857]
[31.13953590 -5.96120739]
[28.96015739 -21.20266342]
[29.78067398 -36.57262421]
[33.56807709 -51.48644257]
[40.17652893 -65.37715912]
[49.35298538 -77.71708679]
[60.74689102 -88.03781891]
[73.92355347 -95.94805145]
[88.38075256 -101.14836884]
[103.56784058 -103.44262695]
[104.19181824 -118.42964172]
[104.81579590 -133.41665649]
[105.43977356 -148.40367126]
[97.10427856 -135.93292236]
[86.16242218 -125.67253113]
[73.18214417 -118.15505981]
[58.83719635 -113.77070618]
[43.87216568 -112.74706268]
[29.06382370 -115.13723755]
[15.18080616 -120.81719208]
[2.94372201 -129.49208069]
[-7.01225328 -140.71163940]
[-14.17034721 -153.89350891]
[-18.15901375 -168.35346985]
[-18.77121925 -183.34097290]
[-15.97518444 -198.07807922]
[-9.91604042 -211.79985046]
[-0.90829301 -223.79402161]
[10.58050537 -233.43806458]
[23.95401955 -240.23138428]
[38.51808929 -243.82136536]
[53.51675034 -244.02165222]
[68.17149353 -240.82188416]
[81.72164154 -234.38810730]
[93.46388245 -225.05430603]
[102.78870392 -213.30494690]
[109.21211243 -199.74987793]
[112.40068817 -185.09269714]
[112.18867493 -170.09220886]
[120.17858887 -182.78713989]
[128.16850281 -195.48207092]
[123.21244812 -210.31350708]
[128.99740601 -224.84169006]
[142.79191589 -232.20686340]
[158.08261108 -228.93141174]
[167.64970398 -216.56190491]
[166.97590637 -200.93884277]
[156.37936401 -189.43896484]
[140.86343384 -187.49215698]
[132.87351990 -174.79722595]
[124.88360596 -162.10229492]
[120.42678833 -147.77969360]
[119.80281067 -132.79267883]
[119.17883301 -117.80566406]
[118.55485535 -102.81864929]
[132.78163147 -99.51199341]
[146.15676880 -93.63307953]
[158.21948242 -85.38276672]
[168.55389404 -75.04364014]
[176.80337524 -62.97035217]
[182.68284607 -49.57740402]
[185.98861694 -35.32497025]
[186.60548401 -20.70305252]
[184.51068115 -6.21465254]
[179.77479553 7.64154387]
[172.55928040 20.38832474]
[163.11109924 31.58638954]
[151.75410461 40.84948730]
[138.87809753 47.85774231]
[124.92533875 52.36869431]
[110.37538910 54.22569656]
[109.43975830 69.19648743]
[126.29005432 78.19972992]
[135.86546326 95.99592590]
[133.90167236 117.21852112]
[147.28794861 123.98663330]
[160.67424011 130.75474548]
[174.06051636 137.52287292]
[190.39552307 136.07374573]
[199.59526062 149.64933777]
[192.19583130 164.28424072]
[175.80914307 164.92332458]
[167.29240417 150.90914917]
[153.90612793 144.14103699]
[140.51983643 137.37292480]
[127.13355255 130.60481262]
[114.27514648 138.32888794]
[113.96309662 153.32563782]
[113.65103912 168.32240295]
[113.33898163 183.31915283]
[113.02692413 198.31590271]
[112.71486664 213.31265259]
[112.40280914 228.30941772]
[112.09075165 243.30616760]
[111.77870178 258.30291748]
[111.46664429 273.29968262]
[125.95957947 277.49694824]
[138.87184143 285.30310059]
[149.32304382 296.18588257]
[156.60061646 309.40325928]
[160.20835876 324.05407715]
[159.90028381 339.13943481]
[155.69740295 353.63073730]
[147.88627625 366.53997803]
[136.99948120 376.98699951]
[123.77928162 384.25946045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 34]
[24 33]
[25 32]
[26 31]
[38 116]
[39 115]
[54 99]
[55 98]
[56 97]
[57 96]
[83 95]
[84 94]
[85 93]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
