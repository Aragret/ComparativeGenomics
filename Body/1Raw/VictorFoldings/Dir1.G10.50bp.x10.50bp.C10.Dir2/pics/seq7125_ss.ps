%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCUACGCGGGGGGGGGGCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCxxxxxxxxxxAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACCUACCC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 397.16503906]
[70.75619507 392.35559082]
[57.85220718 384.59020996]
[46.91955185 374.23208618]
[38.46956635 361.76565552]
[32.89747238 347.77401733]
[30.46388245 332.91159058]
[31.28262329 317.87350464]
[35.31539917 303.36312866]
[42.37359238 290.05914307]
[52.12707901 278.58380127]
[64.11966705 269.47381592]
[77.79044342 263.15527344]
[92.50000000 259.92370605]
[92.50000000 244.92372131]
[92.50000000 229.92372131]
[92.50000000 214.92372131]
[92.50000000 199.92372131]
[92.50000000 184.92372131]
[92.50000000 169.92372131]
[92.50000000 154.92372131]
[92.50000000 139.92372131]
[92.50000000 124.92372131]
[81.18978882 117.98937988]
[74.76665497 106.38122559]
[74.89938354 93.11516571]
[81.55349731 81.63785553]
[93.00019836 74.93120575]
[93.30033112 59.93420792]
[93.60045624 44.93721008]
[93.90058899 29.94021225]
[78.94918060 28.66967583]
[64.11137390 26.43399811]
[49.44939041 23.24255753]
[35.02474594 19.10873795]
[20.89793015 14.04988003]
[7.12820387 8.08720207]
[-6.22668076 1.24571407]
[-19.11070824 -6.44588852]
[-31.46983719 -14.95534420]
[-43.25223160 -24.24696159]
[-54.40846634 -34.28176498]
[-64.89175415 -45.01766968]
[-74.65811157 -56.40964508]
[-83.66659546 -68.40990448]
[-91.87940216 -80.96811676]
[-99.26209259 -94.03160095]
[-105.78370667 -107.54557800]
[-111.41687775 -121.45335388]
[-116.13797760 -135.69660950]
[-119.92722321 -150.21557617]
[-122.76869965 -164.94937134]
[-124.65049744 -179.83621216]
[-125.56472778 -194.81362915]
[-125.50754547 -209.81881714]
[-124.47920227 -224.78883362]
[-122.48400116 -239.66088867]
[-119.53031921 -254.37260437]
[-115.63053894 -268.86227417]
[-110.80101776 -283.06912231]
[-105.06201935 -296.93356323]
[-98.43760681 -310.39746094]
[-90.95557404 -323.40429688]
[-82.64729309 -335.89956665]
[-73.54762268 -347.83081055]
[-63.69472122 -359.14804077]
[-53.12992096 -369.80374146]
[-41.89753342 -379.75320435]
[-30.04467201 -388.95477295]
[-17.62104988 -397.36978149]
[-4.67877817 -404.96298218]
[8.72785854 -411.70248413]
[22.54262733 -417.56005859]
[36.70758438 -422.51110840]
[51.16331863 -426.53488159]
[65.84918976 -429.61447144]
[80.70361328 -431.73699951]
[95.66426849 -432.89355469]
[110.66841888 -433.07928467]
[125.65312195 -432.29339600]
[140.55552673 -430.53921509]
[155.31312561 -427.82403564]
[169.86402893 -424.15933228]
[184.14720154 -419.56042480]
[198.10272217 -414.04660034]
[211.67207336 -407.64099121]
[224.79832458 -400.37048340]
[237.42643738 -392.26556396]
[249.50343323 -383.36022949]
[260.97866821 -373.69180298]
[271.80398560 -363.30087280]
[281.93399048 -352.23101807]
[291.32620239 -340.52865601]
[299.94122314 -328.24288940]
[307.74291992 -315.42523193]
[314.69854736 -302.12945557]
[320.77899170 -288.41128540]
[325.95867920 -274.32833862]
[330.21591187 -259.93963623]
[333.53283691 -245.30554199]
[335.89556885 -230.48742676]
[337.29412842 -215.54745483]
[337.72271729 -200.54827881]
[337.17950439 -185.55281067]
[335.66674805 -170.62396240]
[333.19085693 -155.82434082]
[329.76214600 -141.21601868]
[325.39505005 -126.86028290]
[320.10784912 -112.81732941]
[313.92276001 -99.14607239]
[306.86566162 -85.90384674]
[298.96621704 -73.14619446]
[290.25753784 -60.92662811]
[280.77615356 -49.29640198]
[270.56182861 -38.30429840]
[259.65737915 -27.99642372]
[248.10859680 -18.41600990]
[235.96388245 -9.60324192]
[223.27420044 -1.59508419]
[210.09274292 5.57487488]
[196.47482300 11.87656116]
[182.47756958 17.28354263]
[168.15965271 21.77314186]
[153.58116150 25.32652664]
[138.80323792 27.92879295]
[123.88786316 29.56902504]
[108.89759064 30.24034500]
[108.59745789 45.23734283]
[108.29732513 60.23433685]
[107.99719238 75.23133850]
[121.11906433 84.78727722]
[126.02641296 100.26040649]
[120.81044769 115.63224030]
[107.50000000 124.92372131]
[107.50000000 139.92372131]
[107.50000000 154.92372131]
[107.50000000 169.92372131]
[107.50000000 184.92372131]
[107.50000000 199.92372131]
[107.50000000 214.92372131]
[107.50000000 229.92372131]
[107.50000000 244.92372131]
[107.50000000 259.92370605]
[122.20955658 263.15527344]
[135.88034058 269.47381592]
[147.87292480 278.58380127]
[157.62640381 290.05914307]
[164.68460083 303.36312866]
[168.71737671 317.87350464]
[169.53611755 332.91159058]
[167.10252380 347.77401733]
[161.53042603 361.76565552]
[153.08044434 374.23208618]
[142.14779663 384.59020996]
[129.24380493 392.35559082]
[114.97203827 397.16503906]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[28 130]
[29 129]
[30 128]
[31 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
