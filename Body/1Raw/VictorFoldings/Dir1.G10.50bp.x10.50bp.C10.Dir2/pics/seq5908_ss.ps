%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCUAUCUGGGGGGGGGGCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAxxxxxxxxxxAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCCCCCCCCCCCUACCUCUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 491.21102905]
[71.19830322 485.19500732]
[59.48964310 475.66558838]
[50.78712082 463.32992554]
[45.73651886 449.10339355]
[44.71262741 434.04171753]
[47.79142761 419.26257324]
[54.74444962 405.86264038]
[65.05573273 394.83630371]
[77.96011353 387.00180054]
[92.50000000 382.94049072]
[92.50000000 367.94049072]
[92.50000000 352.94049072]
[92.50000000 337.94049072]
[92.50000000 322.94049072]
[92.50000000 307.94049072]
[92.50000000 292.94049072]
[92.50000000 277.94049072]
[92.50000000 262.94049072]
[92.50000000 247.94047546]
[79.53267670 240.61148071]
[71.92427826 227.68986511]
[71.80444336 212.59509277]
[79.30548859 199.38027954]
[92.50000000 191.64387512]
[92.50000000 176.64387512]
[92.50000000 161.64387512]
[92.50000000 146.64387512]
[76.23838043 140.83241272]
[63.15164948 129.56517029]
[54.98837280 114.34761810]
[52.83928299 97.21301270]
[38.19578171 93.96218872]
[23.55228043 90.71135712]
[8.90877914 87.46053314]
[-2.71830106 97.56584167]
[-17.88892365 98.87182617]
[-30.76728249 91.08646393]
[-36.52296448 77.37478638]
[-51.16646576 74.12396240]
[-65.80996704 70.87313080]
[-82.58303070 73.34308624]
[-89.59970856 57.90927505]
[-76.71145630 46.89431000]
[-62.55914307 56.22963333]
[-47.91564178 59.48045731]
[-33.27214050 62.73128510]
[-22.25514030 52.74310303]
[-7.29221678 51.13844681]
[5.90071154 58.74108124]
[12.15960503 72.81703186]
[26.80310631 76.06785583]
[41.44660950 79.31868744]
[56.09011078 82.56951141]
[60.69855881 73.78364563]
[67.04024506 66.15394592]
[74.83549500 60.01689911]
[83.74052429 55.64315033]
[93.36261749 53.22558594]
[103.27742767 52.87082672]
[106.68040466 38.26193237]
[110.08338165 23.65304184]
[108.98124695 14.51864719]
[113.71209717 8.77715588]
[117.41825867 -5.75778055]
[106.48785400 4.51481676]
[92.74139404 10.51771069]
[77.77716064 11.55294895]
[63.33503342 7.50016594]
[51.09419250 -1.16942477]
[42.47786713 -13.44781780]
[38.48786926 -27.90741348]
[39.58811188 -42.86700821]
[45.65067673 -56.58726120]
[55.97066498 -67.47293091]
[69.34819031 -74.25834656]
[84.22785187 -76.15457916]
[98.87960052 -72.94115448]
[111.59989929 -64.99169159]
[120.90976715 -53.23046494]
[125.72675323 -39.02494812]
[125.49024963 -24.02396202]
[133.74253845 -36.54992294]
[141.99482727 -49.07588577]
[150.24711609 -61.60184860]
[144.65602112 -76.07662964]
[148.67332458 -91.06465912]
[160.75428772 -100.80271912]
[176.25354004 -101.54634094]
[189.21128845 -93.00958252]
[194.64503479 -78.47499847]
[190.46537781 -63.53143692]
[178.27947998 -53.92499924]
[162.77307129 -53.34955978]
[154.52078247 -40.82359695]
[146.26849365 -28.29763603]
[138.01620483 -15.77167320]
[131.95320129 -2.05161953]
[128.24703979 12.48331642]
[124.69227600 27.05601883]
[121.28929138 41.66491318]
[117.88631439 56.27380371]
[128.26843262 62.14770889]
[136.84834290 70.43482208]
[143.07905579 80.60681915]
[146.56332397 92.01519775]
[161.56251526 91.85916138]
[176.56170654 91.70312500]
[191.56089783 91.54708862]
[201.34690857 79.35004425]
[216.69355774 76.34761810]
[230.35459900 83.95746613]
[235.87973022 98.58644104]
[230.66014099 113.32720184]
[217.16035461 121.21959686]
[201.75457764 118.53708649]
[191.71693420 106.54627228]
[176.71774292 106.70230865]
[161.71855164 106.85834503]
[146.71936035 107.01438141]
[139.77885437 125.48613739]
[125.89855194 139.51158142]
[107.50000000 146.64387512]
[107.50000000 161.64387512]
[107.50000000 176.64387512]
[107.50000000 191.64387512]
[120.69451141 199.38027954]
[128.19555664 212.59509277]
[128.07571411 227.68986511]
[120.46732330 240.61148071]
[107.50000000 247.94047546]
[107.50000000 262.94049072]
[107.50000000 277.94049072]
[107.50000000 292.94049072]
[107.50000000 307.94049072]
[107.50000000 322.94049072]
[107.50000000 337.94049072]
[107.50000000 352.94049072]
[107.50000000 367.94049072]
[107.50000000 382.94049072]
[122.03988647 387.00180054]
[134.94427490 394.83630371]
[145.25555420 405.86264038]
[152.20857239 419.26257324]
[155.28736877 434.04171753]
[154.26348877 449.10339355]
[149.21287537 463.32992554]
[140.51036072 475.66558838]
[128.80169678 485.19500732]
[114.95575714 491.21102905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 126]
[26 125]
[27 124]
[28 123]
[32 54]
[33 53]
[34 52]
[35 51]
[39 47]
[40 46]
[41 45]
[60 102]
[61 101]
[62 100]
[64 99]
[65 98]
[82 97]
[83 96]
[84 95]
[85 94]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
