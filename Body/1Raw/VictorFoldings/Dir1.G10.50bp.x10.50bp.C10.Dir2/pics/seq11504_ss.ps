%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUGAAACGGGGGGGGGGAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCUAxxxxxxxxxxCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCUCCUCAUUCUCCCCCCCCCCAACCUGAAUC\
) } def
/len { sequence length } bind def

/coor [
[73.26444244 557.44714355]
[59.41850662 551.43115234]
[47.70984650 541.90173340]
[39.00732040 529.56604004]
[33.95671844 515.33953857]
[32.93282700 500.27783203]
[36.01162720 485.49868774]
[42.96464920 472.09875488]
[53.27593231 461.07241821]
[66.18031311 453.23791504]
[80.72019958 449.17660522]
[80.72019958 434.17660522]
[80.72019958 419.17660522]
[80.72019958 404.17660522]
[80.72019958 389.17660522]
[80.72019958 374.17660522]
[80.72019958 359.17660522]
[80.72019958 344.17660522]
[80.72019958 329.17660522]
[80.72019958 314.17660522]
[80.72019958 299.17660522]
[66.87726593 296.33435059]
[53.86032867 290.81970215]
[42.17996979 282.84677124]
[32.29478455 272.72610474]
[24.59335899 260.85263062]
[19.37901878 247.69020081]
[16.85786819 233.75360107]
[17.13065338 219.58822632]
[20.18873215 205.74890137]
[25.91433334 192.77803040]
[34.08509445 181.18443298]
[44.38269043 171.42332458]
[56.40524292 163.87844849]
[69.68299866 158.84701538]
[83.69668579 156.52796936]
[84.32066345 141.54095459]
[84.94464111 126.55393982]
[85.56861877 111.56692505]
[77.44708252 98.95579529]
[63.54452133 93.32384491]
[49.64196777 87.69188690]
[35.73941040 82.05992889]
[22.01118088 89.54789734]
[6.69186449 86.40901947]
[-2.98522544 74.12537384]
[-2.45086312 58.49692535]
[8.04264259 46.90294647]
[23.54057884 44.81776047]
[36.72529221 53.22592926]
[41.37136841 68.15737152]
[55.27392197 73.78932953]
[69.17648315 79.42128754]
[83.07903290 85.05324554]
[87.95286560 79.35272980]
[102.57434082 62.25120163]
[94.85025787 49.39279938]
[87.12616730 36.53439713]
[79.40208435 23.67599297]
[71.67800140 10.81759071]
[57.08133316 3.34301162]
[56.52652359 -13.04674816]
[70.58431244 -21.49130821]
[84.79325104 -13.30362988]
[84.53639984 3.09350586]
[92.26049042 15.95190811]
[99.98457336 28.81031036]
[107.70865631 41.66871262]
[115.43273926 54.52711487]
[122.80164337 55.92327881]
[122.18776703 40.93584442]
[121.57389069 25.94841194]
[113.98897552 13.00742817]
[114.61720276 -1.97941065]
[123.25852966 -14.24021721]
[137.16152954 -19.87108612]
[151.89939880 -17.07911873]
[162.77954102 -6.75329351]
[166.33764648 7.81859398]
[161.44079590 21.99677849]
[149.64697266 31.26732826]
[143.59321594 44.99146652]
[137.53944397 58.71560287]
[144.90835571 60.11176300]
[156.80073547 50.97003174]
[168.69311523 41.82829666]
[180.39273071 32.44113541]
[191.89454651 22.81260872]
[197.50975037 8.02139282]
[212.23544312 5.78459501]
[223.73724365 -3.84393120]
[235.23904419 -13.47245789]
[246.74084473 -23.10098457]
[247.88664246 -38.86368179]
[259.89724731 -49.13603973]
[275.64694214 -47.82365036]
[285.79174805 -35.70512772]
[284.31289673 -19.97018051]
[272.08779907 -9.95407104]
[256.36938477 -11.59918022]
[244.86756897 -1.97065413]
[233.36576843 7.65787220]
[221.86396790 17.28639793]
[217.07144165 31.38891792]
[201.52307129 34.31441116]
[190.02127075 43.94293594]
[188.71437073 48.59777832]
[184.43083191 52.45557785]
[177.83485413 53.72067642]
[165.94247437 62.86241150]
[154.05009460 72.00414276]
[143.84613037 108.42374420]
[118.59921265 121.49636078]
[100.55564117 112.19090271]
[99.93166351 127.17791748]
[99.30768585 142.16493225]
[98.68370819 157.15194702]
[114.07494354 161.23509216]
[128.18118286 168.60821533]
[140.30946350 178.90579224]
[149.86473083 191.61872864]
[156.37907410 206.11949158]
[159.53450012 221.69316101]
[159.17863464 237.57258606]
[155.33192444 252.97624207]
[148.18658447 267.14666748]
[138.09695435 279.38772583]
[125.56193542 289.09878540]
[111.20030212 295.80419922]
[95.72019958 299.17660522]
[95.72019958 314.17660522]
[95.72019958 329.17660522]
[95.72019958 344.17660522]
[95.72019958 359.17660522]
[95.72019958 374.17660522]
[95.72019958 389.17660522]
[95.72019958 404.17660522]
[95.72019958 419.17660522]
[95.72019958 434.17660522]
[95.72019958 449.17660522]
[110.26008606 453.23791504]
[123.16446686 461.07241821]
[133.47575378 472.09875488]
[140.42877197 485.49868774]
[143.50756836 500.27783203]
[142.48368835 515.33953857]
[137.43307495 529.56604004]
[128.73056030 541.90173340]
[117.02189636 551.43115234]
[103.17595673 557.44714355]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[36 117]
[37 116]
[38 115]
[39 114]
[40 54]
[41 53]
[42 52]
[43 51]
[56 69]
[57 68]
[58 67]
[59 66]
[60 65]
[84 111]
[85 110]
[86 109]
[87 106]
[88 105]
[90 103]
[91 102]
[92 101]
[93 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
