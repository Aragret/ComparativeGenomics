%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUAUCGGGGGGGGGGUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCxxxxxxxxxxACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAACCCCCCCCCCUAAUACUAUC\
) } def
/len { sequence length } bind def

/coor [
[96.15229034 392.18292236]
[82.30635834 386.16690063]
[70.59769440 376.63748169]
[61.89516830 364.30181885]
[56.84456635 350.07528687]
[55.82067490 335.01361084]
[58.89947510 320.23443604]
[65.85249329 306.83453369]
[76.16378021 295.80819702]
[89.06816101 287.97369385]
[103.60804749 283.91235352]
[103.60804749 268.91235352]
[103.60804749 253.91236877]
[103.60804749 238.91236877]
[103.60804749 223.91236877]
[103.60804749 208.91236877]
[103.60804749 193.91236877]
[103.60804749 178.91236877]
[103.60804749 163.91236877]
[103.60804749 148.91236877]
[103.60804749 133.91236877]
[86.78642273 128.27665710]
[76.47621155 115.76799011]
[62.24943542 120.52180481]
[59.86126709 135.63984680]
[50.71164703 147.90945435]
[36.90308762 154.51113892]
[21.60869598 153.92788696]
[8.34300995 146.29374695]
[0.15438978 133.36296082]
[-1.07548165 118.10694885]
[4.93601131 104.03141785]
[16.80747223 94.37082672]
[31.81092644 91.34511566]
[46.49868774 95.64955139]
[57.49562073 106.29502869]
[71.72239685 101.54121399]
[72.22369385 94.47960663]
[74.46075439 87.76296997]
[78.29378510 81.81104279]
[83.48325348 76.99575806]
[89.70487213 73.61802673]
[88.14729309 58.69911575]
[86.58971405 43.78020096]
[85.03213501 28.86128998]
[70.01698303 28.76893997]
[55.10313034 27.02533150]
[40.47161484 23.65163040]
[26.30004311 18.68878937]
[12.76045132 12.19705296]
[0.01719543 4.25522566]
[-11.77503300 -5.04028702]
[-22.47308540 -15.57664490]
[-31.94709969 -27.22594833]
[-40.08206940 -39.84678268]
[-46.77924347 -53.28594208]
[-51.95732117 -67.38029480]
[-55.55345154 -81.95874023]
[-57.52397537 -96.84430695]
[-57.84497452 -111.85630798]
[-56.51255417 -126.81250763]
[-53.54288483 -141.53134155]
[-48.97201920 -155.83415222]
[-42.85543823 -169.54731750]
[-35.26739883 -182.50434875]
[-26.30000687 -194.54798889]
[-16.06212234 -205.53201294]
[-4.67802000 -215.32310486]
[7.71410513 -223.80239868]
[20.96382523 -230.86695862]
[34.91029739 -236.43104553]
[49.38423157 -240.42710876]
[64.20991516 -242.80664062]
[79.20739746 -243.54074097]
[94.19460297 -242.62051392]
[108.98960876 -240.05712891]
[123.41281891 -235.88169861]
[137.28915405 -230.14491272]
[150.45014954 -222.91641235]
[162.73605347 -214.28393555]
[173.99774170 -204.35227966]
[184.09848022 -193.24200439]
[192.91567993 -181.08798218]
[200.34228516 -168.03775024]
[206.28816223 -154.24972534]
[210.68112183 -139.89126587]
[213.46784973 -125.13669586]
[214.61450195 -110.16511536]
[214.10716248 -95.15825653]
[211.95201111 -80.29829407]
[208.17518616 -65.76560974]
[202.82254028 -51.73662949]
[195.95904541 -38.38164139]
[187.66802979 -25.86276436]
[178.05014038 -14.33196831]
[167.22210693 -3.92922592]
[155.31539917 5.21918392]
[142.47453308 13.00220680]
[128.85540771 19.32536507]
[114.62331390 24.11190033]
[99.95104218 27.30370903]
[101.50862885 42.22262192]
[103.06620789 57.14153290]
[104.62378693 72.06044769]
[126.41143799 83.36858368]
[132.74871826 109.51778412]
[147.51477051 112.15664673]
[162.28082275 114.79551697]
[177.04687500 117.43437958]
[188.09687805 110.70001984]
[200.37460327 113.24491119]
[207.37330627 123.16083527]
[222.08126831 126.10631561]
[236.78923035 129.05180359]
[248.88357544 119.13913727]
[264.51943970 119.37138367]
[276.31402588 129.63887024]
[278.69830322 145.09361267]
[270.54650879 158.43835449]
[255.70764160 163.37211609]
[241.18817139 157.56532288]
[233.84375000 143.75976562]
[219.13578796 140.81427002]
[204.42782593 137.86878967]
[188.16670227 144.39381409]
[174.40802002 132.20043945]
[159.64196777 129.56156921]
[144.87590027 126.92270660]
[130.10984802 124.28384399]
[118.60804749 133.91236877]
[118.60804749 148.91236877]
[118.60804749 163.91236877]
[118.60804749 178.91236877]
[118.60804749 193.91236877]
[118.60804749 208.91236877]
[118.60804749 223.91236877]
[118.60804749 238.91236877]
[118.60804749 253.91236877]
[118.60804749 268.91235352]
[118.60804749 283.91235352]
[133.14793396 287.97369385]
[146.05232239 295.80819702]
[156.36360168 306.83453369]
[163.31661987 320.23443604]
[166.39541626 335.01361084]
[165.37153625 350.07528687]
[160.32092285 364.30181885]
[151.61840820 376.63748169]
[139.90974426 386.16690063]
[126.06380463 392.18292236]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 37]
[24 36]
[42 104]
[43 103]
[44 102]
[45 101]
[106 129]
[107 128]
[108 127]
[109 126]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
