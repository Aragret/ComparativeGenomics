%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACCACCGGGGGGGGGGUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUAxxxxxxxxxxAAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCCCCCCCCCCCUCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 358.06515503]
[71.19830322 352.04913330]
[59.48964310 342.51971436]
[50.78712082 330.18405151]
[45.73651886 315.95751953]
[44.71262741 300.89584351]
[47.79142761 286.11666870]
[54.74444962 272.71676636]
[65.05573273 261.69042969]
[77.96011353 253.85591125]
[92.50000000 249.79460144]
[92.50000000 234.79460144]
[92.50000000 219.79460144]
[92.50000000 204.79460144]
[92.50000000 189.79460144]
[92.50000000 174.79460144]
[92.50000000 159.79460144]
[92.50000000 144.79460144]
[92.50000000 129.79460144]
[92.50000000 114.79460144]
[89.46728516 129.48481750]
[78.70433044 139.93273926]
[63.93052292 142.52781677]
[50.25127411 136.37329102]
[42.39376068 123.59599304]
[43.07331848 108.61139679]
[52.05511856 96.59776306]
[66.23529053 91.70668793]
[80.71385956 95.62856293]
[67.32757568 88.86044312]
[53.94129181 82.09233093]
[40.55500793 75.32421875]
[27.16872215 68.55609894]
[33.79891968 82.01123047]
[33.54523087 97.00908661]
[26.46376801 110.23227692]
[14.12088490 118.75596619]
[-0.75328749 120.69477844]
[-14.86871815 115.61988068]
[-25.10320282 104.65377808]
[-29.19297028 90.22208405]
[-26.23340034 75.51695251]
[-16.87912178 63.79101944]
[-3.19921541 57.63795853]
[11.78234863 58.41933060]
[0.28054506 48.79080582]
[-15.26783276 45.86531067]
[-20.06035233 31.76279259]
[-31.56215477 22.13426590]
[-43.06395721 12.50574017]
[-54.56576157 2.87721419]
[-70.28419495 4.52232361]
[-82.50930023 -5.49378538]
[-83.98812866 -21.22873306]
[-73.84333038 -33.34725571]
[-58.09362411 -34.65964508]
[-46.08303833 -24.38728905]
[-44.93723679 -8.62458897]
[-33.43543243 1.00393689]
[-21.93362808 10.63246346]
[-10.43182564 20.26099014]
[4.29386663 22.49778748]
[9.90907097 37.28900146]
[21.41087532 46.91753006]
[33.93683624 55.16981888]
[47.32312012 61.93793106]
[60.70940781 68.70604706]
[74.09568787 75.47415924]
[87.48197937 82.24227905]
[77.76687622 70.81350708]
[74.12489319 56.26235580]
[77.31083679 41.60459900]
[86.66440582 29.87810707]
[100.24705505 23.51322556]
[115.24372864 23.82910156]
[128.54632568 30.76026535]
[137.39782715 42.87021255]
[139.96374512 57.64912033]
[135.71228027 72.03401184]
[125.52456665 83.04356384]
[111.51239014 88.39598083]
[125.73917389 83.64216614]
[139.96595764 78.88835144]
[154.19273376 74.13453674]
[155.83535767 55.64420700]
[165.31582642 39.74319458]
[180.71694946 29.56167030]
[198.96112061 27.08175278]
[216.42527771 32.75175858]
[229.66046143 45.40591431]
[243.44284058 39.48595047]
[257.22521973 33.56599045]
[271.00759888 27.64602661]
[284.78997803 21.72606277]
[298.57235718 15.80609989]
[297.68951416 0.67347324]
[302.03854370 -13.84760571]
[311.09429932 -26.00364685]
[323.76321411 -34.32674789]
[338.51550293 -37.81185532]
[353.56973267 -36.03812027]
[367.10803223 -29.21973991]
[377.49557495 -18.18005753]
[383.47802734 -4.25217390]
[384.33300781 10.88205433]
[379.95721436 25.39509392]
[370.87908936 37.53442383]
[358.19482422 45.83416367]
[343.43615723 49.29207993]
[328.38522339 47.49060822]
[314.85952759 40.64728546]
[304.49230957 29.58848190]
[290.70993042 35.50844574]
[276.92755127 41.42840576]
[263.14517212 47.34836960]
[249.36279297 53.26833344]
[235.58041382 59.18829727]
[236.57238770 70.86370850]
[234.22566223 82.36354065]
[228.72023010 92.75096893]
[220.49392700 101.17662811]
[210.20750427 106.94809723]
[198.69165039 109.58676910]
[186.87988281 108.86753082]
[175.73284912 104.83793640]
[166.16024780 97.81520844]
[158.94654846 88.36131287]
[144.71977234 93.11512756]
[130.49298096 97.86894226]
[116.26620483 102.62276459]
[107.50000000 114.79460144]
[107.50000000 129.79460144]
[107.50000000 144.79460144]
[107.50000000 159.79460144]
[107.50000000 174.79460144]
[107.50000000 189.79460144]
[107.50000000 204.79460144]
[107.50000000 219.79460144]
[107.50000000 234.79460144]
[107.50000000 249.79460144]
[122.03988647 253.85591125]
[134.94427490 261.69042969]
[145.25555420 272.71676636]
[152.20857239 286.11666870]
[155.28736877 300.89584351]
[154.26348877 315.95751953]
[149.21287537 330.18405151]
[140.51036072 342.51971436]
[128.80169678 352.04913330]
[114.95575714 358.06515503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 69]
[30 68]
[31 67]
[32 66]
[33 65]
[45 64]
[46 63]
[48 61]
[49 60]
[50 59]
[51 58]
[81 130]
[82 129]
[83 128]
[84 127]
[90 117]
[91 116]
[92 115]
[93 114]
[94 113]
[95 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
