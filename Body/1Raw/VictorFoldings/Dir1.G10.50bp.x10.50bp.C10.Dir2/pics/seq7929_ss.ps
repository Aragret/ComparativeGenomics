%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCCCCUCGGGGGGGGGGUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUxxxxxxxxxxGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCCCCCCCCCCCUACCCCUUC\
) } def
/len { sequence length } bind def

/coor [
[108.40334320 425.32931519]
[95.84512329 416.97817993]
[85.75890350 405.76571655]
[78.77870941 392.39682007]
[75.34332275 377.71182251]
[75.66870117 362.63388062]
[79.73438263 348.11074829]
[87.28480530 335.05538940]
[97.84532928 324.28851318]
[110.75212860 316.48687744]
[125.19385529 312.14093018]
[124.56987762 297.15390015]
[123.94589996 282.16690063]
[123.32192230 267.17987061]
[122.69794464 252.19285583]
[122.07396698 237.20584106]
[121.44998932 222.21882629]
[120.82601166 207.23181152]
[120.20203400 192.24479675]
[111.94200134 179.85040283]
[119.09853363 165.74031067]
[118.47455597 150.75329590]
[114.01773834 136.43069458]
[106.02782440 123.73577118]
[98.03791046 111.04084015]
[91.87461090 124.71613312]
[77.39424896 128.63011169]
[65.18080139 119.92196655]
[64.16130829 104.95665741]
[75.08094025 94.67259979]
[89.95777130 96.58626556]
[83.32926941 83.13030243]
[76.70076752 69.67433167]
[61.54253387 66.92951202]
[51.02995682 55.91410828]
[49.04293060 40.99714661]
[56.13572693 27.92694473]
[49.50722885 14.47097874]
[39.52450180 3.27521300]
[26.91337395 -4.84632921]
[14.30224514 -12.96787167]
[1.69111717 -21.08941269]
[-10.92001057 -29.21095467]
[-23.53113937 -37.33249664]
[-36.14226913 -45.45404053]
[-49.12862396 -37.43423462]
[-64.30948639 -35.85175323]
[-78.67067719 -41.02079010]
[-89.36077118 -51.91503906]
[-94.25724792 -66.37142944]
[-92.38790131 -81.51963806]
[-84.12390137 -94.35198212]
[-71.10606384 -102.32058716]
[-55.91908646 -103.84327698]
[-41.57836533 -98.61772156]
[-30.93125153 -87.68146515]
[-26.09174347 -73.20590210]
[-28.02072525 -58.06516647]
[-15.40959740 -49.94362640]
[-2.79846883 -41.82208252]
[9.81265926 -33.70054245]
[22.42378807 -25.57899857]
[35.03491592 -17.45745659]
[47.64604187 -9.33591557]
[41.13877106 -22.85092163]
[37.74013138 -37.46082306]
[37.61420441 -52.46029663]
[40.76706696 -67.12519836]
[47.04650497 -80.74755859]
[56.14936829 -92.66971588]
[67.63619232 -102.31610870]
[80.95243073 -109.22102356]
[95.45520020 -113.05112457]
[110.44435120 -113.62149048]
[125.19625092 -110.90459442]
[138.99870300 -105.03159332]
[151.18539429 -96.28603363]
[161.16793823 -85.09011078]
[168.46444702 -71.98434448]
[172.72262573 -57.60144806]
[173.73693848 -42.63578033]
[171.45838928 -27.80984879]
[165.99699402 -13.83940983]
[157.61640930 -1.39891875]
[146.72123718 8.91103077]
[133.83744812 16.59270287]
[119.58705139 21.27524567]
[104.65801239 22.73259926]
[89.77107239 20.89440536]
[75.64492798 15.84940910]
[62.96319199 7.84248018]
[69.59169006 21.29844666]
[84.27677917 23.64071846]
[94.89232635 34.30720901]
[97.21874237 49.35517502]
[90.15673828 63.04583740]
[96.78523254 76.50180054]
[103.41373444 89.95777130]
[110.73284149 103.05091858]
[118.72275543 115.74584961]
[126.71266937 128.44078064]
[126.50045776 113.44228363]
[129.68858337 98.78500366]
[136.11158752 85.22974396]
[145.43605042 73.48009491]
[157.17800903 64.14593506]
[170.72796631 57.71175766]
[185.38261414 54.51153564]
[200.38128662 54.71138000]
[214.94544983 58.30091476]
[228.31918335 65.09382629]
[239.80827332 74.73751831]
[248.81637573 86.73143005]
[254.87593079 100.45301056]
[257.67242432 115.19002533]
[257.06066895 130.17755127]
[253.07243347 144.63763428]
[245.91474915 157.81971741]
[235.95910645 169.03958130]
[223.72229004 177.71484375]
[209.83944702 183.39521790]
[195.03117371 185.78584290]
[180.06611633 184.76264954]
[165.72102356 180.37873840]
[152.74052429 172.86164856]
[141.79835510 162.60159302]
[133.46157837 150.12931824]
[134.08555603 165.11633301]
[142.39021301 178.58270264]
[135.18905640 191.62081909]
[135.81303406 206.60783386]
[136.43701172 221.59484863]
[137.06098938 236.58186340]
[137.68496704 251.56887817]
[138.30894470 266.55590820]
[138.93292236 281.54290771]
[139.55690002 296.52993774]
[140.18087769 311.51693726]
[154.93388367 314.64739990]
[168.44451904 321.34915161]
[179.86349487 331.20092773]
[188.47300720 343.58346558]
[193.73185730 357.71835327]
[195.30946350 372.71710205]
[193.10665894 387.63684082]
[187.26190186 401.53970337]
[178.14262390 413.55175781]
[166.32205200 422.91790771]
[152.54324341 429.04940796]
[137.67234802 431.56079102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[21 128]
[22 127]
[23 101]
[24 100]
[25 99]
[31 98]
[32 97]
[33 96]
[37 92]
[38 91]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
