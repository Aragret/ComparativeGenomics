%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAUAGCCCUGGGGGGGGGGCGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGxxxxxxxxxxUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACCCCCCCCCCCAAAUAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[89.08454132 488.73382568]
[75.06259918 483.18081665]
[62.86264420 474.31448364]
[53.25157166 462.69216919]
[46.83354568 449.04446411]
[44.01200867 434.22927856]
[44.96432495 419.17791748]
[49.63063049 404.83648682]
[57.71759796 392.10653687]
[68.71687317 381.78826904]
[81.93703461 374.53027344]
[96.54704285 370.78884888]
[96.54704285 355.78884888]
[96.54704285 340.78884888]
[96.54704285 325.78884888]
[96.54704285 310.78884888]
[96.54704285 295.78884888]
[96.54704285 280.78884888]
[96.54704285 265.78884888]
[96.54704285 250.78884888]
[96.54704285 235.78884888]
[86.95641327 221.12377930]
[96.21458435 205.23928833]
[95.90660858 190.24244690]
[86.01689148 175.77738953]
[94.94697571 159.70616150]
[94.33115387 144.71881104]
[77.80682373 139.23481750]
[64.59335327 127.89762115]
[56.66197968 112.39855194]
[55.19594193 95.04981995]
[40.76855850 90.94487000]
[26.34117317 86.83992767]
[19.74888611 88.09864044]
[14.34649372 86.09813690]
[11.41225624 82.25893402]
[-2.83443618 77.56513214]
[-17.08112907 72.87133026]
[-26.69464302 84.61632538]
[-39.90368271 92.09199524]
[-54.92183685 94.28732300]
[-69.71802521 90.90541077]
[-82.29117584 82.40363312]
[-90.94088745 69.93178558]
[-94.49734497 55.17658234]
[-92.47956848 40.13354111]
[-85.16045380 26.83711433]
[-73.52983856 17.08553314]
[-59.16068268 12.19761753]
[-43.99628448 12.83441925]
[-30.08751106 18.90981483]
[-19.31540680 29.60215759]
[-13.13681126 43.46539688]
[-12.38732815 58.62464142]
[1.85936439 63.31844330]
[16.10605621 68.01224518]
[30.44611740 72.41254425]
[44.87350082 76.51748657]
[59.30088806 80.62243652]
[62.99269104 74.26350403]
[67.66919708 68.58937836]
[73.20596313 63.75103378]
[79.45567322 59.87720871]
[86.25202179 57.07097626]
[93.41418457 55.40700912]
[93.72216797 40.41016769]
[94.03014374 25.41333199]
[94.33811951 10.41649342]
[80.11328888 5.22681189]
[68.34584808 -4.30241346]
[60.31225204 -17.13752365]
[56.88392258 -31.88626099]
[58.43273544 -46.94879532]
[64.79068756 -60.69124985]
[75.26811981 -71.62295532]
[88.72852325 -78.55811310]
[103.71179962 -80.74445343]
[118.59268188 -77.94481659]
[131.75700378 -70.46289062]
[141.77680969 -59.11025238]
[147.56520081 -45.11835480]
[148.49432373 -30.00493431]
[144.46336365 -15.40938187]
[135.90960693 -2.91491270]
[123.76086426 6.12316608]
[109.33496094 10.72447109]
[109.02697754 25.72130966]
[108.71900177 40.71814728]
[108.41102600 55.71498489]
[116.35654449 57.99557877]
[123.75199890 61.68877029]
[130.34867859 66.67034912]
[135.92474365 72.77279663]
[140.29267883 79.79089355]
[154.63273621 75.39058685]
[168.97279358 70.99028778]
[183.31286621 66.58998871]
[197.65292358 62.18968964]
[208.57618713 50.74447250]
[223.01325989 54.40777206]
[237.35333252 50.00747299]
[239.59936523 34.91051865]
[248.18040466 22.28797531]
[261.39266968 14.64606094]
[276.61285400 13.50208282]
[290.81896973 19.08317757]
[301.19042969 30.28121567]
[305.66790771 44.87281799]
[303.36242676 59.96081161]
[294.73175049 72.54946136]
[281.48950195 80.13928986]
[266.26492310 81.22332001]
[252.08088684 75.58632660]
[241.75363159 64.34753418]
[227.41357422 68.74783325]
[217.51600647 79.87831116]
[202.05322266 76.52974701]
[187.71316528 80.93005371]
[173.37309265 85.33035278]
[159.03303528 89.73065186]
[144.69297791 94.13095093]
[142.07264709 116.18023682]
[129.24351501 134.30342102]
[109.31850433 144.10298157]
[109.93433380 159.09033203]
[118.89727783 168.42143250]
[119.06850433 180.95706177]
[110.90344238 189.93447876]
[111.21142578 204.93132019]
[119.98089600 214.44445801]
[119.89470673 226.98095703]
[111.54704285 235.78884888]
[111.54704285 250.78884888]
[111.54704285 265.78884888]
[111.54704285 280.78884888]
[111.54704285 295.78884888]
[111.54704285 310.78884888]
[111.54704285 325.78884888]
[111.54704285 340.78884888]
[111.54704285 355.78884888]
[111.54704285 370.78884888]
[126.15705872 374.53027344]
[139.37721252 381.78826904]
[150.37649536 392.10653687]
[158.46345520 404.83648682]
[163.12976074 419.17791748]
[164.08207703 434.22927856]
[161.26054382 449.04446411]
[154.84251404 462.69216919]
[145.23144531 474.31448364]
[133.03149414 483.18081665]
[119.00954437 488.73382568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 129]
[24 128]
[26 125]
[27 124]
[31 59]
[32 58]
[33 57]
[36 56]
[37 55]
[38 54]
[65 89]
[66 88]
[67 87]
[68 86]
[94 121]
[95 120]
[96 119]
[97 118]
[98 117]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
