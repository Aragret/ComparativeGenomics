%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCUAAUGGGGGGGGGGGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAxxxxxxxxxxCAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCCCCCCCCCCCUCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[83.76685333 395.56347656]
[71.20863342 387.21234131]
[61.12240982 375.99987793]
[54.14221573 362.63098145]
[50.70683289 347.94598389]
[51.03221130 332.86801147]
[55.09789276 318.34490967]
[62.64831543 305.28955078]
[73.20883942 294.52267456]
[86.11563873 286.72103882]
[100.55736542 282.37509155]
[99.93338776 267.38806152]
[99.30941010 252.40104675]
[98.68543243 237.41403198]
[98.06145477 222.42701721]
[97.43747711 207.44000244]
[96.81349945 192.45298767]
[96.18952179 177.46597290]
[95.56554413 162.47895813]
[94.94156647 147.49192810]
[94.31758881 132.50491333]
[88.32417297 127.99615479]
[86.50827026 142.88583374]
[72.70552063 148.75813293]
[60.71852112 139.74082947]
[62.53414917 124.85112000]
[76.33734131 118.97862244]
[70.34392548 114.46985626]
[55.77122498 118.02462006]
[41.19852066 121.57938385]
[27.24347687 131.20710754]
[14.12886715 120.46264648]
[20.82294083 104.88619995]
[37.64376068 107.00668335]
[52.21646118 103.45191956]
[66.78916168 99.89715576]
[80.19644928 82.32046509]
[97.69265747 80.25120544]
[101.70039368 65.79651642]
[105.70813751 51.34182739]
[91.58232117 46.27541733]
[77.86924744 40.17961502]
[64.64381409 33.08770370]
[51.97825623 25.03842545]
[39.94174957 16.07573891]
[28.60003281 6.24859810]
[18.01505470 -4.38932610]
[8.24462223 -15.77993107]
[-0.65789902 -27.86100388]
[-8.64388561 -40.56656265]
[-15.66972160 -53.82721329]
[-21.69703293 -67.57053375]
[-26.69289970 -81.72145081]
[-30.63003731 -96.20268250]
[-33.48693848 -110.93514252]
[-35.24800873 -125.83836365]
[-35.90361786 -140.83093262]
[-35.45019531 -155.83099365]
[-33.89020920 -170.75659180]
[-31.23218536 -185.52622986]
[-27.49064064 -200.05923462]
[-22.68600845 -214.27621460]
[-16.84453011 -228.09954834]
[-9.99811077 -241.45372009]
[-2.18414378 -254.26577759]
[6.55469275 -266.46578979]
[16.17067146 -277.98706055]
[26.61127090 -288.76672363]
[37.81946564 -298.74588013]
[49.73404694 -307.87002563]
[62.28993225 -316.08932495]
[75.41854858 -323.35891724]
[89.04819489 -329.63903809]
[103.10442352 -334.89541626]
[117.51046753 -339.09936523]
[132.18763733 -342.22790527]
[147.05578613 -344.26394653]
[162.03370667 -345.19635010]
[177.03956604 -345.02008057]
[191.99143982 -343.73602295]
[206.80766296 -341.35125732]
[221.40728760 -337.87878418]
[235.71058655 -333.33755493]
[249.63945007 -327.75241089]
[263.11779785 -321.15380859]
[276.07202148 -313.57781982]
[288.43133545 -305.06582642]
[300.12826538 -295.66430664]
[311.09893799 -285.42459106]
[321.28341675 -274.40261841]
[330.62606812 -262.65859985]
[339.07589722 -250.25666809]
[346.58670044 -237.26455688]
[353.11752319 -223.75323486]
[358.63262939 -209.79649353]
[363.10192871 -195.47055054]
[366.50103760 -180.85366821]
[368.81134033 -166.02566528]
[370.02026367 -151.06753540]
[370.12115479 -136.06095886]
[369.11352539 -121.08792877]
[367.00280762 -106.23019409]
[363.80059814 -91.56892395]
[359.52435303 -77.18417358]
[354.19741821 -63.15452957]
[347.84890747 -49.55660248]
[340.51345825 -36.46466827]
[332.23120117 -23.95022774]
[323.04733276 -12.08163357]
[313.01199341 -0.92370611]
[302.18002319 9.46261120]
[290.61056519 19.02059364]
[278.36682129 27.69803429]
[265.51565552 35.44754410]
[252.12727356 42.22679520]
[238.27478027 47.99876022]
[224.03382874 52.73191452]
[209.48222351 56.40040970]
[194.69941711 58.98420715]
[179.76615906 60.46919632]
[164.76402283 60.84726334]
[149.77493286 60.11634827]
[134.88075256 58.28044128]
[120.16282654 55.34956741]
[116.15508270 69.80425262]
[112.14734650 84.25894165]
[126.08603668 104.92597961]
[109.30461121 131.88093567]
[109.92858887 146.86795044]
[110.55256653 161.85498047]
[111.17653656 176.84199524]
[111.80051422 191.82901001]
[112.42449188 206.81602478]
[113.04846954 221.80303955]
[113.67244720 236.79005432]
[114.29642487 251.77706909]
[114.92040253 266.76409912]
[115.54438019 281.75109863]
[130.29739380 284.88153076]
[143.80802917 291.58331299]
[155.22700500 301.43508911]
[163.83651733 313.81762695]
[169.09536743 327.95251465]
[170.67297363 342.95126343]
[168.47016907 357.87097168]
[162.62541199 371.77386475]
[153.50613403 383.78591919]
[141.68556213 393.15206909]
[127.90675354 399.28356934]
[113.03585052 401.79495239]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[28 36]
[29 35]
[30 34]
[38 126]
[39 125]
[40 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
