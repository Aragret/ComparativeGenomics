%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUAGCCGGGGGGGGGGCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUxxxxxxxxxxCACAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUCCCCCCCCCCUCAUCCUCGCC\
) } def
/len { sequence length } bind def

/coor [
[101.17041016 395.05743408]
[87.14846802 389.50442505]
[74.94850922 380.63809204]
[65.33744049 369.01577759]
[58.91941452 355.36810303]
[56.09787750 340.55291748]
[57.05019379 325.50152588]
[61.71649933 311.16009521]
[69.80346680 298.43014526]
[80.80274200 288.11187744]
[94.02290344 280.85391235]
[108.63291168 277.11245728]
[108.63291168 262.11245728]
[108.63291168 247.11245728]
[108.63291168 232.11245728]
[108.63291168 217.11245728]
[108.63291168 202.11245728]
[108.63291168 187.11245728]
[108.63291168 172.11245728]
[108.63291168 157.11245728]
[108.63291168 142.11245728]
[93.60440826 141.35482788]
[80.16203308 135.54330444]
[69.89657593 125.67116547]
[63.91434860 113.19135284]
[49.09186935 115.49222565]
[34.26938629 117.79309845]
[19.44690323 120.09397888]
[15.06156063 134.71353149]
[4.76097536 145.97677612]
[-9.40966225 151.64738464]
[-24.63676262 150.59945679]
[-37.89697266 143.04104614]
[-46.55747223 130.47288513]
[-48.89870453 115.39039612]
[-44.45582581 100.78822327]
[-34.11096573 89.56562805]
[-19.91810608 83.95086670]
[-4.69525051 85.05876160]
[8.53509235 92.66932678]
[17.14602852 105.27149200]
[31.96851158 102.97061920]
[46.79099274 100.66974640]
[61.61347580 98.36886597]
[62.69410706 90.80998993]
[65.24819946 83.61408997]
[69.17486572 77.06537628]
[74.31902313 71.42250061]
[80.47749329 66.90834045]
[87.40704346 63.70119476]
[94.83396912 61.92772675]
[95.75737762 46.95617676]
[96.68079376 31.98462677]
[97.60420990 17.01307678]
[98.52761841 2.04152775]
[99.45103455 -12.93002224]
[96.84416199 -21.75045395]
[100.55021667 -28.19850159]
[90.60575867 -40.18789291]
[92.06674194 -55.33121490]
[103.55807495 -64.73784637]
[104.78868866 -79.68728638]
[106.01930237 -94.63671875]
[107.24991608 -109.58615112]
[92.82746124 -113.90893555]
[79.61911774 -121.13620758]
[68.20230103 -130.95201111]
[59.07609940 -142.92723083]
[52.63947678 -156.53839111]
[49.17381287 -171.19046021]
[48.83061218 -186.24288940]
[51.62487411 -201.03767395]
[57.43445206 -214.92805481]
[66.00537109 -227.30679321]
[76.96295166 -237.63273621]
[89.82817078 -245.45448303]
[104.03862000 -250.43011475]
[118.97307587 -252.34210205]
[133.97866821 -251.10687256]
[148.39942932 -246.77841187]
[161.60491943 -239.54594421]
[173.01788330 -229.72564697]
[182.13935852 -217.74682617]
[188.57063293 -204.13314819]
[192.03053284 -189.47972107]
[192.36781311 -174.42715454]
[189.56771851 -159.63346863]
[183.75268555 -145.74537659]
[175.17689514 -133.37001038]
[164.21525574 -123.04837799]
[151.34695435 -115.23168945]
[137.13455200 -110.26165009]
[122.19934845 -108.35553741]
[120.96873474 -93.40610504]
[119.73812103 -78.45667267]
[118.50750732 -63.50723648]
[128.30590820 -52.34806824]
[127.27085114 -37.16968536]
[115.49965668 -26.96788979]
[114.42258453 -12.00660896]
[113.49916840 2.96494126]
[112.57575226 17.93649101]
[111.65234375 32.90804291]
[110.72892761 47.87959290]
[109.80551147 62.85114288]
[122.47794342 67.72073364]
[132.93591309 76.86720276]
[139.75570679 89.33488464]
[141.91156006 103.70269012]
[138.92422485 118.24533081]
[153.50796509 121.75449371]
[168.09172058 125.26366425]
[182.67546082 128.77282715]
[197.25921631 132.28199768]
[211.87821960 135.64125061]
[226.53094482 138.85025024]
[241.18367004 142.05924988]
[255.83639526 145.26824951]
[272.60232544 142.75039673]
[279.66305542 158.16410828]
[266.80630493 169.21583557]
[252.62739563 159.92097473]
[237.97467041 156.71197510]
[223.32194519 153.50297546]
[208.66921997 150.29397583]
[201.41767883 151.94543457]
[193.75004578 146.86575317]
[179.16630554 143.35658264]
[164.58255005 139.84741211]
[149.99879456 136.33824158]
[135.41505432 132.82907104]
[123.63291168 142.11245728]
[123.63291168 157.11245728]
[123.63291168 172.11245728]
[123.63291168 187.11245728]
[123.63291168 202.11245728]
[123.63291168 217.11245728]
[123.63291168 232.11245728]
[123.63291168 247.11245728]
[123.63291168 262.11245728]
[123.63291168 277.11245728]
[138.24291992 280.85391235]
[151.46308899 288.11187744]
[162.46235657 298.43014526]
[170.54933167 311.16009521]
[175.21563721 325.50152588]
[176.16795349 340.55291748]
[173.34640503 355.36810303]
[166.92839050 369.01577759]
[157.31730652 380.63809204]
[145.11735535 389.50442505]
[131.09541321 395.05743408]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 44]
[26 43]
[27 42]
[28 41]
[51 105]
[52 104]
[53 103]
[54 102]
[55 101]
[56 100]
[58 99]
[61 96]
[62 95]
[63 94]
[64 93]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
