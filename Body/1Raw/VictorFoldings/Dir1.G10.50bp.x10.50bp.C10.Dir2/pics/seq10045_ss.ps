%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCAUCACCGGGGGGGGGGCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUxxxxxxxxxxACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCCCCCCCCCCCAUCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[90.03787231 359.08300781]
[76.54899597 352.35147095]
[65.06349182 342.58691406]
[56.24912262 330.35702515]
[50.61833954 316.37280273]
[48.49851227 301.44735718]
[50.01288223 286.44833374]
[55.07340622 272.24783325]
[63.38587189 259.67141724]
[74.46700287 249.45025635]
[87.67255402 242.17861938]
[102.23477936 238.27925110]
[101.92680359 223.28240967]
[101.61882782 208.28556824]
[101.31084442 193.28872681]
[101.00286865 178.29190063]
[100.69489288 163.29505920]
[100.38691711 148.29821777]
[100.07893372 133.30137634]
[99.77095795 118.30454254]
[88.79015350 108.08583832]
[73.80991364 108.85549927]
[58.82967377 109.62515259]
[45.44468689 118.06036377]
[32.33717346 110.98629761]
[18.95218658 119.42150116]
[5.84467316 112.34743500]
[-9.13556767 113.11709595]
[-24.11580849 113.88675690]
[-39.09605026 114.65641785]
[-44.52879715 128.88333130]
[-55.28306198 139.66598511]
[-69.49561310 145.13621521]
[-84.70402527 144.34628296]
[-98.27336121 137.43302917]
[-107.85264587 125.59422302]
[-111.78221130 110.88101959]
[-109.38123322 95.84255981]
[-101.06570435 83.08435822]
[-88.27632904 74.81683350]
[-73.22895813 72.47240448]
[-58.53062439 76.45723724]
[-46.72791290 86.08095551]
[-39.86571121 99.67617798]
[-24.88546944 98.90651703]
[-9.90522766 98.13685608]
[5.07501316 97.36719513]
[17.38851357 88.98704529]
[31.56751442 96.00605774]
[43.88101578 87.62590027]
[58.06001282 94.64491272]
[73.04025269 93.87525177]
[88.02050018 93.10559082]
[101.30783844 86.14524078]
[110.46977234 74.26841736]
[119.63170624 62.39159012]
[108.56768036 52.24954987]
[98.40361786 41.20573807]
[89.21276093 29.33973885]
[81.06133270 16.73703766]
[74.00805664 3.48844600]
[68.10376740 -10.31058121]
[63.39099121 -24.56061935]
[59.90369415 -39.15899658]
[57.66699600 -54.00052643]
[56.69701767 -68.97827911]
[57.00074768 -83.98432922]
[58.57599640 -98.91056061]
[61.41141129 -113.64942932]
[65.48656464 -128.09474182]
[70.77209473 -142.14241028]
[77.22991943 -155.69122314]
[84.81351471 -168.64355469]
[93.46822357 -180.90609741]
[103.13169861 -192.39047241]
[113.73432159 -203.01396179]
[125.19967651 -212.69999695]
[137.44517517 -221.37879944]
[150.38258362 -228.98783875]
[163.91867065 -235.47229004]
[177.95591736 -240.78543091]
[192.39318848 -244.88897705]
[207.12644958 -247.75337219]
[222.04956055 -249.35795593]
[237.05499268 -249.69119263]
[252.03460693 -248.75065613]
[266.88052368 -246.54315186]
[281.48571777 -243.08456421]
[295.74499512 -238.39981079]
[309.55560303 -232.52265930]
[322.81802368 -225.49545288]
[335.43673706 -217.36880493]
[347.32080078 -208.20130920]
[358.38455200 -198.05897522]
[368.54833984 -187.01490784]
[377.73889160 -175.14866638]
[385.88998413 -162.54576111]
[392.94293213 -149.29698181]
[398.84686279 -135.49780273]
[403.55926514 -121.24763489]
[407.04617310 -106.64916992]
[409.28250122 -91.80758667]
[410.25207520 -76.82981110]
[409.94796753 -61.82376480]
[408.37234497 -46.89757156]
[405.53652954 -32.15877533]
[401.46099854 -17.71357346]
[396.17510986 -3.66604018]
[389.71694946 9.88260651]
[382.13302612 22.83474731]
[373.47799683 35.09705734]
[363.81420898 46.58119202]
[353.21133423 57.20439911]
[341.74572754 66.89014435]
[329.50000000 75.56863403]
[316.56240845 83.17733765]
[303.02612305 89.66143799]
[288.98873901 94.97421265]
[274.55136108 99.07739258]
[259.81802368 101.94139862]
[244.89488220 103.54560089]
[229.88945007 103.87844086]
[214.90985107 102.93753052]
[200.06401062 100.72963715]
[185.45889282 97.27066803]
[171.19973755 92.58554840]
[157.38928223 86.70803833]
[144.12702942 79.68048859]
[131.50852966 71.55352783]
[122.34659576 83.43035126]
[113.18466187 95.30717468]
[114.76779938 117.99656677]
[115.07577515 132.99340820]
[115.38375092 147.99023438]
[115.69172668 162.98707581]
[115.99971008 177.98391724]
[116.30768585 192.98075867]
[116.61566162 207.97760010]
[116.92363739 222.97442627]
[117.23162079 237.97126770]
[131.94165039 241.26950073]
[145.43461609 247.99284363]
[156.92602539 257.75045776]
[165.74781799 269.97500610]
[171.38706970 283.95578003]
[173.51594543 298.87997437]
[172.01066589 313.87988281]
[166.95875549 328.08346558]
[158.65391541 340.66491699]
[147.57899475 350.89279175]
[134.37783813 358.17242432]
[119.81798553 362.08062744]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 53]
[22 52]
[23 51]
[25 49]
[27 47]
[28 46]
[29 45]
[30 44]
[54 131]
[55 130]
[56 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
