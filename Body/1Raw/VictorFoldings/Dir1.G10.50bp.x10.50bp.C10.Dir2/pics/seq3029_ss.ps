%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUAUUAAGGGGGGGGGGAGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGAUCUGAGUUCAGACCGxxxxxxxxxxAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCCCCCCCCCCCACUAUUAA\
) } def
/len { sequence length } bind def

/coor [
[103.00690460 459.39807129]
[91.79147339 449.33276367]
[83.20007324 436.95193481]
[77.69602966 422.92330933]
[75.57617188 408.00344849]
[76.95481110 392.99688721]
[81.75761414 378.71301270]
[89.72555542 365.92205811]
[100.42894745 355.31384277]
[113.29056549 347.46044922]
[127.61679840 342.78543091]
[126.36992645 327.83734131]
[125.12304688 312.88925171]
[123.87617493 297.94116211]
[122.62930298 282.99310303]
[121.38242340 268.04501343]
[120.13555145 253.09690857]
[118.88867950 238.14883423]
[117.64179993 223.20074463]
[116.39492798 208.25265503]
[114.06382751 193.43489075]
[110.66084290 178.82600403]
[107.25786591 164.21711731]
[103.85488892 149.60821533]
[91.07752991 141.75079346]
[76.50482941 145.30555725]
[61.93212891 148.86032104]
[47.35942459 152.41508484]
[32.78672028 155.96983337]
[23.25893021 168.87722778]
[7.22231531 169.33171082]
[-3.02120328 156.98466492]
[0.38632467 141.30766296]
[14.83093548 134.32676697]
[29.23196030 141.39714050]
[43.80466080 137.84237671]
[58.37736511 134.28761292]
[72.95006561 130.73284912]
[87.52277374 127.17809296]
[76.45429230 115.76966858]
[73.24918365 101.06676483]
[78.00724792 87.68606567]
[88.45796967 79.37053680]
[85.66564941 64.63273621]
[82.87332153 49.89492798]
[80.08100128 35.15711975]
[77.28867340 20.41931534]
[73.13079071 6.00709915]
[67.64375305 -7.95329094]
[62.15672684 -21.91368103]
[54.97421646 -35.08226395]
[46.20800781 -47.25410080]
[38.60248566 -52.43172836]
[37.38915634 -59.77158356]
[29.89299202 -65.10631561]
[28.83262444 -72.46982574]
[20.58033562 -84.99578857]
[12.32804585 -97.52175140]
[4.07575703 -110.04771423]
[-10.81920719 -116.90862274]
[-12.05532551 -133.26110840]
[1.63901424 -142.28314209]
[16.17625046 -134.69363403]
[16.60171890 -118.30000305]
[24.85400772 -105.77404022]
[33.10629654 -93.24807739]
[41.35858536 -80.72211456]
[49.74073029 -68.28267670]
[58.37984467 -56.02030563]
[67.14604950 -43.84846878]
[67.11036682 -58.84842682]
[73.47772217 -72.42991638]
[85.03093719 -81.99669647]
[99.56149292 -85.71998596]
[114.29174042 -82.88804626]
[126.40583801 -74.04222107]
[133.58805847 -60.87348175]
[134.46545410 -45.89916229]
[128.87030029 -31.98175621]
[117.87216949 -21.78170776]
[103.57344818 -17.24885750]
[88.70749664 -19.24970627]
[76.11711121 -27.40071297]
[81.60414886 -13.44032192]
[87.09117889 0.52006763]
[92.01979065 -13.64710426]
[103.73331451 -23.01691628]
[118.63701630 -24.71389198]
[132.15713501 -18.21725273]
[140.14453125 -5.52073240]
[140.14796448 9.47926712]
[132.16638184 22.17943764]
[118.64922333 28.68226051]
[103.74475098 26.99209976]
[92.02648163 17.62699127]
[94.81880951 32.36479568]
[97.61112976 47.10260391]
[100.40345764 61.84040833]
[103.19577789 76.57821655]
[124.89936066 90.16303253]
[123.20287323 118.86680603]
[137.84637451 115.61598206]
[152.48986816 112.36515808]
[167.13337708 109.11433411]
[174.18901062 95.15897369]
[188.58453369 89.05136871]
[203.52282715 93.67535400]
[211.95050049 106.84761810]
[209.88824463 122.34861755]
[198.30979919 132.85926819]
[182.68214417 133.41674805]
[170.38420105 123.75783539]
[155.74070740 127.00865936]
[141.09719849 130.25949097]
[126.45369720 133.51031494]
[118.46378326 146.20524597]
[121.86676025 160.81413269]
[125.26973724 175.42301941]
[128.67271423 190.03192139]
[136.92990112 177.50918579]
[151.25372314 173.05632019]
[165.15536499 178.69053650]
[172.33724976 191.85946655]
[169.54589844 206.59745789]
[158.04582214 216.22805786]
[143.04669189 216.38850403]
[131.34301758 207.00578308]
[132.58988953 221.95387268]
[133.83676147 236.90194702]
[135.08363342 251.85003662]
[136.33050537 266.79812622]
[137.57739258 281.74621582]
[138.82426453 296.69430542]
[140.07113647 311.64239502]
[141.31800842 326.59048462]
[142.56488037 341.53857422]
[157.46766663 343.77548218]
[171.45265198 349.38949585]
[183.76564026 358.07781982]
[193.74259949 369.37191772]
[200.84550476 382.66271973]
[204.69129944 397.23345947]
[205.07258606 412.29837036]
[201.96879578 427.04501343]
[195.54730225 440.67810059]
[186.15443420 452.46243286]
[174.29672241 461.76251221]
[160.61363220 468.07678223]
[145.84309387 471.06469727]
[130.78164673 470.56515503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 119]
[22 118]
[23 117]
[24 116]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[43 99]
[44 98]
[45 97]
[46 96]
[47 95]
[48 85]
[49 84]
[50 83]
[51 70]
[52 69]
[54 68]
[56 67]
[57 66]
[58 65]
[59 64]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
