%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAGAAAAGGGGGGGGGGUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCxxxxxxxxxxGACCACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUCCCCCCCCCCUAGAAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.05905151 350.13757324]
[71.21311188 344.12155151]
[59.50444794 334.59213257]
[50.80192184 322.25646973]
[45.75131989 308.02993774]
[44.72742844 292.96826172]
[47.80622864 278.18911743]
[54.75925064 264.78918457]
[65.07053375 253.76284790]
[77.97491455 245.92832947]
[92.51480103 241.86701965]
[92.51480103 226.86701965]
[92.51480103 211.86701965]
[92.51480103 196.86701965]
[92.51480103 181.86701965]
[92.51480103 166.86701965]
[92.51480103 151.86701965]
[92.51480103 136.86701965]
[92.51480103 121.86702728]
[92.51480103 106.86702728]
[89.34870911 99.39307404]
[92.67408752 91.55577850]
[92.98614502 76.55902863]
[93.29819489 61.56227112]
[93.61025238 46.56551743]
[78.65573120 45.33953857]
[63.80376053 43.20414734]
[49.10960007 40.16728973]
[34.62791061 36.24026489]
[20.41256523 31.43767929]
[6.51644707 25.77740097]
[-7.00874996 19.28048706]
[-20.11271095 11.97110462]
[-32.74668503 3.87644553]
[-44.86367798 -4.97337627]
[-56.41861343 -14.54543972]
[-67.36849976 -24.80413437]
[-77.67260742 -35.71129990]
[-87.29260254 -47.22635651]
[-96.19269562 -59.30647278]
[-104.33978271 -71.90670013]
[-111.70355225 -84.98017883]
[-118.25661469 -98.47826385]
[-123.97458649 -112.35073853]
[-128.83619690 -126.54600525]
[-132.82336426 -141.01124573]
[-135.92124939 -155.69267273]
[-138.11833191 -170.53562927]
[-139.40644836 -185.48493958]
[-139.78079224 -200.48495483]
[-139.23997498 -215.47990417]
[-137.78601074 -230.41398621]
[-135.42430115 -245.23165894]
[-132.16365051 -259.87777710]
[-128.01617432 -274.29788208]
[-122.99729156 -288.43829346]
[-117.12569427 -302.24645996]
[-110.42321014 -315.67098999]
[-102.91477966 -328.66192627]
[-94.62833405 -341.17092896]
[-85.59470367 -353.15151978]
[-75.84748840 -364.55908203]
[-65.42295074 -375.35119629]
[-54.35986710 -385.48773193]
[-42.69940186 -394.93093872]
[-30.48492432 -403.64572144]
[-17.76187706 -411.59963989]
[-4.57759142 -418.76312256]
[9.01888657 -425.10952759]
[22.97697639 -430.61520386]
[37.24475479 -435.25970459]
[51.76913834 -439.02575684]
[66.49610138 -441.89932251]
[81.37085724 -443.86972046]
[96.33807373 -444.92965698]
[111.34206390 -445.07513428]
[126.32701111 -444.30563354]
[141.23718262 -442.62402344]
[156.01708984 -440.03656006]
[170.61177063 -436.55285645]
[184.96691895 -432.18588257]
[199.02914429 -426.95187378]
[212.74612427 -420.87033081]
[226.06683350 -413.96383667]
[238.94171143 -406.25808716]
[251.32287598 -397.78179932]
[263.16427612 -388.56646729]
[274.42181396 -378.64636230]
[285.05364990 -368.05841064]
[295.02023315 -356.84197998]
[304.28448486 -345.03881836]
[312.81192017 -332.69281006]
[320.57083130 -319.84991455]
[327.53234863 -306.55789185]
[333.67059326 -292.86618042]
[338.96270752 -278.82571411]
[343.38903809 -264.48876953]
[346.93307495 -249.90861511]
[349.58163452 -235.13952637]
[351.32492065 -220.23645020]
[352.15637207 -205.25480652]
[352.07296753 -190.25035095]
[351.07495117 -175.27886963]
[349.16610718 -160.39610291]
[346.35348511 -145.65737915]
[342.64755249 -131.11753845]
[338.06210327 -116.83066559]
[332.61419678 -102.84992981]
[326.32409668 -89.22731781]
[319.21520996 -76.01351166]
[311.31396484 -63.25767517]
[302.64978027 -51.00725555]
[293.25488281 -39.30783081]
[283.16418457 -28.20291710]
[272.41528320 -17.73382759]
[261.04812622 -7.93951178]
[249.10502625 1.14359832]
[236.63037109 9.48171139]
[223.67060852 17.04380989]
[210.27394104 23.80175972]
[196.49018860 29.73042297]
[182.37063599 34.80774307]
[167.96781921 39.01483536]
[153.33529663 42.33604431]
[138.52752686 44.75901794]
[123.59958649 46.27473831]
[108.60700989 46.87757492]
[108.29495239 61.87432861]
[107.98289490 76.87107849]
[107.67083740 91.86783600]
[107.51480103 106.86702728]
[107.51480103 121.86702728]
[107.51480103 136.86701965]
[107.51480103 151.86701965]
[107.51480103 166.86701965]
[107.51480103 181.86701965]
[107.51480103 196.86701965]
[107.51480103 211.86701965]
[107.51480103 226.86701965]
[107.51480103 241.86701965]
[122.05468750 245.92832947]
[134.95907593 253.76284790]
[145.27035522 264.78918457]
[152.22337341 278.18911743]
[155.30216980 292.96826172]
[154.27828979 308.02993774]
[149.22767639 322.25646973]
[140.52516174 334.59213257]
[128.81649780 344.12155151]
[114.97055817 350.13757324]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[25 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
