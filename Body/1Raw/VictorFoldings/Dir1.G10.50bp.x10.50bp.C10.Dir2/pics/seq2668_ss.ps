%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGUUAAAAAGGGGGGGGGGAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCxxxxxxxxxxCGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUCCCCCCCCCCAGGUUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 386.36157227]
[71.19830322 380.34555054]
[59.48964310 370.81613159]
[50.78712082 358.48046875]
[45.73651886 344.25393677]
[44.71262741 329.19226074]
[47.79142761 314.41308594]
[54.74444962 301.01315308]
[65.05573273 289.98684692]
[77.96011353 282.15231323]
[92.50000000 278.09100342]
[92.50000000 263.09100342]
[92.50000000 248.09101868]
[92.50000000 233.09101868]
[92.50000000 218.09101868]
[92.50000000 203.09101868]
[92.50000000 188.09101868]
[92.50000000 173.09101868]
[92.50000000 158.09101868]
[92.50000000 143.09101868]
[92.50000000 128.09101868]
[92.50000000 113.09101105]
[89.40167999 98.41448975]
[83.33866882 84.69443512]
[77.27565002 70.97438049]
[71.21263885 57.25432587]
[65.14962769 43.53427124]
[59.08661270 29.81421852]
[53.02359772 16.09416580]
[46.96058655 2.37411165]
[32.75532150 7.22177315]
[18.18160820 10.81290627]
[3.35036206 13.12017918]
[-11.62553883 14.12603188]
[-26.63211823 13.82281017]
[-41.55516434 12.21282101]
[-56.28110123 9.30831814]
[-70.69785309 5.13140631]
[-84.69570160 -0.28612503]
[-98.16810608 -6.90304422]
[-111.01254272 -14.66899204]
[-123.13124084 -23.52486229]
[-134.43197632 -33.40325928]
[-144.82875061 -44.22899628]
[-154.24241638 -55.91968155]
[-162.60134888 -68.38634491]
[-169.84191895 -81.53410339]
[-175.90901184 -95.26289368]
[-180.75648499 -109.46822357]
[-184.34741211 -124.04198456]
[-186.65447998 -138.87326050]
[-187.66011047 -153.84918213]
[-187.35668945 -168.85575867]
[-185.74649048 -183.77877808]
[-182.84178162 -198.50466919]
[-178.66465759 -212.92137146]
[-173.24693298 -226.91914368]
[-166.62982178 -240.39144897]
[-158.86369324 -253.23577881]
[-150.00765991 -265.35433960]
[-140.12910461 -276.65496826]
[-129.30322266 -287.05157471]
[-117.61240387 -296.46508789]
[-105.14562225 -304.82382202]
[-91.99776459 -312.06420898]
[-78.26889038 -318.13113403]
[-64.06349182 -322.97839355]
[-49.48967743 -326.56912231]
[-34.65836716 -328.87597656]
[-19.68243599 -329.88140869]
[-4.67586517 -329.57775879]
[10.24713612 -327.96734619]
[24.97299194 -325.06243896]
[39.38962555 -320.88513184]
[53.38732147 -315.46719360]
[66.85954285 -308.84988403]
[79.70375824 -301.08358765]
[91.82221222 -292.22738647]
[103.12267303 -282.34866333]
[113.51913452 -271.52264404]
[122.93247986 -259.83169556]
[131.29106140 -247.36479187]
[138.53125000 -234.21682739]
[144.59797668 -220.48786926]
[149.44503784 -206.28240967]
[153.03555298 -191.70854187]
[155.34220886 -176.87719727]
[156.34742737 -161.90124512]
[156.04357910 -146.89468384]
[154.43295288 -131.97171021]
[151.52783203 -117.24589539]
[147.35032654 -102.82931519]
[141.93220520 -88.83169556]
[135.31471252 -75.35956573]
[127.54822540 -62.51546478]
[118.69184113 -50.39713669]
[108.81297302 -39.09681320]
[97.98680115 -28.70050049]
[86.29571533 -19.28732109]
[73.82870483 -10.92891693]
[60.68064117 -3.68890142]
[66.74365234 10.03115177]
[72.80666351 23.75120544]
[78.86968231 37.47126007]
[84.93269348 51.19131470]
[90.99570465 64.91136932]
[97.05871582 78.63142395]
[103.12173462 92.35147095]
[115.03393555 81.81607819]
[132.63314819 78.77795410]
[147.45089722 81.10905457]
[162.26866150 83.44015503]
[172.44787598 71.84760284]
[187.28485107 67.62059784]
[202.04516602 72.10795593]
[212.01887512 83.87777710]
[214.02339172 99.17436218]
[207.41906738 113.11662292]
[194.31333923 121.25563049]
[178.88819885 120.99426270]
[166.06573486 112.41591644]
[159.93756104 98.25791931]
[145.11979675 95.92681122]
[130.30204773 93.59571075]
[124.60153198 98.46953583]
[134.34899902 109.87071991]
[122.94764709 119.61798859]
[113.20050812 108.21718597]
[107.50000000 113.09101105]
[107.50000000 128.09101868]
[107.50000000 143.09101868]
[107.50000000 158.09101868]
[107.50000000 173.09101868]
[107.50000000 188.09101868]
[107.50000000 203.09101868]
[107.50000000 218.09101868]
[107.50000000 233.09101868]
[107.50000000 248.09101868]
[107.50000000 263.09100342]
[107.50000000 278.09100342]
[122.03988647 282.15231323]
[134.94427490 289.98684692]
[145.25555420 301.01315308]
[152.20857239 314.41308594]
[155.28736877 329.19226074]
[154.26348877 344.25393677]
[149.21287537 358.48046875]
[140.51036072 370.81613159]
[128.80169678 380.34555054]
[114.95575714 386.36157227]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[110 124]
[111 123]
[112 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
