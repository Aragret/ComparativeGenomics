%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGGCCAACCGGGGGGGGGGUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUxxxxxxxxxxAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUCCCCCCCCCCAUGGCCCACC\
) } def
/len { sequence length } bind def

/coor [
[133.53923035 448.32702637]
[119.69329071 442.31100464]
[107.98462677 432.78158569]
[99.28210449 420.44592285]
[94.23149872 406.21939087]
[93.20761108 391.15771484]
[96.28640747 376.37854004]
[103.23942566 362.97860718]
[113.55071259 351.95227051]
[126.45509338 344.11776733]
[140.99497986 340.05645752]
[140.99497986 325.05645752]
[140.99497986 310.05645752]
[140.99497986 295.05645752]
[140.99497986 280.05645752]
[140.99497986 265.05645752]
[140.99497986 250.05645752]
[140.99497986 235.05645752]
[140.99497986 220.05645752]
[140.99497986 205.05645752]
[137.28881836 190.52153015]
[130.10630798 177.35293579]
[125.79872131 175.15744019]
[122.85717010 170.19976807]
[122.91192627 163.48377991]
[116.28343201 150.02781677]
[109.65493011 136.57183838]
[87.51967621 139.53997803]
[65.53993988 129.09626770]
[51.72012329 106.67335510]
[52.31503296 78.33237457]
[37.67153168 75.08155060]
[23.02803040 71.83072662]
[8.38453007 68.57989502]
[-6.25897169 65.32907104]
[-20.90247345 62.07824707]
[-29.93056679 74.34255981]
[-43.16969681 81.86887360]
[-58.32610321 83.35319519]
[-72.77384949 78.53836823]
[-84.00977325 68.25859070]
[-90.08718109 54.29488373]
[-89.95313263 39.06655884]
[-83.63084412 25.21200752]
[-72.21569824 15.13161659]
[-57.68543243 10.57187366]
[-42.55750275 12.32278252]
[-29.45291901 20.08098793]
[-20.64212608 32.50233078]
[-17.65164757 47.43474579]
[-3.00814581 50.68556976]
[11.63535595 53.93639755]
[26.27885628 57.18722153]
[40.92235947 60.43804550]
[55.56586075 63.68887329]
[64.20497894 51.42650604]
[56.21506119 38.73157501]
[48.22514343 26.03664589]
[40.23522568 13.34171581]
[32.24531174 0.64678645]
[18.69123077 -9.53767490]
[24.72553635 -25.38139534]
[41.62054062 -23.96889114]
[44.94023895 -7.34312963]
[52.93015671 5.35179996]
[60.92007446 18.04673004]
[68.90998840 30.74165916]
[76.89990234 43.43658829]
[84.39990234 43.43658829]
[83.47436523 28.46516991]
[82.54882812 13.49375153]
[81.62329102 -1.47766757]
[76.00981903 -15.38769722]
[84.40048218 -27.82139206]
[99.40048218 -27.82077789]
[107.79013062 -15.38639450]
[102.17652130 -1.47766757]
[101.25098419 13.49375153]
[100.32543945 28.46516991]
[99.39990234 43.43658829]
[106.89990234 43.43658829]
[114.88982391 30.74165916]
[122.87973785 18.04673004]
[130.86965942 5.35179996]
[124.23548889 -8.57628059]
[126.20722961 -23.87712288]
[136.15570068 -35.66828537]
[150.90638733 -40.18724823]
[165.75238037 -35.99203110]
[175.95639038 -24.42130661]
[178.26235962 -9.16725636]
[171.93444824 4.90261030]
[158.99188232 13.29864979]
[143.56459045 13.34171581]
[135.57466125 26.03664589]
[127.58475494 38.73157501]
[119.59483337 51.42650604]
[135.60913086 65.66452789]
[143.78082275 84.16623688]
[143.52897644 103.18950653]
[135.87841797 119.28988647]
[123.11090088 129.94334412]
[129.73939514 143.39930725]
[136.36788940 156.85528564]
[143.27488708 170.17044067]
[150.45739746 183.33901978]
[151.15548706 168.35527039]
[155.35371399 153.95475769]
[162.81715393 140.94332886]
[173.12812805 130.04911804]
[185.70964050 121.88177490]
[199.85763550 116.89834595]
[214.78034973 115.37770844]
[229.64273071 117.40495300]
[243.61305237 122.86663818]
[255.90954590 131.45712280]
[265.84408569 142.69567871]
[272.86068726 155.95338440]
[276.56677246 170.48834229]
[276.75491333 185.48716736]
[273.41455078 200.11050415]
[266.73266602 213.54003906]
[257.08312988 225.02423096]
[245.00598145 233.92042542]
[231.17703247 239.73078918]
[216.37017822 242.13017273]
[201.41401672 240.98429871]
[187.14549255 236.35728455]
[174.36308289 228.50808716]
[163.78210449 217.87591553]
[155.99497986 205.05645752]
[155.99497986 220.05645752]
[155.99497986 235.05645752]
[155.99497986 250.05645752]
[155.99497986 265.05645752]
[155.99497986 280.05645752]
[155.99497986 295.05645752]
[155.99497986 310.05645752]
[155.99497986 325.05645752]
[155.99497986 340.05645752]
[170.53486633 344.11776733]
[183.43925476 351.95227051]
[193.75053406 362.97860718]
[200.70355225 376.37854004]
[203.78234863 391.15771484]
[202.75846863 406.21939087]
[197.70785522 420.44592285]
[189.00534058 432.78158569]
[177.29667664 442.31100464]
[163.45072937 448.32702637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 106]
[22 105]
[25 104]
[26 103]
[27 102]
[31 55]
[32 54]
[33 53]
[34 52]
[35 51]
[36 50]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[81 97]
[82 96]
[83 95]
[84 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
