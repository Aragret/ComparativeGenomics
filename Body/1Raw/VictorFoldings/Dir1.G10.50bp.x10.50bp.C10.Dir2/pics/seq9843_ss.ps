%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUUUUCCGGGGGGGGGGUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCUACCxxxxxxxxxxCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAACCCCCCCCCCAACCUUUUUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.78707886]
[71.19830322 359.77105713]
[59.48964310 350.24163818]
[50.78712082 337.90594482]
[45.73651886 323.67944336]
[44.71262741 308.61776733]
[47.79142761 293.83859253]
[54.74444962 280.43865967]
[65.05573273 269.41232300]
[77.96011353 261.57781982]
[92.50000000 257.51651001]
[92.50000000 242.51651001]
[92.50000000 227.51651001]
[92.50000000 212.51651001]
[92.50000000 197.51651001]
[92.50000000 182.51651001]
[92.50000000 167.51651001]
[92.50000000 152.51651001]
[92.50000000 137.51651001]
[92.50000000 122.51651001]
[92.50000000 107.51651001]
[91.56436920 92.54572296]
[89.69676208 77.66244507]
[87.82914734 62.77916336]
[72.85161591 63.68983841]
[57.84651566 63.63903046]
[42.87549973 62.62694168]
[28.00008583 60.65773392]
[13.28140640 57.73949432]
[-1.22006047 53.88422012]
[-15.44472313 49.10775375]
[-29.33412933 43.42971802]
[-42.83120346 36.87344742]
[-55.88048172 29.46588707]
[-68.42834473 21.23747253]
[-80.42322540 12.22201633]
[-91.81584167 2.45656562]
[-102.55937195 -8.01875019]
[-112.60966492 -19.16088676]
[-121.92543793 -30.92405510]
[-130.46838379 -43.25992203]
[-138.20343018 -56.11779404]
[-145.09875488 -69.44483185]
[-151.12605286 -83.18627930]
[-156.26055908 -97.28566742]
[-160.48114014 -111.68505096]
[-163.77049255 -126.32526398]
[-166.11506653 -141.14614868]
[-167.50524902 -156.08680725]
[-167.93531799 -171.08583069]
[-167.40351868 -186.08158875]
[-165.91201782 -201.01246643]
[-163.46696472 -215.81710815]
[-160.07838440 -230.43466187]
[-155.76020813 -244.80508423]
[-150.53019714 -258.86932373]
[-144.40982056 -272.56958008]
[-137.42424011 -285.84951782]
[-129.60217285 -298.65463257]
[-120.97573090 -310.93228149]
[-111.58038330 -322.63198853]
[-101.45474243 -333.70568848]
[-90.64039612 -344.10787964]
[-79.18180847 -353.79583740]
[-67.12604523 -362.72970581]
[-54.52265549 -370.87280273]
[-41.42342758 -378.19168091]
[-27.88219070 -384.65625000]
[-13.95458889 -390.23992920]
[0.30214694 -394.91979980]
[14.82943153 -398.67663574]
[29.56756783 -401.49496460]
[44.45599747 -403.36322021]
[59.43353271 -404.27374268]
[74.43863678 -404.22274780]
[89.40963745 -403.21051025]
[104.28503418 -401.24111938]
[119.00367737 -398.32272339]
[133.50509644 -394.46728516]
[147.72970581 -389.69067383]
[161.61904907 -384.01248169]
[175.11605835 -377.45605469]
[188.16525269 -370.04833984]
[200.71302795 -361.81979370]
[212.70780945 -352.80419922]
[224.10031128 -343.03863525]
[234.84373474 -332.56320190]
[244.89390564 -321.42095947]
[254.20953369 -309.65768433]
[262.75234985 -297.32171631]
[270.48724365 -284.46374512]
[277.38244629 -271.13662720]
[283.40957642 -257.39511108]
[288.54391479 -243.29568481]
[292.76434326 -228.89625549]
[296.05352783 -214.25599670]
[298.39794922 -199.43508911]
[299.78796387 -184.49441528]
[300.21786499 -169.49539185]
[299.68591309 -154.49963379]
[298.19424438 -139.56877136]
[295.74902344 -124.76416779]
[292.36026001 -110.14663696]
[288.04193115 -95.77626038]
[282.81176758 -81.71208954]
[276.69125366 -68.01190948]
[269.70553589 -54.73202896]
[261.88330078 -41.92700958]
[253.25672913 -29.64947128]
[243.86125183 -17.94986916]
[233.73548889 -6.87627554]
[222.92103577 3.52580261]
[211.46232605 13.21362114]
[199.40646362 22.14737129]
[186.80299377 30.29034233]
[173.70367432 37.60906982]
[160.16236877 44.07348251]
[146.23471069 49.65701675]
[131.97792053 54.33672714]
[117.45059204 58.09338379]
[102.71242523 60.91154861]
[104.58003998 75.79483032]
[106.44765472 90.67810822]
[116.79716492 79.82050323]
[131.78701782 79.26881409]
[142.90666199 89.33627319]
[143.84286499 104.30702209]
[134.06410217 115.68137360]
[119.12230682 117.00148773]
[107.50000000 107.51651001]
[107.50000000 122.51651001]
[107.50000000 137.51651001]
[107.50000000 152.51651001]
[107.50000000 167.51651001]
[107.50000000 182.51651001]
[107.50000000 197.51651001]
[107.50000000 212.51651001]
[107.50000000 227.51651001]
[107.50000000 242.51651001]
[107.50000000 257.51651001]
[122.03988647 261.57781982]
[134.94427490 269.41232300]
[145.25555420 280.43865967]
[152.20857239 293.83859253]
[155.28736877 308.61776733]
[154.26348877 323.67944336]
[149.21287537 337.90594482]
[140.51036072 350.24163818]
[128.80169678 359.77105713]
[114.95575714 365.78707886]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 123]
[23 122]
[24 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
