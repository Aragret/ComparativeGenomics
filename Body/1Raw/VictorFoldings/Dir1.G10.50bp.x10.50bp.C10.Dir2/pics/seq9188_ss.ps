%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUGGCUCAGGGGGGGGGGACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUAUUUCACUUUACAUCxxxxxxxxxxAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGCCCCCCCCCCUAUUGACUCA\
) } def
/len { sequence length } bind def

/coor [
[84.93849945 353.57479858]
[71.09255981 347.55877686]
[59.38389587 338.02935791]
[50.68136978 325.69369507]
[45.63076782 311.46716309]
[44.60687637 296.40548706]
[47.68567657 281.62631226]
[54.63869858 268.22637939]
[64.94998169 257.20007324]
[77.85436249 249.36555481]
[92.39424896 245.30424500]
[92.39424896 230.30424500]
[92.39424896 215.30424500]
[92.39424896 200.30424500]
[92.39424896 185.30424500]
[92.39424896 170.30424500]
[92.39424896 155.30424500]
[92.39424896 140.30424500]
[92.39424896 125.30423737]
[92.39424896 110.30423737]
[85.16606140 123.44779968]
[73.09111786 132.34700012]
[58.39687729 135.36018372]
[43.79398727 131.93153381]
[31.97624588 122.69351959]
[25.12366676 109.35027313]
[24.50034523 94.36322784]
[30.22126770 80.49704742]
[41.23109055 70.30961609]
[55.49884033 65.68021393]
[70.39253998 67.46282196]
[83.16474915 75.32860565]
[91.45828247 87.82371521]
[90.21141052 72.87562561]
[88.96453857 57.92753983]
[87.71765900 42.97945404]
[86.47078705 28.03136635]
[85.22391510 13.08327866]
[83.97703552 -1.86480832]
[82.73016357 -16.81289482]
[80.03015900 -20.40057755]
[78.78012848 -24.27465439]
[78.88722992 -27.93121147]
[80.10060883 -30.95142555]
[82.05427551 -33.04678726]
[74.31697083 -46.84695816]
[82.05427551 -59.57423019]
[82.05427551 -74.57422638]
[82.05427551 -89.57422638]
[67.13849640 -91.31666565]
[52.52586365 -94.77896881]
[38.41399765 -99.91431427]
[24.99374962 -106.65326691]
[12.44660664 -114.90467072]
[0.94225752 -124.55695343]
[-9.36371517 -135.47956848]
[-18.33193588 -147.52479553]
[-25.84111786 -160.52973938]
[-31.78970909 -174.31852722]
[-36.09726334 -188.70468140]
[-38.70552063 -203.49365234]
[-39.57921219 -218.48542786]
[-38.70652008 -233.47724915]
[-36.09925079 -248.26638794]
[-31.79265785 -262.65283203]
[-25.84498596 -276.44201660]
[-18.33667183 -289.44747925]
[-9.36925507 -301.49331665]
[0.93598866 -312.41659546]
[12.43969345 -322.06964111]
[24.98628616 -330.32189941]
[38.40608597 -337.06173706]
[52.51760864 -342.19802856]
[67.13000488 -345.66131592]
[82.04566956 -347.40472412]
[97.06287384 -347.40472412]
[111.97853851 -345.66131592]
[126.59093475 -342.19802856]
[140.70245361 -337.06173706]
[154.12225342 -330.32189941]
[166.66885376 -322.06964111]
[178.17256165 -312.41659546]
[188.47779846 -301.49331665]
[197.44522095 -289.44747925]
[204.95353699 -276.44201660]
[210.90119934 -262.65283203]
[215.20779419 -248.26638794]
[217.81506348 -233.47724915]
[218.68775940 -218.48542786]
[217.81407166 -203.49365234]
[215.20581055 -188.70468140]
[210.89825439 -174.31852722]
[204.94966125 -160.52973938]
[197.44047546 -147.52479553]
[188.47225952 -135.47956848]
[178.16629028 -124.55695343]
[166.66194153 -114.90467072]
[154.11479187 -106.65326691]
[140.69454956 -99.91431427]
[126.58267975 -94.77896881]
[111.97005463 -91.31666565]
[97.05427551 -89.57422638]
[97.05427551 -74.57422638]
[97.05427551 -59.57423019]
[104.79157257 -46.84695816]
[97.05427551 -33.04678726]
[97.67825317 -18.05977058]
[98.92512512 -3.11168289]
[100.17199707 11.83640385]
[101.41887665 26.78449059]
[102.66574860 41.73257828]
[103.91262054 56.68066406]
[105.15950012 71.62875366]
[106.40637207 86.57683563]
[115.42390442 98.56367493]
[129.44061279 103.90518188]
[143.45732117 109.24669647]
[157.47404480 114.58821106]
[171.49075317 119.92971802]
[185.50746155 125.27123260]
[202.46141052 125.26157379]
[207.16401672 141.55027771]
[192.81369019 150.57826233]
[180.16595459 139.28794861]
[166.14924622 133.94644165]
[152.13252258 128.60491943]
[138.11581421 123.26341248]
[124.09910583 117.92189789]
[110.08238983 112.58038330]
[108.70497131 111.47399902]
[107.39424896 110.30423737]
[107.39424896 125.30423737]
[107.39424896 140.30424500]
[107.39424896 155.30424500]
[107.39424896 170.30424500]
[107.39424896 185.30424500]
[107.39424896 200.30424500]
[107.39424896 215.30424500]
[107.39424896 230.30424500]
[107.39424896 245.30424500]
[121.93413544 249.36555481]
[134.83851624 257.20007324]
[145.14979553 268.22637939]
[152.10282898 281.62631226]
[155.18162537 296.40548706]
[154.15773010 311.46716309]
[149.10713196 325.69369507]
[140.40460205 338.02935791]
[128.69593811 347.55877686]
[114.85000610 353.57479858]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[38 109]
[39 108]
[40 107]
[45 106]
[47 104]
[48 103]
[49 102]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
