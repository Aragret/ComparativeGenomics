%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAAUUCGAGGGGGGGGGGACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGAAAxxxxxxxxxxACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUUUAAACAAAACGACCCCCCCCCCAUGAUUUCGA\
) } def
/len { sequence length } bind def

/coor [
[82.71299744 423.50885010]
[68.86705780 417.49282837]
[57.15839767 407.96340942]
[48.45587158 395.62774658]
[43.40526962 381.40121460]
[42.38137817 366.33953857]
[45.46017838 351.56036377]
[52.41320038 338.16046143]
[62.72448349 327.13412476]
[75.62886810 319.29962158]
[90.16875458 315.23828125]
[90.16875458 300.23828125]
[90.16875458 285.23828125]
[90.16875458 270.23828125]
[90.16875458 255.23829651]
[90.16875458 240.23829651]
[90.16875458 225.23829651]
[90.16875458 210.23829651]
[90.16875458 195.23829651]
[90.16875458 180.23829651]
[82.43144989 167.51101685]
[90.16875458 153.71084595]
[78.46913147 144.32368469]
[63.82562637 147.57450867]
[49.18212509 150.82534790]
[46.58130646 165.80212402]
[38.44287491 178.64091492]
[26.00787544 187.38386536]
[11.17256069 190.69775391]
[-3.80079365 188.07723999]
[-16.62885857 179.92192078]
[-25.35544777 167.47543335]
[-28.64982224 152.63577271]
[-26.00960922 137.66587830]
[-17.83742523 124.84855652]
[-5.37946844 116.13834381]
[9.46451378 112.86349487]
[24.43092155 115.52339935]
[37.23748779 123.71243286]
[45.93130112 136.18183899]
[60.57480240 132.93101501]
[75.21829987 129.68019104]
[65.02242279 110.81381226]
[66.74604797 90.60256195]
[78.56594849 75.56784058]
[95.60467529 69.87216949]
[97.16225433 54.95326233]
[98.71983337 40.03434753]
[100.27742004 25.11543655]
[101.83499908 10.19652462]
[87.16272736 7.00471544]
[72.93064117 2.21817994]
[59.31150436 -4.10497808]
[46.47064209 -11.88800144]
[34.56393051 -21.03641129]
[23.73590469 -31.43915367]
[14.11800957 -42.96994781]
[5.82699394 -55.48882675]
[-1.03649437 -68.84381104]
[-6.38913965 -82.87279510]
[-10.16596508 -97.40547943]
[-12.32112503 -112.26544189]
[-12.82845592 -127.27230072]
[-11.68179989 -142.24388123]
[-8.89507675 -156.99845886]
[-4.50211477 -171.35690308]
[1.44376016 -185.14492798]
[8.87036991 -198.19517517]
[17.68756294 -210.34919739]
[27.78830719 -221.45947266]
[39.04998779 -231.39112854]
[51.33589554 -240.02359009]
[64.49689484 -247.25210571]
[78.37322235 -252.98889160]
[92.79643250 -257.16430664]
[107.59143829 -259.72769165]
[122.57865143 -260.64791870]
[137.57612610 -259.91381836]
[152.40180969 -257.53430176]
[166.87574768 -253.53823853]
[180.82221985 -247.97415161]
[194.07194519 -240.90957642]
[206.46406555 -232.43028259]
[217.84815979 -222.63919067]
[228.08604431 -211.65516663]
[237.05343628 -199.61154175]
[244.64147949 -186.65449524]
[250.75805664 -172.94134521]
[255.32893372 -158.63853455]
[258.29858398 -143.91969299]
[259.63101196 -128.96350098]
[259.31002808 -113.95149231]
[257.33950806 -99.06592560]
[253.74336243 -84.48748016]
[248.56529236 -70.39312744]
[241.86811829 -56.95396805]
[233.73313904 -44.33313370]
[224.25912476 -32.68383026]
[213.56108093 -22.14747238]
[201.76884460 -12.85195923]
[189.02558899 -4.91013193]
[175.48600769 1.58160412]
[161.31442261 6.54444504]
[146.68290710 9.91814709]
[131.76905823 11.66175556]
[116.75391388 11.75410557]
[115.19632721 26.67301750]
[113.63874817 41.59193039]
[112.08116913 56.51084137]
[110.52359009 71.42975616]
[120.79361725 75.91844177]
[129.13664246 84.11300659]
[134.21888733 95.18287659]
[135.06425476 107.82212067]
[131.22065735 120.40246582]
[122.86183929 131.18304443]
[136.87855530 136.52456665]
[150.89526367 141.86607361]
[164.91197205 147.20758057]
[180.08125305 141.98527527]
[193.54429626 150.71029663]
[194.97340393 166.68957520]
[183.27229309 177.66516113]
[167.41705322 175.21752930]
[159.57046509 161.22430420]
[145.55375671 155.88278198]
[131.53703308 150.54127502]
[117.52032471 145.19976807]
[105.16875458 153.71084595]
[112.90605164 167.51101685]
[105.16875458 180.23829651]
[105.16875458 195.23829651]
[105.16875458 210.23829651]
[105.16875458 225.23829651]
[105.16875458 240.23829651]
[105.16875458 255.23829651]
[105.16875458 270.23828125]
[105.16875458 285.23828125]
[105.16875458 300.23828125]
[105.16875458 315.23828125]
[119.70864105 319.29962158]
[132.61302185 327.13412476]
[142.92430115 338.16046143]
[149.87731934 351.56036377]
[152.95613098 366.33953857]
[151.93223572 381.40121460]
[146.88163757 395.62774658]
[138.17910767 407.96340942]
[126.47044373 417.49282837]
[112.62450409 423.50885010]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 42]
[24 41]
[25 40]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
