%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAAUAAUCGGGGGGGGGGUCCCAUAUUGUAACUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUxxxxxxxxxxAGCACAUACCAAGGCCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACCCCCCCCCCCGGGAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[50.88413620 474.18936157]
[37.03819656 468.17333984]
[25.32953644 458.64392090]
[16.62701225 446.30825806]
[11.57641029 432.08172607]
[10.55251884 417.02005005]
[13.63131714 402.24087524]
[20.58433914 388.84094238]
[30.89562416 377.81460571]
[43.80000305 369.98010254]
[58.33989334 365.91879272]
[58.33989334 350.91879272]
[58.33989334 335.91879272]
[58.33989334 320.91879272]
[58.33989334 305.91879272]
[58.33989334 290.91879272]
[58.33989334 275.91879272]
[58.33989334 260.91879272]
[58.33989334 245.91879272]
[58.33989334 230.91879272]
[58.33989334 215.91879272]
[45.83941650 224.20964050]
[31.49945068 219.80903625]
[25.80134964 205.93345642]
[32.90996552 192.72483826]
[47.62947464 189.83760071]
[59.20082474 199.38150024]
[60.75840378 184.46258545]
[62.31598663 169.54367065]
[63.87356567 154.62477112]
[54.80440140 166.57258606]
[42.89442825 175.69137573]
[28.99447060 181.32974243]
[14.09750748 183.08486938]
[-0.73225397 180.83139038]
[-14.43540764 174.73027039]
[-26.03302956 165.21737671]
[-34.69661331 152.97229004]
[-39.80725098 138.86975098]
[-40.99984741 123.91724396]
[-38.18920898 109.18291473]
[-31.57612038 95.71937561]
[-21.63300514 84.48841095]
[-9.07018089 76.29235077]
[5.21489573 71.71669769]
[20.20172882 71.08832550]
[34.81969070 74.45212555]
[48.02450943 81.56780243]
[58.87285995 91.92701721]
[66.58975983 104.78973389]
[70.62393188 119.23706055]
[70.68788910 134.23147583]
[78.41197968 121.37307739]
[86.13606262 108.51467896]
[84.00468445 97.02368164]
[90.12666321 87.06842041]
[101.34314728 83.78566742]
[109.33306122 71.09074402]
[109.57995605 52.70816803]
[125.35238647 45.07728195]
[133.07647705 32.21887970]
[140.80055237 19.36047745]
[148.52464294 6.50207567]
[156.24873352 -6.35632706]
[163.97280884 -19.21472931]
[171.69689941 -32.07313156]
[158.40769958 -25.11631012]
[143.88876343 -21.34798241]
[128.89367676 -20.96374893]
[114.20079803 -23.98355484]
[100.57276154 -30.25065041]
[88.71693420 -39.43974304]
[79.24871063 -51.07386017]
[72.65953827 -64.54912567]
[69.29143524 -79.16609955]
[69.31923676 -94.16607666]
[72.74148560 -108.77046204]
[79.38054657 -122.22122192]
[88.89183044 -133.82015991]
[100.78163147 -142.96525574]
[114.43280029 -149.18179321]
[129.13677979 -152.14712524]
[144.13032532 -151.70732117]
[158.63520813 -147.88520813]
[171.89852905 -140.87919617]
[183.23184204 -131.05290222]
[192.04689026 -118.91638947]
[197.88612366 -105.09960938]
[200.44644165 -90.31973267]
[199.59495544 -75.34391785]
[195.37586975 -60.94950104]
[188.00700378 -47.88201523]
[201.10015869 -55.20111847]
[214.19331360 -62.52022552]
[212.76965332 -77.68244934]
[217.64225769 -92.11080933]
[227.96691895 -103.30550385]
[241.95483398 -109.32698822]
[257.18249512 -109.13199615]
[271.01162720 -102.75431824]
[281.04626465 -91.29891968]
[285.54782104 -76.75051880]
[283.73638916 -61.62971878]
[275.92581177 -48.55628586]
[263.46929932 -39.79527283]
[248.52503967 -36.86457825]
[233.68220520 -40.27196121]
[221.51242065 -49.42707062]
[208.41926575 -42.10796356]
[195.32611084 -34.78886032]
[184.55529785 -24.34904671]
[176.83120728 -11.49064445]
[169.10713196 1.36775804]
[161.38304138 14.22616005]
[153.65896606 27.08456230]
[145.93487549 39.94296646]
[138.21078491 52.80136871]
[140.83099365 64.65218353]
[134.44685364 75.44392395]
[122.02799225 79.08065796]
[114.03807831 91.77558899]
[113.85906219 108.52262115]
[98.99446106 116.23876190]
[91.27037811 129.09716797]
[83.54629517 141.95556641]
[78.79248047 156.18234253]
[77.23490143 171.10125732]
[75.67731476 186.02017212]
[74.11973572 200.93908691]
[73.33988953 215.91879272]
[73.33988953 230.91879272]
[73.33988953 245.91879272]
[73.33988953 260.91879272]
[73.33988953 275.91879272]
[73.33988953 290.91879272]
[73.33988953 305.91879272]
[73.33988953 320.91879272]
[73.33988953 335.91879272]
[73.33988953 350.91879272]
[73.33988953 365.91879272]
[87.87977600 369.98010254]
[100.78415680 377.81460571]
[111.09544373 388.84094238]
[118.04846191 402.24087524]
[121.12726593 417.02005005]
[120.10337067 432.08172607]
[115.05277252 446.30825806]
[106.35025024 458.64392090]
[94.64158630 468.17333984]
[80.79564667 474.18936157]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 129]
[28 128]
[29 127]
[30 126]
[52 125]
[53 124]
[54 123]
[57 121]
[58 120]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 112]
[66 111]
[92 110]
[93 109]
[94 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
