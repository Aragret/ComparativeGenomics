%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCUAUAGGGGGGGGGGCCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGxxxxxxxxxxAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUACCCCCCCCCCAACCCCCAUA\
) } def
/len { sequence length } bind def

/coor [
[87.64484406 360.30526733]
[73.79890442 354.28924561]
[62.09024429 344.75982666]
[53.38772202 332.42416382]
[48.33712006 318.19763184]
[47.31322861 303.13595581]
[50.39202499 288.35681152]
[57.34504700 274.95687866]
[67.65633392 263.93054199]
[80.56071472 256.09603882]
[95.10060120 252.03471375]
[95.10060120 237.03471375]
[95.10060120 222.03471375]
[95.10060120 207.03471375]
[95.10060120 192.03471375]
[95.10060120 177.03471375]
[95.10060120 162.03471375]
[95.10060120 147.03471375]
[95.10060120 132.03471375]
[95.10060120 117.03472137]
[85.11787415 105.83895111]
[70.21597290 104.12626648]
[55.31406784 102.41357422]
[49.00836563 104.72563171]
[43.34987259 103.62438202]
[39.83260727 100.30709839]
[25.01485062 97.97599030]
[10.19709206 95.64488983]
[-4.62066650 93.31378174]
[-10.45152283 107.21574402]
[-19.44046783 119.31790924]
[-31.06489372 128.91667175]
[-44.64897156 135.45396423]
[-59.40294647 138.54972839]
[-74.46903229 138.02397156]
[-88.97131348 133.90725708]
[-102.06665039 126.43894958]
[-112.99368286 116.05322266]
[-121.11714172 103.35389709]
[-125.96472931 89.07929230]
[-127.25462341 74.05931854]
[-124.91181946 59.16721344]
[-119.07254028 45.26879120]
[-110.07625580 33.17208099]
[-98.44601440 23.58037186]
[-84.85797882 17.05131340]
[-70.10212708 13.96449757]
[-55.03636169 14.49938679]
[-40.53657913 18.62488365]
[-27.44577789 26.10113525]
[-16.52503967 36.49348450]
[-8.40928364 49.19773483]
[-3.57034779 63.47527313]
[-2.28956246 78.49602509]
[12.52819538 80.82713318]
[27.34595299 83.15823364]
[42.16371155 85.48934174]
[57.02676010 87.51167297]
[71.92865753 89.22436523]
[86.83056641 90.93704987]
[101.05734253 86.18323517]
[111.93616486 75.85603333]
[102.66577148 64.04949951]
[94.54169464 51.42674637]
[87.63535309 38.09869766]
[82.00742340 24.18248749]
[77.70737457 9.80041409]
[74.77300262 -4.92113161]
[73.23007965 -19.85277176]
[73.09217072 -34.86328125]
[74.36049652 -49.82075119]
[77.02389526 -64.59372711]
[81.05897522 -79.05237579]
[86.43026733 -93.06964111]
[93.09057617 -106.52233124]
[100.98135376 -119.29221344]
[110.03326416 -131.26707458]
[120.16676331 -142.34167480]
[131.29278564 -152.41868591]
[143.31355286 -161.40956116]
[156.12341309 -169.23526001]
[169.60981750 -175.82702637]
[183.65423584 -181.12692261]
[198.13323975 -185.08837891]
[212.91957092 -187.67657471]
[227.88330078 -188.86877441]
[242.89291382 -188.65449524]
[257.81649780 -187.03561401]
[272.52291870 -184.02636719]
[286.88293457 -179.65319824]
[300.77032471 -173.95452881]
[314.06307983 -166.98045349]
[326.64431763 -158.79226685]
[338.40353394 -149.46191406]
[349.23733521 -139.07139587]
[359.05056763 -127.71202850]
[367.75695801 -115.48364258]
[375.27996826 -102.49369812]
[381.55352783 -88.85636139]
[386.52249146 -74.69147491]
[390.14315796 -60.12352753]
[392.38375854 -45.28054428]
[393.22457886 -30.29296684]
[392.65823364 -15.29250908]
[390.68969727 -0.41100031]
[387.33624268 14.22077751]
[382.62738037 28.47423744]
[376.60449219 42.22411728]
[369.32049561 55.34957886]
[360.83938599 67.73527527]
[351.23571777 79.27235413]
[340.59390259 89.85942841]
[329.00744629 99.40345001]
[316.57815552 107.82054901]
[303.41531372 115.03675842]
[289.63455200 120.98865509]
[275.35699463 125.62393188]
[260.70809937 128.90185547]
[245.81665039 130.79360962]
[230.81346130 131.28257751]
[215.83042908 130.36447144]
[200.99919128 128.04734802]
[186.45011902 124.35157013]
[172.31105042 119.30961609]
[158.70625305 112.96579742]
[145.75529480 105.37587738]
[133.57197571 96.60653687]
[122.26337433 86.73485565]
[111.38454437 97.06206512]
[114.58673096 106.02178955]
[110.10060120 117.03472137]
[110.10060120 132.03471375]
[110.10060120 147.03471375]
[110.10060120 162.03471375]
[110.10060120 177.03471375]
[110.10060120 192.03471375]
[110.10060120 207.03471375]
[110.10060120 222.03471375]
[110.10060120 237.03471375]
[110.10060120 252.03471375]
[124.64048767 256.09603882]
[137.54486084 263.93054199]
[147.85615540 274.95687866]
[154.80917358 288.35681152]
[157.88796997 303.13595581]
[156.86407471 318.19763184]
[151.81347656 332.42416382]
[143.11096191 344.75982666]
[131.40229797 354.28924561]
[117.55635834 360.30526733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 60]
[22 59]
[23 58]
[26 57]
[27 56]
[28 55]
[29 54]
[61 129]
[62 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
