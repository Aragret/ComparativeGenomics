%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUGGGGGGGGGGGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGCCCCCCCCCCUCCUACUUCU\
) } def
/len { sequence length } bind def

/coor [
[35.84206009 662.04956055]
[21.35236931 657.84112549]
[8.44613934 650.02496338]
[-1.99666142 639.13415527]
[-9.26402569 625.91113281]
[-12.86045170 611.25756836]
[-12.54073048 596.17242432]
[-8.32666016 581.68438721]
[-0.50556266 568.78118896]
[10.38930511 558.34259033]
[23.61511421 551.08032227]
[38.27010727 547.48956299]
[38.58216476 532.49279785]
[38.89421844 517.49603271]
[39.20627594 502.49929810]
[39.51833344 487.50253296]
[39.83038712 472.50576782]
[40.14244461 457.50903320]
[40.45450211 442.51226807]
[40.76655579 427.51550293]
[41.07861328 412.51876831]
[41.39067078 397.52200317]
[30.29541016 407.61633301]
[15.31548214 408.39202881]
[3.23693562 399.49771118]
[-0.46852753 384.96261597]
[5.87770319 371.37124634]
[19.40072250 364.88064575]
[33.97447205 368.43109131]
[42.99702072 380.41464233]
[45.48213577 365.62191772]
[47.96725464 350.82922363]
[50.45237350 336.03652954]
[48.66079712 332.92883301]
[48.32360077 328.78298950]
[49.91913986 324.31011963]
[53.58167267 320.41070557]
[56.98464966 305.80178833]
[60.38762665 291.19290161]
[63.79060745 276.58401489]
[66.88893127 261.90750122]
[69.68125153 247.16969299]
[72.47357941 232.43188477]
[67.24076843 218.48674011]
[77.41178894 206.36811829]
[80.20411682 191.63032532]
[82.99643707 176.89251709]
[85.78876495 162.15470886]
[80.55595398 148.20956421]
[90.72698212 136.09095764]
[93.51930237 121.35314941]
[96.31163025 106.61534119]
[90.34535217 109.05525970]
[82.93779755 108.12800598]
[75.66413116 103.32444000]
[70.22686768 94.79609680]
[68.19889069 83.36952209]
[70.77445984 70.46620178]
[70.15048218 55.47918320]
[69.52650452 40.49216843]
[68.59088135 25.52137756]
[67.34400177 10.57328987]
[52.49357224 7.90362263]
[38.84053421 1.48046899]
[27.31577110 -8.25822926]
[18.70506287 -20.64847183]
[13.59550095 -34.84547043]
[12.33546543 -49.88125229]
[15.01086712 -64.73065186]
[21.43929100 -78.38121033]
[31.18243980 -89.90221405]
[43.57600784 -98.50814056]
[57.77497864 -103.61221313]
[72.81124115 -104.86644745]
[87.65960693 -102.18531036]
[101.30768585 -95.75161743]
[112.82492065 -86.00402069]
[121.42606354 -73.60713196]
[126.52465820 -59.40619278]
[127.77307892 -44.36944199]
[125.08621216 -29.52211380]
[118.64724731 -15.87652206]
[108.89521027 -4.36304760]
[96.49500275 4.23330307]
[82.29209137 9.32641602]
[83.53896332 24.27450180]
[86.59156799 28.02379036]
[87.27822113 33.74740982]
[84.51352692 39.86819077]
[85.13750458 54.85520935]
[85.76147461 69.84222412]
[92.34577179 73.43347931]
[105.51435089 80.61598969]
[112.09864044 84.20724487]
[125.03669739 76.61733246]
[137.97476196 69.02742767]
[139.35559082 53.57191086]
[149.58258057 41.90193558]
[164.72323608 38.50483704]
[178.95565796 44.68687820]
[186.80720520 58.07093048]
[185.25878906 73.51055145]
[174.90580750 85.06890106]
[159.72918701 88.30155182]
[145.56466675 81.96547699]
[132.62660217 89.55538940]
[119.68855286 97.14529419]
[111.04943848 109.40766907]
[108.25711060 124.14546967]
[105.46479034 138.88327026]
[110.49787140 153.88256836]
[100.52657318 164.94703674]
[97.73424530 179.68484497]
[94.94192505 194.42263794]
[92.14959717 209.16044617]
[97.18268585 224.15974426]
[87.21138000 235.22421265]
[84.41905975 249.96200562]
[81.62673187 264.69982910]
[83.47389984 271.15701294]
[81.96389008 276.72039795]
[78.39949799 279.98699951]
[74.99652100 294.59588623]
[71.59354401 309.20477295]
[68.19056702 323.81365967]
[65.24507904 338.52163696]
[62.75996399 353.31433105]
[60.27484512 368.10705566]
[57.78972626 382.89974976]
[56.38742447 397.83407593]
[56.07536697 412.83081055]
[55.76330948 427.82757568]
[55.45125580 442.82434082]
[55.13919830 457.82107544]
[54.82714081 472.81784058]
[54.51508713 487.81457520]
[54.20302963 502.81134033]
[53.89097214 517.80810547]
[53.57891846 532.80487061]
[53.26686096 547.80157471]
[67.75979614 551.99890137]
[80.67205811 559.80505371]
[91.12326813 570.68780518]
[98.40084076 583.90521240]
[102.00858307 598.55603027]
[101.70050812 613.64135742]
[97.49762726 628.13269043]
[89.68649292 641.04193115]
[78.79969025 651.48889160]
[65.57949829 658.76141357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[30 129]
[31 128]
[32 127]
[33 126]
[37 125]
[38 124]
[39 123]
[40 122]
[41 119]
[42 118]
[43 117]
[45 115]
[46 114]
[47 113]
[48 112]
[50 110]
[51 109]
[52 108]
[58 91]
[59 90]
[60 89]
[61 86]
[62 85]
[94 107]
[95 106]
[96 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
