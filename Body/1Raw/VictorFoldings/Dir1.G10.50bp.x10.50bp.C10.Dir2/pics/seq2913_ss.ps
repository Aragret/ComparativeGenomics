%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACCUCCGGGGGGGGGGGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAxxxxxxxxxxCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCUAUUGAUCCCCCCCCCCCCCCACCUCC\
) } def
/len { sequence length } bind def

/coor [
[172.59080505 524.24877930]
[158.74487305 518.23272705]
[147.03620911 508.70333862]
[138.33369446 496.36767578]
[133.28308105 482.14114380]
[132.25920105 467.07946777]
[135.33799744 452.30029297]
[142.29101562 438.90036011]
[152.60229492 427.87405396]
[165.50668335 420.03952026]
[180.04656982 415.97821045]
[180.04656982 400.97821045]
[180.04656982 385.97821045]
[180.04656982 370.97821045]
[180.04656982 355.97821045]
[180.04656982 340.97821045]
[180.04656982 325.97821045]
[180.04656982 310.97821045]
[180.04656982 295.97821045]
[180.04656982 280.97821045]
[176.49180603 266.40551758]
[169.58480835 253.09036255]
[156.85609436 245.35542297]
[157.36981201 229.54255676]
[150.46279907 216.22740173]
[143.55580139 202.91224670]
[136.64880371 189.59709167]
[129.74180603 176.28193665]
[122.83480835 162.96678162]
[116.92477417 158.44825745]
[115.92588806 149.30198669]
[109.29738617 135.84602356]
[102.66889191 122.39006042]
[92.45150757 124.58850861]
[81.07081604 121.82949829]
[70.98724365 113.65641022]
[64.77101135 100.82582092]
[50.12751007 97.57499695]
[35.48400879 94.32416534]
[20.84050751 91.07334137]
[6.58968973 98.44177246]
[-7.99702311 91.76290131]
[-11.72995377 76.16017914]
[-1.74551761 63.60269165]
[14.29708099 63.72345734]
[24.09133339 76.42984009]
[38.73483276 79.68066406]
[53.37833405 82.93149567]
[68.02183533 86.18231964]
[73.67134094 81.24945831]
[70.77684784 66.53137970]
[84.97034454 71.38373566]
[90.61985016 66.45087433]
[89.37297058 51.50278473]
[88.12609863 36.55469894]
[81.29325867 49.90806198]
[71.87963867 61.58641052]
[60.28128815 71.09841919]
[46.98616791 78.04389954]
[32.55361557 82.13064575]
[17.59083939 83.18672943]
[2.72734213 81.16770935]
[-11.41154766 76.15853882]
[-24.23098373 68.36995697]
[-35.19163513 58.12963486]
[-43.83236694 45.86840820]
[-49.78965759 32.10211945]
[-52.81286621 17.40993690]
[-52.77481079 2.40998483]
[-49.67708588 -12.26666641]
[-43.65001678 -26.00254822]
[-34.94717789 -38.21977234]
[-23.93470383 -48.40434265]
[-11.07591057 -56.12777710]
[3.08821511 -61.06513977]
[17.96176720 -63.00870514]
[32.91899109 -61.87671280]
[47.33061600 -57.71677780]
[60.59032440 -50.70392227]
[72.14025879 -41.13318253]
[81.49449921 -29.40721893]
[88.25949097 -16.01935577]
[92.15062714 -1.53284228]
[93.00392151 13.44878960]
[100.18643188 0.28020731]
[99.24771118 -16.09205055]
[113.10375214 -24.86371231]
[127.50065613 -17.01124382]
[127.62812042 -0.61259240]
[113.35501862 7.46271610]
[106.17250824 20.63129807]
[103.07418823 35.30782318]
[104.32106018 50.25591278]
[105.56793213 65.20399475]
[127.43537903 90.93682098]
[116.12485504 115.76156616]
[122.75335693 129.21752930]
[129.38185120 142.67349243]
[136.14996338 156.05978394]
[143.05696106 169.37493896]
[149.96395874 182.69009399]
[156.87095642 196.00524902]
[163.77796936 209.32040405]
[170.68496704 222.63555908]
[183.90769958 231.32289124]
[182.89996338 246.18336487]
[189.80696106 259.49850464]
[190.80131531 244.53150940]
[195.41931152 230.26007080]
[203.38148499 217.54771423]
[214.20608521 207.16368103]
[227.23811340 199.73628235]
[241.68902588 195.71495056]
[256.68441772 195.34298706]
[271.31692505 198.64291382]
[284.70117188 205.41505432]
[296.02728271 215.24963379]
[304.60995483 227.55158997]
[309.92984009 241.57652283]
[311.66503906 256.47583008]
[309.71054077 271.34793091]
[304.18466187 285.29299927]
[295.42172241 297.46719360]
[283.95196533 307.13388062]
[270.46942139 313.70812988]
[255.78987122 316.79214478]
[240.80158997 316.19934082]
[226.41148376 311.96557617]
[213.49028015 304.34701538]
[202.81982422 293.80465698]
[195.04656982 280.97821045]
[195.04656982 295.97821045]
[195.04656982 310.97821045]
[195.04656982 325.97821045]
[195.04656982 340.97821045]
[195.04656982 355.97821045]
[195.04656982 370.97821045]
[195.04656982 385.97821045]
[195.04656982 400.97821045]
[195.04656982 415.97821045]
[209.58645630 420.03952026]
[222.49082947 427.87405396]
[232.80212402 438.90036011]
[239.75514221 452.30029297]
[242.83393860 467.07946777]
[241.81004333 482.14114380]
[236.75944519 496.36767578]
[228.05691528 508.70333862]
[216.34826660 518.23272705]
[202.50231934 524.24877930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 107]
[22 106]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[29 99]
[31 98]
[32 97]
[33 96]
[37 49]
[38 48]
[39 47]
[40 46]
[53 94]
[54 93]
[55 92]
[84 91]
[85 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
