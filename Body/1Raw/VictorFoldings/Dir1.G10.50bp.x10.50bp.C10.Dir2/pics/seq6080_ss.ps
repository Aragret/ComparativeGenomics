%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACUAGACCGGGGGGGGGGAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCxxxxxxxxxxUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCACCCCCCCCCCUUACUAAACC\
) } def
/len { sequence length } bind def

/coor [
[81.75334930 429.97067261]
[67.90740967 423.95465088]
[56.19874954 414.42523193]
[47.49622726 402.08953857]
[42.44562531 387.86303711]
[41.42173386 372.80136108]
[44.50053024 358.02218628]
[51.45355225 344.62225342]
[61.76483917 333.59591675]
[74.66921997 325.76141357]
[89.20910645 321.70010376]
[89.20910645 306.70010376]
[89.20910645 291.70010376]
[89.20910645 276.70010376]
[89.20910645 261.70010376]
[89.20910645 246.70010376]
[89.20910645 231.70010376]
[89.20910645 216.70010376]
[89.20910645 201.70010376]
[89.20910645 186.70010376]
[86.47872925 182.71005249]
[86.27023315 176.94915771]
[89.53414917 171.07937622]
[90.15812683 156.09236145]
[90.78210449 141.10534668]
[91.40607452 126.11832428]
[80.85329437 121.32180023]
[72.83812714 112.30192566]
[69.02317810 100.35471344]
[70.42700958 87.41398621]
[55.43431091 86.94593811]
[40.44161606 86.47789764]
[33.43906784 100.03987122]
[21.24051285 109.21363831]
[6.26797438 112.17773438]
[-8.50573444 108.34364319]
[-20.14728546 98.47261810]
[-26.34523773 84.52456665]
[-25.86898613 69.26888275]
[-18.81308937 55.73459244]
[-6.57850027 46.60893631]
[8.40559387 43.70382309]
[23.16408920 47.59606171]
[34.76667786 57.51285172]
[40.90965652 71.48519897]
[55.90235138 71.95324707]
[70.89505005 72.42128754]
[83.06688690 63.65507889]
[87.37447357 49.28689575]
[91.68205261 34.91871262]
[84.44351959 21.12591171]
[89.01670074 6.61589289]
[102.21063232 -0.19994646]
[94.97209930 -13.99274635]
[99.54528046 -28.50276566]
[112.73921967 -35.31860352]
[117.04679871 -49.68678665]
[121.35438538 -64.05496979]
[125.66197205 -78.42315674]
[129.96955872 -92.79134369]
[134.27714539 -107.15952301]
[123.79549408 -124.22943115]
[129.06460571 -143.24136353]
[146.30093384 -152.20126343]
[149.70390320 -166.81015015]
[153.10688782 -181.41905212]
[156.50985718 -196.02793884]
[142.91696167 -202.51232910]
[131.03610229 -211.76754761]
[121.42294312 -223.36070251]
[114.52712250 -236.74957275]
[110.67118073 -251.30792236]
[110.03544617 -266.35485840]
[112.64967346 -281.18655396]
[118.39157104 -295.10937500]
[126.99259949 -307.47207642]
[138.05046082 -317.69644165]
[151.04795837 -325.30429077]
[165.37718201 -329.93972778]
[180.36793518 -331.38598633]
[195.31904602 -329.57543945]
[209.53125000 -324.59274292]
[222.33981323 -316.67092896]
[233.14562988 -306.18054199]
[241.44332886 -293.61224365]
[246.84480286 -279.55386353]
[249.09739685 -264.66293335]
[248.09576416 -249.63591003]
[243.88674927 -235.17568970]
[236.66722107 -221.95855713]
[226.77485657 -210.60270691]
[214.67233276 -201.63929749]
[200.92568970 -195.48754883]
[186.17790222 -192.43518066]
[171.11875916 -192.62495422]
[167.71577454 -178.01606750]
[164.31280518 -163.40718079]
[160.90982056 -148.79827881]
[168.55560303 -141.78390503]
[172.59988403 -132.14060974]
[172.23931885 -121.60863495]
[167.47218323 -112.11952972]
[159.11111450 -105.44191742]
[148.64532471 -102.85193634]
[144.33773804 -88.48375702]
[140.03015137 -74.11557007]
[135.72256470 -59.74738693]
[131.41497803 -45.37920380]
[127.10739899 -31.01101875]
[134.37542725 -18.06067848]
[130.21160889 -3.42793369]
[116.57881927 4.10763836]
[123.84684753 17.05797958]
[119.68302917 31.69072342]
[106.05023956 39.22629547]
[101.74265289 53.59447861]
[97.43506622 67.96266174]
[106.87517548 69.07968140]
[115.43969727 72.87537384]
[122.39950562 78.93774414]
[127.18862152 86.66606903]
[129.44984436 95.32971954]
[129.06047058 104.13699341]
[126.13631439 112.30735016]
[121.01422119 119.14062500]
[114.21537018 124.07695007]
[106.39309692 126.74230194]
[105.76911926 141.72932434]
[105.14514160 156.71633911]
[104.52116394 171.70335388]
[104.20910645 186.70010376]
[104.20910645 201.70010376]
[104.20910645 216.70010376]
[104.20910645 231.70010376]
[104.20910645 246.70010376]
[104.20910645 261.70010376]
[104.20910645 276.70010376]
[104.20910645 291.70010376]
[104.20910645 306.70010376]
[104.20910645 321.70010376]
[118.74899292 325.76141357]
[131.65338135 333.59591675]
[141.96466064 344.62225342]
[148.91767883 358.02218628]
[151.99647522 372.80136108]
[150.97257996 387.86303711]
[145.92198181 402.08953857]
[137.21946716 414.42523193]
[125.51080322 423.95465088]
[111.66486359 429.97067261]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[25 128]
[26 127]
[30 47]
[31 46]
[32 45]
[48 117]
[49 116]
[50 115]
[53 112]
[56 109]
[57 108]
[58 107]
[59 106]
[60 105]
[61 104]
[64 98]
[65 97]
[66 96]
[67 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
