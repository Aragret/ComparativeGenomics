%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUUUACAGGGGGGGGGGUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUxxxxxxxxxxCAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACCCCCCCCCCCUAAUUUACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.00921631]
[71.19830322 365.99319458]
[59.48964310 356.46377563]
[50.78712082 344.12811279]
[45.73651886 329.90158081]
[44.71262741 314.83990479]
[47.79142761 300.06072998]
[54.74444962 286.66079712]
[65.05573273 275.63446045]
[77.96011353 267.79995728]
[92.50000000 263.73864746]
[92.50000000 248.73864746]
[92.50000000 233.73864746]
[92.50000000 218.73864746]
[92.50000000 203.73864746]
[92.50000000 188.73864746]
[92.50000000 173.73864746]
[92.50000000 158.73864746]
[92.50000000 143.73864746]
[92.50000000 128.73864746]
[92.50000000 113.73865509]
[86.15287018 100.14770508]
[74.65106964 90.51917267]
[59.10268784 87.59368134]
[54.31016922 73.49116516]
[42.80836868 63.86263657]
[31.30656433 54.23411179]
[18.69543457 46.11256790]
[5.17124557 39.62440491]
[-8.35294437 33.13623810]
[-21.87713432 26.64807320]
[-35.40132523 20.15990829]
[-48.92551422 13.67174339]
[-62.44970322 7.18357801]
[-75.97389221 0.69541281]
[-91.76303101 1.70227432]
[-99.89137268 -10.77888298]
[-113.41556549 -17.26704788]
[-126.93975067 -23.75521278]
[-133.65481567 -23.63059616]
[-138.64282227 -26.52041817]
[-140.88301086 -30.80493164]
[-154.12559509 -37.85006714]
[-166.40036011 -28.77852821]
[-181.39714050 -25.93961334]
[-196.13830566 -29.89698982]
[-207.69699097 -39.86491776]
[-213.77819824 -53.86425781]
[-213.17453003 -69.11543274]
[-206.00581360 -82.59030914]
[-193.69541931 -91.61344147]
[-178.68757629 -94.39328003]
[-163.96211243 -90.37788391]
[-152.44276428 -80.36450958]
[-146.41673279 -66.34133148]
[-147.08045959 -51.09265137]
[-133.83787537 -44.04751968]
[-120.45159149 -37.27940369]
[-106.92739868 -30.79123878]
[-93.40320587 -24.30307388]
[-78.58141327 -25.77401161]
[-69.48572540 -12.82877731]
[-55.96154022 -6.34061193]
[-42.43734741 0.14755306]
[-28.91315842 6.63571835]
[-15.38896942 13.12388325]
[-1.86477935 19.61204910]
[11.65941048 26.10021400]
[25.18360138 32.58837891]
[17.96978378 19.43692017]
[17.05644417 4.46475220]
[22.61817169 -9.46604729]
[33.59178925 -19.69246864]
[47.87958527 -24.25963020]
[62.75029755 -22.29447365]
[75.36125183 -14.17265892]
[83.30173492 -1.44675088]
[85.05384064 13.45056820]
[80.28264618 27.67152786]
[69.90020752 38.49765015]
[55.89123154 43.85942078]
[40.93508911 42.73230743]
[52.43689346 52.36083221]
[63.93869781 61.98936081]
[78.66439056 64.22615814]
[84.27959442 79.01737213]
[95.78139496 88.64589691]
[90.30377960 74.68181610]
[79.71842957 64.05400085]
[73.61911774 50.35004044]
[72.80789948 35.37199402]
[77.39142609 21.08944511]
[86.76699829 9.38052559]
[99.70172119 1.78494334]
[114.49471283 -0.69849676]
[129.20071411 2.25677443]
[141.88589478 10.26214314]
[150.88220215 22.26491547]
[155.00660706 36.68674850]
[153.71678162 51.63118744]
[147.18232727 65.13307190]
[136.25910950 75.41909790]
[123.17089844 82.74702454]
[138.17008972 82.59098816]
[153.16928101 82.43495178]
[168.16845703 82.27891541]
[183.16764832 82.12287903]
[198.16683960 81.96684265]
[206.28479004 68.84806061]
[220.21641541 62.22135544]
[235.51620483 64.20128632]
[247.30203247 74.15606689]
[251.81309509 88.90916443]
[247.60992432 103.75291443]
[236.03373718 113.95073700]
[220.77845764 116.24853516]
[206.71199036 109.91309357]
[198.32287598 96.96603394]
[183.32368469 97.12207031]
[168.32449341 97.27810669]
[153.32531738 97.43414307]
[138.32612610 97.59017944]
[123.32693481 97.74621582]
[138.16729736 99.92881775]
[147.71301270 111.49943542]
[147.03562927 126.48413086]
[136.48486328 137.14627075]
[121.50810242 137.98097229]
[109.83788300 128.55728149]
[107.50000000 113.73865509]
[107.50000000 128.73864746]
[107.50000000 143.73864746]
[107.50000000 158.73864746]
[107.50000000 173.73864746]
[107.50000000 188.73864746]
[107.50000000 203.73864746]
[107.50000000 218.73864746]
[107.50000000 233.73864746]
[107.50000000 248.73864746]
[107.50000000 263.73864746]
[122.03988647 267.79995728]
[134.94427490 275.63446045]
[145.25555420 286.66079712]
[152.20857239 300.06072998]
[155.28736877 314.83990479]
[154.26348877 329.90158081]
[149.21287537 344.12811279]
[140.51036072 356.46377563]
[128.80169678 365.99319458]
[114.95575714 372.00921631]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 87]
[23 86]
[25 84]
[26 83]
[27 82]
[28 69]
[29 68]
[30 67]
[31 66]
[32 65]
[33 64]
[34 63]
[35 62]
[37 60]
[38 59]
[39 58]
[42 57]
[43 56]
[103 123]
[104 122]
[105 121]
[106 120]
[107 119]
[108 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
