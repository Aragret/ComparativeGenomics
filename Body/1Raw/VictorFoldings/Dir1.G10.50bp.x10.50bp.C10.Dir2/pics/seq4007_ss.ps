%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAACCCCCUGGGGGGGGGGUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCGAAxxxxxxxxxxCCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACCCCCCCCCCCUAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[88.63917542 409.18695068]
[74.79323578 403.17092896]
[63.08457565 393.64151001]
[54.38205338 381.30584717]
[49.33145142 367.07931519]
[48.30755997 352.01763916]
[51.38635635 337.23846436]
[58.33937836 323.83856201]
[68.65066528 312.81222534]
[81.55504608 304.97772217]
[96.09493256 300.91638184]
[96.09493256 285.91638184]
[96.09493256 270.91638184]
[96.09493256 255.91639709]
[96.09493256 240.91639709]
[96.09493256 225.91639709]
[96.09493256 210.91639709]
[96.09493256 195.91639709]
[96.09493256 180.91639709]
[96.09493256 165.91639709]
[96.09493256 150.91639709]
[95.47095490 135.92938232]
[94.22408295 120.98129272]
[80.22712708 114.14803314]
[73.18370056 98.38858032]
[58.86110306 102.84539795]
[44.53850555 107.30220795]
[30.21590996 111.75902557]
[19.49507713 124.16853333]
[3.44072223 120.82341766]
[-1.43180966 105.16486359]
[9.88992405 93.30103302]
[25.75909424 97.43643188]
[40.08169174 92.97961426]
[54.40428925 88.52279663]
[68.72688293 84.06597900]
[78.23524475 72.46463776]
[79.79282379 57.54572678]
[71.15370941 45.28335953]
[56.58100510 41.72859955]
[42.00830460 38.17383575]
[26.42798042 43.29101944]
[14.38828373 32.15649033]
[18.27462196 16.22449684]
[34.08906174 11.88450909]
[45.56306458 23.60113335]
[60.13576889 27.15589523]
[74.70847321 30.71065712]
[84.49472046 19.06009102]
[97.31304932 16.66210365]
[101.91861725 2.38664222]
[106.52417755 -11.88881874]
[97.55010986 -24.40969276]
[97.66809845 -39.63596725]
[106.62332153 -51.73009491]
[120.81303406 -56.17870712]
[125.41859436 -70.45417023]
[121.11592102 -88.32780457]
[134.51391602 -99.61911011]
[138.82150269 -113.98729706]
[143.12908936 -128.35548401]
[138.77355957 -129.92280579]
[134.61131287 -132.73164368]
[130.97842407 -136.75401306]
[128.20413208 -141.87467957]
[126.58908844 -147.89358521]
[126.38423157 -154.53346252]
[127.00820923 -169.52047729]
[127.63218689 -184.50749207]
[113.82780457 -190.87205505]
[103.51350403 -202.03822327]
[98.26213074 -216.30326843]
[98.87448883 -231.49186707]
[105.25719452 -245.28787231]
[116.43692780 -255.58747864]
[130.70887756 -260.82006836]
[145.89665222 -260.18774414]
[159.68423462 -253.78689575]
[169.96913147 -242.59361267]
[175.18295288 -228.31480408]
[174.53063965 -213.12786865]
[168.11166382 -199.34870911]
[156.90486145 -189.07855225]
[142.61920166 -183.88351440]
[141.99522400 -168.89649963]
[141.37124634 -153.90948486]
[155.02749634 -147.70408630]
[165.90631104 -158.03128052]
[176.78514099 -168.35848999]
[187.66397095 -178.68569946]
[198.54278564 -189.01289368]
[197.40490723 -204.60902405]
[206.60009766 -217.25744629]
[221.78668213 -220.98596191]
[235.79400635 -214.03407288]
[242.00825500 -199.68424988]
[237.49523926 -184.71205139]
[224.38587952 -176.18688965]
[208.86999512 -178.13407898]
[197.99116516 -167.80686951]
[187.11235046 -157.47966003]
[176.23352051 -147.15246582]
[165.35469055 -136.82525635]
[157.49726868 -124.04789734]
[153.18968201 -109.67971039]
[148.88209534 -95.31153107]
[154.34913635 -84.47553253]
[150.82931519 -72.44100189]
[139.69406128 -65.84860229]
[135.08850098 -51.57314301]
[144.00299072 -39.67063141]
[144.20178223 -24.62322235]
[135.39907837 -12.19881916]
[120.79964447 -7.28325415]
[116.19407654 6.99220657]
[111.58851624 21.26766777]
[118.64268494 44.19717026]
[94.71173859 59.10330963]
[93.15415955 74.02222443]
[108.50084686 75.59399414]
[119.86938477 85.11998749]
[123.77325439 98.81143188]
[119.50679779 111.76951599]
[109.17216492 119.73442078]
[110.41904449 134.68251038]
[113.11904144 138.27018738]
[114.36907959 142.14427185]
[114.26197052 145.80082703]
[113.04859924 148.82102966]
[111.09493256 150.91639709]
[111.09493256 165.91639709]
[111.09493256 180.91639709]
[111.09493256 195.91639709]
[111.09493256 210.91639709]
[111.09493256 225.91639709]
[111.09493256 240.91639709]
[111.09493256 255.91639709]
[111.09493256 270.91638184]
[111.09493256 285.91638184]
[111.09493256 300.91638184]
[125.63481903 304.97772217]
[138.53919983 312.81222534]
[148.85047913 323.83856201]
[155.80351257 337.23846436]
[158.88230896 352.01763916]
[157.85841370 367.07931519]
[152.80781555 381.30584717]
[144.10528564 393.64151001]
[132.39662170 403.17092896]
[118.55068970 409.18695068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 125]
[23 124]
[25 36]
[26 35]
[27 34]
[28 33]
[37 119]
[38 118]
[39 48]
[40 47]
[41 46]
[50 116]
[51 115]
[52 114]
[56 110]
[57 109]
[59 106]
[60 105]
[61 104]
[67 86]
[68 85]
[69 84]
[87 103]
[88 102]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
