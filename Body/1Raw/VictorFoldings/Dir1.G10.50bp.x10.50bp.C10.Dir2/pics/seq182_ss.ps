%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUAAUAACAGGGGGGGGGGAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUxxxxxxxxxxCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCCCCCCCCCCCAGAAUAAUAACA\
) } def
/len { sequence length } bind def

/coor [
[89.12364960 463.11480713]
[74.85188293 458.30535889]
[61.94789886 450.53997803]
[51.01524353 440.18182373]
[42.56525803 427.71539307]
[36.99316025 413.72378540]
[34.55957031 398.86135864]
[35.37831116 383.82327271]
[39.41109085 369.31289673]
[46.46928406 356.00891113]
[56.22276688 344.53356934]
[68.21535492 335.42358398]
[81.88613129 329.10504150]
[96.59568787 325.87347412]
[96.59568787 310.87347412]
[96.59568787 295.87347412]
[96.59568787 280.87347412]
[96.59568787 265.87347412]
[96.59568787 250.87347412]
[96.59568787 235.87347412]
[96.59568787 220.87347412]
[96.59568787 205.87347412]
[96.59568787 190.87347412]
[96.59568787 175.87347412]
[96.14553070 160.88023376]
[95.24561310 145.90725708]
[94.34569550 130.93428040]
[76.36569977 120.74416351]
[68.59365845 101.59438324]
[53.86386490 98.76007843]
[39.13407516 95.92577362]
[24.40428543 93.09147644]
[9.67449379 90.25717163]
[-5.05529642 87.42286682]
[-19.78508759 84.58856201]
[-27.30080605 97.73362732]
[-38.67914581 107.72422791]
[-52.68586349 113.47666931]
[-67.80162048 114.36695862]
[-82.38677216 110.29852295]
[-94.85922241 101.71269226]
[-103.86606598 89.54077148]
[-108.43029785 75.10309601]
[-108.05683136 59.96575165]
[-102.78617096 45.77072144]
[-93.19004059 34.05777740]
[-80.30935669 26.09745598]
[-65.54132843 22.75322914]
[-50.48786163 24.38785362]
[-36.78186035 30.82402039]
[-25.91004372 41.36357880]
[-19.05170441 54.86327744]
[-16.95078468 69.85877228]
[-2.22099352 72.69307709]
[12.50879669 75.52738190]
[27.23858833 78.36167908]
[41.96837616 81.19598389]
[56.69816971 84.03028870]
[71.42795563 86.86459351]
[85.47174072 72.11039734]
[105.61115265 69.05786896]
[111.73047638 55.36283875]
[117.84980011 41.66780853]
[104.95878601 33.96338654]
[93.06950378 24.78835106]
[82.34886169 14.27150249]
[72.94734955 2.56047964]
[64.99697113 -10.18031120]
[58.60931778 -23.77201080]
[53.87407303 -38.02381134]
[50.85770798 -52.73563766]
[49.60256958 -67.70096588]
[50.12627792 -82.70970154]
[52.42148209 -97.55113983]
[56.45595551 -112.01693726]
[62.17306519 -125.90402222]
[69.49255371 -139.01742554]
[78.31166077 -151.17308044]
[88.50658417 -162.20030212]
[99.93420410 -171.94432068]
[112.43409729 -180.26834106]
[125.83077240 -187.05548096]
[139.93617249 -192.21049500]
[154.55227661 -195.66098022]
[169.47389221 -197.35852051]
[184.49154663 -197.27928162]
[199.39442444 -195.42437744]
[213.97329712 -191.81983948]
[228.02351379 -186.51626587]
[241.34782410 -179.58813477]
[253.75918579 -171.13267517]
[265.08334351 -161.26861572]
[275.16131592 -150.13441467]
[283.85168457 -137.88638306]
[291.03237915 -124.69646454]
[296.60263062 -110.74982452]
[300.48422241 -96.24225616]
[302.62268066 -81.37741852]
[302.98797607 -66.36399841]
[301.57498169 -51.41275024]
[298.40353394 -36.73357010]
[293.51815796 -22.53253174]
[286.98745728 -9.00899601]
[278.90304565 3.64718890]
[269.37850952 15.25834942]
[258.54745483 25.66148376]
[246.56202698 34.71054459]
[233.59042358 42.27850342]
[219.81477356 48.25911331]
[205.42845154 52.56842041]
[190.63342285 55.14591980]
[175.63739014 55.95543671]
[160.65086365 54.98560333]
[145.88424683 52.25003433]
[131.54483032 47.78713226]
[125.42550659 61.48216248]
[119.30618286 75.17719269]
[124.21727753 79.93949127]
[127.98232269 85.65113068]
[130.42314148 92.04180145]
[131.42422485 98.80908966]
[130.93821716 105.63272858]
[128.98808289 112.18981171]
[125.66613770 118.17002869]
[121.12957764 123.29037476]
[115.59308624 127.30853271]
[109.31867981 130.03436279]
[110.21859741 145.00733948]
[111.11850739 159.98031616]
[114.06327820 164.42556763]
[114.88664246 169.08796692]
[113.86917114 173.10949707]
[111.59568787 175.87347412]
[111.59568787 190.87347412]
[111.59568787 205.87347412]
[111.59568787 220.87347412]
[111.59568787 235.87347412]
[111.59568787 250.87347412]
[111.59568787 265.87347412]
[111.59568787 280.87347412]
[111.59568787 295.87347412]
[111.59568787 310.87347412]
[111.59568787 325.87347412]
[126.30524445 329.10504150]
[139.97602844 335.42358398]
[151.96861267 344.53356934]
[161.72209167 356.00891113]
[168.78028870 369.31289673]
[172.81306458 383.82327271]
[173.63180542 398.86135864]
[171.19821167 413.72378540]
[165.62612915 427.71539307]
[157.17613220 440.18182373]
[146.24348450 450.53997803]
[133.33949280 458.30535889]
[119.06772614 463.11480713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 129]
[26 128]
[27 127]
[29 59]
[30 58]
[31 57]
[32 56]
[33 55]
[34 54]
[35 53]
[61 117]
[62 116]
[63 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
