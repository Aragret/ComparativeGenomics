%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCAUUUACAGGGGGGGGGGUAAAUAUUAUACUAGCAUUUACCAUCUCACUUCUAGGAAUACUAGUAUAUxxxxxxxxxxUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCCCCCCCCCCCUCAUUCACA\
) } def
/len { sequence length } bind def

/coor [
[83.68708801 462.06695557]
[69.52648926 456.91195679]
[56.93674088 448.62973022]
[46.59680557 437.66696167]
[39.06429291 424.61483765]
[34.74542618 410.17724609]
[33.87311935 395.13278198]
[36.49440765 380.29278564]
[42.46793747 366.45755005]
[51.47155380 354.37319946]
[63.01971054 344.69140625]
[76.48962402 337.93432617]
[91.15488434 334.46636963]
[91.15488434 319.46636963]
[91.15488434 304.46636963]
[91.15488434 289.46636963]
[91.15488434 274.46636963]
[91.15488434 259.46636963]
[91.15488434 244.46636963]
[91.15488434 229.46636963]
[91.15488434 214.46636963]
[91.15488434 199.46636963]
[91.15488434 184.46636963]
[80.83613586 176.69255066]
[76.83666229 164.20300293]
[80.83735657 151.50930786]
[91.58565521 143.33392334]
[91.88965607 128.33700562]
[92.19366455 113.34008026]
[84.51882172 100.45222473]
[71.18840027 93.57472992]
[57.85798264 86.69724274]
[44.52756119 79.81974792]
[31.19714355 72.94225311]
[17.86672211 66.06476593]
[4.53630209 59.18727112]
[-8.79411793 52.30978012]
[-24.60580635 52.85850525]
[-32.36891556 40.14696121]
[-45.69933701 33.26947021]
[-59.02975845 26.39197922]
[-65.73606110 26.32194519]
[-70.63392639 23.29596519]
[-72.75262451 18.95606613]
[-85.79338074 11.54400158]
[-98.31660461 20.26934624]
[-113.38678741 22.68851089]
[-128.01173401 18.32116699]
[-139.28765869 8.03445530]
[-144.97569275 -6.12919188]
[-143.94650269 -21.35757065]
[-136.40441895 -34.62707520]
[-123.84693909 -43.30303574]
[-108.76734924 -45.66283798]
[-94.15971375 -41.23793411]
[-82.92439270 -30.90689659]
[-77.29216766 -16.72096062]
[-78.38131714 -1.49675310]
[-65.34056091 5.91531181]
[-52.15226746 13.06155777]
[-38.82184601 19.93905067]
[-25.49142456 26.81654167]
[-10.63321781 25.77589226]
[-1.91662645 38.97936249]
[11.41379356 45.85685349]
[24.74421501 52.73434448]
[38.07463455 59.61183548]
[51.40505600 66.48932648]
[64.73547363 73.36682129]
[78.06589508 80.24430847]
[91.39631653 87.12180328]
[106.19956207 84.70024872]
[91.71628571 88.60340881]
[76.71657562 88.69674683]
[62.18584824 84.97411346]
[49.07871246 77.68007660]
[38.25624466 67.29382324]
[30.42944336 54.49768448]
[26.11248779 40.13231277]
[25.58898735 25.14145279]
[28.89333344 10.50993443]
[35.80844116 -2.80101037]
[45.88002396 -13.91691113]
[58.44641876 -22.10750008]
[72.68206787 -26.83469200]
[87.65174866 -27.78792953]
[102.37201691 -24.90459061]
[115.87581635 -18.37409592]
[127.27600861 -8.62547302]
[135.82363892 3.70083714]
[140.95718384 17.79504776]
[142.33937073 32.73123169]
[139.87940979 47.52814102]
[133.73890686 61.21368790]
[124.32283020 72.88729095]
[138.38911438 67.67771149]
[152.45539856 62.46813583]
[166.52166748 57.25855637]
[176.77560425 45.21001434]
[191.39784241 48.04543304]
[205.46412659 42.83585739]
[206.84701538 27.63551521]
[214.69549561 14.54490566]
[227.45124817 6.16317844]
[242.58161926 4.15453243]
[257.08245850 8.91778469]
[268.07461548 19.50718689]
[273.37557983 33.82020950]
[271.93283081 49.01498795]
[264.03286743 62.07458878]
[251.24418640 70.40601349]
[236.10603333 72.35506439]
[221.62406921 67.53474426]
[210.67370605 56.90213776]
[196.60742188 62.11171722]
[187.35960388 73.78763580]
[171.73124695 71.32483673]
[157.66496277 76.53441620]
[143.59869385 81.74399567]
[129.53240967 86.95357513]
[116.96616364 95.14439392]
[131.94425964 94.33413696]
[142.49826050 104.99308014]
[141.53984070 119.96242523]
[129.71270752 129.18841553]
[114.96023560 126.47463989]
[107.19058228 113.64408112]
[106.88658142 128.64100647]
[106.58257294 143.63792419]
[118.91988373 156.00022888]
[118.53643036 173.12420654]
[106.15488434 184.46636963]
[106.15488434 199.46636963]
[106.15488434 214.46636963]
[106.15488434 229.46636963]
[106.15488434 244.46636963]
[106.15488434 259.46636963]
[106.15488434 274.46636963]
[106.15488434 289.46636963]
[106.15488434 304.46636963]
[106.15488434 319.46636963]
[106.15488434 334.46636963]
[120.82014465 337.93432617]
[134.29006958 344.69140625]
[145.83822632 354.37319946]
[154.84184265 366.45755005]
[160.81536865 380.29278564]
[163.43666077 395.13278198]
[162.56434631 410.17724609]
[158.24548340 424.61483765]
[150.71296692 437.66696167]
[140.37303162 448.62973022]
[127.78328705 456.91195679]
[113.62268829 462.06695557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[27 129]
[28 128]
[29 127]
[30 71]
[31 70]
[32 69]
[33 68]
[34 67]
[35 66]
[36 65]
[37 64]
[39 62]
[40 61]
[41 60]
[44 59]
[45 58]
[72 121]
[95 120]
[96 119]
[97 118]
[98 117]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
