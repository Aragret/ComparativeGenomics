%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAACCAAACGGGGGGGGGGCCAGCUACGCAAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAxxxxxxxxxxCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUAUAUAGUCCCCCCCCCCUUAAACAAAAC\
) } def
/len { sequence length } bind def

/coor [
[114.33721161 364.76284790]
[99.77735901 360.85464478]
[86.57621002 353.57501221]
[75.50128174 343.34713745]
[67.19644165 330.76568604]
[62.14452744 316.56210327]
[60.63925171 301.56216431]
[62.76812744 286.63800049]
[68.40738678 272.65719604]
[77.22917175 260.43264771]
[88.72058868 250.67506409]
[102.21354675 243.95170593]
[116.92358398 240.65347290]
[117.23155975 225.65664673]
[117.53953552 210.65980530]
[117.84751129 195.66296387]
[118.15549469 180.66612244]
[118.46347046 165.66929626]
[118.77144623 150.67245483]
[119.07942200 135.67561340]
[119.38740540 120.67877960]
[108.10092163 125.59057617]
[96.46362305 125.09058380]
[86.80612946 119.85012817]
[80.81838989 111.43486023]
[66.10286713 114.34233856]
[51.38734818 117.24980927]
[36.67182541 120.15727997]
[31.79222298 134.72042847]
[20.27417374 144.88064575]
[5.21597004 147.90489197]
[-9.33180428 142.97967529]
[-19.45587158 131.42982483]
[-22.43290901 116.36222076]
[-17.46210670 101.82995605]
[-5.88058805 91.74214172]
[9.19627762 88.81234741]
[23.71288872 93.82867432]
[33.76435089 105.44175720]
[48.47987366 102.53428650]
[63.19539642 99.62681580]
[77.91091919 96.71933746]
[95.43859100 75.07537079]
[124.74620819 86.17580414]
[124.13037872 71.18844604]
[115.83303833 57.71756744]
[123.04129791 44.68337250]
[122.42546844 29.69601822]
[121.80964661 14.70866394]
[121.19381714 -0.27868924]
[105.96920776 -4.46540546]
[92.79434967 -13.13306999]
[82.94729614 -25.42654228]
[77.37884521 -40.13965988]
[76.62076569 -55.83357620]
[80.73503876 -70.97747040]
[89.30893707 -84.09786224]
[101.49645996 -93.92197418]
[116.10173798 -99.50122833]
[115.17832947 -114.47277832]
[113.94771576 -129.42221069]
[112.41042328 -144.34323120]
[110.87313080 -159.26423645]
[109.33583832 -174.18525696]
[107.79854584 -189.10627747]
[106.26125336 -204.02729797]
[91.61331177 -208.00248718]
[79.39282990 -217.00384521]
[71.25254822 -229.81399536]
[68.29335022 -244.70050049]
[70.91545868 -259.65005493]
[78.76425171 -272.64083862]
[90.77823639 -281.91598511]
[105.33263397 -286.22113037]
[120.45906830 -284.97396851]
[134.11181641 -278.34323120]
[144.44447327 -267.22564697]
[150.05960083 -253.12475586]
[150.19783020 -237.94763184]
[144.84043884 -223.74682617]
[134.71199036 -212.44288635]
[121.18226624 -205.56459045]
[122.71955872 -190.64356995]
[124.25685120 -175.72254944]
[125.79414368 -160.80152893]
[127.33143616 -145.88052368]
[128.86872864 -130.95950317]
[131.99131775 -127.27186584]
[132.78976440 -121.56657410]
[130.14987183 -115.39618683]
[131.07328796 -100.42463684]
[144.98802185 -97.19413757]
[157.43797302 -90.15776825]
[167.40521240 -79.88050079]
[174.07186890 -67.19268799]
[176.88728333 -53.12300873]
[175.61343384 -38.81505585]
[170.34501648 -25.43437767]
[161.50256348 -14.07354450]
[149.79878235 -5.66292667]
[136.18116760 -0.89451468]
[136.79699707 14.09283829]
[137.41282654 29.08019257]
[138.02865601 44.06754684]
[146.28195190 56.46643066]
[139.11773682 70.57262421]
[139.73356628 85.55997467]
[149.37538147 97.05064392]
[164.02810669 100.25964355]
[178.68081665 103.46863556]
[193.33354187 106.67763519]
[208.82119751 95.85078430]
[227.00679016 99.65412140]
[236.52607727 115.23809814]
[251.29820251 117.84281921]
[266.07031250 120.44754028]
[279.98385620 112.46049500]
[294.84976196 118.49245453]
[299.26416016 133.91621399]
[289.84072876 146.89999390]
[273.80831909 147.48373413]
[263.46560669 135.21966553]
[248.69348145 132.61492920]
[233.92135620 130.01020813]
[226.16035461 138.47058105]
[215.15650940 142.14512634]
[203.63273621 140.00164795]
[194.50056458 132.46313477]
[190.12455750 121.33036041]
[175.47183228 118.12136078]
[160.81910706 114.91236115]
[146.16638184 111.70336914]
[134.38424683 120.98675537]
[134.07626343 135.98359680]
[133.76828003 150.98042297]
[133.46031189 165.97726440]
[133.15232849 180.97410583]
[132.84436035 195.97094727]
[132.53637695 210.96778870]
[132.22839355 225.96461487]
[131.92042542 240.96145630]
[146.48265076 244.86082458]
[159.68820190 252.13246155]
[170.76933289 262.35360718]
[179.08180237 274.93002319]
[184.14231873 289.13055420]
[185.65669250 304.12954712]
[183.53686523 319.05502319]
[177.90608215 333.03921509]
[169.09170532 345.26910400]
[157.60620117 355.03369141]
[144.11732483 361.76522827]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[25 42]
[26 41]
[27 40]
[28 39]
[44 107]
[45 106]
[47 104]
[48 103]
[49 102]
[50 101]
[59 91]
[60 90]
[61 87]
[62 86]
[63 85]
[64 84]
[65 83]
[66 82]
[108 132]
[109 131]
[110 130]
[111 129]
[114 124]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
