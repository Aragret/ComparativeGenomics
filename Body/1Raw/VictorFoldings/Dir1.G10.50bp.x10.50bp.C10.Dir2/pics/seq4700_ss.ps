%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCACAGCGGGGGGGGGGGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCxxxxxxxxxxGCUGGGCCAGCCAGGCAACCUUCUAGGUAACGACCACAUCUACAACGUUACCCCCCCCCCUCGUCACAGC\
) } def
/len { sequence length } bind def

/coor [
[85.12553406 370.28854370]
[70.63584137 366.08007812]
[57.72961044 358.26394653]
[47.28681183 347.37310791]
[40.01944733 334.15011597]
[36.42301941 319.49652100]
[36.74274063 304.41140747]
[40.95681381 289.92333984]
[48.77790833 277.02014160]
[59.67277908 266.58154297]
[72.89859009 259.31927490]
[87.55358124 255.72851562]
[87.86563873 240.73176575]
[88.17768860 225.73500061]
[88.48974609 210.73825073]
[88.80180359 195.74150085]
[89.11386108 180.74475098]
[89.42591858 165.74798584]
[89.73797607 150.75123596]
[90.05002594 135.75448608]
[90.36208344 120.75772858]
[79.70046234 110.20644379]
[64.70776367 110.67448425]
[49.71506500 111.14252472]
[43.81164551 114.34520721]
[38.05324173 114.07678986]
[34.09180069 111.30505371]
[19.09261131 111.14901733]
[4.09342241 110.99298096]
[-0.95188832 125.26966095]
[-10.36141491 137.13302612]
[-23.11448097 145.29623413]
[-37.82773209 148.87380981]
[-52.90518188 147.47766113]
[-66.71134186 141.25924683]
[-77.74862671 130.89309692]
[-84.81978607 117.50364685]
[-87.15780640 102.54328918]
[-84.50906372 87.63480377]
[-77.16088104 74.39535522]
[-65.91033173 64.26107025]
[-51.97779083 58.33122253]
[-36.87456131 57.24904633]
[-22.23892021 61.13193130]
[-9.65843868 69.55868530]
[-0.49775138 81.61524200]
[4.24945927 95.99378967]
[19.24864769 96.14982605]
[34.24783707 96.30586243]
[49.24702454 96.14982605]
[64.23972321 95.68178558]
[79.23241425 95.21374512]
[86.82763672 85.05459595]
[98.13954163 81.56209564]
[101.23786163 66.88557434]
[104.33618164 52.20904922]
[107.43450165 37.53252411]
[110.53282928 22.85599709]
[113.63114929 8.17947102]
[116.72946930 -6.49705458]
[110.59407806 -23.82728386]
[122.74716949 -36.44878387]
[108.92181396 -30.62988472]
[95.65170288 -37.62303162]
[92.63620758 -52.31679916]
[102.07942200 -63.97123337]
[117.07910919 -64.06788635]
[126.67155457 -52.53674698]
[130.97914124 -66.90493011]
[135.28672791 -81.27311707]
[123.20785522 -72.37923431]
[108.39928436 -69.99048615]
[94.13652039 -74.63522339]
[83.57436371 -85.28607941]
[79.04905701 -99.58718109]
[81.56156158 -114.37526703]
[90.55613708 -126.37933350]
[104.04325867 -132.94419861]
[119.03970337 -132.61778259]
[132.22840881 -125.47226715]
[140.69212341 -113.08818817]
[142.55856323 -98.20281982]
[150.01347351 -111.21913147]
[157.46838379 -124.23544312]
[164.92329407 -137.25175476]
[162.12184143 -153.04830933]
[172.83311462 -164.99185181]
[188.84034729 -163.92030334]
[197.86415100 -150.65567017]
[192.98223877 -135.37344360]
[177.93960571 -129.79684448]
[170.48469543 -116.78053284]
[163.02978516 -103.76422119]
[155.57487488 -90.74790955]
[149.65490723 -76.96553040]
[145.34732056 -62.59734726]
[141.03973389 -48.22916031]
[137.48497009 -33.65645981]
[144.04765320 -23.44672966]
[141.79652405 -11.11176682]
[131.40599060 -3.39873266]
[128.30767822 11.27779293]
[125.20935059 25.95431900]
[122.11103058 40.63084412]
[119.01271057 55.30736923]
[115.91438293 69.98389435]
[112.81606293 84.66042328]
[120.80597687 97.35534668]
[135.37867737 100.91011047]
[149.95138550 104.46487427]
[164.52409363 108.01963806]
[179.09678650 111.57440186]
[188.37808228 99.50055695]
[201.77091980 92.25129700]
[216.95492554 91.08260345]
[231.29937744 96.19695282]
[242.31900024 106.70825958]
[248.10459900 120.79537201]
[247.65377808 136.01762390]
[241.04463196 149.73764038]
[229.42224121 159.57836914]
[214.80026245 163.83483887]
[199.71203613 161.76959229]
[186.77168274 153.74044800]
[178.22120667 141.13848877]
[175.54202271 126.14710236]
[160.96932983 122.59233856]
[146.39662170 119.03757477]
[131.82391357 115.48281860]
[117.25122070 111.92805481]
[105.35884094 121.06978607]
[105.04678345 136.06654358]
[104.73472595 151.06329346]
[104.42266846 166.06004333]
[104.11061096 181.05680847]
[103.79856110 196.05355835]
[103.48650360 211.05030823]
[103.17444611 226.04705811]
[102.86238861 241.04382324]
[102.55033112 256.04055786]
[117.04326630 260.23785400]
[129.95553589 268.04400635]
[140.40673828 278.92675781]
[147.68431091 292.14416504]
[151.29205322 306.79498291]
[150.98397827 321.88031006]
[146.78109741 336.37164307]
[138.96997070 349.28088379]
[128.08316040 359.72787476]
[114.86296844 367.00036621]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 52]
[23 51]
[24 50]
[27 49]
[28 48]
[29 47]
[54 107]
[55 106]
[56 105]
[57 104]
[58 103]
[59 102]
[60 101]
[62 98]
[68 97]
[69 96]
[70 95]
[82 94]
[83 93]
[84 92]
[85 91]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
