%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCUCCCCAGGGGGGGGGGAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUxxxxxxxxxxCCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAACCCCCCCCCCACCCCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[100.12436676 393.30850220]
[85.96376801 388.15350342]
[73.37402344 379.87127686]
[63.03408432 368.90850830]
[55.50157166 355.85638428]
[51.18270874 341.41879272]
[50.31039810 326.37432861]
[52.93169022 311.53433228]
[58.90521622 297.69909668]
[67.90883636 285.61474609]
[79.45699310 275.93295288]
[92.92690277 269.17587280]
[107.59216309 265.70791626]
[107.59216309 250.70791626]
[107.59216309 235.70791626]
[107.59216309 220.70791626]
[107.59216309 205.70791626]
[107.59216309 190.70791626]
[107.59216309 175.70791626]
[107.59216309 160.70791626]
[107.59216309 145.70791626]
[107.59216309 130.70791626]
[101.56952667 126.23825836]
[92.63002014 138.28338623]
[80.58503723 129.34368896]
[89.52424622 117.29895020]
[83.50160217 112.82929993]
[69.14474487 117.17447662]
[61.90772629 131.22442627]
[46.83031082 135.96226501]
[32.85765839 128.57710266]
[28.27949524 113.45044708]
[35.81196594 99.55665588]
[50.98618698 95.13867188]
[64.79956055 102.81761932]
[79.15642548 98.47244263]
[79.76380920 90.99707794]
[67.42346191 82.46971130]
[80.97857666 76.04634857]
[81.58596039 68.57097626]
[68.11889648 61.96506882]
[54.65182495 55.35915375]
[41.11850357 48.89005661]
[27.52032089 42.55843735]
[13.92213726 36.22681808]
[0.32395306 29.89520073]
[-14.43645382 35.54373550]
[-28.83349228 29.02446938]
[-34.32565308 14.20516682]
[-27.65453911 -0.12214100]
[-12.77799988 -5.45731831]
[1.47797680 1.36490166]
[6.65557194 16.29701614]
[20.25375557 22.62863541]
[33.85194016 28.96025467]
[47.45012283 35.29187393]
[54.88509750 35.26406479]
[61.25773621 41.89208603]
[74.72480774 48.49800110]
[88.19187164 55.10391235]
[102.94300079 52.38283539]
[113.16680145 41.40677261]
[123.39059448 30.43070793]
[133.61439514 19.45464516]
[123.66804504 8.21072865]
[114.85334015 -3.94066930]
[107.25257874 -16.88609123]
[100.93672180 -30.50466537]
[95.96475983 -44.66923523]
[92.38310242 -59.24754715]
[90.22518921 -74.10348511]
[89.51116943 -89.09834290]
[90.24771881 -104.09210968]
[92.42795563 -118.94478607]
[96.03151703 -133.51770020]
[101.02476501 -147.67478943]
[107.36106873 -161.28385925]
[114.98127747 -174.21783447]
[123.81423187 -186.35597229]
[133.77746582 -197.58493042]
[144.77795410 -207.79986572]
[156.71298218 -216.90539551]
[169.47109985 -224.81651306]
[182.93321228 -231.45933533]
[196.97360229 -236.77186584]
[211.46119690 -240.70446777]
[226.26069641 -243.22044373]
[241.23394775 -244.29631042]
[256.24111938 -243.92199707]
[271.14212036 -242.10101318]
[285.79779053 -238.85037231]
[300.07128906 -234.20039368]
[313.82940674 -228.19453430]
[326.94360352 -220.88883972]
[339.29147339 -212.35153198]
[350.75772095 -202.66232300]
[361.23526001 -191.91168213]
[370.62631226 -180.19998169]
[378.84317017 -167.63659668]
[385.80911255 -154.33880615]
[391.45907593 -140.43077087]
[395.74035645 -126.04236603]
[398.61291504 -111.30792236]
[400.04998779 -96.36502075]
[400.03814697 -81.35317993]
[398.57748413 -66.41255951]
[395.68164062 -51.68267441]
[391.37765503 -37.30104446]
[385.70571899 -23.40195274]
[378.71881104 -10.11517715]
[370.48211670 2.43522668]
[361.07260132 14.13207531]
[350.57806396 24.86615562]
[339.09652710 34.53724289]
[326.73519897 43.05504227]
[313.60946655 50.34001923]
[299.84191895 56.32415771]
[285.56109619 60.95158005]
[270.90029907 64.17908478]
[255.99644470 65.97653198]
[240.98869324 66.32714844]
[226.01716614 65.22764587]
[211.22164917 62.68830109]
[196.74029541 58.73281860]
[182.70831299 53.39813614]
[169.25669861 46.73405838]
[156.51109314 38.80281067]
[144.59045410 29.67844200]
[134.36665344 40.65450668]
[124.14286041 51.63056946]
[113.91906738 62.60663223]
[138.63545227 94.59578705]
[122.59216309 130.70791626]
[122.59216309 145.70791626]
[122.59216309 160.70791626]
[122.59216309 175.70791626]
[122.59216309 190.70791626]
[122.59216309 205.70791626]
[122.59216309 220.70791626]
[122.59216309 235.70791626]
[122.59216309 250.70791626]
[122.59216309 265.70791626]
[137.25743103 269.17587280]
[150.72734070 275.93295288]
[162.27549744 285.61474609]
[171.27911377 297.69909668]
[177.25263977 311.53433228]
[179.87393188 326.37432861]
[179.00163269 341.41879272]
[174.68275452 355.85638428]
[167.15025330 368.90850830]
[156.81031799 379.87127686]
[144.22056580 388.15350342]
[130.05996704 393.30850220]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 36]
[28 35]
[40 60]
[41 59]
[42 58]
[43 56]
[44 55]
[45 54]
[46 53]
[61 131]
[62 130]
[63 129]
[64 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
