%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCUCCAGGGGGGGGGGUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCxxxxxxxxxxUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUCCCCCCCCCCUAUUUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[75.72434998 437.34112549]
[61.87841034 431.32510376]
[50.16975021 421.79568481]
[41.46722412 409.46002197]
[36.41662216 395.23348999]
[35.39273453 380.17181396]
[38.47153091 365.39263916]
[45.42455292 351.99270630]
[55.73583603 340.96640015]
[68.64022064 333.13186646]
[83.18010712 329.07055664]
[83.18010712 314.07055664]
[83.18010712 299.07055664]
[83.18010712 284.07055664]
[83.18010712 269.07055664]
[83.18010712 254.07055664]
[83.18010712 239.07055664]
[83.18010712 224.07055664]
[83.18010712 209.07055664]
[83.18010712 194.07055664]
[75.44280243 181.34329224]
[83.18010712 167.54312134]
[83.18010712 152.54312134]
[73.82418823 164.26774597]
[59.91024017 169.87150574]
[45.03984833 167.90386963]
[33.06217194 158.87419128]
[27.07759285 145.11973572]
[28.63520050 130.20083618]
[37.33181381 117.97917938]
[50.91633987 111.61830902]
[65.87246704 112.76472473]
[78.32884979 121.12167358]
[85.06115723 134.52587891]
[88.15948486 119.84935760]
[91.25780487 105.17283630]
[89.70376587 97.20609283]
[94.57626343 90.22467804]
[97.97924042 75.61578369]
[101.38221741 61.00688934]
[101.38221741 46.00688934]
[97.97924042 31.39799881]
[94.57626343 16.78910637]
[91.17328644 2.18021321]
[87.77030945 -12.42867947]
[77.10396576 -24.11370468]
[81.75215149 -38.26445007]
[78.34917450 -52.87334442]
[74.94619751 -67.48223877]
[71.54322052 -82.09112549]
[67.88068390 -85.99054718]
[66.28514862 -90.46342468]
[66.62234497 -94.60926056]
[68.41392517 -97.71694946]
[65.92880249 -112.50965881]
[63.44368362 -127.30236816]
[48.40082169 -127.74782562]
[33.73397064 -131.11973572]
[20.00689697 -137.28849792]
[7.74722528 -146.01699829]
[-2.57381248 -156.96974182]
[-10.55950356 -169.72570801]
[-15.90289974 -183.79463196]
[-18.39861488 -198.63571167]
[-17.95071983 -213.67849731]
[-14.57643127 -228.34480286]
[-8.40544701 -242.07087708]
[0.32503593 -254.32913208]
[11.27944183 -264.64840698]
[24.03671074 -272.63201904]
[38.10649109 -277.97314453]
[52.94797516 -280.46646118]
[67.99069214 -280.01614380]
[82.65644836 -276.63946533]
[96.38153076 -270.46624756]
[108.63837433 -261.73379517]
[118.95586395 -250.77772522]
[126.93742371 -238.01914978]
[132.27626038 -223.94851685]
[134.76718140 -209.10662842]
[134.31440735 -194.06398010]
[130.93537903 -179.39877319]
[124.75994873 -165.67469788]
[116.02549744 -153.41926575]
[105.06775665 -143.10354614]
[92.30789948 -135.12405396]
[78.23638916 -129.78747559]
[80.72151184 -114.99477386]
[83.20662689 -100.20207214]
[86.15211487 -85.49411011]
[89.55509186 -70.88521576]
[92.95806885 -56.27632141]
[96.36104584 -41.66743088]
[106.78398132 -31.02733040]
[102.37919617 -15.83165741]
[105.78218079 -1.22276473]
[109.18515778 13.38612747]
[112.58813477 27.99501991]
[115.99111176 42.60391235]
[120.64906311 28.34546089]
[128.77688599 15.73837376]
[139.84112549 5.61006641]
[153.11563110 -1.37473249]
[167.72918701 -4.75760460]
[182.72270203 -4.31652975]
[197.11213684 -0.08045516]
[209.95309448 7.67260122]
[220.40280151 18.43379974]
[227.77546692 31.49687576]
[231.58718872 46.00448608]
[231.58779907 61.00448608]
[227.77728271 75.51241302]
[220.40570068 88.57609558]
[209.95687866 99.33816528]
[197.11656189 107.09228516]
[182.72749329 111.32955170]
[167.73400879 111.77186584]
[153.12017822 108.39020538]
[139.84507751 101.40650177]
[128.78001404 91.27911377]
[120.65114594 78.67269897]
[115.99111176 64.40986633]
[112.58813477 79.01876068]
[109.18515778 93.62765503]
[105.93433380 108.27115631]
[102.83600616 122.94767761]
[99.73768616 137.62420654]
[98.18010712 152.54312134]
[98.18010712 167.54312134]
[105.91740417 181.34329224]
[98.18010712 194.07055664]
[98.18010712 209.07055664]
[98.18010712 224.07055664]
[98.18010712 239.07055664]
[98.18010712 254.07055664]
[98.18010712 269.07055664]
[98.18010712 284.07055664]
[98.18010712 299.07055664]
[98.18010712 314.07055664]
[98.18010712 329.07055664]
[112.71999359 333.13186646]
[125.62437439 340.96640015]
[135.93565369 351.99270630]
[142.88867188 365.39263916]
[145.96748352 380.17181396]
[144.94358826 395.23348999]
[139.89299011 409.46002197]
[131.19046021 421.79568481]
[119.48179626 431.32510376]
[105.63586426 437.34112549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[34 127]
[35 126]
[36 125]
[38 124]
[39 123]
[40 122]
[41 99]
[42 98]
[43 97]
[44 96]
[45 95]
[47 93]
[48 92]
[49 91]
[50 90]
[54 89]
[55 88]
[56 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
