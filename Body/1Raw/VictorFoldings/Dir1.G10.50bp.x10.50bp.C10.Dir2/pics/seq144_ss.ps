%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACAUACUUACUAGGGGGGGGGGAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAAUxxxxxxxxxxCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGCCCCCCCCCCGCACAUACUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[81.65262604 485.66702271]
[67.29037476 481.16030884]
[54.12948608 473.85440063]
[42.70888519 464.04855347]
[33.49624634 452.14425659]
[26.86882019 438.62899780]
[23.09799004 424.05624390]
[22.33817291 409.02270508]
[24.62048340 394.14398193]
[29.85145950 380.02938843]
[37.81689835 367.25689697]
[48.19062042 356.34951782]
[60.54782867 347.75390625]
[74.38249969 341.82208252]
[89.12811279 338.79690552]
[89.12811279 323.79690552]
[89.12811279 308.79690552]
[89.12811279 293.79690552]
[89.12811279 278.79690552]
[89.12811279 263.79690552]
[89.12811279 248.79690552]
[89.12811279 233.79690552]
[89.12811279 218.79690552]
[89.12811279 203.79690552]
[86.22711945 196.50506592]
[85.92565918 188.79792786]
[88.16874695 181.55912781]
[92.61470032 175.58901978]
[98.68383026 171.51620483]
[96.90973663 156.62149048]
[95.13563538 141.72677612]
[93.36154175 126.83205414]
[91.58744049 111.93733978]
[83.08524323 99.57964325]
[69.80870819 92.59870148]
[56.53216553 85.61776733]
[43.25562668 78.63682556]
[30.69404793 81.71374512]
[19.76420784 75.58396149]
[16.08405304 64.02584076]
[2.94802833 56.78395844]
[-10.18799591 49.54207611]
[-23.66557312 42.95763016]
[-37.45182419 37.04668808]
[-51.23807526 31.13574219]
[-63.96023560 39.86214828]
[-79.38131714 40.30231094]
[-92.58051300 32.31577301]
[-99.34600830 18.45100784]
[-97.51895142 3.13221455]
[-87.68235016 -8.75243568]
[-72.97503662 -13.41059589]
[-58.09005737 -9.35586262]
[-47.77714920 2.11791301]
[-45.32713318 17.34949112]
[-31.54088020 23.26043510]
[-17.75462914 29.17137909]
[-20.51353645 14.42728138]
[-10.86051273 2.94602966]
[4.13833427 3.13201165]
[13.50370407 14.84908676]
[10.38005447 29.52024269]
[-2.94611287 36.40605164]
[10.18991089 43.64793396]
[23.32593536 50.88982010]
[40.80284500 49.57484436]
[50.23656464 65.36029053]
[63.51310349 72.34122467]
[76.78964233 79.32216644]
[90.06618500 86.30310059]
[81.76176453 73.81164551]
[68.92197418 66.05666351]
[59.61921692 54.28981018]
[55.03621674 40.00709152]
[55.75564194 25.02435303]
[61.68602753 11.24645233]
[72.07340240 0.42506313]
[85.59715271 -6.06402063]
[100.53791046 -7.39579964]
[114.99617004 -3.40095615]
[127.13375092 5.41262007]
[135.40753174 17.92440033]
[138.76559448 32.54368210]
[136.78102112 47.41181946]
[129.70613098 60.63852692]
[118.44114685 70.54174805]
[112.47730255 84.30519867]
[124.30961609 75.08585358]
[136.14193726 65.86650848]
[147.97425842 56.64716339]
[159.80656433 47.42781830]
[152.36978149 34.09068680]
[158.04171753 14.61674309]
[168.70059204 4.06266308]
[179.35945129 -6.49141693]
[190.01831055 -17.04549789]
[200.67718506 -27.59957695]
[204.47547913 -43.55278778]
[220.26571655 -47.98003769]
[231.80424500 -36.32695389]
[227.22122192 -20.58122635]
[211.23126221 -16.94071198]
[200.57240295 -6.38663244]
[189.91352844 4.16744757]
[179.25466919 14.72152805]
[168.59580994 25.27560806]
[176.72807312 37.87982559]
[190.73707581 32.51814270]
[203.36854553 21.20963287]
[217.73185730 30.21695137]
[213.05270386 46.51240921]
[196.09875488 46.52715302]
[182.08975220 51.88883209]
[169.02590942 59.26013565]
[157.19358826 68.47947693]
[145.36128235 77.69882202]
[133.52896118 86.91816711]
[121.69664764 96.13751221]
[115.60992432 106.84836578]
[106.48216248 110.16323853]
[108.25625610 125.05796051]
[110.03035736 139.95266724]
[111.80445099 154.84739685]
[113.57855225 169.74211121]
[122.56232452 181.75425720]
[136.34857178 187.66520691]
[150.13482666 193.57615662]
[166.34600830 191.10034180]
[176.38310242 204.06910706]
[169.92080688 219.14128113]
[153.60697937 220.81192017]
[144.22387695 207.36239624]
[130.43762207 201.45146179]
[116.65137482 195.54051208]
[104.12811279 203.79690552]
[104.12811279 218.79690552]
[104.12811279 233.79690552]
[104.12811279 248.79690552]
[104.12811279 263.79690552]
[104.12811279 278.79690552]
[104.12811279 293.79690552]
[104.12811279 308.79690552]
[104.12811279 323.79690552]
[104.12811279 338.79690552]
[118.87373352 341.82208252]
[132.70840454 347.75390625]
[145.06561279 356.34951782]
[155.43933105 367.25689697]
[163.40476990 380.02938843]
[168.63574219 394.14398193]
[170.91806030 409.02270508]
[170.15823364 424.05624390]
[166.38740540 438.62899780]
[159.75997925 452.14425659]
[150.54734802 464.04855347]
[139.12673950 473.85440063]
[125.96585846 481.16030884]
[111.60359955 485.66702271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[29 124]
[30 123]
[31 122]
[32 121]
[33 120]
[34 70]
[35 69]
[36 68]
[37 67]
[40 65]
[41 64]
[42 63]
[43 57]
[44 56]
[45 55]
[87 118]
[88 117]
[89 116]
[90 115]
[91 114]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
[107 113]
[108 112]
[125 134]
[126 133]
[127 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
