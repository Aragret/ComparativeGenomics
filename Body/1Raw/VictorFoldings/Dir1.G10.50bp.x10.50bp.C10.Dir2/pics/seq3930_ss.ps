%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACACAAGGGGGGGGGGGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUxxxxxxxxxxAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCCCCCCCCCCCACAACUCAA\
) } def
/len { sequence length } bind def

/coor [
[86.68538666 486.61431885]
[72.83944702 480.59826660]
[61.13078690 471.06884766]
[52.42826462 458.73318481]
[47.37766266 444.50668335]
[46.35377121 429.44497681]
[49.43256760 414.66583252]
[56.38558960 401.26589966]
[66.69687653 390.23956299]
[79.60125732 382.40505981]
[94.14114380 378.34375000]
[94.14114380 363.34375000]
[94.14114380 348.34375000]
[94.14114380 333.34375000]
[94.14114380 318.34375000]
[94.14114380 303.34375000]
[94.14114380 288.34375000]
[94.14114380 273.34375000]
[94.14114380 258.34375000]
[94.14114380 243.34375000]
[94.14114380 228.34375000]
[79.22132874 223.67485046]
[66.45283508 214.62101746]
[57.08734512 202.05514526]
[52.04747009 187.19508362]
[51.83585358 171.48567200]
[56.48508453 156.45820618]
[65.55334473 143.58119202]
[78.16638184 134.11688232]
[93.10176086 128.99749756]
[92.78971100 114.00074005]
[90.74161530 128.86026001]
[81.28464508 140.50352478]
[67.16072083 145.55473328]
[52.46488190 142.54934692]
[41.45799637 132.35874939]
[37.33136368 117.93754578]
[41.28144455 103.46699524]
[52.16296768 93.14263153]
[66.82098389 89.95787048]
[81.00357056 94.83470154]
[67.76098633 87.78956604]
[54.51839828 80.74443054]
[41.27581024 73.69929504]
[28.29153252 81.90320587]
[12.94423294 82.49981689]
[-0.63774186 75.32865906]
[-8.80090809 62.31872940]
[-9.34941483 46.96963501]
[-2.13571692 33.41020584]
[10.89973736 25.28785896]
[26.25047684 24.78746605]
[39.78722763 32.04363251]
[47.86867523 45.10448074]
[48.32094574 60.45671463]
[61.56353378 67.50184631]
[74.80612183 74.54698181]
[88.04870605 81.59211731]
[93.04598236 83.79970551]
[96.89922333 87.05397034]
[99.41838837 91.02417755]
[107.67067719 78.49821472]
[115.92296600 65.97225189]
[124.17525482 53.44629288]
[132.42753601 40.92033005]
[136.73512268 26.55214691]
[136.73512268 11.55214596]
[136.73512268 -3.44785404]
[136.73512268 -18.44785309]
[136.73512268 -33.44785309]
[123.39399719 -41.05770874]
[115.65902710 -54.32668686]
[115.61088562 -69.68550110]
[123.26251984 -83.00271606]
[136.55567932 -90.69605255]
[151.91458130 -90.69605255]
[165.20773315 -83.00271606]
[172.85937500 -69.68550110]
[172.81121826 -54.32668686]
[165.07626343 -41.05770874]
[151.73512268 -33.44785309]
[151.73512268 -18.44785309]
[151.73512268 -3.44785404]
[151.73512268 11.55214596]
[151.73512268 26.55214691]
[159.65431213 13.81297779]
[170.00611877 2.95755386]
[182.35501099 -5.55742025]
[196.18147278 -11.37370777]
[210.90377808 -14.24660873]
[225.90255737 -14.05525494]
[240.54678345 -10.80769825]
[254.22035217 -4.64056683]
[266.34799194 4.18667793]
[276.41949463 15.30265999]
[284.01110840 28.23971558]
[288.80346680 42.45355988]
[290.59490967 57.34619904]
[289.31011963 72.29107666]
[285.00311279 86.65943146]
[277.85510254 99.84677887]
[268.16683960 111.29829407]
[256.34588623 120.53220367]
[242.88958740 127.16002655]
[228.36405945 130.90290833]
[213.38041687 131.60337830]
[198.56906128 129.23197937]
[184.55310059 123.88848877]
[171.92222595 115.79768372]
[161.20783997 105.29998016]
[152.86070251 92.83702850]
[147.23197937 78.93315887]
[144.55850220 64.17333221]
[144.95350647 49.17261887]
[136.70121765 61.69858170]
[128.44892883 74.22454071]
[120.19664001 86.75050354]
[111.94435120 99.27646637]
[107.78646088 113.68868256]
[108.09851837 128.68544006]
[121.98628235 132.60328674]
[134.18867493 140.27540588]
[143.71691895 151.06950378]
[149.80200195 164.10072327]
[151.95661926 178.30426025]
[150.01423645 192.52226257]
[144.14192200 205.59831238]
[134.82604980 216.47143555]
[122.83196259 224.26217651]
[109.14114380 228.34375000]
[109.14114380 243.34375000]
[109.14114380 258.34375000]
[109.14114380 273.34375000]
[109.14114380 288.34375000]
[109.14114380 303.34375000]
[109.14114380 318.34375000]
[109.14114380 333.34375000]
[109.14114380 348.34375000]
[109.14114380 363.34375000]
[109.14114380 378.34375000]
[123.68103027 382.40505981]
[136.58540344 390.23956299]
[146.89669800 401.26589966]
[153.84971619 414.66583252]
[156.92851257 429.44497681]
[155.90461731 444.50668335]
[150.85401917 458.73318481]
[142.15150452 471.06884766]
[130.44284058 480.59826660]
[116.59690094 486.61431885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[30 120]
[31 119]
[41 58]
[42 57]
[43 56]
[44 55]
[61 118]
[62 117]
[63 116]
[64 115]
[65 114]
[66 85]
[67 84]
[68 83]
[69 82]
[70 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
