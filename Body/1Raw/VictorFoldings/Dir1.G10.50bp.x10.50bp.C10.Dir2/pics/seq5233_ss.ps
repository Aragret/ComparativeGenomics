%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUCUUAGGGGGGGGGGGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACxxxxxxxxxxGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUACCCCCCCCCCAAAAUCUUUG\
) } def
/len { sequence length } bind def

/coor [
[12.23176575 501.38232422]
[-1.61417282 495.36630249]
[-13.32283497 485.83688354]
[-22.02535820 473.50122070]
[-27.07596016 459.27468872]
[-28.09985161 444.21301270]
[-25.02105331 429.43383789]
[-18.06803131 416.03390503]
[-7.75674725 405.00759888]
[5.14763403 397.17306519]
[19.68752098 393.11175537]
[19.68752098 378.11175537]
[19.68752098 363.11175537]
[19.68752098 348.11175537]
[19.68752098 333.11175537]
[19.68752098 318.11175537]
[19.68752098 303.11175537]
[19.68752098 288.11175537]
[19.68752098 273.11175537]
[19.68752098 258.11175537]
[11.90802860 270.93670654]
[1.00932407 281.24295044]
[-12.23001385 288.29418945]
[-26.86419487 291.58670044]
[-41.84778976 290.88531494]
[-56.11039734 286.24008179]
[-68.63313293 277.98291016]
[-78.52139282 266.70361328]
[-85.06879425 253.20800781]
[-87.80759430 238.46015930]
[-86.54214478 223.51364136]
[-81.36283875 209.43617249]
[-72.63968658 197.23344421]
[-60.99584198 187.77719116]
[-47.26311874 181.74291992]
[-32.42255402 179.56173706]
[-17.53431892 181.38945007]
[-3.66200209 187.09547424]
[8.20339108 196.27221680]
[17.21422195 208.26408386]
[22.72677803 222.21441650]
[24.34739494 237.12113953]
[30.69452477 223.53018188]
[37.04165649 209.93922424]
[43.38878250 196.34828186]
[39.55216980 184.83360291]
[44.78120422 173.43728638]
[56.75529099 168.53065491]
[63.38378906 155.07469177]
[70.01229095 141.61871338]
[76.64078522 128.16275024]
[75.95467377 123.37686157]
[78.31336975 118.11683655]
[83.83516693 114.29358673]
[91.01767731 101.12500763]
[90.43775177 97.23912048]
[91.60721588 93.11867523]
[94.58966064 89.56575775]
[99.08123779 87.37953949]
[107.07115936 74.68461609]
[115.06107330 61.98968506]
[123.05098724 49.29475403]
[131.04090881 36.59982300]
[139.03082275 23.90489388]
[138.82508850 3.79007506]
[156.19989014 -4.60908127]
[163.65480042 -17.62539101]
[150.13169861 -11.13494396]
[135.14149475 -10.59282970]
[121.18489838 -16.08948326]
[110.59016418 -26.70794106]
[105.12474060 -40.67680359]
[105.70038605 -55.66575623]
[112.22106171 -69.17430115]
[123.59897614 -78.94890594]
[137.93605042 -83.35895538]
[152.84051514 -81.66875458]
[165.82598877 -74.16025543]
[174.72619629 -62.08605957]
[178.05638123 -47.46039963]
[175.26155090 -32.72448730]
[185.92317200 -43.27577591]
[196.58480835 -53.82706833]
[207.24642944 -64.37835693]
[211.17919922 -72.69612122]
[218.24131775 -75.03536987]
[229.12014771 -85.36257172]
[239.99897766 -95.68978119]
[250.55026245 -106.35140228]
[260.76373291 -117.33706665]
[270.97723389 -128.32273865]
[274.11282349 -144.41932678]
[289.70654297 -149.49551392]
[301.71691895 -138.32934570]
[297.78869629 -122.40763092]
[281.96289062 -118.10925293]
[271.74942017 -107.12358856]
[261.53591919 -96.13792419]
[261.32229614 -92.55716705]
[259.32302856 -88.90961456]
[255.52990723 -86.05226135]
[250.32617188 -84.81095123]
[239.44735718 -74.48374939]
[228.56852722 -64.15653992]
[217.79771423 -53.71673203]
[207.13609314 -43.16543961]
[196.47447205 -32.61415100]
[185.81283569 -22.06286049]
[176.67111206 -10.17048073]
[169.21620178 2.84582901]
[172.78829956 12.50356770]
[170.37033081 22.73941422]
[162.53266907 30.07934570]
[151.72575378 31.89480972]
[143.73583984 44.58974075]
[135.74591064 57.28467178]
[127.75600433 69.97959900]
[119.76608276 82.67453003]
[111.77616882 95.36946106]
[104.18626404 108.30751801]
[97.00375366 121.47609711]
[90.09675598 134.79125977]
[83.46825409 148.24722290]
[76.83975983 161.70318604]
[70.21125793 175.15914917]
[71.87451935 193.46798706]
[56.97973633 202.69540405]
[50.63260651 216.28636169]
[44.28547668 229.87730408]
[37.93834686 243.46826172]
[34.68751907 258.11175537]
[34.68751907 273.11175537]
[34.68751907 288.11175537]
[34.68751907 303.11175537]
[34.68751907 318.11175537]
[34.68751907 333.11175537]
[34.68751907 348.11175537]
[34.68751907 363.11175537]
[34.68751907 378.11175537]
[34.68751907 393.11175537]
[49.22740936 397.17306519]
[62.13179016 405.00759888]
[72.44306946 416.03390503]
[79.39609528 429.43383789]
[82.47489166 444.21301270]
[81.45100403 459.27468872]
[76.40039825 473.50122070]
[67.69787598 485.83688354]
[55.98921585 495.36630249]
[42.14327621 501.38232422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[42 130]
[43 129]
[44 128]
[45 127]
[48 125]
[49 124]
[50 123]
[51 122]
[54 121]
[55 120]
[59 119]
[60 118]
[61 117]
[62 116]
[63 115]
[64 114]
[66 110]
[67 109]
[81 108]
[82 107]
[83 106]
[84 105]
[86 104]
[87 103]
[88 102]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
