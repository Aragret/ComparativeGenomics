%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAAAUAGGGGGGGGGGGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCxxxxxxxxxxUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACACCCCCCCCCCAAACACAUAG\
) } def
/len { sequence length } bind def

/coor [
[85.54960632 465.25839233]
[72.67633057 457.35552979]
[62.55204010 446.14501953]
[55.99745560 432.53567505]
[53.54393387 417.63073730]
[55.39037323 402.63848877]
[61.38708496 388.77429199]
[71.04794312 377.16204834]
[83.58979034 368.74310303]
[97.99591827 364.19992065]
[97.68386078 349.20318604]
[97.37180328 334.20642090]
[97.05974579 319.20968628]
[96.74768829 304.21292114]
[96.43563080 289.21615601]
[96.12358093 274.21942139]
[95.81152344 259.22265625]
[95.49946594 244.22590637]
[95.18740845 229.22915649]
[87.18701172 216.66560364]
[94.63553619 202.70744324]
[94.32348633 187.71069336]
[94.01142883 172.71394348]
[86.01102448 160.15039062]
[93.45955658 146.19223022]
[93.14749908 131.19548035]
[86.22333527 128.81524658]
[80.02317047 124.92070007]
[74.87284088 119.71650696]
[71.04299927 113.47616577]
[68.73492432 106.52761841]
[53.74222565 106.05957794]
[38.74953079 105.59153748]
[30.72710228 118.68872070]
[17.22323036 126.00588989]
[1.87039065 125.57477570]
[-11.20158195 117.51132965]
[-18.47639084 103.98458862]
[-17.99715042 88.63317871]
[-9.89277363 75.58654022]
[3.65670395 68.35417175]
[19.00654030 68.88152313]
[32.02770615 77.02675629]
[39.21757507 90.59883881]
[54.21026993 91.06687927]
[69.20296478 91.53492737]
[73.08842468 82.79877472]
[79.38555908 75.60411072]
[87.53003693 70.59566498]
[96.79200745 68.22227478]
[106.34146118 68.69663239]
[112.68859100 55.10568237]
[110.64479828 36.83541489]
[125.34439087 27.30011749]
[131.40740967 13.58006477]
[137.47041321 -0.13998882]
[126.58810425 -10.66617203]
[119.97615051 -24.25491905]
[118.41521454 -39.25770950]
[122.07450867 -53.86180496]
[130.49363708 -66.30928040]
[142.64050293 -75.10861969]
[157.03771973 -79.21341705]
[171.94233704 -78.14682770]
[178.00534058 -91.86688232]
[165.52407837 -83.54713440]
[150.97306824 -79.90464020]
[136.04411316 -81.36289978]
[122.47302246 -87.75236511]
[111.83766937 -98.33014679]
[105.37463379 -111.86636353]
[103.83536530 -126.78717041]
[107.39882660 -141.35775757]
[115.65070343 -153.88398743]
[127.63156128 -162.90945435]
[141.94837952 -167.38479614]
[156.93656921 -166.78964233]
[170.85345459 -161.19319153]
[182.08094788 -151.24615479]
[189.31361389 -138.10505676]
[191.71054077 -123.29780579]
[188.99201965 -108.54330444]
[199.20550537 -119.52896881]
[209.41897583 -130.51463318]
[219.63246155 -141.50030518]
[229.84594727 -152.48596191]
[223.48963928 -166.29414368]
[222.90632629 -181.48388672]
[228.18498230 -195.73886108]
[238.52061462 -206.88529968]
[252.33714294 -213.22343445]
[267.52764893 -213.78675842]
[281.77566528 -208.48936462]
[292.90847778 -198.13906860]
[299.22845459 -184.31420898]
[299.77178955 -169.12298584]
[294.45565796 -154.88194275]
[284.09072876 -143.76274109]
[270.25756836 -137.46098328]
[255.06564331 -136.93762207]
[240.83160400 -142.27249146]
[230.61813354 -131.28681946]
[220.40464783 -120.30115509]
[210.19116211 -109.31549072]
[199.97769165 -98.32982635]
[191.72540283 -85.80386353]
[185.66238403 -72.08380890]
[196.48548889 -61.78110123]
[203.14312744 -48.37196732]
[204.81451416 -33.46623230]
[201.27871704 -18.86076546]
[192.94372559 -6.32289982]
[180.79946899 2.62344241]
[166.30020142 6.88295507]
[151.19047546 5.92302418]
[145.12745667 19.64307785]
[139.06445312 33.36313248]
[143.13978577 44.79549789]
[138.14897156 56.29813766]
[126.27954102 61.45281219]
[119.93241119 75.04376221]
[131.53001404 94.90364838]
[126.77961731 117.40594482]
[108.14425659 130.88342285]
[108.45630646 145.88017273]
[116.47903442 159.51640320]
[109.00817871 172.40188599]
[109.32023621 187.39863586]
[109.63229370 202.39538574]
[117.65501404 216.03161621]
[110.18416595 228.91709900]
[110.49621582 243.91384888]
[110.80827332 258.91061401]
[111.12033081 273.90734863]
[111.43238831 288.90411377]
[111.74444580 303.90084839]
[112.05650330 318.89761353]
[112.36855316 333.89437866]
[112.68061066 348.89111328]
[112.99266815 363.88787842]
[127.57530975 367.82781982]
[140.45651245 375.71777344]
[150.59207153 386.91809082]
[157.16032410 400.52084351]
[159.62881470 415.42330933]
[157.79743958 430.41738892]
[151.81465149 444.28762817]
[142.16546631 455.90957642]
[129.63208008 464.34112549]
[115.23052979 468.89874268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[23 127]
[25 125]
[26 124]
[31 46]
[32 45]
[33 44]
[51 121]
[52 120]
[54 117]
[55 116]
[56 115]
[64 107]
[65 106]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
