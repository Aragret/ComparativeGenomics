%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACAAACAGGGGGGGGGGCUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCxxxxxxxxxxUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACCCCCCCCCCCACCAACAAACA\
) } def
/len { sequence length } bind def

/coor [
[68.86693573 385.24822998]
[55.94778061 377.48986816]
[45.16648483 366.96084595]
[37.10446930 354.22897339]
[32.19651031 339.98086548]
[30.70728493 324.98489380]
[32.71710968 310.04980469]
[38.11759186 295.98098755]
[46.61749649 283.53717041]
[57.75843048 273.38946533]
[70.93957520 266.08508301]
[85.45009613 262.01794434]
[84.83427429 247.03059387]
[84.21844482 232.04322815]
[83.60262299 217.05587769]
[82.98679352 202.06852722]
[82.37097168 187.08117676]
[81.75514221 172.09382629]
[81.13932037 157.10646057]
[80.52349091 142.11911011]
[68.10517883 133.70570374]
[53.95786285 138.69102478]
[39.81054688 143.67634583]
[25.66322899 148.66166687]
[11.51591301 153.64698792]
[-2.63140345 158.63230896]
[-16.77871895 163.61763000]
[-24.97668457 177.40795898]
[-40.88875580 179.45382690]
[-52.30855179 168.18582153]
[-50.47578430 152.24780273]
[-36.79639816 143.86604309]
[-21.76404190 149.47032166]
[-7.61672544 144.48500061]
[6.53059101 139.49967957]
[20.67790794 134.51435852]
[34.82522583 129.52903748]
[48.97254181 124.54370880]
[63.11985779 119.55838776]
[59.32125854 102.75447845]
[62.64719009 86.26385498]
[72.19188690 72.90599060]
[86.01625061 64.82630920]
[101.53358459 63.15390396]
[105.19229126 48.60694885]
[108.85099792 34.05999374]
[112.50970459 19.51304054]
[99.56262207 10.02863598]
[91.25545502 -3.65855360]
[88.82999420 -19.44574356]
[92.62704468 -34.92068100]
[102.03889465 -47.73022461]
[115.60634613 -55.93817139]
[131.24491882 -58.31788635]
[134.60418701 -72.93689728]
[137.96343994 -87.55590057]
[123.82719421 -92.62569427]
[110.38980103 -99.33187103]
[97.83990479 -107.58029938]
[86.35369110 -117.25518036]
[76.09240723 -128.22068787]
[67.20010376 -140.32289124]
[59.80161285 -153.39189148]
[54.00080109 -167.24421692]
[49.87910080 -181.68539429]
[47.49437714 -196.51272583]
[46.88010788 -211.51802063]
[48.04491043 -226.49064636]
[50.97243881 -241.22041321]
[55.62158966 -255.50053406]
[61.92710495 -269.13052368]
[69.80045319 -281.91906738]
[79.13111877 -293.68661499]
[89.78810120 -304.26797485]
[101.62180328 -313.51458740]
[114.46608734 -321.29666138]
[128.14064026 -327.50494385]
[142.45350647 -332.05227661]
[157.20375061 -334.87481689]
[172.18429565 -335.93295288]
[187.18484497 -335.21182251]
[201.99479675 -332.72158813]
[216.40626526 -328.49713135]
[230.21693420 -322.59780884]
[243.23291016 -315.10644531]
[255.27146912 -306.12817383]
[266.16363525 -295.78903198]
[275.75643921 -284.23422241]
[283.91528320 -271.62588501]
[290.52560425 -258.14108276]
[295.49459839 -243.96908569]
[298.75247192 -229.30885315]
[300.25357056 -214.36619568]
[299.97674561 -199.35087585]
[297.92593384 -184.47369385]
[294.12991333 -169.94349670]
[288.64193726 -155.96427917]
[281.53912354 -142.73226929]
[272.92111206 -130.43324280]
[262.90890503 -119.23983002]
[251.64308167 -109.30919647]
[239.28176880 -100.78074646]
[225.99851990 -93.77420044]
[211.97981262 -88.38792419]
[197.42242432 -84.69752502]
[182.53074646 -82.75481415]
[167.51380920 -82.58707428]
[152.58244324 -84.19664764]
[149.22319031 -69.57763672]
[145.86393738 -54.95862961]
[157.62239075 -47.24111557]
[166.05017090 -35.94347763]
[170.11437988 -22.41607666]
[169.30523682 -8.28455734]
[163.69992065 4.74551916]
[153.95565796 15.09451389]
[141.23280334 21.50021172]
[127.05665588 23.17174721]
[123.39795685 37.71870041]
[119.73925018 52.26565552]
[116.08054352 66.81260681]
[124.94565582 72.18206024]
[132.07049561 79.89485931]
[136.84350586 89.39934540]
[138.82493591 99.98678589]
[137.78642273 110.84410095]
[133.73448181 121.11631775]
[126.91581726 129.97386169]
[117.80344391 136.67948914]
[107.06433868 140.64935303]
[95.51084900 141.50329590]
[96.12667084 156.49064636]
[96.74250031 171.47799683]
[97.35832214 186.46534729]
[97.97415161 201.45269775]
[98.58997345 216.44004822]
[99.20580292 231.42741394]
[99.82162476 246.41476440]
[100.43744659 261.40209961]
[115.23272705 264.26507568]
[128.96868896 270.46343994]
[140.90460205 279.66296387]
[150.39675903 291.36749268]
[156.93324280 304.94580078]
[160.16159058 319.66567993]
[159.90766907 334.73327637]
[156.18518066 349.33599854]
[149.19487000 362.68637085]
[139.31372070 374.06439209]
[127.07462311 382.85650635]
[113.13759613 388.58853149]
[98.25425720 390.95135498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 39]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[27 33]
[44 121]
[45 120]
[46 119]
[47 118]
[54 110]
[55 109]
[56 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
