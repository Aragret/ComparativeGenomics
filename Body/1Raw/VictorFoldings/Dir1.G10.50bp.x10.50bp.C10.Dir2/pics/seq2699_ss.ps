%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACCAAAAACAUGGGGGGGGGGCACCUCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGxxxxxxxxxxUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUUUUAUUCCAGUUCCCCCCCCCCCUAACCAAAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[101.54845428 407.16342163]
[87.27667999 402.35397339]
[74.37269592 394.58859253]
[63.44004440 384.23043823]
[54.99005890 371.76400757]
[49.41796112 357.77236938]
[46.98437119 342.90994263]
[47.80311203 327.87188721]
[51.83589172 313.36151123]
[58.89408493 300.05752563]
[68.64756775 288.58218384]
[80.64015961 279.47219849]
[94.31093597 273.15365601]
[109.02049255 269.92208862]
[109.02049255 254.92208862]
[109.02049255 239.92208862]
[109.02049255 224.92208862]
[109.02049255 209.92208862]
[109.02049255 194.92208862]
[109.02049255 179.92208862]
[109.02049255 164.92208862]
[109.02049255 149.92208862]
[109.02049255 134.92208862]
[91.23484802 133.29901123]
[77.22563934 123.60208130]
[70.16550446 109.00312042]
[55.18427277 109.75318909]
[40.20303726 110.50325775]
[25.22180367 111.25332642]
[10.24056816 112.00339508]
[-4.74066687 112.75345612]
[-10.19201565 126.97325897]
[-20.96037483 137.74183655]
[-35.18006516 143.19348145]
[-50.38743210 142.38365173]
[-63.94771194 135.45265198]
[-73.51150513 123.60133362]
[-77.42182922 108.88300323]
[-75.00118256 93.84769440]
[-66.66897583 81.10037994]
[-53.86880112 72.84959412]
[-38.81837463 70.52484131]
[-24.12526703 74.52890015]
[-12.33515072 84.16803741]
[-5.49073458 97.77222443]
[9.49050045 97.02215576]
[24.47173500 96.27208710]
[39.45296860 95.52201843]
[54.43420410 94.77195740]
[69.41544342 94.02188873]
[71.39424133 87.63619232]
[74.68948364 81.81948853]
[79.14952850 76.83944702]
[84.56911469 72.92527008]
[90.69883728 70.25707245]
[89.79891968 55.28409576]
[88.89900970 40.31111526]
[87.99909210 25.33813477]
[87.09917450 10.36515331]
[86.19925690 -4.60782766]
[77.64796448 -17.91894722]
[84.60775757 -31.08748817]
[83.70784760 -46.06047058]
[82.80792999 -61.03345108]
[67.96102905 -63.61534500]
[54.10998535 -69.55213165]
[42.00178146 -78.52364349]
[32.28938675 -90.04605865]
[25.49658394 -103.49799347]
[21.98969841 -118.15399933]
[21.95785141 -133.22369385]
[25.40276337 -147.89439392]
[32.13865280 -161.37490845]
[41.80226135 -172.93827820]
[53.87244034 -181.96089172]
[67.69826508 -187.95616150]
[82.53412628 -190.60078430]
[97.57994080 -189.75212097]
[112.02430725 -185.45596313]
[125.08825684 -177.94398499]
[136.06727600 -167.62129211]
[144.36927795 -155.04458618]
[149.54653931 -140.89210510]
[151.31985474 -125.92708588]
[149.59359741 -110.95655823]
[144.46087646 -96.78786469]
[136.19847107 -84.18511200]
[125.25196075 -73.82794952]
[112.21169281 -66.27492523]
[97.78090668 -61.93336487]
[98.68082428 -46.96038437]
[99.58074188 -31.98740387]
[108.06767273 -19.74725151]
[101.17224121 -5.50774336]
[102.07215881 9.46523762]
[102.97206879 24.43821907]
[103.87198639 39.41119766]
[104.77190399 54.38417816]
[105.67182159 69.35716248]
[118.17239380 73.18865204]
[128.43652344 82.07273865]
[134.45156860 94.79823303]
[134.83009338 109.36943054]
[149.82934570 109.51950836]
[164.82859802 109.66957855]
[179.81657410 109.06943512]
[194.75581360 107.72057343]
[209.69503784 106.37171173]
[224.63426208 105.02285767]
[239.57350159 103.67399597]
[245.95283508 89.70260620]
[258.47250366 80.80577850]
[273.76477051 79.37670135]
[287.71609497 85.79979706]
[296.57363892 98.34729004]
[297.95477295 113.64395142]
[291.48797607 127.57507324]
[278.91278076 136.39324951]
[263.61184692 137.72642517]
[249.70106506 131.21598816]
[240.92236328 118.61322021]
[225.98312378 119.96208191]
[211.04389954 121.31094360]
[196.10467529 122.65980530]
[181.16543579 124.00866699]
[190.58584595 135.68154907]
[187.53373718 150.36775208]
[174.24249268 157.32066345]
[160.43798828 151.45249939]
[156.22163391 137.05728149]
[164.67851257 124.66883087]
[149.67927551 124.51875305]
[134.68002319 124.36868286]
[124.02049255 134.92208862]
[124.02049255 149.92208862]
[124.02049255 164.92208862]
[124.02049255 179.92208862]
[124.02049255 194.92208862]
[124.02049255 209.92208862]
[124.02049255 224.92208862]
[124.02049255 239.92208862]
[124.02049255 254.92208862]
[124.02049255 269.92208862]
[138.73004150 273.15365601]
[152.40081787 279.47219849]
[164.39341736 288.58218384]
[174.14689636 300.05752563]
[181.20509338 313.36151123]
[185.23786926 327.87188721]
[186.05661011 342.90994263]
[183.62301636 357.77236938]
[178.05091858 371.76400757]
[169.60093689 384.23043823]
[158.66828918 394.58859253]
[145.76429749 402.35397339]
[131.49252319 407.16342163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[62 92]
[63 91]
[64 90]
[103 133]
[104 132]
[105 131]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
