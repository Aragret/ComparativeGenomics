%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUCCUCCAUGGGGGGGGGGAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAxxxxxxxxxxAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCCCCCCCCCCCACCAUCCUCCGU\
) } def
/len { sequence length } bind def

/coor [
[78.37139893 398.52603149]
[64.49726868 392.67776489]
[52.14246368 384.07238770]
[41.84708786 373.08609009]
[34.06121063 360.19912720]
[29.12519836 345.97488403]
[27.25482941 331.03515625]
[28.53186989 316.03305054]
[32.90049362 301.62442017]
[40.16971970 288.43911743]
[50.02177429 277.05355835]
[62.02596283 267.96548462]
[75.65751648 261.57217407]
[90.32052612 258.15313721]
[90.02039337 243.15612793]
[89.72026062 228.15913391]
[89.42012787 213.16213989]
[89.11999512 198.16514587]
[88.81986237 183.16813660]
[88.51972961 168.17114258]
[88.21959686 153.17414856]
[87.91946411 138.17715454]
[87.61933136 123.18015289]
[80.73859406 110.04943848]
[82.94882965 97.97058105]
[90.49581146 91.70090485]
[83.03917694 78.68558502]
[75.58254242 65.67026520]
[68.12590790 52.65494156]
[60.66926956 39.63961792]
[47.04500580 45.93793488]
[32.92364883 51.02484512]
[18.41267204 54.86162567]
[3.62251329 57.41907883]
[-11.33426189 58.67774200]
[-26.34382248 58.62803650]
[-41.29193497 57.27033615]
[-56.06482697 54.61497879]
[-70.55007935 50.68217468]
[-84.63742828 45.50185013]
[-98.21968079 39.11343384]
[-111.19345093 31.56554413]
[-123.46000671 22.91563034]
[-134.92597961 13.22952271]
[-145.50411987 2.58093858]
[-155.11392212 -8.94907761]
[-163.68222046 -21.27277374]
[-171.14382935 -34.29635620]
[-177.44195557 -47.92070770]
[-182.52867126 -62.04213715]
[-186.36524963 -76.55316925]
[-188.92250061 -91.34336090]
[-190.18095398 -106.30015564]
[-190.13102722 -121.30971527]
[-188.77311707 -136.25781250]
[-186.11755371 -151.03067017]
[-182.18455505 -165.51585388]
[-177.00402832 -179.60313416]
[-170.61541748 -193.18530273]
[-163.06735229 -206.15896606]
[-154.41726685 -218.42539978]
[-144.73100281 -229.89123535]
[-134.08226013 -240.46923828]
[-122.55211639 -250.07885742]
[-110.22829437 -258.64700317]
[-97.20461273 -266.10842896]
[-83.58016968 -272.40637207]
[-69.45867157 -277.49285889]
[-54.94758224 -281.32925415]
[-40.15735245 -283.88629150]
[-25.20054245 -285.14453125]
[-10.19098377 -285.09439087]
[4.75708914 -283.73629761]
[19.52991104 -281.08050537]
[34.01504898 -277.14730835]
[48.10225677 -271.96658325]
[61.68432999 -265.57778931]
[74.65789032 -258.02954102]
[86.92420197 -249.37927246]
[98.38990784 -239.69284058]
[108.96775055 -229.04396057]
[118.57721710 -217.51367188]
[127.14517975 -205.18974304]
[134.60643005 -192.16595459]
[140.90417480 -178.54141235]
[145.99047852 -164.41984558]
[149.82664490 -149.90870667]
[152.38348389 -135.11843872]
[153.64151001 -120.16161346]
[153.59118652 -105.15205383]
[152.23284912 -90.20400238]
[149.57687378 -75.43122101]
[145.64346313 -60.94613647]
[140.46253967 -46.85899734]
[134.07354736 -33.27701950]
[126.52511597 -20.30356407]
[117.87468719 -8.03737450]
[108.18809509 3.42819738]
[97.53907013 14.00588799]
[86.00865173 23.61519432]
[73.68459320 32.18298340]
[81.14122772 45.19830704]
[88.59786224 58.21362686]
[96.05449677 71.22895050]
[103.51113129 84.24427032]
[116.74436951 91.30694580]
[131.70759583 90.25727081]
[146.67082214 89.20759583]
[161.63404846 88.15792847]
[176.59727478 87.10825348]
[191.56051636 86.05857849]
[198.88217163 72.47930145]
[212.39410400 65.03408813]
[227.78469849 66.09867096]
[240.14286804 75.33335114]
[245.52516174 89.79137421]
[242.21411133 104.85923767]
[231.26626587 115.72884369]
[216.17504883 118.93173218]
[201.75599670 113.44588470]
[192.61018372 101.02180481]
[177.64695740 102.07147980]
[162.68373108 103.12115479]
[147.72050476 104.17082977]
[132.75727844 105.22049713]
[117.79404449 106.27017212]
[132.70953369 107.86023712]
[142.70832825 119.04165649]
[142.62802124 134.04144287]
[132.51008606 145.11517334]
[117.57843781 146.54545593]
[105.54230499 137.59382629]
[102.61633301 122.88002014]
[102.91646576 137.87701416]
[103.21659851 152.87402344]
[103.51673126 167.87101746]
[103.81685638 182.86801147]
[104.11698914 197.86500549]
[104.41712189 212.86199951]
[104.71725464 227.85900879]
[105.01738739 242.85600281]
[105.31752014 257.85299683]
[120.10558319 260.68264771]
[133.98200989 266.52545166]
[146.34019470 275.12597656]
[156.63989258 286.10821533]
[164.43084717 298.99212646]
[169.37245178 313.21444702]
[171.24870300 328.15341187]
[169.97755432 343.15600586]
[165.61460876 357.56637573]
[158.35057068 370.75451660]
[148.50299072 382.14395142]
[136.50238037 391.23675537]
[122.87334442 397.63543701]
[108.21168518 401.06024170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[106 126]
[107 125]
[108 124]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
