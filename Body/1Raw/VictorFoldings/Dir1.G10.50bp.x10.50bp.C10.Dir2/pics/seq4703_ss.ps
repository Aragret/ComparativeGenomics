%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAGCGCUAGGGGGGGGGGAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCxxxxxxxxxxGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGCCCCCCCCCCUCACAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[62.73406219 702.50866699]
[48.17420578 698.60046387]
[34.97306061 691.32080078]
[23.89812851 681.09295654]
[15.59328938 668.51147461]
[10.54137611 654.30792236]
[9.03610134 639.30798340]
[11.16497803 624.38378906]
[16.80423737 610.40301514]
[25.62601852 598.17846680]
[37.11743546 588.42089844]
[50.61039352 581.69750977]
[65.32043457 578.39929199]
[65.62841034 563.40246582]
[65.93638611 548.40563965]
[66.24436188 533.40881348]
[66.55233765 518.41192627]
[66.86032104 503.41510010]
[67.16829681 488.41827393]
[67.47627258 473.42144775]
[67.78424835 458.42459106]
[64.75854492 451.63067627]
[68.25566101 443.12387085]
[68.87149048 428.13650513]
[69.48731232 413.14916992]
[56.10113144 409.94058228]
[43.54335403 404.29171753]
[32.25467682 396.39889526]
[22.63158989 386.53738403]
[15.01246262 375.05148315]
[9.66564655 362.34277344]
[6.78002071 348.85589600]
[6.45831966 335.06307983]
[8.71347809 321.44750977]
[13.46812057 308.48657227]
[20.55721283 296.63497925]
[29.73378944 286.30883789]
[40.67756271 277.87106323]
[53.00608826 271.61862183]
[66.28814697 267.77206421]
[80.05881500 266.46780396]
[81.59610748 251.54678345]
[83.13339996 236.62576294]
[84.67069244 221.70474243]
[85.90130615 206.75531006]
[86.82472229 191.78376770]
[87.74813080 176.81221008]
[88.67154694 161.84066772]
[89.59496307 146.86911011]
[90.51837158 131.89756775]
[74.38330841 121.24008179]
[66.89826202 103.41043091]
[70.59072876 84.42917633]
[84.21385956 70.70574188]
[80.25724792 56.23697281]
[76.30064392 41.76820374]
[72.34403229 27.29943657]
[57.28338623 27.82259750]
[42.50817108 24.85784149]
[28.81519890 18.56505203]
[16.94290924 9.28359413]
[7.53156281 -2.48599720]
[1.08870065 -16.10900116]
[-2.03822184 -30.85074806]
[-1.68057334 -45.91623306]
[2.14235830 -60.49299240]
[9.22440720 -73.79492188]
[19.18364716 -85.10466003]
[31.48299026 -93.81229401]
[45.45914841 -99.44822693]
[60.35840225 -101.70852661]
[75.37725830 -100.47129059]
[89.70575714 -95.80324554]
[102.57119751 -87.95613098]
[113.27975464 -77.35313416]
[121.25392914 -64.56605530]
[126.06368256 -50.28449631]
[127.44963074 -35.27863693]
[125.33703613 -20.35772133]
[119.83982086 -6.32642221]
[111.25444794 6.05857372]
[100.04392242 16.12935829]
[86.81279755 23.34282684]
[90.76940918 37.81159592]
[94.72602081 52.28036118]
[98.68263245 66.74913025]
[105.00794220 67.10202789]
[111.15175629 68.64726257]
[116.89139557 71.32881927]
[127.22229767 60.45350266]
[137.55319214 49.57818985]
[147.88409424 38.70287704]
[148.91142273 22.69274902]
[162.15109253 13.63234138]
[177.44674683 18.47201920]
[183.06488037 33.49919891]
[174.69573975 47.18631363]
[158.75941467 49.03377914]
[148.42851257 59.90909195]
[138.09761047 70.78440857]
[127.76670837 81.65972137]
[132.70315552 93.84703064]
[132.53344727 106.99504089]
[127.28406525 119.05087280]
[117.77462769 128.13215637]
[105.48992157 132.82098389]
[104.56651306 147.79252625]
[103.64309692 162.76408386]
[102.71968079 177.73562622]
[101.79627228 192.70718384]
[100.87285614 207.67872620]
[103.51274109 213.84910583]
[102.71429443 219.55439758]
[99.59171295 223.24203491]
[98.05442047 238.16305542]
[96.51712799 253.08407593]
[94.97983551 268.00509644]
[110.48339844 273.08657837]
[124.48840332 281.44302368]
[136.31358337 292.66464233]
[145.38439941 306.20230103]
[151.26104736 321.39447021]
[153.65966797 337.49951172]
[152.46617126 353.73190308]
[147.74156189 369.30050659]
[139.71887207 383.44723511]
[128.79168701 395.48379517]
[115.49481201 404.82537842]
[100.47808838 411.01885986]
[84.47467041 413.76498413]
[83.85884094 428.75231934]
[83.24301910 443.73968506]
[82.78108978 458.73257446]
[82.47311401 473.72940063]
[82.16513824 488.72625732]
[81.85715485 503.72308350]
[81.54917908 518.71990967]
[81.24120331 533.71673584]
[80.93322754 548.71362305]
[80.62524414 563.71044922]
[80.31726837 578.70727539]
[94.87949371 582.60662842]
[108.08504486 589.87829590]
[119.16617584 600.09942627]
[127.47864532 612.67584229]
[132.53916931 626.87634277]
[134.05354309 641.87536621]
[131.93370056 656.80084229]
[126.30292511 670.78503418]
[117.48855591 683.01495361]
[106.00305939 692.77947998]
[92.51417542 699.51104736]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[23 132]
[24 131]
[25 130]
[41 117]
[42 116]
[43 115]
[44 114]
[45 111]
[46 110]
[47 109]
[48 108]
[49 107]
[50 106]
[54 86]
[55 85]
[56 84]
[57 83]
[89 101]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
