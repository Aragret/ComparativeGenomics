%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCCUAUUGGGGGGGGGGUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCxxxxxxxxxxUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCCCCCCCCCCCUAAUCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[82.93682098 417.94015503]
[70.37860107 409.58901978]
[60.29237747 398.37655640]
[53.31218338 385.00765991]
[49.87680054 370.32266235]
[50.20217896 355.24468994]
[54.26786041 340.72158813]
[61.81828308 327.66622925]
[72.37880707 316.89935303]
[85.28560638 309.09771729]
[99.72733307 304.75177002]
[99.10335541 289.76473999]
[98.47937775 274.77770996]
[97.85540009 259.79071045]
[97.23142242 244.80369568]
[96.60744476 229.81668091]
[95.98346710 214.82966614]
[95.35948944 199.84263611]
[94.73551178 184.85562134]
[94.11153412 169.86860657]
[90.66864014 163.27375793]
[93.63375854 154.56399536]
[93.32170105 139.56724548]
[93.00964355 124.57048798]
[71.19068909 111.86326599]
[67.95436859 81.97525024]
[52.95518112 81.81921387]
[37.95599365 81.66317749]
[26.71014214 92.44132996]
[11.50105476 92.06941986]
[1.29503882 81.28179932]
[-13.70414925 81.12576294]
[-28.70333862 80.96972656]
[-43.70252609 80.81369019]
[-53.74017334 92.80450439]
[-69.14595795 95.48700714]
[-82.64573669 87.59461212]
[-87.86533356 72.85385895]
[-82.34020233 58.22487640]
[-68.67915344 50.61503220]
[-53.33251190 53.61745834]
[-43.54648972 65.81449890]
[-28.54730225 65.97053528]
[-13.54811287 66.12657166]
[1.45107543 66.28260803]
[11.87930584 55.70964432]
[27.09283829 55.65421677]
[38.11203003 66.66399384]
[53.11122131 66.82003021]
[68.11040497 66.97606659]
[73.33031464 61.59066010]
[58.40022278 60.14414978]
[50.22224426 47.56954575]
[54.95441437 33.33555222]
[69.03340149 28.16039848]
[81.85768890 35.94098282]
[83.77012634 50.81985092]
[88.99003601 45.43444824]
[88.36605835 30.44743156]
[87.74208069 15.46041584]
[72.89635468 12.95081997]
[58.89695740 7.40909719]
[46.35589218 -0.92249161]
[35.82139587 -11.67972565]
[27.75399399 -24.39234543]
[22.50635529 -38.50460815]
[20.30788422 -53.39958572]
[21.25469017 -68.42613983]
[25.30538177 -82.92736816]
[32.28287888 -96.26934052]
[41.88216019 -107.86879730]
[53.68358231 -117.21867371]
[67.17123413 -123.91022491]
[81.75550842 -127.65091705]
[96.79882050 -128.27723694]
[111.64356232 -125.76180267]
[125.64076996 -120.21457672]
[138.17855835 -111.87805176]
[148.70881653 -101.11667633]
[156.77122498 -88.40088654]
[162.01330566 -74.28656006]
[164.20591736 -59.39071655]
[163.25320435 -44.36453629]
[159.19680786 -29.86490440]
[152.21406555 -16.52568054]
[142.61021423 -4.92999506]
[130.80511475 4.41523504]
[117.31483459 11.10147762]
[102.72909546 14.83643818]
[103.35307312 29.82345390]
[103.97705078 44.81047058]
[115.86943054 53.95220566]
[130.51292419 50.70137787]
[145.15643311 47.45055389]
[151.05767822 35.30012512]
[162.71946716 28.87901878]
[175.75491333 30.34583664]
[185.40670776 38.93883514]
[200.11466980 35.99335098]
[214.82263184 33.04787064]
[229.53059387 30.10238647]
[244.23855591 27.15690422]
[247.98178101 12.35991001]
[257.78106689 0.65791309]
[271.69076538 -5.62564707]
[286.94909668 -5.24316406]
[300.52648926 1.72941899]
[309.72717285 13.90769100]
[312.72430420 28.87364769]
[308.92285156 43.65578461]
[299.07754517 55.31910324]
[285.14321899 61.54784012]
[269.88653564 61.10527420]
[256.33670044 54.07927704]
[247.18403625 41.86486816]
[232.47607422 44.81034851]
[217.76811218 47.75583267]
[203.06015015 50.70131302]
[188.35218811 53.64679718]
[179.66503906 68.01311493]
[162.95343018 71.75563812]
[148.40725708 62.09405518]
[133.76376343 65.34487915]
[119.12025452 68.59570312]
[130.95384216 103.54577637]
[108.00640106 124.25843048]
[108.31845856 139.25518799]
[108.63050842 154.25193787]
[109.09855652 169.24462891]
[109.72253418 184.23164368]
[110.34651184 199.21865845]
[110.97048950 214.20568848]
[111.59445953 229.19270325]
[112.21843719 244.17971802]
[112.84241486 259.16671753]
[113.46639252 274.15374756]
[114.09037018 289.14074707]
[114.71434784 304.12777710]
[129.46736145 307.25820923]
[142.97799683 313.95996094]
[154.39697266 323.81176758]
[163.00648499 336.19430542]
[168.26533508 350.32919312]
[169.84294128 365.32794189]
[167.64013672 380.24765015]
[161.79537964 394.15054321]
[152.67610168 406.16259766]
[140.85552979 415.52874756]
[127.07672119 421.66024780]
[112.20582581 424.17163086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 128]
[23 127]
[24 126]
[26 50]
[27 49]
[28 48]
[31 45]
[32 44]
[33 43]
[34 42]
[58 91]
[59 90]
[60 89]
[92 124]
[93 123]
[94 122]
[98 119]
[99 118]
[100 117]
[101 116]
[102 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
