%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGUGACUAUAGGGGGGGGGGUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUxxxxxxxxxxUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUCCCCCCCCCCGAGUGACUACA\
) } def
/len { sequence length } bind def

/coor [
[16.91312218 294.76852417]
[4.80545139 289.14599609]
[-6.92387152 282.77169800]
[-18.22822762 275.67098999]
[-29.06268692 267.87207031]
[-39.38418961 259.40594482]
[-49.15171051 250.30625916]
[-58.32643509 240.60920715]
[-66.87188721 230.35328674]
[-74.75411987 219.57928467]
[-87.42563629 227.60627747]
[-100.09715271 235.63327026]
[-112.76866913 243.66027832]
[-125.44018555 251.68727112]
[-132.95764160 265.60842896]
[-147.84971619 265.88299561]
[-160.52122498 273.90997314]
[-173.19274902 281.93698120]
[-185.86425781 289.96398926]
[-198.53578186 297.99096680]
[-211.20729065 306.01797485]
[-223.87879944 314.04498291]
[-231.00495911 328.81488037]
[-247.37693787 329.75839233]
[-256.15264893 315.90493774]
[-248.30441284 301.50573730]
[-231.90580750 301.37344360]
[-219.23428345 293.34646606]
[-206.56277466 285.31945801]
[-193.89125061 277.29244995]
[-181.21974182 269.26547241]
[-168.54821777 261.23846436]
[-155.87670898 253.21147156]
[-149.26560974 239.86447144]
[-133.46717834 239.01576233]
[-120.79566193 230.98875427]
[-108.12414551 222.96176147]
[-95.45262909 214.93476868]
[-82.78111267 206.90776062]
[-91.05694580 191.29869080]
[-98.00276947 175.05404663]
[-103.57023621 158.28692627]
[-107.72058105 141.11405945]
[-110.42492676 123.65499115]
[-111.66442871 106.03124237]
[-111.43047333 88.36550903]
[-109.72468567 70.78076935]
[-106.55893707 53.39943695]
[-101.95526886 36.34250259]
[-95.94572449 19.72870636]
[-88.57213593 3.67370605]
[-79.88584900 -11.71073723]
[-69.94731140 -26.31752777]
[-58.82572174 -40.04498291]
[-46.59849548 -52.79753876]
[-33.35074997 -64.48642731]
[-19.17470932 -75.03027344]
[-4.16905642 -84.35567474]
[11.56175041 -92.39772034]
[27.90820312 -99.10042572]
[44.75651169 -104.41712952]
[61.98938370 -108.31082153]
[79.48686218 -110.75440216]
[78.56344604 -125.72595215]
[77.64003754 -140.69749451]
[76.71662140 -155.66905212]
[75.79320526 -170.64059448]
[74.86979675 -185.61215210]
[60.58785248 -190.89854431]
[49.69535828 -201.54154968]
[44.07950211 -215.69718933]
[44.71326447 -230.91291809]
[51.48684311 -244.55250549]
[63.22667694 -254.25282288]
[77.89876556 -258.33325195]
[92.96107483 -256.08679199]
[105.80398560 -247.90267944]
[114.20236969 -235.19885254]
[116.70116425 -220.17634583]
[112.86743164 -205.43786621]
[103.36540222 -193.53698730]
[89.84134674 -186.53556824]
[90.76475525 -171.56401062]
[91.68817139 -156.59246826]
[92.61158752 -141.62091064]
[93.53499603 -126.64936829]
[94.45841217 -111.67781830]
[108.55391693 -111.57749939]
[122.61151123 -110.53960419]
[136.56890869 -108.56874847]
[150.36425781 -105.67364502]
[163.93643188 -101.86713409]
[177.22526550 -97.16608429]
[190.17190552 -91.59132385]
[202.71894836 -85.16755676]
[214.81082153 -77.92324829]
[226.39392090 -69.89050293]
[237.41693115 -61.10491943]
[247.83099365 -51.60541916]
[257.58996582 -41.43410873]
[266.65060425 -30.63605309]
[274.97277832 -19.25910568]
[282.51956177 -7.35368156]
[289.25756836 5.02746344]
[295.15689087 17.82946396]
[300.19140625 30.99559021]
[304.33880615 44.46749878]
[307.58071899 58.18548965]
[309.90277100 72.08877563]
[311.29464722 86.11574554]
[311.75024414 100.20423889]
[311.26748657 114.29183197]
[309.84854126 128.31608582]
[307.49966431 142.21485901]
[322.08340454 145.72402954]
[336.66717529 149.23320007]
[348.38375854 139.05966187]
[363.84542847 137.74948120]
[377.10684204 145.80644226]
[383.06869507 160.13250732]
[379.43856812 175.21897888]
[367.61230469 185.26481628]
[352.13732910 186.40719604]
[338.96411133 178.20683289]
[333.15798950 163.81695557]
[318.57424927 160.30778503]
[303.99050903 156.79861450]
[300.00610352 169.53962708]
[295.22680664 182.00425720]
[289.67160034 194.14294434]
[283.36251831 205.90748596]
[276.32467651 217.25108337]
[268.58602905 228.12867737]
[260.17733765 238.49702454]
[251.13203430 248.31492615]
[241.48605347 257.54333496]
[231.27774048 266.14559937]
[220.54766846 274.08752441]
[209.33848572 281.33755493]
[197.69473267 287.86682129]
[185.66268921 293.64944458]
[173.29019165 298.66241455]
[160.62638855 302.88580322]
[147.72164917 306.30282593]
[134.62722778 308.89987183]
[121.39517975 310.66668701]
[108.07809448 311.59619141]
[94.72891235 311.68472290]
[81.40067291 310.93191528]
[68.14636230 309.34075928]
[55.01864624 306.91757202]
[42.06971359 303.67202759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 39]
[11 38]
[12 37]
[13 36]
[14 35]
[16 33]
[17 32]
[18 31]
[19 30]
[20 29]
[21 28]
[22 27]
[63 87]
[64 86]
[65 85]
[66 84]
[67 83]
[68 82]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
