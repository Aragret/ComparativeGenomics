%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUUGUAGGGGGGGGGGGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUxxxxxxxxxxUGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCCCCCCCCCCCAACGUUGUAG\
) } def
/len { sequence length } bind def

/coor [
[81.11853790 369.09222412]
[70.57462311 358.30905151]
[63.04434586 345.24209595]
[59.00106049 330.71270752]
[58.69893646 315.63427734]
[62.15696335 300.95458984]
[69.15776062 287.59646606]
[79.26126862 276.39959717]
[91.83235168 268.06781006]
[106.08079529 263.12487793]
[104.83392334 248.17678833]
[103.58704376 233.22869873]
[102.34017181 218.28060913]
[101.09329987 203.33251953]
[99.84642029 188.38442993]
[98.59954834 173.43634033]
[97.35267639 158.48826599]
[96.10579681 143.54017639]
[94.85892487 128.59208679]
[93.61204529 113.64399719]
[87.48086548 109.32444000]
[73.86799622 115.62443542]
[75.21849823 100.68532562]
[69.08731079 96.36576843]
[61.92491150 107.14323425]
[49.72366333 110.03262329]
[39.18655014 104.00961304]
[24.61384773 107.56437683]
[10.04114532 111.11914062]
[-4.53155756 114.67390442]
[-18.48660278 124.30162811]
[-31.60121155 113.55716705]
[-24.90713692 97.98072052]
[-8.08631897 100.10119629]
[6.48638344 96.54644012]
[21.05908585 92.99167633]
[35.63179016 89.43691254]
[47.60438538 76.64406586]
[65.23015594 81.87017059]
[83.30034637 83.11464691]
[96.25119019 92.61228943]
[101.15274048 78.43573761]
[90.20536041 66.08528900]
[86.97992706 49.99516296]
[92.26057434 34.55674744]
[104.52297211 23.93527603]
[120.37278748 20.94612885]
[124.97835541 6.67066813]
[129.58392334 -7.60479212]
[134.18948364 -21.88025284]
[137.44030762 -36.52375412]
[139.30792236 -51.40703583]
[141.17553711 -66.29031372]
[143.04315186 -81.17359161]
[144.91076660 -96.05687714]
[125.42906952 -100.55023956]
[112.94622040 -124.87317657]
[110.15390015 -139.61097717]
[107.36157227 -154.34878540]
[104.56925201 -169.08659363]
[101.77692413 -183.82440186]
[86.75386047 -185.49740601]
[72.89202118 -191.52574158]
[61.42399216 -201.37336731]
[53.36950302 -214.16464233]
[49.44475555 -228.76216125]
[49.99872971 -243.86795044]
[54.98217392 -258.13879395]
[63.95195389 -270.30572510]
[76.11049652 -279.28689575]
[90.37665558 -284.28369141]
[105.48191071 -284.85180664]
[120.08310699 -280.94070435]
[132.88191223 -272.89819336]
[142.74026489 -261.43939209]
[148.78157043 -247.58319092]
[150.46864319 -232.56170654]
[147.65145874 -217.71061707]
[140.58053589 -204.35046387]
[129.88459778 -193.66925049]
[116.51473236 -186.61672974]
[119.30705261 -171.87892151]
[122.09938049 -157.14111328]
[124.89170074 -142.40330505]
[127.68402863 -127.66549683]
[134.82176208 -125.36271667]
[145.94781494 -135.42308044]
[149.09721375 -120.75715637]
[156.23495483 -118.45436859]
[167.11376953 -128.78157043]
[177.99259949 -139.10877991]
[176.85472107 -154.70491028]
[186.04991150 -167.35333252]
[201.23648071 -171.08183289]
[215.24382019 -164.12995911]
[221.45806885 -149.78013611]
[216.94505310 -134.80793762]
[203.83567810 -126.28276825]
[188.31980896 -128.22994995]
[177.44097900 -117.90274811]
[166.56214905 -107.57554626]
[159.79403687 -94.18926239]
[157.92642212 -79.30598450]
[156.05880737 -64.42269897]
[154.19120789 -49.53942108]
[152.32359314 -34.65613937]
[163.43417358 -44.73358917]
[178.20411682 -47.35056686]
[192.10072327 -41.70395660]
[200.85929871 -29.52662659]
[201.79196167 -14.55564880]
[194.61245728 -1.38542461]
[181.52410889 5.94227266]
[166.54356384 5.17866659]
[154.26814270 -3.44190288]
[148.46493530 -17.27468872]
[143.85937500 -2.99922776]
[139.25381470 11.27623272]
[134.64825439 25.55169296]
[144.47593689 35.08457565]
[149.24746704 47.98851776]
[147.97381592 61.75388718]
[140.84762573 73.67708588]
[129.21670532 81.39151764]
[115.32929993 83.33728790]
[110.42774963 97.51384735]
[108.56013489 112.39712524]
[109.80700684 127.34520721]
[111.05388641 142.29330444]
[112.30075836 157.24137878]
[113.54763794 172.18946838]
[114.79450989 187.13755798]
[116.04138184 202.08564758]
[117.28826141 217.03373718]
[118.53513336 231.98182678]
[119.78200531 246.92990112]
[121.02888489 261.87799072]
[135.89933777 264.39202881]
[149.67706299 270.52597046]
[161.49597168 279.89419556]
[170.61312866 291.90786743]
[176.45541382 305.81176758]
[178.65557861 320.73190308]
[177.07531738 335.73034668]
[171.81398010 349.86431885]
[163.20227051 362.24533081]
[151.78155518 372.09509277]
[138.26972961 378.79446411]
[123.51616669 381.92230225]
[108.44829559 381.28198242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 137]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[24 39]
[27 37]
[28 36]
[29 35]
[30 34]
[41 126]
[42 125]
[47 119]
[48 118]
[49 117]
[50 116]
[51 106]
[52 105]
[53 104]
[54 103]
[55 102]
[57 85]
[58 84]
[59 83]
[60 82]
[61 81]
[89 101]
[90 100]
[91 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
