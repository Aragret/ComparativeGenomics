%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAAUAAGGGGGGGGGGCAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAxxxxxxxxxxCAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUACCCCCCCCCCAUAUUAAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.28198242]
[71.19830322 362.26596069]
[59.48964310 352.73654175]
[50.78712082 340.40084839]
[45.73651886 326.17434692]
[44.71262741 311.11267090]
[47.79142761 296.33349609]
[54.74444962 282.93356323]
[65.05573273 271.90722656]
[77.96011353 264.07272339]
[92.50000000 260.01141357]
[92.50000000 245.01141357]
[92.50000000 230.01141357]
[92.50000000 215.01141357]
[92.50000000 200.01141357]
[92.50000000 185.01141357]
[92.50000000 170.01141357]
[92.50000000 155.01141357]
[92.50000000 140.01141357]
[92.50000000 125.01141357]
[86.83374786 122.54929352]
[81.90454102 118.82485962]
[77.98832703 114.04660034]
[75.30432892 108.48201752]
[74.00279236 102.44260406]
[59.29483414 99.49711609]
[44.58687210 96.55163574]
[35.49131393 97.93824768]
[29.60500336 93.38885498]
[14.96150303 90.13803101]
[0.31800136 86.88719940]
[-14.32549953 83.63637543]
[-28.96900177 80.38555145]
[-43.61250305 77.13472748]
[-51.49792862 90.06139374]
[-63.15497589 99.72534943]
[-77.31916809 105.07831573]
[-92.45409393 105.53963470]
[-106.91802216 101.05928040]
[-119.14200592 92.12324524]
[-127.80009460 79.70083618]
[-131.95310974 65.13954163]
[-131.15057373 50.01887512]
[-125.47953796 35.97900009]
[-115.55514526 24.54286575]
[-102.45392609 16.95097351]
[-87.59700775 14.02683830]
[-72.59594727 16.08764648]
[-59.07795334 22.90985680]
[-48.50935364 33.75344849]
[-42.03655624 47.44218826]
[-40.36167526 62.49122620]
[-25.71817589 65.74205017]
[-11.07467461 68.99287415]
[3.56882715 72.24369812]
[18.21232796 75.49452972]
[32.85583115 78.74535370]
[47.53235626 81.84367371]
[62.24031830 84.78915405]
[76.94828033 87.73464203]
[86.71005249 77.52338409]
[100.36166382 73.89080048]
[113.90740967 77.90011597]
[125.20641327 68.03439331]
[118.21626282 56.34623718]
[113.29029083 43.65288925]
[110.56751251 30.31557846]
[110.12425232 16.71367073]
[111.97201538 3.23386359]
[116.05718994 -9.74079990]
[122.26258850 -21.84181595]
[130.41084290 -32.72569275]
[140.26942444 -42.08368301]
[151.55735779 -49.65056992]
[163.95312500 -55.21215820]
[177.10389709 -58.61134720]
[190.63557434 -59.75257492]
[204.16339111 -58.60449219]
[217.30288696 -55.20082855]
[229.68081665 -49.63940430]
[240.94575500 -42.07931519]
[250.77809143 -32.73638916]
[262.85806274 -41.62873840]
[274.93804932 -50.52108765]
[287.01806641 -59.41343689]
[299.09805298 -68.30578613]
[297.50640869 -83.51808167]
[303.70193481 -97.39296722]
[315.92929077 -106.24498749]
[330.84591675 -107.77793884]
[344.43551636 -101.67972565]
[356.51553345 -110.57207489]
[368.59552002 -119.46443176]
[380.67550659 -128.35678101]
[392.75549316 -137.24913025]
[396.57806396 -152.83012390]
[411.20294189 -159.42501831]
[425.41116333 -151.97477722]
[428.30337524 -136.19458008]
[417.66094971 -124.18965149]
[401.64782715 -125.16913605]
[389.56784058 -116.27678680]
[377.48785400 -107.38443756]
[365.40786743 -98.49208832]
[353.32788086 -89.59973907]
[355.11294556 -74.81193542]
[349.21716309 -61.02441025]
[337.13189697 -51.97937012]
[322.04278564 -50.18616104]
[307.99038696 -56.22579956]
[295.91040039 -47.33345032]
[283.83041382 -38.44110107]
[271.75042725 -29.54874992]
[259.67044067 -20.65640068]
[266.68933105 -5.75178766]
[270.52603149 10.27507305]
[271.01763916 26.75254631]
[268.14141846 42.98968124]
[262.01596069 58.30517197]
[252.89624023 72.05596924]
[241.16294861 83.66424561]
[227.30670166 92.64171600]
[211.90744019 98.61014557]
[195.61021423 101.31729889]
[179.09815979 100.64758301]
[163.06381226 96.62702179]
[148.18011475 89.42220306]
[135.07214355 79.33339691]
[123.77313232 89.19911957]
[123.77251434 110.80224609]
[107.50000000 125.01141357]
[107.50000000 140.01141357]
[107.50000000 155.01141357]
[107.50000000 170.01141357]
[107.50000000 185.01141357]
[107.50000000 200.01141357]
[107.50000000 215.01141357]
[107.50000000 230.01141357]
[107.50000000 245.01141357]
[107.50000000 260.01141357]
[122.03988647 264.07272339]
[134.94427490 271.90722656]
[145.25555420 282.93356323]
[152.20857239 296.33349609]
[155.28736877 311.11267090]
[154.26348877 326.17434692]
[149.21287537 340.40084839]
[140.51036072 352.73654175]
[128.80169678 362.26596069]
[114.95575714 368.28198242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 60]
[26 59]
[27 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[63 129]
[64 128]
[82 114]
[83 113]
[84 112]
[85 111]
[86 110]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
