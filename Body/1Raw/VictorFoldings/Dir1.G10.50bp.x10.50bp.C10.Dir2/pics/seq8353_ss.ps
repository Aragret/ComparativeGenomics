%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAUGACGGGGGGGGGGUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGAxxxxxxxxxxAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACCCCCCCCCCCACCAAUGAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 380.63632202]
[71.19830322 374.62026978]
[59.48964310 365.09085083]
[50.78712082 352.75518799]
[45.73651886 338.52868652]
[44.71262741 323.46697998]
[47.79142761 308.68783569]
[54.74444962 295.28790283]
[65.05573273 284.26156616]
[77.96011353 276.42706299]
[92.50000000 272.36575317]
[92.50000000 257.36575317]
[92.50000000 242.36575317]
[92.50000000 227.36575317]
[92.50000000 212.36575317]
[92.50000000 197.36575317]
[92.50000000 182.36575317]
[92.50000000 167.36575317]
[92.50000000 152.36575317]
[92.50000000 137.36575317]
[92.50000000 122.36575317]
[77.70522308 107.70842743]
[80.28717804 87.04309082]
[71.02222443 75.24645233]
[61.75727844 63.44981384]
[52.49232864 51.65317154]
[39.88232422 59.79641724]
[26.57474136 66.74140930]
[12.68311882 72.42889404]
[-1.67402387 76.81034088]
[-16.37419319 79.84837341]
[-31.29197121 81.51707458]
[-46.30007935 81.80220032]
[-61.27047348 80.70132446]
[-76.07543182 78.22383881]
[-90.58863068 74.39086914]
[-104.68625641 69.23513794]
[-118.24802399 62.80061722]
[-131.15823364 55.14220810]
[-143.30673218 46.32525635]
[-154.58987427 36.42498016]
[-164.91137695 25.52585220]
[-174.18321228 13.72085953]
[-182.32624817 1.11072075]
[-189.27101135 -12.19697762]
[-194.95826721 -26.08869553]
[-199.33947754 -40.44591141]
[-202.37727356 -55.14612961]
[-204.04571533 -70.06393433]
[-204.33059692 -85.07205200]
[-203.22946167 -100.04242706]
[-200.75173950 -114.84734344]
[-196.91853333 -129.36047363]
[-191.76255798 -143.45802307]
[-185.32780457 -157.01968384]
[-177.66918945 -169.92976379]
[-168.85203552 -182.07810974]
[-158.95156860 -193.36108398]
[-148.05226135 -203.68241882]
[-136.24711609 -212.95404053]
[-123.63684845 -221.09687805]
[-110.32903290 -228.04141235]
[-96.43721771 -233.72843933]
[-82.07993317 -238.10940552]
[-67.37966156 -241.14695740]
[-52.46182632 -242.81515503]
[-37.45370865 -243.09977722]
[-22.48335075 -241.99841309]
[-7.67847872 -239.52043152]
[6.83459568 -235.68698120]
[20.93204880 -230.53077698]
[34.49360275 -224.09579468]
[47.40355682 -216.43696594]
[59.55175781 -207.61959839]
[70.83456421 -197.71894836]
[81.15571594 -186.81948853]
[90.42715454 -175.01417542]
[98.56977081 -162.40377808]
[105.51409149 -149.09584045]
[111.20088196 -135.20393372]
[115.58161163 -120.84657288]
[118.61891174 -106.14624786]
[120.28686523 -91.22839355]
[120.57124329 -76.22026825]
[119.46961975 -61.24992752]
[116.99139404 -46.44509506]
[113.15769958 -31.93208504]
[108.00125885 -17.83471870]
[101.56606293 -4.27327013]
[93.90701294 8.63655376]
[85.08944702 20.78461075]
[75.18861389 32.06725311]
[64.28897095 42.38822174]
[73.55391693 54.18486404]
[82.81886292 65.98150635]
[92.08381653 77.77814484]
[108.40033722 77.95660400]
[120.69749451 88.68229675]
[135.46354675 86.04342651]
[150.22961426 83.40456390]
[164.99566650 80.76570129]
[179.76171875 78.12683868]
[194.43824768 75.02851105]
[209.01095581 71.47375488]
[223.58364868 67.91899109]
[235.05764771 56.20236588]
[250.87210083 60.54235458]
[254.75843811 76.47434998]
[242.71873474 87.60887909]
[227.13841248 82.49169159]
[212.56570435 86.04645538]
[197.99301147 89.60121918]
[195.84465027 92.47386169]
[192.16842651 94.41989899]
[187.42893982 94.71916199]
[182.40058899 92.89289093]
[167.63452148 95.53175354]
[152.86846924 98.17062378]
[138.10241699 100.80948639]
[123.33636475 103.44834900]
[123.30316162 103.66601562]
[123.26792908 103.88335419]
[136.51051331 110.92848969]
[153.33374023 113.02980042]
[155.97167969 129.77726746]
[140.60896301 136.94827271]
[129.46537781 124.17107391]
[116.22279358 117.12594604]
[112.14728546 120.22177887]
[107.50000000 122.36575317]
[107.50000000 137.36575317]
[107.50000000 152.36575317]
[107.50000000 167.36575317]
[107.50000000 182.36575317]
[107.50000000 197.36575317]
[107.50000000 212.36575317]
[107.50000000 227.36575317]
[107.50000000 242.36575317]
[107.50000000 257.36575317]
[107.50000000 272.36575317]
[122.03988647 276.42706299]
[134.94427490 284.26156616]
[145.25555420 295.28790283]
[152.20857239 308.68783569]
[155.28736877 323.46697998]
[154.26348877 338.52868652]
[149.21287537 352.75518799]
[140.51036072 365.09085083]
[128.80169678 374.62026978]
[114.95575714 380.63632202]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 96]
[24 95]
[25 94]
[26 93]
[98 120]
[99 119]
[100 118]
[101 117]
[102 116]
[103 112]
[104 111]
[105 110]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
