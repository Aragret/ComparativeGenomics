%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCUCCUGGGGGGGGGGACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGxxxxxxxxxxGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCCCCCCCCCCCAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[83.37055969 364.01541138]
[70.15036774 356.74295044]
[59.26356125 346.29592896]
[51.45243073 333.38668823]
[47.24954987 318.89538574]
[46.94147491 303.81002808]
[50.54921722 289.15921021]
[57.82678986 275.94183350]
[68.27799988 265.05905151]
[81.19026184 257.25292969]
[95.68319702 253.05563354]
[95.37113953 238.05888367]
[95.05908203 223.06211853]
[94.74702454 208.06536865]
[94.43497467 193.06861877]
[94.12291718 178.07186890]
[93.81085968 163.07510376]
[93.49880219 148.07835388]
[93.18674469 133.08160400]
[92.87468719 118.08484650]
[90.38382721 132.87658691]
[78.61712646 142.17953491]
[63.64976501 141.19055176]
[53.20942307 130.42025757]
[52.68647385 115.42937469]
[62.35091400 103.95773315]
[77.21497345 101.92863464]
[62.23525620 101.14878845]
[47.25554276 100.36894226]
[32.27582932 99.58909607]
[17.29611397 98.80924988]
[2.31640029 98.02941132]
[-4.55504417 111.61996460]
[-16.36429787 121.23564911]
[-31.06533432 125.21049500]
[-46.11111450 122.85582733]
[-58.89485931 114.57961273]
[-67.20171356 101.81575775]
[-69.59246063 86.77567291]
[-65.65289307 72.06513977]
[-56.06556320 60.23285675]
[-42.49153137 53.32883072]
[-27.28258324 52.54922867]
[-13.07376099 58.02912521]
[-2.32682705 68.81908417]
[3.09624529 83.04969788]
[18.07596016 83.82953644]
[33.05567551 84.60938263]
[48.03538895 85.38922882]
[63.01510239 86.16907501]
[77.99481964 86.94892120]
[84.48297882 73.42472839]
[74.50025940 62.22896576]
[64.51753235 51.03319931]
[54.53480148 39.83743286]
[44.55207443 28.64166641]
[29.49800110 20.84351540]
[32.82401276 4.21901655]
[49.71955490 2.81292844]
[55.74784088 18.65893936]
[65.73056793 29.85470581]
[75.71329498 41.05047226]
[85.69602203 52.24623871]
[95.67874908 63.44200516]
[105.48989868 77.63008881]
[105.21787262 92.35622406]
[117.11025238 83.21448517]
[109.21115875 70.44752502]
[102.64421844 56.94692230]
[97.47682953 42.85121155]
[93.76200867 28.30503845]
[91.53787994 13.45767212]
[90.82727051 -1.53852928]
[91.63746643 -16.52968025]
[93.96015930 -31.36194611]
[97.77150726 -45.88312531]
[103.03240204 -59.94420242]
[109.68886566 -73.40089417]
[117.67258453 -86.11511230]
[126.90163422 -97.95638275]
[137.28131104 -108.80319214]
[148.70509338 -118.54425049]
[161.05577087 -127.07958221]
[174.20658875 -134.32160950]
[188.02261353 -140.19599915]
[202.36206055 -144.64250183]
[217.07777405 -147.61546326]
[232.01876831 -149.08439636]
[247.03170776 -149.03421021]
[261.96255493 -147.46542358]
[276.65808105 -144.39413452]
[290.96746826 -139.85186768]
[304.74389648 -133.88522339]
[317.84600830 -126.55544281]
[330.13934326 -117.93772888]
[341.49774170 -108.12051392]
[351.80465698 -97.20454407]
[360.95434570 -85.30184174]
[368.85287476 -72.53453064]
[375.41921997 -59.03363800]
[380.58599854 -44.93769836]
[384.30017090 -30.39136314]
[386.52365112 -15.54389858]
[387.23361206 -0.54766631]
[386.42272949 14.44344807]
[384.09939575 29.27561188]
[380.28741455 43.79662323]
[375.02587891 57.85747147]
[368.36883545 71.31387329]
[360.38455200 84.02773285]
[351.15499878 95.86859894]
[340.77484131 106.71495819]
[329.35061646 116.45550537]
[316.99957275 124.99029541]
[303.84844971 132.23173523]
[290.03216553 138.10552979]
[275.69250488 142.55139160]
[260.97665405 145.52371216]
[246.03561401 146.99198914]
[231.02265930 146.94113159]
[216.09188843 145.37168884]
[201.39651489 142.29975891]
[187.08731079 137.75686646]
[173.31114197 131.78961182]
[160.20935059 124.45925140]
[147.91639709 115.84099579]
[136.55842590 106.02328491]
[126.25199127 95.10686493]
[114.35961151 104.24860382]
[107.87144470 117.77278900]
[108.18350220 132.76954651]
[108.49555969 147.76629639]
[108.80760956 162.76304626]
[109.11966705 177.75981140]
[109.43172455 192.75656128]
[109.74378204 207.75331116]
[110.05583954 222.75006104]
[110.36789703 237.74682617]
[110.67994690 252.74357605]
[125.33494568 256.33435059]
[138.56074524 263.59658813]
[149.45561218 274.03518677]
[157.27671814 286.93841553]
[161.49078369 301.42648315]
[161.81050110 316.51156616]
[158.21408081 331.16516113]
[150.94671631 344.38818359]
[140.50392151 355.27902222]
[127.59768677 363.09512329]
[113.10799408 367.30361938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[66 129]
[67 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
