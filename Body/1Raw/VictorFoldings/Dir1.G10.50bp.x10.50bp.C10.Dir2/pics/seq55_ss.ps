%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCAUGCGGGGGGGGGGAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCxxxxxxxxxxAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCCCCCCUCCCCAUGC\
) } def
/len { sequence length } bind def

/coor [
[112.76291656 518.50823975]
[101.54748535 508.44293213]
[92.95608521 496.06210327]
[87.45204163 482.03347778]
[85.33218384 467.11358643]
[86.71082306 452.10705566]
[91.51362610 437.82315063]
[99.48157501 425.03219604]
[110.18496704 414.42401123]
[123.04657745 406.57061768]
[137.37281799 401.89559937]
[136.12593079 386.94750977]
[134.87905884 371.99942017]
[133.63218689 357.05133057]
[132.38531494 342.10324097]
[131.13844299 327.15515137]
[129.89157104 312.20709229]
[128.64468384 297.25900269]
[127.39781952 282.31091309]
[126.15093994 267.36282349]
[117.38246155 255.32275391]
[123.94584656 240.92718506]
[122.69897461 225.97909546]
[121.45210266 211.03100586]
[118.50661469 196.32304382]
[113.90105438 182.04759216]
[109.29548645 167.77212524]
[104.21572876 162.33689880]
[104.74594879 153.15155029]
[100.43836212 138.78337097]
[96.13078308 124.41517639]
[91.82319641 110.04699707]
[82.68145752 98.15461731]
[69.90410614 90.29718781]
[57.12674713 82.43976593]
[44.34938812 74.58233643]
[31.57203102 66.72491455]
[15.76369858 66.08680725]
[8.97532272 52.82908249]
[-6.83301067 52.19097900]
[-13.62138653 38.93325424]
[-18.96928978 38.79356766]
[-23.27083206 36.78133011]
[-25.98040199 33.62539673]
[-26.92903900 30.16597748]
[-39.19140625 21.52686119]
[-51.45377350 12.88774586]
[-63.71614456 4.24862957]
[-78.35833740 9.38534451]
[-93.21371460 4.90232801]
[-102.57007599 -7.47660828]
[-102.82971954 -22.99151039]
[-93.89279175 -35.67658234]
[-79.19573975 -40.65415573]
[-64.38986969 -36.01025009]
[-55.16834641 -23.53054619]
[-55.07702637 -8.01373863]
[-42.81465912 0.62537736]
[-30.55229187 9.26449394]
[-18.28992271 17.90361023]
[-5.76396084 26.15589905]
[9.13045025 26.23198891]
[16.83274841 40.05172729]
[31.72715950 40.12781525]
[39.42945862 53.94755554]
[52.20681381 61.80498123]
[64.98416901 69.66240692]
[77.76152802 77.51982880]
[90.53888702 85.37725830]
[83.09275055 72.35592651]
[70.32773590 64.47846985]
[62.13899612 51.91086960]
[60.08930969 37.05156708]
[64.56983948 22.73637199]
[74.72550201 11.69723988]
[88.61816406 6.04091883]
[103.59649658 6.84688139]
[116.80197906 13.96131516]
[125.71443939 26.02647591]
[128.63298035 40.73980713]
[125.00063324 55.29336166]
[115.51033783 66.90989685]
[112.72794342 81.64958191]
[122.23630524 70.04824066]
[131.74465942 58.44689941]
[141.25302124 46.84555817]
[142.72331238 40.29225540]
[146.71289062 36.13117981]
[151.40625000 34.97016907]
[161.38897705 23.77440262]
[161.91079712 7.73983717]
[174.85807800 -1.73367631]
[190.29876709 2.62112999]
[196.38810730 17.46362114]
[188.45486450 31.40790939]
[172.58474731 33.75712967]
[162.60202026 44.95289230]
[152.85437012 56.35391617]
[143.34600830 67.95525360]
[133.83764648 79.55659485]
[124.32928467 91.15793610]
[121.46546173 98.39656067]
[116.82396698 103.40112305]
[111.39468384 105.83840942]
[106.19137573 105.73941040]
[110.49896240 120.10759735]
[114.80654907 134.47578430]
[119.11413574 148.84396362]
[123.57094574 163.16656494]
[128.17651367 177.44201660]
[132.78207397 191.71748352]
[137.68183899 177.54029846]
[148.52038574 167.17083740]
[162.90034485 162.90270996]
[177.64099121 165.68000793]
[189.48182678 174.88839722]
[195.80378723 188.49107361]
[195.20849609 203.47926331]
[187.82762146 216.53768921]
[175.29376221 224.77798462]
[160.37928772 226.37744141]
[146.38313293 220.98228455]
[136.40019226 209.78413391]
[137.64706421 224.73222351]
[138.89393616 239.68031311]
[147.75160217 252.78955078]
[141.09902954 266.11593628]
[142.34590149 281.06402588]
[143.59277344 296.01211548]
[144.83964539 310.96020508]
[146.08653259 325.90829468]
[147.33340454 340.85638428]
[148.58027649 355.80447388]
[149.82714844 370.75256348]
[151.07402039 385.70065308]
[152.32089233 400.64871216]
[167.22367859 402.88565063]
[181.20866394 408.49966431]
[193.52165222 417.18798828]
[203.49861145 428.48208618]
[210.60151672 441.77288818]
[214.44731140 456.34362793]
[214.82859802 471.40853882]
[211.72480774 486.15518188]
[205.30331421 499.78826904]
[195.91044617 511.57260132]
[184.05273438 520.87268066]
[170.36964417 527.18695068]
[155.59910583 530.17486572]
[140.53765869 529.67535400]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[22 125]
[23 124]
[24 123]
[25 111]
[26 110]
[27 109]
[29 108]
[30 107]
[31 106]
[32 105]
[33 69]
[34 68]
[35 67]
[36 66]
[37 65]
[39 63]
[41 61]
[45 60]
[46 59]
[47 58]
[48 57]
[83 101]
[84 100]
[85 99]
[86 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
