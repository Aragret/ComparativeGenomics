%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAACCCGGGGGGGGGGCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACxxxxxxxxxxUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUACCCCCCCCCCAACCAAACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.32904053]
[71.19830322 364.31301880]
[59.48964310 354.78359985]
[50.78712082 342.44793701]
[45.73651886 328.22140503]
[44.71262741 313.15972900]
[47.79142761 298.38058472]
[54.74444962 284.98065186]
[65.05573273 273.95431519]
[77.96011353 266.11981201]
[92.50000000 262.05850220]
[92.50000000 247.05848694]
[92.50000000 232.05848694]
[92.50000000 217.05848694]
[92.50000000 202.05848694]
[92.50000000 187.05848694]
[92.50000000 172.05848694]
[92.50000000 157.05848694]
[92.50000000 142.05848694]
[92.50000000 127.05848694]
[84.22933197 123.23139954]
[77.61993408 116.95713043]
[73.36802673 108.89662170]
[58.38831329 109.67646790]
[43.40859985 110.45630646]
[28.44835091 111.54762268]
[13.51404285 112.94992065]
[-1.42026520 114.35222626]
[-5.86556864 128.88865662]
[-15.53920078 140.61424255]
[-28.96600151 147.74090576]
[-44.09848022 149.18190002]
[-58.62904739 144.71748352]
[-70.34189606 135.02844238]
[-77.45089722 121.59226990]
[-78.87198639 106.45790863]
[-74.38845825 91.93322754]
[-64.68400574 80.23313141]
[-51.23850632 73.14181519]
[-36.10228348 71.74063110]
[-21.58351326 76.24327087]
[-9.89619827 85.96309662]
[-2.82256889 99.41792297]
[12.11173916 98.01561737]
[27.04604721 96.61331177]
[30.76337624 93.52188110]
[36.47954178 92.77571869]
[42.62875366 95.47659302]
[57.60846710 94.69674683]
[72.58818054 93.91690826]
[85.79236603 75.78110504]
[108.06553650 73.10466766]
[116.05545807 60.40973663]
[116.85797119 44.60889816]
[130.18559265 37.95880127]
[138.17550659 25.26387215]
[146.16542053 12.56894302]
[154.15533447 -0.12598629]
[162.14526367 -12.82091618]
[170.13517761 -25.51584625]
[170.38206482 -43.89841461]
[186.15449524 -51.52930450]
[193.87858582 -64.38770294]
[182.02966309 -73.61594391]
[171.37950134 -84.20515442]
[162.08340454 -96.00091553]
[154.27696228 -108.83122253]
[148.07398987 -122.50895691]
[143.56495667 -136.83467102]
[140.81561279 -151.59944153]
[139.86605835 -166.58796692]
[140.73013306 -181.58164978]
[143.39523315 -196.36186218]
[147.82250977 -210.71304321]
[153.94738770 -224.42593384]
[161.68055725 -237.30053711]
[170.90922546 -249.14912415]
[181.49884033 -259.79888916]
[193.29495239 -269.09454346]
[206.12554932 -276.90051270]
[219.80351257 -283.10296631]
[234.12939453 -287.61145020]
[248.89427185 -290.36026001]
[263.88281250 -291.30923462]
[278.87649536 -290.44461060]
[293.65658569 -287.77896118]
[308.00762939 -283.35113525]
[321.72027588 -277.22573853]
[334.59460449 -269.49209595]
[346.44284058 -260.26296997]
[357.09219360 -249.67297363]
[366.38739014 -237.87651062]
[374.19290161 -225.04562378]
[380.39483643 -211.36743164]
[384.90280151 -197.04138184]
[387.65103149 -182.27639771]
[388.59948730 -167.28781128]
[387.73428345 -152.29418945]
[385.06805420 -137.51417542]
[380.63970947 -123.16332245]
[374.51382446 -109.45088959]
[366.77969360 -96.57686615]
[357.55014038 -84.72897339]
[346.95971680 -74.07999420]
[335.16290283 -64.78523254]
[322.33172607 -56.98022079]
[308.65328979 -50.77878189]
[294.32708740 -46.27135849]
[279.56201172 -43.52367020]
[264.57336426 -42.57579422]
[249.57978821 -43.44155121]
[234.79988098 -46.10831833]
[220.44918823 -50.53720474]
[206.73698425 -56.66362000]
[199.01289368 -43.80521774]
[201.63310242 -31.95440292]
[195.24896240 -21.16266441]
[182.83010864 -17.52592850]
[174.84017944 -4.83099985]
[166.85026550 7.86392975]
[158.86035156 20.55885887]
[150.87043762 33.25378799]
[142.88052368 45.94871902]
[142.64950562 60.84153366]
[128.75038147 68.39965820]
[120.76046753 81.09458160]
[126.55586243 90.87870789]
[127.99555206 102.15890503]
[124.84339905 113.08499908]
[117.61642456 121.86488342]
[107.50000000 127.05848694]
[107.50000000 142.05848694]
[107.50000000 157.05848694]
[107.50000000 172.05848694]
[107.50000000 187.05848694]
[107.50000000 202.05848694]
[107.50000000 217.05848694]
[107.50000000 232.05848694]
[107.50000000 247.05848694]
[107.50000000 262.05850220]
[122.03988647 266.11981201]
[134.94427490 273.95431519]
[145.25555420 284.98065186]
[152.20857239 298.38058472]
[155.28736877 313.15972900]
[154.26348877 328.22140503]
[149.21287537 342.44793701]
[140.51036072 354.78359985]
[128.80169678 364.31301880]
[114.95575714 370.32904053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 50]
[24 49]
[25 48]
[26 45]
[27 44]
[28 43]
[52 126]
[53 125]
[55 123]
[56 122]
[57 121]
[58 120]
[59 119]
[60 118]
[62 115]
[63 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
