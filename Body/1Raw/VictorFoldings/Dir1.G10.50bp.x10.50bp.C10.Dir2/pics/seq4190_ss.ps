%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGAACUCUGGGGGGGGGGACACAACAUAUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAxxxxxxxxxxCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCCCCCCCCCCCUGAUCUCU\
) } def
/len { sequence length } bind def

/coor [
[84.86396027 352.45587158]
[71.01802063 346.43984985]
[59.30935669 336.91043091]
[50.60683441 324.57476807]
[45.55623245 310.34823608]
[44.53234100 295.28656006]
[47.61113739 280.50741577]
[54.56415939 267.10748291]
[64.87544250 256.08114624]
[77.77982330 248.24662781]
[92.31970978 244.18531799]
[92.31970978 229.18531799]
[92.31970978 214.18531799]
[92.31970978 199.18531799]
[92.31970978 184.18531799]
[92.31970978 169.18531799]
[92.31970978 154.18531799]
[92.31970978 139.18531799]
[92.31970978 124.18531799]
[92.31970978 109.18531799]
[83.30369568 121.17329407]
[69.80486298 127.71404266]
[54.80902100 127.36081696]
[41.63311768 120.19174194]
[33.19154358 107.79255676]
[31.35149002 92.90584564]
[36.51996613 78.82440948]
[47.55375290 68.66293335]
[62.01227188 64.66904449]
[76.69744110 67.72615051]
[88.36102295 77.15805054]
[94.42350769 90.88043976]
[97.82648468 76.27154541]
[101.22946930 61.66265488]
[104.63244629 47.05376434]
[108.03542328 32.44487000]
[111.43840027 17.83597755]
[97.09986115 13.40933132]
[83.10929108 7.98228073]
[69.53639221 1.58186412]
[56.44878387 -5.76003170]
[43.91166687 -14.00683022]
[31.98750687 -23.11744499]
[20.73570442 -33.04648590]
[10.21231842 -43.74448776]
[0.46977517 -55.15815353]
[-8.44338703 -67.23062134]
[-16.48276329 -79.90174103]
[-23.60830307 -93.10839844]
[-29.78450394 -106.78477478]
[-34.98059845 -120.86276245]
[-39.17069626 -135.27220154]
[-42.33392715 -149.94131470]
[-44.45452881 -164.79701233]
[-45.52193832 -179.76530457]
[-45.53083420 -194.77159119]
[-44.48117828 -209.74113464]
[-42.37819290 -224.59934998]
[-39.23236084 -239.27220154]
[-35.05934906 -253.68659973]
[-29.87995338 -267.77072144]
[-23.71997452 -281.45443726]
[-16.61010170 -294.66952515]
[-8.58575630 -307.35015869]
[0.31308451 -319.43319702]
[10.04208660 -330.85839844]
[20.55278015 -341.56887817]
[31.79279900 -351.51126099]
[43.70615005 -360.63601685]
[56.23347473 -368.89767456]
[69.31237030 -376.25506592]
[82.87767029 -382.67156982]
[96.86179352 -388.11523438]
[111.19507599 -392.55886841]
[125.80609894 -395.98037720]
[140.62208557 -398.36273193]
[155.56921387 -399.69403076]
[170.57301331 -399.96765137]
[185.55874634 -399.18225098]
[200.45173645 -397.34170532]
[215.17781067 -394.45520020]
[229.66357422 -390.53713989]
[243.83688354 -385.60699463]
[257.62713623 -379.68936157]
[270.96557617 -372.81372070]
[283.78582764 -365.01434326]
[296.02395630 -356.33004761]
[307.61901855 -346.80410767]
[318.51324463 -336.48400879]
[328.65237427 -325.42111206]
[337.98583984 -313.67059326]
[346.46722412 -301.29095459]
[354.05422974 -288.34390259]
[360.70904541 -274.89389038]
[366.39852905 -261.00799561]
[371.09432983 -246.75532532]
[374.77307129 -232.20693970]
[377.41641235 -217.43528748]
[379.01119995 -202.51397705]
[379.54946899 -187.51733398]
[379.02853394 -172.52008057]
[377.45101929 -157.59693909]
[374.82473755 -142.82223511]
[371.16281128 -128.26959229]
[366.48348999 -114.01152039]
[360.81005859 -100.11903381]
[354.17080688 -86.66135406]
[346.59878540 -73.70552826]
[338.13174438 -61.31609726]
[328.81182861 -49.55478668]
[318.68551636 -38.48019791]
[307.80322266 -28.14749527]
[296.21917725 -18.60816193]
[283.99108887 -9.90972137]
[271.17990112 -2.09550858]
[257.84939575 4.79554558]
[244.06600952 10.72910976]
[229.89840698 15.67562294]
[215.41717529 19.61044312]
[200.69445801 22.51396370]
[185.80358887 24.37172318]
[170.81878662 25.17446327]
[155.81468201 24.91818619]
[140.86602783 23.60416794]
[126.04729462 21.23895645]
[122.64431763 35.84785080]
[119.24133301 50.45674133]
[115.83835602 65.06563568]
[112.43537903 79.67453003]
[109.03240204 94.28341675]
[107.31970978 109.18531799]
[107.31970978 124.18531799]
[107.31970978 139.18531799]
[107.31970978 154.18531799]
[107.31970978 169.18531799]
[107.31970978 184.18531799]
[107.31970978 199.18531799]
[107.31970978 214.18531799]
[107.31970978 229.18531799]
[107.31970978 244.18531799]
[121.85959625 248.24662781]
[134.76397705 256.08114624]
[145.07527161 267.10748291]
[152.02828979 280.50741577]
[155.10708618 295.28656006]
[154.08319092 310.34823608]
[149.03259277 324.57476807]
[140.33006287 336.91043091]
[128.62139893 346.43984985]
[114.77546692 352.45587158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 130]
[33 129]
[34 128]
[35 127]
[36 126]
[37 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
