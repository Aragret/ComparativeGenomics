%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUCAUAUGGGGGGGGGGCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUxxxxxxxxxxUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCCCCCCCCCCCACCUCCUAU\
) } def
/len { sequence length } bind def

/coor [
[124.48207855 645.65509033]
[110.63613892 639.63909912]
[98.92748260 630.10968018]
[90.22495270 617.77398682]
[85.17435455 603.54748535]
[84.15045929 588.48577881]
[87.22926331 573.70660400]
[94.18228149 560.30670166]
[104.49356842 549.28033447]
[117.39794922 541.44586182]
[131.93783569 537.38452148]
[131.93783569 522.38452148]
[131.93783569 507.38455200]
[131.93783569 492.38455200]
[131.93783569 477.38455200]
[131.93783569 462.38455200]
[131.93783569 447.38455200]
[131.93783569 432.38455200]
[131.93783569 417.38455200]
[131.93783569 402.38455200]
[117.70109558 397.81549072]
[105.55720520 389.05786133]
[96.70282745 376.95910645]
[92.01523590 362.69665527]
[91.96546173 347.66333008]
[96.57097626 333.33142090]
[105.39270782 321.10824585]
[117.57692719 312.19830322]
[131.93783569 307.48431396]
[131.93783569 292.48431396]
[131.93783569 277.48431396]
[131.31385803 262.49728394]
[130.06698608 247.54919434]
[128.82011414 232.60110474]
[118.04331207 218.78587341]
[125.94508362 202.18643188]
[124.38750458 187.26751709]
[122.51988983 172.38423157]
[120.34305573 157.54302979]
[118.16622162 142.70182800]
[115.98937988 127.86061859]
[113.81254578 113.01940918]
[92.12150574 115.17136383]
[85.10074615 96.94734955]
[73.80174255 87.08162689]
[62.50273895 77.21590424]
[51.20373154 67.35018158]
[39.90472794 57.48445892]
[28.40292549 47.85593033]
[16.70330048 38.46876907]
[1.40298057 41.69897079]
[-12.36967087 34.29302216]
[-18.11162949 19.74778557]
[-13.11171627 4.93107653]
[0.26926121 -3.16110826]
[15.71321487 -0.70788574]
[25.92798233 11.13240719]
[26.09046364 26.76914597]
[37.79008484 36.15630722]
[42.61093140 36.52370834]
[47.23476028 39.96630859]
[49.77045059 46.18545532]
[61.06945419 56.05117798]
[72.36846161 65.91690063]
[83.66746521 75.78262329]
[94.96646881 85.64834595]
[105.91387939 83.96045685]
[116.40605164 90.45364380]
[121.89308167 76.49324799]
[109.22731781 68.36523438]
[98.39083099 57.92220306]
[89.80015564 45.56557083]
[83.78547668 31.77028275]
[80.57799530 17.06660080]
[80.30100250 2.01969028]
[82.96513367 -12.79208374]
[88.46798706 -26.79939651]
[96.59805298 -39.46384430]
[107.04283905 -50.29863739]
[119.40086365 -58.88731766]
[133.19712830 -64.89975739]
[147.90132141 -68.10485840]
[162.94827271 -68.37942505]
[177.75961304 -65.71289825]
[191.76603699 -60.20777130]
[204.42916870 -52.07565308]
[215.26228333 -41.62911987]
[223.84895325 -29.26970291]
[229.85916138 -15.47247124]
[233.06188965 -0.76775032]
[233.33401489 14.27924824]
[230.66508484 29.09015846]
[225.15769958 43.09568787]
[217.02352905 55.75750351]
[206.57524109 66.58891296]
[194.21443176 75.17359924]
[180.41622925 81.18157196]
[165.71099854 84.38191223]
[150.66395569 84.65160370]
[135.85346985 81.98028564]
[130.36643982 95.94067383]
[128.65374756 110.84257507]
[130.83058167 125.68377686]
[133.00743103 140.52497864]
[135.18426514 155.36619568]
[137.36109924 170.20739746]
[141.21688843 175.70652771]
[141.60771179 181.45793152]
[139.30641174 185.70993042]
[140.86399841 200.62884521]
[150.39744568 209.37911987]
[151.35556030 221.88116455]
[143.76818848 231.35423279]
[145.01507568 246.30232239]
[146.26194763 261.25039673]
[148.96194458 264.83810425]
[150.21197510 268.71215820]
[150.10487366 272.36871338]
[148.89149475 275.38894653]
[146.93783569 277.48431396]
[146.93783569 292.48431396]
[146.93783569 307.48431396]
[161.29873657 312.19830322]
[173.48295593 321.10824585]
[182.30470276 333.33142090]
[186.91020203 347.66333008]
[186.86042786 362.69665527]
[182.17285156 376.95910645]
[173.31846619 389.05786133]
[161.17457581 397.81549072]
[146.93783569 402.38455200]
[146.93783569 417.38455200]
[146.93783569 432.38455200]
[146.93783569 447.38455200]
[146.93783569 462.38455200]
[146.93783569 477.38455200]
[146.93783569 492.38455200]
[146.93783569 507.38455200]
[146.93783569 522.38452148]
[146.93783569 537.38452148]
[161.47772217 541.44586182]
[174.38209534 549.28033447]
[184.69338989 560.30670166]
[191.64640808 573.70660400]
[194.72520447 588.48577881]
[193.70130920 603.54748535]
[188.65071106 617.77398682]
[179.94819641 630.10968018]
[168.23953247 639.63909912]
[154.39358521 645.65509033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 122]
[30 121]
[31 120]
[32 115]
[33 114]
[34 113]
[36 110]
[37 109]
[38 106]
[39 105]
[40 104]
[41 103]
[42 102]
[44 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 59]
[50 58]
[68 101]
[69 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
