%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCACCAUCAGGGGGGGGGGCCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACUCCACCUCAAUCxxxxxxxxxxAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCCCCCCCCCCCAGCCACCAUGA\
) } def
/len { sequence length } bind def

/coor [
[73.46302795 158.74172974]
[60.63259506 151.03929138]
[49.92410278 140.58578491]
[41.91474533 127.94467926]
[37.03623581 113.79732513]
[35.55152893 98.90628052]
[37.54064941 84.07418823]
[42.89638901 70.10051727]
[51.33005905 57.73844910]
[62.38708496 47.65431976]
[75.47148132 40.39166641]
[89.87798309 36.34195709]
[89.26216125 21.35460281]
[88.64633179 6.36724949]
[88.03050995 -8.62010384]
[87.41468048 -23.60745811]
[86.79885864 -38.59481049]
[86.18302917 -53.58216476]
[85.56720734 -68.56951904]
[84.95137787 -83.55686951]
[84.33555603 -98.54421997]
[83.71972656 -113.53157806]
[68.71765137 -113.78818512]
[53.75588226 -114.91664886]
[38.88503647 -116.91315460]
[24.15543938 -119.77095032]
[9.61692810 -123.48036194]
[-4.68130207 -128.02883911]
[-18.69087219 -133.40100098]
[-32.36437607 -139.57864380]
[-45.65554428 -146.54089355]
[-58.51940918 -154.26417542]
[-70.91243744 -162.72235107]
[-82.79270172 -171.88682556]
[-94.11999512 -181.72656250]
[-104.85599518 -192.20828247]
[-114.96437073 -203.29650879]
[-124.41091919 -214.95372009]
[-133.16368103 -227.14048767]
[-141.19303894 -239.81556702]
[-148.47180176 -252.93606567]
[-154.97537231 -266.45758057]
[-160.68173218 -280.33438110]
[-165.57156372 -294.51950073]
[-169.62834167 -308.96493530]
[-172.83831787 -323.62182617]
[-175.19064331 -338.44055176]
[-176.67733765 -353.37097168]
[-177.29341125 -368.36260986]
[-177.03674316 -383.36468506]
[-175.90821838 -398.32644653]
[-173.91163635 -413.19726562]
[-171.05378723 -427.92684937]
[-167.34431458 -442.46536255]
[-162.79577637 -456.76358032]
[-157.42356873 -470.77313232]
[-151.24584961 -484.44659424]
[-144.28355408 -497.73773193]
[-136.56022644 -510.60156250]
[-128.10198975 -522.99456787]
[-118.93746948 -534.87481689]
[-109.09768677 -546.20202637]
[-98.61592102 -556.93798828]
[-87.52765656 -567.04632568]
[-75.87039948 -576.49285889]
[-63.68359375 -585.24554443]
[-51.00848389 -593.27484131]
[-37.88795471 -600.55358887]
[-24.36640167 -607.05706787]
[-10.48957825 -612.76336670]
[3.69555998 -617.65313721]
[18.14101410 -621.70983887]
[32.79790878 -624.91979980]
[47.61664200 -627.27203369]
[62.54708099 -628.75866699]
[77.53869629 -629.37469482]
[92.54077148 -629.11798096]
[107.50253296 -627.98937988]
[122.37335968 -625.99273682]
[137.10293579 -623.13482666]
[151.64141846 -619.42529297]
[165.93960571 -614.87670898]
[179.94912720 -609.50439453]
[193.62258911 -603.32666016]
[206.91369629 -596.36431885]
[219.77749634 -588.64093018]
[232.17045593 -580.18261719]
[244.05064392 -571.01806641]
[255.37785339 -561.17822266]
[266.11376953 -550.69641113]
[276.22204590 -539.60809326]
[285.66851807 -527.95080566]
[294.42117310 -515.76397705]
[302.45040894 -503.08883667]
[309.72906494 -489.96826172]
[316.23254395 -476.44668579]
[321.93878174 -462.56985474]
[326.82849121 -448.38467407]
[330.88513184 -433.93920898]
[334.09500122 -419.28231812]
[336.44720459 -404.46356201]
[337.93377686 -389.53311157]
[338.54971313 -374.54150391]
[338.29293823 -359.53942871]
[337.16427612 -344.57766724]
[335.16760254 -329.70684814]
[332.30960083 -314.97729492]
[328.60000610 -300.43881226]
[324.05136108 -286.14065552]
[318.67904663 -272.13113403]
[312.50122070 -258.45770264]
[305.53878784 -245.16662598]
[297.81536865 -232.30287170]
[289.35702515 -219.90994263]
[280.19241333 -208.02978516]
[270.35253906 -196.70262146]
[259.87066650 -185.96675110]
[248.78233337 -175.85850525]
[237.12498474 -166.41210938]
[224.93811035 -157.65950012]
[212.26293945 -149.63031006]
[199.14234924 -142.35169983]
[185.62074280 -135.84829712]
[171.74386597 -130.14210510]
[157.55870056 -125.25244904]
[143.11320496 -121.19585419]
[128.45628357 -117.98606110]
[113.63753510 -115.63392639]
[98.70708466 -114.14739990]
[99.32290649 -99.16004944]
[99.93873596 -84.17269897]
[100.55455780 -69.18534088]
[101.17038727 -54.19799042]
[101.78620911 -39.21063614]
[102.40203094 -24.22328186]
[103.01786041 -9.23592949]
[103.63368225 5.75142384]
[104.24951172 20.73877716]
[104.86533356 35.72613144]
[119.55551910 38.58026886]
[133.19163513 44.74498367]
[145.03869629 53.88799286]
[154.45812988 65.51647949]
[160.94223022 79.00366211]
[164.14147949 93.62255859]
[163.88345337 108.58521271]
[160.18205261 123.08511353]
[153.23678589 136.34069824]
[143.42199707 147.63749695]
[131.26673889 156.36659241]
[117.42617035 162.05747986]
[102.64631653 164.40341187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
