%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUCAUCAGGGGGGGGGGUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCAxxxxxxxxxxGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCCCCCCCCCCCAUACUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[88.82518768 576.06115723]
[75.60499573 568.78869629]
[64.71819305 558.34167480]
[56.90705872 545.43243408]
[52.70417786 530.94110107]
[52.39610672 515.85577393]
[56.00384903 501.20495605]
[63.28142166 487.98754883]
[73.73262787 477.10479736]
[86.64488983 469.29864502]
[101.13782501 465.10134888]
[100.82576752 450.10461426]
[100.51371765 435.10784912]
[100.20166016 420.11111450]
[99.88960266 405.11434937]
[99.57754517 390.11758423]
[99.26548767 375.12084961]
[98.95343018 360.12408447]
[98.64138031 345.12731934]
[98.32932281 330.13058472]
[98.01726532 315.13381958]
[97.70520782 300.13708496]
[97.39315033 285.14031982]
[97.08109283 270.14355469]
[82.63156128 266.27209473]
[69.84549713 258.47799683]
[59.76356506 247.38563538]
[53.20915604 233.88821411]
[50.72114563 219.07586670]
[52.50959778 204.14758301]
[58.43805695 190.31423950]
[68.03392029 178.70025635]
[80.52611542 170.25233459]
[94.90702057 165.66217041]
[94.59496307 150.66542053]
[94.28290558 135.66867065]
[93.97084808 120.67191315]
[93.65879822 105.67516327]
[86.05026245 107.85065460]
[77.51222229 106.83768463]
[63.49551010 101.49617004]
[49.47879410 96.15466309]
[36.55974197 104.74987030]
[21.05729294 104.07627869]
[8.93245888 94.39288330]
[4.84748650 79.42316437]
[10.37312984 64.92327118]
[23.38466644 56.46871185]
[38.87889481 57.31044006]
[50.89796829 67.12479401]
[54.82030869 82.13794708]
[68.83702087 87.47946167]
[82.85373688 92.82097626]
[96.30970001 86.19247437]
[100.61728668 71.82428741]
[88.10873413 71.68756866]
[78.17682648 64.84443665]
[73.92395020 54.03813934]
[76.33651733 43.13687897]
[84.10433197 35.75331116]
[82.54675293 20.83439827]
[80.98917389 5.91548681]
[66.10616302 3.38593149]
[52.45801544 -3.06625056]
[41.05751419 -12.96226501]
[32.75064468 -25.56776237]
[28.15384102 -39.94733047]
[27.60821152 -55.03390884]
[31.15424728 -69.70797729]
[38.52880859 -82.88061523]
[49.18465042 -93.57433319]
[62.33104324 -100.99558258]
[76.99243927 -104.59365082]
[92.08085632 -104.10155487]
[106.47663879 -99.55579376]
[119.11153412 -91.29370117]
[129.04792786 -79.92838287]
[135.54849243 -66.30320740]
[138.13084412 -51.42927170]
[136.60333252 -36.41030502]
[131.07933044 -22.36082268]
[121.96874237 -10.32338715]
[109.94764709 -1.19125617]
[95.90808105 4.35790586]
[97.46566772 19.27681732]
[99.02324677 34.19572830]
[109.57012939 39.79558563]
[115.11255646 51.69766998]
[127.37492371 43.05855560]
[139.63729858 34.41943741]
[142.62345886 21.82830238]
[153.06869507 14.89173031]
[165.03970337 16.89227295]
[177.47914124 8.51013088]
[189.91859436 0.12798743]
[191.38031006 -15.44112873]
[202.54394531 -26.39134216]
[218.13838196 -27.55229568]
[230.80038452 -18.37582397]
[234.55134583 -3.19477534]
[227.62019348 10.82282257]
[213.27958679 17.05828857]
[198.30073547 12.56742764]
[185.86129761 20.94957161]
[173.42184448 29.33171463]
[166.62129211 45.47954178]
[148.27641296 46.68180466]
[136.01403809 55.32092285]
[123.75167847 63.96003723]
[114.98546600 76.13187408]
[110.67788696 90.50006104]
[108.65554810 105.36310577]
[108.96760559 120.35986328]
[109.27966309 135.35661316]
[109.59172058 150.35336304]
[109.90377045 165.35012817]
[124.46317291 169.33807373]
[137.29597473 177.25903320]
[147.36665344 188.46379089]
[153.86543274 202.03854370]
[156.27333069 216.87950134]
[154.40364075 231.78253174]
[148.41638184 245.54093933]
[138.80459595 257.04309082]
[126.35382843 265.36230469]
[112.07785034 269.83151245]
[112.38990784 284.82827759]
[112.70196533 299.82501221]
[113.01401520 314.82177734]
[113.32607269 329.81851196]
[113.63813019 344.81527710]
[113.95018768 359.81204224]
[114.26224518 374.80877686]
[114.57430267 389.80554199]
[114.88635254 404.80230713]
[115.19841003 419.79904175]
[115.51046753 434.79580688]
[115.82252502 449.79254150]
[116.13458252 464.78930664]
[130.78956604 468.38006592]
[144.01538086 475.64233398]
[154.91024780 486.08093262]
[162.73135376 498.98413086]
[166.94541931 513.47222900]
[167.26513672 528.55731201]
[163.66871643 543.21093750]
[156.40135193 556.43389893]
[145.95854187 567.32476807]
[133.05232239 575.14086914]
[118.56262970 579.34936523]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[40 53]
[41 52]
[42 51]
[54 111]
[55 110]
[60 86]
[61 85]
[62 84]
[88 109]
[89 108]
[90 107]
[93 105]
[94 104]
[95 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
