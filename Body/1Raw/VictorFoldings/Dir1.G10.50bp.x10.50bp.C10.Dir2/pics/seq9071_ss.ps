%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAGAAGGGGGGGGGGGUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[84.29837036 405.12677002]
[71.42510223 397.22387695]
[61.30080414 386.01339722]
[54.74622345 372.40405273]
[52.29270172 357.49911499]
[54.13913727 342.50686646]
[60.13584900 328.64266968]
[69.79671478 317.03042603]
[82.33856201 308.61148071]
[96.74468231 304.06829834]
[96.43262482 289.07156372]
[96.12056732 274.07479858]
[95.80850983 259.07803345]
[95.49645996 244.08128357]
[95.18440247 229.08453369]
[94.87234497 214.08778381]
[94.56028748 199.09103394]
[94.24822998 184.09426880]
[93.93617249 169.09751892]
[93.62412262 154.10076904]
[93.31206512 139.10401917]
[80.23262024 134.39627075]
[69.58017731 125.46540070]
[62.66262436 113.40794373]
[60.32929230 99.70428467]
[45.62133026 96.75880432]
[30.91336823 93.81331635]
[16.20540810 90.86783600]
[1.49744606 87.92235565]
[-13.21051598 84.97687531]
[-19.61462593 98.62424469]
[-29.09922028 110.34200287]
[-41.11288071 119.44889832]
[-54.95714188 125.41545105]
[-69.82712555 127.89479065]
[-84.85829926 126.74276733]
[-99.17678070 122.02635193]
[-111.95010376 114.01975250]
[-122.43565369 103.18846893]
[-130.02380371 90.16221619]
[-134.27339172 75.69831085]
[-134.93736267 60.63768387]
[-131.97709656 45.85592651]
[-125.56472015 32.21244049]
[-116.07302094 20.50043106]
[-104.05384827 11.40082645]
[-90.20597076 5.44266176]
[-75.33448792 2.97233868]
[-60.30401230 4.13347816]
[-45.98839188 8.85857201]
[-33.21992493 16.87291145]
[-22.74094582 27.71055222]
[-15.16069221 40.74140549]
[-10.91986942 55.20788193]
[-10.26503277 70.26891327]
[4.44292831 73.21439362]
[19.15089035 76.15987396]
[33.85885239 79.10535431]
[48.56681442 82.05084229]
[63.27477646 84.99632263]
[72.02410126 71.87168884]
[85.19607544 63.19379807]
[100.70837402 60.33451462]
[103.80669403 45.65798950]
[106.90501404 30.98146439]
[93.06768036 25.06416512]
[80.65081024 16.56078529]
[70.13166809 5.79817057]
[61.91458130 -6.80999231]
[56.31540298 -20.77907944]
[53.54933929 -35.57215881]
[53.72272110 -50.62061691]
[56.82887268 -65.34603882]
[62.74841309 -79.18241882]
[71.25379944 -91.59791565]
[82.01811981 -102.11531067]
[94.62760925 -110.33035278]
[108.59760284 -115.92727661]
[123.39112854 -118.69094086]
[138.43955994 -118.51512909]
[153.16447449 -115.40658569]
[166.99989319 -109.48480988]
[179.41401672 -100.97740936]
[189.92967224 -90.21139526]
[198.14268494 -77.60057068]
[203.73733521 -63.62966919]
[206.49861145 -48.83569717]
[206.32035828 -33.78729630]
[203.20944214 -19.06287956]
[197.28541565 -5.22842073]
[188.77601624 7.18432236]
[178.00828552 17.69823837]
[165.39613342 25.90919685]
[151.42433167 31.50159454]
[136.62991333 34.26047134]
[121.58154297 34.07978439]
[118.48321533 48.75630951]
[115.38489532 63.43283844]
[130.41983032 74.53459930]
[138.70343018 91.28810120]
[153.69612122 90.82006073]
[168.68882751 90.35202026]
[177.23265076 86.93809509]
[183.99757385 90.03347015]
[198.99676514 89.87743378]
[213.99595642 89.72139740]
[220.00630188 75.72869873]
[231.19277954 65.39513397]
[245.61726379 60.51104736]
[260.78060913 61.92264175]
[274.05569458 69.38535309]
[283.14251709 81.60620880]
[286.46673584 96.46788788]
[283.45242310 111.39550781]
[274.62179565 123.80276489]
[261.50485229 131.54002380]
[246.37414551 133.26676941]
[231.85118103 128.68382263]
[220.45214844 118.58521271]
[214.15199280 104.72058105]
[199.15280151 104.87662506]
[184.15361023 105.03266144]
[169.15686035 105.34471130]
[154.16416931 105.81275940]
[139.17146301 106.28079987]
[135.56228638 117.58341217]
[128.77218628 127.31326294]
[119.40850830 134.60003662]
[108.30881500 138.79196167]
[108.62087250 153.78871155]
[108.93292999 168.78546143]
[109.24498749 183.78222656]
[109.55704498 198.77897644]
[109.86909485 213.77572632]
[110.18115234 228.77247620]
[110.49320984 243.76924133]
[110.80526733 258.76599121]
[111.11732483 273.76275635]
[111.42938232 288.75949097]
[111.74143219 303.75625610]
[126.32407379 307.69619751]
[139.20527649 315.58615112]
[149.34083557 326.78646851]
[155.90908813 340.38922119]
[158.37757874 355.29168701]
[156.54620361 370.28576660]
[150.56341553 384.15597534]
[140.91423035 395.77795410]
[128.38084412 404.20950317]
[113.97930145 408.76712036]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 60]
[26 59]
[27 58]
[28 57]
[29 56]
[30 55]
[63 98]
[64 97]
[65 96]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
