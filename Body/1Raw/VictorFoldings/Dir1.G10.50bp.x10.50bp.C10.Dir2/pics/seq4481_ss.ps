%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAGAGUGGGGGGGGGGUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACxxxxxxxxxxUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCCCCCCCCCCCAAAAAAGAGU\
) } def
/len { sequence length } bind def

/coor [
[58.38372040 385.56222534]
[46.49944687 376.28710938]
[37.18073654 364.43701172]
[30.96937180 350.70083618]
[28.22647095 335.87719727]
[29.11149979 320.82794189]
[33.57300568 306.42800903]
[41.35160446 293.51458740]
[51.99505615 282.83840942]
[64.88456726 275.02023315]
[79.27075195 270.51455688]
[78.33512115 255.54376221]
[77.39949799 240.57298279]
[76.46386719 225.60218811]
[75.52823639 210.63139343]
[74.59261322 195.66059875]
[73.65698242 180.68980408]
[72.72135162 165.71902466]
[85.31152344 94.80868530]
[75.09804535 83.82302094]
[64.88455963 72.83734894]
[54.67108154 61.85168839]
[44.45760345 50.86602402]
[34.24412155 39.88035965]
[23.91691780 29.00153351]
[13.47710514 18.23072433]
[-1.68344069 13.70652103]
[-4.98566437 -0.81741017]
[-15.42547703 -11.58821869]
[-25.86528969 -22.35902786]
[-30.54052544 -19.40078354]
[-36.27323532 -17.74826813]
[-42.67593765 -17.74556351]
[-49.25654221 -19.61754227]
[-55.45552826 -23.43977737]
[-68.84181213 -30.20789337]
[-82.22809601 -36.97600937]
[-95.61438751 -43.74412155]
[-109.00067139 -50.51223755]
[-122.38695526 -57.28035355]
[-137.23806763 -52.58119583]
[-150.71725464 -59.63571930]
[-155.10565186 -73.82295227]
[-168.49194336 -80.59106445]
[-181.73881531 -72.68386078]
[-197.15698242 -73.21653748]
[-209.82655334 -82.01911926]
[-215.70472717 -96.28273773]
[-212.91578674 -111.45591736]
[-202.34968567 -122.69695282]
[-187.37800598 -126.41887665]
[-172.77818298 -121.43402863]
[-163.20895386 -109.33306122]
[-161.72383118 -93.97734833]
[-148.33753967 -87.20923615]
[-134.31056213 -92.08563232]
[-120.63854218 -85.41249084]
[-115.61883545 -70.66663361]
[-102.23255157 -63.89852142]
[-88.84626770 -57.13040924]
[-75.45998383 -50.36229324]
[-62.07369995 -43.59417725]
[-48.68741608 -36.82606125]
[-36.24797440 -45.20820618]
[-37.49485016 -60.15629196]
[-38.74172211 -75.10437775]
[-53.23112106 -79.70066071]
[-64.85543823 -89.49574280]
[-71.84205627 -102.99594879]
[-73.12555695 -118.14260101]
[-68.51022339 -132.62594604]
[-58.69985962 -144.23736572]
[-45.19047165 -151.20622253]
[-30.04214478 -152.46978760]
[-15.56488895 -147.83540344]
[-3.96638060 -138.00978088]
[2.98469257 -124.49123383]
[4.22834158 -109.34126282]
[-0.42508048 -94.87010956]
[-10.26596069 -83.28453827]
[-23.79363632 -76.35125732]
[-22.54676247 -61.40316772]
[-21.29988670 -46.45508194]
[-15.09448051 -32.79883957]
[-4.65466833 -22.02803040]
[5.78514433 -11.25722218]
[20.19896507 -7.50341988]
[24.24791336 7.79091215]
[34.68772507 18.56171989]
[41.64642715 21.19272041]
[45.22978592 29.66687775]
[55.44326782 40.65254211]
[65.65674591 51.63820648]
[75.87022400 62.62387085]
[86.08370972 73.60953522]
[96.29718781 84.59519958]
[110.86988831 88.14996338]
[124.99468994 83.10120392]
[139.11949158 78.05245209]
[153.24429321 73.00369263]
[167.36909485 67.95494080]
[172.63227844 53.22969055]
[186.15534973 45.37726212]
[201.55313110 48.10533524]
[211.55526733 60.12579346]
[211.43904114 75.76294708]
[201.25933838 87.63340759]
[185.82272339 90.13230133]
[172.41786194 82.07974243]
[158.29306030 87.12849426]
[144.16825867 92.17725372]
[130.04344177 97.22601318]
[115.91864777 102.27476501]
[115.99666595 109.77436066]
[116.15270233 124.77355194]
[116.23072052 132.27314758]
[130.45750427 137.02696228]
[144.68428040 141.78077698]
[159.62318420 135.93196106]
[173.43751526 144.08940125]
[175.53010559 159.99539185]
[164.29568481 171.44822693]
[148.35235596 169.66227722]
[139.93046570 156.00755310]
[125.70368195 151.25373840]
[111.47690582 146.49992371]
[105.53071594 151.07078552]
[107.50180817 165.94071960]
[93.63833618 160.21252441]
[87.69214630 164.78338623]
[88.62776947 179.75418091]
[89.56340027 194.72497559]
[90.49903107 209.69577026]
[91.43466187 224.66656494]
[92.37028503 239.63734436]
[93.30591583 254.60813904]
[94.24154663 269.57891846]
[109.07677460 272.25836182]
[122.83940887 278.41085815]
[134.72930908 287.67874146]
[144.05519104 299.52322388]
[150.27488708 313.25561523]
[153.02677917 328.07757568]
[152.15086365 343.12738037]
[147.69808960 357.52999878]
[139.92732239 370.44815063]
[129.29034424 381.13076782]
[116.40558624 388.95675659]
[102.02213287 393.47116089]
[86.97622681 394.41146851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 96]
[20 95]
[21 94]
[22 93]
[23 92]
[24 91]
[25 89]
[26 88]
[28 86]
[29 85]
[30 84]
[35 63]
[36 62]
[37 61]
[38 60]
[39 59]
[40 58]
[43 55]
[44 54]
[64 83]
[65 82]
[66 81]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
