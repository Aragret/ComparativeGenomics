%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAUCACAGGGGGGGGGGGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUxxxxxxxxxxAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUCCCCCCCCCCACUCAUCGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.29278564]
[71.19830322 349.27676392]
[59.48964310 339.74734497]
[50.78712082 327.41168213]
[45.73651886 313.18515015]
[44.71262741 298.12347412]
[47.79142761 283.34429932]
[54.74444962 269.94436646]
[65.05573273 258.91806030]
[77.96011353 251.08354187]
[92.50000000 247.02223206]
[92.50000000 232.02223206]
[92.50000000 217.02223206]
[92.50000000 202.02223206]
[92.50000000 187.02223206]
[92.50000000 172.02223206]
[92.50000000 157.02223206]
[92.50000000 142.02223206]
[92.50000000 127.02222443]
[92.50000000 112.02222443]
[85.73188782 98.63594055]
[73.65189362 89.74359131]
[61.57190704 80.85124207]
[49.85726547 91.01313019]
[36.18855667 98.32392120]
[21.24655533 102.42298126]
[5.77467775 103.10958099]
[-9.45800018 100.35265350]
[-23.69497681 94.29225922]
[-36.22989655 85.23242188]
[-46.44158936 73.62590790]
[-53.82485580 60.05158234]
[-58.01546097 45.18554688]
[-58.80809784 29.76746941]
[-56.16645432 14.56376648]
[-50.22485352 0.32952440]
[-62.48722076 -8.30959129]
[-75.01318359 -16.56188011]
[-87.79054260 -24.41930580]
[-100.56789398 -32.27673340]
[-113.34525299 -40.13415909]
[-127.77470398 -32.12356949]
[-144.18144226 -32.46186829]
[-158.10852051 -40.96286011]
[-165.82002258 -55.23572540]
[-165.30313110 -71.35665894]
[-178.24118042 -78.94656372]
[-191.17924500 -86.53647614]
[-207.57281494 -86.10906982]
[-215.90785217 -100.23206329]
[-207.60998535 -114.37693787]
[-191.21534729 -113.99265289]
[-183.58932495 -99.47452545]
[-170.65127563 -91.88462067]
[-157.71322632 -84.29470825]
[-146.27702332 -91.82285309]
[-132.64567566 -93.68441010]
[-119.48348999 -89.45777130]
[-109.38806152 -79.91693878]
[-104.37765503 -66.89054871]
[-105.48783112 -52.91151428]
[-92.71047211 -45.05408859]
[-79.93311310 -37.19666290]
[-67.15575409 -29.33923912]
[-63.60276413 -29.83291626]
[-59.63364029 -28.58882713]
[-56.08707809 -25.43062019]
[-53.84810257 -20.57196045]
[-41.58573532 -11.93284416]
[-30.90582848 -21.78650856]
[-18.39816666 -29.19530869]
[-4.61317444 -33.83025742]
[9.84190083 -35.48449326]
[24.32972908 -34.08253098]
[38.21100616 -29.68367577]
[50.87265778 -22.47954369]
[61.75492096 -12.78570175]
[70.37608337 -1.02785158]
[76.35381317 12.27686787]
[79.42211914 26.54262352]
[79.44316864 41.14068604]
[76.41349792 55.42712784]
[70.46425629 68.77125549]
[82.54424286 77.66360474]
[94.62423706 86.55595398]
[113.63633728 85.67910004]
[128.27983093 82.42827606]
[142.92333984 79.17745209]
[143.97468567 64.11840820]
[149.22151184 49.98005295]
[158.23057556 37.90521240]
[170.26492310 28.86734772]
[184.34410095 23.59207916]
[199.32412720 22.49892235]
[213.99035645 25.66794395]
[227.15599060 32.83396149]
[237.75814819 43.40872192]
[244.94364929 56.52915955]
[259.58715820 53.27833557]
[274.23065186 50.02751160]
[288.87414551 46.77668381]
[294.07818604 42.53103638]
[299.78588867 41.72280502]
[304.19406128 43.70864868]
[318.96011353 41.06978226]
[333.72616577 38.43091965]
[344.04052734 26.14295959]
[360.07424927 26.68964577]
[369.52767944 39.65160370]
[365.14892578 55.08553314]
[350.29699707 61.15184021]
[336.36505127 53.19697571]
[321.59899902 55.83583832]
[306.83294678 58.47470474]
[292.12496948 61.42018509]
[277.48147583 64.67101288]
[262.83798218 67.92183685]
[248.19447327 71.17266083]
[247.23576355 86.10109711]
[242.10415649 100.16871643]
[233.20750427 112.23252106]
[221.25991821 121.30974579]
[207.22450256 126.65795135]
[192.23568726 127.83572388]
[177.50750732 124.73907471]
[164.23535156 117.61061859]
[153.49887085 107.02052307]
[146.17416382 93.82095337]
[131.53067017 97.07177734]
[116.88716125 100.32260132]
[107.50000000 112.02222443]
[107.50000000 127.02222443]
[107.50000000 142.02223206]
[107.50000000 157.02223206]
[107.50000000 172.02223206]
[107.50000000 187.02223206]
[107.50000000 202.02223206]
[107.50000000 217.02223206]
[107.50000000 232.02223206]
[107.50000000 247.02223206]
[122.03988647 251.08354187]
[134.94427490 258.91806030]
[145.25555420 269.94436646]
[152.20857239 283.34429932]
[155.28736877 298.12347412]
[154.26348877 313.18515015]
[149.21287537 327.41168213]
[140.51036072 339.74734497]
[128.80169678 349.27676392]
[114.95575714 355.29278564]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 85]
[22 84]
[23 83]
[36 69]
[37 68]
[38 64]
[39 63]
[40 62]
[41 61]
[46 55]
[47 54]
[48 53]
[86 130]
[87 129]
[88 128]
[98 118]
[99 117]
[100 116]
[101 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
