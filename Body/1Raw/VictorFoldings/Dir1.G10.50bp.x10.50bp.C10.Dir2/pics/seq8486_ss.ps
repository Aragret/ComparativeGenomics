%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACCCAACUAUGGGGGGGGGGCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAxxxxxxxxxxAUUCUAAUUUAAACUAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUCCCCCCCCCCACCACCCAAGUAU\
) } def
/len { sequence length } bind def

/coor [
[81.10776520 361.45297241]
[67.66510773 354.67950439]
[55.86132431 345.33843994]
[46.17977524 333.81225586]
[39.01691437 320.57299805]
[34.66605377 306.16275024]
[33.30535889 291.17163086]
[34.99055099 276.21353149]
[39.65261841 261.90093994]
[47.10065842 248.81999207]
[57.02967453 237.50630188]
[69.03308105 228.42317200]
[82.61933899 221.94256592]
[97.23211670 218.32984924]
[96.63197327 203.34185791]
[96.03182983 188.35386658]
[95.43167877 173.36587524]
[94.83153534 158.37788391]
[94.23139191 143.38989258]
[93.63124847 128.40190125]
[93.03110504 113.41391754]
[80.40493011 105.31578827]
[66.53242493 111.02135468]
[52.65991592 116.72692871]
[38.78741074 122.43249512]
[24.91490173 128.13806152]
[19.06243896 142.81881714]
[4.51047134 148.98451233]
[-10.10757542 142.97715759]
[-16.11907387 128.36080933]
[-9.95750999 113.80709839]
[4.72157145 107.95046997]
[19.20933151 114.26556396]
[33.08183670 108.55998993]
[46.95434570 102.85442352]
[60.82685471 97.14884949]
[74.69936371 91.44327545]
[82.66035461 89.16735077]
[90.02490997 89.91879272]
[95.87553406 93.23987579]
[92.87460327 77.70587921]
[104.22426605 68.06044006]
[108.94507599 53.82267380]
[113.66588593 39.58490753]
[117.23320007 25.01527214]
[119.62416840 10.20705700]
[122.01514435 -4.60115814]
[124.40612030 -19.40937424]
[126.79709625 -34.21759033]
[124.77951813 -40.60877991]
[126.12966156 -46.20177460]
[129.59140015 -49.56555557]
[132.57293701 -64.26625061]
[135.55447388 -78.96694946]
[138.53599548 -93.66764069]
[141.51753235 -108.36833954]
[139.75727844 -114.83513641]
[141.33010864 -120.36963654]
[144.92367554 -123.59221649]
[148.49098206 -138.16184998]
[144.25764465 -153.40617371]
[154.79975891 -163.92820740]
[158.36708069 -178.49783325]
[161.93438721 -193.06747437]
[165.50170898 -207.63710022]
[161.26835632 -222.88142395]
[171.81048584 -233.40345764]
[175.37779236 -247.97308350]
[161.67028809 -254.17138672]
[149.33525085 -262.78308105]
[138.79280090 -273.51489258]
[130.40202332 -286.00125122]
[124.44869232 -299.81692505]
[121.13558960 -314.49133301]
[120.57554626 -329.52465820]
[122.78764343 -344.40487671]
[127.69653320 -358.62518311]
[135.13502502 -371.70126343]
[144.84976196 -383.18771362]
[156.50987244 -392.69332886]
[169.71821594 -399.89431763]
[184.02490234 -404.54547119]
[198.94267273 -406.48831177]
[213.96343994 -405.65673828]
[228.57557678 -402.07901001]
[242.28140259 -395.87701416]
[254.61412048 -387.26199341]
[265.15368652 -376.52734375]
[273.54110718 -364.03872681]
[279.49069214 -350.22146606]
[282.79983521 -335.54617310]
[283.35583496 -320.51269531]
[281.13973999 -305.63305664]
[276.22702026 -291.41406250]
[268.78500366 -278.33999634]
[259.06713867 -266.85617065]
[247.40447998 -257.35369873]
[234.19419861 -250.15626526]
[219.88626099 -245.50897217]
[204.96795654 -243.57012939]
[189.94743347 -244.40577698]
[186.38011169 -229.83613586]
[190.86862183 -215.63394165]
[180.07133484 -204.06979370]
[176.50402832 -189.50015259]
[172.93670654 -174.93052673]
[169.36940002 -160.36088562]
[173.85789490 -146.15867615]
[163.06062317 -134.59454346]
[159.49330139 -120.02490234]
[156.21823120 -105.38681030]
[153.23669434 -90.68611145]
[150.25515747 -75.98542023]
[147.27363586 -61.28472137]
[144.29209900 -46.58402252]
[141.60531616 -31.82661438]
[139.21434021 -17.01839828]
[136.82336426 -2.21018314]
[134.43238831 12.59803200]
[132.04141235 27.40624809]
[143.88052368 18.19562912]
[158.86654663 17.54841805]
[171.45567322 25.70403862]
[176.99073792 39.64545441]
[173.42414856 54.21526718]
[162.07528687 64.02361298]
[147.14251709 65.44205475]
[134.14993286 57.94586945]
[127.90364838 44.30571747]
[123.18283844 58.54348373]
[118.46202850 72.78125000]
[121.80062103 87.29685974]
[110.11329651 97.96068573]
[108.01909637 112.81377411]
[108.61923981 127.80176544]
[109.21938324 142.78974915]
[109.81952667 157.77774048]
[110.41967010 172.76573181]
[111.01981354 187.75372314]
[111.61995697 202.74171448]
[112.22010040 217.72970581]
[127.07495117 220.16249084]
[141.13587952 225.53605652]
[153.82708740 233.63037109]
[164.62890625 244.11396790]
[173.09898376 256.55752563]
[178.89050293 270.45153809]
[181.76626587 285.22702026]
[181.60855103 300.27893066]
[178.42379761 314.99090576]
[172.34240723 328.76049805]
[163.61343384 341.02386475]
[152.59431458 351.27880859]
[139.73626709 359.10537720]
[125.56581879 364.18313599]
[110.66326141 366.30410767]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 37]
[23 36]
[24 35]
[25 34]
[26 33]
[40 133]
[42 131]
[43 130]
[44 129]
[45 120]
[46 119]
[47 118]
[48 117]
[49 116]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
[59 110]
[60 109]
[62 107]
[63 106]
[64 105]
[65 104]
[67 102]
[68 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
