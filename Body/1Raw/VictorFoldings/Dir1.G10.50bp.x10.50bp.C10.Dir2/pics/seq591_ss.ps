%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAUACUAGGGGGGGGGGCUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCxxxxxxxxxxCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUUAUACCCUCCCCCCCCCCUCCCGUACUA\
) } def
/len { sequence length } bind def

/coor [
[26.48915863 244.21211243]
[17.34363747 239.17221069]
[8.54210949 233.55310059]
[0.12120345 227.37818909]
[-7.88403416 220.67315674]
[-15.44028854 213.46592712]
[-22.51611328 205.78648376]
[-29.08205795 197.66677856]
[-35.11080170 189.14060974]
[-40.57724762 180.24346924]
[-45.45865250 171.01237488]
[-49.73469925 161.48574829]
[-63.85950089 166.53450012]
[-77.98430634 171.58325195]
[-88.37503815 183.51402283]
[-102.96396637 180.51196289]
[-117.08876801 185.56071472]
[-131.21357727 190.60948181]
[-145.33837891 195.65823364]
[-159.46318054 200.70698547]
[-159.00436401 215.82798767]
[-163.24259949 230.35012817]
[-171.76266479 242.85067749]
[-183.72984314 252.10494995]
[-197.97172546 257.20632935]
[-213.09303284 257.65499878]
[-227.61233521 253.40704346]
[-240.10716248 244.87860107]
[-249.35342407 232.90521240]
[-254.44525146 218.65992737]
[-254.88380432 203.53831482]
[-250.62611389 189.02186584]
[-242.08929443 176.53276062]
[-230.10972595 167.29452515]
[-215.86102295 162.21223450]
[-200.73912048 161.78382874]
[-186.22552490 166.05123901]
[-173.74214172 174.59642029]
[-164.51193237 186.58218384]
[-150.38713074 181.53343201]
[-136.26232910 176.48466492]
[-122.13752747 171.43591309]
[-108.01271820 166.38716125]
[-98.63229370 154.81750488]
[-83.03305817 157.45845032]
[-68.90825653 152.40969849]
[-54.78345490 147.36094666]
[-57.60330582 136.90765381]
[-59.71804047 126.28923035]
[-61.11819839 115.55319977]
[-61.79751968 104.74758148]
[-61.75295639 93.92072296]
[-60.98471451 83.12106323]
[-59.49622726 72.39691925]
[-57.29415512 61.79626846]
[-54.38835144 51.36654282]
[-50.79181671 41.15440369]
[-46.52064133 31.20553780]
[-41.59393311 21.56445885]
[-36.03373718 12.27429771]
[-29.86492729 3.37662172]
[-23.11510277 -5.08876276]
[-15.81446171 -13.08398151]
[-7.99566936 -20.57326317]
[0.30629456 -27.52310181]
[9.05428696 -33.90240479]
[18.20916939 -39.68262863]
[27.72998428 -44.83791351]
[37.57413101 -49.34519577]
[47.69757462 -53.18431091]
[58.05501556 -56.33807755]
[68.60012054 -58.79239273]
[79.28570557 -60.53627014]
[90.06396484 -61.56191254]
[100.88668060 -61.86472702]
[111.70542908 -61.44336319]
[122.47180939 -60.29970169]
[133.13764954 -58.43886185]
[143.65522766 -55.86916733]
[153.97749329 -52.60211563]
[164.05827332 -48.65232468]
[173.85244751 -44.03746414]
[181.30735779 -57.05377579]
[188.76226807 -70.07008362]
[196.21717834 -83.08639526]
[193.41572571 -98.88295746]
[204.12699890 -110.82649994]
[220.13423157 -109.75495148]
[229.15803528 -96.49031830]
[224.27613831 -81.20809174]
[209.23348999 -75.63148499]
[201.77857971 -62.61517334]
[194.32366943 -49.59886551]
[186.86875916 -36.58255386]
[221.92918396 -6.46243620]
[247.04737854 32.33874130]
[260.94992065 26.70678329]
[274.85247803 21.07482719]
[288.75503540 15.44287109]
[302.65759277 9.81091404]
[307.30368042 -5.12052917]
[320.48840332 -13.52869797]
[335.98632812 -11.44351292]
[346.47982788 0.15046696]
[347.01419067 15.77891731]
[337.33709717 28.06256294]
[322.01779175 31.20144081]
[308.28955078 23.71347046]
[294.38699341 29.34542656]
[280.48443604 34.97738266]
[266.58187866 40.60934067]
[252.67933655 46.24129868]
[256.98977661 60.56417465]
[259.95971680 75.22378540]
[261.56381226 90.09496307]
[261.78833008 105.05071259]
[260.63137817 119.96333313]
[258.10284424 134.70549011]
[254.22427368 149.15130615]
[249.02882385 163.17742920]
[262.55300903 169.66560364]
[276.07720947 176.15376282]
[292.97326660 177.55343628]
[296.30560303 194.17666626]
[281.25448608 201.98052979]
[269.58901978 189.67794800]
[256.06484985 183.18978882]
[242.54064941 176.70161438]
[237.29849243 185.73272705]
[231.48492432 194.40704346]
[225.12416077 202.68846130]
[218.24266052 210.54251099]
[210.86907959 217.93652344]
[203.03407288 224.83972168]
[194.77027893 231.22335815]
[186.11207581 237.06088257]
[177.09550476 242.32800293]
[167.75807190 247.00279236]
[158.13865662 251.06579590]
[148.27726746 254.50010681]
[138.21498108 257.29141235]
[127.99365234 259.42813110]
[117.65581512 260.90136719]
[107.24449921 261.70495605]
[96.80303955 261.83557129]
[86.37487793 261.29269409]
[76.00342560 260.07855225]
[65.73183441 258.19821167]
[55.60286713 255.65946960]
[45.65866089 252.47293091]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 47]
[13 46]
[14 45]
[16 43]
[17 42]
[18 41]
[19 40]
[20 39]
[82 94]
[83 93]
[84 92]
[85 91]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
