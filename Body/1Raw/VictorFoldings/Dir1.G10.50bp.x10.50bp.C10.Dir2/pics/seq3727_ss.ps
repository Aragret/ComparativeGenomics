%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCUAGCCGGGGGGGGGGGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUxxxxxxxxxxAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUACCCCCCCCCCUACCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[62.45611572 511.09344482]
[47.96642303 506.88494873]
[35.06019211 499.06884766]
[24.61739159 488.17800903]
[17.35002899 474.95501709]
[13.75360203 460.30139160]
[14.07332325 445.21630859]
[18.28739357 430.72824097]
[26.10849190 417.82501221]
[37.00336075 407.38644409]
[50.22916794 400.12417603]
[64.88416290 396.53341675]
[65.19622040 381.53665161]
[65.50827026 366.53988647]
[65.82032776 351.54315186]
[66.13238525 336.54638672]
[66.44444275 321.54965210]
[66.75650024 306.55288696]
[67.06855774 291.55612183]
[67.38060760 276.55938721]
[67.69266510 261.56262207]
[68.00472260 246.56587219]
[56.18909073 255.80657959]
[41.27786255 254.17706299]
[31.73695183 242.60247803]
[32.98324585 227.65434265]
[44.30915833 217.81951904]
[59.28435516 218.68177795]
[69.40714264 229.75300598]
[71.58398438 214.91178894]
[73.76081848 200.07058716]
[64.69034576 188.31210327]
[66.68654633 173.22999573]
[79.08143616 163.79577637]
[81.25827026 148.95457458]
[83.43511200 134.11335754]
[85.61194611 119.27215576]
[78.00690460 99.51319885]
[88.78618622 83.50433350]
[86.91857147 68.62105560]
[77.20515442 60.07099915]
[75.98714447 47.59159851]
[83.37580109 37.96273041]
[81.81821442 23.04381752]
[80.26063538 8.12490463]
[78.70305634 -6.79400730]
[77.14547729 -21.71291924]
[75.58789062 -36.63183212]
[60.57132339 -36.91864395]
[45.70382690 -39.04868698]
[31.21078491 -42.98966980]
[17.31191063 -48.68185425]
[4.21791029 -56.03894424]
[-7.87271738 -64.94940948]
[-18.77667999 -75.27816010]
[-28.32867813 -86.86862946]
[-36.38390350 -99.54510498]
[-42.82024384 -113.11540985]
[-47.54012299 -127.37382507]
[-50.47198868 -142.10418701]
[-51.57139587 -157.08320618]
[-50.82167816 -172.08378601]
[-48.23420334 -186.87854004]
[-43.84819031 -201.24316406]
[-37.73013687 -214.95991516]
[-29.97278786 -227.82083130]
[-20.69374084 -239.63095093]
[-10.03366756 -250.21122742]
[1.84582961 -259.40127563]
[14.76466084 -267.06179810]
[28.52697945 -273.07662964]
[42.92415237 -277.35461426]
[57.73792267 -279.83084106]
[72.74371338 -280.46786499]
[87.71405029 -279.25595093]
[102.42197418 -276.21350098]
[116.64453125 -271.38662720]
[130.16609192 -264.84851074]
[142.78169250 -256.69830322]
[154.30007935 -247.05949402]
[164.54661560 -236.07823181]
[173.36599731 -223.92100525]
[180.62451172 -210.77210999]
[186.21211243 -196.83085632]
[190.04409790 -182.30862427]
[192.06239319 -167.42553711]
[192.23637390 -152.40724182]
[190.56343079 -137.48138428]
[187.06889343 -122.87427521]
[181.80577087 -108.80731964]
[174.85382080 -95.49378967]
[166.31846619 -83.13550568]
[156.32907104 -71.91982269]
[145.03707886 -62.01676178]
[132.61367798 -53.57645035]
[119.24721527 -46.72684479]
[105.14030457 -41.57178116]
[90.50680542 -38.18941116]
[92.06438446 -23.27050018]
[93.62197113 -8.35158825]
[95.17955017 6.56732368]
[96.73712921 21.48623657]
[98.29470825 36.40514755]
[109.35658264 49.99319077]
[101.80184937 66.75344086]
[103.66946411 81.63671875]
[115.36908722 91.02388000]
[130.30339050 89.62157440]
[145.23770142 88.21927643]
[160.44221497 80.71866608]
[171.85871887 93.25260162]
[162.97502136 107.69268799]
[146.63999939 103.15357971]
[131.70570374 104.55588531]
[116.77139282 105.95819092]
[131.07527161 110.47471619]
[137.38829041 124.08154297]
[131.60034180 137.91987610]
[117.47968292 142.98020935]
[104.21964264 135.96800232]
[100.45315552 121.44899750]
[98.27631378 136.29020691]
[96.09947968 151.13140869]
[93.92263794 165.97261047]
[103.08619690 178.56892395]
[100.66715240 193.58900452]
[88.60202789 202.24742126]
[86.42518616 217.08863831]
[84.24835205 231.92984009]
[83.00148010 246.87792969]
[82.68942261 261.87466431]
[82.37736511 276.87142944]
[82.06530762 291.86819458]
[81.75325012 306.86492920]
[81.44119263 321.86169434]
[81.12914276 336.85845947]
[80.81708527 351.85519409]
[80.50502777 366.85195923]
[80.19297028 381.84869385]
[79.88091278 396.84545898]
[94.37384796 401.04275513]
[107.28610992 408.84890747]
[117.73731995 419.73165894]
[125.01489258 432.94903564]
[128.62263489 447.59988403]
[128.31455994 462.68521118]
[124.11167908 477.17651367]
[116.30055237 490.08578491]
[105.41374969 500.53277588]
[92.19355011 507.80523682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[29 129]
[30 128]
[31 127]
[34 124]
[35 123]
[36 122]
[37 121]
[39 106]
[40 105]
[43 103]
[44 102]
[45 101]
[46 100]
[47 99]
[48 98]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
