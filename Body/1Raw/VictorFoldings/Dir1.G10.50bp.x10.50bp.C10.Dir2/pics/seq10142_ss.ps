%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAAUAUGGGGGGGGGGGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCxxxxxxxxxxAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACACCCCCCCCCCAACUUACUAU\
) } def
/len { sequence length } bind def

/coor [
[85.36262512 436.92266846]
[70.87293243 432.71417236]
[57.96670151 424.89807129]
[47.52389908 414.00723267]
[40.25653458 400.78421021]
[36.66011047 386.13061523]
[36.97983170 371.04553223]
[41.19390106 356.55746460]
[49.01499939 343.65423584]
[59.90986633 333.21563721]
[73.13567352 325.95339966]
[87.79066467 322.36264038]
[88.10272217 307.36587524]
[88.41477966 292.36911011]
[88.72683716 277.37237549]
[89.03889465 262.37561035]
[89.35095215 247.37886047]
[89.66300201 232.38211060]
[89.97505951 217.38534546]
[90.28711700 202.38859558]
[90.59917450 187.39184570]
[89.81932831 172.41212463]
[87.95171356 157.52885437]
[86.08410645 142.64556885]
[73.82173157 134.00645447]
[59.17823410 137.25727844]
[44.53473282 140.50810242]
[29.89123154 143.75892639]
[23.83166885 158.04393005]
[10.51554966 166.01014709]
[-4.93680620 164.59440613]
[-16.58365250 154.34107971]
[-19.94654083 139.19279480]
[-13.73236942 124.97437286]
[-0.33061570 117.15307617]
[15.10547256 118.73636627]
[26.64040565 129.11543274]
[41.28390503 125.86460114]
[55.92740631 122.61377716]
[70.57090759 119.36295319]
[72.49948883 112.11515045]
[58.00389099 108.25799561]
[43.50835800 104.40059662]
[47.36600113 89.90512085]
[61.86104965 93.76239777]
[76.35665131 97.61955261]
[78.28522491 90.37175751]
[67.19390869 80.27310944]
[56.10259628 70.17446136]
[45.01128006 60.07580948]
[33.91996765 49.97715759]
[22.82865143 39.87850952]
[11.73733521 29.77985954]
[-4.39099693 26.81187630]
[-9.62912273 11.27179718]
[1.41149378 -0.85407734]
[17.37321281 2.90831375]
[21.83598518 18.68854523]
[32.92729950 28.78719521]
[44.01861572 38.88584518]
[55.10993195 48.98449326]
[66.20124817 59.08314133]
[77.29256439 69.18179321]
[88.38388062 79.28044128]
[102.10392761 73.21743011]
[102.10392761 58.21743011]
[102.10392761 43.21743011]
[102.10392761 28.21742821]
[88.04674530 22.43262863]
[77.27687073 11.70517349]
[71.43663788 -2.32907534]
[71.41664124 -17.52999687]
[77.21993256 -31.57956314]
[87.96154022 -42.33531570]
[102.00346375 -48.15707779]
[117.20439911 -48.15707779]
[131.24632263 -42.33531570]
[141.98793030 -31.57956314]
[147.79121399 -17.52999687]
[147.77122498 -2.32907534]
[141.93098450 11.70517349]
[131.16111755 22.43262863]
[117.10392761 28.21742821]
[117.10392761 43.21743011]
[117.10392761 58.21743011]
[117.10392761 73.21743011]
[123.18984985 77.60053253]
[131.95623779 65.42883301]
[144.12780762 74.19541168]
[135.36167908 86.36673737]
[141.44760132 90.74983978]
[155.67437744 85.99602509]
[169.90116882 81.24221039]
[177.10473633 75.51853943]
[184.47361755 76.54083252]
[195.35166931 65.05262756]
[209.80308533 68.65896606]
[224.12568665 64.20215607]
[225.12654114 49.05742645]
[231.53425598 35.29859543]
[242.48225403 24.78642082]
[256.48989868 18.94259453]
[271.66278076 18.55744362]
[285.94888306 23.68305779]
[297.41610718 33.62623596]
[304.51364136 47.04225159]
[306.28158569 62.11669540]
[302.48086548 76.81086731]
[293.62542725 89.13751221]
[280.91299438 97.42954254]
[266.06271362 100.56553650]
[251.08305359 98.12136841]
[237.99984741 90.42760468]
[228.58248901 78.52474976]
[214.25990295 82.98156738]
[204.40631104 94.15098572]
[188.93043518 90.86342621]
[174.65498352 95.46899414]
[160.42819214 100.22280884]
[146.20141602 104.97662354]
[100.96738434 140.77795410]
[102.83499908 155.66123962]
[104.70260620 170.54450989]
[114.21549988 158.94688416]
[128.92427063 156.00546265]
[142.16571045 163.05274963]
[147.94132996 176.89624023]
[143.63468933 191.26470947]
[131.19676208 199.64910889]
[116.26203918 198.25119019]
[105.59592438 187.70390320]
[105.28387451 202.70065308]
[104.97181702 217.69740295]
[104.65975952 232.69415283]
[104.34770203 247.69091797]
[104.03564453 262.68765259]
[103.72358704 277.68441772]
[103.41153717 292.68118286]
[103.09947968 307.67791748]
[102.78742218 322.67468262]
[117.28035736 326.87197876]
[130.19262695 334.67810059]
[140.64382935 345.56088257]
[147.92140198 358.77825928]
[151.52914429 373.42910767]
[151.22106934 388.51443481]
[147.01818848 403.00573730]
[139.20706177 415.91500854]
[128.32025146 426.36199951]
[115.10005951 433.63446045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 123]
[23 122]
[24 121]
[25 40]
[26 39]
[27 38]
[28 37]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[65 86]
[66 85]
[67 84]
[68 83]
[91 120]
[92 119]
[93 118]
[95 117]
[97 115]
[98 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
