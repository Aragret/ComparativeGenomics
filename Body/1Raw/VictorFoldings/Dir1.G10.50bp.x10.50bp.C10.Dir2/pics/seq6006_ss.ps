%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAGCUAAGGACGGGGGGGGGGUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAxxxxxxxxxxAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUCCCCCCCCCCUAACAGCUAAGCAC\
) } def
/len { sequence length } bind def

/coor [
[77.06651306 427.21087646]
[62.70426178 422.70413208]
[49.54337311 415.39825439]
[38.12277603 405.59240723]
[28.91013718 393.68811035]
[22.28270912 380.17285156]
[18.51187897 365.60009766]
[17.75206184 350.56652832]
[20.03437233 335.68783569]
[25.26534843 321.57324219]
[33.23078918 308.80075073]
[43.60451126 297.89337158]
[55.96171570 289.29776001]
[69.79638672 283.36593628]
[84.54199982 280.34075928]
[84.54199982 265.34075928]
[84.54199982 250.34074402]
[84.54199982 235.34074402]
[84.54199982 220.34074402]
[84.54199982 205.34074402]
[84.54199982 190.34074402]
[84.54199982 175.34074402]
[84.54199982 160.34074402]
[84.54199982 145.34074402]
[72.80134583 136.00495911]
[58.18690491 139.38403320]
[43.57246399 142.76312256]
[28.95802689 146.14219666]
[25.14273071 160.96455383]
[14.86756611 172.30825806]
[0.49368966 177.56660461]
[-14.67588615 175.53128052]
[-27.15530396 166.66996765]
[-34.07688522 153.01895142]
[-33.85010147 137.71511841]
[-26.52706528 124.27519226]
[-13.79055691 115.78755951]
[1.43266714 114.20261383]
[15.64442062 119.88457489]
[25.57894897 131.52775574]
[40.19338608 128.14868164]
[54.80782700 124.76959991]
[69.42226410 121.39052582]
[70.82180023 114.02226257]
[56.08532333 111.22293854]
[58.88488770 96.48651123]
[73.62087250 99.28573608]
[75.02041626 91.91747284]
[62.66271973 83.41527557]
[50.30502319 74.91307068]
[37.94733047 66.41087341]
[22.92568970 70.75649261]
[8.64613247 64.38246155]
[1.85102916 50.29840469]
[5.74881840 35.15438843]
[18.49908447 26.10094833]
[34.08153915 27.41284561]
[45.13862610 38.47064209]
[46.44952774 54.05318069]
[58.80722427 62.55537796]
[71.16491699 71.05757904]
[83.52261353 79.55977631]
[89.94244385 75.68218231]
[89.64605713 60.68511200]
[102.78211212 67.92699432]
[109.20194244 64.04940033]
[107.42784882 49.15468216]
[105.65374756 34.25996780]
[90.89069366 30.82077599]
[78.19593048 22.53713417]
[69.10240936 10.40932941]
[64.70821381 -4.09814835]
[65.54397583 -19.23344803]
[71.50876617 -33.16891098]
[81.88230133 -44.22175980]
[95.41194153 -51.05731201]
[110.46390533 -52.85013962]
[125.22059631 -49.38374710]
[137.90007019 -41.07672501]
[146.97122192 -28.93218231]
[151.33868408 -14.41663170]
[150.47502136 0.71710247]
[144.48457336 14.64154911]
[134.09068298 25.67526245]
[120.54846954 32.48587036]
[122.32256317 47.38058472]
[124.09666443 62.27530289]
[136.85908508 70.15695953]
[150.97129822 65.07309723]
[165.08349609 59.98924255]
[179.19570923 54.90538406]
[193.30792236 49.82152557]
[194.93101501 27.62301445]
[211.74638367 9.71010017]
[238.37254333 5.99441767]
[248.60612488 -4.97251844]
[251.77120972 -21.06333351]
[267.37420654 -26.11094475]
[279.36410522 -14.92280483]
[275.40670776 0.99168915]
[259.57305908 5.26106930]
[249.33947754 16.22800446]
[252.89535522 22.83146858]
[263.25823975 11.98663712]
[276.77459717 18.49112129]
[274.76522827 33.35592651]
[260.00711060 36.03839493]
[263.56298828 42.64185715]
[278.35195923 40.13448334]
[293.14089966 37.62710571]
[307.92984009 35.11973190]
[315.68103027 21.53838348]
[330.36657715 16.16535759]
[345.05236816 21.53763199]
[352.80426025 35.11858368]
[349.96203613 50.49570084]
[337.86770630 60.40838242]
[322.23184204 60.17615891]
[310.43722534 49.90867996]
[295.64828491 52.41605759]
[280.85931396 54.92343140]
[266.07037354 57.43080902]
[259.05184937 69.22876740]
[248.94941711 77.77332306]
[237.07434082 82.37414551]
[224.84336853 82.82503510]
[213.61155701 79.39559174]
[204.52241516 72.76867676]
[198.39176941 63.93373489]
[184.27957153 69.01759338]
[170.16735840 74.10144806]
[156.05514526 79.18530273]
[141.94294739 84.26916504]
[136.91423035 125.85723114]
[99.54199982 145.34074402]
[99.54199982 160.34074402]
[99.54199982 175.34074402]
[99.54199982 190.34074402]
[99.54199982 205.34074402]
[99.54199982 220.34074402]
[99.54199982 235.34074402]
[99.54199982 250.34074402]
[99.54199982 265.34075928]
[99.54199982 280.34075928]
[114.28762054 283.36593628]
[128.12228394 289.29776001]
[140.47949219 297.89337158]
[150.85322571 308.80075073]
[158.81866455 321.57324219]
[164.04963684 335.68783569]
[166.33193970 350.56652832]
[165.57212830 365.60009766]
[161.80130005 380.17285156]
[155.17387390 393.68811035]
[145.96122742 405.59240723]
[134.54063416 415.39825439]
[121.37974548 422.70413208]
[107.01749420 427.21087646]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 43]
[26 42]
[27 41]
[28 40]
[48 62]
[49 61]
[50 60]
[51 59]
[66 87]
[67 86]
[68 85]
[88 133]
[89 132]
[90 131]
[91 130]
[92 129]
[95 102]
[96 101]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
