%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGCCUAACGGGGGGGGGGCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCAxxxxxxxxxxGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUAACCCCCCCCCCUACGCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[86.83197021 358.97137451]
[72.98603821 352.95535278]
[61.27737427 343.42593384]
[52.57484818 331.09027100]
[47.52424622 316.86373901]
[46.50035477 301.80206299]
[49.57915497 287.02291870]
[56.53217697 273.62298584]
[66.84346008 262.59664917]
[79.74784088 254.76214600]
[94.28772736 250.70082092]
[94.28772736 235.70082092]
[94.28772736 220.70082092]
[94.28772736 205.70082092]
[94.28772736 190.70082092]
[94.28772736 175.70082092]
[94.28772736 160.70082092]
[94.28772736 145.70082092]
[94.28772736 130.70082092]
[94.28772736 115.70082855]
[85.14599609 103.80844879]
[70.65039825 99.95128632]
[56.15480042 96.09413147]
[41.65920639 92.23696899]
[28.09898376 99.90235901]
[13.45333385 95.78415680]
[6.22912598 82.80931854]
[-8.26647091 78.95215607]
[-22.80140686 75.24599457]
[-37.37411118 71.69123077]
[-51.94681168 68.13647461]
[-69.46004486 73.72812653]
[-81.69618988 61.18712234]
[-96.33969116 57.93629837]
[-110.98319244 54.68547058]
[-125.62669373 51.43464661]
[-140.77572632 55.99726105]
[-151.52366638 45.68557358]
[-162.40614319 56.62062073]
[-177.47789001 59.91394043]
[-191.92958069 54.51464081]
[-201.14970398 42.14562225]
[-202.19619751 26.75379372]
[-194.73509216 13.25062847]
[-181.14720154 5.94494104]
[-165.76840210 7.16794777]
[-153.50598145 16.52939224]
[-148.27284241 31.04207039]
[-134.17121887 26.24693680]
[-122.37586975 36.79114532]
[-107.73236847 40.04196930]
[-93.08885956 43.29279709]
[-78.44535828 46.54362106]
[-68.03582764 40.30270767]
[-55.77711487 42.93763733]
[-48.39205170 53.56377029]
[-33.81934738 57.11853027]
[-19.24664497 60.67329407]
[-11.95586777 59.19335556]
[-4.40931129 64.45655823]
[10.08628559 68.31372070]
[22.80353737 60.64514160]
[37.55908203 64.35035706]
[45.51636505 77.74137115]
[60.01195908 81.59853363]
[74.50756073 85.45569611]
[89.00315094 89.31285095]
[103.64665222 86.06202698]
[115.14846039 76.43350220]
[126.65026093 66.80496979]
[111.82258606 69.07212067]
[96.92401123 67.33071899]
[83.01885986 61.70517349]
[71.10048676 52.59735107]
[62.02031708 40.65789795]
[56.42701340 26.73974800]
[54.72014999 11.83717632]
[57.02166367 -2.98520660]
[63.16713715 -16.66852379]
[72.71755219 -28.23526764]
[84.99064636 -36.85913849]
[99.10965729 -41.92406082]
[114.06595612 -43.06821442]
[128.79110718 -40.20985794]
[142.23315430 -33.55319214]
[153.43183899 -23.57374573]
[161.58715820 -10.98443508]
[166.11651611 3.31538844]
[166.69633484 18.30417824]
[163.28520203 32.91116714]
[156.12678528 46.09286499]
[145.73678589 56.90418243]
[157.08329773 45.87843323]
[171.37219238 50.08280945]
[185.86778259 46.22565079]
[200.36338806 42.36849213]
[214.85897827 38.51132965]
[229.35458374 34.65417099]
[243.76679993 30.49628448]
[258.08938599 26.03946877]
[272.41198730 21.58265305]
[276.42065430 6.68519640]
[287.86245728 -3.66316247]
[303.08639526 -6.16029978]
[317.23452759 -0.00938777]
[325.79226685 12.82683945]
[326.02883911 28.25238800]
[317.86877441 41.34502411]
[303.91592407 47.92692947]
[288.62258911 45.89785004]
[276.86880493 35.90525055]
[262.54620361 40.36206436]
[248.22361755 44.81888199]
[245.22499084 48.61148071]
[239.78622437 50.52224731]
[233.21174622 49.14976883]
[218.71614075 53.00692749]
[204.22055054 56.86408615]
[189.72494507 60.72124863]
[175.22935486 64.57840729]
[164.91966248 75.32826996]
[149.59394836 71.39978027]
[136.27879333 78.30677795]
[124.77698517 87.93530273]
[113.27518463 97.56382751]
[127.22728729 92.05577087]
[140.46739197 99.10556793]
[143.68582153 113.75622559]
[134.61958313 125.70625305]
[119.64350891 126.55310822]
[109.28772736 115.70082855]
[109.28772736 130.70082092]
[109.28772736 145.70082092]
[109.28772736 160.70082092]
[109.28772736 175.70082092]
[109.28772736 190.70082092]
[109.28772736 205.70082092]
[109.28772736 220.70082092]
[109.28772736 235.70082092]
[109.28772736 250.70082092]
[123.82761383 254.76214600]
[136.73199463 262.59664917]
[147.04327393 273.62298584]
[153.99630737 287.02291870]
[157.07510376 301.80206299]
[156.05120850 316.86373901]
[151.00061035 331.09027100]
[142.29808044 343.42593384]
[130.58941650 352.95535278]
[116.74348450 358.97137451]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 67]
[22 66]
[23 65]
[24 64]
[27 61]
[28 60]
[29 58]
[30 57]
[31 56]
[33 53]
[34 52]
[35 51]
[36 50]
[38 48]
[68 125]
[69 124]
[70 123]
[92 122]
[94 120]
[95 119]
[96 118]
[97 117]
[98 116]
[99 113]
[100 112]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
