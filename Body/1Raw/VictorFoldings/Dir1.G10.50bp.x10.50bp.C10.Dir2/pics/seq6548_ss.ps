%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCACCCUGGGGGGGGGGGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCxxxxxxxxxxACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCCCCCCCCCCCUUCCACCCU\
) } def
/len { sequence length } bind def

/coor [
[62.96876907 387.75695801]
[49.12282944 381.74093628]
[37.41416931 372.21151733]
[28.71164322 359.87585449]
[23.66104126 345.64932251]
[22.63714981 330.58764648]
[25.71595001 315.80850220]
[32.66897202 302.40856934]
[42.98025513 291.38223267]
[55.88463593 283.54772949]
[70.42452240 279.48641968]
[70.42452240 264.48641968]
[70.42452240 249.48640442]
[70.42452240 234.48640442]
[70.42452240 219.48640442]
[70.42452240 204.48640442]
[70.42452240 189.48640442]
[70.42452240 174.48640442]
[70.42452240 159.48640442]
[70.42452240 144.48640442]
[70.42452240 129.48640442]
[64.21911621 115.83016968]
[52.92011261 105.96444702]
[37.43595886 102.71611786]
[32.93786240 88.51695251]
[21.63885880 78.65122986]
[15.13462639 76.97716522]
[11.10006332 72.85969543]
[10.08606148 68.13240051]
[-0.79276395 57.80519104]
[-11.67158890 47.47798920]
[-23.65842247 38.46045685]
[-36.59647751 30.87055016]
[-29.52899551 44.10122299]
[-26.59345436 58.81116867]
[-28.04115295 73.74114227]
[-33.74816132 87.61306000]
[-43.22592926 99.23941040]
[-55.66310883 107.62490845]
[-69.99501038 112.05171204]
[-84.99474335 112.14087677]
[-99.37825775 107.88475037]
[-111.91423798 99.64768982]
[-121.52954102 88.13483429]
[-127.40105438 74.33174133]
[-129.02613831 59.42002869]
[-126.26566315 44.67622375]
[-119.35595703 31.36247063]
[-108.88852692 20.61850166]
[-95.75943756 13.36405468]
[-81.09261322 10.22015190]
[-66.14360046 11.45592594]
[-52.18916702 16.96729660]
[-61.20669937 4.98046446]
[-70.22422791 -7.00636816]
[-79.24176025 -18.99320030]
[-88.25928497 -30.98003387]
[-97.27681732 -42.96686554]
[-111.63056946 -51.98939896]
[-106.93415833 -68.27988434]
[-89.98020935 -68.27666473]
[-85.28998566 -51.98439407]
[-76.27245331 -39.99756241]
[-67.25492096 -28.01073074]
[-58.23739624 -16.02389717]
[-49.21986389 -4.03706551]
[-40.20233536 7.94976711]
[-29.00656891 17.93249321]
[-16.06851387 25.52240181]
[-21.84653473 11.67991447]
[-20.65784645 -3.27291203]
[-12.76537132 -16.02865028]
[0.08514480 -23.76584816]
[15.05128765 -24.77310753]
[28.82268333 -18.82763481]
[38.35322571 -7.24451256]
[41.53485107 7.41418028]
[37.66380692 21.90607452]
[27.59633446 33.02569962]
[13.55926895 38.31349182]
[-1.34438419 36.59916306]
[9.53444099 46.92636871]
[20.41326714 57.25357056]
[31.50458145 67.35221863]
[42.80358505 77.21794128]
[57.47955704 79.76060486]
[62.78583527 94.66543579]
[74.08483887 104.53116608]
[68.89891052 90.45614624]
[63.71297836 76.38112640]
[58.88119125 62.18064117]
[59.32981873 47.18735123]
[65.00201416 33.30116272]
[75.17900848 22.28169060]
[88.57120514 15.52528858]
[103.48159790 13.88810921]
[118.02076721 17.57760811]
[130.34637451 26.12626648]
[138.89654541 38.45082092]
[142.58805847 52.99301910]
[130.33151245 61.64039612]
[118.07497406 70.28777313]
[132.97688293 68.57508850]
[147.87878418 66.86239624]
[162.78068542 65.14970398]
[177.68258667 63.43701935]
[185.19273376 49.85845566]
[199.26406860 43.31803131]
[214.48587036 46.33067322]
[225.00506592 57.73796082]
[226.77679443 73.15355682]
[219.11979675 86.64984894]
[204.97833252 93.03723907]
[189.79010010 89.85964966]
[179.39527893 78.33892059]
[164.49337769 80.05161285]
[149.59147644 81.76429749]
[134.68957520 83.47698975]
[119.78766632 85.18968201]
[117.30254364 99.98238373]
[130.82673645 106.47055054]
[144.35092163 112.95871735]
[161.24699402 114.35838318]
[164.57933044 130.98162842]
[149.52821350 138.78549194]
[137.86276245 126.48290253]
[124.33856964 119.99474335]
[110.81438446 113.50657654]
[104.46691895 117.50153351]
[85.42452240 129.48640442]
[85.42452240 144.48640442]
[85.42452240 159.48640442]
[85.42452240 174.48640442]
[85.42452240 189.48640442]
[85.42452240 204.48640442]
[85.42452240 219.48640442]
[85.42452240 234.48640442]
[85.42452240 249.48640442]
[85.42452240 264.48641968]
[85.42452240 279.48641968]
[99.96440887 283.54772949]
[112.86878967 291.38223267]
[123.18007660 302.40856934]
[130.13310242 315.80850220]
[133.21189880 330.58764648]
[132.18800354 345.64932251]
[127.13740540 359.87585449]
[118.43487549 372.21151733]
[106.72621918 381.74093628]
[92.88027954 387.75695801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 88]
[23 87]
[25 85]
[26 84]
[29 83]
[30 82]
[31 81]
[32 69]
[33 68]
[53 67]
[54 66]
[55 65]
[56 64]
[57 63]
[58 62]
[102 119]
[103 118]
[104 117]
[105 116]
[106 115]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
