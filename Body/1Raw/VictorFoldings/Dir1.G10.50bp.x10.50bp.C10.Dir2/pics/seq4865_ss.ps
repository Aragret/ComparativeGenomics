%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAUAUACGGGGGGGGGGUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAxxxxxxxxxxUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACCCCCCCCCCCAACAAUAUUC\
) } def
/len { sequence length } bind def

/coor [
[85.27723694 372.84719849]
[71.25528717 367.29418945]
[59.05533218 358.42785645]
[49.44426346 346.80557251]
[43.02623749 333.15786743]
[40.20470047 318.34268188]
[41.15701675 303.29129028]
[45.82332230 288.94985962]
[53.91028595 276.21990967]
[64.90956116 265.90164185]
[78.12972260 258.64367676]
[92.73973083 254.90223694]
[92.73973083 239.90223694]
[92.73973083 224.90223694]
[92.73973083 209.90223694]
[92.73973083 194.90223694]
[92.73973083 179.90223694]
[92.73973083 164.90223694]
[92.73973083 149.90223694]
[92.73973083 134.90223694]
[92.73973083 119.90222931]
[92.73973083 104.90222931]
[90.71220398 102.53531647]
[89.52458191 99.36089325]
[89.48390198 95.69757080]
[90.77175140 91.97507477]
[93.40612793 88.68426514]
[94.63673401 73.73483276]
[91.42774200 59.08210754]
[84.06150055 46.01541138]
[76.69525909 32.94871521]
[69.32902527 19.88202095]
[61.96278381 6.81532621]
[54.59654236 -6.25136852]
[40.82962418 -0.26171640]
[26.51980019 4.28063965]
[11.81876659 7.32754850]
[-3.11763787 8.84671116]
[-18.13107872 8.82202244]
[-33.06240845 7.25374508]
[-47.75333786 4.15850401]
[-62.04814529 -0.43089014]
[-75.79529572 -6.46578693]
[-88.84905243 -13.88221359]
[-101.07105255 -22.60155106]
[-112.33171844 -32.53136826]
[-122.51169586 -43.56640625]
[-131.50306702 -55.58968735]
[-139.21052551 -68.47375488]
[-145.55235291 -82.08203888]
[-150.46131897 -96.27027130]
[-153.88540649 -110.88805389]
[-155.78831482 -125.78043365]
[-156.14985657 -140.78955078]
[-154.96620178 -155.75627136]
[-152.24992371 -170.52197266]
[-148.02978516 -184.93011475]
[-142.35052490 -198.82795715]
[-135.27236938 -212.06819153]
[-126.87033081 -224.51043701]
[-117.23348236 -236.02282715]
[-106.46397400 -246.48332214]
[-94.67597961 -255.78102112]
[-81.99444580 -263.81735229]
[-68.55381775 -270.50717163]
[-54.49656296 -275.77951050]
[-39.97169876 -279.57852173]
[-25.13320160 -281.86389160]
[-10.13836098 -282.61141968]
[4.85386562 -281.81320190]
[19.68455315 -279.47766113]
[34.19648743 -275.62957764]
[48.23583221 -270.30972290]
[61.65376663 -263.57449341]
[74.30805206 -255.49533081]
[86.06454468 -246.15782166]
[96.79861450 -235.66098022]
[106.39648438 -224.11607361]
[114.75640106 -211.64547729]
[121.78975677 -198.38139343]
[127.42198181 -184.46441650]
[131.59338379 -170.04209900]
[134.25973511 -155.26730347]
[135.39276123 -140.29664612]
[134.98046875 -125.28885651]
[133.02722168 -110.40299225]
[129.55372620 -95.79686737]
[124.59680939 -81.62531281]
[118.20900726 -68.03855896]
[110.45803833 -55.18062210]
[101.42606354 -43.18781281]
[91.20883179 -32.18725586]
[79.91464996 -22.29557037]
[67.66323853 -13.61760807]
[75.02947998 -0.55091333]
[82.39571381 12.51578140]
[89.76195526 25.58247566]
[97.12819672 38.64916992]
[104.49443817 51.71586609]
[105.12488556 36.72912216]
[108.70408630 22.16240311]
[115.09092712 8.59006691]
[124.03356934 -3.45273829]
[135.17941284 -13.49117279]
[148.08898926 -21.12942696]
[162.25326538 -26.06633186]
[177.11378479 -28.10722733]
[192.08457947 -27.17164230]
[206.57536316 -23.29646492]
[220.01478577 -16.63449287]
[231.87294006 -7.44840240]
[241.68225098 3.89960480]
[249.05596924 16.96208382]
[253.70333862 31.22399330]
[255.44110107 46.12298965]
[254.20077515 61.07162094]
[250.03123474 75.48046875]
[243.09689331 88.78141022]
[233.67115784 100.44998169]
[222.12570190 110.02611542]
[208.91572571 117.13222504]
[194.56211853 121.48812103]
[179.63081360 122.92205048]
[164.71055603 121.37747955]
[150.38961792 116.91530609]
[137.23269653 109.71147156]
[125.75852966 100.05001831]
[116.41956329 88.31188965]
[109.58617401 74.96544647]
[108.35556030 89.91487885]
[107.73973083 104.90222931]
[107.73973083 119.90222931]
[107.73973083 134.90223694]
[107.73973083 149.90223694]
[107.73973083 164.90223694]
[107.73973083 179.90223694]
[107.73973083 194.90223694]
[107.73973083 209.90223694]
[107.73973083 224.90223694]
[107.73973083 239.90223694]
[107.73973083 254.90223694]
[122.34974670 258.64367676]
[135.56990051 265.90164185]
[146.56918335 276.21990967]
[154.65614319 288.94985962]
[159.32244873 303.29129028]
[160.27476501 318.34268188]
[157.45323181 333.15786743]
[151.03520203 346.80557251]
[141.42413330 358.42785645]
[129.22418213 367.29418945]
[115.20223236 372.84719849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 130]
[28 129]
[29 99]
[30 98]
[31 97]
[32 96]
[33 95]
[34 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
