%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUCCUAUCGGGGGGGGGGUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCxxxxxxxxxxCACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAACCCCCCCCCCUUCUCCGAUC\
) } def
/len { sequence length } bind def

/coor [
[85.41905212 380.57696533]
[71.57311249 374.56094360]
[59.86445236 365.03152466]
[51.16193008 352.69586182]
[46.11132812 338.46932983]
[45.08743668 323.40765381]
[48.16623306 308.62847900]
[55.11925507 295.22857666]
[65.43054199 284.20223999]
[78.33492279 276.36773682]
[92.87480927 272.30639648]
[92.87480927 257.30639648]
[92.87480927 242.30641174]
[92.87480927 227.30641174]
[92.87480927 212.30641174]
[92.87480927 197.30641174]
[92.87480927 182.30641174]
[92.87480927 167.30641174]
[92.87480927 152.30641174]
[92.87480927 137.30641174]
[92.87480927 122.30641174]
[86.92861938 117.73554230]
[77.78669739 129.62777710]
[65.89459991 120.48567963]
[75.03623962 108.59381104]
[69.09004974 104.02294159]
[54.59445190 107.88010406]
[40.09885406 111.73725891]
[25.60325813 115.59442139]
[14.37548923 127.54721069]
[-1.52581716 123.53716278]
[-5.74275875 107.68946838]
[6.06269169 96.30687714]
[21.74609947 101.09882355]
[36.24169540 97.24166107]
[50.73729324 93.38450623]
[65.23288727 89.52734375]
[76.04229736 82.87459564]
[86.83565521 81.64458466]
[95.44036102 84.94845581]
[92.34204102 70.27192688]
[89.24371338 55.59540558]
[74.30348969 57.09101105]
[59.28913879 56.96250153]
[44.37670135 55.21138000]
[29.74101448 51.85817719]
[15.55367851 46.94221115]
[1.98103094 40.52111435]
[-10.81779575 32.67017365]
[-22.69274330 23.48143768]
[-33.50458145 13.06263828]
[-43.12654877 1.53593123]
[-51.44583511 -10.96353912]
[-58.36489487 -24.28922272]
[-63.80260849 -38.28488159]
[-67.69522095 -52.78642654]
[-69.99710083 -67.62383270]
[-70.68125153 -82.62313843]
[-69.73964691 -97.60848236]
[-67.18334198 -112.40417480]
[-63.04229355 -126.83674622]
[-57.36506271 -140.73696899]
[-50.21820831 -153.94187927]
[-41.68552399 -166.29666138]
[-31.86705017 -177.65644836]
[-20.87790680 -187.88806152]
[-8.84693050 -196.87153625]
[4.08481693 -204.50155640]
[17.76572037 -210.68865967]
[32.03537750 -215.36029053]
[46.72648239 -218.46168518]
[61.66679001 -219.95648193]
[76.68112946 -219.82716370]
[91.59347534 -218.07524109]
[106.22898102 -214.72125244]
[120.41605377 -209.80451965]
[133.98835754 -203.38270569]
[146.78675842 -195.53106689]
[158.66120911 -186.34169006]
[169.47248840 -175.92231750]
[179.09384155 -164.39509583]
[187.41244507 -151.89517212]
[194.33079529 -138.56912231]
[199.76776123 -124.57316589]
[203.65959167 -110.07141113]
[205.96066284 -95.23387909]
[206.64401245 -80.23453522]
[205.70159912 -65.24924469]
[203.14450073 -50.45368576]
[199.00267029 -36.02134323]
[193.32469177 -22.12142181]
[186.17712402 -8.91689396]
[177.64378357 3.43742442]
[167.82469177 14.79668617]
[156.83500671 25.02770805]
[144.80354309 34.01054001]
[131.87138367 41.63985825]
[118.19014740 47.82621765]
[103.92024231 52.49708176]
[107.01856232 67.17360687]
[110.11688232 81.85013580]
[122.10371399 90.86766052]
[137.06396484 89.77635193]
[152.02421570 88.68504333]
[166.98446655 87.59373474]
[181.94471741 86.50241852]
[188.56378174 72.64299774]
[201.23484802 63.96315765]
[216.54945374 62.79772568]
[230.38806152 69.46020508]
[239.02813721 82.15841675]
[240.14556885 97.47660065]
[233.43974304 111.29425812]
[220.71450806 119.89449310]
[205.39289856 120.96389771]
[191.59632874 114.21479797]
[183.03602600 101.46266937]
[168.07577515 102.55397797]
[153.11552429 103.64529419]
[138.15527344 104.73660278]
[123.19503021 105.82791138]
[138.16148376 104.82540131]
[151.10525513 112.40557861]
[157.55329895 125.94893646]
[155.27737427 140.77526855]
[145.06398010 151.76100159]
[130.44256592 155.10977173]
[116.46589661 149.66433716]
[107.96392822 137.30648804]
[107.87480927 122.30641174]
[107.87480927 137.30641174]
[107.87480927 152.30641174]
[107.87480927 167.30641174]
[107.87480927 182.30641174]
[107.87480927 197.30641174]
[107.87480927 212.30641174]
[107.87480927 227.30641174]
[107.87480927 242.30641174]
[107.87480927 257.30639648]
[107.87480927 272.30639648]
[122.41469574 276.36773682]
[135.31907654 284.20223999]
[145.63035583 295.22857666]
[152.58338928 308.62847900]
[155.66218567 323.40765381]
[154.63829041 338.46932983]
[149.58769226 352.69586182]
[140.88516235 365.03152466]
[129.17649841 374.56094360]
[115.33056641 380.57696533]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 37]
[27 36]
[28 35]
[29 34]
[40 101]
[41 100]
[42 99]
[102 121]
[103 120]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
