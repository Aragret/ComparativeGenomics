%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCGCUUCGGGGGGGGGGUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAAGAACCxxxxxxxxxxGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUCCCCCCCCCCUCCCCCGCAUC\
) } def
/len { sequence length } bind def

/coor [
[73.63806915 403.69586182]
[59.61612701 398.14285278]
[47.41617203 389.27651978]
[37.80509949 377.65423584]
[31.38707352 364.00653076]
[28.56553841 349.19134521]
[29.51785278 334.13995361]
[34.18415833 319.79852295]
[42.27112579 307.06857300]
[53.27040100 296.75030518]
[66.49055481 289.49234009]
[81.10057068 285.75088501]
[81.10057068 270.75088501]
[81.10057068 255.75090027]
[81.10057068 240.75090027]
[81.10057068 225.75090027]
[81.10057068 210.75090027]
[81.10057068 195.75090027]
[81.10057068 180.75090027]
[81.10057068 165.75090027]
[81.10057068 150.75090027]
[84.71586609 94.65425110]
[74.16384888 83.99334717]
[63.61183548 73.33243561]
[53.05981827 62.67152786]
[56.60423660 77.24674988]
[56.16039276 92.24018097]
[51.76000977 106.58021545]
[43.71758652 119.24195099]
[32.60793686 129.32041931]
[19.22507858 136.09530640]
[4.52551174 139.08241272]
[-10.44016266 138.06820679]
[-24.60232162 133.12521362]
[-36.94877243 124.60668945]
[-46.59709167 113.12148285]
[-52.85770035 99.49046326]
[-55.28313828 84.68785095]
[-53.70005798 69.77162170]
[-48.22160721 55.80786514]
[-39.23933411 43.79459000]
[-27.39521980 34.59040833]
[-13.53578568 28.85315514]
[1.34841418 26.99288559]
[16.19357872 29.14255333]
[29.93870163 35.14852142]
[41.59834290 44.57829666]
[36.46804047 30.48290825]
[31.33773613 16.38751984]
[26.20743370 2.29212976]
[21.07713318 -11.80325985]
[6.25212479 -9.26181698]
[-8.78842831 -9.40853596]
[-23.56103706 -12.23869991]
[-37.59082031 -17.66133118]
[-50.42678070 -25.50211334]
[-61.65629578 -35.50899887]
[-70.91838074 -47.36030960]
[-77.91530609 -60.67507172]
[-82.42213440 -75.02527618]
[-84.29399872 -89.94960785]
[-83.47073364 -104.96833038]
[-79.97879028 -119.59864807]
[-73.93041992 -133.37025452]
[-65.52006531 -145.84043884]
[-55.01808167 -156.60836792]
[-42.76205444 -165.32785034]
[-29.14597130 -171.71864319]
[-14.60753345 -175.57527161]
[0.38591129 -176.77375793]
[15.35238457 -175.27560425]
[29.81077576 -171.12896729]
[43.29630661 -164.46711731]
[55.37547684 -155.50422668]
[65.65998840 -144.52839661]
[73.81922913 -131.89248657]
[79.59092712 -118.00265503]
[82.78954315 -103.30541992]
[83.31224823 -88.27323914]
[81.14224243 -73.38932037]
[76.34928894 -59.13213730]
[69.08744812 -45.95999146]
[59.59016800 -34.29631042]
[48.16274261 -24.51603508]
[35.17252350 -16.93356133]
[40.30282211 -2.83817220]
[45.43312454 11.25721741]
[50.56342697 25.35260582]
[55.69372940 39.44799423]
[63.72072601 52.11951065]
[74.27274323 62.78042221]
[84.82476044 73.44132996]
[95.37677002 84.10224152]
[110.17485046 86.55516815]
[123.60230255 79.86908722]
[137.02975464 73.18301392]
[145.93434143 60.10560226]
[160.77613831 61.35871506]
[174.20359802 54.67264175]
[187.63104248 47.98656464]
[192.41523743 32.92379761]
[206.48738098 25.73003769]
[221.49873352 30.67321777]
[228.54330444 44.82063675]
[223.44169617 59.77888107]
[209.22059631 66.67349243]
[194.31712341 61.41401291]
[180.88966370 68.10009003]
[167.46221924 74.78616333]
[159.51805115 87.38534546]
[143.71582031 86.61046600]
[130.28837585 93.29653931]
[116.86092377 99.98261261]
[116.70693970 107.48103333]
[131.70378113 107.78900909]
[146.70060730 108.09699249]
[161.05863953 103.75563812]
[169.62435913 116.06938934]
[160.56021118 128.02101135]
[146.39263916 123.09382629]
[131.39579773 122.78585052]
[116.39896393 122.47787476]
[116.24497223 129.97628784]
[129.38659668 137.20799255]
[145.13305664 134.13737488]
[157.25764465 144.64328003]
[156.45942688 160.66645813]
[143.35070801 169.91531372]
[127.98739624 165.29490662]
[122.15489960 150.34962463]
[109.01326752 143.11791992]
[96.10057068 150.75090027]
[96.10057068 165.75090027]
[96.10057068 180.75090027]
[96.10057068 195.75090027]
[96.10057068 210.75090027]
[96.10057068 225.75090027]
[96.10057068 240.75090027]
[96.10057068 255.75090027]
[96.10057068 270.75088501]
[96.10057068 285.75088501]
[110.71058655 289.49234009]
[123.93074036 296.75030518]
[134.93002319 307.06857300]
[143.01698303 319.79852295]
[147.68328857 334.13995361]
[148.63560486 349.19134521]
[145.81407166 364.00653076]
[139.39604187 377.65423584]
[129.78497314 389.27651978]
[117.58501434 398.14285278]
[103.56307220 403.69586182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 93]
[23 92]
[24 91]
[25 90]
[47 89]
[48 88]
[49 87]
[50 86]
[51 85]
[94 113]
[95 112]
[96 111]
[98 109]
[99 108]
[100 107]
[123 131]
[124 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
