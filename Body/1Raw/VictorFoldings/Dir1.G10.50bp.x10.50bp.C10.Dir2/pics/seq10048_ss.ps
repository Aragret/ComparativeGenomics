%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCCGAGGGGGGGGGGUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUAxxxxxxxxxxGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCACCCCCCCCCCCAUCACUCGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 400.30899048]
[71.19830322 394.29296875]
[59.48964310 384.76354980]
[50.78712082 372.42788696]
[45.73651886 358.20138550]
[44.71262741 343.13967896]
[47.79142761 328.36053467]
[54.74444962 314.96060181]
[65.05573273 303.93426514]
[77.96011353 296.09976196]
[92.50000000 292.03845215]
[92.50000000 277.03845215]
[92.50000000 262.03845215]
[92.50000000 247.03845215]
[92.50000000 232.03845215]
[92.50000000 217.03845215]
[92.50000000 202.03845215]
[92.50000000 187.03845215]
[92.50000000 172.03845215]
[92.50000000 157.03845215]
[92.50000000 142.03845215]
[92.50000000 127.03845215]
[84.07894897 123.10514832]
[77.40474701 116.63677216]
[63.38803101 121.97828674]
[49.37131882 127.31979370]
[41.52473450 141.31303406]
[25.66949272 143.76066589]
[13.96837997 132.78507996]
[15.39748859 116.80580139]
[28.86052704 108.08077240]
[44.02980804 113.30308533]
[58.04652023 107.96157074]
[72.06323242 102.62005615]
[72.76831055 93.23517609]
[76.53691101 84.61132812]
[82.94507599 77.71868134]
[91.27188873 73.33264923]
[100.58060455 71.94664764]
[104.88818359 57.57846451]
[97.64965057 43.78566360]
[102.22283173 29.27564430]
[115.41677094 22.45980644]
[119.72434998 8.09162140]
[124.03193665 -6.27656269]
[112.58026886 -18.16092300]
[108.68830109 -34.10294724]
[113.32216644 -49.74766922]
[125.13211823 -60.87004471]
[140.84387207 -64.51593018]
[144.85160828 -78.97061920]
[148.85934448 -93.42530823]
[152.86708069 -107.87999725]
[138.90663147 -113.40608215]
[125.61264801 -120.38478851]
[113.13579559 -128.73704529]
[101.61743164 -138.36820984]
[91.18807220 -149.16915894]
[81.96588135 -161.01751709]
[74.05536652 -173.77900696]
[67.54615784 -187.30906677]
[62.51200104 -201.45436096]
[59.00994110 -216.05461121]
[57.07965851 -230.94441223]
[56.74303055 -245.95503235]
[58.00386429 -260.91641235]
[60.84787369 -275.65899658]
[65.24283600 -290.01574707]
[71.13896179 -303.82400513]
[78.46942902 -316.92727661]
[87.15118408 -329.17715454]
[97.08585358 -340.43478394]
[108.16087341 -350.57263184]
[120.25075531 -359.47583008]
[133.21850586 -367.04348755]
[146.91720581 -373.18984985]
[161.19161987 -377.84530640]
[175.88002014 -380.95709229]
[190.81596375 -382.48992920]
[205.83023071 -382.42645264]
[220.75267029 -380.76739502]
[235.41424561 -377.53155518]
[249.64878845 -372.75558472]
[263.29501343 -366.49362183]
[276.19833374 -358.81658936]
[288.21252441 -349.81152344]
[299.20141602 -339.58038330]
[309.04055786 -328.23916626]
[317.61843872 -315.91635132]
[324.83789062 -302.75152588]
[330.61703491 -288.89392090]
[334.89047241 -274.50051880]
[337.60974121 -259.73443604]
[338.74404907 -244.76293945]
[338.28051758 -229.75570679]
[336.22442627 -214.88275146]
[332.59906006 -200.31262207]
[327.44549561 -186.21038818]
[320.82211304 -172.73585510]
[312.80398560 -160.04170227]
[303.48196411 -148.27174377]
[292.96166992 -137.55934143]
[281.36227417 -128.02590942]
[268.81527710 -119.77943420]
[255.46276855 -112.91336823]
[241.45608521 -107.50550842]
[226.95391846 -103.61712646]
[212.12060547 -101.29228973]
[197.12420654 -100.55732727]
[182.13465881 -101.42057800]
[167.32177734 -103.87225342]
[163.31404114 -89.41756439]
[159.30628967 -74.96288300]
[155.29855347 -60.50819016]
[165.51429749 -51.39237595]
[170.81848145 -38.69809341]
[170.11853027 -24.89165688]
[163.49452209 -12.68234444]
[152.19456482 -4.49075842]
[138.40011597 -1.96897805]
[134.09252930 12.39920616]
[129.78495789 26.76738930]
[137.05297852 39.71773148]
[132.88916016 54.35047531]
[119.25637054 61.88604736]
[114.94878387 76.25423431]
[127.26029205 93.35139465]
[124.20276642 114.19696045]
[107.50000000 127.03845215]
[107.50000000 142.03845215]
[107.50000000 157.03845215]
[107.50000000 172.03845215]
[107.50000000 187.03845215]
[107.50000000 202.03845215]
[107.50000000 217.03845215]
[107.50000000 232.03845215]
[107.50000000 247.03845215]
[107.50000000 262.03845215]
[107.50000000 277.03845215]
[107.50000000 292.03845215]
[122.03988647 296.09976196]
[134.94427490 303.93426514]
[145.25555420 314.96060181]
[152.20857239 328.36053467]
[155.28736877 343.13967896]
[154.26348877 358.20138550]
[149.21287537 372.42788696]
[140.51036072 384.76354980]
[128.80169678 394.29296875]
[114.95575714 400.30899048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 34]
[25 33]
[26 32]
[39 126]
[40 125]
[43 122]
[44 121]
[45 120]
[50 114]
[51 113]
[52 112]
[53 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
