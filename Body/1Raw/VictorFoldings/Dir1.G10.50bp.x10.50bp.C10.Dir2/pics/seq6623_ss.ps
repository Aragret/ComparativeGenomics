%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUAUAAAACCCCCGGGGGGGGGGUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCAxxxxxxxxxxCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACCCCCCCCCCCAACAUAAAACCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.02166748 426.29403687]
[70.58479309 422.05456543]
[57.21125412 415.15927124]
[45.38450623 405.85742188]
[35.53207397 394.48526001]
[28.01011658 381.45388794]
[23.09054756 367.23440552]
[20.95120811 352.34078979]
[21.66943169 337.31146240]
[25.21925735 322.68969727]
[31.47235870 309.00411987]
[40.20269394 296.74942017]
[51.09466171 286.36859131]
[63.75452805 278.23690796]
[77.72463989 272.64831543]
[92.50000000 269.80484009]
[92.50000000 254.80485535]
[92.50000000 239.80485535]
[92.50000000 224.80485535]
[92.50000000 209.80485535]
[92.50000000 194.80485535]
[92.50000000 179.80485535]
[92.50000000 164.80485535]
[92.50000000 149.80485535]
[92.50000000 134.80485535]
[92.50000000 119.80485535]
[82.51576233 111.94921112]
[78.82360840 99.79338837]
[82.75224304 87.71191406]
[92.88785553 80.05258179]
[93.18053436 65.05543518]
[78.45581818 61.98640060]
[64.54949188 56.26536179]
[51.93459702 48.08851624]
[41.03996658 37.73556900]
[32.23563004 25.56017685]
[25.82024193 11.97785187]
[22.01096916 -2.54820657]
[20.93612671 -17.52291489]
[22.63085556 -32.43617630]
[27.03598404 -46.78025436]
[34.00008774 -60.06706619]
[43.28468704 -71.84477997]
[54.57243347 -81.71320343]
[67.47792816 -89.33733368]
[81.56091309 -94.45879364]
[96.34125519 -96.90452576]
[96.63393402 -111.90167236]
[96.92661285 -126.89881897]
[97.21928406 -141.89596558]
[97.51196289 -156.89311218]
[82.61095428 -158.72723389]
[67.97751617 -162.08380127]
[53.76676941 -166.92721558]
[40.12935638 -173.20614624]
[27.20984268 -180.85403442]
[15.14517784 -189.78979492]
[4.06325817 -199.91871643]
[-5.91844368 -211.13342285]
[-14.69411469 -223.31503296]
[-22.17072868 -236.33441162]
[-28.26902962 -250.05355835]
[-32.92436981 -264.32702637]
[-36.08740616 -279.00350952]
[-37.72460175 -293.92742920]
[-37.81860352 -308.94061279]
[-36.36841583 -323.88385010]
[-33.38941193 -338.59881592]
[-28.91316986 -352.92944336]
[-22.98714066 -366.72387695]
[-15.67414379 -379.83584595]
[-7.05170059 -392.12640381]
[2.78878570 -403.46520996]
[13.74300098 -413.73211670]
[25.69482422 -422.81826782]
[38.51755905 -430.62731934]
[52.07527542 -437.07653809]
[66.22425842 -442.09753418]
[80.81451416 -445.63708496]
[95.69139099 -447.65765381]
[110.69716644 -448.13781738]
[125.67279053 -447.07254028]
[140.45950317 -444.47308350]
[154.90054321 -440.36697388]
[168.84286499 -434.79776001]
[182.13862610 -427.82449341]
[194.64692688 -419.52108765]
[206.23513794 -409.97555542]
[216.78044128 -399.28906250]
[226.17103577 -387.57495117]
[234.30738831 -374.95733643]
[241.10324097 -361.57003784]
[246.48654175 -347.55490112]
[250.40025330 -333.06051636]
[252.80287170 -318.24053955]
[253.66893005 -303.25207520]
[252.98924255 -288.25402832]
[250.77102661 -273.40533447]
[247.03778076 -258.86343384]
[241.82908630 -244.78245544]
[235.20016479 -231.31170654]
[227.22126770 -218.59394836]
[217.97700500 -206.76400757]
[207.56535339 -195.94728088]
[196.09667969 -186.25843811]
[183.69256592 -177.80020142]
[170.48449707 -170.66220093]
[156.61248779 -164.92013550]
[142.22358704 -160.63484192]
[127.47032928 -157.85177612]
[112.50910950 -156.60043335]
[112.21643066 -141.60328674]
[111.92375183 -126.60614014]
[111.63108063 -111.60899353]
[111.33840179 -96.61185455]
[126.01206970 -93.59130859]
[139.88450623 -87.92428589]
[152.48271179 -79.80243683]
[163.37684631 -69.50112915]
[172.19485474 -57.37012863]
[178.63525391 -43.82172394]
[182.47737122 -29.31669426]
[183.58895874 -14.34866810]
[181.93067932 0.57270247]
[177.55755615 14.93907833]
[170.61712646 28.26075745]
[161.34445190 40.08337021]
[150.05418396 50.00336456]
[137.12986755 57.68180084]
[123.01091766 62.85591125]
[108.17767334 65.34810638]
[107.88500214 80.34525299]
[119.58779907 91.95014191]
[119.42700195 108.43051910]
[107.50000000 119.80485535]
[107.50000000 134.80485535]
[107.50000000 149.80485535]
[107.50000000 164.80485535]
[107.50000000 179.80485535]
[107.50000000 194.80485535]
[107.50000000 209.80485535]
[107.50000000 224.80485535]
[107.50000000 239.80485535]
[107.50000000 254.80485535]
[107.50000000 269.80484009]
[122.27536011 272.64831543]
[136.24546814 278.23690796]
[148.90533447 286.36859131]
[159.79730225 296.74942017]
[168.52763367 309.00411987]
[174.78074646 322.68969727]
[178.33056641 337.31146240]
[179.04879761 352.34078979]
[176.90945435 367.23440552]
[171.98988342 381.45388794]
[164.46792603 394.48526001]
[154.61549377 405.85742188]
[142.78874207 415.15927124]
[129.41520691 422.05456543]
[114.97833252 426.29403687]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[30 132]
[31 131]
[47 115]
[48 114]
[49 113]
[50 112]
[51 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
