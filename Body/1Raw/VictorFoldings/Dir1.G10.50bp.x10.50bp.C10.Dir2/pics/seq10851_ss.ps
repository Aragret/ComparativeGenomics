%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCCUAGGGGGGGGGGGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCxxxxxxxxxxUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCCCCCCCCCCCACCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[77.10018921 386.26916504]
[63.25424957 380.25314331]
[51.54558945 370.72372437]
[42.84306335 358.38806152]
[37.79246140 344.16152954]
[36.76856995 329.09985352]
[39.84737015 314.32070923]
[46.80039215 300.92077637]
[57.11167526 289.89443970]
[70.01605225 282.05993652]
[84.55594635 277.99862671]
[84.55594635 262.99862671]
[84.55594635 247.99861145]
[84.55594635 232.99861145]
[84.55594635 217.99861145]
[84.55594635 202.99861145]
[84.55594635 187.99861145]
[84.55594635 172.99861145]
[84.55594635 157.99861145]
[84.55594635 142.99861145]
[71.46279144 135.67951965]
[58.68543243 143.53694153]
[51.36309814 158.21057129]
[34.97999573 158.93583679]
[26.38965607 144.96665955]
[34.42908478 130.67330933]
[50.82800674 130.75958252]
[63.60536194 122.90215302]
[60.57456207 91.29489136]
[79.48635864 68.31102753]
[73.99932861 54.35063934]
[68.51229858 40.39024734]
[63.02526855 26.42985916]
[57.53823471 12.46946812]
[43.11314774 14.55496502]
[28.59430695 13.36490250]
[14.71571445 8.96282196]
[2.17824912 1.57456231]
[-8.38572788 -8.42332268]
[-16.44426537 -20.52275658]
[-21.59261322 -34.10995483]
[-23.57354355 -48.49656677]
[-22.29020882 -62.95454025]
[-17.81086349 -76.75298309]
[-10.36524773 -89.19507599]
[-0.33280393 -99.65332031]
[11.77665806 -107.60111237]
[6.58124256 -121.67263031]
[1.38582683 -135.74415588]
[-3.80958867 -149.81567383]
[-18.62268829 -147.20571899]
[-33.66375732 -147.28289795]
[-48.44929504 -150.04472351]
[-62.50399780 -155.40243530]
[-75.37607574 -163.18379211]
[-86.65173340 -173.13865662]
[-95.96851349 -184.94700623]
[-103.02691650 -198.22927856]
[-107.60004425 -212.55848694]
[-109.54089355 -227.47401428]
[-108.78707123 -242.49638367]
[-105.36280823 -257.14270020]
[-99.37818146 -270.94210815]
[-91.02556610 -283.45104980]
[-80.57347870 -294.26739502]
[-68.35789490 -303.04348755]
[-54.77150345 -309.49713135]
[-40.25105286 -313.42092896]
[-25.26330948 -314.68875122]
[-10.29006958 -313.25979614]
[4.18733883 -309.18005371]
[17.70352745 -302.58062744]
[29.82400513 -293.67367554]
[40.15914917 -282.74551392]
[48.37673187 -270.14746094]
[54.21258545 -256.28445435]
[57.47911453 -241.60217285]
[58.07131195 -226.57257080]
[55.97014618 -211.67878723]
[51.24315643 -197.39958191]
[44.04229355 -184.19400024]
[34.59904099 -172.48654175]
[23.21695709 -162.65353394]
[10.26193047 -155.01109314]
[15.45734596 -140.93957520]
[20.65276146 -126.86804962]
[25.84817696 -112.79653168]
[41.20353699 -114.63159180]
[56.56235886 -112.75260162]
[71.03876495 -107.26377106]
[83.79677582 -98.47762299]
[94.09858704 -86.89721680]
[101.34724426 -73.18735504]
[105.12122345 -58.13642120]
[105.19893646 -42.61103058]
[101.57175446 -27.50613022]
[94.44473267 -13.69343376]
[84.22502899 -1.97108650]
[71.49862671 6.98243666]
[76.98565674 20.94282722]
[82.47268677 34.90321732]
[87.95971680 48.86360550]
[93.44675446 62.82399750]
[100.89824677 62.26151276]
[108.31453705 63.17787552]
[115.40501404 65.53717804]
[121.89181519 69.24697113]
[127.52074432 74.16187286]
[132.07122803 80.08928680]
[135.36494446 86.79693604]
[137.27282715 94.02196503]
[137.72010803 101.48126221]
[152.29280090 105.03602600]
[166.86550903 108.59078217]
[181.43821716 112.14554596]
[193.93443298 102.74456787]
[209.54710388 103.62704468]
[220.90437317 114.37628937]
[222.64370728 129.91683960]
[213.94384766 142.91091919]
[198.91258240 147.22312927]
[184.64723206 140.81736755]
[177.88345337 126.71825409]
[163.31074524 123.16349030]
[148.73803711 119.60872650]
[134.16534424 116.05396271]
[130.46864319 124.02216339]
[124.89537048 131.11643982]
[117.65800476 136.89204407]
[109.07474518 140.95727539]
[99.55594635 142.99861145]
[99.55594635 157.99861145]
[99.55594635 172.99861145]
[99.55594635 187.99861145]
[99.55594635 202.99861145]
[99.55594635 217.99861145]
[99.55594635 232.99861145]
[99.55594635 247.99861145]
[99.55594635 262.99862671]
[99.55594635 277.99862671]
[114.09583282 282.05993652]
[127.00021362 289.89443970]
[137.31149292 300.92077637]
[144.26451111 314.32070923]
[147.34332275 329.09985352]
[146.31942749 344.16152954]
[141.26882935 358.38806152]
[132.56629944 370.72372437]
[120.85763550 380.25314331]
[107.01169586 386.26916504]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 28]
[22 27]
[30 103]
[31 102]
[32 101]
[33 100]
[34 99]
[47 87]
[48 86]
[49 85]
[50 84]
[112 126]
[113 125]
[114 124]
[115 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
