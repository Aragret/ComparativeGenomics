%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAACUAAUGGGGGGGGGGCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAxxxxxxxxxxAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAACCCCCCCCCCUAAAAGUAAU\
) } def
/len { sequence length } bind def

/coor [
[81.16712189 341.84011841]
[67.94692993 334.56765747]
[57.06012344 324.12063599]
[49.24899292 311.21139526]
[45.04611206 296.72006226]
[44.73804092 281.63473511]
[48.34577942 266.98391724]
[55.62335205 253.76652527]
[66.07456207 242.88375854]
[78.98682404 235.07760620]
[93.47975922 230.88032532]
[93.16770172 215.88357544]
[92.85564423 200.88681030]
[92.54359436 185.89006042]
[92.23153687 170.89331055]
[91.91947937 155.89656067]
[91.60742188 140.89979553]
[91.29536438 125.90304565]
[90.98330688 110.90629578]
[84.07630920 97.59114075]
[71.99632263 88.69879150]
[59.82448578 79.93257904]
[47.56211853 71.29346466]
[37.67993164 82.59656525]
[26.67036819 92.80476379]
[14.65405464 101.80620575]
[1.76264906 109.50226593]
[-11.86260414 115.80862427]
[-26.07241821 120.65618896]
[-40.71110535 123.99184418]
[-55.61827087 125.77904510]
[-70.63059235 125.99820709]
[-85.58357239 124.64692688]
[-100.31339264 121.74001312]
[-114.65866089 117.30931854]
[-128.46218872 111.40338135]
[-141.57276917 104.08691406]
[-153.84672546 95.44007874]
[-165.14958191 85.55761719]
[-175.35751343 74.54780579]
[-184.35865784 62.53127670]
[-192.05439758 49.63968277]
[-198.36042786 36.01427460]
[-203.20765686 21.80434418]
[-206.54295349 7.16557741]
[-208.32978821 -7.74163294]
[-208.54858398 -22.75395584]
[-207.19694519 -37.70690918]
[-204.28967285 -52.43665695]
[-199.85862732 -66.78181458]
[-193.95236206 -80.58520508]
[-186.63557434 -93.69560242]
[-177.98843384 -105.96934509]
[-168.10569763 -117.27196503]
[-157.09564209 -127.47962189]
[-145.07888794 -136.48048401]
[-132.18711853 -144.17591858]
[-118.56155396 -150.48161316]
[-104.35150909 -155.32849121]
[-89.71266174 -158.66343689]
[-74.80540466 -160.44990540]
[-59.79307556 -160.66833496]
[-44.84015656 -159.31632996]
[-30.11047935 -156.40870667]
[-15.76542950 -151.97731018]
[-1.96217930 -146.07070923]
[11.14803505 -138.75360107]
[23.42156982 -130.10617065]
[34.72394943 -120.22315979]
[44.93134308 -109.21285248]
[53.93190765 -97.19588470]
[61.62702942 -84.30391693]
[67.93239594 -70.67820740]
[72.77892303 -56.46804047]
[76.11351776 -41.82910919]
[77.89962769 -26.92181396]
[78.11769104 -11.90948009]
[76.76532745 3.04340601]
[73.85733795 17.77301407]
[69.42559814 32.11795425]
[63.51865768 45.92106247]
[56.20123291 59.03109741]
[68.46360016 67.67021179]
[75.79044342 68.95983124]
[80.88867188 76.61880493]
[92.96865845 85.51115417]
[87.63259125 71.49236298]
[93.07457733 57.51435089]
[106.48490143 50.79399109]
[120.93978119 54.80102158]
[128.97613525 67.46660614]
[126.44478607 82.25146484]
[114.65069580 91.52275848]
[129.58500671 90.12046051]
[144.51930237 88.71815491]
[159.45361328 87.31584930]
[169.51948547 75.42820740]
[184.68496704 74.21881866]
[195.95599365 83.88834381]
[210.89030457 82.48604584]
[216.58245850 78.92137146]
[222.34638977 78.83008575]
[226.47300720 81.34932709]
[241.45271301 80.56948090]
[254.83197021 72.12517548]
[267.94427490 79.19033051]
[282.92401123 78.41048431]
[297.90371704 77.63063812]
[312.88342285 76.85079193]
[327.86315918 76.07094574]
[343.36651611 69.20931244]
[354.25173950 82.20731354]
[344.77505493 96.26535034]
[328.64300537 91.05065918]
[313.66326904 91.83050537]
[298.68356323 92.61035156]
[283.70385742 93.39019775]
[268.72412109 94.17004395]
[256.41632080 102.55856323]
[242.23255920 95.54919434]
[227.25285339 96.32904053]
[212.29260254 97.42034912]
[197.35829163 98.82265472]
[188.08432007 110.42131805]
[172.95878601 112.05619812]
[160.85592651 102.25016022]
[145.92161560 103.65245819]
[130.98730469 105.05476379]
[116.05299377 106.45706940]
[111.08044434 109.71190643]
[105.98006439 110.59423828]
[106.29212189 125.59099579]
[106.60417938 140.58775330]
[106.91622925 155.58450317]
[107.22828674 170.58125305]
[107.54034424 185.57800293]
[107.85240173 200.57476807]
[108.16445923 215.57151794]
[108.47651672 230.56826782]
[123.13150787 234.15904236]
[136.35731506 241.42129517]
[147.25218201 251.85989380]
[155.07327271 264.76309204]
[159.28735352 279.25115967]
[159.60707092 294.33627319]
[156.01065063 308.98986816]
[148.74328613 322.21286011]
[138.30047607 333.10369873]
[125.39424896 340.91983032]
[110.90455627 345.12829590]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 86]
[21 85]
[22 83]
[23 82]
[93 129]
[94 128]
[95 127]
[96 126]
[99 123]
[100 122]
[103 121]
[104 120]
[106 118]
[107 117]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
