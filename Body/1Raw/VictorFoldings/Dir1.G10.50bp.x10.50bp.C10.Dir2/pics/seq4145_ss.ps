%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACCACGGGGGGGGGGUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACAxxxxxxxxxxGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCCCUCCCCAC\
) } def
/len { sequence length } bind def

/coor [
[86.59700012 428.05203247]
[73.37680054 420.77957153]
[62.48999786 410.33255005]
[54.67886734 397.42330933]
[50.47598648 382.93200684]
[50.16791534 367.84664917]
[53.77565384 353.19583130]
[61.05322647 339.97845459]
[71.50443268 329.09567261]
[84.41669464 321.28955078]
[98.90963745 317.09225464]
[98.59757996 302.09548950]
[98.28552246 287.09875488]
[97.97346497 272.10198975]
[97.66140747 257.10522461]
[97.34934998 242.10847473]
[97.03730011 227.11172485]
[96.72524261 212.11497498]
[96.41318512 197.11822510]
[96.10112762 182.12145996]
[95.78907013 167.12471008]
[81.84686279 155.33436584]
[80.86801910 136.78337097]
[93.93105316 123.13213348]
[92.99542999 108.16134644]
[87.80001068 94.08982849]
[78.78247833 82.10298920]
[66.10430145 79.51116180]
[58.84518433 69.28745270]
[60.47122574 57.25984573]
[51.70501709 45.08800888]
[42.93880844 32.91617203]
[34.17260361 20.74433708]
[25.40639496 8.57249928]
[16.64018822 -3.59933710]
[7.87398148 -15.77117443]
[-5.31764269 -8.58895302]
[-19.30543518 -3.11676288]
[-33.86878967 0.55909348]
[-48.77802277 2.38064194]
[-63.79799271 2.31915426]
[-78.69181061 0.37559989]
[-93.22457886 -3.41936827]
[-107.16710663 -9.00589848]
[-120.29948425 -16.29588318]
[-132.41459656 -25.17434692]
[-143.32138062 -35.50126648]
[-152.84782410 -47.11376953]
[-160.84367371 -59.82870865]
[-167.18281555 -73.44555664]
[-171.76527405 -87.74954987]
[-174.51879883 -102.51509857]
[-175.39993286 -117.50932312]
[-174.39480591 -132.49574280]
[-171.51924133 -147.23802185]
[-166.81861877 -161.50361633]
[-160.36706543 -175.06756592]
[-152.26632690 -187.71592712]
[-142.64414978 -199.24923706]
[-131.65232849 -209.48559570]
[-119.46417999 -218.26353455]
[-106.27194977 -225.44465637]
[-92.28369904 -230.91566467]
[-77.72003174 -234.59028625]
[-62.81064987 -236.41058350]
[-47.79068375 -236.34783936]
[-32.89702988 -234.40303040]
[-18.36457825 -230.60684204]
[-4.42252588 -225.01913452]
[8.70923901 -217.72804260]
[20.82361031 -208.84855652]
[31.72952652 -198.52072144]
[41.25498581 -186.90740967]
[49.24975967 -174.19180298]
[55.58775711 -160.57441711]
[60.16901779 -146.27005005]
[62.92129135 -131.50425720]
[63.80117035 -116.50996399]
[62.79477310 -101.52362061]
[59.91797638 -86.78160095]
[55.21615219 -72.51639557]
[48.76345444 -58.95299149]
[40.66164780 -46.30530548]
[31.03851128 -34.77280807]
[20.04581833 -24.53738213]
[28.81202507 -12.36554432]
[37.57823181 -0.19370757]
[46.34444046 11.97812939]
[55.11064529 24.14996529]
[63.87685394 36.32180405]
[72.64305878 48.49364090]
[88.99522400 54.78703308]
[90.76931000 73.08546448]
[99.78684235 85.07229614]
[98.45685577 70.13137054]
[100.20326996 55.23338699]
[104.95260620 41.00511169]
[112.50506592 28.04515839]
[122.54289246 16.89876747]
[134.64378357 8.03488636]
[148.29864502 1.82643139]
[162.93298340 -1.46539879]
[177.93110657 -1.70211148]
[192.66204834 1.12625182]
[206.50602722 6.90069771]
[218.88061523 15.37828732]
[229.26519775 26.20235443]
[237.22286987 38.91751480]
[242.41886902 52.98882294]
[244.63455200 67.82427979]
[243.77673340 82.79972839]
[239.88148499 97.28514099]
[233.11268616 110.67108154]
[223.75512695 122.39438629]
[212.20248413 131.96185303]
[198.94078064 138.97094727]
[184.52796936 143.12678528]
[169.57043457 144.25453186]
[154.69743347 142.30674744]
[140.53469849 137.36535645]
[127.67810059 129.63827515]
[116.66852570 119.45058441]
[107.96621704 107.22571564]
[108.90184784 122.19651031]
[119.23942566 128.22206116]
[125.29651642 138.40148926]
[125.65351868 150.12097168]
[120.33742523 160.43634033]
[110.78582764 166.81265259]
[111.09788513 181.80941772]
[111.40993500 196.80616760]
[111.72199249 211.80291748]
[112.03404999 226.79966736]
[112.34610748 241.79643250]
[112.65816498 256.79318237]
[112.97022247 271.78994751]
[113.28227234 286.78668213]
[113.59432983 301.78344727]
[113.90638733 316.78018188]
[128.56138611 320.37097168]
[141.78718567 327.63320923]
[152.68205261 338.07180786]
[160.50315857 350.97503662]
[164.71722412 365.46310425]
[165.03694153 380.54818726]
[161.44052124 395.20178223]
[154.17315674 408.42480469]
[143.73036194 419.31564331]
[130.82412720 427.13174438]
[116.33443451 431.34020996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 124]
[25 123]
[26 94]
[27 93]
[30 91]
[31 90]
[32 89]
[33 88]
[34 87]
[35 86]
[36 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
