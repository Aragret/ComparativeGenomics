%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACUACUAUCGGGGGGGGGGUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCxxxxxxxxxxCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCCCCCCCCCCCUAUUACUAUC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 394.74133301]
[70.75619507 389.93188477]
[57.85220718 382.16650391]
[46.91955185 371.80834961]
[38.46956635 359.34191895]
[32.89747238 345.35028076]
[30.46388245 330.48785400]
[31.28262329 315.44979858]
[35.31539917 300.93942261]
[42.37359238 287.63543701]
[52.12707901 276.16009521]
[64.11966705 267.05010986]
[77.79044342 260.73156738]
[92.50000000 257.50000000]
[92.50000000 242.50000000]
[92.50000000 227.50000000]
[92.50000000 212.50000000]
[92.50000000 197.50000000]
[92.50000000 182.50000000]
[92.50000000 167.50000000]
[92.50000000 152.50000000]
[92.50000000 137.50000000]
[92.50000000 122.50000000]
[92.50000000 107.50000000]
[91.74993134 92.51876831]
[90.25167084 77.59378052]
[88.75341797 62.66879272]
[77.65203857 48.00974274]
[85.41583252 32.29816437]
[83.61923981 17.40614319]
[81.82265472 2.51412272]
[66.83544922 3.26804018]
[51.83215714 2.97466183]
[36.88588333 1.63541687]
[22.06943703 -0.74317008]
[7.45500755 -4.14951038]
[-6.88620710 -8.56700897]
[-20.88433647 -13.97414303]
[-34.47118378 -20.34457016]
[-47.58055115 -27.64725494]
[-60.14857101 -35.84661865]
[-72.11402130 -44.90270996]
[-83.41859436 -54.77141571]
[-94.00721741 -65.40465546]
[-103.82831573 -76.75061035]
[-112.83402252 -88.75402832]
[-120.98047638 -101.35640717]
[-128.22798157 -114.49636078]
[-134.54124451 -128.10986328]
[-139.88948059 -142.13059998]
[-144.24664307 -156.49026489]
[-147.59152222 -171.11888123]
[-149.90779114 -185.94519043]
[-151.18418884 -200.89697266]
[-151.41450500 -215.90135193]
[-150.59757996 -230.88526917]
[-148.73742676 -245.77568054]
[-145.84309387 -260.50006104]
[-141.92868042 -274.98669434]
[-137.01327515 -289.16494751]
[-131.12080383 -302.96582031]
[-124.27998352 -316.32202148]
[-116.52414703 -329.16848755]
[-107.89106750 -341.44262695]
[-98.42282104 -353.08465576]
[-88.16551971 -364.03784180]
[-77.16915131 -374.24887085]
[-65.48728180 -383.66790771]
[-53.17682648 -392.24914551]
[-40.29775620 -399.95071411]
[-26.91282463 -406.73513794]
[-13.08723927 -412.56933594]
[1.11164320 -417.42489624]
[15.61464596 -421.27816772]
[30.35111046 -424.11035156]
[45.24924469 -425.90768433]
[60.23645782 -426.66137695]
[75.23974609 -426.36779785]
[90.18599701 -425.02832031]
[105.00241089 -422.64953613]
[119.61679077 -419.24298096]
[133.95794678 -414.82528687]
[147.95599365 -409.41793823]
[161.54275513 -403.04733276]
[174.65200806 -395.74444580]
[187.21992493 -387.54492188]
[199.18522644 -378.48864746]
[210.48966980 -368.61978149]
[221.07814026 -357.98638916]
[230.89907837 -346.64028931]
[239.90461731 -334.63674927]
[248.05088806 -322.03424072]
[255.29820251 -308.89419556]
[261.61126709 -295.28057861]
[266.95928955 -281.25976562]
[271.31625366 -266.90005493]
[274.66091919 -252.27139282]
[276.97698975 -237.44503784]
[278.25317383 -222.49325562]
[278.48327637 -207.48886108]
[277.66613770 -192.50495911]
[275.80575562 -177.61457825]
[272.91122437 -162.89022827]
[268.99661255 -148.40367126]
[264.08099365 -134.22546387]
[258.18832397 -120.42469788]
[251.34732056 -107.06859589]
[243.59129333 -94.22224426]
[234.95803833 -81.94821930]
[225.48962402 -70.30632019]
[215.23216248 -59.35326767]
[204.23565674 -49.14242172]
[192.55364990 -39.72353363]
[180.24305725 -31.14248848]
[167.36389160 -23.44109154]
[153.97885132 -16.65686607]
[140.15318298 -10.82286358]
[125.95423889 -5.96750641]
[111.45117950 -2.11445022]
[96.71467590 0.71753329]
[98.51126099 15.60955334]
[100.30785370 30.50157356]
[109.64825439 38.24317169]
[111.23828888 50.67504883]
[103.67840576 61.17053604]
[105.17665863 76.09552002]
[106.67491913 91.02050781]
[118.25296021 81.48379517]
[132.96896362 84.38881683]
[140.05451965 97.60982513]
[134.32475281 111.47235870]
[119.97244263 115.83251953]
[107.50000000 107.50000000]
[107.50000000 122.50000000]
[107.50000000 137.50000000]
[107.50000000 152.50000000]
[107.50000000 167.50000000]
[107.50000000 182.50000000]
[107.50000000 197.50000000]
[107.50000000 212.50000000]
[107.50000000 227.50000000]
[107.50000000 242.50000000]
[107.50000000 257.50000000]
[122.20955658 260.73156738]
[135.88034058 267.05010986]
[147.87292480 276.16009521]
[157.62640381 287.63543701]
[164.68460083 300.93942261]
[168.71737671 315.44979858]
[169.53611755 330.48785400]
[167.10252380 345.35028076]
[161.53042603 359.34191895]
[153.08044434 371.80834961]
[142.14779663 382.16650391]
[129.24380493 389.93188477]
[114.97203827 394.74133301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 127]
[26 126]
[27 125]
[29 122]
[30 121]
[31 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
