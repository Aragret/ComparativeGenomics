%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAGGCACCCCUGGGGGGGGGGCUGACAUCCGGCCUGCUUCUUCUCACAUGACAAAAACUAGCCCCCAUCUCxxxxxxxxxxGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCCCCCCCCCCCACAAGGCACACCU\
) } def
/len { sequence length } bind def

/coor [
[81.93067169 403.05239868]
[67.91593170 397.56848145]
[55.24050903 389.45553589]
[44.39160919 379.02539062]
[35.78623581 366.67898560]
[29.75515175 352.89086914]
[26.53018188 338.19100952]
[26.23528290 323.14443970]
[28.88179016 308.32949829]
[34.36797714 294.31567383]
[42.48297501 281.64154053]
[52.91485977 270.79434204]
[65.26265717 262.19094849]
[79.05175781 256.16210938]
[93.75213623 252.93951416]
[93.45577240 237.94244385]
[93.15941620 222.94537354]
[92.86306000 207.94830322]
[92.56670380 192.95123291]
[92.27034760 177.95416260]
[91.97399139 162.95709229]
[91.67763519 147.96002197]
[91.38127136 132.96293640]
[91.08491516 117.96587372]
[85.12243652 109.11035919]
[85.16641998 99.83290100]
[89.72197723 93.38330841]
[81.34227753 80.94222260]
[66.45710754 83.89305115]
[51.61620712 80.92813110]
[39.07499695 72.52982330]
[30.72722816 60.00375366]
[27.81905937 45.27597427]
[30.76309967 30.59680557]
[39.08018875 18.19699478]
[30.70048714 5.75590992]
[22.32078552 -6.68517494]
[13.94108486 -19.12626076]
[2.77410269 -29.14117432]
[-10.50243664 -36.12211227]
[-23.77897644 -43.10305405]
[-34.14045715 -32.12387848]
[-47.08044815 -24.34832764]
[-61.63871384 -20.35339165]
[-76.73493195 -20.43552589]
[-91.24887085 -24.58863449]
[-104.10348511 -32.50452805]
[-114.34488678 -43.59579468]
[-121.21309662 -57.03939056]
[-124.19844818 -71.83770752]
[-123.07940674 -86.89262390]
[-117.93901062 -101.08694458]
[-109.15871429 -113.36737823]
[-97.39006805 -122.82261658]
[-83.50639343 -128.75103760]
[-68.53794098 -130.71269226]
[-53.59547806 -128.56202698]
[-39.78783035 -122.45863342]
[-28.13961792 -112.85541534]
[-19.51521492 -100.46500397]
[-14.55460930 -86.20685577]
[-13.62591171 -71.13899994]
[-16.79803658 -56.37959290]
[-3.52149749 -49.39865112]
[9.75504208 -42.41771317]
[1.85253465 -55.16724014]
[-2.95608783 -69.37558746]
[-4.42077112 -84.30390930]
[-2.46535015 -99.17590332]
[2.80849123 -113.21821594]
[11.12650585 -125.70063019]
[22.05614662 -135.97404480]
[35.02906036 -143.50421143]
[49.37063599 -147.89958191]
[64.33509064 -148.93156433]
[79.14426422 -146.54650879]
[93.02804565 -140.86843872]
[105.26447296 -132.19262695]
[115.21723938 -120.97021484]
[122.36877441 -107.78478241]
[126.34719086 -93.32199860]
[126.94561768 -78.33393860]
[124.13293457 -63.60000610]
[118.05538940 -49.88638306]
[109.02903748 -37.90619278]
[97.52325439 -28.28242111]
[84.13636017 -21.51551819]
[69.56448364 -17.95737076]
[54.56538010 -17.79300690]
[39.91902924 -21.03097534]
[26.38216972 -27.50596237]
[34.76187134 -15.06487656]
[43.14157486 -2.62379146]
[51.52127457 9.81729412]
[66.13784027 6.77012348]
[80.84732819 9.55874920]
[93.40243530 17.78882408]
[101.87288666 30.23225594]
[104.94218445 45.01038361]
[102.11212158 59.87758636]
[93.78336334 72.56251526]
[102.16306305 85.00360107]
[115.57493591 91.72087097]
[130.55664062 90.98023224]
[145.53834534 90.23959351]
[160.52005005 89.49895477]
[175.50175476 88.75830841]
[162.67141724 80.98768616]
[154.02284241 68.73198700]
[151.00140381 54.03944397]
[154.11206055 39.36552429]
[162.83493042 27.16259956]
[175.71223450 19.47006989]
[190.59185791 17.57353973]
[204.98706055 21.78996658]
[216.49205017 31.41468430]
[223.18408203 44.83917236]
[223.94473267 59.81987000]
[218.64689636 73.85314941]
[208.17597961 84.59371185]
[194.28524780 90.24594116]
[208.96359253 93.33561707]
[224.37336731 87.72570038]
[236.76095581 98.47184753]
[233.38307190 114.51934052]
[217.71459961 119.35989380]
[205.87391663 108.01396942]
[191.19557190 104.92428589]
[176.24238586 103.74001312]
[161.26068115 104.48065948]
[146.27899170 105.22129822]
[131.29728699 105.96193695]
[116.31557465 106.70257568]
[106.08198547 117.66950989]
[106.37834930 132.66658020]
[106.67470551 147.66365051]
[106.97106171 162.66073608]
[107.26741791 177.65780640]
[107.56377411 192.65487671]
[107.86013031 207.65194702]
[108.15649414 222.64901733]
[108.45285034 237.64608765]
[108.74920654 252.64315796]
[123.56542206 255.28247070]
[137.58193970 260.76187134]
[150.25997925 268.87069702]
[161.11225891 279.29730225]
[169.72163391 291.64093018]
[175.75717163 305.42709351]
[178.98690796 320.12591553]
[179.28666687 335.17239380]
[176.64495850 349.98818970]
[171.16331482 364.00381470]
[163.05241394 376.68054199]
[152.62403870 387.53112793]
[140.27903748 396.13848877]
[126.49188995 402.17181396]
[111.79255676 405.39916992]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[27 102]
[28 101]
[35 94]
[36 93]
[37 92]
[38 91]
[39 65]
[40 64]
[41 63]
[103 133]
[104 132]
[105 131]
[106 130]
[107 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
