%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAUAUCAAGGGGGGGGGGCAAUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGxxxxxxxxxxAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAACCCCCCCCCCUCCACAUCAA\
) } def
/len { sequence length } bind def

/coor [
[77.70748138 483.62255859]
[63.86154175 477.60653687]
[52.15287781 468.07711792]
[43.45035553 455.74145508]
[38.39975357 441.51492310]
[37.37586212 426.45324707]
[40.45465851 411.67407227]
[47.40768051 398.27416992]
[57.71896744 387.24783325]
[70.62334442 379.41329956]
[85.16323090 375.35198975]
[85.16323090 360.35198975]
[85.16323090 345.35198975]
[85.16323090 330.35198975]
[85.16323090 315.35198975]
[85.16323090 300.35198975]
[85.16323090 285.35198975]
[85.16323090 270.35198975]
[85.16323090 255.35200500]
[85.16323090 240.35200500]
[76.12549591 235.25506592]
[69.99893188 226.78071594]
[67.96075439 216.44155884]
[70.45085144 206.11837769]
[77.07899475 197.71803284]
[86.68432617 192.82127380]
[87.61994934 177.85047913]
[88.55558014 162.87968445]
[89.49121094 147.90888977]
[90.42683411 132.93809509]
[91.36246490 117.96730804]
[79.61424255 110.54637146]
[74.39608002 95.66204834]
[59.41636658 96.44189453]
[45.96181488 105.81777191]
[31.23171425 98.60971069]
[30.37912941 82.23274231]
[44.28112411 73.53408813]
[58.63652039 81.46218109]
[73.61623383 80.68233490]
[85.01725769 70.93468475]
[88.11557770 56.25815964]
[91.21389771 41.58163452]
[94.31221771 26.90510750]
[96.17983246 12.02182770]
[96.80381012 -2.96518874]
[97.42778778 -17.95220566]
[94.64450836 -26.72176743]
[98.22386169 -33.24357224]
[99.15948486 -48.21436310]
[100.09511566 -63.18515396]
[94.60808563 -77.14554596]
[83.72925568 -87.47274780]
[67.71878052 -88.49463654]
[58.65387344 -101.73120880]
[63.48835373 -117.02851105]
[78.51361847 -122.65175629]
[92.20358276 -114.28726959]
[94.05646515 -98.35157013]
[104.93528748 -88.02436829]
[112.93170166 -98.72589874]
[124.38356018 -102.99729156]
[126.25117493 -117.88056946]
[128.11878967 -132.76385498]
[129.98640442 -147.64712524]
[131.85401917 -162.53041077]
[133.72163391 -177.41368103]
[135.58924866 -192.29696655]
[121.73275757 -198.31147766]
[110.13291931 -207.98725891]
[101.73008728 -220.53990173]
[97.20542908 -234.95185852]
[96.92575073 -250.05477905]
[100.91371918 -264.62435913]
[108.84604645 -277.47952271]
[120.07968903 -287.57812500]
[133.70399475 -294.10153198]
[148.61450195 -296.52093506]
[163.60247803 -294.64016724]
[177.45292664 -288.61175537]
[189.04302979 -278.92431641]
[197.43325806 -266.36325073]
[201.94342041 -251.94676208]
[202.20793152 -236.84355164]
[198.20533752 -222.27798462]
[190.26010132 -209.43080139]
[179.01631165 -199.34349060]
[165.38545227 -192.83377075]
[150.47251892 -190.42935181]
[148.60490417 -175.54608154]
[146.73728943 -160.66279602]
[144.86968994 -145.77951050]
[143.00207520 -130.89624023]
[141.13446045 -116.01295471]
[139.26684570 -101.12967682]
[146.14544678 -96.04386902]
[150.54150391 -88.46035767]
[151.58605957 -79.54477692]
[148.94100952 -70.74618530]
[142.88175964 -63.56151962]
[134.27796936 -59.28131104]
[124.47111511 -58.75970459]
[115.06590271 -62.24952316]
[114.13027954 -47.27873230]
[113.19464874 -32.30794144]
[112.41480255 -17.32822800]
[111.79082489 -2.34121156]
[111.16684723 12.64580441]
[121.88497162 2.15190768]
[136.69999695 -0.19653413]
[150.13806152 6.46818161]
[157.23406982 19.68357468]
[155.36619568 34.56682205]
[145.22456360 45.61885834]
[130.55632019 48.75617599]
[116.78109741 42.81960297]
[108.98874664 30.00342941]
[105.89042664 44.67995453]
[102.79209900 59.35647964]
[99.69377899 74.03300476]
[119.22753906 85.70748138]
[120.93944550 106.57252502]
[106.33325958 118.90293884]
[105.39762878 133.87373352]
[104.46199799 148.84452820]
[103.52637482 163.81530762]
[102.59074402 178.78610229]
[101.65511322 193.75689697]
[115.73603058 208.00379944]
[114.91744995 227.71539307]
[100.16323090 240.35200500]
[100.16323090 255.35200500]
[100.16323090 270.35198975]
[100.16323090 285.35198975]
[100.16323090 300.35198975]
[100.16323090 315.35198975]
[100.16323090 330.35198975]
[100.16323090 345.35198975]
[100.16323090 360.35198975]
[100.16323090 375.35198975]
[114.70311737 379.41329956]
[127.60749817 387.24783325]
[137.91879272 398.27416992]
[144.87181091 411.67407227]
[147.95060730 426.45324707]
[146.92671204 441.51492310]
[141.87611389 455.74145508]
[133.17358398 468.07711792]
[121.46492767 477.60653687]
[107.61898804 483.62255859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 128]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[33 40]
[34 39]
[41 120]
[42 119]
[43 118]
[44 117]
[45 108]
[46 107]
[47 106]
[49 105]
[50 104]
[51 103]
[52 60]
[53 59]
[62 95]
[63 94]
[64 93]
[65 92]
[66 91]
[67 90]
[68 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
