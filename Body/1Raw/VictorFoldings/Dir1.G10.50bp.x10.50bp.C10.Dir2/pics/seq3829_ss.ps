%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUUCUACUGGGGGGGGGGAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAAxxxxxxxxxxUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGCCCCCCCCCCAUCAUUCUAUU\
) } def
/len { sequence length } bind def

/coor [
[81.44036865 395.75411987]
[67.41842651 390.20111084]
[55.21846390 381.33477783]
[45.60739517 369.71246338]
[39.18936920 356.06475830]
[36.36783218 341.24957275]
[37.32014847 326.19821167]
[41.98645401 311.85678101]
[50.07342148 299.12683105]
[61.07269287 288.80856323]
[74.29285431 281.55056763]
[88.90286255 277.80914307]
[88.90286255 262.80914307]
[88.90286255 247.80914307]
[88.90286255 232.80914307]
[88.90286255 217.80914307]
[88.90286255 202.80914307]
[88.90286255 187.80914307]
[88.90286255 172.80914307]
[88.90286255 157.80914307]
[88.90286255 142.80914307]
[76.41186523 151.11425781]
[62.06769180 146.72737122]
[56.35886765 132.85621643]
[63.45970154 119.64340973]
[78.17803955 116.75022888]
[89.75151062 126.29161072]
[91.28880310 111.37059784]
[85.75148010 98.53199005]
[93.79018402 87.09210968]
[95.32747650 72.17109680]
[96.86476898 57.25008011]
[98.40206146 42.32906342]
[85.12567139 49.31029129]
[71.30662537 43.47642899]
[67.04946136 29.09322548]
[75.46703339 16.67773438]
[90.40438843 15.30821514]
[100.93905640 25.98547745]
[103.99745178 11.30058098]
[107.05584717 -3.38431692]
[110.11424255 -18.06921387]
[113.17263794 -32.75411224]
[98.77349091 -36.98624039]
[84.76158142 -42.36330032]
[71.22779083 -48.85042191]
[58.25988007 -56.40553665]
[45.94196320 -64.97963715]
[34.35392380 -74.51712799]
[23.57091713 -84.95613861]
[13.66287327 -96.22898865]
[4.69405174 -108.26254272]
[-3.27738047 -120.97877502]
[-10.19972420 -134.29521179]
[-16.02808571 -148.12548828]
[-20.72466469 -162.37991333]
[-24.25900078 -176.96601868]
[-26.60817337 -191.78924561]
[-27.75694656 -206.75341797]
[-27.69787025 -221.76150513]
[-26.43132782 -236.71618652]
[-23.96553230 -251.52044678]
[-20.31647682 -266.07827759]
[-15.50782585 -280.29528809]
[-9.57076740 -294.07925415]
[-2.54380441 -307.34078979]
[5.52748871 -319.99386597]
[14.59076595 -331.95645142]
[24.58724785 -343.15093994]
[35.45210266 -353.50473022]
[47.11486816 -362.95071411]
[59.49990082 -371.42758179]
[72.52688599 -378.88037109]
[86.11132812 -385.26074219]
[100.16513062 -390.52731323]
[114.59714508 -394.64596558]
[129.31378174 -397.58993530]
[144.21958923 -399.34017944]
[159.21789551 -399.88528442]
[174.21142578 -399.22177124]
[189.10295105 -397.35394287]
[203.79588318 -394.29385376]
[218.19493103 -390.06143188]
[232.20672607 -384.68405151]
[245.74037170 -378.19662476]
[258.70812988 -370.64123535]
[271.02584839 -362.06686401]
[282.61367798 -352.52911377]
[293.39645386 -342.08987427]
[303.30426025 -330.81680298]
[312.27279663 -318.78305054]
[320.24395752 -306.06661987]
[327.16601562 -292.75006104]
[332.99404907 -278.91964722]
[337.69033813 -264.66513062]
[341.22433472 -250.07891846]
[343.57318115 -235.25566101]
[344.72161865 -220.29145813]
[344.66223145 -205.28335571]
[343.39535522 -190.32872009]
[340.92922974 -175.52450562]
[337.27984619 -160.96675110]
[332.47088623 -146.74984741]
[326.53353882 -132.96601868]
[319.50625610 -119.70465088]
[311.43469238 -107.05174255]
[302.37115479 -95.08936310]
[292.37442017 -83.89508820]
[281.50933838 -73.54152679]
[269.84637451 -64.09581757]
[257.46115112 -55.61922455]
[244.43400574 -48.16672516]
[230.84942627 -41.78664398]
[216.79550171 -36.52037048]
[202.36338806 -32.40204620]
[187.64669800 -29.45839119]
[172.74084473 -27.70849228]
[157.74253845 -27.16369629]
[142.74900818 -27.82754135]
[127.85752869 -29.69571686]
[124.79913330 -15.01081848]
[121.74073792 -0.32592136]
[118.68234253 14.35897636]
[115.62394714 29.04387474]
[113.32307434 43.86635590]
[111.78578186 58.78737259]
[110.24848938 73.70838928]
[108.71119690 88.62940216]
[114.24851990 101.46800995]
[106.20981598 112.90789032]
[104.67252350 127.82890320]
[103.90286255 142.80914307]
[103.90286255 157.80914307]
[103.90286255 172.80914307]
[103.90286255 187.80914307]
[103.90286255 202.80914307]
[103.90286255 217.80914307]
[103.90286255 232.80914307]
[103.90286255 247.80914307]
[103.90286255 262.80914307]
[103.90286255 277.80914307]
[118.51287842 281.55056763]
[131.73303223 288.80856323]
[142.73231506 299.12683105]
[150.81927490 311.85678101]
[155.48558044 326.19821167]
[156.43789673 341.24957275]
[153.61636353 356.06475830]
[147.19833374 369.71246338]
[137.58726501 381.33477783]
[125.38730621 390.20111084]
[111.36536407 395.75411987]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 131]
[28 130]
[30 128]
[31 127]
[32 126]
[33 125]
[39 124]
[40 123]
[41 122]
[42 121]
[43 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
