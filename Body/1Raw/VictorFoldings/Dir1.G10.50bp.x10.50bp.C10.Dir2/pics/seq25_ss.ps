%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAUUAGGGGGGGGGGACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUxxxxxxxxxxUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACCCCCCCCCCCACCCUAGUA\
) } def
/len { sequence length } bind def

/coor [
[65.47106171 383.40545654]
[51.62512207 377.38943481]
[39.91645813 367.86001587]
[31.21393585 355.52435303]
[26.16333389 341.29782104]
[25.13944244 326.23614502]
[28.21824074 311.45697021]
[35.17126465 298.05703735]
[45.48254776 287.03073120]
[58.38692856 279.19619751]
[72.92681885 275.13488770]
[72.92681885 260.13488770]
[72.92681885 245.13488770]
[72.92681885 230.13488770]
[72.92681885 215.13488770]
[72.92681885 200.13488770]
[72.92681885 185.13488770]
[72.92681885 170.13488770]
[72.92681885 155.13488770]
[72.92681885 140.13488770]
[61.94115067 129.92141724]
[46.98090363 131.01272583]
[32.02065277 132.10403442]
[17.06040382 133.19534302]
[2.38387895 136.29367065]
[-11.74092388 141.34242249]
[-25.86572647 146.39117432]
[-36.06106567 159.23591614]
[-52.24067307 156.56153870]
[-57.76036072 141.11921692]
[-46.94194412 128.79469299]
[-30.91448402 132.26637268]
[-16.78968048 127.21762085]
[-2.66487741 122.16886139]
[-17.16112518 118.31414795]
[-28.90698624 108.98490906]
[-35.94299316 95.73747253]
[-37.09537506 80.78180695]
[-32.17189407 66.61284637]
[-21.99389267 55.59430313]
[-8.25929451 49.56430817]
[6.74066353 49.52880859]
[20.50365067 55.49371719]
[30.73369408 66.46395874]
[35.72418976 80.60945129]
[34.64261627 95.57041168]
[27.66939735 108.85100555]
[15.96909428 118.23509979]
[30.92934227 117.14378357]
[45.88959122 116.05247498]
[60.84983826 114.96116638]
[59.00284576 105.57408905]
[59.34595490 96.13628387]
[61.80497742 87.14545441]
[66.19560242 79.06298828]
[72.23600769 72.29026031]
[79.56433105 67.14877319]
[87.76005554 63.86510086]
[96.36795807 62.56124878]
[97.92553711 47.64233780]
[99.48311615 32.72342682]
[101.04070282 17.80451393]
[102.59828186 2.88560152]
[92.91867065 -9.31861591]
[94.71080780 -24.42632675]
[106.40531158 -33.57914352]
[107.96289825 -48.49805450]
[109.52047729 -63.41696930]
[95.61064148 -69.33371735]
[84.06385040 -79.08886719]
[75.90682983 -91.81500244]
[71.86490631 -106.38051605]
[72.29747772 -121.49025726]
[77.16607666 -135.80067444]
[86.03780365 -148.03930664]
[98.12377167 -157.11788940]
[112.34932709 -162.22915649]
[127.44952393 -162.91864014]
[142.08168030 -159.12501526]
[154.94468689 -151.18560791]
[164.89480591 -139.80638123]
[171.04727173 -125.99919128]
[172.85499573 -110.99174500]
[170.15724182 -96.11849213]
[163.19390869 -82.70195770]
[152.58415222 -71.93513489]
[139.27139282 -64.77539825]
[124.43939209 -61.85938644]
[122.88180542 -46.94047546]
[121.32422638 -32.02156067]
[130.87599182 -20.65056801]
[129.50889587 -5.49848175]
[117.51719666 4.44318247]
[115.95960999 19.36209488]
[114.40203094 34.28100586]
[112.84445190 49.19992065]
[111.28687286 64.11882782]
[120.17872620 68.25617218]
[127.69881439 74.55147552]
[133.33592224 82.57679749]
[147.74813843 78.41890717]
[162.16035461 74.26101685]
[176.57257080 70.10313416]
[190.98478699 65.94524384]
[201.96145630 53.76145935]
[217.94274902 57.43983459]
[222.48846436 73.19637299]
[210.92237854 84.82209778]
[195.14266968 80.35746002]
[180.73045349 84.51535034]
[166.31823730 88.67323303]
[151.90602112 92.83112335]
[137.49380493 96.98901367]
[137.61141968 99.51699829]
[137.55876160 102.04716492]
[137.33610535 104.56806946]
[151.56288147 109.32188416]
[165.78965759 114.07569885]
[180.72856140 108.22689056]
[194.54290771 116.38432312]
[196.63548279 132.29031372]
[185.40107727 143.74314880]
[169.45773315 141.95719910]
[161.03584290 128.30247498]
[146.80906677 123.54866028]
[132.58229065 118.79484558]
[127.04756165 127.36184692]
[119.25875854 134.29589844]
[109.69863129 139.00498962]
[99.00466919 141.04000854]
[87.92681885 140.13488770]
[87.92681885 155.13488770]
[87.92681885 170.13488770]
[87.92681885 185.13488770]
[87.92681885 200.13488770]
[87.92681885 215.13488770]
[87.92681885 230.13488770]
[87.92681885 245.13488770]
[87.92681885 260.13488770]
[87.92681885 275.13488770]
[102.46670532 279.19619751]
[115.37108612 287.03073120]
[125.68236542 298.05703735]
[132.63539124 311.45697021]
[135.71418762 326.23614502]
[134.69029236 341.29782104]
[129.63969421 355.52435303]
[120.93717194 367.86001587]
[109.22850800 377.38943481]
[95.38256836 383.40545654]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 51]
[22 50]
[23 49]
[24 48]
[25 34]
[26 33]
[27 32]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[66 90]
[67 89]
[68 88]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
