%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCUCUAGGGGGGGGGGGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUxxxxxxxxxxCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCCCCCCCCCCCUCUAG\
) } def
/len { sequence length } bind def

/coor [
[62.48777390 375.57843018]
[50.39284134 366.54431152]
[41.18470383 354.58132935]
[35.54666901 340.57720947]
[33.89712143 325.57116699]
[36.35846710 310.67672729]
[42.74805069 296.99917603]
[52.59173203 285.55343628]
[65.15904236 277.18890381]
[79.51739502 272.52627563]
[78.89341736 257.53927612]
[78.26943970 242.55224609]
[77.64546204 227.56523132]
[77.02148438 212.57821655]
[76.39750671 197.59120178]
[75.77352905 182.60418701]
[75.14955139 167.61717224]
[74.52557373 152.63015747]
[61.06961060 146.00164795]
[48.80724335 154.64076233]
[36.54487610 163.27989197]
[27.07885933 177.34512329]
[10.94284344 172.14268494]
[11.47507286 155.19709778]
[27.90575981 151.01751709]
[40.16812897 142.37840271]
[52.43049622 133.73928833]
[50.72900772 126.43483734]
[36.12011337 129.83781433]
[21.51122093 133.24079895]
[8.66890430 140.99159241]
[-2.67102194 131.17294312]
[3.16287017 117.35390472]
[18.10824394 118.63190460]
[32.71713638 115.22892761]
[47.32603073 111.82595062]
[45.62453842 104.52149963]
[30.80678177 102.19039917]
[15.98902416 99.85929108]
[0.88798791 106.25388336]
[-12.03559780 96.15868378]
[-9.48705673 79.95877838]
[5.91189051 74.31923676]
[18.32012749 85.04153442]
[33.13788605 87.37263489]
[47.95564270 89.70374298]
[64.61100769 67.72488403]
[87.88957977 59.01194000]
[109.54590607 63.64947891]
[116.17440033 50.19351578]
[122.80290222 36.73754883]
[129.43139648 23.28158379]
[136.05990601 9.82561779]
[127.86598969 -1.23489535]
[125.22110748 -14.66204453]
[128.56898499 -27.84903717]
[137.19660950 -38.26552963]
[149.38475037 -43.94313049]
[149.69680786 -58.93988419]
[150.00886536 -73.93663788]
[150.32090759 -88.93339539]
[150.63296509 -103.93014526]
[135.99382019 -107.46701813]
[122.45745850 -114.06859589]
[110.65699005 -123.42610931]
[101.14434052 -135.10188293]
[94.36444855 -148.54981995]
[90.63441467 -163.14094543]
[90.12870026 -178.19279480]
[92.87095642 -193.00138855]
[98.73292542 -206.87406921]
[107.44042969 -219.16200256]
[118.58621216 -229.29046631]
[131.64894104 -236.78572083]
[146.01768494 -241.29721069]
[161.02035522 -242.61392212]
[175.95527649 -240.67425537]
[190.12390137 -235.56895447]
[202.86354065 -227.53680420]
[213.57835388 -216.95346069]
[221.76715088 -204.31393433]
[227.04696655 -190.20941162]
[229.17083740 -175.29957581]
[228.03942871 -160.28178406]
[223.70565796 -145.85845947]
[216.37220764 -132.70419312]
[206.38211060 -121.43423462]
[194.20259094 -112.57570648]
[180.40332031 -106.54293823]
[165.62973022 -103.61808777]
[165.31767273 -88.62133789]
[165.00561523 -73.62458038]
[164.69355774 -58.62783051]
[164.38150024 -43.63107681]
[174.85916138 -38.41001892]
[182.59890747 -29.62725639]
[197.01112366 -33.78514481]
[211.42333984 -37.94303131]
[225.83555603 -42.10091782]
[240.24777222 -46.25880814]
[254.65998840 -50.41669464]
[258.27359009 -65.34443665]
[268.87854004 -76.45436859]
[283.62216187 -80.75797272]
[298.53851318 -77.09760284]
[309.61514282 -66.45787811]
[313.87252808 -51.70083618]
[310.16540527 -36.79603958]
[299.49102783 -25.75280952]
[284.72070312 -21.54171562]
[269.82760620 -25.29552460]
[258.81787109 -36.00447845]
[244.40565491 -31.84659004]
[229.99343872 -27.68870354]
[215.58122253 -23.53081703]
[201.16900635 -19.37292862]
[186.75679016 -15.21504116]
[182.13548279 2.50784159]
[168.09573364 14.54947281]
[149.51586914 16.45411682]
[142.88735962 29.91008186]
[136.25886536 43.36604691]
[129.63037109 56.82201385]
[123.00186920 70.27797699]
[134.35307312 79.91636658]
[141.55677795 93.89347076]
[142.97468567 110.39085388]
[137.77264404 126.98754883]
[126.13272095 141.01530457]
[109.30985260 149.98342896]
[89.51259613 152.00617981]
[90.13657379 166.99319458]
[90.76055145 181.98020935]
[91.38452911 196.96722412]
[92.00850677 211.95423889]
[92.63247681 226.94125366]
[93.25645447 241.92826843]
[93.88043213 256.91528320]
[94.50440979 271.90231323]
[109.20066071 275.35525513]
[122.41977692 282.64617920]
[133.18081665 293.23403931]
[140.68522644 306.33312988]
[144.37615967 320.97143555]
[143.97969055 336.06265259]
[139.52526855 350.48696899]
[131.34341431 363.17398071]
[120.04130554 373.18222046]
[106.45760345 379.76898193]
[91.60033417 382.44555664]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 27]
[20 26]
[21 25]
[37 46]
[38 45]
[39 44]
[49 124]
[50 123]
[51 122]
[52 121]
[53 120]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
[101 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
