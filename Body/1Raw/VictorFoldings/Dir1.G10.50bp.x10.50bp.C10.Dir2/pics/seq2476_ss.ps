%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAUCUAUGGGGGGGGGGCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCxxxxxxxxxxCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUCCCCCCCCCCACCAAUCAAU\
) } def
/len { sequence length } bind def

/coor [
[117.52313995 217.20329285]
[113.26895905 202.81919861]
[109.97548676 188.18524170]
[107.65714264 173.36547852]
[106.32408142 158.42481995]
[105.98202515 143.43972778]
[95.54221344 154.21052551]
[85.10240173 164.98133850]
[74.66259003 175.75215149]
[64.22277832 186.52294922]
[53.78296280 197.29376221]
[43.34315109 208.06457520]
[32.90333939 218.83537292]
[22.46352768 229.60618591]
[18.41457939 244.90052795]
[4.00075769 248.65432739]
[0.53097045 264.68218994]
[-15.16498661 269.43286133]
[-26.94045830 258.01928711]
[-22.68184853 242.18272400]
[-6.77005053 238.21450806]
[-3.46782732 223.69058228]
[11.69271851 219.16638184]
[22.13253212 208.39556885]
[32.57234192 197.62475586]
[43.01215744 186.85395813]
[53.45196915 176.08314514]
[63.89178085 165.31233215]
[74.33159637 154.54151917]
[84.77140808 143.77072144]
[95.21121979 132.99990845]
[93.81505585 125.63100433]
[79.48945618 130.07817078]
[65.69242859 135.96391296]
[55.11315155 125.33005524]
[61.06981659 111.56349945]
[76.06322479 111.99459076]
[91.02272797 110.89319611]
[89.62657166 103.52429962]
[75.97032928 97.31888580]
[62.31408691 91.11347961]
[48.65784454 84.90807343]
[35.00160599 78.70266724]
[21.34536362 72.49726105]
[5.58059168 73.83237457]
[-2.80564809 61.52302170]
[-19.72718239 60.47515488]
[-23.40461349 43.92484283]
[-8.51910877 35.80954361]
[3.39975905 47.86677933]
[18.18774605 46.08781052]
[27.55076981 58.84101868]
[41.20701218 65.04642487]
[54.86325455 71.25183105]
[68.51949310 77.45723724]
[82.17573547 83.66265106]
[95.83197784 89.86805725]
[105.81470490 78.67228699]
[98.09061432 65.81388855]
[90.36653137 52.95548630]
[75.76986694 45.48090363]
[75.21505737 29.09114647]
[89.27284241 20.64658546]
[103.48178101 28.83426285]
[103.22493744 45.23139954]
[110.94902039 58.08980179]
[118.67310333 70.94820404]
[124.08997345 56.96044159]
[130.42015076 43.36158752]
[137.63592529 30.21120262]
[145.70568848 17.56687737]
[154.59410095 5.48398781]
[164.26222229 -5.98454905]
[174.66772461 -16.78850555]
[185.76504517 -26.88056564]
[197.50555420 -36.21653366]
[209.83786011 -44.75551605]
[222.70794678 -52.46012497]
[236.05943298 -59.29660797]
[249.83387756 -65.23503113]
[263.97091675 -70.24938965]
[278.40869141 -74.31771851]
[293.08389282 -77.42219543]
[307.93234253 -79.54923248]
[322.88891602 -80.68951416]
[337.88818359 -80.83804321]
[352.86444092 -79.99417114]
[367.75207520 -78.16159058]
[382.48590088 -75.34832764]
[397.00137329 -71.56670380]
[411.23495483 -66.83328247]
[425.12429810 -61.16879654]
[438.60855103 -54.59804535]
[451.62869263 -47.14981461]
[464.12765503 -38.85671616]
[476.05075073 -29.75507545]
[487.34573364 -19.88475037]
[497.96316528 -9.28896999]
[507.85647583 1.98586190]
[516.98242188 13.89036751]
[525.30102539 26.37240982]
[532.77575684 39.37732315]
[539.37402344 52.84815598]
[545.06683350 66.72590637]
[549.82922363 80.94979858]
[553.64044189 95.45754242]
[556.48376465 110.18560028]
[558.34667969 125.06946564]
[559.22113037 140.04396057]
[559.10321045 155.04348755]
[557.99340820 170.00238037]
[555.89666748 184.85511780]
[552.82214355 199.53663635]
[548.78326416 213.98266602]
[543.79772949 228.12991333]
[537.88739014 241.91642761]
[531.07818604 255.28184509]
[523.39984131 268.16760254]
[514.88598633 280.51730347]
[505.57400513 292.27682495]
[495.50460815 303.39471436]
[484.72189331 313.82223511]
[473.27310181 323.51373291]
[461.20834351 332.42675781]
[448.58050537 340.52227783]
[435.44485474 347.76486206]
[421.85894775 354.12277222]
[407.88226318 359.56814575]
[393.57601929 364.07714844]
[379.00286865 367.63006592]
[364.22662354 370.21130371]
[349.31201172 371.80953979]
[334.32434082 372.41781616]
[319.32928467 372.03344727]
[304.39245605 370.65814209]
[289.57931519 368.29788208]
[274.95471191 364.96301270]
[260.58273315 360.66818237]
[246.52627563 355.43212891]
[232.84692383 349.27786255]
[219.60456848 342.23226929]
[206.85723877 334.32623291]
[194.66072083 325.59439087]
[183.06846619 316.07495117]
[172.13121033 305.80963135]
[161.89688110 294.84341431]
[152.41029358 283.22424316]
[143.71298218 271.00308228]
[135.84304810 258.23342896]
[128.83494568 244.97120667]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[6 31]
[7 30]
[8 29]
[9 28]
[10 27]
[11 26]
[12 25]
[13 24]
[14 23]
[16 21]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[46 50]
[58 67]
[59 66]
[60 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
