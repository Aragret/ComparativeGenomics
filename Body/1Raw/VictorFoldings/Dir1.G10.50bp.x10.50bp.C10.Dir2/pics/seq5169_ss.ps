%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACUCUCUCGGGGGGGGGGAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCxxxxxxxxxxCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCCCCCCCCCCCUCCCUCUCUC\
) } def
/len { sequence length } bind def

/coor [
[109.59128571 490.40780640]
[95.43067932 485.25280762]
[82.84093475 476.97061157]
[72.50099945 466.00781250]
[64.96849060 452.95568848]
[60.64962387 438.51809692]
[59.77731323 423.47363281]
[62.39860535 408.63363647]
[68.37213135 394.79840088]
[77.37574768 382.71405029]
[88.92390442 373.03228760]
[102.39382172 366.27520752]
[117.05908203 362.80722046]
[117.05908203 347.80722046]
[117.05908203 332.80722046]
[117.05908203 317.80722046]
[117.05908203 302.80722046]
[117.05908203 287.80722046]
[117.05908203 272.80722046]
[117.05908203 257.80722046]
[117.05908203 242.80723572]
[117.05908203 227.80723572]
[115.54155731 212.88418579]
[112.52207947 198.19123840]
[102.38117981 187.28201294]
[107.18214417 172.20681763]
[104.16266632 157.51387024]
[101.14318848 142.82092285]
[98.12371063 128.12797546]
[95.10423279 113.43502045]
[83.15016174 104.37410736]
[68.18788910 105.43730164]
[60.87849426 119.02319336]
[47.37329483 126.48061371]
[31.98175240 125.42993927]
[19.61524773 116.20642853]
[14.21989059 101.75327301]
[17.51731873 86.68242645]
[28.45533562 75.80293274]
[43.54365921 72.58640289]
[57.96765900 78.05921936]
[67.12469482 90.47502899]
[82.08696747 89.41183472]
[86.44441223 90.25726318]
[90.48146057 91.77665710]
[94.11440277 93.91727448]
[95.63192749 78.99423218]
[97.14945221 64.07118988]
[98.66697693 49.14815140]
[76.37175751 29.26521301]
[79.61116028 -2.88233566]
[68.53205109 -12.99437618]
[57.45294571 -23.10641670]
[41.97820282 -20.85555840]
[28.70429611 -29.12220001]
[23.89875412 -44.00308609]
[29.83061028 -58.47192001]
[43.69902039 -65.69695282]
[58.95574951 -62.26675797]
[68.39703369 -49.80095673]
[67.56498718 -34.18552399]
[78.64409637 -24.07348442]
[89.72320557 -13.96144295]
[103.89218140 -18.88487053]
[106.31373596 -33.68811798]
[108.73529053 -48.49135971]
[111.15685272 -63.29460526]
[113.42826843 -78.12162781]
[115.54930878 -92.97091675]
[117.67034912 -107.82019806]
[103.85083771 -113.89668274]
[92.18394470 -123.47718811]
[83.53542328 -135.85076904]
[78.54705048 -150.09924316]
[77.58900452 -165.16525269]
[80.73236847 -179.93081665]
[87.74389648 -193.30021667]
[98.10327911 -204.28137207]
[111.04177856 -212.05940247]
[125.59928131 -216.05712891]
[140.69551086 -215.97789001]
[155.21023560 -211.82756042]
[168.06637573 -203.91412354]
[178.30990601 -192.82481384]
[185.18067932 -179.38253784]
[188.16886902 -164.58479309]
[187.05270386 -149.52966309]
[181.91502380 -135.33435059]
[173.13708496 -123.05224609]
[161.37025452 -113.59474945]
[147.48770142 -107.66367340]
[132.51963806 -105.69915009]
[130.39859009 -90.84986877]
[128.27754211 -76.00058746]
[130.45791626 -68.89244843]
[125.96009064 -60.87305069]
[123.53853607 -46.06980515]
[121.11698151 -31.26655960]
[118.69541931 -16.46331406]
[126.35831451 -12.98653030]
[132.94818115 -7.92083168]
[138.14807129 -1.56869590]
[141.72151184 5.70736599]
[143.52304077 13.50534058]
[143.50363159 21.40585136]
[141.71095276 28.99468994]
[138.28440857 35.88453293]
[133.44552612 41.73470688]
[127.48413086 46.26796722]
[120.74130249 49.28353119]
[113.59001923 50.66567612]
[112.07249451 65.58871460]
[110.55496979 80.51175690]
[109.03744507 95.43479919]
[109.79718018 110.41554260]
[112.81665802 125.10848999]
[115.83613586 139.80143738]
[118.85561371 154.49438477]
[121.87509155 169.18733215]
[132.23196411 181.14752197]
[127.21502686 195.17176819]
[130.23451233 209.86471558]
[136.98728943 196.47068787]
[149.45840454 188.13574219]
[164.41679382 187.01930237]
[177.98703003 193.41062927]
[186.65327454 205.65382385]
[188.17028809 220.57691956]
[182.14501953 234.31359863]
[170.13851929 243.30491638]
[155.26145935 245.22140503]
[141.36820984 239.56652832]
[132.05908203 227.80723572]
[132.05908203 242.80723572]
[132.05908203 257.80722046]
[132.05908203 272.80722046]
[132.05908203 287.80722046]
[132.05908203 302.80722046]
[132.05908203 317.80722046]
[132.05908203 332.80722046]
[132.05908203 347.80722046]
[132.05908203 362.80722046]
[146.72434998 366.27520752]
[160.19425964 373.03228760]
[171.74241638 382.71405029]
[180.74603271 394.79840088]
[186.71955872 408.63363647]
[189.34085083 423.47363281]
[188.46853638 438.51809692]
[184.14967346 452.95568848]
[176.61717224 466.00781250]
[166.27722168 476.97061157]
[153.68748474 485.25280762]
[139.52688599 490.40780640]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 122]
[24 121]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[31 43]
[32 42]
[46 114]
[47 113]
[48 112]
[49 111]
[51 63]
[52 62]
[53 61]
[64 99]
[65 98]
[66 97]
[67 96]
[68 94]
[69 93]
[70 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
