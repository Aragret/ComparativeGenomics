%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCAUACGGGGGGGGGGCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCxxxxxxxxxxAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCCCCCCCCCCCUCCCCACAC\
) } def
/len { sequence length } bind def

/coor [
[98.53533173 523.31280518]
[84.51338959 517.75976562]
[72.31343079 508.89346313]
[62.70236206 497.27114868]
[56.28433609 483.62344360]
[53.46279907 468.80825806]
[54.41511536 453.75686646]
[59.08142090 439.41546631]
[67.16838837 426.68548584]
[78.16766357 416.36721802]
[91.38781738 409.10925293]
[105.99783325 405.36779785]
[105.99783325 390.36779785]
[105.99783325 375.36779785]
[105.99783325 360.36779785]
[105.99783325 345.36779785]
[105.99783325 330.36779785]
[105.99783325 315.36779785]
[105.99783325 300.36779785]
[105.99783325 285.36779785]
[105.99783325 270.36779785]
[92.13693237 266.60113525]
[79.71875763 259.35885620]
[69.59812927 249.13221741]
[62.47361755 236.61813354]
[58.83931732 222.67167664]
[58.95057297 208.24775696]
[62.80607605 194.33560181]
[70.14748383 181.89102173]
[80.47676086 171.77066040]
[93.08993530 164.67312622]
[107.12507629 161.09065247]
[107.43305206 146.09381104]
[107.74102783 131.09696960]
[92.72583771 130.31987000]
[80.12755585 122.89226532]
[72.61344910 110.82624817]
[71.56837463 97.06178284]
[76.85224915 84.75431824]
[86.91640472 76.55162048]
[83.55714417 61.93261337]
[80.19788361 47.31360626]
[70.05598450 45.56854248]
[61.08200836 39.14946747]
[55.42790222 28.81835747]
[54.76704407 16.31400299]
[41.77666473 8.81400299]
[28.78628159 1.31400275]
[15.79590130 -6.18599749]
[-0.94436002 -8.86927986]
[-3.00010657 -25.69813156]
[12.60197926 -32.33222961]
[23.29590034 -19.17637825]
[36.28628159 -11.67637825]
[49.27666473 -4.17637825]
[62.26704407 3.32362175]
[75.40867615 -3.90808082]
[76.02449799 -18.89543343]
[76.64032745 -33.88278580]
[77.25614929 -48.87014008]
[77.87197876 -63.85749435]
[78.48780060 -78.84484863]
[63.85942459 -82.37992096]
[50.20191193 -88.70120239]
[38.04022217 -97.56571198]
[27.84182167 -108.63272858]
[19.99871063 -121.47686768]
[14.81235313 -135.60443115]
[12.48210144 -150.47238159]
[13.09752274 -165.50924683]
[16.63496399 -180.13705444]
[22.95845413 -193.79354858]
[31.82493401 -205.95379639]
[42.89360428 -216.15040588]
[55.73900604 -223.99143982]
[69.86740875 -229.17552185]
[84.73574066 -231.50335693]
[99.77251434 -230.88549805]
[114.39974213 -227.34570312]
[128.05520630 -221.01998901]
[140.21403503 -212.15155029]
[150.40884399 -201.08122253]
[158.24780273 -188.23455811]
[163.42958069 -174.10531616]
[165.75502014 -159.23660278]
[165.13473511 -144.19993591]
[161.59255981 -129.57327271]
[155.26464844 -115.91883087]
[146.39422607 -103.76145172]
[135.32226562 -93.56842804]
[122.47431946 -85.73155212]
[108.34424591 -80.55205536]
[93.47515869 -78.22901917]
[92.85932922 -63.24166870]
[92.24350739 -48.25431442]
[91.62767792 -33.26696396]
[91.01185608 -18.27960968]
[90.39602661 -3.29225540]
[108.35601044 21.11396408]
[94.81689453 43.95434570]
[98.17615509 58.57335281]
[101.53541565 73.19235992]
[112.96508026 75.01322174]
[123.06908417 81.69567871]
[129.79672241 92.41335297]
[131.57254028 105.48813629]
[146.50856018 104.10411072]
[161.44458008 102.72008514]
[176.38058472 101.33605957]
[186.28302002 89.01869965]
[202.00358582 87.39416504]
[214.21557617 97.42626953]
[215.67379761 113.16313934]
[205.51315308 125.26837158]
[189.76174927 126.56014252]
[177.76461792 116.27207184]
[162.82859802 117.65609741]
[147.89259338 119.04012299]
[132.95657349 120.42414856]
[122.73786926 131.40495300]
[122.42988586 146.40179443]
[122.12191010 161.39863586]
[137.10952759 166.06938171]
[150.16909790 174.75483704]
[160.25308228 186.74851990]
[166.55535889 201.07899475]
[168.57565308 216.58854675]
[166.15931702 232.02667236]
[159.50903320 246.15097046]
[149.16792297 257.82705688]
[135.97514343 266.11972046]
[120.99783325 270.36779785]
[120.99783325 285.36779785]
[120.99783325 300.36779785]
[120.99783325 315.36779785]
[120.99783325 330.36779785]
[120.99783325 345.36779785]
[120.99783325 360.36779785]
[120.99783325 375.36779785]
[120.99783325 390.36779785]
[120.99783325 405.36779785]
[135.60784912 409.10925293]
[148.82800293 416.36721802]
[159.82727051 426.68548584]
[167.91424561 439.41546631]
[172.58055115 453.75686646]
[173.53286743 468.80825806]
[170.71133423 483.62344360]
[164.29330444 497.27114868]
[154.68223572 508.89346313]
[142.48226929 517.75976562]
[128.46032715 523.31280518]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[32 122]
[33 121]
[34 120]
[40 102]
[41 101]
[42 100]
[46 56]
[47 55]
[48 54]
[49 53]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[62 93]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
