%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAGAACCAGGGGGGGGGGACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACxxxxxxxxxxACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCACCCCCCCCCCAAGACAACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 392.79534912]
[71.19830322 386.77932739]
[59.48964310 377.24990845]
[50.78712082 364.91424561]
[45.73651886 350.68771362]
[44.71262741 335.62603760]
[47.79142761 320.84689331]
[54.74444962 307.44696045]
[65.05573273 296.42062378]
[77.96011353 288.58612061]
[92.50000000 284.52481079]
[92.50000000 269.52481079]
[92.50000000 254.52479553]
[92.50000000 239.52479553]
[92.50000000 224.52479553]
[92.50000000 209.52479553]
[92.50000000 194.52479553]
[92.50000000 179.52479553]
[92.50000000 164.52479553]
[92.50000000 149.52479553]
[71.57892609 141.24559021]
[56.39242935 124.64418030]
[42.37571716 129.98568726]
[28.35900307 135.32720947]
[25.28738403 150.44569397]
[14.51333523 161.48759460]
[-0.52518421 164.92945862]
[-15.02943802 159.67301941]
[-24.37117004 147.39556885]
[-25.56946945 132.01481628]
[-18.24196243 118.43869781]
[-4.72682953 110.99929047]
[10.66329956 112.07049561]
[23.01749039 121.31049347]
[37.03420258 115.96897888]
[51.05091476 110.62746429]
[50.06220245 103.89516449]
[49.99506378 97.09098053]
[50.85074234 90.34047699]
[52.61344147 83.76824188]
[55.25063705 77.49555206]
[58.71365356 71.63816833]
[62.93859100 66.30418396]
[67.84747314 61.59204483]
[73.34971619 57.58869934]
[79.34378052 54.36803436]
[85.71903992 51.98947906]
[92.35784149 50.49693680]
[99.13768005 49.91794586]
[105.93343353 50.26319122]
[112.61968231 51.52630234]
[119.07305145 53.68397141]
[126.79713440 40.82556915]
[134.52122498 27.96716499]
[142.24530029 15.10876274]
[149.96939087 2.25036049]
[157.69348145 -10.60804176]
[165.41755676 -23.46644402]
[172.87246704 -36.48275375]
[180.05497742 -49.65133667]
[181.43347168 -58.74812698]
[187.52635193 -63.01689148]
[194.98126221 -76.03320312]
[202.43617249 -89.04951477]
[209.89108276 -102.06581879]
[217.34599304 -115.08213043]
[205.47323608 -124.28993225]
[194.99754333 -135.06054688]
[186.12284851 -147.18431091]
[179.02189636 -160.42526245]
[173.83290100 -174.52563477]
[170.65686035 -189.21095276]
[169.55561829 -204.19540405]
[170.55061340 -219.18727112]
[173.62245178 -233.89474487]
[178.71134949 -248.03155518]
[185.71826172 -261.32250977]
[194.50679016 -273.50888062]
[204.90586853 -284.35348511]
[216.71305847 -293.64523315]
[229.69853210 -301.20321655]
[243.60954285 -306.88037109]
[258.17529297 -310.56616211]
[273.11227417 -312.18881226]
[288.12969971 -311.71679688]
[302.93527222 -309.15927124]
[317.24081421 -304.56604004]
[330.76782227 -298.02648926]
[343.25302124 -289.66790771]
[354.45339966 -279.65301514]
[364.15087891 -268.17672729]
[372.15673828 -255.46247864]
[378.31515503 -241.75772095]
[382.50619507 -227.32923889]
[384.64834595 -212.45787048]
[384.69985962 -197.43312073]
[382.65975952 -182.54740906]
[378.56774902 -168.09053040]
[372.50347900 -154.34385681]
[364.58499146 -141.57499695]
[354.96643066 -130.03250122]
[343.83502197 -119.94102478]
[331.40744019 -111.49701691]
[317.92559814 -104.86484528]
[303.65188599 -100.17359924]
[288.86419678 -97.51460266]
[273.85034180 -96.93960571]
[258.90261841 -98.45980835]
[244.31192017 -102.04560852]
[230.36230469 -107.62722015]
[222.90739441 -94.61090851]
[215.45248413 -81.59460449]
[207.99757385 -68.57829285]
[200.54266357 -55.56198120]
[193.22355652 -42.46882629]
[186.04104614 -29.30024529]
[186.52748108 -24.48995399]
[183.95202637 -19.33260155]
[178.27595520 -15.74235916]
[170.55187988 -2.88395691]
[162.82778931 9.97444534]
[155.10371399 22.83284760]
[147.37962341 35.69124985]
[139.65553284 48.54965210]
[131.93145752 61.40805435]
[144.04814148 76.15219879]
[149.77072144 94.35813141]
[148.26852417 113.38304138]
[139.75958252 130.46525574]
[125.47908020 143.12507629]
[107.50000000 149.52479553]
[107.50000000 164.52479553]
[107.50000000 179.52479553]
[107.50000000 194.52479553]
[107.50000000 209.52479553]
[107.50000000 224.52479553]
[107.50000000 239.52479553]
[107.50000000 254.52479553]
[107.50000000 269.52481079]
[107.50000000 284.52481079]
[122.03988647 288.58612061]
[134.94427490 296.42062378]
[145.25555420 307.44696045]
[152.20857239 320.84689331]
[155.28736877 335.62603760]
[154.26348877 350.68771362]
[149.21287537 364.91424561]
[140.51036072 377.24990845]
[128.80169678 386.77932739]
[114.95575714 392.79534912]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 36]
[23 35]
[24 34]
[52 125]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[58 119]
[59 116]
[60 115]
[62 114]
[63 113]
[64 112]
[65 111]
[66 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
