%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAACUCCGGGGGGGGGGUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGAxxxxxxxxxxGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACCCCCCCCCCCUUCCACUCC\
) } def
/len { sequence length } bind def

/coor [
[112.40294647 581.45129395]
[98.55700684 575.43524170]
[86.84835052 565.90582275]
[78.14582062 553.57019043]
[73.09522247 539.34368896]
[72.07132721 524.28198242]
[75.15013123 509.50280762]
[82.10314941 496.10290527]
[92.41443634 485.07656860]
[105.31881714 477.24203491]
[119.85870361 473.18072510]
[119.85870361 458.18072510]
[119.85870361 443.18072510]
[119.85870361 428.18072510]
[119.85870361 413.18072510]
[119.85870361 398.18072510]
[119.85870361 383.18072510]
[119.85870361 368.18072510]
[119.85870361 353.18072510]
[119.85870361 338.18072510]
[119.85870361 323.18072510]
[118.92307281 308.20993042]
[117.05545807 293.32666016]
[115.18785095 278.44338989]
[113.32023621 263.56011963]
[99.88331604 265.31210327]
[86.75457764 262.60205078]
[75.35916138 255.82099915]
[66.90225983 245.79646301]
[62.24182892 233.69253540]
[61.80213165 220.87503052]
[65.53677368 208.75758362]
[72.94417572 198.64562988]
[83.13267517 191.59590149]
[79.12493134 177.14122009]
[75.11718750 162.68652344]
[71.10945129 148.23184204]
[67.10170746 133.77714539]
[56.22288513 123.44994354]
[41.57938385 120.19911957]
[26.93588257 116.94829559]
[10.16281891 119.41825104]
[3.14614487 103.98443604]
[16.03439140 92.96946716]
[30.18670845 102.30479431]
[44.83020782 105.55561829]
[59.47371292 108.80644226]
[62.71779251 102.04434967]
[72.45004272 81.75806427]
[60.75041580 72.37090302]
[49.05079269 62.98374176]
[37.35116959 53.59657669]
[21.21318054 48.40027237]
[21.73897171 31.45447922]
[38.16807175 27.26866150]
[46.73833084 41.89695358]
[58.43795395 51.28411865]
[70.13758087 60.67127991]
[81.83720398 70.05844116]
[89.60504913 75.44831848]
[95.36978912 82.29193115]
[97.85490417 67.49922180]
[88.00827789 78.81487274]
[75.30794525 86.79620361]
[60.84114456 90.75997925]
[45.84629440 90.36688232]
[31.60704231 85.65055847]
[19.34234428 77.01474762]
[10.10212326 65.19873047]
[4.67739153 51.21401596]
[3.53253508 36.25777054]
[6.76556015 21.61032867]
[14.09970188 8.52559090]
[24.90711975 -1.87631941]
[38.26263809 -8.70494175]
[53.02295685 -11.37571144]
[67.92451477 -9.65999413]
[81.69165039 -3.70466638]
[93.14582825 5.98046494]
[101.30651093 18.56630135]
[105.47509766 32.97542572]
[105.29419708 47.97771454]
[113.28411102 35.28278351]
[121.27403259 22.58785629]
[129.26394653 9.89292622]
[124.30789185 -4.93851089]
[130.09284973 -19.46669769]
[143.88735962 -26.83186913]
[159.17805481 -23.55641747]
[168.74514771 -11.18690872]
[168.07135010 4.43615103]
[157.47480774 15.93603230]
[141.95887756 17.88284302]
[133.96896362 30.57777214]
[125.97904205 43.27270126]
[117.98912811 55.96763229]
[112.64761353 69.98434448]
[110.16249847 84.77705383]
[122.42262268 114.42449188]
[81.55639648 129.76940918]
[85.56414032 144.22410583]
[89.57187653 158.67878723]
[93.57962036 173.13346863]
[97.58735657 187.58816528]
[107.80467987 187.74006653]
[117.74607086 190.69694519]
[126.64502716 196.31723022]
[133.79244995 204.25103760]
[138.59288025 213.96113586]
[140.61351013 224.75897217]
[139.62202454 235.85342407]
[154.58227539 236.94473267]
[169.54252625 238.03604126]
[185.77958679 233.15808105]
[194.96176147 247.41023254]
[183.80847168 260.17895508]
[168.45121765 252.99629211]
[153.49096680 251.90498352]
[138.53071594 250.81365967]
[128.20352173 261.69250488]
[130.07112122 276.57577515]
[131.93873596 291.45904541]
[133.80635071 306.34234619]
[144.15586853 295.48474121]
[159.14572144 294.93304443]
[170.26536560 305.00048828]
[171.20156860 319.97125244]
[161.42280579 331.34561157]
[146.48101807 332.66571045]
[134.85870361 323.18072510]
[134.85870361 338.18072510]
[134.85870361 353.18072510]
[134.85870361 368.18072510]
[134.85870361 383.18072510]
[134.85870361 398.18072510]
[134.85870361 413.18072510]
[134.85870361 428.18072510]
[134.85870361 443.18072510]
[134.85870361 458.18072510]
[134.85870361 473.18072510]
[149.39859009 477.24203491]
[162.30296326 485.07656860]
[172.61425781 496.10290527]
[179.56727600 509.50280762]
[182.64607239 524.28198242]
[181.62217712 539.34368896]
[176.57157898 553.57019043]
[167.86906433 565.90582275]
[156.16040039 575.43524170]
[142.31445312 581.45129395]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 123]
[23 122]
[24 121]
[25 120]
[34 104]
[35 103]
[36 102]
[37 101]
[38 100]
[39 47]
[40 46]
[41 45]
[49 59]
[50 58]
[51 57]
[52 56]
[61 98]
[62 97]
[82 96]
[83 95]
[84 94]
[85 93]
[111 119]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
