%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCAUCAUGGGGGGGGGGUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAxxxxxxxxxxGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUCCCCCCCCCCUUGCCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[93.76533508 427.17276001]
[79.91939545 421.15673828]
[68.21073151 411.62731934]
[59.50820923 399.29165649]
[54.45760727 385.06512451]
[53.43371582 370.00344849]
[56.51251602 355.22427368]
[63.46553802 341.82434082]
[73.77682495 330.79800415]
[86.68120575 322.96350098]
[101.22109222 318.90219116]
[101.22109222 303.90219116]
[101.22109222 288.90219116]
[101.22109222 273.90219116]
[101.22109222 258.90219116]
[101.22109222 243.90219116]
[101.22109222 228.90219116]
[101.22109222 213.90219116]
[101.22109222 198.90219116]
[101.22109222 183.90219116]
[92.87252808 175.09260559]
[92.78810883 162.55418396]
[101.56118774 153.04173279]
[101.87324524 138.04498291]
[102.18530273 123.04822540]
[94.72161865 136.05950928]
[91.82298279 150.77676392]
[81.57865906 161.73368835]
[67.08924103 165.61398315]
[52.74014282 161.24322510]
[42.87432480 149.94430542]
[40.47780991 135.13699341]
[46.27593613 121.30290985]
[58.51382065 112.62915039]
[73.48796082 111.74104309]
[87.38671112 106.09971619]
[72.48480988 104.38702393]
[57.58290863 102.67433167]
[42.76095200 109.69156647]
[29.42860603 100.14271545]
[31.30105019 83.85081482]
[46.45207214 77.57557678]
[59.29560089 87.77243042]
[74.19750214 89.48512268]
[89.09940338 91.19781494]
[102.19255829 83.87870789]
[108.53968811 70.28775787]
[114.88681793 56.69680405]
[121.23394775 43.10585403]
[127.58107758 29.51490402]
[133.92820740 15.92395210]
[140.27532959 2.33300138]
[127.30856323 -5.22861290]
[115.08312988 -13.93804073]
[103.70035553 -23.72311211]
[93.25455475 -34.50274277]
[83.83228302 -46.18761063]
[75.51162720 -58.68088531]
[68.36153412 -71.87904358]
[62.44124222 -85.67271423]
[57.79982376 -99.94760895]
[54.47573090 -114.58541870]
[52.49651337 -129.46487427]
[51.87857056 -144.46264648]
[52.62702179 -159.45448303]
[54.73566818 -174.31613159]
[58.18703461 -188.92446899]
[62.95251846 -203.15841675]
[68.99263763 -216.90003967]
[76.25733185 -230.03547668]
[84.68640900 -242.45585632]
[94.21002197 -254.05827332]
[104.74924469 -264.74658203]
[116.21675110 -274.43222046]
[128.51751709 -283.03491211]
[141.54962158 -290.48336792]
[155.20504761 -296.71591187]
[169.37066650 -301.68084717]
[183.92907715 -305.33703613]
[198.75965881 -307.65423584]
[213.73950195 -308.61315918]
[228.74447632 -308.20593262]
[243.65025330 -306.43591309]
[258.33331299 -303.31774902]
[272.67199707 -298.87725830]
[286.54745483 -293.15130615]
[299.84472656 -286.18728638]
[312.45364380 -278.04290771]
[324.26968384 -268.78570557]
[335.19497681 -258.49234009]
[345.13897705 -247.24810791]
[354.01925659 -235.14622498]
[361.76223755 -222.28692627]
[368.30377197 -208.77680969]
[373.58966064 -194.72779846]
[377.57608032 -180.25631714]
[380.23001099 -165.48229980]
[381.52947998 -150.52813721]
[381.46368408 -135.51777649]
[380.03317261 -120.57559204]
[377.24981689 -105.82540131]
[373.13665771 -91.38943481]
[367.72781372 -77.38730621]
[361.06805420 -63.93505096]
[353.21264648 -51.14413834]
[344.22659302 -39.12056732]
[334.18441772 -27.96396065]
[323.16931152 -17.76677322]
[311.27255249 -8.61350250]
[298.59271240 -0.57999784]
[285.23489380 6.26717234]
[271.30975342 11.87126827]
[256.93270874 16.18585205]
[242.22286987 19.17517281]
[227.30215454 20.81445694]
[212.29417419 21.09012032]
[197.32331848 19.99987984]
[182.51362610 17.55277061]
[167.98782349 13.76907063]
[153.86628723 8.68013096]
[147.51914978 22.27108192]
[141.17202759 35.86203384]
[134.82490540 49.45298386]
[128.47776794 63.04393387]
[122.13063812 76.63488770]
[115.78350830 90.22583771]
[117.18205261 123.36027527]
[116.86999512 138.35702515]
[116.55793762 153.35379028]
[125.81219482 169.23895264]
[116.22109222 183.90219116]
[116.22109222 198.90219116]
[116.22109222 213.90219116]
[116.22109222 228.90219116]
[116.22109222 243.90219116]
[116.22109222 258.90219116]
[116.22109222 273.90219116]
[116.22109222 288.90219116]
[116.22109222 303.90219116]
[116.22109222 318.90219116]
[130.76097107 322.96350098]
[143.66535950 330.79800415]
[153.97663879 341.82434082]
[160.92965698 355.22427368]
[164.00846863 370.00344849]
[162.98457336 385.06512451]
[157.93397522 399.29165649]
[149.23144531 411.62731934]
[137.52278137 421.15673828]
[123.67684174 427.17276001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[36 45]
[37 44]
[38 43]
[46 126]
[47 125]
[48 124]
[49 123]
[50 122]
[51 121]
[52 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
