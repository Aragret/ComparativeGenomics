%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCAAAACGGGGGGGGGGGCUUAGCCUAGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCxxxxxxxxxxAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUACCCCCCCCCCACCUCAAAAC\
) } def
/len { sequence length } bind def

/coor [
[44.59642410 203.06013489]
[38.22800064 199.37388611]
[32.10387421 195.29461670]
[26.24826431 190.83848572]
[20.68432999 186.02308655]
[15.43407631 180.86749268]
[10.51826572 175.39208984]
[5.95634031 169.61851501]
[1.76634049 163.56961060]
[-2.03516221 157.26930237]
[-15.55935192 163.75747681]
[-29.01531792 170.38597107]
[-42.40160370 177.15408325]
[-55.78788757 183.92219543]
[-69.17417145 190.69030762]
[-82.56045532 197.45843506]
[-91.38486481 210.59008789]
[-106.23405457 209.42781067]
[-115.05845642 222.55947876]
[-129.90765381 221.39720154]
[-143.29393005 228.16531372]
[-156.68022156 234.93342590]
[-170.06649780 241.70153809]
[-174.75843811 256.79330444]
[-188.78630066 264.07302856]
[-203.82762146 259.22180176]
[-210.95863342 245.11776733]
[-205.94863892 230.12858582]
[-191.76998901 223.14707947]
[-176.83460999 228.31526184]
[-163.44833374 221.54714966]
[-150.06204224 214.77903748]
[-136.67576599 208.01091003]
[-128.80883789 195.36335754]
[-113.00216675 196.04153442]
[-105.13523865 183.39396667]
[-89.32857513 184.07214355]
[-75.94228363 177.30403137]
[-62.55600357 170.53591919]
[-49.16971588 163.76780701]
[-35.78343201 156.99967957]
[-31.20367432 151.13696289]
[-22.04751778 150.23327637]
[-8.52332687 143.74511719]
[-14.80554390 122.59722900]
[-17.00654030 100.64604187]
[-15.04807281 78.67188263]
[-8.99976444 57.45591354]
[0.92337489 37.75234985]
[14.36858749 20.26162148]
[30.85790825 5.60551357]
[49.80516052 -5.69496679]
[70.53678894 -13.23809910]
[92.31580353 -16.75573158]
[114.36798859 -16.12281799]
[117.16030884 -30.86062431]
[119.95263672 -45.59843063]
[122.74495697 -60.33623505]
[125.53728485 -75.07404327]
[128.32960510 -89.81184387]
[131.12193298 -104.54965210]
[116.99085236 -109.67886353]
[103.86561584 -117.00855255]
[92.08620453 -126.34886932]
[81.95771790 -137.45787048]
[73.74252319 -150.04782104]
[67.65341187 -163.79260254]
[63.84809494 -178.33618164]
[62.42515182 -193.30184937]
[63.42143250 -208.30197144]
[66.81113434 -222.94799805]
[72.50645447 -236.86056519]
[80.35987091 -249.67930603]
[90.16796875 -261.07217407]
[101.67668152 -270.74407959]
[114.58791351 -278.44448853]
[128.56723022 -283.97393799]
[143.25253296 -287.18920898]
[158.26344299 -288.00701904]
[173.21113586 -286.40618896]
[187.70843506 -282.42819214]
[201.37980652 -276.17602539]
[213.87117004 -267.81167603]
[224.85891724 -257.55178833]
[234.05848694 -245.66212463]
[241.23156738 -232.45063782]
[246.19233704 -218.25955200]
[248.81234741 -203.45645142]
[249.02369690 -188.42477417]
[246.82090759 -173.55386353]
[242.26107788 -159.22892761]
[235.46226501 -145.82099915]
[226.60061646 -133.67738342]
[215.90565491 -123.11263275]
[203.65440369 -114.40039825]
[190.16419983 -107.76634979]
[175.78448486 -103.38231659]
[160.88771057 -101.36186981]
[145.85974121 -101.75733185]
[143.06741333 -87.01952362]
[140.27508545 -72.28171539]
[137.48275757 -57.54391098]
[134.69044495 -42.80610657]
[131.89811707 -28.06829834]
[129.10578918 -13.33049297]
[144.80203247 -8.09128284]
[159.60223389 -0.69022644]
[173.21037292 8.72465229]
[185.35429382 19.96505356]
[195.79110718 32.80617142]
[204.31208801 46.99117279]
[210.74681091 62.23636246]
[214.96656799 78.23683167]
[216.88697815 94.67256927]
[216.46963501 111.21485901]
[213.72286987 127.53284454]
[228.04545593 131.98965454]
[242.36805725 136.44647217]
[258.23724365 132.31108093]
[269.55895996 144.17491150]
[264.68643188 159.83346558]
[248.63208008 163.17857361]
[237.91123962 150.76907349]
[223.58865356 146.31225586]
[209.26605225 141.85543823]
[206.41911316 148.64073181]
[203.15129089 155.23367310]
[199.47554016 161.60815430]
[195.40637207 167.73899841]
[190.95989990 173.60194397]
[186.15368652 179.17379761]
[181.00674438 184.43254089]
[175.53944397 189.35737610]
[169.77339172 193.92880249]
[163.73141479 198.12876892]
[157.43737793 201.94064331]
[150.91618347 205.34936523]
[144.19363403 208.34146118]
[137.29629517 210.90505981]
[130.25146484 213.03007507]
[123.08699036 214.70805359]
[115.83121490 215.93240356]
[108.51282501 216.69824219]
[101.16077423 217.00256348]
[93.80413055 216.84416199]
[86.47199249 216.22366333]
[79.19335175 215.14352417]
[71.99699402 213.60800171]
[64.91139221 211.62319946]
[57.96455383 209.19692993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 44]
[11 43]
[12 41]
[13 40]
[14 39]
[15 38]
[16 37]
[18 35]
[20 33]
[21 32]
[22 31]
[23 30]
[55 105]
[56 104]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
