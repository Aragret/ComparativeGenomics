%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAACUUAGGGGGGGGGGAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACxxxxxxxxxxGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGCCCCCCCCCCACUCAACAUA\
) } def
/len { sequence length } bind def

/coor [
[95.47881317 386.49313354]
[81.63287354 380.47711182]
[69.92420959 370.94769287]
[61.22168350 358.61203003]
[56.17108154 344.38549805]
[55.14719009 329.32382202]
[58.22599030 314.54467773]
[65.17901611 301.14474487]
[75.49029541 290.11840820]
[88.39467621 282.28390503]
[102.93456268 278.22259521]
[102.93456268 263.22259521]
[102.93456268 248.22257996]
[102.93456268 233.22257996]
[102.93456268 218.22257996]
[102.93456268 203.22257996]
[102.93456268 188.22257996]
[102.93456268 173.22257996]
[102.93456268 158.22257996]
[102.93456268 143.22257996]
[74.60329437 117.92052460]
[82.71534729 92.49565125]
[71.41634369 82.62992859]
[60.11733627 72.76420593]
[53.61310577 71.09014130]
[49.57854080 66.97267151]
[48.56454086 62.24537659]
[37.68571472 51.91817093]
[26.80688858 41.59096527]
[15.92806339 31.26376152]
[5.04923820 20.93655586]
[-7.88881779 13.34664726]
[-22.21141434 8.88983154]
[-36.70701218 5.03267241]
[-51.35051346 1.78184664]
[-65.99401093 -1.46897912]
[-75.02210999 10.79533577]
[-88.26123810 18.32164574]
[-103.41764069 19.80597115]
[-117.86538696 14.99114418]
[-129.10131836 4.71136236]
[-135.17872620 -9.25233936]
[-135.04467773 -24.48066521]
[-128.72238159 -38.33521652]
[-117.30724335 -48.41560745]
[-102.77696991 -52.97534943]
[-87.64904785 -51.22444153]
[-74.54446411 -43.46623611]
[-65.73366547 -31.04489326]
[-62.74318695 -16.11248016]
[-48.09968567 -12.86165524]
[-33.45618439 -9.61082935]
[-30.98722458 -11.06395149]
[-27.77582550 -11.59394550]
[-24.18296051 -10.90604782]
[-20.67186546 -8.84612846]
[-17.75459862 -5.43276548]
[-3.43200207 -0.97594982]
[-13.37354946 -12.20829773]
[-20.13500404 -25.59794807]
[-23.27260780 -40.26612473]
[-22.58043480 -55.25014877]
[-18.10391617 -69.56659698]
[-10.13684559 -82.27587891]
[0.79788911 -92.54386902]
[13.98263264 -99.69666290]
[28.55205917 -103.26483154]
[43.54996490 -103.01418304]
[57.99202347 -98.96117401]
[70.93039703 -91.37180328]
[81.51591492 -80.74416351]
[89.05386353 -67.77576447]
[93.04949951 -53.31772614]
[93.24059296 -38.31894302]
[89.61460876 -23.76379776]
[82.40951538 -10.60755920]
[72.09819031 0.28632018]
[59.35737610 8.20286560]
[45.02326584 12.62250710]
[30.03661346 13.25517941]
[15.37644291 10.05773067]
[26.25526810 20.38493538]
[37.13409424 30.71214104]
[48.01292038 41.03934479]
[58.89174271 51.36655045]
[69.98306274 61.46519852]
[81.28206635 71.33092499]
[92.58106995 81.19664764]
[107.55185699 80.26101685]
[117.53458405 69.06525421]
[127.51731110 57.86948395]
[133.54560852 42.02347565]
[150.44114685 43.42956161]
[153.76715088 60.05406189]
[138.71307373 67.85221100]
[128.73034668 79.04798126]
[118.74762726 90.24374390]
[121.56360626 97.19502258]
[127.19556427 111.09757996]
[130.01153564 118.04885864]
[144.97178650 119.14016724]
[159.93203735 120.23147583]
[174.89228821 121.32278442]
[179.68673706 107.02369690]
[187.88729858 94.36662292]
[198.97846985 84.14719391]
[212.26306152 77.00781250]
[226.90596008 73.39727020]
[241.98674011 73.54252625]
[256.55737305 77.43444824]
[269.70199585 84.82839203]
[280.59423828 95.25955963]
[288.54949951 108.07225037]
[293.06762695 122.46103668]
[293.86465454 137.52143860]
[290.89047241 152.30673218]
[284.33203125 165.88751221]
[274.60159302 177.41007996]
[262.31082153 186.15011597]
[248.23236084 191.55819702]
[233.25115967 193.29440308]
[218.30895996 191.24955750]
[204.34503174 185.55221558]
[192.23716736 176.56053162]
[182.74647522 164.83970642]
[176.46955872 151.12654114]
[173.80097961 136.28303528]
[158.84072876 135.19172668]
[143.88047791 134.10041809]
[128.92022705 133.00910950]
[117.93456268 143.22257996]
[117.93456268 158.22257996]
[117.93456268 173.22257996]
[117.93456268 188.22257996]
[117.93456268 203.22257996]
[117.93456268 218.22257996]
[117.93456268 233.22257996]
[117.93456268 248.22257996]
[117.93456268 263.22259521]
[117.93456268 278.22259521]
[132.47445679 282.28390503]
[145.37882996 290.11840820]
[155.69010925 301.14474487]
[162.64314270 314.54467773]
[165.72193909 329.32382202]
[164.69804382 344.38549805]
[159.64744568 358.61203003]
[150.94491577 370.94769287]
[139.23625183 380.47711182]
[125.39031982 386.49313354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 88]
[23 87]
[24 86]
[27 85]
[28 84]
[29 83]
[30 82]
[31 81]
[32 58]
[33 57]
[34 52]
[35 51]
[36 50]
[89 97]
[90 96]
[91 95]
[100 130]
[101 129]
[102 128]
[103 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
