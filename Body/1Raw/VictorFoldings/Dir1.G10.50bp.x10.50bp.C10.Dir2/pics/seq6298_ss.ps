%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGCACAGGGGGGGGGGGCUCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUxxxxxxxxxxCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCCCCCCCCCCCUAGGCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.66962433 595.70776367]
[71.82368469 589.69171143]
[60.11502075 580.16229248]
[51.41249847 567.82666016]
[46.36189651 553.60009766]
[45.33800507 538.53845215]
[48.41680527 523.75927734]
[55.36982727 510.35934448]
[65.68110657 499.33303833]
[78.58548737 491.49850464]
[93.12538147 487.43719482]
[93.12538147 472.43719482]
[93.12538147 457.43719482]
[93.12538147 442.43719482]
[93.12538147 427.43719482]
[93.12538147 412.43719482]
[93.12538147 397.43719482]
[93.12538147 382.43719482]
[93.12538147 367.43719482]
[93.12538147 352.43719482]
[93.12538147 337.43719482]
[78.42981720 334.53640747]
[64.57816315 328.82241821]
[52.10350418 320.51312256]
[41.48632812 309.92626953]
[33.13600922 297.46746826]
[27.37504005 283.61450195]
[24.42656517 268.89904785]
[24.40574265 253.88633728]
[27.31524277 239.15335083]
[33.04508209 225.26669312]
[41.37677383 212.76080322]
[51.99165726 202.11735535]
[64.48309326 193.74674988]
[78.37202454 187.97224426]
[93.12538147 185.01750183]
[93.12538147 170.01750183]
[93.12538147 155.01750183]
[92.50140381 140.03048706]
[91.25452423 125.08239746]
[90.00765228 110.13431549]
[82.41773987 97.19625854]
[69.97830200 88.81410980]
[57.53886414 80.43196869]
[42.21822739 83.24548340]
[29.72227097 74.56759644]
[27.13443184 59.94437027]
[14.69499207 51.56222534]
[2.25555182 43.18008423]
[-10.18388844 34.79793930]
[-26.69796944 30.96108627]
[-27.58261490 14.03023529]
[-11.55832195 8.49323559]
[-1.80174530 22.35849953]
[10.63769531 30.74064255]
[23.07713509 39.12278748]
[35.51657486 47.50492859]
[50.04156113 44.41294479]
[62.77632904 52.73642349]
[65.92100525 67.99253082]
[78.36044312 76.37467194]
[90.79988861 84.75681305]
[83.90186310 71.43701172]
[77.00383759 58.11719894]
[70.10581970 44.79739380]
[58.42792130 35.38321686]
[50.48205948 22.66066742]
[47.14663315 8.03620338]
[48.79036713 -6.87346172]
[55.23155594 -20.42008781]
[65.75813293 -31.10611725]
[79.20639801 -37.75022507]
[94.08966827 -39.61791229]
[108.76261902 -36.50271225]
[121.60317993 -28.74900627]
[131.19184875 -17.21395111]
[136.46861267 -3.17273235]
[136.85011292 11.82241535]
[132.29420471 26.11380005]
[123.30419922 38.12184906]
[119.91106415 52.73303223]
[116.51793671 67.34421539]
[113.12480927 81.95539856]
[123.10752869 70.75962830]
[133.09025574 59.56386566]
[143.07298279 48.36809921]
[153.05570984 37.17233276]
[163.03843689 25.97656822]
[158.80348206 11.14185429]
[163.28294373 -3.62087059]
[175.04742432 -13.60087585]
[190.34292603 -15.61357689]
[204.28872681 -9.01672935]
[212.43475342 4.08463669]
[212.18164062 19.50992393]
[203.61016846 32.33697891]
[189.45544434 38.47273254]
[174.23420715 35.95929337]
[164.25148010 47.15505981]
[154.26875305 58.35082626]
[144.28602600 69.54659271]
[134.30329895 80.74235535]
[124.32057190 91.93812561]
[120.27103424 102.87012482]
[112.63579559 108.67043304]
[104.95574188 108.88743591]
[106.20261383 123.83552551]
[107.44948578 138.78361511]
[110.14949036 142.37129211]
[111.39952087 146.24537659]
[111.29241943 149.90193176]
[110.07904053 152.92214966]
[108.12538147 155.01750183]
[108.12538147 170.01750183]
[108.12538147 185.01750183]
[122.87873077 187.97224426]
[136.76766968 193.74674988]
[149.25909424 202.11735535]
[159.87397766 212.76080322]
[168.20567322 225.26669312]
[173.93551636 239.15335083]
[176.84501648 253.88633728]
[176.82418823 268.89904785]
[173.87571716 283.61450195]
[168.11474609 297.46746826]
[159.76443481 309.92626953]
[149.14724731 320.51312256]
[136.67259216 328.82241821]
[122.82093811 334.53640747]
[108.12538147 337.43719482]
[108.12538147 352.43719482]
[108.12538147 367.43719482]
[108.12538147 382.43719482]
[108.12538147 397.43719482]
[108.12538147 412.43719482]
[108.12538147 427.43719482]
[108.12538147 442.43719482]
[108.12538147 457.43719482]
[108.12538147 472.43719482]
[108.12538147 487.43719482]
[122.66526794 491.49850464]
[135.56964111 499.33303833]
[145.88093567 510.35934448]
[152.83395386 523.75927734]
[155.91275024 538.53845215]
[154.88885498 553.60009766]
[149.83825684 567.82666016]
[141.13572693 580.16229248]
[129.42707825 589.69171143]
[115.58113098 595.70776367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[36 115]
[37 114]
[38 113]
[39 108]
[40 107]
[41 106]
[42 62]
[43 61]
[44 60]
[47 57]
[48 56]
[49 55]
[50 54]
[83 103]
[84 102]
[85 101]
[86 100]
[87 99]
[88 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
