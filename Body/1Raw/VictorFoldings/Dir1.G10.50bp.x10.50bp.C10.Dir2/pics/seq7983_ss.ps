%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAACUAAGGGGGGGGGGAUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCxxxxxxxxxxACGGACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCCCCCCCCCCCGCCAACUAA\
) } def
/len { sequence length } bind def

/coor [
[84.31609344 409.45574951]
[71.09590149 402.18328857]
[60.20909500 391.73626709]
[52.39796448 378.82702637]
[48.19508362 364.33572388]
[47.88700867 349.25036621]
[51.49475098 334.59954834]
[58.77232361 321.38217163]
[69.22353363 310.49938965]
[82.13579559 302.69323730]
[96.62873077 298.49597168]
[96.31667328 283.49920654]
[96.00461578 268.50244141]
[95.69255829 253.50570679]
[95.38050842 238.50894165]
[95.06845093 223.51219177]
[94.75639343 208.51544189]
[94.44433594 193.51869202]
[94.13227844 178.52192688]
[93.82022095 163.52517700]
[93.50817108 148.52842712]
[93.19611359 133.53167725]
[74.41778564 127.75643158]
[60.34686279 111.47420502]
[56.72619247 88.35858917]
[66.57063293 65.07587433]
[88.72611237 49.36260986]
[77.63479614 39.26396179]
[66.54347992 29.16531181]
[55.45216751 19.06666183]
[42.06587982 12.29854679]
[27.35791969 9.35306454]
[12.64995861 6.40758181]
[-2.05800295 3.46209908]
[-9.91737556 16.42381477]
[-21.73788071 25.91335869]
[-36.09213638 30.78482246]
[-51.24679565 30.44995499]
[-65.37185669 24.94919014]
[-76.76165771 14.94677544]
[-84.04081726 1.65054774]
[-86.33033752 -13.33390713]
[-83.35375977 -28.19714355]
[-75.47051239 -41.14435196]
[-63.63254166 -50.61209869]
[-49.26933289 -55.45709991]
[-34.11531830 -55.09430313]
[-20.00041580 -49.56752014]
[-8.62907028 -39.54412842]
[-1.37442780 -26.23451042]
[0.88747954 -11.24586201]
[15.59544086 -8.30037975]
[30.30340195 -5.35489750]
[45.01136398 -2.40941501]
[34.01127625 -12.60735798]
[25.50385475 -24.96145821]
[19.89981461 -38.87528992]
[17.46970749 -53.67713547]
[18.33084869 -68.65239716]
[22.44166756 -83.07810974]
[29.60370255 -96.25783539]
[39.47119141 -107.55529785]
[51.56775284 -116.42508698]
[65.30941010 -122.43898773]
[80.03273773 -125.30666351]
[95.02693939 -124.88967896]
[109.56813812 -121.20816040]
[122.95431519 -114.43984222]
[134.53923035 -104.91147614]
[143.76359558 -93.08306885]
[150.18206787 -79.52566528]
[153.48480225 -64.89378357]
[153.51234436 -49.89381027]
[150.26335144 -35.24990082]
[143.89468384 -21.66902733]
[134.71380615 -9.80683708]
[123.16395569 -0.23600395]
[109.80271912 6.58141708]
[95.27513123 10.31629848]
[80.28256226 10.78833199]
[65.55081940 7.97534609]
[76.64212799 18.07399559]
[87.73344421 28.17264557]
[98.82476044 38.27129364]
[113.68781281 36.24895859]
[121.67772675 23.55403137]
[119.53581238 7.65460443]
[130.73464966 -3.83302522]
[146.68344116 -2.09653163]
[155.14764404 11.53199577]
[149.63424683 26.59791756]
[134.37265015 31.54394722]
[126.38273621 44.23887634]
[137.47406006 54.33752441]
[149.36643982 45.19579315]
[155.12548828 29.84114265]
[171.34471130 27.41858864]
[181.33915710 40.42024994]
[174.82739258 55.47112656]
[158.50816345 57.08817291]
[146.61578369 66.22990417]
[151.51733398 80.40646362]
[166.51652527 80.25042725]
[170.80636597 65.75598907]
[179.17932129 53.17087555]
[190.89085388 43.61414337]
[204.89961243 37.93556976]
[219.95993042 36.64009094]
[234.73266602 39.84289932]
[247.90420532 47.25920486]
[258.30337524 58.22955322]
[265.00549316 71.77846527]
[267.41461182 86.70118713]
[265.31646729 101.67079926]
[258.89767456 115.35621643]
[248.72897339 126.54052734]
[235.71455383 134.22924805]
[221.01165771 137.73869324]
[205.92765808 136.75680542]
[191.80380249 131.37089539]
[179.89596558 122.05987549]
[171.26301575 109.65167236]
[166.67256165 95.24961853]
[151.67337036 95.40565491]
[145.79568481 112.46453857]
[135.03034973 125.01684570]
[121.69178009 131.96539307]
[108.19286346 133.21961975]
[108.50492096 148.21636963]
[108.81697845 163.21311951]
[109.12903595 178.20986938]
[109.44109344 193.20663452]
[109.75314331 208.20338440]
[110.06520081 223.20013428]
[110.37725830 238.19688416]
[110.68931580 253.19364929]
[111.00137329 268.19039917]
[111.31343079 283.18716431]
[111.62548065 298.18389893]
[126.28047943 301.77468872]
[139.50628662 309.03692627]
[150.40115356 319.47552490]
[158.22224426 332.37872314]
[162.43632507 346.86679077]
[162.75604248 361.95190430]
[159.15962219 376.60549927]
[151.89225769 389.82852173]
[141.44944763 400.71936035]
[128.54322815 408.53546143]
[114.05352783 412.74392700]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[27 84]
[28 83]
[29 82]
[30 81]
[31 54]
[32 53]
[33 52]
[34 51]
[85 93]
[86 92]
[94 101]
[95 100]
[102 124]
[103 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
