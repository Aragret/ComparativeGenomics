%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAUCAUUCGGGGGGGGGGUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCxxxxxxxxxxCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACCCCCCCCCCCAACCAUCAUUC\
) } def
/len { sequence length } bind def

/coor [
[95.99673462 395.27175903]
[82.50785828 388.54022217]
[71.02235413 378.77566528]
[62.20798492 366.54577637]
[56.57720566 352.56158447]
[54.45737457 337.63610840]
[55.97174454 322.63708496]
[61.03226852 308.43658447]
[69.34473419 295.86016846]
[80.42586517 285.63900757]
[93.63141632 278.36737061]
[108.19364166 274.46801758]
[107.88566589 259.47116089]
[107.57769012 244.47433472]
[107.26970673 229.47749329]
[106.96173096 214.48065186]
[106.65375519 199.48381042]
[106.34577942 184.48696899]
[106.03779602 169.49014282]
[105.72982025 154.49330139]
[105.42184448 139.49645996]
[105.11386871 124.49962616]
[84.18019104 115.07376862]
[81.92430115 95.30614471]
[70.47269440 105.06587982]
[57.34120178 112.40150452]
[43.03543472 117.03271484]
[28.10579300 118.78330231]
[13.12629700 117.58784485]
[-1.32748735 113.49414825]
[-14.70055771 106.66136169]
[-26.47978973 97.35375214]
[-36.21362305 85.93051910]
[-43.52938080 72.83191681]
[-48.14752579 58.56228638]
[-49.89234543 43.67063141]
[-48.69864273 28.72951889]
[-44.61415863 14.31303692]
[-37.79768372 0.97475535]
[-49.57981873 -8.30862999]
[-61.36195755 -17.59201622]
[-73.14409637 -26.87540054]
[-85.11434937 -35.91492081]
[-97.26768494 -44.70676422]
[-109.42102051 -53.49860382]
[-121.57434845 -62.29044724]
[-134.50056458 -54.29160690]
[-149.50465393 -51.85322189]
[-164.29861450 -55.34713364]
[-176.62644958 -64.24053955]
[-184.60827637 -77.17726135]
[-187.02693176 -92.18454742]
[-183.51356506 -106.97389221]
[-174.60394287 -119.29002380]
[-161.65673828 -127.25482941]
[-146.64628601 -129.65373230]
[-131.86157227 -126.12091064]
[-119.55716705 -117.19510651]
[-111.60939789 -104.23742676]
[-109.23024750 -89.22383118]
[-112.78250885 -74.44377899]
[-100.62917328 -65.65193939]
[-88.47584534 -56.86009598]
[-76.32250977 -48.06825256]
[-71.49208069 -47.94111252]
[-66.70475769 -44.73651505]
[-63.86071014 -38.65753937]
[-52.07857132 -29.37415314]
[-40.29643631 -20.09076691]
[-28.51429749 -10.80738163]
[-17.14083099 -20.55511856]
[-4.07994938 -27.89891243]
[10.16728687 -32.55488205]
[25.05388641 -34.34230042]
[40.00792694 -33.19061279]
[54.45452499 -29.14221382]
[67.83793640 -22.35089493]
[79.64294434 -13.07600021]
[89.41468048 -1.67252672]
[96.77615356 11.42246723]
[101.44281006 25.70661163]
[103.23351288 40.63149261]
[102.07756805 55.62372208]
[98.01754761 70.10694122]
[91.20768738 83.52400970]
[110.36706543 80.76438904]
[124.92191315 97.70182800]
[139.34928894 93.59688568]
[147.07598877 80.07150269]
[161.76588440 76.11402893]
[174.61265564 83.56359863]
[189.04003906 79.45864868]
[203.46742249 75.35370636]
[217.89480591 71.24876404]
[232.23486328 66.84845734]
[246.48155212 62.15465927]
[260.72824097 57.46086121]
[248.93153381 48.19599915]
[248.60952759 33.19945526]
[259.99768066 23.43676376]
[274.76892090 26.04644203]
[282.12246704 39.12028503]
[276.68182373 53.09821701]
[291.33453369 49.88922119]
[305.98727417 46.68022537]
[320.63998413 43.47122955]
[335.29272461 40.26223373]
[347.04071045 28.82034683]
[362.74804688 33.53326797]
[366.25637817 49.55274963]
[353.95660400 60.39931870]
[338.50170898 54.91495514]
[323.84899902 58.12395477]
[309.19625854 61.33295059]
[294.54354858 64.54194641]
[279.89080811 67.75093842]
[265.42205811 71.70755005]
[251.17535400 76.40135193]
[236.92866516 81.09515381]
[233.99443054 84.93435669]
[228.59204102 86.93486023]
[221.99975586 85.67614746]
[207.57237244 89.78108978]
[193.14497375 93.88603210]
[178.71759033 97.99098206]
[171.71675110 111.08768463]
[157.14379883 115.45620728]
[143.45423889 108.02426910]
[129.02685547 112.12921143]
[120.11070251 124.19164276]
[120.41868591 139.18849182]
[120.72666168 154.18531799]
[121.03463745 169.18215942]
[121.34261322 184.17900085]
[121.65059662 199.17584229]
[121.95857239 214.17266846]
[122.26654816 229.16950989]
[122.57452393 244.16635132]
[122.88249969 259.16317749]
[123.19048309 274.16003418]
[137.90051270 277.45825195]
[151.39347839 284.18161011]
[162.88488770 293.93920898]
[171.70668030 306.16375732]
[177.34593201 320.14453125]
[179.47480774 335.06872559]
[177.96952820 350.06863403]
[172.91761780 364.27221680]
[164.61277771 376.85366821]
[153.53785706 387.08154297]
[140.33670044 394.36117554]
[125.77684784 398.26937866]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 85]
[39 70]
[40 69]
[41 68]
[42 67]
[43 64]
[44 63]
[45 62]
[46 61]
[87 129]
[88 128]
[91 125]
[92 124]
[93 123]
[94 122]
[95 119]
[96 118]
[97 117]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
