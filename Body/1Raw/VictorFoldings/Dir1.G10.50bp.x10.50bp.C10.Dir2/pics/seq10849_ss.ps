%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCCUAGGGGGGGGGGGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCxxxxxxxxxxGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCCCCCCCCCCCUACUCCUA\
) } def
/len { sequence length } bind def

/coor [
[83.32127380 361.64663696]
[70.10107422 354.37414551]
[59.21427155 343.92715454]
[51.40314102 331.01791382]
[47.20025635 316.52658081]
[46.89218521 301.44125366]
[50.49992752 286.79043579]
[57.77750015 273.57302856]
[68.22870636 262.69027710]
[81.14096832 254.88412476]
[95.63390350 250.68682861]
[95.32185364 235.69007874]
[95.00979614 220.69332886]
[94.69773865 205.69657898]
[94.38568115 190.69981384]
[94.07362366 175.70306396]
[93.76156616 160.70631409]
[93.44951630 145.70956421]
[93.13745880 130.71279907]
[92.82540131 115.71604919]
[79.65681458 108.53353882]
[66.87946320 116.39096832]
[59.55712509 131.06460571]
[43.17402649 131.78987122]
[34.58368683 117.82068634]
[42.62311554 103.52734375]
[59.02203369 103.61360931]
[71.79939270 95.75618744]
[69.42248535 88.64279175]
[62.29176331 67.30262756]
[47.35745621 68.70493317]
[32.42314529 70.10723114]
[22.53579903 82.43670654]
[6.81722546 84.08048248]
[-5.40702343 74.06333160]
[-6.88451767 58.32825470]
[3.26131439 46.21059799]
[19.01112938 44.89954758]
[31.02084351 55.17292786]
[45.95515060 53.77062225]
[60.88945770 52.36832047]
[73.06822968 60.46291733]
[83.42486572 70.26200867]
[91.76057434 81.49948120]
[97.90997314 93.88810730]
[104.81697083 80.57294464]
[111.72397614 67.25778961]
[118.63097382 53.94263840]
[125.53797150 40.62747955]
[112.82279205 32.65396500]
[100.79983521 23.67056656]
[89.54912567 13.73707104]
[79.14553070 2.91958475]
[69.65828705 -8.70990181]
[61.15052795 -21.07399750]
[53.67887497 -34.09041595]
[47.29304886 -47.67253876]
[42.03554916 -61.72997284]
[37.94136047 -76.16917419]
[35.03773499 -90.89404297]
[33.34399414 -105.80658722]
[32.87141037 -120.80757141]
[33.62312317 -135.79714966]
[35.59413528 -150.67559814]
[38.77133179 -165.34387207]
[43.13356018 -179.70436096]
[48.65179825 -193.66149902]
[55.28932190 -207.12240601]
[63.00195312 -219.99751282]
[71.73837280 -232.20111084]
[81.44042969 -243.65199280]
[92.04356384 -254.27397156]
[103.47721863 -263.99633789]
[115.66529083 -272.75439453]
[128.52668762 -280.48986816]
[141.97578430 -287.15127563]
[155.92311096 -292.69427490]
[170.27584839 -297.08197021]
[184.93846130 -300.28518677]
[199.81336975 -302.28262329]
[214.80160522 -303.06091309]
[229.80340576 -302.61495972]
[244.71893311 -300.94769287]
[259.44891357 -298.07019043]
[273.89535522 -294.00164795]
[287.96212769 -288.76910400]
[301.55554199 -282.40740967]
[314.58520508 -274.95886230]
[326.96438599 -266.47305298]
[338.61068726 -257.00646973]
[349.44662476 -246.62208557]
[359.40005493 -235.38902283]
[368.40478516 -223.38203430]
[376.40084839 -210.68101501]
[383.33505249 -197.37051392]
[389.16125488 -183.53909302]
[393.84066772 -169.27879333]
[397.34216309 -154.68453979]
[399.64242554 -139.85343933]
[400.72613525 -124.88418579]
[400.58612061 -109.87641907]
[399.22326660 -94.93000031]
[396.64669800 -80.14439392]
[392.87350464 -65.61801147]
[387.92883301 -51.44751358]
[381.84558105 -37.72720718]
[374.66421509 -24.54840088]
[366.43255615 -11.99879742]
[357.20535278 -0.16191445]
[347.04406738 10.88347435]
[336.01626587 21.06386375]
[324.19534302 30.31150246]
[311.65997314 38.56484985]
[298.49362183 45.76897812]
[284.78384399 51.87594604]
[270.62191772 56.84511185]
[256.10208130 60.64340973]
[241.32095337 63.24555206]
[226.37690735 64.63423157]
[211.36941528 64.80020142]
[196.39831543 63.74236298]
[181.56324768 61.46775055]
[166.96296692 57.99150085]
[152.69459534 53.33675385]
[138.85311890 47.53448105]
[131.94612122 60.84963608]
[125.03913116 74.16478729]
[118.13213348 87.47994995]
[111.22512817 100.79510498]
[107.82215118 115.40399170]
[108.13420868 130.40074158]
[108.44626617 145.39750671]
[108.75832367 160.39425659]
[109.07038116 175.39100647]
[109.38243866 190.38775635]
[109.69448853 205.38452148]
[110.00654602 220.38127136]
[110.31860352 235.37802124]
[110.63066101 250.37477112]
[125.28565216 253.96554565]
[138.51145935 261.22781372]
[149.40632629 271.66641235]
[157.22743225 284.56961060]
[161.44149780 299.05767822]
[161.76121521 314.14276123]
[158.16479492 328.79638672]
[150.89743042 342.01937866]
[140.45462036 352.91021729]
[127.54840088 360.72631836]
[113.05870819 364.93481445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 28]
[22 27]
[30 41]
[31 40]
[32 39]
[45 129]
[46 128]
[47 127]
[48 126]
[49 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
