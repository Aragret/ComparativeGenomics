%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUAAUCAUUUUGGGGGGGGGGCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAxxxxxxxxxxGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUACCCCCCCCCCUGAUAAUCAUAUU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 388.05511475]
[70.75619507 383.24566650]
[57.85220718 375.48028564]
[46.91955185 365.12213135]
[38.46956635 352.65570068]
[32.89747238 338.66409302]
[30.46388245 323.80166626]
[31.28262329 308.76358032]
[35.31539917 294.25320435]
[42.37359238 280.94921875]
[52.12707901 269.47387695]
[64.11966705 260.36389160]
[77.79044342 254.04534912]
[92.50000000 250.81379700]
[92.50000000 235.81379700]
[92.50000000 220.81379700]
[92.50000000 205.81379700]
[92.50000000 190.81379700]
[92.50000000 175.81379700]
[92.50000000 160.81379700]
[92.50000000 145.81379700]
[92.50000000 130.81379700]
[92.50000000 115.81378937]
[86.24396515 102.18067169]
[74.87205505 92.39906311]
[64.03040314 102.78241730]
[52.23720932 112.07090759]
[39.60259247 120.17781830]
[26.24452019 127.02745056]
[12.28771782 132.55584717]
[-2.13750100 136.71139526]
[-16.89645004 139.45529175]
[-31.85132217 140.76191711]
[-46.86248779 140.61907959]
[-61.78979111 139.02809143]
[-76.49385071 136.00382996]
[-90.83737183 131.57450867]
[-104.68643951 125.78151703]
[-117.91174316 118.67891693]
[-130.38980103 110.33303833]
[-142.00408936 100.82179260]
[-152.64617920 90.23400879]
[-162.21672058 78.66851807]
[-170.62632751 66.23332977]
[-177.79649353 53.04453659]
[-183.66026306 39.22528458]
[-188.16290283 24.90460587]
[-191.26234436 10.21621227]
[-192.92967224 -4.70275307]
[-193.14932251 -19.71299171]
[-191.91921997 -34.67435455]
[-189.25085449 -49.44714737]
[-185.16915894 -63.89343643]
[-179.71223450 -77.87834167]
[-172.93103027 -91.27127838]
[-164.88887024 -103.94720459]
[-155.66082764 -115.78775787]
[-145.33308411 -126.68239594]
[-134.00204468 -136.52938843]
[-121.77352905 -145.23678589]
[-108.76170349 -152.72331238]
[-95.08806610 -158.91903687]
[-80.88027954 -163.76612854]
[-66.27100372 -167.21932983]
[-51.39664078 -169.24638367]
[-36.39608383 -169.82838440]
[-21.40937996 -168.95988464]
[-6.57646751 -166.64898682]
[7.96416283 -162.91729736]
[22.07674599 -157.79962158]
[35.62951279 -151.34376526]
[48.49591827 -143.61000061]
[60.55583572 -134.67054749]
[71.69665527 -124.60885620]
[81.81436157 -113.51888275]
[90.81448364 -101.50417328]
[98.61299133 -88.67690277]
[105.13706207 -75.15684509]
[110.32579041 -61.07023239]
[114.13072205 -46.54859161]
[116.51632690 -31.72751236]
[117.46034241 -16.74537849]
[116.95394897 -1.74207520]
[115.00187683 13.14231014]
[111.62234497 27.76880264]
[106.84691620 42.00083542]
[100.72017670 55.70552826]
[93.29932404 68.75491333]
[84.65366364 81.02716064]
[96.02556610 90.80876160]
[98.44989777 88.43670654]
[101.87998962 86.81362152]
[106.05728149 86.30725098]
[110.60040283 87.19197845]
[115.03890228 89.61048889]
[129.87030029 87.36779022]
[144.70169067 85.12508392]
[159.53309631 82.88238525]
[174.36448669 80.63968658]
[189.19587708 78.39698792]
[204.02728271 76.15428925]
[218.85867310 73.91158295]
[222.51112366 60.22798157]
[231.08546448 49.01036835]
[243.25598145 41.93861771]
[257.16162109 40.05578995]
[270.69055176 43.61438370]
[281.80096436 52.04306412]
[288.82910156 64.03809357]
[303.70239258 62.09260178]
[318.57571411 60.14710617]
[333.44900513 58.20161438]
[346.13153076 47.80517960]
[361.37881470 53.84273911]
[363.50576782 70.10337067]
[350.32437134 79.85952759]
[335.39450073 73.07491302]
[320.52120972 75.02040863]
[305.64788818 76.96589661]
[290.77459717 78.91139221]
[286.07354736 94.15699768]
[275.16473389 105.87800598]
[260.18713379 111.70196533]
[244.10998535 110.42002869]
[230.14430237 102.23751831]
[221.10136414 88.74298096]
[206.26997375 90.98567963]
[191.43858337 93.22837830]
[176.60717773 95.47108459]
[161.77578735 97.71378326]
[146.94439697 99.95648193]
[132.11299133 102.19918060]
[117.28160095 104.44188690]
[107.50000000 115.81378937]
[107.50000000 130.81379700]
[107.50000000 145.81379700]
[107.50000000 160.81379700]
[107.50000000 175.81379700]
[107.50000000 190.81379700]
[107.50000000 205.81379700]
[107.50000000 220.81379700]
[107.50000000 235.81379700]
[107.50000000 250.81379700]
[122.20955658 254.04534912]
[135.88034058 260.36389160]
[147.87292480 269.47387695]
[157.62640381 280.94921875]
[164.68460083 294.25320435]
[168.71737671 308.76358032]
[169.53611755 323.80166626]
[167.10252380 338.66409302]
[161.53042603 352.65570068]
[153.08044434 365.12213135]
[142.14779663 375.48028564]
[129.24380493 383.24566650]
[114.97203827 388.05511475]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 90]
[25 89]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
