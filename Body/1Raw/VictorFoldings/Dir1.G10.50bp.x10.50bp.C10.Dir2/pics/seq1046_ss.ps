%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAAGCACGGGGGGGGGGGCAGCAAUGCAGCUCAAAACGCUUAGCCUAGCCACACCCCCACGGGAAACAxxxxxxxxxxGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCACCCCCCCCCCCAUCAAGCCCG\
) } def
/len { sequence length } bind def

/coor [
[287.53723145 196.41363525]
[280.21884155 183.31387329]
[273.77291870 169.76351929]
[268.22698975 155.82060242]
[263.60488892 141.54479980]
[259.92633057 126.99727631]
[257.20715332 112.24030304]
[255.45892334 97.33708191]
[243.14541626 105.71723938]
[228.96641541 98.69822693]
[213.98617554 99.46788788]
[199.01463318 100.39129639]
[184.05334473 101.46836853]
[169.09207153 102.54544067]
[154.13078308 103.62250519]
[139.16950989 104.69957733]
[127.03065491 113.33078766]
[112.71053314 106.60437012]
[101.02852631 114.28697205]
[88.36653900 108.35691071]
[73.40525818 109.43397522]
[58.44397354 110.51104736]
[43.49454117 111.74166107]
[28.55852699 113.12568665]
[25.00090027 115.85385895]
[21.14438248 117.13870239]
[17.49174690 117.06795502]
[14.46264744 115.88737488]
[12.34825802 113.95854187]
[-2.65095139 114.11254120]
[-17.64383698 114.57446289]
[-32.62407684 115.34412384]
[-47.60432053 116.11378479]
[-56.88305283 128.70104980]
[-72.09398651 132.32893372]
[-86.05498505 125.28445435]
[-92.17408752 110.89381409]
[-87.56204224 95.95182037]
[-74.39652252 87.51363373]
[-58.89387512 89.56350708]
[-48.37397766 101.13354492]
[-33.39373779 100.36388397]
[-18.41349792 99.59422302]
[-14.57049561 96.66497040]
[-8.83174896 96.16031647]
[-2.80494833 99.11332703]
[12.19426155 98.95933533]
[27.17450142 98.18967438]
[42.11051559 96.80564880]
[48.52017593 93.03358459]
[57.36690521 95.54976654]
[72.32818604 94.47269440]
[87.28946686 93.39562988]
[98.97147369 85.71302795]
[111.63346100 91.64308929]
[124.84243774 82.93484497]
[138.09243774 89.73829651]
[153.05371094 88.66122437]
[168.01499939 87.58415985]
[182.97627258 86.50708771]
[197.93756104 85.43001556]
[206.33264160 81.67259216]
[213.21652222 84.48764801]
[228.19676208 83.71798706]
[241.58174133 75.28278351]
[254.68925476 82.35684204]
[254.90090942 67.35292816]
[256.09341431 52.39498138]
[258.26165771 37.54705429]
[261.39636230 22.87272644]
[265.48410034 8.43483925]
[270.50738525 -5.70478201]
[276.44470215 -19.48558998]
[283.27059937 -32.84857178]
[290.95587158 -45.73650360]
[299.46759033 -58.09420013]
[308.76934814 -69.86874390]
[318.82125854 -81.00971222]
[329.58032227 -91.46939087]
[341.00042725 -101.20300293]
[353.03271484 -110.16885376]
[365.62564087 -118.32855988]
[378.72525024 -125.64717102]
[392.27548218 -132.09335327]
[406.21832275 -137.63951111]
[420.49401855 -142.26188660]
[435.04150391 -145.94067383]
[449.79843140 -148.66014099]
[464.70159912 -150.40863037]
[479.68725586 -151.17864990]
[494.69116211 -150.96691895]
[509.64910889 -149.77433777]
[524.49700928 -147.60600281]
[539.17132568 -144.47120667]
[553.60919189 -140.38337708]
[567.74877930 -135.36001587]
[581.52954102 -129.42262268]
[594.89251709 -122.59664154]
[607.78039551 -114.91129303]
[620.13800049 -106.39948273]
[631.91253662 -97.09767151]
[643.05340576 -87.04568481]
[653.51306152 -76.28656769]
[663.24658203 -64.86638641]
[672.21234131 -52.83405685]
[680.37200928 -40.24109650]
[687.69055176 -27.14143181]
[694.13665771 -13.59115505]
[699.68267822 0.35170478]
[704.30499268 14.62744427]
[707.98370361 29.17493057]
[710.70306396 43.93186951]
[712.45147705 58.83506775]
[713.22143555 73.82070923]
[713.00958252 88.82462311]
[711.81689453 103.78255463]
[709.64849854 118.63045502]
[706.51361084 133.30474854]
[702.42572021 147.74258423]
[697.40222168 161.88215637]
[691.46478271 175.66288757]
[684.63873291 189.02578735]
[676.95330811 201.91363525]
[668.44140625 214.27122498]
[659.13952637 226.04565430]
[649.08746338 237.18650818]
[638.32830811 247.64605713]
[626.90808105 257.37954712]
[614.87567139 266.34524536]
[602.28265381 274.50479126]
[589.18298340 281.82327271]
[575.63262939 288.26928711]
[561.68975830 293.81527710]
[547.41400146 298.43746948]
[532.86645508 302.11608887]
[518.10955811 304.83538818]
[503.20632935 306.58370972]
[488.22067261 307.35354614]
[473.21676636 307.14163208]
[458.25885010 305.94888306]
[443.41094971 303.78036499]
[428.73666382 300.64541626]
[414.29885864 296.55740356]
[400.15933228 291.53387451]
[386.37863159 285.59631348]
[373.01577759 278.77017212]
[360.12796021 271.08468628]
[347.77041626 262.57272339]
[335.99603271 253.27078247]
[324.85525513 243.21865845]
[314.39575195 232.45941162]
[304.66235352 221.03912354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 66]
[10 64]
[11 63]
[12 61]
[13 60]
[14 59]
[15 58]
[16 57]
[18 55]
[20 53]
[21 52]
[22 51]
[23 49]
[24 48]
[29 47]
[30 46]
[31 43]
[32 42]
[33 41]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
