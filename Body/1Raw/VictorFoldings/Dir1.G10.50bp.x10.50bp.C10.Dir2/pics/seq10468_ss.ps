%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACCACAGGGGGGGGGGUUAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUAxxxxxxxxxxCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGCCCCCCCCCCACCCACAACA\
) } def
/len { sequence length } bind def

/coor [
[94.82714844 364.83810425]
[80.98120880 358.82208252]
[69.27254486 349.29266357]
[60.57001877 336.95700073]
[55.51941681 322.73046875]
[54.49552536 307.66879272]
[57.57432556 292.88964844]
[64.52735138 279.48971558]
[74.83863068 268.46337891]
[87.74301147 260.62887573]
[102.28289795 256.56756592]
[102.28289795 241.56755066]
[102.28289795 226.56755066]
[102.28289795 211.56755066]
[102.28289795 196.56755066]
[102.28289795 181.56755066]
[102.28289795 166.56755066]
[102.28289795 151.56755066]
[102.28289795 136.56755066]
[102.28289795 121.56755829]
[89.50553894 113.71012878]
[76.11925507 120.47824097]
[62.73297119 127.24636078]
[58.04103851 142.33811951]
[44.01317215 149.61785889]
[28.97185898 144.76661682]
[21.84084320 130.66258240]
[26.85083008 115.67339325]
[41.02948380 108.69189453]
[55.96485901 113.86007690]
[69.35114288 107.09195709]
[82.73742676 100.32384491]
[81.88108063 92.87289429]
[66.97914886 94.58533478]
[65.26696014 79.68337250]
[80.16839600 77.97099304]
[79.31204987 70.52004242]
[64.73934937 66.96527863]
[50.16664124 63.41051483]
[38.41828156 73.54736328]
[22.95259666 74.80918121]
[9.71645641 66.71076965]
[3.79942727 52.36614227]
[7.47672796 37.29109573]
[19.33436203 27.28229141]
[34.81282425 26.18832207]
[47.96033478 34.42984009]
[53.72140503 48.83781433]
[68.29410553 52.39257431]
[82.86681366 55.94733810]
[69.59288025 48.96144104]
[62.53778458 35.72415924]
[64.13957214 20.80992889]
[73.84471130 9.37269783]
[88.29937744 5.36485767]
[102.50842285 10.17140770]
[111.56160736 22.13133621]
[112.33039093 37.11162186]
[104.54884338 49.93572617]
[115.21047211 39.38443756]
[125.87209320 28.83314514]
[136.53372192 18.28185463]
[147.19534302 7.73056507]
[157.85697937 -2.82072496]
[143.22126770 0.46502429]
[128.30192566 -1.08848429]
[114.65712738 -7.31900358]
[103.71191406 -17.57582092]
[96.60940552 -30.78772163]
[94.09137726 -45.57486343]
[96.42081451 -60.39288330]
[103.35442352 -73.69419861]
[114.16807556 -84.08963013]
[127.73239899 -90.49347687]
[142.63072205 -92.23693085]
[157.30711365 -89.13790894]
[170.22872925 -81.52007294]
[180.04609680 -70.17901611]
[185.73385620 -56.29919434]
[186.69798279 -41.33021164]
[182.83781433 -26.83541679]
[174.55442810 -14.32643032]
[188.21067810 -20.53183746]
[201.86691284 -26.73724365]
[215.52314758 -32.94264984]
[228.04911804 -41.19494247]
[239.14042664 -51.29359055]
[250.23175049 -61.39223862]
[261.32305908 -71.49089050]
[262.52194214 -75.81803131]
[264.83157349 -79.17013550]
[267.79586792 -81.31371307]
[270.92987061 -82.19238281]
[273.78176880 -81.92047882]
[285.67416382 -91.06221771]
[291.43322754 -106.41686249]
[307.65243530 -108.83941650]
[317.64688110 -95.83776093]
[311.13513184 -80.78688049]
[294.81588745 -79.16983795]
[282.92352295 -70.02809906]
[271.42172241 -60.39957428]
[260.33038330 -50.30092621]
[249.23907471 -40.20227432]
[238.14776611 -30.10362434]
[252.95053101 -32.52807617]
[267.64999390 -29.54050636]
[280.33193970 -21.52997017]
[289.34481812 -9.53964138]
[293.51495361 4.86903763]
[292.29925537 19.81969452]
[285.85607910 33.36537552]
[275.02447510 43.74209595]
[261.21499634 49.59854126]
[246.22596741 50.17205811]
[232.00933838 45.38795853]
[220.41648865 35.86925507]
[212.95707703 22.85551834]
[210.60253906 8.04146671]
[213.65945435 -6.64373636]
[221.72856140 -19.28640938]
[208.07232666 -13.08100319]
[194.41607666 -6.87559605]
[180.75984192 -0.67018896]
[168.40826416 7.84090137]
[157.74664307 18.39219093]
[147.08500671 28.94348145]
[136.42338562 39.49477005]
[125.76175690 50.04606247]
[115.10013580 60.59735107]
[117.28289795 121.56755829]
[117.28289795 136.56755066]
[117.28289795 151.56755066]
[117.28289795 166.56755066]
[117.28289795 181.56755066]
[117.28289795 196.56755066]
[117.28289795 211.56755066]
[117.28289795 226.56755066]
[117.28289795 241.56755066]
[117.28289795 256.56756592]
[131.82278442 260.62887573]
[144.72717285 268.46337891]
[155.03845215 279.48971558]
[161.99147034 292.88964844]
[165.07026672 307.66879272]
[164.04638672 322.73046875]
[158.99577332 336.95700073]
[150.29325867 349.29266357]
[138.58459473 358.82208252]
[124.73865509 364.83810425]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 32]
[22 31]
[23 30]
[37 50]
[38 49]
[39 48]
[59 130]
[60 129]
[61 128]
[62 127]
[63 126]
[64 125]
[82 124]
[83 123]
[84 122]
[85 121]
[86 105]
[87 104]
[88 103]
[89 102]
[94 101]
[95 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
