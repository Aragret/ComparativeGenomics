%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAAAACCCGGGGGGGGGGGCCACAUCUACCAUCACCCUCUACAUCACCGCCCCGACCUUAGCUCUCACxxxxxxxxxxACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCCCCCCCCCCCUAAAGCCC\
) } def
/len { sequence length } bind def

/coor [
[-15.02040100 223.45130920]
[-11.80533218 208.79992676]
[-6.90640831 194.62245178]
[-0.39025316 181.11172485]
[7.65451384 168.45149231]
[17.11848450 156.81390381]
[27.87294960 146.35725403]
[39.77164841 137.22375488]
[52.65276337 129.53759766]
[66.34111023 123.40334320]
[80.64199829 118.90653229]
[65.86988831 121.51125336]
[51.09777069 124.11598206]
[36.32565308 126.72070312]
[21.55353546 129.32542419]
[9.30658722 139.34155273]
[-4.57089663 133.93186951]
[-19.34301186 136.53659058]
[-33.85163879 140.34445190]
[-47.99895477 145.32977295]
[-62.14627075 150.31509399]
[-76.29358673 155.30041504]
[-76.73166656 170.47184753]
[-82.62432098 184.45903015]
[-93.17462158 195.37028503]
[-106.95572662 201.72998047]
[-122.10385132 202.67799377]
[-136.57034302 198.08613586]
[-148.39871216 188.57540894]
[-155.98928833 175.43205261]
[-158.31549072 160.43362427]
[-155.06274414 145.60850525]
[-146.67092896 132.96168518]
[-134.27497864 124.20355225]
[-119.55135345 120.51856232]
[-104.49128723 122.40507507]
[-91.13154602 129.60797119]
[-81.27890778 141.15309143]
[-67.13159180 136.16777039]
[-52.98427582 131.18244934]
[-38.83695984 126.19712830]
[-52.57024002 120.16413116]
[-60.27096176 107.29172516]
[-59.09262085 92.33808136]
[-49.47077942 80.83068085]
[-34.96207047 77.02313995]
[-20.92951012 82.32288361]
[-12.56011295 94.77090454]
[-12.94755363 109.76589966]
[-21.94773483 121.76447296]
[-7.17561913 119.15975189]
[4.01472902 109.32993317]
[18.94881439 114.55330658]
[33.72092819 111.94858551]
[48.49304581 109.34386444]
[63.26516342 106.73914337]
[78.03727722 104.13441467]
[63.31455994 101.26361847]
[55.50399780 88.45755768]
[59.69069672 74.05368805]
[73.14888763 67.42971039]
[87.11655426 72.89819336]
[92.50000000 86.89841461]
[92.50000000 71.89841461]
[92.50000000 56.89841843]
[92.50000000 41.89841843]
[78.00247955 37.65594101]
[65.28820038 29.49972725]
[55.38785172 18.09096909]
[49.10401154 4.35452127]
[46.94607925 -10.59606457]
[49.08898926 -25.54881096]
[55.35903168 -39.29156494]
[65.24790955 -50.71026230]
[77.95399475 -58.87924194]
[92.44724274 -63.13628387]
[107.55275726 -63.13628387]
[122.04600525 -58.87924194]
[134.75209045 -50.71026230]
[144.64097595 -39.29156494]
[150.91101074 -25.54881096]
[153.05392456 -10.59606457]
[150.89599609 4.35452127]
[144.61215210 18.09096909]
[134.71179199 29.49972725]
[121.99752045 37.65594101]
[107.50000000 41.89841843]
[107.50000000 56.89841843]
[107.50000000 71.89841461]
[107.50000000 86.89841461]
[113.70915985 91.10512543]
[114.78613281 76.14383698]
[128.28143311 69.59580231]
[140.69990540 78.00897980]
[139.62319946 92.97028351]
[126.12747192 99.51853180]
[132.33662415 103.72523499]
[146.26734924 98.16329956]
[160.19805908 92.60136414]
[174.12878418 87.03942871]
[188.05949402 81.47748566]
[201.99020386 75.91555023]
[215.92092896 70.35361481]
[225.63969421 57.14462280]
[241.90628052 59.22550201]
[247.98703003 74.45562744]
[237.62657166 87.16754913]
[221.48286438 84.28433228]
[207.55213928 89.84626770]
[193.62142944 95.40820312]
[179.69071960 100.97014618]
[165.75999451 106.53208160]
[151.82928467 112.09401703]
[137.89855957 117.65595245]
[152.39050293 121.52681732]
[166.33326721 127.05851746]
[179.53720093 134.17581177]
[191.82275391 142.78192139]
[203.02284241 152.75979614]
[212.98515320 163.97373962]
[221.57418823 176.27124023]
[228.67314148 189.48506165]
[234.18545532 203.43547058]
[238.03619385 217.93278503]
[240.17295837 232.77981567]
[240.56669617 247.77464294]
[239.21205139 262.71334839]
[236.12745667 277.39276123]
[231.35485840 291.61325073]
[224.95916748 305.18142700]
[217.02734375 317.91271973]
[207.66729736 329.63403320]
[197.00628662 340.18597412]
[185.18930054 349.42495728]
[172.37709045 357.22540283]
[158.74385071 363.48120117]
[144.47502136 368.10729980]
[129.76466370 371.04071045]
[114.81280518 372.24163818]
[99.82282257 371.69369507]
[84.99855804 369.40432739]
[70.54162598 365.40466309]
[56.64863968 359.74914551]
[43.50854111 352.51467896]
[31.30003548 343.79959106]
[20.18915749 333.72247314]
[10.32701302 322.42034912]
[1.84772682 310.04690552]
[-5.13338423 296.77047729]
[-10.52137661 282.77154541]
[-14.24297619 268.24057007]
[-16.24756813 253.37512207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 57]
[12 56]
[13 55]
[14 54]
[15 53]
[17 51]
[18 50]
[19 41]
[20 40]
[21 39]
[22 38]
[63 90]
[64 89]
[65 88]
[66 87]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
