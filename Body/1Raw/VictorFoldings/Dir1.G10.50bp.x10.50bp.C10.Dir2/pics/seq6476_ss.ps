%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUCUCUGGGGGGGGGGCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUxxxxxxxxxxAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACCCCCCCCCCCUUCCUCUCU\
) } def
/len { sequence length } bind def

/coor [
[82.63738251 357.60363770]
[68.79144287 351.58761597]
[57.08278275 342.05819702]
[48.38025665 329.72253418]
[43.32965469 315.49600220]
[42.30576324 300.43432617]
[45.38456345 285.65515137]
[52.33758545 272.25521851]
[62.64886856 261.22888184]
[75.55325317 253.39437866]
[90.09313965 249.33306885]
[90.09313965 234.33306885]
[90.09313965 219.33306885]
[90.09313965 204.33306885]
[90.09313965 189.33306885]
[90.09313965 174.33306885]
[90.09313965 159.33306885]
[90.09313965 144.33306885]
[90.09313965 129.33306885]
[90.09313965 114.33306885]
[81.07560730 102.34623718]
[66.66339111 98.18835449]
[52.25117493 94.03046417]
[38.53442001 101.41208649]
[23.97761536 96.99008942]
[17.02489471 83.86777496]
[2.61267924 79.70988464]
[-11.79953671 75.55199432]
[-26.21175385 71.39411163]
[-40.62397003 67.23622131]
[-55.03618622 63.07833481]
[-69.44840240 58.92044830]
[-83.86061859 54.76256180]
[-98.35621643 50.90540314]
[-112.92891693 47.35063934]
[-128.16958618 51.59711075]
[-138.70068359 41.06405640]
[-153.27339172 37.50929260]
[-167.84609985 33.95453262]
[-182.41879272 30.39977074]
[-196.99150085 26.84500885]
[-212.57182312 31.96219254]
[-224.61151123 20.82766342]
[-220.72517395 4.89566946]
[-204.91073608 0.55568111]
[-193.43673706 12.27230549]
[-178.86402893 15.82706738]
[-164.29133606 19.38183022]
[-149.71862793 22.93659210]
[-135.14591980 26.49135399]
[-120.94759369 21.99062347]
[-109.37415314 32.77793503]
[-94.80145264 36.33269882]
[-90.27799988 34.62568283]
[-84.63180542 35.78836060]
[-79.70272827 40.35034561]
[-65.29051208 44.50823212]
[-50.87829590 48.66611862]
[-36.46608353 52.82400894]
[-22.05386543 56.98189545]
[-7.64164972 61.13978195]
[6.77056646 65.29766846]
[21.18278313 69.45555878]
[34.05681610 62.05320358]
[48.73208618 66.06458282]
[56.40906143 79.61824799]
[70.82128143 83.77613831]
[85.23349762 87.93402100]
[99.30501556 82.73860931]
[107.55730438 70.21264648]
[96.45162964 60.08296204]
[87.06741333 48.34060287]
[79.63574982 35.27473831]
[74.33965302 21.20712090]
[71.30953217 6.48418427]
[70.62002563 -8.53151035]
[72.28810120 -23.47018433]
[76.27268219 -37.96396255]
[82.47563934 -51.65592194]
[90.74423218 -64.20888519]
[100.87483215 -75.31372070]
[112.61796570 -84.69696808]
[125.68444824 -92.12755585]
[139.75250244 -97.42249298]
[154.47569275 -100.45139313]
[169.49143982 -101.13966370]
[184.42997742 -99.47035980]
[198.92343140 -95.48458099]
[212.61486816 -89.28048706]
[225.16716003 -81.01086426]
[236.27114868 -70.87934875]
[245.65342712 -59.13544083]
[253.08294678 -46.06834793]
[258.37670898 -31.99985695]
[261.40441895 -17.27642059]
[262.09143066 -2.26061225]
[260.42089844 12.67778778]
[256.43392944 27.17090797]
[250.22869873 40.86184311]
[241.95803833 53.41344070]
[231.82560730 64.51660919]
[220.08093262 73.89791870]
[207.01321411 81.32634735]
[192.94429016 86.61896515]
[178.22061157 89.64543152]
[163.20474243 90.33123016]
[148.26647949 88.65945435]
[133.77368164 84.67128754]
[120.08326721 78.46493530]
[111.83097839 90.99089813]
[117.02639008 105.06241608]
[131.43861389 109.22030640]
[145.85083008 113.37818909]
[160.26304626 117.53607941]
[170.80761719 106.44236755]
[185.30360413 101.53066254]
[200.41993713 103.92963409]
[212.68298340 113.08802795]
[219.27479553 126.90130615]
[218.68061829 142.19528198]
[211.03698730 155.45550537]
[198.10035706 163.63487244]
[182.84346008 164.85383606]
[168.77223206 158.83227539]
[159.12014771 146.95390320]
[156.10514832 131.94828796]
[141.69293213 127.79040527]
[127.28072357 123.63252258]
[112.86850739 119.47463226]
[108.60395813 117.24996948]
[105.09313965 114.33306885]
[105.09313965 129.33306885]
[105.09313965 144.33306885]
[105.09313965 159.33306885]
[105.09313965 174.33306885]
[105.09313965 189.33306885]
[105.09313965 204.33306885]
[105.09313965 219.33306885]
[105.09313965 234.33306885]
[105.09313965 249.33306885]
[119.63302612 253.39437866]
[132.53739929 261.22888184]
[142.84869385 272.25521851]
[149.80171204 285.65515137]
[152.88050842 300.43432617]
[151.85661316 315.49600220]
[146.80601501 329.72253418]
[138.10350037 342.05819702]
[126.39482880 351.58761597]
[112.54888916 357.60363770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 68]
[22 67]
[23 66]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[31 58]
[32 57]
[33 56]
[34 53]
[35 52]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[69 110]
[70 109]
[111 129]
[112 128]
[113 127]
[114 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
