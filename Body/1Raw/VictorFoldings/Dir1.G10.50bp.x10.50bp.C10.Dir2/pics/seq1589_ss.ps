%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUAUAUAGGGGGGGGGGCCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACxxxxxxxxxxUAGCUAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAACCCCCCCCCCAGCCUAAAUA\
) } def
/len { sequence length } bind def

/coor [
[44.45071793 550.78302002]
[30.60477829 544.76696777]
[18.89611626 535.23754883]
[10.19359303 522.90185547]
[5.14299107 508.67535400]
[4.11909962 493.61367798]
[7.19789839 478.83453369]
[14.15091991 465.43460083]
[24.46220398 454.40826416]
[37.36658478 446.57376099]
[51.90647125 442.51245117]
[51.90647125 427.51245117]
[51.90647125 412.51245117]
[51.90647125 397.51245117]
[51.90647125 382.51245117]
[51.90647125 367.51245117]
[51.90647125 352.51245117]
[51.90647125 337.51245117]
[51.90647125 322.51245117]
[51.90647125 307.51245117]
[43.99415207 304.66387939]
[37.02021408 299.96456909]
[31.40927124 293.70068359]
[17.50671387 299.33264160]
[13.89755344 314.42413330]
[2.08525705 324.48641968]
[-13.38810730 325.65029907]
[-26.57271385 317.46826172]
[-32.39881516 303.08645630]
[-28.62615204 288.03500366]
[-16.70539474 278.10147095]
[-1.22031426 277.10549927]
[11.87475777 285.43008423]
[25.77731323 279.79812622]
[28.02533340 260.29046631]
[40.72850037 245.11215210]
[59.83382034 239.37304688]
[63.23679733 224.76416016]
[66.63977814 210.15525818]
[70.04275513 195.54637146]
[73.44573212 180.93748474]
[76.84870911 166.32858276]
[80.25168610 151.71969604]
[75.60350037 137.56895447]
[86.26984406 125.88392639]
[76.09043884 119.81737518]
[68.66655731 109.72981262]
[65.57563782 96.89632416]
[67.80094910 83.19928741]
[56.70962906 73.10063934]
[45.61831665 63.00198746]
[30.45050049 66.27566528]
[16.26888847 59.97792816]
[8.52659893 46.53038025]
[10.20070171 31.10387611]
[20.64746857 19.63022423]
[35.84990692 16.52127838]
[49.96236420 22.97248840]
[57.55831528 36.50323486]
[55.71696472 51.91067123]
[66.80828094 62.00931931]
[77.89959717 72.10797119]
[91.35556030 65.47946930]
[90.10868835 50.53138351]
[75.37817383 47.08649445]
[62.43420792 39.25650024]
[52.54489899 27.80849648]
[46.67910004 13.86404991]
[45.41148758 -1.21070898]
[48.86624908 -15.93890762]
[56.70491791 -28.87762642]
[68.15954590 -38.75926208]
[82.10791779 -44.61571503]
[97.18352509 -45.87322617]
[111.90940094 -42.40859985]
[124.84286499 -34.56126022]
[134.71682739 -23.10001755]
[140.56393433 -9.14772129]
[141.81134033 5.92872190]
[138.33683777 20.65227699]
[130.48083496 33.58047867]
[119.01298523 43.44675827]
[105.05677032 49.28451157]
[106.30364990 64.23259735]
[111.41551208 67.37553406]
[115.69318390 71.18719482]
[119.06168365 75.48372650]
[121.48290253 80.07564545]
[134.72547913 73.03051758]
[140.88124084 66.19248962]
[148.31765747 65.97981262]
[161.70394897 59.21170044]
[175.09022522 52.44358826]
[188.47651672 45.67547226]
[201.56967163 38.35636520]
[214.34703064 30.49894142]
[227.12438965 22.64151573]
[232.22889709 7.43219423]
[247.35136414 2.07581592]
[260.89111328 10.68133450]
[262.46160889 26.64733315]
[250.85809326 37.72606277]
[234.98181152 35.41887283]
[222.20445251 43.27629852]
[209.42709351 51.13372421]
[208.66560364 53.89551163]
[206.72851562 56.51116943]
[203.66987610 58.51781082]
[199.71504211 59.48235321]
[195.24462891 59.06175613]
[181.85835266 65.82987213]
[168.47206116 72.59798431]
[155.08576965 79.36610413]
[141.77061462 86.27310181]
[128.52803040 93.31823730]
[123.22984314 117.85690308]
[100.87873077 129.28689575]
[105.28351593 144.48257446]
[94.86058044 155.12266541]
[91.45760345 169.73156738]
[88.05462646 184.34045410]
[84.65164185 198.94935608]
[81.24866486 213.55824280]
[77.84568787 228.16712952]
[74.44271088 242.77603149]
[85.70053101 251.53105164]
[92.47873688 264.01547241]
[93.67991638 278.11453247]
[89.14710236 291.46026611]
[79.68261719 301.82913208]
[66.90647125 307.51245117]
[66.90647125 322.51245117]
[66.90647125 337.51245117]
[66.90647125 352.51245117]
[66.90647125 367.51245117]
[66.90647125 382.51245117]
[66.90647125 397.51245117]
[66.90647125 412.51245117]
[66.90647125 427.51245117]
[66.90647125 442.51245117]
[81.44635773 446.57376099]
[94.35073853 454.40826416]
[104.66202545 465.43460083]
[111.61504364 478.83453369]
[114.69384766 493.61367798]
[113.66995239 508.67535400]
[108.61935425 522.90185547]
[99.91682434 535.23754883]
[88.20816803 544.76696777]
[74.36222839 550.78302002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 34]
[24 33]
[37 125]
[38 124]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[45 117]
[49 62]
[50 61]
[51 60]
[63 84]
[64 83]
[88 115]
[89 114]
[91 113]
[92 112]
[93 111]
[94 110]
[95 105]
[96 104]
[97 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
