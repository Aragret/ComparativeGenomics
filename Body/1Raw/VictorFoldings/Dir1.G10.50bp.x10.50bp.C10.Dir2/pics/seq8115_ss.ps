%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCUCCCUGGGGGGGGGGCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAxxxxxxxxxxAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCCCCCCCCCCCUACCUCUCU\
) } def
/len { sequence length } bind def

/coor [
[77.13673401 281.57888794]
[67.72156525 280.14361572]
[58.39381027 278.22052002]
[49.17873001 275.81472778]
[40.10128403 272.93283081]
[31.18604851 269.58261108]
[22.45717239 265.77313232]
[15.55017376 279.08828735]
[8.64317513 292.40344238]
[9.92229939 308.75262451]
[-3.74826384 317.81066895]
[-18.30541039 310.25939941]
[-18.77399635 293.86694336]
[-4.67198086 285.49645996]
[2.23501801 272.18130493]
[9.14201641 258.86614990]
[-24.61305618 234.03436279]
[-51.83484650 202.17535400]
[-64.61220551 210.03277588]
[-77.38955688 217.89021301]
[-90.16691589 225.74763489]
[-93.58811188 241.17718506]
[-106.96230316 249.59779358]
[-122.35482025 246.01365662]
[-130.63354492 232.55117798]
[-126.88687897 217.19741821]
[-113.33763123 209.06147766]
[-98.02434540 212.97027588]
[-85.24698639 205.11285400]
[-72.46962738 197.25541687]
[-59.69227219 189.39799500]
[-67.90911102 172.80216980]
[-74.40673828 155.46090698]
[-79.11863708 137.55180359]
[-81.99655151 119.25820923]
[-83.01102448 100.76742554]
[-82.15165710 82.26878357]
[-79.42726135 63.95169830]
[-93.99996948 60.39693451]
[-108.57266998 56.84217453]
[-123.14537048 53.28741074]
[-138.72569275 58.40459442]
[-150.76539612 47.27006531]
[-146.87905884 31.33807182]
[-131.06462097 26.99808311]
[-119.59061432 38.71470642]
[-105.01790619 42.26947021]
[-90.44520569 45.82423401]
[-75.87250519 49.37899399]
[-72.79258728 39.69789124]
[-69.18022156 30.20260429]
[-65.04652405 20.92239761]
[-60.40424728 11.88586712]
[-55.26768875 3.12085676]
[-49.65267563 -5.34562254]
[-43.57651138 -13.48748302]
[-37.05792236 -21.27963448]
[-30.11699104 -28.69806671]
[-22.77510834 -35.71991730]
[-15.05489731 -42.32355499]
[-6.98014832 -48.48862457]
[1.42425668 -54.19612885]
[10.13242054 -59.42848587]
[19.11750793 -64.16956329]
[28.35183334 -68.40476227]
[37.80693817 -72.12102509]
[47.45369339 -75.30690002]
[57.26236725 -77.95257568]
[67.20273590 -80.04988861]
[77.24416351 -81.59238434]
[87.35572052 -82.57531738]
[97.50623322 -82.99564362]
[107.66443634 -82.85207367]
[117.79901886 -82.14505005]
[127.87875366 -80.87674713]
[137.87257385 -79.05108643]
[147.74971008 -76.67368317]
[157.47969055 -73.75186157]
[167.03254700 -70.29462433]
[176.37886047 -66.31263733]
[185.48980713 -61.81816101]
[194.33731079 -56.82504272]
[202.58959961 -69.35100555]
[210.84188843 -81.87696838]
[219.09417725 -94.40293121]
[213.50309753 -108.87771606]
[217.52040100 -123.86573792]
[229.60136414 -133.60380554]
[245.10060120 -134.34742737]
[258.05834961 -125.81066895]
[263.49209595 -111.27608490]
[259.31243896 -96.33251953]
[247.12654114 -86.72608185]
[231.62014771 -86.15064240]
[223.36785889 -73.62467957]
[215.11557007 -61.09871674]
[206.86328125 -48.57275391]
[221.09886169 -37.21767426]
[234.13554382 -24.50412750]
[245.84428406 -10.55797958]
[256.10916138 4.48270130]
[264.82852173 20.46901131]
[271.91610718 37.24268341]
[277.30166626 54.63766098]
[280.93194580 72.48172760]
[282.77096558 90.59822845]
[297.77017212 90.44219208]
[312.76934814 90.28615570]
[327.76855469 90.13011932]
[337.55456543 77.93307495]
[352.90121460 74.93064880]
[366.56225586 82.54049683]
[372.08737183 97.16947174]
[366.86779785 111.91023254]
[353.36801147 119.80262756]
[337.96221924 117.12012482]
[327.92459106 105.12930298]
[312.92538452 105.28533936]
[297.92620850 105.44138336]
[282.92700195 105.59741974]
[282.38812256 115.10609436]
[281.35531616 124.57386780]
[279.83135986 133.97509766]
[277.82040405 143.28430176]
[275.32788086 152.47628784]
[272.36053467 161.52616882]
[268.92642212 170.40943909]
[265.03482056 179.10200500]
[260.69628906 187.58036804]
[255.92259216 195.82154846]
[250.72660828 203.80323792]
[245.12245178 211.50379944]
[239.12527466 218.90240479]
[232.75132751 225.97900391]
[226.01786804 232.71443176]
[218.94314575 239.09045410]
[211.54629517 245.08978271]
[203.84736633 250.69621277]
[195.86721802 255.89451599]
[187.62742615 260.67065430]
[179.15034485 265.01165771]
[170.45889282 268.90579224]
[161.57664490 272.34249878]
[152.52763367 275.31250000]
[143.33638000 277.80770874]
[134.02775574 279.82141113]
[124.62697601 281.34811401]
[115.15950775 282.38369751]
[105.65098572 282.92535400]
[96.12715912 282.97164917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 16]
[8 15]
[9 14]
[18 31]
[19 30]
[20 29]
[21 28]
[38 49]
[39 48]
[40 47]
[41 46]
[82 97]
[83 96]
[84 95]
[85 94]
[106 120]
[107 119]
[108 118]
[109 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
