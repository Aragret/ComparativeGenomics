%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAACAACAUGGGGGGGGGGAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCxxxxxxxxxxACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUCCCCCCCCCCACUAACAACAU\
) } def
/len { sequence length } bind def

/coor [
[82.02507782 412.38781738]
[68.00312805 406.83480835]
[55.80317307 397.96847534]
[46.19210052 386.34616089]
[39.77407837 372.69845581]
[36.95254135 357.88327026]
[37.90485764 342.83187866]
[42.57115936 328.49047852]
[50.65812683 315.76049805]
[61.65740204 305.44223022]
[74.87756348 298.18426514]
[89.48757172 294.44281006]
[89.48757172 279.44281006]
[89.48757172 264.44281006]
[89.48757172 249.44282532]
[89.48757172 234.44282532]
[89.48757172 219.44282532]
[89.48757172 204.44282532]
[89.48757172 189.44282532]
[89.48757172 174.44282532]
[89.48757172 159.44282532]
[89.48757172 144.44282532]
[89.48757172 129.44282532]
[76.98353577 121.15734863]
[63.16995621 127.00413513]
[57.46755600 141.74382019]
[42.97924423 148.05763245]
[28.30067444 142.19972229]
[22.14038658 127.64546204]
[28.15316772 113.02964783]
[42.77173996 107.02358246]
[57.32316589 113.19055176]
[71.13674927 107.34376526]
[71.53142548 98.73844147]
[74.32682800 90.98435211]
[79.07038116 84.70305634]
[85.16404724 80.33020020]
[91.93189240 78.08692932]
[98.69116211 77.97402191]
[102.94401550 63.58954239]
[107.19686127 49.20506287]
[111.44970703 34.82057953]
[115.70255280 20.43610001]
[119.95539856 6.05161953]
[113.26339722 19.47611618]
[100.57991028 27.48417664]
[85.58233643 27.75396919]
[72.61902618 20.20727158]
[65.44852448 7.03214741]
[66.14981842 -7.95144987]
[74.51957703 -20.39922523]
[88.13110352 -26.70211029]
[103.03791809 -25.03266907]
[114.91651154 -15.87689209]
[104.81107330 -26.96202660]
[94.70564270 -38.04716110]
[78.92268372 -42.50027466]
[75.15052795 -58.45969009]
[87.26963806 -69.50772095]
[102.81292725 -64.27910614]
[105.79077911 -48.15259552]
[115.89620972 -37.06745911]
[126.00164795 -25.98232651]
[140.98899841 -26.59815216]
[150.15093994 -38.47497559]
[159.31286621 -50.35179901]
[145.30255127 -44.99351501]
[130.47702026 -42.71236801]
[115.50397491 -43.61109924]
[101.05774689 -47.64922714]
[87.78895569 -54.64488602]
[76.29519653 -64.28301239]
[67.09411621 -76.12953186]
[60.60009766 -89.65090942]
[57.10561752 -104.23818970]
[56.76805878 -119.23439026]
[59.60261917 -133.96412659]
[65.48164368 -147.76402283]
[74.14035797 -160.01255798]
[85.18879700 -170.15811157]
[98.12936401 -177.74372864]
[112.37925720 -182.42779541]
[127.29670715 -183.99934387]
[142.20986938 -182.38761902]
[156.44708252 -177.66517639]
[169.36717224 -170.04470825]
[180.38822937 -159.86943054]
[189.01391602 -147.59761047]
[194.85574341 -133.78193665]
[197.65060425 -119.04460907]
[197.27264404 -104.04936981]
[193.73887634 -89.47156525]
[187.20846558 -75.96772766]
[177.97738647 -64.14799500]
[192.01936340 -69.42272949]
[199.25781250 -88.10333252]
[217.58273315 -95.41913605]
[235.14874268 -87.11819458]
[248.83937073 -93.24736786]
[262.52999878 -99.37654114]
[265.59310913 -114.58827972]
[277.03521729 -125.06958008]
[292.45660400 -126.79017639]
[305.92742920 -119.08845520]
[312.26788330 -104.92589569]
[309.03994751 -89.74827576]
[297.48480225 -79.39171600]
[282.04565430 -77.83851624]
[268.65917969 -85.68591309]
[254.96855164 -79.55673981]
[241.27792358 -73.42756653]
[240.31970215 -63.10111618]
[235.09275818 -54.05006790]
[226.49519348 -47.96513748]
[216.06167603 -46.01551056]
[205.68960571 -48.62467575]
[197.29409790 -55.38075638]
[183.25212097 -50.10601425]
[171.18969727 -41.18986511]
[162.02775574 -29.31303978]
[152.86581421 -17.43621635]
[150.14997864 1.66920245]
[134.33987427 10.30446625]
[130.08703613 24.68894768]
[125.83419037 39.07342911]
[121.58133698 53.45790863]
[117.32849121 67.84239197]
[113.07564545 82.22686768]
[125.17144012 106.20033264]
[104.48757172 129.44282532]
[104.48757172 144.44282532]
[104.48757172 159.44282532]
[104.48757172 174.44282532]
[104.48757172 189.44282532]
[104.48757172 204.44282532]
[104.48757172 219.44282532]
[104.48757172 234.44282532]
[104.48757172 249.44282532]
[104.48757172 264.44281006]
[104.48757172 279.44281006]
[104.48757172 294.44281006]
[119.09758759 298.18426514]
[132.31774902 305.44223022]
[143.31701660 315.76049805]
[151.40399170 328.49047852]
[156.07029724 342.83187866]
[157.02261353 357.88327026]
[154.20106506 372.69845581]
[147.78305054 386.34616089]
[138.17196655 397.96847534]
[125.97201538 406.83480835]
[111.95007324 412.38781738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 33]
[25 32]
[39 128]
[40 127]
[41 126]
[42 125]
[43 124]
[44 123]
[54 63]
[55 62]
[56 61]
[64 121]
[65 120]
[66 119]
[94 118]
[95 117]
[98 111]
[99 110]
[100 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
