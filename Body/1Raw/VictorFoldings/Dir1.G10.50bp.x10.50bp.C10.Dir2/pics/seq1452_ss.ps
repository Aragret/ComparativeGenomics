%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACAAAAGGGGGGGGGGCUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCxxxxxxxxxxGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACCCCCCCCCCCAUCAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[83.72319794 380.96237183]
[70.50299835 373.68991089]
[59.61619568 363.24291992]
[51.80506516 350.33364868]
[47.60218430 335.84234619]
[47.29411316 320.75701904]
[50.90185547 306.10617065]
[58.17942810 292.88879395]
[68.63063812 282.00601196]
[81.54290009 274.19989014]
[96.03583527 270.00259399]
[95.72377777 255.00584412]
[95.41172028 240.00909424]
[95.09966278 225.01232910]
[94.78760529 210.01557922]
[94.47555542 195.01882935]
[94.16349792 180.02207947]
[93.85144043 165.02531433]
[93.53938293 150.02856445]
[93.22732544 135.03181458]
[82.44356537 131.06233215]
[73.48077393 123.87105560]
[67.26856232 114.20386505]
[52.56059647 117.14934540]
[37.85263824 120.09482574]
[23.14467430 123.04031372]
[8.43671322 125.98579407]
[0.61601025 136.29551697]
[-11.74170399 138.41822815]
[-21.88261223 131.74969482]
[-36.64866638 134.38854980]
[-48.83115387 145.36666870]
[-64.34409332 140.04870605]
[-67.22910309 123.90532684]
[-54.51832962 113.54345703]
[-39.28753281 119.62249756]
[-24.52147675 116.98363495]
[-11.77423668 104.96249390]
[5.49123096 111.27783203]
[20.19919205 108.33235168]
[34.90715408 105.38686371]
[49.61511612 102.44138336]
[64.32307434 99.49590302]
[70.61933136 79.75467682]
[86.82436371 66.84129333]
[84.33924866 52.04859161]
[81.85412598 37.25588226]
[79.36901093 22.46317482]
[72.18650055 9.29459286]
[61.09518433 -0.80405664]
[50.00386810 -10.90270615]
[34.83605576 -7.62902498]
[20.65444183 -13.92676353]
[12.91215324 -27.37431335]
[14.58625603 -42.80081558]
[25.03302383 -54.27446747]
[40.23545837 -57.38341522]
[54.34791946 -50.93220520]
[61.94387054 -37.40145493]
[60.10251999 -21.99402237]
[71.19383240 -11.89537239]
[82.28514862 -1.79672253]
[89.37342834 -4.24749804]
[84.47209930 -18.42413139]
[98.64880371 -23.32524490]
[103.54998779 -9.14904881]
[110.63826752 -11.59982395]
[113.12338257 -26.39253044]
[115.60850525 -41.18523788]
[102.01420593 -47.77095795]
[90.82690430 -57.92088699]
[82.95351410 -70.81221771]
[79.03229523 -85.39990997]
[79.38111877 -100.50139618]
[83.97170258 -114.89247894]
[92.43192291 -127.40652466]
[104.07592773 -137.02908325]
[117.95980835 -142.98010254]
[132.95805359 -144.77714539]
[147.85481262 -142.27455139]
[161.44248962 -135.67518616]
[172.61959839 -125.51401520]
[180.48002625 -112.61478424]
[184.38659668 -98.02316284]
[184.02259827 -82.92202759]
[179.41755676 -68.53556824]
[170.94477844 -56.03002167]
[159.29110718 -46.41916275]
[145.40124512 -40.48209763]
[130.40121460 -38.70011902]
[127.91609192 -23.90741348]
[125.43097687 -9.11470509]
[119.01725006 8.72460842]
[106.85927582 18.71173286]
[94.16172028 19.97805595]
[96.64683533 34.77076340]
[99.13195038 49.56347275]
[101.61707306 64.35617828]
[119.87406158 64.32742310]
[137.96900940 74.04965210]
[152.38122559 69.89176178]
[166.79344177 65.73387146]
[181.20565796 61.57598877]
[195.61787415 57.41809845]
[206.59455872 45.23431396]
[222.57583618 48.91268921]
[227.12156677 64.66922760]
[215.55546570 76.29495239]
[199.77575684 71.83031464]
[185.36354065 75.98820496]
[170.95132446 80.14608765]
[156.53910828 84.30397797]
[142.12689209 88.46186829]
[141.50346375 95.93590546]
[156.45155334 97.18278503]
[171.39961243 98.42990875]
[170.15225220 113.37795258]
[155.20468140 112.13086700]
[140.25659180 110.88399506]
[139.63314819 118.35803986]
[153.15733337 124.84620667]
[168.70822144 120.90290833]
[181.39939880 130.71685791]
[181.49528503 146.75962830]
[168.92233276 156.72457886]
[153.32542419 152.96745300]
[146.66917419 138.37039185]
[133.14498901 131.88223267]
[120.24406433 135.46391296]
[108.22408295 134.71975708]
[108.53614044 149.71650696]
[108.84819031 164.71325684]
[109.16024780 179.71002197]
[109.47230530 194.70677185]
[109.78436279 209.70352173]
[110.09642029 224.70027161]
[110.40847778 239.69703674]
[110.72052765 254.69378662]
[111.03258514 269.69055176]
[125.68757629 273.28131104]
[138.91339111 280.54357910]
[149.80825806 290.98214722]
[157.62934875 303.88537598]
[161.84342957 318.37344360]
[162.16314697 333.45852661]
[158.56672668 348.11215210]
[151.29936218 361.33514404]
[140.85655212 372.22598267]
[127.95032501 380.04208374]
[113.46063232 384.25057983]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 43]
[24 42]
[25 41]
[26 40]
[27 39]
[30 37]
[31 36]
[45 98]
[46 97]
[47 96]
[48 95]
[49 62]
[50 61]
[51 60]
[67 92]
[68 91]
[69 90]
[100 113]
[101 112]
[102 111]
[103 110]
[104 109]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
