%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCAUUCACUGGGGGGGGGGGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCxxxxxxxxxxAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCCCCCCCCCCCGCUUCAUUCAUUG\
) } def
/len { sequence length } bind def

/coor [
[95.80763245 488.46487427]
[82.10710144 482.20043945]
[70.14434814 473.04400635]
[60.51942825 461.45483398]
[53.71511841 448.01425171]
[50.07272339 433.39642334]
[49.77494431 418.33459473]
[52.83671951 403.58422852]
[59.10446548 389.88522339]
[68.26380157 377.92468262]
[79.85529327 368.30258179]
[93.29751587 361.50152588]
[107.91622162 357.86267090]
[107.61608887 342.86566162]
[107.31595612 327.86868286]
[107.01582336 312.87167358]
[106.71569061 297.87466431]
[106.41555786 282.87768555]
[106.11542511 267.88067627]
[105.81529236 252.88368225]
[105.51516724 237.88668823]
[105.21503448 222.88969421]
[104.91490173 207.89270020]
[104.61476898 192.89569092]
[103.41544342 177.94372559]
[101.32123566 163.09062195]
[99.22703552 148.23753357]
[97.13283539 133.38444519]
[83.52523804 129.17745972]
[72.89442444 119.69847107]
[67.16125488 106.66020966]
[67.36162567 92.41854095]
[73.45935059 79.54673767]
[84.35263824 70.37059021]
[80.49452209 55.87524796]
[76.63639832 41.37990952]
[72.77828217 26.88456726]
[68.92015839 12.38922596]
[65.06204224 -2.10611534]
[61.20392227 -16.60145569]
[57.34580231 -31.09679794]
[42.52598953 -28.69850349]
[27.54102707 -27.78772163]
[12.53984547 -28.37350845]
[-2.32846403 -30.45003891]
[-16.91613007 -33.99667358]
[-31.07816696 -38.97816849]
[-44.67382812 -45.34500885]
[-57.56798172 -53.03392029]
[-69.63248444 -61.96848297]
[-80.74742889 -72.05989838]
[-90.80234528 -83.20787048]
[-99.69729614 -95.30160522]
[-107.34387970 -108.22090912]
[-113.66610718 -121.83737183]
[-118.60113525 -136.01567078]
[-122.09992218 -150.61488342]
[-124.12768555 -165.48991394]
[-124.66427612 -180.49295044]
[-123.70436096 -195.47483826]
[-121.25748444 -210.28671265]
[-117.34796143 -224.78132629]
[-112.01464844 -238.81466675]
[-105.31055450 -252.24722290]
[-97.30229950 -264.94552612]
[-88.06948853 -276.78332520]
[-77.70387268 -287.64300537]
[-66.30847931 -297.41662598]
[-53.99656296 -306.00704956]
[-40.89048767 -313.32888794]
[-27.12051392 -319.30938721]
[-12.82349205 -323.88909912]
[1.85848081 -327.02252197]
[16.77948570 -328.67849731]
[31.79122543 -328.84054565]
[46.74450302 -327.50711060]
[61.49070358 -324.69140625]
[75.88327026 -320.42144775]
[89.77915192 -314.73962402]
[103.04025269 -307.70245361]
[115.53476715 -299.37985229]
[127.13851166 -289.85452271]
[137.73617554 -279.22116089]
[147.22241211 -267.58544922]
[155.50294495 -255.06301880]
[162.49549866 -241.77833557]
[168.13053894 -227.86341858]
[172.35209656 -213.45657349]
[175.11817932 -198.70098877]
[176.40133667 -183.74331665]
[176.18878174 -168.73220825]
[174.48263550 -153.81684875]
[171.29986572 -139.14549255]
[166.67210388 -124.86396027]
[160.64532471 -111.11417389]
[153.27944946 -98.03279877]
[144.64765930 -85.74983978]
[134.83578491 -74.38738251]
[123.94129944 -64.05834961]
[112.07250977 -54.86539459]
[99.34735870 -46.89989471]
[85.89232635 -40.24100876]
[71.84114075 -34.95491791]
[75.69926453 -20.45957565]
[79.55738068 -5.96423531]
[83.41550446 8.53110600]
[87.27362061 23.02644730]
[91.13174438 37.52178955]
[94.98986053 52.01712799]
[98.84798431 66.51246643]
[118.92808533 72.35095978]
[131.63584900 88.95851135]
[146.54510498 87.31100464]
[161.62431335 79.56157684]
[173.24523926 91.90623474]
[164.60000610 106.49034119]
[148.19261169 102.22026062]
[133.28335571 103.86775970]
[131.01651001 112.67745209]
[126.46366119 120.55277252]
[119.96035767 126.91329956]
[111.98592377 131.29023743]
[114.08013153 146.14334106]
[116.17433167 160.99642944]
[118.26853180 175.84951782]
[128.40913391 164.79653931]
[143.38615417 163.96661377]
[154.68589783 173.83148193]
[155.88499451 188.78347778]
[146.30184937 200.32312012]
[131.38397217 201.89065552]
[119.61176300 192.59556580]
[119.91189575 207.59255981]
[120.21202850 222.58955383]
[120.51216125 237.58654785]
[120.81229401 252.58355713]
[121.11242676 267.58053589]
[121.41255951 282.57754517]
[121.71269226 297.57455444]
[122.01282501 312.57153320]
[122.31295013 327.56854248]
[122.61308289 342.56552124]
[122.91321564 357.56253052]
[137.66580200 360.61358643]
[151.36936951 366.87136841]
[163.33656311 376.02200317]
[172.96710205 387.60650635]
[179.77792358 401.04379272]
[183.42739868 415.65982056]
[183.73246765 430.72152710]
[180.67785645 445.47338867]
[174.41674805 459.17544556]
[165.26321411 471.14041138]
[153.67637634 480.76812744]
[140.23745728 487.57568359]
[125.62051392 491.22161865]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 143]
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 125]
[26 124]
[27 123]
[28 122]
[34 110]
[35 109]
[36 108]
[37 107]
[38 106]
[39 105]
[40 104]
[41 103]
[112 118]
[113 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
