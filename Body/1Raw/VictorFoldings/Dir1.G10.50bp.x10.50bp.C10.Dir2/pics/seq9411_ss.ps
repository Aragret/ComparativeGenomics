%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUUCUCCGGGGGGGGGGAUAAAAUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUxxxxxxxxxxUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCCCCCCCCCCCAUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[80.94692993 416.02514648]
[68.38870239 407.67401123]
[58.30248260 396.46154785]
[51.32228851 383.09265137]
[47.88690567 368.40765381]
[48.21228027 353.32968140]
[52.27796555 338.80657959]
[59.82838440 325.75122070]
[70.38891602 314.98434448]
[83.29570770 307.18270874]
[97.73743439 302.83676147]
[97.11345673 287.84973145]
[96.48948669 272.86273193]
[95.86550903 257.87570190]
[95.24153137 242.88868713]
[94.61755371 227.90167236]
[93.99357605 212.91465759]
[93.36959839 197.92764282]
[92.74562073 182.94062805]
[92.12164307 167.95361328]
[91.49766541 152.96658325]
[90.87368774 137.97956848]
[90.24971008 122.99256134]
[82.43289185 113.46685791]
[80.88882446 102.66114044]
[84.70154572 93.93697357]
[91.46141052 89.39317322]
[85.11428070 75.80222321]
[78.76715088 62.21126938]
[72.42002106 48.62031937]
[58.31211853 53.74522781]
[43.80647659 57.60321426]
[29.01663017 60.16407776]
[14.05832672 61.40778351]
[-0.95136011 61.32459259]
[-15.89495754 59.91515350]
[-30.65550995 57.19050598]
[-45.11749268 53.17196655]
[-59.16772079 47.89099121]
[-72.69622803 41.38890839]
[-85.59713745 33.71660614]
[-97.76947784 24.93413544]
[-109.11798096 15.11022949]
[-119.55382538 4.32177591]
[-128.99534607 -7.34678936]
[-137.36863708 -19.80414200]
[-144.60815430 -32.95278549]
[-150.65727234 -46.68981171]
[-155.46861267 -60.90770721]
[-159.00454712 -75.49519348]
[-161.23738098 -90.33811188]
[-162.14965820 -105.32028198]
[-161.73420715 -120.32444763]
[-159.99432373 -135.23318481]
[-156.94358826 -149.92979431]
[-152.60588074 -164.29928589]
[-147.01516724 -178.22915649]
[-140.21520996 -191.61042786]
[-132.25920105 -204.33833313]
[-123.20941925 -216.31326294]
[-113.13670349 -227.44151306]
[-102.11987305 -237.63598633]
[-90.24516296 -246.81687927]
[-77.60550690 -254.91235352]
[-64.29981995 -261.85903931]
[-50.43225479 -267.60256958]
[-36.11133194 -272.09799194]
[-21.44914436 -275.31011963]
[-6.56044054 -277.21383667]
[8.43825150 -277.79421997]
[23.42954636 -277.04675293]
[38.29611206 -274.97723389]
[52.92159653 -271.60192871]
[67.19153595 -266.94720459]
[80.99423981 -261.04949951]
[94.22168732 -253.95495605]
[106.77035522 -245.71914673]
[118.54202271 -236.40649414]
[129.44456482 -226.08990479]
[139.39265442 -214.85009766]
[148.30842590 -202.77507019]
[156.12211609 -189.95928955]
[162.77255249 -176.50309753]
[168.20768738 -162.51177979]
[172.38499451 -148.09484863]
[175.27177429 -133.36515808]
[176.84542847 -118.43795776]
[177.09365845 -103.43009186]
[176.01449585 -88.45901489]
[173.61639404 -73.64190674]
[169.91813660 -59.09472275]
[164.94865417 -44.93132401]
[158.74684143 -31.26255798]
[151.36123657 -18.19540405]
[142.84965515 -5.83212900]
[133.27870178 5.73050308]
[122.72328949 16.40199852]
[111.26602173 26.09883499]
[98.99657440 34.74512100]
[86.01097107 42.27318954]
[92.35810089 55.86413956]
[98.70523071 69.45509338]
[105.05236053 83.04604340]
[118.14551544 90.36515045]
[133.04740906 88.65245819]
[147.94932556 86.93976593]
[162.85122681 85.22708130]
[172.47993469 72.69458008]
[188.16090393 70.72415924]
[200.59089661 80.48483276]
[202.39543152 96.18576050]
[192.50387573 108.51187134]
[176.78474426 110.15029144]
[164.56390381 100.12898254]
[149.66200256 101.84166718]
[134.76010132 103.55435944]
[119.85820007 105.26705170]
[134.77000427 103.64282227]
[148.01788330 110.67799377]
[155.02374268 123.94140625]
[153.36654663 138.84957886]
[143.61897278 150.25067139]
[129.14952087 154.20477295]
[114.95842743 149.34544373]
[105.94975281 137.35195923]
[105.23672485 122.36858368]
[105.86070251 137.35559082]
[106.48468018 152.34262085]
[107.10865784 167.32963562]
[107.73263550 182.31665039]
[108.35661316 197.30366516]
[108.98059082 212.29067993]
[109.60456848 227.27769470]
[110.22854614 242.26470947]
[110.85252380 257.25173950]
[111.47650146 272.23873901]
[112.10047913 287.22576904]
[112.72445679 302.21276855]
[127.47745514 305.34323120]
[140.98809814 312.04498291]
[152.40707397 321.89675903]
[161.01658630 334.27929688]
[166.27543640 348.41418457]
[167.85304260 363.41293335]
[165.65023804 378.33267212]
[159.80549622 392.23553467]
[150.68620300 404.24758911]
[138.86563110 413.61373901]
[125.08683014 419.74523926]
[110.21592712 422.25662231]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 126]
[27 103]
[28 102]
[29 101]
[30 100]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
