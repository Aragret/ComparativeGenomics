%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGUCAAUAGGGGGGGGGGGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAxxxxxxxxxxAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCCCCCCCCCCCAAUUCAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 398.48641968]
[71.19830322 392.47036743]
[59.48964310 382.94094849]
[50.78712082 370.60528564]
[45.73651886 356.37878418]
[44.71262741 341.31707764]
[47.79142761 326.53793335]
[54.74444962 313.13800049]
[65.05573273 302.11166382]
[77.96011353 294.27716064]
[92.50000000 290.21585083]
[92.50000000 275.21585083]
[92.50000000 260.21585083]
[92.50000000 245.21585083]
[92.50000000 230.21585083]
[92.50000000 215.21585083]
[92.50000000 200.21585083]
[92.50000000 185.21585083]
[92.50000000 170.21585083]
[92.50000000 155.21585083]
[84.76270294 142.48857117]
[92.50000000 128.68840027]
[92.50000000 113.68840790]
[88.79383850 99.15346527]
[81.61132812 85.98488617]
[74.42881775 72.81629944]
[67.24631500 59.64772034]
[60.06380463 46.47913742]
[42.41850281 46.32566452]
[27.43997955 37.28273392]
[19.22727203 22.00276566]
[4.22808266 22.15880203]
[-10.77110577 22.31483841]
[-25.77029419 22.47087479]
[-40.76948166 22.62691116]
[-54.60240936 31.43498611]
[-69.01991272 23.62041283]
[-69.19050598 7.22215223]
[-54.93869400 -0.89066929]
[-40.92551804 7.62772322]
[-25.92633057 7.47168636]
[-10.92714214 7.31564999]
[4.07204628 7.15961361]
[19.07123375 7.00357676]
[22.67192268 -2.20632243]
[28.86040306 -9.91929245]
[37.07106781 -15.43038940]
[33.97274780 -30.10691452]
[23.55180931 -42.01131058]
[28.49337578 -56.06229782]
[25.39505386 -70.73882294]
[22.29673195 -85.41534424]
[19.04590607 -100.05884552]
[15.64292812 -114.66773987]
[12.23995018 -129.27662659]
[-2.80749846 -128.87767029]
[-17.62717628 -131.51623535]
[-31.61222458 -137.08430481]
[-44.18996811 -145.35383606]
[-54.84535217 -155.98622131]
[-63.14204788 -168.54606628]
[-68.74031067 -182.51905823]
[-71.41089630 -197.33299255]
[-71.04444122 -212.38127136]
[-67.65595245 -227.04766846]
[-61.38419342 -240.73159790]
[-52.48598099 -252.87271118]
[-41.32569504 -262.97384644]
[-28.36034393 -270.62136841]
[-14.12084675 -275.50210571]
[0.80969661 -277.41619873]
[15.81988907 -276.28527832]
[30.29507446 -272.15563965]
[43.64250183 -265.19638062]
[55.31560135 -255.69252014]
[64.83636475 -244.03318787]
[71.81493378 -230.69584656]
[75.96552277 -216.22665405]
[77.11818695 -201.21812439]
[75.22570801 -186.28482056]
[70.36559296 -172.03826904]
[62.73686218 -159.06185913]
[52.65189743 -147.88696289]
[40.52367401 -138.97117615]
[26.84884262 -132.67961121]
[30.25182152 -118.07071686]
[33.65480042 -103.46183014]
[38.26517868 -97.62316132]
[36.97325897 -88.51367188]
[40.07157898 -73.83714294]
[43.16990280 -59.16061783]
[53.36922455 -48.30598450]
[48.64927292 -33.20523834]
[51.74759293 -18.52871132]
[66.80684662 -14.65058231]
[78.44620514 -4.21716356]
[83.99876404 10.48054600]
[82.14653015 26.16361427]
[73.23238373 39.29663086]
[80.41489410 52.46520996]
[87.59740448 65.63379669]
[94.77991486 78.80237579]
[101.96241760 91.97096252]
[106.65167236 88.40664673]
[113.27378845 87.16160583]
[120.82134247 88.95963287]
[135.68438721 90.98197174]
[150.54743958 93.00430298]
[165.41047668 95.02663422]
[180.27352905 97.04897308]
[195.13656616 99.07130432]
[209.99961853 101.09364319]
[224.86267090 103.11597443]
[237.28933716 93.35107422]
[252.97099304 95.31616211]
[262.60397339 107.84538269]
[260.47317505 123.50537109]
[247.84281921 133.00534058]
[232.20623779 130.70912170]
[222.84033203 117.97901917]
[207.97727966 115.95668793]
[193.11424255 113.93435669]
[178.25119019 111.91201782]
[163.38815308 109.88968658]
[148.52510071 107.86734772]
[133.66204834 105.84501648]
[118.79900360 103.82267761]
[107.50000000 113.68840790]
[107.50000000 128.68840027]
[115.23729706 142.48857117]
[107.50000000 155.21585083]
[107.50000000 170.21585083]
[107.50000000 185.21585083]
[107.50000000 200.21585083]
[107.50000000 215.21585083]
[107.50000000 230.21585083]
[107.50000000 245.21585083]
[107.50000000 260.21585083]
[107.50000000 275.21585083]
[107.50000000 290.21585083]
[122.03988647 294.27716064]
[134.94427490 302.11166382]
[145.25555420 313.13800049]
[152.20857239 326.53793335]
[155.28736877 341.31707764]
[154.26348877 356.37878418]
[149.21287537 370.60528564]
[140.51036072 382.94094849]
[128.80169678 392.47036743]
[114.95575714 398.48641968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[47 94]
[48 93]
[50 91]
[51 90]
[52 89]
[53 87]
[54 86]
[55 85]
[106 127]
[107 126]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
