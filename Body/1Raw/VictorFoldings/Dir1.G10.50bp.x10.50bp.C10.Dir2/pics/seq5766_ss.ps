%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAUGACGGGGGGGGGGAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUxxxxxxxxxxCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGCCCCCCCCCCAUAAAAUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.89941406]
[71.19830322 353.88339233]
[59.48964310 344.35397339]
[50.78712082 332.01831055]
[45.73651886 317.79177856]
[44.71262741 302.73010254]
[47.79142761 287.95092773]
[54.74444962 274.55099487]
[65.05573273 263.52465820]
[77.96011353 255.69015503]
[92.50000000 251.62884521]
[92.50000000 236.62884521]
[92.50000000 221.62884521]
[92.50000000 206.62884521]
[92.50000000 191.62884521]
[92.50000000 176.62884521]
[92.50000000 161.62884521]
[92.50000000 146.62884521]
[92.50000000 131.62884521]
[92.50000000 116.62884521]
[78.91714478 96.32216644]
[98.07919312 75.51467896]
[90.08927917 62.81975174]
[82.09935760 50.12482452]
[74.10944366 37.42989349]
[66.11952972 24.73496437]
[58.12961197 12.04003429]
[58.38282394 27.03789711]
[54.96713257 41.64382172]
[48.08922195 54.97402573]
[38.16526413 66.22191620]
[25.79574203 74.70690155]
[11.72911835 79.91555786]
[-3.18345284 81.53272247]
[-18.03963280 79.46054077]
[-31.94049263 73.82440186]
[-44.04491425 64.96533966]
[-53.62047195 53.41939926]
[-60.08776093 39.88521576]
[-63.05545425 25.18171883]
[-62.34398651 10.19860077]
[-57.99640274 -4.15753031]
[-50.27576828 -17.01800537]
[-39.64925385 -27.60465431]
[-26.75984764 -35.27689362]
[-12.38747597 -39.57048798]
[2.59820962 -40.22563171]
[17.29044724 -37.20269012]
[30.80022621 -30.68457603]
[42.31009293 -21.06568718]
[51.12263870 -8.92978668]
[49.87576675 -23.87787437]
[48.62889099 -38.82596207]
[47.38201523 -53.77404785]
[32.39130783 -54.88089752]
[17.75833511 -58.31930161]
[3.84345102 -64.00459290]
[-9.01067734 -71.79675293]
[-20.48750687 -81.50391388]
[-30.30441093 -92.88700867]
[-38.21963501 -105.66573334]
[-44.03826904 -119.52538300]
[-47.61701202 -134.12466431]
[-48.86774445 -149.10406494]
[-47.75965881 -164.09468079]
[-44.32004547 -178.72737122]
[-38.63360977 -192.64178467]
[-30.84038162 -205.49526978]
[-21.13227844 -216.97129822]
[-9.74837112 -226.78726196]
[3.03100204 -234.70143127]
[16.89113617 -240.51892090]
[31.49071503 -244.09645081]
[46.47021103 -245.34594727]
[61.46073532 -244.23663330]
[76.09313965 -240.79580688]
[90.00708771 -235.10823059]
[102.85993195 -227.31393433]
[114.33515930 -217.60488892]
[124.15017700 -206.22016907]
[132.06329346 -193.44013977]
[137.87963867 -179.57952881]
[141.45597839 -164.97966003]
[142.70423889 -150.00006104]
[141.59367371 -135.00962830]
[138.15165710 -120.37750244]
[132.46292114 -106.46402740]
[124.66757202 -93.61182404]
[114.95757294 -82.13739777]
[103.57204437 -72.32331848]
[90.79136658 -64.41125488]
[76.93027496 -58.59605408]
[62.33010101 -55.02092361]
[63.57697678 -40.07283401]
[64.82385254 -25.12474823]
[66.07072449 -10.17666149]
[70.82453918 4.05011797]
[78.81446075 16.74504662]
[86.80437469 29.43997765]
[94.79428864 42.13490677]
[102.78420258 54.82983780]
[110.77412415 67.52476501]
[107.39646912 52.90999603]
[112.08733368 38.66233826]
[123.48666382 28.91270828]
[138.28936768 26.48788452]
[152.20361328 32.09091187]
[161.19512939 44.09726334]
[162.65696716 59.02586365]
[156.16526794 72.54835510]
[143.60221863 80.74407959]
[128.61268616 81.23736572]
[142.93528748 85.69418335]
[157.25788879 90.15100098]
[171.58049011 94.60781097]
[185.90307617 99.06462860]
[198.26084900 89.68032837]
[213.77513123 89.38564301]
[226.48036194 98.29389191]
[231.49111938 112.97966003]
[226.88066101 127.79598236]
[214.42181396 137.04566956]
[198.90525818 137.17204285]
[186.29740906 128.12649536]
[181.44625854 113.38722992]
[167.12367249 108.93041229]
[152.80107117 104.47359467]
[138.47846985 100.01677704]
[124.15587616 95.55996704]
[118.95647430 109.93304443]
[107.50000000 116.62884521]
[107.50000000 131.62884521]
[107.50000000 146.62884521]
[107.50000000 161.62884521]
[107.50000000 176.62884521]
[107.50000000 191.62884521]
[107.50000000 206.62884521]
[107.50000000 221.62884521]
[107.50000000 236.62884521]
[107.50000000 251.62884521]
[122.03988647 255.69015503]
[134.94427490 263.52465820]
[145.25555420 274.55099487]
[152.20857239 287.95092773]
[155.28736877 302.73010254]
[154.26348877 317.79177856]
[149.21287537 332.01831055]
[140.51036072 344.35397339]
[128.80169678 353.88339233]
[114.95575714 359.89941406]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 102]
[23 101]
[24 100]
[25 99]
[26 98]
[27 97]
[51 96]
[52 95]
[53 94]
[54 93]
[112 129]
[113 128]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
