%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGCAUUCCGGGGGGGGGGCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAxxxxxxxxxxCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCCCCCCCCCCCUAGCAUUCC\
) } def
/len { sequence length } bind def

/coor [
[67.52871704 626.14050293]
[54.30852509 618.86804199]
[43.42171860 608.42102051]
[35.61058807 595.51177979]
[31.40770721 581.02050781]
[31.09963608 565.93511963]
[34.70737839 551.28430176]
[41.98495102 538.06695557]
[52.43615723 527.18414307]
[65.34841919 519.37799072]
[79.84135437 515.18072510]
[79.52929688 500.18399048]
[79.21724701 485.18722534]
[78.90518951 470.19046021]
[78.59313202 455.19372559]
[78.28107452 440.19696045]
[77.96901703 425.20019531]
[77.65695953 410.20346069]
[77.34490967 395.20669556]
[77.03285217 380.20996094]
[63.25169373 377.47982788]
[50.34382248 371.91754150]
[38.88444901 363.76812744]
[29.38486099 353.39187622]
[22.26958084 341.24856567]
[17.85740852 327.87701416]
[16.34713364 313.87118530]
[17.80858040 299.85379028]
[22.17938805 286.44863892]
[29.26766014 274.25283813]
[38.76039505 263.81024170]
[50.23730850 255.58714294]
[63.18942261 249.95147705]
[77.04166412 247.15638733]
[77.35372162 232.15963745]
[75.44406891 230.02407837]
[74.29378510 226.97927856]
[74.26277924 223.32128906]
[75.59313202 219.47404480]
[78.36718750 215.94331360]
[79.92477417 201.02439880]
[77.47538757 193.99972534]
[81.67309570 185.81246948]
[83.54070282 170.92918396]
[85.40831757 156.04591370]
[87.27593231 141.16262817]
[89.14354706 126.27935028]
[63.83060455 111.23001099]
[60.34629822 74.19326019]
[49.04729462 64.32753754]
[37.74829102 54.46181488]
[26.44928551 44.59609222]
[10.41016006 44.24110413]
[0.80247623 31.39307022]
[4.99642611 15.90790558]
[19.77477074 9.66450119]
[33.80082703 17.45226479]
[36.31501007 33.29708862]
[47.61401367 43.16281128]
[58.91301727 53.02853394]
[70.21202087 62.89425659]
[77.07205200 59.86275101]
[71.00926208 46.14259720]
[84.72952271 40.08003998]
[90.79210663 53.79973602]
[97.65213013 50.76823044]
[97.96418762 35.77147675]
[90.51565552 21.81332779]
[98.51605988 9.24977493]
[84.71771240 2.80573964]
[74.73822784 -8.69772720]
[70.30660248 -23.26758003]
[72.19065094 -38.37950516]
[80.06394196 -51.41526794]
[92.56239319 -60.11634445]
[107.52055359 -62.97522354]
[122.34684753 -59.49658203]
[134.47251892 -50.28311920]
[141.79673767 -36.93112183]
[143.05052185 -21.75390625]
[138.01664734 -7.38101339]
[127.56727600 3.69736409]
[113.51280975 9.56183052]
[120.98365784 22.44731331]
[112.96093750 36.08353424]
[112.64888763 51.08028793]
[126.17307281 57.56845093]
[137.67488098 47.93992615]
[149.17668152 38.31140137]
[160.67848206 28.68287468]
[172.18028259 19.05434799]
[169.45173645 3.93976712]
[174.66111755 -10.50868702]
[186.40715027 -20.40445328]
[201.53021240 -23.08562088]
[215.96226501 -17.83096886]
[225.82116699 -6.05397129]
[228.45492554 9.07741737]
[223.15505981 23.49293137]
[211.34721375 33.31486511]
[196.20764160 35.90117645]
[181.80880737 30.55615044]
[170.30700684 40.18467712]
[158.80520630 49.81320190]
[147.30340576 59.44173050]
[135.80160522 69.07025909]
[141.92514038 92.49140930]
[135.47035217 113.27376556]
[120.77945709 125.83297729]
[104.02682495 128.14695740]
[102.15921021 143.03024292]
[100.29159546 157.91352844]
[98.42398834 172.79679871]
[96.55637360 187.68008423]
[94.84368134 202.58198547]
[93.28610229 217.50090027]
[92.35047150 232.47167969]
[92.03841400 247.46844482]
[107.53466034 251.50653076]
[121.62268066 259.10253906]
[133.49957275 269.81900024]
[142.48951721 283.04077148]
[148.08224487 298.01034546]
[149.96202087 313.87118530]
[148.02537537 329.71670532]
[142.38691711 344.64221191]
[133.37246704 357.79650879]
[121.50025177 368.43038940]
[107.45114899 375.93933105]
[92.02960205 379.89788818]
[92.34165955 394.89465332]
[92.65371704 409.89138794]
[92.96577454 424.88815308]
[93.27783203 439.88491821]
[93.58988190 454.88165283]
[93.90193939 469.87841797]
[94.21399689 484.87515259]
[94.52605438 499.87191772]
[94.83811188 514.86865234]
[109.49310303 518.45941162]
[122.71891022 525.72167969]
[133.61378479 536.16027832]
[141.43487549 549.06347656]
[145.64894104 563.55157471]
[145.96867371 578.63665771]
[142.37223816 593.29028320]
[135.10487366 606.51330566]
[124.66207886 617.40411377]
[111.75584412 625.22021484]
[97.26615906 629.42871094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[34 118]
[35 117]
[40 116]
[41 115]
[43 114]
[44 113]
[45 112]
[46 111]
[47 110]
[49 61]
[50 60]
[51 59]
[52 58]
[66 86]
[67 85]
[69 83]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
