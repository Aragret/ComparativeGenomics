%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAACACAGGGGGGGGGGACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAxxxxxxxxxxUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCACCCCCCCCCCAAUCACCACA\
) } def
/len { sequence length } bind def

/coor [
[80.44544220 500.98327637]
[66.59950256 494.96725464]
[54.89083862 485.43783569]
[46.18831635 473.10217285]
[41.13771439 458.87564087]
[40.11382294 443.81396484]
[43.19262314 429.03479004]
[50.14564514 415.63488770]
[60.45692825 404.60855103]
[73.36130524 396.77404785]
[87.90119934 392.71270752]
[87.90119934 377.71270752]
[87.90119934 362.71270752]
[87.90119934 347.71270752]
[87.90119934 332.71270752]
[87.90119934 317.71270752]
[87.90119934 302.71270752]
[87.90119934 287.71270752]
[87.90119934 272.71270752]
[87.90119934 257.71270752]
[73.66445923 253.14367676]
[61.52056885 244.38603210]
[52.66618729 232.28727722]
[47.97859573 218.02482605]
[47.92882538 202.99153137]
[52.53433228 188.65959167]
[61.35606766 176.43644714]
[73.54029083 167.52648926]
[87.90119934 162.81248474]
[87.90119934 147.81248474]
[87.90119934 132.81248474]
[87.74516296 117.81329346]
[77.08353424 107.26200867]
[62.08434296 107.10597229]
[47.08515549 106.94993591]
[32.08596802 106.79389954]
[16.18479538 112.67514038]
[6.13150787 99.02348328]
[16.46662521 85.58393097]
[32.24200439 91.79470825]
[47.24119186 91.95074463]
[62.24037933 92.10678101]
[77.23957062 92.26281738]
[86.00577545 80.09098053]
[81.10422516 65.91442108]
[76.20267487 51.73786545]
[71.30112457 37.56130600]
[66.39957428 23.38474846]
[61.49802399 9.20818996]
[46.67403793 11.71803951]
[31.63912582 11.75355816]
[16.80344772 9.31377697]
[2.57173371 4.46525431]
[-10.66776562 -2.65973830]
[-22.55386734 -11.86682606]
[-32.76231003 -22.90483284]
[-41.01459503 -35.47263336]
[-47.08560181 -49.22736740]
[-50.80970764 -63.79380035]
[-52.08530807 -78.77454376]
[-50.87761307 -93.76091766]
[-47.21956635 -108.34407806]
[-41.21096039 -122.12618256]
[-33.01571655 -134.73124695]
[-22.85740471 -145.81541443]
[-11.01315308 -155.07627869]
[2.19391847 -162.26119995]
[16.40351295 -167.17416382]
[31.22797966 -169.68116760]
[46.26290131 -169.71379089]
[61.09810638 -167.27114868]
[75.32888794 -162.41987610]
[88.56701660 -155.29234314]
[100.45133972 -146.08296204]
[110.65765381 -135.04298401]
[118.90752411 -122.47360229]
[124.97587585 -108.71769714]
[128.69717407 -94.15054321]
[129.96989441 -79.16955566]
[128.75930786 -64.18341827]
[125.09844971 -49.60096359]
[119.08718872 -35.82001495]
[110.88951874 -23.21652031]
[100.72907257 -12.13431931]
[88.88303375 -2.87573886]
[75.67458344 4.30663919]
[80.57613373 18.48319817]
[85.47768402 32.65975571]
[90.37923431 46.83631516]
[95.28078461 61.01287079]
[100.18233490 75.18943024]
[97.70296478 60.39575958]
[105.78379059 47.75850296]
[120.25267029 43.80231094]
[133.63929749 50.56976700]
[139.03210449 64.56682587]
[133.64678955 78.56676483]
[120.26176453 85.34159851]
[134.58436584 80.88478851]
[145.46240234 69.39658356]
[159.91381836 73.00292206]
[163.92247009 58.10546875]
[175.36428833 47.75710678]
[190.58821106 45.25997162]
[204.73634338 51.41088486]
[213.29408264 64.24710846]
[213.53067017 79.67266083]
[205.37062073 92.76529694]
[191.41777039 99.34720612]
[176.12442017 97.31812286]
[164.37063599 87.32552338]
[154.51704407 98.49494171]
[139.04116821 95.20738220]
[124.71857452 99.66419983]
[121.62625885 107.73916626]
[116.21591187 113.68352509]
[109.54797363 116.96382904]
[102.74191284 117.50124359]
[106.06677246 126.08011627]
[102.90119934 132.81248474]
[102.90119934 147.81248474]
[102.90119934 162.81248474]
[117.26210022 167.52648926]
[129.44631958 176.43644714]
[138.26805115 188.65959167]
[142.87356567 202.99153137]
[142.82379150 218.02482605]
[138.13619995 232.28727722]
[129.28181458 244.38603210]
[117.13793182 253.14367676]
[102.90119934 257.71270752]
[102.90119934 272.71270752]
[102.90119934 287.71270752]
[102.90119934 302.71270752]
[102.90119934 317.71270752]
[102.90119934 332.71270752]
[102.90119934 347.71270752]
[102.90119934 362.71270752]
[102.90119934 377.71270752]
[102.90119934 392.71270752]
[117.44108582 396.77404785]
[130.34545898 404.60855103]
[140.65675354 415.63488770]
[147.60977173 429.03479004]
[150.68856812 443.81396484]
[149.66467285 458.87564087]
[144.61407471 473.10217285]
[135.91154480 485.43783569]
[124.20288849 494.96725464]
[110.35694885 500.98327637]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 122]
[30 121]
[31 120]
[32 118]
[33 43]
[34 42]
[35 41]
[36 40]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
[98 114]
[99 113]
[101 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
