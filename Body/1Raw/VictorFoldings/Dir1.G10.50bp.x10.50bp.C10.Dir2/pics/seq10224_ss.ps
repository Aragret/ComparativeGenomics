%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCUUCCGGGGGGGGGGUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGAxxxxxxxxxxCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCACCCCCCCCCCUCCCCCUUCC\
) } def
/len { sequence length } bind def

/coor [
[121.67011261 571.26708984]
[107.82417297 565.25103760]
[96.11551666 555.72161865]
[87.41298676 543.38598633]
[82.36238861 529.15942383]
[81.33849335 514.09777832]
[84.41729736 499.31860352]
[91.37031555 485.91867065]
[101.68160248 474.89233398]
[114.58598328 467.05783081]
[129.12586975 462.99652100]
[129.12586975 447.99652100]
[129.12586975 432.99652100]
[129.12586975 417.99652100]
[129.12586975 402.99652100]
[129.12586975 387.99652100]
[129.12586975 372.99652100]
[129.12586975 357.99652100]
[129.12586975 342.99652100]
[129.12586975 327.99652100]
[129.12586975 312.99652100]
[127.56829071 298.07760620]
[124.46997070 283.40109253]
[121.37164307 268.72454834]
[107.13300323 267.55889893]
[93.78835297 262.41360474]
[82.42747498 253.69920349]
[73.98088837 242.11808777]
[69.14359283 228.60791016]
[68.31793213 214.26562500]
[71.58012390 200.25851440]
[78.67333221 187.72909546]
[89.02786255 177.70195007]
[101.80688477 171.00001526]
[99.01456451 156.26220703]
[96.22223663 141.52439880]
[93.42991638 126.78659058]
[90.63758850 112.04878998]
[81.12922668 100.44744873]
[67.22667694 94.81549072]
[56.29145813 105.41458893]
[41.98836899 110.64350128]
[26.79550171 109.59628296]
[13.34511280 102.45437622]
[3.96756268 90.45514679]
[0.28756887 75.67754364]
[2.94271278 60.68187332]
[11.47297478 48.06623077]
[24.40043449 40.01634216]
[39.48533249 37.92691040]
[54.11412048 42.15993500]
[65.75226593 51.98202133]
[72.38339996 65.69143677]
[72.85862732 80.91293335]
[86.76118469 86.54489136]
[99.61959076 78.82080841]
[101.17716980 63.90189362]
[102.73474884 48.98297882]
[100.54748535 44.10082245]
[100.50114441 39.35211182]
[102.17456055 35.54404831]
[104.88329315 33.19239426]
[107.36840820 18.39968872]
[109.85353088 3.60698152]
[102.79691315 2.30694056]
[95.89313507 -2.21216226]
[90.49325562 -9.87420654]
[87.88059998 -20.07241631]
[87.88059998 -35.07241821]
[74.10673523 -41.64838028]
[64.55680847 -53.55475235]
[61.12696457 -68.42751312]
[64.49821472 -83.31365967]
[74.00117493 -95.25754547]
[87.74903870 -101.88769531]
[103.01216125 -101.88769531]
[116.76002502 -95.25754547]
[126.26299286 -83.31365967]
[129.63423157 -68.42751312]
[126.20439911 -53.55475235]
[116.65447235 -41.64838028]
[102.88059998 -35.07241821]
[102.88059998 -20.07241631]
[117.29281616 -15.91452885]
[125.28273010 -28.60945892]
[133.27264404 -41.30438995]
[131.13073730 -57.20381546]
[142.32957458 -68.69144440]
[158.27836609 -66.95494843]
[166.74256897 -53.32642365]
[161.22917175 -38.26050186]
[145.96757507 -33.31447220]
[137.97766113 -20.61954308]
[129.98774719 -7.92461300]
[124.64623260 6.09210014]
[122.16111755 20.88480759]
[119.67599487 35.67751312]
[117.65366364 50.54056168]
[116.09608459 65.45947266]
[114.53849792 80.37838745]
[119.00408936 91.08412933]
[117.53511810 100.97911072]
[112.04726410 107.39000702]
[105.37539673 109.25646210]
[108.16771698 123.99427032]
[110.96004486 138.73207092]
[113.75236511 153.46987915]
[116.54469299 168.20768738]
[132.21542358 170.13171387]
[146.51136780 176.78663635]
[158.04386902 187.51284790]
[165.69683838 201.25593567]
[168.73464966 216.67028809]
[166.87286377 232.25090027]
[160.30488586 246.48028564]
[149.68185425 257.97625732]
[136.04817200 265.62622070]
[139.14649963 280.30276489]
[142.24481201 294.97927856]
[148.97720337 281.57498169]
[161.43360901 273.21807861]
[176.38973999 272.07171631]
[189.97424316 278.43264771]
[198.67080688 290.65432739]
[200.22836304 305.57324219]
[194.24374390 319.32766724]
[182.26602173 328.35733032]
[167.39562988 330.32489014]
[153.48170471 324.72106934]
[144.12586975 312.99652100]
[144.12586975 327.99652100]
[144.12586975 342.99652100]
[144.12586975 357.99652100]
[144.12586975 372.99652100]
[144.12586975 387.99652100]
[144.12586975 402.99652100]
[144.12586975 417.99652100]
[144.12586975 432.99652100]
[144.12586975 447.99652100]
[144.12586975 462.99652100]
[158.66575623 467.05783081]
[171.57014465 474.89233398]
[181.88142395 485.91867065]
[188.83444214 499.31860352]
[191.91323853 514.09777832]
[190.88935852 529.15942383]
[185.83874512 543.38598633]
[177.13623047 555.72161865]
[165.42756653 565.25103760]
[151.58161926 571.26708984]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 119]
[23 118]
[24 117]
[34 108]
[35 107]
[36 106]
[37 105]
[38 104]
[39 55]
[40 54]
[56 100]
[57 99]
[58 98]
[62 97]
[63 96]
[64 95]
[68 83]
[69 82]
[84 94]
[85 93]
[86 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
