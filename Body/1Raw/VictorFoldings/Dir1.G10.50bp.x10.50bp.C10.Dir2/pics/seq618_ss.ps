%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUAAUCGGGGGGGGGGUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCUxxxxxxxxxxGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACCCCCCCCCCCUACUACUAAUC\
) } def
/len { sequence length } bind def

/coor [
[21.48391724 286.14581299]
[10.87022114 281.30340576]
[0.55373275 275.85641479]
[-9.43114758 269.82302856]
[-19.05112648 263.22338867]
[-28.27412224 256.07943726]
[-37.06938171 248.41503906]
[-45.40758133 240.25575256]
[-53.26091003 231.62878418]
[-60.60318375 222.56288147]
[-67.40991974 213.08828735]
[-73.65841675 203.23660278]
[-79.32785034 193.04066467]
[-92.88974762 199.44963074]
[-106.45163727 205.85861206]
[-115.62286377 218.75044250]
[-130.43580627 217.19285583]
[-143.99769592 223.60183716]
[-157.55960083 230.01081848]
[-171.12149048 236.41978455]
[-184.68339539 242.82876587]
[-198.24528503 249.23774719]
[-199.42535400 264.55123901]
[-208.11730957 277.21398926]
[-221.98304749 283.81979370]
[-237.29277039 282.59173584]
[-249.92822266 273.86013794]
[-256.49053955 259.97375488]
[-255.21449280 244.66796875]
[-246.44332886 232.05993652]
[-232.53643799 225.54118347]
[-217.23472595 226.86520386]
[-204.65426636 235.67584229]
[-191.09236145 229.26687622]
[-177.53047180 222.85789490]
[-163.96856689 216.44891357]
[-150.40667725 210.03994751]
[-136.84477234 203.63096619]
[-128.64360046 191.19755554]
[-112.86061859 192.29672241]
[-99.29872131 185.88774109]
[-85.73682404 179.47875977]
[-95.01262665 152.77420044]
[-100.47000885 125.03630066]
[-102.00211334 96.80817413]
[-99.57893372 68.64255524]
[-93.24792480 41.09091568]
[-83.13304901 14.69274521]
[-69.43235779 -10.03507805]
[-52.41411209 -32.60837173]
[-32.41154099 -52.58514404]
[-41.81539536 -64.27135468]
[-51.21925354 -75.95755768]
[-60.62311172 -87.64376831]
[-75.62824249 -84.62638092]
[-90.31361389 -88.93898010]
[-101.30462646 -99.59056091]
[-106.07563782 -114.13346100]
[-103.53030396 -129.22583008]
[-94.25350952 -141.39956665]
[-80.37700653 -147.85722351]
[-65.08951569 -147.11486816]
[-51.90398026 -139.34310913]
[-43.85034561 -126.32782745]
[-42.77927780 -111.05984497]
[-48.93690109 -97.04762268]
[-39.53304672 -85.36141968]
[-30.12918854 -73.67520905]
[-20.72533035 -61.98899841]
[-11.64508438 -68.37581635]
[-2.22772217 -74.25422668]
[7.49832010 -79.60646057]
[17.50367355 -84.41637421]
[27.75812912 -88.66942596]
[38.23072052 -92.35279846]
[48.88982391 -95.45534515]
[59.70325851 -97.96771240]
[70.63837433 -99.88230896]
[81.66213989 -101.19335175]
[92.74128723 -101.89688873]
[103.84234619 -101.99078369]
[114.93180084 -101.47476959]
[125.97617340 -100.35039520]
[136.94210815 -98.62105560]
[147.79649353 -96.29196930]
[158.50656128 -93.37017822]
[169.03996277 -89.86449432]
[179.36489868 -85.78550720]
[189.45018005 -81.14553833]
[199.26536560 -75.95859528]
[208.78082275 -70.24034119]
[217.96781921 -64.00804138]
[226.79859924 -57.28050995]
[235.24650574 -50.07806396]
[243.28602600 -42.42245483]
[250.89289856 -34.33679581]
[258.04412842 -25.84550476]
[264.71817017 -16.97421646]
[270.89480591 -7.74972153]
[276.55545044 1.80012727]
[281.68295288 11.64649391]
[286.26187134 21.75964737]
[290.27838135 32.10904694]
[293.72030640 42.66344833]
[296.57730103 53.39097977]
[298.84072876 64.25924683]
[300.50375366 75.23543549]
[301.56134033 86.28639984]
[316.55422974 85.82447815]
[331.54711914 85.36254883]
[346.54000854 84.90062714]
[358.53277588 74.24448395]
[374.31625366 77.11867523]
[381.78274536 91.31836700]
[375.20455933 105.95076752]
[359.62796021 109.79115295]
[347.00192261 99.89350891]
[332.00906372 100.35543823]
[317.01617432 100.81735992]
[302.02328491 101.27928925]
[301.61260986 112.93822479]
[300.52966309 124.55402374]
[298.77801514 136.08795166]
[296.36355591 147.50152588]
[293.29431152 158.75671387]
[289.58050537 169.81597900]
[285.23455811 180.64244080]
[280.27090454 191.19998169]
[274.70617676 201.45343018]
[268.55883789 211.36856079]
[261.84945679 220.91233826]
[254.60037231 230.05293274]
[246.83576965 238.75985718]
[238.58154297 247.00407410]
[229.86520386 254.75810242]
[220.71582031 261.99609375]
[211.16390991 268.69387817]
[201.24131775 274.82916260]
[190.98114014 280.38146973]
[180.41757202 285.33227539]
[169.58584595 289.66510010]
[158.52207947 293.36547852]
[147.26318359 296.42105103]
[135.84667969 298.82168579]
[124.31063843 300.55929565]
[112.69353485 301.62817383]
[101.03410339 302.02468872]
[89.37122345 301.74752808]
[77.74378967 300.79766846]
[66.19056702 299.17822266]
[54.75008392 296.89462280]
[43.46049118 293.95443726]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 42]
[14 41]
[15 40]
[17 38]
[18 37]
[19 36]
[20 35]
[21 34]
[22 33]
[51 69]
[52 68]
[53 67]
[54 66]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
