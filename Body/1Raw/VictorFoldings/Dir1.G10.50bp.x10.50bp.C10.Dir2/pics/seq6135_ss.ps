%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACUGGCUUCGGGGGGGGGGAAUCUACUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGxxxxxxxxxxUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUCCCCCCCCCCAUCAAUUGGCUUC\
) } def
/len { sequence length } bind def

/coor [
[135.69190979 460.41461182]
[121.42013550 455.60519409]
[108.51615143 447.83981323]
[97.58349609 437.48165894]
[89.13351440 425.01522827]
[83.56141663 411.02359009]
[81.12783051 396.16116333]
[81.94657135 381.12307739]
[85.97934723 366.61273193]
[93.03753662 353.30874634]
[102.79102325 341.83340454]
[114.78361511 332.72341919]
[128.45439148 326.40487671]
[143.16394043 323.17330933]
[143.16394043 308.17330933]
[143.16394043 293.17330933]
[143.16394043 278.17330933]
[143.16394043 263.17330933]
[143.16394043 248.17330933]
[143.16394043 233.17330933]
[143.16394043 218.17330933]
[143.16394043 203.17330933]
[143.16394043 188.17330933]
[143.16394043 173.17330933]
[139.59663391 158.60366821]
[132.66670227 145.30043030]
[125.73677826 131.99719238]
[118.80685425 118.69395447]
[91.74424744 122.31680298]
[78.98467255 101.55255127]
[64.61164856 97.26115417]
[50.23862076 92.96975708]
[35.86559296 88.67835999]
[21.49256706 84.38696289]
[7.11954069 80.09556580]
[-7.25348616 75.80416870]
[-21.62651253 71.51277161]
[-35.99954224 67.22137451]
[-50.37256622 62.92997360]
[-64.74559784 58.63857651]
[-74.98730469 69.95538330]
[-89.12818146 75.69981384]
[-104.36053467 74.73129272]
[-117.65998077 67.24213409]
[-126.38590240 54.71931458]
[-128.80575562 39.64924240]
[-124.43907928 25.02409363]
[-114.15288544 13.74770641]
[-99.98950195 8.05901146]
[-84.76107788 9.08750439]
[-71.49122620 16.62897873]
[-62.81468582 29.18606567]
[-60.45419693 44.26554871]
[-46.08116913 48.55694962]
[-31.70814323 52.84834671]
[-17.33511543 57.13974380]
[-2.96208882 61.43114090]
[11.41093826 65.72254181]
[25.78396606 70.01393890]
[40.15699387 74.30533600]
[54.53001785 78.59673309]
[68.90304565 82.88813019]
[83.27607727 87.17952728]
[85.59791565 84.61708069]
[88.30756378 82.46884918]
[91.33205414 80.79268646]
[90.43213654 65.81970215]
[89.53222656 50.84672165]
[88.63230896 35.87374115]
[74.16711426 31.27781868]
[62.34140778 21.76376724]
[54.75452423 8.61828613]
[52.43252945 -6.38080597]
[55.68944931 -21.20500565]
[64.08481598 -33.84946060]
[76.48322296 -42.60411453]
[91.20788574 -46.28497314]
[106.26741791 -44.39422607]
[119.62513733 -37.18758392]
[129.47453308 -25.63968468]
[134.48353577 -11.31228828]
[133.97474670 3.85694194]
[128.01693726 17.81649399]
[117.41589355 28.67845154]
[103.60528564 34.97382736]
[104.50520325 49.94680786]
[105.40512085 64.91978455]
[106.30503845 79.89276886]
[114.89165497 81.44101715]
[122.98235321 86.77225494]
[133.10083008 75.69902039]
[143.21929932 64.62579346]
[139.16551208 49.74055099]
[143.82461548 35.03353500]
[155.70989990 25.19769478]
[171.02880859 23.37161636]
[184.89312744 30.13799095]
[192.87882996 43.33769226]
[192.43768311 58.75874710]
[183.71046448 71.48035431]
[169.48199463 77.44308472]
[154.29254150 74.74427032]
[144.17405701 85.81749725]
[134.05558777 96.89073181]
[132.11009216 111.76403046]
[139.04002380 125.06726837]
[145.96994019 138.37049866]
[152.89987183 151.67373657]
[170.34312439 141.59413147]
[184.65565491 152.78518677]
[199.56489563 154.43269348]
[214.47415161 156.08020020]
[229.38339233 157.72770691]
[244.29264832 159.37521362]
[258.85916138 153.20045471]
[270.65960693 162.28881836]
[281.00393677 150.72274780]
[296.17813110 147.47875977]
[310.34741211 153.80426025]
[318.06335449 167.26693726]
[316.35903931 182.69012451]
[305.88983154 194.14331055]
[290.68133545 197.22248840]
[276.58154297 190.74366760]
[269.01208496 177.19807434]
[255.51200867 183.49067688]
[242.64514160 174.28446960]
[227.73590088 172.63696289]
[212.82664490 170.98945618]
[197.91738892 169.34194946]
[183.00814819 167.69444275]
[172.57119751 175.80654907]
[158.16394043 173.17330933]
[158.16394043 188.17330933]
[158.16394043 203.17330933]
[158.16394043 218.17330933]
[158.16394043 233.17330933]
[158.16394043 248.17330933]
[158.16394043 263.17330933]
[158.16394043 278.17330933]
[158.16394043 293.17330933]
[158.16394043 308.17330933]
[158.16394043 323.17330933]
[172.87350464 326.40487671]
[186.54428101 332.72341919]
[198.53686523 341.83340454]
[208.29035950 353.30874634]
[215.34854126 366.61273193]
[219.38131714 381.12307739]
[220.20005798 396.16116333]
[217.76647949 411.02359009]
[212.19438171 425.01522827]
[203.74438477 437.48165894]
[192.81173706 447.83981323]
[179.90776062 455.60519409]
[165.63598633 460.41461182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 108]
[26 107]
[27 106]
[28 105]
[30 63]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[36 57]
[37 56]
[38 55]
[39 54]
[40 53]
[66 88]
[67 87]
[68 86]
[69 85]
[90 104]
[91 103]
[92 102]
[110 131]
[111 130]
[112 129]
[113 128]
[114 127]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
