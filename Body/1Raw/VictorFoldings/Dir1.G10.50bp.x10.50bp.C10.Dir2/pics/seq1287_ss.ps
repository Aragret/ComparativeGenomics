%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAAAACUGGGGGGGGGGCCAGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACxxxxxxxxxxUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGACCCCCCCCCCGUAAAAAAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 389.30718994]
[71.19830322 383.29116821]
[59.48964310 373.76174927]
[50.78712082 361.42608643]
[45.73651886 347.19955444]
[44.71262741 332.13787842]
[47.79142761 317.35873413]
[54.74444962 303.95880127]
[65.05573273 292.93246460]
[77.96011353 285.09796143]
[92.50000000 281.03665161]
[92.50000000 266.03665161]
[92.50000000 251.03665161]
[92.50000000 236.03665161]
[92.50000000 221.03665161]
[92.50000000 206.03665161]
[92.50000000 191.03665161]
[92.50000000 176.03665161]
[92.50000000 161.03665161]
[92.50000000 146.03665161]
[84.52248383 144.00077820]
[77.02719879 140.59399414]
[70.24767303 135.92243958]
[64.39513397 130.13163757]
[59.65192795 123.40204620]
[45.63521576 128.74356079]
[31.61850166 134.08506775]
[18.97076988 145.37538147]
[4.62044334 136.34739685]
[9.32304382 120.05870056]
[26.27698898 120.06835938]
[40.29370117 114.72684479]
[54.31041336 109.38533020]
[53.46833801 96.77089691]
[56.04473114 84.39369202]
[61.85031509 73.16300964]
[70.45858002 63.90391541]
[81.23712158 57.29663849]
[93.39408875 53.82658005]
[106.03635406 53.74867630]
[110.34394073 39.38048935]
[114.65152740 25.01230621]
[118.95911407 10.64412308]
[123.26669312 -3.72406125]
[116.74128723 -14.40841579]
[117.85268402 -26.62548065]
[125.86328125 -35.58118820]
[127.11016083 -50.52927399]
[128.35702515 -65.47736359]
[129.60391235 -80.42544556]
[120.55639648 -68.46122742]
[109.38578033 -58.45036697]
[96.50527191 -50.76319885]
[82.39135742 -45.68408585]
[67.56613922 -43.40091324]
[52.57803345 -43.99814224]
[37.98148346 -47.45368195]
[24.31644821 -53.63970184]
[12.08842850 -62.32736588]
[1.74976408 -73.19529724]
[-6.31709480 -85.84147644]
[-11.81373787 -99.79808807]
[-14.53683090 -114.54884338]
[-14.38564205 -129.54808044]
[-11.36576271 -144.24095154]
[-5.58890629 -158.08392334]
[2.73122954 -170.56491089]
[13.28686428 -181.22224426]
[25.68752289 -189.66165161]
[39.47447586 -195.57096863]
[54.13771439 -198.73156738]
[69.13481140 -199.02655029]
[83.91099548 -196.44500732]
[97.91966248 -191.08242798]
[110.64260101 -183.13717651]
[121.60915375 -172.90318298]
[130.41365051 -160.75901794]
[136.73039246 -147.15391541]
[140.32571411 -132.59117126]
[141.06661987 -117.60947418]
[138.92724609 -102.76943970]
[148.67489624 -114.17046356]
[158.42254639 -125.57148743]
[168.17019653 -136.97250366]
[177.91784668 -148.37351990]
[187.66551208 -159.77455139]
[197.41316223 -171.17556763]
[207.16081238 -182.57658386]
[216.90846252 -193.97761536]
[215.42695618 -209.71231079]
[225.56968689 -221.83255005]
[241.31916809 -223.14762878]
[253.33151245 -212.87731934]
[254.47999573 -197.11480713]
[244.08325195 -185.21173096]
[228.30947876 -184.22996521]
[218.56182861 -172.82893372]
[208.81417847 -161.42791748]
[199.06652832 -150.02690125]
[189.31887817 -138.62586975]
[179.57122803 -127.22485352]
[169.82357788 -115.82382965]
[160.07591248 -104.42281342]
[150.32826233 -93.02178955]
[144.55198669 -79.17857361]
[143.30511475 -64.23048401]
[142.05824280 -49.28239822]
[140.81137085 -34.33431244]
[150.67709351 -23.03530693]
[165.65681458 -22.25546265]
[180.63652039 -21.47561646]
[192.20848083 -32.23968887]
[207.99920654 -31.58494377]
[218.64033508 -19.89982414]
[217.81866455 -4.11690903]
[206.02169800 6.40007973]
[190.24835205 5.41159964]
[179.85667419 -6.49590254]
[164.87696838 -7.27574778]
[149.89724731 -8.05559254]
[137.63487244 0.58352333]
[133.32730103 14.95170784]
[129.01971436 29.31989098]
[124.71212769 43.68807602]
[120.40454102 58.05625916]
[135.77075195 70.06547546]
[144.88352966 87.30783081]
[146.14978027 106.76902771]
[139.34814453 125.04686737]
[125.66768646 138.94602966]
[107.50000000 146.03665161]
[107.50000000 161.03665161]
[107.50000000 176.03665161]
[107.50000000 191.03665161]
[107.50000000 206.03665161]
[107.50000000 221.03665161]
[107.50000000 236.03665161]
[107.50000000 251.03665161]
[107.50000000 266.03665161]
[107.50000000 281.03665161]
[122.03988647 285.09796143]
[134.94427490 292.93246460]
[145.25555420 303.95880127]
[152.20857239 317.35873413]
[155.28736877 332.13787842]
[154.26348877 347.19955444]
[149.21287537 361.42608643]
[140.51036072 373.76174927]
[128.80169678 383.29116821]
[114.95575714 389.30718994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 33]
[26 32]
[27 31]
[40 125]
[41 124]
[42 123]
[43 122]
[44 121]
[47 108]
[48 107]
[49 106]
[50 105]
[81 104]
[82 103]
[83 102]
[84 101]
[85 100]
[86 99]
[87 98]
[88 97]
[89 96]
[109 120]
[110 119]
[111 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
