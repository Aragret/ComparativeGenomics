%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGACUAAGGGGGGGGGGCCCCUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGxxxxxxxxxxAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCCCCCCCCCCCAAGGACAAA\
) } def
/len { sequence length } bind def

/coor [
[93.88149261 443.53103638]
[80.03555298 437.51501465]
[68.32688904 427.98559570]
[59.62436676 415.64990234]
[54.57376480 401.42340088]
[53.54987335 386.36172485]
[56.62867355 371.58255005]
[63.58169556 358.18261719]
[73.89297485 347.15628052]
[86.79735565 339.32177734]
[101.33724213 335.26046753]
[101.33724213 320.26046753]
[101.33724213 305.26046753]
[101.33724213 290.26046753]
[101.33724213 275.26046753]
[101.33724213 260.26046753]
[101.33724213 245.26046753]
[101.33724213 230.26046753]
[101.33724213 215.26046753]
[101.33724213 200.26046753]
[79.65866089 186.33615112]
[75.43151093 162.48030090]
[89.15776825 144.41273499]
[84.55220795 130.13726807]
[73.05039978 120.50874329]
[58.18735504 118.48641205]
[43.32431030 116.46407318]
[38.37627792 118.49793243]
[33.62843704 118.39608765]
[29.87444305 116.60466003]
[27.60845375 113.82386780]
[12.90049267 110.87838745]
[-1.80746937 107.93290710]
[-16.51543045 104.98741913]
[-31.22339249 102.04193878]
[-44.27907944 110.53822327]
[-59.15308380 107.34156799]
[-67.17253113 94.84260559]
[-81.88049316 91.89711761]
[-96.58845520 88.95163727]
[-111.94242859 94.71250916]
[-124.43488312 84.08845520]
[-121.21465302 68.00858307]
[-105.59443665 63.01449585]
[-93.64297485 74.24367523]
[-78.93501282 77.18916321]
[-64.22705078 80.13464355]
[-52.01288986 71.68775177]
[-37.05496597 74.46537018]
[-28.27791023 87.33397675]
[-13.56994820 90.27946472]
[1.13801312 93.22494507]
[15.84597492 96.17042542]
[30.55393600 99.11590576]
[45.34664536 101.60102844]
[60.20969009 103.62335968]
[75.07273865 105.64569855]
[77.83056641 91.29919434]
[87.53543091 81.78343964]
[99.93196106 79.67021179]
[105.41899109 65.70982361]
[110.90602875 51.74943542]
[116.39305878 37.78904343]
[121.88008881 23.82865524]
[127.36711884 9.86826515]
[132.85415649 -4.09212446]
[138.34118652 -18.05251503]
[126.63356018 -25.96634674]
[116.85050201 -36.15505600]
[109.42527008 -48.16358566]
[104.68589020 -61.45636749]
[102.84066772 -75.44121552]
[103.96905518 -89.49570465]
[108.01819611 -102.99488068]
[114.80543518 -115.33901978]
[124.02652740 -125.98031616]
[135.26928711 -134.44715881]
[148.03202820 -140.36506653]
[161.74588013 -143.47319031]
[175.80026245 -143.63586426]
[189.56996155 -140.84854126]
[195.63296509 -154.56858826]
[201.69598389 -168.28865051]
[199.39956665 -184.52621460]
[212.47851562 -194.41929626]
[227.47833252 -187.79074097]
[228.96847534 -171.45944214]
[215.41603088 -162.22563171]
[209.35302734 -148.50558472]
[203.29000854 -134.78552246]
[215.99787903 -125.19363403]
[226.07196045 -112.85368347]
[232.93365479 -98.46807098]
[236.18740845 -82.85688782]
[235.64343262 -66.91111755]
[231.32885742 -51.54181290]
[223.48629761 -37.62803650]
[212.56031799 -25.96657944]
[199.17214966 -17.22632980]
[184.08444214 -11.90991688]
[168.15777588 -10.32479763]
[152.30157471 -12.56548309]
[146.81454468 1.39490688]
[141.32751465 15.35529709]
[135.84048462 29.31568718]
[130.35345459 43.27607727]
[124.86641693 57.23646545]
[119.37938690 71.19685364]
[113.89234924 85.15724945]
[122.07229614 99.85108185]
[116.50749969 117.16654205]
[98.82766724 125.53170776]
[103.43322754 139.80715942]
[114.37969971 140.43463135]
[124.63983154 145.43595886]
[132.47395325 154.34570312]
[136.41221619 166.01315308]
[135.52033997 178.74636841]
[149.04452515 185.23452759]
[162.56872559 191.72268677]
[176.09291077 198.21086121]
[189.61709595 204.69902039]
[206.51316833 206.09869385]
[209.84550476 222.72192383]
[194.79438782 230.52580261]
[183.12893677 218.22322083]
[169.60475159 211.73504639]
[156.08055115 205.24688721]
[142.55636597 198.75871277]
[129.03218079 192.27055359]
[116.33724213 200.26046753]
[116.33724213 215.26046753]
[116.33724213 230.26046753]
[116.33724213 245.26046753]
[116.33724213 260.26046753]
[116.33724213 275.26046753]
[116.33724213 290.26046753]
[116.33724213 305.26046753]
[116.33724213 320.26046753]
[116.33724213 335.26046753]
[130.87713623 339.32177734]
[143.78150940 347.15628052]
[154.09280396 358.18261719]
[161.04582214 371.58255005]
[164.12461853 386.36172485]
[163.10072327 401.42340088]
[158.05012512 415.64990234]
[149.34759521 427.98559570]
[137.63894653 437.51501465]
[123.79299927 443.53103638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 113]
[24 112]
[25 57]
[26 56]
[27 55]
[31 54]
[32 53]
[33 52]
[34 51]
[35 50]
[38 47]
[39 46]
[40 45]
[60 109]
[61 108]
[62 107]
[63 106]
[64 105]
[65 104]
[66 103]
[67 102]
[81 90]
[82 89]
[83 88]
[118 130]
[119 129]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
