%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACGUGGGGGGGGGGAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCAxxxxxxxxxxCCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACCCCCCCCCCCUAACAACAU\
) } def
/len { sequence length } bind def

/coor [
[100.70188141 512.45440674]
[86.85594177 506.43835449]
[75.14727783 496.90893555]
[66.44475555 484.57327271]
[61.39415359 470.34674072]
[60.37026215 455.28506470]
[63.44906235 440.50592041]
[70.40208435 427.10598755]
[80.71336365 416.07965088]
[93.61774445 408.24514771]
[108.15763855 404.18383789]
[108.15763855 389.18383789]
[108.15763855 374.18383789]
[108.15763855 359.18383789]
[108.15763855 344.18383789]
[108.15763855 329.18383789]
[108.15763855 314.18383789]
[108.15763855 299.18383789]
[108.15763855 284.18383789]
[108.15763855 269.18383789]
[100.42033386 256.45654297]
[108.15763855 242.65638733]
[108.15763855 227.65638733]
[95.19031525 220.32739258]
[87.58191681 207.40576172]
[87.46208191 192.31100464]
[94.96312714 179.09619141]
[108.15763855 171.35977173]
[108.15763855 156.35977173]
[108.15763855 141.35977173]
[108.15763855 126.35977936]
[94.22895813 125.87813568]
[82.86940002 118.80035400]
[76.82295990 107.48289490]
[77.22240448 95.21059418]
[83.41248322 85.25110626]
[76.22997284 72.08251953]
[69.04746246 58.91393661]
[61.86495590 45.74535370]
[47.88174057 51.22923279]
[33.32146072 54.91725540]
[18.41375732 56.75126266]
[3.39374208 56.70232391]
[-11.50169563 54.77121353]
[-26.03763199 50.98839188]
[-39.98481750 45.41351318]
[-53.12328339 38.13450623]
[-65.24581909 29.26616669]
[-76.16122437 18.94836426]
[-85.69736481 7.34382582]
[-93.70382690 -5.36442947]
[-100.05435181 -18.97597504]
[-104.64876556 -33.27613449]
[-107.41461945 -48.03937531]
[-108.30828857 -63.03285980]
[-107.31567383 -78.02011871]
[-104.45243835 -92.76478577]
[-99.76373291 -107.03430939]
[-93.32351685 -120.60363770]
[-85.23334503 -133.25877380]
[-75.62081909 -144.80010986]
[-64.63754272 -155.04565430]
[-52.45674133 -163.83378601]
[-39.27051544 -171.02590942]
[-25.28684044 -176.50860596]
[-10.72625065 -180.19540405]
[4.18160868 -182.02815247]
[19.20161819 -181.97795105]
[34.09689331 -180.04559326]
[48.63251114 -176.26155090]
[62.57922745 -170.68550110]
[75.71707916 -163.40538025]
[87.83886719 -154.53602600]
[98.75341034 -144.21730042]
[108.28857422 -132.61195374]
[116.29396820 -119.90303040]
[122.64334106 -106.29095459]
[127.23654938 -91.99040222]
[130.00115967 -77.22692871]
[130.89356995 -62.23337173]
[129.89968872 -47.24619675]
[127.03521729 -32.50177383]
[122.34531403 -18.23264313]
[115.90395355 -4.66385317]
[107.81271362 7.99059868]
[98.19921875 19.53113365]
[87.21508026 29.77573967]
[75.03353882 38.56284714]
[82.21604919 51.73143005]
[89.39855957 64.90000916]
[96.58106232 78.06859589]
[116.17618561 81.07700348]
[127.59317017 99.95719147]
[141.91577148 95.50037384]
[156.23835754 91.04355621]
[170.19876099 85.55652618]
[183.72294617 79.06835938]
[197.24713135 72.58020020]
[199.90792847 57.29295349]
[211.06959534 46.51348495]
[226.44023132 44.38671112]
[240.10951233 51.73042679]
[246.82133484 65.72081757]
[243.99485779 80.97829437]
[232.71691895 91.63604736]
[217.32411194 93.59595490]
[203.73530579 86.10438538]
[190.21110535 92.59255219]
[176.68692017 99.08071899]
[190.70153809 104.42770386]
[198.15286255 117.44607544]
[195.66534424 132.23837280]
[184.36585999 142.10356140]
[169.37319946 142.57258606]
[157.47917175 133.43299866]
[154.07188416 118.82511139]
[160.69517517 105.36615753]
[146.37258911 109.82297516]
[132.04998779 114.27978516]
[123.15763855 126.35977936]
[123.15763855 141.35977173]
[123.15763855 156.35977173]
[123.15763855 171.35977173]
[136.35214233 179.09619141]
[143.85319519 192.31100464]
[143.73335266 207.40576172]
[136.12495422 220.32739258]
[123.15763855 227.65638733]
[123.15763855 242.65638733]
[130.89492798 256.45654297]
[123.15763855 269.18383789]
[123.15763855 284.18383789]
[123.15763855 299.18383789]
[123.15763855 314.18383789]
[123.15763855 329.18383789]
[123.15763855 344.18383789]
[123.15763855 359.18383789]
[123.15763855 374.18383789]
[123.15763855 389.18383789]
[123.15763855 404.18383789]
[137.69752502 408.24514771]
[150.60189819 416.07965088]
[160.91319275 427.10598755]
[167.86621094 440.50592041]
[170.94500732 455.28506470]
[169.92111206 470.34674072]
[164.87051392 484.57327271]
[156.16798401 496.90893555]
[144.45933533 506.43835449]
[130.61338806 512.45440674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[28 123]
[29 122]
[30 121]
[31 120]
[36 91]
[37 90]
[38 89]
[39 88]
[93 119]
[94 118]
[95 117]
[96 109]
[97 108]
[98 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
