%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAUUUAACUGGGGGGGGGGGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGxxxxxxxxxxCCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCCCCCCCCCCCGUAAAUCUAACU\
) } def
/len { sequence length } bind def

/coor [
[101.60851288 406.19015503]
[87.44790649 401.03515625]
[74.85816193 392.75292969]
[64.51822662 381.79016113]
[56.98571396 368.73803711]
[52.66684723 354.30044556]
[51.79453659 339.25598145]
[54.41582870 324.41598511]
[60.38935471 310.58074951]
[69.39297485 298.49639893]
[80.94113159 288.81463623]
[94.41104889 282.05755615]
[109.07630920 278.58956909]
[109.07630920 263.58956909]
[109.07630920 248.58956909]
[109.07630920 233.58956909]
[109.07630920 218.58956909]
[109.07630920 203.58956909]
[109.07630920 188.58956909]
[109.07630920 173.58956909]
[109.07630920 158.58956909]
[109.07630920 143.58956909]
[109.07630920 128.58956909]
[97.33123779 128.58465576]
[87.00755310 124.14899445]
[79.62373352 116.36673737]
[76.09312439 106.77641296]
[61.10005569 106.32044983]
[46.10698700 105.86447906]
[31.11392021 105.40851593]
[16.12085152 104.95254517]
[1.12778389 104.49657440]
[-13.86528397 104.04061127]
[-28.85835266 103.58464050]
[-43.85142136 103.12867737]
[-58.84449005 102.67270660]
[-70.18114471 113.68432617]
[-85.98233032 113.37094879]
[-96.87347412 101.91850281]
[-96.39305878 86.12152100]
[-84.82610321 75.35206604]
[-69.03507996 75.99947357]
[-58.38852310 87.67964172]
[-43.39545441 88.13560486]
[-28.40238571 88.59157562]
[-13.40931702 89.04753876]
[1.58375132 89.50350952]
[16.57682037 89.95948029]
[31.56988716 90.41544342]
[46.56295776 90.87141418]
[61.55602264 91.32737732]
[76.54909515 91.78334808]
[80.50538635 84.59160614]
[86.58882141 79.08113861]
[82.68206787 64.59883118]
[78.77532196 50.11651993]
[74.86856842 35.63420868]
[70.96181488 21.15189934]
[55.89945602 21.62318420]
[41.13454056 18.60755539]
[27.46332359 12.26764107]
[15.62307358 2.94534564]
[6.25232029 -8.85659122]
[-0.14358202 -22.50170517]
[-3.21971107 -37.25413513]
[-2.81017494 -52.31829834]
[1.06294060 -66.88180542]
[8.19076347 -80.15925598]
[18.18889809 -91.43463135]
[30.51815987 -100.09985352]
[44.51364517 -105.68761444]
[59.42059708 -107.89658356]
[74.43509674 -106.60762024]
[88.74744415 -101.89025116]
[101.58577728 -93.99887085]
[112.25775146 -83.35905457]
[120.18783569 -70.54459381]
[124.94836426 -56.24654770]
[126.28262329 -41.23600388]
[124.11865234 -26.32245445]
[118.57314301 -12.31017113]
[109.94515991 0.04518041]
[98.70001221 10.07729340]
[85.44412231 17.24514771]
[89.35087585 31.72745705]
[93.25762939 46.20976639]
[97.16438293 60.69207764]
[101.07112885 75.17438507]
[120.49495697 81.78092957]
[129.91291809 102.22721863]
[144.50729370 98.76250458]
[143.36355591 83.77455902]
[144.57864380 68.79223633]
[148.12265015 54.18448257]
[153.90829468 40.31102753]
[161.79310608 27.51351547]
[171.58290100 16.10709953]
[183.03660583 6.37267065]
[195.87217712 -1.45004976]
[209.77349854 -7.16842127]
[224.39823914 -10.64162350]
[239.38627625 -11.78412628]
[254.36849976 -10.56779480]
[268.97595215 -7.02258110]
[282.84893799 -1.23579001]
[295.64581299 6.65007401]
[307.05142212 16.44081306]
[316.78488159 27.89532471]
[324.60656738 40.73152542]
[330.32379150 54.63331985]
[333.79577637 69.25835419]
[334.93704224 84.24648285]
[333.71948242 99.22860718]
[330.17306519 113.83577728]
[324.38513184 127.70828247]
[316.49819946 140.50448608]
[306.70651245 151.90928650]
[295.25119019 161.64183044]
[282.41436768 169.46243286]
[268.51208496 175.17851257]
[253.88676453 178.64929199]
[238.89854431 179.78932190]
[223.91651917 178.57052612]
[209.30964661 175.02290344]
[195.43762207 169.23381042]
[182.64205933 161.34584045]
[171.23806763 151.55322266]
[161.50648499 140.09710693]
[153.68693542 127.25961304]
[147.97200012 113.35687256]
[133.37762451 116.82159424]
[124.07630920 128.58956909]
[124.07630920 143.58956909]
[124.07630920 158.58956909]
[124.07630920 173.58956909]
[124.07630920 188.58956909]
[124.07630920 203.58956909]
[124.07630920 218.58956909]
[124.07630920 233.58956909]
[124.07630920 248.58956909]
[124.07630920 263.58956909]
[124.07630920 278.58956909]
[138.74156189 282.05755615]
[152.21148682 288.81463623]
[163.75964355 298.49639893]
[172.76325989 310.58074951]
[178.73678589 324.41598511]
[181.35807800 339.25598145]
[180.48576355 354.30044556]
[176.16690063 368.73803711]
[168.63438416 381.79016113]
[158.29444885 392.75292969]
[145.70471191 401.03515625]
[131.54409790 406.19015503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[54 88]
[55 87]
[56 86]
[57 85]
[58 84]
[90 131]
[91 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
