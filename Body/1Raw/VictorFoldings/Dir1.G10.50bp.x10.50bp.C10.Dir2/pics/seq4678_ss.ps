%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCACACUGGGGGGGGGGCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAxxxxxxxxxxUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCCCCCCCCCCCAUGCACACU\
) } def
/len { sequence length } bind def

/coor [
[104.20570374 372.24301147]
[90.35976410 366.22698975]
[78.65110016 356.69757080]
[69.94857788 344.36190796]
[64.89797974 330.13537598]
[63.87408447 315.07369995]
[66.95288849 300.29452515]
[73.90590668 286.89462280]
[84.21719360 275.86828613]
[97.12157440 268.03378296]
[111.66146088 263.97244263]
[111.66146088 248.97245789]
[111.66146088 233.97245789]
[111.66146088 218.97245789]
[111.66146088 203.97245789]
[111.66146088 188.97245789]
[111.66146088 173.97245789]
[111.66146088 158.97245789]
[111.66146088 143.97245789]
[111.66146088 128.97245789]
[90.97148132 125.17971039]
[80.45375824 110.66722107]
[65.63600159 112.99832916]
[50.81824493 115.32942963]
[36.00048447 117.66053009]
[26.69571114 130.15289307]
[11.63519001 132.30587769]
[-0.21701851 123.35820770]
[-15.03477669 125.68931580]
[-29.85253525 128.02041626]
[-37.76489258 141.50851440]
[-52.51335144 146.70628357]
[-67.13414001 141.15953064]
[-74.72377014 127.48723602]
[-71.69864655 112.14505768]
[-59.48714828 102.37708282]
[-43.85515976 102.79547119]
[-32.18363953 113.20265961]
[-17.36588097 110.87155151]
[-2.54812241 108.54045105]
[5.98432350 96.38590240]
[20.97842979 93.81075287]
[33.66938400 102.84277344]
[48.48714066 100.51167297]
[63.30489731 98.18056488]
[78.12265778 95.84946442]
[97.61629486 73.35699463]
[129.16325378 88.82425690]
[134.93952942 74.98104095]
[140.71580505 61.13782501]
[146.49208069 47.29460526]
[152.26834106 33.45138931]
[143.27766418 19.16084099]
[144.53982544 2.49085307]
[155.36293030 -10.03218555]
[171.35073853 -13.62316227]
[176.83776855 -27.58355141]
[182.32479858 -41.54394150]
[187.81184387 -55.50432968]
[176.55789185 -79.77481079]
[195.70129395 -103.38707733]
[196.32527161 -118.37409973]
[196.94924927 -133.36111450]
[197.57322693 -148.34812927]
[198.19720459 -163.33514404]
[198.82118225 -178.32215881]
[199.28923035 -193.31484985]
[199.60128784 -208.31161499]
[185.55442810 -214.06056213]
[174.53558350 -224.49844360]
[168.03494263 -238.21362305]
[166.93167114 -253.35122681]
[171.37496948 -267.86404419]
[180.76393127 -279.78930664]
[193.82876587 -287.51422119]
[208.80256653 -289.99407959]
[223.66026306 -286.89346313]
[236.39244080 -278.63174438]
[245.27720642 -266.32626343]
[249.11294556 -251.64117432]
[247.38093567 -236.56256104]
[240.31538391 -223.12966919]
[228.87187195 -213.15919495]
[214.59803772 -207.99955750]
[214.28598022 -193.00280762]
[217.31080627 -186.20603943]
[213.80819702 -177.69818115]
[213.18421936 -162.71116638]
[212.56024170 -147.72415161]
[211.93626404 -132.73713684]
[211.31228638 -117.75012207]
[210.68830872 -102.76309967]
[223.78146362 -95.44400024]
[236.22090149 -103.82614136]
[248.66033936 -112.20828247]
[261.09979248 -120.59042358]
[273.53921509 -128.97256470]
[283.29580688 -142.83782959]
[299.32009888 -137.30084229]
[298.43545532 -120.36997986]
[281.92135620 -116.53312683]
[269.48193359 -108.15098572]
[257.04248047 -99.76884460]
[244.60304260 -91.38670349]
[232.16360474 -83.00455475]
[232.15037537 -71.41655731]
[227.91084290 -61.20792770]
[220.46234131 -53.77848816]
[211.22662354 -49.97801208]
[201.77223206 -50.01729965]
[196.28520203 -36.05691147]
[190.79815674 -22.09651947]
[185.31112671 -8.13613033]
[193.52232361 2.43611574]
[195.43640137 15.79454994]
[190.44479370 28.44897079]
[179.75744629 37.03930283]
[166.11155701 39.22766113]
[160.33529663 53.07087708]
[154.55902100 66.91409302]
[148.78274536 80.75731659]
[143.00646973 94.60053253]
[147.61204529 108.87599182]
[160.38938904 116.73341370]
[176.78831482 116.64715576]
[184.82774353 130.94049072]
[176.23741150 144.90968323]
[159.85430908 144.18440247]
[152.53196716 129.51077271]
[139.75460815 121.65335083]
[126.66146088 128.97245789]
[126.66146088 143.97245789]
[126.66146088 158.97245789]
[126.66146088 173.97245789]
[126.66146088 188.97245789]
[126.66146088 203.97245789]
[126.66146088 218.97245789]
[126.66146088 233.97245789]
[126.66146088 248.97245789]
[126.66146088 263.97244263]
[141.20133972 268.03378296]
[154.10572815 275.86828613]
[164.41700745 286.89462280]
[171.37002563 300.29452515]
[174.44883728 315.07369995]
[173.42494202 330.13537598]
[168.37434387 344.36190796]
[159.67181396 356.69757080]
[147.96315002 366.22698975]
[134.11721802 372.24301147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 46]
[23 45]
[24 44]
[25 43]
[28 40]
[29 39]
[30 38]
[48 122]
[49 121]
[50 120]
[51 119]
[52 118]
[56 113]
[57 112]
[58 111]
[59 110]
[61 92]
[62 91]
[63 90]
[64 89]
[65 88]
[66 87]
[67 85]
[68 84]
[93 105]
[94 104]
[95 103]
[96 102]
[97 101]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
