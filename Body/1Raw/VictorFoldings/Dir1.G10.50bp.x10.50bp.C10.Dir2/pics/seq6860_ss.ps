%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACUACUCCGGGGGGGGGGGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCxxxxxxxxxxCUAUUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUCCCCCCCCCCUUACCACUCC\
) } def
/len { sequence length } bind def

/coor [
[86.97023773 363.54373169]
[72.48054504 359.33526611]
[59.57431793 351.51913452]
[49.13151932 340.62829590]
[41.86415482 327.40530396]
[38.26772690 312.75167847]
[38.58744812 297.66659546]
[42.80152130 283.17852783]
[50.62261581 270.27532959]
[61.51748657 259.83673096]
[74.74329376 252.57446289]
[89.39828491 248.98370361]
[89.71034241 233.98693848]
[90.02239990 218.99018860]
[90.33445740 203.99343872]
[90.64651489 188.99668884]
[90.95856476 173.99992371]
[91.27062225 159.00317383]
[91.58267975 144.00642395]
[91.89473724 129.00967407]
[92.20679474 114.01291656]
[88.95596313 99.36941528]
[82.32746887 85.91344452]
[75.69896698 72.45748138]
[69.07047272 59.00151443]
[62.44197083 45.54555130]
[55.81347275 32.08958435]
[49.18497467 18.63361931]
[42.55647659 5.17765427]
[24.39199829 3.88259387]
[10.18968868 -9.29877090]
[7.19412518 -29.62240982]
[-7.37857771 -33.17717361]
[-21.95128059 -36.73193359]
[-36.52398300 -40.28669739]
[-51.09668732 -43.84145737]
[-44.63629532 -30.30397797]
[-49.45867157 -16.10029221]
[-62.82588959 -9.29460049]
[-77.14865875 -13.75086021]
[-84.29517365 -26.93901443]
[-80.20796204 -41.37143326]
[-67.20603180 -48.85426331]
[-81.22274780 -54.19577408]
[-97.31896210 -51.05827713]
[-107.87863922 -63.60519791]
[-102.03888702 -78.92934418]
[-85.80714417 -81.26654053]
[-75.88123322 -68.21248627]
[-61.86452103 -62.87097549]
[-47.54192352 -58.41416168]
[-32.96922302 -54.85939789]
[-18.39651871 -51.30463791]
[-3.82381558 -47.74987411]
[10.74888706 -44.19511414]
[22.64126778 -53.33684540]
[22.95332336 -68.33360291]
[23.26537895 -83.33035278]
[23.57743645 -98.32711029]
[23.88949203 -113.32386017]
[9.17648697 -116.47409821]
[-4.67434216 -122.35211182]
[-17.16229820 -130.74540710]
[-27.83594894 -141.35058594]
[-36.30944824 -153.78425598]
[-42.27648544 -167.59696960]
[-45.52135849 -182.28938293]
[-45.92675781 -197.33039856]
[-43.47803879 -212.17628479]
[-38.26371765 -226.29037476]
[-30.47228432 -239.16244507]
[-20.38540077 -250.32717896]
[-8.36769867 -259.38098145]
[5.14638996 -265.99655151]
[19.66833878 -269.93475342]
[34.67318726 -271.05325317]
[49.61852264 -269.31155396]
[63.96407700 -264.77267456]
[77.19126892 -257.60064697]
[88.82194519 -248.05476379]
[98.43566132 -236.48008728]
[105.68489075 -223.29505920]
[110.30757904 -208.97627258]
[112.13661194 -194.04138184]
[111.10587311 -179.03025818]
[107.25263214 -164.48551941]
[100.71617126 -150.93299866]
[91.73278046 -138.86256409]
[80.62721252 -128.71058655]
[67.80091858 -120.84402466]
[53.71755981 -115.54727936]
[38.88624573 -113.01180267]
[38.57418823 -98.01505280]
[38.26213455 -83.01829529]
[37.95007706 -68.02154541]
[37.63801956 -53.02479172]
[55.06718063 -46.49295044]
[65.23171234 -31.85112762]
[65.25128937 -14.81555653]
[56.01244354 -1.45084441]
[62.64094162 12.00512123]
[69.26943970 25.46108627]
[75.89793396 38.91705322]
[82.52643585 52.37301636]
[89.15493774 65.82897949]
[95.78343201 79.28495026]
[102.41193390 92.74091339]
[109.61774445 84.81198883]
[120.46624756 80.44745636]
[133.54827881 80.84268188]
[148.59910583 75.96590424]
[159.55924988 86.05175781]
[174.26721191 88.99724579]
[188.97517395 91.94272614]
[203.68313599 94.88820648]
[217.77757263 87.22489929]
[232.50007629 93.59886932]
[236.55679321 109.12055206]
[226.83576965 121.88304138]
[210.79412842 122.09604645]
[200.73765564 109.59616852]
[186.02969360 106.65068817]
[171.32173157 103.70520020]
[156.61376953 100.75971985]
[142.61494446 105.84718323]
[130.60279846 95.55064392]
[124.75298309 100.24422455]
[134.13995361 111.94400787]
[122.44001770 121.33078003]
[113.05335999 109.63138580]
[107.20354462 114.32496643]
[106.89148712 129.32171631]
[106.57943726 144.31848145]
[106.26737976 159.31523132]
[105.95532227 174.31198120]
[105.64326477 189.30873108]
[105.33120728 204.30549622]
[105.01914978 219.30224609]
[104.70709991 234.29899597]
[104.39504242 249.29574585]
[118.88797760 253.49304199]
[131.80023193 261.29919434]
[142.25144958 272.18194580]
[149.52902222 285.39935303]
[153.13676453 300.05017090]
[152.82868958 315.13549805]
[148.62580872 329.62683105]
[140.81468201 342.53607178]
[129.92787170 352.98306274]
[116.70767212 360.25555420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 107]
[23 106]
[24 105]
[25 104]
[26 103]
[27 102]
[28 101]
[29 100]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[43 50]
[44 49]
[56 96]
[57 95]
[58 94]
[59 93]
[60 92]
[110 126]
[112 124]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
