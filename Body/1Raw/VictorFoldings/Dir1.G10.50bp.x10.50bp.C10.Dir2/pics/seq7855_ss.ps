%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUGUGGAGGGGGGGGGGGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCxxxxxxxxxxACAAACUUACUAUCCGCCAUCCCAUACAUUGGGACAGACCUAGUUCAAUGCCCCCCCCCCAAUCUGAGGAG\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 416.19158936]
[71.01555634 410.63858032]
[58.81560135 401.77224731]
[49.20452881 390.14993286]
[42.78650284 376.50222778]
[39.96496582 361.68704224]
[40.91728210 346.63565063]
[45.58358765 332.29425049]
[53.67055511 319.56427002]
[64.66983032 309.24600220]
[77.88998413 301.98803711]
[92.50000000 298.24658203]
[92.50000000 283.24658203]
[92.50000000 268.24658203]
[92.50000000 253.24659729]
[92.50000000 238.24659729]
[92.50000000 223.24659729]
[92.50000000 208.24659729]
[92.50000000 193.24659729]
[92.50000000 178.24659729]
[92.50000000 163.24659729]
[92.50000000 148.24659729]
[92.50000000 133.24659729]
[83.52238464 129.83410645]
[75.85327148 124.05247498]
[70.10167694 116.36081696]
[66.72432709 107.36992645]
[65.98943329 97.79378510]
[67.95534515 88.39283752]
[72.46595001 79.91362762]
[62.59024811 68.62335205]
[52.71454239 57.33306885]
[42.83883667 46.04278946]
[32.96312714 34.75251007]
[20.52947044 43.17769623]
[7.15467644 50.01103210]
[-6.95849705 55.14892578]
[-21.59609795 58.51348495]
[-36.53622055 60.05371094]
[-51.55238342 59.74624634]
[-66.41693878 57.59575653]
[-80.90454865 53.63484192]
[-94.79557800 47.92354965]
[-107.87944794 40.54845810]
[-119.95780945 31.62137413]
[-130.84754944 21.27762985]
[-140.38360596 9.67403507]
[-148.42138672 -3.01350451]
[-154.83905029 -16.59264755]
[-159.53932190 -30.85754013]
[-162.45092773 -45.59192657]
[-163.52972412 -60.57244110]
[-162.75938416 -75.57198334]
[-160.15155029 -90.36315918]
[-155.74578857 -104.72174072]
[-149.60888672 -118.43005371]
[-141.83384705 -131.28028870]
[-132.53857422 -143.07763672]
[-121.86395264 -153.64324951]
[-109.97182465 -162.81695557]
[-97.04247284 -170.45968628]
[-83.27189636 -176.45559692]
[-68.86885071 -180.71376038]
[-54.05168915 -183.16963196]
[-39.04503250 -183.78599548]
[-24.07638168 -182.55349731]
[-9.37265205 -179.49081421]
[4.84324789 -174.64439392]
[18.35581017 -168.08770752]
[30.96018600 -159.92012024]
[42.46529770 -150.26548767]
[52.69673157 -139.27015686]
[61.49938202 -127.10080719]
[68.73979950 -113.94193268]
[74.30821991 -99.99301910]
[78.12023926 -85.46552277]
[80.11805725 -70.57967377]
[80.27138519 -55.56114960]
[78.57790375 -40.63761902]
[75.06329346 -26.03532219]
[69.78082275 -11.97562313]
[62.81057358 1.32833385]
[54.25822067 13.67486572]
[44.25341034 24.87680244]
[54.12911606 36.16708374]
[64.00482178 47.45736313]
[73.88053131 58.74764252]
[83.75623322 70.03792572]
[109.32699585 67.21900940]
[129.58372498 83.07697296]
[143.92379761 78.67666626]
[158.26385498 74.27636719]
[172.60391235 69.87606812]
[173.54585266 55.63282776]
[179.29029846 42.59805679]
[189.12568665 32.33561707]
[201.85098267 26.06909561]
[215.92236328 24.53592873]
[229.64048767 27.90068626]
[241.35568237 35.73766708]
[249.66635132 47.08464813]
[264.09375000 42.97970200]
[278.52111816 38.87475967]
[292.94851685 34.76981354]
[307.37588501 30.66486931]
[316.40725708 17.40537834]
[332.41510010 16.34295082]
[343.11956787 28.29258919]
[340.30911255 44.08755493]
[326.13967896 51.61130142]
[311.48083496 45.09225464]
[297.05346680 49.19719696]
[282.62606812 53.30214310]
[268.19869995 57.40708923]
[253.77130127 61.51203156]
[252.19714355 77.25211334]
[244.69616699 91.22285461]
[232.38642883 101.27957153]
[217.12670898 105.86564636]
[201.23585510 104.25343323]
[187.14045715 96.65950775]
[177.00421143 84.21613312]
[162.66415405 88.61643219]
[148.32409668 93.01673126]
[133.98402405 97.41703033]
[133.33969116 107.07463837]
[130.00643921 116.16165924]
[124.25310516 123.94520569]
[116.54369354 129.79751587]
[107.50000000 133.24659729]
[107.50000000 148.24659729]
[107.50000000 163.24659729]
[107.50000000 178.24659729]
[107.50000000 193.24659729]
[107.50000000 208.24659729]
[107.50000000 223.24659729]
[107.50000000 238.24659729]
[107.50000000 253.24659729]
[107.50000000 268.24658203]
[107.50000000 283.24658203]
[107.50000000 298.24658203]
[122.11001587 301.98803711]
[135.33016968 309.24600220]
[146.32945251 319.56427002]
[154.41641235 332.29425049]
[159.08271790 346.63565063]
[160.03503418 361.68704224]
[157.21350098 376.50222778]
[150.79547119 390.14993286]
[141.18440247 401.77224731]
[128.98443604 410.63858032]
[114.96250153 416.19158936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[30 88]
[31 87]
[32 86]
[33 85]
[34 84]
[90 125]
[91 124]
[92 123]
[93 122]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
