%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUCCUAUGGGGGGGGGGUUAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACxxxxxxxxxxUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGACCCCCCCCCCAUAAUACUAU\
) } def
/len { sequence length } bind def

/coor [
[79.63234711 411.26837158]
[65.78640747 405.25234985]
[54.07774353 395.72293091]
[45.37522125 383.38726807]
[40.32461929 369.16076660]
[39.30072784 354.09906006]
[42.37952805 339.31991577]
[49.33255005 325.91998291]
[59.64383316 314.89364624]
[72.54821014 307.05914307]
[87.08810425 302.99783325]
[87.08810425 287.99783325]
[87.08810425 272.99783325]
[87.08810425 257.99783325]
[87.08810425 242.99783325]
[87.08810425 227.99783325]
[87.08810425 212.99783325]
[87.08810425 197.99783325]
[87.08810425 182.99783325]
[87.08810425 167.99783325]
[87.08810425 152.99783325]
[79.89672089 166.16156006]
[77.75104523 181.00730896]
[68.05100250 192.44886780]
[53.75648880 196.99494934]
[39.22934723 193.25833130]
[28.90242577 182.37924194]
[25.92689323 167.67733765]
[31.21071434 153.63876343]
[43.14157104 144.54730225]
[58.07748032 143.17686462]
[71.59729004 136.67959595]
[56.61758041 135.89974976]
[41.63786316 135.11990356]
[26.65814972 134.34005737]
[16.13039207 145.90293884]
[0.62635475 147.94227600]
[-12.53342819 139.49513245]
[-17.13530922 124.55001068]
[-11.00642204 110.16352844]
[2.95936036 103.12855530]
[18.16782379 106.76677704]
[27.43799591 119.36034393]
[42.41770935 120.14019012]
[57.39742279 120.92002869]
[72.37713623 121.69987488]
[67.89480591 98.77548218]
[78.53022766 80.31220245]
[96.75083923 74.07120514]
[99.23596191 59.27849960]
[101.72107697 44.48579025]
[104.20619202 29.69308472]
[106.69131470 14.90037632]
[91.78998566 5.01323462]
[82.69938660 -10.32588959]
[81.19011688 -28.03966522]
[87.51709747 -44.59740067]
[100.37792206 -56.71877670]
[117.18062592 -62.02370453]
[118.73820496 -76.94261932]
[120.29579163 -91.86152649]
[121.85337067 -106.78044128]
[123.41094971 -121.69935608]
[109.05918121 -126.23934174]
[95.91525269 -133.57569885]
[84.51740265 -143.40798950]
[75.33236694 -155.33358765]
[68.73626709 -168.86416626]
[64.99920654 -183.44563293]
[64.27422333 -198.48089600]
[66.59099579 -213.35427856]
[71.85466003 -227.45671082]
[79.84967041 -240.21072388]
[90.24863434 -251.09403992]
[102.62571716 -259.66098022]
[116.47409821 -265.56076050]
[131.22668457 -268.55175781]
[146.27935791 -268.51153564]
[161.01574707 -265.44168091]
[174.83238220 -259.46795654]
[187.16349792 -250.83497620]
[197.50411987 -239.89622498]
[205.43083191 -227.09965515]
[210.61903381 -212.96928406]
[212.85626221 -198.08372498]
[212.05090332 -183.05255127]
[208.23594666 -168.49127197]
[201.56761169 -154.99615479]
[192.31893921 -143.11982727]
[180.86869812 -133.34860229]
[167.68572998 -126.08263397]
[153.30989075 -121.61943054]
[138.32986450 -120.14176941]
[136.77227783 -105.22286224]
[135.21470642 -90.30394745]
[133.65711975 -75.38503265]
[132.09953308 -60.46612549]
[143.22981262 -55.14390182]
[152.19096375 -46.62843704]
[158.09701538 -35.74075317]
[160.35755920 -23.53740692]
[158.73686218 -11.20796585]
[153.37820435 0.04094178]
[144.79150391 9.10371876]
[133.80470276 15.08445740]
[121.48402405 17.38549614]
[118.99890137 32.17820358]
[116.51378632 46.97090912]
[114.02866364 61.76361847]
[111.54354858 76.55632019]
[130.59001160 98.44913483]
[118.62490845 129.78288269]
[132.94749451 134.23970032]
[147.27009583 138.69651794]
[162.74597168 135.40895081]
[172.59956360 146.57836914]
[186.92214966 151.03518677]
[201.24475098 155.49200439]
[217.11392212 151.35661316]
[228.43565369 163.22044373]
[223.56312561 178.87899780]
[207.50877380 182.22410583]
[196.78793335 169.81460571]
[182.46534729 165.35778809]
[168.14274597 160.90097046]
[153.69132996 164.50730896]
[142.81327820 153.01910400]
[128.49069214 148.56230164]
[114.16809082 144.10548401]
[102.08810425 152.99783325]
[102.08810425 167.99783325]
[102.08810425 182.99783325]
[102.08810425 197.99783325]
[102.08810425 212.99783325]
[102.08810425 227.99783325]
[102.08810425 242.99783325]
[102.08810425 257.99783325]
[102.08810425 272.99783325]
[102.08810425 287.99783325]
[102.08810425 302.99783325]
[116.62799072 307.05914307]
[129.53236389 314.89364624]
[139.84365845 325.91998291]
[146.79667664 339.31991577]
[149.87547302 354.09906006]
[148.85157776 369.16076660]
[143.80097961 383.38726807]
[135.09844971 395.72293091]
[123.38979340 405.25234985]
[109.54385376 411.26837158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 46]
[33 45]
[34 44]
[35 43]
[49 110]
[50 109]
[51 108]
[52 107]
[53 106]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[112 129]
[113 128]
[114 127]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
