%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUACCACUCACGGGGGGGGGGCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAxxxxxxxxxxACGCCCUCAUAAUCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUCCCCCCCCCCUUCCUAACACUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.02451324 409.51882935]
[70.66226196 405.01211548]
[57.50136948 397.70623779]
[46.08077240 387.90039062]
[36.86813354 375.99609375]
[30.24070549 362.48083496]
[26.46987534 347.90805054]
[25.71005821 332.87451172]
[27.99236870 317.99578857]
[33.22334671 303.88119507]
[41.18878555 291.10870361]
[51.56250763 280.20132446]
[63.91971207 271.60574341]
[77.75438690 265.67388916]
[92.50000000 262.64871216]
[92.50000000 247.64871216]
[92.50000000 232.64871216]
[92.50000000 217.64871216]
[92.50000000 202.64871216]
[92.50000000 187.64871216]
[92.50000000 172.64871216]
[92.50000000 157.64871216]
[92.50000000 142.64871216]
[92.50000000 127.64871979]
[79.70539856 120.21956635]
[72.32369232 107.39753723]
[72.32369232 92.60246277]
[79.70539856 79.78043365]
[92.50000000 72.35128021]
[92.50000000 57.35128403]
[92.50000000 42.35128403]
[92.50000000 27.35128212]
[77.52671051 26.37005424]
[62.64965439 24.41162491]
[47.93253708 21.48437691]
[33.43838501 17.60084915]
[19.22926140 12.77766895]
[5.36601305 7.03549099]
[-8.09199429 0.39890456]
[-21.08713150 -7.10367155]
[-33.56375122 -15.44010925]
[-45.46842957 -24.57471085]
[-56.75017929 -34.46836090]
[-67.36070251 -45.07869339]
[-77.25454712 -56.36027145]
[-86.38936615 -68.26478577]
[-94.72602081 -80.74125671]
[-102.22882843 -93.73625946]
[-108.86565399 -107.19415283]
[-114.60807800 -121.05729675]
[-119.43150330 -135.26634216]
[-123.31529236 -149.76042175]
[-126.24279785 -164.47747803]
[-128.20149231 -179.35450745]
[-129.18298340 -194.32777405]
[-129.18307495 -209.33319092]
[-128.20175171 -224.30647278]
[-126.24324036 -239.18351746]
[-123.31590271 -253.90061951]
[-119.43228912 -268.39474487]
[-114.60903168 -282.60385132]
[-108.86676788 -296.46704102]
[-102.23010254 -309.92501831]
[-94.72744751 -322.92010498]
[-86.39093781 -335.39669800]
[-77.25626373 -347.30130005]
[-67.36254883 -358.58300781]
[-56.75215530 -369.19345093]
[-45.47052002 -379.08724976]
[-33.56595230 -388.22198486]
[-21.08942986 -396.55856323]
[-8.09438038 -404.06130981]
[5.36354923 -410.69805908]
[19.22673035 -416.44039917]
[33.43579483 -421.26373291]
[47.92990112 -425.14743042]
[62.64698410 -428.07485962]
[77.52401733 -430.03344727]
[92.49729919 -431.01486206]
[107.50270081 -431.01486206]
[122.47598267 -430.03344727]
[137.35301208 -428.07485962]
[152.07009888 -425.14743042]
[166.56420898 -421.26373291]
[180.77326965 -416.44039917]
[194.63644409 -410.69805908]
[208.09437561 -404.06130981]
[221.08943176 -396.55856323]
[233.56594849 -388.22198486]
[245.47052002 -379.08724976]
[256.75216675 -369.19345093]
[267.36254883 -358.58300781]
[277.25625610 -347.30130005]
[286.39093018 -335.39669800]
[294.72744751 -322.92010498]
[302.23010254 -309.92501831]
[308.86676025 -296.46704102]
[314.60903931 -282.60385132]
[319.43228149 -268.39474487]
[323.31591797 -253.90061951]
[326.24322510 -239.18351746]
[328.20175171 -224.30647278]
[329.18307495 -209.33319092]
[329.18298340 -194.32777405]
[328.20150757 -179.35450745]
[326.24279785 -164.47747803]
[323.31527710 -149.76042175]
[319.43151855 -135.26634216]
[314.60806274 -121.05729675]
[308.86566162 -107.19415283]
[302.22882080 -93.73625946]
[294.72601318 -80.74125671]
[286.38937378 -68.26478577]
[277.25454712 -56.36027145]
[267.36068726 -45.07869339]
[256.75018311 -34.46836090]
[245.46842957 -24.57471085]
[233.56375122 -15.44010925]
[221.08712769 -7.10367155]
[208.09199524 0.39890456]
[194.63398743 7.03549099]
[180.77073669 12.77766895]
[166.56161499 17.60084915]
[152.06745911 21.48437691]
[137.35034180 24.41162491]
[122.47328949 26.37005424]
[107.50000000 27.35128212]
[107.50000000 42.35128403]
[107.50000000 57.35128403]
[107.50000000 72.35128021]
[120.29460144 79.78043365]
[127.67630768 92.60246277]
[127.67630768 107.39753723]
[120.29460144 120.21956635]
[107.50000000 127.64871979]
[107.50000000 142.64871216]
[107.50000000 157.64871216]
[107.50000000 172.64871216]
[107.50000000 187.64871216]
[107.50000000 202.64871216]
[107.50000000 217.64871216]
[107.50000000 232.64871216]
[107.50000000 247.64871216]
[107.50000000 262.64871216]
[122.24561310 265.67388916]
[136.08029175 271.60574341]
[148.43750000 280.20132446]
[158.81121826 291.10870361]
[166.77665710 303.88119507]
[172.00762939 317.99578857]
[174.28994751 332.87451172]
[173.53012085 347.90805054]
[169.75929260 362.48083496]
[163.13186646 375.99609375]
[153.91921997 387.90039062]
[142.49862671 397.70623779]
[129.33773804 405.01211548]
[114.97548676 409.51882935]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[29 130]
[30 129]
[31 128]
[32 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
