%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGGACUUCACGGGGGGGGGGGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUAAUxxxxxxxxxxCUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUCCCCCCCCCCACGGACUCCAC\
) } def
/len { sequence length } bind def

/coor [
[77.89194489 374.81713867]
[63.87000275 369.26412964]
[51.67004776 360.39779663]
[42.05897522 348.77548218]
[35.64094925 335.12777710]
[32.81941223 320.31259155]
[33.77172852 305.26123047]
[38.43803406 290.91979980]
[46.52500153 278.18984985]
[57.52427673 267.87158203]
[70.74443054 260.61358643]
[85.35444641 256.87216187]
[85.35444641 241.87216187]
[85.35444641 226.87216187]
[85.35444641 211.87216187]
[85.35444641 196.87216187]
[85.35444641 181.87216187]
[85.35444641 166.87216187]
[85.35444641 151.87216187]
[85.35444641 136.87216187]
[85.35444641 121.87216187]
[79.50765991 108.05857849]
[68.73898315 97.61656952]
[57.97030258 87.17456055]
[47.20162201 76.73255157]
[34.69758606 68.44707489]
[20.88400459 62.60028839]
[7.07042122 56.75350189]
[-6.80245972 51.04883575]
[-20.73317528 45.48690033]
[-34.66389084 39.92496109]
[-48.59460831 34.36302567]
[-62.52532578 28.80108833]
[-70.88880157 41.32091141]
[-81.67280579 51.82799530]
[-94.40591431 59.86302185]
[-108.53148651 65.07472992]
[-123.43201447 67.23529053]
[-138.45610046 66.25025177]
[-152.94697571 62.16266632]
[-166.27114868 55.15123749]
[-177.84614563 45.52247238]
[-187.16595459 33.69729614]
[-193.82316589 20.19265366]
[-197.52673340 5.59891415]
[-198.11477661 -9.44594860]
[-195.56156921 -24.28423882]
[-189.97872925 -38.26728821]
[-181.61033630 -50.78381729]
[-170.82218933 -61.28666306]
[-158.08592224 -69.31668091]
[-143.95829773 -74.52282715]
[-129.05693054 -76.67752838]
[-114.03322601 -75.68657684]
[-99.54396057 -71.59329224]
[-86.22254944 -64.57662201]
[-74.65134430 -54.94330215]
[-65.33618164 -43.11445999]
[-58.68429565 -29.60720062]
[-54.98646164 -15.01200485]
[-54.40434647 0.03308789]
[-56.96338654 14.87037182]
[-43.03266907 20.43230820]
[-29.10195541 25.99424553]
[-15.17123890 31.55618286]
[-1.24052227 37.11812210]
[6.18346596 36.67473602]
[12.91720867 42.93991852]
[26.73079109 48.78670502]
[40.54437637 54.63349533]
[31.83172607 42.42326355]
[27.23665047 28.14442253]
[27.19279099 13.14448643]
[31.70429039 -1.16098070]
[40.34538651 -13.42195225]
[52.30061340 -22.48134422]
[66.44173431 -27.48420906]
[81.43423462 -27.95841980]
[95.86325836 -23.85922432]
[108.36710358 -15.57347012]
[117.76578522 -3.88309383]
[123.17231750 10.10866737]
[124.07649231 25.08139229]
[120.39297485 39.62208176]
[112.46938324 52.35851669]
[101.05348206 62.08873749]
[87.22260284 67.89449310]
[72.28198242 69.22788239]
[57.64363098 65.96387482]
[68.41230774 76.40588379]
[79.18099213 86.84789276]
[89.94966888 97.28990173]
[85.74714661 76.90306854]
[108.78599548 57.01688766]
[121.61965179 49.25175476]
[134.45330811 41.48661804]
[147.28695679 33.72148132]
[148.45750427 18.24862099]
[158.52485657 6.44065857]
[173.61791992 2.83799791]
[187.93309021 8.82593536]
[195.96591187 22.10198784]
[194.62757874 37.56124115]
[184.43272400 49.25929642]
[169.30146790 52.69801331]
[155.05209351 46.55513763]
[142.21844482 54.32027054]
[129.38478088 62.08540726]
[116.55113220 69.85054016]
[117.08966827 77.33118439]
[132.05094910 76.25411224]
[147.01222229 75.17704010]
[161.97352600 74.10021973]
[163.05009460 89.06153870]
[148.08929443 90.13832092]
[133.12802124 91.21539307]
[118.16673279 92.29246521]
[118.70526886 99.77310181]
[132.51885986 105.61989594]
[146.33244324 111.46668243]
[160.14602661 117.31346893]
[173.95959473 123.16025543]
[190.15910339 120.60910797]
[200.25637817 133.53106689]
[193.86421204 148.63313293]
[177.55833435 150.37959290]
[168.11280823 136.97384644]
[154.29922485 131.12704468]
[140.48564148 125.28026581]
[126.67206573 119.43347168]
[112.85848236 113.58668518]
[100.35444641 121.87216187]
[100.35444641 136.87216187]
[100.35444641 151.87216187]
[100.35444641 166.87216187]
[100.35444641 181.87216187]
[100.35444641 196.87216187]
[100.35444641 211.87216187]
[100.35444641 226.87216187]
[100.35444641 241.87216187]
[100.35444641 256.87216187]
[114.96446228 260.61358643]
[128.18461609 267.87158203]
[139.18389893 278.18984985]
[147.27085876 290.91979980]
[151.93716431 305.26123047]
[152.88948059 320.31259155]
[150.06794739 335.12777710]
[143.64991760 348.77548218]
[134.03884888 360.39779663]
[121.83889008 369.26412964]
[107.81694794 374.81713867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 92]
[23 91]
[24 90]
[25 89]
[26 70]
[27 69]
[28 68]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[94 109]
[95 108]
[96 107]
[97 106]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
