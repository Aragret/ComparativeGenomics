%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACAUCCGGGGGGGGGGGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAxxxxxxxxxxAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUCCCCCCCCCCAACACACCCG\
) } def
/len { sequence length } bind def

/coor [
[83.59654236 420.42230225]
[69.75061035 414.40628052]
[58.04194641 404.87686157]
[49.33942032 392.54119873]
[44.28881836 378.31466675]
[43.26492691 363.25299072]
[46.34372711 348.47384644]
[53.29674911 335.07391357]
[63.60803223 324.04757690]
[76.51241302 316.21307373]
[91.05229950 312.15176392]
[91.05229950 297.15176392]
[91.05229950 282.15176392]
[91.05229950 267.15176392]
[91.05229950 252.15176392]
[91.05229950 237.15176392]
[91.05229950 222.15176392]
[91.05229950 207.15176392]
[91.05229950 192.15176392]
[91.05229950 177.15176392]
[87.88671875 170.41938782]
[91.21158600 161.84051514]
[91.52364349 146.84376526]
[91.83569336 131.84700012]
[92.14775085 116.85025024]
[85.14839172 113.38307953]
[79.77548981 106.97605896]
[77.25870514 98.42538452]
[78.43065643 89.03233337]
[63.61289978 86.70123291]
[54.58289719 88.46500397]
[48.51243210 84.16441345]
[33.74637604 81.52554321]
[18.98031998 78.88668060]
[4.21426439 76.24781799]
[-10.55179119 73.60895538]
[-19.88740730 85.73763275]
[-33.79500961 92.12802887]
[-49.07873154 91.31168365]
[-62.22648621 83.47617340]
[-70.21701813 70.42205811]
[-71.21415710 55.14906311]
[-64.98876953 41.16682053]
[-52.97140503 31.68834114]
[-37.92356491 28.89171410]
[-23.30313492 33.41958237]
[-12.46977997 44.23147583]
[-7.91292667 58.84289551]
[6.85312891 61.48176193]
[21.61918449 64.12062836]
[36.38523865 66.75949097]
[51.15129471 69.39835358]
[65.94400024 71.88347626]
[80.76175690 74.21457672]
[94.54414368 68.29461670]
[103.05522919 55.94304276]
[91.52041626 46.33766174]
[80.90686798 35.72314835]
[71.30253601 24.18746567]
[62.78700256 11.82619953]
[55.43082809 -1.25821757]
[49.29497910 -14.95736217]
[44.43029022 -29.15771675]
[40.87707901 -43.74160767]
[38.66478729 -58.58819199]
[37.81174850 -73.57444000]
[38.32502747 -88.57616425]
[40.20037460 -103.46905518]
[43.42224884 -118.12971497]
[47.96395111 -132.43664551]
[53.78784943 -146.27128601]
[60.84568405 -159.51901245]
[69.07896423 -172.07003784]
[78.41947174 -183.82037354]
[88.78980255 -194.67262268]
[100.10402679 -204.53688049]
[112.26838684 -213.33140564]
[125.18209076 -220.98330688]
[138.73811340 -227.42918396]
[152.82412720 -232.61564636]
[167.32342529 -236.49967957]
[182.11584473 -239.04911804]
[197.07881165 -240.24284363]
[212.08831787 -240.07093811]
[227.02001953 -238.53486633]
[241.75016785 -235.64730835]
[256.15670776 -231.43223572]
[270.12026978 -225.92454529]
[283.52511597 -219.16989136]
[296.26016235 -211.22424316]
[308.21994019 -202.15344238]
[319.30526733 -192.03265381]
[329.42434692 -180.94573975]
[338.49331665 -168.98458862]
[346.43698120 -156.24829102]
[353.18957520 -142.84240723]
[358.69509888 -128.87800598]
[362.90795898 -114.47081757]
[365.79321289 -99.74021912]
[367.32699585 -84.80828094]
[367.49658203 -69.79873657]
[366.30056763 -54.83595657]
[363.74884033 -40.04393387]
[359.86254883 -25.54524231]
[354.67391968 -11.46002293]
[348.22595215 2.09500575]
[340.57205200 15.00752068]
[331.77563477 27.17052269]
[321.90963745 38.48322296]
[311.05578613 48.85187912]
[299.30401611 58.19057083]
[286.75170898 66.42191315]
[273.50289917 73.47769928]
[259.66735840 79.29946136]
[245.35972595 83.83895874]
[230.69857788 87.05856323]
[215.80538940 88.93161011]
[200.80358887 89.44257355]
[185.81747437 88.58721924]
[170.97122192 86.37263489]
[156.38787842 82.81716919]
[142.18827820 77.95029449]
[128.49008179 71.81232452]
[115.40680695 64.45413208]
[106.89571381 76.80570221]
[121.36408234 98.87210083]
[107.14450836 117.16230774]
[106.83245087 132.15905762]
[106.52039337 147.15580750]
[106.20833588 162.15257263]
[106.05229950 177.15176392]
[106.05229950 192.15176392]
[106.05229950 207.15176392]
[106.05229950 222.15176392]
[106.05229950 237.15176392]
[106.05229950 252.15176392]
[106.05229950 267.15176392]
[106.05229950 282.15176392]
[106.05229950 297.15176392]
[106.05229950 312.15176392]
[120.59218597 316.21307373]
[133.49656677 324.04757690]
[143.80784607 335.07391357]
[150.76087952 348.47384644]
[153.83967590 363.25299072]
[152.81578064 378.31466675]
[147.76518250 392.54119873]
[139.06265259 404.87686157]
[127.35399628 414.40628052]
[113.50805664 420.42230225]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 128]
[25 127]
[29 54]
[30 53]
[32 52]
[33 51]
[34 50]
[35 49]
[36 48]
[55 125]
[56 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
