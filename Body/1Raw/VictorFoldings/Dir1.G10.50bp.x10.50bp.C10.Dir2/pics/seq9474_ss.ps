%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUCAUCCCGGGGGGGGGGUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAxxxxxxxxxxACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCAACAGCCUUCAUAGGCCCCCCCCCCCUAUGUCCUCCC\
) } def
/len { sequence length } bind def

/coor [
[107.34696960 361.38137817]
[92.78710938 357.47320557]
[79.58596802 350.19354248]
[68.51103210 339.96569824]
[60.20619583 327.38421631]
[55.15428162 313.18066406]
[53.64900589 298.18072510]
[55.77788162 283.25653076]
[61.41714096 269.27575684]
[70.23892212 257.05120850]
[81.73033905 247.29360962]
[95.22329712 240.57026672]
[109.93333435 237.27203369]
[110.24131775 222.27519226]
[110.54929352 207.27836609]
[110.85726929 192.28152466]
[111.16524506 177.28468323]
[111.47322083 162.28784180]
[111.78120422 147.29101562]
[112.08917999 132.29417419]
[112.39715576 117.29733276]
[96.03939819 118.95178986]
[85.01280212 108.92089844]
[70.07678986 110.30492401]
[55.14078140 111.68894958]
[40.20476913 113.07297516]
[37.11651230 127.87007141]
[29.80248260 141.09869385]
[18.91303444 151.58255005]
[5.41645288 158.38943481]
[-9.48715591 160.91407776]
[-24.47257423 158.93200684]
[-38.20730972 152.61943054]
[-49.47007370 142.53768921]
[-57.25939560 129.58323669]
[-60.88264847 114.90797424]
[-60.01766205 99.81681061]
[-54.74134445 85.65164948]
[-45.52286148 73.67203522]
[-33.18191910 64.94320679]
[-18.81586266 60.24130630]
[-3.70211363 59.98443222]
[10.81542492 64.19542694]
[23.44586372 72.49985504]
[33.06611252 84.15927887]
[38.82074356 98.13696289]
[53.75675583 96.75293732]
[68.69276428 95.36891174]
[83.62877655 93.98488617]
[89.77521515 84.70098877]
[100.78162384 80.65456390]
[112.61783600 84.07076263]
[120.50249481 94.29605865]
[129.66442871 82.41923523]
[138.82637024 70.54241180]
[147.98829651 58.66558838]
[157.15023804 46.78876495]
[166.31216431 34.91193771]
[175.47410583 23.03511620]
[184.63604736 11.15829182]
[193.79797363 -0.71853161]
[202.95991516 -12.59535503]
[188.98481750 -7.14589691]
[174.12055969 -5.13247013]
[159.19934082 -6.66779947]
[145.05653381 -11.66592789]
[132.48396301 -19.84702682]
[122.18550873 -30.75307083]
[114.73773956 -43.77346802]
[110.55763245 -58.17925262]
[109.87921143 -73.16390228]
[112.74046326 -87.88848114]
[118.98120117 -101.52861786]
[128.25201416 -113.32064056]
[140.03388977 -122.60437012]
[153.66717529 -128.86004639]
[168.38861084 -131.73742676]
[183.37399292 -131.07540894]
[197.78434753 -126.91108704]
[210.81289673 -119.47757721]
[221.73020935 -109.19107056]
[229.92507935 -96.62746429]
[234.93869019 -82.49015045]
[236.49037170 -67.57062531]
[234.49322510 -52.70417023]
[229.05906677 -38.72311401]
[220.48970032 -26.40743065]
[234.18032837 -32.53660583]
[247.87095642 -38.66577911]
[233.33956909 -42.38587952]
[222.52056885 -52.77573776]
[218.21568298 -67.14472961]
[221.53973389 -81.77178192]
[231.63191223 -92.86898804]
[245.87869263 -97.56255341]
[260.59063721 -94.63699341]
[271.95785522 -84.84994507]
[277.03662109 -70.73590851]
[274.51171875 -55.94993973]
[265.03781128 -44.32167816]
[279.69055176 -47.53067398]
[287.46084595 -52.45185852]
[294.67697144 -50.65186691]
[309.39248657 -53.55934143]
[324.10800171 -56.46681213]
[338.82354736 -59.37428665]
[346.20361328 -73.16082001]
[360.73803711 -78.93008423]
[375.56411743 -73.95800781]
[383.68139648 -60.59225082]
[381.25720215 -45.14371872]
[369.43609619 -34.90673065]
[353.79968262 -34.71488571]
[341.73101807 -44.65876389]
[327.01547241 -41.75128937]
[312.29995728 -38.84381866]
[297.58444214 -35.93634415]
[282.89953613 -32.87794876]
[268.24682617 -29.66895294]
[254.00012207 -24.97515297]
[240.30949402 -18.84597969]
[226.61886597 -12.71680546]
[214.83673096 -3.43341994]
[205.67480469 8.44340420]
[196.51286316 20.32022667]
[187.35093689 32.19705200]
[178.18899536 44.07387543]
[169.02705383 55.95069885]
[159.86512756 67.82752228]
[150.70318604 79.70434570]
[141.54125977 91.58116913]
[132.37931824 103.45799255]
[127.39399719 117.60530853]
[127.08602142 132.60214233]
[126.77803802 147.59898376]
[126.47006226 162.59582520]
[126.16208649 177.59266663]
[125.85411072 192.58949280]
[125.54612732 207.58633423]
[125.23815155 222.58317566]
[124.93017578 237.58001709]
[139.49240112 241.47938538]
[152.69795227 248.75102234]
[163.77908325 258.97216797]
[172.09155273 271.54858398]
[177.15206909 285.74911499]
[178.66644287 300.74810791]
[176.54661560 315.67358398]
[170.91583252 329.65777588]
[162.10145569 341.88766479]
[150.61596680 351.65225220]
[137.12707520 358.38375854]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[23 49]
[24 48]
[25 47]
[26 46]
[53 132]
[54 131]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[87 122]
[88 121]
[89 120]
[100 119]
[101 118]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
