%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUCAUCACGGGGGGGGGGAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAxxxxxxxxxxGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCCCCCCCCCCCACACUCAUCGC\
) } def
/len { sequence length } bind def

/coor [
[56.73008728 413.25076294]
[44.03460312 405.15643311]
[33.29973602 394.59915161]
[24.99475861 382.04043579]
[19.48273659 368.02932739]
[17.00462914 353.17831421]
[17.66876793 338.13662720]
[21.44612122 323.56179810]
[28.17155838 310.09100342]
[37.55107117 298.31314087]
[49.17462921 288.74304199]
[62.53409958 281.79910278]
[77.04546356 277.78488159]
[76.13394928 262.81262207]
[75.22243500 247.84033203]
[74.31092834 232.86805725]
[73.39941406 217.89576721]
[72.48789978 202.92349243]
[71.57638550 187.95121765]
[70.66487122 172.97892761]
[69.75335693 158.00665283]
[68.84184265 143.03437805]
[67.93032837 128.06210327]
[55.36408997 119.87127686]
[41.29780579 125.08085632]
[27.23152542 130.29043579]
[22.13669014 145.07476807]
[8.70409012 153.08097839]
[-6.72381258 150.52874756]
[-16.86243439 138.62319946]
[-16.92462730 122.98573303]
[-6.88102579 110.99990082]
[8.52608776 108.32505035]
[22.02194595 116.22415161]
[36.08823013 111.01457214]
[50.15451050 105.80499268]
[56.48612976 92.20681000]
[51.41936493 78.08845520]
[46.35260391 63.97010040]
[41.28583908 49.85174942]
[35.93397903 35.83898163]
[30.29922485 21.93756104]
[24.66446877 8.03613853]
[19.02971268 -5.86528349]
[13.39495659 -19.76670456]
[7.20146704 -33.42835617]
[0.45941862 -46.82778931]
[-6.28262949 -60.22721863]
[-16.16805458 -71.50899506]
[-28.56571198 -79.95281219]
[-40.96337128 -88.39662933]
[-57.34852219 -89.07398987]
[-64.71372986 -103.72615051]
[-55.48230362 -117.28022003]
[-39.15073776 -115.79293060]
[-32.51955032 -100.79428864]
[-20.12189293 -92.35047150]
[-7.72423506 -83.90664673]
[-14.02308559 -97.52004242]
[-17.07551765 -112.20618439]
[-16.72294044 -127.20203400]
[-12.98367214 -141.72848511]
[-6.05198908 -155.03080750]
[3.71196985 -166.41787720]
[15.80091095 -175.29804993]
[29.58674622 -181.20996094]
[44.35322571 -183.84646606]
[59.33314514 -183.07055664]
[73.74821472 -178.92257690]
[86.84948730 -171.61801147]
[97.95628357 -161.53639221]
[106.49154663 -149.20150757]
[112.01181030 -135.25422668]
[114.23027039 -120.41918945]
[113.03166199 -105.46715546]
[108.47827148 -91.17496490]
[100.80666351 -78.28518677]
[90.41542053 -67.46751404]
[77.84443665 -59.28397751]
[63.74682617 -54.15976715]
[48.85505676 -52.36111450]
[33.94283295 -53.98146439]
[19.78492546 -58.93663406]
[7.11680269 -66.96926880]
[13.85885048 -53.56983566]
[20.60089874 -40.17040253]
[23.28142548 -39.17544174]
[25.71672058 -37.02730179]
[27.45362091 -33.81859970]
[28.08274078 -29.80841446]
[27.29637909 -25.40146065]
[32.93113327 -11.50003910]
[38.56589127 2.40138268]
[44.20064545 16.30280495]
[49.83540344 30.20422554]
[53.85937119 32.87467194]
[56.21572876 38.12759399]
[55.40419388 44.78498459]
[60.47095490 58.90333939]
[65.53771973 73.02169037]
[70.60448456 87.14004517]
[89.51785278 72.42843628]
[111.26117706 75.56140137]
[122.89578247 91.80023193]
[137.88885498 91.34426117]
[152.88191223 90.88829041]
[157.09968567 76.36019897]
[165.60212708 63.84765625]
[177.55625916 54.57652283]
[191.79093933 49.45508575]
[206.91159058 48.98509979]
[221.43685913 53.21260071]
[233.94371033 61.72342300]
[243.20683289 73.68376160]
[248.31872559 87.92187500]
[248.77857971 103.04283905]
[244.54135132 117.56527710]
[236.02214050 130.06640625]
[224.05560303 139.32151794]
[209.81407166 144.42387390]
[194.69279480 144.87359619]
[180.17320251 140.62663269]
[167.67778015 132.09906006]
[158.43069458 120.12630463]
[153.33789062 105.88136292]
[138.34481812 106.33732605]
[123.35175323 106.79329681]
[110.01035309 126.36627960]
[82.90261078 127.15058136]
[83.81412506 142.12286377]
[84.72563934 157.09513855]
[85.63715363 172.06741333]
[86.54866028 187.03970337]
[87.46017456 202.01197815]
[88.37168884 216.98425293]
[89.28320312 231.95654297]
[90.19471741 246.92881775]
[91.10623169 261.90109253]
[92.01774597 276.87338257]
[106.90890503 279.09756470]
[121.01208496 284.36956787]
[133.71075439 292.45892334]
[144.44976807 303.01199341]
[152.75968933 315.56741333]
[158.27722168 329.57635498]
[160.76116943 344.42639160]
[160.10295105 359.46835327]
[156.33132935 374.04467773]
[149.61119080 387.51809692]
[140.23631287 399.29965210]
[128.61651611 408.87432861]
[115.25978088 415.82351685]
[100.75000000 419.84344482]
[85.72147369 420.75839233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 36]
[25 35]
[26 34]
[37 101]
[38 100]
[39 99]
[40 98]
[41 95]
[42 94]
[43 93]
[44 92]
[45 91]
[46 86]
[47 85]
[48 84]
[49 58]
[50 57]
[51 56]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
