%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUACAGGCGGGGGGGGGGGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUxxxxxxxxxxCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGCCCCCCCCCCUAUUAGAGGC\
) } def
/len { sequence length } bind def

/coor [
[70.98365021 390.37670898]
[56.49396133 386.16824341]
[43.58773041 378.35214233]
[33.14493179 367.46130371]
[25.87756729 354.23828125]
[22.28114128 339.58468628]
[22.60086250 324.49957275]
[26.81493187 310.01153564]
[34.63602829 297.10830688]
[45.53089905 286.66970825]
[58.75670624 279.40747070]
[73.41169739 275.81668091]
[73.72375488 260.81994629]
[74.03581238 245.82318115]
[74.34786987 230.82643127]
[74.65992737 215.82968140]
[74.97197723 200.83291626]
[75.28403473 185.83616638]
[75.59609222 170.83941650]
[75.90814972 155.84266663]
[76.22020721 140.84590149]
[64.61886597 131.33753967]
[49.97536087 134.58837891]
[35.33185959 137.83920288]
[20.68836021 141.09002686]
[6.04485846 144.34085083]
[-8.59864330 147.59167480]
[-23.24214363 150.84249878]
[-37.88564682 154.09332275]
[-52.52914810 157.34414673]
[-64.24441528 168.81953430]
[-79.96514893 164.15148926]
[-83.51919556 148.14208984]
[-71.25046539 137.26045227]
[-55.77997208 142.70065308]
[-41.13647079 139.44982910]
[-26.49296951 136.19900513]
[-11.84946823 132.94818115]
[2.79403281 129.69734192]
[17.43753433 126.44652557]
[32.08103561 123.19569397]
[46.72453690 119.94487000]
[61.36803818 116.69404602]
[59.02757645 107.29170990]
[58.91596222 97.71130371]
[60.98948669 88.46818542]
[65.08821869 80.04815674]
[70.94718933 72.88197327]
[78.21301270 67.32334900]
[86.46489716 63.63161087]
[95.23891449 61.95986176]
[104.05400085 62.34916687]
[112.43830109 64.72893524]
[120.16238403 51.87053299]
[127.88647461 39.01213074]
[135.61054993 26.15372849]
[143.33464050 13.29532623]
[143.80827332 -2.51878929]
[156.99465942 -9.44471073]
[158.75036621 -18.47628403]
[165.01554871 -22.48789978]
[173.00547791 -35.18282700]
[180.99539185 -47.87775803]
[177.70520020 -63.10314560]
[185.98895264 -75.86379242]
[200.52430725 -78.90665436]
[186.98391724 -72.45236206]
[172.45835876 -68.70965576]
[157.48493958 -67.81697083]
[142.61758423 -69.80734253]
[128.40625000 -74.60714722]
[115.37665558 -82.03881073]
[104.01079559 -91.82743835]
[94.72911072 -103.61091614]
[87.87495422 -116.95335388]
[83.70188141 -131.36117554]
[82.36425781 -146.30142212]
[83.91156769 -161.22140503]
[88.28656769 -175.56919861]
[95.32742310 -188.81405640]
[104.77367401 -200.46603394]
[116.27587891 -210.09407043]
[129.40855408 -217.34202576]
[143.68589783 -221.94177246]
[158.57974243 -223.72314453]
[173.53913879 -222.62026978]
[188.01071167 -218.67393494]
[201.45912170 -212.03013611]
[213.38688660 -202.93461609]
[223.35276794 -191.72384644]
[230.98811340 -178.81254578]
[236.01045227 -164.67832947]
[238.23402405 -149.84405518]
[237.57656860 -134.85847473]
[234.06239319 -120.27593231]
[227.82150269 -106.63586426]
[219.08908081 -94.44782257]
[232.99163818 -100.07978058]
[246.89419556 -105.71173096]
[260.79675293 -111.34368896]
[274.69931030 -116.97564697]
[282.25308228 -131.12908936]
[298.05398560 -133.90603638]
[309.98089600 -123.17625427]
[308.88452148 -107.17070770]
[295.60589600 -98.16748810]
[280.33126831 -103.07308960]
[266.42871094 -97.44113159]
[252.52615356 -91.80918121]
[238.62359619 -86.17722321]
[224.72103882 -80.54526520]
[213.21923828 -70.91674042]
[216.76293945 -56.49530411]
[208.84086609 -43.50701904]
[193.69032288 -39.88784409]
[185.70040894 -27.19291306]
[177.71047974 -14.49798298]
[169.85305786 -1.72062552]
[169.93191528 13.17377090]
[156.19303894 21.01941109]
[148.46896362 33.87781525]
[140.74487305 46.73621750]
[133.02078247 59.59461975]
[125.29670715 72.45301819]
[134.19204712 83.26172638]
[138.60662842 96.80661011]
[137.76010132 111.27573395]
[131.58909607 124.66355133]
[120.78049469 135.04887390]
[106.69916534 140.87002563]
[91.21695709 141.15795898]
[90.90489960 156.15470886]
[90.59284973 171.15147400]
[90.28079224 186.14822388]
[89.96873474 201.14497375]
[89.65667725 216.14172363]
[89.34461975 231.13848877]
[89.03256226 246.13523865]
[88.72051239 261.13198853]
[88.40845490 276.12875366]
[102.90139008 280.32601929]
[115.81365204 288.13217163]
[126.26486206 299.01495361]
[133.54243469 312.23233032]
[137.15017700 326.88314819]
[136.84210205 341.96850586]
[132.63922119 356.45980835]
[124.82808685 369.36904907]
[113.94128418 379.81607056]
[100.72108459 387.08853149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 43]
[23 42]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[53 124]
[54 123]
[55 122]
[56 121]
[57 120]
[59 118]
[61 117]
[62 116]
[63 115]
[66 112]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
