%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUACCUCAGGGGGGGGGGCCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGAxxxxxxxxxxCACCACACACCACCUGUCCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUCCCCCCCCCCUAUUACCUCA\
) } def
/len { sequence length } bind def

/coor [
[47.07804871 291.90777588]
[33.95042419 287.79452515]
[21.13822174 282.78442383]
[8.70263290 276.90142822]
[-3.29695725 270.17364502]
[-14.80324364 262.63314819]
[-25.76127625 254.31600952]
[-36.11872482 245.26190186]
[-46.78034973 255.81320190]
[-57.44197845 266.36450195]
[-68.10359955 276.91577148]
[-72.46985626 292.12255859]
[-86.95864868 295.57568359]
[-97.62027740 306.12698364]
[-108.28189850 316.67828369]
[-118.94352722 327.22955322]
[-129.60514832 337.78085327]
[-136.61010742 353.22000122]
[-153.38504028 350.76278687]
[-155.66761780 333.96319580]
[-140.15644836 327.11923218]
[-129.49481201 316.56793213]
[-118.83319092 306.01666260]
[-108.17156219 295.46536255]
[-97.50994110 284.91406250]
[-93.90628052 270.46197510]
[-78.65489197 266.25415039]
[-67.99327087 255.70286560]
[-57.33164215 245.15156555]
[-46.67001343 234.60028076]
[-65.28945923 210.94468689]
[-80.12895203 184.75193787]
[-90.84912872 156.62101746]
[-97.20483398 127.19524384]
[-99.05072784 97.14756012]
[-114.03044128 96.36771393]
[-126.86355591 105.99531555]
[-142.35520935 101.82538605]
[-148.62152100 87.05673981]
[-140.85552979 73.01862335]
[-125.01462555 70.47987366]
[-113.25059509 81.38800049]
[-98.27088165 82.16784668]
[-97.16384125 72.50914001]
[-95.58657074 62.91600418]
[-93.54282379 53.41131592]
[-91.03746796 44.01773834]
[-88.07649231 34.75767899]
[-84.66696167 25.65322113]
[-80.81698608 16.72608185]
[-76.53577423 7.99755192]
[-71.83351135 -0.51155251]
[-66.72143555 -8.78093624]
[-61.21172333 -16.79087830]
[-55.31752396 -24.52227211]
[-49.05288696 -31.95668030]
[-42.43276215 -39.07637024]
[-35.47293472 -45.86436462]
[-28.19000244 -52.30447388]
[-20.60133553 -58.38133240]
[-12.72503662 -64.08045197]
[-4.57988691 -69.38824463]
[3.81468582 -74.29203796]
[12.43866062 -78.78014374]
[21.27147102 -82.84186554]
[30.29204750 -86.46750641]
[39.47887802 -89.64842224]
[48.81005096 -92.37702179]
[58.26331329 -94.64680481]
[67.81611633 -96.45235443]
[77.44567871 -97.78936005]
[87.12903595 -98.65464020]
[96.84308624 -99.04613495]
[106.56466675 -98.96289825]
[116.27059174 -98.40513611]
[125.93771362 -97.37417603]
[135.54296875 -95.87247467]
[145.06346130 -93.90361786]
[154.47647095 -91.47230530]
[163.75955200 -88.58432770]
[172.89056396 -85.24657440]
[181.84774780 -81.46701050]
[190.60971069 -77.25464630]
[199.15557861 -72.61952972]
[207.46495056 -67.57270813]
[215.51802063 -62.12623596]
[223.29557800 -56.29308701]
[230.77908325 -50.08717728]
[237.95066833 -43.52331161]
[244.79325867 -36.61714172]
[251.29049683 -29.38513947]
[257.42691040 -21.84455299]
[263.18786621 -14.01336670]
[275.79901123 -22.13490868]
[288.41012573 -30.25645065]
[289.14685059 -45.75602722]
[298.87951660 -57.84133148]
[313.86575317 -61.86531448]
[328.34301758 -56.28067398]
[336.74453735 -43.23481750]
[335.83972168 -27.74414635]
[325.97650146 -15.76513481]
[310.94750977 -11.90396023]
[296.53167725 -17.64532280]
[283.92053223 -9.52378082]
[271.30941772 -1.40223825]
[279.69650269 14.33495235]
[286.64160156 30.75955582]
[292.08905029 47.73977280]
[295.99505615 65.13935089]
[298.32833862 82.81865692]
[299.07015991 100.63584137]
[298.21453857 118.44792175]
[295.76837158 136.11196899]
[291.75128174 153.48623657]
[286.19549561 170.43130493]
[279.14559937 186.81120300]
[292.38818359 193.85633850]
[305.63076782 200.90147400]
[318.87335205 207.94660950]
[332.28186035 200.31671143]
[347.68560791 201.17002869]
[360.16931152 210.23426819]
[365.74948120 224.61709595]
[362.64547729 239.72895813]
[351.84780884 250.74775696]
[336.80194092 254.15740967]
[322.30899048 248.86990356]
[312.99356079 236.57247925]
[311.82821655 221.18919373]
[298.58563232 214.14405823]
[285.34304810 207.09892273]
[272.10046387 200.05378723]
[264.77935791 211.70089722]
[256.67135620 222.81455994]
[247.81513977 233.34172058]
[238.25302124 243.23208618]
[228.03067017 252.43844604]
[217.19688416 260.91680908]
[205.80342102 268.62670898]
[193.90467834 275.53131104]
[181.55749512 281.59765625]
[168.82083130 286.79675293]
[155.75549316 291.10379028]
[142.42388916 294.49816895]
[128.88969421 296.96374512]
[115.21753693 298.48867798]
[101.47270203 299.06570435]
[87.72083282 298.69210815]
[74.02760315 297.36959839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 30]
[9 29]
[10 28]
[11 27]
[13 25]
[14 24]
[15 23]
[16 22]
[17 21]
[35 43]
[36 42]
[93 106]
[94 105]
[95 104]
[117 133]
[118 132]
[119 131]
[120 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
