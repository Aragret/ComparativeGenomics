%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCUCCUGGGGGGGGGGACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGxxxxxxxxxxACUAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCCCCCCCCCCCACCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 389.73464966]
[71.19830322 383.71862793]
[59.48964310 374.18920898]
[50.78712082 361.85354614]
[45.73651886 347.62701416]
[44.71262741 332.56533813]
[47.79142761 317.78619385]
[54.74444962 304.38626099]
[65.05573273 293.35992432]
[77.96011353 285.52542114]
[92.50000000 281.46411133]
[92.50000000 266.46411133]
[92.50000000 251.46411133]
[92.50000000 236.46411133]
[92.50000000 221.46411133]
[92.50000000 206.46411133]
[92.50000000 191.46411133]
[92.50000000 176.46411133]
[92.50000000 161.46411133]
[92.50000000 146.46411133]
[92.50000000 131.46411133]
[83.37069702 129.49729919]
[74.80226135 124.83304596]
[67.60043335 117.64805603]
[62.51049042 108.36061859]
[60.14499664 97.60894012]
[60.91940308 86.20803070]
[45.93968964 85.42818451]
[30.95997429 84.64833832]
[15.98025894 83.86849213]
[1.00054502 83.08865356]
[-13.97916889 82.30880737]
[-20.85061264 95.89936066]
[-32.65986633 105.51504517]
[-47.36090469 109.48989105]
[-62.40668106 107.13522339]
[-75.19042969 98.85900879]
[-83.49728394 86.09515381]
[-85.88803101 71.05506897]
[-81.94846344 56.34453583]
[-72.36112976 44.51225281]
[-58.78710175 37.60822678]
[-43.57815170 36.82862854]
[-29.36932945 42.30852127]
[-18.62239647 53.09848404]
[-13.19932461 67.32909393]
[1.78039014 68.10893250]
[16.76010513 68.88877869]
[31.73981857 69.66862488]
[46.71953201 70.44847107]
[61.69924927 71.22831726]
[68.18741608 57.70412827]
[58.20468521 46.50836182]
[48.22195816 35.31259537]
[38.23923492 24.11682892]
[28.25650597 12.92106342]
[13.20243168 5.12291193]
[16.52844429 -11.50158691]
[33.42398453 -12.90767479]
[39.45227432 2.93833661]
[49.43499756 14.13410282]
[59.41772461 25.32986832]
[69.40045166 36.52563477]
[79.38317871 47.72140121]
[94.37587738 48.18944168]
[105.03749847 37.63815308]
[115.69912720 27.08686066]
[106.39731598 15.29888535]
[98.47386169 2.54354072]
[92.02839661 -11.01876068]
[87.14199066 -25.21745872]
[83.87608337 -39.87398911]
[82.27175903 -54.80403137]
[82.34918976 -69.81982422]
[84.10739899 -84.73252869]
[87.52427673 -99.35459900]
[92.55685425 -113.50214386]
[99.14183807 -126.99726105]
[107.19641876 -139.67021179]
[116.61929321 -151.36163330]
[127.29197693 -161.92449951]
[139.08023071 -171.22595215]
[151.83581543 -179.14901733]
[165.39830017 -185.59408569]
[179.59715271 -190.48007202]
[194.25376892 -193.74552917]
[209.18386841 -195.34941101]
[224.19966125 -195.27153015]
[239.11230469 -193.51287842]
[253.73426819 -190.09556580]
[267.88168335 -185.06256104]
[281.37658691 -178.47717285]
[294.04931641 -170.42221069]
[305.74044800 -160.99899292]
[316.30297852 -150.32598877]
[325.60409546 -138.53746033]
[333.52679443 -125.78163910]
[339.97143555 -112.21895599]
[344.85699463 -98.01996613]
[348.12200928 -83.36323547]
[349.72546387 -68.43309784]
[349.64712524 -53.41731262]
[347.88803101 -38.50471497]
[344.47027588 -23.88284874]
[339.43685913 -9.73559952]
[332.85104370 3.75911617]
[324.79571533 16.43158913]
[315.37213135 28.12244606]
[304.69882202 38.68466568]
[292.91000366 47.98541641]
[280.15396118 55.90773010]
[266.59109497 62.35197830]
[252.39195251 67.23711395]
[237.73512268 70.50170135]
[222.80493164 72.10468292]
[207.78915405 72.02590942]
[192.87660217 70.26636505]
[178.25483704 66.84817505]
[164.10774231 61.81432724]
[150.61322021 55.22813416]
[137.94099426 47.17241669]
[126.25041962 37.74848938]
[115.58879089 48.29977798]
[104.92716217 58.85106659]
[122.01115417 66.68862152]
[133.29220581 80.84296417]
[136.83346558 97.88291931]
[132.48358154 114.01510620]
[121.78166199 125.92649841]
[107.50000000 131.46411133]
[107.50000000 146.46411133]
[107.50000000 161.46411133]
[107.50000000 176.46411133]
[107.50000000 191.46411133]
[107.50000000 206.46411133]
[107.50000000 221.46411133]
[107.50000000 236.46411133]
[107.50000000 251.46411133]
[107.50000000 266.46411133]
[107.50000000 281.46411133]
[122.03988647 285.52542114]
[134.94427490 293.35992432]
[145.25555420 304.38626099]
[152.20857239 317.78619385]
[155.28736877 332.56533813]
[154.26348877 347.62701416]
[149.21287537 361.85354614]
[140.51036072 374.18920898]
[128.80169678 383.71862793]
[114.95575714 389.73464966]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 51]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[52 64]
[53 63]
[54 62]
[55 61]
[56 60]
[65 124]
[66 123]
[67 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
