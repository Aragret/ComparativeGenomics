%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAUUUAUGGGGGGGGGGUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGxxxxxxxxxxACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCACCCCCCCCCCUACUAUUUAU\
) } def
/len { sequence length } bind def

/coor [
[77.61493683 390.59149170]
[63.76900101 384.57546997]
[52.06033707 375.04605103]
[43.35781479 362.71038818]
[38.30721283 348.48385620]
[37.28332138 333.42218018]
[40.36212158 318.64303589]
[47.31514359 305.24310303]
[57.62642670 294.21676636]
[70.53080750 286.38226318]
[85.07069397 282.32095337]
[85.07069397 267.32095337]
[85.07069397 252.32093811]
[85.07069397 237.32093811]
[85.07069397 222.32093811]
[85.07069397 207.32093811]
[85.07069397 192.32093811]
[85.07069397 177.32093811]
[85.07069397 162.32093811]
[85.07069397 147.32093811]
[85.07069397 132.32093811]
[73.08386230 123.30341339]
[58.67164612 127.46130371]
[44.25942993 131.61918640]
[29.84721375 135.77708435]
[26.83222580 150.78268433]
[17.18012810 162.66105652]
[3.10890102 168.68261719]
[-12.14799023 167.46365356]
[-25.08462334 159.28428650]
[-32.72825623 146.02406311]
[-33.32243347 130.73008728]
[-26.73062325 116.91681671]
[-14.46757317 107.75842285]
[0.64875877 105.35944366]
[15.14474964 110.27114868]
[25.68932533 121.36486053]
[40.10154343 117.20697784]
[54.51375961 113.04908752]
[68.92597198 108.89119720]
[75.39838409 84.54478455]
[95.63009644 74.58709717]
[97.49771118 59.70381546]
[99.36531830 44.82053375]
[90.29110718 40.94098282]
[82.43058014 34.74039459]
[76.37390900 26.58958244]
[72.59996033 17.00827980]
[71.43910980 6.63223410]
[73.04558563 -3.82893777]
[77.38179016 -13.64026737]
[84.21584320 -22.09305191]
[73.55421448 -32.64434433]
[62.89259338 -43.19563293]
[46.90168381 -46.83196259]
[42.31453705 -62.57648849]
[53.85001373 -74.23258972]
[69.64140320 -69.80947876]
[73.44388580 -53.85725784]
[84.10550690 -43.30596924]
[94.76713562 -32.75467682]
[109.44365692 -35.85300064]
[114.93069458 -49.81338882]
[120.41772461 -63.77378082]
[123.51604462 -78.45030212]
[124.14002228 -93.43732452]
[124.76399994 -108.42433929]
[125.38797760 -123.41135406]
[111.36233521 -129.16090393]
[100.15110016 -139.36305237]
[93.10807037 -152.78585815]
[91.08373260 -167.80842590]
[94.32253265 -182.61672974]
[102.43337250 -195.42259216]
[114.43682098 -204.67964172]
[128.88342285 -209.27005005]
[144.02865601 -208.63948059]
[158.04367065 -202.86408997]
[169.23608398 -192.64129639]
[176.25437927 -179.20553589]
[178.25102234 -164.17926025]
[174.98493958 -149.37695312]
[166.85050964 -136.58605957]
[154.83001709 -127.35114288]
[140.37500000 -122.78737640]
[139.75102234 -107.80036163]
[139.12704468 -92.81334686]
[138.50306702 -77.82633209]
[145.29853821 -74.65276337]
[158.88948059 -68.30563354]
[165.68496704 -65.13207245]
[176.77627563 -75.23072052]
[187.86759949 -85.32936859]
[192.33036804 -101.10959625]
[208.29208374 -104.87199402]
[219.33270264 -92.74611664]
[214.09457397 -77.20603943]
[197.96624756 -74.23805237]
[186.87492371 -64.13940430]
[175.78361511 -54.04075241]
[165.71197510 -49.56236649]
[155.81544495 -48.13484955]
[146.87913513 -49.45917511]
[139.56629944 -53.05252457]
[134.37811279 -58.28674698]
[128.89108276 -44.32635880]
[123.40405273 -30.36596870]
[139.40884399 -20.29188728]
[149.06555176 -4.42024469]
[150.59907532 13.76082420]
[143.98280334 30.40690804]
[130.88247681 42.13014221]
[114.24860382 46.68814850]
[112.38098907 61.57142639]
[110.51337433 76.45470428]
[122.10435486 86.72183990]
[125.72457886 101.77703094]
[139.74128723 107.11854553]
[153.75801086 112.46006012]
[168.92729187 107.23774719]
[182.39031982 115.96277618]
[183.81942749 131.94204712]
[172.11831665 142.91763306]
[156.26307678 140.47000122]
[148.41648865 126.47676849]
[134.39978027 121.13526154]
[120.38306427 115.79374695]
[115.98428345 122.94564819]
[109.06079865 128.74858093]
[100.07069397 132.32093811]
[100.07069397 147.32093811]
[100.07069397 162.32093811]
[100.07069397 177.32093811]
[100.07069397 192.32093811]
[100.07069397 207.32093811]
[100.07069397 222.32093811]
[100.07069397 237.32093811]
[100.07069397 252.32093811]
[100.07069397 267.32095337]
[100.07069397 282.32095337]
[114.61058044 286.38226318]
[127.51496124 294.21676636]
[137.82624817 305.24310303]
[144.77926636 318.64303589]
[147.85806274 333.42218018]
[146.83418274 348.48385620]
[141.78356934 362.71038818]
[133.08105469 375.04605103]
[121.37239075 384.57546997]
[107.52645111 390.59149170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 40]
[23 39]
[24 38]
[25 37]
[42 115]
[43 114]
[44 113]
[52 61]
[53 60]
[54 59]
[62 107]
[63 106]
[64 105]
[65 88]
[66 87]
[67 86]
[68 85]
[91 100]
[92 99]
[93 98]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
