%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAUUAUGGGGGGGGGGUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGxxxxxxxxxxGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCACCCCCCCCCCAUCCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 414.94558716]
[71.19830322 408.92956543]
[59.48964310 399.40014648]
[50.78712082 387.06448364]
[45.73651886 372.83795166]
[44.71262741 357.77627563]
[47.79142761 342.99710083]
[54.74444962 329.59716797]
[65.05573273 318.57086182]
[77.96011353 310.73632812]
[92.50000000 306.67501831]
[92.50000000 291.67501831]
[92.50000000 276.67501831]
[92.50000000 261.67501831]
[92.50000000 246.67501831]
[92.50000000 231.67501831]
[92.50000000 216.67501831]
[92.50000000 201.67501831]
[92.50000000 186.67501831]
[92.50000000 171.67501831]
[92.50000000 156.67501831]
[69.43965149 148.31535339]
[52.00516129 131.06129456]
[43.40605927 108.08914948]
[28.40687180 108.24518585]
[13.40768242 108.40122223]
[-1.59150577 108.55725861]
[-5.68294430 123.09812927]
[-13.70645618 135.89656067]
[-25.01161003 145.91505432]
[-38.68194580 152.34144592]
[-53.60927582 154.65478516]
[-68.58350372 152.66754150]
[-82.39073944 146.54080200]
[-93.91168976 136.77122498]
[-102.21240234 124.15081787]
[-106.61997223 109.70263672]
[-106.77710724 94.59793091]
[-102.67106628 80.06118774]
[-94.63469696 67.27081299]
[-83.31948853 57.26368713]
[-69.64270020 50.85102844]
[-54.71305466 48.55268860]
[-39.74083328 50.55498123]
[-25.93976021 56.69559097]
[-14.42862988 66.47672272]
[-6.14060020 79.10546875]
[-1.74754238 93.55807495]
[13.25164604 93.40203857]
[28.25083351 93.24600220]
[43.25002289 93.08996582]
[49.52886581 73.14905548]
[62.55710602 56.79886246]
[54.30481720 44.27290344]
[46.05252838 31.74694061]
[37.80023956 19.22097778]
[29.54794884 6.69501591]
[21.29566002 -5.83094597]
[13.04337025 -18.35690880]
[-1.85159338 -25.21781731]
[-3.08771181 -41.57031250]
[10.60662842 -50.59234619]
[25.14386368 -43.00282288]
[25.56933212 -26.60919762]
[33.82162094 -14.08323479]
[42.07390976 -1.55727327]
[50.32619858 10.96868896]
[58.57849121 23.49464989]
[66.83078003 36.02061081]
[75.08306885 48.54657364]
[81.24751282 45.99395752]
[87.66737366 44.17693329]
[94.25521088 43.12025070]
[100.92129517 42.83830261]
[107.57483673 43.33492661]
[114.12519836 44.60336304]
[120.48316956 46.62633514]
[126.56214905 49.37628174]
[132.27934265 52.81575394]
[137.55685425 56.89790344]
[142.32284546 61.56712723]
[146.51235962 66.75982666]
[159.75494385 59.71469116]
[172.99752808 52.66955566]
[186.24011230 45.62442398]
[195.59039307 29.79557991]
[213.06947327 31.01264954]
[225.92788696 23.28856468]
[238.53901672 15.16702271]
[251.15014648 7.04548073]
[263.76126099 -1.07606161]
[276.37240601 -9.19760418]
[288.98352051 -17.31914520]
[301.59466553 -25.44068718]
[309.59680176 -41.99198914]
[327.11654663 -42.23208237]
[339.55599976 -50.61422348]
[349.31259155 -64.47949219]
[365.33688354 -58.94248962]
[364.45223999 -42.01163864]
[347.93814087 -38.17478561]
[335.49871826 -29.79264069]
[332.85821533 -17.94633102]
[322.50732422 -10.86973190]
[309.71618652 -12.82956028]
[297.10507202 -4.70801783]
[284.49392700 3.41352439]
[271.88281250 11.53506660]
[259.27166748 19.65660858]
[246.66055298 27.77815056]
[234.04942322 35.89969254]
[232.95770264 39.31665421]
[230.11920166 42.35714340]
[225.73767090 44.18870163]
[220.38858032 44.10580444]
[216.77249146 55.69162369]
[205.86920166 61.88331604]
[193.28524780 58.86700821]
[180.04266357 65.91213989]
[166.80007935 72.95727539]
[153.55749512 80.00241089]
[156.45941162 91.01982117]
[157.11897278 102.39388275]
[155.51000977 113.67287445]
[151.69639587 124.40882874]
[145.82960510 134.17536926]
[138.14265442 142.58457947]
[128.94081116 149.30252075]
[118.58955383 154.06234741]
[107.50000000 156.67501831]
[107.50000000 171.67501831]
[107.50000000 186.67501831]
[107.50000000 201.67501831]
[107.50000000 216.67501831]
[107.50000000 231.67501831]
[107.50000000 246.67501831]
[107.50000000 261.67501831]
[107.50000000 276.67501831]
[107.50000000 291.67501831]
[107.50000000 306.67501831]
[122.03988647 310.73632812]
[134.94427490 318.57086182]
[145.25555420 329.59716797]
[152.20857239 342.99710083]
[155.28736877 357.77627563]
[154.26348877 372.83795166]
[149.21287537 387.06448364]
[140.51036072 399.40014648]
[128.80169678 408.92956543]
[114.95575714 414.94558716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 51]
[25 50]
[26 49]
[27 48]
[53 70]
[54 69]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[82 121]
[83 120]
[84 119]
[85 118]
[87 115]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[93 106]
[94 105]
[96 102]
[97 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
