%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUAAACAGGGGGGGGGGAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGxxxxxxxxxxAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCCCCCCCCCCCACAAACA\
) } def
/len { sequence length } bind def

/coor [
[113.97658539 542.17120361]
[100.13065338 536.15515137]
[88.42198944 526.62573242]
[79.71946716 514.29010010]
[74.66886139 500.06356812]
[73.64497375 485.00186157]
[76.72377014 470.22271729]
[83.67678833 456.82278442]
[93.98807526 445.79644775]
[106.89245605 437.96194458]
[121.43234253 433.90063477]
[121.43234253 418.90063477]
[121.43234253 403.90063477]
[121.43234253 388.90063477]
[121.43234253 373.90063477]
[121.43234253 358.90063477]
[121.43234253 343.90063477]
[121.43234253 328.90063477]
[121.43234253 313.90063477]
[121.43234253 298.90063477]
[110.75147247 288.58294678]
[110.53778839 273.37081909]
[121.43234253 262.23770142]
[121.43234253 247.23768616]
[121.43234253 232.23768616]
[121.43234253 217.23768616]
[121.43234253 202.23768616]
[120.80836487 187.25067139]
[119.56149292 172.30258179]
[118.31461334 157.35450745]
[117.06774139 142.40641785]
[115.82086945 127.45832825]
[114.57398987 112.51023865]
[102.41271973 117.98291016]
[90.43002319 114.14851379]
[84.47190857 103.93209839]
[69.89920807 100.37734222]
[55.32650375 96.82257843]
[44.77179337 107.98024750]
[30.04773521 112.35034180]
[15.11502838 108.75731659]
[3.99049520 98.16767883]
[-0.33342022 83.43000031]
[3.30639338 68.50862885]
[13.93084526 57.41733932]
[28.68200874 53.13964081]
[43.59189987 56.82621002]
[54.64982605 67.48537445]
[58.88126755 82.24987793]
[73.45397186 85.80463409]
[88.02667236 89.35939789]
[96.73262024 83.23429108]
[108.04395294 83.73651123]
[117.21313477 91.47853851]
[122.11468506 77.30197906]
[127.01623535 63.12541962]
[131.91778564 48.94886017]
[136.81933594 34.77230072]
[141.72088623 20.59574509]
[146.62243652 6.41918659]
[133.18681335 -0.29937735]
[120.74312592 -8.71421242]
[109.50428009 -18.68133163]
[99.66260529 -30.03018188]
[91.38649750 -42.56657028]
[84.81757355 -56.07598114]
[80.06822968 -70.32725525]
[77.21974945 -85.07653046]
[76.32086182 -100.07143402]
[77.38694763 -115.05537415]
[80.39977264 -129.77195740]
[85.30777740 -143.96937561]
[92.02698517 -157.40467834]
[100.44240570 -169.84796143]
[110.41006470 -181.08633423]
[121.75938416 -190.92747498]
[134.29615784 -199.20298767]
[147.80589294 -205.77127075]
[162.05738831 -210.51992798]
[176.80680847 -213.36770630]
[191.80174255 -214.26588440]
[206.78562927 -213.19908142]
[221.50207520 -210.18556213]
[235.69924927 -205.27687073]
[249.13423157 -198.55703735]
[261.57711792 -190.14100647]
[272.81503296 -180.17282104]
[282.65560913 -168.82304382]
[290.93054199 -156.28585815]
[297.49816895 -142.77581787]
[302.24615479 -128.52409363]
[305.09323120 -113.77455139]
[305.99069214 -98.77956390]
[304.92318726 -83.79572296]
[301.90896606 -69.07942200]
[296.99960327 -54.88248062]
[290.27911377 -41.44781876]
[281.86251831 -29.00532532]
[271.89376831 -17.76790619]
[260.54351807 -7.92784977]
[248.00595093 0.34646857]
[234.49560547 6.91346407]
[220.24365234 11.66076660]
[205.49397278 14.50714397]
[190.49894714 15.40389061]
[175.51515198 14.33566189]
[160.79899597 11.32073689]
[155.89744568 25.49729538]
[150.99589539 39.67385483]
[146.09434509 53.85041046]
[141.19279480 68.02696991]
[136.29124451 82.20352936]
[131.38969421 96.38008881]
[129.52207947 111.26336670]
[130.76895142 126.21145630]
[132.01582336 141.15954590]
[133.26271057 156.10762024]
[134.50958252 171.05570984]
[135.75645447 186.00379944]
[138.45645142 189.59147644]
[139.70648193 193.46556091]
[139.59938049 197.12211609]
[138.38600159 200.14233398]
[136.43234253 202.23768616]
[136.43234253 217.23768616]
[136.43234253 232.23768616]
[136.43234253 247.23768616]
[136.43234253 262.23770142]
[147.32688904 273.37081909]
[147.11322021 288.58294678]
[136.43234253 298.90063477]
[136.43234253 313.90063477]
[136.43234253 328.90063477]
[136.43234253 343.90063477]
[136.43234253 358.90063477]
[136.43234253 373.90063477]
[136.43234253 388.90063477]
[136.43234253 403.90063477]
[136.43234253 418.90063477]
[136.43234253 433.90063477]
[150.97222900 437.96194458]
[163.87661743 445.79644775]
[174.18789673 456.82278442]
[181.14091492 470.22271729]
[184.21971130 485.00186157]
[183.19583130 500.06356812]
[178.14521790 514.29010010]
[169.44270325 526.62573242]
[157.73403931 536.15515137]
[143.88809204 542.17120361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[28 119]
[29 118]
[30 117]
[31 116]
[32 115]
[33 114]
[36 51]
[37 50]
[38 49]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
