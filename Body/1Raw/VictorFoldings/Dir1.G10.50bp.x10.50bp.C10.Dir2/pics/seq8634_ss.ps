%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCCCUGGGGGGGGGGGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAxxxxxxxxxxUACGACAAACAGACCUAAAAUCGCUCAUUGCAUACUCUUCAAUCAGCCACCCCCCCCCCCAUAGCCCUCG\
) } def
/len { sequence length } bind def

/coor [
[86.79685974 418.55523682]
[76.21498871 407.77560425]
[69.09995270 394.45071411]
[66.02853394 379.66073608]
[67.24971771 364.60467529]
[72.66450500 350.50299072]
[81.83395386 338.49893188]
[94.01473236 329.56555176]
[108.21939087 324.42703247]
[107.28376770 309.45623779]
[106.34813690 294.48544312]
[105.41250610 279.51464844]
[104.47688293 264.54388428]
[103.54125214 249.57307434]
[102.60562134 234.60227966]
[101.66999817 219.63150024]
[100.73436737 204.66070557]
[99.79873657 189.68991089]
[98.70742798 174.72966003]
[97.46055603 159.78157043]
[96.21367645 144.83349609]
[68.68537140 132.30746460]
[55.30648422 105.18341064]
[40.32677078 104.40356445]
[30.20124245 112.46132660]
[17.70219803 111.46490479]
[9.52334499 102.49753571]
[-5.43690395 101.40622711]
[-20.39715195 100.31491852]
[-35.35740280 99.22360229]
[-39.32109451 101.33325195]
[-43.34236908 101.96604156]
[-46.93785477 101.29198456]
[-49.73280716 99.62398529]
[-51.49909592 97.36842346]
[-66.31685638 95.03732300]
[-75.90755463 107.03373718]
[-90.21739197 112.61264038]
[-105.39708710 110.27333069]
[-117.36338806 100.64507294]
[-122.89740753 86.31781769]
[-120.51052856 71.14553070]
[-110.84481049 59.20947266]
[-96.50028229 53.72039032]
[-81.33554840 56.15481186]
[-69.42984772 65.85789490]
[-63.98575211 80.21955872]
[-49.16799164 82.55066681]
[-34.26609039 84.26335907]
[-19.30584145 85.35466766]
[-4.34559345 86.44597626]
[10.61465549 87.53728485]
[25.93682861 79.03840637]
[41.10661697 89.42385101]
[56.08633041 90.20369720]
[59.68260574 80.02787018]
[65.59870148 71.00122833]
[73.49421692 63.64313889]
[82.91484070 58.37698364]
[93.31852722 55.50577545]
[104.10665894 55.19471741]
[114.65850067 57.46170807]
[121.84101105 44.29312515]
[129.02351379 31.12454224]
[136.20602417 17.95595932]
[143.38853455 4.78737688]
[131.35427856 -4.21026039]
[120.72307587 -14.82902718]
[111.71135712 -26.85273933]
[104.50258636 -40.03660965]
[99.24353790 -54.11223221]
[96.04126740 -68.79304504]
[94.96096802 -83.78015900]
[96.02464294 -98.76847076]
[99.21063232 -113.45281982]
[104.45407867 -127.53427124]
[111.64822388 -140.72612000]
[120.64659882 -152.75982666]
[131.26602173 -163.39036560]
[143.29029846 -172.40135193]
[156.47460938 -179.60929871]
[170.55056763 -184.86747742]
[185.23156738 -188.06884766]
[200.21875000 -189.14820862]
[215.20700073 -188.08360291]
[229.89115906 -184.89671326]
[243.97227478 -179.65238953]
[257.16369629 -172.45742798]
[269.19683838 -163.45831299]
[279.82672119 -152.83822632]
[288.83694458 -140.81340027]
[296.04409790 -127.62863159]
[301.30139160 -113.55236053]
[304.50186157 -98.87115479]
[305.58029175 -83.88390350]
[304.51477051 -68.89572144]
[301.32693481 -54.21176529]
[296.08175659 -40.13097000]
[288.88598633 -26.94000626]
[279.88610840 -14.90742111]
[269.26538086 -4.27818680]
[257.23999023 4.73130083]
[244.05477905 11.93762016]
[229.97817993 17.19405937]
[215.29678345 20.39360428]
[200.30946350 21.47111511]
[185.32135010 20.40465736]
[170.63758850 17.21594238]
[156.55711365 11.96988583]
[149.37460327 25.13846779]
[142.19209290 38.30705261]
[135.00959778 51.47563171]
[127.82707977 64.64421844]
[133.44018555 69.89797211]
[138.07688904 76.03067017]
[141.60179138 82.86323547]
[143.91198730 90.19616699]
[144.94001770 97.81536102]
[144.65586853 105.49833679]
[143.06782532 113.02077484]
[140.22225952 120.16302490]
[136.20227051 126.71653748]
[131.12522888 132.48997498]
[125.13936615 137.31474304]
[118.41947937 141.04997253]
[111.16176605 143.58660889]
[112.40863800 158.53469849]
[113.65551758 173.48278809]
[117.50901031 181.83757019]
[114.76953125 188.75428772]
[115.70515442 203.72508240]
[116.64078522 218.69586182]
[117.57641602 233.66665649]
[118.51204681 248.63745117]
[119.44766998 263.60824585]
[120.38330078 278.57904053]
[121.31893158 293.54983521]
[122.25455475 308.52062988]
[123.19018555 323.49139404]
[137.92410278 326.82135010]
[151.12236023 334.16860962]
[161.71505737 344.93762207]
[168.84347534 358.25537109]
[171.92976379 373.04223633]
[170.72369385 388.09951782]
[165.32307434 402.20660400]
[156.16569519 414.21990967]
[143.99389648 423.16552734]
[129.79440308 428.31829834]
[114.71829987 429.26049805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 128]
[20 127]
[21 126]
[23 55]
[24 54]
[27 52]
[28 51]
[29 50]
[30 49]
[35 48]
[36 47]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
