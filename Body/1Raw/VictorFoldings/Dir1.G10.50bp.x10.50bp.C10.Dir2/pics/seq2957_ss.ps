%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAUCCAAUAGGGGGGGGGGACUUGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCxxxxxxxxxxCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCCCCCCCCCCCUGAUCAAAUA\
) } def
/len { sequence length } bind def

/coor [
[87.11523438 356.57553101]
[72.62554169 352.36706543]
[59.71931458 344.55096436]
[49.27651215 333.66012573]
[42.00915146 320.43710327]
[38.41272354 305.78350830]
[38.73244476 290.69839478]
[42.94651413 276.21032715]
[50.76761246 263.30712891]
[61.66247940 252.86853027]
[74.88829041 245.60627747]
[89.54328156 242.01550293]
[89.85533905 227.01875305]
[90.16739655 212.02200317]
[90.47945404 197.02525330]
[90.79150391 182.02848816]
[91.10356140 167.03173828]
[91.41561890 152.03498840]
[91.72767639 137.03823853]
[92.03973389 122.04148102]
[80.05290222 113.02394867]
[65.73030090 117.48076630]
[51.40770340 121.93758392]
[37.08510590 126.39439392]
[22.76251030 130.85121155]
[10.62905788 144.66278076]
[-6.31794310 140.21315002]
[-20.54472160 144.96696472]
[-33.65116501 155.72138977]
[-47.61352158 146.10426331]
[-42.23740387 130.02528381]
[-25.29853630 130.74018860]
[-11.07175827 125.98638153]
[-5.36211824 115.27622986]
[6.50320911 111.22246552]
[18.30569458 116.52861786]
[32.62829208 112.07180023]
[46.95088959 107.61498260]
[61.27348709 103.15816498]
[75.59608459 98.70135498]
[60.59767532 98.48274231]
[50.64305878 87.26197815]
[52.21323013 72.34438324]
[64.28591919 63.44213486]
[79.00115204 66.35107422]
[86.77845001 79.17688751]
[83.37547302 64.56799316]
[79.97249603 49.95910263]
[76.56951141 35.35020828]
[66.02078247 27.85500717]
[63.51351547 15.56954479]
[69.86237335 5.22549820]
[66.76405334 -9.45102692]
[63.66573334 -24.12755203]
[53.24479294 -36.03194809]
[58.18635941 -50.08293533]
[55.08803940 -64.75946045]
[40.02515793 -64.99893188]
[25.39334679 -68.58471680]
[11.92653179 -75.33694458]
[0.30020157 -84.91693878]
[-8.90247154 -96.84415436]
[-15.21988392 -110.52033997]
[-18.33515930 -125.25949860]
[-18.09203529 -140.32232666]
[-14.50270557 -154.95326233]
[-7.74721241 -168.41844177]
[1.83559370 -180.04244995]
[13.76504230 -189.24223328]
[27.44275665 -195.55633545]
[42.18267059 -198.66802979]
[57.24543381 -198.42126465]
[71.87550354 -194.82838440]
[85.33905029 -188.06962585]
[96.96073151 -178.48400879]
[106.15762329 -166.55233765]
[112.46840668 -152.87309265]
[115.57653809 -138.13241577]
[115.32611847 -123.06971741]
[111.72969818 -108.44052124]
[104.96768188 -94.97861481]
[95.37924194 -83.35925293]
[83.44533539 -74.16525269]
[69.76456451 -67.85778046]
[72.86288452 -53.18125534]
[83.06221008 -42.32662201]
[78.34225464 -27.22587395]
[81.44058228 -12.54934883]
[84.53890228 2.12717652]
[96.95194244 14.49311447]
[91.17840576 31.94723129]
[94.58138275 46.55612564]
[97.98436737 61.16501617]
[101.38734436 75.77391052]
[110.89634705 80.44689941]
[116.79104614 88.23475647]
[118.38335419 97.03363800]
[133.37605286 97.50167847]
[148.36874390 97.96971893]
[163.36143494 98.43775940]
[178.35414124 98.90579987]
[193.34683228 99.37384796]
[208.33952332 99.84188843]
[223.33222961 100.30992889]
[215.43547058 87.55683899]
[220.28138733 73.36116791]
[234.32800293 68.09880066]
[247.30838013 75.61610413]
[249.73490906 90.41853333]
[239.83460999 101.68645477]
[254.69764709 103.70878601]
[269.56069946 105.73112488]
[280.19296265 94.42913818]
[295.44400024 91.56820679]
[309.44952393 98.24840546]
[316.82409668 111.90107727]
[314.73205566 127.27648163]
[303.97781372 138.46246338]
[288.69662476 141.15777588]
[274.76440430 134.32603455]
[267.53836060 120.59416962]
[252.67532349 118.57183075]
[237.81227112 116.54949951]
[222.86418152 115.30262756]
[207.87149048 114.83457947]
[192.87878418 114.36653900]
[177.88609314 113.89849854]
[162.89340210 113.43045807]
[147.90069580 112.96241760]
[132.90800476 112.49436951]
[117.91531372 112.02632904]
[107.03648376 122.35353851]
[106.72442627 137.35029602]
[106.41237640 152.34704590]
[106.10031891 167.34379578]
[105.78826141 182.34054565]
[105.47620392 197.33731079]
[105.16414642 212.33406067]
[104.85208893 227.33081055]
[104.54003906 242.32756042]
[119.03297424 246.52485657]
[131.94523621 254.33099365]
[142.39643860 265.21377563]
[149.67401123 278.43115234]
[153.28175354 293.08197021]
[152.97367859 308.16732788]
[148.77079773 322.65863037]
[140.95967102 335.56787109]
[130.07286072 346.01489258]
[116.85266876 353.28735352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 40]
[22 39]
[23 38]
[24 37]
[25 36]
[27 33]
[28 32]
[46 94]
[47 93]
[48 92]
[49 91]
[52 89]
[53 88]
[54 87]
[56 85]
[57 84]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[110 123]
[111 122]
[112 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
