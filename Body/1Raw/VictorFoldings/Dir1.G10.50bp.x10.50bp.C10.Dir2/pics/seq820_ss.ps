%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCCCACAGGGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGxxxxxxxxxxACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCACA\
) } def
/len { sequence length } bind def

/coor [
[20.48821449 424.56137085]
[6.46627092 419.00836182]
[-5.73368645 410.14202881]
[-15.34475803 398.51971436]
[-21.76278305 384.87200928]
[-24.58432007 370.05682373]
[-23.63200378 355.00543213]
[-18.96569824 340.66403198]
[-10.87873268 327.93405151]
[0.12054208 317.61578369]
[13.34070110 310.35781860]
[27.95071411 306.61636353]
[27.95071411 291.61636353]
[27.95071411 276.61636353]
[27.95071411 261.61636353]
[27.95071411 246.61637878]
[27.95071411 231.61637878]
[27.95071411 216.61637878]
[27.95071411 201.61637878]
[27.95071411 186.61637878]
[27.95071411 171.61637878]
[23.29242134 185.87472534]
[9.62360001 192.05236816]
[-4.15660191 186.12733459]
[-9.07651997 171.95713806]
[-1.93301952 158.76734924]
[12.62265301 155.14517212]
[-2.33862782 154.06809998]
[-17.29990768 152.99102783]
[-32.26118851 151.91397095]
[-47.24143219 151.14430237]
[-62.23431778 150.68237305]
[-77.22720337 150.22045898]
[-92.22008514 149.75852966]
[-100.87151337 162.53178406]
[-115.06428528 168.57901001]
[-130.26953125 165.97055054]
[-141.63531494 155.53874207]
[-145.53485107 140.61235046]
[-140.72383118 125.95433807]
[-128.73741150 116.24200439]
[-113.40042114 114.57453918]
[-99.60684967 121.48400879]
[-91.75816345 134.76564026]
[-76.76527405 135.22756958]
[-61.77238846 135.68949890]
[-46.77950287 136.15141296]
[-42.70913696 133.54731750]
[-36.94833755 133.51518250]
[-31.18412018 136.95268250]
[-16.22283936 138.02975464]
[-1.26155806 139.10682678]
[13.69972229 140.18389893]
[28.84080505 118.21530914]
[52.21969223 117.93047333]
[61.13584518 105.86804199]
[70.05199432 93.80561066]
[76.59986877 80.31022644]
[80.55647278 65.84146118]
[84.51308441 51.37269211]
[88.46969604 36.90392303]
[92.42630768 22.43515587]
[96.38291931 7.96638870]
[92.55976105 -7.38594246]
[103.38016510 -17.62157249]
[107.33677673 -32.09033966]
[111.29338837 -46.55910873]
[115.25000000 -61.02787399]
[114.49631500 -70.19454193]
[119.43923187 -75.75149536]
[123.69207764 -90.13597870]
[110.67413330 -97.73838043]
[99.85432434 -108.23577881]
[91.86171722 -121.01785278]
[87.16097260 -135.34149170]
[86.02539825 -150.37391663]
[88.52101135 -165.24118042]
[94.50271606 -179.07890320]
[103.62274933 -191.08258057]
[115.35087585 -200.55435181]
[129.00524902 -206.94352722]
[143.79202271 -209.87864685]
[158.85150146 -209.18905640]
[173.30815125 -204.91487122]
[186.32148743 -197.30458069]
[197.13491821 -186.80062866]
[205.11978149 -174.01370239]
[209.81184387 -159.68722534]
[210.93830872 -144.65411377]
[208.43368530 -129.78837585]
[202.44358826 -115.95427704]
[193.31628418 -103.95612335]
[181.58241272 -94.49147034]
[167.92416382 -88.11057281]
[153.13562012 -85.18442535]
[138.07655334 -85.88313293]
[133.82371521 -71.49864960]
[129.71876526 -57.07126617]
[125.76215363 -42.60249710]
[121.80554199 -28.13372993]
[117.84893799 -13.66496277]
[121.95509338 0.65246552]
[110.85168457 11.92299938]
[106.89507294 26.39176750]
[102.93846130 40.86053467]
[98.98184967 55.32929993]
[95.02524567 69.79807281]
[91.06863403 84.26683807]
[105.19009399 84.34022522]
[113.64186859 93.99912262]
[128.54632568 95.68951416]
[143.13052368 89.55668640]
[154.90478516 98.67897797]
[169.80921936 100.36937714]
[182.01506042 90.32979584]
[197.73663330 91.94470215]
[207.64659119 104.25600433]
[205.86555481 119.95961761]
[193.45018005 129.73887634]
[177.76626587 127.79190826]
[168.11883545 115.27382660]
[153.21438599 113.58342743]
[139.69624329 119.83715820]
[126.85591888 110.59396362]
[111.95147705 108.90356445]
[96.00435638 116.00626373]
[82.11442566 102.72176361]
[73.19827271 114.78419495]
[64.28212738 126.84662628]
[70.83282471 144.06024170]
[63.04676437 162.69999695]
[42.95071411 171.61637878]
[42.95071411 186.61637878]
[42.95071411 201.61637878]
[42.95071411 216.61637878]
[42.95071411 231.61637878]
[42.95071411 246.61637878]
[42.95071411 261.61636353]
[42.95071411 276.61636353]
[42.95071411 291.61636353]
[42.95071411 306.61636353]
[57.56072617 310.35781860]
[70.78088379 317.61578369]
[81.78015900 327.93405151]
[89.86712646 340.66403198]
[94.53343201 355.00543213]
[95.48574829 370.05682373]
[92.66420746 384.87200928]
[86.24618530 398.51971436]
[76.63511658 410.14202881]
[64.43515778 419.00836182]
[50.41321182 424.56137085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[27 53]
[28 52]
[29 51]
[30 50]
[31 47]
[32 46]
[33 45]
[34 44]
[55 129]
[56 128]
[57 127]
[58 108]
[59 107]
[60 106]
[61 105]
[62 104]
[63 103]
[65 101]
[66 100]
[67 99]
[68 98]
[70 97]
[71 96]
[110 125]
[111 124]
[113 122]
[114 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
