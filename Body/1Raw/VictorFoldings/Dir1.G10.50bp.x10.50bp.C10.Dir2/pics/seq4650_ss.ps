%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUACUAAUGGGGGGGGGGUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACxxxxxxxxxxAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCCCCCCCCCCCAUACUAAU\
) } def
/len { sequence length } bind def

/coor [
[85.18793488 152.87287903]
[71.47409821 146.91706848]
[59.87530518 137.48262024]
[51.25152969 125.26905060]
[46.24217987 111.18192291]
[45.21867371 96.26571655]
[48.25689697 81.62638092]
[55.13158417 68.34934998]
[65.33300781 57.41903687]
[78.10480499 49.64586639]
[92.50000000 45.60617065]
[92.50000000 30.60617256]
[92.50000000 15.60617256]
[92.50000000 0.60617250]
[92.50000000 -14.39382744]
[92.50000000 -29.39382744]
[92.50000000 -44.39382935]
[92.50000000 -59.39382935]
[92.50000000 -74.39382935]
[92.50000000 -89.39382935]
[92.50000000 -104.39382935]
[92.50000000 -119.39382935]
[92.50000000 -134.39382935]
[92.50000000 -149.39382935]
[77.52276611 -150.29965210]
[62.62754440 -152.10812378]
[47.86869049 -154.81265259]
[33.30006409 -158.40335083]
[18.97481728 -162.86715698]
[4.94522429 -168.18774414]
[-8.73752117 -174.34571838]
[-22.02349281 -181.31860352]
[-34.86421204 -189.08094788]
[-47.21282196 -197.60444641]
[-59.02426910 -206.85798645]
[-70.25544739 -216.80780029]
[-80.86537933 -227.41757202]
[-90.81534576 -238.64862061]
[-100.06904602 -250.45993042]
[-108.59271240 -262.80841064]
[-116.35523987 -275.64904785]
[-123.32830811 -288.93490601]
[-129.48646545 -302.61758423]
[-134.80725098 -316.64709473]
[-139.27125549 -330.97225952]
[-142.86216736 -345.54086304]
[-145.56689453 -360.29965210]
[-147.37557983 -375.19485474]
[-148.28160095 -390.17208862]
[-148.28167725 -405.17669678]
[-147.37579346 -420.15393066]
[-145.56724548 -435.04913330]
[-142.86265564 -449.80798340]
[-139.27186584 -464.37658691]
[-134.80801392 -478.70181274]
[-129.48735046 -492.73138428]
[-123.32931519 -506.41409302]
[-116.35637665 -519.70001221]
[-108.59396362 -532.54071045]
[-100.07041168 -544.88928223]
[-90.81681824 -556.70068359]
[-80.86695862 -567.93182373]
[-70.25712585 -578.54168701]
[-59.02603531 -588.49163818]
[-47.21467972 -597.74523926]
[-34.86614609 -606.26885986]
[-22.02549934 -614.03137207]
[-8.73959160 -621.00433350]
[4.94309664 -627.16247559]
[18.97263908 -632.48315430]
[33.29784393 -636.94708252]
[47.86643982 -640.53796387]
[62.62526703 -643.24261475]
[77.52046967 -645.05120850]
[92.49769592 -645.95715332]
[107.50230408 -645.95715332]
[122.47953033 -645.05120850]
[137.37474060 -643.24261475]
[152.13356018 -640.53796387]
[166.70214844 -636.94708252]
[181.02735901 -632.48315430]
[195.05690002 -627.16247559]
[208.73959351 -621.00433350]
[222.02549744 -614.03137207]
[234.86614990 -606.26885986]
[247.21467590 -597.74523926]
[259.02603149 -588.49163818]
[270.25711060 -578.54168701]
[280.86694336 -567.93182373]
[290.81683350 -556.70068359]
[300.07040405 -544.88928223]
[308.59396362 -532.54071045]
[316.35638428 -519.70001221]
[323.32931519 -506.41409302]
[329.48736572 -492.73138428]
[334.80801392 -478.70181274]
[339.27188110 -464.37658691]
[342.86264038 -449.80798340]
[345.56726074 -435.04913330]
[347.37579346 -420.15393066]
[348.28167725 -405.17669678]
[348.28161621 -390.17208862]
[347.37557983 -375.19485474]
[345.56689453 -360.29965210]
[342.86218262 -345.54086304]
[339.27124023 -330.97225952]
[334.80725098 -316.64709473]
[329.48648071 -302.61758423]
[323.32830811 -288.93490601]
[316.35525513 -275.64904785]
[308.59271240 -262.80841064]
[300.06906128 -250.45993042]
[290.81533813 -238.64862061]
[280.86538696 -227.41757202]
[270.25543213 -216.80780029]
[259.02426147 -206.85798645]
[247.21282959 -197.60444641]
[234.86421204 -189.08094788]
[222.02349854 -181.31860352]
[208.73751831 -174.34571838]
[195.05477905 -168.18774414]
[181.02517700 -162.86715698]
[166.69993591 -158.40335083]
[152.13130188 -154.81265259]
[137.37245178 -152.10812378]
[122.47723389 -150.29965210]
[107.50000000 -149.39382935]
[107.50000000 -134.39382935]
[107.50000000 -119.39382935]
[107.50000000 -104.39382935]
[107.50000000 -89.39382935]
[107.50000000 -74.39382935]
[107.50000000 -59.39382935]
[107.50000000 -44.39382935]
[107.50000000 -29.39382744]
[107.50000000 -14.39382744]
[107.50000000 0.60617250]
[107.50000000 15.60617256]
[107.50000000 30.60617256]
[107.50000000 45.60617065]
[121.89519501 49.64586639]
[134.66699219 57.41903687]
[144.86842346 68.34934998]
[151.74310303 81.62638092]
[154.78132629 96.26571655]
[153.75781250 111.18192291]
[148.74847412 125.26905060]
[140.12469482 137.48262024]
[128.52589417 146.91706848]
[114.81206512 152.87287903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
