%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGACAACAGGGGGGGGGGUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCxxxxxxxxxxCCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGAACCCCCCCCCCUCUGACAACA\
) } def
/len { sequence length } bind def

/coor [
[126.04690552 539.83471680]
[112.20097351 533.81872559]
[100.49230957 524.28930664]
[91.78978729 511.95361328]
[86.73918152 497.72711182]
[85.71529388 482.66540527]
[88.79409027 467.88626099]
[95.74710846 454.48632812]
[106.05839539 443.45999146]
[118.96277618 435.62548828]
[133.50267029 431.56417847]
[133.50267029 416.56417847]
[133.50267029 401.56417847]
[133.50267029 386.56417847]
[133.50267029 371.56417847]
[133.50267029 356.56417847]
[133.50267029 341.56417847]
[133.50267029 326.56417847]
[133.50267029 311.56417847]
[133.50267029 296.56417847]
[133.50267029 281.56417847]
[133.50267029 266.56417847]
[133.50267029 251.56417847]
[133.50267029 236.56417847]
[125.76536560 223.83689880]
[133.50267029 210.03672791]
[133.50267029 195.03672791]
[129.43608093 161.98548889]
[121.18379974 149.45953369]
[112.93151093 136.93356323]
[104.67922211 124.40760803]
[96.42693329 111.88164520]
[84.53455353 102.73991394]
[70.30776978 97.98609924]
[54.76685715 100.95098877]
[45.14776611 89.57899475]
[30.92098618 84.82518005]
[16.69420815 80.07136536]
[2.46742821 75.31755066]
[-13.07348537 78.28244019]
[-22.69257736 66.91044617]
[-36.91935730 62.15663147]
[-50.94660187 69.43756104]
[-65.98832703 64.58760834]
[-73.12054443 50.48416519]
[-68.11183167 35.49455643]
[-53.93377686 28.51184845]
[-38.99795914 33.67876053]
[-32.16554260 47.92985153]
[-17.93876266 52.68366623]
[-3.41544437 49.37874603]
[7.22124290 61.09077072]
[21.44802284 65.84458160]
[35.67480087 70.59839630]
[49.90158081 75.35221100]
[64.42489624 72.04729462]
[75.06158447 83.75931549]
[89.28836823 88.51313019]
[95.37428284 84.13002777]
[93.86841583 69.20581055]
[107.54611969 75.36382294]
[113.63204193 70.98072052]
[113.63204193 55.98071671]
[105.89473724 42.18054581]
[113.63204193 29.45327377]
[113.63204193 14.45327377]
[113.63204193 -0.54672617]
[113.63204193 -15.54672623]
[99.57485199 -21.33152771]
[88.80497742 -32.05898285]
[82.96474457 -46.09323120]
[82.94475555 -61.29415131]
[88.74803925 -75.34371948]
[99.48965454 -86.09947205]
[113.53157043 -91.92123413]
[128.73251343 -91.92123413]
[142.77442932 -86.09947205]
[153.51603699 -75.34371948]
[159.31932068 -61.29415131]
[159.29933167 -46.09323120]
[153.45910645 -32.05898285]
[142.68922424 -21.33152771]
[128.63203430 -15.54672623]
[128.63203430 -0.54672617]
[128.63203430 14.45327377]
[128.63203430 29.45327377]
[136.36933899 42.18054581]
[128.63203430 55.98071671]
[128.63203430 70.98072052]
[124.69334412 94.90467834]
[108.95289612 103.62935638]
[117.20518494 116.15531921]
[125.45747375 128.68127441]
[133.70976257 141.20724487]
[141.96205139 153.73320007]
[135.63848877 140.13127136]
[137.28526306 125.22194672]
[146.42494202 113.32798004]
[160.40757751 107.89787292]
[175.17907715 110.50601959]
[186.45668030 120.39621735]
[190.97055054 134.70092773]
[187.41198730 149.27270508]
[176.81272888 159.88664246]
[162.24833679 163.46545410]
[177.18264771 162.06315613]
[192.11694336 160.66084290]
[207.05125427 159.25854492]
[218.35133362 147.87048340]
[234.28413391 149.74809265]
[242.62738037 163.45100403]
[236.98083496 178.46752930]
[221.67605591 183.27827454]
[208.45356750 174.19285583]
[193.51925659 175.59515381]
[178.58494568 176.99745178]
[163.65063477 178.39976501]
[178.56893921 179.96313477]
[188.58772278 191.12664795]
[188.53425598 206.12655640]
[178.43615723 217.21836853]
[163.50708008 218.67535400]
[151.45495605 209.74528503]
[148.50267029 195.03672791]
[148.50267029 210.03672791]
[156.23995972 223.83689880]
[148.50267029 236.56417847]
[148.50267029 251.56417847]
[148.50267029 266.56417847]
[148.50267029 281.56417847]
[148.50267029 296.56417847]
[148.50267029 311.56417847]
[148.50267029 326.56417847]
[148.50267029 341.56417847]
[148.50267029 356.56417847]
[148.50267029 371.56417847]
[148.50267029 386.56417847]
[148.50267029 401.56417847]
[148.50267029 416.56417847]
[148.50267029 431.56417847]
[163.04255676 435.62548828]
[175.94692993 443.45999146]
[186.25820923 454.48632812]
[193.21124268 467.88626099]
[196.29003906 482.66540527]
[195.26614380 497.72711182]
[190.21554565 511.95361328]
[181.51301575 524.28930664]
[169.80435181 533.81872559]
[155.95841980 539.83471680]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[26 125]
[27 124]
[28 95]
[29 94]
[30 93]
[31 92]
[32 91]
[33 58]
[34 57]
[36 55]
[37 54]
[38 53]
[39 52]
[41 50]
[42 49]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[68 83]
[105 117]
[106 116]
[107 115]
[108 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
