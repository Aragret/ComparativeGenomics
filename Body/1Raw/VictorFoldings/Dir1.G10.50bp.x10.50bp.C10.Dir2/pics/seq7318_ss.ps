%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUGACUAUAGGGGGGGGGGUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUxxxxxxxxxxACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACCCCCCCCCCCAGUGAUUAUA\
) } def
/len { sequence length } bind def

/coor [
[90.57504272 394.70040894]
[77.35484314 387.42794800]
[66.46804047 376.98092651]
[58.65690994 364.07168579]
[54.45402908 349.58038330]
[54.14595795 334.49502563]
[57.75370026 319.84420776]
[65.03127289 306.62683105]
[75.48248291 295.74404907]
[88.39474487 287.93789673]
[102.88768005 283.74063110]
[102.57562256 268.74386597]
[102.26356506 253.74711609]
[101.95150757 238.75036621]
[101.63945007 223.75360107]
[101.32740021 208.75685120]
[101.01534271 193.76010132]
[100.70328522 178.76335144]
[100.39122772 163.76658630]
[100.07917023 148.76983643]
[99.76711273 133.77308655]
[99.45506287 118.77632904]
[88.15605164 108.91060638]
[73.25415039 110.62329865]
[58.35224915 112.33598328]
[43.45034790 114.04867554]
[40.22185135 128.84243774]
[32.36262131 141.78504944]
[20.72517204 151.47259521]
[6.57184410 156.85423279]
[-8.56211376 157.34622192]
[-23.03508377 152.89515686]
[-35.27714539 143.98390198]
[-43.96037292 131.57905579]
[-48.14287567 117.02619934]
[-47.37096024 101.90393829]
[-41.72836685 87.85260773]
[-31.82715988 76.39639282]
[-18.74134445 68.77798462]
[-3.89037418 65.82376862]
[11.11482811 67.85418701]
[24.64661217 74.64900970]
[35.23714828 85.47116852]
[41.73765945 99.14677429]
[56.63956070 97.43408203]
[71.54146576 95.72139740]
[86.44336700 94.00870514]
[72.18518829 89.34991455]
[63.76219940 76.93809509]
[64.69928741 61.96739197]
[74.60428619 50.70280457]
[89.33213043 47.85837936]
[102.71943665 54.62446213]
[109.16385651 68.16955566]
[105.96782684 82.82633972]
[114.98535919 70.83950806]
[124.00289154 58.85267639]
[133.02041626 46.86584091]
[129.07882690 35.56819916]
[131.09005737 23.89498711]
[138.43453979 14.75538445]
[149.17851257 10.36962986]
[160.58198547 11.73023987]
[170.09033203 0.12889874]
[179.59869385 -11.47244263]
[189.10705566 -23.07378387]
[198.61541748 -34.67512512]
[188.25633240 -45.55027771]
[179.31222534 -57.61603928]
[171.91868591 -70.68949890]
[166.18782043 -84.57246399]
[162.20648193 -99.05446625]
[160.03503418 -113.91597748]
[159.70639038 -128.93168640]
[161.22555542 -143.87397766]
[164.56947327 -158.51629639]
[169.68745422 -172.63670349]
[176.50193787 -186.02111816]
[184.90957642 -198.46664429]
[194.78294373 -209.78460693]
[205.97235107 -219.80343628]
[218.30816650 -228.37123108]
[231.60339355 -235.35812378]
[245.65647888 -240.65817261]
[260.25436401 -244.19107056]
[275.17575073 -245.90321350]
[290.19445801 -245.76867676]
[305.08279419 -243.78948975]
[319.61505127 -239.99566650]
[333.57092285 -234.44470215]
[346.73886108 -227.22074890]
[358.91918945 -218.43333435]
[369.92733765 -208.21566772]
[379.59637451 -196.72265625]
[387.77969360 -184.12850952]
[394.35330200 -170.62416077]
[399.21752930 -156.41433716]
[402.29858398 -141.71444702]
[403.54980469 -126.74735260]
[402.95223999 -111.73993683]
[400.51489258 -96.91971588]
[396.27478027 -82.51135254]
[390.29611206 -68.73328400]
[382.66955566 -55.79437256]
[373.51074219 -43.89077759]
[362.95849609 -33.20294952]
[351.17279053 -23.89291191]
[338.33227539 -16.10180664]
[324.63165283 -9.94774151]
[310.27859497 -5.52401352]
[295.49069214 -2.89768314]
[280.49212646 -2.10856557]
[265.51028442 -3.16862369]
[250.77226257 -6.06178713]
[236.50151062 -10.74419594]
[222.91433716 -17.14486694]
[210.21675110 -25.16676712]
[200.70838928 -13.56542492]
[191.20004272 -1.96408403]
[181.69168091 9.63725758]
[172.18331909 21.23859787]
[175.11846924 39.26031876]
[163.80722046 53.99643326]
[145.00724792 55.88337326]
[135.98971558 67.87020111]
[126.97219086 79.85704041]
[117.95465851 91.84387207]
[114.45181274 118.46427155]
[114.76387024 133.46102905]
[115.07592773 148.45777893]
[115.38798523 163.45452881]
[115.70003510 178.45129395]
[116.01209259 193.44804382]
[116.32415009 208.44479370]
[116.63620758 223.44154358]
[116.94826508 238.43830872]
[117.26032257 253.43505859]
[117.57237244 268.43182373]
[117.88442993 283.42855835]
[132.53942871 287.01934814]
[145.76522827 294.28158569]
[156.66009521 304.72018433]
[164.48120117 317.62338257]
[168.69526672 332.11145020]
[169.01498413 347.19656372]
[165.41856384 361.85015869]
[158.15119934 375.07318115]
[147.70840454 385.96401978]
[134.80216980 393.78012085]
[120.31247711 397.98858643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 47]
[24 46]
[25 45]
[26 44]
[55 127]
[56 126]
[57 125]
[58 124]
[63 121]
[64 120]
[65 119]
[66 118]
[67 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
