%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAGCAGGAAGGGGGGGGGGCAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAxxxxxxxxxxUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUCCCCCCCCCCGUAGCAGGAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.64038086]
[71.19830322 356.62435913]
[59.48964310 347.09494019]
[50.78712082 334.75927734]
[45.73651886 320.53274536]
[44.71262741 305.47106934]
[47.79142761 290.69189453]
[54.74444962 277.29196167]
[65.05573273 266.26565552]
[77.96011353 258.43112183]
[92.50000000 254.36982727]
[92.50000000 239.36982727]
[92.50000000 224.36982727]
[92.50000000 209.36982727]
[92.50000000 194.36982727]
[92.50000000 179.36982727]
[92.50000000 164.36982727]
[92.50000000 149.36982727]
[92.50000000 134.36982727]
[92.50000000 119.36981964]
[85.09155273 121.31966400]
[76.49362183 120.60558319]
[67.60346222 116.82125854]
[53.28086090 121.27806854]
[38.95826340 125.73488617]
[28.08022499 137.22308350]
[13.62880421 133.61674500]
[-0.69379288 138.07356262]
[-11.41462612 150.48306274]
[-27.46898079 147.13795471]
[-32.34151077 131.47940063]
[-21.01977921 119.61557007]
[-5.15060854 123.75096893]
[9.17198849 119.29415131]
[19.02557945 108.12472534]
[34.50144958 111.41229248]
[48.82404709 106.95547485]
[63.14664459 102.49865723]
[63.38066483 95.00231171]
[64.08272552 72.51326752]
[50.06601334 67.17175293]
[36.04930115 61.83024216]
[22.03258896 56.48872757]
[8.01587582 51.14721680]
[-8.08033943 54.28471375]
[-18.64001846 41.73779297]
[-12.80026817 26.41364861]
[3.43147659 24.07644844]
[13.35738850 37.13050079]
[27.37410164 42.47201538]
[41.39081573 47.81352615]
[55.40752792 53.15504074]
[69.42424011 58.49655151]
[83.87892914 54.48881149]
[93.14387512 42.69217300]
[102.40882874 30.89553261]
[111.67377472 19.09889221]
[100.74739838 8.80712605]
[90.78755951 -2.42265153]
[81.87445831 -14.50002193]
[74.07985687 -27.32774353]
[67.46651459 -40.80253220]
[62.08767700 -54.81589508]
[57.98665619 -69.25500488]
[55.19646835 -84.00360107]
[53.73957825 -98.94293213]
[53.62771988 -113.95272064]
[54.86178970 -128.91210938]
[57.43185806 -143.70065308]
[61.31722260 -158.19927979]
[66.48661041 -172.29125977]
[72.89839172 -185.86311340]
[80.50093842 -198.80557251]
[89.23305511 -211.01445007]
[99.02441406 -222.39141846]
[109.79619598 -232.84489441]
[121.46165466 -242.29069519]
[133.92687988 -250.65277100]
[147.09150696 -257.86380005]
[160.84951782 -263.86572266]
[175.09017944 -268.61022949]
[189.69879150 -272.05908203]
[204.55775452 -274.18453979]
[219.54740906 -274.96945190]
[234.54710388 -274.40756226]
[249.43603516 -272.50335693]
[264.09432983 -269.27215576]
[278.40396118 -264.73999023]
[292.24972534 -258.94335938]
[305.52014160 -251.92893982]
[318.10836792 -243.75317383]
[329.91302490 -234.48191833]
[340.83911133 -224.18981934]
[350.79858398 -212.95974731]
[359.71133423 -200.88209534]
[367.50552368 -188.05413818]
[374.11846924 -174.57914734]
[379.49688721 -160.56562805]
[383.59747314 -146.12638855]
[386.38720703 -131.37770081]
[387.84362793 -116.43833160]
[387.95501709 -101.42853546]
[386.72048950 -86.46918488]
[384.14999390 -71.68072510]
[380.26416016 -57.18221283]
[375.09436035 -43.09039688]
[368.68215942 -29.51873779]
[361.07922363 -16.57650185]
[352.34674072 -4.36789989]
[342.55502319 7.00877190]
[331.78292847 17.46191406]
[320.11718750 26.90736008]
[307.65170288 35.26906204]
[294.48684692 42.47969055]
[280.72863770 48.48119354]
[266.48785400 53.22525024]
[251.87913513 56.67366028]
[237.02011108 58.79865646]
[222.03041077 59.58313370]
[207.03074646 59.02077484]
[192.14187622 57.11610794]
[177.48368835 53.88446808]
[163.17417908 49.35187149]
[149.32858276 43.55482101]
[136.05838013 36.53998184]
[123.47041321 28.36384201]
[114.20546722 40.16048050]
[104.94052124 51.95712280]
[95.67556763 63.75376129]
[127.78837585 93.07929230]
[107.50000000 119.36981964]
[107.50000000 134.36982727]
[107.50000000 149.36982727]
[107.50000000 164.36982727]
[107.50000000 179.36982727]
[107.50000000 194.36982727]
[107.50000000 209.36982727]
[107.50000000 224.36982727]
[107.50000000 239.36982727]
[107.50000000 254.36982727]
[122.03988647 258.43112183]
[134.94427490 266.26565552]
[145.25555420 277.29196167]
[152.20857239 290.69189453]
[155.28736877 305.47106934]
[154.26348877 320.53274536]
[149.21287537 334.75927734]
[140.51036072 347.09494019]
[128.80169678 356.62435913]
[114.95575714 362.64038086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 38]
[24 37]
[25 36]
[27 34]
[28 33]
[40 53]
[41 52]
[42 51]
[43 50]
[44 49]
[54 129]
[55 128]
[56 127]
[57 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
