%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUAACCAGGGGGGGGGGAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAxxxxxxxxxxUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUCCCCCCCCCCACCAUAAUCA\
) } def
/len { sequence length } bind def

/coor [
[83.77877808 368.27438354]
[69.93284607 362.25836182]
[58.22418213 352.72894287]
[49.52165604 340.39328003]
[44.47105408 326.16674805]
[43.44716263 311.10507202]
[46.52596283 296.32592773]
[53.47898483 282.92599487]
[63.79026794 271.89965820]
[76.69464874 264.06515503]
[91.23453522 260.00384521]
[91.23453522 245.00382996]
[91.23453522 230.00382996]
[91.23453522 215.00382996]
[91.23453522 200.00382996]
[91.23453522 185.00382996]
[91.23453522 170.00382996]
[91.23453522 155.00382996]
[91.23453522 140.00382996]
[91.23453522 125.00382996]
[91.23453522 110.00382996]
[85.45826721 96.16061401]
[74.79663849 85.60932922]
[64.13500977 75.05803680]
[53.47338486 64.50674438]
[41.91884613 74.09107208]
[29.48050308 82.49669647]
[16.27815247 89.64265442]
[2.43894005 95.46012878]
[-11.90384960 99.89308929]
[-26.61208534 102.89884949]
[-41.54411697 104.44846344]
[-56.55612946 104.52699280]
[-71.50355530 103.13369751]
[-86.24243164 100.28198242]
[-100.63082123 95.99932098]
[-114.53013611 90.32695770]
[-127.80653381 83.31951904]
[-140.33213806 75.04449463]
[-151.98631287 65.58158112]
[-162.65684509 55.02190399]
[-172.24093628 43.46717072]
[-180.64631653 31.02866173]
[-187.79200745 17.82616806]
[-193.60920715 3.98684025]
[-198.04188538 -10.35603809]
[-201.04734802 -25.06433487]
[-202.59666443 -39.99639511]
[-202.67489624 -55.00841141]
[-201.28129578 -69.95581055]
[-198.42929077 -84.69463348]
[-194.14633179 -99.08293152]
[-188.47369385 -112.98213196]
[-181.46598816 -126.25838470]
[-173.19071960 -138.78382874]
[-163.72756958 -150.43782043]
[-153.16767883 -161.10813904]
[-141.61276245 -170.69200134]
[-129.17407227 -179.09712219]
[-115.97144318 -186.24255371]
[-102.13199615 -192.05947876]
[-87.78903198 -196.49186707]
[-73.08067322 -199.49703979]
[-58.14858246 -201.04605103]
[-43.13656235 -201.12397766]
[-28.18919373 -199.73008728]
[-13.45042896 -196.87777710]
[0.93778402 -192.59454346]
[14.83687687 -186.92163086]
[28.11298943 -179.91366577]
[40.63825989 -171.63813782]
[52.29206848 -162.17474365]
[62.96216965 -151.61465454]
[72.54580688 -140.05953979]
[80.95067596 -127.62068939]
[88.09584808 -114.41790771]
[93.91249084 -100.57834625]
[98.34458923 -86.23529053]
[101.34947205 -71.52687836]
[102.89818573 -56.59475327]
[102.97581482 -41.58273315]
[101.58161926 -26.63538933]
[98.72902679 -11.89668274]
[94.44550323 2.49144459]
[88.77230072 16.39042282]
[81.76406860 29.66639519]
[73.48828888 42.19150162]
[64.02467346 53.84511948]
[74.68630219 64.39640808]
[85.34793091 74.94770050]
[96.00955200 85.49899292]
[110.28501129 90.10455322]
[125.10277557 87.77345276]
[139.92053223 85.44234467]
[154.56402588 82.19152069]
[168.97624207 78.03363037]
[183.38845825 73.87574768]
[197.75665283 69.56816101]
[209.89010620 55.75659943]
[226.83709717 60.20621490]
[241.06387329 55.45240021]
[255.29066467 50.69858551]
[262.12307739 36.44749451]
[277.05889893 31.28058434]
[291.23693848 38.26329041]
[296.24566650 53.25289917]
[289.11343384 67.35633850]
[274.07171631 72.20629120]
[260.04446411 64.92536163]
[245.81770325 69.67918396]
[231.59091187 74.43299866]
[225.88127136 85.14314270]
[214.01594543 89.19690704]
[202.21347046 83.89075470]
[196.72569275 88.91370392]
[187.54635620 88.28796387]
[173.13414001 92.44584656]
[158.72192383 96.60373688]
[171.05599976 105.14015961]
[173.93051147 119.86215973]
[165.71343994 132.41125488]
[151.07006836 135.66264343]
[138.31420898 127.77034760]
[134.68807983 113.21524048]
[142.25163269 100.26010132]
[127.43387604 102.59120941]
[112.61611938 104.92230988]
[110.79685974 107.16398621]
[108.62306976 108.87248230]
[106.23453522 110.00382996]
[106.23453522 125.00382996]
[106.23453522 140.00382996]
[106.23453522 155.00382996]
[106.23453522 170.00382996]
[106.23453522 185.00382996]
[106.23453522 200.00382996]
[106.23453522 215.00382996]
[106.23453522 230.00382996]
[106.23453522 245.00382996]
[106.23453522 260.00384521]
[120.77442169 264.06515503]
[133.67880249 271.89965820]
[143.99008179 282.92599487]
[150.94311523 296.32592773]
[154.02191162 311.10507202]
[152.99801636 326.16674805]
[147.94741821 340.39328003]
[139.24488831 352.72894287]
[127.53623199 362.25836182]
[113.69029236 368.27438354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 91]
[23 90]
[24 89]
[25 88]
[92 127]
[93 126]
[94 125]
[95 118]
[96 117]
[97 116]
[98 114]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
