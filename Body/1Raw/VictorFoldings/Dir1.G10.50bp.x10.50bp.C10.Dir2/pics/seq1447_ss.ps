%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAACAAAGGGGGGGGGGACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGxxxxxxxxxxCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUCCCCCCCCCCAACCAACAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 410.57080078]
[71.19830322 404.55477905]
[59.48964310 395.02536011]
[50.78712082 382.68969727]
[45.73651886 368.46319580]
[44.71262741 353.40148926]
[47.79142761 338.62234497]
[54.74444962 325.22241211]
[65.05573273 314.19607544]
[77.96011353 306.36157227]
[92.50000000 302.30026245]
[92.50000000 287.30026245]
[92.50000000 272.30026245]
[92.50000000 257.30026245]
[92.50000000 242.30026245]
[92.50000000 227.30026245]
[92.50000000 212.30026245]
[92.50000000 197.30026245]
[92.50000000 182.30026245]
[92.50000000 167.30026245]
[92.50000000 152.30026245]
[73.79017639 145.87605286]
[58.75450516 133.02084351]
[49.50071335 115.53670502]
[34.68295670 117.86780548]
[19.86519623 120.19890594]
[5.04743910 122.53001404]
[-9.77031898 124.86111450]
[-18.01312256 134.83659363]
[-30.44844055 136.44338989]
[-40.30316925 129.35879517]
[-55.16621780 131.38111877]
[-67.79483032 141.84295654]
[-83.07312012 135.88427734]
[-85.28409576 119.63486481]
[-72.15328979 109.81071472]
[-57.18854904 116.51807404]
[-42.32550430 114.49574280]
[-29.08923721 103.01527405]
[-12.10142326 110.04335785]
[2.71633506 107.71225739]
[17.53409386 105.38114929]
[32.35185242 103.05004883]
[47.16960907 100.71894073]
[54.42761230 73.26567078]
[74.84947205 53.53476715]
[69.65405273 39.46324921]
[64.45864105 25.39172935]
[59.26322174 11.32020950]
[54.06780624 -2.75130987]
[39.25470734 -0.14135283]
[24.21363640 -0.21853209]
[9.42810154 -2.98036671]
[-4.62660408 -8.33807468]
[-17.49867821 -16.11942863]
[-28.77433968 -26.07428932]
[-38.09111786 -37.88265228]
[-45.14952469 -51.16492081]
[-49.72265244 -65.49413300]
[-51.66350174 -80.40966034]
[-50.90967560 -95.43202209]
[-47.48541260 -110.07833099]
[-41.50078201 -123.87774658]
[-33.14817429 -136.38668823]
[-22.69608116 -147.20304871]
[-10.48049927 -155.97911072]
[3.10589027 -162.43278503]
[17.62634277 -166.35658264]
[32.61408615 -167.62438965]
[47.58732605 -166.19544983]
[62.06473541 -162.11569214]
[75.58092499 -155.51626587]
[87.70140076 -146.60931396]
[98.03654480 -135.68115234]
[106.25412750 -123.08309174]
[112.08998108 -109.22010040]
[115.35650635 -94.53781128]
[115.94870758 -79.50820160]
[113.84754181 -64.61441803]
[109.12055206 -50.33522797]
[101.91968536 -37.12964630]
[92.47643280 -25.42218018]
[81.09435272 -15.58917618]
[68.13932800 -7.94672537]
[73.33473969 6.12479401]
[78.53015900 20.19631386]
[83.72557068 34.26783371]
[88.92098999 48.33935165]
[97.81252289 47.21001816]
[106.76701355 47.59986115]
[115.52675629 49.49765396]
[123.83968353 52.84878922]
[131.46655273 57.55682755]
[138.18789673 63.48628235]
[143.81027222 70.46651459]
[148.17190552 78.29665375]
[162.58412170 74.13876343]
[176.99633789 69.98088074]
[191.40855408 65.82299042]
[205.82075500 61.66510391]
[208.32102966 46.60816574]
[217.11367798 34.13209915]
[230.45291138 26.71404457]
[245.69021606 25.82685471]
[259.80023193 31.64668655]
[269.98138428 43.01800537]
[274.21218872 57.68302917]
[271.65264893 72.73000336]
[262.81094360 85.17134857]
[249.44261169 92.53681183]
[234.20191956 93.36399078]
[220.11494446 87.48863983]
[209.97865295 76.07731628]
[195.56643677 80.23520660]
[181.15422058 84.39309692]
[166.74200439 88.55097961]
[152.32978821 92.70886993]
[152.82679749 99.05346680]
[152.55738831 105.41178894]
[151.52546692 111.69160461]
[149.74598694 117.80178833]
[147.24478149 123.65370178]
[144.05813599 129.16244507]
[140.23226929 134.24807739]
[135.82272339 138.83683777]
[130.89343262 142.86213684]
[125.51593018 146.26557922]
[119.76824188 148.99778748]
[113.73374939 151.01911926]
[107.50000000 152.30026245]
[107.50000000 167.30026245]
[107.50000000 182.30026245]
[107.50000000 197.30026245]
[107.50000000 212.30026245]
[107.50000000 227.30026245]
[107.50000000 242.30026245]
[107.50000000 257.30026245]
[107.50000000 272.30026245]
[107.50000000 287.30026245]
[107.50000000 302.30026245]
[122.03988647 306.36157227]
[134.94427490 314.19607544]
[145.25555420 325.22241211]
[152.20857239 338.62234497]
[155.28736877 353.40148926]
[154.26348877 368.46319580]
[149.21287537 382.68969727]
[140.51036072 395.02536011]
[128.80169678 404.55477905]
[114.95575714 410.57080078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[31 38]
[32 37]
[46 88]
[47 87]
[48 86]
[49 85]
[50 84]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
