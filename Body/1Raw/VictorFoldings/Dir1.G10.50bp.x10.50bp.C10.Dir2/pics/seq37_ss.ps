%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAACCACGGGGGGGGGGUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGxxxxxxxxxxCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAACCCCCCCCCCUAUUAAACAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.57043457]
[71.19830322 365.55441284]
[59.48964310 356.02499390]
[50.78712082 343.68933105]
[45.73651886 329.46279907]
[44.71262741 314.40112305]
[47.79142761 299.62194824]
[54.74444962 286.22201538]
[65.05573273 275.19570923]
[77.96011353 267.36117554]
[92.50000000 263.29986572]
[92.50000000 248.29988098]
[92.50000000 233.29988098]
[92.50000000 218.29988098]
[92.50000000 203.29988098]
[92.50000000 188.29988098]
[92.50000000 173.29988098]
[92.50000000 158.29988098]
[92.50000000 143.29988098]
[92.50000000 128.29988098]
[92.50000000 113.29987335]
[80.32816315 104.53366852]
[66.10138702 109.28748322]
[59.62517548 120.49072266]
[47.62791443 124.13553619]
[36.73563385 118.78151703]
[22.41303635 123.23832703]
[8.09043789 127.69514465]
[-2.63039517 140.10464478]
[-18.68474960 136.75953674]
[-23.55728149 121.10098267]
[-12.23554707 109.23715210]
[3.63362241 113.37255096]
[17.95622063 108.91573334]
[32.27881622 104.45891571]
[43.43014145 90.94419098]
[61.34756851 95.06069946]
[75.57434845 90.30688477]
[83.68214417 88.14737701]
[91.02809906 89.17754364]
[96.60226440 92.81564331]
[102.37854004 78.97241974]
[108.15480804 65.12920380]
[109.71238708 50.21029282]
[106.92006683 35.47248840]
[104.12773895 20.73468208]
[101.33541870 5.99687529]
[98.54309082 -8.74093056]
[91.06333923 4.26111794]
[77.81032562 11.28661823]
[62.85123444 10.17953396]
[50.77682114 1.27961576]
[45.29256821 -12.68186569]
[48.08152390 -27.42030907]
[58.28779221 -38.41267395]
[72.77919769 -42.28554535]
[87.10852051 -37.85038757]
[96.87859344 -26.46756363]
[96.87859344 -41.46756363]
[96.87859344 -56.46756363]
[96.87859344 -71.46755981]
[96.87859344 -86.46755981]
[96.87859344 -101.46755981]
[96.87859344 -116.46755981]
[82.30147552 -120.36243439]
[69.22961426 -127.89826202]
[58.55426407 -138.56124878]
[51.00329208 -151.62437439]
[47.09154129 -166.19697571]
[47.08571625 -181.28546143]
[50.98621368 -195.86108398]
[58.52709198 -208.93003845]
[69.19420624 -219.60125732]
[82.26024628 -227.14718628]
[96.83435059 -231.05331421]
[111.92283630 -231.05331421]
[126.49694824 -227.14718628]
[139.56298828 -219.60125732]
[150.23010254 -208.93003845]
[157.77098083 -195.86108398]
[161.67147827 -181.28546143]
[161.66564941 -166.19697571]
[157.75389099 -151.62437439]
[150.20292664 -138.56124878]
[139.52757263 -127.89826202]
[126.45571136 -120.36243439]
[111.87859344 -116.46755981]
[111.87859344 -101.46755981]
[111.87859344 -86.46755981]
[111.87859344 -71.46755981]
[111.87859344 -56.46756363]
[111.87859344 -41.46756363]
[111.87859344 -26.46756363]
[113.28089905 -11.53325558]
[116.07321930 3.20455074]
[118.86554718 17.94235611]
[121.65787506 32.68016434]
[124.45019531 47.41796875]
[129.85949707 33.42728043]
[138.00956726 20.83456421]
[148.55751038 10.16962051]
[161.05953979 1.88113689]
[174.98971558 -3.68217778]
[189.76194763 -6.28626633]
[204.75474548 -5.82157087]
[219.33734131 -2.30764174]
[232.89624023 4.10768509]
[244.86097717 13.15450668]
[254.72819519 24.45220947]
[262.08276367 37.52548218]
[266.61523438 51.82431412]
[268.13494873 66.74713135]
[266.57797241 81.66610718]
[262.00982666 95.95357513]
[254.62263489 109.00844574]
[244.72724915 120.28147888]
[232.73995972 129.29840088]
[219.16510010 135.67985535]
[204.57376099 139.15737915]
[189.57984924 139.58464050]
[174.81417847 136.94367981]
[160.89793396 131.34559631]
[148.41662598 123.02593231]
[137.89535522 112.33468628]
[129.77674866 99.72166443]
[124.40238953 85.71751404]
[121.99802399 70.90547943]
[116.22175598 84.74869537]
[110.44548035 98.59191132]
[107.50000000 113.29987335]
[107.50000000 128.29988098]
[107.50000000 143.29988098]
[107.50000000 158.29988098]
[107.50000000 173.29988098]
[107.50000000 188.29988098]
[107.50000000 203.29988098]
[107.50000000 218.29988098]
[107.50000000 233.29988098]
[107.50000000 248.29988098]
[107.50000000 263.29986572]
[122.03988647 267.36117554]
[134.94427490 275.19570923]
[145.25555420 286.22201538]
[152.20857239 299.62194824]
[155.28736877 314.40112305]
[154.26348877 329.46279907]
[149.21287537 343.68933105]
[140.51036072 356.02499390]
[128.80169678 365.55441284]
[114.95575714 371.57043457]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 38]
[23 37]
[26 35]
[27 34]
[28 33]
[41 129]
[42 128]
[43 127]
[44 98]
[45 97]
[46 96]
[47 95]
[48 94]
[58 93]
[59 92]
[60 91]
[61 90]
[62 89]
[63 88]
[64 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
