%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCUUGGGGGGGGGGCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCxxxxxxxxxxCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCUAGAAUUAAUUCCCCCCCCCCCCCCUAAAAAUCUU\
) } def
/len { sequence length } bind def

/coor [
[89.04041290 373.45669556]
[77.82497406 363.39138794]
[69.23357391 351.01055908]
[63.72953415 336.98193359]
[61.60967255 322.06204224]
[62.98831940 307.05551147]
[67.79111481 292.77160645]
[75.75906372 279.98065186]
[86.46245575 269.37246704]
[99.32407379 261.51907349]
[113.65030670 256.84405518]
[112.40342712 241.89596558]
[111.15655518 226.94787598]
[109.90968323 211.99980164]
[108.66280365 197.05171204]
[107.41593170 182.10362244]
[106.16905975 167.15553284]
[104.92218018 152.20744324]
[103.67530823 137.25936890]
[102.42843628 122.31127167]
[89.04214478 115.54315948]
[76.26479340 123.40058899]
[68.94245911 138.07421875]
[52.55935669 138.79948425]
[43.96901703 124.83030701]
[52.00844574 110.53696442]
[68.40736389 110.62322998]
[81.18472290 102.76580048]
[88.63963318 89.74949646]
[88.95169067 74.75273895]
[89.26374817 59.75598526]
[89.57579803 44.75923157]
[80.31233978 56.55704498]
[66.68035889 62.81555176]
[51.69511032 62.15043259]
[38.67119980 54.70880127]
[30.48940086 42.13668442]
[28.95944786 27.21491432]
[34.41975021 13.24404907]
[45.66254425 3.31431556]
[60.20102310 -0.37792021]
[74.81941223 2.98403001]
[86.28425598 12.65653419]
[92.05995178 26.50208092]
[95.76611328 11.96714401]
[99.16909027 -2.64174843]
[102.26741028 -17.31827354]
[105.36573792 -31.99479866]
[100.64578247 -47.09554672]
[110.84510803 -57.95018005]
[100.85025024 -67.49491882]
[96.92409515 -80.63258362]
[99.99400330 -93.88498688]
[109.14978790 -103.79876709]
[121.90995026 -107.84528351]
[125.31292725 -122.45417786]
[128.71591187 -137.06306458]
[132.11888123 -151.67196655]
[130.54193115 -158.20040894]
[132.28205872 -163.69616699]
[135.97924805 -166.81166077]
[139.98698425 -181.26634216]
[143.99473572 -195.72103882]
[138.32289124 -207.35220337]
[142.00445557 -219.33824158]
[152.53123474 -225.37928772]
[140.97500610 -215.81614685]
[126.67059326 -211.30130005]
[111.71838379 -212.49768066]
[98.31387329 -219.22962952]
[88.42530823 -230.50865173]
[83.50468445 -244.67860413]
[84.27451324 -259.65884399]
[90.62175751 -273.24972534]
[101.61442566 -283.45568848]
[115.63840485 -288.77807617]
[130.63449097 -288.43545532]
[144.40074158 -282.47805786]
[154.91577148 -271.78067017]
[160.63563538 -257.91406250]
[160.72058105 -242.91494751]
[168.97286987 -255.44091797]
[177.22515869 -267.96685791]
[185.47744751 -280.49282837]
[193.72973633 -293.01879883]
[201.98202515 -305.54476929]
[198.55294800 -320.97256470]
[207.10771179 -334.26135254]
[222.57089233 -337.52709961]
[235.76849365 -328.83233643]
[238.87059021 -313.33547974]
[230.03677368 -300.23056030]
[214.50798035 -297.29248047]
[206.25569153 -284.76651001]
[198.00340271 -272.24053955]
[189.75111389 -259.71456909]
[181.49882507 -247.18861389]
[173.24653625 -234.66265869]
[166.89941406 -221.07170105]
[171.87565613 -204.27180481]
[158.44941711 -191.71330261]
[154.44168091 -177.25860596]
[150.43392944 -162.80392456]
[146.72776794 -148.26898193]
[143.32479858 -133.66009521]
[139.92181396 -119.05120087]
[136.51884460 -104.44230652]
[147.64627075 -92.41378021]
[149.45277405 -75.96073914]
[141.03344727 -61.51787186]
[125.52162933 -54.85186005]
[130.46319580 -40.80087280]
[120.04225922 -28.89647865]
[116.94393921 -14.21995258]
[113.84561920 0.45657337]
[115.69294739 4.92455912]
[114.70700836 10.60428047]
[110.30104828 15.67330551]
[106.59488678 30.20824242]
[104.57255554 45.07128906]
[104.26049805 60.06804276]
[103.94844055 75.06479645]
[103.63638306 90.06154633]
[111.34158325 90.54814148]
[118.67324829 96.80427551]
[121.67749786 108.05500793]
[117.37651825 121.06439972]
[118.62339783 136.01248169]
[119.87026978 150.96057129]
[121.11714172 165.90866089]
[122.36402130 180.85675049]
[123.61089325 195.80484009]
[124.85776520 210.75291443]
[126.10464478 225.70100403]
[127.35151672 240.64909363]
[128.59838867 255.59718323]
[143.50117493 257.83410645]
[157.48614502 263.44812012]
[169.79913330 272.13644409]
[179.77610779 283.43054199]
[186.87901306 296.72134399]
[190.72480774 311.29208374]
[191.10609436 326.35699463]
[188.00228882 341.10363770]
[181.58081055 354.73672485]
[172.18794250 366.52105713]
[160.33021545 375.82113647]
[146.64714050 382.13540649]
[131.87658691 385.12332153]
[116.81514740 384.62377930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[21 28]
[22 27]
[29 123]
[30 122]
[31 121]
[32 120]
[44 119]
[45 118]
[46 115]
[47 114]
[48 113]
[50 111]
[55 107]
[56 106]
[57 105]
[58 104]
[61 103]
[62 102]
[63 101]
[66 99]
[81 98]
[82 97]
[83 96]
[84 95]
[85 94]
[86 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
