%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCUGAACGGGGGGGGGGACACAAUAGCUAAGACCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCxxxxxxxxxxUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACAUCCCCCCCCCCAUAACUGAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.45709229]
[71.19830322 377.44107056]
[59.48964310 367.91165161]
[50.78712082 355.57598877]
[45.73651886 341.34945679]
[44.71262741 326.28778076]
[47.79142761 311.50863647]
[54.74444962 298.10870361]
[65.05573273 287.08236694]
[77.96011353 279.24786377]
[92.50000000 275.18655396]
[92.50000000 260.18655396]
[92.50000000 245.18653870]
[92.50000000 230.18653870]
[92.50000000 215.18653870]
[92.50000000 200.18653870]
[92.50000000 185.18653870]
[92.50000000 170.18653870]
[92.50000000 155.18653870]
[92.50000000 140.18653870]
[92.50000000 125.18654633]
[81.35059357 120.79991150]
[72.72381592 111.47871399]
[68.77924347 98.65085602]
[70.88379669 84.66712952]
[79.23246002 72.37132263]
[64.82024384 68.21343231]
[50.40802383 64.05554962]
[35.99580765 59.89765930]
[21.28784752 56.95217514]
[6.38594437 55.23948669]
[-8.51595783 53.52679825]
[-23.41786003 51.81410599]
[-34.02627563 59.22459793]
[-46.43883133 57.45048523]
[-54.04241562 47.99042130]
[-68.90546417 45.96808624]
[-83.76850891 43.94575119]
[-98.63155365 41.92341614]
[-115.14125824 45.77908325]
[-123.41658020 30.98194504]
[-111.48855591 18.93376732]
[-96.60922241 27.06036949]
[-81.74617767 29.08270454]
[-66.88312531 31.10503960]
[-52.02008057 33.12737274]
[-36.19762421 25.60076714]
[-21.70516968 36.91220474]
[-6.80326796 38.62489319]
[8.09863377 40.33758545]
[23.00053596 42.05027390]
[13.31423569 30.59708214]
[12.04987049 15.65046501]
[19.67459679 2.73289824]
[33.37123108 -3.38283396]
[48.07914352 -0.43709052]
[58.36404419 10.48173523]
[60.42587662 25.33935547]
[53.50283051 38.64617157]
[40.15369415 45.48544312]
[54.56591034 49.64332962]
[68.97812653 53.80121613]
[83.39034271 57.95910645]
[95.65270996 49.31998825]
[96.58834076 34.34919739]
[97.52397156 19.37840462]
[98.45959473 4.40761375]
[84.31567383 -0.92538613]
[72.37307739 -10.19176483]
[63.69373322 -22.56756401]
[59.04940414 -36.95233154]
[58.85305405 -52.06698990]
[63.12215042 -66.56755066]
[71.47708893 -79.16463470]
[83.17494202 -88.73811340]
[97.17556000 -94.43672180]
[112.23400879 -95.75375366]
[127.01129913 -92.57208252]
[140.19345093 -85.17462921]
[150.60832214 -74.21916962]
[157.32980347 -60.67985916]
[159.76025391 -45.76060104]
[157.68354797 -30.78800201]
[151.28434753 -17.09342003]
[141.13165283 -5.89456558]
[128.12825012 1.81276512]
[113.43038940 5.34324217]
[112.49475861 20.31403351]
[111.55913544 35.28482437]
[110.62350464 50.25561523]
[121.71482086 60.35426712]
[136.53257751 58.02316284]
[151.35034180 55.69205856]
[151.77912903 40.65441132]
[154.96400452 25.95165253]
[160.79649353 12.08454514]
[169.07795715 -0.47459754]
[179.52632141 -11.29801750]
[191.78570557 -20.01707268]
[205.43858337 -26.33479500]
[220.01992798 -30.03600502]
[235.03311157 -30.99464226]
[249.96679688 -29.17805481]
[264.31231689 -24.64811516]
[277.58111572 -17.55911064]
[289.32122803 -8.15249062]
[299.13278198 3.25135803]
[306.68164062 16.26402473]
[311.71066284 30.44230461]
[314.04855347 45.30328751]
[313.61572266 60.34081650]
[310.42687988 75.04271698]
[304.59063721 88.90825653]
[296.30578613 101.46516418]
[285.85452271 112.28576660]
[273.59277344 121.00151825]
[259.93820190 127.31555939]
[245.35585022 131.01283264]
[230.34242249 131.96742249]
[215.40922546 130.14682007]
[201.06492615 125.61300659]
[187.79804993 118.52043152]
[176.06047058 109.11064911]
[166.25198364 97.70415497]
[158.70663452 84.68945312]
[153.68144226 70.50981903]
[138.86367798 72.84091949]
[124.04592133 75.17202759]
[129.54962158 107.23098755]
[107.50000000 125.18654633]
[107.50000000 140.18653870]
[107.50000000 155.18653870]
[107.50000000 170.18653870]
[107.50000000 185.18653870]
[107.50000000 200.18653870]
[107.50000000 215.18653870]
[107.50000000 230.18653870]
[107.50000000 245.18653870]
[107.50000000 260.18655396]
[107.50000000 275.18655396]
[122.03988647 279.24786377]
[134.94427490 287.08236694]
[145.25555420 298.10870361]
[152.20857239 311.50863647]
[155.28736877 326.28778076]
[154.26348877 341.34945679]
[149.21287537 355.57598877]
[140.51036072 367.91165161]
[128.80169678 377.44107056]
[114.95575714 383.45709229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 63]
[27 62]
[28 61]
[29 60]
[30 51]
[31 50]
[32 49]
[33 48]
[36 46]
[37 45]
[38 44]
[39 43]
[64 90]
[65 89]
[66 88]
[67 87]
[91 128]
[92 127]
[93 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
