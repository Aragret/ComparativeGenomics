%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACAAUCAACGGGGGGGGGGCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAxxxxxxxxxxCUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAGUCACCCUAGCCAUCAUCCCCCCCCCCUCUACUAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[82.46022797 680.90716553]
[68.29962921 675.75219727]
[55.70988083 667.46997070]
[45.36994171 656.50720215]
[37.83743286 643.45507812]
[33.51856613 629.01745605]
[32.64625931 613.97302246]
[35.26754761 599.13299561]
[41.24107361 585.29779053]
[50.24469376 573.21343994]
[61.79285049 563.53167725]
[75.26276398 556.77459717]
[89.92802429 553.30657959]
[89.92802429 538.30657959]
[89.92802429 523.30657959]
[89.92802429 508.30661011]
[89.92802429 493.30661011]
[89.92802429 478.30661011]
[89.92802429 463.30661011]
[89.92802429 448.30661011]
[89.92802429 433.30661011]
[89.92802429 418.30661011]
[75.19821930 415.57293701]
[61.21784210 410.17767334]
[48.46356201 402.30319214]
[37.37051773 392.21640015]
[28.31748772 380.25976562]
[21.61396027 366.83959961]
[17.48954773 352.41229248]
[16.08612633 337.46881104]
[17.45294762 322.51791382]
[21.54492378 308.06896973]
[28.22410393 294.61437988]
[37.26433182 282.61309814]
[48.35889053 272.47470093]
[61.13092422 264.54556274]
[75.14623260 259.09695435]
[89.92802429 256.31579590]
[89.92802429 241.31579590]
[81.58123779 232.50958252]
[81.49332428 219.97494507]
[90.25929260 210.46112061]
[90.56329346 195.46420288]
[90.86729431 180.46728516]
[76.89794922 177.61885071]
[63.64456940 172.36486816]
[51.51791382 164.86816406]
[40.89380264 155.36106873]
[32.10150146 144.13824463]
[25.41349792 131.54750061]
[21.03706551 117.97903442]
[19.10783577 103.85336304]
[19.68560219 89.60827637]
[22.75245476 75.68524170]
[28.21335030 62.51576996]
[35.89904404 50.50800323]
[45.57133865 40.03408051]
[56.93048096 31.41861153]
[69.62442017 24.92860222]
[83.25975800 20.76519203]
[97.41390228 19.05741119]
[98.32541656 4.08513212]
[99.23693085 -10.88714695]
[99.99666595 -25.86789513]
[100.45263672 -40.86096191]
[100.75663757 -55.85788345]
[101.06064606 -70.85479736]
[101.36464691 -85.85172272]
[101.66865540 -100.84864044]
[87.44244385 -106.03455353]
[75.67248535 -115.56066132]
[67.63548279 -128.39364624]
[64.20324707 -143.14146423]
[65.74806976 -158.20440674]
[72.10238647 -171.94854736]
[82.57691956 -182.88302612]
[96.03547668 -189.82176208]
[111.01818085 -192.01206970]
[125.89980316 -189.21636963]
[139.06611633 -181.73793030]
[149.08891296 -170.38795471]
[154.88102722 -156.39758301]
[155.81414795 -141.28440857]
[151.78706360 -126.68779755]
[143.23660278 -114.19106293]
[131.09025574 -105.14976501]
[116.66557312 -100.54463196]
[116.36156464 -85.54771423]
[116.05756378 -70.55079651]
[115.75356293 -55.55387878]
[115.44955444 -40.55695724]
[118.47611237 -33.76581955]
[114.98434448 -25.26001167]
[117.87264252 -18.40892792]
[114.20921326 -9.97563362]
[113.29769897 4.99664545]
[112.38618469 19.96892548]
[127.61091614 23.86835098]
[141.79577637 30.63500023]
[154.40655518 40.01403046]
[164.96832275 51.65221405]
[173.08328247 65.11124420]
[178.44581604 79.88423157]
[180.85398865 95.41480255]
[180.21707153 111.11806488]
[176.55908203 126.40259552]
[170.01777649 140.69277954]
[160.83949280 153.45040894]
[149.36991882 164.19502258]
[136.04100037 172.52197266]
[121.35473633 178.11764526]
[105.86421967 180.77128601]
[105.56021118 195.76820374]
[105.25621033 210.76513672]
[114.51819611 226.64894104]
[104.92802429 241.31579590]
[104.92802429 256.31579590]
[119.70982361 259.09695435]
[133.72512817 264.54556274]
[146.49716187 272.47470093]
[157.59172058 282.61309814]
[166.63194275 294.61437988]
[173.31112671 308.06896973]
[177.40310669 322.51791382]
[178.76992798 337.46881104]
[177.36650085 352.41229248]
[173.24209595 366.83959961]
[166.53855896 380.25976562]
[157.48553467 392.21640015]
[146.39248657 402.30319214]
[133.63821411 410.17767334]
[119.65783691 415.57293701]
[104.92802429 418.30661011]
[104.92802429 433.30661011]
[104.92802429 448.30661011]
[104.92802429 463.30661011]
[104.92802429 478.30661011]
[104.92802429 493.30661011]
[104.92802429 508.30661011]
[104.92802429 523.30657959]
[104.92802429 538.30657959]
[104.92802429 553.30657959]
[119.59328461 556.77459717]
[133.06320190 563.53167725]
[144.61135864 573.21343994]
[153.61497498 585.29779053]
[159.58850098 599.13299561]
[162.20979309 613.97302246]
[161.33747864 629.01745605]
[157.01861572 643.45507812]
[149.48611450 656.50720215]
[139.14617920 667.46997070]
[126.55642700 675.75219727]
[112.39582062 680.90716553]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[38 117]
[39 116]
[42 114]
[43 113]
[44 112]
[61 97]
[62 96]
[63 95]
[64 93]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
