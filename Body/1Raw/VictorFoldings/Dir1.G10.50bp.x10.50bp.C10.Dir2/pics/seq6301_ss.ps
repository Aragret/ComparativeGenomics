%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCACAGCUGGGGGGGGGGCUAAGCCUCCUUAUUCGAGCCGAGCUGGGCCAGCCAGGCAACCUUCUAGGxxxxxxxxxxAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACACCCCCCCCCCAGGCACACCU\
) } def
/len { sequence length } bind def

/coor [
[83.01004028 346.68963623]
[69.78984833 339.41717529]
[58.90304184 328.97015381]
[51.09191132 316.06091309]
[46.88903046 301.56961060]
[46.58095551 286.48425293]
[50.18869781 271.83343506]
[57.46627045 258.61605835]
[67.91748047 247.73327637]
[80.82974243 239.92713928]
[95.32267761 235.72984314]
[95.01062012 220.73309326]
[94.69856262 205.73634338]
[94.38650513 190.73959351]
[94.07445526 175.74282837]
[93.76239777 160.74607849]
[93.45034027 145.74932861]
[93.13828278 130.75257874]
[92.82622528 115.75582123]
[86.76321411 102.03576660]
[75.88439178 91.70855713]
[57.90819550 87.85676575]
[53.52303696 70.89297485]
[42.43172073 60.79432297]
[31.34040451 50.69567490]
[20.24909019 40.59702682]
[9.15777397 30.49837685]
[-1.93354118 20.39972687]
[-14.19590950 11.76061058]
[-27.43849564 4.71547556]
[-40.68107986 -2.32965946]
[-52.44083405 8.37500477]
[-67.12599182 14.40634251]
[-82.96141052 15.05506992]
[-98.03966522 10.26136208]
[-110.55078125 0.61984897]
[-118.99951172 -12.69407463]
[-122.38403320 -28.06752586]
[-120.31470490 -43.64550781]
[-133.70098877 -50.41362381]
[-147.08726501 -57.18173981]
[-161.93838501 -52.48258209]
[-175.41757202 -59.53710556]
[-179.80596924 -73.72433472]
[-193.19226074 -80.49245453]
[-206.57853699 -87.26056671]
[-219.96482849 -94.02867889]
[-236.82812500 -95.77954865]
[-239.81390381 -112.46851349]
[-224.60369873 -119.95757294]
[-213.19671631 -107.41496277]
[-199.81042480 -100.64685059]
[-186.42414856 -93.87873840]
[-173.03785706 -87.11061859]
[-159.01087952 -91.98701477]
[-145.33886719 -85.31388092]
[-140.31915283 -70.56802368]
[-126.93286896 -63.79990768]
[-113.54658508 -57.03179169]
[-103.49559784 -67.04721832]
[-90.81939697 -73.47025299]
[-76.75650787 -75.65840912]
[-62.68559265 -73.38370514]
[-49.99024582 -66.85636139]
[-39.92298126 -56.70537949]
[-33.48164749 -43.91802597]
[-31.31053352 -29.74377823]
[-33.63594437 -15.57224560]
[-20.39336014 -8.52711010]
[-7.15077448 -1.48197532]
[-13.81126499 -14.92213345]
[-14.10099602 -29.91933632]
[-7.96458101 -43.60671616]
[3.42494249 -53.36780167]
[17.89035606 -57.33665848]
[32.66645050 -54.75460434]
[44.92863083 -46.11522293]
[52.33286285 -33.07001877]
[53.46374893 -18.11270905]
[48.10511398 -4.10253286]
[37.28131104 6.28232622]
[23.06141853 11.05669975]
[8.16510868 9.30841064]
[19.25642395 19.40706062]
[30.34773827 29.50571060]
[41.43905640 39.60435867]
[52.53036880 49.70301056]
[63.62168503 59.80165863]
[75.75629425 59.55955505]
[85.08429718 67.93853760]
[86.21159363 80.82973480]
[97.09041595 91.15694427]
[101.26964569 85.09172821]
[109.66166687 81.78922272]
[120.42212677 83.47918701]
[135.28517151 81.45684814]
[150.14822388 79.43451691]
[165.01126099 77.41217804]
[179.87431335 75.38984680]
[166.48689270 68.62399292]
[156.92132568 57.06977081]
[152.77337646 42.65469360]
[154.73500061 27.78351212]
[162.47897339 14.93707752]
[174.71342468 6.25846243]
[189.39735413 3.19545341]
[204.08117676 6.25902987]
[216.31527710 14.93811893]
[224.05876160 27.78485298]
[226.01982117 42.65610886]
[221.87130737 57.07102585]
[212.30529785 68.62487793]
[198.91897583 75.38984680]
[213.78202820 77.41217804]
[228.74676514 70.70481873]
[241.87757874 80.52896881]
[239.66659546 96.77838898]
[224.38830566 102.73706818]
[211.75968933 92.27523041]
[196.89665222 90.25289154]
[181.89665222 90.25289154]
[167.03359985 92.27523041]
[152.17054749 94.29756165]
[137.30751038 96.31990051]
[122.44445801 98.34223175]
[137.13999939 101.34904480]
[144.83181763 114.22677612]
[140.51211548 128.59132385]
[126.99324799 135.09057617]
[113.07674408 129.49316406]
[107.82298279 115.44376373]
[108.13504028 130.44052124]
[108.44709015 145.43727112]
[108.75914764 160.43402100]
[109.07120514 175.43077087]
[109.38326263 190.42753601]
[109.69532013 205.42428589]
[110.00737762 220.42103577]
[110.31942749 235.41778564]
[124.97442627 239.00856018]
[138.20022583 246.27081299]
[149.09509277 256.70941162]
[156.91619873 269.61260986]
[161.13026428 284.10067749]
[161.44999695 299.18579102]
[157.85356140 313.83938599]
[150.58619690 327.06240845]
[140.14340210 337.95324707]
[127.23716736 345.76934814]
[112.74747467 349.97781372]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 92]
[21 91]
[23 88]
[24 87]
[25 86]
[26 85]
[27 84]
[28 83]
[29 70]
[30 69]
[31 68]
[39 59]
[40 58]
[41 57]
[44 54]
[45 53]
[46 52]
[47 51]
[95 125]
[96 124]
[97 123]
[98 122]
[99 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
