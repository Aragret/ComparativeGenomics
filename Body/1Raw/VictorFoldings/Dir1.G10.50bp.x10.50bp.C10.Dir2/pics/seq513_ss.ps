%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCCCCAGGGGGGGGGGACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCUCAUCAAUxxxxxxxxxxACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGAACCCCCCCCCCUCACCUCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 366.95144653]
[71.19830322 360.93542480]
[59.48964310 351.40600586]
[50.78712082 339.07034302]
[45.73651886 324.84381104]
[44.71262741 309.78213501]
[47.79142761 295.00296021]
[54.74444962 281.60302734]
[65.05573273 270.57669067]
[77.96011353 262.74218750]
[92.50000000 258.68087769]
[92.50000000 243.68087769]
[92.50000000 228.68087769]
[92.50000000 213.68087769]
[92.50000000 198.68087769]
[92.50000000 183.68087769]
[92.50000000 168.68087769]
[92.50000000 153.68087769]
[92.50000000 138.68087769]
[92.50000000 123.68088531]
[82.55592346 119.79969788]
[74.64297485 111.72288513]
[70.52103424 100.51679993]
[56.86478806 106.72220612]
[43.20854950 112.92761230]
[34.11621475 126.57537842]
[17.77029419 125.25518799]
[10.98606777 110.32514191]
[20.74256706 97.14398956]
[37.00313950 99.27136993]
[50.65938187 93.06596375]
[64.31562042 86.86055756]
[72.17304993 74.08319855]
[71.54907227 59.09618378]
[70.92509460 44.10916901]
[69.98946381 29.13837814]
[68.74259186 14.19029045]
[67.49571991 -0.75779635]
[66.24884033 -15.70588303]
[51.23895645 -15.80358601]
[36.29825211 -17.24638367]
[21.54703331 -20.02266121]
[7.10406256 -24.11006355]
[-6.91436768 -29.47568130]
[-20.39538765 -36.07631302]
[-33.23045349 -43.85881424]
[-45.31622696 -52.76052094]
[-56.55538940 -62.70976257]
[-66.85746002 -73.62642670]
[-76.13948059 -85.42263031]
[-84.32672119 -98.00337982]
[-91.35325623 -111.26739502]
[-97.16252136 -125.10786438]
[-101.70774078 -139.41336060]
[-104.95230865 -154.06871033]
[-106.87010956 -168.95588684]
[-107.44569397 -183.95506287]
[-106.67443848 -198.94543457]
[-104.56254578 -213.80632019]
[-101.12702942 -228.41807556]
[-96.39553833 -242.66305542]
[-90.40616608 -256.42654419]
[-83.20715332 -269.59774780]
[-74.85645294 -282.07058716]
[-65.42129517 -293.74468994]
[-54.97766113 -304.52600098]
[-43.60963058 -314.32772827]
[-31.40873718 -323.07098389]
[-18.47321320 -330.68533325]
[-4.90721369 -337.10949707]
[9.18003654 -342.29174805]
[23.67511177 -346.19033813]
[38.46130371 -348.77389526]
[53.41955948 -350.02163696]
[68.42944336 -349.92346191]
[83.37010193 -348.48019409]
[98.12123871 -345.70349121]
[112.56407928 -341.61563110]
[126.58235168 -336.24960327]
[140.06317139 -329.64855957]
[152.89799500 -321.86566162]
[164.98348999 -312.96359253]
[176.22235107 -303.01400757]
[186.52409363 -292.09701538]
[195.80575562 -280.30053711]
[203.99261475 -267.71951294]
[211.01873779 -254.45530701]
[216.82759094 -240.61465454]
[221.37236023 -226.30902100]
[224.61648560 -211.65357971]
[226.53382874 -196.76632690]
[227.10896301 -181.76715088]
[226.33724976 -166.77679443]
[224.22489929 -151.91596985]
[220.78894043 -137.30432129]
[216.05700684 -123.05948639]
[210.06721497 -109.29617310]
[202.86779785 -96.12519836]
[194.51672363 -83.65260315]
[185.08120728 -71.97881317]
[174.63725281 -61.19781876]
[163.26892090 -51.39642334]
[151.06774902 -42.65354919]
[138.13200378 -35.03958130]
[124.56580353 -28.61583328]
[110.47839355 -23.43402100]
[95.98320007 -19.53586769]
[81.19692993 -16.95275879]
[82.44380188 -2.00467086]
[83.69068146 12.94341564]
[84.93755341 27.89150238]
[87.99015045 31.64079094]
[88.67680359 37.36441040]
[85.91210938 43.48519135]
[86.53608704 58.47220612]
[87.16006470 73.45922089]
[102.54296112 71.79172516]
[116.01107025 78.05892181]
[123.94953156 89.87714386]
[124.59506989 103.48093414]
[138.11926270 109.96910095]
[153.67013550 106.02581024]
[166.36131287 115.83975983]
[166.45719910 131.88252258]
[153.88424683 141.84747314]
[138.28733826 138.09034729]
[131.63108826 123.49329376]
[118.10690308 117.00512695]
[114.96858978 119.82360840]
[111.39864349 122.07045746]
[107.50000000 123.68088531]
[107.50000000 138.68087769]
[107.50000000 153.68087769]
[107.50000000 168.68087769]
[107.50000000 183.68087769]
[107.50000000 198.68087769]
[107.50000000 213.68087769]
[107.50000000 228.68087769]
[107.50000000 243.68087769]
[107.50000000 258.68087769]
[122.03988647 262.74218750]
[134.94427490 270.57669067]
[145.25555420 281.60302734]
[152.20857239 295.00296021]
[155.28736877 309.78213501]
[154.26348877 324.84381104]
[149.21287537 339.07034302]
[140.51036072 351.40600586]
[128.80169678 360.93542480]
[114.95575714 366.95144653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 32]
[24 31]
[25 30]
[33 116]
[34 115]
[35 114]
[36 111]
[37 110]
[38 109]
[39 108]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
