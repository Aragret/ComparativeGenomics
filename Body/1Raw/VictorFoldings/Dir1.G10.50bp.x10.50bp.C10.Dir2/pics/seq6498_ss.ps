%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUGGGGGGGGGGGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxCCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAACCCCCCCCCCUCCUAAUCCU\
) } def
/len { sequence length } bind def

/coor [
[86.81880188 362.48126221]
[72.97286224 356.46524048]
[61.26419830 346.93582153]
[52.56167603 334.60015869]
[47.51107407 320.37362671]
[46.48718262 305.31195068]
[49.56597900 290.53277588]
[56.51900101 277.13284302]
[66.83028412 266.10653687]
[79.73466492 258.27200317]
[94.27455139 254.21070862]
[94.27455139 239.21070862]
[94.27455139 224.21070862]
[94.27455139 209.21070862]
[94.27455139 194.21070862]
[94.27455139 179.21070862]
[94.27455139 164.21070862]
[94.27455139 149.21070862]
[94.27455139 134.21070862]
[94.27455139 119.21070099]
[83.18323517 109.11205292]
[68.24893188 110.51435852]
[53.31462479 111.91666412]
[38.38031769 113.31896210]
[23.47841263 115.03165436]
[8.61536694 117.05398560]
[-4.01564693 126.58121490]
[-17.66987610 120.63047791]
[-32.53292465 122.65281677]
[-47.39596939 124.67514801]
[-62.25901794 126.69747925]
[-77.12206268 128.71981812]
[-89.75067902 139.18165588]
[-105.02896881 133.22297668]
[-107.23994446 116.97355652]
[-94.10913849 107.14940643]
[-79.14440155 113.85677338]
[-64.28134918 111.83443451]
[-49.41830444 109.81210327]
[-34.55525970 107.78976440]
[-19.69221115 105.76743317]
[-8.12430286 96.38485718]
[6.59303188 102.19094086]
[21.45607948 100.16860962]
[25.04159355 96.92520905]
[30.72177124 95.94191742]
[36.97801208 98.38465881]
[51.91231918 96.98235321]
[66.84662628 95.58004761]
[81.78093719 94.17774200]
[67.43856812 89.78497314]
[58.04260635 78.09240723]
[56.84004211 63.14069366]
[64.24644470 50.09672165]
[77.70236206 43.46812820]
[92.55780792 45.54557800]
[103.67913818 55.61115646]
[107.22314453 70.18647766]
[101.96488190 84.23500061]
[112.17835999 73.24933624]
[122.39184570 62.26366806]
[132.60531616 51.27800369]
[129.77235413 36.13599396]
[136.32212830 22.38994789]
[149.55366516 15.22123146]
[164.29284668 17.19476891]
[174.50631714 6.20910311]
[184.71980286 -4.77656126]
[175.66230774 -17.26137924]
[169.20263672 -31.26274490]
[165.58488464 -46.24722672]
[164.94494629 -61.64432144]
[167.30535889 -76.86817169]
[172.57456970 -91.33985901]
[180.55039978 -104.50943756]
[190.92788696 -115.87680054]
[203.31086731 -125.01068115]
[217.22718811 -131.56504822]
[232.14663696 -135.29216003]
[247.50115967 -136.05195618]
[262.70651245 -133.81735229]
[277.18447876 -128.67510986]
[290.38482666 -120.82258606]
[300.36755371 -132.01835632]
[310.35028076 -143.21412659]
[308.03799438 -156.52243042]
[313.74844360 -168.54818726]
[325.18334961 -174.97601318]
[338.03723145 -173.64382935]
[348.25070190 -184.62948608]
[358.46417236 -195.61515808]
[361.59979248 -211.71173096]
[377.19351196 -216.78791809]
[389.20388794 -205.62176514]
[385.27566528 -189.70005798]
[369.44985962 -185.40167236]
[359.23635864 -174.41600037]
[349.02288818 -163.43034363]
[350.36950684 -146.69581604]
[338.99597168 -133.89242554]
[321.54605103 -133.23139954]
[311.56332397 -122.03562927]
[301.58059692 -110.83986664]
[310.48785400 -99.26419830]
[317.10589600 -86.23893738]
[321.20565796 -72.21151733]
[322.64465332 -57.66411972]
[321.37185669 -43.09709549]
[317.42950439 -29.01174545]
[310.95178223 -15.89308834]
[302.16018677 -4.19314146]
[291.35595703 5.68464422]
[278.90979004 13.39930153]
[265.24908447 18.68411255]
[250.84330750 21.35582924]
[236.18775940 21.32103539]
[221.78669739 18.57939911]
[208.13586426 13.22374725]
[195.70545959 5.43691826]
[185.49198914 16.42258263]
[175.27850342 27.40824699]
[178.31915283 41.96477509]
[172.13208008 55.68279648]
[158.89898682 63.21530151]
[143.59098816 61.49148178]
[133.37750244 72.47714996]
[123.16402435 83.46281433]
[112.95054626 94.44847870]
[116.41565704 101.70825195]
[115.48080444 110.87416077]
[109.27455139 119.21070099]
[109.27455139 134.21070862]
[109.27455139 149.21070862]
[109.27455139 164.21070862]
[109.27455139 179.21070862]
[109.27455139 194.21070862]
[109.27455139 209.21070862]
[109.27455139 224.21070862]
[109.27455139 239.21070862]
[109.27455139 254.21070862]
[123.81443787 258.27200317]
[136.71882629 266.10653687]
[147.03010559 277.13284302]
[153.98312378 290.53277588]
[157.06192017 305.31195068]
[156.03804016 320.37362671]
[150.98742676 334.60015869]
[142.28491211 346.93582153]
[130.57624817 356.46524048]
[116.73030853 362.48126221]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 50]
[22 49]
[23 48]
[24 47]
[25 44]
[26 43]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[59 128]
[60 127]
[61 126]
[62 125]
[66 121]
[67 120]
[68 119]
[83 103]
[84 102]
[85 101]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
