%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACACCAGGGGGGGGGGGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACAGUxxxxxxxxxxAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAAGCUAUACCCCCCCCCCCUAACCCCAG\
) } def
/len { sequence length } bind def

/coor [
[52.84229279 356.39898682]
[39.96902084 348.49609375]
[29.84472466 337.28558350]
[23.29014206 323.67623901]
[20.83662033 308.77133179]
[22.68305779 293.77908325]
[28.67976952 279.91488647]
[38.34063339 268.30261230]
[50.88248062 259.88366699]
[65.28860474 255.34051514]
[64.97654724 240.34375000]
[64.66448975 225.34700012]
[64.35243225 210.35025024]
[64.04037476 195.35350037]
[63.72832108 180.35673523]
[63.41626358 165.35998535]
[63.10420609 150.36323547]
[62.79215240 135.36648560]
[62.48009491 120.36972809]
[51.28432846 110.38700104]
[36.35002136 111.78930664]
[21.41571426 113.19160461]
[8.39931583 122.18515778]
[-4.99555349 115.67157745]
[-19.92986107 117.07388306]
[-25.62201691 120.63854980]
[-31.38595390 120.72983551]
[-35.51256943 118.21059418]
[-50.49228287 118.99044037]
[-65.47200012 119.77028656]
[-80.45171356 120.55013275]
[-87.35767365 134.26885986]
[-100.20656586 142.68321228]
[-115.54211426 143.52978516]
[-129.23912048 136.58085632]
[-137.61315918 123.70565033]
[-138.41166687 108.36753082]
[-131.41983032 94.69237518]
[-118.51844025 86.35872650]
[-103.17789459 85.60830688]
[-89.52471924 92.64296722]
[-81.23155975 105.57041931]
[-66.25183868 104.79057312]
[-51.27212906 104.01072693]
[-36.29241180 103.23088074]
[-21.33216476 102.13957214]
[-6.39785719 100.73726654]
[5.55033970 91.84402466]
[20.01341057 98.25730133]
[34.94771957 96.85499573]
[49.88202667 95.45269012]
[59.74774933 84.15368652]
[59.12377167 69.16667175]
[58.49979401 54.17965698]
[57.56416702 39.20886612]
[56.31729126 24.26077843]
[52.46379471 15.90599442]
[55.20327759 8.98928356]
[54.26764679 -5.98150826]
[53.33201981 -20.95229912]
[52.39638901 -35.92309189]
[37.54336929 -38.46956253]
[23.67820930 -44.37329483]
[11.54863739 -53.31589890]
[1.80878663 -64.81511688]
[-5.01608419 -78.25080872]
[-8.55791855 -92.89840698]
[-8.62571049 -107.96798706]
[-5.21580315 -122.64685822]
[1.48791122 -136.14340210]
[11.12390900 -147.72979736]
[23.17253494 -156.78115845]
[36.98402023 -162.80940247]
[51.81352615 -165.48939514]
[66.86132050 -164.67663574]
[81.31589508 -160.41494751]
[94.39772797 -152.93414307]
[105.40133667 -142.63768005]
[113.73331451 -130.08081055]
[118.94431305 -115.94071960]
[120.75332642 -100.97996521]
[119.06278992 -86.00535583]
[113.96387482 -71.82446289]
[105.73155212 -59.20204163]
[94.80978394 -48.81879807]
[81.78756714 -41.23469162]
[67.36717987 -36.85871887]
[68.30281067 -21.88792801]
[69.23844147 -6.91713667]
[70.17406464 8.05365467]
[71.26538086 23.01390266]
[72.51225281 37.96199036]
[75.56484985 41.71127701]
[76.25150299 47.43489838]
[73.48680878 53.55567932]
[74.11078644 68.54269409]
[74.73476410 83.52970886]
[93.48111725 72.67324066]
[113.03939819 77.47436523]
[122.98035431 93.21374512]
[137.97305298 93.68178558]
[152.96574402 94.14983368]
[167.95843506 94.61787415]
[181.75904846 80.09926605]
[201.48658752 80.30239868]
[214.57740784 94.65512848]
[229.57009888 94.18708801]
[244.56280518 93.71904755]
[259.55548096 93.25100708]
[274.54818726 92.78295898]
[288.19488525 83.68901825]
[302.77185059 91.20195770]
[303.28353882 107.59312439]
[289.20358276 116.00067902]
[275.01623535 107.77565765]
[260.02352905 108.24369812]
[245.03083801 108.71173859]
[230.03814697 109.17978668]
[215.04545593 109.64782715]
[210.23300171 118.84020233]
[201.95394897 125.22821045]
[191.68341064 127.58799744]
[181.28756714 125.42123413]
[172.68449402 119.05842590]
[167.49040222 109.61057281]
[152.49769592 109.14252472]
[137.50500488 108.67448425]
[122.51230621 108.20644379]
[113.22682953 122.41609192]
[95.66074371 127.75641632]
[77.47685242 120.05767059]
[77.78890228 135.05442810]
[78.10095978 150.05117798]
[78.41301727 165.04792786]
[78.72507477 180.04469299]
[79.03713226 195.04144287]
[79.34918976 210.03819275]
[79.66123962 225.03494263]
[79.97329712 240.03170776]
[80.28535461 255.02845764]
[94.86799622 258.96841431]
[107.74920654 266.85836792]
[117.88475037 278.05868530]
[124.45300293 291.66143799]
[126.92150116 306.56387329]
[125.09012604 321.55798340]
[119.10734558 335.42819214]
[109.45815277 347.05014038]
[96.92476654 355.48168945]
[82.52321625 360.03933716]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 51]
[21 50]
[22 49]
[24 47]
[25 46]
[28 45]
[29 44]
[30 43]
[31 42]
[52 97]
[53 96]
[54 95]
[55 92]
[56 91]
[58 90]
[59 89]
[60 88]
[61 87]
[100 128]
[101 127]
[102 126]
[103 125]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
