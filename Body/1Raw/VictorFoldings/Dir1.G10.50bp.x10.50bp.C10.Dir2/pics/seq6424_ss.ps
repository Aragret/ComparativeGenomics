%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAAUAAGGGGGGGGGGUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGAxxxxxxxxxxACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCCCCCCCCCCCUAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.14231873 460.63110352]
[71.92211914 453.35861206]
[61.03531647 442.91162109]
[53.22418594 430.00238037]
[49.02130508 415.51104736]
[48.71323395 400.42572021]
[52.32097244 385.77490234]
[59.59854507 372.55749512]
[70.04975128 361.67474365]
[82.96201324 353.86859131]
[97.45495605 349.67129517]
[97.14289856 334.67456055]
[96.83084106 319.67779541]
[96.51878357 304.68103027]
[96.20672607 289.68429565]
[95.89466858 274.68753052]
[95.58261871 259.69079590]
[95.27056122 244.69403076]
[94.95850372 229.69728088]
[94.64644623 214.70051575]
[94.33438873 199.70376587]
[94.02233124 184.70701599]
[93.71028137 169.71026611]
[93.39822388 154.71350098]
[85.39781952 142.14994812]
[92.84635162 128.19180298]
[84.19741821 140.44725037]
[70.08824158 145.53950500]
[55.60599136 141.63252258]
[45.97236252 130.13499451]
[44.66083527 115.19243622]
[52.14428711 102.19251251]
[65.72450256 95.82244873]
[80.50318146 98.37806702]
[66.72080231 92.45809937]
[52.93841934 86.53813934]
[39.15604019 80.61817932]
[24.62695122 86.23451996]
[10.73398876 80.03450012]
[5.46919870 66.14862823]
[-8.31318283 60.22866440]
[-22.09556389 54.30870056]
[-35.87794495 48.38873672]
[-49.14336777 56.43909454]
[-64.60437775 55.12120438]
[-76.31589508 44.94181824]
[-79.77462006 29.81512451]
[-73.65058136 15.55764198]
[-60.29861069 7.65166330]
[-44.85280991 9.13719940]
[-33.25240326 19.44303131]
[-29.95798302 34.60635757]
[-16.17560196 40.52631760]
[-2.39321971 46.44628143]
[11.38916206 52.36624527]
[25.08466721 46.62440872]
[39.14629364 52.43175888]
[45.07600403 66.83579254]
[58.85838318 72.75576019]
[72.64076233 78.67572021]
[86.42314911 84.59568787]
[100.26636505 78.81941223]
[105.75339508 64.85902405]
[111.24042511 50.89863205]
[116.72746277 36.93824387]
[104.71896362 45.92690659]
[90.54893494 50.84729004]
[75.55395508 51.23529053]
[61.14842224 47.05429840]
[48.69113922 38.69868851]
[39.35714340 26.95660782]
[34.02685547 12.93562222]
[33.20306015 -2.04173899]
[36.96345520 -16.56273842]
[44.95334625 -29.25768280]
[56.41909027 -38.92912292]
[70.27917480 -44.66480255]
[85.22624969 -45.92370605]
[99.85044098 -42.58708191]
[112.77232361 -34.96966171]
[122.77302551 -23.78995514]
[128.90925598 -10.10248756]
[130.60218811 4.80167103]
[127.69210052 19.51686478]
[137.90557861 8.53119946]
[148.11906433 -2.45446491]
[158.33253479 -13.44012928]
[152.72242737 -27.63482666]
[153.83531189 -42.85731888]
[161.45021057 -56.08516693]
[174.05519104 -64.69197845]
[189.14753723 -66.96885681]
[203.73062134 -62.46372604]
[214.90899658 -52.07109070]
[220.46316528 -37.85441208]
[219.29034424 -22.63641930]
[211.62341309 -9.43866062]
[198.98463440 -0.88155717]
[183.88343811 1.33587027]
[169.31820679 -3.22664976]
[159.10472107 7.75901508]
[148.89125061 18.74468040]
[138.67776489 29.73034477]
[130.68785095 42.42527390]
[125.20082092 56.38566208]
[119.71378326 70.34605408]
[114.22675323 84.30644226]
[122.86586761 96.56880951]
[137.85856628 96.10076904]
[152.85125732 95.63272858]
[166.49795532 86.53878021]
[181.07490540 94.05172729]
[181.58660889 110.44288635]
[167.50665283 118.85044861]
[153.31930542 110.62542725]
[138.32661438 111.09346771]
[123.33391571 111.56150818]
[138.21646118 113.43490601]
[148.00083923 124.80442810]
[147.63533020 139.79997253]
[137.30865479 150.67930603]
[122.35250854 151.82540894]
[110.48876953 142.64653015]
[107.84310150 127.87974548]
[115.86582947 141.51596069]
[108.39497375 154.40144348]
[108.70703125 169.39820862]
[109.01908875 184.39495850]
[109.33114624 199.39170837]
[109.64320374 214.38845825]
[109.95525360 229.38522339]
[110.26731110 244.38197327]
[110.57936859 259.37872314]
[110.89142609 274.37548828]
[111.20348358 289.37222290]
[111.51554108 304.36898804]
[111.82759094 319.36575317]
[112.13964844 334.36248779]
[112.45170593 349.35925293]
[127.10669708 352.95001221]
[140.33250427 360.21228027]
[151.22737122 370.65087891]
[159.04847717 383.55407715]
[163.26254272 398.04214478]
[163.58226013 413.12722778]
[159.98583984 427.78085327]
[152.71847534 441.00384521]
[142.27568054 451.89468384]
[129.36944580 459.71081543]
[114.87975311 463.91928101]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[26 124]
[34 61]
[35 60]
[36 59]
[37 58]
[40 55]
[41 54]
[42 53]
[43 52]
[62 107]
[63 106]
[64 105]
[65 104]
[84 103]
[85 102]
[86 101]
[87 100]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
