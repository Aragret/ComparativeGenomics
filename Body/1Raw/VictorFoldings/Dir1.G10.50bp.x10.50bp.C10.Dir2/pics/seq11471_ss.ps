%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCCCAGGGGGGGGGGUCCAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUxxxxxxxxxxAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCCCUCCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 426.72073364]
[71.19830322 420.70471191]
[59.48964310 411.17529297]
[50.78712082 398.83963013]
[45.73651886 384.61309814]
[44.71262741 369.55142212]
[47.79142761 354.77224731]
[54.74444962 341.37234497]
[65.05573273 330.34600830]
[77.96011353 322.51150513]
[92.50000000 318.45016479]
[92.50000000 303.45016479]
[92.50000000 288.45016479]
[92.50000000 273.45016479]
[92.50000000 258.45016479]
[92.50000000 243.45018005]
[92.50000000 228.45018005]
[92.50000000 213.45018005]
[92.50000000 198.45018005]
[92.50000000 183.45018005]
[92.50000000 168.45018005]
[77.02903748 164.91542053]
[62.77813339 157.93280029]
[50.50419617 147.87318420]
[40.85913849 135.27088928]
[34.35523605 120.79523468]
[19.64727402 123.74071503]
[4.93931293 126.68619537]
[-9.76864815 129.63168335]
[-17.11307335 143.43724060]
[-31.63254738 149.24403381]
[-46.47141647 144.31028748]
[-54.62322617 130.96554565]
[-52.23893356 115.51079559]
[-40.44433212 105.24330139]
[-24.80847359 105.01105499]
[-12.71413136 114.92372131]
[1.99383056 111.97824097]
[16.70179176 109.03275299]
[31.40975380 106.08727264]
[31.82998466 90.27755737]
[35.84618759 74.98070526]
[43.24650955 61.00361633]
[53.64057922 49.08359146]
[66.48011017 39.84940720]
[81.08781433 33.78817368]
[96.69313812 31.21961403]
[112.47290039 32.27922440]
[116.78048706 17.91103935]
[121.08807373 3.54285598]
[125.39566040 -10.82532787]
[113.08223724 -2.25913405]
[98.08316803 -2.09181547]
[85.58171844 -10.38119221]
[79.89804840 -24.26268578]
[82.99626923 -38.93923187]
[93.80572510 -49.33902359]
[108.59096527 -51.86817551]
[122.24262238 -45.65268707]
[130.04313660 -32.84011459]
[131.91075134 -47.72339630]
[133.62344360 -62.62529755]
[135.18103027 -77.54421234]
[136.73860168 -92.46311951]
[138.29618835 -107.38203430]
[139.85375977 -122.30094910]
[125.71124268 -127.53924561]
[113.31620789 -136.13075256]
[103.44783020 -147.53540039]
[96.72644043 -161.03627014]
[93.57455444 -175.78471375]
[94.19030762 -190.85360718]
[98.53498077 -205.29571533]
[106.33547211 -218.20320129]
[117.10143280 -228.76469421]
[130.15609741 -236.31626892]
[144.67886353 -240.38323975]
[159.75680542 -240.70994568]
[174.44209290 -237.27586365]
[187.81161499 -230.29684448]
[199.02496338 -220.21162415]
[207.37722778 -207.65412903]
[212.34339905 -193.41377258]
[213.61129761 -178.38568115]
[211.10121155 -163.51455688]
[204.97093201 -149.73521423]
[195.60581970 -137.91381836]
[183.59457397 -128.79347229]
[169.69221497 -122.94749451]
[154.77267456 -120.74337006]
[153.21510315 -105.82445526]
[151.65751648 -90.90554047]
[150.09992981 -75.98663330]
[148.54235840 -61.06771851]
[150.99174500 -54.04303741]
[146.79403687 -45.85578156]
[144.92642212 -30.97250366]
[145.38873291 -31.24205017]
[145.85832214 -31.50196648]
[160.18090820 -35.95878220]
[162.88307190 -51.02387238]
[172.28596497 -63.10046768]
[186.22888184 -69.41345978]
[201.50782776 -68.51216125]
[214.61181641 -60.60369110]
[222.52966309 -47.50535202]
[223.44187927 -32.22705460]
[217.13887024 -18.27963257]
[205.06900024 -8.86810398]
[190.00584412 -6.15516806]
[175.41081238 -10.76423931]
[164.63772583 -21.63618469]
[150.31512451 -17.17936897]
[139.76383972 -6.51774359]
[135.45625305 7.85044050]
[131.14866638 22.21862411]
[126.84108734 36.58680725]
[139.04428101 43.27944565]
[149.65240479 52.28925705]
[158.23211670 63.24816895]
[164.43290710 75.70848083]
[168.00144958 89.16117096]
[168.79196167 103.05664825]
[166.77215576 116.82724762]
[162.02453613 129.91041565]
[154.74307251 141.77168274]
[145.22521973 151.92645264]
[133.85978699 159.95991516]
[121.11111450 165.54385376]
[107.50000000 168.45018005]
[107.50000000 183.45018005]
[107.50000000 198.45018005]
[107.50000000 213.45018005]
[107.50000000 228.45018005]
[107.50000000 243.45018005]
[107.50000000 258.45016479]
[107.50000000 273.45016479]
[107.50000000 288.45016479]
[107.50000000 303.45016479]
[107.50000000 318.45016479]
[122.03988647 322.51150513]
[134.94427490 330.34600830]
[145.25555420 341.37234497]
[152.20857239 354.77224731]
[155.28736877 369.55142212]
[154.26348877 384.61309814]
[149.21287537 398.83963013]
[140.51036072 411.17529297]
[128.80169678 420.70471191]
[114.95575714 426.72073364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 40]
[27 39]
[28 38]
[29 37]
[48 117]
[49 116]
[50 115]
[51 114]
[60 97]
[61 96]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
