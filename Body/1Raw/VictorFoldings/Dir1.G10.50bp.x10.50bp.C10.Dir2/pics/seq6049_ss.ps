%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUGAACGGGGGGGGGGGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUxxxxxxxxxxUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACCCCCCCCCCCAACUCAACG\
) } def
/len { sequence length } bind def

/coor [
[109.91793060 623.15032959]
[97.04466248 615.24743652]
[86.92036438 604.03692627]
[80.36578369 590.42761230]
[77.91226196 575.52264404]
[79.75869751 560.53039551]
[85.75540924 546.66619873]
[95.41627502 535.05395508]
[107.95812225 526.63500977]
[122.36424255 522.09185791]
[122.05218506 507.09509277]
[121.74012756 492.09835815]
[121.42807007 477.10159302]
[121.11602020 462.10482788]
[120.80396271 447.10809326]
[120.49190521 432.11132812]
[120.17984772 417.11456299]
[119.86779022 402.11782837]
[119.55573273 387.12106323]
[104.91687012 380.78829956]
[94.45544434 368.67163086]
[90.29528046 353.15356445]
[93.31455231 337.31466675]
[102.96096802 324.32205200]
[117.35202789 316.79598999]
[116.72805023 301.80895996]
[116.10407257 286.82196045]
[101.06555176 282.26138306]
[88.46947479 272.82015991]
[79.84345245 259.62042236]
[76.24143219 244.24145508]
[78.11494446 228.53083801]
[85.25656891 214.38240051]
[96.82275391 203.50791931]
[111.43339539 197.23010254]
[110.49776459 182.25932312]
[109.56213379 167.28852844]
[108.62651062 152.31773376]
[107.69087982 137.34693909]
[106.75524902 122.37615204]
[82.29890442 109.85842133]
[88.65220642 87.14268494]
[84.64447021 72.68799591]
[80.63672638 58.23330307]
[73.31761932 45.14015198]
[63.10414124 34.15448761]
[52.89066315 23.16882133]
[42.56345749 12.28999615]
[32.12364578 1.51918721]
[21.68383217 -9.25162125]
[7.39755106 -3.97696090]
[-7.79859018 -4.97555161]
[-21.27176666 -12.07438183]
[-30.68767166 -24.04353523]
[-34.41493988 -38.80928421]
[-31.80780029 -53.81337357]
[-23.31795692 -66.45625305]
[-10.41632462 -74.54747009]
[4.66180944 -76.68517303]
[19.30406761 -72.49898529]
[30.97359085 -62.71419525]
[37.64856339 -49.02607727]
[38.17250443 -33.80617523]
[32.45463943 -19.69143295]
[42.89445496 -8.92062473]
[53.33426666 1.85018337]
[60.29296494 4.48118258]
[63.87632751 12.95534134]
[74.08980560 23.94100571]
[84.30328369 34.92667007]
[81.26257324 20.23810196]
[81.89959717 5.25163364]
[86.17579651 -9.12592125]
[93.83243561 -22.02459717]
[104.40622711 -32.66391373]
[117.25735474 -40.40009689]
[131.60821533 -44.76504517]
[146.59045410 -45.49463654]
[161.29753113 -42.54472733]
[174.83953857 -36.09381485]
[186.39704895 -26.53223228]
[195.27075195 -14.43853760]
[200.92369080 -0.54450440]
[203.01383972 14.30915737]
[201.41471863 29.22367477]
[196.22308350 43.29658890]
[187.75306702 55.67636490]
[176.51719666 65.61392212]
[163.19531250 72.50795746]
[148.59353638 75.94130707]
[133.59538269 75.70623779]
[119.10836029 71.81697083]
[106.00907898 64.50883484]
[95.09141541 54.22556305]
[99.09915924 68.68025208]
[103.10689545 83.13494110]
[114.07864380 85.42916870]
[122.82778168 94.97827911]
[136.35197449 88.49011230]
[149.87615967 82.00194550]
[158.68260193 68.16797638]
[175.05245972 69.14782715]
[182.14581299 83.93350983]
[172.66564941 97.31477356]
[156.36433411 95.52613831]
[142.84013367 102.01429749]
[129.31594849 108.50246429]
[121.72604370 121.44052124]
[122.66166687 136.41131592]
[123.59729767 151.38211060]
[124.53292847 166.35289001]
[125.46855927 181.32368469]
[126.40418243 196.29447937]
[140.26818848 200.04005432]
[152.27447510 207.88047791]
[161.25154114 219.03482056]
[166.32839966 232.39961243]
[167.01901245 246.65798950]
[163.26887512 260.40939331]
[155.45901489 272.30725098]
[144.36732483 281.19070435]
[131.09107971 286.19796753]
[131.71505737 301.18499756]
[132.33903503 316.17199707]
[145.55085754 321.28656006]
[155.77606201 331.02969360]
[161.48701477 343.89999390]
[161.84802246 357.93240356]
[156.83750916 370.99826050]
[147.24617004 381.12823486]
[134.55249023 386.80902100]
[134.86454773 401.80575562]
[135.17660522 416.80252075]
[135.48866272 431.79928589]
[135.80072021 446.79602051]
[136.11277771 461.79278564]
[136.42481995 476.78952026]
[136.73687744 491.78628540]
[137.04893494 506.78305054]
[137.36099243 521.77978516]
[151.94363403 525.71972656]
[164.82484436 533.60968018]
[174.96038818 544.80999756]
[181.52864075 558.41278076]
[183.99714661 573.31524658]
[182.16577148 588.30932617]
[176.18298340 602.17956543]
[166.53379822 613.80151367]
[154.00041199 622.23303223]
[139.59886169 626.79064941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[25 124]
[26 123]
[27 122]
[35 113]
[36 112]
[37 111]
[38 110]
[39 109]
[40 108]
[42 96]
[43 95]
[44 94]
[45 70]
[46 69]
[47 68]
[48 66]
[49 65]
[50 64]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
