%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAUCUACUGGGGGGGGGGCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGAxxxxxxxxxxCUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCCCCCCCCCCCUAAUCAACU\
) } def
/len { sequence length } bind def

/coor [
[84.01528168 401.64428711]
[70.52640533 394.91275024]
[59.04090118 385.14819336]
[50.22653198 372.91827393]
[44.59575272 358.93408203]
[42.47592163 344.00860596]
[43.99029160 329.00961304]
[49.05081558 314.80911255]
[57.36328125 302.23269653]
[68.44441223 292.01153564]
[81.64996338 284.73989868]
[96.21218872 280.84051514]
[95.90421295 265.84368896]
[95.59623718 250.84684753]
[95.28826141 235.85000610]
[94.98027802 220.85316467]
[94.67230225 205.85633850]
[94.36432648 190.85949707]
[94.05635071 175.86265564]
[93.74836731 160.86581421]
[93.44039154 145.86898804]
[76.29814911 139.81474304]
[62.80459213 127.63138580]
[55.03694153 111.19441986]
[54.19094849 93.03417206]
[60.39685440 75.94625854]
[49.00577927 66.18698120]
[38.06179428 76.46688843]
[26.07049561 85.50325775]
[13.17247105 93.19013977]
[-0.48105401 99.43741608]
[-14.73000050 104.17184448]
[-29.40730476 107.33790588]
[-44.34088516 108.89848328]
[-59.35565567 108.83528137]
[-74.27556610 107.14904022]
[-88.92569733 103.85952759]
[-103.13428497 99.00531769]
[-116.73473358 92.64331818]
[-129.56758118 84.84812164]
[-141.48239136 75.71112823]
[-152.33944702 65.33945465]
[-162.01145935 53.85470581]
[-170.38504028 41.39154053]
[-177.36198425 28.09607887]
[-182.86053467 14.12420368]
[-186.81617737 -0.36027151]
[-189.18257141 -15.18752480]
[-189.93196106 -30.18371201]
[-189.05555725 -45.17301178]
[-186.56362915 -59.97968674]
[-182.48539734 -74.43013000]
[-176.86868286 -88.35491943]
[-169.77932739 -101.59078979]
[-161.30046082 -113.98256683]
[-151.53149414 -125.38495636]
[-140.58695984 -135.66427612]
[-128.59516907 -144.69999695]
[-115.69673157 -152.38618469]
[-102.04286957 -158.63273621]
[-87.79367065 -163.36639404]
[-73.11619568 -166.53166199]
[-58.18252945 -168.09143066]
[-43.16776276 -168.02742004]
[-28.24794197 -166.34037781]
[-13.59798622 -163.05007935]
[0.61033696 -158.19509888]
[14.21044350 -151.83236694]
[27.04287910 -144.03648376]
[38.95719147 -134.89884949]
[49.81368637 -124.52659607]
[59.48508072 -113.04132843]
[67.85798645 -100.57771301]
[74.83422852 -87.28187561]
[80.33201599 -73.30970001]
[84.28688812 -58.82501221]
[86.65248871 -43.99763489]
[87.40106201 -29.00140381]
[86.52384949 -14.01215076]
[84.03112030 0.79438710]
[79.95211029 15.24460983]
[74.33464813 29.16909599]
[67.24458313 42.40458679]
[58.76505280 54.79590607]
[70.15612793 64.55518341]
[79.14826202 57.12222672]
[89.99922180 52.00834274]
[102.10176086 49.67780304]
[114.73339081 50.43383789]
[127.09954834 54.39037704]
[138.38348389 61.45539474]
[149.97253418 51.93206024]
[161.56158447 42.40872192]
[173.15063477 32.88538361]
[173.13024902 17.24781418]
[183.20585632 5.28887653]
[198.62005615 2.65521741]
[212.09475708 10.59036922]
[217.26759338 25.34759521]
[211.69612122 39.95898438]
[198.01101685 47.52548981]
[182.67396545 44.47443008]
[171.08493042 53.99776840]
[159.49588013 63.52110672]
[147.90682983 73.04444122]
[149.66140747 80.33631897]
[164.24516296 76.82714844]
[178.82896423 73.31820679]
[182.33767700 87.90206909]
[167.75433350 91.41090393]
[153.17057800 94.92006683]
[154.92515564 102.21194458]
[169.57788086 105.42093658]
[184.23060608 108.62993622]
[198.88333130 111.83892822]
[213.53605652 115.04792786]
[228.18878174 118.25692749]
[242.41850281 110.84783173]
[257.02423096 117.48502350]
[260.80169678 133.07701111]
[250.85316467 145.66296387]
[234.81028748 145.58801270]
[224.97978210 132.90965271]
[210.32705688 129.70065308]
[195.67434692 126.49165344]
[181.02162170 123.28266144]
[166.36889648 120.07366180]
[151.71617126 116.86466980]
[140.44378662 132.22074890]
[125.22938538 142.03204346]
[108.43723297 145.56100464]
[108.74520874 160.55784607]
[109.05318451 175.55467224]
[109.36116028 190.55151367]
[109.66914368 205.54835510]
[109.97711945 220.54519653]
[110.28509521 235.54203796]
[110.59307098 250.53886414]
[110.90105438 265.53570557]
[111.20903015 280.53253174]
[125.91906738 283.83078003]
[139.41201782 290.55413818]
[150.90344238 300.31173706]
[159.72521973 312.53628540]
[165.36448669 326.51705933]
[167.49336243 341.44125366]
[165.98808289 356.44116211]
[160.93617249 370.64474487]
[152.63133240 383.22619629]
[141.55639648 393.45407104]
[128.35525513 400.73370361]
[113.79539490 404.64190674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 85]
[27 84]
[91 105]
[92 104]
[93 103]
[94 102]
[112 128]
[113 127]
[114 126]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
