%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAACACGGGGGGGGGGCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACxxxxxxxxxxGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCCCCCCCCCCCACCCUCACAC\
) } def
/len { sequence length } bind def

/coor [
[72.02241516 371.34271240]
[60.13814163 362.06762695]
[50.81943512 350.21749878]
[44.60807037 336.48135376]
[41.86516953 321.65771484]
[42.75019836 306.60845947]
[47.21170425 292.20852661]
[54.99030304 279.29507446]
[65.63375092 268.61892700]
[78.52326202 260.80072021]
[92.90944672 256.29507446]
[91.97382355 241.32426453]
[91.03819275 226.35348511]
[90.10256195 211.38269043]
[89.16693878 196.41189575]
[88.23130798 181.44110107]
[87.29567719 166.47032166]
[86.36005402 151.49952698]
[85.42442322 136.52873230]
[84.48879242 121.55793762]
[80.54479218 101.98027802]
[90.76567078 91.49650574]
[85.86412048 77.31994629]
[80.96257019 63.14338684]
[76.06101990 48.96682739]
[71.15946960 34.79027176]
[59.88946915 28.43095207]
[56.12005234 16.47225571]
[61.36047745 5.52486944]
[56.60666275 -8.70191002]
[51.70511246 -22.87846756]
[46.80356216 -37.05502701]
[41.90200806 -51.23158264]
[37.00045776 -65.40814209]
[32.09890747 -79.58470154]
[5.17054558 -88.98640442]
[-4.93427849 -115.28345490]
[-19.34649467 -119.44134521]
[-33.75871277 -123.59922791]
[-48.17092514 -127.75711823]
[-60.33079529 -118.11775970]
[-75.83558655 -117.50038147]
[-88.72338867 -126.14237976]
[-94.03858185 -140.72073364]
[-89.73735809 -155.62976074]
[-77.47364044 -165.13664246]
[-61.96306610 -165.58578491]
[-49.16977310 -156.80448914]
[-44.01303864 -142.16932678]
[-29.60082436 -138.01144409]
[-15.18860722 -133.85356140]
[-0.77639127 -129.69566345]
[3.68065286 -135.89837646]
[9.43409157 -140.92198181]
[16.18107033 -144.50207520]
[14.00423241 -159.34327698]
[11.82739544 -174.18447876]
[2.16928959 -186.71571350]
[7.97766733 -200.43110657]
[5.80083036 -215.27230835]
[-9.19748306 -216.85389709]
[-23.33098412 -222.11648560]
[-35.71123123 -230.72929382]
[-45.55998993 -242.15087891]
[-52.25815582 -255.66329956]
[-55.38468552 -270.41714478]
[-54.74303436 -285.48495483]
[-50.37353897 -299.91958618]
[-42.55087280 -312.81362915]
[-31.76677132 -323.35659790]
[-18.69913483 -330.88571167]
[-4.16940403 -334.92770386]
[10.90906811 -335.22851562]
[25.58843803 -331.76916504]
[38.94594574 -324.76718140]
[50.14192963 -314.66268921]
[58.47260284 -302.09088135]
[63.41428375 -287.84201050]
[64.65634155 -272.81176758]
[62.12070084 -257.94497681]
[55.96674728 -244.17617798]
[46.58132553 -232.37089539]
[34.55441666 -223.27120972]
[20.64203644 -217.44914246]
[22.81887245 -202.60794067]
[32.32127762 -191.13825989]
[26.66860199 -176.36132812]
[28.84543800 -161.52011108]
[31.02227592 -146.67890930]
[38.46768570 -145.28141785]
[45.42094040 -142.23168945]
[51.51965332 -137.68016052]
[56.44406891 -131.85577393]
[59.93380356 -125.05442810]
[61.80162811 -117.62397003]
[61.94348907 -109.94641876]
[60.34426880 -102.41831207]
[57.07897568 -95.43021393]
[52.30927277 -89.34648132]
[46.27546692 -84.48625183]
[51.17701721 -70.30969238]
[56.07856750 -56.13313675]
[60.98011780 -41.95657730]
[65.88166809 -27.78001976]
[70.78321838 -13.60346031]
[75.97496033 -8.27509117]
[75.63594055 0.91930479]
[89.26593781 11.92944050]
[85.33602905 29.88871956]
[90.23757935 44.06527710]
[95.13912964 58.24183655]
[100.04067993 72.41839600]
[104.94223022 86.59495544]
[115.71304321 97.03476715]
[130.03564453 101.49157715]
[144.35823059 105.94839478]
[156.71600342 96.56409454]
[172.23028564 96.26940918]
[184.93551636 105.17765808]
[189.94627380 119.86342621]
[185.33581543 134.67974854]
[172.87696838 143.92944336]
[157.36041260 144.05580139]
[144.75256348 135.01025391]
[139.90141296 120.27099609]
[125.57881927 115.81417847]
[111.25622559 111.35736084]
[99.45958710 120.62231445]
[100.39521027 135.59310913]
[101.33084106 150.56388855]
[102.26647186 165.53468323]
[103.20210266 180.50547791]
[104.13772583 195.47627258]
[105.07335663 210.44706726]
[106.00898743 225.41784668]
[106.94461060 240.38864136]
[107.88024139 255.35943604]
[122.71547699 258.03884888]
[136.47810364 264.19137573]
[148.36799622 273.45925903]
[157.69389343 285.30371094]
[163.91358948 299.03610229]
[166.66546631 313.85809326]
[165.78956604 328.90786743]
[161.33679199 343.31051636]
[153.56602478 356.22866821]
[142.92904663 366.91128540]
[130.04428101 374.73727417]
[115.66082764 379.25164795]
[100.61492157 380.19198608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[22 113]
[23 112]
[24 111]
[25 110]
[26 109]
[29 107]
[30 105]
[31 104]
[32 103]
[33 102]
[34 101]
[35 100]
[37 52]
[38 51]
[39 50]
[40 49]
[55 89]
[56 88]
[57 87]
[59 85]
[60 84]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
