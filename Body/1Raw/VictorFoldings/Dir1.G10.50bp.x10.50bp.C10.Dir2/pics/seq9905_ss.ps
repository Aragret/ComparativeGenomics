%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUACUAAGGGGGGGGGGCUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCxxxxxxxxxxAGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACCCCCCCCCCCUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[86.08414459 407.34271240]
[72.23820496 401.32669067]
[60.52954102 391.79727173]
[51.82701492 379.46160889]
[46.77641296 365.23507690]
[45.75252151 350.17340088]
[48.83132172 335.39425659]
[55.78434372 321.99432373]
[66.09562683 310.96798706]
[79.00000763 303.13348389]
[93.53989410 299.07217407]
[93.53989410 284.07217407]
[93.53989410 269.07217407]
[93.53989410 254.07215881]
[93.53989410 239.07215881]
[93.53989410 224.07215881]
[93.53989410 209.07215881]
[93.53989410 194.07215881]
[93.53989410 179.07215881]
[93.53989410 164.07215881]
[85.80259705 151.34489441]
[93.53989410 137.54472351]
[93.53989410 122.54472351]
[93.53989410 107.54472351]
[90.42168427 108.70168304]
[86.94821930 109.16627502]
[71.96850586 109.94612122]
[56.98879242 110.72596741]
[52.57563782 125.22768402]
[43.46627045 137.34359741]
[30.76068878 145.61064148]
[15.99315071 149.03051758]
[0.94690990 147.19029236]
[-12.56112671 140.31214905]
[-22.89979744 129.22668457]
[-28.82065773 115.27249908]
[-29.60873604 100.13464355]
[-25.16886711 85.64108276]
[-16.03718758 73.54197693]
[-3.31639004 65.29837036]
[11.45742512 61.90570068]
[26.50024796 63.77365875]
[39.99558640 70.67667389]
[50.31381226 81.78118134]
[56.20894623 95.74625397]
[71.18865967 94.96640778]
[86.16837311 94.18656158]
[98.77950287 86.06501770]
[105.68650055 72.74986267]
[112.59349823 59.43470764]
[99.89529419 51.43332291]
[87.91117096 42.39743042]
[76.72518921 32.39041519]
[66.41580963 21.48247337]
[57.05534744 9.75011158]
[48.70946121 -2.72437072]
[41.43669128 -15.85347462]
[35.28805161 -29.54510689]
[30.30667305 -43.70322800]
[26.52749443 -58.22852707]
[23.97702599 -73.01911926]
[22.67315674 -87.97126007]
[22.62503242 -102.98006439]
[23.83299255 -117.94026184]
[26.28856277 -132.74690247]
[29.97451782 -147.29614258]
[34.86500549 -161.48591614]
[40.92571640 -175.21669006]
[48.11414719 -188.39216614]
[56.37986755 -200.91990662]
[65.66490173 -212.71205139]
[75.90412140 -223.68588257]
[87.02570343 -233.76441956]
[98.95163727 -242.87698364]
[111.59826660 -250.95962524]
[124.87688446 -257.95568848]
[138.69435120 -263.81607056]
[152.95375061 -268.49966431]
[167.55505371 -271.97363281]
[182.39584351 -274.21362305]
[197.37202454 -275.20385742]
[212.37854004 -274.93746948]
[227.31013489 -273.41629028]
[242.06207275 -270.65100098]
[256.53088379 -266.66094971]
[270.61505127 -261.47421265]
[284.21582031 -255.12709045]
[297.23776245 -247.66415405]
[309.58953857 -239.13772583]
[321.18453979 -229.60762024]
[331.94140625 -219.14070129]
[341.78466797 -207.81036377]
[350.64532471 -195.69609070]
[358.46118164 -182.88287354]
[365.17745972 -169.46055603]
[370.74700928 -155.52333069]
[375.13076782 -141.16891479]
[378.29800415 -126.49801636]
[380.22650146 -111.61354828]
[380.90270996 -96.61990356]
[380.32192993 -81.62226868]
[378.48815918 -66.72582245]
[375.41433716 -52.03507614]
[371.12200928 -37.65306091]
[365.64126587 -23.68066216]
[359.01052856 -10.21589088]
[351.27636719 2.64680862]
[342.49298096 14.81721210]
[332.72198486 26.20995140]
[322.03195190 36.74511337]
[310.49783325 46.34879684]
[298.20056152 54.95364380]
[285.22637939 62.49929428]
[271.66625977 68.93281555]
[257.61538696 74.20909119]
[243.17225647 78.29109955]
[228.43821716 81.15021515]
[213.51660156 82.76638031]
[198.51208496 83.12825775]
[183.52990723 82.23330688]
[168.67515564 80.08781433]
[154.05204773 76.70682526]
[139.76313782 72.11405182]
[125.90865326 66.34170532]
[119.00165558 79.65686035]
[112.09465790 92.97201538]
[108.53989410 107.54472351]
[108.53989410 122.54472351]
[108.53989410 137.54472351]
[116.27719879 151.34489441]
[108.53989410 164.07215881]
[108.53989410 179.07215881]
[108.53989410 194.07215881]
[108.53989410 209.07215881]
[108.53989410 224.07215881]
[108.53989410 239.07215881]
[108.53989410 254.07215881]
[108.53989410 269.07217407]
[108.53989410 284.07217407]
[108.53989410 299.07217407]
[123.07978058 303.13348389]
[135.98416138 310.96798706]
[146.29544067 321.99432373]
[153.24847412 335.39425659]
[156.32727051 350.17340088]
[155.30337524 365.23507690]
[150.25277710 379.46160889]
[141.55024719 391.79727173]
[129.84158325 401.32669067]
[115.99565125 407.34271240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[26 47]
[27 46]
[28 45]
[48 126]
[49 125]
[50 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
