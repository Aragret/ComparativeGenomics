%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGAAAAAACGGGGGGGGGGUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCAUACCCAUxxxxxxxxxxAACAAAGCAUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGACCCCCCCCCCUAUGAAAAACC\
) } def
/len { sequence length } bind def

/coor [
[107.05063629 396.40371704]
[93.02869415 390.85070801]
[80.82873535 381.98437500]
[71.21766663 370.36206055]
[64.79963684 356.71435547]
[61.97810364 341.89916992]
[62.93041992 326.84780884]
[67.59672546 312.50637817]
[75.68369293 299.77642822]
[86.68296814 289.45816040]
[99.90312195 282.20016479]
[114.51313782 278.45874023]
[114.51313782 263.45874023]
[114.51313782 248.45874023]
[114.51313782 233.45874023]
[114.51313782 218.45874023]
[114.51313782 203.45874023]
[114.51313782 188.45874023]
[114.51313782 173.45874023]
[114.51313782 158.45874023]
[114.51313782 143.45874023]
[114.51313782 128.45874023]
[108.62207031 123.81704712]
[96.83993530 114.53366089]
[90.94886017 109.89196777]
[76.36511230 113.40113068]
[61.78136444 116.91030121]
[57.50376892 131.66149902]
[46.41255569 142.28602600]
[31.49120903 145.92593384]
[16.75349617 141.60212708]
[6.16378546 130.47766113]
[2.57065749 115.54498291]
[6.94064522 100.82089996]
[18.09824371 90.26610565]
[33.04211426 86.71980286]
[47.75243378 91.13592529]
[58.27219772 102.32655334]
[72.85594940 98.81738281]
[87.43969727 95.30821991]
[98.72997284 85.43251038]
[104.14859772 71.44542694]
[109.56722260 57.45834351]
[114.98584747 43.47126007]
[104.61684418 34.32381439]
[97.81571198 22.32164764]
[95.30867004 8.78873634]
[97.34957123 -4.78989220]
[103.69437408 -16.93112183]
[113.63010406 -26.31573486]
[126.05490875 -31.93174744]
[124.82429504 -46.88118362]
[123.59368134 -61.83061600]
[122.36307526 -76.78005219]
[121.13246155 -91.72948456]
[119.59516907 -106.65050507]
[117.75184631 -121.53681183]
[115.90851593 -136.42311096]
[111.72528076 -144.61434937]
[114.18341064 -151.63359070]
[112.64611816 -166.55461121]
[97.70265961 -168.50134277]
[83.61116791 -173.84236145]
[71.13156891 -182.28962708]
[60.93687820 -193.38760376]
[53.57688522 -206.53778076]
[49.44850540 -221.03099060]
[48.77437210 -236.08563232]
[51.59084320 -250.88983154]
[57.74602890 -264.64520264]
[66.90798950 -276.60995483]
[78.58262634 -286.13882446]
[92.14035034 -292.71795654]
[106.85000610 -295.99252319]
[121.91831970 -295.78594971]
[136.53266907 -292.10934448]
[149.90493774 -285.16101074]
[161.31396484 -275.31567383]
[170.14447021 -263.10424805]
[175.92025757 -249.18530273]
[178.32981873 -234.30946350]
[177.24322510 -219.27896118]
[172.71907043 -204.90437317]
[165.00134277 -191.96090698]
[154.50624084 -181.14657593]
[141.79975891 -173.04460144]
[127.56713867 -168.09190369]
[129.10443115 -153.17088318]
[130.79483032 -138.26644897]
[132.63815308 -123.38013458]
[134.48147583 -108.49382782]
[137.67912292 -104.87107849]
[138.59452820 -99.18338013]
[136.08189392 -92.96009827]
[137.31250000 -78.01066589]
[138.54312134 -63.06122971]
[139.77372742 -48.11179352]
[141.00434875 -33.16236115]
[149.42280579 -31.40566444]
[157.29261780 -27.93827629]
[164.27030945 -22.91151619]
[170.05139160 -16.54475021]
[174.38356018 -9.11583138]
[177.07777405 -0.94895941]
[192.07064819 -1.41088533]
[207.06353760 -1.87281120]
[212.08026123 -16.19750595]
[221.93586731 -27.74009895]
[235.29747009 -34.93954468]
[250.35801697 -36.82218170]
[265.08068848 -33.13339233]
[277.47439575 -24.37206268]
[285.86294556 -11.72308636]
[289.11187744 3.10286522]
[286.78179932 18.10070419]
[279.18783569 31.24209785]
[267.35702515 40.74977493]
[252.88934326 45.33790970]
[237.74147034 44.38598633]
[223.96200562 38.02274704]
[213.41452026 27.10876656]
[207.52546692 13.12007427]
[192.53257751 13.58200073]
[177.53968811 14.04392624]
[168.81793213 34.08856964]
[150.98573303 46.93819809]
[128.97293091 48.88988495]
[123.55430603 62.87696838]
[118.13568115 76.86405182]
[112.71705627 90.85113525]
[129.51313782 128.45874023]
[129.51313782 143.45874023]
[129.51313782 158.45874023]
[129.51313782 173.45874023]
[129.51313782 188.45874023]
[129.51313782 203.45874023]
[129.51313782 218.45874023]
[129.51313782 233.45874023]
[129.51313782 248.45874023]
[129.51313782 263.45874023]
[129.51313782 278.45874023]
[144.12315369 282.20016479]
[157.34330750 289.45816040]
[168.34259033 299.77642822]
[176.42955017 312.50637817]
[181.09585571 326.84780884]
[182.04817200 341.89916992]
[179.22663879 356.71435547]
[172.80860901 370.36206055]
[163.19754028 381.98437500]
[150.99757385 390.85070801]
[136.97563171 396.40371704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 40]
[26 39]
[27 38]
[41 130]
[42 129]
[43 128]
[44 127]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[56 91]
[57 90]
[58 89]
[60 88]
[61 87]
[104 124]
[105 123]
[106 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
