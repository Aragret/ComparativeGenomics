%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAAUCAACAAAACGGGGGGGGGGUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGxxxxxxxxxxCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUCCCCCCCCCCUUGAAUCAACACAAC\
) } def
/len { sequence length } bind def

/coor [
[85.02166748 427.57714844]
[70.58479309 423.33767700]
[57.21125412 416.44238281]
[45.38450623 407.14053345]
[35.53207397 395.76837158]
[28.01011658 382.73699951]
[23.09054756 368.51748657]
[20.95120811 353.62387085]
[21.66943169 338.59454346]
[25.21925735 323.97280884]
[31.47235870 310.28723145]
[40.20269394 298.03253174]
[51.09466171 287.65170288]
[63.75452805 279.52001953]
[77.72463989 273.93142700]
[92.50000000 271.08795166]
[92.50000000 256.08795166]
[92.50000000 241.08796692]
[92.50000000 226.08796692]
[92.50000000 211.08796692]
[92.50000000 196.08796692]
[92.50000000 181.08796692]
[92.50000000 166.08796692]
[92.50000000 151.08796692]
[92.50000000 136.08796692]
[75.64085388 127.66265869]
[65.15063477 112.00469208]
[50.27112579 113.90210724]
[35.39161682 115.79953003]
[20.51210594 117.69695282]
[5.63259745 119.59437561]
[-2.89047122 129.31922913]
[-15.35765743 130.56903076]
[-25.00229073 123.21551514]
[-39.91598892 124.82225037]
[-52.83166504 134.92756653]
[-67.93770599 128.54479980]
[-69.69430542 112.24001312]
[-56.29443359 102.78615570]
[-41.52272415 109.90855408]
[-26.60902405 108.30181885]
[-13.04862213 97.19654083]
[3.73517680 104.71485901]
[18.61468697 102.81744385]
[33.49419403 100.92002106]
[48.37370300 99.02259827]
[63.25321198 97.12518311]
[67.55356598 82.51229095]
[77.39534760 70.88607788]
[91.09770203 64.23213959]
[90.51245880 49.24356079]
[89.92721558 34.25498199]
[83.68389130 20.61603355]
[72.72135162 10.37773609]
[61.75881195 0.13943887]
[46.55075836 3.22077656]
[32.45003510 -3.25604916]
[24.87866402 -16.80056763]
[26.74798775 -32.20463181]
[37.33921814 -43.54507065]
[52.57980347 -46.46124649]
[66.60943604 -39.83183670]
[74.03343201 -26.20598221]
[71.99710846 -10.82310104]
[82.95964813 -0.58480346]
[93.92218781 9.65349388]
[101.18217468 7.77131462]
[97.41804504 -6.74871635]
[111.93813324 -10.51262569]
[115.70214844 4.00695658]
[122.96213531 2.12477779]
[127.56954193 -12.15008736]
[132.17695618 -26.42495346]
[119.02981567 -33.74881363]
[107.56430054 -43.49705887]
[98.22112274 -55.29499435]
[91.35941315 -68.68914032]
[87.24289703 -83.16465759]
[86.02982330 -98.16514587]
[87.76681519 -113.11402893]
[92.38709259 -127.43670654]
[99.71308136 -140.58265686]
[109.46318817 -152.04660034]
[121.26263428 -161.38786316]
[134.65788269 -168.24740601]
[149.13406372 -172.36157227]
[164.13475037 -173.57221985]
[179.08335876 -171.83282471]
[193.40528870 -167.21022034]
[206.55006409 -159.88209534]
[218.01240540 -150.13014221]
[227.35177612 -138.32919312]
[234.20915222 -124.93282318]
[238.32096863 -110.45597076]
[239.52919006 -95.45509338]
[237.78736877 -80.50677490]
[233.16244507 -66.18558502]
[225.83219910 -53.04200363]
[216.07838440 -41.58122635]
[204.27592468 -32.24378204]
[190.87844849 -25.38857079]
[176.40093994 -21.27908897]
[161.39985657 -20.07329941]
[146.45181274 -21.81754303]
[141.84440613 -7.54267836]
[137.23699951 6.73218679]
[104.91579437 33.66973877]
[105.50103760 48.65831757]
[106.08628082 63.64689636]
[120.26573944 69.21216583]
[130.98408508 80.03559875]
[136.41075134 94.26868439]
[151.39291382 95.00012970]
[166.37506104 95.73158264]
[178.02619934 85.39287567]
[193.20980835 86.34809113]
[202.99438477 97.51937866]
[217.97654724 98.25082397]
[232.95869446 98.98227692]
[245.76065063 89.31326294]
[261.26568604 93.43312073]
[267.57968140 108.18144226]
[259.85906982 122.24458313]
[244.02645874 124.83449554]
[232.22724915 113.96443176]
[217.24510193 113.23297882]
[202.26293945 112.50153351]
[191.43670654 122.66658020]
[176.23223877 122.13821411]
[165.64361572 110.71373749]
[150.66146851 109.98228455]
[135.67930603 109.25083923]
[131.76979065 118.68880463]
[125.41989136 126.69120026]
[117.11737823 132.64332581]
[107.50000000 136.08796692]
[107.50000000 151.08796692]
[107.50000000 166.08796692]
[107.50000000 181.08796692]
[107.50000000 196.08796692]
[107.50000000 211.08796692]
[107.50000000 226.08796692]
[107.50000000 241.08796692]
[107.50000000 256.08795166]
[107.50000000 271.08795166]
[122.27536011 273.93142700]
[136.24546814 279.52001953]
[148.90533447 287.65170288]
[159.79730225 298.03253174]
[168.52763367 310.28723145]
[174.78074646 323.97280884]
[178.33056641 338.59454346]
[179.04879761 353.62387085]
[176.90945435 368.51748657]
[171.98988342 382.73699951]
[164.46792603 395.76837158]
[154.61549377 407.14053345]
[142.78874207 416.44238281]
[129.41520691 423.33767700]
[114.97833252 427.57714844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[27 47]
[28 46]
[29 45]
[30 44]
[31 43]
[34 41]
[35 40]
[50 109]
[51 108]
[52 107]
[53 66]
[54 65]
[55 64]
[71 106]
[72 105]
[73 104]
[112 132]
[113 131]
[114 130]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
