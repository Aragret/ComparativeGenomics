%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUACCCUCGGGGGGGGGGACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAxxxxxxxxxxCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUACCCCCCCCCCUUUUACCCUC\
) } def
/len { sequence length } bind def

/coor [
[83.92334747 499.38491821]
[70.07740784 493.36889648]
[58.36874771 483.83947754]
[49.66622162 471.50381470]
[44.61561966 457.27728271]
[43.59172821 442.21560669]
[46.67052841 427.43646240]
[53.62355042 414.03652954]
[63.93483353 403.01019287]
[76.83921814 395.17568970]
[91.37910461 391.11437988]
[91.37910461 376.11437988]
[91.37910461 361.11437988]
[91.37910461 346.11437988]
[91.37910461 331.11437988]
[91.37910461 316.11437988]
[91.37910461 301.11437988]
[91.37910461 286.11437988]
[91.37910461 271.11437988]
[91.37910461 256.11437988]
[79.19342041 251.41972351]
[69.31720734 242.82734680]
[62.95058823 231.35240173]
[60.87709808 218.36196899]
[63.36727905 205.41230774]
[70.14363098 194.06233215]
[80.41133881 185.68598938]
[92.95143890 181.30589294]
[93.57541656 166.31887817]
[94.19939423 151.33186340]
[94.82337189 136.34484863]
[95.44734955 121.35782623]
[94.04504395 106.42352295]
[91.53002930 104.57727814]
[89.65103912 101.75167084]
[88.78070831 98.18817902]
[89.19417572 94.26554871]
[91.02040863 90.45957184]
[88.84357452 75.61837006]
[86.66673279 60.77716446]
[84.48989868 45.93595886]
[82.15879822 31.11820030]
[79.67367554 16.32549286]
[77.18856049 1.53278577]
[74.70343781 -13.25992107]
[59.69419098 -14.72881317]
[45.58759308 -20.02875137]
[33.34313202 -28.79283333]
[23.79198074 -40.41875839]
[17.58056450 -54.11021805]
[15.12682438 -68.93141937]
[16.59210014 -83.87108612]
[21.87052917 -97.91139984]
[30.59667778 -110.09741211]
[42.17083359 -119.60192871]
[55.80020905 -125.78170013]
[53.31509018 -140.57440186]
[50.82997131 -155.36711121]
[48.34485245 -170.15982056]
[33.31158829 -171.28428650]
[18.98448563 -175.97444153]
[6.19650030 -183.95759583]
[-4.30888939 -194.76963806]
[-11.92091370 -207.78196716]
[-16.19701958 -222.23803711]
[-16.88860130 -237.29742432]
[-13.95544815 -252.08459473]
[-7.56809282 -265.73980713]
[1.90211391 -277.46920776]
[13.90458584 -286.59082031]
[27.74151611 -292.57437134]
[42.60844040 -295.07196045]
[57.64102173 -293.93838501]
[71.96527863 -289.23956299]
[84.74842072 -281.24862671]
[95.24725342 -270.43023682]
[102.85138702 -257.41329956]
[107.11872864 -242.95462036]
[107.80117798 -227.89482117]
[104.85906219 -213.10943604]
[98.46343231 -199.45808411]
[88.98611450 -187.73443604]
[76.97811127 -178.62008667]
[63.13756180 -172.64494324]
[65.62268066 -157.85223389]
[68.10779572 -143.05952454]
[70.59291840 -128.26681519]
[85.49345398 -126.87995911]
[99.53802490 -121.67929840]
[111.76716614 -113.01369476]
[121.34378815 -101.46897125]
[127.61045837 -87.82824707]
[130.13453674 -73.01885986]
[128.73806763 -58.04930115]
[123.51023865 -43.94056320]
[114.80179596 -31.65647316]
[103.20145416 -22.03786850]
[89.49614716 -15.74503994]
[91.98126221 -0.95233274]
[94.46638489 13.84037399]
[96.95149994 28.63308144]
[101.18871307 34.74795532]
[99.33110046 43.75912094]
[101.50794220 58.60032654]
[103.68477631 73.44153595]
[105.86161804 88.28273773]
[108.65393829 103.02054596]
[114.13861847 89.05922699]
[124.74797821 78.45539093]
[138.71214294 72.97798157]
[153.70158386 73.54076385]
[167.21571350 80.04985046]
[177.00009155 91.41937256]
[181.42243958 105.75265503]
[179.74502563 120.65856934]
[172.24768066 133.65048218]
[160.18112183 142.56103516]
[145.55831909 145.90377808]
[130.81869507 143.12104797]
[118.42115784 134.67706299]
[110.43436432 121.98180389]
[109.81038666 136.96882629]
[109.18640900 151.95584106]
[108.56243134 166.94285583]
[107.93845367 181.92987061]
[123.19470215 189.68971252]
[133.51705933 203.27406311]
[136.88420105 219.94354248]
[132.67132568 236.36276245]
[121.76542664 249.26763916]
[106.37910461 256.11437988]
[106.37910461 271.11437988]
[106.37910461 286.11437988]
[106.37910461 301.11437988]
[106.37910461 316.11437988]
[106.37910461 331.11437988]
[106.37910461 346.11437988]
[106.37910461 361.11437988]
[106.37910461 376.11437988]
[106.37910461 391.11437988]
[120.91899109 395.17568970]
[133.82336426 403.01019287]
[144.13465881 414.03652954]
[151.08767700 427.43646240]
[154.16647339 442.21560669]
[153.14257812 457.27728271]
[148.09197998 471.50381470]
[139.38946533 483.83947754]
[127.68079376 493.36889648]
[113.83485413 499.38491821]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 125]
[29 124]
[30 123]
[31 122]
[32 121]
[33 107]
[38 106]
[39 105]
[40 104]
[41 103]
[42 101]
[43 100]
[44 99]
[45 98]
[56 87]
[57 86]
[58 85]
[59 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
