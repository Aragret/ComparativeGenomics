%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGAACCCAAGGGGGGGGGGCCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUAxxxxxxxxxxAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCCCCCCCCCCCACAACCCAA\
) } def
/len { sequence length } bind def

/coor [
[120.22863007 568.51379395]
[107.00843811 561.24133301]
[96.12163544 550.79431152]
[88.31050110 537.88507080]
[84.10762024 523.39373779]
[83.79954529 508.30841064]
[87.40728760 493.65759277]
[94.68486023 480.44021606]
[105.13607025 469.55743408]
[118.04833221 461.75128174]
[132.54127502 457.55401611]
[132.22921753 442.55725098]
[131.91716003 427.56048584]
[131.60510254 412.56375122]
[131.29304504 397.56698608]
[130.98098755 382.57025146]
[130.66893005 367.57348633]
[130.35687256 352.57672119]
[130.04481506 337.57998657]
[129.73275757 322.58322144]
[129.42070007 307.58645630]
[126.11575317 300.92141724]
[129.26142883 292.27523804]
[129.26142883 277.27523804]
[121.52412415 264.54794312]
[129.26142883 250.74778748]
[121.52412415 238.02050781]
[129.26142883 224.22033691]
[129.10539246 209.22114563]
[128.79333496 194.22439575]
[128.48127747 179.22764587]
[128.16921997 164.23088074]
[123.71240234 149.90829468]
[115.46011353 137.38232422]
[107.20782471 124.85636902]
[98.95553589 112.33040619]
[87.55451202 102.58275604]
[73.89826965 96.37734222]
[60.24203110 90.17193604]
[45.59924698 95.48480988]
[31.83827400 88.99710846]
[26.86350250 75.00470734]
[13.20726109 68.79930115]
[-0.44898045 62.59389496]
[-14.10522175 56.38848495]
[-29.57070541 60.65444183]
[-42.46330261 51.10664368]
[-42.89291763 35.06934357]
[-30.52998543 24.84498596]
[-14.85828972 28.27682495]
[-7.89981461 42.73224640]
[5.75642681 48.93765259]
[19.41266823 55.14305878]
[33.06890869 61.34846497]
[46.88090134 55.89278793]
[60.81867218 61.99141693]
[66.44744110 76.51569366]
[80.10368347 82.72110748]
[93.75991821 88.92651367]
[105.93175507 80.16030121]
[104.37417603 65.24139404]
[102.81659698 50.32247925]
[87.93358612 47.79292297]
[74.28543854 41.34074402]
[62.88493729 31.44472885]
[54.57807159 18.83923149]
[49.98126602 4.45966339]
[49.43563843 -10.62691593]
[52.98167038 -25.30098152]
[60.35623169 -38.47362137]
[71.01207733 -49.16733932]
[84.15847015 -56.58858490]
[98.81986237 -60.18666077]
[113.90827942 -59.69456100]
[128.30406189 -55.14879990]
[140.93894958 -46.88670731]
[150.87535095 -35.52138901]
[157.37591553 -21.89621735]
[159.95826721 -7.02227736]
[158.43075562 7.99668741]
[152.90675354 22.04616928]
[143.79617310 34.08360672]
[131.77507019 43.21573639]
[117.73551178 48.76490021]
[119.29309082 63.68381119]
[120.85066986 78.60272217]
[111.48149872 104.07811737]
[119.73378754 116.60408020]
[127.98607635 129.13003540]
[136.23835754 141.65600586]
[135.79229736 126.66263580]
[138.51939392 111.91262054]
[144.29690552 98.06992340]
[152.86477661 85.75766754]
[163.83729553 75.53007507]
[176.72058105 67.84754181]
[190.93466187 63.05588913]
[205.83970642 61.37081528]
[220.76478577 62.86817169]
[235.03804016 67.48055267]
[248.01698303 75.00034332]
[259.11734009 85.08902740]
[267.83947754 97.29248810]
[273.79077148 111.06137848]
[276.70327759 125.77590179]
[276.44595337 140.77369690]
[273.03033447 155.37963867]
[266.61016846 168.93624878]
[257.47451782 180.83328247]
[246.03456116 190.53521729]
[232.80528259 197.60530090]
[218.38218689 201.72529602]
[203.41452026 202.70973206]
[188.57604980 200.51429749]
[174.53472900 195.23782349]
[161.92260742 187.11782837]
[151.30741882 176.51982117]
[143.16596985 163.91883850]
[143.47802734 178.91558838]
[143.79008484 193.91233826]
[144.10214233 208.90908813]
[147.42700195 217.48797607]
[144.26142883 224.22033691]
[151.99871826 238.02050781]
[144.26142883 250.74778748]
[151.99871826 264.54794312]
[144.26142883 277.27523804]
[144.26142883 292.27523804]
[144.41746521 307.27441406]
[144.72952271 322.27117920]
[145.04156494 337.26791382]
[145.35362244 352.26467896]
[145.66567993 367.26144409]
[145.97773743 382.25817871]
[146.28979492 397.25494385]
[146.60185242 412.25167847]
[146.91390991 427.24844360]
[147.22596741 442.24520874]
[147.53802490 457.24194336]
[162.19300842 460.83273315]
[175.41882324 468.09497070]
[186.31369019 478.53356934]
[194.13478088 491.43679810]
[198.34886169 505.92483521]
[198.66857910 521.00994873]
[195.07215881 535.66357422]
[187.80479431 548.88653564]
[177.36198425 559.77740479]
[164.45576477 567.59350586]
[149.96606445 571.80200195]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 128]
[24 127]
[26 125]
[28 123]
[29 121]
[30 120]
[31 119]
[32 118]
[33 90]
[34 89]
[35 88]
[36 87]
[37 59]
[38 58]
[39 57]
[42 54]
[43 53]
[44 52]
[45 51]
[60 86]
[61 85]
[62 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
