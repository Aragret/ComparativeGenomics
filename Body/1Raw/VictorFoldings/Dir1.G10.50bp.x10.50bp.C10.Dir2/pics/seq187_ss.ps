%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAAUAACAGGGGGGGGGGAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUxxxxxxxxxxUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCAUUCGUCCCCCCCCCCAUAAUAAUUACA\
) } def
/len { sequence length } bind def

/coor [
[87.24903107 408.32232666]
[73.08843231 403.16729736]
[60.49868393 394.88510132]
[50.15874481 383.92233276]
[42.62623596 370.87020874]
[38.30736923 356.43261719]
[37.43506241 341.38815308]
[40.05635071 326.54815674]
[46.02987671 312.71292114]
[55.03349686 300.62857056]
[66.58164978 290.94677734]
[80.05156708 284.18969727]
[94.71682739 280.72174072]
[94.71682739 265.72174072]
[94.71682739 250.72172546]
[94.71682739 235.72172546]
[94.71682739 220.72172546]
[94.71682739 205.72172546]
[94.71682739 190.72172546]
[94.71682739 175.72172546]
[94.71682739 160.72172546]
[94.71682739 145.72172546]
[94.71682739 130.72172546]
[94.71682739 115.72173309]
[84.94624329 104.34036255]
[70.11921692 102.06893921]
[55.29219437 99.79752350]
[46.27538681 101.59707642]
[40.18891525 97.32688904]
[25.41097069 94.75543976]
[10.63302612 92.18399048]
[-4.14491892 89.61254120]
[-18.92286301 87.04109192]
[-33.70080948 84.46964264]
[-40.98116302 97.74651337]
[-52.17971802 107.93822479]
[-66.08173370 113.93927765]
[-81.17923737 115.09870148]
[-95.83454895 111.29074860]
[-108.45797729 102.92846680]
[-117.68022156 90.91893005]
[-122.50093079 76.56485748]
[-122.39718628 61.42325974]
[-117.38024139 47.13658905]
[-107.99430084 35.25455475]
[-95.25746918 27.06603241]
[-80.55135345 23.45924950]
[-65.47116089 24.82544518]
[-51.65267563 31.01642227]
[-40.59482574 41.36063385]
[-33.49708557 54.73601151]
[-31.12936020 69.69170380]
[-16.35141563 72.26314545]
[-1.57347000 74.83459473]
[13.20447445 77.40604401]
[27.98241997 79.97749329]
[42.76036453 82.54894257]
[57.56361008 84.97050476]
[72.39063263 87.24192047]
[87.21765900 89.51333618]
[87.98461914 84.68943024]
[90.32032776 79.80923462]
[90.32032776 64.80923462]
[90.32032776 49.80923843]
[75.63173676 46.46361542]
[62.05612183 39.93288803]
[50.27442551 30.54463577]
[40.87760925 18.76976395]
[34.33701706 5.19889927]
[30.98071861 -9.48725128]
[30.97706795 -24.55203629]
[34.32624817 -39.23981094]
[40.86026382 -52.81384277]
[50.25137329 -64.59326935]
[62.02851868 -73.98722839]
[75.60096741 -80.52453613]
[90.28793335 -83.87727356]
[105.35271454 -83.87727356]
[120.03968048 -80.52453613]
[133.61213684 -73.98722839]
[145.38928223 -64.59326935]
[154.78038025 -52.81384277]
[161.31440735 -39.23981094]
[164.66358948 -24.55203629]
[164.65992737 -9.48725128]
[161.30363464 5.19889927]
[154.76304626 18.76976395]
[145.36622620 30.54463577]
[133.58453369 39.93288803]
[120.00891113 46.46361542]
[105.32032776 49.80923843]
[105.32032776 64.80923462]
[105.32032776 79.80923462]
[116.80012512 89.46398163]
[131.57807922 86.89253235]
[146.02005005 82.83921814]
[159.97785950 77.34562683]
[173.93566895 71.85204315]
[187.89347839 66.35845184]
[201.85128784 60.86486053]
[215.80909729 55.37127304]
[229.65270996 49.59592819]
[243.37641907 43.54120255]
[257.10012817 37.48648071]
[269.15097046 25.56115913]
[283.94625854 33.83980179]
[280.08691406 50.34863663]
[263.15484619 51.21019363]
[249.43113708 57.26491928]
[235.70742798 63.31964111]
[233.16053772 67.42292786]
[227.98167419 69.93787384]
[221.30268860 69.32908630]
[207.34487915 74.82266998]
[193.38706970 80.31626129]
[179.42926025 85.80985260]
[165.47145081 91.30344391]
[151.51364136 96.79702759]
[165.86700439 101.15370941]
[176.21649170 112.01134491]
[179.88072205 126.55690765]
[175.91035461 141.02191162]
[165.33404541 151.65872192]
[150.89193726 155.71153259]
[136.32569885 152.13034058]
[125.40921021 141.84297180]
[120.97071838 127.51467896]
[124.16016388 112.85768890]
[134.14952087 101.67047882]
[119.37157440 104.24192810]
[109.71682739 115.72173309]
[109.71682739 130.72172546]
[109.71682739 145.72172546]
[109.71682739 160.72172546]
[109.71682739 175.72172546]
[109.71682739 190.72172546]
[109.71682739 205.72172546]
[109.71682739 220.72172546]
[109.71682739 235.72172546]
[109.71682739 250.72172546]
[109.71682739 265.72174072]
[109.71682739 280.72174072]
[124.38208771 284.18969727]
[137.85200500 290.94677734]
[149.40016174 300.62857056]
[158.40377808 312.71292114]
[164.37730408 326.54815674]
[166.99859619 341.38815308]
[166.12628174 356.43261719]
[161.80741882 370.87020874]
[154.27491760 383.92233276]
[143.93498230 394.88510132]
[131.34523010 403.16729736]
[117.18462372 408.32232666]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 60]
[26 59]
[27 58]
[29 57]
[30 56]
[31 55]
[32 54]
[33 53]
[34 52]
[62 93]
[63 92]
[64 91]
[94 130]
[95 129]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 113]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
