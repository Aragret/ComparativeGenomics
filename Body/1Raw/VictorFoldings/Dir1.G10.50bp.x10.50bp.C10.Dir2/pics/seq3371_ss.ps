%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCUAGGCGGGGGGGGGGUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUACUxxxxxxxxxxCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACCCCCCCCCCCAAUCCUAGGC\
) } def
/len { sequence length } bind def

/coor [
[84.30448914 408.89782715]
[71.08428955 401.62536621]
[60.19748306 391.17834473]
[52.38635254 378.26910400]
[48.18347168 363.77780151]
[47.87540054 348.69244385]
[51.48314285 334.04162598]
[58.76071548 320.82424927]
[69.21192169 309.94146729]
[82.12418365 302.13531494]
[96.61711884 297.93804932]
[96.30506134 282.94128418]
[95.99301147 267.94451904]
[95.68095398 252.94776917]
[95.36889648 237.95101929]
[95.05683899 222.95426941]
[94.74478149 207.95751953]
[94.43272400 192.96075439]
[94.12067413 177.96400452]
[93.80861664 162.96725464]
[93.49655914 147.97050476]
[75.56875610 143.05233765]
[60.44512558 131.54541016]
[50.49942780 114.86914062]
[47.43408585 95.27722168]
[32.45436859 94.49737549]
[17.47465515 93.71752930]
[2.49494100 92.93768311]
[-12.48477364 92.15783691]
[-27.46448708 91.37799835]
[-33.09931946 105.43244171]
[-42.99419785 116.89411926]
[-56.07580566 124.51975250]
[-70.92514038 127.48217773]
[-85.93146515 125.46003723]
[-99.46699524 118.67269897]
[-110.06350708 107.85638428]
[-116.57157135 94.18437195]
[-118.28523254 79.13970184]
[-115.01861572 64.35430908]
[-107.12605286 51.43199539]
[-95.46366882 41.77448273]
[-81.29651642 36.42934036]
[-66.16133881 35.97637558]
[-51.69989395 40.46471786]
[-39.48084259 49.40750885]
[-30.82961845 61.83469772]
[-26.68464279 76.39827728]
[-11.70492840 77.17812347]
[3.27478600 77.95796967]
[18.25450134 78.73781586]
[33.23421478 79.51766205]
[48.21392822 80.29750824]
[55.39643860 67.12892151]
[46.63022995 54.95708847]
[37.86402512 42.78525162]
[29.09781647 30.61341286]
[20.33160973 18.44157600]
[5.16413450 12.20621300]
[3.24884701 -4.08070517]
[16.55603027 -13.66459370]
[31.39639473 -6.68636894]
[32.50344467 9.67536926]
[41.26965332 21.84720612]
[50.03586197 34.01904297]
[58.80206680 46.19087982]
[67.56827545 58.36271667]
[81.35398102 52.96780396]
[95.49768829 51.80049133]
[96.43331909 36.82969666]
[82.91497803 29.81725121]
[73.42266083 17.90860939]
[69.60095215 3.16701984]
[72.11200714 -11.85344982]
[80.52075195 -24.55041313]
[93.37033081 -32.72404099]
[108.43447113 -34.95820999]
[123.10322571 -30.86582756]
[134.83514404 -21.15592957]
[141.59757996 -7.51081467]
[142.21893311 7.70542049]
[136.59153748 21.85647011]
[125.69036102 32.49058151]
[111.40410614 37.76532745]
[110.46848297 52.73611832]
[120.70129395 56.24020004]
[129.90066528 61.92883301]
[137.60736084 69.51803589]
[143.43663025 78.62893677]
[157.75923157 74.17212677]
[172.08183289 69.71530914]
[186.30860901 64.96149445]
[200.43341064 59.91273880]
[214.55821228 54.86398315]
[228.68301392 49.81522369]
[242.80781555 44.76646805]
[256.93261719 39.71771240]
[271.00415039 34.52229691]
[285.02084351 29.18078423]
[299.03756714 23.83927155]
[313.05429077 18.49775887]
[319.28796387 3.97478485]
[333.99591064 -1.80896020]
[348.45217896 4.57791710]
[354.08007812 19.34619522]
[347.54074097 33.73411942]
[332.71377563 39.20558548]
[318.39578247 32.51447296]
[304.37908936 37.85598373]
[290.36236572 43.19749832]
[276.34567261 48.53900909]
[271.18188477 53.89447784]
[261.98138428 53.84251404]
[247.85658264 58.89127350]
[233.73178101 63.94002914]
[219.60697937 68.98878479]
[205.48216248 74.03754425]
[191.35736084 79.08629608]
[188.51911926 83.00035095]
[183.16453552 85.13571167]
[176.53865051 84.03790283]
[162.21604919 88.49472046]
[147.89344788 92.95153809]
[148.11334229 105.34502411]
[145.17874146 117.38806915]
[139.28202820 128.29107666]
[130.80984497 137.33921814]
[120.31762695 143.93925476]
[108.49330902 147.65844727]
[108.80536652 162.65519714]
[109.11742401 177.65194702]
[109.42948151 192.64871216]
[109.74153900 207.64546204]
[110.05359650 222.64221191]
[110.36564636 237.63896179]
[110.67770386 252.63572693]
[110.98976135 267.63247681]
[111.30181885 282.62924194]
[111.61387634 297.62597656]
[126.26886749 301.21673584]
[139.49467468 308.47900391]
[150.38954163 318.91760254]
[158.21064758 331.82080078]
[162.42471313 346.30886841]
[162.74443054 361.39398193]
[159.14801025 376.04757690]
[151.88064575 389.27059937]
[141.43783569 400.16140747]
[128.53161621 407.97753906]
[114.04192352 412.18600464]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[25 53]
[26 52]
[27 51]
[28 50]
[29 49]
[30 48]
[54 67]
[55 66]
[56 65]
[57 64]
[58 63]
[69 85]
[70 84]
[89 123]
[90 122]
[91 121]
[92 118]
[93 117]
[94 116]
[95 115]
[96 114]
[97 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
