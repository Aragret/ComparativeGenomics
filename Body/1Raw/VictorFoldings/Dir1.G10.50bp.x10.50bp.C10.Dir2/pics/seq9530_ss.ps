%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAACAAAAGGGGGGGGGGCGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCxxxxxxxxxxAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCCCCCCCCCCCUUACACAAAA\
) } def
/len { sequence length } bind def

/coor [
[83.58493805 406.84277344]
[71.70066833 397.56768799]
[62.38195801 385.71755981]
[56.17059326 371.98141479]
[53.42769241 357.15777588]
[54.31272125 342.10852051]
[58.77422714 327.70855713]
[66.55282593 314.79513550]
[77.19627380 304.11898804]
[90.08578491 296.30078125]
[104.47196960 291.79513550]
[103.53634644 276.82434082]
[102.60071564 261.85354614]
[101.66508484 246.88275146]
[100.72946167 231.91195679]
[99.79383087 216.94116211]
[98.85820007 201.97036743]
[97.92257690 186.99958801]
[96.98694611 172.02879333]
[96.05131531 157.05799866]
[95.11569214 142.08720398]
[94.18006134 127.11641693]
[77.64650726 116.41624451]
[72.38462067 97.43824005]
[81.04769135 79.75199127]
[74.14069366 66.43683624]
[67.23369598 53.12168503]
[60.32669449 39.80652618]
[45.52941895 34.94048691]
[38.71442032 21.33863258]
[43.44463730 7.26167822]
[36.53763962 -6.05347729]
[23.31489754 -14.74080563]
[24.32263756 -29.60128021]
[17.41563988 -42.91643524]
[7.31698990 -54.00775146]
[-5.29413843 -62.12929535]
[-17.90526581 -70.25083923]
[-30.51639557 -78.37237549]
[-43.45445251 -85.96228790]
[-56.69703674 -93.00742340]
[-69.93962097 -100.05255890]
[-83.18220520 -107.09769440]
[-92.29284668 -108.38147736]
[-96.62476349 -114.42963409]
[-109.71791840 -121.74873352]
[-122.81107330 -129.06784058]
[-135.90422058 -136.38694763]
[-152.68008423 -138.83778381]
[-154.96905518 -155.63650513]
[-139.46047974 -162.48635864]
[-128.58511353 -149.48010254]
[-115.49196625 -142.16099548]
[-102.39881134 -134.84188843]
[-89.30565643 -127.52278900]
[-76.13706970 -120.34027863]
[-62.89448547 -113.29514313]
[-49.65190125 -106.25000763]
[-36.40931702 -99.20487213]
[-33.64186096 -99.94550323]
[-30.40560532 -99.59819794]
[-27.12714958 -97.97535706]
[-24.29407310 -95.05222321]
[-22.39485168 -90.98350525]
[-9.78372478 -82.86196136]
[2.82740378 -74.74042511]
[15.43853188 -66.61888123]
[8.89975739 -80.11867523]
[5.58629751 -94.74813080]
[5.67013979 -109.74789429]
[9.14693356 -124.33939362]
[15.83621120 -137.76524353]
[25.39076233 -149.32858276]
[37.31465149 -158.42918396]
[50.98895645 -164.59466553]
[65.70391083 -167.50503540]
[80.69570923 -167.00921631]
[95.18620300 -163.13293457]
[108.42325592 -156.07740784]
[119.71977234 -146.20883179]
[128.48941040 -134.03947449]
[134.27697754 -120.20097351]
[136.78205872 -105.41162872]
[135.87463379 -90.43910217]
[131.60179138 -76.06054688]
[124.18531799 -63.02229691]
[114.01017761 -52.00110626]
[101.60452271 -43.56904602]
[87.61227417 -38.16378021]
[72.75970459 -36.06587601]
[57.81775284 -37.38423157]
[43.56198883 -42.05041122]
[30.73079491 -49.82343674]
[37.63779449 -36.50827789]
[50.36650085 -28.77334023]
[49.85279465 -12.96047592]
[56.75979233 0.35467964]
[70.99190521 4.59526396]
[78.18626404 18.00033188]
[73.64185333 32.89952850]
[80.54885101 46.21468353]
[87.45584869 59.52984238]
[94.36284637 72.84499359]
[108.36180878 73.55662537]
[120.22482300 81.02295685]
[126.92161560 93.33678436]
[141.91430664 93.80482483]
[156.90701294 94.27287292]
[171.90376282 94.58492279]
[186.90295410 94.74095917]
[201.90213013 94.89699554]
[215.91531372 86.37860870]
[230.16712952 94.49142456]
[229.99653625 110.88968658]
[215.57902527 118.70426178]
[201.74609375 109.89618683]
[186.74691772 109.74015045]
[171.74772644 109.58411407]
[164.98278809 112.67948914]
[156.43896484 109.26556396]
[141.44627380 108.79752350]
[126.45357513 108.32948303]
[123.82436371 114.19757843]
[119.91446686 119.30248260]
[114.93405151 123.36975861]
[109.15084839 126.18078613]
[110.08647919 141.15158081]
[111.02210999 156.12237549]
[111.95773315 171.09315491]
[112.89336395 186.06394958]
[113.82899475 201.03474426]
[114.76462555 216.00553894]
[115.70024872 230.97633362]
[116.63587952 245.94711304]
[117.57151031 260.91790771]
[118.50713348 275.88870239]
[119.44276428 290.85949707]
[134.27799988 293.53890991]
[148.04063416 299.69140625]
[159.93052673 308.95932007]
[169.25640869 320.80377197]
[175.47610474 334.53616333]
[178.22799683 349.35812378]
[177.35209656 364.40792847]
[172.89932251 378.81057739]
[165.12854004 391.72872925]
[154.49157715 402.41134644]
[141.60679626 410.23733521]
[127.22335052 414.75170898]
[112.17744446 415.69204712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 126]
[25 103]
[26 102]
[27 101]
[28 100]
[31 97]
[32 96]
[34 94]
[35 93]
[36 67]
[37 66]
[38 65]
[39 64]
[40 59]
[41 58]
[42 57]
[43 56]
[45 55]
[46 54]
[47 53]
[48 52]
[106 122]
[107 121]
[108 120]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
