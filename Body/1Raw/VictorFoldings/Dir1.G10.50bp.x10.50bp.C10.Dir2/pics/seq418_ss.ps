%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAAACAAGGGGGGGGGGAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUxxxxxxxxxxCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCCCCCCCCCCCAAAGACAA\
) } def
/len { sequence length } bind def

/coor [
[48.90693665 361.26242065]
[35.06099701 355.24639893]
[23.35233688 345.71697998]
[14.64981270 333.38131714]
[9.59921074 319.15478516]
[8.57531929 304.09310913]
[11.65411854 289.31393433]
[18.60713959 275.91403198]
[28.91842461 264.88769531]
[41.82280350 257.05319214]
[56.36269379 252.99186707]
[56.36269379 237.99186707]
[56.36269379 222.99186707]
[56.36269379 207.99186707]
[56.36269379 192.99186707]
[56.36269379 177.99186707]
[56.36269379 162.99186707]
[56.36269379 147.99186707]
[56.36269379 132.99186707]
[56.36269379 117.99186707]
[56.36269379 102.99186707]
[54.52529907 117.87890625]
[45.75349045 130.04670715]
[32.21021271 136.49493408]
[17.23496246 135.63359070]
[4.52033377 127.67505646]
[-2.79850745 114.58175659]
[-2.91688347 99.58222198]
[4.19439459 86.37503815]
[16.78183174 78.21682739]
[31.74161911 77.11923218]
[45.38403320 83.35213470]
[32.60667801 75.49470520]
[19.82931900 67.63728333]
[10.81649685 65.78771973]
[6.87027311 59.48113632]
[-5.74085522 51.35959625]
[-18.35198402 43.23805237]
[-34.14361954 42.27121353]
[-40.65471649 28.87513542]
[-53.26584625 20.75359344]
[-59.94416428 20.04116631]
[-64.53355408 16.55278778]
[-66.22286224 12.02269077]
[-78.48522949 3.38357496]
[-90.74759674 -5.25554132]
[-103.00996399 -13.89465714]
[-116.91465759 -7.37122965]
[-132.21681213 -8.69011021]
[-144.80024719 -17.49652863]
[-151.28005981 -31.42160034]
[-149.91320801 -46.71955109]
[-141.06739807 -59.27531052]
[-127.12208557 -65.71144104]
[-111.82849121 -64.29665375]
[-99.30052185 -55.41152954]
[-92.90813446 -41.44610596]
[-94.37084961 -26.15702629]
[-82.10848236 -17.51791000]
[-69.84610748 -8.87879372]
[-57.58374405 -0.23967715]
[-45.14430237 8.14246559]
[-32.53317261 16.26400757]
[-17.64356995 16.64994049]
[-10.23044109 30.62692451]
[2.38068700 38.74846649]
[14.99181461 46.87001038]
[27.68674469 54.85992432]
[40.46410370 62.71735001]
[53.24145889 70.57477570]
[45.79532242 57.55344772]
[34.12956238 48.12423325]
[29.26629829 33.93449783]
[32.69556046 19.33175278]
[43.36667633 8.79005909]
[58.01017761 5.53923082]
[72.13951874 10.57527351]
[81.42568207 22.35521889]
[83.02353668 37.26987076]
[76.44351196 50.74961472]
[75.20671082 65.69853973]
[83.45899963 53.17257690]
[91.71128845 40.64661407]
[99.96357727 28.12065315]
[93.00946045 14.42628098]
[93.85022736 -0.90958208]
[102.25971985 -13.76166534]
[115.97582245 -20.67282295]
[131.30897522 -19.78398705]
[144.13464355 -11.33425331]
[151.00276184 2.40344572]
[150.06587219 17.73373604]
[141.57597351 30.53284645]
[127.81681824 37.35788345]
[112.48954010 36.37294388]
[104.23725128 48.89890289]
[95.98496246 61.42486572]
[87.73267365 73.95082855]
[110.61801147 76.11859894]
[122.47081757 93.19783783]
[137.46351624 93.66588593]
[152.45620728 94.13392639]
[167.44891357 94.60196686]
[182.44160461 95.07000732]
[174.54484558 82.31692505]
[179.39076233 68.12125397]
[193.43737793 62.85888290]
[206.41775513 70.37618256]
[208.84429932 85.17861176]
[198.94398499 96.44653320]
[213.80703735 98.46886444]
[228.67007446 100.49120331]
[243.53312683 102.51353455]
[258.39617920 104.53587341]
[273.36090088 97.82850647]
[286.49169922 107.65265656]
[284.28073120 123.90207672]
[269.00244141 129.86076355]
[256.37384033 119.39891815]
[241.51078796 117.37658691]
[226.64773560 115.35424805]
[211.78469849 113.33191681]
[196.92164612 111.30957794]
[181.97355652 110.06270599]
[166.98086548 109.59466553]
[151.98817444 109.12661743]
[136.99546814 108.65857697]
[122.00277710 108.19053650]
[96.71225739 125.92786407]
[71.36269379 102.99186707]
[71.36269379 117.99186707]
[71.36269379 132.99186707]
[71.36269379 147.99186707]
[71.36269379 162.99186707]
[71.36269379 177.99186707]
[71.36269379 192.99186707]
[71.36269379 207.99186707]
[71.36269379 222.99186707]
[71.36269379 237.99186707]
[71.36269379 252.99186707]
[85.90258026 257.05319214]
[98.80696106 264.88769531]
[109.11824799 275.91403198]
[116.07126617 289.31393433]
[119.15006256 304.09310913]
[118.12617493 319.15478516]
[113.07556915 333.38131714]
[104.37304688 345.71697998]
[92.66438293 355.24639893]
[78.81844330 361.26242065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[32 70]
[33 69]
[34 68]
[36 67]
[37 66]
[38 65]
[40 63]
[41 62]
[44 61]
[45 60]
[46 59]
[47 58]
[81 98]
[82 97]
[83 96]
[84 95]
[100 128]
[101 127]
[102 126]
[103 125]
[104 124]
[110 123]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
