%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUUCCAGGGGGGGGGGCUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCxxxxxxxxxxCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCCCCCCCCCCCUUCCA\
) } def
/len { sequence length } bind def

/coor [
[87.11904907 359.49349976]
[73.27310944 353.47747803]
[61.56444931 343.94805908]
[52.86192703 331.61239624]
[47.81132507 317.38586426]
[46.78743362 302.32418823]
[49.86623383 287.54501343]
[56.81925201 274.14511108]
[67.13053894 263.11877441]
[80.03491974 255.28425598]
[94.57480621 251.22294617]
[94.57480621 236.22294617]
[94.57480621 221.22294617]
[94.57480621 206.22294617]
[94.57480621 191.22294617]
[94.57480621 176.22294617]
[94.57480621 161.22294617]
[94.57480621 146.22294617]
[94.57480621 131.22294617]
[94.57480621 116.22294617]
[84.36132812 105.23728180]
[69.40107727 104.14596558]
[54.44083023 103.05465698]
[39.48057938 101.96334839]
[24.52033043 100.87203979]
[9.56008244 101.96334839]
[-5.08341885 105.21417236]
[-19.72691917 108.46499634]
[-34.37042236 111.71582794]
[-49.01392365 114.96665192]
[-60.72919083 126.44203949]
[-76.44992065 121.77398682]
[-80.00397491 105.76459503]
[-67.73524475 94.88294220]
[-52.26474762 100.32315063]
[-37.62124634 97.07232666]
[-22.97774506 93.82149506]
[-8.33424473 90.57067108]
[6.30925703 87.31984711]
[6.93323421 72.33283234]
[-7.38936329 67.87601471]
[-20.44764519 76.47923279]
[-35.97486115 74.62463379]
[-46.63953781 63.18790817]
[-47.40613937 47.56912613]
[-37.91270065 35.14299774]
[-22.64173126 31.77676392]
[-8.80371857 39.05985641]
[-2.93254733 53.55341721]
[11.39004993 58.01023483]
[19.63124847 63.91828918]
[24.74278831 71.34905243]
[26.62622070 79.06280518]
[25.61164093 85.91178894]
[40.57189178 87.00309753]
[55.53213882 88.09441376]
[70.49238586 89.18572235]
[85.45263672 90.27703094]
[87.39234924 85.45268250]
[90.92937469 81.05634308]
[90.30539703 66.06932831]
[89.68141937 51.08231354]
[89.05744171 36.09529495]
[88.43346405 21.10828018]
[87.80948639 6.12126350]
[87.18550873 -8.86575317]
[72.73048401 -13.42951870]
[60.70999146 -22.66442871]
[52.57556534 -35.45532227]
[49.30948257 -50.25763702]
[51.30613327 -65.28392029]
[58.32441330 -78.71967316]
[69.51683044 -88.94247437]
[83.53185272 -94.71785736]
[98.67708588 -95.34841919]
[113.12368011 -90.75801849]
[125.12713623 -81.50097656]
[133.23797607 -68.69511414]
[136.47677612 -53.88680649]
[134.45243835 -38.86422729]
[127.40940857 -25.44142723]
[116.19816589 -15.23927498]
[102.17252350 -9.48972988]
[102.79650116 5.49728584]
[103.42047882 20.48430252]
[104.04445648 35.47131729]
[104.66843414 50.45833588]
[105.29241180 65.44535065]
[105.91638947 80.43236542]
[117.41819763 90.06089020]
[132.28123474 88.03855896]
[144.91226196 78.51132965]
[158.56648254 84.46206665]
[173.42953491 82.43973541]
[182.99218750 70.14365387]
[198.09423828 68.30445099]
[209.75773621 77.49674988]
[224.62077332 75.47441864]
[239.48382568 73.45207977]
[241.54776001 58.49739075]
[247.57093811 44.65456390]
[257.10641479 32.95082855]
[269.44656372 24.25468063]
[283.67568970 19.21143150]
[298.73791504 18.19532394]
[313.51547241 21.28175926]
[326.91180420 28.24170494]
[337.93280029 38.55868530]
[345.76065063 51.46711349]
[349.81445312 66.00910187]
[349.79339600 81.10552979]
[345.69903564 95.63614655]
[337.83520508 108.52268219]
[326.78546143 118.80886841]
[313.36975098 125.73141479]
[298.58364868 128.77661133]
[283.52432251 127.71847534]
[269.30932617 122.63555145]
[256.99346924 113.90500641]
[247.49069214 102.17470551]
[241.50616455 88.31513214]
[226.64311218 90.33746338]
[211.78005981 92.35979462]
[202.99661255 104.33420563]
[187.95217896 106.59687042]
[175.45185852 97.30278015]
[160.58882141 99.32511139]
[149.02090454 108.70769501]
[134.30357361 102.90160370]
[119.44052887 104.92394257]
[109.57480621 116.22294617]
[109.57480621 131.22294617]
[109.57480621 146.22294617]
[109.57480621 161.22294617]
[109.57480621 176.22294617]
[109.57480621 191.22294617]
[109.57480621 206.22294617]
[109.57480621 221.22294617]
[109.57480621 236.22294617]
[109.57480621 251.22294617]
[124.11469269 255.28425598]
[137.01907349 263.11877441]
[147.33035278 274.14511108]
[154.28338623 287.54501343]
[157.36218262 302.32418823]
[156.33828735 317.38586426]
[151.28768921 331.61239624]
[142.58515930 343.94805908]
[130.87649536 353.47747803]
[117.03056335 359.49349976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 58]
[22 57]
[23 56]
[24 55]
[25 54]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 50]
[41 49]
[60 89]
[61 88]
[62 87]
[63 86]
[64 85]
[65 84]
[66 83]
[90 130]
[91 129]
[93 127]
[94 126]
[97 123]
[98 122]
[99 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
