%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCAAUACGGGGGGGGGGCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUxxxxxxxxxxCCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGCCCCCCCCCCACCCCAAUAC\
) } def
/len { sequence length } bind def

/coor [
[81.56843567 550.30358887]
[67.72249603 544.28753662]
[56.01383209 534.75811768]
[47.31130600 522.42248535]
[42.26070404 508.19595337]
[41.23681259 493.13427734]
[44.31561279 478.35510254]
[51.26863480 464.95520020]
[61.57991791 453.92886353]
[74.48429871 446.09432983]
[89.02418518 442.03302002]
[89.02418518 427.03302002]
[89.02418518 412.03302002]
[89.02418518 397.03302002]
[89.02418518 382.03302002]
[89.02418518 367.03302002]
[89.02418518 352.03302002]
[89.02418518 337.03302002]
[89.02418518 322.03302002]
[89.02418518 307.03302002]
[89.02418518 292.03302002]
[89.02418518 277.03302002]
[75.55114746 272.58236694]
[64.09951019 264.16799927]
[55.80147934 252.60533142]
[51.48255539 239.02182007]
[51.57945251 224.74707031]
[56.09595108 211.18264771]
[64.60124969 199.66452026]
[76.27099609 191.33145142]
[89.96718597 187.01239014]
[90.27923584 172.01564026]
[90.59129333 157.01889038]
[90.90335083 142.02212524]
[87.87851715 135.22537231]
[91.38113403 126.71751404]
[92.00511169 111.73049927]
[84.01519012 99.03556824]
[70.23281097 93.11560822]
[56.45042801 87.19564056]
[45.58733749 97.82868958]
[31.48019791 103.49057770]
[16.28024292 103.31791687]
[2.30535674 97.33702850]
[-8.31339169 86.45996094]
[-13.95671940 72.34538269]
[-13.76406193 57.14566803]
[-7.76479673 43.17866516]
[3.12623143 32.57423401]
[17.24822044 26.94947624]
[32.44766617 27.16212845]
[46.40676880 33.17975998]
[56.99686432 44.08472824]
[62.60303879 58.21410370]
[62.37039185 73.41326141]
[76.15277100 79.33322144]
[89.93515778 85.25318909]
[94.29317474 87.63752747]
[97.53412628 90.95188141]
[104.44112396 77.63672638]
[111.34812927 64.32157135]
[98.45248413 71.98331451]
[84.26486206 76.85276794]
[69.38217163 78.72505951]
[54.43054199 77.52142334]
[40.03900909 73.29250336]
[26.81304932 66.21620178]
[15.30909729 56.59024429]
[6.01114130 44.81960297]
[-0.68963897 31.39948654]
[-4.51133204 16.89449883]
[-5.29315329 1.91488719]
[-3.00221062 -12.90913296]
[2.26511288 -26.95389366]
[10.28721333 -39.62850952]
[20.72658730 -50.39974213]
[33.14403534 -58.81443024]
[47.01713943 -64.51855469]
[61.76223373 -67.27213287]
[76.75897217 -66.95931244]
[91.37641907 -63.59326553]
[104.99959564 -57.31560135]
[117.05535126 -48.39043045]
[127.03649139 -37.19324875]
[134.52308655 -24.19513512]
[139.20016479 -9.94294548]
[140.87095642 4.96371222]
[139.46516418 19.89769173]
[135.04194641 34.23070145]
[127.78398895 47.36460495]
[140.87713623 40.04549789]
[153.97029114 32.72639465]
[167.06344604 25.40728760]
[180.15660095 18.08818245]
[193.01501465 10.36409664]
[205.62612915 2.24255443]
[218.23725891 -5.87898779]
[225.25274658 -20.70177460]
[241.61721802 -21.76772118]
[250.49630737 -7.98027134]
[242.75596619 6.47722769]
[226.35881042 6.73214054]
[213.74768066 14.85368252]
[201.13655090 22.97522545]
[200.04483032 26.39218712]
[197.20632935 29.43267441]
[192.82479858 31.26423454]
[187.47570801 31.18133545]
[174.38255310 38.50044250]
[161.28939819 45.81954575]
[148.19624329 53.13865280]
[135.10308838 60.45775986]
[124.66328430 71.22856903]
[117.75627899 84.54372406]
[110.84928131 97.85887909]
[106.99212646 112.35447693]
[106.36814880 127.34149170]
[105.90010834 142.33418274]
[105.58805084 157.33094788]
[105.27599335 172.32769775]
[104.96393585 187.32444763]
[119.82307434 192.98904419]
[131.83160400 203.37297058]
[139.55560303 217.21209717]
[142.08103943 232.83117676]
[139.12187195 248.34664917]
[131.05241394 261.89379883]
[118.85997772 271.85083008]
[104.02418518 277.03302002]
[104.02418518 292.03302002]
[104.02418518 307.03302002]
[104.02418518 322.03302002]
[104.02418518 337.03302002]
[104.02418518 352.03302002]
[104.02418518 367.03302002]
[104.02418518 382.03302002]
[104.02418518 397.03302002]
[104.02418518 412.03302002]
[104.02418518 427.03302002]
[104.02418518 442.03302002]
[118.56407166 446.09432983]
[131.46846008 453.92886353]
[141.77973938 464.95520020]
[148.73275757 478.35510254]
[151.81155396 493.13427734]
[150.78767395 508.19595337]
[145.73706055 522.42248535]
[137.03454590 534.75811768]
[125.32588196 544.28753662]
[111.47994232 550.30358887]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[31 121]
[32 120]
[33 119]
[34 118]
[36 117]
[37 116]
[38 57]
[39 56]
[40 55]
[59 115]
[60 114]
[61 113]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
