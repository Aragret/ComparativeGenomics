%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCAAACCGGGGGGGGGGCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCxxxxxxxxxxCUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACC\
) } def
/len { sequence length } bind def

/coor [
[29.05913925 311.38919067]
[17.05361557 306.97317505]
[5.32108879 301.87597656]
[-6.09982681 296.11431885]
[-17.17154312 289.70721436]
[-27.85761833 282.67575073]
[-38.12288666 275.04306030]
[-47.93355560 266.83422852]
[-57.25734329 258.07632446]
[-66.06356049 248.79817200]
[-77.56536102 258.42669678]
[-89.06716156 268.05523682]
[-100.56896973 277.68374634]
[-112.07077026 287.31228638]
[-123.57257080 296.94079590]
[-135.07437134 306.56933594]
[-146.57618713 316.19784546]
[-158.07798767 325.82638550]
[-169.57978821 335.45489502]
[-177.84387207 350.25833130]
[-194.35649109 346.41519165]
[-195.23471069 329.48400879]
[-179.20831299 323.95309448]
[-167.70651245 314.32458496]
[-156.20471191 304.69604492]
[-144.70291138 295.06753540]
[-133.20109558 285.43899536]
[-121.69929504 275.81048584]
[-110.19749451 266.18194580]
[-98.69569397 256.55340576]
[-87.19388580 246.92489624]
[-75.69208527 237.29637146]
[-98.05491638 202.43168640]
[-113.58338165 164.03234863]
[-121.74161530 123.42340851]
[-122.24811554 82.00618744]
[-137.15000916 80.29349518]
[-152.05191040 78.58081055]
[-166.87387085 85.59803772]
[-180.20622253 76.04918671]
[-178.33377075 59.75728607]
[-163.18275452 53.48205185]
[-150.33923340 63.67890549]
[-135.43733215 65.39159393]
[-120.53542328 67.10428619]
[-118.82585907 57.18361664]
[-116.67025757 47.35022354]
[-114.07301331 37.62414932]
[-111.03940582 28.02521896]
[-107.57563782 18.57299805]
[-103.68875122 9.28675175]
[-99.38668060 0.18540987]
[-94.67819214 -8.71247578]
[-89.57288361 -17.38876724]
[-84.08116150 -25.82578087]
[-78.21421814 -34.00632095]
[-71.98400879 -41.91370773]
[-65.40324402 -49.53182602]
[-58.48533249 -56.84514999]
[-51.24436951 -63.83876801]
[-43.69511795 -70.49842834]
[-35.85297012 -76.81055450]
[-27.73390770 -82.76227570]
[-19.35447884 -88.34146881]
[-10.73176384 -93.53675842]
[-1.88334119 -98.33755493]
[7.17275476 -102.73406982]
[16.41806412 -106.71734619]
[25.83374214 -110.27925873]
[35.40059662 -113.41255188]
[45.09912491 -116.11083984]
[54.90956116 -118.36861420]
[64.81191254 -120.18128967]
[74.78598022 -121.54515076]
[84.81144714 -122.45742798]
[94.86787415 -122.91626740]
[104.93476105 -122.92072296]
[114.99158478 -122.47079468]
[125.01786041 -121.56739044]
[134.99313354 -120.21235657]
[144.89707947 -118.40845490]
[154.70950317 -116.15936279]
[164.41043091 -113.46966553]
[173.98005676 -110.34484100]
[183.39888000 -106.79126740]
[192.64770508 -102.81617737]
[201.70770264 -98.42768097]
[210.56036377 -93.63472748]
[219.18768311 -88.44706726]
[227.57203674 -82.87529755]
[235.69636536 -76.93076324]
[243.54411316 -70.62558746]
[251.09924316 -63.97261429]
[258.34640503 -56.98540878]
[265.27078247 -49.67821503]
[271.85830688 -42.06592560]
[278.09548950 -34.16405487]
[283.96969604 -25.98871613]
[289.46887207 -17.55656624]
[294.58184814 -8.88479805]
[299.29821777 0.00891469]
[303.60836792 9.10644341]
[307.50344849 18.38924408]
[310.97558594 27.83839607]
[314.01770020 37.43463898]
[316.62356567 47.15840912]
[318.78787231 56.98988724]
[320.50622559 66.90903473]
[321.77508545 76.89563751]
[322.59191895 86.92932892]
[322.95501709 96.98966980]
[322.86364746 107.05614471]
[322.31802368 117.10823059]
[321.31924438 127.12545013]
[319.86935425 137.08737183]
[317.97125244 146.97370911]
[315.62887573 156.76429749]
[312.84698486 166.43916321]
[309.63122559 175.97862244]
[305.98815918 185.36320496]
[319.64440918 191.56860352]
[335.90496826 189.44122314]
[345.66146851 202.62237549]
[338.87725830 217.55242920]
[322.53134155 218.87261963]
[313.43899536 205.22485352]
[299.78274536 199.01943970]
[293.77566528 210.31317139]
[287.13079834 221.24385071]
[279.87002563 231.77546692]
[272.01727295 241.87339783]
[263.59835815 251.50437927]
[254.64100647 260.63671875]
[245.17471313 269.24038696]
[235.23059082 277.28701782]
[224.84140015 284.75015259]
[214.04133606 291.60525513]
[202.86592102 297.82974243]
[191.35195923 303.40310669]
[179.53733826 308.30700684]
[167.46092224 312.52536011]
[155.16249084 316.04421997]
[142.68251038 318.85202026]
[130.06204224 320.93951416]
[117.34264374 322.29986572]
[104.56615448 322.92858887]
[91.77464294 322.82357788]
[79.01020050 321.98519897]
[66.31484222 320.41622925]
[53.73035431 318.12179565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 32]
[11 31]
[12 30]
[13 29]
[14 28]
[15 27]
[16 26]
[17 25]
[18 24]
[19 23]
[36 45]
[37 44]
[38 43]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
