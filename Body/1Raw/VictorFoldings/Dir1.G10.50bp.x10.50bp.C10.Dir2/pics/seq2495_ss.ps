%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGAAGAACUGGGGGGGGGGAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUxxxxxxxxxxUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUAUCCCCCCCCCCCAUAGAAGAGCU\
) } def
/len { sequence length } bind def

/coor [
[80.06444550 408.10443115]
[66.57556152 401.37289429]
[55.09006500 391.60833740]
[46.27569580 379.37841797]
[40.64491272 365.39422607]
[38.52508545 350.46875000]
[40.03945541 335.46975708]
[45.09997559 321.26925659]
[53.41244125 308.69281006]
[64.49357605 298.47167969]
[77.69912720 291.20004272]
[92.26135254 287.30065918]
[91.95337677 272.30383301]
[91.64540100 257.30697632]
[91.33741760 242.31015015]
[91.02944183 227.31330872]
[90.72146606 212.31648254]
[90.41349030 197.31964111]
[90.10550690 182.32279968]
[89.79753113 167.32595825]
[89.48955536 152.32911682]
[89.18157959 137.33229065]
[77.21131897 128.29277039]
[62.70269394 132.10063171]
[48.19406509 135.90847778]
[33.68544006 139.71633911]
[19.17681694 143.52420044]
[4.66819048 147.33206177]
[-6.71574163 158.31916809]
[-20.99025917 154.06623840]
[-34.77562332 163.93539429]
[-48.07524872 153.42082214]
[-41.65329361 137.73022461]
[-24.79811859 139.55761719]
[-14.45193958 128.84286499]
[0.86033195 132.82344055]
[15.36895752 129.01557922]
[29.87758255 125.20771790]
[44.38620758 121.39985657]
[58.89483261 117.59200287]
[73.40345764 113.78414154]
[74.01928711 98.79678345]
[59.87196732 93.81146240]
[45.72465134 88.82614136]
[29.71293259 92.36971283]
[18.83931923 80.09385681]
[24.28965569 64.62693024]
[40.45709991 61.87997437]
[50.70997238 74.67882538]
[64.85729218 79.66414642]
[79.00460815 84.64946747]
[85.08127594 80.25354767]
[71.39069366 74.12427521]
[69.85361481 59.20323563]
[82.00714111 50.41165924]
[95.69758606 56.54122925]
[97.23460388 71.46170807]
[103.31127167 67.06578827]
[103.00329590 52.06894684]
[102.69532013 37.07210922]
[102.38733673 22.07527161]
[91.26650238 11.16817856]
[91.16780090 -4.04513454]
[101.63458252 -14.57993889]
[101.32660675 -29.57677650]
[101.01862335 -44.57361603]
[86.48147583 -48.71640015]
[73.81218719 -56.96142578]
[64.13729858 -68.57555389]
[58.31710052 -82.52606201]
[56.86912155 -97.57248688]
[59.92210770 -112.37689972]
[67.20459747 -125.62290955]
[78.06903839 -136.13269043]
[91.54936218 -142.97171021]
[106.44691467 -145.53186035]
[121.43701172 -143.58547974]
[135.18675232 -137.30566406]
[146.47349548 -127.25078583]
[154.29367065 -114.31492615]
[157.95187378 -99.64833832]
[157.12284851 -84.55515289]
[151.88029480 -70.37745667]
[142.69038391 -58.37591934]
[130.37026978 -49.61770630]
[116.01546478 -44.88159180]
[116.32344055 -29.88475418]
[116.63141632 -14.88791656]
[127.52188110 -4.79170847]
[128.04785156 10.41283035]
[117.38417816 21.76729393]
[117.69215393 36.76413345]
[118.00012970 51.76097107]
[118.30811310 66.75780487]
[129.69918823 76.51708221]
[144.56578064 74.52102661]
[151.99694824 61.02717209]
[165.78761292 54.57188416]
[180.56031799 57.44089890]
[190.68969727 68.32822418]
[205.55628967 66.33216095]
[220.42288208 64.33610535]
[235.28948975 62.34004974]
[250.15608215 60.34399414]
[265.02267456 58.34793472]
[279.86801147 56.19935608]
[294.69049072 53.89848328]
[309.51296997 51.59760666]
[324.33544922 49.29673386]
[339.05969238 40.89235687]
[351.21166992 52.71459198]
[343.21548462 67.66440582]
[326.63632202 64.11921692]
[311.81384277 66.42008972]
[296.99136353 68.72096252]
[282.16888428 71.02183533]
[276.00360107 75.18132782]
[267.01873779 73.21453094]
[252.15214539 75.21059418]
[237.28553772 77.20664978]
[222.41894531 79.20270538]
[207.55235291 81.19876099]
[192.68574524 83.19481659]
[185.78691101 96.36843109]
[172.29415894 103.03249359]
[157.28915405 100.44343567]
[146.56184387 89.38762665]
[131.69523621 91.38368225]
[128.99929810 119.69045258]
[104.17841339 137.02430725]
[104.48638916 152.02114868]
[104.79437256 167.01799011]
[105.10234833 182.01481628]
[105.41032410 197.01165771]
[105.71829987 212.00849915]
[106.02628326 227.00534058]
[106.33425903 242.00216675]
[106.64223480 256.99902344]
[106.95021057 271.99584961]
[107.25819397 286.99267578]
[121.96822357 290.29092407]
[135.46118164 297.01428223]
[146.95260620 306.77188110]
[155.77438354 318.99642944]
[161.41365051 332.97720337]
[163.54252625 347.90136719]
[162.03724670 362.90130615]
[156.98533630 377.10488892]
[148.68049622 389.68634033]
[137.60556030 399.91421509]
[124.40441895 407.19384766]
[109.84455872 411.10205078]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 41]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[30 34]
[42 51]
[43 50]
[44 49]
[58 94]
[59 93]
[60 92]
[61 91]
[64 88]
[65 87]
[66 86]
[95 128]
[96 127]
[100 123]
[101 122]
[102 121]
[103 120]
[104 119]
[105 118]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
