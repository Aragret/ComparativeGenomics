%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACCAACGGGGGGGGGGAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAxxxxxxxxxxAUUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGCCCCCCCCCCAUCAAACAAC\
) } def
/len { sequence length } bind def

/coor [
[86.40708160 350.64770508]
[72.56114197 344.63168335]
[60.85248184 335.10226440]
[52.14995575 322.76660156]
[47.09935379 308.54006958]
[46.07546234 293.47839355]
[49.15426254 278.69921875]
[56.10728455 265.29928589]
[66.41857147 254.27296448]
[79.32295227 246.43846130]
[93.86283875 242.37715149]
[93.86283875 227.37715149]
[93.86283875 212.37715149]
[93.86283875 197.37715149]
[93.86283875 182.37715149]
[93.86283875 167.37715149]
[93.86283875 152.37715149]
[93.86283875 137.37715149]
[93.86283875 122.37714386]
[93.86283875 107.37714386]
[90.17699432 110.72755432]
[86.16661072 113.73628235]
[71.75439453 117.89416504]
[57.34218216 122.05205536]
[55.28894043 137.14192200]
[47.27008820 150.08865356]
[34.67493820 158.64915466]
[19.68568230 161.34025574]
[4.89929485 157.69572449]
[-7.12239170 148.34698486]
[-14.29654789 134.91377258]
[-15.38020706 119.72345734]
[-10.18561935 105.40786743]
[0.38722149 94.44725800]
[14.50650692 88.74062347]
[29.72598648 89.27667236]
[43.40879059 95.96253204]
[53.18429565 107.63983917]
[67.59651184 103.48194885]
[82.00872803 99.32406616]
[68.18972778 93.49008942]
[63.17640686 79.35266876]
[70.23271942 66.11603546]
[84.76461029 62.39795685]
[97.31102753 70.61911011]
[99.70368958 85.42664337]
[107.15859985 72.41033173]
[114.61351013 59.39402008]
[103.24468231 46.99977875]
[96.38492584 31.67056847]
[94.72303009 14.98363304]
[98.41383362 -1.34945083]
[107.06395721 -15.65833473]
[119.77365875 -26.48471832]
[135.23040771 -32.73097229]
[133.98353577 -47.67905807]
[132.73666382 -62.62714767]
[128.88316345 -70.98193359]
[131.62265015 -77.89864349]
[130.68701172 -92.86943054]
[129.75138855 -107.84022522]
[120.59019470 -116.97949982]
[120.15296936 -129.51057434]
[128.12783813 -138.65983582]
[127.50386047 -153.64685059]
[126.87988281 -168.63386536]
[126.25590515 -183.62088013]
[111.97024536 -188.81591797]
[100.76345062 -199.08607483]
[94.34446716 -212.86523438]
[93.69215393 -228.05215454]
[98.90598297 -242.33097839]
[109.19087219 -253.52424622]
[122.97846222 -259.92510986]
[138.16624451 -260.55743408]
[152.43817139 -255.32482910]
[163.61791992 -245.02522278]
[170.00062561 -231.22923279]
[170.61297607 -216.04063416]
[165.36160278 -201.77558899]
[155.04730225 -190.60940552]
[141.24291992 -184.24485779]
[141.86689758 -169.25784302]
[142.49087524 -154.27082825]
[143.11485291 -139.28381348]
[153.30763245 -125.03223419]
[144.72218323 -108.77585602]
[145.65780640 -93.80506134]
[146.59342957 -78.83426666]
[147.68475342 -63.87401962]
[148.93162537 -48.92593384]
[150.17849731 -33.97784805]
[164.73069763 -30.95680809]
[177.83544922 -23.94548035]
[188.42384338 -13.51575375]
[195.63221741 -0.51834482]
[210.27572632 -3.76917052]
[224.91921997 -7.01999617]
[239.56272888 -10.27082253]
[241.23759460 -25.31985855]
[247.71040344 -39.00859833]
[258.27899170 -49.85218811]
[271.79699707 -56.67440033]
[286.79806519 -58.73521042]
[301.65496826 -55.81107330]
[314.75619507 -48.21918106]
[324.68057251 -36.78304672]
[330.35162354 -22.74317360]
[331.15417480 -7.62250376]
[327.00112915 6.93878603]
[318.34304810 19.36119652]
[306.11907959 28.29723549]
[291.65515137 32.77759171]
[276.52020264 32.31626511]
[262.35601807 26.96330261]
[250.69897461 17.29934883]
[242.81355286 4.37267923]
[228.17004395 7.62350512]
[213.52655029 10.87433052]
[198.88304138 14.12515640]
[198.26065063 27.23465538]
[194.37528992 39.78834534]
[187.46563721 50.98627090]
[177.96345520 60.11266708]
[166.46644592 66.58168030]
[153.70079041 69.97500610]
[140.47521973 70.06890106]
[127.62981415 66.84893036]
[120.17490387 79.86524200]
[112.71999359 92.88155365]
[108.86283875 107.37714386]
[108.86283875 122.37714386]
[108.86283875 137.37715149]
[108.86283875 152.37715149]
[108.86283875 167.37715149]
[108.86283875 182.37715149]
[108.86283875 197.37715149]
[108.86283875 212.37715149]
[108.86283875 227.37715149]
[108.86283875 242.37715149]
[123.40272522 246.43846130]
[136.30709839 254.27296448]
[146.61839294 265.29928589]
[153.57141113 278.69921875]
[156.65020752 293.47839355]
[155.62631226 308.54006958]
[150.57571411 322.76660156]
[141.87319946 335.10226440]
[130.16453552 344.63168335]
[116.31858826 350.64770508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 40]
[23 39]
[24 38]
[46 130]
[47 129]
[48 128]
[55 92]
[56 91]
[57 90]
[59 89]
[60 88]
[61 87]
[64 85]
[65 84]
[66 83]
[67 82]
[96 120]
[97 119]
[98 118]
[99 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
