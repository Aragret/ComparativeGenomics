%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCCCUUAGGGGGGGGGGUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACxxxxxxxxxxACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCCCCCCCCCCCAACCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[99.54692078 383.12341309]
[86.32672882 375.85095215]
[75.43991852 365.40393066]
[67.62879181 352.49468994]
[63.42591095 338.00338745]
[63.11783600 322.91802979]
[66.72557831 308.26721191]
[74.00315094 295.04983521]
[84.45436096 284.16705322]
[97.36662292 276.36090088]
[111.85955811 272.16363525]
[111.54750061 257.16687012]
[111.23544312 242.17012024]
[110.92338562 227.17335510]
[110.61133575 212.17660522]
[110.29927826 197.17985535]
[109.98722076 182.18310547]
[109.67516327 167.18634033]
[109.36310577 152.18959045]
[109.05104828 137.19284058]
[98.32387543 139.28503418]
[87.15013123 138.26319885]
[76.43811035 134.04808044]
[67.10295868 126.82600403]
[59.98897171 117.04570007]
[55.79453278 105.39234924]
[55.00629425 92.74030304]
[40.07198715 91.33799744]
[25.13768005 89.93569946]
[13.03481483 99.74173737]
[-2.09072065 98.10685730]
[-11.36469460 86.50819397]
[-26.29900169 85.10588837]
[-41.23331070 83.70358276]
[-49.52841949 96.56630707]
[-62.85668945 104.09066010]
[-78.15537262 104.54759216]
[-91.90895081 97.83211517]
[-100.95695496 85.48738861]
[-103.22020721 70.35014343]
[-98.17864227 55.89879990]
[-86.99076080 45.45418549]
[-72.22747040 41.41638565]
[-57.28126144 44.71326065]
[-45.58666229 54.58721161]
[-39.83100510 68.76927948]
[-24.89669800 70.17157745]
[-9.96239090 71.57388306]
[1.30862653 61.90435791]
[16.47411537 63.11374664]
[26.53998375 75.00138855]
[41.47429276 76.40369415]
[56.40859985 77.80599976]
[63.31559753 64.49083710]
[53.56794739 53.08982086]
[43.82029343 41.68879700]
[28.18699646 36.73580933]
[24.92448807 20.66446686]
[37.38895798 10.00758839]
[52.75802612 15.72805786]
[55.22131348 31.94114685]
[64.96896362 43.34216690]
[74.71662140 54.74318695]
[89.28932190 51.18842697]
[92.69229889 36.57953262]
[96.09527588 21.97064209]
[99.49825287 7.36174870]
[85.90535736 0.87736028]
[74.02449036 -8.37785435]
[64.41133881 -19.97101212]
[57.51551819 -33.35987854]
[53.65956879 -47.91823578]
[53.02384186 -62.96516037]
[55.63806152 -77.79688263]
[61.37996674 -91.71968842]
[69.98099518 -104.08238983]
[81.03885651 -114.30676270]
[94.03635406 -121.91458893]
[108.36557770 -126.55004120]
[123.35632324 -127.99630737]
[138.30743408 -126.18575287]
[152.51963806 -121.20304108]
[165.32820129 -113.28124237]
[176.13403320 -102.79085541]
[184.43171692 -90.22254944]
[189.83319092 -76.16416168]
[192.08578491 -61.27323151]
[191.08415222 -46.24622726]
[186.87513733 -31.78599739]
[179.65562439 -18.56886673]
[169.76324463 -7.21302748]
[157.66072083 1.75038779]
[143.91407776 7.90214396]
[129.16630554 10.95451164]
[114.10714722 10.76472664]
[110.70417023 25.37361908]
[107.30119324 39.98251343]
[103.89821625 54.59140396]
[122.29906464 62.35791397]
[134.91297913 76.78462219]
[139.72335815 94.49768829]
[136.43577576 111.73299408]
[151.37008667 113.13529968]
[166.30438232 114.53760529]
[181.23869324 115.93990326]
[196.17300415 117.34220886]
[202.15562439 103.44747925]
[212.14065552 92.08287811]
[225.14988708 84.36178589]
[239.90878296 81.04064178]
[254.97143555 82.44481659]
[268.86215210 88.43673706]
[280.22006226 98.42938995]
[287.93243408 111.44378662]
[291.24368286 126.20491028]
[289.82943726 141.26661682]
[283.82818604 155.15332031]
[273.82794189 166.50453186]
[260.80838013 174.20817566]
[246.04502869 177.50953674]
[230.98428345 176.08517456]
[217.10160828 170.07464600]
[205.75709534 160.06678772]
[198.06216431 147.04206848]
[194.77070618 132.27651978]
[179.83639526 130.87420654]
[164.90208435 129.47190857]
[149.96777344 128.06961060]
[135.03346252 126.66730499]
[124.04780579 136.88078308]
[124.35986328 151.87753296]
[124.67192078 166.87428284]
[124.98397064 181.87104797]
[125.29602814 196.86779785]
[125.60808563 211.86454773]
[125.92014313 226.86129761]
[126.23220062 241.85806274]
[126.54425812 256.85479736]
[126.85630798 271.85156250]
[141.51130676 275.44232178]
[154.73710632 282.70458984]
[165.63197327 293.14318848]
[173.45307922 306.04638672]
[177.66714478 320.53445435]
[177.98686218 335.61956787]
[174.39044189 350.27316284]
[167.12307739 363.49615479]
[156.68028259 374.38699341]
[143.77404785 382.20312500]
[129.28436279 386.41159058]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 53]
[28 52]
[29 51]
[32 48]
[33 47]
[34 46]
[54 63]
[55 62]
[56 61]
[64 98]
[65 97]
[66 96]
[67 95]
[102 129]
[103 128]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
