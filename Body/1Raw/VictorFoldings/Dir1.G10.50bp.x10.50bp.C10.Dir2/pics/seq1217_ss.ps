%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCCUCCGGGGGGGGGGCCAAUAAAGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAxxxxxxxxxxGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACCCCCCCCCCCACCCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[87.04167175 488.73641968]
[73.19573212 482.72039795]
[61.48706818 473.19097900]
[52.78454590 460.85531616]
[47.73394394 446.62878418]
[46.71005249 431.56710815]
[49.78884888 416.78796387]
[56.74187088 403.38803101]
[67.05315399 392.36169434]
[79.95753479 384.52719116]
[94.49742126 380.46588135]
[94.49742126 365.46588135]
[94.49742126 350.46588135]
[94.49742126 335.46588135]
[94.49742126 320.46588135]
[94.49742126 305.46588135]
[94.49742126 290.46588135]
[94.49742126 275.46588135]
[94.49742126 260.46588135]
[94.49742126 245.46586609]
[79.57760620 240.79696655]
[66.80911255 231.74314880]
[57.44362640 219.17727661]
[52.40375137 204.31721497]
[52.19213486 188.60778809]
[56.84136581 173.58032227]
[65.90962982 160.70332336]
[78.52266693 151.23901367]
[93.45804596 146.11961365]
[93.14598846 131.12286377]
[83.24282074 127.10732269]
[75.22386169 120.04377747]
[69.99079132 110.72646332]
[68.13201141 100.20304871]
[69.85654449 89.65679932]
[74.97046661 80.27356720]
[65.70551300 68.47692871]
[56.44056702 56.68028641]
[45.14155960 46.81456375]
[32.20350647 39.22465515]
[17.08819580 42.98831558]
[4.07528782 35.10676193]
[0.58036113 20.67343140]
[-12.35769463 13.08352280]
[-25.29575157 5.49361420]
[-38.23380661 -2.09629416]
[-51.17186356 -9.68620205]
[-66.40052032 -5.45968246]
[-80.11609650 -13.31198597]
[-84.18137360 -28.58448029]
[-76.18449402 -42.21626282]
[-60.86987686 -46.11984253]
[-47.32340240 -37.97929382]
[-43.58195496 -22.62425804]
[-30.64389801 -15.03435040]
[-17.70584297 -7.44444180]
[-4.76778650 0.14546657]
[8.17026901 7.73537493]
[22.47410774 3.74341035]
[35.70325851 11.25634956]
[39.79341507 26.28659821]
[52.73146820 33.87650681]
[45.71821976 20.61700821]
[43.05973053 5.85447216]
[45.00677490 -9.01862526]
[51.37568665 -22.59938240]
[61.56572723 -33.60679245]
[74.61571503 -41.00258636]
[89.29471588 -44.08915710]
[104.21813202 -42.57535934]
[117.97831726 -36.60398483]
[129.27734375 -26.73828316]
[137.04942322 -13.90883541]
[140.56146240 0.67422217]
[139.48219299 15.63534451]
[133.91340637 29.56332397]
[124.38038635 41.14440536]
[111.78232574 49.28620911]
[97.30754852 53.22075272]
[82.32136536 52.57691574]
[68.23720551 47.41533661]
[77.50215912 59.21197510]
[86.76710510 71.00861359]
[96.82889557 68.28952789]
[107.22988129 68.96230316]
[116.85753632 72.95497894]
[124.68204498 79.84047699]
[138.20623779 73.35231018]
[123.49790192 70.40869141]
[111.76183319 61.06713104]
[105.59394073 47.39390564]
[106.35850525 32.41340256]
[113.88641357 19.43917465]
[126.51255798 11.34099770]
[141.44415283 9.91011524]
[155.37847900 15.46302605]
[165.23336792 26.77147675]
[168.82902527 41.33414078]
[165.37013245 55.92989349]
[155.62013245 67.33145142]
[170.26364136 64.08062744]
[184.90713501 60.82979965]
[199.55064392 57.57897186]
[214.19413757 54.32814789]
[228.83764648 51.07732010]
[238.63189697 38.37093735]
[254.67449951 38.25017166]
[264.65893555 50.80766296]
[260.92599487 66.41037750]
[246.33927917 73.08925629]
[232.08847046 65.72082520]
[217.44496155 68.97164917]
[202.80146790 72.22247314]
[188.15795898 75.47329712]
[173.51446533 78.72412872]
[158.87095642 81.97495270]
[144.69439697 86.87650299]
[131.17021179 93.36466980]
[127.14646149 116.69369507]
[108.14274597 130.81080627]
[108.45479584 145.80755615]
[122.34256744 149.72540283]
[134.54495239 157.39752197]
[144.07321167 168.19161987]
[150.15829468 181.22285461]
[152.31289673 195.42637634]
[150.37051392 209.64437866]
[144.49819946 222.72044373]
[135.18232727 233.59355164]
[123.18824005 241.38429260]
[109.49742126 245.46586609]
[109.49742126 260.46588135]
[109.49742126 275.46588135]
[109.49742126 290.46588135]
[109.49742126 305.46588135]
[109.49742126 320.46588135]
[109.49742126 335.46588135]
[109.49742126 350.46588135]
[109.49742126 365.46588135]
[109.49742126 380.46588135]
[124.03730774 384.52719116]
[136.94169617 392.36169434]
[147.25297546 403.38803101]
[154.20599365 416.78796387]
[157.28479004 431.56710815]
[156.26091003 446.62878418]
[151.21029663 460.85531616]
[142.50778198 473.19097900]
[130.79911804 482.72039795]
[116.95317841 488.73641968]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 121]
[30 120]
[36 83]
[37 82]
[38 81]
[39 62]
[40 61]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[87 118]
[88 117]
[100 116]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
