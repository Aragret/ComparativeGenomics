%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCACGAGGGGGGGGGGUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGxxxxxxxxxxUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCCCCCCCCCCCAGCACCACGA\
) } def
/len { sequence length } bind def

/coor [
[92.23328400 369.67523193]
[79.67506409 361.32406616]
[69.58884430 350.11163330]
[62.60864639 336.74270630]
[59.17326355 322.05773926]
[59.49864197 306.97976685]
[63.56432724 292.45663452]
[71.11474609 279.40130615]
[81.67527771 268.63439941]
[94.58206940 260.83276367]
[109.02379608 256.48681641]
[108.39981842 241.49980164]
[107.77584076 226.51278687]
[107.15186310 211.52577209]
[106.52788544 196.53875732]
[105.90390778 181.55174255]
[105.27993011 166.56472778]
[104.65595245 151.57771301]
[104.03197479 136.59069824]
[103.40799713 121.60368347]
[90.23941803 114.42117310]
[77.30136108 122.01107788]
[71.88153839 137.11091614]
[56.65091705 142.15153503]
[43.29313278 133.26618958]
[42.05513382 117.27098083]
[53.88660431 106.43604279]
[69.71145630 109.07302094]
[82.64951324 101.48311615]
[82.57149506 93.98352051]
[82.41545868 78.98432922]
[82.33744049 71.48474121]
[69.24428558 64.16563416]
[56.15112686 56.84652710]
[43.05797195 49.52742004]
[28.23633385 58.86631393]
[10.81622791 59.44882202]
[-4.44026375 51.20515060]
[-13.40762520 36.46608353]
[-13.71237373 19.30475044]
[-27.09865952 12.53663635]
[-40.48494339 5.76852131]
[-53.00341797 9.04596901]
[-64.03316498 3.08244681]
[-67.88950348 -8.42563725]
[-81.13208771 -15.47077179]
[-94.37467194 -22.51590729]
[-110.73628235 -21.40692329]
[-119.65160370 -35.17097092]
[-111.94932556 -49.64878082]
[-95.55288696 -49.94681931]
[-87.32953644 -35.75849152]
[-74.08695221 -28.71335793]
[-60.84436798 -21.66822243]
[-43.39437866 -23.24866104]
[-33.71682739 -7.61776352]
[-20.33054352 -0.84964895]
[-6.94425917 5.91846561]
[2.88442135 -2.13117337]
[15.07885265 -5.85794163]
[27.82159424 -4.66917229]
[39.19930649 1.29240155]
[47.49003983 11.16473198]
[51.42382050 23.49094200]
[50.37707901 36.43426895]
[63.47023392 43.75337219]
[76.56338501 51.07247925]
[89.65653992 58.39158249]
[104.63625336 57.61174011]
[116.89862823 48.97262192]
[109.62805176 35.83542633]
[103.82050323 21.98913956]
[99.54407501 7.59610653]
[96.84889984 -7.17492151]
[95.76657867 -22.15076256]
[96.30980682 -37.15583420]
[98.47221375 -52.01420593]
[102.22843933 -66.55167389]
[107.53445435 -80.59779358]
[114.32804108 -93.98788452]
[122.52954865 -106.56494141]
[132.04281616 -118.18152618]
[142.75631714 -128.70141602]
[154.54441833 -138.00129700]
[167.26893616 -145.97210693]
[180.78067017 -152.52041626]
[194.92120361 -157.56942749]
[209.52474976 -161.05995178]
[224.42008972 -162.95108032]
[239.43257141 -163.22061157]
[254.38618469 -161.86540222]
[269.10562134 -158.90135193]
[283.41827393 -154.36318970]
[297.15637207 -148.30413818]
[310.15881348 -140.79522705]
[322.27316284 -131.92449951]
[333.35739136 -121.79596710]
[343.28152466 -110.52836609]
[351.92922974 -98.25381470]
[359.19909668 -85.11622620]
[365.00588989 -71.26963043]
[369.28155518 -56.87636948]
[371.97592163 -42.10519409]
[373.05743408 -27.12929535]
[372.51339722 -12.12425327]
[370.35018921 2.73400283]
[366.59317017 17.27126884]
[361.28640747 31.31710243]
[354.49209595 44.70682526]
[346.28991699 57.28344727]
[336.77603149 68.89951324]
[326.06198120 79.41883087]
[314.27334595 88.71807098]
[301.54840088 96.68820190]
[288.03631592 103.23577881]
[273.89550781 108.28403473]
[259.29177856 111.77378082]
[244.39634705 113.66409302]
[229.38386536 113.93282318]
[214.43031311 112.57681274]
[199.71104431 109.61196136]
[185.39862061 105.07302856]
[171.66085815 99.01323700]
[158.65882874 91.50363159]
[146.54495239 82.63225555]
[135.46127319 72.50312042]
[125.53774261 61.23498917]
[113.27537537 69.87410736]
[118.39501953 120.97970581]
[119.01899719 135.96672058]
[119.64297485 150.95373535]
[120.26695251 165.94075012]
[120.89092255 180.92776489]
[121.51490021 195.91477966]
[122.13887787 210.90179443]
[122.76285553 225.88880920]
[123.38683319 240.87583923]
[124.01081085 255.86285400]
[138.76382446 258.99328613]
[152.27445984 265.69503784]
[163.69343567 275.54684448]
[172.30294800 287.92935181]
[177.56179810 302.06427002]
[179.13940430 317.06298828]
[176.93659973 331.98272705]
[171.09184265 345.88558960]
[161.97256470 357.89764404]
[150.15199280 367.26382446]
[136.37318420 373.39529419]
[121.50228882 375.90670776]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 29]
[22 28]
[32 68]
[33 67]
[34 66]
[35 65]
[40 58]
[41 57]
[42 56]
[45 54]
[46 53]
[47 52]
[69 128]
[70 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
