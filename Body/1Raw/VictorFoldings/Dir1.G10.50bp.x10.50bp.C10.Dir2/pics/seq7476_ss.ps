%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAUCAUGGGGGGGGGGAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAxxxxxxxxxxUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCCCCCCCCCCCUACCAU\
) } def
/len { sequence length } bind def

/coor [
[82.77996063 466.52511597]
[68.93402863 460.50909424]
[57.22536469 450.97967529]
[48.52283859 438.64401245]
[43.47223663 424.41751099]
[42.44834518 409.35580444]
[45.52714539 394.57666016]
[52.48016739 381.17672729]
[62.79145050 370.15039062]
[75.69583130 362.31588745]
[90.23571777 358.25457764]
[90.23571777 343.25457764]
[90.23571777 328.25457764]
[90.23571777 313.25457764]
[90.23571777 298.25457764]
[90.23571777 283.25457764]
[90.23571777 268.25457764]
[90.23571777 253.25457764]
[90.23571777 238.25457764]
[90.23571777 223.25457764]
[81.88716125 214.44497681]
[81.80273438 201.90657043]
[90.57581329 192.39410400]
[90.88787079 177.39735413]
[91.19992828 162.40060425]
[91.51198578 147.40385437]
[91.82404327 132.40708923]
[78.58928680 125.66413116]
[69.58325958 113.85236359]
[66.58469391 99.30468750]
[70.18582916 84.89433289]
[79.67540741 73.46743011]
[93.17920685 67.28085327]
[93.49126434 52.28409576]
[85.12147522 42.41492081]
[85.72740936 29.89087296]
[94.43520355 21.43619537]
[95.05918121 6.44917917]
[95.68315887 -8.53783703]
[96.30713654 -23.52485275]
[85.88513947 -35.10153961]
[86.73143768 -50.29161453]
[97.83226013 -60.15605545]
[98.45623779 -75.14307404]
[99.08021545 -90.13008881]
[99.70419312 -105.11710358]
[100.32817078 -120.10411835]
[85.47460938 -122.29257965]
[70.93117523 -126.02169800]
[56.85722351 -131.25061035]
[43.40694809 -137.92202759]
[30.72772217 -145.96286011]
[18.95846367 -155.28500366]
[8.22812557 -165.78631592]
[-1.34572625 -177.35173035]
[-9.65819550 -189.85455322]
[-16.61820412 -203.15779114]
[-22.14949799 -217.11567688]
[-26.19147110 -231.57527161]
[-28.69983673 -246.37817383]
[-29.64711380 -261.36218262]
[-29.02292252 -276.36312866]
[-26.83410072 -291.21661377]
[-23.10463142 -305.75997925]
[-17.87537766 -319.83380127]
[-11.20363140 -333.28390503]
[-3.16249442 -345.96295166]
[6.15993118 -357.73196411]
[16.66150284 -368.46206665]
[28.22716141 -378.03561401]
[40.73018646 -386.34777832]
[54.03358841 -393.30746460]
[67.99160767 -398.83843994]
[82.45130920 -402.88006592]
[97.25426483 -405.38806152]
[112.23829651 -406.33496094]
[127.23921204 -405.71041870]
[142.09266663 -403.52124023]
[156.63592529 -399.79141235]
[170.70962524 -394.56182861]
[184.15957642 -387.88973999]
[196.83840942 -379.84829712]
[208.60720825 -370.52557373]
[219.33703613 -360.02374268]
[228.91033936 -348.45785522]
[237.22219849 -335.95462036]
[244.18156433 -322.65106201]
[249.71217346 -308.69290161]
[253.75344849 -294.23312378]
[256.26107788 -279.43008423]
[257.20764160 -264.44604492]
[256.58270264 -249.44512939]
[254.39317322 -234.59173584]
[250.66299438 -220.04856873]
[245.43305969 -205.97500610]
[238.76066589 -192.52520752]
[230.71890259 -179.84657288]
[221.39590454 -168.07798767]
[210.89381409 -157.34841919]
[199.32769775 -147.77540588]
[186.82426453 -139.46385193]
[173.52052307 -132.50480652]
[159.56224060 -126.97453308]
[145.10234070 -122.93361664]
[130.29925537 -120.42633057]
[115.31518555 -119.48014069]
[114.69120789 -104.49312592]
[114.06723022 -89.50611115]
[113.44325256 -74.51909637]
[112.81927490 -59.53208160]
[123.06170654 -48.77902222]
[122.64240265 -33.57116699]
[111.29415894 -22.90087509]
[110.67018127 -7.91385937]
[110.04620361 7.07315683]
[109.42222595 22.06017303]
[118.39505768 37.10969543]
[108.48801422 52.59615326]
[108.17595673 67.59290314]
[121.41071320 74.33586884]
[130.41673279 86.14763641]
[133.41529846 100.69531250]
[129.81417847 115.10566711]
[120.32459259 126.53256989]
[106.82079315 132.71914673]
[106.50873566 147.71589661]
[106.19668579 162.71266174]
[105.88462830 177.70941162]
[105.57257080 192.70616150]
[114.82682800 208.59133911]
[105.23571777 223.25457764]
[105.23571777 238.25457764]
[105.23571777 253.25457764]
[105.23571777 268.25457764]
[105.23571777 283.25457764]
[105.23571777 298.25457764]
[105.23571777 313.25457764]
[105.23571777 328.25457764]
[105.23571777 343.25457764]
[105.23571777 358.25457764]
[119.77560425 362.31588745]
[132.67999268 370.15039062]
[142.99127197 381.17672729]
[149.94429016 394.57666016]
[153.02308655 409.35580444]
[151.99920654 424.41751099]
[146.94859314 438.64401245]
[138.24607849 450.97967529]
[126.53741455 460.50909424]
[112.69147491 466.52511597]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[33 119]
[34 118]
[37 116]
[38 115]
[39 114]
[40 113]
[43 110]
[44 109]
[45 108]
[46 107]
[47 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
