%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAUCAUAGCAGGGGGGGGGGGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUAxxxxxxxxxxUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGCCCCCCCCCCUCCAUCAUAGAA\
) } def
/len { sequence length } bind def

/coor [
[81.81037140 460.89926147]
[67.19437408 457.24957275]
[53.75720215 450.43853760]
[42.17285919 440.80780029]
[33.02241516 428.84048462]
[26.76484489 415.13681030]
[23.71402931 400.38418579]
[24.02299500 385.32254028]
[27.67624664 370.70742798]
[34.49053574 357.27191162]
[44.12406158 345.68991089]
[56.09361267 336.54235840]
[69.79879761 330.28811646]
[84.55216980 327.24087524]
[84.85617828 312.24395752]
[85.16017914 297.24703979]
[85.46418762 282.25012207]
[85.76818848 267.25320435]
[86.07219696 252.25628662]
[86.37619781 237.25936890]
[86.68020630 222.26245117]
[86.98420715 207.26553345]
[87.28820801 192.26860046]
[79.81044006 179.38713074]
[87.82584381 165.74661255]
[88.12984467 150.74969482]
[77.36324310 140.30554199]
[62.38249588 141.06527710]
[47.40174866 141.82501221]
[38.15879440 150.87612915]
[25.62727356 151.16928101]
[16.57140350 143.09403992]
[1.57833457 143.55000305]
[-13.41473389 144.00598145]
[-22.95487404 156.39628601]
[-38.23840332 159.70501709]
[-52.04890823 152.36990356]
[-57.86548615 137.85433960]
[-52.94173050 123.01215363]
[-39.60248947 114.85135651]
[-24.14613914 117.22522736]
[-13.87070084 129.01290894]
[1.12236714 128.55694580]
[16.11543465 128.10096741]
[30.48398972 118.06939697]
[46.64200974 126.84426880]
[61.62275696 126.08453369]
[76.60350800 125.32479858]
[68.31612396 107.45712280]
[71.37050629 89.13710022]
[83.46095276 76.55384064]
[99.45024872 73.24161530]
[103.35700226 58.75930786]
[107.26375580 44.27700043]
[111.17050934 29.79469109]
[115.07726288 15.31238079]
[101.09795380 9.83129787]
[87.80648041 2.84561658]
[75.36416626 -5.55986357]
[63.92206192 -15.28310680]
[53.61906433 -26.20608330]
[44.58023834 -38.19619751]
[36.91530991 -51.10789871]
[30.71731949 -64.78445435]
[26.06151199 -79.05983734]
[23.00440025 -93.76076508]
[21.58309555 -108.70877838]
[21.81484985 -123.72241974]
[23.69685364 -138.61944580]
[27.20625877 -153.21900940]
[32.30046463 -167.34388733]
[38.91762924 -180.82261658]
[46.97743225 -193.49159241]
[56.38203049 -205.19700623]
[67.01725769 -215.79676819]
[78.75402069 -225.16221619]
[91.44984436 -233.17965698]
[104.95060730 -239.75177002]
[119.09242249 -244.79876709]
[133.70362854 -248.25938416]
[148.60685730 -250.09161377]
[163.62118530 -250.27322388]
[178.56437683 -248.80198669]
[193.25500488 -245.69578552]
[207.51475525 -240.99232483]
[221.17053223 -234.74868774]
[234.05656433 -227.04067993]
[246.01641846 -217.96185303]
[256.90490723 -207.62242126]
[266.58987427 -196.14790344]
[274.95376587 -183.67758179]
[281.89498901 -170.36285400]
[287.32937622 -156.36531067]
[291.19085693 -141.85490417]
[293.43264771 -127.00775909]
[294.02746582 -112.00411224]
[292.96813965 -97.02610016]
[290.26748657 -82.25553131]
[285.95831299 -67.87170410]
[280.09295654 -54.04924011]
[272.74255371 -40.95592117]
[263.99639893 -28.75069046]
[253.96060181 -17.58170891]
[242.75703430 -7.58455563]
[230.52166748 1.11941195]
[217.40303040 8.42453575]
[203.56039429 14.24213696]
[189.16177368 18.50159836]
[174.38197327 21.15121078]
[159.40039062 22.15881157]
[144.39888000 21.51216888]
[129.55957031 19.21913338]
[125.65281677 33.70144272]
[121.74606323 48.18375015]
[117.83930969 62.66606140]
[113.93256378 77.14836884]
[127.40608215 89.53711700]
[130.53875732 109.24260712]
[119.98600006 128.09449768]
[134.25184631 132.72975159]
[148.51770020 137.36500549]
[163.40740967 131.39207458]
[177.28915405 139.43426514]
[179.51403809 155.32229614]
[168.37532043 166.86822510]
[152.41767883 165.21501160]
[143.88244629 151.63085938]
[129.61659241 146.99560547]
[115.35074615 142.36035156]
[103.12676239 151.05369568]
[102.82276154 166.05061340]
[110.27878571 180.00476074]
[102.28513336 192.57261658]
[101.98112488 207.56953430]
[101.67712402 222.56645203]
[101.37311554 237.56336975]
[101.06911469 252.56028748]
[100.76510620 267.55722046]
[100.46110535 282.55413818]
[100.15710449 297.55105591]
[99.85309601 312.54797363]
[99.54909515 327.54489136]
[114.16685486 331.18750000]
[127.60732269 337.99203491]
[139.19633484 347.61712646]
[148.35258484 359.58004761]
[154.61679077 373.28067017]
[157.67475891 388.03182983]
[157.37307739 403.09359741]
[153.72691345 417.71047974]
[146.91914368 431.14929199]
[137.29122925 442.73596191]
[125.32611084 451.88931274]
[111.62395477 458.15020752]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 131]
[26 130]
[27 48]
[28 47]
[29 46]
[32 44]
[33 43]
[34 42]
[52 116]
[53 115]
[54 114]
[55 113]
[56 112]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
