%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACUAAGGGGGGGGGGACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUxxxxxxxxxxUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCCCCCCCCCCCUCAGUAA\
) } def
/len { sequence length } bind def

/coor [
[83.92100525 404.82946777]
[70.07506561 398.81344604]
[58.36640549 389.28402710]
[49.66387939 376.94836426]
[44.61327744 362.72183228]
[43.58938599 347.66015625]
[46.66818619 332.88098145]
[53.62120819 319.48104858]
[63.93249130 308.45474243]
[76.83687592 300.62020874]
[91.37676239 296.55889893]
[91.37676239 281.55889893]
[91.37676239 266.55889893]
[91.37676239 251.55891418]
[91.37676239 236.55891418]
[91.37676239 221.55891418]
[91.37676239 206.55891418]
[91.37676239 191.55891418]
[91.37676239 176.55891418]
[91.37676239 161.55891418]
[88.21118164 154.82653809]
[91.53604126 146.24766541]
[84.06519318 133.36218262]
[92.08791351 119.72595978]
[80.60305786 112.19038391]
[75.48988342 98.35139465]
[79.86743927 83.19984436]
[65.54484558 78.74303436]
[58.58625412 92.07786560]
[49.35830307 103.95577240]
[38.15761948 113.99491882]
[25.34426880 121.87259674]
[11.33014107 127.33556366]
[-3.43426394 130.20822144]
[-18.47433281 130.39820862]
[-33.30659103 127.89941406]
[-47.45423889 122.79219055]
[-60.46249390 115.24069214]
[-71.91318512 105.48767090]
[-81.43823242 93.84665680]
[-88.73143768 80.69184875]
[-93.55835724 66.44612122]
[-95.76382446 51.56742477]
[-95.27693939 36.53403854]
[-92.11334991 21.82922554]
[-86.37477112 7.92568493]
[-78.24565125 -4.72964096]
[-67.98732758 -15.72993660]
[-55.92955017 -24.72158623]
[-42.45993042 -31.41554832]
[-28.01146126 -35.59663773]
[-13.04860020 -37.13045120]
[1.94765723 -35.96768188]
[16.49524498 -32.14570999]
[30.12651634 -25.78739166]
[42.40328598 -17.09712410]
[52.93090057 -6.35426235]
[61.37094498 6.09585428]
[67.45211029 19.85300636]
[70.97890472 34.47496033]
[71.83795929 49.49167633]
[70.00165558 64.42043304]
[84.32425690 68.87725067]
[98.85919189 65.17108917]
[109.29900360 54.40028000]
[119.73881531 43.62947083]
[130.17863464 32.85866165]
[115.64997101 36.58935928]
[100.66338348 35.95525360]
[86.50179291 31.01062584]
[74.37750244 22.17876625]
[65.32843781 10.21572685]
[60.12922287 -3.85439038]
[59.22495270 -18.82710838]
[62.69303131 -33.42068481]
[70.23657990 -46.38582611]
[81.20982361 -56.61265182]
[94.67339325 -63.22568512]
[109.47473907 -65.65882111]
[124.34678650 -63.70376968]
[138.01640320 -57.52788925]
[149.31340027 -47.65987015]
[157.27070618 -34.94446945]
[161.20710754 -20.47019196]
[160.78564453 -5.47611475]
[156.04240417 8.75419044]
[147.38104248 21.00500298]
[161.16343689 15.08504009]
[174.94581604 9.16507721]
[188.72819519 3.24511433]
[188.40914917 -12.79965019]
[194.24520874 -27.70750046]
[205.31903076 -39.21594238]
[219.92082214 -45.59052658]
[235.81219482 -45.88621140]
[250.56942749 -40.08735657]
[261.95303345 -29.10560989]
[275.60925293 -35.31101608]
[289.26550293 -41.51642227]
[302.92175293 -47.72183228]
[316.57797241 -53.92723846]
[328.49685669 -65.98447418]
[343.38235474 -57.86917496]
[339.70492554 -41.31886292]
[322.78338623 -40.27099609]
[309.12713623 -34.06558990]
[295.47091675 -27.86018181]
[281.81466675 -21.65477562]
[268.15841675 -15.44936848]
[269.16387939 -1.41893971]
[265.30145264 12.13791466]
[257.01739502 23.58018112]
[245.29444885 31.51554298]
[231.53530884 34.96977997]
[217.39479065 33.50634003]
[204.58084106 27.28140831]
[194.64816284 17.02749634]
[180.86576843 22.94745827]
[167.08338928 28.86742210]
[153.30101013 34.78738403]
[140.94943237 43.29847336]
[130.50962830 54.06928253]
[120.06981659 64.84009552]
[109.63000488 75.61090088]
[120.77985382 86.13735962]
[123.73362732 100.42978668]
[118.24925232 113.15350342]
[107.08467102 120.03801727]
[114.53319550 133.99617004]
[106.53279877 146.55972290]
[106.37676239 161.55891418]
[106.37676239 176.55891418]
[106.37676239 191.55891418]
[106.37676239 206.55891418]
[106.37676239 221.55891418]
[106.37676239 236.55891418]
[106.37676239 251.55891418]
[106.37676239 266.55889893]
[106.37676239 281.55889893]
[106.37676239 296.55889893]
[120.91664886 300.62020874]
[133.82102966 308.45474243]
[144.13230896 319.48104858]
[151.08532715 332.88098145]
[154.16413879 347.66015625]
[153.14024353 362.72183228]
[148.08964539 376.94836426]
[139.38711548 389.28402710]
[127.67845154 398.81344604]
[113.83251190 404.82946777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[24 128]
[27 63]
[28 62]
[64 124]
[65 123]
[66 122]
[67 121]
[87 120]
[88 119]
[89 118]
[90 117]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
