%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAAAAUGGGGGGGGGGUUCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUxxxxxxxxxxUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCAAUUACAAUAUAUACACCCCCCCCCCCCAACAAACAAU\
) } def
/len { sequence length } bind def

/coor [
[-0.23266877 291.29162598]
[-10.86553574 285.33190918]
[-21.14522362 278.78173828]
[-31.03898239 271.66204834]
[-40.51529312 263.99551392]
[-49.54397202 255.80654907]
[-58.09625626 247.12121582]
[-66.14489746 237.96720886]
[-73.66425323 228.37368774]
[-80.63037872 218.37121582]
[-87.02107239 207.99165344]
[-100.26365662 215.03678894]
[-113.50624084 222.08192444]
[-126.67482758 229.26443481]
[-139.76797485 236.58354187]
[-152.86112976 243.90263367]
[-165.95428467 251.22174072]
[-179.04743958 258.54086304]
[-192.14059448 265.85995483]
[-205.23374939 273.17907715]
[-218.32690430 280.49816895]
[-231.42005920 287.81726074]
[-235.48014832 303.09115601]
[-249.19303894 310.94812012]
[-264.42312622 306.72677612]
[-272.13467407 292.93157959]
[-267.75256348 277.74697876]
[-253.87660217 270.18170166]
[-238.73916626 274.72412109]
[-225.64601135 267.40502930]
[-212.55285645 260.08590698]
[-199.45970154 252.76679993]
[-186.36654663 245.44769287]
[-173.27339172 238.12858582]
[-160.18023682 230.80949402]
[-147.08708191 223.49038696]
[-133.99392700 216.17127991]
[-129.66201782 210.12312317]
[-120.55137634 208.83934021]
[-107.30879211 201.79420471]
[-94.06620789 194.74906921]
[-105.89041138 165.17835999]
[-113.23720551 134.19024658]
[-115.94683075 102.45861053]
[-113.96035767 70.67351532]
[-107.32099152 39.52616119]
[-96.17311096 9.69390965]
[-80.75914001 -18.17449760]
[-93.02150726 -26.81361389]
[-105.28387451 -35.45272827]
[-121.65624237 -36.38951874]
[-128.78846741 -51.15649033]
[-119.34352875 -64.56265259]
[-103.03756714 -62.81689072]
[-96.64476013 -47.71509933]
[-84.38239288 -39.07598114]
[-72.12002563 -30.43686676]
[-65.62976074 -38.58521652]
[-58.75410843 -46.41110611]
[-51.50907135 -53.89632797]
[-43.91150284 -61.02346802]
[-35.97908783 -67.77593994]
[-27.73027420 -74.13803864]
[-19.18426132 -80.09494781]
[-10.36093235 -85.63282013]
[-1.28081739 -90.73876190]
[8.03495693 -95.40089417]
[17.56471252 -99.60836792]
[27.28627968 -103.35140228]
[37.17703629 -106.62127686]
[47.21396637 -109.41039276]
[57.37371826 -111.71225739]
[67.63265228 -113.52150726]
[77.96690369 -114.83393860]
[88.35241699 -115.64649963]
[98.76502991 -115.95729828]
[109.18051910 -115.76560211]
[119.57464600 -115.07187653]
[129.92321777 -113.87772369]
[140.20217896 -112.18591309]
[150.38758850 -110.00040436]
[160.45576477 -107.32626343]
[170.38327026 -104.16971588]
[180.14701843 -100.53811646]
[189.72425842 -96.43990326]
[199.09274292 -91.88461304]
[208.23066711 -86.88285065]
[217.11676025 -81.44625854]
[225.73033142 -75.58747101]
[234.05137634 -69.32013702]
[242.06050110 -62.65882492]
[249.73907471 -55.61904526]
[257.06924438 -48.21717072]
[264.03396606 -40.47042847]
[270.61697388 -32.39683914]
[276.80303955 -24.01519203]
[282.57769775 -15.34498882]
[287.92752075 -6.40640163]
[292.84008789 2.77977014]
[297.30398560 12.19215202]
[301.30877686 21.80884552]
[304.84515381 31.60747147]
[307.90490723 41.56523132]
[322.47763062 38.01047134]
[337.05032349 34.45570755]
[348.52432251 22.73908424]
[364.33877563 27.07907295]
[368.22509766 43.01106644]
[356.18542480 54.14559555]
[340.60510254 49.02841187]
[326.03237915 52.58317184]
[311.45968628 56.13793564]
[313.59753418 68.13818359]
[315.05493164 80.23993683]
[315.82720947 92.40464020]
[315.91195679 104.59353638]
[315.30889893 116.76779938]
[314.01992798 128.88864136]
[312.04913330 140.91746521]
[309.40286255 152.81593323]
[306.08947754 164.54614258]
[302.11956787 176.07073975]
[297.50576782 187.35299683]
[292.26278687 198.35697937]
[286.40734863 209.04762268]
[279.95803833 219.39088440]
[272.93545532 229.35379028]
[265.36196899 238.90463257]
[257.26168823 248.01296997]
[248.66041565 256.64978027]
[239.58557129 264.78756714]
[230.06605530 272.40042114]
[220.13218689 279.46401978]
[209.81561279 285.95593262]
[199.14921570 291.85543823]
[188.16696167 297.14376831]
[176.90382385 301.80404663]
[165.39570618 305.82147217]
[153.67926025 309.18319702]
[141.79180908 311.87857056]
[129.77122498 313.89892578]
[117.65579987 315.23788452]
[105.48413086 315.89117432]
[93.29499054 315.85671997]
[81.12720490 315.13461304]
[69.01954651 313.72714233]
[57.01057816 311.63882446]
[45.13855743 308.87628174]
[33.44131088 305.44833374]
[21.95609856 301.36590576]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 41]
[12 40]
[13 39]
[14 37]
[15 36]
[16 35]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[22 29]
[48 57]
[49 56]
[50 55]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
