%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCCUGGGGGGGGGGAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGxxxxxxxxxxCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACCCCCCCCCCCUCCUACCCCU\
) } def
/len { sequence length } bind def

/coor [
[69.33053589 458.16091919]
[55.48460007 452.14489746]
[43.77593994 442.61547852]
[35.07341385 430.27981567]
[30.02281189 416.05328369]
[28.99892044 400.99160767]
[32.07772064 386.21246338]
[39.03074265 372.81253052]
[49.34202576 361.78619385]
[62.24640656 353.95169067]
[76.78629303 349.89038086]
[76.78629303 334.89038086]
[76.78629303 319.89038086]
[76.78629303 304.89038086]
[76.78629303 289.89038086]
[76.78629303 274.89038086]
[76.78629303 259.89038086]
[76.78629303 244.89038086]
[76.78629303 229.89038086]
[76.78629303 214.89038086]
[74.05592346 210.90031433]
[73.84741974 205.13943481]
[77.11133575 199.26963806]
[77.73531342 184.28262329]
[78.35929108 169.29560852]
[71.15811920 156.25749207]
[79.46279144 142.79112244]
[80.08676910 127.80411530]
[70.10404205 116.60834503]
[55.14379120 115.51703644]
[40.18354416 114.42572784]
[31.50767517 127.02241516]
[17.78215599 133.54214478]
[2.73610950 132.32443237]
[-9.59772587 123.79608917]
[-15.96387196 110.32991791]
[-30.92412186 109.23860931]
[-45.44134521 116.86634064]
[-59.15936661 107.88035583]
[-57.96626282 91.52466583]
[-43.08939362 84.62460327]
[-29.83281136 94.27835846]
[-14.87256145 95.36967468]
[-6.61956549 82.96993256]
[6.82135296 76.32179260]
[21.88483620 77.30048370]
[34.51889420 85.74308014]
[41.27485275 99.46547699]
[56.23510361 100.55678558]
[71.19535065 101.64810181]
[82.38507843 81.25334167]
[102.69119263 77.56465912]
[109.31969452 64.10869598]
[115.94819641 50.65272522]
[122.57669067 37.19676208]
[109.82453918 29.27531052]
[97.91024017 20.14205933]
[86.94853973 9.88496780]
[77.04500580 -1.39718008]
[68.29502106 -13.59572792]
[60.78285599 -26.59319496]
[54.58085251 -40.26440430]
[49.74874496 -54.47769165]
[46.33306885 -69.09616852]
[44.36672211 -83.97905731]
[43.86863708 -98.98300934]
[44.84361649 -113.96353912]
[47.28226852 -128.77636719]
[51.16110611 -143.27882385]
[56.44277191 -157.33125305]
[63.07640076 -170.79832458]
[70.99810791 -183.55030823]
[80.13159943 -195.46443176]
[90.38890839 -206.42591858]
[101.67125702 -216.32922363]
[113.86997986 -225.07896423]
[126.86759186 -232.59088135]
[140.53892517 -238.79260254]
[154.75230408 -243.62443542]
[169.37086487 -247.03981018]
[184.25378418 -249.00585938]
[199.25775146 -249.50364685]
[214.23825073 -248.52836609]
[229.05102539 -246.08941650]
[243.55342102 -242.21029663]
[257.60574341 -236.92834473]
[271.07266235 -230.29444885]
[283.82449341 -222.37248230]
[295.73843384 -213.23875427]
[306.69973755 -202.98123169]
[316.60281372 -191.69868469]
[325.35229492 -179.49978638]
[332.86395264 -166.50201416]
[339.06539917 -152.83056641]
[343.89694214 -138.61708069]
[347.31204224 -123.99846649]
[349.27780151 -109.11550140]
[349.77526855 -94.11152649]
[348.79971313 -79.13103485]
[346.36044312 -64.31831360]
[342.48104858 -49.81600571]
[337.19882202 -35.76378632]
[330.56463623 -22.29698944]
[322.64242554 -9.54531193]
[313.50845337 2.36843896]
[303.25070190 13.32952404]
[291.96795654 23.23237801]
[279.76889038 31.98163033]
[266.77096558 39.49301910]
[253.09939575 45.69420242]
[238.88581848 50.52545547]
[224.26713562 53.94025421]
[209.38414001 55.90571213]
[194.38014221 56.40289307]
[179.39967346 55.42701721]
[164.58700562 52.98747635]
[150.08476257 49.10776901]
[136.03265381 43.82526016]
[129.40415955 57.28122711]
[122.77565765 70.73719025]
[116.14716339 84.19315338]
[123.90489960 96.49790192]
[122.77153778 111.96576691]
[112.05809784 124.47917175]
[95.07378387 128.42808533]
[94.44980621 143.41510010]
[101.60634613 157.52519226]
[93.34630585 169.91958618]
[92.72232819 184.90660095]
[92.09835052 199.89361572]
[91.78629303 214.89038086]
[91.78629303 229.89038086]
[91.78629303 244.89038086]
[91.78629303 259.89038086]
[91.78629303 274.89038086]
[91.78629303 289.89038086]
[91.78629303 304.89038086]
[91.78629303 319.89038086]
[91.78629303 334.89038086]
[91.78629303 349.89038086]
[106.32617950 353.95169067]
[119.23056030 361.78619385]
[129.54183960 372.81253052]
[136.49487305 386.21246338]
[139.57366943 400.99160767]
[138.54977417 416.05328369]
[133.49917603 430.27981567]
[124.79664612 442.61547852]
[113.08798981 452.14489746]
[99.24205017 458.16091919]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[25 128]
[27 126]
[28 125]
[29 50]
[30 49]
[31 48]
[36 43]
[37 42]
[52 121]
[53 120]
[54 119]
[55 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
