%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUGCUUCCGGGGGGGGGGUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUxxxxxxxxxxCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCCCCCCCCCCCAUCCGCUUCC\
) } def
/len { sequence length } bind def

/coor [
[99.70278931 486.81695557]
[86.48258972 479.54449463]
[75.59578705 469.09750366]
[67.78465271 456.18823242]
[63.58177567 441.69692993]
[63.27370071 426.61160278]
[66.88144684 411.96075439]
[74.15901947 398.74337769]
[84.61022186 387.86059570]
[97.52248383 380.05447388]
[112.01542664 375.85717773]
[111.70336914 360.86041260]
[111.39131165 345.86367798]
[111.07925415 330.86691284]
[110.76719666 315.87014771]
[110.45513916 300.87341309]
[110.14308929 285.87664795]
[109.83103180 270.87991333]
[109.51897430 255.88314819]
[109.20691681 240.88639832]
[105.90196228 234.22134399]
[109.04763031 225.57514954]
[109.04763031 210.57514954]
[109.04763031 195.57514954]
[107.64533234 180.64083862]
[104.85300446 165.90303040]
[102.06068420 151.16522217]
[99.26835632 136.42742920]
[96.47603607 121.68962097]
[85.72032166 116.70175934]
[79.12155151 106.85186768]
[64.12885284 106.38382721]
[57.12630844 119.94580078]
[44.92774963 129.11956787]
[29.95521164 132.08366394]
[15.18150330 128.24957275]
[3.53995252 118.37854767]
[-2.65800071 104.43049622]
[-2.18174863 89.17481232]
[4.87414885 75.64051819]
[17.10873795 66.51486206]
[32.09283066 63.60975266]
[46.85132980 67.50199127]
[58.45391464 77.41878510]
[64.59689331 91.39112854]
[79.58959198 91.85917664]
[82.40461731 86.83715820]
[86.42745209 82.71868896]
[91.38195038 79.78646088]
[96.92801666 78.24176788]
[100.02634430 63.56523895]
[103.12466431 48.88871384]
[106.22298431 34.21218872]
[109.32130432 19.53566170]
[95.08709717 14.74987984]
[81.50473785 8.34393215]
[68.75792694 0.40445247]
[57.01905060 -8.96118641]
[46.44685364 -19.62632561]
[37.18431854 -31.44673157]
[29.35671043 -44.26254654]
[23.06988907 -57.90044785]
[18.40887642 -72.17600250]
[15.43670750 -86.89614868]
[14.19357681 -101.86181641]
[14.69629574 -116.87060547]
[16.93806839 -131.71954346]
[20.88857269 -146.20782471]
[26.49438667 -160.13948059]
[33.67969513 -173.32614136]
[42.34732819 -185.58944702]
[52.38006592 -196.76354980]
[63.64222336 -206.69735718]
[75.98149109 -215.25650024]
[89.23100281 -222.32522583]
[103.21157074 -227.80795288]
[117.73412323 -231.63052368]
[132.60224915 -233.74125671]
[147.61489868 -234.11158752]
[162.56901550 -232.73651123]
[177.26237488 -229.63464355]
[191.49626160 -224.84790039]
[205.07820129 -218.44105530]
[217.82447815 -210.50071716]
[229.56272888 -201.13430786]
[240.13421631 -190.46846008]
[249.39596558 -178.64743042]
[257.22271729 -165.83110046]
[263.50863647 -152.19277954]
[268.16867065 -137.91690063]
[271.13986206 -123.19656372]
[272.38201904 -108.23081207]
[271.87829590 -93.22205353]
[269.63552856 -78.37326813]
[265.68405151 -63.88525772]
[260.07730103 -49.95396423]
[252.89111328 -36.76779175]
[244.22265625 -24.50506401]
[234.18917847 -13.33162308]
[222.92636108 -3.39857721]
[210.58651733 5.15974045]
[197.33653259 12.22758865]
[183.35560608 17.70938301]
[168.83279419 21.53098869]
[153.96452332 23.64072227]
[138.95185852 24.01005173]
[123.99783325 22.63398361]
[120.89951324 37.31050873]
[117.80119324 51.98703384]
[114.70286560 66.66355896]
[111.60454559 81.34008789]
[121.97283936 100.22858429]
[111.21383667 118.89729309]
[114.00616455 133.63510132]
[116.79848480 148.37290955]
[119.59081268 163.11071777]
[122.38313293 177.84851074]
[129.86288452 164.84646606]
[143.11590576 157.82096863]
[158.07499695 158.92805481]
[170.14939880 167.82797241]
[175.63365173 181.78945923]
[172.84471130 196.52789307]
[162.63844299 207.52026367]
[148.14703369 211.39312744]
[133.81771851 206.95797729]
[124.04763031 195.57514954]
[124.04763031 210.57514954]
[124.04763031 225.57514954]
[124.20367432 240.57434082]
[124.51572418 255.57109070]
[124.82778168 270.56784058]
[125.13983917 285.56460571]
[125.45189667 300.56134033]
[125.76395416 315.55810547]
[126.07601166 330.55487061]
[126.38806152 345.55160522]
[126.70011902 360.54837036]
[127.01217651 375.54513550]
[141.66717529 379.13589478]
[154.89297485 386.39813232]
[165.78784180 396.83673096]
[173.60894775 409.73995972]
[177.82301331 424.22802734]
[178.14273071 439.31311035]
[174.54631042 453.96670532]
[167.27894592 467.18972778]
[156.83615112 478.08056641]
[143.92991638 485.89666748]
[129.44021606 490.10516357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[24 127]
[25 117]
[26 116]
[27 115]
[28 114]
[29 113]
[31 46]
[32 45]
[50 111]
[51 110]
[52 109]
[53 108]
[54 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
