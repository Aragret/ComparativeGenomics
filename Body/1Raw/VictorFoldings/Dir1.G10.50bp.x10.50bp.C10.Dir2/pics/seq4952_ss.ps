%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCAUGGGGGGGGGGAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCCAAAUAAAAGCCCCCCCCCCUAAUAACCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.34121704]
[71.19830322 353.32516479]
[59.48964310 343.79574585]
[50.78712082 331.46008301]
[45.73651886 317.23358154]
[44.71262741 302.17187500]
[47.79142761 287.39273071]
[54.74444962 273.99279785]
[65.05573273 262.96646118]
[77.96011353 255.13195801]
[92.50000000 251.07064819]
[92.50000000 236.07064819]
[92.50000000 221.07064819]
[92.50000000 206.07064819]
[92.50000000 191.07064819]
[92.50000000 176.07064819]
[92.50000000 161.07064819]
[92.50000000 146.07064819]
[92.50000000 131.07064819]
[92.50000000 116.07064819]
[87.16918945 110.79499817]
[76.61772156 121.45645142]
[65.95644379 110.90480804]
[76.50756073 100.24371338]
[71.17675018 94.96806335]
[56.17755890 95.12409973]
[41.17837143 95.28013611]
[26.17918205 95.43617249]
[11.17999363 95.59220886]
[6.16741228 109.89779663]
[-3.43807364 121.62428284]
[-16.47655487 129.35563660]
[-31.37357330 132.15824890]
[-46.33023834 129.69371033]
[-59.54046249 122.25962067]
[-69.40904236 110.75366974]
[-74.74430847 96.56526184]
[-74.90199280 81.40773010]
[-69.86305237 67.11140442]
[-60.23597336 55.40264130]
[-47.18326569 47.69532776]
[-32.28110886 44.92016602]
[-17.32901192 47.41226578]
[-4.13251114 54.87069702]
[5.71485090 66.39481354]
[11.02395725 80.59302521]
[26.02314568 80.43698883]
[41.02233505 80.28095245]
[56.02152252 80.12491608]
[71.02071381 79.96887970]
[81.89626312 78.21330261]
[91.25043488 80.44295502]
[97.85802460 85.63548279]
[100.94741821 92.43748474]
[110.45577240 80.83614349]
[119.96413422 69.23480225]
[129.47248840 57.63346100]
[115.32798767 62.62675858]
[100.39246368 64.01606750]
[85.56964874 61.71731949]
[71.75645447 55.86961365]
[59.78870010 46.82678223]
[50.39052963 35.13600159]
[44.13061905 21.50465775]
[41.38774872 6.75756741]
[42.32788086 -8.21294212]
[46.89413071 -22.50102615]
[54.81020355 -35.24213028]
[65.59710693 -45.66531372]
[78.60214233 -53.13987732]
[93.03839111 -57.21354675]
[108.03233337 -57.63983154]
[122.67670441 -54.39293671]
[136.08540344 -47.66932678]
[147.44706726 -37.87583923]
[156.07424927 -25.60506439]
[161.44490051 -11.59949207]
[163.23405457 3.29342222]
[161.33348083 18.17252731]
[155.85813904 32.13750839]
[147.14070129 44.34190750]
[160.92308044 38.42194366]
[174.70545959 32.50198364]
[177.89973450 28.21056938]
[182.02215576 25.85302734]
[186.16265869 25.45561028]
[189.53706360 26.67252922]
[203.66186523 21.62377357]
[217.78666687 16.57501602]
[231.91146851 11.52626038]
[238.72808838 -2.47986341]
[253.12457275 -7.39880705]
[266.43524170 -0.81388992]
[280.56005859 -5.86264610]
[285.19497681 -10.72319984]
[290.75765991 -12.23579502]
[295.37878418 -10.81425571]
[309.70138550 -15.27107143]
[320.57940674 -26.75927544]
[335.03082275 -23.15293312]
[349.35342407 -27.60974884]
[363.67602539 -32.06656265]
[377.99862671 -36.52338028]
[392.32122803 -40.98019409]
[405.64855957 -51.45962143]
[419.40783691 -41.55411148]
[413.69836426 -25.59045219]
[396.77804565 -26.65759850]
[382.45544434 -22.20078278]
[368.13284302 -17.74396706]
[353.81024170 -13.28715134]
[339.48764038 -8.83033562]
[329.63406372 2.33908701]
[314.15820312 -0.94847381]
[299.83560181 3.50834179]
[285.60882568 8.26215649]
[271.48400879 13.31091309]
[265.36334229 26.84135818]
[251.11070251 32.16272736]
[236.96022034 25.65106201]
[222.83541870 30.69981956]
[208.71061707 35.74857712]
[194.58581543 40.79733276]
[180.62542725 46.28436279]
[166.84304810 52.20432663]
[153.06066895 58.12429047]
[141.07383728 67.14182281]
[131.56547546 78.74316406]
[122.05711365 90.34450531]
[112.54875946 101.94584656]
[107.50000000 116.07064819]
[107.50000000 131.07064819]
[107.50000000 146.07064819]
[107.50000000 161.07064819]
[107.50000000 176.07064819]
[107.50000000 191.07064819]
[107.50000000 206.07064819]
[107.50000000 221.07064819]
[107.50000000 236.07064819]
[107.50000000 251.07064819]
[122.03988647 255.13195801]
[134.94427490 262.96646118]
[145.25555420 273.99279785]
[152.20857239 287.39273071]
[155.28736877 302.17187500]
[154.26348877 317.23358154]
[149.21287537 331.46008301]
[140.51036072 343.79574585]
[128.80169678 353.32516479]
[114.95575714 359.34121704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[54 130]
[55 129]
[56 128]
[57 127]
[81 126]
[82 125]
[83 124]
[87 123]
[88 122]
[89 121]
[90 120]
[93 117]
[94 116]
[97 115]
[98 114]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
