%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAACCCCGGGGGGGGGGAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGxxxxxxxxxxUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCACCCCCCCCCCAUACUAAACCC\
) } def
/len { sequence length } bind def

/coor [
[113.70682526 509.47634888]
[99.68488312 503.92333984]
[87.48492432 495.05700684]
[77.87385559 483.43469238]
[71.45583344 469.78698730]
[68.63429260 454.97180176]
[69.58660889 439.92044067]
[74.25291443 425.57901001]
[82.33988190 412.84906006]
[93.33915710 402.53076172]
[106.55931091 395.27279663]
[121.16932678 391.53137207]
[121.16932678 376.53137207]
[121.16932678 361.53137207]
[121.16932678 346.53137207]
[121.16932678 331.53137207]
[121.16932678 316.53137207]
[121.16932678 301.53137207]
[121.16932678 286.53137207]
[121.16932678 271.53137207]
[121.16932678 256.53137207]
[119.93871307 241.58192444]
[117.48578644 226.78384399]
[114.88106537 212.01173401]
[112.12482452 197.26713562]
[109.36857605 182.52253723]
[106.46110535 167.80702209]
[103.40270996 153.12211609]
[100.34431458 138.43722534]
[97.28591919 123.75232697]
[94.22752380 109.06742859]
[88.52285767 95.19454956]
[80.36619568 82.60610962]
[72.20952606 70.01766968]
[64.05286407 57.42922974]
[52.66178894 47.66995239]
[38.97116470 41.54077911]
[25.28053856 35.41160583]
[11.58991241 29.28243256]
[-2.10071278 23.15325737]
[-15.97359371 17.44859505]
[-30.01556969 12.17385292]
[-39.21267319 12.07853127]
[-44.28984833 6.64396763]
[-58.22056580 1.08203053]
[-74.36426544 3.96524811]
[-84.72472382 -8.74667263]
[-78.64398956 -23.97679710]
[-62.37739944 -26.05768013]
[-52.65862656 -12.84868526]
[-38.72791290 -7.28674841]
[-24.74082756 -1.86812341]
[-10.69885159 3.40661812]
[-7.30760717 2.24615526]
[-3.17781782 2.70923281]
[0.90317541 5.12813854]
[4.02846098 9.46263218]
[17.71908760 15.59180641]
[31.40971184 21.72097969]
[45.10033798 27.85015488]
[58.79096222 33.97932816]
[50.34383392 21.58392525]
[44.60416794 7.72549057]
[41.81356049 -7.01264095]
[42.08947754 -22.01010323]
[45.42030716 -36.63561630]
[51.66584015 -50.27355194]
[60.56319427 -62.34985352]
[71.73784637 -72.35620880]
[84.71943665 -79.87141418]
[98.96154022 -84.57913208]
[113.86465454 -86.28121948]
[128.80148315 -84.90602112]
[143.14329529 -80.51141357]
[156.28639221 -73.28239441]
[167.67758179 -63.52324295]
[176.83734131 -51.64474487]
[183.38014221 -38.14689636]
[187.03056335 -23.59786224]
[187.63494873 -8.61004448]
[185.16787720 6.18568230]
[179.73316956 20.16652679]
[171.55960083 32.74400330]
[160.99122620 43.38868713]
[148.47288513 51.65251923]
[134.53149414 57.18765640]
[119.75389862 59.76111221]
[104.76211548 59.26455688]
[90.18719482 55.71889496]
[76.64130402 49.27256393]
[84.79796600 61.86100006]
[92.95463562 74.44944000]
[101.11129761 87.03787994]
[100.74684906 72.04230499]
[104.95156097 57.64368439]
[113.32862854 45.20082092]
[125.08748627 35.88797379]
[139.11845398 30.58400726]
[154.09739685 29.78946495]
[168.61073303 33.57932663]
[181.28881836 41.59593582]
[190.93521118 53.08275986]
[196.63957214 66.95576477]
[197.86355591 81.90574646]
[194.49165344 96.52184296]
[186.84210205 109.42472076]
[175.63677979 119.39672089]
[161.93315125 125.49675751]
[147.02444458 127.14917755]
[132.31761169 124.19803619]
[119.20056915 116.92182922]
[108.91242218 106.00903320]
[111.97081757 120.69393158]
[115.02921295 135.37882996]
[118.08760834 150.06372070]
[121.14600372 164.74862671]
[125.98715210 172.56904602]
[124.11317444 179.76629639]
[126.86941528 194.51089478]
[129.62565613 209.25549316]
[134.30522156 217.17366028]
[132.28385925 224.33091736]
[134.73678589 239.12899780]
[143.06289673 226.65197754]
[157.07696533 221.30351257]
[171.59880066 225.06063843]
[181.26055908 236.53453064]
[182.49084473 251.48399353]
[174.83489990 264.38308716]
[161.12266541 270.46374512]
[146.42274475 267.47833252]
[136.16932678 256.53137207]
[136.16932678 271.53137207]
[136.16932678 286.53137207]
[136.16932678 301.53137207]
[136.16932678 316.53137207]
[136.16932678 331.53137207]
[136.16932678 346.53137207]
[136.16932678 361.53137207]
[136.16932678 376.53137207]
[136.16932678 391.53137207]
[150.77934265 395.27279663]
[163.99949646 402.53076172]
[174.99877930 412.84906006]
[183.08573914 425.57901001]
[187.75204468 439.92044067]
[188.70436096 454.97180176]
[185.88282776 469.78698730]
[179.46479797 483.43469238]
[169.85372925 495.05700684]
[157.65376282 503.92333984]
[143.63182068 509.47634888]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 123]
[23 122]
[24 120]
[25 119]
[26 118]
[27 116]
[28 115]
[29 114]
[30 113]
[31 112]
[32 93]
[33 92]
[34 91]
[35 90]
[36 61]
[37 60]
[38 59]
[39 58]
[40 57]
[41 53]
[42 52]
[44 51]
[45 50]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
