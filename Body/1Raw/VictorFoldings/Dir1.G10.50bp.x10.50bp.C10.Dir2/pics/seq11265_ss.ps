%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCUCCAUCGGGGGGGGGGAUCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUxxxxxxxxxxGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCCCCCCCCCCCUACCUCCAUC\
) } def
/len { sequence length } bind def

/coor [
[79.18784332 158.47727966]
[65.79930115 151.79817200]
[54.39799881 142.10932922]
[45.64639664 129.97372437]
[40.05301285 116.09648895]
[37.94285202 101.28397369]
[39.43852615 86.39685059]
[44.45312119 72.30013275]
[52.69527435 59.81292725]
[63.68606567 49.66078568]
[76.78688049 42.43360901]
[91.23649597 38.55133057]
[90.92852020 23.55449295]
[90.62054443 8.55765438]
[90.31256866 -6.43918419]
[90.00458527 -21.43602180]
[89.69660950 -36.43286133]
[89.38863373 -51.42969894]
[89.08065796 -66.42653656]
[88.77267456 -81.42337036]
[88.46469879 -96.42021179]
[88.15672302 -111.41705322]
[87.84874725 -126.41388702]
[72.85533142 -126.98661041]
[57.92137146 -128.43827820]
[43.09834671 -130.76388550]
[28.43735695 -133.95541382]
[13.98893929 -138.00184631]
[-0.19709730 -142.88926697]
[-14.07185078 -148.60081482]
[-27.58749199 -155.11679077]
[-40.69742966 -162.41473389]
[-53.35647202 -170.46949768]
[-65.52097321 -179.25329590]
[-77.14900970 -188.73587036]
[-88.20049286 -198.88452148]
[-98.63732910 -209.66427612]
[-108.42353058 -221.03796387]
[-117.52537537 -232.96636963]
[-125.91147614 -245.40838623]
[-133.55293274 -258.32113647]
[-140.42338562 -271.66006470]
[-146.49917603 -285.37921143]
[-151.75933838 -299.43130493]
[-156.18576050 -313.76788330]
[-159.76315308 -328.33950806]
[-162.47921753 -343.09597778]
[-164.32456970 -357.98641968]
[-165.29286194 -372.95950317]
[-165.38075256 -387.96359253]
[-164.58792114 -402.94699097]
[-162.91711426 -417.85800171]
[-160.37409973 -432.64529419]
[-156.96763611 -447.25784302]
[-152.70945740 -461.64526367]
[-147.61425781 -475.75802612]
[-141.69960022 -489.54739380]
[-134.98587036 -502.96591187]
[-127.49620056 -515.96728516]
[-119.25642395 -528.50665283]
[-110.29493713 -540.54089355]
[-100.64263153 -552.02844238]
[-90.33279419 -562.92968750]
[-79.40094757 -573.20709229]
[-67.88478851 -582.82525635]
[-55.82401276 -591.75091553]
[-43.26019287 -599.95343018]
[-30.23664474 -607.40447998]
[-16.79825974 -614.07830811]
[-2.99136281 -619.95196533]
[11.13644886 -625.00524902]
[25.53647423 -629.22064209]
[40.15907288 -632.58367920]
[54.95383835 -635.08276367]
[69.86976624 -636.70928955]
[84.85544586 -637.45758057]
[99.85920715 -637.32513428]
[114.82933807 -636.31237793]
[129.71423340 -634.42285156]
[144.46257019 -631.66296387]
[159.02351379 -628.04229736]
[173.34687805 -623.57330322]
[187.38328552 -618.27142334]
[201.08433533 -612.15490723]
[214.40280151 -605.24487305]
[227.29278564 -597.56506348]
[239.70983887 -589.14202881]
[251.61116028 -580.00482178]
[262.95571899 -570.18487549]
[273.70443726 -559.71606445]
[283.82022095 -548.63452148]
[293.26818848 -536.97833252]
[302.01583862 -524.78778076]
[310.03295898 -512.10491943]
[317.29193115 -498.97332764]
[323.76773071 -485.43838501]
[329.43804932 -471.54675293]
[334.28329468 -457.34625244]
[338.28680420 -442.88586426]
[341.43478394 -428.21548462]
[343.71633911 -413.38558960]
[345.12362671 -398.44738770]
[345.65182495 -383.45236206]
[345.29907227 -368.45214844]
[344.06658936 -353.49850464]
[341.95864868 -338.64297485]
[338.98251343 -323.93673706]
[335.14840698 -309.43054199]
[330.46960449 -295.17434692]
[324.96215820 -281.21728516]
[318.64514160 -267.60754395]
[311.54025269 -254.39196777]
[303.67202759 -241.61614990]
[295.06759644 -229.32412720]
[285.75659180 -217.55825806]
[275.77111816 -206.35911560]
[265.14559937 -195.76528931]
[253.91667175 -185.81332397]
[242.12304688 -176.53750610]
[229.80535889 -167.96981812]
[217.00608826 -160.13980103]
[203.76936340 -153.07443237]
[190.14079285 -146.79808044]
[176.16737366 -141.33238220]
[161.89726257 -136.69616699]
[147.37965393 -132.90542603]
[132.66461182 -129.97322083]
[117.80284119 -127.90966034]
[102.84558105 -126.72186279]
[103.15355682 -111.72502899]
[103.46154022 -96.72818756]
[103.76951599 -81.73135376]
[104.07749176 -66.73451233]
[104.38546753 -51.73767471]
[104.69345093 -36.74083710]
[105.00142670 -21.74399948]
[105.30940247 -6.74716139]
[105.61737823 8.24967670]
[105.92536163 23.24651527]
[106.23333740 38.24335098]
[120.83015442 41.52912903]
[134.21664429 48.21236038]
[145.61495972 57.90471268]
[154.36282349 70.04301453]
[159.95193481 83.92196655]
[162.05754089 98.73513031]
[160.55728149 113.62179565]
[155.53834534 127.71695709]
[147.29235840 140.20162964]
[136.29843140 150.35038757]
[123.19539642 157.57353210]
[108.74458313 161.45137024]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
