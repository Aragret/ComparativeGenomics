%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCAACACAUGGGGGGGGGGAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAAxxxxxxxxxxCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACCCCCCCCCCCUCCAACUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.53877258 365.49816895]
[71.51683044 359.94515991]
[59.31687546 351.07885742]
[49.70580292 339.45654297]
[43.28777695 325.80883789]
[40.46623993 310.99365234]
[41.41855621 295.94226074]
[46.08486176 281.60083008]
[54.17182922 268.87088013]
[65.17110443 258.55261230]
[78.39125824 251.29463196]
[93.00127411 247.55320740]
[93.00127411 232.55320740]
[93.00127411 217.55320740]
[93.00127411 202.55320740]
[93.00127411 187.55320740]
[93.00127411 172.55320740]
[93.00127411 157.55320740]
[93.00127411 142.55320740]
[93.00127411 127.55319977]
[93.00127411 112.55319977]
[88.80139160 109.81213379]
[85.67494202 105.66878510]
[70.73892975 104.28475952]
[55.80291748 102.90073395]
[43.71205902 112.72157288]
[28.58453560 111.10520935]
[19.29637337 99.51790619]
[4.36036158 98.13388062]
[-10.57565117 96.74985504]
[-16.13769341 110.79408264]
[-25.43223763 122.70156097]
[-37.70581818 131.50700378]
[-51.96347046 136.49661255]
[-67.04938507 137.26586914]
[-81.74062347 133.75242615]
[-94.84622955 126.24111938]
[-105.30378723 115.34083557]
[-112.26554871 101.93521881]
[-115.16716003 87.11100769]
[-113.77339935 72.06992340]
[-108.19725037 58.03129196]
[-98.89074707 46.13315201]
[-86.60832977 37.34003830]
[-72.34567261 32.36476898]
[-57.25899124 31.61066437]
[-42.57128906 35.13885880]
[-29.47323799 42.66333389]
[-19.02663612 53.57411575]
[-12.07834339 66.98671722]
[-9.19162560 81.81384277]
[5.74438715 83.19786835]
[20.68039894 84.58189392]
[31.93957520 74.89857483]
[47.10653305 76.08940887]
[57.18694305 87.96472168]
[72.12295532 89.34874725]
[87.05896759 90.73277283]
[100.27414703 83.63636780]
[107.37055206 70.42118073]
[114.46695709 57.20600128]
[121.56336212 43.99081802]
[128.65975952 30.77563477]
[135.75616455 17.56045341]
[142.85256958 4.34526968]
[129.96429443 12.01941109]
[115.54887390 16.16615868]
[100.55288696 16.51321411]
[85.96105957 13.03779030]
[72.73156738 5.96809959]
[61.73312759 -4.23162270]
[53.68795776 -16.89160919]
[49.12434769 -31.18053627]
[48.34196854 -46.16011810]
[51.39219284 -60.84671783]
[58.07472992 -74.27592468]
[67.95076752 -85.56591797]
[80.37178802 -93.97533417]
[94.52216339 -98.95195770]
[109.47270966 -100.16899872]
[124.24169159 -97.54654694]
[137.85929871 -91.25680542]
[149.43132019 -81.71278381]
[158.19787598 -69.54119873]
[163.58331299 -55.54130554]
[165.23399353 -40.63240814]
[163.04153442 -25.79350471]
[157.15161133 -12.00193977]
[169.30494690 -20.79378319]
[181.45828247 -29.58562469]
[193.61161804 -38.37746811]
[205.76495361 -47.16931152]
[207.43925476 -51.32820129]
[210.10530090 -54.39670181]
[213.28565979 -56.19449615]
[216.49401855 -56.71959305]
[219.29568481 -56.13510513]
[232.12934875 -63.90024185]
[235.66165161 -79.30473328]
[249.09617615 -87.62873077]
[264.46246338 -83.93376160]
[272.64395142 -70.41197205]
[268.78674316 -55.08561325]
[255.17919922 -47.04753494]
[239.89448547 -51.06658554]
[227.06082153 -43.30145264]
[214.55679321 -35.01597595]
[202.40345764 -26.22413445]
[190.25012207 -17.43229294]
[178.09678650 -8.64044952]
[165.94346619 0.15139300]
[156.06774902 11.44167328]
[148.97134399 24.65685654]
[141.87493896 37.87203979]
[134.77854919 51.08722305]
[127.68213654 64.30240631]
[120.58573914 77.51758575]
[113.48933411 90.73277283]
[123.77269745 79.81249237]
[137.52703857 73.82765961]
[152.52680969 73.74666595]
[166.34498596 79.58259583]
[176.74568176 90.39118195]
[182.04602051 104.42351532]
[181.38836670 119.40908813]
[174.87911987 132.92315674]
[163.57154846 142.77903748]
[149.29525757 147.38201904]
[134.36022949 145.98730469]
[121.18306732 138.82055664]
[111.89588928 127.04141235]
[108.00127411 112.55319977]
[108.00127411 127.55319977]
[108.00127411 142.55320740]
[108.00127411 157.55320740]
[108.00127411 172.55320740]
[108.00127411 187.55320740]
[108.00127411 202.55320740]
[108.00127411 217.55320740]
[108.00127411 232.55320740]
[108.00127411 247.55320740]
[122.61128998 251.29463196]
[135.83145142 258.55261230]
[146.83071899 268.87088013]
[154.91769409 281.60083008]
[159.58398438 295.94226074]
[160.53630066 310.99365234]
[157.71476746 325.80883789]
[151.29675293 339.45654297]
[141.68566895 351.07885742]
[129.48571777 359.94515991]
[115.46377563 365.49816895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 58]
[24 57]
[25 56]
[28 53]
[29 52]
[30 51]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[64 113]
[65 112]
[88 111]
[89 110]
[90 109]
[91 108]
[92 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
