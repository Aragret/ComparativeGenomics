%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCUCAUAGGGGGGGGGGUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUxxxxxxxxxxGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCCCCCCCCCCCAUUCUCAUA\
) } def
/len { sequence length } bind def

/coor [
[109.57341766 452.50039673]
[95.72747803 446.48437500]
[84.01881409 436.95495605]
[75.31629181 424.61929321]
[70.26569366 410.39276123]
[69.24179840 395.33108521]
[72.32060242 380.55194092]
[79.27362061 367.15200806]
[89.58490753 356.12567139]
[102.48928833 348.29116821]
[117.02917480 344.22985840]
[117.02917480 329.22985840]
[117.02917480 314.22985840]
[117.02917480 299.22985840]
[117.02917480 284.22985840]
[117.02917480 269.22985840]
[117.02917480 254.22984314]
[117.02917480 239.22984314]
[117.02917480 224.22984314]
[117.02917480 209.22984314]
[115.47158813 194.31094360]
[112.37326813 179.63441467]
[109.27494812 164.95788574]
[106.17662811 150.28135681]
[103.07830811 135.60482788]
[99.97998047 120.92830658]
[96.66809845 135.55812073]
[83.63313293 142.98036194]
[69.36156464 138.36276245]
[63.14496231 124.71160889]
[69.03067017 110.91456604]
[83.18633270 105.95421600]
[68.25202942 104.55191803]
[53.31771851 103.14961243]
[45.02260590 116.01233673]
[31.69433975 123.53668976]
[16.39565277 123.99362183]
[2.64207506 117.27814484]
[-6.40592337 104.93341827]
[-8.66917801 89.79616547]
[-3.62761021 75.34482574]
[7.56026506 64.90021515]
[22.32355690 60.86241150]
[37.26976776 64.15928650]
[48.96436691 74.03324127]
[54.72002411 88.21530151]
[69.65432739 89.61760712]
[84.58863831 91.01991272]
[96.76047516 82.25370026]
[100.16345215 67.64481354]
[103.56642914 53.03591919]
[89.60607910 46.28274155]
[77.49418640 36.60889053]
[67.83078766 24.49755287]
[61.09373474 10.55257320]
[57.61507416 -4.53165770]
[57.56469345 -20.00477600]
[60.94202042 -35.09777069]
[67.57618713 -49.06121063]
[77.13471222 -61.20244217]
[89.14012146 -70.91996765]
[102.99382019 -77.73323059]
[118.00592804 -81.30638123]
[133.42965698 -81.46482849]
[136.52796936 -96.14134979]
[139.32029724 -110.87915802]
[141.80541992 -125.67186737]
[144.29054260 -140.46456909]
[146.77565002 -155.25727844]
[149.26077271 -170.04998779]
[138.09167480 -160.03742981]
[123.44161224 -156.81629944]
[109.10270691 -161.22038269]
[98.78654480 -172.10968018]
[95.16343689 -186.66552734]
[99.17120361 -201.12020874]
[109.77244568 -211.73216248]
[124.22307587 -215.75451660]
[138.78259277 -212.14610291]
[149.68229675 -201.84092712]
[154.10083008 -187.50659180]
[159.58786011 -201.46697998]
[156.61796570 -217.59495544]
[169.27406311 -228.02354431]
[184.53662109 -222.02470398]
[186.70484924 -205.76953125]
[173.54824829 -195.97994995]
[168.06121826 -182.01956177]
[164.05348206 -167.56486511]
[161.56835938 -152.77215576]
[159.08323669 -137.97946167]
[156.59812927 -123.18674469]
[154.11300659 -108.39404297]
[156.14459229 -104.00676727]
[155.39578247 -98.29094696]
[151.20449829 -93.04302979]
[148.10617065 -78.36650848]
[161.37495422 -72.44242096]
[173.11866760 -63.87405396]
[182.81782532 -53.03730011]
[190.04267883 -40.40847778]
[194.47235107 -26.54338837]
[195.90901184 -12.05284595]
[194.28677368 2.42421389]
[189.67466736 16.24892426]
[182.27371216 28.81066895]
[172.40820312 39.55405807]
[160.51141357 48.00347900]
[147.10664368 53.78415298]
[132.78419495 56.63875961]
[118.17532349 56.43889618]
[114.77234650 71.04779053]
[111.36936951 85.65668488]
[120.69097900 99.81613159]
[114.65650940 117.82998657]
[117.75482941 132.50651550]
[120.85314941 147.18304443]
[123.95147705 161.85955811]
[127.04979706 176.53608704]
[130.14811707 191.21261597]
[136.88050842 177.80831909]
[149.33691406 169.45141602]
[164.29304504 168.30505371]
[177.87754822 174.66596985]
[186.57411194 186.88766479]
[188.13166809 201.80657959]
[182.14703369 215.56100464]
[170.16932678 224.59065247]
[155.29893494 226.55821228]
[141.38500977 220.95440674]
[132.02917480 209.22984314]
[132.02917480 224.22984314]
[132.02917480 239.22984314]
[132.02917480 254.22984314]
[132.02917480 269.22985840]
[132.02917480 284.22985840]
[132.02917480 299.22985840]
[132.02917480 314.22985840]
[132.02917480 329.22985840]
[132.02917480 344.22985840]
[146.56906128 348.29116821]
[159.47343445 356.12567139]
[169.78472900 367.15200806]
[176.73774719 380.55194092]
[179.81654358 395.33108521]
[178.79264832 410.39276123]
[173.74205017 424.61929321]
[165.03953552 436.95495605]
[153.33087158 446.48437500]
[139.48492432 452.50039673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 120]
[22 119]
[23 118]
[24 117]
[25 116]
[26 115]
[32 48]
[33 47]
[34 46]
[49 113]
[50 112]
[51 111]
[64 97]
[65 96]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
[81 88]
[82 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
