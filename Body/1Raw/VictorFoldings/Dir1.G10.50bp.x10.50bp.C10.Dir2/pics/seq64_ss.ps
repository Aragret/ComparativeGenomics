%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUAUGCGGGGGGGGGGACGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUGUCGCAGUAxxxxxxxxxxGAUGCAAUUCCCGGACGUCUAAACCAAACCACUUUCACCGCUACACGACCCCCCCCCCCCGGGGGUAUAC\
) } def
/len { sequence length } bind def

/coor [
[84.41701508 422.48635864]
[71.85879517 414.13519287]
[61.77256775 402.92276001]
[54.79237366 389.55386353]
[51.35699081 374.86886597]
[51.68236923 359.79089355]
[55.74805450 345.26776123]
[63.29847336 332.21243286]
[73.85900116 321.44552612]
[86.76579285 313.64389038]
[101.20752716 309.29794312]
[100.58354950 294.31094360]
[99.95957184 279.32391357]
[99.33559418 264.33691406]
[98.71161652 249.34988403]
[98.08763885 234.36286926]
[97.46366119 219.37585449]
[96.83968353 204.38883972]
[96.21570587 189.40182495]
[95.59172821 174.41481018]
[87.33168793 162.02041626]
[94.48822784 147.91032410]
[93.86425018 132.92330933]
[75.10324860 122.39963531]
[66.61363220 102.63478851]
[71.89785767 81.78293610]
[61.45804977 71.01212311]
[46.29750061 66.48792267]
[42.99527740 51.96398926]
[32.55546570 41.19318008]
[22.11565399 30.42237282]
[11.67584133 19.65156364]
[-0.21653871 10.50982952]
[-13.30969334 3.19072413]
[-26.40284729 -4.12838125]
[-39.49600220 -11.44748688]
[-52.58915710 -18.76659203]
[-68.41034698 -18.74654198]
[-75.74435425 -31.71040344]
[-87.82772827 -25.00285721]
[-101.53864288 -25.15748405]
[-113.28042603 -32.02632523]
[-120.02612305 -43.71422577]
[-120.09858704 -57.10044098]
[-133.03663635 -64.69034576]
[-148.85482788 -64.99944305]
[-155.91754150 -78.11307526]
[-168.85560608 -85.70298004]
[-185.24917603 -85.27557373]
[-193.58422852 -99.39857483]
[-185.28634644 -113.54344940]
[-168.89170837 -113.15916443]
[-161.26568604 -98.64103699]
[-148.32763672 -91.05113220]
[-133.43486023 -91.28491974]
[-125.44673157 -77.62840271]
[-112.50867462 -70.03849792]
[-97.71716309 -77.08948517]
[-81.47039795 -73.92586517]
[-70.18133545 -61.59547043]
[-68.42524719 -44.80355835]
[-53.54056168 -45.34711838]
[-45.27005005 -31.85974693]
[-32.17689514 -24.54064178]
[-19.08374214 -17.22153664]
[-5.99058771 -9.90243053]
[7.10256672 -2.58332467]
[0.27119160 -15.93743706]
[-1.03627682 -30.88034630]
[3.37214351 -45.21791458]
[12.84914303 -56.84488297]
[26.00317001 -64.05401611]
[40.90275192 -65.78675842]
[55.36011887 -61.78868484]
[67.25241852 -52.64685059]
[74.83345795 -39.70359421]
[76.99006653 -24.85943604]
[73.40558624 -10.29401588]
[64.60633850 1.85395861]
[51.88436508 9.80074024]
[37.10768890 12.37946606]
[22.44664955 9.21175194]
[32.88646317 19.98255920]
[43.32627487 30.75336838]
[53.76608658 41.52417755]
[68.17990875 45.27798080]
[72.22885895 60.57231140]
[82.66867065 71.34311676]
[95.09019470 66.87168121]
[108.27466583 67.54816437]
[120.17330933 73.26744843]
[128.93716431 83.14080048]
[143.25975037 78.68398285]
[157.58235168 74.22716522]
[156.81388855 59.16528320]
[159.81610107 44.38565445]
[166.40028381 30.81733131]
[176.15254211 19.31323624]
[188.45985413 10.59652328]
[202.54855347 5.21513319]
[217.53302002 3.50734544]
[232.47131348 5.58051205]
[246.42440796 11.30431271]
[258.51519775 20.31894302]
[267.98364258 32.05773926]
[274.23455811 45.78278732]
[276.87500000 60.63131714]
[275.73898315 75.66994476]
[270.89791870 89.95332336]
[262.65612793 102.58358765]
[251.53167725 112.76679230]
[238.22389221 119.86281586]
[223.56929016 123.42558289]
[208.48905945 123.23114777]
[193.93118286 119.29173279]
[180.81077576 111.85496521]
[169.95257568 101.38832855]
[162.03916931 88.54976654]
[147.71656799 93.00657654]
[133.39396667 97.46339417]
[133.09361267 105.13851929]
[131.05247498 112.54334259]
[127.37792206 119.28836823]
[122.26324463 125.01879120]
[115.97747803 129.43318176]
[108.85126495 132.29933167]
[109.47524261 147.28634644]
[117.77991486 160.75271606]
[110.57874298 173.79083252]
[111.20272064 188.77784729]
[111.82669830 203.76486206]
[112.45067596 218.75187683]
[113.07465363 233.73889160]
[113.69863129 248.72590637]
[114.32260895 263.71292114]
[114.94658661 278.69995117]
[115.57056427 293.68695068]
[116.19454193 308.67398071]
[130.94754028 311.80441284]
[144.45817566 318.50616455]
[155.87716675 328.35797119]
[164.48667908 340.74050903]
[169.74551392 354.87539673]
[171.32312012 369.87411499]
[169.12031555 384.79385376]
[163.27557373 398.69671631]
[154.15629578 410.70877075]
[142.33572388 420.07495117]
[128.55691528 426.20645142]
[113.68601227 428.71783447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 127]
[23 126]
[26 88]
[27 87]
[29 85]
[30 84]
[31 83]
[32 82]
[33 67]
[34 66]
[35 65]
[36 64]
[37 63]
[39 61]
[44 57]
[45 56]
[47 54]
[48 53]
[92 120]
[93 119]
[94 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
