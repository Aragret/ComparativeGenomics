%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUUUAACGGGGGGGGGGUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUxxxxxxxxxxAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAGAGAGUAACCCCCCCCCCAAAAUUUAAC\
) } def
/len { sequence length } bind def

/coor [
[81.99203491 464.01202393]
[68.14609528 457.99600220]
[56.43743134 448.46658325]
[47.73490524 436.13092041]
[42.68430328 421.90438843]
[41.66041183 406.84271240]
[44.73921204 392.06356812]
[51.69223404 378.66363525]
[62.00351715 367.63729858]
[74.90789795 359.80279541]
[89.44778442 355.74148560]
[89.44778442 340.74148560]
[89.44778442 325.74148560]
[89.44778442 310.74148560]
[89.44778442 295.74148560]
[89.44778442 280.74148560]
[89.44778442 265.74148560]
[89.44778442 250.74147034]
[89.44778442 235.74147034]
[89.44778442 220.74147034]
[89.44778442 205.74147034]
[81.09922791 196.93188477]
[81.01480103 184.39347839]
[89.78788757 174.88101196]
[90.09993744 159.88426208]
[90.41199493 144.88749695]
[82.94114685 132.00201416]
[90.96386719 118.36579895]
[80.41257477 107.70417023]
[65.41339111 107.86020660]
[50.41419983 108.01625061]
[35.41501236 108.17228699]
[20.41582298 108.32832336]
[5.41663456 108.48435974]
[-9.58255386 108.64039612]
[-23.41547966 117.44847107]
[-37.83298492 109.63389587]
[-38.00357819 93.23563385]
[-23.75176430 85.12281036]
[-9.73859024 93.64120483]
[5.26059771 93.48516846]
[20.25978661 93.32913208]
[35.25897598 93.17309570]
[50.25816345 93.01705933]
[65.25735474 92.86102295]
[80.25653839 92.70498657]
[92.24337006 83.68745422]
[96.55095673 69.31927490]
[100.85854340 54.95108795]
[104.41330719 40.37838364]
[107.20562744 25.64057922]
[109.99795532 10.90277290]
[112.79027557 -3.83503342]
[115.12138367 -18.65279198]
[116.98899078 -33.53607178]
[118.85660553 -48.41934967]
[120.56929779 -63.32125473]
[122.12687683 -78.24016571]
[123.68445587 -93.15908051]
[114.61529541 -81.21126556]
[102.70532227 -72.09246063]
[88.80535889 -66.45410156]
[73.90840149 -64.69896698]
[59.07863617 -66.95245361]
[45.37548447 -73.05356598]
[33.77786255 -82.56645966]
[25.11427879 -94.81155396]
[20.00364113 -108.91408539]
[18.81104469 -123.86660004]
[21.62168312 -138.60092163]
[28.23477173 -152.06446838]
[38.17788696 -163.29542542]
[50.74071121 -171.49150085]
[65.02578735 -176.06715393]
[80.01261902 -176.69551086]
[94.63058472 -173.33171082]
[107.83540344 -166.21604919]
[118.68375397 -155.85682678]
[126.40065002 -142.99411011]
[130.43481445 -128.54678345]
[130.49877930 -113.55236053]
[138.22286987 -126.41076660]
[145.94696045 -139.26916504]
[153.67103577 -152.12756348]
[161.39512634 -164.98597717]
[157.32723999 -180.25776672]
[165.32180786 -193.89091492]
[180.63575745 -197.79710388]
[194.18362427 -189.65885925]
[197.92767334 -174.30445862]
[189.64665222 -160.84339905]
[174.25352478 -157.26188660]
[166.52943420 -144.40348816]
[158.80535889 -131.54507446]
[151.08126831 -118.68667603]
[143.35719299 -105.82827759]
[138.60337830 -91.60149384]
[137.04579163 -76.68258667]
[135.48820496 -61.76367188]
[137.93759155 -54.73899078]
[133.73988342 -46.55173874]
[131.87226868 -31.66845894]
[130.00465393 -16.78517914]
[131.92396545 -13.75470638]
[132.43333435 -9.62648296]
[131.02523804 -5.09110451]
[127.52808380 -1.04270887]
[124.73575592 13.69509697]
[121.94343567 28.43290329]
[119.15110779 43.17070770]
[132.97647095 37.35181046]
[146.24658203 44.34495926]
[149.26206970 59.03872681]
[139.81886292 70.69316101]
[124.81916809 70.78981018]
[115.22672272 59.25867081]
[110.91914368 73.62685394]
[106.61155701 87.99504089]
[111.42907715 90.77330017]
[115.01335144 95.50405884]
[116.57684326 101.61716461]
[115.60098267 108.23062897]
[111.95589447 114.27767944]
[105.96061707 118.67785645]
[113.40914917 132.63600159]
[105.40875244 145.19955444]
[105.09669495 160.19631958]
[104.78463745 175.19306946]
[114.03889465 191.07823181]
[104.44778442 205.74147034]
[104.44778442 220.74147034]
[104.44778442 235.74147034]
[104.44778442 250.74147034]
[104.44778442 265.74148560]
[104.44778442 280.74148560]
[104.44778442 295.74148560]
[104.44778442 310.74148560]
[104.44778442 325.74148560]
[104.44778442 340.74148560]
[104.44778442 355.74148560]
[118.98767090 359.80279541]
[131.89205933 367.63729858]
[142.20333862 378.66363525]
[149.15635681 392.06356812]
[152.23515320 406.84271240]
[151.21127319 421.90438843]
[146.16065979 436.13092041]
[137.45814514 448.46658325]
[125.74948120 457.99600220]
[111.90354156 464.01202393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 128]
[25 127]
[26 126]
[28 124]
[29 46]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[35 40]
[47 118]
[48 117]
[49 116]
[50 110]
[51 109]
[52 108]
[53 107]
[54 103]
[55 102]
[56 101]
[57 99]
[58 98]
[59 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
