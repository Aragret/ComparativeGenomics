%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCACCCUUAGGGGGGGGGGUCACAACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCxxxxxxxxxxCCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACCCCCCCCCCCUCCACCAUUA\
) } def
/len { sequence length } bind def

/coor [
[52.97282410 712.12390137]
[38.95088196 706.57086182]
[26.75092506 697.70452881]
[17.13985252 686.08221436]
[10.72182751 672.43450928]
[7.90029097 657.61932373]
[8.85260677 642.56799316]
[13.51891232 628.22656250]
[21.60587883 615.49658203]
[32.60515213 605.17834473]
[45.82531357 597.92034912]
[60.43532562 594.17889404]
[60.43532562 579.17889404]
[60.43532562 564.17889404]
[60.43532562 549.17889404]
[60.43532562 534.17889404]
[60.43532562 519.17889404]
[60.43532562 504.17889404]
[60.43532562 489.17889404]
[60.43532562 474.17889404]
[60.43532562 459.17889404]
[60.43532562 444.17889404]
[52.69802475 431.45162964]
[60.43532562 417.65145874]
[48.82691956 427.15118408]
[33.88352966 425.84924316]
[24.09288597 414.48513794]
[25.01600647 399.51354980]
[36.12856293 389.43829346]
[51.11870575 389.98199463]
[61.47243118 400.83657837]
[63.31575394 385.95028687]
[65.15908051 371.06396484]
[67.00240326 356.17767334]
[52.92344284 346.35565186]
[45.68748474 330.69104004]
[47.35330963 313.42745972]
[57.55466843 299.29168701]
[73.57604218 292.19937134]
[74.80664825 277.24993896]
[76.03726196 262.30050659]
[77.26787567 247.35107422]
[78.49848938 232.40164185]
[79.72910309 217.45220947]
[80.95971680 202.50277710]
[82.19032288 187.55332947]
[72.39192963 176.39416504]
[73.42698669 161.21578979]
[85.19818115 151.01399231]
[86.42879486 136.06455994]
[87.65940857 121.11511993]
[88.89002228 106.16568756]
[84.93341064 91.69691467]
[76.26679993 79.45396423]
[67.60019684 67.21101379]
[58.93358994 54.96805573]
[43.64782715 56.46507263]
[29.66810036 50.10403442]
[20.75488281 37.59603119]
[19.30578804 22.30565262]
[25.71061325 8.34593296]
[38.24649429 -0.52803296]
[53.54133987 -1.92919290]
[67.48091888 4.51935816]
[76.31554413 17.08299255]
[77.66875458 32.38215637]
[71.17654419 46.30144882]
[79.84314728 58.54440308]
[88.50975800 70.78735352]
[97.17636108 83.03031158]
[104.64437103 83.72232056]
[102.90829468 68.82312775]
[101.17221069 53.92393112]
[99.43613434 39.02473831]
[97.70005798 24.12554169]
[90.03546143 11.23158836]
[89.32267761 -3.75146651]
[95.72861481 -17.31479454]
[107.75310516 -26.28204918]
[122.58016968 -28.55322075]
[136.73750305 -23.59642982]
[146.90966797 -12.57249165]
[150.71446228 1.93693709]
[147.26086426 16.53394508]
[137.35734558 27.80032921]
[132.91310120 42.12683487]
[128.46885681 56.45333862]
[124.02462006 70.77984619]
[119.58038330 85.10634613]
[127.04839325 85.79836273]
[137.81706238 75.35635376]
[148.58575439 64.91434479]
[159.35443115 54.47233582]
[170.12310791 44.03032303]
[177.28514099 28.66342735]
[194.03414917 31.29159164]
[196.14527893 48.11358643]
[180.56510925 54.79900360]
[169.79643250 65.24101257]
[159.02775574 75.68302155]
[148.25907898 86.12503052]
[137.49040222 96.56703949]
[126.60513306 108.32089996]
[113.87579346 111.62941742]
[103.83945465 107.39630127]
[102.60884094 122.34573364]
[101.37822723 137.29516602]
[100.14762115 152.24459839]
[110.09207153 164.23399353]
[108.63109589 179.37731934]
[97.13976288 188.78395081]
[95.90914917 203.73338318]
[94.67853546 218.68281555]
[93.44792175 233.63224792]
[92.21730804 248.58168030]
[90.98670197 263.53112793]
[89.75608826 278.48056030]
[88.52547455 293.42999268]
[99.84848785 299.78057861]
[107.88243103 309.91867065]
[111.45149231 322.30322266]
[110.05511475 335.06878662]
[103.93789673 346.30654907]
[94.04766083 354.34979248]
[81.88871002 358.02099609]
[80.04538727 372.90728760]
[78.20206451 387.79360962]
[76.35874176 402.67990112]
[75.43532562 417.65145874]
[83.17262268 431.45162964]
[75.43532562 444.17889404]
[75.43532562 459.17889404]
[75.43532562 474.17889404]
[75.43532562 489.17889404]
[75.43532562 504.17889404]
[75.43532562 519.17889404]
[75.43532562 534.17889404]
[75.43532562 549.17889404]
[75.43532562 564.17889404]
[75.43532562 579.17889404]
[75.43532562 594.17889404]
[90.04533386 597.92034912]
[103.26549530 605.17834473]
[114.26477051 615.49658203]
[122.35173798 628.22656250]
[127.01804352 642.56799316]
[127.97035980 657.61932373]
[125.14881897 672.43450928]
[118.73079681 686.08221436]
[109.11972809 697.70452881]
[96.91976929 706.57086182]
[82.89782715 712.12390137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 129]
[31 128]
[32 127]
[33 126]
[34 125]
[39 118]
[40 117]
[41 116]
[42 115]
[43 114]
[44 113]
[45 112]
[46 111]
[49 108]
[50 107]
[51 106]
[52 105]
[53 70]
[54 69]
[55 68]
[56 67]
[90 102]
[91 101]
[92 100]
[93 99]
[94 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
