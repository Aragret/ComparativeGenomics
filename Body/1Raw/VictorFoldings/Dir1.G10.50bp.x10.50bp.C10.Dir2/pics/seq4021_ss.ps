%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCCGAACUAGGGGGGGGGGGUCUCAGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUxxxxxxxxxxCAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCCCCCCCCCCCGUCUGAACUA\
) } def
/len { sequence length } bind def

/coor [
[84.17247772 402.55386353]
[70.95227814 395.28137207]
[60.06547928 384.83438110]
[52.25434875 371.92514038]
[48.05146790 357.43380737]
[47.74339294 342.34848022]
[51.35113525 327.69766235]
[58.62870789 314.48025513]
[69.07991791 303.59750366]
[81.99217987 295.79135132]
[96.48511505 291.59405518]
[96.17305756 276.59732056]
[95.86100006 261.60055542]
[95.54894257 246.60380554]
[95.23689270 231.60704041]
[94.92483521 216.61029053]
[94.61277771 201.61354065]
[94.30072021 186.61679077]
[93.98866272 171.62002563]
[93.67660522 156.62327576]
[93.36455536 141.62652588]
[93.05249786 126.62976837]
[85.09964752 126.54497528]
[76.82929230 124.00144958]
[69.00757599 118.86180115]
[62.44088364 111.22537994]
[57.90391159 101.43727112]
[42.91121292 101.90531158]
[27.91851807 102.37335205]
[12.94772720 103.30898285]
[-1.98658073 104.71128845]
[-16.92088890 106.11358643]
[-26.80823517 118.44306183]
[-42.52680969 120.08683777]
[-54.75106049 110.06968689]
[-56.22855377 94.33460999]
[-46.08272171 82.21694946]
[-30.33290482 80.90589905]
[-18.32319260 91.17928314]
[-3.38888431 89.77697754]
[11.54542351 88.37467194]
[14.08791637 85.84421539]
[18.00763512 84.45228577]
[22.74038887 84.84399414]
[27.45047569 87.38066101]
[42.44317245 86.91261292]
[57.43586731 86.44457245]
[60.17938614 79.46437836]
[50.83260345 67.73246765]
[65.66641235 65.50399017]
[68.40993500 58.52379227]
[57.74830627 47.97250366]
[47.08667755 37.42121506]
[31.28589439 37.75403595]
[19.93569183 26.75637817]
[19.76994324 10.95295906]
[30.88698769 -0.28033546]
[46.69127655 -0.27899069]
[57.80640793 10.95619583]
[57.63796997 26.75958633]
[68.29959869 37.31087875]
[78.96121979 47.86216736]
[93.96041107 47.70613098]
[104.40022278 36.93532181]
[114.84003448 26.16451454]
[125.27984619 15.39370537]
[135.71966553 4.62289715]
[126.19788361 -6.98889017]
[118.06185150 -19.61040688]
[111.41762543 -33.07710648]
[106.35182953 -47.21342468]
[102.93050385 -61.83506393]
[101.19825745 -76.75139618]
[101.17766571 -91.76796722]
[102.86900330 -106.68899536]
[106.25022125 -121.31996155]
[111.27723694 -135.47012329]
[117.88451385 -148.95498657]
[125.98590851 -161.59877014]
[135.47579956 -173.23661804]
[146.23048401 -183.71682739]
[158.10974121 -192.90274048]
[170.95869446 -200.67462158]
[184.60983276 -206.93115234]
[198.88519287 -211.59074402]
[213.59866333 -214.59266663]
[228.55842590 -215.89776611]
[243.56944275 -215.48905945]
[258.43603516 -213.37184143]
[272.96435547 -209.57373047]
[286.96499634 -204.14424133]
[300.25546265 -197.15415955]
[312.66247559 -188.69461060]
[324.02426147 -178.87590027]
[334.19274902 -167.82600403]
[343.03530884 -155.68899536]
[350.43667603 -142.62310791]
[356.30038452 -128.79869080]
[360.54995728 -114.39595032]
[363.13003540 -99.60266876]
[364.00692749 -84.61171722]
[363.16925049 -69.61851501]
[360.62789917 -54.81853867]
[356.41598511 -40.40473557]
[350.58847046 -26.56502151]
[343.22128296 -13.47981930]
[334.41052246 -1.31972611]
[324.27099609 9.75672722]
[312.93490601 19.60513687]
[300.55007935 28.09710884]
[287.27795410 35.12193298]
[273.29153442 40.58802414]
[258.77319336 44.42412567]
[243.91220093 46.58021927]
[228.90231323 47.02819824]
[213.93917847 45.76222610]
[199.21791077 42.79880142]
[184.93040466 38.17656708]
[171.26293945 31.95577240]
[158.39370728 24.21752548]
[146.49046326 15.06270981]
[136.05065918 25.83351707]
[125.61083984 36.60432816]
[115.17102814 47.37513351]
[104.73121643 58.14594269]
[131.80873108 80.60736847]
[130.27430725 111.50758362]
[108.04924774 126.31771851]
[108.36130524 141.31446838]
[108.67336273 156.31121826]
[108.98542023 171.30798340]
[109.29747772 186.30473328]
[109.60952759 201.30148315]
[109.92158508 216.29823303]
[110.23364258 231.29499817]
[110.54570007 246.29174805]
[110.85775757 261.28851318]
[111.16981506 276.28524780]
[111.48186493 291.28201294]
[126.13686371 294.87277222]
[139.36267090 302.13504028]
[150.25753784 312.57363892]
[158.07862854 325.47683716]
[162.29270935 339.96490479]
[162.61242676 355.04998779]
[159.01600647 369.70361328]
[151.74864197 382.92660522]
[141.30583191 393.81744385]
[128.39961243 401.63357544]
[113.90991211 405.84204102]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[27 47]
[28 46]
[29 45]
[30 41]
[31 40]
[32 39]
[51 62]
[52 61]
[53 60]
[63 125]
[64 124]
[65 123]
[66 122]
[67 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
