%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUUAUACUAGGGGGGGGGGAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCxxxxxxxxxxUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAACCCCCCCCCCUAUUAUACUA\
) } def
/len { sequence length } bind def

/coor [
[98.04342651 375.63714600]
[84.19748688 369.62112427]
[72.48882294 360.09170532]
[63.78630066 347.75604248]
[58.73569870 333.52951050]
[57.71180725 318.46783447]
[60.79060745 303.68865967]
[67.74362946 290.28875732]
[78.05491638 279.26242065]
[90.95929718 271.42791748]
[105.49918365 267.36657715]
[105.49918365 252.36659241]
[105.49918365 237.36659241]
[105.49918365 222.36659241]
[105.49918365 207.36659241]
[105.49918365 192.36659241]
[105.49918365 177.36659241]
[105.49918365 162.36659241]
[105.49918365 147.36659241]
[105.49918365 132.36659241]
[99.32339478 128.11105347]
[90.81211090 140.46249390]
[78.46080780 131.95101929]
[86.97182465 119.59995270]
[80.79603577 115.34441376]
[66.77932739 120.68592072]
[52.76261139 126.02743530]
[40.11487961 137.31774902]
[25.76455307 128.28976440]
[30.46715355 112.00106812]
[47.42109680 112.01072693]
[61.43781281 106.66921234]
[75.45452118 101.32769775]
[80.20833588 87.10092163]
[72.21842194 74.40599060]
[64.22850800 61.71105957]
[56.23859024 49.01612854]
[48.24867249 36.32120132]
[40.25875854 23.62627029]
[28.75695419 13.99774456]
[14.85439873 8.36578846]
[0.95184249 2.73383141]
[-11.59190083 11.71481419]
[-27.00098419 12.46561432]
[-40.35842514 4.74665594]
[-47.40191269 -8.97897148]
[-45.88389587 -24.33146858]
[-36.28876495 -36.41191101]
[-21.67829895 -41.36547089]
[-6.71463728 -37.61148834]
[3.82736707 -26.34784317]
[6.58379936 -11.16872501]
[20.48635483 -5.53676796]
[34.38891220 0.09518873]
[25.65320015 -12.09855366]
[19.41346169 -25.73914146]
[15.90051651 -40.32198334]
[15.24431801 -55.30762100]
[17.46913910 -70.14170837]
[22.49267960 -84.27549744]
[30.12910652 -97.18615723]
[40.09593201 -108.39608002]
[52.02446365 -117.49059296]
[65.47343445 -124.13327026]
[79.94534302 -128.07838440]
[94.90483856 -129.17999268]
[109.79853058 -127.39734650]
[124.07547760 -122.79640198]
[137.20755005 -115.54734039]
[148.70893860 -105.91832733]
[158.15420532 -94.26556396]
[165.19393921 -81.02010345]
[169.56773376 -66.67193604]
[171.11378479 -51.75182724]
[169.77490234 -36.81169891]
[165.60061646 -22.40422440]
[158.74533081 -9.06236839]
[149.46264648 2.72032619]
[138.09596252 12.50799179]
[125.06574249 19.93856049]
[110.85401154 24.73715973]
[95.98648071 26.72627831]
[81.01313782 25.83233452]
[66.48789215 22.08839798]
[52.95368576 15.63635445]
[60.94360352 28.33128357]
[68.93351746 41.02621460]
[76.92343903 53.72114182]
[84.91335297 66.41607666]
[92.90326691 79.11100006]
[107.74447632 81.28784180]
[119.04347992 71.42211914]
[130.34248352 61.55639267]
[141.64149475 51.69067001]
[149.59580994 36.71852875]
[166.18481445 40.21729660]
[167.41506958 57.12654877]
[151.50721741 62.98967361]
[140.20820618 72.85540009]
[128.90919495 82.72112274]
[117.61019897 92.58684540]
[126.78512573 97.63229370]
[133.82052612 107.63782501]
[148.68356323 109.66015625]
[163.54661560 111.68248749]
[178.40966797 113.70482635]
[192.10237122 102.86753082]
[209.06723022 105.20794678]
[218.91853333 118.80242920]
[233.82043457 120.51511383]
[248.72233582 122.22780609]
[263.62423706 123.94049835]
[278.52615356 125.65318298]
[291.93478394 116.84480286]
[307.13616943 121.97290802]
[312.46908569 137.10365295]
[303.84259033 150.63003540]
[287.87417603 152.17576599]
[276.81344604 140.55508423]
[261.91156006 138.84239197]
[247.00964355 137.12971497]
[232.10774231 135.41702271]
[217.20584106 133.70433044]
[208.30174255 143.06990051]
[195.43333435 145.61520386]
[183.27815247 140.18571472]
[176.38732910 128.56787109]
[161.52427673 126.54553986]
[146.66123962 124.52320099]
[131.79818726 122.50086975]
[120.49918365 132.36659241]
[120.49918365 147.36659241]
[120.49918365 162.36659241]
[120.49918365 177.36659241]
[120.49918365 192.36659241]
[120.49918365 207.36659241]
[120.49918365 222.36659241]
[120.49918365 237.36659241]
[120.49918365 252.36659241]
[120.49918365 267.36657715]
[135.03906250 271.42791748]
[147.94345093 279.26242065]
[158.25473022 290.28875732]
[165.20774841 303.68865967]
[168.28656006 318.46783447]
[167.26266479 333.52951050]
[162.21206665 347.75604248]
[153.50953674 360.09170532]
[141.80087280 369.62112427]
[127.95493317 375.63714600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 33]
[26 32]
[27 31]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[40 54]
[41 53]
[42 52]
[91 101]
[92 100]
[93 99]
[94 98]
[103 130]
[104 129]
[105 128]
[106 127]
[109 123]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
