%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCACCCUAUAGGGGGGGGGGGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAxxxxxxxxxxUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCCCCCCCCCCCAUCACCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[83.34389496 470.82736206]
[69.07212067 466.01791382]
[56.16814041 458.25253296]
[45.23548508 447.89437866]
[36.78549957 435.42797852]
[31.21340370 421.43634033]
[28.77981377 406.57391357]
[29.59855461 391.53582764]
[33.63133240 377.02545166]
[40.68952560 363.72146606]
[50.44300842 352.24612427]
[62.43559647 343.13613892]
[76.10637665 336.81759644]
[90.81593323 333.58602905]
[90.81593323 318.58602905]
[90.81593323 303.58602905]
[90.81593323 288.58602905]
[90.81593323 273.58602905]
[90.81593323 258.58602905]
[90.81593323 243.58604431]
[90.81593323 228.58604431]
[90.81593323 213.58604431]
[90.81593323 198.58604431]
[82.47000122 189.78144836]
[82.38040924 177.24862671]
[91.14294434 167.73416138]
[91.44307709 152.73715210]
[91.74320984 137.74015808]
[77.88917542 135.09761047]
[65.02915955 127.24409485]
[55.14266586 114.61920166]
[49.99685287 98.41250610]
[50.86590195 80.45925903]
[35.95664978 78.81175232]
[21.04740143 77.16424561]
[6.13815165 75.51673889]
[-8.77109814 73.86923218]
[-23.68034744 72.22172546]
[-38.24684525 78.39649200]
[-50.04729843 69.30811310]
[-66.45469666 73.57820129]
[-75.09992981 58.99409103]
[-63.47900772 46.64943695]
[-48.39979553 54.39886475]
[-34.89970398 48.10626221]
[-22.03284073 57.31247330]
[-7.12359190 58.95998001]
[7.78565788 60.60748672]
[22.69490814 62.25499344]
[37.60415649 63.90250015]
[52.51340485 65.55000305]
[58.35748291 51.73527908]
[46.79213715 42.18317032]
[35.22678757 32.63106537]
[18.97410583 30.44420433]
[12.99276733 15.17477036]
[23.43585968 2.53064775]
[39.56042480 5.51902580]
[44.77889633 21.06571770]
[56.34424210 30.61782265]
[67.90959167 40.16992950]
[80.84965515 32.58345032]
[78.16286469 17.82604027]
[63.13066864 16.43478394]
[49.03167343 11.03840542]
[36.91212082 2.03734994]
[27.67136002 -9.90044403]
[21.99511909 -23.88911438]
[20.30461121 -38.89060593]
[22.72528648 -53.79170990]
[29.07751083 -67.48666382]
[38.88990784 -78.95922089]
[51.43433380 -87.35802460]
[65.77990723 -92.05983734]
[80.86209869 -92.71575165]
[95.56169891 -89.27709961]
[108.78790283 -81.99904633]
[119.55924225 -71.42167664]
[127.07640839 -58.32989120]
[130.78157043 -43.69519424]
[130.39981079 -28.60358047]
[125.95941925 -14.17494488]
[117.78992462 -1.47998667]
[106.49755859 8.53924274]
[92.92028046 15.13924885]
[95.60707092 29.89665985]
[109.11228180 36.42422485]
[122.34552002 29.36154747]
[119.08535004 12.71842480]
[121.08368683 -4.10490799]
[128.13711548 -19.48876572]
[139.55610657 -31.95542908]
[154.23233032 -40.31108856]
[170.74627686 -43.76015091]
[187.50454712 -41.98099899]
[202.89361572 -35.15592957]
[215.43510437 -23.95254898]
[228.22077942 -31.79642487]
[241.00646973 -39.64030075]
[253.79214478 -47.48417664]
[266.57781982 -55.32805252]
[271.69845581 -70.53195190]
[286.82659912 -75.87229156]
[300.35720825 -67.25242615]
[301.91076660 -51.28477097]
[290.29553223 -40.21834946]
[274.42169189 -42.54236984]
[261.63601685 -34.69849396]
[248.85034180 -26.85461998]
[236.06466675 -19.01074409]
[223.27897644 -11.16686821]
[227.07936096 1.44437218]
[227.72419739 14.61048222]
[225.17031860 27.55328941]
[219.56375122 39.50659180]
[211.23141479 49.76153183]
[200.66200256 57.70861435]
[188.47737122 62.87394333]
[175.39595032 64.94747162]
[162.19035339 63.80161667]
[149.64178467 59.49908447]
[138.49377441 52.28947067]
[129.40820312 42.59478378]
[116.17496490 49.65746307]
[134.55174255 63.16596985]
[144.78799438 82.38056183]
[145.65002441 103.09785461]
[137.85382080 121.18951416]
[123.75709534 133.42401123]
[106.74021149 138.04029846]
[106.44007874 153.03729248]
[106.13994598 168.03428650]
[115.40565491 183.91744995]
[105.81593323 198.58604431]
[105.81593323 213.58604431]
[105.81593323 228.58604431]
[105.81593323 243.58604431]
[105.81593323 258.58602905]
[105.81593323 273.58602905]
[105.81593323 288.58602905]
[105.81593323 303.58602905]
[105.81593323 318.58602905]
[105.81593323 333.58602905]
[120.52548981 336.81759644]
[134.19625854 343.13613892]
[146.18885803 352.24612427]
[155.94233704 363.72146606]
[163.00053406 377.02545166]
[167.03330994 391.53582764]
[167.85205078 406.57391357]
[165.41845703 421.43634033]
[159.84635925 435.42797852]
[151.39637756 447.89437866]
[140.46372986 458.25253296]
[127.55973816 466.01791382]
[113.28797150 470.82736206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 132]
[27 131]
[28 130]
[33 51]
[34 50]
[35 49]
[36 48]
[37 47]
[38 46]
[40 44]
[52 61]
[53 60]
[54 59]
[62 86]
[63 85]
[87 124]
[88 123]
[97 111]
[98 110]
[99 109]
[100 108]
[101 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
