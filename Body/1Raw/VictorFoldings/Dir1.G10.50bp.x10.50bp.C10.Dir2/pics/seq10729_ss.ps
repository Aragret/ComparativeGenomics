%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCCUAAGGGGGGGGGGGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCxxxxxxxxxxCUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCCCCCCCCCCCUCACCCUAA\
) } def
/len { sequence length } bind def

/coor [
[54.12448120 408.54989624]
[40.27854538 402.53387451]
[28.56988335 393.00445557]
[19.86735725 380.66879272]
[14.81675625 366.44226074]
[13.79286480 351.38058472]
[16.87166405 336.60140991]
[23.82468605 323.20150757]
[34.13597107 312.17517090]
[47.04035187 304.34066772]
[61.58023834 300.27932739]
[61.58023834 285.27932739]
[61.58023834 270.27932739]
[61.58023834 255.27934265]
[61.58023834 240.27934265]
[61.58023834 225.27934265]
[61.58023834 210.27934265]
[61.58023834 195.27934265]
[61.58023834 180.27934265]
[61.58023834 165.27934265]
[85.92251587 91.44627380]
[78.74001312 78.27768707]
[71.55750275 65.10910797]
[64.37499237 51.94052505]
[66.39155579 66.80435944]
[57.92034149 79.18331146]
[43.33506012 82.68611145]
[30.16612434 75.50424957]
[25.21268463 61.34573746]
[31.03221130 47.52064896]
[44.62211990 41.16676331]
[29.66186905 42.25807190]
[14.70162106 43.34938431]
[3.16707230 54.49988556]
[-12.72322083 52.29123306]
[-20.77958488 38.41771317]
[-14.82186699 23.52190399]
[0.57968140 19.03059578]
[13.61031055 28.38913536]
[28.57055855 27.29782486]
[43.53080750 26.20651436]
[29.87875175 19.99190331]
[15.16575527 17.07168007]
[4.77681637 6.25179386]
[2.45667267 -8.56768417]
[9.04162979 -22.04501152]
[22.15811157 -29.32222748]
[37.07822800 -27.77623177]
[48.42396164 -17.96428490]
[52.10564423 -3.42222166]
[59.02161407 9.88827515]
[59.33367157 -5.10847807]
[59.64572906 -20.10523224]
[46.10713196 -27.06711578]
[36.97103882 -39.16747665]
[34.00679016 -53.97401047]
[37.74980545 -68.53940582]
[47.40580368 -79.98803711]
[61.01862335 -86.08365631]
[61.33068085 -101.08041382]
[61.64273453 -116.07716370]
[61.95479202 -131.07391357]
[62.26684952 -146.07067871]
[51.60626221 -157.42803955]
[52.13636780 -172.63243103]
[63.02957535 -182.72567749]
[63.34163284 -197.72242737]
[49.11820984 -202.91598511]
[37.35336304 -212.44841003]
[29.32325745 -225.28570557]
[25.89893723 -240.03536987]
[27.45184708 -255.09748840]
[33.81354141 -268.83819580]
[44.29394531 -279.76705933]
[57.75622940 -286.69854736]
[72.74010468 -288.88082886]
[87.62022400 -286.07714844]
[100.78251648 -278.59164429]
[110.79922485 -267.23626709]
[116.58381653 -253.24279785]
[117.50881958 -238.12913513]
[113.47389984 -223.53466797]
[104.91673279 -211.04252625]
[92.76554108 -202.00775146]
[78.33838654 -197.41036987]
[78.02632904 -182.41362000]
[88.49024200 -171.87597656]
[88.38740540 -156.66268921]
[77.26360321 -145.75862122]
[76.95154572 -130.76185608]
[76.63948822 -115.76510620]
[76.32743073 -100.76835632]
[76.01538086 -85.77159882]
[89.36284637 -79.11499023]
[98.53424072 -67.27458954]
[101.66812134 -52.56609726]
[98.09050751 -37.89568710]
[88.45896149 -26.18584824]
[74.64247894 -19.79317474]
[74.33042908 -4.79642200]
[74.01837158 10.20033169]
[84.05465698 27.64748383]
[77.54357147 44.75801849]
[84.72608185 57.92659760]
[91.90859222 71.09518433]
[99.09110260 84.26376343]
[112.33368683 91.30889893]
[127.26799774 89.90659332]
[138.56806946 78.51853943]
[154.50086975 80.39614105]
[162.84411621 94.09905243]
[157.19758606 109.11558533]
[141.89280701 113.92633057]
[128.67030334 104.84090424]
[113.73599243 106.24320984]
[112.41655731 113.62623596]
[127.18257141 116.26534271]
[124.54321289 131.03131104]
[109.77769470 128.39228821]
[108.45825958 135.77531433]
[121.98245239 142.26348877]
[135.50663757 148.75164795]
[152.40270996 150.15132141]
[155.73504639 166.77455139]
[140.68392944 174.57841492]
[129.01847839 162.27583313]
[115.49428558 155.78767395]
[101.97010040 149.29951477]
[95.62263489 153.29446411]
[82.92770386 161.28437805]
[76.58023834 165.27934265]
[76.58023834 180.27934265]
[76.58023834 195.27934265]
[76.58023834 210.27934265]
[76.58023834 225.27934265]
[76.58023834 240.27934265]
[76.58023834 255.27934265]
[76.58023834 270.27932739]
[76.58023834 285.27932739]
[76.58023834 300.27932739]
[91.12012482 304.34066772]
[104.02450562 312.17517090]
[114.33579254 323.20150757]
[121.28881073 336.60140991]
[124.36760712 351.38058472]
[123.34371948 366.44226074]
[118.29312134 380.66879272]
[109.59059143 393.00445557]
[97.88193512 402.53387451]
[84.03599548 408.54989624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 106]
[22 105]
[23 104]
[24 103]
[31 41]
[32 40]
[33 39]
[51 101]
[52 100]
[53 99]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[66 86]
[67 85]
[107 115]
[108 114]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
