%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCCUCUAGGGGGGGGGGGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUUAAGUUAAAGAUUAAxxxxxxxxxxCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUCCCCCCCCCCUUCCCCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[125.55561829 529.93280029]
[110.99575806 526.02459717]
[97.79461670 518.74493408]
[86.71968079 508.51708984]
[78.41484070 495.93563843]
[73.36293030 481.73205566]
[71.85765076 466.73214722]
[73.98653412 451.80795288]
[79.62579346 437.82717896]
[88.44757080 425.60263062]
[99.93898773 415.84503174]
[113.43194580 409.12167358]
[128.14198303 405.82345581]
[128.44996643 390.82659912]
[128.75793457 375.82977295]
[129.06591797 360.83291626]
[129.37390137 345.83609009]
[129.68186951 330.83926392]
[129.98985291 315.84240723]
[130.29782104 300.84558105]
[130.60580444 285.84875488]
[130.91378784 270.85189819]
[131.22175598 255.85505676]
[115.74462891 247.76853943]
[106.07616425 233.13128662]
[104.70005035 215.56304932]
[112.03770447 199.45353699]
[126.32357025 188.86557007]
[123.87064362 174.06748962]
[121.41771698 159.26940918]
[118.96479034 144.47132874]
[116.51186371 129.67324829]
[100.80638123 132.78701782]
[85.99479675 128.36697388]
[75.35738373 117.92929077]
[70.99715424 104.25870514]
[56.09270477 102.56830597]
[41.18825912 100.87791443]
[26.28381157 99.18751526]
[9.86419582 103.41037750]
[1.26096332 88.80144501]
[12.91735554 76.49028015]
[27.97420883 84.28306580]
[42.87865448 85.97346497]
[57.78310394 87.66386414]
[72.68755341 89.35425568]
[73.24500275 88.02201843]
[73.86740112 86.71885681]
[62.67910004 76.72776031]
[51.49080276 66.73666382]
[40.30250931 56.74556732]
[29.11421204 46.75447083]
[13.66483212 49.17329025]
[0.30190963 41.05132675]
[-4.66499281 26.22351646]
[1.10934472 11.69110394]
[14.89845562 4.31584597]
[30.19154549 7.58011580]
[39.76768112 19.94262314]
[39.10530853 35.56617355]
[50.29360580 45.55727005]
[61.48190308 55.54836655]
[72.67019653 65.53946686]
[83.85849762 75.53056335]
[90.82711029 72.15830994]
[98.43550873 70.72792816]
[101.49390411 56.04303360]
[104.55229950 41.35813522]
[107.61069489 26.67323875]
[94.01292419 20.16446495]
[82.36837769 10.59012413]
[73.35405731 -1.49314702]
[67.49404144 -15.38284206]
[65.12902069 -30.27143097]
[66.39649200 -45.29331207]
[71.22277832 -59.57513428]
[79.32727051 -72.28656769]
[90.23880005 -82.68859100]
[103.32296753 -90.17643738]
[117.81909180 -94.31478119]
[132.88438416 -94.86302185]
[147.64295959 -91.78928375]
[161.23677063 -85.27226257]
[172.87551880 -75.69086456]
[181.88250732 -63.60213089]
[187.73410034 -49.70888901]
[190.09010315 -34.81886673]
[188.81352234 -19.79775620]
[183.97857666 -5.51886225]
[175.86637878 7.18765640]
[164.94854736 17.58306122]
[151.85983276 25.06297684]
[137.36120605 29.19252968]
[122.29559326 29.73163414]
[119.23719788 44.41653061]
[116.17880249 59.10142899]
[113.12040710 73.78632355]
[120.59213257 77.53486633]
[126.95372009 83.43716431]
[131.58108521 91.15272522]
[133.95758057 100.16030884]
[148.10490417 95.17498779]
[162.25222778 90.18966675]
[168.85119629 75.82898712]
[183.70071411 70.41905212]
[197.99081421 77.16948700]
[203.24345398 92.07537079]
[196.34231567 106.29331207]
[181.38172913 111.38805389]
[167.23754883 104.33698273]
[153.09022522 109.32230377]
[138.94291687 114.30762482]
[131.30993652 127.22032166]
[133.76286316 142.01840210]
[136.21578979 156.81648254]
[138.66871643 171.61456299]
[141.12165833 186.41264343]
[155.60348511 190.48426819]
[167.03749084 200.12950134]
[173.41867065 213.56552124]
[173.66607666 228.35331726]
[187.47966003 234.20010376]
[203.67915344 231.64895630]
[213.77642822 244.57090759]
[207.38427734 259.67297363]
[191.07838440 261.41943359]
[181.63287354 248.01368713]
[167.81929016 242.16690063]
[161.88639832 248.61811829]
[154.53092957 253.38407898]
[146.21859741 256.16305542]
[145.91061401 271.15988159]
[145.60264587 286.15670776]
[145.29466248 301.15356445]
[144.98669434 316.15039062]
[144.67871094 331.14721680]
[144.37072754 346.14407349]
[144.06275940 361.14089966]
[143.75477600 376.13775635]
[143.44679260 391.13458252]
[143.13882446 406.13140869]
[157.70104980 410.03079224]
[170.90660095 417.30242920]
[181.98773193 427.52359009]
[190.30020142 440.10000610]
[195.36071777 454.30050659]
[196.87509155 469.29953003]
[194.75526428 484.22500610]
[189.12448120 498.20919800]
[180.31010437 510.43908691]
[168.82461548 520.20367432]
[155.33572388 526.93518066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[28 117]
[29 116]
[30 115]
[31 114]
[32 113]
[36 46]
[37 45]
[38 44]
[39 43]
[48 64]
[49 63]
[50 62]
[51 61]
[52 60]
[66 97]
[67 96]
[68 95]
[69 94]
[101 112]
[102 111]
[103 110]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
