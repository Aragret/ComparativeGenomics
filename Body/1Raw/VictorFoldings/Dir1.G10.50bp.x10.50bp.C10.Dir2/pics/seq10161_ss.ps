%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAUCGCUGGGGGGGGGGGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUxxxxxxxxxxUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCCCCCCCCCCCUCCAUCGCU\
) } def
/len { sequence length } bind def

/coor [
[147.59274292 549.54608154]
[133.57080078 543.99310303]
[121.37084198 535.12677002]
[111.75976562 523.50445557]
[105.34174347 509.85671997]
[102.52020264 495.04153442]
[103.47251892 479.99017334]
[108.13882446 465.64874268]
[116.22579193 452.91879272]
[127.22506714 442.60052490]
[140.44522095 435.34252930]
[155.05523682 431.60110474]
[155.05523682 416.60110474]
[155.05523682 401.60110474]
[155.05523682 386.60110474]
[155.05523682 371.60110474]
[155.05523682 356.60110474]
[155.05523682 341.60110474]
[155.05523682 326.60110474]
[155.05523682 311.60110474]
[155.05523682 296.60110474]
[152.75436401 281.77862549]
[148.20707703 267.48449707]
[143.65979004 253.19035339]
[139.11248779 238.89622498]
[125.52742004 227.82868958]
[129.53450012 209.88505554]
[124.69468689 195.68730164]
[113.26468658 186.13720703]
[116.13548279 170.57862854]
[111.29566956 156.38088989]
[106.45585632 142.18313599]
[101.61603546 127.98537445]
[89.02297211 125.79336548]
[78.71236420 118.23812866]
[72.82810211 106.89063263]
[72.59370422 94.11036682]
[59.30636215 87.15000916]
[46.01902008 80.18965149]
[32.73167801 73.22929382]
[19.44433594 66.26894379]
[6.01688766 59.58286667]
[-7.54500866 53.17388916]
[-21.10690498 46.76491165]
[-34.13835526 55.02232742]
[-49.56523895 54.90072250]
[-62.46489334 46.43890381]
[-68.72109222 32.33700562]
[-66.33749390 17.09489059]
[-56.07471085 5.57626629]
[-41.20754623 1.45668077]
[-26.48006439 6.05067968]
[-16.59175110 17.89233589]
[-14.69792938 33.20301819]
[-1.13603318 39.61199188]
[12.42586327 46.02096939]
[17.19740677 45.25835800]
[22.49205971 47.52872086]
[26.40469360 52.98159790]
[39.69203568 59.94195557]
[52.97937393 66.90231323]
[66.26671600 73.86267090]
[79.55406189 80.82302094]
[88.80907440 74.29871368]
[99.89016724 71.96821594]
[103.84677887 57.49945068]
[107.80339050 43.03068161]
[111.75999451 28.56191444]
[98.33457184 21.75436211]
[86.55452728 12.38337326]
[76.90225220 0.83268082]
[69.77300262 -12.42472076]
[65.45871735 -26.84594917]
[64.13605499 -41.84046173]
[65.85919189 -56.79424667]
[70.55756378 -71.09495544]
[78.03876495 -84.15698242]
[87.99645233 -95.44544220]
[100.02286530 -104.49808502]
[113.62552643 -110.94420624]
[128.24742126 -114.51984406]
[143.28977966 -115.07857513]
[158.13664246 -112.59751892]
[172.18002319 -107.17828369]
[184.84487915 -99.04277039]
[195.61256409 -88.52413177]
[204.04216003 -76.05310059]
[209.78849792 -62.14035034]
[212.61624146 -47.35560226]
[212.40959167 -32.30428314]
[209.17704773 -17.60273552]
[203.05094910 -3.85297823]
[194.28216553 8.38194466]
[183.22978210 18.60102081]
[170.34635925 26.38578606]
[156.15950012 31.41745758]
[141.25012207 33.48999405]
[126.22876740 32.51852417]
[122.27215576 46.98729324]
[118.31554413 61.45605850]
[114.35893250 75.92482758]
[126.18664551 89.99738312]
[126.75275421 108.37157440]
[115.81378937 123.14556122]
[120.65360260 137.34330750]
[125.49342346 151.54106140]
[130.33323669 165.73881531]
[142.10940552 176.30444336]
[138.89244080 190.84748840]
[143.73225403 205.04524231]
[154.97299194 211.45223999]
[158.69132996 223.42492676]
[153.40661621 234.34893799]
[157.95391846 248.64306641]
[162.50120544 262.93719482]
[167.04849243 277.23132324]
[170.98515320 262.75711060]
[179.80406189 250.62341309]
[192.35623169 242.41102600]
[207.00630188 239.18994141]
[221.84558105 241.37979126]
[234.94076538 248.69528198]
[244.58570862 260.18331909]
[249.52384949 274.34716797]
[249.11180115 289.34152222]
[243.40325928 303.21279907]
[233.14196777 314.15380859]
[219.66479492 320.73910522]
[204.72764587 322.11068726]
[190.27658081 318.08990479]
[178.19436646 309.20056152]
[170.05523682 296.60110474]
[170.05523682 311.60110474]
[170.05523682 326.60110474]
[170.05523682 341.60110474]
[170.05523682 356.60110474]
[170.05523682 371.60110474]
[170.05523682 386.60110474]
[170.05523682 401.60110474]
[170.05523682 416.60110474]
[170.05523682 431.60110474]
[184.66525269 435.34252930]
[197.88540649 442.60052490]
[208.88468933 452.91879272]
[216.97164917 465.64874268]
[221.63795471 479.99017334]
[222.59027100 495.04153442]
[219.76873779 509.85671997]
[213.35070801 523.50445557]
[203.73963928 535.12677002]
[191.53968811 543.99310303]
[177.51773071 549.54608154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 116]
[23 115]
[24 114]
[25 113]
[27 110]
[28 109]
[30 107]
[31 106]
[32 105]
[33 104]
[37 63]
[38 62]
[39 61]
[40 60]
[41 59]
[42 56]
[43 55]
[44 54]
[65 101]
[66 100]
[67 99]
[68 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
