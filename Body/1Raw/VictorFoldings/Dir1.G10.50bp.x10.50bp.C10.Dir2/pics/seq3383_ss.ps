%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACGCAAAGGGGGGGGGGGGCCCCAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCxxxxxxxxxxUCCAUCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGCCCCCCCCCCACUACUCAAA\
) } def
/len { sequence length } bind def

/coor [
[86.60672760 451.23785400]
[71.73583221 448.72647095]
[57.95701981 442.59497070]
[46.13644791 433.22882080]
[37.01716614 421.21676636]
[31.17242050 407.31387329]
[28.96961594 392.39416504]
[30.54722023 377.39541626]
[35.80606842 363.26052856]
[44.41558075 350.87799072]
[55.83456039 341.02621460]
[69.34519958 334.32443237]
[84.09819794 331.19400024]
[84.72217560 316.20700073]
[85.34615326 301.21997070]
[85.97013092 286.23294067]
[86.59410858 271.24594116]
[87.21808624 256.25891113]
[87.84206390 241.27191162]
[88.46604156 226.28489685]
[89.09001923 211.29786682]
[89.71399689 196.31085205]
[90.33797455 181.32383728]
[90.96195221 166.33682251]
[91.42999268 151.34413147]
[91.74205017 136.34738159]
[79.90424347 131.39245605]
[70.44850159 122.71639252]
[64.49568176 111.34761810]
[62.75139236 98.63375092]
[48.17868805 95.07898712]
[33.60598755 91.52423096]
[19.03328323 87.96946716]
[4.46058130 84.41470337]
[-10.11212158 80.85993958]
[-24.68482399 77.30518341]
[-39.32832718 74.05435181]
[-54.03628540 71.10887146]
[-68.74424744 68.16339111]
[-83.45220947 65.21790314]
[-98.80618286 70.97878265]
[-111.29863739 60.35472107]
[-108.07840729 44.27485275]
[-92.45819092 39.28076553]
[-80.50672913 50.50994492]
[-65.79876709 53.45542908]
[-51.09080505 56.40090942]
[-36.38284302 59.34639359]
[-31.93431664 57.45268631]
[-26.24464607 58.37948608]
[-21.13006210 62.73247910]
[-6.55735970 66.28723907]
[8.01534367 69.84200287]
[22.58804512 73.39676666]
[37.16074753 76.95152283]
[51.73345184 80.50628662]
[66.30615234 84.06105042]
[78.37181091 69.64301300]
[95.93991089 62.94813156]
[114.54094696 65.67964935]
[123.05204010 53.32807922]
[131.56312561 40.97650909]
[140.07421875 28.62493515]
[128.76025391 18.75113297]
[118.64559174 7.65197372]
[109.86209106 -4.52784395]
[102.52427673 -17.62952995]
[96.72779846 -31.48227692]
[92.54823303 -45.90548706]
[90.04006195 -60.71112442]
[89.23599243 -75.70616150]
[90.14650726 -90.69512177]
[92.75972748 -105.48257446]
[97.04159546 -119.87574768]
[102.93627930 -133.68698120]
[110.36693573 -146.73625183]
[119.23668671 -158.85339355]
[129.42990112 -169.88046265]
[140.81367493 -179.67369080]
[153.23962402 -188.10539246]
[166.54573059 -195.06565857]
[180.55853271 -200.46374512]
[195.09533691 -204.22926331]
[209.96661377 -206.31314087]
[224.97851562 -206.68820190]
[239.93531799 -205.34954834]
[254.64201355 -202.31465149]
[268.90689087 -197.62306213]
[282.54397583 -191.33595276]
[295.37545776 -183.53527832]
[307.23410034 -174.32273865]
[317.96524048 -163.81845093]
[327.42901611 -152.15934753]
[335.50204468 -139.49743652]
[342.07907104 -125.99779510]
[347.07437134 -111.83640289]
[350.42276001 -97.19789124]
[352.08065796 -82.27310944]
[352.02639771 -67.25662231]
[350.26071167 -52.34420776]
[346.80661011 -37.73027802]
[341.70910645 -23.60535431]
[335.03472900 -10.15358543]
[326.87039185 2.44965863]
[317.32263184 14.04006767]
[306.51583862 24.46653748]
[294.59094238 33.59313583]
[281.70343018 41.30088043]
[268.02127075 47.48928833]
[253.72285461 52.07767487]
[238.99459839 55.00622177]
[224.02851868 56.23675156]
[209.01972961 55.75322342]
[194.16387939 53.56193924]
[179.65467834 49.69146347]
[165.68125916 44.19226456]
[152.42579651 37.13602448]
[143.91470337 49.48759842]
[135.40361023 61.83917236]
[126.89251709 74.19074249]
[134.24549866 85.28363037]
[137.23268127 98.25263977]
[135.47323608 111.44441223]
[129.19149780 123.17719269]
[119.18825531 131.95521545]
[106.73880768 136.65942383]
[106.42675018 151.65618896]
[109.39186096 160.36595154]
[105.94896698 166.96080017]
[105.32498932 181.94781494]
[104.70101166 196.93482971]
[104.07703400 211.92184448]
[103.45305634 226.90885925]
[102.82907867 241.89588928]
[102.20510101 256.88290405]
[101.58113098 271.86990356]
[100.95715332 286.85693359]
[100.33317566 301.84393311]
[99.70919800 316.83096313]
[99.08522034 331.81799316]
[113.52694702 336.16394043]
[126.43373871 343.96557617]
[136.99426270 354.73245239]
[144.54469299 367.78781128]
[148.61036682 382.31091309]
[148.93574524 397.38888550]
[145.50036621 412.07388306]
[138.52017212 425.44277954]
[128.43394470 436.65524292]
[115.87572479 445.00637817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 127]
[26 126]
[30 57]
[31 56]
[32 55]
[33 54]
[34 53]
[35 52]
[36 51]
[37 48]
[38 47]
[39 46]
[40 45]
[60 120]
[61 119]
[62 118]
[63 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
