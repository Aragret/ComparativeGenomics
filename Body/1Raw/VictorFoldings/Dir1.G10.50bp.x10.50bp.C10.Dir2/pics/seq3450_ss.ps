%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCUUCACGGGGGGGGGGCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGxxxxxxxxxxCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGCCCCCCCCCCAACUCUACAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.07766724]
[71.19830322 387.06164551]
[59.48964310 377.53222656]
[50.78712082 365.19653320]
[45.73651886 350.97003174]
[44.71262741 335.90835571]
[47.79142761 321.12918091]
[54.74444962 307.72924805]
[65.05573273 296.70291138]
[77.96011353 288.86840820]
[92.50000000 284.80709839]
[92.50000000 269.80709839]
[92.50000000 254.80709839]
[92.50000000 239.80709839]
[92.50000000 224.80709839]
[92.50000000 209.80709839]
[92.50000000 194.80709839]
[92.50000000 179.80709839]
[92.50000000 164.80709839]
[92.50000000 149.80709839]
[92.50000000 134.80709839]
[92.50000000 119.80709839]
[80.57480621 108.43997192]
[80.40342712 91.96597290]
[92.08956146 80.35321808]
[91.77750397 65.35646057]
[91.46544647 50.35970688]
[76.47464752 49.70030594]
[61.55796814 48.07193375]
[46.77797699 45.48141861]
[32.19666672 41.93962860]
[17.87519646 37.46141434]
[3.87363625 32.06556320]
[-9.74928665 25.77470589]
[-22.93643188 18.61523056]
[-35.63248825 10.61716461]
[-47.78420258 1.81405544]
[-59.34061050 -7.75717306]
[-70.25323486 -18.05637550]
[-80.47630310 -29.04035378]
[-89.96693420 -40.66303635]
[-98.68533325 -52.87567139]
[-106.59491730 -65.62703705]
[-113.66252136 -78.86364746]
[-119.85849762 -92.52999115]
[-125.15685272 -106.56873322]
[-129.53536987 -120.92099762]
[-132.97567749 -135.52658081]
[-135.46334839 -150.32423401]
[-136.98796082 -165.25187683]
[-137.54310608 -180.24690247]
[-137.12644958 -195.24641418]
[-135.73974609 -210.18748474]
[-133.38882446 -225.00747681]
[-130.08352661 -239.64421082]
[-125.83773041 -254.03630066]
[-120.66924286 -268.12338257]
[-114.59972382 -281.84634399]
[-107.65465546 -295.14764404]
[-99.86315155 -307.97149658]
[-91.25790405 -320.26412964]
[-81.87499237 -331.97396851]
[-71.75379181 -343.05187988]
[-60.93673706 -353.45141602]
[-49.46920776 -363.12893677]
[-37.39929962 -372.04388428]
[-24.77763748 -380.15884399]
[-11.65716648 -387.43978882]
[1.90708554 -393.85617065]
[15.85822296 -399.38107300]
[30.13773155 -403.99136353]
[44.68571472 -407.66763306]
[59.44115448 -410.39453125]
[74.34216309 -412.16055298]
[89.32623291 -412.95837402]
[104.33052063 -412.78457642]
[119.29209900 -411.63992310]
[134.14819336 -409.52920532]
[148.83651733 -406.46127319]
[163.29544067 -402.44900513]
[177.46434021 -397.50921631]
[191.28375244 -391.66262817]
[204.69575500 -384.93377686]
[217.64405823 -377.35089111]
[230.07435608 -368.94573975]
[241.93453979 -359.75363159]
[253.17483521 -349.81307983]
[263.74810791 -339.16577148]
[273.60998535 -327.85638428]
[282.71914673 -315.93237305]
[291.03735352 -303.44372559]
[298.52972412 -290.44284058]
[305.16485596 -276.98422241]
[310.91488647 -263.12435913]
[315.75567627 -248.92134094]
[319.66699219 -234.43478394]
[322.63235474 -219.72541809]
[324.63940430 -204.85494995]
[325.67962646 -189.88575745]
[325.74874878 -174.88061523]
[324.84643555 -159.90248108]
[322.97647095 -145.01414490]
[320.14669800 -130.27809143]
[316.36901855 -115.75611115]
[311.65924072 -101.50911713]
[306.03710938 -87.59686279]
[299.52624512 -74.07771301]
[292.15396118 -61.00835419]
[283.95114136 -48.44361496]
[274.95220947 -36.43619919]
[265.19488525 -25.03646469]
[254.72015381 -14.29222870]
[243.57189941 -4.24855566]
[231.79689026 5.05242634]
[219.44453430 13.57170582]
[206.56663513 21.27355003]
[193.21719360 28.12565422]
[179.45220947 34.09927750]
[165.32942200 39.16936874]
[150.90806580 43.31465530]
[136.24862671 46.51775360]
[121.41259766 48.76522827]
[106.46220398 50.04764938]
[106.77426147 65.04440308]
[107.08631134 80.04116058]
[117.23731995 87.69365692]
[121.17835236 99.77967834]
[117.48960876 111.94507599]
[107.50000000 119.80709839]
[107.50000000 134.80709839]
[107.50000000 149.80709839]
[107.50000000 164.80709839]
[107.50000000 179.80709839]
[107.50000000 194.80709839]
[107.50000000 209.80709839]
[107.50000000 224.80709839]
[107.50000000 239.80709839]
[107.50000000 254.80709839]
[107.50000000 269.80709839]
[107.50000000 284.80709839]
[122.03988647 288.86840820]
[134.94427490 296.70291138]
[145.25555420 307.72924805]
[152.20857239 321.12918091]
[155.28736877 335.90835571]
[154.26348877 350.97003174]
[149.21287537 365.19653320]
[140.51036072 377.53222656]
[128.80169678 387.06164551]
[114.95575714 393.07766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 125]
[26 124]
[27 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
