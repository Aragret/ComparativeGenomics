%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACAAUCUGGGGGGGGGGCCAGCAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUxxxxxxxxxxACCAUAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUCCCCCCCCCCAUUACAAUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.70864868]
[71.19830322 351.69262695]
[59.48964310 342.16320801]
[50.78712082 329.82754517]
[45.73651886 315.60101318]
[44.71262741 300.53933716]
[47.79142761 285.76016235]
[54.74444962 272.36026001]
[65.05573273 261.33392334]
[77.96011353 253.49940491]
[92.50000000 249.43809509]
[92.50000000 234.43809509]
[92.50000000 219.43809509]
[92.50000000 204.43809509]
[92.50000000 189.43809509]
[92.50000000 174.43809509]
[92.50000000 159.43809509]
[92.50000000 144.43809509]
[92.50000000 129.43809509]
[92.50000000 114.43809509]
[84.75576782 105.68522644]
[84.87733459 93.99886322]
[92.80198669 85.40900421]
[93.11404419 70.41224670]
[93.42610168 55.41549683]
[93.73815918 40.41874313]
[78.78493500 39.17469025]
[63.93798065 37.00340652]
[49.25473785 33.91328812]
[34.79200745 29.91629410]
[20.60574722 25.02788544]
[6.75084019 19.26697540]
[-6.71911049 12.65585327]
[-19.75199127 5.22009468]
[-32.29738235 -3.01153278]
[-44.30674744 -12.00718117]
[-55.73361969 -21.73204994]
[-66.53379822 -32.14850998]
[-76.66549683 -43.21627045]
[-86.08950806 -54.89250565]
[-94.76938629 -67.13204193]
[-102.67153931 -79.88752747]
[-109.76540375 -93.10961914]
[-116.02352905 -106.74715424]
[-121.42170715 -120.74737549]
[-125.93904877 -135.05612183]
[-129.55807495 -149.61802673]
[-132.26480103 -164.37675476]
[-134.04873657 -179.27522278]
[-134.90298462 -194.25576782]
[-134.82424927 -209.26043701]
[-133.81282043 -224.23120117]
[-131.87261963 -239.11010742]
[-129.01115417 -253.83963013]
[-125.23948669 -268.36273193]
[-120.57221985 -282.62329102]
[-115.02740479 -296.56610107]
[-108.62649536 -310.13717651]
[-101.39425659 -323.28408813]
[-93.35866547 -335.95596313]
[-84.55081177 -348.10372925]
[-75.00476837 -359.68038940]
[-64.75747681 -370.64120483]
[-53.84856796 -380.94375610]
[-42.32025909 -390.54815674]
[-30.21714592 -399.41726685]
[-17.58605385 -407.51678467]
[-4.47585011 -414.81533813]
[9.06274319 -421.28472900]
[22.97734833 -426.89990234]
[37.21413422 -431.63916016]
[51.71801376 -435.48416138]
[66.43288422 -438.41998291]
[81.30181122 -440.43533325]
[96.26726532 -441.52239990]
[111.27134705 -441.67694092]
[126.25601959 -440.89837646]
[141.16329956 -439.18972778]
[155.93551636 -436.55761719]
[170.51551819 -433.01217651]
[184.84690857 -428.56719971]
[198.87422180 -423.23980713]
[212.54319763 -417.05065918]
[225.80096436 -410.02368164]
[238.59620667 -402.18606567]
[250.87944031 -393.56814575]
[262.60311890 -384.20324707]
[273.72192383 -374.12759399]
[284.19284058 -363.38015747]
[293.97531128 -352.00256348]
[303.03149414 -340.03881836]
[311.32641602 -327.53515625]
[318.82791138 -314.54000854]
[325.50698853 -301.10363770]
[331.33782959 -287.27801514]
[336.29785156 -273.11663818]
[340.36785889 -258.67428589]
[343.53210449 -244.00682068]
[345.77838135 -229.17103577]
[347.09796143 -214.22428894]
[347.48574829 -199.22441101]
[346.94024658 -184.22944641]
[345.46356201 -169.29740906]
[343.06143188 -154.48605347]
[339.74310303 -139.85269165]
[335.52145386 -125.45393372]
[330.41281128 -111.34548950]
[324.43692017 -97.58193970]
[317.61691284 -84.21653748]
[309.97915649 -71.30098724]
[301.55322266 -58.88526154]
[292.37173462 -47.01738739]
[282.47015381 -35.74328613]
[271.88684082 -25.10656929]
[260.66268921 -15.14839458]
[248.84117126 -5.90728569]
[236.46798706 2.58100486]
[223.59103394 10.28363705]
[210.26011658 17.17081261]
[196.52680969 23.21588326]
[182.44425964 28.39546204]
[168.06692505 32.68951416]
[153.45043945 36.08142090]
[138.65136719 38.55805969]
[123.72694397 40.10985565]
[108.73490906 40.73080063]
[108.42285919 55.72755432]
[108.11080170 70.72430420]
[107.79874420 85.72106171]
[116.26898193 100.16924286]
[107.50000000 114.43809509]
[107.50000000 129.43809509]
[107.50000000 144.43809509]
[107.50000000 159.43809509]
[107.50000000 174.43809509]
[107.50000000 189.43809509]
[107.50000000 204.43809509]
[107.50000000 219.43809509]
[107.50000000 234.43809509]
[107.50000000 249.43809509]
[122.03988647 253.49940491]
[134.94427490 261.33392334]
[145.25555420 272.36026001]
[152.20857239 285.76016235]
[155.28736877 300.53933716]
[154.26348877 315.60101318]
[149.21287537 329.82754517]
[140.51036072 342.16320801]
[128.80169678 351.69262695]
[114.95575714 357.70864868]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[25 127]
[26 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
