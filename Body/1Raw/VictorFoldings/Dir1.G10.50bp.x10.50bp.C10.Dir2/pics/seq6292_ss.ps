%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUUCGGCGGGGGGGGGGGCAUGAGCUGGAGUCCUAGGCACAGCUCUAAGCCUCCUUAUUCGAGCCGAxxxxxxxxxxCCGCACCAAUAGGAUCCUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAACCCCCCCCCCAUUAUUCAGC\
) } def
/len { sequence length } bind def

/coor [
[89.40116119 557.88146973]
[75.55522156 551.86541748]
[63.84656143 542.33599854]
[55.14403534 530.00036621]
[50.09343338 515.77380371]
[49.06954193 500.71212769]
[52.14834213 485.93298340]
[59.10136414 472.53305054]
[69.41265106 461.50671387]
[82.31703186 453.67221069]
[96.85691833 449.61090088]
[96.85691833 434.61090088]
[96.85691833 419.61090088]
[96.85691833 404.61090088]
[96.85691833 389.61090088]
[96.85691833 374.61090088]
[96.85691833 359.61090088]
[96.85691833 344.61090088]
[96.85691833 329.61090088]
[96.85691833 314.61090088]
[86.17604065 304.29321289]
[85.96236420 289.08108521]
[96.85691833 277.94796753]
[96.85691833 262.94796753]
[96.85691833 247.94795227]
[96.85691833 232.94795227]
[96.85691833 217.94795227]
[94.12654114 213.95790100]
[93.91803741 208.19700623]
[97.18195343 202.32722473]
[97.80593109 187.34020996]
[98.42990875 172.35319519]
[99.05388641 157.36618042]
[79.47759247 89.21936035]
[72.57059479 75.90420532]
[65.66359711 62.58905411]
[58.75659561 49.27389526]
[51.84959793 35.95874023]
[44.66709137 22.79015923]
[37.21218109 9.77384949]
[23.48960114 11.30618954]
[10.03702545 6.22478008]
[-0.01828816 -4.84222269]
[-4.09471846 -19.82308197]
[-0.80227882 -35.58121872]
[-11.68110371 -45.90842438]
[-22.55992889 -56.23563004]
[-33.43875504 -66.56283569]
[-44.63452148 -76.54556274]
[-56.13632202 -86.17408752]
[-67.63813019 -95.80261230]
[-79.13993073 -105.43113708]
[-95.37776947 -107.72563934]
[-101.25780487 -123.03437042]
[-90.73116302 -135.60902405]
[-74.62674713 -132.51387024]
[-69.51140594 -116.93294525]
[-58.00960159 -107.30441284]
[-46.50779724 -97.67588806]
[-35.00599289 -88.04736328]
[-31.41897011 -88.02019501]
[-27.67241096 -86.21327209]
[-24.62172127 -82.57380676]
[-23.11154938 -77.44165802]
[-12.23272419 -67.11445618]
[-1.35389912 -56.78724670]
[9.52492619 -46.46004486]
[23.30730820 -52.38000488]
[23.30730820 -67.38000488]
[9.53343868 -73.95597076]
[-0.01648778 -85.86234283]
[-3.44632745 -100.73509979]
[-0.07508282 -115.62124634]
[9.42788315 -127.56513214]
[23.17574883 -134.19528198]
[38.43886566 -134.19528198]
[52.18673325 -127.56513214]
[61.68969727 -115.62124634]
[65.06094360 -100.73509979]
[61.63110352 -85.86234283]
[52.08117676 -73.95597076]
[38.30730820 -67.38000488]
[38.30730820 -52.38000488]
[56.72441483 -37.52844620]
[60.74434280 -15.65388775]
[50.22848892 2.31893897]
[57.68339920 15.33524895]
[62.03572845 17.44065857]
[65.07978058 22.33606720]
[65.16475677 29.05174255]
[72.07175446 42.36689758]
[78.97875214 55.68205261]
[85.88574982 68.99720764]
[92.79274750 82.31236267]
[107.32768250 86.01852417]
[119.76712799 77.63638306]
[124.23454285 62.22788620]
[139.12109375 56.24707413]
[153.00709534 64.28191376]
[155.24038696 80.16876221]
[144.10778809 91.72058868]
[128.14926147 90.07582092]
[115.70983124 98.45796967]
[121.19711304 112.41897583]
[126.68389130 126.37874603]
[141.50164795 124.04764557]
[156.31941223 121.71653748]
[168.72764587 110.99423981]
[184.12658691 116.63378143]
[186.67512512 132.83369446]
[173.75154114 142.92887878]
[158.65051270 136.53430176]
[143.83274841 138.86540222]
[129.01499939 141.19650269]
[143.64480591 144.50839233]
[151.06704712 157.54335022]
[146.44944763 171.81492615]
[132.79829407 178.03152466]
[119.00125122 172.14581299]
[114.04090118 157.99015808]
[113.41693115 172.97717285]
[112.79295349 187.96418762]
[112.16897583 202.95120239]
[111.85691833 217.94795227]
[111.85691833 232.94795227]
[111.85691833 247.94795227]
[111.85691833 262.94796753]
[111.85691833 277.94796753]
[122.75147247 289.08108521]
[122.53778839 304.29321289]
[111.85691833 314.61090088]
[111.85691833 329.61090088]
[111.85691833 344.61090088]
[111.85691833 359.61090088]
[111.85691833 374.61090088]
[111.85691833 389.61090088]
[111.85691833 404.61090088]
[111.85691833 419.61090088]
[111.85691833 434.61090088]
[111.85691833 449.61090088]
[126.39680481 453.67221069]
[139.30117798 461.50671387]
[149.61247253 472.53305054]
[156.56549072 485.93298340]
[159.64428711 500.71212769]
[158.62039185 515.77380371]
[153.56979370 530.00036621]
[144.86727905 542.33599854]
[133.15861511 551.86541748]
[119.31266785 557.88146973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[30 123]
[31 122]
[32 121]
[33 120]
[34 94]
[35 93]
[36 92]
[37 91]
[38 90]
[39 87]
[40 86]
[45 67]
[46 66]
[47 65]
[48 64]
[49 60]
[50 59]
[51 58]
[52 57]
[68 83]
[69 82]
[95 103]
[96 102]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
