%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCAACAUUGGGGGGGGGGUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCAACUUxxxxxxxxxxGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUCCCCCCCCCCGGCUCAACUUU\
) } def
/len { sequence length } bind def

/coor [
[71.22813416 383.16732788]
[57.20618820 377.61431885]
[45.00623322 368.74798584]
[35.39516068 357.12567139]
[28.97713470 343.47796631]
[26.15559769 328.66278076]
[27.10791397 313.61138916]
[31.77421951 299.26998901]
[39.86118698 286.54000854]
[50.86046219 276.22174072]
[64.08061981 268.96377563]
[78.69063568 265.22232056]
[78.69063568 250.22233582]
[78.69063568 235.22233582]
[78.69063568 220.22233582]
[78.69063568 205.22233582]
[78.69063568 190.22233582]
[78.69063568 175.22233582]
[78.69063568 160.22233582]
[78.69063568 145.22233582]
[78.69063568 130.22233582]
[72.89611053 125.46066284]
[58.85414124 130.73542786]
[61.30706024 115.93732452]
[55.51253510 111.17565918]
[40.79701233 114.08312988]
[27.26091003 126.52517700]
[10.88360786 120.29393005]
[-3.76911712 123.50292206]
[-18.42184258 126.71192169]
[-33.07456589 129.92091370]
[-47.25348282 139.21578979]
[-60.11022186 128.16406250]
[-53.04950333 112.75035095]
[-36.28356171 115.26818848]
[-21.63083839 112.05919647]
[-6.97811317 108.85019684]
[7.67461157 105.64120483]
[14.49273396 95.60250854]
[26.72055817 92.83633423]
[37.88954163 99.36760712]
[52.60506439 96.46013641]
[96.40646362 83.46884918]
[97.63706970 68.51941681]
[90.40537262 55.37778473]
[77.11802673 48.41742706]
[63.83068848 41.45706940]
[48.15059662 44.85033798]
[35.81285858 34.59559631]
[36.28192902 18.55940056]
[49.19798279 9.04335213]
[64.65292358 13.34734726]
[70.79104614 28.16972923]
[84.07838440 35.13008499]
[97.36572266 42.09044266]
[104.14667511 38.88595581]
[93.86065674 27.96817780]
[101.06568909 14.81190586]
[115.80448914 17.59897041]
[117.70857239 32.47697830]
[124.48951721 29.27249146]
[127.54791260 14.58759308]
[130.60630798 -0.09730418]
[133.66470337 -14.78220177]
[136.72309875 -29.46710014]
[126.53097534 -18.46162224]
[113.78724670 -10.54976463]
[99.40274048 -6.29700184]
[84.40554047 -6.00728512]
[69.86751556 -9.70132160]
[56.82773209 -17.11509132]
[46.21815872 -27.71871948]
[38.79708099 -40.75434875]
[35.09489822 -55.29029846]
[35.37620926 -70.28765869]
[39.62090683 -84.67454529]
[47.52561951 -97.42270660]
[58.52538300 -107.62100220]
[71.83402252 -114.54054260]
[86.50035095 -117.68678284]
[101.47614288 -116.83485413]
[115.69104004 -112.04563904]
[128.12908936 -103.66143799]
[137.90133667 -92.28147888]
[144.30931091 -78.71911621]
[146.89505005 -63.94366455]
[145.47474670 -49.01548004]
[154.39088440 -61.07791138]
[163.30703735 -73.14034271]
[162.35913086 -89.15536499]
[174.38502502 -99.77410126]
[190.15948486 -96.85076141]
[197.58169556 -82.62788391]
[190.95797729 -68.01604462]
[175.36947632 -64.22418976]
[166.45332336 -52.16176224]
[157.53717041 -40.09933090]
[151.40800476 -26.40870476]
[148.34960938 -11.72380638]
[145.29121399 2.96109128]
[142.23281860 17.64598846]
[139.17442322 32.33088684]
[149.96070862 35.93185425]
[157.67086792 42.67566681]
[161.62275696 50.90462875]
[176.05014038 46.79968643]
[189.62995911 36.64957809]
[203.14266968 46.88886642]
[197.04423523 62.70801163]
[180.15509033 61.22706985]
[165.72770691 65.33201599]
[145.38832092 90.60808563]
[112.58650970 69.75003052]
[111.35589600 84.69946289]
[120.27204895 96.76189423]
[134.92477417 99.97088623]
[149.57749939 103.17988586]
[163.80722046 95.77079010]
[178.41293335 102.40798187]
[182.19041443 117.99997711]
[172.24186707 130.58592224]
[156.19898987 130.51097107]
[146.36849976 117.83261108]
[131.71577454 114.62361145]
[117.06304932 111.41461945]
[111.21994781 116.11654663]
[125.20706177 121.53508759]
[127.50811768 136.35754395]
[115.82208252 145.76161194]
[101.83486938 140.34333801]
[99.53373718 125.52040100]
[93.69063568 130.22233582]
[93.69063568 145.22233582]
[93.69063568 160.22233582]
[93.69063568 175.22233582]
[93.69063568 190.22233582]
[93.69063568 205.22233582]
[93.69063568 220.22233582]
[93.69063568 235.22233582]
[93.69063568 250.22233582]
[93.69063568 265.22232056]
[108.30064392 268.96377563]
[121.52080536 276.22174072]
[132.52008057 286.54000854]
[140.60704041 299.26998901]
[145.27334595 313.61138916]
[146.22566223 328.66278076]
[143.40412903 343.47796631]
[136.98609924 357.12567139]
[127.37503052 368.74798584]
[115.17507172 377.61431885]
[101.15312958 383.16732788]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 42]
[26 41]
[28 38]
[29 37]
[30 36]
[31 35]
[43 114]
[44 113]
[45 55]
[46 54]
[47 53]
[61 102]
[62 101]
[63 100]
[64 99]
[65 98]
[87 97]
[88 96]
[89 95]
[105 111]
[106 110]
[115 125]
[116 124]
[117 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
