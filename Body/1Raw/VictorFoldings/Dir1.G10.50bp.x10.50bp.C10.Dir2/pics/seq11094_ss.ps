%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCACCCUGGGGGGGGGGUACUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCxxxxxxxxxxACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAACCCCCCCCCCUCCCCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 392.74969482]
[71.19830322 386.73367310]
[59.48964310 377.20425415]
[50.78712082 364.86859131]
[45.73651886 350.64205933]
[44.71262741 335.58038330]
[47.79142761 320.80120850]
[54.74444962 307.40130615]
[65.05573273 296.37496948]
[77.96011353 288.54046631]
[92.50000000 284.47912598]
[92.50000000 269.47912598]
[92.50000000 254.47914124]
[92.50000000 239.47914124]
[92.50000000 224.47914124]
[92.50000000 209.47914124]
[92.50000000 194.47914124]
[92.50000000 179.47914124]
[92.50000000 164.47914124]
[92.50000000 149.47914124]
[92.50000000 134.47914124]
[84.30182648 132.28797913]
[76.72949982 128.14381409]
[70.24864197 122.22279358]
[65.27585602 114.81196594]
[62.15230179 106.29584503]
[61.12106323 97.13658142]
[62.30958939 87.84890747]
[65.71862030 78.97124481]
[51.81606293 73.33929443]
[37.91350555 67.70733643]
[24.01095200 62.07537842]
[15.67065907 74.60631561]
[4.97838974 85.20161438]
[-7.62801409 93.42739105]
[-21.63232803 98.94681549]
[-36.46108627 101.53387451]
[-51.50705719 101.08261871]
[-66.15412140 97.61152649]
[-79.80248260 91.26274872]
[-91.89326477 82.29625702]
[-101.93134308 71.07922363]
[-109.50566864 58.07097626]
[-114.30607605 43.80419922]
[-116.13600159 28.86310768]
[-114.92050171 13.85952568]
[-110.70935059 -0.59215569]
[-103.67499542 -13.90015030]
[-94.10548401 -25.51950455]
[-82.39268494 -34.97441101]
[-69.01623535 -41.87770081]
[-54.52388382 -45.94668579]
[-39.50908661 -47.01474380]
[-24.58668900 -45.03813934]
[-10.36775589 -40.09781265]
[2.56545782 -32.39606857]
[13.68334484 -22.24828529]
[22.53063393 -10.07001114]
[28.74503517 3.64006233]
[32.07207108 18.32051659]
[32.37550354 33.37019348]
[29.64290810 48.17282104]
[43.54546356 53.80477905]
[57.44802094 59.43673706]
[71.35057831 65.06869507]
[84.36688232 57.61378098]
[86.54372406 42.77257538]
[88.72055817 27.93137169]
[90.89739990 13.09016514]
[93.07423401 -1.75104010]
[79.60812378 -8.67510128]
[69.12168121 -19.59816360]
[62.75240326 -33.33537674]
[61.19117355 -48.39662552]
[64.60734558 -63.14818573]
[72.63036346 -75.98991394]
[84.38993835 -85.52883148]
[98.61048889 -90.73023987]
[113.74948120 -91.02991486]
[128.16473389 -86.39536285]
[140.29260254 -77.32929993]
[148.81753540 -64.81513977]
[152.81483459 -50.21033478]
[151.85087585 -35.09909439]
[146.03022766 -21.12058258]
[135.98428345 -9.79107761]
[122.80274200 -2.33952141]
[107.91543579 0.42579684]
[105.73860168 15.26700211]
[103.56176758 30.10820770]
[101.38492584 44.94941330]
[99.20809174 59.79061890]
[115.30018616 64.59095001]
[127.38616943 75.22554016]
[133.62698364 89.30950165]
[148.56129456 87.90719604]
[163.49560547 86.50489044]
[178.42991638 85.10258484]
[180.51168823 70.17734528]
[185.97990417 56.13471985]
[194.53968811 43.73201752]
[205.72940063 33.63810349]
[218.94558716 26.39732361]
[233.47554016 22.40016747]
[248.53565979 21.86219597]
[263.31378174 24.81242180]
[277.01293945 31.09174156]
[288.89434814 40.36151886]
[298.31726074 52.12184906]
[304.77352905 65.73851013]
[307.91494751 80.47717285]
[307.57211304 95.54300690]
[303.76351929 110.12351227]
[296.69454956 123.43240356]
[286.74642944 134.75193787]
[274.45565796 143.47166443]
[260.48504639 149.12133789]
[245.58802795 151.39628601]
[230.56797791 150.17381287]
[216.23487854 145.51986694]
[203.36172485 137.68540955]
[192.64276123 127.09294891]
[184.65600586 114.31372070]
[179.83221436 100.03689575]
[164.89790344 101.43920135]
[149.96359253 102.84149933]
[135.02929688 104.24380493]
[130.39842224 117.91639709]
[120.67978668 128.59033203]
[107.50000000 134.47914124]
[107.50000000 149.47914124]
[107.50000000 164.47914124]
[107.50000000 179.47914124]
[107.50000000 194.47914124]
[107.50000000 209.47914124]
[107.50000000 224.47914124]
[107.50000000 239.47914124]
[107.50000000 254.47914124]
[107.50000000 269.47912598]
[107.50000000 284.47912598]
[122.03988647 288.54046631]
[134.94427490 296.37496948]
[145.25555420 307.40130615]
[152.20857239 320.80120850]
[155.28736877 335.58038330]
[154.26348877 350.64205933]
[149.21287537 364.86859131]
[140.51036072 377.20425415]
[128.80169678 386.73367310]
[114.95575714 392.74969482]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 65]
[30 64]
[31 63]
[32 62]
[66 92]
[67 91]
[68 90]
[69 89]
[70 88]
[95 127]
[96 126]
[97 125]
[98 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
