%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUACUAUGGGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCxxxxxxxxxxUAACUACUACCGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGACCCCCCCCCCCCCUACUACUAU\
) } def
/len { sequence length } bind def

/coor [
[-5.35887384 276.85644531]
[-14.37269402 271.16537476]
[-23.07982826 265.01531982]
[-31.45692635 258.42279053]
[-39.48152542 251.40542603]
[-47.13211060 243.98208618]
[-54.38816071 236.17266846]
[-61.23022461 227.99809265]
[-73.31021118 236.89044189]
[-85.39020538 245.78279114]
[-97.47019196 254.67515564]
[-109.55017853 263.56750488]
[-121.63016510 272.45983887]
[-133.71015930 281.35220337]
[-145.69699097 290.36972046]
[-157.58937073 299.51147461]
[-169.48175049 308.65319824]
[-181.37413025 317.79492188]
[-193.26651001 326.93667603]
[-205.15888977 336.07839966]
[-214.03161621 350.52523804]
[-230.37007141 345.99853516]
[-230.54322815 329.04547119]
[-214.30062866 324.18600464]
[-202.40824890 315.04428101]
[-190.51586914 305.90255737]
[-178.62348938 296.76080322]
[-166.73110962 287.61907959]
[-154.83872986 278.47735596]
[-151.43038940 271.86456299]
[-142.60250854 269.27221680]
[-130.52252197 260.37985229]
[-118.44252777 251.48750305]
[-106.36254120 242.59515381]
[-94.28255463 233.70280457]
[-82.20256042 224.81045532]
[-70.12257385 215.91810608]
[-85.24720764 189.78958130]
[-96.38766479 161.72993469]
[-103.30433655 132.34262085]
[-105.84847260 102.25970459]
[-103.96534729 72.12818909]
[-97.69545746 42.59612656]
[-87.17366791 14.29866791]
[-72.62625885 -12.15557957]
[-54.36611557 -36.19765854]
[-65.24494171 -46.52486038]
[-76.12376404 -56.85206604]
[-87.10942841 -67.06554413]
[-98.20074463 -77.16419983]
[-109.29206085 -87.26284790]
[-124.45987701 -83.98916626]
[-138.64149475 -90.28690338]
[-146.38377380 -103.73445129]
[-144.70967102 -119.16095734]
[-134.26290894 -130.63461304]
[-119.06047058 -133.74356079]
[-104.94801331 -127.29234314]
[-97.35205841 -113.76159668]
[-99.19341278 -98.35416412]
[-88.10209656 -88.25550842]
[-77.01078033 -78.15686035]
[-69.90151978 -75.96503448]
[-65.79656219 -67.73088837]
[-54.91773605 -57.40368652]
[-44.03890991 -47.07648087]
[-36.23229218 -54.33555222]
[-28.06036758 -61.18077087]
[-19.54505539 -67.59379578]
[-10.70918465 -73.55741119]
[-1.57645011 -79.05564880]
[7.82865858 -84.07374573]
[17.48092270 -88.59825134]
[27.35445976 -92.61704254]
[37.42279434 -96.11933136]
[47.65892410 -99.09573364]
[58.03540802 -101.53826904]
[68.52442169 -103.44037628]
[79.09783173 -104.79696655]
[89.72729492 -105.60440063]
[100.38430023 -105.86051178]
[111.04027557 -105.56461334]
[121.66664886 -104.71749878]
[132.23492432 -103.32144165]
[142.71675110 -101.38018036]
[153.08404541 -98.89892578]
[163.30900574 -95.88433075]
[173.36418152 -92.34446716]
[183.22265625 -88.28884888]
[192.85795593 -83.72833252]
[202.24426270 -78.67515564]
[211.35639954 -73.14286041]
[220.16995239 -67.14629364]
[228.66125488 -60.70152664]
[236.80757141 -53.82584000]
[244.58703613 -46.53767395]
[251.97879028 -38.85657501]
[258.96301270 -30.80313110]
[265.52099609 -22.39894485]
[271.63513184 -13.66654778]
[277.28903198 -4.62935734]
[282.46752930 4.68839407]
[287.15673828 14.26172161]
[291.34411621 24.06495285]
[295.01840210 34.07180405]
[298.16973877 44.25543976]
[300.78970337 54.58855057]
[302.87124634 65.04343414]
[304.40878296 75.59204865]
[305.39822388 86.20611572]
[305.83688354 96.85717010]
[305.72360229 107.51665497]
[305.05868530 118.15597534]
[303.84390259 128.74661255]
[302.08248901 139.26017761]
[299.77923584 149.66845703]
[296.94027710 159.94355774]
[293.57321167 170.05792236]
[289.68710327 179.98442078]
[285.29232788 189.69644165]
[280.40069580 199.16795349]
[275.02536011 208.37355042]
[269.18066406 217.28854370]
[262.88232422 225.88902283]
[256.14721680 234.15193176]
[248.99342346 242.05513000]
[241.44009399 249.57740784]
[233.50749207 256.69857788]
[225.21690369 263.39959717]
[216.59054565 269.66244507]
[207.65155029 275.47033691]
[198.42388916 280.80773926]
[188.93231201 285.66027832]
[179.20225525 290.01501465]
[169.25982666 293.86019897]
[159.13168335 297.18554688]
[148.84497070 299.98217773]
[138.42729187 302.24252319]
[127.90657043 303.96060181]
[117.31101227 305.13174438]
[106.66903687 305.75280762]
[96.00917816 305.82217407]
[85.36002350 305.33966064]
[74.75012207 304.30648804]
[64.20793152 302.72549438]
[53.76171112 300.60089111]
[43.43947983 297.93838501]
[33.26891708 294.74511719]
[23.27728844 291.02963257]
[13.49139118 286.80194092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[46 66]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
