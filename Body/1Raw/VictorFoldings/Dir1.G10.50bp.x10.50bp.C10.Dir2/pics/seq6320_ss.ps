%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGACCACAUCGGGGGGGGGGUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUxxxxxxxxxxAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCCCCCCCCCCCGACCACACC\
) } def
/len { sequence length } bind def

/coor [
[83.04055786 389.42584229]
[70.48233032 381.07467651]
[60.39611053 369.86224365]
[53.41591644 356.49331665]
[49.98053360 341.80834961]
[50.30590820 326.73037720]
[54.37159348 312.20724487]
[61.92201233 299.15191650]
[72.48254395 288.38500977]
[85.38933563 280.58337402]
[99.83106232 276.23742676]
[99.20708466 261.25042725]
[98.58310699 246.26339722]
[97.95912933 231.27638245]
[97.33515930 216.28936768]
[96.71118164 201.30235291]
[96.08720398 186.31533813]
[95.46322632 171.32832336]
[94.83924866 156.34130859]
[94.21527100 141.35429382]
[93.59129333 126.36727142]
[89.68190765 128.55641174]
[85.23706818 130.17382812]
[80.33833313 131.13101196]
[75.07992554 131.35079956]
[60.95512009 136.39956665]
[46.83031845 141.44831848]
[36.63498306 154.29304504]
[20.45537376 151.61868286]
[14.93568611 136.17636108]
[25.75410271 123.85183716]
[41.78156281 127.32351685]
[55.90636444 122.27475739]
[70.03116608 117.22600555]
[69.48551178 109.74588013]
[54.52524567 110.83694458]
[53.43443298 95.87665558]
[68.39420319 94.78562927]
[67.84854889 87.30550385]
[53.14058685 84.36002350]
[37.78661728 90.12089539]
[25.29416084 79.49684143]
[28.51438904 63.41696930]
[44.13460159 58.42288208]
[56.08606720 69.65206146]
[70.79402924 72.59754181]
[80.66323853 68.66614532]
[90.44011688 67.79732513]
[99.26390839 69.64559937]
[106.45238495 73.64337921]
[113.90729523 60.62707138]
[121.36220551 47.61076355]
[109.02700806 39.05948257]
[97.47258759 29.47945976]
[86.78450012 18.94161797]
[77.04186249 7.52397823]
[68.31681824 -4.68892527]
[60.67395782 -17.60667038]
[54.16987228 -31.13361931]
[48.85271835 -45.16962051]
[44.76185989 -59.61075211]
[41.92758179 -74.35009766]
[40.37087250 -89.27853394]
[40.10326004 -104.28552246]
[41.12672043 -119.25996399]
[43.43367767 -134.09098816]
[47.00705338 -148.66880798]
[51.82038879 -162.88545227]
[57.83804703 -176.63569641]
[65.01547241 -189.81773376]
[73.29953766 -202.33395386]
[82.62889099 -214.09169006]
[92.93447113 -225.00390625]
[104.13997650 -234.98980713]
[116.16244507 -243.97544861]
[128.91285706 -251.89430237]
[142.29682922 -258.68774414]
[156.21524048 -264.30548096]
[170.56507874 -268.70593262]
[185.24006653 -271.85647583]
[200.13157654 -273.73385620]
[215.12934875 -274.32409668]
[230.12232971 -273.62286377]
[244.99954224 -271.63534546]
[259.65081787 -268.37625122]
[273.96768188 -263.86972046]
[287.84414673 -258.14913940]
[301.17745972 -251.25682068]
[313.86892700 -243.24380493]
[325.82455444 -234.16943359]
[336.95584106 -224.10087585]
[347.18038940 -213.11268616]
[356.42245483 -201.28622437]
[364.61364746 -188.70903015]
[371.69332886 -175.47422791]
[377.60903931 -161.67982483]
[382.31704712 -147.42794800]
[385.78240967 -132.82408142]
[387.97955322 -117.97638702]
[388.89215088 -102.99478149]
[388.51348877 -87.99018097]
[386.84631348 -73.07367706]
[383.90304565 -58.35571289]
[379.70541382 -43.94525528]
[374.28451538 -29.94899178]
[367.68048096 -16.47055054]
[359.94223022 -3.60972500]
[351.12704468 8.53826809]
[341.30017090 19.88348770]
[330.53436279 30.34193802]
[318.90936279 39.83618164]
[306.51123047 48.29593277]
[293.43173218 55.65855026]
[279.76770020 61.86952972]
[265.62036133 66.88288116]
[251.09439087 70.66148376]
[236.29737854 73.17737579]
[221.33885193 74.41191101]
[206.32957458 74.35596466]
[191.38067627 73.00994110]
[176.60282898 70.38381195]
[162.10543823 66.49702454]
[147.99584961 61.37834167]
[134.37850952 55.06567383]
[126.92360687 68.08198547]
[119.46869659 81.09828949]
[126.36195374 106.43054962]
[108.57830811 125.74329376]
[109.20228577 140.73031616]
[109.82626343 155.71733093]
[110.45024109 170.70434570]
[111.07421875 185.69136047]
[111.69819641 200.67837524]
[112.32217407 215.66539001]
[112.94615173 230.65240479]
[113.57012939 245.63941956]
[114.19410706 260.62643433]
[114.81808472 275.61346436]
[129.57109070 278.74389648]
[143.08172607 285.44564819]
[154.50070190 295.29745483]
[163.11021423 307.67996216]
[168.36906433 321.81488037]
[169.94667053 336.81359863]
[167.74386597 351.73333740]
[161.89912415 365.63619995]
[152.77983093 377.64825439]
[140.95925903 387.01443481]
[127.18045807 393.14590454]
[112.30955505 395.65731812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[25 34]
[26 33]
[27 32]
[39 46]
[40 45]
[50 126]
[51 125]
[52 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
