%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAAUACUAGGGGGGGGGGACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCxxxxxxxxxxGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCCCCCCCCCCCUAUUACUA\
) } def
/len { sequence length } bind def

/coor [
[83.52075195 355.68621826]
[69.67481232 349.67019653]
[57.96615219 340.14077759]
[49.26362610 327.80511475]
[44.21302795 313.57861328]
[43.18913651 298.51690674]
[46.26793289 283.73776245]
[53.22095490 270.33782959]
[63.53223801 259.31149292]
[76.43662262 251.47698975]
[90.97650909 247.41567993]
[90.97650909 232.41567993]
[90.97650909 217.41567993]
[90.97650909 202.41567993]
[90.97650909 187.41567993]
[90.97650909 172.41567993]
[90.97650909 157.41567993]
[90.97650909 142.41567993]
[90.97650909 127.41567993]
[90.97650909 112.41567993]
[82.95484161 125.09056854]
[72.65502930 135.99533081]
[60.45809937 144.72659302]
[46.81523132 150.96134949]
[32.23110962 154.46896362]
[17.24522972 155.11968994]
[2.41195488 152.88943481]
[-11.71999931 147.86073303]
[-24.62786293 140.21958923]
[-35.83414459 130.24867249]
[-44.92429733 118.31681824]
[-51.56205750 104.86542511]
[-55.50188446 90.39207458]
[-56.59803009 75.43218231]
[-54.80994415 60.53913498]
[-50.20377731 46.26387024]
[-42.94992065 33.13445282]
[-33.31670761 21.63657570]
[-21.66049194 12.19556713]
[-8.41246510 5.16066980]
[5.93730068 0.79212153]
[20.85797691 -0.74847579]
[35.79761124 0.59586781]
[50.20355988 4.77542210]
[63.54291153 11.63557625]
[75.32221222 20.92255783]
[85.10572815 32.29282379]
[92.53153229 45.32575607]
[97.32493591 59.53924561]
[99.30862427 74.40750122]
[98.41023254 89.37400818]
[107.17644501 77.20217133]
[115.94264984 65.03033447]
[124.70885468 52.85849762]
[133.47506714 40.68666077]
[131.10009766 29.98876762]
[134.96025085 19.96864700]
[143.53936768 13.88439846]
[153.83171082 13.56902885]
[163.09666443 1.77238894]
[172.36160278 -10.02425098]
[181.62655640 -21.82089043]
[190.89151001 -33.61753082]
[180.15454102 -44.11346817]
[170.61534119 -55.70876694]
[162.38575745 -68.26747894]
[155.56227112 -81.64235687]
[150.22489929 -95.67658997]
[146.43620300 -110.20562744]
[144.24061584 -125.05913544]
[143.66386414 -140.06295776]
[144.71272278 -155.04116821]
[147.37489319 -169.81819153]
[151.61917114 -184.22073364]
[157.39576721 -198.07995605]
[164.63697815 -211.23336792]
[173.25788879 -223.52673340]
[183.15744019 -234.81594849]
[194.21955872 -244.96862793]
[206.31454468 -253.86573792]
[219.30058289 -261.40298462]
[233.02543640 -267.49197388]
[247.32817078 -272.06130981]
[262.04110718 -275.05746460]
[276.99172974 -276.44525146]
[292.00476074 -276.20846558]
[306.90417480 -274.34982300]
[321.51528931 -270.89114380]
[335.66680908 -265.87295532]
[349.19277954 -259.35412598]
[361.93463135 -251.41107178]
[373.74301147 -242.13691711]
[384.47940063 -231.64039612]
[394.01797485 -220.04458618]
[402.24688721 -207.48542786]
[409.06964111 -194.11018372]
[414.40628052 -180.07566833]
[418.19418335 -165.54643250]
[420.38897705 -150.69281006]
[420.96490479 -135.68894958]
[419.91525269 -120.71078491]
[417.25228882 -105.93392181]
[413.00723267 -91.53160095]
[407.22988892 -77.67268372]
[399.98797607 -64.51966858]
[391.36639404 -52.22675705]
[381.46624756 -40.93808365]
[370.40356445 -30.78600311]
[358.30810547 -21.88953972]
[345.32165527 -14.35300064]
[331.59649658 -8.26474953]
[317.29351807 -3.69616652]
[302.58041382 -0.70081633]
[287.62973022 0.68618196]
[272.61669922 0.44856653]
[257.71737671 -1.41087663]
[243.10644531 -4.87034655]
[228.95521545 -9.88928223]
[215.42958069 -16.40884018]
[202.68814087 -24.35258102]
[193.42320251 -12.55594158]
[184.15824890 -0.75930172]
[174.89329529 11.03733826]
[165.62834167 22.83397865]
[164.36730957 42.09116745]
[145.64689636 49.45286942]
[136.88069153 61.62470627]
[128.11448669 73.79653931]
[119.34828186 85.96837616]
[110.58206940 98.14021301]
[105.97650909 112.41567993]
[105.97650909 127.41567993]
[105.97650909 142.41567993]
[105.97650909 157.41567993]
[105.97650909 172.41567993]
[105.97650909 187.41567993]
[105.97650909 202.41567993]
[105.97650909 217.41567993]
[105.97650909 232.41567993]
[105.97650909 247.41567993]
[120.51639557 251.47698975]
[133.42077637 259.31149292]
[143.73205566 270.33782959]
[150.68508911 283.73776245]
[153.76388550 298.51690674]
[152.73999023 313.57861328]
[147.68939209 327.80511475]
[138.98686218 340.14077759]
[127.27819824 349.67019653]
[113.43226624 355.68621826]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[51 130]
[52 129]
[53 128]
[54 127]
[55 126]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
