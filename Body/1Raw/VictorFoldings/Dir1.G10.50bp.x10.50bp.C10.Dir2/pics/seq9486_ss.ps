%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUCAUCCUAGCGGGGGGGGGGCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUxxxxxxxxxxUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCCCCCCCCCCCAUCCUCAUCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[43.73756409 488.72186279]
[29.37531281 484.21514893]
[16.21442223 476.90927124]
[4.79382515 467.10342407]
[-4.41881371 455.19912720]
[-11.04624271 441.68386841]
[-14.81707191 427.11108398]
[-15.57688808 412.07754517]
[-13.29457855 397.19882202]
[-8.06360149 383.08422852]
[-0.09816252 370.31173706]
[10.27555943 359.40435791]
[22.63276482 350.80877686]
[36.46743774 344.87692261]
[51.21305084 341.85174561]
[51.21305084 326.85174561]
[51.21305084 311.85174561]
[51.21305084 296.85174561]
[51.21305084 281.85174561]
[51.21305084 266.85174561]
[51.21305084 251.85174561]
[51.21305084 236.85174561]
[51.21305084 221.85174561]
[51.21305084 206.85174561]
[45.78040314 201.68103027]
[35.43878937 212.54615784]
[24.57382965 202.20437622]
[34.91510010 191.33959961]
[29.48244667 186.16888428]
[14.50074291 186.90953064]
[-0.48096061 187.65016174]
[-15.46266460 188.39080811]
[-21.35050774 202.47256470]
[-32.77081680 212.59873962]
[-47.45608521 216.75875854]
[-62.49053574 214.12663269]
[-74.88906860 205.22500610]
[-82.18995667 191.82127380]
[-82.94358826 176.57678223]
[-77.00033569 162.51831055]
[-65.54023743 152.43719482]
[-50.83870316 148.33503723]
[-35.81473160 151.02633667]
[-23.45134735 159.97673035]
[-16.20330429 173.40910339]
[-1.22160101 172.66845703]
[13.76010323 171.92782593]
[28.74180603 171.18717957]
[14.56141376 166.29673767]
[6.34173393 153.74935913]
[7.52257061 138.79591370]
[17.60976219 127.69416809]
[32.38198471 125.09004211]
[45.65729904 132.07330322]
[51.88020325 145.72158813]
[48.44584274 160.32435608]
[57.06970978 148.05125427]
[65.69357300 135.77816772]
[74.31744385 123.50506592]
[63.26449966 100.19985199]
[71.20085907 74.21275330]
[95.75513458 59.64444351]
[95.16253662 44.65615082]
[94.56993103 29.66786385]
[86.29347992 16.18413925]
[93.52192688 3.16112852]
[92.92932892 -11.82716084]
[83.98384094 -21.16734505]
[83.82747650 -33.69775772]
[91.99702454 -42.66392517]
[91.70066833 -57.66099930]
[77.43223572 -62.83557892]
[65.99916077 -72.81803131]
[58.94768524 -86.25830841]
[57.23145294 -101.33872986]
[61.08256912 -116.01978302]
[69.98020935 -128.31597900]
[82.72103119 -136.56436157]
[97.58195496 -139.64939880]
[112.55315399 -137.15386963]
[125.60989380 -129.41528320]
[134.98637390 -117.48019409]
[139.41447449 -102.96274567]
[138.29536438 -87.82630157]
[131.78036499 -74.11793518]
[120.75060272 -63.69159698]
[106.69773865 -57.95735550]
[106.99409485 -42.96028519]
[116.87134552 -28.48232269]
[107.91761780 -12.41976070]
[108.51021576 2.56852937]
[116.74428558 14.98019123]
[109.55822754 29.07526398]
[110.15082550 44.06355286]
[110.74342346 59.05184174]
[124.34845734 65.36872101]
[136.18077087 56.14937973]
[148.01309204 46.93003464]
[159.84539795 37.71069336]
[161.54315186 21.99785614]
[173.90650940 12.15291500]
[189.60052490 14.01669598]
[199.31419373 26.48345184]
[197.28459167 42.15687561]
[184.71583557 51.73820496]
[169.06474304 49.54300690]
[157.23243713 58.76235199]
[145.40011597 67.98169708]
[133.56781006 77.20104218]
[133.75782776 83.22379303]
[132.98355103 88.85694885]
[147.89506531 87.23008728]
[162.80657959 85.60321808]
[177.71809387 83.97635651]
[190.62011719 73.85361481]
[205.73475647 80.21597290]
[207.51336670 96.51838684]
[194.12626648 105.99032593]
[179.34495544 98.88787079]
[164.43344116 100.51473236]
[149.52192688 102.14160156]
[134.61041260 103.76846313]
[133.10334778 110.78192139]
[130.19087219 117.33762360]
[125.99661255 123.15724182]
[120.69865417 127.99370575]
[114.52191925 131.64167786]
[107.72864532 133.94627380]
[100.60724640 134.80967712]
[93.46006012 134.19519043]
[86.59053802 132.12893677]
[77.96667480 144.40202332]
[69.34280396 156.67512512]
[60.71894073 168.94822693]
[66.21305084 206.85174561]
[66.21305084 221.85174561]
[66.21305084 236.85174561]
[66.21305084 251.85174561]
[66.21305084 266.85174561]
[66.21305084 281.85174561]
[66.21305084 296.85174561]
[66.21305084 311.85174561]
[66.21305084 326.85174561]
[66.21305084 341.85174561]
[80.95867157 344.87692261]
[94.79334259 350.80877686]
[107.15054321 359.40435791]
[117.52426910 370.31173706]
[125.48970795 383.08422852]
[130.72068787 397.19882202]
[133.00299072 412.07754517]
[132.24317932 427.11108398]
[128.47235107 441.68386841]
[121.84491730 455.19912720]
[112.63227844 467.10342407]
[101.21168518 476.90927124]
[88.05079651 484.21514893]
[73.68853760 488.72186279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[29 48]
[30 47]
[31 46]
[32 45]
[56 134]
[57 133]
[58 132]
[59 131]
[62 95]
[63 94]
[64 93]
[66 91]
[67 90]
[70 88]
[71 87]
[96 109]
[97 108]
[98 107]
[99 106]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
