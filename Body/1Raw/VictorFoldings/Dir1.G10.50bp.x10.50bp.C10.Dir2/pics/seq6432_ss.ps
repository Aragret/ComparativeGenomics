%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCCCCGCAUGGGGGGGGGGAAACAACAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGxxxxxxxxxxCGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUCCCCCCCCCCUUCCCCCGCAU\
) } def
/len { sequence length } bind def

/coor [
[124.39383698 584.54620361]
[110.37189484 578.99316406]
[98.17193604 570.12683105]
[88.56086731 558.50451660]
[82.14284515 544.85687256]
[79.32130432 530.04162598]
[80.27362061 514.99029541]
[84.93992615 500.64886475]
[93.02689362 487.91891479]
[104.02616882 477.60061646]
[117.24632263 470.34265137]
[131.85633850 466.60122681]
[131.85633850 451.60122681]
[131.85633850 436.60122681]
[131.85633850 421.60122681]
[131.85633850 406.60122681]
[131.85633850 391.60122681]
[131.85633850 376.60122681]
[131.85633850 361.60122681]
[131.85633850 346.60122681]
[131.85633850 331.60122681]
[131.85633850 316.60122681]
[116.32915497 311.30545044]
[103.51920319 301.01553345]
[94.97351074 286.95178223]
[91.73175812 270.79159546]
[94.19977570 254.46948242]
[102.09883881 239.94528198]
[114.49703979 228.96903992]
[129.91917419 222.87002563]
[129.30335999 207.88267517]
[128.68753052 192.89532471]
[125.17835999 178.31156921]
[118.90895844 164.68460083]
[112.63954926 151.05761719]
[106.37014771 137.43063354]
[100.10073853 123.80365753]
[93.83133698 110.17668152]
[83.84024048 98.98838043]
[71.00658417 91.22325134]
[60.12800598 101.67881775]
[46.91353226 108.96168518]
[32.26415634 112.57529449]
[17.17869377 112.27326965]
[2.68569708 108.07619476]
[-10.22667885 100.27023315]
[-20.67804527 89.38761902]
[-27.95581055 76.17033386]
[-31.56376457 61.51956558]
[-31.25591087 46.43421936]
[-27.05324173 31.94284439]
[-19.24229813 19.03348351]
[-8.35564709 8.58631992]
[4.86444426 1.31365848]
[19.51660728 -2.28863883]
[34.60183334 -1.97496128]
[49.09158325 2.23330402]
[61.99792862 10.04923058]
[72.44088745 20.93991470]
[79.70844269 34.16281509]
[83.30508423 48.81636429]
[82.98558044 63.90147018]
[78.77172089 78.38959503]
[91.60537720 86.15473175]
[104.89271545 79.19437408]
[105.81613159 64.22282410]
[106.73954010 49.25127411]
[107.66295624 34.27972412]
[108.58637238 19.30817413]
[109.04829407 4.31528854]
[109.04829407 -10.68471146]
[95.70716858 -18.29456520]
[87.97219849 -31.56354523]
[87.92405701 -46.92236328]
[95.57569122 -60.23957062]
[108.86885071 -67.93290710]
[124.22774506 -67.93290710]
[137.52090454 -60.23957062]
[145.17253113 -46.92236328]
[145.12438965 -31.56354523]
[137.38941956 -18.29456520]
[124.04829407 -10.68471146]
[124.04829407 4.31528854]
[126.32717133 7.08186436]
[127.34590912 11.11073208]
[126.51657104 15.78168678]
[123.55792236 20.23158836]
[122.63450623 35.20313644]
[121.71109009 50.17468643]
[120.78768158 65.14624023]
[119.86426544 80.11779022]
[120.13909912 92.34954071]
[114.95479584 100.89481354]
[107.45831299 103.90727234]
[113.72772217 117.53425598]
[119.99712372 131.16123962]
[126.26653290 144.78820801]
[132.53593445 158.41519165]
[138.80534363 172.04217529]
[140.52947998 157.14158630]
[146.49357605 143.37825012]
[156.18682861 131.93093872]
[168.77903748 123.78008270]
[183.19171143 119.62378693]
[198.19044495 119.81801605]
[212.49066162 124.34613800]
[224.86758423 132.82032776]
[234.26115417 144.51481628]
[239.86683655 158.42797852]
[241.20455933 173.36820984]
[238.15969849 188.05592346]
[230.99308777 201.23315430]
[220.31848145 211.77131653]
[207.05015564 218.76786804]
[192.32449341 221.62353516]
[177.40270996 220.09376526]
[163.56278992 214.30958557]
[151.99011230 204.76635742]
[143.67488098 192.27949524]
[144.29071045 207.26686096]
[144.90653992 222.25421143]
[158.11688232 225.82017517]
[169.76559448 232.96688843]
[178.90705872 243.10301208]
[184.80235291 255.39498901]
[186.97898865 268.83560181]
[185.26875305 282.32647705]
[179.82066345 294.76788330]
[171.08807373 305.14834595]
[159.79090881 312.62689209]
[146.85633850 316.60122681]
[146.85633850 331.60122681]
[146.85633850 346.60122681]
[146.85633850 361.60122681]
[146.85633850 376.60122681]
[146.85633850 391.60122681]
[146.85633850 406.60122681]
[146.85633850 421.60122681]
[146.85633850 436.60122681]
[146.85633850 451.60122681]
[146.85633850 466.60122681]
[161.46635437 470.34265137]
[174.68650818 477.60061646]
[185.68579102 487.91891479]
[193.77275085 500.64886475]
[198.43905640 514.99029541]
[199.39137268 530.04162598]
[196.56983948 544.85687256]
[190.15180969 558.50451660]
[180.54074097 570.12683105]
[168.34077454 578.99316406]
[154.31883240 584.54620361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[30 121]
[31 120]
[32 119]
[33 99]
[34 98]
[35 97]
[36 96]
[37 95]
[38 94]
[39 64]
[40 63]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
[70 83]
[71 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
