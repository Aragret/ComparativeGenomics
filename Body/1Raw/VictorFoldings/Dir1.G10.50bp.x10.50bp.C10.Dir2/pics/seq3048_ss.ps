%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAGUAAUCGGGGGGGGGGCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGxxxxxxxxxxUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCCCCCCCCCCCGGAAUAAUC\
) } def
/len { sequence length } bind def

/coor [
[67.84944153 377.65136719]
[54.00349808 371.63534546]
[42.29483795 362.10592651]
[33.59231186 349.77026367]
[28.54171181 335.54373169]
[27.51782036 320.48205566]
[30.59661865 305.70288086]
[37.54964066 292.30297852]
[47.86092377 281.27664185]
[60.76530457 273.44213867]
[75.30519104 269.38079834]
[75.30519104 254.38081360]
[75.30519104 239.38081360]
[75.30519104 224.38081360]
[75.30519104 209.38081360]
[75.30519104 194.38081360]
[75.30519104 179.38081360]
[75.30519104 164.38081360]
[75.30519104 149.38081360]
[75.30519104 134.38081360]
[64.86537933 123.61000824]
[49.87268448 123.14196014]
[34.87998962 122.67391968]
[19.88729286 122.20587921]
[8.41964722 132.74774170]
[-6.77841091 132.05950928]
[-16.75779533 121.06188965]
[-31.75049210 120.59384918]
[-36.44326782 134.95193481]
[-44.99222946 147.40551758]
[-56.70434952 156.94506836]
[-70.63018036 162.79722595]
[-85.64082336 164.48760986]
[-100.51942444 161.87918091]
[-114.05984497 155.18338013]
[-125.16442108 144.94302368]
[-132.93295288 131.98823547]
[-136.73568726 117.36920166]
[-136.26435852 102.27104187]
[-131.55715942 87.91767883]
[-122.99569702 75.47268677]
[-111.27399445 65.94491577]
[-97.34229279 60.10673904]
[-82.32996368 58.43143845]
[-67.45398712 61.05482101]
[-53.92030334 67.76422119]
[-42.82601547 78.01573181]
[-35.07049942 90.97831726]
[-31.28244972 105.60115051]
[-16.28975296 106.06919861]
[-5.64382219 95.71546173]
[9.56757069 95.97654724]
[20.35533333 107.21318054]
[35.34803009 107.68122101]
[50.34072495 108.14926910]
[65.33341980 108.61730957]
[67.27799988 90.36495972]
[77.74101257 76.31832886]
[93.12502289 69.88476562]
[93.43708038 54.88801193]
[93.74913788 39.89125824]
[94.06118774 24.89450264]
[94.37324524 9.89774990]
[79.78330994 6.12543392]
[66.45687866 -0.91040456]
[55.11264038 -10.83033180]
[46.36236954 -23.09937859]
[40.67795944 -37.05588913]
[38.36596298 -51.94720840]
[39.55106354 -66.97026825]
[44.16935349 -81.31488800]
[51.97176743 -94.20748138]
[62.53753281 -104.95277405]
[75.29685211 -112.97128296]
[89.56163788 -117.83057404]
[104.56259918 -119.26860046]
[119.49075317 -117.20780182]
[133.54104614 -111.75932312]
[145.95576477 -103.21698761]
[156.06539917 -92.04147339]
[163.32475281 -78.83547211]
[167.34231567 -64.31114960]
[167.90145874 -49.25180054]
[164.97201538 -34.46954727]
[158.71194458 -20.76157951]
[149.45887756 -8.86715126]
[137.71180725 0.57228595]
[124.10423279 7.04767466]
[109.37000275 10.20980644]
[109.05794525 25.20656013]
[108.74588776 40.20331192]
[108.43383026 55.20006561]
[108.12177277 70.19682312]
[113.18247986 72.06409454]
[117.84119415 74.78324890]
[121.95584869 78.27136993]
[125.40097809 82.42208862]
[128.07153320 87.10883331]
[129.88604736 92.18869019]
[144.88523865 92.03265381]
[159.88442993 91.87661743]
[174.88362122 91.72058105]
[189.83171082 90.47370911]
[204.64945984 88.14260101]
[219.46722412 85.81150055]
[226.40602112 71.93227386]
[240.19309998 64.81217194]
[255.52705383 67.18899536]
[266.51165771 78.14882660]
[268.92312622 93.47737885]
[261.83419800 107.28050995]
[247.97067261 114.25064087]
[232.66340637 111.70760345]
[221.79832458 100.62925720]
[206.98056030 102.96035767]
[192.16281128 105.29146576]
[204.05162048 114.43784332]
[207.45056152 129.04766846]
[200.81988525 142.50256348]
[187.16334534 148.70732117]
[172.66748047 144.85112000]
[163.89907837 132.68086243]
[164.83030701 117.70979309]
[175.03965759 106.71976471]
[160.04046631 106.87580109]
[145.04127502 107.03184509]
[130.04208374 107.18788147]
[125.79257202 119.10544586]
[116.85305023 128.72715759]
[104.40065765 134.23196411]
[90.30519104 134.38081360]
[90.30519104 149.38081360]
[90.30519104 164.38081360]
[90.30519104 179.38081360]
[90.30519104 194.38081360]
[90.30519104 209.38081360]
[90.30519104 224.38081360]
[90.30519104 239.38081360]
[90.30519104 254.38081360]
[90.30519104 269.38079834]
[104.84507751 273.44213867]
[117.74945831 281.27664185]
[128.06074524 292.30297852]
[135.01376343 305.70288086]
[138.09255981 320.48205566]
[137.06867981 335.54373169]
[132.01806641 349.77026367]
[123.31555176 362.10592651]
[111.60688782 371.63534546]
[97.76094818 377.65136719]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 56]
[22 55]
[23 54]
[24 53]
[27 50]
[28 49]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[99 127]
[100 126]
[101 125]
[102 124]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
