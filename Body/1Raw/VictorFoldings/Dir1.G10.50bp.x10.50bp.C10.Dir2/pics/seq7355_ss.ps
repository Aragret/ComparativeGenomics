%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACAUUCGGGGGGGGGGGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCxxxxxxxxxxACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCCCCCCCCCCCACACGUUC\
) } def
/len { sequence length } bind def

/coor [
[81.46276855 377.31158447]
[67.61682892 371.29556274]
[55.90816498 361.76614380]
[47.20564270 349.43048096]
[42.15504074 335.20394897]
[41.13114929 320.14227295]
[44.20994949 305.36312866]
[51.16297150 291.96319580]
[61.47425461 280.93685913]
[74.37863159 273.10235596]
[88.91852570 269.04104614]
[88.91852570 254.04103088]
[88.91852570 239.04103088]
[88.91852570 224.04103088]
[88.91852570 209.04103088]
[88.91852570 194.04103088]
[88.91852570 179.04103088]
[88.91852570 164.04103088]
[88.91852570 149.04103088]
[88.91852570 134.04103088]
[88.91852570 119.04103851]
[83.83258820 108.74275208]
[85.29119873 99.23026276]
[90.85881042 93.74224854]
[83.13472748 80.88384247]
[75.41063690 68.02544403]
[67.68655396 55.16704178]
[59.96247101 42.30863953]
[51.45137787 29.95706558]
[42.18642807 18.16042519]
[27.57762718 12.08642769]
[25.80140114 -2.70188856]
[16.53645134 -14.49852848]
[7.27150297 -26.29516792]
[-1.99344647 -38.09180832]
[-11.25839615 -49.88844681]
[-24.18150520 -42.23023224]
[-37.99367523 -36.32439041]
[-52.45856476 -32.27198410]
[-67.32865906 -30.14235306]
[-82.34951019 -29.97193527]
[-97.26409149 -31.76364899]
[-111.81719971 -35.48683929]
[-125.75980377 -41.07778931]
[-138.85333252 -48.44083786]
[-150.87374878 -57.44998932]
[-161.61534119 -67.95108795]
[-170.89433289 -79.76444244]
[-178.55192566 -92.68791962]
[-184.45710754 -106.50037384]
[-188.50883484 -120.96545410]
[-190.63775635 -135.83564758]
[-190.80746460 -150.85650635]
[-189.01502991 -165.77101135]
[-185.29115295 -180.32392883]
[-179.69953918 -194.26626587]
[-172.33586121 -207.35945129]
[-163.32614136 -219.37942505]
[-152.82453918 -230.12052917]
[-141.01072693 -239.39895630]
[-128.08689880 -247.05593872]
[-114.27416229 -252.96046448]
[-99.80889130 -257.01150513]
[-84.93859100 -259.13970947]
[-69.91772461 -259.30871582]
[-55.00331116 -257.51556396]
[-40.45056152 -253.79100037]
[-26.50848579 -248.19871521]
[-13.41565704 -240.83442688]
[-1.39610755 -231.82412720]
[9.34449196 -221.32200623]
[18.62235451 -209.50776672]
[26.27872467 -196.58355713]
[32.18259430 -182.77053833]
[36.23293304 -168.30508423]
[38.36044312 -153.43467712]
[38.52871704 -138.41380310]
[36.73487091 -123.49948120]
[33.00960541 -108.94690704]
[27.41666222 -95.00509644]
[20.05174446 -81.91262054]
[11.04087639 -69.89349365]
[0.53824413 -59.15339661]
[9.80319309 -47.35675812]
[19.06814194 -35.56011963]
[28.33309174 -23.76347733]
[37.59804153 -11.96683788]
[51.54415131 -6.73661470]
[53.98307037 8.89547634]
[63.24802017 20.69211578]
[66.52890015 6.05531836]
[79.09451294 -2.13646126]
[93.81069183 0.76769269]
[102.32225800 13.11893559]
[99.79674530 27.90479851]
[87.66801453 36.73054886]
[72.82086945 34.58455276]
[80.54496002 47.44295502]
[88.26904297 60.30135727]
[95.99312592 73.15975952]
[103.71720886 86.01816559]
[116.41213989 94.00807953]
[131.34645081 95.41038513]
[146.28076172 96.81268311]
[160.74382019 90.39940643]
[172.69201660 99.29265594]
[187.62632751 100.69496155]
[196.52873230 98.37136841]
[202.85563660 102.28494263]
[217.75753784 103.99763489]
[232.65943909 105.71032715]
[247.25279236 99.59931946]
[259.01339722 108.73921204]
[272.42205811 99.93082428]
[287.62344360 105.05892944]
[292.95635986 120.18967438]
[284.32983398 133.71604919]
[268.36141968 135.26177979]
[257.30068970 123.64111328]
[243.77322388 129.87461853]
[230.94674683 120.61222839]
[216.04484558 118.89953613]
[201.14294434 117.18684387]
[186.22402954 115.62926483]
[171.28971863 114.22695923]
[157.89485168 120.74054718]
[144.87844849 111.74699402]
[129.94413757 110.34468842]
[115.00983429 108.94238281]
[103.91852570 119.04103851]
[103.91852570 134.04103088]
[103.91852570 149.04103088]
[103.91852570 164.04103088]
[103.91852570 179.04103088]
[103.91852570 194.04103088]
[103.91852570 209.04103088]
[103.91852570 224.04103088]
[103.91852570 239.04103088]
[103.91852570 254.04103088]
[103.91852570 269.04104614]
[118.45841217 273.10235596]
[131.36279297 280.93685913]
[141.67407227 291.96319580]
[148.62709045 305.36312866]
[151.70590210 320.14227295]
[150.68200684 335.20394897]
[145.63140869 349.43048096]
[136.92887878 361.76614380]
[125.22021484 371.29556274]
[111.37427521 377.31158447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 101]
[25 100]
[26 99]
[27 98]
[28 97]
[29 90]
[30 89]
[32 87]
[33 86]
[34 85]
[35 84]
[36 83]
[102 129]
[103 128]
[104 127]
[106 125]
[107 124]
[109 123]
[110 122]
[111 121]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
