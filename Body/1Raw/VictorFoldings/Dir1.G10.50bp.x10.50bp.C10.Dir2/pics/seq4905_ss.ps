%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACCAAUCAAGGGGGGGGGGUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAAAACUAGGAAUAGCxxxxxxxxxxGCAAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACCCCCCCCCCCUACUACUAAUCAA\
) } def
/len { sequence length } bind def

/coor [
[81.67106628 375.52084351]
[68.22840881 368.74737549]
[56.42462540 359.40631104]
[46.74307632 347.88012695]
[39.58021545 334.64086914]
[35.22935486 320.23062134]
[33.86865997 305.23950195]
[35.55385208 290.28140259]
[40.21591949 275.96881104]
[47.66395950 262.88784790]
[57.59297562 251.57417297]
[69.59638214 242.49104309]
[83.18264008 236.01043701]
[97.79541779 232.39772034]
[97.19527435 217.40972900]
[96.59512329 202.42173767]
[95.99497986 187.43374634]
[95.39483643 172.44575500]
[94.79469299 157.45776367]
[94.19454956 142.46977234]
[93.59440613 127.48178864]
[92.99426270 112.49379730]
[85.68752289 100.57309723]
[92.01774597 88.10634613]
[91.41760254 73.11835480]
[90.81745911 58.13036346]
[90.21731567 43.14237595]
[75.21601868 42.81874847]
[60.26309586 41.57223892]
[45.41527176 39.40757370]
[30.72887039 36.33296967]
[16.25959778 32.36008453]
[2.06234550 27.50398827]
[-11.80903339 21.78310585]
[-25.30191803 15.21913624]
[-38.36512756 7.83697939]
[-50.94910431 -0.33536085]
[-63.00611496 -9.26688480]
[-74.49042511 -18.92370987]
[-85.35846710 -29.26920700]
[-95.56901550 -40.26412964]
[-105.08333588 -51.86677170]
[-113.86534119 -64.03311920]
[-121.88172150 -76.71702576]
[-129.10205078 -89.87036133]
[-135.49896240 -103.44325256]
[-141.04817200 -117.38419342]
[-145.72863770 -131.64030457]
[-149.52261353 -146.15751648]
[-152.41569519 -160.88075256]
[-154.39689636 -175.75418091]
[-155.45872498 -190.72134399]
[-155.59715271 -205.72549438]
[-154.81163025 -220.70970154]
[-153.10516357 -235.61714172]
[-150.48420715 -250.39125061]
[-146.95872498 -264.97598267]
[-142.54206848 -279.31604004]
[-137.25100708 -293.35696411]
[-131.10559082 -307.04556274]
[-124.12915802 -320.32989502]
[-116.34815216 -333.15951538]
[-107.79210663 -345.48580933]
[-98.49346161 -357.26202393]
[-88.48749542 -368.44345093]
[-77.81217194 -378.98770142]
[-66.50798035 -388.85476685]
[-54.61780167 -398.00720215]
[-42.18674088 -406.41030884]
[-29.26195145 -414.03222656]
[-15.89246368 -420.84402466]
[-2.12899208 -426.81982422]
[11.97625256 -431.93704224]
[26.36976433 -436.17617798]
[40.99694443 -439.52124023]
[55.80230331 -441.95947266]
[70.72968292 -443.48162842]
[85.72245789 -444.08197021]
[100.72374725 -443.75817871]
[115.67665863 -442.51153564]
[130.52445984 -440.34671021]
[145.21083069 -437.27197266]
[159.68006897 -433.29895020]
[173.87727356 -428.44271851]
[187.74859619 -422.72167969]
[201.24140930 -416.15759277]
[214.30455017 -408.77529907]
[226.88844299 -400.60284424]
[238.94537354 -391.67120361]
[250.42958069 -382.01425171]
[261.29751587 -371.66864014]
[271.50796509 -360.67361450]
[281.02218628 -349.07089233]
[289.80407715 -336.90444946]
[297.82031250 -324.22048950]
[305.04052734 -311.06707764]
[311.43728638 -297.49411011]
[316.98635864 -283.55313110]
[321.66668701 -269.29696655]
[325.46051025 -254.77970886]
[328.35345459 -240.05644226]
[330.33453369 -225.18301392]
[331.39620972 -210.21582031]
[331.53448486 -195.21166992]
[330.74880981 -180.22747803]
[329.04220581 -165.32005310]
[326.42111206 -150.54597473]
[322.89547729 -135.96127319]
[318.47866821 -121.62126923]
[313.18746948 -107.58037567]
[307.04193115 -93.89183807]
[300.06536865 -80.60759735]
[292.28424072 -67.77803040]
[283.72805786 -55.45181656]
[274.42929077 -43.67570877]
[264.42321777 -32.49437714]
[253.74780273 -21.95023918]
[242.44351196 -12.08329010]
[230.55323792 -2.93096042]
[218.12210083 5.47203255]
[205.19723511 13.09381294]
[191.82766724 19.90546799]
[178.06414795 25.88115883]
[163.95884705 30.99821854]
[149.56529236 35.23723602]
[134.93807983 38.58212662]
[120.13269806 41.02021027]
[105.20530701 42.54223251]
[105.80545044 57.53022003]
[106.40559387 72.51821136]
[107.00573730 87.50620270]
[114.31247711 99.42690277]
[107.98225403 111.89365387]
[108.58239746 126.88164520]
[109.18254089 141.86962891]
[109.78268433 156.85762024]
[110.38282776 171.84561157]
[110.98297119 186.83360291]
[111.58311462 201.82159424]
[112.18325806 216.80958557]
[112.78340149 231.79757690]
[127.63825226 234.23036194]
[141.69917297 239.60392761]
[154.39039612 247.69824219]
[165.19221497 258.18182373]
[173.66229248 270.62539673]
[179.45379639 284.51940918]
[182.32957458 299.29489136]
[182.17184448 314.34680176]
[178.98709106 329.05877686]
[172.90571594 342.82836914]
[164.17672729 355.09173584]
[153.15760803 365.34667969]
[140.29956055 373.17324829]
[126.12911987 378.25100708]
[111.22656250 380.37197876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[26 129]
[27 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
