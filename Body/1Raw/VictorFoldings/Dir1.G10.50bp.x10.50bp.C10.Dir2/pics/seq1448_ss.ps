%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAACAAAGGGGGGGGGGACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGxxxxxxxxxxUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUAUCCCCCCCCCCCCAAACAACAAA\
) } def
/len { sequence length } bind def

/coor [
[83.39231873 397.87466431]
[70.83409882 389.52349854]
[60.74787140 378.31106567]
[53.76767731 364.94216919]
[50.33229446 350.25717163]
[50.65767288 335.17919922]
[54.72335815 320.65609741]
[62.27377701 307.60073853]
[72.83430481 296.83383179]
[85.74109650 289.03222656]
[100.18283081 284.68624878]
[99.55885315 269.69924927]
[98.93487549 254.71223450]
[98.31089783 239.72521973]
[97.68692017 224.73818970]
[97.06294250 209.75117493]
[96.43896484 194.76416016]
[95.81498718 179.77714539]
[95.19100952 164.79013062]
[94.56703186 149.80311584]
[93.94305420 134.81610107]
[82.59027100 130.75303650]
[73.26438141 123.10960388]
[67.05111694 112.77570343]
[52.23336029 115.10680389]
[37.41559982 117.43791199]
[22.59784317 119.76901245]
[7.78008509 122.10012054]
[-0.46271786 132.07559204]
[-12.89803600 133.68238831]
[-22.75276566 126.59778595]
[-37.61581421 128.62011719]
[-50.24442673 139.08197021]
[-65.52272034 133.12329102]
[-67.73368835 116.87386322]
[-54.60288239 107.04971313]
[-39.63814545 113.75708008]
[-24.77510071 111.73474121]
[-11.53883362 100.25427246]
[5.44898081 107.28235626]
[20.26673889 104.95125580]
[35.08449554 102.62015533]
[49.90225601 100.28904724]
[64.72001648 97.95794678]
[66.56920624 88.54446411]
[70.88205719 79.97518921]
[77.34074402 72.88163757]
[85.46929169 67.78656006]
[94.66867065 65.06542969]
[95.60430145 50.09463501]
[96.53992462 35.12384415]
[86.47090149 46.24205780]
[72.23451233 50.96701813]
[57.51580811 48.07568359]
[46.12468338 38.31647110]
[41.00969315 24.21551704]
[43.49483871 9.42281342]
[52.93684769 -2.23259234]
[66.89168549 -7.73373556]
[81.74717712 -5.65666151]
[93.65803528 3.46098542]
[99.54115295 17.25902557]
[103.54888916 2.80433679]
[107.55663300 -11.65035152]
[111.56436920 -26.10503960]
[98.01889801 -32.64415359]
[85.85884094 -41.49699402]
[75.47509003 -52.37897110]
[67.20143127 -64.94027710]
[61.30384445 -78.77712250]
[57.97190475 -93.44470215]
[57.31271744 -108.47151947]
[59.34747696 -123.37452698]
[64.01077271 -137.67463684]
[71.15270233 -150.91218567]
[80.54367828 -162.66163635]
[91.88181305 -172.54527283]
[104.80265045 -180.24539185]
[118.89082336 -185.51446533]
[133.69346619 -188.18312073]
[148.73472595 -188.16555786]
[163.53108215 -185.46234131]
[177.60691833 -180.16038513]
[190.50973511 -172.43009949]
[201.82475281 -162.52001953]
[211.18826294 -150.74867249]
[218.29925537 -137.49447632]
[222.92913818 -123.18350983]
[224.92909241 -108.27579498]
[224.23481750 -93.25055695]
[220.86863708 -78.59079742]
[214.93873596 -64.76776123]
[206.63577271 -52.22581482]
[196.22663879 -41.36811447]
[184.04592896 -32.54370117]
[170.48522949 -26.03623772]
[155.98043823 -22.05491447]
[140.99784851 -20.72771454]
[126.01905823 -22.09729958]
[122.01132202 -7.64261150]
[118.00357819 6.81207705]
[113.99583435 21.26676559]
[111.51071930 36.05947113]
[110.57508850 51.03026581]
[109.63946533 66.00105286]
[127.33201599 77.59891510]
[135.22987366 97.22443390]
[150.09291077 99.24676514]
[164.95596313 101.26909637]
[172.58317566 88.12017822]
[184.66470337 78.89493561]
[199.35820007 75.00016022]
[214.42303467 77.02976990]
[227.56192017 84.67426300]
[236.77125549 96.76792145]
[240.64669800 111.46653748]
[238.59727478 126.52868652]
[230.93550110 139.65748596]
[218.82974243 148.85092163]
[204.12603760 152.70703125]
[189.06660461 150.63778687]
[175.94787598 142.95875549]
[166.77038574 130.84091187]
[162.93362427 116.13214874]
[148.07058716 114.10980988]
[133.20753479 112.08747864]
[123.79177094 126.13042450]
[108.93006897 134.19212341]
[109.55404663 149.17913818]
[110.17802429 164.16615295]
[110.80200195 179.15316772]
[111.42597961 194.14018250]
[112.04995728 209.12719727]
[112.67393494 224.11422729]
[113.29791260 239.10124207]
[113.92189026 254.08825684]
[114.54586792 269.07525635]
[115.16984558 284.06228638]
[129.92285156 287.19271851]
[143.43348694 293.89447021]
[154.85246277 303.74627686]
[163.46197510 316.12881470]
[168.72082520 330.26370239]
[170.29843140 345.26242065]
[168.09562683 360.18215942]
[162.25088501 374.08502197]
[153.13159180 386.09710693]
[141.31101990 395.46325684]
[127.53221893 401.59475708]
[112.66131592 404.10614014]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[24 44]
[25 43]
[26 42]
[27 41]
[28 40]
[31 38]
[32 37]
[49 105]
[50 104]
[51 103]
[62 102]
[63 101]
[64 100]
[65 99]
[107 126]
[108 125]
[109 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
