%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUCCCCUAGGGGGGGGGGAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUxxxxxxxxxxGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGCCCCCCCCCCAUUUCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[74.45660400 437.89291382]
[60.61066437 431.87689209]
[48.90200043 422.34747314]
[40.19947815 410.01181030]
[35.14887619 395.78527832]
[34.12498474 380.72360229]
[37.20378113 365.94445801]
[44.15680313 352.54452515]
[54.46809006 341.51818848]
[67.37246704 333.68368530]
[81.91235352 329.62237549]
[81.91235352 314.62237549]
[81.91235352 299.62237549]
[81.91235352 284.62237549]
[81.91235352 269.62237549]
[81.91235352 254.62236023]
[81.91235352 239.62236023]
[81.91235352 224.62236023]
[81.91235352 209.62236023]
[81.91235352 194.62236023]
[75.91893768 190.11360168]
[62.11612701 195.98576355]
[63.93210983 181.09606934]
[57.93869019 176.58731079]
[43.52647400 180.74519348]
[29.11425972 184.90307617]
[14.70204353 189.06097412]
[0.28982738 193.21885681]
[-8.69278908 206.51141357]
[-24.69661713 207.63261414]
[-35.44488907 195.72235107]
[-32.69244766 179.91717529]
[-18.55073547 172.34146118]
[-3.86806011 178.80664062]
[10.54415607 174.64875793]
[24.95637131 170.49085999]
[39.36858749 166.33297729]
[53.78080368 162.17509460]
[64.22061920 151.40428162]
[67.92678070 136.86933899]
[71.63294220 122.33441162]
[65.00444031 108.87844086]
[51.22205734 102.95848083]
[37.43967819 97.03851318]
[22.85575104 103.12823486]
[8.26923466 97.04472351]
[2.33405042 82.39722443]
[8.57143784 67.87584686]
[23.28086472 62.09585190]
[37.73548889 68.48641968]
[43.35964203 83.25613403]
[57.14202118 89.17610168]
[70.92440033 95.09606171]
[76.99686432 80.89736176]
[89.55277252 71.54178619]
[105.32316589 69.73480988]
[108.11549377 54.99700546]
[110.90781403 40.25920105]
[104.28877258 29.13975334]
[106.96124268 16.88916779]
[116.94943237 9.99399090]
[120.04775238 -4.68253469]
[123.14607239 -19.35906029]
[121.47759247 -24.44194984]
[121.92459869 -29.16979980]
[123.98439789 -32.78351212]
[126.92267609 -34.84118271]
[130.93041992 -49.29587173]
[134.93815613 -63.75055695]
[123.43797302 -54.12009048]
[109.04647827 -49.89104462]
[94.16448975 -51.76891708]
[81.27465820 -59.44043732]
[72.52729797 -71.62582397]
[69.38166046 -86.29228210]
[72.36251068 -100.99311829]
[80.97257996 -113.27590179]
[93.77551270 -121.09158325]
[108.63549805 -123.13633728]
[123.07353973 -119.06905365]
[134.68106079 -109.56825256]
[141.52168274 -96.21886444]
[142.45440674 -81.24928284]
[150.17848206 -94.10768890]
[157.90257263 -106.96608734]
[165.62666321 -119.82449341]
[165.36981201 -136.22163391]
[179.57875061 -144.40930176]
[193.63653564 -135.96475220]
[193.08172607 -119.57498932]
[178.48506165 -112.10041046]
[170.76097107 -99.24200439]
[163.03689575 -86.38360596]
[155.31280518 -73.52519989]
[149.39283752 -59.74281693]
[145.38510132 -45.28813171]
[141.37736511 -30.83344078]
[137.82260132 -16.26073837]
[134.72427368 -1.58421314]
[131.62596130 13.09231281]
[137.98147583 29.42042923]
[125.64562225 43.05152512]
[122.85330200 57.78932953]
[120.06097412 72.52713776]
[129.92669678 83.82614136]
[144.90641785 83.04629517]
[159.88612366 82.26644897]
[168.35708618 78.67552185]
[175.18495178 81.62949371]
[190.17764282 81.16145325]
[203.82432556 72.06750488]
[218.40129089 79.58045197]
[218.91299438 95.97161102]
[204.83303833 104.37916565]
[190.64569092 96.15414429]
[175.65298462 96.62218475]
[160.66596985 97.24616241]
[145.68626404 98.02600861]
[130.70654297 98.80585480]
[123.94054413 118.59743500]
[106.26345062 129.23738098]
[86.16787720 126.04056549]
[82.46171570 140.57550049]
[78.75555420 155.11044312]
[84.15546417 157.07189941]
[89.24900055 160.52806091]
[93.62863159 165.42367554]
[96.90021515 171.59457397]
[98.71148682 178.77191162]
[98.77907562 186.59355164]
[96.91235352 194.62236023]
[96.91235352 209.62236023]
[96.91235352 224.62236023]
[96.91235352 239.62236023]
[96.91235352 254.62236023]
[96.91235352 269.62237549]
[96.91235352 284.62237549]
[96.91235352 299.62237549]
[96.91235352 314.62237549]
[96.91235352 329.62237549]
[111.45223999 333.68368530]
[124.35662842 341.51818848]
[134.66790771 352.54452515]
[141.62092590 365.94445801]
[144.69972229 380.72360229]
[143.67584229 395.78527832]
[138.62524414 410.01181030]
[129.92271423 422.34747314]
[118.21405029 431.87689209]
[104.36811066 437.89291382]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[39 124]
[40 123]
[41 122]
[42 53]
[43 52]
[44 51]
[56 104]
[57 103]
[58 102]
[61 100]
[62 99]
[63 98]
[67 97]
[68 96]
[69 95]
[83 94]
[84 93]
[85 92]
[86 91]
[105 119]
[106 118]
[107 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
