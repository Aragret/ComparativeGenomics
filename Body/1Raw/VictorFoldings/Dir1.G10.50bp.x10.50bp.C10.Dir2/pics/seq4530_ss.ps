%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUUAUUUGGGGGGGGGGCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGxxxxxxxxxxAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCCCCCCCCCCCUCAUUU\
) } def
/len { sequence length } bind def

/coor [
[86.76300049 435.83523560]
[72.91706085 429.81921387]
[61.20839691 420.28979492]
[52.50587463 407.95413208]
[47.45527267 393.72760010]
[46.43138123 378.66592407]
[49.51017761 363.88677979]
[56.46319962 350.48684692]
[66.77448273 339.46051025]
[79.67886353 331.62600708]
[94.21875000 327.56469727]
[94.21875000 312.56469727]
[94.21875000 297.56469727]
[94.21875000 282.56469727]
[94.21875000 267.56469727]
[94.21875000 252.56469727]
[94.21875000 237.56469727]
[94.21875000 222.56469727]
[94.21875000 207.56469727]
[94.21875000 192.56469727]
[94.21875000 177.56469727]
[80.52484894 165.48684692]
[79.93214417 146.91950989]
[93.27635193 133.54298401]
[92.65237427 118.55596161]
[85.94133759 111.63269043]
[83.75671387 103.10254669]
[85.89742279 95.42360687]
[91.01651764 90.44332886]
[84.66938782 76.85237885]
[78.32225800 63.26142883]
[71.97512817 49.67047882]
[65.62799835 36.07952499]
[60.35542679 31.91929817]
[58.32941818 26.52239227]
[59.31271744 21.78861618]
[53.53644562 7.94539833]
[47.76017380 -5.89781952]
[41.98390198 -19.74103737]
[36.20763016 -33.58425522]
[21.86605263 -39.66347885]
[16.20529366 -53.78475571]
[22.08928680 -67.41979218]
[16.31301498 -81.26300812]
[10.53674221 -95.10622406]
[-0.00701437 -95.07173157]
[-10.15437412 -99.69178772]
[-17.85102272 -108.57795715]
[-21.32311821 -120.44313812]
[-19.46359444 -133.27912903]
[-29.44632149 -144.47488403]
[-39.42904663 -155.67065430]
[-49.41177368 -166.86642456]
[-59.39450073 -178.06217957]
[-69.37722778 -189.25794983]
[-85.24734497 -191.60717773]
[-93.18059540 -205.55145264]
[-87.09126282 -220.39395142]
[-71.65055847 -224.74876404]
[-58.70327759 -215.27523804]
[-58.18146133 -199.24067688]
[-48.19873428 -188.04490662]
[-38.21600723 -176.84915161]
[-28.23328209 -165.65338135]
[-18.25055504 -154.45761108]
[-8.26782894 -143.26185608]
[5.80368996 -148.45726013]
[6.11574650 -163.45402527]
[6.42780256 -178.45077515]
[-7.37054157 -184.89480591]
[-17.35002899 -196.39826965]
[-21.78165054 -210.96812439]
[-19.89760208 -226.08004761]
[-12.02430820 -239.11581421]
[0.47413668 -247.81689453]
[15.43230152 -250.67576599]
[30.25859451 -247.19712830]
[42.38426971 -237.98367310]
[49.70848083 -224.63166809]
[50.96226501 -209.45445251]
[45.92839432 -195.08155823]
[35.47901917 -184.00318909]
[21.42455673 -178.13871765]
[21.11249924 -163.14196777]
[20.80044365 -148.14520264]
[36.06553650 -123.50961304]
[24.37996101 -100.88249969]
[30.15623283 -87.03928375]
[35.93250656 -73.19606781]
[49.76286316 -67.78710938]
[55.81802750 -53.83040619]
[50.05084610 -39.36052704]
[55.82711792 -25.51730919]
[61.60338974 -11.67409229]
[67.37966156 2.16912580]
[73.15593719 16.01234436]
[79.21894836 29.73239708]
[85.56607819 43.32334900]
[91.91320801 56.91429901]
[98.26033783 70.50524902]
[104.60746765 84.09619904]
[117.38482666 91.95362854]
[132.37751770 91.48558807]
[147.37022400 91.01753998]
[162.36291504 90.54949951]
[177.35560608 90.08145905]
[185.89942932 86.66753387]
[192.66436768 89.76290894]
[207.66355896 89.60687256]
[222.66275024 89.45083618]
[237.66192627 89.29479980]
[253.43731689 83.08402252]
[263.77243042 96.52357483]
[253.71914673 110.17523193]
[237.81797791 104.29399109]
[222.81878662 104.45002747]
[207.81959534 104.60606384]
[192.82040405 104.76210022]
[177.82365417 105.07415771]
[162.83094788 105.54219818]
[147.83825684 106.01023865]
[132.84556580 106.47827911]
[117.85286713 106.94631958]
[107.63938904 117.93198395]
[108.26336670 132.91900635]
[118.47335815 139.15830994]
[124.31735992 149.46154785]
[124.43048096 161.18592834]
[118.90093994 171.38845825]
[109.21875000 177.56469727]
[109.21875000 192.56469727]
[109.21875000 207.56469727]
[109.21875000 222.56469727]
[109.21875000 237.56469727]
[109.21875000 252.56469727]
[109.21875000 267.56469727]
[109.21875000 282.56469727]
[109.21875000 297.56469727]
[109.21875000 312.56469727]
[109.21875000 327.56469727]
[123.75863647 331.62600708]
[136.66302490 339.46051025]
[146.97430420 350.48684692]
[153.92732239 363.88677979]
[157.00611877 378.66592407]
[155.98223877 393.72760010]
[150.93162537 407.95413208]
[142.22911072 420.28979492]
[130.52044678 429.81921387]
[116.67450714 435.83523560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 125]
[25 124]
[29 101]
[30 100]
[31 99]
[32 98]
[33 97]
[36 96]
[37 95]
[38 94]
[39 93]
[40 92]
[43 89]
[44 88]
[45 87]
[50 66]
[51 65]
[52 64]
[53 63]
[54 62]
[55 61]
[67 85]
[68 84]
[69 83]
[102 123]
[103 122]
[104 121]
[105 120]
[106 119]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
