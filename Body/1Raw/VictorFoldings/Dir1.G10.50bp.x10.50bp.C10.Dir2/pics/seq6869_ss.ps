%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUGAGCUAUGGGGGGGGGGGAUAUCAAUUGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUAxxxxxxxxxxCAACAAAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCCCCCCCCCCCGUCUGAACUAU\
) } def
/len { sequence length } bind def

/coor [
[84.03084564 488.33731079]
[70.54196930 481.60577393]
[59.05646896 471.84121704]
[50.24209976 459.61132812]
[44.61131668 445.62713623]
[42.49148941 430.70166016]
[44.00585938 415.70263672]
[49.06638336 401.50213623]
[57.37884521 388.92572021]
[68.45997620 378.70455933]
[81.66553497 371.43292236]
[96.22776031 367.53356934]
[95.91977692 352.53671265]
[95.61180115 337.53988647]
[95.30382538 322.54302979]
[94.99584961 307.54620361]
[94.68786621 292.54937744]
[94.37989044 277.55252075]
[94.07191467 262.55569458]
[93.76393890 247.55885315]
[93.45595551 232.56201172]
[93.14797974 217.56517029]
[82.67066956 210.00355530]
[78.41630554 197.59672546]
[82.15818787 184.82255554]
[92.73973083 176.42967224]
[92.73973083 161.42967224]
[85.00243378 148.70240784]
[92.73973083 134.90223694]
[92.73973083 119.90222931]
[92.73973083 104.90222931]
[90.71220398 102.53531647]
[89.52458191 99.36089325]
[89.48390198 95.69757080]
[90.77175140 91.97507477]
[93.40612793 88.68426514]
[94.63673401 73.73483276]
[95.86734772 58.78539658]
[97.09796143 43.83596039]
[94.67273712 34.96386719]
[98.51040649 28.59326935]
[100.04769897 13.67225266]
[101.58499146 -1.24876404]
[88.30860138 5.73246241]
[74.48955536 -0.10139758]
[70.23239136 -14.48460197]
[78.64996338 -26.90009308]
[93.58731842 -28.26961136]
[104.12198639 -17.59235001]
[107.18038177 -32.27724838]
[110.23877716 -46.96214294]
[105.47776794 -62.04999924]
[115.64753723 -72.93233490]
[118.70593262 -87.61722565]
[121.76432800 -102.30212402]
[124.82272339 -116.98702240]
[110.59561157 -121.79811859]
[97.05215454 -128.28906250]
[84.38987732 -136.36518860]
[72.79341125 -145.90873718]
[62.43187714 -156.78054810]
[53.45637894 -168.82203674]
[45.99779892 -181.85765076]
[40.16490936 -195.69725037]
[36.04277039 -210.13903809]
[33.69149399 -224.97241211]
[33.14537048 -239.98104858]
[34.41236496 -254.94607544]
[37.47399521 -269.64926147]
[42.28561783 -283.87619019]
[48.77706528 -297.41940308]
[56.85367203 -310.08139038]
[66.39765930 -321.67749023]
[77.26984406 -332.03863525]
[89.31168365 -341.01367188]
[102.34756470 -348.47177124]
[116.18739319 -354.30413818]
[130.62933350 -358.42572021]
[145.46279907 -360.77645874]
[160.47145081 -361.32202148]
[175.43643188 -360.05447388]
[190.13951111 -356.99227905]
[204.36625671 -352.18014526]
[217.90922546 -345.68817139]
[230.57090759 -337.61108398]
[242.16665649 -328.06668091]
[252.52737427 -317.19409180]
[261.50198364 -305.15191650]
[268.95956421 -292.11578369]
[274.79144287 -278.27572632]
[278.91247559 -263.83361816]
[281.26266479 -249.00007629]
[281.80764771 -233.99140930]
[280.53955078 -219.02647400]
[277.47680664 -204.32351685]
[272.66412354 -190.09693909]
[266.17166138 -176.55421448]
[258.09411621 -163.89283752]
[248.54925537 -152.29743958]
[237.67630005 -141.93713379]
[225.63378906 -132.96298218]
[212.59735107 -125.50586700]
[198.75709534 -119.67453003]
[184.31483459 -115.55400848]
[169.48120117 -113.20439911]
[154.47250366 -112.65995789]
[139.50761414 -113.92862701]
[136.44921875 -99.24372864]
[133.39082336 -84.55883026]
[130.33242798 -69.87393188]
[135.31219482 -55.83644104]
[124.92367554 -43.90374756]
[121.86528015 -29.21885109]
[118.80688477 -14.53395367]
[116.50600433 0.28852841]
[114.96871185 15.20954514]
[113.43141937 30.13056183]
[112.04739380 45.06657410]
[110.81678009 60.01601028]
[109.58617401 74.96544647]
[108.35556030 89.91487885]
[107.73973083 104.90222931]
[107.73973083 119.90222931]
[107.73973083 134.90223694]
[115.47703552 148.70240784]
[107.73973083 161.42967224]
[107.73973083 176.42967224]
[120.32461548 188.53785706]
[120.29051971 205.66474915]
[108.14482117 217.25720215]
[108.45279694 232.25402832]
[108.76077271 247.25086975]
[109.06874847 262.24771118]
[109.37673187 277.24453735]
[109.68470764 292.24139404]
[109.99268341 307.23822021]
[110.30065918 322.23507690]
[110.60864258 337.23190308]
[110.91661835 352.22872925]
[111.22459412 367.22558594]
[125.93463135 370.52380371]
[139.42758179 377.24716187]
[150.91900635 387.00476074]
[159.74078369 399.22930908]
[165.38005066 413.21008301]
[167.50892639 428.13427734]
[166.00364685 443.13418579]
[160.95173645 457.33776855]
[152.64689636 469.91921997]
[141.57196045 480.14709473]
[128.37081909 487.42672729]
[113.81096649 491.33493042]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[26 127]
[27 126]
[29 124]
[30 123]
[31 122]
[36 121]
[37 120]
[38 119]
[39 118]
[41 117]
[42 116]
[43 115]
[49 114]
[50 113]
[51 112]
[53 110]
[54 109]
[55 108]
[56 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
