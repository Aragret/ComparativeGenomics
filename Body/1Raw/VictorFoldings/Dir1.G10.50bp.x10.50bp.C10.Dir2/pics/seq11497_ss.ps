%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUUUAUCUGGGGGGGGGGGCCUCUUCCUACACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACxxxxxxxxxxGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCUCACACGCCCCCCCCCCAUUCUUUACCU\
) } def
/len { sequence length } bind def

/coor [
[61.87079620 387.38668823]
[48.38191605 380.65515137]
[36.89641571 370.89059448]
[28.08204842 358.66070557]
[22.45126534 344.67651367]
[20.33143806 329.75103760]
[21.84580612 314.75204468]
[26.90633011 300.55151367]
[35.21879578 287.97509766]
[46.29992676 277.75393677]
[59.50548172 270.48229980]
[74.06770325 266.58294678]
[73.75972748 251.58610535]
[73.45175171 236.58926392]
[73.14376831 221.59242249]
[72.83579254 206.59558105]
[72.52781677 191.59875488]
[72.21984100 176.60191345]
[71.91186523 161.60507202]
[71.60388184 146.60823059]
[60.11321640 136.96641541]
[45.29073334 139.26728821]
[30.46825218 141.56817627]
[15.64577103 143.86904907]
[0.82328880 146.16992188]
[-13.99919319 148.47079468]
[-22.26077843 158.42819214]
[-34.69725800 160.01101685]
[-44.53763580 152.90965271]
[-59.40423203 154.90571594]
[-65.85041046 168.92178345]
[-78.86322784 177.20852661]
[-94.29034424 177.12167358]
[-107.20903015 168.68891907]
[-113.49697113 154.60115051]
[-111.14770508 139.35371399]
[-100.91088867 127.81199646]
[-86.05303955 123.65894318]
[-71.31524658 128.21975708]
[-61.40029144 140.03910828]
[-46.53369141 138.04306030]
[-33.27527618 126.58622742]
[-16.30006790 133.64831543]
[-1.47758603 131.34744263]
[13.34489632 129.04656982]
[28.16737747 126.74568939]
[42.98986053 124.44481659]
[57.81234360 122.14393616]
[43.58617020 117.38831329]
[35.24776459 104.91950989]
[36.28661346 89.95552826]
[46.26797867 78.75854492]
[61.01481628 76.01432037]
[74.35581970 82.87126923]
[80.70798492 96.45986176]
[77.41238403 111.09458160]
[87.05419922 99.60391235]
[91.89401245 85.40615845]
[91.27819061 70.41880798]
[90.66236115 55.43145370]
[89.89270782 40.45121002]
[88.96929169 25.47966194]
[88.04587555 10.50811195]
[87.12246704 -4.46343803]
[72.36013794 -7.62195969]
[58.99793243 -14.64720345]
[48.02741241 -25.01785088]
[40.26266861 -37.96432877]
[36.27988815 -52.52592468]
[36.37462616 -67.62207031]
[40.53985214 -82.13253021]
[48.46647644 -94.98053741]
[59.56629181 -105.21267700]
[73.01561737 -112.06965637]
[87.81642151 -115.04264832]
[102.87039185 -113.91104126]
[117.06042480 -108.75878906]
[129.33351135 -99.96823883]
[138.77893066 -88.19171143]
[144.69575500 -74.30308533]
[146.64491272 -59.33300400]
[144.48176575 -44.39234161]
[138.36685181 -30.58979607]
[128.75390625 -18.94960594]
[116.35630798 -10.33555031]
[102.09401703 -5.38685131]
[103.01742554 9.58469868]
[103.94084167 24.55624771]
[104.86425781 39.52779770]
[108.43714142 46.05057907]
[105.64971924 54.81562805]
[106.26554108 69.80297852]
[106.88137054 84.79033661]
[118.56757355 94.19419098]
[133.33969116 91.58946991]
[148.11181641 88.98474884]
[162.88392639 86.38002014]
[177.65603638 83.77529907]
[191.44474792 71.61379242]
[207.69065857 78.17999268]
[222.40618896 75.27251434]
[236.91481018 71.46466064]
[251.16149902 66.77085876]
[265.40820312 62.07705688]
[279.65487671 57.38325500]
[292.80654907 46.68418503]
[306.72824097 56.36007690]
[301.28439331 72.41625977]
[284.34869385 71.62995148]
[270.10198975 76.32374573]
[255.85530090 81.01754761]
[241.60861206 85.71134949]
[254.26376343 93.76411438]
[257.70330811 108.36444855]
[249.97357178 121.21945953]
[235.46502686 125.02760315]
[222.41839600 117.62587738]
[218.24407959 103.21841431]
[225.31365967 89.98803711]
[210.59812927 92.89551544]
[203.57533264 102.79209900]
[191.29328918 105.30663300]
[180.26075745 98.54741669]
[165.48864746 101.15213776]
[150.71653748 103.75685883]
[135.94441223 106.36158752]
[121.17230225 108.96630859]
[112.27645874 113.77051544]
[103.92250824 113.33912659]
[98.54486847 109.24572754]
[88.90305328 120.73638916]
[86.60072327 146.30026245]
[86.90869904 161.29708862]
[87.21667480 176.29393005]
[87.52465820 191.29077148]
[87.83263397 206.28761292]
[88.14060974 221.28443909]
[88.44858551 236.28128052]
[88.75656891 251.27812195]
[89.06454468 266.27496338]
[103.77458191 269.57318115]
[117.26753998 276.29653931]
[128.75895691 286.05413818]
[137.58073425 298.27868652]
[143.22000122 312.25946045]
[145.34887695 327.18365479]
[143.84359741 342.18356323]
[138.79168701 356.38714600]
[130.48684692 368.96859741]
[119.41191101 379.19647217]
[106.21076965 386.47613525]
[91.65090942 390.38430786]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 48]
[22 47]
[23 46]
[24 45]
[25 44]
[26 43]
[29 41]
[30 40]
[56 131]
[57 130]
[58 93]
[59 92]
[60 91]
[61 89]
[62 88]
[63 87]
[64 86]
[94 127]
[95 126]
[96 125]
[97 124]
[98 123]
[100 120]
[101 119]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
