%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAAACCAGGGGGGGGGGCUUUCACCGCUACACGACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCxxxxxxxxxxACACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUCCCCCCCCCCAACCAAAUCA\
) } def
/len { sequence length } bind def

/coor [
[80.67892456 332.70291138]
[68.12069702 324.35174561]
[58.03447723 313.13931274]
[51.05428314 299.77038574]
[47.61890030 285.08541870]
[47.94427490 270.00744629]
[52.00996017 255.48432922]
[59.56037903 242.42898560]
[70.12091064 231.66209412]
[83.02770233 223.86045837]
[97.46942902 219.51451111]
[96.84545898 204.52748108]
[96.22148132 189.54046631]
[95.59750366 174.55345154]
[94.97352600 159.56643677]
[94.34954834 144.57942200]
[93.72557068 129.59240723]
[93.10159302 114.60539246]
[87.61456299 100.64500427]
[77.86690521 89.24398041]
[68.11925507 77.84295654]
[58.37160492 66.44194031]
[45.84564209 58.18964767]
[31.52304459 53.73283386]
[17.20044708 49.27601624]
[2.87784934 44.81920242]
[-10.98950291 51.91386795]
[-25.45116425 47.18999481]
[-32.12938690 33.92587280]
[-46.45198441 29.46905518]
[-55.45834732 38.24412537]
[-67.28108978 42.30899429]
[-79.63544464 40.94352341]
[-90.16172791 34.47074890]
[-96.87600708 24.18322182]
[-98.54394531 12.08534813]
[-112.66874695 7.03659153]
[-126.79355621 1.98783541]
[-140.91835022 -3.06092095]
[-155.04316711 -8.10967731]
[-170.64239502 -5.46873522]
[-180.02282715 -17.03838348]
[-194.14762878 -22.08714104]
[-209.20497131 -16.55038071]
[-222.84661865 -24.99344063]
[-224.60784912 -40.93952560]
[-213.13758850 -52.15616608]
[-197.23486328 -50.03891373]
[-189.09886169 -36.21194458]
[-174.97406006 -31.16318703]
[-160.38513184 -34.16524887]
[-149.99440002 -22.23447990]
[-135.86959839 -17.18572426]
[-121.74479675 -12.13696766]
[-107.61999512 -7.08821106]
[-93.49519348 -2.03945494]
[-79.45040894 -12.66075134]
[-61.68562698 -12.77504063]
[-47.25341415 -2.14989805]
[-41.99516678 15.14645767]
[-27.67256927 19.60327339]
[-14.64732456 12.47035217]
[-0.05868480 16.78616524]
[7.33466530 30.49660492]
[21.65726280 34.95341873]
[35.97985840 39.41023636]
[50.30245590 43.86705017]
[40.45330048 32.55360413]
[33.21260834 19.41692162]
[28.90631866 5.04834986]
[27.72827339 -9.90531921]
[29.73150063 -24.77095222]
[34.82583237 -38.87938309]
[42.78194046 -51.59552765]
[53.24169540 -62.34696960]
[65.73425293 -70.64974976]
[79.69725800 -76.13011169]
[94.50218201 -78.54135895]
[109.48259735 -77.77496338]
[123.96414948 -73.86541748]
[137.29496765 -66.98870087]
[148.87496948 -57.45436859]
[158.18290710 -45.69160843]
[164.79975891 -32.22991180]
[168.42767334 -17.67525101]
[168.90336609 -2.68279505]
[166.20539856 12.07257652]
[160.45524597 25.92666054]
[151.91171265 38.25582123]
[140.95941162 48.50506592]
[128.09133911 56.21303177]
[113.88674927 61.03274918]
[98.98506165 62.74726105]
[84.05705261 61.27939224]
[69.77262115 56.69428635]
[79.52027893 68.09530640]
[89.26792908 79.49633026]
[99.01557922 90.89734650]
[108.99819183 78.83580780]
[129.12426758 77.44060516]
[144.12345886 77.59664154]
[158.00337219 70.00331879]
[170.64945984 77.87259674]
[185.64865112 78.02863312]
[199.52856445 70.43530273]
[212.17466736 78.30458069]
[227.17385864 78.46061707]
[242.17303467 78.61665344]
[249.92126465 65.35540771]
[263.26998901 57.75888824]
[278.62847900 57.87051773]
[291.86535645 65.66027069]
[299.42001343 79.03273773]
[299.26022339 94.39080048]
[291.42904663 107.60321045]
[278.03295898 115.11589813]
[262.67547607 114.90798950]
[249.48767090 107.03540802]
[242.01699829 93.61584473]
[227.01782227 93.45980835]
[212.01863098 93.30377197]
[199.21156311 100.90825653]
[185.49261475 93.02781677]
[170.49342346 92.87178040]
[157.68635559 100.47627258]
[143.96742249 92.59583282]
[128.96823120 92.43979645]
[123.74832916 97.82520294]
[127.85623932 112.25173950]
[113.30850983 108.59600830]
[108.08860779 113.98141479]
[108.71258545 128.96842957]
[109.33656311 143.95544434]
[109.96054077 158.94245911]
[110.58451843 173.92947388]
[111.20849609 188.91648865]
[111.83247375 203.90350342]
[112.45645142 218.89053345]
[127.20944977 222.02096558]
[140.72009277 228.72271729]
[152.13906860 238.57450867]
[160.74858093 250.95704651]
[166.00743103 265.09194946]
[167.58503723 280.09066772]
[165.38223267 295.01040649]
[159.53749084 308.91326904]
[150.41819763 320.92532349]
[138.59762573 330.29150391]
[124.81882477 336.42297363]
[109.94792175 338.93438721]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 98]
[20 97]
[21 96]
[22 95]
[23 67]
[24 66]
[25 65]
[26 64]
[29 61]
[30 60]
[36 56]
[37 55]
[38 54]
[39 53]
[40 52]
[42 50]
[43 49]
[100 127]
[101 126]
[103 124]
[104 123]
[106 121]
[107 120]
[108 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
