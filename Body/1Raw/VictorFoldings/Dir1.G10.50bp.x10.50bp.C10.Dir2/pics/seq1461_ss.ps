%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAGAACACGGGGGGGGGGUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUxxxxxxxxxxGAAACCACACUUAUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCACCCCCCCCCCGCCAGAACGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.13415527]
[71.19830322 376.11813354]
[59.48964310 366.58871460]
[50.78712082 354.25305176]
[45.73651886 340.02651978]
[44.71262741 324.96484375]
[47.79142761 310.18566895]
[54.74444962 296.78573608]
[65.05573273 285.75942993]
[77.96011353 277.92489624]
[92.50000000 273.86358643]
[92.50000000 258.86358643]
[92.50000000 243.86360168]
[92.50000000 228.86360168]
[92.50000000 213.86360168]
[92.50000000 198.86360168]
[92.50000000 183.86360168]
[92.50000000 168.86360168]
[92.50000000 153.86360168]
[92.50000000 138.86360168]
[92.50000000 123.86359406]
[81.86152649 118.95761108]
[74.19214630 109.38164520]
[71.49076843 96.84719086]
[74.80525970 83.88825226]
[83.91455841 73.34931183]
[68.98025513 71.94700623]
[54.04594421 70.54470062]
[39.11163712 69.14239502]
[28.13777351 81.97308350]
[11.84558964 85.72091675]
[-3.32767630 79.10745239]
[-11.50679970 64.90860748]
[-26.46704865 63.81729507]
[-41.42729568 62.72598267]
[-51.33388138 74.66915131]
[-66.37678528 78.47579956]
[-80.77171326 72.68219757]
[-88.98351288 59.51610947]
[-87.85458374 44.04015350]
[-77.81902313 32.20515823]
[-62.73570251 28.56192017]
[-48.40447617 34.51133728]
[-40.33598709 47.76573563]
[-25.37573814 48.85704422]
[-10.41548920 49.94835663]
[-2.76040435 38.96675110]
[9.42604733 33.17004013]
[22.99210358 34.17633057]
[34.36993027 41.82865906]
[40.51393890 54.20808792]
[55.44824600 55.61039352]
[70.38255310 57.01269531]
[85.31686401 58.41500092]
[96.91820526 48.90664291]
[98.47578430 33.98772812]
[100.03336334 19.06881714]
[101.59095001 4.14990568]
[87.05508423 0.32770580]
[73.27307892 -5.66869068]
[60.56800079 -13.69871998]
[49.23767090 -23.57414818]
[39.54769135 -35.06347656]
[31.72520638 -47.89738464]
[25.95359039 -61.77502441]
[22.36813354 -76.37108612]
[21.05288887 -91.34340668]
[22.03868294 -106.34103394]
[25.30241203 -121.01238251]
[30.76756477 -135.01354980]
[38.30603409 -148.01631165]
[47.74110794 -159.71588135]
[58.85160828 -169.83798218]
[71.37709808 -178.14537048]
[85.02395630 -184.44328308]
[99.47228241 -188.58409119]
[114.38338470 -190.47074890]
[129.40773010 -190.05900574]
[144.19311523 -187.35852051]
[158.39297485 -182.43258667]
[171.67440796 -175.39669800]
[183.72610474 -166.41578674]
[194.26554871 -155.70034790]
[203.04568481 -143.50158691]
[209.86068726 -130.10546875]
[214.55081177 -115.82599640]
[217.00610352 -100.99791718]
[217.16900635 -85.96881866]
[215.03572083 -71.09099579]
[210.65623474 -56.71321869]
[204.13320923 -43.17251587]
[195.61956787 -30.78630447]
[185.31486511 -19.84493065]
[173.46067810 -10.60487938]
[160.33486938 -3.28274894]
[146.24513245 1.94981825]
[131.52174377 4.97016382]
[116.50985718 5.70748615]
[114.95227814 20.62639809]
[113.39469910 35.54531097]
[111.83711243 50.46422195]
[121.58477020 61.86524582]
[136.56448364 62.64508820]
[151.54418945 63.42493439]
[165.72796631 56.41556549]
[178.03576660 64.80408478]
[193.01548767 65.58393097]
[199.16468811 62.88306046]
[204.88085938 63.62921524]
[208.59819031 66.72064972]
[223.53250122 68.12295532]
[238.46679688 69.52525330]
[253.40110779 70.92755890]
[268.07388306 63.60349274]
[281.60198975 72.87291718]
[280.06887817 89.20024872]
[265.05169678 95.78932190]
[251.99880981 85.86186981]
[237.06449890 84.45956421]
[222.13018799 83.05725861]
[207.19587708 81.65496063]
[192.23564148 80.56364441]
[177.25592041 79.78379822]
[164.14360046 86.84895325]
[150.76435852 78.40464783]
[135.78463745 77.62480164]
[120.80492401 76.84495544]
[128.81764221 96.02385712]
[122.85424042 114.47492981]
[107.50000000 123.86359406]
[107.50000000 138.86360168]
[107.50000000 153.86360168]
[107.50000000 168.86360168]
[107.50000000 183.86360168]
[107.50000000 198.86360168]
[107.50000000 213.86360168]
[107.50000000 228.86360168]
[107.50000000 243.86360168]
[107.50000000 258.86358643]
[107.50000000 273.86358643]
[122.03988647 277.92489624]
[134.94427490 285.75942993]
[145.25555420 296.78573608]
[152.20857239 310.18566895]
[155.28736877 324.96484375]
[154.26348877 340.02651978]
[149.21287537 354.25305176]
[140.51036072 366.58871460]
[128.80169678 376.11813354]
[114.95575714 382.13415527]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 54]
[27 53]
[28 52]
[29 51]
[33 46]
[34 45]
[35 44]
[55 101]
[56 100]
[57 99]
[58 98]
[102 127]
[103 126]
[104 125]
[106 123]
[107 122]
[110 121]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
