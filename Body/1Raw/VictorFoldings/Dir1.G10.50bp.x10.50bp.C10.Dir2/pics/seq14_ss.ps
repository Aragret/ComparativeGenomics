%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCACCCUAGGGGGGGGGGUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGxxxxxxxxxxACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUCCCCCCCCCCUCUCACCCUA\
) } def
/len { sequence length } bind def

/coor [
[25.20774269 474.21875000]
[11.36180305 468.20272827]
[-0.34685853 458.67330933]
[-9.04938316 446.33764648]
[-14.09998512 432.11111450]
[-15.12387562 417.04943848]
[-12.04507732 402.27026367]
[-5.09205532 388.87033081]
[5.21922874 377.84399414]
[18.12360954 370.00949097]
[32.66349792 365.94818115]
[32.66349792 350.94818115]
[32.66349792 335.94818115]
[32.66349792 320.94818115]
[32.66349792 305.94818115]
[32.66349792 290.94818115]
[32.66349792 275.94818115]
[32.66349792 260.94818115]
[32.66349792 245.94818115]
[32.66349792 230.94818115]
[24.52476120 226.88612366]
[18.55709076 219.38647461]
[16.19206238 209.59530640]
[18.26528931 199.23925781]
[3.28557539 198.45941162]
[-11.69413948 197.67956543]
[-26.67385292 196.89971924]
[-41.62194061 198.14660645]
[-56.26544189 201.39743042]
[-70.90894318 204.64825439]
[-82.62421417 216.12364197]
[-98.34494019 211.45559692]
[-101.89899445 195.44619751]
[-89.63026428 184.56454468]
[-74.15976715 190.00474548]
[-59.51626587 186.75392151]
[-44.87276459 183.50309753]
[-58.77627182 177.87348938]
[-69.26917267 167.15438843]
[-74.60102081 153.13400269]
[-73.88234711 138.15122986]
[-67.23303223 124.70553589]
[-55.76234055 115.03997040]
[-41.38383484 110.76696014]
[-26.49617767 112.59934235]
[-13.58296108 120.23143005]
[-4.79839897 132.39002991]
[-1.60795546 147.04679871]
[-4.54386711 161.75668335]
[-13.11635780 174.06571960]
[-25.89400864 181.92001343]
[-10.91429424 182.69985962]
[4.06542063 183.47970581]
[19.04513550 184.25955200]
[32.63608551 177.91241455]
[41.65361404 165.92558289]
[50.67114639 153.93875122]
[59.56349564 141.85876465]
[68.32970428 129.68692017]
[77.09590912 117.51509094]
[85.86211395 105.34325409]
[77.19367981 64.54025269]
[81.20141602 50.08555984]
[77.43257141 34.71981049]
[88.28909302 24.52249908]
[92.29683685 10.06781006]
[96.30457306 -4.38687849]
[100.31231689 -18.84156609]
[104.32005310 -33.29625702]
[108.32779694 -47.75094223]
[95.24856567 -55.25990677]
[84.44821930 -65.78622437]
[76.60567474 -78.66819763]
[72.21392822 -93.09606934]
[71.54904175 -108.16287994]
[74.65280914 -122.92151642]
[81.33013916 -136.44424438]
[91.16127014 -147.88101196]
[103.52822113 -156.51289368]
[117.65358734 -161.79727173]
[132.64944458 -163.40199280]
[147.57313538 -161.22615051]
[161.48654175 -155.40655518]
[173.51506042 -146.30899048]
[182.90257263 -134.50537109]
[189.05895996 -120.73767090]
[191.59724426 -105.87133026]
[190.35783386 -90.84087372]
[185.41867065 -76.59111786]
[177.09022522 -64.01782227]
[165.89604187 -53.91134644]
[152.53976440 -46.90700150]
[137.86100769 -43.44507980]
[122.78248596 -43.74320221]
[118.77474213 -29.28851509]
[114.76700592 -14.83382607]
[110.75926208 -0.37913805]
[106.75151825 14.07555008]
[102.74378204 28.53023911]
[106.79929352 42.86209488]
[95.65610504 54.09329987]
[91.64836884 68.54798889]
[96.34194946 74.39780426]
[105.72911072 86.09742737]
[110.42269135 91.94723511]
[125.40240479 91.16738892]
[138.78166199 82.72309113]
[151.89398193 89.78823853]
[166.87368774 89.00839233]
[178.63771057 78.10026550]
[194.47862244 80.63901520]
[202.24461365 94.67713928]
[195.97830200 109.44577789]
[180.48664856 113.61570740]
[167.65353394 103.98810577]
[152.67381287 104.76795197]
[140.36601257 113.15647888]
[126.18225098 106.14710999]
[111.20253754 106.92694855]
[98.03395081 114.10945892]
[89.26774597 126.28129578]
[80.50154114 138.45314026]
[71.73532867 150.62496948]
[69.23494720 159.47933960]
[62.65797806 162.95628357]
[53.64044952 174.94311523]
[44.62291718 186.92994690]
[57.85229874 195.43342590]
[62.96937180 209.52703857]
[58.70974731 223.13726807]
[47.66349792 230.94818115]
[47.66349792 245.94818115]
[47.66349792 260.94818115]
[47.66349792 275.94818115]
[47.66349792 290.94818115]
[47.66349792 305.94818115]
[47.66349792 320.94818115]
[47.66349792 335.94818115]
[47.66349792 350.94818115]
[47.66349792 365.94818115]
[62.20338440 370.00949097]
[75.10776520 377.84399414]
[85.41905212 388.87033081]
[92.37207031 402.27026367]
[95.45086670 417.04943848]
[94.42697906 432.11111450]
[89.37637329 446.33764648]
[80.67385101 458.67330933]
[68.96518707 468.20272827]
[55.11925125 474.21875000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 54]
[25 53]
[26 52]
[27 51]
[28 37]
[29 36]
[30 35]
[55 127]
[56 126]
[57 125]
[58 123]
[59 122]
[60 121]
[61 120]
[62 102]
[63 101]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[70 94]
[105 119]
[106 118]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
