%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUGGAGGGGGGGGGGGCCUCCGUAGACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUxxxxxxxxxxCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGUCCCCCCCCCCCACCCUGAAG\
) } def
/len { sequence length } bind def

/coor [
[172.66716003 637.62951660]
[159.79388428 629.72662354]
[149.66958618 618.51611328]
[143.11500549 604.90679932]
[140.66148376 590.00189209]
[142.50791931 575.00964355]
[148.50463867 561.14538574]
[158.16549683 549.53314209]
[170.70735168 541.11419678]
[185.11346436 536.57104492]
[184.80140686 521.57427979]
[184.48934937 506.57754517]
[184.17730713 491.58078003]
[183.86524963 476.58404541]
[183.55319214 461.58728027]
[183.24113464 446.59051514]
[182.92907715 431.59378052]
[182.61701965 416.59701538]
[182.30496216 401.60025024]
[181.99290466 386.60351562]
[179.65412903 383.88366699]
[178.55105591 379.87304688]
[179.28605652 375.18133545]
[182.15867615 370.66830444]
[182.78265381 355.68127441]
[183.40663147 340.69424438]
[180.46115112 325.98629761]
[174.11402893 312.39535522]
[167.76689148 298.80438232]
[161.41976929 285.21343994]
[149.93139648 287.08062744]
[138.32070923 286.11221313]
[127.27789307 282.35998535]
[117.46077728 276.04135132]
[109.45564270 267.52685547]
[103.74221802 257.31835938]
[100.66491699 246.01943970]
[100.41210175 234.29978943]
[103.00454712 222.85548401]
[108.29385376 212.36759949]
[115.97096252 203.46177673]
[125.58419037 196.67077637]
[120.68264008 182.49421692]
[115.78108978 168.31765747]
[110.87953949 154.14109802]
[105.97798920 139.96453857]
[101.07643890 125.78798676]
[96.17488861 111.61142731]
[88.05334473 99.00029755]
[77.17452240 88.67309570]
[66.29569244 78.34588623]
[55.41687012 68.01868439]
[44.53804398 57.69147873]
[33.65921783 47.36427689]
[18.00902176 40.84448242]
[19.94161415 24.00104332]
[36.66180038 21.19538116]
[43.98642349 36.48545074]
[54.86524963 46.81265640]
[65.74407196 57.13985825]
[76.62290192 67.46706390]
[87.50172424 77.79427338]
[98.38054657 88.12147522]
[112.10060120 82.05846405]
[111.78854370 67.06170654]
[111.47649384 52.06495285]
[111.16443634 37.06819916]
[96.89059448 31.90855789]
[85.44708252 21.93807793]
[78.38153839 8.50518894]
[76.64952087 -6.57342291]
[80.48526764 -21.25849915]
[89.37002563 -33.56400299]
[102.10221100 -41.82571793]
[116.95989227 -44.92631531]
[131.93370056 -42.44646072]
[144.99853516 -34.72153473]
[154.38749695 -22.79627609]
[158.83079529 -8.28347206]
[157.72752380 6.85413790]
[151.22688293 20.56931686]
[140.20803833 31.00719643]
[126.16118622 36.75614548]
[126.47324371 51.75289917]
[126.78530121 66.74964905]
[127.09735870 81.74640656]
[110.35144806 106.70987701]
[115.25299835 120.88643646]
[120.15454865 135.06298828]
[125.05609894 149.23954773]
[129.95764160 163.41610718]
[134.85919189 177.59266663]
[139.76074219 191.76922607]
[158.42320251 192.17869568]
[175.50537109 199.62501526]
[188.46279907 212.97224426]
[195.37559509 230.20750427]
[195.23287964 248.74450684]
[188.08055115 265.81161499]
[175.01071167 278.86630249]
[181.35784912 292.45727539]
[187.70497131 306.04821777]
[194.05210876 319.63916016]
[195.66821289 304.72647095]
[200.87586975 290.65948486]
[209.35997009 278.28936768]
[220.60716248 268.36459351]
[233.93687439 261.48574829]
[248.54255676 258.06903076]
[263.54043579 258.32116699]
[278.02301025 262.22692871]
[291.11395264 269.54995728]
[302.02117920 279.84719849]
[310.08465576 292.49551392]
[314.81652832 306.72961426]
[315.93041992 321.68820190]
[313.35897827 336.46615601]
[307.25778198 350.16925049]
[297.99600220 361.96838379]
[286.13406372 371.14956665]
[272.38970947 377.15728760]
[257.59457397 379.62799072]
[242.64392090 378.41220093]
[228.44239807 373.58349609]
[215.84928894 365.43402100]
[205.62661743 354.45693970]
[198.39364624 341.31823730]
[197.76966858 356.30523682]
[197.14569092 371.29226685]
[196.98965454 386.29144287]
[197.30171204 401.28820801]
[197.61376953 416.28497314]
[197.92582703 431.28170776]
[198.23788452 446.27847290]
[198.54994202 461.27523804]
[198.86199951 476.27197266]
[199.17405701 491.26873779]
[199.48611450 506.26547241]
[199.79817200 521.26226807]
[200.11022949 536.25897217]
[214.69287109 540.19897461]
[227.57406616 548.08886719]
[237.70962524 559.28924561]
[244.27787781 572.89196777]
[246.74636841 587.79443359]
[244.91499329 602.78851318]
[238.93220520 616.65875244]
[229.28302002 628.28070068]
[216.74963379 636.71221924]
[202.34808350 641.26983643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 129]
[25 128]
[26 127]
[27 103]
[28 102]
[29 101]
[30 100]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 63]
[50 62]
[51 61]
[52 60]
[53 59]
[54 58]
[64 86]
[65 85]
[66 84]
[67 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
