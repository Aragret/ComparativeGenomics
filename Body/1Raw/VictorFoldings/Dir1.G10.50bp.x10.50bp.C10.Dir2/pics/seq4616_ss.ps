%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUCCUAAGGGGGGGGGGAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAAAAUGUUGGUxxxxxxxxxxACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCCCCCCCCCCCAUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[112.34764099 477.89489746]
[98.50170135 471.87887573]
[86.79303741 462.34945679]
[78.09051514 450.01379395]
[73.03991699 435.78726196]
[72.01602173 420.72558594]
[75.09482574 405.94641113]
[82.04784393 392.54647827]
[92.35913086 381.52017212]
[105.26351166 373.68563843]
[119.80339813 369.62432861]
[119.80339813 354.62432861]
[119.80339813 339.62432861]
[119.80339813 324.62432861]
[119.80339813 309.62432861]
[119.80339813 294.62432861]
[119.80339813 279.62432861]
[119.80339813 264.62432861]
[119.80339813 249.62434387]
[119.80339813 234.62434387]
[118.09070587 219.72242737]
[114.68772888 205.11354065]
[110.07734680 199.27487183]
[111.36927032 190.16539001]
[108.27095032 175.48886108]
[105.17262268 160.81233215]
[102.07430267 146.13580322]
[98.97598267 131.45928955]
[81.07765198 125.15312195]
[70.05731964 109.70417023]
[55.09706879 110.79547882]
[40.13682175 111.88678741]
[25.17657280 112.97809601]
[13.64202309 124.12860107]
[-2.24826980 121.91995239]
[-10.30463409 108.04643250]
[-4.34691620 93.15061951]
[11.05463219 88.65930939]
[24.08526230 98.01785278]
[39.04550934 96.92653656]
[54.00576019 95.83522797]
[68.96601105 94.74391937]
[68.92034912 85.67255402]
[71.63187408 76.29243469]
[59.19243240 67.91028595]
[46.75299072 59.52814484]
[34.31355286 51.14600372]
[21.87411118 42.76385880]
[6.89525366 47.25471878]
[-7.44535208 41.01925278]
[-14.37651062 27.00165558]
[-10.62554073 11.82060719]
[2.03646493 2.64413500]
[17.63089371 3.80508900]
[28.79453278 14.75530243]
[30.25625420 30.32441902]
[42.69569397 38.70656204]
[55.13513565 47.08870316]
[67.57457733 55.47084808]
[80.01401520 63.85299301]
[94.24079132 59.09917831]
[99.14234924 44.92261887]
[104.04389954 30.74605942]
[108.94544983 16.56950188]
[113.84700012 2.39294410]
[109.91709137 -15.56633472]
[123.54708862 -26.57647133]
[128.15264893 -40.85193253]
[132.75822449 -55.12739182]
[123.00579071 -61.71692657]
[115.14507294 -70.46112061]
[109.63871765 -80.83668518]
[106.80875397 -92.22459412]
[106.81770325 -103.94696045]
[109.65927124 -115.30744934]
[115.15908813 -125.63260651]
[122.98535156 -134.31179810]
[132.66889954 -140.83328247]
[143.63127136 -144.81443787]
[155.21929932 -146.02420044]
[166.74401855 -144.39640808]
[172.80703735 -158.11647034]
[178.87004089 -171.83651733]
[176.57362366 -188.07408142]
[189.65257263 -197.96716309]
[204.65238953 -191.33862305]
[206.14254761 -175.00730896]
[192.59010315 -165.77349854]
[186.52708435 -152.05345154]
[180.46406555 -138.33340454]
[193.80267334 -125.55342102]
[201.30851746 -108.63880157]
[201.83683777 -90.10878754]
[195.28408813 -72.73344421]
[182.60714722 -59.11953735]
[165.68357849 -51.31945419]
[147.03367615 -50.52182770]
[142.42811584 -36.24636841]
[137.82255554 -21.97090721]
[143.06297302 -11.02352047]
[139.29356384 0.93517721]
[128.02355957 7.29449463]
[123.12200165 21.47105217]
[118.22045135 35.64760971]
[113.31890106 49.82416916]
[108.41735077 64.00072479]
[119.87844849 69.76381683]
[128.45120239 78.93531036]
[133.21510315 90.25356293]
[133.75593567 102.24711609]
[130.19569397 113.42539978]
[123.15459442 122.46390533]
[113.65251160 128.36096191]
[116.75083160 143.03749084]
[119.84915161 157.71400452]
[122.94747162 172.39053345]
[126.04579163 187.06706238]
[129.29661560 201.71057129]
[132.69960022 216.31945801]
[138.76087952 202.59863281]
[150.42387390 193.16601562]
[165.10885620 190.10800171]
[179.56762695 194.10098267]
[190.60203552 204.26177979]
[195.77139282 218.34289551]
[193.93226624 233.22972107]
[185.49145508 245.62942505]
[172.31600952 252.79931641]
[157.32019043 253.15347290]
[143.82093811 246.61357117]
[134.80339050 234.62434387]
[134.80339050 249.62434387]
[134.80339050 264.62432861]
[134.80339050 279.62432861]
[134.80339050 294.62432861]
[134.80339050 309.62432861]
[134.80339050 324.62432861]
[134.80339050 339.62432861]
[134.80339050 354.62432861]
[134.80339050 369.62432861]
[149.34327698 373.68563843]
[162.24766541 381.52017212]
[172.55894470 392.54647827]
[179.51196289 405.94641113]
[182.59077454 420.72558594]
[181.56687927 435.78726196]
[176.51628113 450.01379395]
[167.81375122 462.34945679]
[156.10508728 471.87887573]
[142.25915527 477.89489746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 119]
[22 118]
[24 117]
[25 116]
[26 115]
[27 114]
[28 113]
[30 42]
[31 41]
[32 40]
[33 39]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[61 106]
[62 105]
[63 104]
[64 103]
[65 102]
[67 99]
[68 98]
[69 97]
[81 90]
[82 89]
[83 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
