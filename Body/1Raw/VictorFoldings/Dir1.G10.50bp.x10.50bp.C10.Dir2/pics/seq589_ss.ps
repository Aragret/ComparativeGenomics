%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCAUACUGGGGGGGGGGACUAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACxxxxxxxxxxUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCCCCCCCCCCCUCCCAUAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.52185059]
[71.19830322 367.50582886]
[59.48964310 357.97640991]
[50.78712082 345.64074707]
[45.73651886 331.41421509]
[44.71262741 316.35253906]
[47.79142761 301.57339478]
[54.74444962 288.17346191]
[65.05573273 277.14712524]
[77.96011353 269.31262207]
[92.50000000 265.25131226]
[92.50000000 250.25131226]
[92.50000000 235.25131226]
[92.50000000 220.25131226]
[92.50000000 205.25131226]
[92.50000000 190.25131226]
[92.50000000 175.25131226]
[92.50000000 160.25131226]
[92.50000000 145.25131226]
[92.50000000 130.25131226]
[92.50000000 115.25130463]
[80.59682465 97.27763367]
[96.06552887 78.16078186]
[87.81324005 65.63481903]
[79.56095123 53.10886002]
[65.50760651 45.84152603]
[64.96680450 30.95674324]
[56.71451569 18.43078041]
[50.89402008 15.07976151]
[48.10624695 10.03400898]
[48.39215851 5.20764637]
[40.66807556 -7.65075588]
[32.94398880 -20.50915909]
[17.77756500 -19.18971825]
[3.60003471 -24.56415939]
[-6.79555893 -35.51641083]
[-11.38615894 -49.83728409]
[-9.31225109 -64.66996002]
[-1.03822958 -77.07987976]
[-8.76231480 -89.93827820]
[-16.48639870 -102.79668427]
[-30.33645439 -96.96944427]
[-44.87485886 -93.17266083]
[-59.80563354 -91.48365021]
[-74.82479858 -91.93677521]
[-89.62659454 -94.52282715]
[-103.90966797 -99.18914795]
[-117.38323975 -105.84074402]
[-129.77299500 -114.34220123]
[-140.82670593 -124.52042389]
[-150.31932068 -136.16821289]
[-158.05758667 -149.04843140]
[-163.88397217 -162.89884949]
[-167.67985535 -177.43748474]
[-169.36795044 -192.36836243]
[-168.91389465 -207.38749695]
[-166.32691956 -222.18913269]
[-161.65971375 -236.47192383]
[-155.00727844 -249.94506836]
[-146.50506592 -262.33432007]
[-136.32615662 -273.38739014]
[-124.67778015 -282.87927246]
[-111.79708862 -290.61676025]
[-97.94631195 -296.44229126]
[-83.40743256 -300.23727417]
[-68.47645569 -301.92443848]
[-53.45734024 -301.46945190]
[-38.65586853 -298.88156128]
[-24.37337303 -294.21347046]
[-10.90062809 -287.56021118]
[1.48807716 -279.05722046]
[12.54052448 -268.87762451]
[22.03170204 -257.22866821]
[29.76837921 -244.34748840]
[35.59304810 -230.49635315]
[39.38712692 -215.95724487]
[41.07337189 -201.02615356]
[40.61745453 -186.00708008]
[38.02865601 -171.20576477]
[33.35968018 -156.92355347]
[26.70558357 -143.45121765]
[18.20183182 -131.06304932]
[8.02155304 -120.01122284]
[-3.62799692 -110.52076721]
[4.09608793 -97.66236877]
[11.82017326 -84.80396271]
[26.66223907 -86.27996063]
[40.73117065 -81.14433289]
[51.21810150 -70.36540985]
[56.00461960 -56.04376602]
[54.09054565 -41.00304794]
[45.80239105 -28.23324394]
[53.52647781 -15.37484074]
[61.25056076 -2.51643848]
[69.24047852 10.17849159]
[77.49276733 22.70445251]
[90.95584869 29.07584572]
[92.08691406 44.85657120]
[100.33920288 57.38253403]
[108.59149170 69.90849304]
[121.60779572 77.36340332]
[136.58750916 78.14324951]
[151.56723022 78.92309570]
[166.54693604 79.70294189]
[181.52665710 80.48278809]
[190.35861206 66.54093170]
[204.92416382 58.98182678]
[221.22137451 59.77613831]
[234.82568359 68.61383820]
[242.09115601 83.01399231]
[257.08383179 83.48204041]
[272.07653809 83.95008087]
[288.09661865 78.40090942]
[297.86373901 92.25875854]
[287.25125122 105.48040009]
[271.60848999 98.94277954]
[256.61581421 98.47473145]
[241.62310791 98.00669098]
[235.18794250 110.09172821]
[224.11227417 118.25315094]
[210.53326416 120.84505463]
[197.10195923 117.30314636]
[186.46582031 108.26636505]
[180.74681091 95.46250153]
[165.76708984 94.68265533]
[150.78738403 93.90280914]
[135.80766296 93.12296295]
[120.82794952 92.34311676]
[118.19018555 107.28092194]
[107.50000000 115.25130463]
[107.50000000 130.25131226]
[107.50000000 145.25131226]
[107.50000000 160.25131226]
[107.50000000 175.25131226]
[107.50000000 190.25131226]
[107.50000000 205.25131226]
[107.50000000 220.25131226]
[107.50000000 235.25131226]
[107.50000000 250.25131226]
[107.50000000 265.25131226]
[122.03988647 269.31262207]
[134.94427490 277.14712524]
[145.25555420 288.17346191]
[152.20857239 301.57339478]
[155.28736877 316.35253906]
[154.26348877 331.41421509]
[149.21287537 345.64074707]
[140.51036072 357.97640991]
[128.80169678 367.50582886]
[114.95575714 373.52185059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 100]
[24 99]
[25 98]
[27 96]
[28 95]
[31 94]
[32 93]
[33 92]
[39 86]
[40 85]
[41 84]
[101 128]
[102 127]
[103 126]
[104 125]
[105 124]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
