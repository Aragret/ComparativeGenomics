%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGUUAACGGGGGGGGGGAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCGCCGCCGGGxxxxxxxxxxAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCCCCCCCCCCCUUAGUUACC\
) } def
/len { sequence length } bind def

/coor [
[84.23306274 411.69232178]
[70.38712311 405.67630005]
[58.67846298 396.14688110]
[49.97593689 383.81121826]
[44.92533493 369.58468628]
[43.90144348 354.52301025]
[46.98024368 339.74383545]
[53.93326569 326.34390259]
[64.24455261 315.31756592]
[77.14893341 307.48306274]
[91.68881989 303.42175293]
[91.68881989 288.42175293]
[91.68881989 273.42175293]
[91.68881989 258.42175293]
[91.68881989 243.42175293]
[91.68881989 228.42175293]
[91.68881989 213.42175293]
[91.68881989 198.42175293]
[91.68881989 183.42175293]
[91.68881989 168.42175293]
[91.68881989 153.42175293]
[83.34025574 144.61216736]
[83.25583649 132.07374573]
[92.02891541 122.56129456]
[92.34097290 107.56453705]
[89.09014893 92.92103577]
[82.46164703 79.46507263]
[67.66278076 82.36829376]
[52.62837219 81.34261322]
[38.38285828 76.46395874]
[25.89536858 68.07054901]
[16.01377487 56.73954010]
[9.40715027 43.24726486]
[6.52044821 28.51609230]
[7.54455376 13.55134773]
[12.40366459 -0.62728089]
[20.76086998 -13.05523205]
[32.04150391 -22.88868523]
[25.41300392 -36.34465027]
[18.78450584 -49.80061722]
[12.15600681 -63.25658035]
[5.52750826 -76.71254730]
[-1.10099041 -90.16851044]
[-15.59019852 -86.13130188]
[-30.57057381 -84.82569885]
[-45.53180313 -86.29469299]
[-59.96449280 -90.48680878]
[-73.37752533 -97.25785828]
[-85.31475067 -106.37593842]
[-95.37051392 -117.52935028]
[-103.20343781 -130.33726501]
[-108.54800415 -144.36270142]
[-111.22356415 -159.12750244]
[-111.14043427 -174.12854004]
[-108.30291748 -188.85493469]
[-102.80909729 -202.80545044]
[-94.84741974 -215.50549316]
[-84.69029236 -226.52331543]
[-72.68470764 -235.48468018]
[-79.31320953 -248.94065857]
[-85.94170380 -262.39660645]
[-92.57020569 -275.85256958]
[-106.49503326 -284.51464844]
[-105.68552399 -300.89379883]
[-90.97443390 -308.14056396]
[-77.49526978 -298.80010986]
[-79.11424255 -282.48107910]
[-72.48574066 -269.02511597]
[-65.85724640 -255.56915283]
[-59.22874451 -242.11318970]
[-44.80715179 -246.17001343]
[-29.88168907 -247.50804138]
[-14.96054268 -246.08023071]
[-0.55201817 -241.93374634]
[12.85276794 -235.20841980]
[24.79663277 -226.13195801]
[34.87191772 -215.01231384]
[42.73440552 -202.22721863]
[48.11507034 -188.21130371]
[50.82930374 -173.44140625]
[50.78321838 -158.42027283]
[47.97692108 -143.65946960]
[42.50454712 -129.66198730]
[34.55109787 -116.90506744]
[24.38620758 -105.82395172]
[12.35497475 -96.79701233]
[18.98347282 -83.34104156]
[25.61197281 -69.88507843]
[32.24047089 -56.42911530]
[38.86896896 -42.97314835]
[45.49746704 -29.51718330]
[60.16864777 -32.46776581]
[75.11513519 -31.51936913]
[89.31768799 -26.73064423]
[101.80625916 -18.42233467]
[111.72620392 -7.15578508]
[118.39682007 6.30496740]
[121.35800934 21.04501724]
[120.40202332 36.06076813]
[115.58803558 50.32826233]
[107.23851776 62.87302017]
[95.91761017 72.83657074]
[102.54611206 86.29254150]
[103.85163116 71.34945679]
[108.76551056 57.17716980]
[116.99043274 44.63322067]
[128.02871704 34.47662735]
[141.21243286 27.32194901]
[155.74388123 23.60210991]
[170.74375916 23.54218864]
[185.30445862 27.14581299]
[198.54492188 34.19493103]
[209.66398621 44.26301193]
[217.98887634 56.74084854]
[223.01582336 70.87342834]
[224.44068909 85.80559540]
[222.17723083 100.63384247]
[216.36242676 114.46092224]
[207.34811401 126.45017242]
[195.67974854 135.87614441]
[182.06333923 142.16848755]
[167.32283020 144.94647217]
[152.35011292 144.04197693]
[138.05120850 139.50975037]
[125.29129028 131.62403870]
[114.84245300 120.86197662]
[107.33772278 107.87659454]
[107.02567291 122.87334442]
[116.27992249 138.75851440]
[106.68881989 153.42175293]
[106.68881989 168.42175293]
[106.68881989 183.42175293]
[106.68881989 198.42175293]
[106.68881989 213.42175293]
[106.68881989 228.42175293]
[106.68881989 243.42175293]
[106.68881989 258.42175293]
[106.68881989 273.42175293]
[106.68881989 288.42175293]
[106.68881989 303.42175293]
[121.22870636 307.48306274]
[134.13308716 315.31756592]
[144.44436646 326.34390259]
[151.39738464 339.74383545]
[154.47619629 354.52301025]
[153.45230103 369.58468628]
[148.40170288 383.81121826]
[139.69917297 396.14688110]
[127.99050903 405.67630005]
[114.14456940 411.69232178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 128]
[25 127]
[26 103]
[27 102]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[43 86]
[59 70]
[60 69]
[61 68]
[62 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
