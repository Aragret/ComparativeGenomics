%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCGCUGUAGGGGGGGGGGGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUxxxxxxxxxxUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCCCCCCCCCCCAUCGUUGUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 365.14846802]
[71.01555634 359.59545898]
[58.81560135 350.72912598]
[49.20452881 339.10684204]
[42.78650284 325.45913696]
[39.96496582 310.64395142]
[40.91728210 295.59255981]
[45.58358765 281.25112915]
[53.67055511 268.52117920]
[64.66983032 258.20291138]
[77.88998413 250.94493103]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[91.88417816 72.80915070]
[90.65356445 57.85971451]
[89.42295074 42.91027832]
[88.19233704 27.96084404]
[86.96172333 13.01140881]
[71.95783997 13.24103260]
[56.97212601 12.46798992]
[42.07151031 10.69573402]
[27.32254028 7.93218040]
[12.79109573 4.18967199]
[-1.45792544 -0.51507628]
[-15.36088276 -6.16105175]
[-28.85568237 -12.72303772]
[-41.88205338 -20.17172623]
[-54.38181305 -28.47385025]
[-66.29913330 -37.59233093]
[-77.58079529 -47.48643875]
[-88.17640686 -58.11198807]
[-98.03864288 -69.42152405]
[-107.12346649 -81.36452484]
[-115.39028931 -93.88765717]
[-122.80219269 -106.93498993]
[-129.32608032 -120.44825745]
[-134.93280029 -134.36708069]
[-139.59732056 -148.62931824]
[-143.29881287 -163.17127991]
[-146.02075195 -177.92797852]
[-147.75094604 -192.83354187]
[-148.48170471 -207.82138062]
[-148.20974731 -222.82455444]
[-146.93629456 -237.77606201]
[-144.66703796 -252.60911560]
[-141.41209412 -267.25747681]
[-137.18601990 -281.65573120]
[-132.00767517 -295.73956299]
[-125.90019989 -309.44604492]
[-118.89086151 -322.71398926]
[-111.01097107 -335.48413086]
[-102.29573059 -347.69946289]
[-92.78404999 -359.30535889]
[-82.51841736 -370.25006104]
[-71.54468536 -380.48461914]
[-59.91186142 -389.96337891]
[-47.67190170 -398.64395142]
[-34.87947464 -406.48760986]
[-21.59171295 -413.45932007]
[-7.86796522 -419.52792358]
[6.23047590 -424.66635132]
[20.64064217 -428.85159302]
[35.29817581 -432.06500244]
[50.13760757 -434.29223633]
[65.09266663 -435.52331543]
[80.09654999 -435.75274658]
[95.08226013 -434.97952271]
[109.98284912 -433.20706177]
[124.73178101 -430.44332886]
[139.26318359 -426.70062256]
[153.51214600 -421.99569702]
[167.41502380 -416.34954834]
[180.90974426 -409.78741455]
[193.93601990 -402.33856201]
[206.43568420 -394.03625488]
[218.35289001 -384.91763306]
[229.63442993 -375.02337646]
[240.22990417 -364.39770508]
[250.09199524 -353.08804321]
[259.17666626 -341.14492798]
[267.44332886 -328.62170410]
[274.85507202 -315.57427979]
[281.37878418 -302.06091309]
[286.98535156 -288.14202881]
[291.64968872 -273.87973022]
[295.35098267 -259.33773804]
[298.07272339 -244.58099365]
[299.80276489 -229.67541504]
[300.53332520 -214.68756104]
[300.26116943 -199.68438721]
[298.98754883 -184.73289490]
[296.71807861 -169.89987183]
[293.46295166 -155.25154114]
[289.23669434 -140.85334778]
[284.05819702 -126.76959229]
[277.95053101 -113.06317139]
[270.94104004 -99.79531097]
[263.06097412 -87.02526093]
[254.34558105 -74.81006622]
[244.83375549 -63.20426941]
[234.56799316 -52.25971603]
[223.59413147 -42.02528000]
[211.96118164 -32.54668045]
[199.72111511 -23.86624146]
[186.92858887 -16.02273941]
[173.64074707 -9.05120182]
[159.91691589 -2.98276687]
[145.81840515 2.15546227]
[131.40818787 6.34053707]
[116.75061798 9.55376530]
[101.91115570 11.78079700]
[103.14176941 26.73023033]
[104.37238312 41.67966461]
[105.60299683 56.62910080]
[106.83361053 71.57853699]
[108.94930267 73.50593567]
[110.40434265 76.41318512]
[110.81181335 80.04370880]
[109.88828278 84.00232697]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.11001587 250.94493103]
[135.33016968 258.20291138]
[146.32945251 268.52117920]
[154.41641235 281.25112915]
[159.08271790 295.59255981]
[160.03503418 310.64395142]
[157.21350098 325.45913696]
[150.79547119 339.10684204]
[141.18440247 350.72912598]
[128.98443604 359.59545898]
[114.96250153 365.14846802]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 125]
[25 124]
[26 123]
[27 122]
[28 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
