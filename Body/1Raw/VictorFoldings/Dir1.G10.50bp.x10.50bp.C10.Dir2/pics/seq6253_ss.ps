%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGUUGACUGGGGGGGGGGAUUCUCUACAAACCACAAAGACAUUGGAACACUAUACCUAUUAUUCGGCGxxxxxxxxxxUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUCCCCCCCCCCACCGUUAACU\
) } def
/len { sequence length } bind def

/coor [
[79.29477692 435.01651001]
[65.44883728 429.00048828]
[53.74017715 419.47106934]
[45.03765106 407.13540649]
[39.98704910 392.90887451]
[38.96315765 377.84719849]
[42.04195786 363.06802368]
[48.99497986 349.66809082]
[59.30626297 338.64178467]
[72.21064758 330.80725098]
[86.75053406 326.74594116]
[86.75053406 311.74594116]
[86.75053406 296.74594116]
[86.75053406 281.74594116]
[86.75053406 266.74594116]
[86.75053406 251.74594116]
[86.75053406 236.74594116]
[86.75053406 221.74594116]
[86.75053406 206.74594116]
[86.75053406 191.74594116]
[86.75053406 176.74594116]
[84.79686737 174.65058899]
[83.58348846 171.63037109]
[83.47638702 167.97381592]
[84.72641754 164.09974670]
[87.42642212 160.51205444]
[88.67329407 145.56396484]
[89.92017365 130.61589050]
[74.69506836 119.96485901]
[67.87903595 102.67932892]
[71.73709869 84.50342560]
[84.98719788 71.47718811]
[81.28103638 56.94224930]
[77.57487488 42.40731049]
[62.68211746 38.73374939]
[51.29806900 28.58182526]
[46.00992203 14.36643505]
[47.96899414 -0.58690268]
[56.64112473 -12.81995773]
[49.73412704 -26.13511276]
[42.82712936 -39.45026779]
[35.92013168 -52.76542282]
[29.01313210 -66.08058167]
[22.10613251 -79.39573669]
[18.23278809 -81.66700745]
[15.58730984 -84.76095581]
[14.27806854 -88.17676544]
[14.23483276 -91.43132019]
[15.23094177 -94.11741638]
[9.45466900 -107.96063232]
[3.67839670 -121.80384827]
[-11.09500504 -118.91741943]
[-26.14702606 -119.06427765]
[-40.86129379 -122.23842621]
[-54.63526917 -128.30987549]
[-66.90491486 -137.02999878]
[-77.16780090 -148.04171753]
[-85.00366974 -160.89411926]
[-90.09164429 -175.06088257]
[-92.22336578 -189.96191406]
[-91.31155396 -204.98701477]
[-87.39354706 -219.52090454]
[-80.62978363 -232.96844482]
[-71.29722595 -244.77896118]
[-59.77804947 -254.46882629]
[-46.54394913 -261.64123535]
[-32.13685608 -266.00250244]
[-17.14673042 -267.37399292]
[-2.18740916 -265.69961548]
[12.12853241 -261.04785156]
[25.21486473 -253.60926819]
[36.53571320 -243.68841553]
[45.62749481 -231.69155884]
[52.11790848 -218.10997009]
[55.74117279 -203.49981689]
[56.34891510 -188.45935059]
[53.91625595 -173.60447693]
[48.54280853 -159.54351807]
[40.44861221 -146.85221863]
[29.96511459 -136.05030823]
[17.52161407 -127.58012390]
[23.29788780 -113.73690033]
[29.07415962 -99.89368439]
[35.42128754 -86.30273438]
[42.32828903 -72.98757935]
[49.23528671 -59.67242432]
[56.14228439 -46.35726547]
[63.04928207 -33.04211044]
[69.95628357 -19.72695541]
[83.26789093 -19.97249794]
[95.45837402 -14.61979198]
[106.96018219 -24.24831772]
[118.46198273 -33.87684631]
[129.96379089 -43.50537109]
[135.07913208 -59.08629608]
[151.18354797 -62.18144989]
[161.71018982 -49.60679626]
[155.83015442 -34.29806900]
[139.59231567 -32.00356674]
[128.09051514 -22.37504005]
[116.58870697 -12.74651432]
[105.08689880 -3.11798859]
[108.46069336 12.32986450]
[103.78126526 27.59139633]
[92.10980988 38.70114899]
[95.81597137 53.23608780]
[99.52213287 67.77102661]
[114.70041656 71.31493378]
[126.44122314 81.56641388]
[131.99914551 96.12831879]
[146.90104675 97.84101105]
[161.80294800 99.55370331]
[176.70484924 101.26638794]
[190.11351013 92.45800781]
[205.31489563 97.58610535]
[210.64781189 112.71685791]
[202.02130127 126.24323273]
[186.05288696 127.78896332]
[174.99215698 116.16828918]
[160.09025574 114.45560455]
[145.18835449 112.74291229]
[130.28645325 111.03022003]
[127.25340271 117.21009827]
[122.97720337 122.60494232]
[117.65291595 126.96868134]
[111.52339935 130.10226440]
[104.86825562 131.86276245]
[103.62138367 146.81085205]
[102.37451172 161.75892639]
[101.75053406 176.74594116]
[101.75053406 191.74594116]
[101.75053406 206.74594116]
[101.75053406 221.74594116]
[101.75053406 236.74594116]
[101.75053406 251.74594116]
[101.75053406 266.74594116]
[101.75053406 281.74594116]
[101.75053406 296.74594116]
[101.75053406 311.74594116]
[101.75053406 326.74594116]
[116.29042053 330.80725098]
[129.19479370 338.64178467]
[139.50608826 349.66809082]
[146.45910645 363.06802368]
[149.53790283 377.84719849]
[148.51400757 392.90887451]
[143.46340942 407.13540649]
[134.76087952 419.47106934]
[123.05222321 429.00048828]
[109.20628357 435.01651001]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 129]
[27 128]
[28 127]
[32 107]
[33 106]
[34 105]
[39 89]
[40 88]
[41 87]
[42 86]
[43 85]
[44 84]
[49 83]
[50 82]
[51 81]
[91 102]
[92 101]
[93 100]
[94 99]
[110 122]
[111 121]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
