%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACACAUAGGGGGGGGGGGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAACAAGCUCxxxxxxxxxxGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAACCCCCCCCCCAAAACUCAUA\
) } def
/len { sequence length } bind def

/coor [
[-49.35577774 281.43295288]
[-62.37342072 269.88214111]
[-74.50052643 257.39959717]
[-85.67059326 244.05380249]
[-95.82234955 229.91795349]
[-104.90012360 215.06956482]
[-112.85413361 199.59008789]
[-126.63651276 205.51005554]
[-140.41889954 211.43002319]
[-154.20127869 217.34997559]
[-167.98365784 223.26994324]
[-181.76603699 229.18991089]
[-195.54841614 235.10986328]
[-208.71699524 242.29237366]
[-221.15644836 250.67451477]
[-233.59588623 259.05667114]
[-246.03532410 267.43881226]
[-258.47476196 275.82095337]
[-270.91421509 284.20309448]
[-283.35363770 292.58523560]
[-295.79309082 300.96737671]
[-302.49868774 315.93292236]
[-318.83743286 317.33905029]
[-328.00143433 303.73931885]
[-320.56353760 289.12393188]
[-304.17523193 288.52795410]
[-291.73577881 280.14578247]
[-279.29635620 271.76364136]
[-266.85690308 263.38150024]
[-254.41746521 254.99935913]
[-241.97802734 246.61721802]
[-229.53858948 238.23507690]
[-217.09915161 229.85293579]
[-231.99774170 228.11178589]
[-243.68344116 218.70730591]
[-248.57005310 204.52557373]
[-245.15791321 189.91882324]
[-234.49418640 179.36965942]
[-219.85142517 176.11547852]
[-205.72331238 181.15496826]
[-196.44558716 192.94155884]
[-194.86544800 207.85809326]
[-201.46838379 221.32748413]
[-187.68600464 215.40751648]
[-173.90362549 209.48756409]
[-160.12123108 203.56759644]
[-146.33885193 197.64762878]
[-132.55647278 191.72767639]
[-118.77409363 185.80770874]
[-123.33282471 173.12670898]
[-127.15719604 160.20526123]
[-130.23463440 147.08586121]
[-132.55502319 133.81161499]
[-134.11073303 120.42619324]
[-134.89665222 106.97361755]
[-134.91017151 93.49810028]
[-134.15129089 80.04396820]
[-132.62245178 66.65544891]
[-130.32873535 53.37657928]
[-127.27764130 40.25101471]
[-123.47922516 27.32191277]
[-118.94596863 14.63178921]
[-113.69277191 2.22237158]
[-107.73693085 -9.86553574]
[-101.09800720 -21.59218597]
[-93.79783630 -32.91902161]
[-85.86042786 -43.80879593]
[-77.31187439 -54.22570038]
[-68.18029022 -64.13548279]
[-58.49570084 -73.50556183]
[-48.28995132 -82.30512238]
[-37.59659576 -90.50523376]
[-26.45079994 -98.07892609]
[-14.88921070 -105.00130463]
[-2.94984722 -111.24960327]
[9.32803345 -116.80327606]
[21.90406036 -121.64406586]
[34.73687744 -125.75604248]
[47.78429413 -129.12570190]
[61.00340652 -131.74195862]
[74.35073853 -133.59619141]
[87.78241730 -134.68232727]
[101.25427246 -134.99679565]
[114.72199249 -134.53854370]
[128.14131165 -133.30909729]
[141.46809387 -131.31248474]
[154.65852356 -128.55526733]
[167.66923523 -125.04653168]
[180.45742798 -120.79780579]
[192.98106384 -115.82305145]
[205.19895935 -110.13863373]
[217.07095337 -103.76324463]
[228.55798340 -96.71784973]
[239.62229919 -89.02560425]
[250.22750854 -80.71182251]
[260.33874512 -71.80381775]
[269.92276001 -62.33089447]
[278.94805908 -52.32419968]
[287.38491821 -41.81663895]
[295.20562744 -30.84275818]
[302.38449097 -19.43864250]
[308.89785767 -7.64179373]
[314.72433472 4.50900078]
[319.84475708 16.97378540]
[324.24227905 29.71157646]
[327.90246582 42.68048859]
[330.81329346 55.83787537]
[332.96514893 69.14047241]
[334.35095215 82.54454803]
[334.96618652 96.00601196]
[334.80883789 109.48061371]
[333.87936401 122.92404175]
[332.18084717 136.29208374]
[329.71890259 149.54080200]
[326.50158691 162.62661743]
[340.82418823 167.08343506]
[355.14678955 171.54025269]
[369.46939087 175.99707031]
[385.33856201 171.86167908]
[396.66027832 183.72549438]
[391.78775024 199.38406372]
[375.73339844 202.72917175]
[365.01257324 190.31967163]
[350.68997192 185.86285400]
[336.36737061 181.40603638]
[322.04476929 176.94921875]
[315.74114990 193.17094421]
[308.25427246 208.88169861]
[299.62524414 223.99526978]
[289.90136719 238.42880249]
[279.13598633 252.10313416]
[267.38815308 264.94323730]
[254.72227478 276.87872314]
[241.20780945 287.84414673]
[226.91891479 297.77932739]
[211.93392944 306.62976074]
[196.33503723 314.34698486]
[180.20780945 320.88861084]
[163.64067078 326.21878052]
[146.72450256 330.30825806]
[129.55207825 333.13461304]
[112.21758270 334.68234253]
[94.81607056 334.94296265]
[77.44299316 333.91503906]
[60.19362640 331.60421753]
[43.16257477 328.02319336]
[26.44325066 323.19155884]
[10.12734509 317.13583374]
[-5.69565582 309.88925171]
[-20.93897247 301.49151611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 49]
[8 48]
[9 47]
[10 46]
[11 45]
[12 44]
[13 43]
[14 33]
[15 32]
[16 31]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
