%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACCCACGGGGGGGGGGAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCAUUCUxxxxxxxxxxAGCCUACGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUCCCCCCCCCCAAUGACCCAC\
) } def
/len { sequence length } bind def

/coor [
[117.62953949 439.07577515]
[103.78359985 433.05975342]
[92.07493591 423.53033447]
[83.37241364 411.19467163]
[78.32180786 396.96813965]
[77.29792023 381.90646362]
[80.37671661 367.12731934]
[87.32974243 353.72738647]
[97.64102173 342.70104980]
[110.54540253 334.86654663]
[125.08528900 330.80523682]
[125.08528900 315.80523682]
[125.08528900 300.80523682]
[125.08528900 285.80523682]
[125.08528900 270.80523682]
[125.08528900 255.80522156]
[125.08528900 240.80522156]
[125.08528900 225.80522156]
[125.08528900 210.80522156]
[125.08528900 195.80522156]
[125.08528900 180.80522156]
[125.08528900 165.80522156]
[122.29296875 151.06741333]
[116.80593872 137.10702515]
[111.31890106 123.14663696]
[83.60443878 115.10464478]
[83.82685089 90.37703705]
[75.06064606 78.20520020]
[66.29444122 66.03336334]
[57.52823257 53.86152649]
[49.92270660 48.68389511]
[48.70938110 41.34403992]
[40.19829178 28.99246788]
[27.10513496 21.67336273]
[12.12542152 20.89351654]
[-2.85429287 20.11367226]
[-15.68740940 29.74127197]
[-31.17905998 25.57134438]
[-37.44537735 10.80270100]
[-29.67937851 -3.23541880]
[-13.83847237 -5.77417088]
[-2.07444787 5.13395786]
[12.90526676 5.91380310]
[27.88498116 6.69364786]
[36.77772141 -5.38688183]
[45.66968155 -17.46632767]
[40.47426605 -31.53784752]
[35.27885056 -45.60936737]
[30.08343315 -59.68088531]
[15.30056763 -56.92863464]
[0.26520464 -56.71446228]
[-14.59005833 -59.04452133]
[-28.83780479 -63.85177994]
[-42.06809998 -70.99791718]
[-53.90028000 -80.27733612]
[-63.99391174 -91.42303467]
[-72.05857849 -104.11433411]
[-77.86224365 -117.98608398]
[-81.23793030 -132.63916016]
[-82.08850861 -147.65197754]
[-80.38950348 -162.59257507]
[-76.18980408 -177.03108215]
[-69.61023712 -190.55207825]
[-60.84011459 -202.76654053]
[-50.13177109 -213.32301331]
[-37.79330444 -221.91780090]
[-24.17971992 -228.30358887]
[-9.68270588 -232.29666138]
[5.28063107 -233.78210449]
[20.27976418 -232.71720886]
[34.88314056 -229.13259888]
[48.67058563 -223.13140869]
[61.24541473 -214.88630676]
[72.24582672 -204.63452148]
[81.35530853 -192.67102051]
[88.31176758 -179.34001160]
[92.91504669 -165.02507019]
[95.03271484 -150.13804626]
[94.60382843 -135.10726929]
[91.64073181 -120.36521912]
[86.22867584 -106.33604431]
[78.52338409 -93.42340088]
[68.74655151 -81.99879456]
[57.17947006 -72.39095306]
[44.15495300 -64.87630463]
[49.35036850 -50.80478287]
[54.54578400 -36.73326492]
[59.74119949 -22.66174507]
[52.54986191 20.48137856]
[61.06095123 32.83295059]
[69.70006561 45.09531784]
[78.46627808 57.26715469]
[87.23248291 69.43899536]
[95.99868774 81.61083221]
[105.25956726 79.52993774]
[115.41432190 82.32734680]
[123.85269165 90.25661469]
[137.23898315 83.48849487]
[150.62525940 76.72038269]
[156.97639465 61.98801041]
[172.49176025 57.90722275]
[185.26930237 67.60845184]
[185.50720215 83.64974213]
[173.02293396 93.72558594]
[157.39337158 90.10666656]
[144.00709534 96.87477875]
[130.62080383 103.64289856]
[125.27929688 117.65960693]
[130.76632690 131.61999512]
[136.25335693 145.58038330]
[138.92774963 130.82072449]
[145.95527649 117.56878662]
[156.67308044 107.07456207]
[170.07019043 100.32792664]
[184.88294983 97.96524048]
[199.71412659 100.20937347]
[213.16477966 106.84864044]
[223.96617126 117.25680542]
[231.09947205 130.45210266]
[233.89183044 145.18991089]
[232.07984924 160.08006287]
[225.83444214 173.71806335]
[215.74472046 184.81750488]
[202.76239014 192.33142090]
[188.11201477 195.55108643]
[173.17546082 194.17279053]
[159.36164856 188.32653809]
[147.97355652 178.56378174]
[140.08529663 165.80522156]
[140.08529663 180.80522156]
[140.08529663 195.80522156]
[140.08529663 210.80522156]
[140.08529663 225.80522156]
[140.08529663 240.80522156]
[140.08529663 255.80522156]
[140.08529663 270.80523682]
[140.08529663 285.80523682]
[140.08529663 300.80523682]
[140.08529663 315.80523682]
[140.08529663 330.80523682]
[154.62518311 334.86654663]
[167.52955627 342.70104980]
[177.84085083 353.72738647]
[184.79386902 367.12731934]
[187.87266541 381.90646362]
[186.84877014 396.96813965]
[181.79817200 411.19467163]
[173.09564209 423.53033447]
[161.38697815 433.05975342]
[147.54104614 439.07577515]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 110]
[24 109]
[25 108]
[27 94]
[28 93]
[29 92]
[30 91]
[32 90]
[33 89]
[34 44]
[35 43]
[36 42]
[46 88]
[47 87]
[48 86]
[49 85]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
