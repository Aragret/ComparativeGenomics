%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCUUGGGGGGGGGGCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCxxxxxxxxxxCCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCACCCCCCCCCCUACUAAUCUU\
) } def
/len { sequence length } bind def

/coor [
[56.64152145 640.52764893]
[42.79558182 634.51159668]
[31.08691978 624.98217773]
[22.38439560 612.64654541]
[17.33379364 598.41998291]
[16.30990219 583.35833740]
[19.38870049 568.57916260]
[26.34172249 555.17919922]
[36.65300751 544.15289307]
[49.55738831 536.31835938]
[64.09727478 532.25708008]
[64.09727478 517.25708008]
[64.09727478 502.25708008]
[64.09727478 487.25708008]
[64.09727478 472.25708008]
[64.09727478 457.25708008]
[64.09727478 442.25708008]
[64.09727478 427.25708008]
[64.09727478 412.25708008]
[64.09727478 397.25708008]
[56.15347290 393.49893188]
[49.85508347 387.30801392]
[45.92208099 379.35177612]
[44.81720734 370.50152588]
[46.69171524 361.73712158]
[51.36539078 354.03842163]
[58.34345245 348.27575684]
[66.86882782 345.11154175]
[68.42640686 330.19262695]
[69.98398590 315.27371216]
[71.54157257 300.35479736]
[73.09915161 285.43588257]
[58.78424454 281.02481079]
[45.60080338 273.90338135]
[34.05641174 264.34362793]
[24.59595490 252.71154785]
[17.58448410 239.45300293]
[13.29313278 225.07670593]
[11.88862991 210.13464355]
[13.42681980 195.20092773]
[17.85044479 180.84970093]
[24.99128342 167.63310242]
[34.57653046 156.05996704]
[46.23923492 146.57629395]
[59.53233337 139.54801941]
[73.94580841 135.24694824]
[88.92621613 133.84014893]
[90.48380280 118.92123413]
[81.36457825 110.06440735]
[78.95900726 97.58174133]
[84.13373566 85.97028351]
[95.02449036 79.41321564]
[96.89210510 64.52993774]
[98.75971985 49.64665985]
[100.62733459 34.76337814]
[102.49494934 19.88010025]
[94.94021606 3.11985278]
[106.00208282 -10.46819115]
[107.55966187 -25.38710403]
[109.11724854 -40.30601501]
[110.67482758 -55.22492599]
[112.23240662 -70.14383698]
[113.78998566 -85.06275177]
[107.52750397 -99.59175110]
[116.54456329 -111.44679260]
[118.10214233 -126.36570740]
[119.34902191 -141.31379700]
[120.28464508 -156.28457642]
[121.22027588 -171.25537109]
[107.42472839 -177.58367920]
[96.84961700 -188.47088623]
[90.92513275 -202.44461060]
[90.45252228 -217.61500549]
[95.49568939 -231.93041992]
[105.37259674 -243.45478821]
[118.74747467 -250.62954712]
[133.81147766 -252.48437500]
[148.52731323 -248.76840210]
[160.90480042 -239.98419189]
[169.26998901 -227.31974792]
[172.49153137 -212.48782349]
[170.13377380 -197.49430847]
[162.51554871 -184.36697388]
[150.66719055 -174.88114929]
[136.19107056 -170.31974792]
[135.25544739 -155.34895325]
[134.31980896 -140.37815857]
[136.79598999 -136.22557068]
[136.64474487 -130.46289062]
[133.02105713 -124.80812073]
[131.46347046 -109.88921356]
[137.83737183 -96.42730713]
[128.70890808 -83.50517273]
[127.15132141 -68.58625793]
[125.59374237 -53.66734695]
[124.03615570 -38.74843597]
[122.47857666 -23.82952309]
[120.92099762 -8.91061020]
[128.30964661 0.71826053]
[127.09164429 13.19766045]
[117.37822723 21.74771309]
[115.51061249 36.63099289]
[113.64299774 51.51427078]
[111.77538300 66.39755249]
[109.90777588 81.28083038]
[120.32488251 94.04428864]
[118.44378662 110.41143036]
[105.40270996 120.47881317]
[103.84513092 135.39773560]
[118.21191406 139.86846924]
[131.42614746 147.05395508]
[142.98086548 156.67642212]
[152.43316650 168.36456299]
[159.42121887 181.66799927]
[163.67811584 196.07456970]
[165.04202271 211.03002930]
[163.46241760 225.95941162]
[159.00184631 240.28913879]
[151.83354187 253.46902466]
[142.23466492 264.99337769]
[130.57554626 274.42053223]
[117.30550385 281.38958740]
[102.93539429 285.63433838]
[88.01806641 286.99346924]
[86.46047974 301.91238403]
[84.90290070 316.83129883]
[83.34532166 331.75021362]
[81.78774261 346.66912842]
[96.81381226 362.39993286]
[95.49965668 383.83410645]
[79.09727478 397.25708008]
[79.09727478 412.25708008]
[79.09727478 427.25708008]
[79.09727478 442.25708008]
[79.09727478 457.25708008]
[79.09727478 472.25708008]
[79.09727478 487.25708008]
[79.09727478 502.25708008]
[79.09727478 517.25708008]
[79.09727478 532.25708008]
[93.63716125 536.31835938]
[106.54154205 544.15289307]
[116.85282898 555.17919922]
[123.80584717 568.57916260]
[126.88465118 583.35833740]
[125.86075592 598.41998291]
[120.81015778 612.64654541]
[112.10762787 624.98217773]
[100.39897156 634.51159668]
[86.55303192 640.52764893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 128]
[29 127]
[30 126]
[31 125]
[32 124]
[47 109]
[48 108]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[58 98]
[59 97]
[60 96]
[61 95]
[62 94]
[63 93]
[65 91]
[66 90]
[67 87]
[68 86]
[69 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
