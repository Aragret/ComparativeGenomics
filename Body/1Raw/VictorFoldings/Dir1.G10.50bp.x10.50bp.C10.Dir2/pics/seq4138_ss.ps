%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCACCACGGGGGGGGGGUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACAxxxxxxxxxxUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUACCCCCCCCCCACCCUCAACAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 419.75482178]
[71.01555634 414.20181274]
[58.81560135 405.33547974]
[49.20452881 393.71316528]
[42.78650284 380.06546021]
[39.96496582 365.25027466]
[40.91728210 350.19891357]
[45.58358765 335.85748291]
[53.67055511 323.12753296]
[64.66983032 312.80923462]
[77.88998413 305.55126953]
[92.50000000 301.80984497]
[92.50000000 286.80984497]
[92.50000000 271.80984497]
[92.50000000 256.80984497]
[92.50000000 241.80982971]
[92.50000000 226.80982971]
[92.50000000 211.80982971]
[92.50000000 196.80982971]
[92.50000000 181.80982971]
[92.50000000 166.80982971]
[92.50000000 151.80982971]
[92.50000000 136.80982971]
[78.24912262 130.62863159]
[67.71728516 119.21042633]
[62.70528030 104.50755310]
[64.07006836 89.03395081]
[71.57830048 75.43537140]
[62.41636276 63.55854797]
[53.25442886 51.68172455]
[44.09249496 39.80490112]
[36.32313919 34.88220596]
[34.86736679 27.58885956]
[25.95121574 15.52642727]
[17.03506470 3.46399570]
[8.11891270 -8.59843540]
[-4.96403980 -1.22171760]
[-18.85436058 4.49130392]
[-33.34147644 8.45402050]
[-48.20576096 10.60635948]
[-63.22188568 10.91569042]
[-78.16220093 9.37732506]
[-92.80021667 6.01458454]
[-106.91403198 0.87844646]
[-120.28968048 -5.95322609]
[-132.72438049 -14.37686634]
[-144.02964783 -24.26477623]
[-154.03407288 -35.46705246]
[-162.58599854 -47.81387711]
[-169.55578613 -61.11807251]
[-174.83778381 -75.17795563]
[-178.35189819 -89.78037262]
[-180.04486084 -104.70395660]
[-179.89102173 -119.72248077]
[-177.89270020 -134.60826111]
[-174.08018494 -149.13562012]
[-168.51127625 -163.08435059]
[-161.27041626 -176.24296570]
[-152.46734619 -188.41201782]
[-142.23553467 -199.40699768]
[-130.73010254 -209.06124878]
[-118.12544250 -217.22839355]
[-104.61265564 -223.78462219]
[-90.39659119 -228.63056946]
[-75.69275665 -231.69273376]
[-60.72406387 -232.92472839]
[-45.71742630 -232.30784607]
[-30.90035057 -229.85147095]
[-16.49745178 -225.59280396]
[-2.72707891 -219.59643555]
[10.20201492 -211.95326233]
[22.09382629 -202.77914429]
[32.76808167 -192.21316528]
[42.06295776 -180.41549683]
[49.83754730 -167.56500244]
[55.97399521 -153.85647583]
[60.37926483 -139.49774170]
[62.98658371 -124.70647430]
[63.75641632 -109.70690918]
[62.67710114 -94.72643280]
[59.76499176 -79.99214935]
[55.06423950 -65.72741699]
[48.64610672 -52.14849091]
[40.60788727 -39.46122742]
[31.07144547 -27.85795784]
[20.18134499 -17.51458740]
[29.09749603 -5.45215511]
[38.01364517 6.61027622]
[46.92979813 18.67270851]
[55.96931839 30.64296532]
[65.13124847 42.51979065]
[74.29319000 54.39661407]
[83.45512390 66.27343750]
[101.91065979 60.54144669]
[121.76203918 64.73000336]
[137.78691101 78.68906403]
[152.03359985 73.99526215]
[166.28028870 69.30146027]
[180.52697754 64.60765839]
[194.77368164 59.91386032]
[208.92098999 54.92853928]
[222.96296692 49.65379715]
[227.98919678 34.84599304]
[241.38453674 26.77759743]
[256.82409668 29.25825882]
[267.01782227 41.11668396]
[267.15252686 56.75368500]
[257.16458130 68.78594971]
[241.77005005 71.53221893]
[228.23771667 63.69577408]
[214.19573975 68.97051239]
[211.42158508 72.92694092]
[206.10588074 75.14756012]
[199.46748352 74.16055298]
[185.22077942 78.85435486]
[170.97409058 83.54815674]
[156.72740173 88.24195099]
[142.48071289 92.93575287]
[142.32670593 107.93496704]
[156.47402954 112.92028809]
[171.50637817 107.31601715]
[185.18577576 115.69776917]
[187.01853943 131.63578796]
[175.59873962 142.90379333]
[159.68667603 140.85792542]
[151.48870850 127.06760406]
[137.34138489 122.08228302]
[128.49618530 130.09196472]
[118.22788239 135.04814148]
[107.50000000 136.80982971]
[107.50000000 151.80982971]
[107.50000000 166.80982971]
[107.50000000 181.80982971]
[107.50000000 196.80982971]
[107.50000000 211.80982971]
[107.50000000 226.80982971]
[107.50000000 241.80982971]
[107.50000000 256.80984497]
[107.50000000 271.80984497]
[107.50000000 286.80984497]
[107.50000000 301.80984497]
[122.11001587 305.55126953]
[135.33016968 312.80923462]
[146.32945251 323.12753296]
[154.41641235 335.85748291]
[159.08271790 350.19891357]
[160.03503418 365.25027466]
[157.21350098 380.06546021]
[150.79547119 393.71316528]
[141.18440247 405.33547974]
[128.98443604 414.20181274]
[114.96250153 419.75482178]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[28 93]
[29 92]
[30 91]
[31 90]
[33 89]
[34 88]
[35 87]
[36 86]
[96 118]
[97 117]
[98 116]
[99 115]
[100 114]
[101 111]
[102 110]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
