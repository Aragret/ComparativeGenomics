%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUAUCUAGGGGGGGGGGUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCxxxxxxxxxxCUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCCCCCCCCCCCAACUACCUA\
) } def
/len { sequence length } bind def

/coor [
[128.77322388 497.24237061]
[114.92728424 491.22631836]
[103.21862030 481.69689941]
[94.51609802 469.36123657]
[89.46549225 455.13473511]
[88.44160461 440.07302856]
[91.52040100 425.29388428]
[98.47342682 411.89395142]
[108.78470612 400.86761475]
[121.68908691 393.03311157]
[136.22897339 388.97180176]
[136.22897339 373.97180176]
[136.22897339 358.97180176]
[136.22897339 343.97180176]
[136.22897339 328.97180176]
[136.22897339 313.97180176]
[136.22897339 298.97180176]
[136.22897339 283.97180176]
[136.22897339 268.97180176]
[136.22897339 253.97180176]
[120.70442963 246.72105408]
[110.17430878 233.11300659]
[107.02507782 216.12380981]
[112.01977539 199.50747681]
[124.11444092 186.96643066]
[118.91902161 172.89491272]
[113.72360992 158.82339478]
[108.52819061 144.75187683]
[103.33277893 130.68035889]
[90.28072357 129.29040527]
[78.98689270 122.60179138]
[71.49433899 111.82451630]
[69.15847015 98.90817261]
[54.74625778 94.75028992]
[39.34213257 98.35909271]
[29.25830650 87.39707947]
[14.84609032 83.23919678]
[5.39142275 95.14203644]
[-7.90099764 102.51631927]
[-23.00417519 104.23750305]
[-37.61498260 100.04313660]
[-49.50537872 90.57282257]
[-56.86216736 77.27071381]
[-58.56348801 62.16528320]
[-54.34990311 47.56000519]
[-44.86395264 35.68207550]
[-31.55217552 28.34279442]
[-16.44452286 26.66134644]
[-1.84480119 30.89414024]
[10.02063942 40.39570618]
[17.34240341 53.71712494]
[19.00397682 68.82698059]
[33.41619492 72.98486328]
[47.78946304 69.07865906]
[58.90414429 80.33807373]
[73.31636047 84.49596405]
[83.56163025 73.88158417]
[97.56321716 69.23550415]
[100.04833984 54.44280243]
[102.53345490 39.65009308]
[105.01857758 24.85738564]
[95.22912598 36.22253418]
[82.87332153 44.72748184]
[68.76208496 49.81403351]
[53.82154846 51.14836121]
[39.03227234 48.64289093]
[25.36489487 42.46205521]
[13.71640873 33.01151276]
[4.85131788 20.91150475]
[-0.64855516 6.95616913]
[-2.42224884 -7.93859529]
[-0.35335436 -22.79523277]
[5.42234516 -36.63869095]
[14.52578545 -48.56040955]
[26.35950089 -57.77795792]
[40.14683151 -63.68637848]
[54.98291016 -65.89790344]
[69.89402771 -64.26737976]
[83.90155029 -58.90182114]
[96.08616638 -50.15338135]
[105.64817810 -38.59622192]
[111.96002197 -24.98884773]
[114.60745239 -10.22432709]
[113.41571808 4.73307991]
[122.18192291 -7.43875694]
[130.94813538 -19.61059380]
[139.71434021 -31.78243065]
[148.48054504 -43.95426559]
[149.58760071 -60.31600571]
[164.42796326 -67.29422760]
[177.73513794 -57.71034241]
[175.81985474 -41.42342377]
[160.65238953 -35.18806076]
[151.88616943 -23.01622391]
[143.11996460 -10.84438705]
[134.35375977 1.32745016]
[125.58755493 13.49928665]
[119.81127930 27.34250450]
[117.32616425 42.13521194]
[114.84104156 56.92791748]
[112.35592651 71.72062683]
[125.00447845 81.91221619]
[130.72569275 97.11491394]
[127.93453979 113.11691284]
[117.40429688 125.48494720]
[122.59970856 139.55645752]
[127.79512787 153.62799072]
[132.99053955 167.69950867]
[138.18595886 181.77102661]
[154.57432556 183.17616272]
[168.65939331 191.50494385]
[177.69290161 205.04647827]
[179.94958496 221.08139038]
[194.36180115 225.23927307]
[208.77401733 229.39715576]
[223.18623352 233.55505371]
[236.06271362 224.68203735]
[251.62515259 226.21321106]
[262.52545166 237.42559814]
[263.61679077 253.02503967]
[254.38392639 265.64599609]
[239.18629456 269.32919312]
[225.19976807 262.33554077]
[219.02833557 247.96726990]
[204.61611938 243.80937195]
[190.20391846 239.65148926]
[175.79170227 235.49360657]
[171.33280945 242.03749084]
[165.56158447 247.45939636]
[158.75241089 251.50155640]
[151.22897339 253.97180176]
[151.22897339 268.97180176]
[151.22897339 283.97180176]
[151.22897339 298.97180176]
[151.22897339 313.97180176]
[151.22897339 328.97180176]
[151.22897339 343.97180176]
[151.22897339 358.97180176]
[151.22897339 373.97180176]
[151.22897339 388.97180176]
[165.76885986 393.03311157]
[178.67324829 400.86761475]
[188.98452759 411.89395142]
[195.93754578 425.29388428]
[199.01634216 440.07302856]
[197.99246216 455.13473511]
[192.94184875 469.36123657]
[184.23933411 481.69689941]
[172.53067017 491.22631836]
[158.68473816 497.24237061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 109]
[26 108]
[27 107]
[28 106]
[29 105]
[33 56]
[34 55]
[36 53]
[37 52]
[58 101]
[59 100]
[60 99]
[61 98]
[84 97]
[85 96]
[86 95]
[87 94]
[88 93]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
