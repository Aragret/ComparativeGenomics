%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCUAAUAGGGGGGGGGGGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCxxxxxxxxxxUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUCCCCCCCCCCAAUCCUAAUA\
) } def
/len { sequence length } bind def

/coor [
[110.09575653 454.08233643]
[96.24982452 448.06631470]
[84.54116058 438.53689575]
[75.83863831 426.20123291]
[70.78803253 411.97470093]
[69.76414490 396.91302490]
[72.84294128 382.13385010]
[79.79595947 368.73391724]
[90.10724640 357.70761108]
[103.01162720 349.87307739]
[117.55151367 345.81176758]
[117.55151367 330.81176758]
[117.55151367 315.81176758]
[117.55151367 300.81176758]
[117.55151367 285.81176758]
[117.55151367 270.81176758]
[117.55151367 255.81176758]
[117.55151367 240.81176758]
[117.55151367 225.81176758]
[117.55151367 210.81176758]
[116.14920807 195.87747192]
[113.35688782 181.13966370]
[108.99337769 175.11425781]
[110.66312408 166.06640625]
[108.17800140 151.27369690]
[105.69288635 136.48098755]
[103.20776367 121.68827820]
[97.32264709 135.48558044]
[82.66646576 138.67872620]
[71.57511902 128.58010864]
[73.38405609 113.68958282]
[86.57079315 106.54030609]
[71.61054230 105.44898987]
[56.65029526 104.35768127]
[41.69004440 103.26637268]
[26.72979736 102.17506409]
[14.93640804 112.69606781]
[-0.83727372 111.71295166]
[-11.23300266 99.80899048]
[-10.08317661 84.04658508]
[1.93003249 73.77729034]
[17.67940140 75.09370422]
[27.82110786 87.21481323]
[42.78135681 88.30612183]
[57.74160385 89.39743042]
[72.70185089 90.48874664]
[87.66210175 91.58005524]
[75.74665833 82.46839905]
[76.27371979 67.47766113]
[88.79965973 59.22534180]
[102.78157043 64.65730286]
[106.45104218 79.20162201]
[111.35260010 65.02506256]
[116.25415039 50.84850311]
[121.15570068 36.67194748]
[125.61251068 22.34934998]
[129.62025452 7.89466095]
[133.62799072 -6.56002760]
[137.63574219 -21.01471519]
[141.64347839 -35.46940613]
[145.65121460 -49.92409134]
[149.65895081 -64.37878418]
[135.95721436 -70.55638123]
[123.35912323 -78.75324249]
[112.15998840 -88.77720642]
[102.62234497 -100.39331055]
[94.96977234 -113.32924652]
[89.38163757 -127.28177643]
[85.98895264 -141.92384338]
[84.87124634 -156.91221619]
[86.05471039 -171.89553833]
[89.51160431 -186.52256775]
[95.16089630 -200.45045471]
[102.87016296 -213.35269165]
[112.45867920 -224.92683411]
[123.70169067 -234.90156555]
[136.33561707 -243.04306030]
[150.06433105 -249.16049194]
[164.56600952 -253.11042786]
[179.50068665 -254.80030823]
[194.51829529 -254.19049072]
[209.26679993 -251.29527283]
[223.40046692 -246.18255615]
[236.58798218 -238.97215271]
[248.52020264 -229.83309937]
[258.91744995 -218.97962952]
[267.53598022 -206.66615295]
[274.17373657 -193.18133545]
[278.67517090 -178.84126282]
[280.93472290 -163.98210144]
[280.89944458 -148.95216370]
[278.57015991 -134.10375977]
[274.00146484 -119.78498077]
[267.30047607 -106.33146667]
[258.62426758 -94.05858612]
[248.17617798 -83.25403595]
[236.20118713 -74.17109680]
[222.97996521 -67.02267456]
[208.82246399 -61.97634506]
[194.06053162 -59.15040207]
[179.04023743 -58.61108780]
[164.11364746 -60.37104034]
[160.10589600 -45.91635132]
[156.09815979 -31.46166420]
[152.09042358 -17.00697517]
[148.08268738 -2.55228734]
[144.07493591 11.90240097]
[140.06719971 26.35709000]
[141.52639771 29.63401413]
[141.43127441 33.79245377]
[139.37989807 38.07547379]
[135.33226013 41.57349777]
[130.43070984 55.75005722]
[125.52915192 69.92661285]
[120.62760162 84.10317230]
[118.00047302 119.20315552]
[120.48558807 133.99586487]
[122.97071075 148.78857422]
[125.45582581 163.58128357]
[128.09469604 178.34733582]
[130.88702393 193.08514404]
[138.36677551 180.08309937]
[151.61978149 173.05758667]
[166.57887268 174.16467285]
[178.65328979 183.06459045]
[184.13754272 197.02607727]
[181.34858704 211.76452637]
[171.14231873 222.75688171]
[156.65090942 226.62976074]
[142.32159424 222.19459534]
[132.55151367 210.81176758]
[132.55151367 225.81176758]
[132.55151367 240.81176758]
[132.55151367 255.81176758]
[132.55151367 270.81176758]
[132.55151367 285.81176758]
[132.55151367 300.81176758]
[132.55151367 315.81176758]
[132.55151367 330.81176758]
[132.55151367 345.81176758]
[147.09140015 349.87307739]
[159.99578857 357.70761108]
[170.30706787 368.73391724]
[177.26008606 382.13385010]
[180.33888245 396.91302490]
[179.31500244 411.97470093]
[174.26438904 426.20123291]
[165.56187439 438.53689575]
[153.85321045 448.06631470]
[140.00726318 454.08233643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 121]
[22 120]
[24 119]
[25 118]
[26 117]
[27 116]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[52 115]
[53 114]
[54 113]
[55 112]
[56 108]
[57 107]
[58 106]
[59 105]
[60 104]
[61 103]
[62 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
