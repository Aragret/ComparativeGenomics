%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUAAAGGGGGGGGGGCAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAxxxxxxxxxxCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCAACCCCCCCCCCAGCCCAUAAA\
) } def
/len { sequence length } bind def

/coor [
[84.92198944 352.15304565]
[71.07604980 346.13702393]
[59.36738586 336.60760498]
[50.66486359 324.27194214]
[45.61426163 310.04541016]
[44.59037018 294.98373413]
[47.66917038 280.20458984]
[54.62219238 266.80465698]
[64.93347168 255.77832031]
[77.83785248 247.94380188]
[92.37774658 243.88249207]
[92.37774658 228.88249207]
[92.37774658 213.88249207]
[92.37774658 198.88249207]
[92.37774658 183.88249207]
[92.37774658 168.88249207]
[92.37774658 153.88249207]
[92.37774658 138.88249207]
[92.37774658 123.88249207]
[92.37774658 108.88249207]
[82.60833740 120.26487732]
[68.27915192 124.70046234]
[53.78762817 120.82801819]
[43.58103561 109.83596039]
[40.79164124 95.09759521]
[46.27548218 81.13595581]
[58.34963226 72.23567963]
[73.30868530 71.12815094]
[86.56191254 78.15325928]
[94.04224396 91.15586090]
[96.83456421 76.41806030]
[99.62689209 61.68025208]
[102.41921234 46.94244385]
[105.21154022 32.20463943]
[90.69023895 28.42247200]
[76.45740509 23.66859818]
[62.57796860 17.96471214]
[49.11527252 11.33683777]
[36.13073730 3.81521749]
[23.68360901 -4.56582928]
[11.83068275 -13.76806164]
[0.62604040 -23.74949074]
[-9.87919331 -34.46457672]
[-19.63708305 -45.86442184]
[-28.60310936 -57.89701843]
[-36.73635864 -70.50745392]
[-43.99972153 -83.63820648]
[-50.36005783 -97.22933960]
[-55.78834534 -111.21886444]
[-60.25981522 -125.54293060]
[-63.75406265 -140.13618469]
[-66.25514984 -154.93205261]
[-67.75166321 -169.86300659]
[-68.23677063 -184.86091614]
[-67.70826721 -199.85737610]
[-66.16855621 -214.78393555]
[-63.62466049 -229.57249451]
[-60.08819580 -244.15557861]
[-55.57529449 -258.46664429]
[-50.10654831 -272.44039917]
[-43.70690918 -286.01309204]
[-36.40558243 -299.12274170]
[-28.23587418 -311.70959473]
[-19.23506737 -323.71621704]
[-9.44422913 -335.08776855]
[1.09196687 -345.77239990]
[12.32544613 -355.72137451]
[24.20495224 -364.88925171]
[36.67628098 -373.23425293]
[49.68252563 -380.71826172]
[63.16434860 -387.30715942]
[77.06022644 -392.97085571]
[91.30676270 -397.68353271]
[105.83894348 -401.42364502]
[120.59046936 -404.17419434]
[135.49403381 -405.92257690]
[150.48162842 -406.66082764]
[165.48486328 -406.38558960]
[180.43528748 -405.09808350]
[195.26469421 -402.80422974]
[209.90541077 -399.51446533]
[224.29061890 -395.24383545]
[238.35472107 -390.01177979]
[252.03350830 -383.84222412]
[265.26458740 -376.76324463]
[277.98757935 -368.80722046]
[290.14440918 -360.01040649]
[301.67965698 -350.41293335]
[312.54064941 -340.05865479]
[322.67785645 -328.99472046]
[332.04501343 -317.27169800]
[340.59936523 -304.94302368]
[348.30191040 -292.06500244]
[355.11746216 -278.69635010]
[361.01495361 -264.89807129]
[365.96746826 -250.73312378]
[369.95242310 -236.26615906]
[372.95162964 -221.56317139]
[374.95135498 -206.69125366]
[375.94253540 -191.71826172]
[375.92062378 -176.71250916]
[374.88574219 -161.74247742]
[372.84259033 -146.87646484]
[369.80047607 -132.18229675]
[365.77331543 -117.72702026]
[360.77944946 -103.57660675]
[354.84170532 -89.79560089]
[347.98712158 -76.44689941]
[340.24703979 -63.59140396]
[331.65670776 -51.28777313]
[322.25537109 -39.59214020]
[312.08590698 -28.55787659]
[301.19473267 -18.23532677]
[289.63150024 -8.67159081]
[277.44903564 0.08969339]
[264.70288086 8.00854969]
[251.45118713 15.04884624]
[237.75444031 21.17845917]
[223.67512512 26.36942101]
[209.27751160 30.59804535]
[194.62724304 33.84503937]
[179.79121399 36.09558487]
[164.83708191 37.33941650]
[149.83311462 37.57085800]
[134.84773254 36.78884888]
[119.94934082 34.99696350]
[117.15702057 49.73476791]
[114.36469269 64.47257233]
[111.57237244 79.21038055]
[108.78004456 93.94818878]
[107.37774658 108.88249207]
[107.37774658 123.88249207]
[107.37774658 138.88249207]
[107.37774658 153.88249207]
[107.37774658 168.88249207]
[107.37774658 183.88249207]
[107.37774658 198.88249207]
[107.37774658 213.88249207]
[107.37774658 228.88249207]
[107.37774658 243.88249207]
[121.91763306 247.94380188]
[134.82200623 255.77832031]
[145.13330078 266.80465698]
[152.08631897 280.20458984]
[155.16511536 294.98373413]
[154.14122009 310.04541016]
[149.09062195 324.27194214]
[140.38809204 336.60760498]
[128.67944336 346.13702393]
[114.83349609 352.15304565]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 130]
[31 129]
[32 128]
[33 127]
[34 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
