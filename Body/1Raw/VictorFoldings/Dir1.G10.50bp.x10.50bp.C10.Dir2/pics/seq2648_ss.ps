%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACUGUCAGGGGGGGGGGACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACxxxxxxxxxxAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCCCCCCCCCCCUCACUGUGA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 385.87130737]
[71.19830322 379.85525513]
[59.48964310 370.32583618]
[50.78712082 357.99017334]
[45.73651886 343.76367188]
[44.71262741 328.70196533]
[47.79142761 313.92282104]
[54.74444962 300.52288818]
[65.05573273 289.49655151]
[77.96011353 281.66204834]
[92.50000000 277.60073853]
[92.50000000 262.60073853]
[92.50000000 247.60073853]
[92.50000000 232.60073853]
[92.50000000 217.60073853]
[92.50000000 202.60073853]
[92.50000000 187.60073853]
[92.50000000 172.60073853]
[92.50000000 157.60073853]
[92.50000000 142.60073853]
[92.50000000 127.60073853]
[79.20484161 119.63700867]
[72.01520538 105.90779114]
[73.04199219 90.44403076]
[81.98373413 77.78593445]
[75.92071533 64.06587982]
[69.85770416 50.34582520]
[63.79469299 36.62577438]
[55.71204376 49.26186371]
[40.81697464 51.03298187]
[29.99657059 40.64458084]
[31.15967369 25.68974304]
[43.45615005 17.09924316]
[57.89777374 21.15161133]
[53.29220963 6.87615108]
[48.68664169 -7.39930964]
[44.08107758 -21.67477036]
[39.47551346 -35.95022964]
[25.63159752 -38.18449020]
[14.16367245 -46.13922119]
[7.28708601 -58.20808792]
[6.30007315 -71.99697876]
[11.33901691 -84.79885864]
[21.36290359 -94.12522125]
[17.05531883 -108.49340820]
[12.74773407 -122.86159515]
[-2.09642267 -120.54539490]
[-17.11771011 -120.27212524]
[-32.03628922 -122.04686737]
[-46.57424164 -125.83655548]
[-60.46072769 -131.57060242]
[-73.43704987 -139.14218140]
[-85.26147461 -148.41023254]
[-95.71371460 -159.20210266]
[-104.59905243 -171.31674194]
[-111.75196075 -184.52845764]
[-117.03917694 -198.59114075]
[-120.36222076 -213.24281311]
[-121.65916443 -228.21049500]
[-120.90586853 -243.21537781]
[-118.11634827 -257.97790527]
[-113.34258270 -272.22308350]
[-106.67350006 -285.68551636]
[-98.23333740 -298.11441040]
[-88.17933655 -309.27822876]
[-76.69879150 -318.96896362]
[-64.00557709 -327.00616455]
[-50.33617020 -333.24002075]
[-35.94521332 -337.55441284]
[-21.10080719 -339.86901855]
[-6.07948923 -340.14065552]
[8.83889866 -338.36431885]
[23.37643814 -334.57302856]
[37.26230240 -328.83749390]
[50.23780823 -321.26449585]
[62.06122971 -311.99517822]
[72.51229858 -301.20217896]
[81.39632416 -289.08657837]
[88.54780579 -275.87408447]
[93.83350372 -261.81082153]
[97.15495300 -247.15879822]
[98.45028687 -232.19097900]
[97.69535828 -217.18617249]
[94.90424347 -202.42395020]
[90.12893677 -188.17929077]
[83.45838928 -174.71759033]
[75.01688385 -162.28959656]
[64.96167755 -151.12687683]
[53.48008347 -141.43736267]
[40.78600311 -133.40155029]
[27.11591911 -127.16917419]
[31.42350197 -112.80099487]
[35.73108673 -98.43280792]
[51.51528549 -95.11457062]
[63.55406189 -84.24029541]
[68.51239777 -68.69536591]
[64.95291901 -52.67582321]
[53.75097656 -40.55579376]
[58.35654068 -26.28033447]
[62.96210480 -12.00487423]
[67.56766510 2.27058649]
[72.17323303 16.54604721]
[77.51474762 30.56275940]
[83.57775879 44.28281403]
[89.64076996 58.00286865]
[95.70378113 71.72292328]
[111.33407593 73.73996735]
[123.52314758 83.73001862]
[128.57017517 98.65992737]
[143.21366882 101.91075134]
[156.44328308 93.68791962]
[171.24757385 97.19332123]
[179.00526428 109.85640717]
[193.64875793 113.10723877]
[208.29226685 116.35806274]
[222.93576050 119.60888672]
[238.40626526 114.16867828]
[250.67498779 125.05033112]
[247.12094116 141.05972290]
[231.40020752 145.72776794]
[219.68493652 134.25238037]
[205.04144287 131.00155640]
[190.39793396 127.75074005]
[175.75444031 124.49990845]
[163.36718750 132.69087219]
[148.47029114 129.60267639]
[139.96284485 116.55425262]
[125.31935120 113.30342865]
[117.89917755 122.30851746]
[107.50000000 127.60073853]
[107.50000000 142.60073853]
[107.50000000 157.60073853]
[107.50000000 172.60073853]
[107.50000000 187.60073853]
[107.50000000 202.60073853]
[107.50000000 217.60073853]
[107.50000000 232.60073853]
[107.50000000 247.60073853]
[107.50000000 262.60073853]
[107.50000000 277.60073853]
[122.03988647 281.66204834]
[134.94427490 289.49655151]
[145.25555420 300.52288818]
[152.20857239 313.92282104]
[155.28736877 328.70196533]
[154.26348877 343.76367188]
[149.21287537 357.99017334]
[140.51036072 370.32583618]
[128.80169678 379.85525513]
[114.95575714 385.87130737]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 106]
[26 105]
[27 104]
[28 103]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[44 93]
[45 92]
[46 91]
[109 128]
[110 127]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
