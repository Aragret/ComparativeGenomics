%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCUAAAGGGGGGGGGGAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCxxxxxxxxxxGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUCCCCCCCCCCUCCCCCUAAA\
) } def
/len { sequence length } bind def

/coor [
[104.98168945 496.36071777]
[91.13574982 490.34469604]
[79.42708588 480.81527710]
[70.72456360 468.47961426]
[65.67396545 454.25308228]
[64.65007019 439.19140625]
[67.72886658 424.41226196]
[74.68189240 411.01232910]
[84.99317932 399.98599243]
[97.89756012 392.15148926]
[112.43744659 388.09017944]
[112.43744659 373.09017944]
[112.43744659 358.09017944]
[112.43744659 343.09017944]
[112.43744659 328.09017944]
[112.43744659 313.09017944]
[112.43744659 298.09017944]
[112.43744659 283.09017944]
[112.43744659 268.09017944]
[112.43744659 253.09016418]
[112.43744659 238.09016418]
[112.12538910 223.09341431]
[110.56781006 208.17449951]
[108.08268738 193.38179016]
[105.59757233 178.58909607]
[103.11244965 163.79638672]
[100.62733459 149.00367737]
[98.14221191 134.21096802]
[82.43748474 129.41767883]
[70.76660919 117.86757660]
[65.81021118 102.21356201]
[50.99245071 99.88246155]
[36.17469406 97.55135345]
[21.35693550 95.22025299]
[6.53917646 92.88914490]
[-8.27858162 90.55804443]
[-17.86928368 102.55445862]
[-32.17911911 108.13336182]
[-47.35881805 105.79405212]
[-59.32511139 96.16579437]
[-64.85913086 81.83854675]
[-62.47225571 66.66625214]
[-52.80653763 54.73019791]
[-38.46200562 49.24111176]
[-23.29727364 51.67553711]
[-11.39157200 61.37862015]
[-5.94747782 75.74028778]
[8.87028027 78.07138824]
[23.68803787 80.40249634]
[38.50579834 82.73359680]
[53.32355499 85.06470490]
[68.14131165 87.39580536]
[70.30915070 80.80611420]
[73.85978699 74.60034943]
[78.72162628 69.07144928]
[84.76068115 64.49803162]
[91.78370667 61.13109589]
[88.07754517 46.59616089]
[72.99005127 46.42372513]
[58.46153259 42.35129547]
[45.48258209 34.65654373]
[34.93812180 23.86410332]
[27.54709053 10.70982265]
[23.81342125 -3.90941548]
[23.99168205 -18.99684906]
[28.06971741 -33.52378845]
[35.76948166 -46.49976730]
[46.56599426 -57.04006195]
[59.72312546 -64.42601013]
[74.34380341 -68.15403748]
[89.43116760 -67.96994781]
[103.95653534 -63.88630676]
[116.92954254 -56.18153000]
[127.46566010 -45.38095093]
[134.84652710 -32.22097015]
[138.56890869 -17.59885216]
[138.37899780 -2.51156044]
[134.28974915 12.01222801]
[126.57996368 24.98225784]
[115.77531433 35.51420975]
[102.61248779 42.88999939]
[106.31864929 57.42493439]
[120.54542542 62.17874908]
[132.24505615 52.79158783]
[143.94467163 43.40442657]
[155.64430237 34.01726532]
[167.34391785 24.63010216]
[153.05433655 20.06854439]
[147.51260376 6.12977934]
[154.76927185 -6.99808168]
[169.52030945 -9.71963596]
[180.98390198 -0.04564699]
[180.78137207 14.95239067]
[193.39250183 6.83084822]
[206.00363159 -1.29069400]
[218.61476135 -9.41223621]
[231.22589111 -17.53377914]
[238.24136353 -32.35656738]
[254.60583496 -33.42251205]
[263.48492432 -19.63506126]
[255.74459839 -5.17756271]
[239.34742737 -4.92265034]
[226.73629761 3.19889212]
[214.12516785 11.32043457]
[201.51405334 19.44197655]
[188.90292358 27.56351852]
[176.73107910 36.32972717]
[165.03146362 45.71688843]
[153.33183289 55.10404968]
[141.63221741 64.49121094]
[129.93258667 73.87837219]
[137.24134827 90.79869843]
[135.99430847 108.54459381]
[127.05677795 123.17938232]
[112.93492126 131.72584534]
[115.42003632 146.51855469]
[117.90515900 161.31126404]
[120.39027405 176.10397339]
[122.87539673 190.89668274]
[125.36051178 205.68939209]
[135.24940491 194.41065979]
[150.20333862 193.23588562]
[161.73214722 202.83206177]
[163.29029846 217.75091553]
[153.99316406 229.52220154]
[139.11921692 231.46273804]
[127.11240387 222.46943665]
[130.37631226 228.33921814]
[130.16781616 234.10011292]
[127.43744659 238.09016418]
[127.43744659 253.09016418]
[127.43744659 268.09017944]
[127.43744659 283.09017944]
[127.43744659 298.09017944]
[127.43744659 313.09017944]
[127.43744659 328.09017944]
[127.43744659 343.09017944]
[127.43744659 358.09017944]
[127.43744659 373.09017944]
[127.43744659 388.09017944]
[141.97732544 392.15148926]
[154.88171387 399.98599243]
[165.19299316 411.01232910]
[172.14601135 424.41226196]
[175.22482300 439.19140625]
[174.20092773 454.25308228]
[169.15032959 468.47961426]
[160.44779968 480.81527710]
[148.73913574 490.34469604]
[134.89320374 496.36071777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 127]
[23 120]
[24 119]
[25 118]
[26 117]
[27 116]
[28 115]
[31 52]
[32 51]
[33 50]
[34 49]
[35 48]
[36 47]
[57 82]
[58 81]
[83 111]
[84 110]
[85 109]
[86 108]
[87 107]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
