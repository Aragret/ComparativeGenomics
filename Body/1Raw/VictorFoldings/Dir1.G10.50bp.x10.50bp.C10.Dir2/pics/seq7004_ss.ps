%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCACUAGGGGGGGGGGGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUxxxxxxxxxxUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCCCCCCCCCCCUCAUCGCUA\
) } def
/len { sequence length } bind def

/coor [
[85.99156952 352.59313965]
[72.14562988 346.57711792]
[60.43696976 337.04769897]
[51.73444366 324.71203613]
[46.68384171 310.48550415]
[45.65995026 295.42382812]
[48.73875046 280.64465332]
[55.69177246 267.24472046]
[66.00305939 256.21841431]
[78.90744019 248.38389587]
[93.44732666 244.32258606]
[93.44732666 229.32258606]
[93.44732666 214.32258606]
[93.44732666 199.32258606]
[93.44732666 184.32258606]
[93.44732666 169.32258606]
[93.44732666 154.32258606]
[93.44732666 139.32258606]
[93.44732666 124.32257843]
[93.44732666 109.32257843]
[91.03742218 108.77864838]
[88.63399506 107.64188385]
[73.64129639 108.10992432]
[58.64859772 108.57796478]
[43.89145660 150.77877808]
[29.47924042 154.93666077]
[15.06702423 159.09454346]
[0.65480798 163.25242615]
[-8.32780838 176.54499817]
[-24.33163643 177.66618347]
[-35.07990646 165.75593567]
[-32.32746887 149.95074463]
[-18.18575478 142.37503052]
[-3.50307941 148.84020996]
[10.90913677 144.68232727]
[25.32135201 140.52444458]
[39.73357010 136.36656189]
[39.57751846 121.36669922]
[39.42149734 106.36817932]
[24.92589951 102.51101685]
[10.43030262 98.65386200]
[-4.06529427 94.79669952]
[-20.92658615 96.56678009]
[-27.29516220 80.85444641]
[-13.95986652 70.38514709]
[-0.20813473 80.30110168]
[14.28746223 84.15826416]
[28.78305817 88.01541901]
[43.27865601 91.87258148]
[58.18055725 93.58527374]
[73.17325592 93.11722565]
[88.16594696 92.64918518]
[101.55223083 85.88107300]
[110.81718445 74.08443451]
[99.81935120 63.87133789]
[89.70248413 52.78492737]
[80.53569031 40.90093231]
[72.38157654 28.30053329]
[65.29586029 15.06980610]
[59.32693863 1.29913092]
[54.51558685 -12.91742325]
[50.89466858 -27.48274231]
[48.48892212 -42.29732513]
[47.31478119 -57.25997543]
[47.38026428 -72.26848602]
[48.68492889 -87.22032166]
[51.21985626 -102.01334381]
[54.96773529 -116.54651642]
[59.90296173 -130.72053528]
[65.99182129 -144.43861389]
[73.19271851 -157.60699463]
[81.45647430 -170.13577271]
[90.72662354 -181.93931580]
[100.93984985 -192.93702698]
[112.02637482 -203.05375671]
[123.91048431 -212.22041321]
[136.51097107 -220.37437439]
[149.74179077 -227.45993042]
[163.51254272 -233.42869568]
[177.72914124 -238.23988342]
[192.29450989 -241.86062622]
[207.10911560 -244.26618958]
[222.07179260 -245.44015503]
[237.08029175 -245.37449646]
[252.03211975 -244.06965637]
[266.82510376 -241.53454590]
[281.35824585 -237.78649902]
[295.53219604 -232.85110474]
[309.25018311 -226.76208496]
[322.41848755 -219.56101990]
[334.94717407 -211.29711914]
[346.75061035 -202.02682495]
[357.74819946 -191.81347656]
[367.86480713 -180.72682190]
[377.03131104 -168.84260559]
[385.18511963 -156.24201965]
[392.27053833 -143.01112366]
[398.23913574 -129.24029541]
[403.05014038 -115.02362823]
[406.67071533 -100.45822906]
[409.07611084 -85.64358521]
[410.24987793 -70.68090820]
[410.18405151 -55.67240143]
[408.87902832 -40.72059631]
[406.34375000 -25.92762947]
[402.59552002 -11.39455223]
[397.65994263 2.77935910]
[391.57077026 16.49728012]
[384.36953735 29.66550064]
[376.10549927 42.19406891]
[366.83508301 53.99739838]
[356.62158203 64.99486542]
[345.53482056 75.11133575]
[333.65048218 84.27770996]
[321.04980469 92.43136597]
[307.81881714 99.51660919]
[294.04794312 105.48504639]
[279.83120728 110.29589081]
[265.26574707 113.91628265]
[250.45108032 116.32150269]
[235.48838806 117.49510956]
[220.47988892 117.42908478]
[205.52809143 116.12388611]
[190.73516846 113.58843231]
[176.20213318 109.84003448]
[162.02827454 104.90430450]
[148.31042480 98.81494904]
[135.14228821 91.61357880]
[122.61382294 83.34938049]
[113.34887695 95.14601898]
[108.44732666 109.32257843]
[108.44732666 124.32257843]
[108.44732666 139.32258606]
[108.44732666 154.32258606]
[108.44732666 169.32258606]
[108.44732666 184.32258606]
[108.44732666 199.32258606]
[108.44732666 214.32258606]
[108.44732666 229.32258606]
[108.44732666 244.32258606]
[122.98721313 248.38389587]
[135.89158630 256.21841431]
[146.20288086 267.24472046]
[153.15589905 280.64465332]
[156.23469543 295.42382812]
[155.21080017 310.48550415]
[150.16020203 324.71203613]
[141.45767212 337.04769897]
[129.74902344 346.57711792]
[115.90307617 352.59313965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 52]
[23 51]
[24 50]
[25 37]
[26 36]
[27 35]
[28 34]
[39 49]
[40 48]
[41 47]
[42 46]
[53 130]
[54 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
