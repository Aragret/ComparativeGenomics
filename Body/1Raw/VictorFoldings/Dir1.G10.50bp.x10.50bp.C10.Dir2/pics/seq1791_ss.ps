%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAAGCACCGGGGGGGGGGCAACUUACACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACxxxxxxxxxxACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCCCCCCCCCCCACAAAGCGCC\
) } def
/len { sequence length } bind def

/coor [
[62.99296188 641.97491455]
[48.97101974 636.42193604]
[36.77106094 627.55560303]
[27.15999031 615.93328857]
[20.74196434 602.28558350]
[17.92042732 587.47039795]
[18.87274361 572.41900635]
[23.53904915 558.07757568]
[31.62601471 545.34765625]
[42.62528992 535.02935791]
[55.84544754 527.77142334]
[70.45545959 524.02996826]
[70.45545959 509.02996826]
[70.45545959 494.02996826]
[70.45545959 479.02996826]
[70.45545959 464.02996826]
[70.45545959 449.02996826]
[70.45545959 434.02996826]
[70.45545959 419.02996826]
[70.45545959 404.02996826]
[70.45545959 389.02996826]
[56.76599503 384.94897461]
[44.77282333 377.15951538]
[35.45716858 366.28814697]
[29.58421898 353.21401978]
[27.64028740 338.99768066]
[29.79254532 324.79528809]
[35.87468719 311.76431274]
[45.39975739 300.96939087]
[57.59910583 293.29522705]
[71.48442841 289.37417603]
[71.79241180 274.37731934]
[72.10038757 259.38049316]
[59.44149780 267.42739868]
[45.19042206 262.74691772]
[39.76760101 248.76145935]
[47.13822174 235.69723511]
[61.91286087 233.10685730]
[73.28798676 242.88386536]
[75.13130951 227.99755859]
[76.97463226 213.11125183]
[78.81796265 198.22494507]
[80.66128540 183.33863831]
[73.45928192 173.57168579]
[74.91432953 161.11959839]
[84.78639221 152.75622559]
[86.93496704 137.91090393]
[89.08354950 123.06558228]
[78.79631805 114.19837189]
[74.51519012 101.30936432]
[77.45282745 88.04947662]
[86.77713013 78.17465973]
[83.11842346 63.62770462]
[79.45971680 49.08074951]
[75.80101013 34.53379440]
[60.77062607 35.29126740]
[45.88131332 33.10159683]
[31.70538330 28.04895782]
[18.78771400 20.32755280]
[7.62483215 10.23417473]
[-1.35419464 -1.84321380]
[-7.80423498 -15.44039059]
[-11.47736740 -30.03471565]
[-12.23240471 -45.06522369]
[-10.04032707 -59.95417786]
[-4.98539162 -74.12929535]
[2.73810339 -87.04570770]
[12.83328819 -98.20696259]
[24.91213036 -107.18402863]
[38.51034927 -113.63187408]
[53.10527039 -117.30264282]
[68.13590240 -118.05524445]
[83.02449799 -115.86075592]
[97.19879913 -110.80352783]
[110.11396027 -103.07794189]
[121.27357483 -92.98094940]
[130.24868774 -80.90065765]
[136.69433594 -67.30139160]
[140.36274719 -52.70587921]
[141.11291504 -37.67512894]
[138.91601562 -22.78688431]
[133.85649109 -8.61340714]
[126.12881470 4.30051041]
[116.03002167 15.45849133]
[103.94827271 24.43165207]
[90.34796143 30.87508965]
[94.00666809 45.42204285]
[97.66537476 59.96899796]
[101.32408142 74.51595306]
[106.82003021 75.40981293]
[111.99125671 77.47446442]
[116.59156036 80.61160278]
[129.26307678 72.58460236]
[141.93458557 64.55760956]
[154.60610962 56.53060913]
[153.29891968 41.28102493]
[159.23898315 27.17520332]
[171.06132507 17.45455933]
[186.04924011 14.35282707]
[200.75863647 18.58275986]
[211.80938721 29.17235184]
[216.66212463 43.68819046]
[214.20170593 58.79464722]
[204.99353027 71.02036285]
[191.15356445 77.55595398]
[175.86213684 76.89960480]
[162.63310242 69.20212555]
[149.96159363 77.22912598]
[137.29006958 85.25611877]
[124.61856079 93.28311920]
[121.41580963 113.87635040]
[103.92887115 125.21415710]
[101.78029633 140.05947876]
[99.63171387 154.90480042]
[106.86769867 171.80661011]
[95.54759216 185.18196106]
[93.70426941 200.06826782]
[91.86094666 214.95457458]
[90.01761627 229.84088135]
[88.17429352 244.72718811]
[87.09722137 259.68847656]
[86.78924561 274.68530273]
[86.48126984 289.68212891]
[101.41926575 294.79815674]
[114.03554535 304.26043701]
[123.10713196 317.13677979]
[127.75926971 332.16479492]
[127.54977417 347.87561035]
[122.51103210 362.73751831]
[113.14569092 375.30520630]
[100.37650299 384.36041260]
[85.45545959 389.02996826]
[85.45545959 404.02996826]
[85.45545959 419.02996826]
[85.45545959 434.02996826]
[85.45545959 449.02996826]
[85.45545959 464.02996826]
[85.45545959 479.02996826]
[85.45545959 494.02996826]
[85.45545959 509.02996826]
[85.45545959 524.02996826]
[100.06547546 527.77142334]
[113.28563690 535.02935791]
[124.28490448 545.34765625]
[132.37187195 558.07757568]
[137.03817749 572.41900635]
[137.99049377 587.47039795]
[135.16896057 602.28558350]
[128.75093079 615.93328857]
[119.13986206 627.55560303]
[106.93990326 636.42193604]
[92.91796112 641.97491455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[31 123]
[32 122]
[33 121]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[46 114]
[47 113]
[48 112]
[52 89]
[53 88]
[54 87]
[55 86]
[92 110]
[93 109]
[94 108]
[95 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
