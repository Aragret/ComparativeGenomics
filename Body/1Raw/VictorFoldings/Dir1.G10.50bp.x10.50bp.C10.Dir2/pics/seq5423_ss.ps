%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACUACUGGGGGGGGGGAUCUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCAxxxxxxxxxxCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCU\
) } def
/len { sequence length } bind def

/coor [
[84.34654236 374.94754028]
[71.12634277 367.67507935]
[60.23953629 357.22805786]
[52.42840576 344.31881714]
[48.22552490 329.82748413]
[47.91745377 314.74215698]
[51.52519608 300.09133911]
[58.80276871 286.87393188]
[69.25397491 275.99118042]
[82.16623688 268.18502808]
[96.65917206 263.98773193]
[96.34711456 248.99099731]
[96.03506470 233.99423218]
[95.72300720 218.99748230]
[95.41094971 204.00073242]
[95.09889221 189.00398254]
[94.78683472 174.00721741]
[94.47477722 159.01046753]
[94.16272736 144.01371765]
[93.85066986 129.01696777]
[77.25562286 114.43737793]
[76.42416382 94.46047211]
[88.88094330 81.60296631]
[86.08862305 66.86515808]
[83.29629517 52.12735367]
[80.50396729 37.38954926]
[65.60267639 39.15935135]
[50.61479568 39.89688110]
[35.61173630 39.59861374]
[20.66500664 38.26597214]
[5.84583235 35.90531540]
[-8.77516747 32.52788162]
[-23.12831497 28.14977455]
[-37.14521027 22.79185486]
[-50.75905609 16.47965431]
[-63.90497589 9.24325657]
[-76.52032471 1.11714447]
[-88.54497528 -7.85995579]
[-99.92163849 -17.64526367]
[-110.59609222 -28.19215012]
[-120.51745605 -39.45034790]
[-129.63847351 -51.36621475]
[-137.91564941 -63.88295746]
[-145.30957031 -76.94093323]
[-151.78497314 -90.47791290]
[-157.31101990 -104.42938232]
[-161.86135864 -118.72885895]
[-165.41432190 -133.30819702]
[-167.95297241 -148.09791565]
[-169.46519470 -163.02755737]
[-169.94381714 -178.02593994]
[-169.38652039 -193.02160645]
[-167.79598999 -207.94309998]
[-165.17979431 -222.71929932]
[-161.55038452 -237.27980042]
[-156.92509460 -251.55520630]
[-151.32592773 -265.47747803]
[-144.77958679 -278.98031616]
[-137.31727600 -291.99932861]
[-128.97453308 -304.47247314]
[-119.79113770 -316.34030151]
[-109.81083679 -327.54629517]
[-99.08119965 -338.03704834]
[-87.65336609 -347.76254272]
[-75.58177948 -356.67642212]
[-62.92397308 -364.73623657]
[-49.74026871 -371.90356445]
[-36.09349442 -378.14425659]
[-22.04868317 -383.42858887]
[-7.67276430 -387.73132324]
[6.96575260 -391.03201294]
[21.79710770 -393.31488037]
[36.75062561 -394.56909180]
[51.75503922 -394.78863525]
[66.73885345 -393.97250366]
[81.63065338 -392.12454224]
[96.35947418 -389.25357056]
[110.85513306 -385.37329102]
[125.04854584 -380.50219727]
[138.87207031 -374.66345215]
[152.25984192 -367.88491821]
[165.14804077 -360.19891357]
[177.47526550 -351.64202881]
[189.18276978 -342.25509644]
[200.21476746 -332.08276367]
[210.51866150 -321.17358398]
[220.04536438 -309.57949829]
[228.74948120 -297.35580444]
[236.58952332 -284.56069946]
[243.52813721 -271.25521851]
[249.53225708 -257.50271606]
[254.57325745 -243.36874390]
[258.62713623 -228.92066956]
[261.67453003 -214.22734070]
[263.70098877 -199.35877991]
[264.69677734 -184.38583374]
[264.65722656 -169.37986755]
[263.58245850 -154.41238403]
[261.47763062 -139.55471802]
[258.35275269 -124.87766266]
[254.22274780 -110.45116425]
[249.10726929 -96.34398651]
[243.03071594 -82.62333679]
[236.02203369 -69.35461426]
[228.11460876 -56.60105133]
[219.34614563 -44.42341995]
[209.75842285 -32.87975311]
[199.39714050 -22.02506065]
[188.31166077 -11.91107368]
[176.55480957 -2.58598900]
[164.18261719 5.90575409]
[151.25405884 13.52368832]
[137.83073425 20.23151016]
[123.97660065 25.99725533]
[109.75769806 30.79344559]
[95.24177551 34.59722519]
[98.03410339 49.33502960]
[100.82642365 64.07283783]
[103.61875153 78.81063843]
[121.51848602 86.17146301]
[128.66990662 107.60489655]
[141.91250610 114.65003204]
[157.61395264 111.35704803]
[169.88591003 121.69042969]
[169.31434631 137.72329712]
[156.33775330 147.15660095]
[140.91062927 142.75392151]
[134.86737061 127.89261627]
[121.62477875 120.84748077]
[108.84741974 128.70491028]
[109.15947723 143.70166016]
[109.47153473 158.69841003]
[109.78359222 173.69515991]
[110.09564972 188.69192505]
[110.40769958 203.68867493]
[110.71975708 218.68542480]
[111.03181458 233.68217468]
[111.34387207 248.67893982]
[111.65592957 263.67568970]
[126.31092072 267.26644897]
[139.53672791 274.52871704]
[150.43159485 284.96731567]
[158.25270081 297.87051392]
[162.46676636 312.35858154]
[162.78648376 327.44369507]
[159.19006348 342.09729004]
[151.92269897 355.32028198]
[141.47988892 366.21112061]
[128.57366943 374.02725220]
[114.08397675 378.23571777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 119]
[24 118]
[25 117]
[26 116]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
