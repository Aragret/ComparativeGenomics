%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUCUUCGGGGGGGGGGAACUCCUACAUACUUCCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUxxxxxxxxxxCGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCUCUAUCCCCCCCCCCACUAAUCUCC\
) } def
/len { sequence length } bind def

/coor [
[59.59689331 441.99642944]
[45.75095367 435.98040771]
[34.04229355 426.45098877]
[25.33976936 414.11532593]
[20.28916740 399.88879395]
[19.26527596 384.82711792]
[22.34407425 370.04794312]
[29.29709625 356.64801025]
[39.60837936 345.62167358]
[52.51276016 337.78717041]
[67.05265045 333.72586060]
[67.05265045 318.72586060]
[67.05265045 303.72586060]
[67.05265045 288.72586060]
[67.05265045 273.72586060]
[67.05265045 258.72586060]
[67.05265045 243.72586060]
[67.05265045 228.72586060]
[67.05265045 213.72586060]
[67.05265045 198.72586060]
[67.05265045 183.72586060]
[59.17650604 196.49169922]
[48.78444290 207.30857849]
[36.34424973 215.68960571]
[22.41591263 221.25749207]
[7.62641191 223.76162720]
[-7.35851145 223.08926392]
[-21.86431885 219.27069092]
[-35.23804092 212.47778320]
[-46.87766266 203.01632690]
[-56.25923538 191.31222534]
[-62.96044922 177.89231873]
[-66.67965698 163.36071777]
[-67.24943542 148.37153625]
[-64.64414215 133.59953308]
[-58.98104858 119.70962524]
[-50.51507568 107.32707977]
[-39.62731934 97.00929260]
[-26.80788231 89.22071075]
[-12.63382530 84.31193542]
[2.25681281 82.50392151]
[17.19373703 83.87806702]
[31.50457191 88.37251282]
[44.54512024 95.78494263]
[55.72836685 105.78169250]
[64.55091095 117.91275787]
[70.61560059 131.63206482]
[73.64944458 146.32205200]
[73.51560211 161.32373047]
[81.50552368 148.62879944]
[89.49543762 135.93386841]
[97.48535156 123.23894501]
[86.06008911 122.13754272]
[75.39241028 115.24485016]
[68.42655945 103.18282318]
[67.61725616 88.04295349]
[74.22064972 73.03398895]
[71.12232971 58.35746765]
[68.02400970 43.68094254]
[64.92568970 29.00441551]
[49.86450195 27.84795761]
[35.73970032 22.49382973]
[23.69631958 13.37606525]
[14.71065903 1.23380029]
[9.51114750 -12.94864559]
[8.51928616 -28.02156448]
[11.81548023 -42.76306152]
[19.13252258 -55.97811508]
[29.87725258 -66.59542847]
[43.17864609 -73.75431824]
[57.95841217 -76.87443542]
[73.01842499 -75.70285034]
[87.13784027 -70.33453369]
[99.17205811 -61.20467377]
[108.14551544 -49.05339050]
[113.33078003 -34.86572647]
[114.30749512 -19.79182053]
[110.99649048 -5.05363989]
[103.66617584 8.15405369]
[92.91078949 18.76057243]
[79.60221100 25.90609360]
[82.70053101 40.58261871]
[85.79885864 55.25914383]
[88.89717865 69.93566895]
[95.72529602 73.03837585]
[100.04256439 58.67309570]
[97.71585846 43.85464859]
[107.44196320 32.43523407]
[122.44183350 32.37412262]
[132.26066589 43.71390152]
[130.05477905 58.55081940]
[117.36289978 66.54347229]
[109.38153839 79.24378204]
[116.20965576 82.34648132]
[129.30281067 75.02738190]
[142.39596558 67.70827484]
[155.48912048 60.38916779]
[158.23997498 44.99543762]
[170.27520752 35.01110077]
[185.91217041 35.15045166]
[197.76756287 45.34769440]
[200.24362183 60.78800201]
[192.17123413 74.18093109]
[177.36193848 79.20275879]
[162.80822754 73.48232269]
[149.71507263 80.80142975]
[136.62191772 88.12052917]
[123.52876282 95.43963623]
[126.16763306 110.20569611]
[140.98538208 112.53679657]
[149.23091125 99.73323822]
[161.97480774 91.39579010]
[177.00910950 88.96897125]
[191.72904968 92.87323761]
[203.58430481 102.43215942]
[210.52087402 115.98959351]
[211.33694458 131.19662476]
[205.89115906 145.41854858]
[195.12699890 156.19132996]
[180.90943909 161.64852905]
[165.70176697 160.84463501]
[152.13877869 153.91894531]
[142.57035828 142.07136536]
[138.65428162 127.35455322]
[123.83652496 125.02345276]
[110.18028259 131.22886658]
[102.19036865 143.92378235]
[94.20045471 156.61871338]
[86.21053314 169.31364441]
[82.05265045 183.72586060]
[82.05265045 198.72586060]
[82.05265045 213.72586060]
[82.05265045 228.72586060]
[82.05265045 243.72586060]
[82.05265045 258.72586060]
[82.05265045 273.72586060]
[82.05265045 288.72586060]
[82.05265045 303.72586060]
[82.05265045 318.72586060]
[82.05265045 333.72586060]
[96.59253693 337.78717041]
[109.49691772 345.62167358]
[119.80819702 356.64801025]
[126.76122284 370.04794312]
[129.84002686 384.82711792]
[128.81613159 399.88879395]
[123.76552582 414.11532593]
[115.06300354 426.45098877]
[103.35433960 435.98040771]
[89.50839996 441.99642944]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[49 129]
[50 128]
[51 127]
[52 126]
[57 84]
[58 83]
[59 82]
[60 81]
[94 108]
[95 107]
[96 106]
[97 105]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
