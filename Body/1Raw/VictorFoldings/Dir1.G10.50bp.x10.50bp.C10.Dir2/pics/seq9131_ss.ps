%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACAAUUUGGGGGGGGGGUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUxxxxxxxxxxCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCACCCCCCCCCCAUUACAAUAU\
) } def
/len { sequence length } bind def

/coor [
[76.77067566 380.60122681]
[62.92473984 374.58520508]
[51.21607590 365.05578613]
[42.51355362 352.72012329]
[37.46295166 338.49359131]
[36.43906021 323.43191528]
[39.51785660 308.65277100]
[46.47087860 295.25283813]
[56.78216553 284.22650146]
[69.68654633 276.39199829]
[84.22643280 272.33068848]
[84.22643280 257.33068848]
[84.22643280 242.33067322]
[84.22643280 227.33067322]
[84.22643280 212.33067322]
[84.22643280 197.33067322]
[84.22643280 182.33067322]
[84.22643280 167.33067322]
[84.22643280 152.33067322]
[84.22643280 137.33067322]
[84.22643280 122.33067322]
[79.23966217 109.98974609]
[81.29460144 98.89823914]
[87.81575775 92.25621033]
[95.16448975 91.09196472]
[92.98765564 76.25075531]
[90.81081390 61.40955353]
[75.84880066 62.55795288]
[60.84321213 62.67136765]
[45.86554718 61.74925613]
[30.98719215 59.79600906]
[16.27904510 56.82093811]
[1.81119680 52.83821869]
[-12.34740353 47.86682892]
[-26.12928581 41.93046570]
[-39.46876907 35.05741501]
[-52.30228806 27.28042984]
[-64.56867981 18.63657188]
[-76.20949554 9.16703510]
[-87.16925049 -1.08305573]
[-97.39572906 -12.06485271]
[-106.84018707 -23.72602081]
[-115.45761871 -36.01099014]
[-123.20696259 -48.86122131]
[-130.05128479 -62.21546555]
[-135.95797729 -76.01009369]
[-140.89886475 -90.17935944]
[-144.85043335 -104.65574646]
[-147.79383850 -119.37026978]
[-149.71505737 -134.25279236]
[-150.60493469 -149.23240662]
[-150.45922852 -164.23771667]
[-149.27861023 -179.19721985]
[-147.06874084 -194.03964233]
[-143.84014893 -208.69421387]
[-139.60818481 -223.09114075]
[-134.39306641 -237.16178894]
[-128.21960449 -250.83909607]
[-121.11723328 -264.05792236]
[-113.11980438 -276.75521851]
[-104.26541901 -288.87054443]
[-94.59628296 -300.34609985]
[-84.15847778 -311.12722778]
[-73.00173187 -321.16253662]
[-61.17921448 -330.40423584]
[-48.74727249 -338.80825806]
[-35.76514816 -346.33456421]
[-22.29470634 -352.94726562]
[-8.40014172 -358.61486816]
[5.85233212 -363.31036377]
[20.39479446 -367.01135254]
[35.15794373 -369.70022583]
[50.07142639 -371.36419678]
[65.06417084 -371.99526978]
[80.06473541 -371.59045410]
[95.00162506 -370.15173340]
[109.80365753 -367.68588257]
[124.40030670 -364.20471191]
[138.72200012 -359.72479248]
[152.70050049 -354.26745605]
[166.26918030 -347.85876465]
[179.36337280 -340.52917480]
[191.92070007 -332.31369019]
[203.88130188 -323.25143433]
[215.18818665 -313.38558960]
[225.78747559 -302.76315308]
[235.62866211 -291.43478394]
[244.66482544 -279.45446777]
[252.85290527 -266.87927246]
[260.15390015 -253.76910400]
[266.53302002 -240.18649292]
[271.95986938 -226.19612122]
[276.40853882 -211.86470032]
[279.85787964 -197.26049805]
[282.29144287 -182.45312500]
[283.69763184 -167.51312256]
[284.06970215 -152.51171875]
[283.40594482 -137.52038574]
[281.70950317 -122.61056519]
[278.98843384 -107.85331726]
[275.25573730 -93.31895447]
[270.52917480 -79.07675171]
[264.83129883 -65.19458008]
[258.18923950 -51.73858643]
[250.63465881 -38.77289963]
[242.20355225 -26.35931015]
[232.93611145 -14.55697346]
[222.87649536 -3.42213225]
[212.07263184 6.99214935]
[200.57601929 16.63624191]
[188.44143677 25.46418762]
[175.72671509 33.43391800]
[162.49244690 40.50744629]
[148.80169678 46.65107346]
[134.71972656 51.83551788]
[120.31360626 56.03606796]
[105.65202332 59.23271561]
[107.82885742 74.07392120]
[110.00569916 88.91512299]
[118.77190399 101.08695984]
[132.15818787 107.85507965]
[145.54447937 114.62319183]
[161.87947083 113.17406464]
[171.07920837 126.74966431]
[163.67977905 141.38458252]
[147.29309082 142.02365112]
[138.77635193 128.00947571]
[125.39007568 121.24136353]
[112.00379181 114.47325134]
[99.22643280 122.33067322]
[99.22643280 137.33067322]
[99.22643280 152.33067322]
[99.22643280 167.33067322]
[99.22643280 182.33067322]
[99.22643280 197.33067322]
[99.22643280 212.33067322]
[99.22643280 227.33067322]
[99.22643280 242.33067322]
[99.22643280 257.33068848]
[99.22643280 272.33068848]
[113.76631927 276.39199829]
[126.67070007 284.22650146]
[136.98197937 295.25283813]
[143.93501282 308.65277100]
[147.01380920 323.43191528]
[145.98991394 338.49359131]
[140.93931580 352.72012329]
[132.23678589 365.05578613]
[120.52812195 374.58520508]
[106.68218994 380.60122681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 119]
[26 118]
[27 117]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
