%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAACCCCUAGGGGGGGGGGCGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGxxxxxxxxxxCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCCCCCCCCCCCUAAAUCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[47.48339844 493.32809448]
[33.32279587 488.17309570]
[20.73305130 479.89089966]
[10.39311314 468.92810059]
[2.86060190 455.87597656]
[-1.45826340 441.43838501]
[-2.33057213 426.39392090]
[0.29071835 411.55392456]
[6.26424503 397.71868896]
[15.26786327 385.63433838]
[26.81601906 375.95257568]
[40.28593445 369.19549561]
[54.95119476 365.72750854]
[54.95119476 350.72750854]
[54.95119476 335.72750854]
[54.95119476 320.72750854]
[54.95119476 305.72750854]
[54.95119476 290.72750854]
[54.95119476 275.72750854]
[54.95119476 260.72750854]
[54.95119476 245.72752380]
[54.95119476 230.72752380]
[54.95119476 215.72752380]
[54.95119476 200.72752380]
[46.26822662 212.95887756]
[33.19524384 220.31394958]
[18.23356438 221.38546753]
[4.24587488 215.96839905]
[-6.09149504 205.09924316]
[-10.80064869 190.85762024]
[-8.98056221 175.96844482]
[-0.97948110 163.28054810]
[11.67171097 155.22155762]
[26.55240250 153.33343506]
[40.81540298 157.97744751]
[51.73170471 168.26502991]
[57.21234131 182.22586060]
[60.82477951 167.66734314]
[55.04907608 151.12258911]
[67.86374664 137.93682861]
[71.18038940 123.30809021]
[64.30289459 109.97766876]
[50.45928955 104.20232391]
[34.74397659 106.02975464]
[25.97692490 93.98865509]
[12.13332081 88.21331024]
[-4.05277920 90.84812164]
[-14.21668053 77.97850037]
[-7.90263319 62.84360886]
[8.39401150 61.01293182]
[17.90866280 74.36970520]
[31.75226974 80.14505005]
[46.47739410 77.90453339]
[56.23463440 90.35871887]
[70.07823944 96.13406372]
[74.40163422 86.73201752]
[81.40182495 79.75000763]
[89.97809601 75.83940125]
[98.92069244 75.20469666]
[102.82744598 60.72238922]
[106.73419189 46.24007797]
[110.64094543 31.75777054]
[99.86225891 42.18944550]
[86.70450592 49.39177322]
[72.10852814 52.84974670]
[57.11802673 52.31610489]
[42.80488968 47.82900620]
[30.19257736 39.70930099]
[20.18293953 28.53759003]
[13.49171448 15.11270523]
[10.59735966 0.39459711]
[11.70683479 -14.56431580]
[16.74080849 -28.69439316]
[25.33932495 -40.98526382]
[36.88754654 -50.55806732]
[50.55971527 -56.72830200]
[65.37820435 -59.05475998]
[80.28341675 -57.37108994]
[94.20954132 -51.79767990]
[106.16081238 -42.73306274]
[115.28263092 -30.82540321]
[120.92275238 -16.92615700]
[122.67787170 -2.02919197]
[120.42369080 12.79618740]
[129.96160889 1.21913314]
[139.49952698 -10.35792065]
[149.03744507 -21.93497467]
[152.10478210 -30.60288048]
[158.88786316 -33.64744949]
[168.65844727 -45.02882385]
[164.14549255 -59.78133774]
[168.34675598 -74.62562561]
[179.92163086 -84.82493591]
[195.17662048 -87.12469482]
[209.24391174 -80.79106140]
[217.63467407 -67.84507751]
[217.67146301 -52.41775894]
[209.34252930 -39.43190765]
[195.30560303 -33.03125763]
[180.03982544 -35.25823593]
[170.26924133 -23.87686348]
[160.61448669 -12.39706039]
[151.07658386 -0.82000637]
[141.53866577 10.75704765]
[132.00074768 22.33410263]
[125.12325287 35.66452408]
[121.21650696 50.14683151]
[117.30975342 64.62914276]
[113.40299988 79.11145020]
[119.92994690 85.20915985]
[123.87549591 93.22263336]
[138.86856079 93.67859650]
[153.86163330 94.13456726]
[164.13706970 82.34688568]
[179.59341431 79.97300720]
[192.93266296 88.13380432]
[197.85641479 102.97599792]
[192.03984070 117.49155426]
[178.22933960 124.82667542]
[162.94580078 121.51794434]
[153.40565491 109.12763214]
[138.41259766 108.67166901]
[123.41952515 108.21569824]
[109.99000549 125.61550903]
[85.80912018 126.62473297]
[82.49248505 141.25346375]
[88.70923615 152.59835815]
[85.60520172 164.74290466]
[75.38329315 171.27978516]
[71.77085114 185.83830261]
[69.95119476 200.72752380]
[69.95119476 215.72752380]
[69.95119476 230.72752380]
[69.95119476 245.72752380]
[69.95119476 260.72750854]
[69.95119476 275.72750854]
[69.95119476 290.72750854]
[69.95119476 305.72750854]
[69.95119476 320.72750854]
[69.95119476 335.72750854]
[69.95119476 350.72750854]
[69.95119476 365.72750854]
[84.61645508 369.19549561]
[98.08637238 375.95257568]
[109.63452911 385.63433838]
[118.63814545 397.71868896]
[124.61167145 411.55392456]
[127.23296356 426.39392090]
[126.36065674 441.43838501]
[122.04179382 455.87597656]
[114.50927734 468.92810059]
[104.16934204 479.89089966]
[91.57959747 488.17309570]
[77.41899109 493.32809448]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[37 130]
[38 129]
[40 126]
[41 125]
[42 55]
[43 54]
[45 52]
[46 51]
[59 109]
[60 108]
[61 107]
[62 106]
[84 105]
[85 104]
[86 103]
[87 102]
[89 101]
[90 100]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
