%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAAACACGGGGGGGGGGUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUAxxxxxxxxxxCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUAUAACCCCCCCCCCACUAAUACAC\
) } def
/len { sequence length } bind def

/coor [
[98.28445435 512.35314941]
[84.43851471 506.33709717]
[72.72985077 496.80767822]
[64.02732849 484.47201538]
[58.97672653 470.24548340]
[57.95283508 455.18380737]
[61.03163528 440.40466309]
[67.98465729 427.00473022]
[78.29594421 415.97839355]
[91.20032501 408.14389038]
[105.74021149 404.08258057]
[105.74021149 389.08258057]
[105.74021149 374.08258057]
[105.74021149 359.08258057]
[105.74021149 344.08258057]
[105.74021149 329.08258057]
[105.74021149 314.08258057]
[105.74021149 299.08258057]
[105.74021149 284.08258057]
[105.74021149 269.08258057]
[105.74021149 254.08256531]
[105.11623383 239.09555054]
[93.61466980 229.70143127]
[92.13721466 214.55970764]
[102.06862640 202.55949402]
[100.82175446 187.61140442]
[99.57487488 172.66333008]
[98.32800293 157.71524048]
[96.92569733 142.78092957]
[95.36811829 127.86201477]
[81.42323303 121.27557373]
[73.01685333 108.34601593]
[58.02415466 108.81405640]
[43.03145599 109.28209686]
[31.04304886 119.94313049]
[15.25838661 117.07537842]
[7.78611374 102.87873077]
[14.35831833 88.24365234]
[29.93336678 84.39691162]
[42.56341553 94.28940582]
[57.55611038 93.82135773]
[72.54880524 93.35331726]
[77.24434662 83.26898956]
[85.46961975 75.77987671]
[95.94875336 72.04765320]
[97.81636810 57.16437149]
[99.68398285 42.28109360]
[101.55158997 27.39781189]
[103.41920471 12.51453209]
[89.09870911 7.91458321]
[75.87084961 0.76335669]
[64.18544006 -8.69430923]
[54.43951797 -20.13517570]
[46.96388626 -33.16865158]
[42.01187515 -47.35012817]
[39.75074387 -62.19614792]
[40.25605774 -77.20087433]
[43.50913620 -91.85334778]
[49.39776230 -105.65486145]
[57.72003937 -118.13595581]
[68.19131470 -128.87239075]
[80.45391846 -137.49951172]
[94.08939362 -143.72471619]
[108.63272858 -147.33734131]
[123.58827972 -148.21575928]
[125.45589447 -163.09904480]
[127.32350922 -177.98231506]
[129.19111633 -192.86560059]
[131.05873108 -207.74888611]
[117.35744476 -214.16213989]
[106.30993652 -224.49691772]
[98.99852753 -237.74073792]
[96.13951874 -252.59606934]
[98.01300812 -267.60757446]
[104.43544769 -281.30456543]
[114.77762604 -292.34515381]
[128.02633667 -299.64767456]
[142.88359070 -302.49673462]
[157.89382935 -300.61318970]
[171.58651733 -294.18157959]
[182.62016296 -283.83200073]
[189.91381836 -270.57839966]
[192.75291443 -255.71923828]
[190.85931396 -240.71026611]
[184.41853333 -227.02189636]
[174.06155396 -215.99517822]
[160.80307007 -208.71040344]
[145.94201660 -205.88127136]
[144.07440186 -190.99798584]
[142.20678711 -176.11471558]
[140.33917236 -161.23143005]
[138.47155762 -146.34814453]
[152.74639893 -141.80178833]
[165.94622803 -134.70783997]
[177.62083435 -125.30661774]
[187.37167358 -113.91716003]
[194.86557007 -100.92639160]
[199.84602356 -86.77601624]
[202.14202881 -71.94745636]
[201.67396545 -56.94551468]
[198.45628357 -42.28114700]
[192.59713745 -28.45409203]
[184.29473877 -15.93583202]
[173.83059692 -5.15350819]
[161.56005859 3.52464604]
[147.90017700 9.80188274]
[133.31553650 13.46308613]
[118.30249023 14.38214588]
[116.43487549 29.26542473]
[114.56726074 44.14870453]
[112.69964600 59.03198624]
[110.83203125 73.91526794]
[123.57263184 84.44116974]
[128.24287415 100.29380798]
[123.24385071 116.04586792]
[110.28703308 126.30443573]
[111.84461212 141.22334290]
[115.87108612 149.49615479]
[113.27608490 156.46836853]
[114.52296448 171.41644287]
[115.76983643 186.36453247]
[117.01671600 201.31262207]
[128.79899597 211.50160217]
[129.85057068 226.67886353]
[120.06431580 237.84867859]
[122.76432037 241.43635559]
[124.01435089 245.31044006]
[123.90724945 248.96699524]
[122.69387054 251.98721313]
[120.74021149 254.08256531]
[120.74021149 269.08258057]
[120.74021149 284.08258057]
[120.74021149 299.08258057]
[120.74021149 314.08258057]
[120.74021149 329.08258057]
[120.74021149 344.08258057]
[120.74021149 359.08258057]
[120.74021149 374.08258057]
[120.74021149 389.08258057]
[120.74021149 404.08258057]
[135.28009033 408.14389038]
[148.18447876 415.97839355]
[158.49575806 427.00473022]
[165.44877625 440.40466309]
[168.52758789 455.18380737]
[167.50369263 470.24548340]
[162.45309448 484.47201538]
[153.75056458 496.80767822]
[142.04190063 506.33709717]
[128.19596863 512.35314941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 125]
[25 122]
[26 121]
[27 120]
[28 119]
[29 117]
[30 116]
[32 42]
[33 41]
[34 40]
[45 112]
[46 111]
[47 110]
[48 109]
[49 108]
[65 92]
[66 91]
[67 90]
[68 89]
[69 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
