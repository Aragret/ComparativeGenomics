%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAACGAAAAUGGGGGGGGGGCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUxxxxxxxxxxUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACCCCCCCCCCCAUUAACGAAAAU\
) } def
/len { sequence length } bind def

/coor [
[172.50537109 461.92382812]
[158.80322266 455.66296387]
[146.83810425 446.50961304]
[137.21018982 434.92294312]
[130.40240479 421.48410034]
[126.75624084 406.86721802]
[126.45457458 391.80548096]
[129.51254272 377.05432129]
[135.77674866 363.35366821]
[144.93299866 351.39077759]
[156.52200317 341.76568604]
[169.96246338 334.96115112]
[184.58023071 331.31851196]
[184.27622986 316.32159424]
[183.97222900 301.32467651]
[183.66822815 286.32775879]
[183.36421204 271.33084106]
[183.06021118 256.33392334]
[182.75621033 241.33700562]
[182.45220947 226.34008789]
[182.14819336 211.34317017]
[181.84419250 196.34625244]
[177.35374451 182.03416443]
[169.03599548 169.55157471]
[160.71824646 157.06898499]
[152.40051270 144.58639526]
[144.08276367 132.10380554]
[132.70138550 122.33321381]
[119.03973389 116.13972473]
[105.31602478 110.08499908]
[117.44525909 118.91005707]
[123.22904205 132.75013733]
[120.98582458 147.58145142]
[111.36778259 159.09202576]
[97.17121887 163.93533325]
[82.52356720 160.70326233]
[71.68341064 150.33547974]
[67.80233002 135.84773254]
[53.20795822 132.38301086]
[38.61358643 128.91830444]
[24.01921272 125.45358276]
[10.69799328 133.95773315]
[-4.71665525 130.47003174]
[-13.07949638 117.05963898]
[-9.42900467 101.68272400]
[4.06904793 93.46213531]
[19.40650558 97.27500153]
[27.48392868 110.85920715]
[42.07830048 114.32392883]
[56.67267609 117.78864288]
[71.26705170 121.25335693]
[75.36245728 114.97023773]
[62.79634476 106.77922058]
[70.98755646 94.21323395]
[83.55328369 102.40399170]
[87.64869690 96.12087250]
[78.58778381 84.16680145]
[69.52687073 72.21273041]
[53.83804321 70.30582428]
[44.15866089 57.81241989]
[46.23133087 42.14463043]
[58.82637405 32.59787750]
[74.47137451 34.83608246]
[83.88442993 47.53135300]
[81.48094177 63.15181351]
[90.54185486 75.10588837]
[99.60276794 87.05995941]
[111.37075043 96.36128235]
[125.09445953 102.41600800]
[134.26876831 103.02699280]
[139.03300476 108.73503113]
[130.67710876 96.27794647]
[125.13872528 82.33784485]
[122.66742706 67.54282379]
[123.37454987 52.55950165]
[127.22823334 38.06298065]
[134.05484009 24.70643234]
[143.54679871 13.09166241]
[155.27641296 3.74199820]
[168.71517944 -2.92129278]
[183.25759888 -6.59798241]
[198.24842834 -7.12241030]
[213.01222229 -4.47094727]
[226.88377380 1.23694026]
[239.23808289 9.74407101]
[249.51847839 20.66714096]
[257.26177979 33.51398468]
[262.11904907 47.70576859]
[263.87149048 62.60305023]
[262.44012451 77.53459930]
[257.88946533 91.82764435]
[250.42448425 104.83819580]
[240.38159180 115.98001862]
[228.21327209 124.75111389]
[214.46780396 130.75627136]
[199.76449585 133.72491455]
[184.76585388 133.52328491]
[170.14765930 130.16047668]
[156.56535339 123.78605652]
[164.88310242 136.26864624]
[173.20083618 148.75123596]
[181.51858521 161.23382568]
[189.83633423 173.71641541]
[189.22923279 158.72871399]
[191.69439697 143.93266296]
[197.12799072 129.95138550]
[205.30120850 117.37368774]
[215.86982727 106.72924042]
[228.38879395 98.46633911]
[242.33087158 92.93293762]
[257.10891724 90.36208344]
[272.10058594 90.86204529]
[286.67453003 94.41175079]
[300.21694946 100.86172485]
[312.15759277 109.94033813]
[321.99359131 121.26525116]
[329.31066895 134.35952759]
[333.80068970 148.67175293]
[335.27459717 163.59916687]
[333.67031860 178.51312256]
[329.05538940 192.78555298]
[321.62417603 205.81541443]
[311.68963623 217.05393982]
[299.67010498 226.02787781]
[286.07183838 232.35926819]
[271.46743774 235.78149414]
[256.47198486 236.15043640]
[241.71694946 233.45056152]
[227.82376099 227.79554749]
[215.37747192 219.42356873]
[204.90225220 208.68717957]
[196.84111023 196.04225159]
[197.14511108 211.03916931]
[197.44912720 226.03608704]
[197.75312805 241.03300476]
[198.05712891 256.02993774]
[198.36112976 271.02685547]
[198.66514587 286.02377319]
[198.96914673 301.02069092]
[199.27314758 316.01760864]
[199.57714844 331.01452637]
[214.33052063 334.06176758]
[228.03570557 340.31600952]
[240.00526428 349.46356201]
[249.63879395 361.04556274]
[256.45306396 374.48107910]
[260.10632324 389.09619141]
[260.41528320 404.15780640]
[257.36447144 418.91046143]
[251.10691833 432.61410522]
[241.95646667 444.58145142]
[230.37211609 454.21215820]
[216.93495178 461.02319336]
[202.31895447 464.67291260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 71]
[29 69]
[30 68]
[38 51]
[39 50]
[40 49]
[41 48]
[56 67]
[57 66]
[58 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
