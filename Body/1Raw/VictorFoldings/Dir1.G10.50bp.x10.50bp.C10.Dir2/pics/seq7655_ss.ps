%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUCCUAGGGGGGGGGGGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[85.67684937 649.82464600]
[72.45863342 642.54858398]
[61.57467270 632.09857178]
[53.76705170 619.18719482]
[49.56811142 604.69476318]
[49.26414108 589.60931396]
[52.87586594 574.95947266]
[60.15703583 561.74407959]
[70.61119843 550.86419678]
[83.52558899 543.06152344]
[98.01966095 538.86816406]
[97.71168518 523.87133789]
[97.40370941 508.87451172]
[97.09573364 493.87768555]
[96.78775024 478.88082886]
[96.47977448 463.88400269]
[96.17179871 448.88714600]
[95.86382294 433.89031982]
[95.55583954 418.89349365]
[95.24786377 403.89663696]
[94.93988800 388.89981079]
[80.15705872 386.46914673]
[66.06885529 381.36206055]
[53.15558624 373.75109863]
[41.85777664 363.89419556]
[32.56116486 352.12597656]
[25.58350945 338.84628296]
[21.16374779 324.50668335]
[19.45380402 309.59518433]
[20.51336861 294.61938477]
[24.30781746 280.08944702]
[30.70934486 266.50057983]
[39.50125504 254.31620789]
[50.38531494 243.95214844]
[62.99185944 235.76243591]
[76.89234161 230.02720642]
[91.61391449 226.94316101]
[91.30593872 211.94631958]
[80.36455536 206.52919006]
[72.73864746 196.90222168]
[69.93682861 184.87033081]
[72.55576324 172.72322083]
[80.15445709 162.79971313]
[91.32708740 157.03744507]
[91.63506317 142.04061890]
[91.94304657 127.04377747]
[92.25102234 112.04693604]
[85.67907715 99.70590210]
[92.75214386 87.64508057]
[93.06011963 72.64824677]
[93.36809540 57.65140915]
[93.67607117 42.65457153]
[78.65567017 38.35409546]
[65.26232147 30.33051872]
[54.39951706 19.13176727]
[46.79830170 5.51973581]
[42.96809769 -9.58155441]
[43.16256714 -25.14868164]
[47.36281586 -40.12817383]
[55.27905655 -53.50781250]
[66.37061310 -64.38501740]
[79.88282013 -72.02774048]
[94.89838409 -75.92373657]
[94.89838409 -90.92373657]
[94.89838409 -105.92373657]
[94.89838409 -120.92373657]
[91.75345612 -129.56695557]
[95.05554199 -136.23092651]
[95.36351776 -151.22775269]
[95.67149353 -166.22459412]
[95.97947693 -181.22143555]
[82.54533386 -188.55509949]
[74.06777191 -201.29830933]
[72.49487305 -216.52278137]
[78.18806458 -230.73004150]
[89.83909607 -240.65536499]
[104.77065277 -244.01797485]
[119.55157471 -240.04518127]
[130.78529358 -229.64990234]
[135.89041138 -215.22088623]
[133.69378662 -200.07382202]
[124.70020294 -187.68939209]
[110.97631073 -180.91345215]
[110.66833496 -165.91662598]
[110.36035919 -150.91978455]
[110.05237579 -135.92294312]
[109.89838409 -120.92373657]
[109.89838409 -105.92373657]
[109.89838409 -90.92373657]
[109.89838409 -75.92373657]
[123.89704895 -72.42757416]
[136.65449524 -65.66687775]
[147.42161560 -56.03348923]
[155.56494141 -44.08805847]
[160.60389709 -30.52745247]
[162.23918152 -16.14408684]
[160.37052917 -1.77961683]
[155.10281372 11.72429943]
[146.74024963 23.57532883]
[135.76876831 33.07694626]
[122.82776642 39.66937256]
[108.67291260 42.96254730]
[108.36493683 57.95938492]
[108.05695343 72.95622253]
[107.74897766 87.95306396]
[114.32092285 100.29409790]
[107.24785614 112.35491943]
[106.93988037 127.35175323]
[106.63190460 142.34858704]
[106.32392883 157.34542847]
[121.06629944 167.81277466]
[126.57174683 184.87033081]
[120.83149719 201.68507385]
[106.30278015 211.63833618]
[106.61075592 226.63517761]
[121.44653320 229.11224365]
[135.57075500 234.27194214]
[148.50289917 241.93719482]
[159.80328369 251.84565735]
[169.08801270 263.65881348]
[176.04203796 276.97338867]
[180.42980957 291.33529663]
[182.10331726 306.25497437]
[181.00700378 321.22412109]
[177.17967224 335.73306274]
[170.75311279 349.28802490]
[161.94747925 361.42803955]
[151.06387329 371.74044800]
[138.47395325 379.87515259]
[124.60730743 385.55630493]
[109.93672180 388.59182739]
[110.24470520 403.58868408]
[110.55268097 418.58551025]
[110.86065674 433.58233643]
[111.16863251 448.57919312]
[111.47661591 463.57601929]
[111.78459167 478.57284546]
[112.09256744 493.56970215]
[112.40054321 508.56652832]
[112.70852661 523.56335449]
[113.01650238 538.56024170]
[127.67051697 542.15496826]
[140.89434814 549.42083740]
[151.78637695 559.86236572]
[159.60397339 572.76770020]
[163.81410217 587.25689697]
[164.12971497 602.34210205]
[160.52929688 616.99475098]
[153.25834656 630.21575928]
[142.81257629 641.10375977]
[129.90422058 648.91638184]
[115.41339111 653.12091064]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[37 115]
[38 114]
[44 110]
[45 109]
[46 108]
[47 107]
[49 105]
[50 104]
[51 103]
[52 102]
[63 90]
[64 89]
[65 88]
[66 87]
[68 86]
[69 85]
[70 84]
[71 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
