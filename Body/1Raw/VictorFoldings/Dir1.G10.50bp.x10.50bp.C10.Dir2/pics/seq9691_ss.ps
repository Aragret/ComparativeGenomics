%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUAGUCUCAGGGGGGGGGGAUCUCCAACACAUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAxxxxxxxxxxGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACCCCCCCCCCCAUACUAGUCACA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 411.50320435]
[70.75619507 406.69378662]
[57.85220718 398.92837524]
[46.91955185 388.57025146]
[38.46956635 376.10382080]
[32.89747238 362.11218262]
[30.46388245 347.24975586]
[31.28262329 332.21166992]
[35.31539917 317.70129395]
[42.37359238 304.39733887]
[52.12707901 292.92196655]
[64.11966705 283.81198120]
[77.79044342 277.49343872]
[92.50000000 274.26187134]
[92.50000000 259.26187134]
[92.50000000 244.26188660]
[92.50000000 229.26188660]
[92.50000000 214.26188660]
[92.50000000 199.26188660]
[92.50000000 184.26188660]
[92.50000000 169.26188660]
[92.50000000 154.26188660]
[92.50000000 139.26188660]
[73.93410492 130.30371094]
[62.30077744 113.28587341]
[47.46938324 115.52857208]
[32.63798904 117.77127838]
[17.88057709 120.45806885]
[3.21044683 123.58652496]
[-11.45968342 126.71498871]
[-18.63157272 140.61096191]
[-33.07758713 146.59815979]
[-47.97676468 141.84962463]
[-56.29416275 128.60746765]
[-54.10256577 113.12422180]
[-42.43677902 102.71060944]
[-26.80502510 102.28361511]
[-14.58814526 112.04486084]
[0.08198579 108.91639709]
[14.75211620 105.78793335]
[16.98114777 102.98798370]
[20.70203972 101.15413666]
[25.43362999 100.98699188]
[30.39528656 102.93988037]
[45.22668457 100.69718170]
[60.05807877 98.45447540]
[62.97545624 84.93584442]
[70.32500458 73.22052002]
[81.22692871 64.71094513]
[76.79193878 50.38157272]
[72.35695648 36.05220032]
[67.92197418 21.72282600]
[53.03424454 23.80889893]
[38.00468445 23.47966003]
[23.22258759 20.74363708]
[9.07085037 15.67170143]
[-4.08396196 8.39522743]
[-15.90110970 -0.89730591]
[-26.07450104 -11.96520042]
[-34.34061813 -24.52177048]
[-40.48535156 -38.24177170]
[-44.34953690 -52.76982117]
[-45.83308411 -67.72960663]
[-44.89756012 -82.73364258]
[-41.56720352 -97.39328003]
[-35.92827606 -111.32879639]
[-28.12683678 -124.17922974]
[-18.36496735 -135.61172485]
[-6.89551926 -145.33016968]
[5.98441887 -153.08279419]
[19.94122696 -158.66882324]
[34.61338806 -161.94355774]
[49.62086105 -162.82215881]
[64.57491302 -161.28187561]
[79.08820343 -157.36260986]
[92.78479767 -151.16587830]
[105.30992126 -142.85218811]
[116.33914185 -132.63688660]
[125.58678436 -120.78456879]
[132.81330872 -107.60224915]
[137.83152771 -93.43137360]
[140.51145935 -78.63900757]
[140.78367615 -63.60830307]
[138.64114380 -48.72859573]
[134.13935852 -34.38530350]
[127.39492035 -20.94995117]
[118.58252716 -8.77054787]
[107.93043518 1.83743024]
[95.71456909 10.59921074]
[82.25135040 17.28784370]
[86.68633270 31.61721611]
[91.12131500 45.94659042]
[95.55629730 60.27596283]
[112.18266296 61.92995071]
[126.68036652 70.23586273]
[136.51625061 83.74241638]
[151.12084961 80.32104492]
[165.72544861 76.89968109]
[180.33004761 73.47831726]
[194.93464661 70.05694580]
[195.24504089 54.97866821]
[199.29629517 40.45151901]
[206.83374023 27.38867950]
[217.38356018 16.61129761]
[230.28259277 8.79684544]
[244.72000122 4.43654776]
[259.78823853 3.80449605]
[274.54006958 6.94042158]
[288.04821777 13.64719677]
[299.46353149 23.50322914]
[308.06845093 35.88895798]
[313.32202148 50.02581024]
[314.89407349 65.02513123]
[312.68569946 79.94404602]
[306.83581543 93.84474182]
[297.71206665 105.85340881]
[285.88800049 115.21517181]
[272.10690308 121.34154510]
[257.23507690 123.84741211]
[242.20736694 122.57526398]
[227.96839905 117.60506439]
[215.41328430 109.24923706]
[205.33123779 98.03304291]
[198.35600281 84.66154480]
[183.75140381 88.08290863]
[169.14680481 91.50428009]
[154.54222107 94.92564392]
[139.93762207 98.34700775]
[139.20750427 107.77929688]
[136.28109741 116.77580261]
[131.32234192 124.83258057]
[124.60898590 131.49830627]
[116.51711273 136.39959717]
[107.50000000 139.26188660]
[107.50000000 154.26188660]
[107.50000000 169.26188660]
[107.50000000 184.26188660]
[107.50000000 199.26188660]
[107.50000000 214.26188660]
[107.50000000 229.26188660]
[107.50000000 244.26188660]
[107.50000000 259.26187134]
[107.50000000 274.26187134]
[122.20955658 277.49343872]
[135.88034058 283.81198120]
[147.87292480 292.92196655]
[157.62640381 304.39733887]
[164.68460083 317.70129395]
[168.71737671 332.21166992]
[169.53611755 347.24975586]
[167.10252380 362.11218262]
[161.53042603 376.10382080]
[153.08044434 388.57025146]
[142.14779663 398.92837524]
[129.24380493 406.69378662]
[114.97203827 411.50320435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 46]
[26 45]
[27 44]
[28 40]
[29 39]
[30 38]
[49 93]
[50 92]
[51 91]
[52 90]
[96 128]
[97 127]
[98 126]
[99 125]
[100 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
