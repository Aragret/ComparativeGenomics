%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAAACUCAGGGGGGGGGGUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCAxxxxxxxxxxAGUCAUUCUCAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCCCCCCCCCCCUAGCAAACUCA\
) } def
/len { sequence length } bind def

/coor [
[79.30982208 456.47994995]
[66.39066315 448.72158813]
[55.60936737 438.19256592]
[47.54735184 425.46069336]
[42.63939285 411.21258545]
[41.15016937 396.21664429]
[43.15999222 381.28152466]
[48.56047821 367.21270752]
[57.06038284 354.76892090]
[68.20131683 344.62118530]
[81.38246155 337.31680298]
[95.89298248 333.24966431]
[95.27715302 318.26229858]
[94.66133118 303.27496338]
[94.04550171 288.28759766]
[93.42967987 273.30026245]
[92.81385040 258.31289673]
[92.19802856 243.32554626]
[91.58220673 228.33819580]
[90.96637726 213.35083008]
[90.35055542 198.36347961]
[89.73472595 183.37612915]
[87.69994354 181.36349487]
[86.36549377 178.39895630]
[86.10741425 174.75476074]
[87.19268799 170.83740234]
[89.73472595 167.14448547]
[90.35055542 152.15711975]
[90.96637726 137.16976929]
[77.98230743 131.27969360]
[68.05710602 121.04399109]
[62.56966782 107.88468933]
[47.57045746 108.03868866]
[32.57124710 108.19268799]
[17.57203865 108.34667969]
[5.36301899 118.75434113]
[-10.35813141 115.55669403]
[-17.53149223 101.20669556]
[-10.65427589 86.71244049]
[4.99790764 83.19268036]
[17.41804123 93.34747314]
[32.41725159 93.19347382]
[47.41646194 93.03948212]
[62.41566849 92.88548279]
[63.85090637 81.73588562]
[68.67891693 70.90395355]
[55.68854141 63.40395355]
[42.69815826 55.90395355]
[29.70777702 48.40395355]
[12.96751690 45.72066879]
[10.91176987 28.89181900]
[26.51385689 22.25772095]
[37.20777893 35.41357040]
[50.19815826 42.91357040]
[63.18854141 50.41357040]
[76.17891693 57.91357040]
[90.22089386 52.63882828]
[95.06071472 38.44107819]
[99.90052795 24.24332428]
[104.74034882 10.04557228]
[109.43414307 -4.20111990]
[113.98143768 -18.49525070]
[118.52872467 -32.78937912]
[123.07601929 -47.08351135]
[109.61572266 -53.77088165]
[97.33406830 -62.43467331]
[86.51894379 -72.87179565]
[77.42388153 -84.83759308]
[70.26206970 -98.05155945]
[65.20140839 -112.20394897]
[62.36051559 -126.96300507]
[61.80599213 -141.98275757]
[63.55082703 -156.91111755]
[67.55413055 -171.39814758]
[73.72205353 -185.10424805]
[81.91000366 -197.70812988]
[91.92606354 -208.91433716]
[103.53542328 -218.46018982]
[116.46595001 -226.12190247]
[130.41453552 -231.71987915]
[145.05419922 -235.12290955]
[160.04177856 -236.25120544]
[175.02592468 -235.07832336]
[189.65541077 -231.63175964]
[203.58728027 -225.99230957]
[216.49494934 -218.29216003]
[228.07586670 -208.71182251]
[238.05853271 -197.47586060]
[246.20895386 -184.84767151]
[252.33607483 -171.12329102]
[256.29626465 -156.62442017]
[257.99667358 -141.69093323]
[257.39746094 -126.67288971]
[254.51268005 -111.92234802]
[249.40994263 -97.78507996]
[242.20886230 -84.59247589]
[233.07823181 -72.65379333]
[222.23211670 -62.24888992]
[209.92472839 -53.62166977]
[196.44459534 -46.97437286]
[182.10771179 -42.46282196]
[167.25015259 -40.19276810]
[152.22018433 -40.21742630]
[137.37014771 -42.53622055]
[132.82286072 -28.24209023]
[128.27557373 -13.94795990]
[123.72827911 0.34617013]
[124.70359039 7.71915817]
[118.93809509 14.88538837]
[114.09828186 29.08314133]
[109.25846863 43.28089523]
[104.41864777 57.47864532]
[112.91847229 59.58548737]
[120.74775696 63.35867310]
[127.58674622 68.61417389]
[133.16233826 75.10809326]
[137.25894165 82.54792023]
[139.72671509 90.60563660]
[140.48696899 98.93217468]
[139.53436279 107.17248535]
[136.93601990 114.98072815]
[132.82757568 122.03475189]
[127.40632629 128.04939270]
[120.92190552 132.78794861]
[113.66487122 136.07153320]
[105.95372772 137.78559875]
[105.33790588 152.77294922]
[104.72207642 167.76029968]
[104.72207642 182.76029968]
[105.33790588 197.74765015]
[105.95372772 212.73501587]
[106.56955719 227.72236633]
[107.18537903 242.70971680]
[107.80120850 257.69708252]
[108.41703033 272.68441772]
[109.03285980 287.67178345]
[109.64868164 302.65911865]
[110.26451111 317.64648438]
[110.88033295 332.63385010]
[125.67560577 335.49679565]
[139.41157532 341.69515991]
[151.34748840 350.89468384]
[160.83963013 362.59921265]
[167.37612915 376.17752075]
[170.60446167 390.89739990]
[170.35054016 405.96499634]
[166.62805176 420.56771851]
[159.63775635 433.91809082]
[149.75660706 445.29611206]
[137.51750183 454.08822632]
[123.58048248 459.82025146]
[108.69714355 462.18307495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[27 128]
[28 127]
[29 126]
[32 44]
[33 43]
[34 42]
[35 41]
[46 56]
[47 55]
[48 54]
[49 53]
[57 112]
[58 111]
[59 110]
[60 109]
[61 107]
[62 106]
[63 105]
[64 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
