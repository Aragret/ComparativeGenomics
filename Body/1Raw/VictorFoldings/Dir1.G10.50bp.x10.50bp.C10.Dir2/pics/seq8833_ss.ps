%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACxxxxxxxxxxACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCUUCCACCCCCCCCCCCCCCCUAGCAG\
) } def
/len { sequence length } bind def

/coor [
[89.58258057 398.95886230]
[76.70930481 391.05599976]
[66.58501434 379.84548950]
[60.03042984 366.23614502]
[57.57690811 351.33120728]
[59.42334366 336.33898926]
[65.42005920 322.47476196]
[75.08091736 310.86251831]
[87.62276459 302.44357300]
[102.02888489 297.90042114]
[101.71683502 282.90365601]
[101.40477753 267.90689087]
[101.09272003 252.91014099]
[100.78066254 237.91339111]
[100.46860504 222.91664124]
[100.15654755 207.91989136]
[99.84449768 192.92312622]
[99.53244019 177.92637634]
[99.22038269 162.92962646]
[98.90832520 147.93287659]
[86.29719543 139.81132507]
[72.51481628 145.73129272]
[58.73243713 151.65126038]
[44.95005417 157.57121277]
[40.61561584 172.59608459]
[27.60867500 181.27671814]
[12.07071304 179.51440430]
[1.33828068 168.14123535]
[0.47890362 152.52728271]
[9.89835358 140.04498291]
[25.14905357 136.58808899]
[39.03009033 143.78883362]
[52.81247330 137.86886597]
[66.59485626 131.94891357]
[80.37723541 126.02894592]
[71.79556274 109.45621490]
[74.13343811 92.62289429]
[84.66156769 81.47805023]
[79.17453766 67.51766205]
[73.68750000 53.55727005]
[66.31786346 53.79768372]
[59.08738327 52.44764328]
[52.33439255 49.57826233]
[46.37316513 45.33156586]
[41.47929764 39.91346741]
[37.87695694 33.58380508]
[35.72864151 26.64387321]
[35.12783813 19.42210197]
[36.09500122 12.25849438]
[38.57694626 5.48863506]
[26.87732124 -3.89852667]
[15.17769814 -13.28568840]
[-0.96029216 -18.48199463]
[-0.43449944 -35.42778778]
[15.99459839 -39.61360550]
[24.56485939 -24.98531151]
[36.26448441 -15.59815025]
[47.96410751 -6.21098852]
[51.99203873 -8.92963505]
[56.37347412 -11.03160763]
[61.01467133 -12.47193432]
[61.01467133 -27.47193336]
[61.01467133 -42.47193527]
[53.27737045 -56.27210617]
[61.01467133 -68.99937439]
[61.01467133 -83.99937439]
[46.62149811 -88.65681458]
[34.37319565 -97.53568268]
[25.46972656 -109.76611328]
[20.78336143 -124.14989471]
[20.77322578 -139.27784729]
[25.44030762 -153.66790771]
[34.32738113 -165.91024780]
[46.56377411 -174.80552673]
[60.95069122 -179.48225403]
[76.07865143 -179.48225403]
[90.46556854 -174.80552673]
[102.70196533 -165.91024780]
[111.58903503 -153.66790771]
[116.25611877 -139.27784729]
[116.24597931 -124.14989471]
[111.55961609 -109.76611328]
[102.65615082 -97.53568268]
[90.40784454 -88.65681458]
[76.01467133 -83.99937439]
[76.01467133 -68.99937439]
[83.75196838 -56.27210617]
[76.01467133 -42.47193527]
[76.01467133 -27.47193336]
[76.01467133 -12.47193432]
[96.70829773 1.79702020]
[101.60933685 26.66481590]
[87.64789581 48.07024002]
[93.13492584 62.03062820]
[98.62195587 75.99102020]
[125.54317474 87.76390839]
[124.18885803 121.85081482]
[139.18804932 121.69477844]
[154.77671814 111.94937134]
[169.73208618 121.07826996]
[184.72479248 120.61022949]
[199.71748352 120.14218903]
[208.26130676 116.72826385]
[215.02624512 119.82363892]
[230.02543640 119.66760254]
[245.02461243 119.51156616]
[251.03497314 105.51886749]
[262.22143555 95.18530273]
[276.64593506 90.30121613]
[291.80926514 91.71281433]
[305.08435059 99.17552185]
[314.17120361 111.39637756]
[317.49542236 126.25805664]
[314.48107910 141.18566895]
[305.65045166 153.59292603]
[292.53350830 161.33020020]
[277.40280151 163.05694580]
[262.87985229 158.47399902]
[251.48080444 148.37538147]
[245.18064880 134.51075745]
[230.18147278 134.66679382]
[215.18228149 134.82283020]
[200.18551636 135.13488770]
[185.19282532 135.60292053]
[170.20013428 136.07096863]
[161.65533447 144.69033813]
[149.12565613 145.16596985]
[139.34408569 136.69396973]
[124.34489441 136.85000610]
[113.90508270 147.62081909]
[114.21713257 162.61756897]
[114.52919006 177.61431885]
[114.84124756 192.61106873]
[115.15330505 207.60783386]
[115.46536255 222.60458374]
[115.77742004 237.60133362]
[116.08946991 252.59808350]
[116.40152740 267.59484863]
[116.71358490 282.59158325]
[117.02564240 297.58834839]
[131.60827637 301.52832031]
[144.48948669 309.41824341]
[154.62504578 320.61856079]
[161.19329834 334.22131348]
[163.66178894 349.12377930]
[161.83041382 364.11785889]
[155.84762573 377.98809814]
[146.19844055 389.61004639]
[133.66505432 398.04159546]
[119.26350403 402.59921265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 35]
[22 34]
[23 33]
[24 32]
[38 95]
[39 94]
[40 93]
[50 58]
[51 57]
[52 56]
[61 90]
[62 89]
[63 88]
[65 86]
[66 85]
[97 129]
[98 128]
[100 125]
[101 124]
[102 123]
[104 122]
[105 121]
[106 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
