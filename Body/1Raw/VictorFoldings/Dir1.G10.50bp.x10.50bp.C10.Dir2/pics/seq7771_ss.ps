%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCCAUUAUGGGGGGGGGGUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUAxxxxxxxxxxUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCACCCCCCCCCCUACCCCCAUUAU\
) } def
/len { sequence length } bind def

/coor [
[91.27910614 421.22140503]
[77.11849976 416.06640625]
[64.52875519 407.78417969]
[54.18881607 396.82141113]
[46.65630722 383.76928711]
[42.33744049 369.33169556]
[41.46512985 354.28723145]
[44.08642197 339.44723511]
[50.05994797 325.61199951]
[59.06356812 313.52764893]
[70.61172485 303.84585571]
[84.08164215 297.08877563]
[98.74690247 293.62081909]
[98.74690247 278.62081909]
[98.74690247 263.62081909]
[98.74690247 248.62081909]
[98.74690247 233.62081909]
[98.74690247 218.62081909]
[98.74690247 203.62081909]
[98.74690247 188.62081909]
[98.74690247 173.62081909]
[98.74690247 158.62081909]
[98.74690247 143.62081909]
[86.34924316 135.17700195]
[72.39143372 140.67057800]
[58.43362045 146.16416931]
[52.35820770 160.75405884]
[37.71400452 166.69737244]
[23.18916512 160.46804810]
[17.40101242 145.76182556]
[23.78355789 131.30366516]
[38.55015182 125.67131042]
[52.94003296 132.20635986]
[66.89784241 126.71277618]
[80.85565186 121.21918488]
[78.43409729 106.41593933]
[63.45334625 105.65620422]
[50.63316727 115.30101776]
[35.13593292 111.15188599]
[28.84979630 96.39167023]
[36.59694672 82.34313965]
[52.43442917 79.78312683]
[64.21308899 90.67545319]
[79.19383240 91.43518829]
[84.82859039 77.53376770]
[73.54681396 67.64834595]
[62.26504517 57.76292038]
[50.98327255 47.87749863]
[32.86558914 44.74227142]
[27.81346321 27.96240234]
[16.33366013 18.30765533]
[4.85385799 8.65290833]
[-10.51695442 11.52904129]
[-24.11496925 3.80712366]
[-29.51961899 -10.86679077]
[-24.17899323 -25.56412888]
[-10.61477375 -33.34525681]
[4.76843166 -30.53616333]
[14.70714283 -18.46321678]
[14.50860500 -2.82689381]
[25.98840714 6.82785273]
[37.46820831 16.48259926]
[49.58018875 15.76275539]
[59.22978973 23.76339149]
[60.86869431 36.59572601]
[72.15046692 46.48114777]
[83.43224335 56.36657333]
[94.71401215 66.25199890]
[109.71092987 66.55599976]
[121.38404846 57.13589859]
[133.05715942 47.71579742]
[124.94566345 35.08049774]
[118.24785614 21.64224625]
[113.04225922 7.55860186]
[109.38992310 -7.00531483]
[107.33365631 -21.87874794]
[106.89757538 -36.88731384]
[108.08679199 -51.85504532]
[110.88735962 -66.60645294]
[115.26644135 -80.96858978]
[121.17269897 -94.77305603]
[128.53688049 -107.85800934]
[137.27265930 -120.07003784]
[147.27758789 -131.26594543]
[158.43438721 -141.31448364]
[170.61222839 -150.09783936]
[183.66836548 -157.51301575]
[197.44967651 -163.47309875]
[211.79461670 -167.90817261]
[226.53498840 -170.76628113]
[241.49797058 -172.01387024]
[256.50811768 -171.63635254]
[271.38946533 -169.63813782]
[285.96752930 -166.04264832]
[300.07135010 -160.89204407]
[313.53564453 -154.24670410]
[326.20248413 -146.18457031]
[337.92340088 -136.80014038]
[348.56094360 -126.20343781]
[357.99041748 -114.51873016]
[366.10122681 -101.88299561]
[372.79830933 -88.44438171]
[378.00314331 -74.36045837]
[381.65469360 -59.79634476]
[383.71017456 -44.92280197]
[384.14544678 -29.91420937]
[382.95541382 -14.94654179]
[380.15405273 -0.19528364]
[375.77420044 14.16661358]
[369.86721802 27.97076416]
[362.50231934 41.05532074]
[353.76589966 53.26687622]
[343.76034546 64.46224976]
[332.60302734 74.51019287]
[320.42468262 83.29288483]
[307.36816406 90.70736694]
[293.58651733 96.66669464]
[279.24136353 101.10100555]
[264.50082397 103.95831299]
[249.53778076 105.20510864]
[234.52764893 104.82677460]
[219.64642334 102.82775879]
[205.06855774 99.23148346]
[190.96498108 94.08011627]
[177.50106812 87.43406677]
[164.83464050 79.37123871]
[153.11424255 69.98617554]
[142.47726440 59.38891220]
[130.80415344 68.80901337]
[119.13103485 78.22911835]
[136.55503845 107.70841980]
[113.74690247 143.62081909]
[113.74690247 158.62081909]
[113.74690247 173.62081909]
[113.74690247 188.62081909]
[113.74690247 203.62081909]
[113.74690247 218.62081909]
[113.74690247 233.62081909]
[113.74690247 248.62081909]
[113.74690247 263.62081909]
[113.74690247 278.62081909]
[113.74690247 293.62081909]
[128.41215515 297.08877563]
[141.88208008 303.84585571]
[153.43023682 313.52764893]
[162.43385315 325.61199951]
[168.40737915 339.44723511]
[171.02867126 354.28723145]
[170.15635681 369.33169556]
[165.83749390 383.76928711]
[158.30497742 396.82141113]
[147.96504211 407.78417969]
[135.37530518 416.06640625]
[121.21469879 421.22140503]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 35]
[25 34]
[26 33]
[36 44]
[37 43]
[45 68]
[46 67]
[47 66]
[48 65]
[50 62]
[51 61]
[52 60]
[69 130]
[70 129]
[71 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
