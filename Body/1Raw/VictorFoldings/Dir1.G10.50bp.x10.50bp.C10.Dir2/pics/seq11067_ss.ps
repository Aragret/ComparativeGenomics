%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAACGCCGGGGGGGGGGUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGxxxxxxxxxxACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCCACAAACCCC\
) } def
/len { sequence length } bind def

/coor [
[113.35937500 514.87695312]
[101.47510529 505.60186768]
[92.15639496 493.75177002]
[85.94503021 480.01559448]
[83.20212555 465.19198608]
[84.08715820 450.14273071]
[88.54866028 435.74276733]
[96.32726288 422.82934570]
[106.97071075 412.15316772]
[119.86022186 404.33499146]
[134.24641418 399.82931519]
[133.31077576 384.85852051]
[132.37515259 369.88772583]
[131.43952942 354.91696167]
[130.50389099 339.94616699]
[129.56826782 324.97537231]
[128.63264465 310.00457764]
[127.69700623 295.03378296]
[126.76138306 280.06298828]
[125.82575226 265.09219360]
[124.89012146 250.12141418]
[122.71328735 235.28019714]
[119.31031036 220.67131042]
[115.90733337 206.06242371]
[112.50435638 191.45352173]
[109.10137177 176.84463501]
[104.49099731 171.00596619]
[105.78291321 161.89646912]
[101.29499817 155.96315002]
[102.77615356 146.88252258]
[99.98382568 132.14471436]
[97.19150543 117.40690613]
[96.68442535 132.39833069]
[89.51122284 145.57197571]
[77.19393158 154.13261414]
[62.34609985 156.26377869]
[48.11821365 151.51329041]
[37.52920914 140.88911438]
[32.82592010 126.64555359]
[35.00631332 111.80486298]
[43.60773468 99.51602936]
[56.80510330 92.38654327]
[71.79812622 91.92918396]
[85.40536499 98.24086761]
[73.51298523 89.09913635]
[61.62060547 79.95739746]
[49.72822571 70.81566620]
[36.12016678 77.72822571]
[20.86030197 78.04331970]
[6.97848988 71.69839478]
[-2.76902533 59.95324326]
[-6.44686747 45.13986206]
[-3.32479882 30.19946480]
[5.97729206 18.09847832]
[19.61246872 11.23956299]
[34.87345505 10.98456001]
[48.73017502 17.38409996]
[58.43136215 29.16755104]
[62.05083847 43.99530029]
[58.86996078 58.92328644]
[70.76234436 68.06501770]
[82.65471649 77.20675659]
[94.54709625 86.34848785]
[109.15599060 82.94551086]
[115.78449249 69.48954773]
[122.41298676 56.03358078]
[129.04148865 42.57761383]
[135.66998291 29.12164879]
[123.45857239 20.35060692]
[112.85747528 9.68914986]
[104.15590668 -2.57186985]
[97.59125519 -16.09796143]
[93.34260559 -30.52012634]
[91.52585602 -45.44491577]
[92.19058228 -60.46516800]
[95.31864166 -75.17111969]
[100.82469940 -89.16159058]
[108.55855560 -102.05490112]
[118.30920410 -113.49931335]
[129.81066895 -123.18261719]
[142.74914551 -130.84063721]
[156.77169800 -136.26448059]
[171.49575806 -139.30615234]
[186.51966858 -139.88269043]
[201.43353271 -137.97836304]
[215.83050537 -133.64511108]
[229.31782532 -127.00117493]
[241.52754211 -118.22777557]
[252.12658691 -107.56427765]
[260.82580566 -95.30158234]
[267.38784790 -81.77422333]
[271.63372803 -67.35124207]
[273.44757080 -52.42610550]
[272.77996826 -37.40598297]
[269.64907837 -22.70063019]
[264.14031982 -8.71122360]
[256.40399170 4.18059540]
[246.65112305 15.62312889]
[235.14779663 25.30421638]
[222.20783997 32.95975113]
[208.18424988 38.38088608]
[193.45959473 41.41972351]
[178.43559265 41.99336624]
[163.52209473 40.08616638]
[149.12594604 35.75014877]
[142.49745178 49.20611191]
[135.86895752 62.66207886]
[129.24046326 76.11804199]
[122.61196136 89.57400513]
[111.92931366 114.61457825]
[114.72163391 129.35238647]
[117.51396179 144.09019470]
[120.45944214 158.79815674]
[123.71026611 173.44165039]
[127.11324310 188.05055237]
[130.51622009 202.65943909]
[133.91920471 217.26832581]
[137.32217407 231.87722778]
[144.84686279 218.90112305]
[158.49583435 212.67974854]
[173.22607422 215.51174927]
[183.59503174 226.35078430]
[185.77160645 241.19203186]
[178.95158386 254.55194092]
[165.65483093 261.49429321]
[150.79423523 259.45404053]
[139.86091614 249.18577576]
[140.79653931 264.15658569]
[141.73217773 279.12734985]
[142.66780090 294.09814453]
[143.60342407 309.06893921]
[144.53906250 324.03973389]
[145.47468567 339.01052856]
[146.41030884 353.98132324]
[147.34594727 368.95211792]
[148.28157043 383.92291260]
[149.21719360 398.89370728]
[164.05242920 401.57312012]
[177.81506348 407.72561646]
[189.70495605 416.99353027]
[199.03085327 428.83798218]
[205.25054932 442.57037354]
[208.00242615 457.39233398]
[207.12652588 472.44213867]
[202.67375183 486.84478760]
[194.90298462 499.76293945]
[184.26600647 510.44552612]
[171.38124084 518.27154541]
[156.99778748 522.78594971]
[141.95188904 523.72625732]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 118]
[23 117]
[24 116]
[25 115]
[26 114]
[28 113]
[30 112]
[31 111]
[32 110]
[44 63]
[45 62]
[46 61]
[47 60]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
