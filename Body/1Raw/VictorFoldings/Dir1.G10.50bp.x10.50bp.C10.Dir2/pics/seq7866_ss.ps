%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGAAUUGGGGGGGGGGAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCxxxxxxxxxxUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUACUGACUACCCCCCCCCCUCCUAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 363.99624634]
[71.19830322 357.98022461]
[59.48964310 348.45080566]
[50.78712082 336.11514282]
[45.73651886 321.88861084]
[44.71262741 306.82693481]
[47.79142761 292.04779053]
[54.74444962 278.64785767]
[65.05573273 267.62152100]
[77.96011353 259.78701782]
[92.50000000 255.72569275]
[92.50000000 240.72569275]
[92.50000000 225.72569275]
[92.50000000 210.72569275]
[92.50000000 195.72569275]
[92.50000000 180.72569275]
[92.50000000 165.72569275]
[92.50000000 150.72569275]
[92.50000000 135.72569275]
[92.50000000 120.72570038]
[82.42746735 118.01065826]
[73.64785004 110.27666473]
[68.63872528 98.30349731]
[53.99522018 101.55432892]
[39.35171890 104.80515289]
[36.16081619 107.96420288]
[32.49064255 109.72513580]
[28.85302925 110.11199188]
[25.69680023 109.31688690]
[23.35717392 107.66355896]
[8.49412727 109.68589783]
[-6.36891985 111.70822906]
[-18.99753571 122.17007446]
[-34.27582550 116.21139526]
[-36.48679733 99.96197510]
[-23.35599136 90.13782501]
[-8.39125443 96.84518433]
[6.47179270 94.82284546]
[21.33483887 92.80051422]
[36.10089493 90.16165161]
[50.74439621 86.91082764]
[65.38790131 83.65999603]
[68.63872528 69.01649475]
[56.74634552 59.87476349]
[44.85396576 50.73302841]
[32.96158600 41.59129333]
[21.06920433 32.44956207]
[9.17682457 23.30782700]
[-4.98719645 29.24719238]
[-20.22124863 27.29290771]
[-32.42744827 17.97066116]
[-38.32238770 3.78809261]
[-36.32035828 -11.43975830]
[-26.95989990 -23.61667824]
[-12.75892258 -29.46713257]
[2.46257854 -27.41738319]
[14.61009693 -18.01880074]
[20.41600990 -3.79955482]
[18.31855965 11.41544628]
[30.21093941 20.55718040]
[42.10331726 29.69891548]
[53.99569702 38.84064865]
[65.88807678 47.98238373]
[77.78045654 57.12411880]
[92.77964783 56.96808243]
[104.47927094 47.58092117]
[116.08061218 38.07255936]
[127.58241272 28.44403458]
[119.24497223 15.95666885]
[112.30654907 2.64105558]
[106.84850311 -11.34668636]
[102.93481445 -25.84255791]
[100.61137390 -40.67660141]
[99.90542603 -55.67489624]
[100.82524872 -70.66159821]
[103.36004639 -85.46099091]
[107.48011017 -99.89955902]
[113.13713837 -113.80802155]
[120.26479340 -127.02330780]
[128.77951050 -139.39047241]
[138.58146667 -150.76452637]
[149.55572510 -161.01210022]
[161.57363892 -170.01304626]
[174.49427795 -177.66184998]
[188.16616821 -183.86882019]
[202.42901611 -188.56118774]
[217.11560059 -191.68394470]
[232.05372620 -193.20045471]
[247.06823730 -193.09295654]
[261.98312378 -191.36271667]
[276.62347412 -188.02999878]
[290.81768799 -183.13389587]
[304.39929199 -176.73179626]
[317.20910645 -168.89877319]
[329.09689331 -159.72666931]
[339.92330933 -149.32301331]
[349.56140137 -137.80978394]
[357.89816284 -125.32196808]
[364.83587646 -112.00598145]
[370.29318237 -98.01795197]
[374.20608521 -83.52186584]
[376.52871704 -68.68769836]
[377.23385620 -53.68936539]
[376.31323242 -38.70271301]
[373.77764893 -23.90345764]
[369.65679932 -9.46510983]
[363.99902344 4.44304848]
[356.87066650 17.65795135]
[348.35528564 30.02465820]
[338.55270386 41.39817810]
[327.57791138 51.64516449]
[315.55950928 60.64546967]
[302.63845825 68.29357910]
[288.96621704 74.49981689]
[274.70312500 79.19141388]
[260.01635742 82.31336975]
[245.07817078 83.82908630]
[230.06365967 83.72077942]
[215.14888000 81.98973083]
[200.50869751 78.65622711]
[186.31475830 73.75935364]
[172.73347473 67.35653687]
[159.92408752 59.52282333]
[148.03678894 50.35007858]
[137.21093750 39.94583893]
[125.70913696 49.57436371]
[122.57883453 56.32320786]
[113.86643219 59.28054428]
[102.16680908 68.66770172]
[126.46599579 96.29513550]
[107.50000000 120.72570038]
[107.50000000 135.72569275]
[107.50000000 150.72569275]
[107.50000000 165.72569275]
[107.50000000 180.72569275]
[107.50000000 195.72569275]
[107.50000000 210.72569275]
[107.50000000 225.72569275]
[107.50000000 240.72569275]
[107.50000000 255.72569275]
[122.03988647 259.78701782]
[134.94427490 267.62152100]
[145.25555420 278.64785767]
[152.20857239 292.04779053]
[155.28736877 306.82693481]
[154.26348877 321.88861084]
[149.21287537 336.11514282]
[140.51036072 348.45080566]
[128.80169678 357.98022461]
[114.95575714 363.99624634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 42]
[24 41]
[25 40]
[30 39]
[31 38]
[32 37]
[43 64]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[65 129]
[66 128]
[67 126]
[68 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
