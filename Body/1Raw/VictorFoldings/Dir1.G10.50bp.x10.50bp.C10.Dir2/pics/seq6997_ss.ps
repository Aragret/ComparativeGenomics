%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAAACUCGGGGGGGGGGAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCxxxxxxxxxxCACCCUAGGCUCACUAAACAUUCUACUACUCACUCUCACUGCCCAAGAACCCCCCCCCCCUAUCAAACUC\
) } def
/len { sequence length } bind def

/coor [
[98.57628632 379.46798706]
[85.35608673 372.19552612]
[74.46928406 361.74850464]
[66.65815735 348.83926392]
[62.45527267 334.34796143]
[62.14720154 319.26260376]
[65.75494385 304.61178589]
[73.03251648 291.39440918]
[83.48372650 280.51162720]
[96.39598846 272.70550537]
[110.88892365 268.50820923]
[110.57686615 253.51145935]
[110.26480865 238.51469421]
[109.95275116 223.51794434]
[109.64069366 208.52119446]
[109.32864380 193.52444458]
[109.01658630 178.52767944]
[108.70452881 163.53092957]
[108.39247131 148.53417969]
[108.08041382 133.53742981]
[95.06352234 126.08218384]
[82.04779816 118.62760162]
[68.95464325 125.94670868]
[61.02824402 140.30303955]
[44.62915421 140.34617615]
[36.62734985 126.03173065]
[45.25439835 112.08518982]
[61.63553619 112.85355377]
[74.72869110 105.53444672]
[72.87561035 98.26698303]
[69.16944885 83.73204041]
[67.31636810 76.46457672]
[52.31718063 76.30854034]
[37.31799316 76.15250397]
[22.31880379 75.99646759]
[9.89728928 86.14956665]
[-5.75441551 82.62767792]
[-12.62966156 68.13249207]
[-5.45434904 53.78347015]
[10.26723671 50.58795547]
[22.47484016 60.99727631]
[37.47402954 61.15331268]
[52.47321701 61.30934906]
[67.47240448 61.46538544]
[71.63047028 47.05252838]
[75.78817749 32.64095306]
[63.01082230 24.78352928]
[50.23346710 16.92610359]
[37.45610809 9.06867790]
[20.79671288 5.92210674]
[19.20853615 -10.95728970]
[34.98862839 -17.15608215]
[45.31353378 -3.70867991]
[58.09089279 4.14874601]
[70.86824799 12.00617123]
[83.64560699 19.86359787]
[97.16979980 13.37543201]
[99.03740692 -1.50784767]
[100.90502167 -16.39112663]
[101.84065247 -31.36191940]
[101.84065247 -46.36191940]
[101.84065247 -61.36191940]
[101.84065247 -76.36191559]
[87.20143127 -79.96147156]
[73.84936523 -86.96044922]
[62.56071091 -96.95192719]
[53.99177933 -109.35502625]
[48.64075851 -123.44864655]
[46.81875229 -138.41339111]
[48.63168716 -153.37924194]
[53.97415924 -167.47610474]
[62.53556824 -179.88439941]
[73.81816101 -189.88272095]
[87.16599274 -196.88978577]
[101.80302429 -200.49821472]
[116.87828064 -200.49821472]
[131.51530457 -196.88978577]
[144.86314392 -189.88272095]
[156.14573669 -179.88439941]
[164.70713806 -167.47610474]
[170.04962158 -153.37924194]
[171.86254883 -138.41339111]
[170.04054260 -123.44864655]
[164.68952942 -109.35502625]
[156.12059021 -96.95192719]
[144.83193970 -86.96044922]
[131.47987366 -79.96147156]
[116.84065247 -76.36191559]
[116.84065247 -61.36191940]
[116.84065247 -46.36191940]
[116.84065247 -31.36191940]
[128.46148682 -40.84644318]
[143.40338135 -39.52748871]
[153.18302917 -28.15389442]
[152.24797058 -13.18306732]
[141.12911987 -3.11475229]
[126.13922119 -3.66527700]
[115.78829956 -14.52351475]
[113.92069244 0.35976547]
[112.05307770 15.24304581]
[135.04730225 107.93791199]
[150.00755310 109.02922058]
[164.96780396 110.12053680]
[179.92805481 111.21184540]
[185.03643799 97.00596619]
[193.78903198 84.70577240]
[205.53633118 75.22402954]
[219.40660095 69.26432800]
[234.37059021 67.26893616]
[249.31787109 69.38591003]
[263.13925171 75.45816803]
[274.80908203 85.03509521]
[283.46139526 97.40602875]
[288.45413208 111.65296936]
[289.41677856 126.71868896]
[286.27792358 141.48521423]
[279.27050781 154.85676575]
[268.91448975 165.84109497]
[255.97836304 173.62309265]
[241.42208862 177.62527466]
[226.32583618 177.55064392]
[211.80982971 173.40476990]
[198.95127869 165.49526978]
[188.70436096 154.40910339]
[181.82945251 140.96891785]
[178.83674622 126.17209625]
[163.87649536 125.08078003]
[148.91624451 123.98947144]
[133.95599365 122.89816284]
[123.07717133 133.22537231]
[123.38922882 148.22212219]
[123.70127869 163.21887207]
[124.01333618 178.21562195]
[124.32539368 193.21238708]
[124.63745117 208.20913696]
[124.94950867 223.20588684]
[125.26156616 238.20263672]
[125.57361603 253.19940186]
[125.88567352 268.19613647]
[140.54066467 271.78692627]
[153.76647949 279.04916382]
[164.66134644 289.48776245]
[172.48243713 302.39099121]
[176.69651794 316.87905884]
[177.01623535 331.96414185]
[173.41981506 346.61773682]
[166.15245056 359.84075928]
[155.70964050 370.73159790]
[142.80340576 378.54769897]
[128.31372070 382.75619507]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 29]
[23 28]
[32 44]
[33 43]
[34 42]
[35 41]
[46 56]
[47 55]
[48 54]
[49 53]
[57 100]
[58 99]
[59 98]
[60 91]
[61 90]
[62 89]
[63 88]
[101 129]
[102 128]
[103 127]
[104 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
