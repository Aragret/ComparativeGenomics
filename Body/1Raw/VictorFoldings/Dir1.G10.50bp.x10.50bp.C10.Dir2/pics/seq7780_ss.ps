%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUUAUUGGGGGGGGGGCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACxxxxxxxxxxAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCCCCCCCCCCCAUUACU\
) } def
/len { sequence length } bind def

/coor [
[115.79857635 410.82879639]
[102.57837677 403.55633545]
[91.69157410 393.10931396]
[83.88043976 380.20007324]
[79.67755890 365.70877075]
[79.36949158 350.62341309]
[82.97723389 335.97259521]
[90.25480652 322.75521851]
[100.70600891 311.87243652]
[113.61827087 304.06628418]
[128.11120605 299.86901855]
[127.79915619 284.87225342]
[127.48709869 269.87548828]
[127.17504120 254.87875366]
[126.86298370 239.88198853]
[126.55092621 224.88523865]
[126.23886871 209.88848877]
[125.92681885 194.89173889]
[125.61476135 179.89497375]
[122.21178436 165.28608704]
[115.86465454 151.69512939]
[109.51752472 138.10418701]
[103.17039490 124.51322937]
[98.09302521 124.64373016]
[93.09617615 123.73367310]
[88.39083862 121.82148743]
[84.17568207 118.98791504]
[80.62868500 115.35260010]
[77.89962769 111.06903076]
[63.08187103 113.40013885]
[48.26411057 115.73123932]
[33.44635391 118.06234741]
[18.73930168 126.49673462]
[6.56321239 114.69931030]
[14.52891064 99.73321533]
[31.11524963 103.24459076]
[45.93300629 100.91348267]
[60.75076675 98.58238220]
[75.56852722 96.25127411]
[77.37284088 90.05204773]
[80.72104645 84.53158569]
[85.38468170 80.06655121]
[91.04553986 76.96160889]
[90.10990906 61.99081421]
[89.17427826 47.02002335]
[88.23865509 32.04923248]
[87.30302429 17.07843971]
[85.59033203 2.17653775]
[83.10521698 -12.61616898]
[68.68894196 -22.47052956]
[65.88304901 -39.36463928]
[75.93656921 -52.81025696]
[73.14424896 -67.54805756]
[70.35192108 -82.28586578]
[63.34213638 -69.02453613]
[50.71456909 -60.92858124]
[35.73782730 -60.09360886]
[22.28859329 -66.73575592]
[13.84816265 -79.13572693]
[12.60131550 -94.08381653]
[18.87079239 -107.71076202]
[31.03376007 -116.48926544]
[45.94187164 -118.14704895]
[59.73620605 -112.25498962]
[68.84609985 -100.33833313]
[69.15815735 -115.33509064]
[69.47021484 -130.33184814]
[69.78227234 -145.32859802]
[70.09432983 -160.32534790]
[56.29598236 -166.76937866]
[46.31649399 -178.27285767]
[41.88487244 -192.84269714]
[43.76892090 -207.95463562]
[51.64221573 -220.99038696]
[64.14066315 -229.69146729]
[79.09882355 -232.55035400]
[93.92511749 -229.07170105]
[106.05079651 -219.85824585]
[113.37500763 -206.50624084]
[114.62878418 -191.32902527]
[109.59491730 -176.95613098]
[99.14554596 -165.87776184]
[85.09107971 -160.01329041]
[84.77902222 -145.01654053]
[84.46696472 -130.01979065]
[84.15491486 -115.02303314]
[83.84285736 -100.02627563]
[85.08972931 -85.07819366]
[87.88205719 -70.34038544]
[90.67437744 -55.60258102]
[102.26258850 -49.88329697]
[108.51642609 -38.35230255]
[106.94368744 -25.13283157]
[97.89792633 -15.10128784]
[100.38304138 -0.30858082]
[111.33718872 -10.55586052]
[126.20804596 -8.59182930]
[134.12623596 4.14796400]
[129.30418396 18.35176277]
[115.26644135 23.63773727]
[102.27381897 16.14281082]
[103.20944214 31.11360359]
[104.14507294 46.08439636]
[105.08070374 61.05518723]
[106.01632690 76.02597809]
[123.95105743 93.89289093]
[116.76134491 118.16609955]
[123.10847473 131.75704956]
[129.45559692 145.34800720]
[135.80273438 158.93894958]
[137.44889832 144.02955627]
[143.15505981 130.15728760]
[152.47589111 118.40476227]
[164.68400574 109.68914795]
[178.82666016 104.69061279]
[193.80015564 103.79926300]
[208.43594360 107.08464813]
[221.59182739 114.29037476]
[232.24113464 124.85411072]
[239.55274963 137.95144653]
[242.95610046 152.56024170]
[242.18556213 167.54045105]
[237.30128479 181.72296143]
[228.68444824 194.00099182]
[217.00749207 203.41633606]
[203.18170166 209.23420715]
[188.28607178 211.00059509]
[173.48306274 208.57763672]
[159.92790222 202.15441895]
[148.67845154 192.23222351]
[140.61151123 179.58291626]
[140.92356873 194.57968140]
[141.23562622 209.57643127]
[141.54768372 224.57318115]
[141.85974121 239.56993103]
[142.17179871 254.56669617]
[142.48385620 269.56344604]
[142.79591370 284.56021118]
[143.10795593 299.55694580]
[157.76295471 303.14770508]
[170.98876953 310.40997314]
[181.88363647 320.84857178]
[189.70472717 333.75177002]
[193.91879272 348.23983765]
[194.23852539 363.32495117]
[190.64208984 377.97854614]
[183.37472534 391.20156860]
[172.93193054 402.09237671]
[160.02569580 409.90850830]
[145.53601074 414.11697388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 110]
[21 109]
[22 108]
[23 107]
[29 39]
[30 38]
[31 37]
[32 36]
[43 105]
[44 104]
[45 103]
[46 102]
[47 101]
[48 95]
[49 94]
[52 90]
[53 89]
[54 88]
[65 87]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
