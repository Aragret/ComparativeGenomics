%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCCUAGGGGGGGGGGGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUAxxxxxxxxxxCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCCCCCCCCCCCACUCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[36.26173019 449.99810791]
[22.41579247 443.98208618]
[10.70712948 434.45266724]
[2.00460553 422.11700439]
[-3.04599643 407.89047241]
[-4.06988764 392.82879639]
[-0.99108875 378.04965210]
[5.96193314 364.64971924]
[16.27321815 353.62338257]
[29.17759895 345.78887939]
[43.71748352 341.72756958]
[43.71748352 326.72756958]
[43.71748352 311.72756958]
[43.71748352 296.72756958]
[43.71748352 281.72756958]
[43.71748352 266.72756958]
[43.71748352 251.72755432]
[43.71748352 236.72755432]
[43.71748352 221.72755432]
[43.71748352 206.72755432]
[35.94300842 219.55555725]
[25.27220345 230.09756470]
[12.35074997 237.71569824]
[-2.03949428 241.94900513]
[-17.02779579 242.54132080]
[-31.70722961 239.45681763]
[-45.18956757 232.88212585]
[-56.65900803 223.21507263]
[-65.42155457 211.04060364]
[-70.94699097 197.09536743]
[-72.90098572 182.22317505]
[-71.16530609 167.32394409]
[-65.84497070 153.29916382]
[-57.26191330 140.99749756]
[-45.93547440 131.16328430]
[-32.55100632 124.39157867]
[-17.91838455 121.09212494]
[-2.92300940 121.46457672]
[11.52777004 125.48638916]
[24.55955696 132.91421509]
[35.38381195 143.29859924]
[43.34558105 156.01119995]
[47.96310425 170.28279114]
[48.95709229 185.24784851]
[55.86408997 171.93269348]
[62.63220596 158.54641724]
[69.26070404 145.09045410]
[75.88919830 131.63449097]
[82.51770020 118.17852020]
[89.14620209 104.72254944]
[75.57222748 111.10591125]
[60.61422348 109.98427582]
[48.14401627 101.64796448]
[41.38948822 88.25482178]
[42.09902191 73.27161407]
[50.08896255 60.57669830]
[63.29113388 53.45611572]
[78.28819275 53.75300980]
[91.19820404 61.39052963]
[98.67944336 74.39172363]
[98.79544067 89.39117432]
[108.06038666 77.59453583]
[117.32534027 65.79788971]
[103.28777313 71.08436584]
[88.38439178 72.78408813]
[73.51696014 70.79421234]
[59.58510208 65.23513794]
[47.43180847 56.44323730]
[37.79246140 44.95050049]
[31.25032425 31.45233917]
[28.20125008 16.76550293]
[28.82973671 1.77867472]
[33.09775543 -12.60131264]
[40.74705124 -25.50434494]
[51.31478119 -36.14967728]
[64.16149902 -43.89317703]
[78.50987244 -48.26629257]
[93.49170685 -49.00441742]
[108.20045471 -46.06288147]
[121.74612427 -39.61967850]
[133.30908203 -30.06467628]
[142.18966675 -17.97603607]
[147.85052490 -4.08522272]
[149.94912720 10.76724720]
[148.35848999 25.68267059]
[143.17486572 39.75853729]
[134.71321106 52.14165115]
[148.36946106 45.93624496]
[162.02569580 39.73083878]
[175.68193054 33.52542877]
[189.33818054 27.32002258]
[202.99441528 21.11461639]
[216.65066528 14.90920925]
[203.93116760 6.95844507]
[202.00520325 -7.91739607]
[212.28048706 -18.84527969]
[227.24661255 -17.83780479]
[235.96456909 -5.63135576]
[232.06263733 8.85163975]
[246.28941345 4.09782457]
[260.51620483 -0.65599030]
[265.05966187 -15.49298859]
[277.47659302 -24.79887009]
[292.99243164 -24.99533272]
[305.64102173 -16.00683403]
[310.55868530 -1.28963315]
[305.85455322 13.49720383]
[293.33740234 22.66783714]
[277.82034302 22.69597244]
[265.27001953 13.57078838]
[251.04322815 18.32460403]
[236.81645203 23.07841873]
[222.85606384 28.56545067]
[209.19982910 34.77085876]
[195.54357910 40.97626495]
[181.88734436 47.18167114]
[168.23109436 53.38707733]
[154.57485962 59.59248352]
[140.91862488 65.79788971]
[129.12197876 75.06284332]
[119.85703278 86.85948181]
[110.59207916 98.65612030]
[102.60216522 111.35105133]
[95.97366333 124.80701447]
[89.34516907 138.26298523]
[82.71666718 151.71894836]
[76.08817291 165.17491150]
[75.08928680 174.32116699]
[69.17924500 178.83969116]
[62.27224731 192.15484619]
[58.71748352 206.72755432]
[58.71748352 221.72755432]
[58.71748352 236.72755432]
[58.71748352 251.72755432]
[58.71748352 266.72756958]
[58.71748352 281.72756958]
[58.71748352 296.72756958]
[58.71748352 311.72756958]
[58.71748352 326.72756958]
[58.71748352 341.72756958]
[73.25737000 345.78887939]
[86.16175079 353.62338257]
[96.47303772 364.64971924]
[103.42605591 378.04965210]
[106.50485992 392.82879639]
[105.48096466 407.89047241]
[100.43036652 422.11700439]
[91.72784424 434.45266724]
[80.01918030 443.98208618]
[66.17324066 449.99810791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[44 130]
[45 129]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[61 122]
[62 121]
[63 120]
[87 119]
[88 118]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
