%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCCUUCUUGGGGGGGGGGCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCAUCCACAACCUUAACAxxxxxxxxxxAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUCCCCCCCCCCAGGCCUUCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 376.39190674]
[71.19830322 370.37588501]
[59.48964310 360.84646606]
[50.78712082 348.51080322]
[45.73651886 334.28427124]
[44.71262741 319.22259521]
[47.79142761 304.44345093]
[54.74444962 291.04351807]
[65.05573273 280.01718140]
[77.96011353 272.18267822]
[92.50000000 268.12136841]
[92.50000000 253.12135315]
[92.50000000 238.12135315]
[92.50000000 223.12135315]
[92.50000000 208.12135315]
[92.50000000 193.12135315]
[92.50000000 178.12135315]
[92.50000000 163.12135315]
[92.50000000 148.12135315]
[92.50000000 133.12135315]
[80.73094940 127.96387482]
[71.72058868 118.80290222]
[57.70387268 124.14440918]
[43.68716049 129.48593140]
[40.61554337 144.60441589]
[29.84149361 155.64630127]
[14.80297375 159.08818054]
[0.29872009 153.83174133]
[-9.04301262 141.55429077]
[-10.24131203 126.17353821]
[-2.91380453 112.59741211]
[10.60132885 105.15801239]
[25.99145699 106.22921753]
[38.34564590 115.46920776]
[52.36236191 110.12770081]
[66.37907410 104.78618622]
[73.29249573 79.02422333]
[96.68222046 66.20256805]
[98.54983521 51.31928635]
[100.41744232 36.43600464]
[102.28505707 21.55272484]
[104.15267181 6.66944599]
[102.59509277 -8.24946690]
[97.69354248 -22.42602539]
[92.79199219 -36.60258102]
[87.89043427 -50.77914047]
[82.98888397 -64.95569611]
[78.08733368 -79.13225555]
[73.18578339 -93.30881500]
[58.36180115 -90.79896545]
[43.32688904 -90.76344299]
[28.49121094 -93.20323181]
[14.25949669 -98.05175018]
[1.01999736 -105.17674255]
[-10.86610413 -114.38382721]
[-21.07454491 -125.42183685]
[-29.32683372 -137.98963928]
[-35.39783859 -151.74436951]
[-39.12194443 -166.31080627]
[-40.39754486 -181.29154968]
[-39.18984985 -196.27792358]
[-35.53180313 -210.86108398]
[-29.52319717 -224.64318848]
[-21.32795334 -237.24826050]
[-11.16964149 -248.33241272]
[0.67460948 -257.59329224]
[13.88168144 -264.77819824]
[28.09127617 -269.69116211]
[42.91574478 -272.19818115]
[57.95066071 -272.23080444]
[72.78586578 -269.78814697]
[87.01664734 -264.93688965]
[100.25477600 -257.80935669]
[112.13909912 -248.59996033]
[122.34542084 -237.55999756]
[130.59529114 -224.99060059]
[136.66363525 -211.23469543]
[140.38493347 -196.66755676]
[141.65765381 -181.68656921]
[140.44706726 -166.70042419]
[136.78620911 -152.11796570]
[130.77494812 -138.33702087]
[122.57727814 -125.73352814]
[112.41683197 -114.65132141]
[100.57080078 -105.39274597]
[87.36234283 -98.21036530]
[92.26389313 -84.03380585]
[97.16544342 -69.85724640]
[102.06699371 -55.68069077]
[106.96854401 -41.50413513]
[111.87009430 -27.32757568]
[116.77165222 -13.15101719]
[119.92384338 -27.81606674]
[126.69861603 -41.19898224]
[136.65133667 -52.42143631]
[149.12878418 -60.74688339]
[163.31207275 -65.62892151]
[178.27033997 -66.74713898]
[193.02185059 -64.02814484]
[206.59844971 -57.65038681]
[218.10911560 -48.03244781]
[226.79837036 -35.80555725]
[232.09593201 -21.77217484]
[233.65412903 -6.85332727]
[231.37069702 7.97185087]
[225.39549255 21.73037148]
[216.12066650 33.51924896]
[204.15493774 42.56477356]
[190.28364563 48.27327728]
[175.41714478 50.27010727]
[160.53115845 48.42420578]
[146.60266113 42.85672760]
[134.54577637 33.93306732]
[125.15183258 22.23889351]
[119.03594971 8.53705883]
[117.16833496 23.42033958]
[115.30072784 38.30361938]
[113.43311310 53.18689728]
[111.56549835 68.07017517]
[118.09075165 71.25980377]
[123.78850555 75.76405334]
[128.39813232 81.37689209]
[131.70878601 87.84158325]
[133.56903076 94.86241913]
[133.89376831 102.11825562]
[132.66815186 109.27719879]
[129.94822693 116.01179504]
[125.85844421 122.01397705]
[120.58583832 127.00920868]
[114.37161255 130.76899719]
[107.50000000 133.12135315]
[107.50000000 148.12135315]
[107.50000000 163.12135315]
[107.50000000 178.12135315]
[107.50000000 193.12135315]
[107.50000000 208.12135315]
[107.50000000 223.12135315]
[107.50000000 238.12135315]
[107.50000000 253.12135315]
[107.50000000 268.12136841]
[122.03988647 272.18267822]
[134.94427490 280.01718140]
[145.25555420 291.04351807]
[152.20857239 304.44345093]
[155.28736877 319.22259521]
[154.26348877 334.28427124]
[149.21287537 348.51080322]
[140.51036072 360.84646606]
[128.80169678 370.37588501]
[114.95575714 376.39190674]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 36]
[23 35]
[24 34]
[38 119]
[39 118]
[40 117]
[41 116]
[42 115]
[43 92]
[44 91]
[45 90]
[46 89]
[47 88]
[48 87]
[49 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
