%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUUCUCCGGGGGGGGGGUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUxxxxxxxxxxCUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCCAUCCUCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 405.40933228]
[71.01555634 399.85632324]
[58.81560135 390.98999023]
[49.20452881 379.36767578]
[42.78650284 365.72000122]
[39.96496582 350.90481567]
[40.91728210 335.85342407]
[45.58358765 321.51199341]
[53.67055511 308.78204346]
[64.66983032 298.46377563]
[77.88998413 291.20581055]
[92.50000000 287.46435547]
[92.50000000 272.46435547]
[92.50000000 257.46435547]
[92.50000000 242.46435547]
[92.50000000 227.46435547]
[92.50000000 212.46435547]
[92.50000000 197.46435547]
[92.50000000 182.46435547]
[92.50000000 167.46435547]
[92.50000000 152.46435547]
[85.91981506 151.09312439]
[79.56611633 148.90005493]
[73.54109955 145.92042542]
[67.94166565 142.20216370]
[62.85790253 137.80506897]
[58.37156677 132.79989624]
[54.55482864 127.26711273]
[51.46907806 121.29574585]
[49.16395187 114.98183441]
[47.67652893 108.42694092]
[47.03072739 101.73650360]
[47.23694229 95.01812744]
[32.65319443 91.50895691]
[18.06944466 87.99979401]
[3.48569560 84.49062347]
[-11.09805393 80.98146057]
[-20.34152985 93.08426666]
[-33.71163177 100.37538147]
[-48.89190674 101.59155273]
[-63.25228500 96.52209473]
[-74.30474091 86.04530334]
[-80.13436890 71.97635651]
[-79.73115540 56.75277710]
[-73.16494751 43.01214600]
[-61.57339859 33.13511276]
[-46.96480179 28.83293152]
[-31.87018776 30.85097885]
[-18.90478897 38.83961868]
[-10.31494141 51.41476822]
[-7.58888674 66.39770508]
[6.99486303 69.90687561]
[21.57861137 73.41604614]
[36.16236115 76.92520905]
[50.74610901 80.43437958]
[57.29601669 68.61323547]
[66.62276459 58.83303070]
[78.11988831 51.72972107]
[91.03976440 47.76520920]
[104.54228973 47.19728470]
[117.74945068 50.06287766]
[129.80244446 56.17565155]
[139.90788269 45.09051895]
[150.01332092 34.00538635]
[135.57778931 38.08163071]
[120.59613800 37.33995819]
[106.63381195 31.85786438]
[95.14974976 22.20818520]
[87.34394073 9.39922714]
[84.03203583 -5.23057985]
[85.56008911 -20.15254593]
[91.76844025 -33.80744934]
[102.00836182 -44.76847076]
[115.20986938 -51.89027405]
[129.99353027 -54.42869186]
[144.81455994 -52.11848068]
[158.12428284 -45.20103836]
[168.53196716 -34.39917755]
[174.95008850 -20.84160233]
[176.70799255 -5.94496727]
[173.62200928 8.73415756]
[166.01490784 21.66154289]
[179.30226135 14.70118618]
[192.58959961 7.74082994]
[205.87693787 0.78047389]
[219.16427612 -6.17988253]
[232.45162964 -13.14023876]
[244.13783264 -22.54409599]
[253.77964783 -34.03476334]
[263.42144775 -45.52542877]
[273.06326294 -57.01609421]
[275.37652588 -73.25126648]
[290.69204712 -79.11360168]
[303.25454712 -68.57243347]
[300.14077759 -52.47161102]
[284.55395508 -47.37428284]
[274.91213989 -35.88361359]
[265.27032471 -24.39294815]
[255.62849426 -12.90228176]
[269.83715820 -17.70993996]
[284.82922363 -18.19823647]
[299.32061768 -14.32534790]
[312.07022095 -6.42297840]
[321.98608398 4.83205986]
[328.21890259 18.47580719]
[330.23489380 33.33971405]
[327.86138916 48.15073776]
[321.30163574 61.64035416]
[311.11749268 72.65322113]
[298.18118286 80.24611664]
[283.60067749 83.76873779]
[268.62475586 82.91938019]
[254.53604126 77.77078247]
[242.54119873 68.76391602]
[233.66754150 56.67018509]
[228.67507935 42.52538681]
[227.99140930 27.54097366]
[231.67507935 13.00032043]
[239.41197205 0.14710292]
[226.12463379 7.10745907]
[212.83729553 14.06781483]
[199.54995728 21.02817154]
[186.26261902 27.98852730]
[172.97526550 34.94888306]
[161.09844971 44.11082077]
[150.99301147 55.19595337]
[140.88757324 66.28108978]
[151.13485718 86.07215881]
[152.33959961 108.32618713]
[144.28874207 129.10783386]
[128.40599060 144.74214172]
[107.50000000 152.46435547]
[107.50000000 167.46435547]
[107.50000000 182.46435547]
[107.50000000 197.46435547]
[107.50000000 212.46435547]
[107.50000000 227.46435547]
[107.50000000 242.46435547]
[107.50000000 257.46435547]
[107.50000000 272.46435547]
[107.50000000 287.46435547]
[122.11001587 291.20581055]
[135.33016968 298.46377563]
[146.32945251 308.78204346]
[154.41641235 321.51199341]
[159.08271790 335.85342407]
[160.03503418 350.90481567]
[157.21350098 365.72000122]
[150.79547119 379.36767578]
[141.18440247 390.98999023]
[128.98443604 399.85632324]
[114.96250153 405.40933228]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[33 55]
[34 54]
[35 53]
[36 52]
[37 51]
[62 127]
[63 126]
[64 125]
[82 124]
[83 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 99]
[89 98]
[90 97]
[91 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
