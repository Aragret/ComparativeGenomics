%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUCAUCCUAGGGGGGGGGGGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGxxxxxxxxxxACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACACCCCCCCCCCAUCCUAAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[76.71936798 391.25125122]
[62.10337448 387.60156250]
[48.66620255 380.79052734]
[37.08186340 371.15979004]
[27.93141556 359.19247437]
[21.67384529 345.48880005]
[18.62302971 330.73614502]
[18.93199730 315.67453003]
[22.58524704 301.05941772]
[29.39953804 287.62390137]
[39.03306580 276.04190063]
[51.00261307 266.89434814]
[64.70780182 260.64010620]
[79.46117401 257.59286499]
[79.76518250 242.59594727]
[80.06918335 227.59902954]
[80.37318420 212.60211182]
[80.67719269 197.60519409]
[80.98119354 182.60827637]
[81.28520203 167.61135864]
[81.58920288 152.61442566]
[81.89321136 137.61750793]
[82.19721222 122.62059784]
[85.89925385 94.13964844]
[77.08247375 82.00439453]
[68.26569366 69.86914062]
[59.44891739 57.73388290]
[46.57363510 65.44911194]
[33.06685638 71.99621582]
[19.03429413 77.32395935]
[4.58577538 81.39064026]
[-10.16562080 84.16443634]
[-25.10444069 85.62363434]
[-40.11376953 85.75681305]
[-55.07612991 84.56293488]
[-69.87442780 82.05134583]
[-84.39282990 78.24169159]
[-98.51772308 73.16380310]
[-112.13855743 66.85740662]
[-125.14871979 59.37186813]
[-137.44639587 50.76577377]
[-148.93533325 41.10647964]
[-159.52560425 30.46957779]
[-169.13433838 18.93832588]
[-177.68634033 6.60296726]
[-185.11465454 -6.43995190]
[-191.36116028 -20.08835220]
[-196.37695312 -34.23541641]
[-200.12278748 -48.77041626]
[-202.56935120 -63.57960129]
[-203.69749451 -78.54706573]
[-203.49838257 -93.55566406]
[-201.97358704 -108.48793030]
[-199.13502502 -123.22699738]
[-195.00491333 -137.65751648]
[-189.61557007 -151.66653442]
[-183.00920105 -165.14442444]
[-175.23750305 -177.98570251]
[-166.36128235 -190.08984375]
[-156.45002747 -201.36213684]
[-145.58129883 -211.71435547]
[-133.84014893 -221.06546021]
[-121.31850433 -229.34230042]
[-108.11434174 -236.48005676]
[-94.33100891 -242.42289734]
[-80.07637787 -247.12429810]
[-65.46201324 -250.54745483]
[-50.60230255 -252.66558838]
[-35.61353302 -253.46212769]
[-20.61302185 -252.93081665]
[-5.71816921 -251.07583618]
[8.95445156 -247.91168213]
[23.29000473 -243.46313477]
[37.17629242 -237.76501465]
[50.50463104 -230.86190796]
[63.17071152 -222.80783081]
[75.07540131 -213.66584778]
[86.12552643 -203.50747681]
[96.23460388 -192.41224670]
[105.32351685 -180.46697998]
[113.32112885 -167.76518250]
[120.16484070 -154.40623474]
[125.80110168 -140.49473572]
[130.18579102 -126.13951874]
[133.28460693 -111.45295715]
[135.07327271 -96.54999542]
[135.53781128 -81.54726410]
[134.67456055 -66.56219482]
[132.49031067 -51.71205521]
[129.00212097 -37.11307526]
[124.23732758 -22.87951088]
[118.23319244 -9.12276649]
[111.03672791 4.04949522]
[102.70424652 16.53417969]
[93.30095673 28.23357582]
[82.90046692 39.05611801]
[71.58417511 48.91710281]
[80.40094757 61.05236053]
[89.21772766 73.18761444]
[98.03450775 85.32286835]
[111.63269043 91.65448761]
[121.96561432 79.99822235]
[137.15463257 79.13313293]
[148.20341492 89.05583191]
[163.16569519 87.99263763]
[178.12796021 86.92943573]
[193.09024048 85.86624146]
[208.05250549 84.80304718]
[213.63565063 70.59771729]
[224.83517456 60.22789383]
[239.42742920 55.75250244]
[254.51509094 58.06014252]
[267.10250854 66.69262695]
[274.69042969 79.93597412]
[275.77227783 95.16069794]
[270.13323975 109.34393311]
[258.89294434 119.66957855]
[244.28320312 124.08747101]
[229.20474243 121.72042847]
[216.65141296 113.03844452]
[209.11570740 99.76531982]
[194.15342712 100.82851410]
[179.19116211 101.89170837]
[164.22888184 102.95491028]
[149.26661682 104.01810455]
[139.73193359 115.40342712]
[124.57321167 116.69480133]
[112.69588470 106.61676025]
[126.36362457 112.79681396]
[129.24130249 127.51819611]
[118.90682220 138.39010620]
[104.05857849 136.26182556]
[97.19412994 122.92459869]
[96.89012909 137.92152405]
[96.58612061 152.91844177]
[96.28211975 167.91535950]
[95.97811127 182.91227722]
[95.67411041 197.90919495]
[95.37010956 212.90611267]
[95.06610107 227.90303040]
[94.76210022 242.89994812]
[94.45809174 257.89688110]
[109.07585907 261.53948975]
[122.51632690 268.34402466]
[134.10533142 277.96911621]
[143.26158142 289.93200684]
[149.52578735 303.63265991]
[152.58375549 318.38381958]
[152.28208923 333.44558716]
[148.63591003 348.06246948]
[141.82814026 361.50128174]
[132.20022583 373.08795166]
[120.23510742 382.24130249]
[106.53295898 388.50219727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 100]
[25 99]
[26 98]
[27 97]
[101 128]
[104 125]
[105 124]
[106 123]
[107 122]
[108 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
