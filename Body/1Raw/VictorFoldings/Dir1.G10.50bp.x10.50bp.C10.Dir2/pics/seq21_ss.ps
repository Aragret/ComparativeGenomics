%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUAUUAGGGGGGGGGGACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUxxxxxxxxxxCGCUGGAGCCGGAGCACCCUAUGUCGCAGUAUCUGUCUUUGAUUCCUGCCCCCCCCCCCCUCAUCCUAUUA\
) } def
/len { sequence length } bind def

/coor [
[95.29541779 390.01651001]
[81.80654144 383.28497314]
[70.32103729 373.52041626]
[61.50666809 361.29052734]
[55.87588882 347.30630493]
[53.75605774 332.38082886]
[55.27042770 317.38183594]
[60.33095169 303.18133545]
[68.64341736 290.60491943]
[79.72454834 280.38375854]
[92.93009949 273.11212158]
[107.49232483 269.21273804]
[107.18434906 254.21591187]
[106.87637329 239.21907043]
[106.56838989 224.22222900]
[106.26041412 209.22538757]
[105.95243835 194.22856140]
[105.64446259 179.23171997]
[105.33648682 164.23487854]
[105.02850342 149.23803711]
[104.72052765 134.24121094]
[92.23133850 132.84683228]
[81.35974884 127.15969086]
[73.48410034 118.14318848]
[69.51371765 107.16476440]
[69.78690338 95.79116058]
[74.05186462 85.56542969]
[81.52962494 77.79766846]
[75.26022339 64.17069244]
[59.99674225 53.92096710]
[62.22369766 36.54036713]
[55.67582703 23.04498291]
[49.12795639 9.54959965]
[36.14265060 0.51121360]
[37.54807281 -14.31693745]
[31.00020027 -27.81232071]
[24.45232964 -41.30770493]
[17.90446091 -54.80308914]
[10.80805683 -68.01827240]
[3.17508674 -80.93096924]
[-4.45788336 -93.84366608]
[-12.09085369 -106.75636292]
[-19.19637871 -112.59651184]
[-19.74485016 -120.01348114]
[-27.11108971 -133.08016968]
[-41.22045898 -127.89154053]
[-55.97945404 -125.03353882]
[-71.00579071 -124.58019257]
[-85.91023254 -126.54325104]
[-100.30673981 -130.87185669]
[-113.82239532 -137.45388794]
[-126.10711670 -146.11886597]
[-136.84269714 -156.64234924]
[-145.75105286 -168.75173950]
[-152.60145569 -182.13337708]
[-157.21644592 -196.44064331]
[-159.47648621 -211.30296326]
[-159.32304382 -226.33534241]
[-156.76008606 -241.14842224]
[-151.85400391 -255.35850525]
[-144.73187256 -268.59753418]
[-135.57817078 -280.52255249]
[-124.63001251 -290.82467651]
[-112.17097473 -299.23709106]
[-98.52377319 -305.54183960]
[-84.04190826 -309.57568359]
[-69.10049438 -311.23406982]
[-54.08654785 -310.47409058]
[-39.38896561 -307.31539917]
[-25.38845444 -301.83984375]
[-12.44765759 -294.18920898]
[-0.90177381 -284.56173706]
[8.95013046 -273.20672607]
[16.85286903 -260.41833496]
[22.60173798 -246.52780151]
[26.04783249 -231.89494324]
[27.10188675 -216.89877319]
[25.73659897 -201.92773438]
[21.98733521 -187.36959839]
[15.95120907 -173.60147095]
[7.78457022 -160.97998047]
[-2.30104494 -149.83203125]
[-14.04439449 -140.44641113]
[-6.67815542 -127.37971497]
[0.82184464 -114.38933563]
[8.45481491 -101.47663879]
[16.08778381 -88.56394196]
[23.72075462 -75.65124512]
[26.46558571 -74.84072876]
[29.04375839 -72.86026001]
[30.99516869 -69.77177429]
[31.89231110 -65.80709839]
[31.39984322 -61.35095978]
[37.94771576 -47.85557556]
[44.49558640 -34.36019135]
[51.04345703 -20.86480713]
[63.56041336 -12.79170227]
[62.62334061 3.00172877]
[69.17121124 16.49711227]
[75.71907806 29.99249649]
[87.07426453 34.27291870]
[92.62430573 45.51428986]
[88.88719940 57.90128708]
[95.15660858 71.52826691]
[114.79292297 73.01292419]
[130.09825134 87.29396057]
[133.30851746 109.23503876]
[148.13099670 111.53591156]
[162.95349121 113.83679199]
[177.77597046 116.13766479]
[194.75117493 109.07558441]
[208.00959778 120.53240967]
[222.87619019 122.52846527]
[237.74278259 124.52452087]
[249.17643738 113.85654449]
[264.79498291 113.08544159]
[277.22384644 122.57529449]
[280.59451294 137.84529114]
[273.31539917 151.68540955]
[258.82354736 157.56076050]
[243.96151733 152.69718933]
[235.74673462 139.39112854]
[220.88012695 137.39506531]
[206.01353455 135.39900208]
[196.17315674 142.50036621]
[183.73667908 140.91754150]
[175.47509766 130.96014404]
[160.65260315 128.65927124]
[145.83012390 126.35839844]
[131.00764465 124.05751801]
[119.71736908 133.93322754]
[120.02534485 148.93006897]
[120.33332062 163.92691040]
[120.64129639 178.92373657]
[120.94927979 193.92057800]
[121.25725555 208.91741943]
[121.56523132 223.91426086]
[121.87320709 238.91108704]
[122.18119049 253.90792847]
[122.48916626 268.90475464]
[137.19920349 272.20300293]
[150.69215393 278.92636108]
[162.18357849 288.68395996]
[171.00535583 300.90850830]
[176.64462280 314.88928223]
[178.77349854 329.81347656]
[177.26821899 344.81338501]
[172.21630859 359.01696777]
[163.91146851 371.59841919]
[152.83653259 381.82629395]
[139.63539124 389.10592651]
[125.07553101 393.01412964]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[28 104]
[29 103]
[31 100]
[32 99]
[33 98]
[35 96]
[36 95]
[37 94]
[38 93]
[39 88]
[40 87]
[41 86]
[42 85]
[44 84]
[45 83]
[107 130]
[108 129]
[109 128]
[110 127]
[112 124]
[113 123]
[114 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
