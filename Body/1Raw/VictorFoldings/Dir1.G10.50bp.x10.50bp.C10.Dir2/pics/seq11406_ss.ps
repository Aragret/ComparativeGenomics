%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCCUAAAUAAGGGGGGGGGGAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUxxxxxxxxxxCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGCCCCCCCCCCUUCCCCUUAAAUAA\
) } def
/len { sequence length } bind def

/coor [
[79.86846161 563.89788818]
[65.50621033 559.39117432]
[52.34532166 552.08526611]
[40.92472458 542.27941895]
[31.71208572 530.37512207]
[25.08465576 516.85986328]
[21.31382751 502.28710938]
[20.55401039 487.25357056]
[22.83632088 472.37487793]
[28.06729698 458.26028442]
[36.03273773 445.48776245]
[46.40645599 434.58041382]
[58.76366425 425.98480225]
[72.59833527 420.05294800]
[87.34394836 417.02777100]
[87.34394836 402.02777100]
[87.34394836 387.02777100]
[87.34394836 372.02777100]
[87.34394836 357.02777100]
[87.34394836 342.02777100]
[87.34394836 327.02777100]
[87.34394836 312.02777100]
[87.34394836 297.02777100]
[87.34394836 282.02777100]
[74.15837097 278.34588623]
[62.37306213 271.35494995]
[52.80250168 261.53039551]
[46.11011124 249.54374695]
[42.76227188 236.21662903]
[42.99584198 222.46466064]
[46.80139923 209.23434448]
[53.92343903 197.43804932]
[63.87751007 187.89105225]
[75.98316956 181.25517273]
[89.41049957 177.99296570]
[90.00309753 163.00466919]
[90.59569550 148.01637268]
[91.18829346 133.02809143]
[91.78089142 118.03980255]
[75.68884277 99.15568542]
[89.89661407 73.00077820]
[83.84976196 59.27359390]
[77.80291748 45.54640961]
[71.75606537 31.81922531]
[57.37167358 36.13998413]
[42.56533051 38.66027451]
[27.56149673 39.34188843]
[12.58762646 38.17449570]
[-2.12928176 35.17578888]
[-16.36612320 30.39123535]
[-29.90707016 23.89336014]
[-42.54684448 15.78067303]
[-54.09383392 6.17615986]
[-64.37298584 -4.77457809]
[-73.22846985 -16.90552902]
[-80.52604675 -30.03279305]
[-86.15507507 -43.95736313]
[-90.03022766 -58.46814346]
[-92.09275818 -73.34516144]
[-92.31140137 -88.36287689]
[-90.68283844 -103.29363251]
[-87.23175812 -117.91107178]
[-82.01047516 -131.99360657]
[-75.09815216 -145.32775879]
[-66.59956360 -157.71136475]
[-56.64356613 -168.95669556]
[-45.38107300 -178.89329529]
[-32.98282623 -187.37049866]
[-19.63678169 -194.25982666]
[-5.54525948 -199.45680237]
[9.07811451 -202.88267517]
[24.01165390 -204.48547363]
[39.02897263 -204.24093628]
[53.90240860 -202.15275574]
[68.40648651 -198.25257874]
[82.32132721 -192.59953308]
[95.43598175 -185.27932739]
[107.55164337 -176.40293884]
[118.48463440 -166.10491943]
[128.06921387 -154.54138184]
[136.16009521 -141.88763428]
[142.63459778 -128.33549500]
[147.39459229 -114.09042358]
[150.36791992 -99.36836243]
[151.50947571 -84.39250183]
[150.80198669 -69.38986206]
[148.25616455 -54.58789444]
[143.91059875 -40.21097565]
[137.83117676 -26.47706795]
[130.11006165 -13.59436798]
[120.86429596 -1.75817716]
[110.23404694 8.85207176]
[98.38046265 18.07553101]
[85.48324585 25.77237320]
[91.53009796 39.49955750]
[97.57695007 53.22674179]
[103.62380219 66.95392609]
[98.31963348 52.92303848]
[101.81573486 38.33615112]
[112.90394592 28.23409081]
[127.75248718 26.10785294]
[141.23010254 32.69220352]
[148.67932129 45.71177673]
[147.52587891 60.66736221]
[138.16838074 72.39072418]
[123.84016418 76.83059692]
[138.38499451 73.16343689]
[152.92982483 69.49627686]
[164.41963196 58.61993790]
[178.65228271 63.01092148]
[188.08015442 50.03035736]
[204.11277771 49.45207977]
[214.45130920 61.71969223]
[211.16491699 77.42253113]
[196.77462769 84.51472473]
[182.31944275 77.55574799]
[171.86997986 88.16978455]
[156.59696960 84.04109955]
[142.05215454 87.70825958]
[127.50732422 91.37541962]
[121.80535126 110.78295135]
[106.76918030 118.63240051]
[106.17658234 133.62068176]
[105.58398438 148.60897827]
[104.99138641 163.59727478]
[104.39878845 178.58555603]
[119.85306549 184.09234619]
[132.84834290 194.07601929]
[142.13055420 207.55870056]
[146.80842590 223.22561646]
[146.43896484 239.55325317]
[141.06945801 254.95748901]
[131.23171997 267.94729614]
[117.88947296 277.26913452]
[102.34394836 282.02777100]
[102.34394836 297.02777100]
[102.34394836 312.02777100]
[102.34394836 327.02777100]
[102.34394836 342.02777100]
[102.34394836 357.02777100]
[102.34394836 372.02777100]
[102.34394836 387.02777100]
[102.34394836 402.02777100]
[102.34394836 417.02777100]
[117.08956909 420.05294800]
[130.92424011 425.98480225]
[143.28144836 434.58041382]
[153.65516663 445.48776245]
[161.62060547 458.26028442]
[166.85157776 472.37487793]
[169.13389587 487.25357056]
[168.37406921 502.28710938]
[164.60324097 516.85986328]
[157.97581482 530.37512207]
[148.76318359 542.27941895]
[137.34257507 552.08526611]
[124.18169403 559.39117432]
[109.81944275 563.89788818]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[35 126]
[36 125]
[37 124]
[38 123]
[39 122]
[41 97]
[42 96]
[43 95]
[44 94]
[106 120]
[107 119]
[108 118]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
