%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCGCCCACGGGGGGGGGGGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGxxxxxxxxxxCUAUUCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCCCCCCCCCCCAAUCGCCCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.80966187]
[71.19830322 359.79364014]
[59.48964310 350.26422119]
[50.78712082 337.92855835]
[45.73651886 323.70202637]
[44.71262741 308.64035034]
[47.79142761 293.86120605]
[54.74444962 280.46127319]
[65.05573273 269.43493652]
[77.96011353 261.60043335]
[92.50000000 257.53912354]
[92.50000000 242.53912354]
[92.50000000 227.53912354]
[92.50000000 212.53912354]
[92.50000000 197.53912354]
[92.50000000 182.53912354]
[92.50000000 167.53912354]
[92.50000000 152.53912354]
[92.50000000 137.53912354]
[92.50000000 122.53911591]
[92.50000000 107.53911591]
[91.40869141 92.57886505]
[89.23184967 77.73766327]
[87.05501556 62.89645767]
[72.09876251 64.10865784]
[57.09540939 64.35018921]
[42.10789108 63.62005615]
[27.19906044 61.92130661]
[12.43145943 59.26107025]
[-2.13297439 55.65050507]
[-16.43315125 51.10475922]
[-30.40909195 45.64289093]
[-44.00217819 39.28781509]
[-57.15538788 32.06618500]
[-69.81356049 24.00829506]
[-81.92359924 15.14793777]
[-93.43470764 5.52227926]
[-104.29859924 -4.82830715]
[-114.46971893 -15.86040688]
[-123.90540314 -27.52774811]
[-132.56607056 -39.78139114]
[-140.41539001 -52.56994247]
[-147.42045593 -65.83975983]
[-153.55186462 -79.53518677]
[-158.78390503 -93.59877777]
[-163.09463501 -107.97154999]
[-166.46598816 -122.59320831]
[-168.88380432 -137.40243530]
[-170.33795166 -152.33709717]
[-170.82231140 -167.33457947]
[-170.33488464 -182.33195496]
[-168.87770081 -197.26632690]
[-166.45686340 -212.07505798]
[-163.08251953 -226.69602966]
[-158.76885986 -241.06791687]
[-153.53393555 -255.13043213]
[-147.39973450 -268.82461548]
[-140.39196777 -282.09298706]
[-132.54003906 -294.87994385]
[-123.87686920 -307.13183594]
[-114.43880463 -318.79724121]
[-104.26543427 -329.82727051]
[-93.39942169 -340.17562866]
[-81.88635254 -349.79895020]
[-69.77450562 -358.65682983]
[-57.11468887 -366.71212769]
[-43.96000671 -373.93109131]
[-30.36562347 -380.28338623]
[-16.38856888 -385.74240112]
[-2.08746386 -390.28521729]
[12.47770691 -393.89282227]
[27.24585152 -396.55004883]
[42.15502548 -398.24572754]
[57.14269638 -398.97280884]
[72.14599609 -398.72821045]
[87.10200500 -397.51296997]
[101.94798279 -395.33215332]
[116.62165833 -392.19494629]
[131.06149292 -388.11450195]
[145.20690918 -383.10787964]
[158.99858093 -377.19616699]
[172.37867737 -370.40408325]
[185.29104614 -362.76019287]
[197.68154907 -354.29647827]
[209.49821472 -345.04849243]
[220.69148254 -335.05499268]
[231.21438599 -324.35791016]
[241.02279663 -313.00213623]
[250.07557678 -301.03524780]
[258.33474731 -288.50750732]
[265.76568604 -275.47140503]
[272.33721924 -261.98162842]
[278.02178955 -248.09475708]
[282.79550171 -233.86906433]
[286.63839722 -219.36419678]
[289.53433228 -204.64100647]
[291.47116089 -189.76123047]
[292.44076538 -174.78729248]
[292.43905640 -159.78199768]
[291.46606445 -144.80828857]
[289.52584839 -129.92895508]
[286.62658691 -115.20641327]
[282.78039551 -100.70242310]
[278.00344849 -86.47781372]
[272.31573486 -72.59224701]
[265.74114990 -59.10396576]
[258.30725098 -46.06954575]
[250.04522705 -33.54365921]
[240.98971558 -21.57884216]
[231.17872620 -10.22528172]
[220.65339661 0.46940291]
[209.45787048 10.46035290]
[197.63911438 19.70566368]
[185.24668884 28.16655540]
[172.33256531 35.80754089]
[158.95094299 42.59656906]
[145.15792847 48.50516891]
[131.01136780 53.50855255]
[116.57061005 57.58573532]
[101.89621735 60.71961975]
[104.07305908 75.56082153]
[106.24989319 90.40203094]
[115.51944733 78.60900879]
[130.16384888 75.36222839]
[143.54904175 82.13251495]
[149.61138916 95.85285950]
[145.60459900 110.30781555]
[133.34379578 118.94914246]
[118.38322449 117.86223602]
[107.50000000 107.53911591]
[107.50000000 122.53911591]
[107.50000000 137.53912354]
[107.50000000 152.53912354]
[107.50000000 167.53912354]
[107.50000000 182.53912354]
[107.50000000 197.53912354]
[107.50000000 212.53912354]
[107.50000000 227.53912354]
[107.50000000 242.53912354]
[107.50000000 257.53912354]
[122.03988647 261.60043335]
[134.94427490 269.43493652]
[145.25555420 280.46127319]
[152.20857239 293.86120605]
[155.28736877 308.64035034]
[154.26348877 323.70202637]
[149.21287537 337.92855835]
[140.51036072 350.26422119]
[128.80169678 359.79364014]
[114.95575714 365.80966187]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 122]
[23 121]
[24 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
