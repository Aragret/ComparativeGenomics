%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACCCAAGGGGGGGGGGCCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAxxxxxxxxxxAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCCCCCCCCCCCAUAACCAA\
) } def
/len { sequence length } bind def

/coor [
[103.54832458 372.21414185]
[89.70238495 366.19812012]
[77.99372864 356.66870117]
[69.29119873 344.33303833]
[64.24060059 330.10650635]
[63.21670914 315.04483032]
[66.29550934 300.26565552]
[73.24852753 286.86572266]
[83.55981445 275.83941650]
[96.46419525 268.00488281]
[111.00408173 263.94357300]
[111.00408173 248.94357300]
[111.00408173 233.94357300]
[111.00408173 218.94357300]
[111.00408173 203.94357300]
[111.00408173 188.94357300]
[111.00408173 173.94357300]
[111.00408173 158.94357300]
[111.00408173 143.94357300]
[111.00408173 128.94357300]
[105.30357361 124.06975555]
[91.16135406 129.06953430]
[93.90254974 114.32210541]
[88.20204163 109.44827271]
[73.38427734 111.77938080]
[58.56652451 114.11048126]
[43.77381516 116.59560394]
[29.00776100 119.23446655]
[14.24170494 121.87332916]
[7.59315300 135.89390564]
[-6.04282236 143.29928589]
[-21.42290878 141.24197388]
[-32.63315201 130.51304626]
[-35.36298370 115.23797607]
[-28.56272507 101.29035187]
[-14.84721851 94.03332520]
[0.50964624 96.25736237]
[11.60284042 107.10727692]
[26.36889648 104.46841431]
[41.13495255 101.82954407]
[47.20541763 97.52895355]
[56.23542023 99.29272461]
[71.05317688 96.96162415]
[85.87093353 94.63051605]
[71.51892090 90.26935577]
[62.83954620 78.03545380]
[63.46498108 63.04849625]
[73.13349915 51.58028793]
[87.79897308 48.43008423]
[101.32415009 54.91619492]
[108.04895782 68.32428741]
[105.15853882 83.04438782]
[114.17607117 71.05755615]
[123.19359589 59.07072449]
[132.21113586 47.08389282]
[141.22865295 35.09706116]
[150.24618530 23.11022758]
[146.89851379 0.80440259]
[167.53344727 -14.75185394]
[169.09103394 -29.67076683]
[170.64860535 -44.58967972]
[172.20619202 -59.50859070]
[157.80596924 -63.87094498]
[144.49168396 -70.87995911]
[132.74464417 -80.28227234]
[122.98948669 -91.73799133]
[115.57886505 -104.83299255]
[110.78065491 -119.09391022]
[108.76832581 -134.00521851]
[109.61460876 -149.02787781]
[113.28891754 -163.61882019]
[119.65842438 -177.25062561]
[128.49288940 -189.43048096]
[139.47293091 -199.71809387]
[152.20162964 -207.74159241]
[166.21887207 -213.21092224]
[181.01792908 -215.92837524]
[196.06381226 -215.79570007]
[210.81265259 -212.81770325]
[224.73126221 -207.10205078]
[237.31649780 -198.85533142]
[248.11341858 -188.37568665]
[256.73171997 -176.04194641]
[262.85986328 -162.29994202]
[266.27630615 -147.64646912]
[266.85754395 -132.61122131]
[264.58258057 -117.73771667]
[259.53363037 -103.56363678]
[251.89324951 -90.60134888]
[241.93759155 -79.31943512]
[230.02656555 -70.12573242]
[216.59075928 -63.35259247]
[202.11584473 -59.24485397]
[187.12510681 -57.95100784]
[185.56752014 -43.03209686]
[184.00994873 -28.11318588]
[182.45236206 -13.19427299]
[193.11398315 -2.64298272]
[208.01588440 -4.35567236]
[222.91780090 -6.06836224]
[225.47720337 -20.95547295]
[232.12837219 -34.51787186]
[242.33210754 -45.65612030]
[255.26123047 -53.46728516]
[269.86764526 -57.31814957]
[284.96728516 -56.89654922]
[299.33609009 -52.23665237]
[311.80920410 -43.71622086]
[321.37551880 -32.02596664]
[327.25955200 -18.11356544]
[328.98428345 -3.10683560]
[326.40994263 11.77769661]
[319.74514771 25.33340836]
[309.53021240 36.46139908]
[296.59326172 44.25957108]
[281.98297119 48.09576035]
[266.88375854 47.65898895]
[252.51966858 42.98466110]
[240.05511475 34.45170212]
[230.50053406 22.75184441]
[224.63047791 8.83353996]
[209.72857666 10.54623032]
[194.82667542 12.25891972]
[182.17115784 31.28082085]
[162.23301697 32.12775803]
[153.21548462 44.11458969]
[144.19796753 56.10142136]
[135.18043518 68.08825684]
[126.16290283 80.07508850]
[117.14537048 92.06192017]
[126.00408173 128.94357300]
[126.00408173 143.94357300]
[126.00408173 158.94357300]
[126.00408173 173.94357300]
[126.00408173 188.94357300]
[126.00408173 203.94357300]
[126.00408173 218.94357300]
[126.00408173 233.94357300]
[126.00408173 248.94357300]
[126.00408173 263.94357300]
[140.54396057 268.00488281]
[153.44834900 275.83941650]
[163.75962830 286.86572266]
[170.71266174 300.26565552]
[173.79145813 315.04483032]
[172.76756287 330.10650635]
[167.71696472 344.33303833]
[159.01443481 356.66870117]
[147.30577087 366.19812012]
[133.45983887 372.21414185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 44]
[25 43]
[26 42]
[27 40]
[28 39]
[29 38]
[52 130]
[53 129]
[54 128]
[55 127]
[56 126]
[57 125]
[59 97]
[60 96]
[61 95]
[62 94]
[98 123]
[99 122]
[100 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
