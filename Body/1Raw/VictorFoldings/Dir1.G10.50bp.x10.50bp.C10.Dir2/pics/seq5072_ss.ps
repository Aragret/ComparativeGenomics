%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUAGCCGGGGGGGGGGCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAGCCUUCUxxxxxxxxxxCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUCCCCCCCCCCAAAACUAGGC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.26864624]
[71.19830322 351.25262451]
[59.48964310 341.72320557]
[50.78712082 329.38754272]
[45.73651886 315.16101074]
[44.71262741 300.09933472]
[47.79142761 285.32019043]
[54.74444962 271.92025757]
[65.05573273 260.89392090]
[77.96011353 253.05940247]
[92.50000000 248.99809265]
[92.50000000 233.99809265]
[92.50000000 218.99809265]
[92.50000000 203.99809265]
[92.50000000 188.99809265]
[92.50000000 173.99809265]
[92.50000000 158.99809265]
[92.50000000 143.99809265]
[92.50000000 128.99809265]
[92.50000000 113.99810028]
[88.49225616 99.54341125]
[80.76817322 86.68500519]
[73.04409027 73.82660675]
[65.32000732 60.96820068]
[51.87455750 67.63650513]
[37.93613052 73.20126343]
[23.59512138 77.62639618]
[8.94453907 80.88320160]
[-5.92060041 82.95055389]
[-20.90389061 83.81504059]
[-35.90815735 83.47106934]
[-50.83609009 81.92086029]
[-65.59087372 79.17446899]
[-80.07682037 75.24971008]
[-94.19997406 70.17203522]
[-107.86874390 63.97438049]
[-120.99449158 56.69692993]
[-133.49206543 48.38689041]
[-145.28044128 39.09815598]
[-156.28314209 28.89096260]
[-166.42883301 17.83151245]
[-175.65168762 5.99153137]
[-183.89192200 -6.55219316]
[-191.09606934 -19.71830750]
[-197.21740723 -33.42142487]
[-202.21624756 -47.57267761]
[-206.06018066 -62.08028030]
[-208.72425842 -76.85015106]
[-210.19120789 -91.78649139]
[-210.45150757 -106.79244232]
[-209.50347900 -121.77068329]
[-207.35327148 -136.62406921]
[-204.01483154 -151.25625610]
[-199.50981140 -165.57237244]
[-193.86740112 -179.47955322]
[-187.12423706 -192.88760376]
[-179.32402039 -205.70957947]
[-170.51736450 -217.86231995]
[-160.76135254 -229.26699829]
[-150.11929321 -239.84965515]
[-138.66017151 -249.54165649]
[-126.45832825 -258.28015137]
[-113.59289551 -266.00848389]
[-100.14730072 -272.67648315]
[-86.20874786 -278.24093628]
[-71.86764526 -282.66574097]
[-57.21698761 -285.92224121]
[-42.35180283 -287.98925781]
[-27.36849403 -288.85342407]
[-12.36423492 -288.50909424]
[2.56366396 -286.95855713]
[17.31838799 -284.21185303]
[31.80424500 -280.28677368]
[45.92729187 -275.20880127]
[59.59592819 -269.01083374]
[72.72150421 -261.73309326]
[85.21890259 -253.42277527]
[97.00707245 -244.13378906]
[108.00955200 -233.92634583]
[118.15499115 -222.86666870]
[127.37759399 -211.02648926]
[135.61753845 -198.48258972]
[142.82139587 -185.31631470]
[148.94244385 -171.61305237]
[153.94097900 -157.46170044]
[157.78457642 -142.95401001]
[160.44833374 -128.18408203]
[161.91494751 -113.24770355]
[162.17492676 -98.24174500]
[161.22656250 -83.26353455]
[159.07603455 -68.41019440]
[155.73727417 -53.77807617]
[151.23191833 -39.46206284]
[145.58921814 -25.55500793]
[138.84574890 -12.14709949]
[131.04525757 0.67470312]
[122.23832703 12.82724476]
[112.48207855 24.23171043]
[101.83977509 34.81413651]
[90.38044739 44.50588989]
[78.17840576 53.24411774]
[85.90248871 66.10251617]
[93.62657928 78.96092224]
[101.35066223 91.81932068]
[106.49048615 87.90740204]
[114.02725220 86.95255280]
[122.45044708 89.96743011]
[137.09394836 93.21826172]
[152.24298096 88.65564728]
[162.99092102 98.96733093]
[177.63442993 102.21815491]
[192.27792358 105.46898651]
[206.92143250 108.71981049]
[221.56494141 111.97063446]
[236.20843506 115.22145844]
[249.40380859 106.52332306]
[264.86782837 109.78514099]
[273.42596436 123.07173920]
[270.00085449 138.50041199]
[256.62451172 146.91760254]
[241.23291016 143.32954407]
[232.95761108 129.86495972]
[218.31410217 126.61413574]
[203.67060852 123.36331177]
[189.02709961 120.11248779]
[174.38360596 116.86165619]
[159.74009705 113.61083221]
[145.63847351 118.40596771]
[133.84312439 107.86176300]
[119.19962311 104.61093140]
[107.50000000 113.99810028]
[107.50000000 128.99809265]
[107.50000000 143.99809265]
[107.50000000 158.99809265]
[107.50000000 173.99809265]
[107.50000000 188.99809265]
[107.50000000 203.99809265]
[107.50000000 218.99809265]
[107.50000000 233.99809265]
[107.50000000 248.99809265]
[122.03988647 253.05940247]
[134.94427490 260.89392090]
[145.25555420 271.92025757]
[152.20857239 285.32019043]
[155.28736877 300.09933472]
[154.26348877 315.16101074]
[149.21287537 329.38754272]
[140.51036072 341.72320557]
[128.80169678 351.25262451]
[114.95575714 357.26864624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 104]
[22 103]
[23 102]
[24 101]
[107 130]
[108 129]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
