%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAUCCUAGGGGGGGGGGUACAACCGUAUCGGCGAUAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUxxxxxxxxxxUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCACAGCCCCCCCCCCCACCAAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[83.89643860 389.28805542]
[70.67624664 382.01559448]
[59.78944016 371.56860352]
[51.97830963 358.65933228]
[47.77542877 344.16802979]
[47.46735764 329.08267212]
[51.07509613 314.43185425]
[58.35266876 301.21447754]
[68.80387878 290.33169556]
[81.71614075 282.52557373]
[96.20907593 278.32827759]
[95.89701843 263.33151245]
[95.58496094 248.33476257]
[95.27291107 233.33801270]
[94.96085358 218.34126282]
[94.64879608 203.34451294]
[94.33673859 188.34774780]
[94.02468109 173.35099792]
[93.71262360 158.35424805]
[93.40057373 143.35749817]
[93.08851624 128.36073303]
[75.56410980 122.86186218]
[62.82468033 106.47734833]
[61.42576218 83.36638641]
[46.56271362 85.38871765]
[31.69966698 87.41105652]
[16.83662033 89.43338776]
[1.97357404 91.45572662]
[-12.86763191 93.63256073]
[-27.68539047 95.96366119]
[-42.50314713 98.29476929]
[-57.32090759 100.62586975]
[-72.02796173 109.06026459]
[-84.20404816 97.26284027]
[-76.23834991 82.29674530]
[-59.65200806 85.80811310]
[-44.83425140 83.47701263]
[-30.01649284 81.14590454]
[-15.19873524 78.81480408]
[-9.04011631 74.64142609]
[-0.04876048 76.59267426]
[14.81428623 74.57034302]
[29.67733383 72.54800415]
[44.54037857 70.52567291]
[59.40342712 68.50334167]
[63.86024094 54.18074036]
[52.76892853 44.08209229]
[41.67761230 33.98344040]
[30.58629608 23.88479233]
[26.16602516 23.09568214]
[22.61267662 21.10954094]
[20.20137215 18.35863304]
[19.03356361 15.32050800]
[19.03765488 12.45566654]
[8.82417583 1.47000182]
[-7.00162554 -2.82837677]
[-10.92985344 -18.75009346]
[1.08051515 -29.91625023]
[16.67424393 -24.84006310]
[19.80983925 -8.74347782]
[30.02331924 2.24218655]
[40.68494797 12.79347706]
[51.77626038 22.89212608]
[62.86757660 32.99077606]
[73.95889282 43.08942413]
[87.80210876 37.31315231]
[88.42608643 22.32613754]
[89.05006409 7.33912086]
[89.67404175 -7.64789534]
[75.86965942 -14.01244640]
[65.55535889 -25.17862701]
[60.30398560 -39.44367218]
[60.91633987 -54.63226700]
[67.29904938 -68.42826080]
[78.47878265 -78.72787476]
[92.75072479 -83.96047211]
[107.93850708 -83.32814026]
[121.72608948 -76.92729187]
[132.01098633 -65.73401642]
[137.22480774 -51.45520020]
[136.57249451 -36.26826859]
[130.15351868 -22.48911285]
[118.94671631 -12.21895409]
[104.66105652 -7.02391768]
[104.03707886 7.96309805]
[103.41310120 22.95011520]
[102.78912354 37.93712997]
[114.39046478 47.44548798]
[128.96316528 43.89072800]
[127.85015869 28.89702606]
[129.22036743 13.92463779]
[133.03640747 -0.61797911]
[139.19416809 -14.33409214]
[147.52568054 -26.84951591]
[157.80363464 -37.82281876]
[169.74766541 -46.95464325]
[183.03190613 -53.99586868]
[197.29396057 -58.75439835]
[212.14474487 -61.10042191]
[227.17913818 -60.96993256]
[241.98696899 -58.36649704]
[256.16427612 -53.36113739]
[269.32431030 -46.09039688]
[281.10803223 -36.75263596]
[291.19396973 -25.60258865]
[299.30700684 -12.94443989]
[305.22576904 0.87648755]
[308.78881836 15.48314953]
[309.89892578 30.47706413]
[308.52584839 45.44918823]
[304.70700073 59.99106979]
[298.54660034 73.70599365]
[290.21267700 86.21981812]
[279.93258667 97.19113922]
[267.98681641 106.32066345]
[254.70121765 113.35932159]
[240.43824768 118.11510468]
[225.58700562 120.45826721]
[210.55264282 120.32489014]
[195.74531555 117.71859741]
[181.56896973 112.71050262]
[168.41033936 105.43723297]
[156.62841797 96.09719849]
[146.54461670 84.94521332]
[138.43403625 72.28549957]
[132.51792908 58.46342850]
[117.94522858 62.01819229]
[135.48434448 102.85787201]
[108.08526611 128.04867554]
[108.39732361 143.04544067]
[108.70938110 158.04219055]
[109.02143860 173.03894043]
[109.33349609 188.03569031]
[109.64554596 203.03245544]
[109.95760345 218.02920532]
[110.26966095 233.02595520]
[110.58171844 248.02270508]
[110.89377594 263.01947021]
[111.20583344 278.01620483]
[125.86082458 281.60699463]
[139.08662415 288.86923218]
[149.98150635 299.30783081]
[157.80259705 312.21105957]
[162.01666260 326.69912720]
[162.33639526 341.78421021]
[158.73995972 356.43780518]
[151.47259521 369.66082764]
[141.02980042 380.55166626]
[128.12356567 388.36776733]
[113.63387299 392.57626343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 45]
[25 44]
[26 43]
[27 42]
[28 41]
[29 39]
[30 38]
[31 37]
[32 36]
[46 65]
[47 64]
[48 63]
[49 62]
[54 61]
[55 60]
[66 87]
[67 86]
[68 85]
[69 84]
[88 127]
[89 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
