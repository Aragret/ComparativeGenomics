%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGCUACUCCGGGGGGGGGGUACCUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUxxxxxxxxxxCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGCCCCCCCCCCACGCUACUUC\
) } def
/len { sequence length } bind def

/coor [
[107.57186890 489.92062378]
[93.72592926 483.90460205]
[82.01726532 474.37518311]
[73.31474304 462.03952026]
[68.26413727 447.81298828]
[67.24024963 432.75131226]
[70.31904602 417.97213745]
[77.27207184 404.57220459]
[87.58335114 393.54589844]
[100.48773193 385.71136475]
[115.02761841 381.65005493]
[115.02761841 366.65005493]
[115.02761841 351.65005493]
[115.02761841 336.65005493]
[115.02761841 321.65005493]
[115.02761841 306.65005493]
[115.02761841 291.65005493]
[115.02761841 276.65005493]
[115.02761841 261.65005493]
[115.02761841 246.65007019]
[115.02761841 231.65007019]
[114.09199524 216.67927551]
[112.22438049 201.79598999]
[110.35676575 186.91270447]
[108.48915100 172.02943420]
[106.62154388 157.14614868]
[102.64236450 150.86030579]
[104.87322235 141.93421936]
[103.31563568 127.01530457]
[78.49925232 109.84352112]
[86.51421356 85.12813568]
[81.31879425 71.05661011]
[69.28058624 60.79055405]
[72.13072205 46.17118454]
[66.93531036 32.09966278]
[55.33396530 22.59130478]
[40.51620865 20.26020050]
[25.69845009 17.92909813]
[10.88069153 15.59799290]
[-4.22034407 21.99258041]
[-17.14393044 11.89738655]
[-14.59538937 -4.30252028]
[0.80355865 -9.94206333]
[13.21179581 0.78023523]
[28.02955437 3.11133909]
[42.84731293 5.44244289]
[57.66506958 7.77354670]
[62.94071579 2.44273376]
[58.98309326 -12.02575684]
[73.49200439 -8.21889210]
[78.76764679 -13.54970551]
[76.28253174 -28.34241295]
[73.79741669 -43.13512039]
[71.31229401 -57.92782593]
[68.82717896 -72.72053528]
[58.76649857 -80.85912323]
[57.03042221 -93.27705383]
[64.01213074 -103.20494843]
[61.83529663 -118.04615021]
[59.65845871 -132.88735962]
[57.48162079 -147.72856140]
[55.30478287 -162.56976318]
[53.12794876 -177.41098022]
[38.24064636 -180.17628479]
[25.05910492 -187.62785339]
[15.01315880 -198.95735168]
[9.19251537 -212.93586731]
[8.22855663 -228.04710388]
[12.22584438 -242.65191650]
[20.75078392 -255.16607666]
[32.87865067 -264.23214722]
[47.29390717 -268.86669922]
[62.43289566 -268.56701660]
[76.65345001 -263.36560059]
[88.41302490 -253.82667542]
[96.43604279 -240.98495483]
[99.85221100 -226.23339844]
[98.29098511 -211.17214966]
[91.92169952 -197.43493652]
[81.43526459 -186.51187134]
[67.96915436 -179.58781433]
[70.14598846 -164.74659729]
[72.32283020 -149.90539551]
[74.49966431 -135.06419373]
[76.67649841 -120.22299194]
[78.85334015 -105.38178253]
[90.47087860 -92.26565552]
[83.61988068 -75.20565033]
[86.10500336 -60.41294479]
[88.59011841 -45.62023926]
[91.07524109 -30.82753181]
[93.56035614 -16.03482437]
[96.84493256 -8.16489410]
[98.06108093 -0.15983999]
[97.33221436 7.47273016]
[94.89904785 14.29082203]
[91.09579468 19.94351959]
[86.32122803 24.18901253]
[81.00682831 26.90424728]
[86.20223999 40.97576904]
[97.86884308 50.23533630]
[95.39031219 65.86119843]
[100.58573151 79.93271637]
[106.98294830 79.66107178]
[113.55251312 81.50032043]
[119.58355713 85.51037598]
[124.35205841 91.51003265]
[127.20235443 99.07698822]
[142.18206787 98.29714203]
[157.16178894 97.51729584]
[172.66514587 90.65566254]
[183.55038452 103.65366364]
[174.07368469 117.71170807]
[157.94163513 112.49701691]
[142.96191406 113.27685547]
[127.98220062 114.05670166]
[118.23455048 125.45772552]
[119.79212952 140.37663269]
[121.50482178 155.27853394]
[123.37243652 170.16181946]
[125.24004364 185.04510498]
[127.10765839 199.92837524]
[128.97528076 214.81166077]
[139.32478333 203.95405579]
[154.31463623 203.40237427]
[165.43428040 213.46981812]
[166.37048340 228.44058228]
[156.59173584 239.81492615]
[141.64993286 241.13504028]
[130.02761841 231.65007019]
[130.02761841 246.65007019]
[130.02761841 261.65005493]
[130.02761841 276.65005493]
[130.02761841 291.65005493]
[130.02761841 306.65005493]
[130.02761841 321.65005493]
[130.02761841 336.65005493]
[130.02761841 351.65005493]
[130.02761841 366.65005493]
[130.02761841 381.65005493]
[144.56750488 385.71136475]
[157.47189331 393.54589844]
[167.78317261 404.57220459]
[174.73619080 417.97213745]
[177.81498718 432.75131226]
[176.79110718 447.81298828]
[171.74049377 462.03952026]
[163.03797913 474.37518311]
[151.32931519 483.90460205]
[137.48338318 489.92062378]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[28 118]
[29 117]
[31 103]
[32 102]
[34 100]
[35 99]
[36 47]
[37 46]
[38 45]
[39 44]
[51 92]
[52 91]
[53 90]
[54 89]
[55 88]
[58 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
[108 116]
[109 115]
[110 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
