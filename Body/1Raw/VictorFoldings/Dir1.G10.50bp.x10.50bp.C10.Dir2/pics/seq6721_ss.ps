%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUAUCUGGGGGGGGGGCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACUAACAGACCGCAACCUxxxxxxxxxxUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAACCCCCCCCCCUCCCCUAUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 421.64639282]
[71.19830322 415.63034058]
[59.48964310 406.10092163]
[50.78712082 393.76525879]
[45.73651886 379.53875732]
[44.71262741 364.47705078]
[47.79142761 349.69790649]
[54.74444962 336.29797363]
[65.05573273 325.27163696]
[77.96011353 317.43713379]
[92.50000000 313.37582397]
[92.50000000 298.37582397]
[92.50000000 283.37582397]
[92.50000000 268.37582397]
[92.50000000 253.37582397]
[92.50000000 238.37582397]
[92.50000000 223.37582397]
[92.50000000 208.37582397]
[92.50000000 193.37582397]
[92.50000000 178.37582397]
[77.43047333 175.42967224]
[63.21934509 169.61466980]
[50.40711212 161.15197754]
[39.48107147 150.36346436]
[30.85677719 137.65945435]
[24.86224174 123.52311707]
[21.72546005 108.49211121]
[21.56573296 93.13813019]
[24.38913536 78.04512024]
[30.08828354 63.78713608]
[38.44641876 50.90645218]
[49.14565277 39.89297104]
[61.77905655 31.16556740]
[75.86613464 25.05617905]
[90.87110901 21.79716682]
[90.55905914 6.80041361]
[90.24700165 -8.19633961]
[89.93494415 -23.19309425]
[89.46690369 -38.18579102]
[88.84292603 -53.17280579]
[73.85009766 -53.89481354]
[58.98234177 -55.95787430]
[44.35937881 -59.34537506]
[30.09893990 -64.03004456]
[16.31584549 -69.97416687]
[3.12107134 -77.12987518]
[-9.37914562 -85.43955231]
[-21.08415794 -94.83630371]
[-31.89972115 -105.24446869]
[-41.73875427 -116.58023834]
[-50.52203751 -128.75234985]
[-58.17884827 -141.66278076]
[-64.64754486 -155.20761108]
[-69.87603760 -169.27775574]
[-73.82222748 -183.75994873]
[-76.45435333 -198.53756714]
[-77.75120544 -213.49165344]
[-77.70235443 -228.50177002]
[-76.30818939 -243.44709778]
[-73.57993317 -258.20727539]
[-69.53955841 -272.66345215]
[-64.21959686 -286.69927979]
[-57.66287231 -300.20172119]
[-49.92218781 -313.06204224]
[-41.05986023 -325.17672729]
[-31.14724922 -336.44821167]
[-20.26416779 -346.78573608]
[-8.49823952 -356.10610962]
[4.05580044 -364.33425903]
[17.29687309 -371.40393066]
[31.11836624 -377.25820923]
[45.40899658 -381.84994507]
[60.05369949 -385.14221191]
[74.93456268 -387.10842896]
[89.93177795 -387.73284912]
[104.92458344 -387.01037598]
[119.79227448 -384.94686890]
[134.41513062 -381.55892944]
[148.67543030 -376.87380981]
[162.45834351 -370.92926025]
[175.65289307 -363.77316284]
[188.15286255 -355.46310425]
[199.85758972 -346.06597900]
[210.67283630 -335.65750122]
[220.51152039 -324.32141113]
[229.29443359 -312.14904785]
[236.95085144 -299.23837280]
[243.41912842 -285.69335938]
[248.64718628 -271.62304688]
[252.59294128 -257.14074707]
[255.22460938 -242.36303711]
[256.52099609 -227.40892029]
[256.47171021 -212.39878845]
[255.07707214 -197.45352173]
[252.34837341 -182.69342041]
[248.30755615 -168.23735046]
[242.98716736 -154.20169067]
[236.43002319 -140.69946289]
[228.68894958 -127.83937073]
[219.82624817 -115.72496033]
[209.91329956 -104.45378113]
[199.02990723 -94.11656952]
[187.26368713 -84.79656219]
[174.70939636 -76.56880951]
[161.46810913 -69.49954224]
[147.64643860 -63.64568329]
[133.35566711 -59.05437088]
[118.71086884 -55.76256943]
[103.82994080 -53.79678345]
[104.45391846 -38.80976868]
[107.89681244 -32.21491241]
[104.93169403 -23.50514984]
[105.24375153 -8.50839615]
[105.55580902 6.48835754]
[105.86786652 21.48511124]
[120.26541138 23.91890717]
[133.96594238 28.96948051]
[146.49821472 36.46311951]
[157.43121338 46.14208221]
[166.38888550 57.67346573]
[173.06314087 70.66065216]
[177.22441101 84.65695953]
[178.72959900 99.18097687]
[177.52690125 113.73316193]
[173.65769958 127.81301117]
[167.25506592 140.93623352]
[158.53923035 152.65147400]
[147.80996704 162.55578613]
[135.43629456 170.30853271]
[121.84379578 175.64303589]
[107.50000000 178.37582397]
[107.50000000 193.37582397]
[107.50000000 208.37582397]
[107.50000000 223.37582397]
[107.50000000 238.37582397]
[107.50000000 253.37582397]
[107.50000000 268.37582397]
[107.50000000 283.37582397]
[107.50000000 298.37582397]
[107.50000000 313.37582397]
[122.03988647 317.43713379]
[134.94427490 325.27163696]
[145.25555420 336.29797363]
[152.20857239 349.69790649]
[155.28736877 364.47705078]
[154.26348877 379.53875732]
[149.21287537 393.76525879]
[140.51036072 406.10092163]
[128.80169678 415.63034058]
[114.95575714 421.64639282]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[35 115]
[36 114]
[37 113]
[38 112]
[39 110]
[40 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
