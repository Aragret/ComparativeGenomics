%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGGAUUCGGGGGGGGGGAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCxxxxxxxxxxUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCCCCCCCCCCCUAGCAUUC\
) } def
/len { sequence length } bind def

/coor [
[51.26232147 475.30169678]
[37.41638565 469.28567505]
[25.70772362 459.75625610]
[17.00519943 447.42059326]
[11.95459652 433.19406128]
[10.93070507 418.13238525]
[14.00950432 403.35324097]
[20.96252632 389.95330811]
[31.27380943 378.92697144]
[44.17819214 371.09246826]
[58.71807861 367.03115845]
[58.71807861 352.03115845]
[58.71807861 337.03115845]
[58.71807861 322.03115845]
[58.71807861 307.03115845]
[58.71807861 292.03115845]
[58.71807861 277.03115845]
[58.71807861 262.03115845]
[58.71807861 247.03114319]
[58.71807861 232.03114319]
[55.55249786 225.29878235]
[58.87736130 216.71990967]
[50.11320877 228.89321899]
[37.21281052 236.54696655]
[22.32824707 238.40431213]
[7.94259501 234.15542603]
[-3.54429507 224.50910950]
[-10.21615314 211.07460022]
[-10.95996284 196.09304810]
[-5.65163994 182.06373596]
[4.82326794 171.32705688]
[18.71731186 165.67413330]
[33.71265030 166.04798889]
[47.30772781 172.38627625]
[57.23458099 183.63160706]
[61.83703613 197.90661621]
[66.14462280 183.53843689]
[65.04573059 176.18057251]
[70.69416046 168.91786194]
[75.29972076 154.64239502]
[79.90528870 140.36692810]
[84.36210632 126.04433441]
[88.66968536 111.67615509]
[83.76522827 101.06803894]
[87.23767853 89.90882874]
[97.29531097 83.95652008]
[101.90087128 69.68106079]
[106.50643921 55.40560150]
[106.16741943 46.21120453]
[111.35915375 40.88283539]
[116.26070404 26.70627785]
[113.45763397 11.13536358]
[124.92907715 1.63508749]
[129.68289185 -12.59169197]
[134.28845215 -26.86715317]
[138.89402771 -41.14261246]
[143.49958801 -55.41807175]
[148.10514832 -69.69353485]
[136.62002563 -60.04511261]
[123.45529175 -52.85556793]
[109.12974548 -48.40823746]
[94.20796204 -46.87838745]
[79.27800751 -48.32630920]
[64.92826843 -52.69494247]
[51.72426224 -59.81211853]
[40.18635178 -69.39735413]
[30.76925278 -81.07289124]
[23.84408188 -94.37860107]
[19.68376350 -108.79011536]
[18.45225334 -123.73947906]
[20.19808388 -138.63752747]
[24.85245514 -152.89715576]
[32.23193741 -165.95637512]
[42.04570389 -177.30053711]
[53.90700150 -186.48255920]
[67.34838104 -193.14059448]
[81.84011078 -197.01223755]
[96.81108856 -197.94491577]
[111.67130280 -195.90187073]
[125.83512115 -190.96362305]
[138.74433899 -183.32478333]
[149.89022827 -173.28639221]
[158.83351135 -161.24406433]
[165.22175598 -147.67239380]
[168.80317688 -133.10621643]
[169.43666077 -118.11959839]
[167.09721375 -103.30315399]
[161.87799072 -89.24271393]
[173.77037048 -98.38445282]
[185.66275024 -107.52618408]
[197.55513000 -116.66792297]
[209.44750977 -125.80965424]
[207.35006714 -141.02465820]
[213.15597534 -155.24389648]
[225.30349731 -164.64248657]
[240.52499390 -166.69223022]
[254.72596741 -160.84178162]
[264.08642578 -148.66485596]
[266.08847046 -133.43701172]
[260.19351196 -119.25444031]
[247.98731995 -109.93219757]
[232.75326538 -107.97790527]
[218.58924866 -113.91727448]
[206.69686890 -104.77554321]
[194.80448914 -95.63380432]
[182.91210938 -86.49207306]
[171.01972961 -77.35033417]
[162.38061523 -65.08796692]
[157.77505493 -50.81250763]
[153.16947937 -36.53704834]
[148.56391907 -22.26158714]
[143.95835876 -7.98612738]
[144.90393066 -0.60699975]
[139.10563660 6.53663826]
[142.25929260 21.09354973]
[130.43725586 31.60782814]
[125.53571320 45.78438568]
[120.78189850 60.01116562]
[116.17633057 74.28662872]
[111.57077026 88.56208801]
[115.53511810 104.83412170]
[103.03787231 115.98373413]
[98.73028564 130.35192871]
[99.26051331 139.53727722]
[94.18074799 144.97250366]
[89.57518005 159.24795532]
[84.96961975 173.52342224]
[80.51280212 187.84602356]
[76.20521545 202.21420288]
[73.87411499 217.03195190]
[73.71807861 232.03114319]
[73.71807861 247.03114319]
[73.71807861 262.03115845]
[73.71807861 277.03115845]
[73.71807861 292.03115845]
[73.71807861 307.03115845]
[73.71807861 322.03115845]
[73.71807861 337.03115845]
[73.71807861 352.03115845]
[73.71807861 367.03115845]
[88.25796509 371.09246826]
[101.16234589 378.92697144]
[111.47363281 389.95330811]
[118.42665100 403.35324097]
[121.50544739 418.13238525]
[120.48155975 433.19406128]
[115.43096161 447.42059326]
[106.72843170 459.75625610]
[95.01977539 469.28567505]
[81.17383575 475.30169678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[36 129]
[37 128]
[39 127]
[40 126]
[41 125]
[42 123]
[43 122]
[46 120]
[47 119]
[48 118]
[50 117]
[51 116]
[53 114]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[88 107]
[89 106]
[90 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
