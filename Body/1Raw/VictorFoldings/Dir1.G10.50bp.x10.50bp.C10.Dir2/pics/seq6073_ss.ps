%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUACUAGGGGGGGGGGGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAxxxxxxxxxxAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCCCCCCCCCCCAUACUAG\
) } def
/len { sequence length } bind def

/coor [
[84.20177460 400.48443604]
[71.32849884 392.58157349]
[61.20420456 381.37106323]
[54.64962387 367.76171875]
[52.19610214 352.85678101]
[54.04253769 337.86456299]
[60.03925323 324.00033569]
[69.70011139 312.38809204]
[82.24195862 303.96914673]
[96.64807892 299.42599487]
[96.33602905 284.42922974]
[96.02397156 269.43246460]
[95.71191406 254.43571472]
[95.39985657 239.43896484]
[95.08779907 224.44221497]
[94.77574158 209.44546509]
[94.46369171 194.44869995]
[94.15163422 179.45195007]
[93.83957672 164.45520020]
[93.52751923 149.45845032]
[93.21546173 134.46168518]
[87.10397339 134.93937683]
[80.68801117 134.30065918]
[74.17471313 132.46464539]
[67.78849792 129.38908386]
[61.76386261 125.07366180]
[47.05590439 128.01914978]
[32.34794235 130.96463013]
[17.63998032 133.91011047]
[10.29555416 147.71566772]
[-4.22391939 153.52246094]
[-19.06278992 148.58871460]
[-27.21459579 135.24397278]
[-24.83030510 119.78922272]
[-13.03570461 109.52172852]
[2.60015440 109.28948975]
[14.69449711 119.20214844]
[29.40245819 116.25666809]
[44.11042023 113.31118011]
[58.81838226 110.36569977]
[59.67472839 102.91474915]
[61.38741684 88.01284790]
[62.24376297 80.56189728]
[48.58752060 74.35649109]
[34.93127823 68.15108490]
[19.46579552 72.41703796]
[6.57319784 62.86923981]
[6.14358330 46.83193970]
[18.50651550 36.60758209]
[34.17821121 40.03942108]
[41.13668442 54.49484253]
[54.79292679 60.70024872]
[68.44916534 66.90565491]
[76.92575073 61.65607834]
[86.14919281 58.47034836]
[95.63671875 57.41724777]
[104.91220093 58.45648193]
[113.53003693 61.44498825]
[113.53003693 46.44498825]
[113.53003693 31.44498634]
[113.53003693 16.44498634]
[103.94731140 0.75577837]
[113.23129272 -14.10381889]
[112.91923523 -29.10057259]
[112.60717773 -44.09732819]
[98.06890106 -48.23615646]
[85.39736938 -56.47773743]
[75.71932220 -68.08923340]
[69.89533234 -82.03816223]
[68.44326019 -97.08418274]
[71.49222565 -111.88942719]
[78.77111053 -125.13742065]
[89.63269043 -135.65014648]
[103.11115265 -142.49284363]
[118.00800323 -145.05703735]
[132.99862671 -143.11474609]
[146.75007629 -136.83866882]
[158.03956604 -126.78685760]
[165.86325073 -113.85312653]
[169.52545166 -99.18753052]
[168.70053101 -84.09412384]
[163.46182251 -69.91500092]
[154.27517700 -57.91096497]
[141.95745850 -49.14939880]
[127.60393524 -44.40938187]
[127.91598511 -29.41262817]
[128.22804260 -14.41587543]
[136.75807190 -5.78187275]
[137.10331726 6.75207186]
[128.53002930 16.44498634]
[128.53002930 31.44498634]
[128.53002930 46.44498825]
[128.53002930 61.44498825]
[135.72142029 48.28125000]
[142.91279602 35.11750793]
[146.35739136 20.51837349]
[155.72261047 8.80117416]
[169.20368958 2.22390723]
[184.20272827 2.05406570]
[197.82928467 8.32437897]
[207.45742798 19.82650757]
[211.23171997 34.34390259]
[208.42483521 49.07894135]
[199.57768250 61.19207001]
[186.39517212 68.34899139]
[171.41996765 69.17088318]
[157.19639587 73.93428802]
[142.97282410 78.69769287]
[157.73887634 81.33655548]
[172.50492859 83.97541809]
[187.27099609 86.61428833]
[196.16755676 74.21211243]
[209.56828308 66.90574646]
[224.81248474 66.14588165]
[238.87338257 72.08338165]
[248.95918274 83.53935242]
[253.06735229 98.23921204]
[250.38218689 113.26427460]
[241.43685913 125.63132477]
[228.00744629 132.88485718]
[212.76039124 133.58468628]
[198.72297668 127.59186554]
[188.68237305 116.09626007]
[184.63212585 101.38034058]
[169.86607361 98.74147797]
[155.10002136 96.10261536]
[140.33395386 93.46374512]
[131.63058472 121.04454041]
[108.21221924 134.14962769]
[108.52427673 149.14639282]
[108.83632660 164.14314270]
[109.14838409 179.13989258]
[109.46044159 194.13664246]
[109.77249908 209.13340759]
[110.08455658 224.13015747]
[110.39661407 239.12690735]
[110.70866394 254.12365723]
[111.02072144 269.12042236]
[111.33277893 284.11715698]
[111.64483643 299.11392212]
[126.22747803 303.05389404]
[139.10868835 310.94381714]
[149.24423218 322.14413452]
[155.81248474 335.74688721]
[158.28097534 350.64935303]
[156.44960022 365.64343262]
[150.46682739 379.51367188]
[140.81762695 391.13562012]
[128.28425598 399.56716919]
[113.88269806 404.12478638]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[26 40]
[27 39]
[28 38]
[29 37]
[43 53]
[44 52]
[45 51]
[58 93]
[59 92]
[60 91]
[61 90]
[63 87]
[64 86]
[65 85]
[108 127]
[109 126]
[110 125]
[111 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
