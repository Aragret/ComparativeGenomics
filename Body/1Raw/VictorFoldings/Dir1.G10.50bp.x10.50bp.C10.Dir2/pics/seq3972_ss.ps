%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUGGCCAGGGGGGGGGGUAAUAUGAUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACxxxxxxxxxxACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCCCCCCCCCCCUUGACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 392.17849731]
[71.19830322 386.16247559]
[59.48964310 376.63305664]
[50.78712082 364.29739380]
[45.73651886 350.07086182]
[44.71262741 335.00918579]
[47.79142761 320.23004150]
[54.74444962 306.83010864]
[65.05573273 295.80377197]
[77.96011353 287.96926880]
[92.50000000 283.90795898]
[92.50000000 268.90795898]
[92.50000000 253.90794373]
[92.50000000 238.90794373]
[92.50000000 223.90794373]
[92.50000000 208.90794373]
[92.50000000 193.90794373]
[92.50000000 178.90794373]
[92.50000000 163.90794373]
[92.50000000 148.90794373]
[78.05995178 144.34942627]
[65.67475128 135.63726807]
[56.50435638 123.58741760]
[51.40763855 109.32843781]
[50.86194611 94.19577789]
[54.91838455 79.60673523]
[63.19704437 66.92765808]
[53.68868637 55.32632065]
[44.18032455 43.72497940]
[34.67196655 32.12363815]
[25.16360855 20.52229500]
[5.08156538 24.41868401]
[-14.35133457 7.90680122]
[-29.16909218 5.57569742]
[-43.98685074 3.24459362]
[-58.80460739 0.91348982]
[-68.39530945 12.90990639]
[-82.70514679 18.48880959]
[-97.88484192 16.14949989]
[-109.85114288 6.52124262]
[-115.38516235 -7.80601072]
[-112.99828339 -22.97830009]
[-103.33256531 -34.91435623]
[-88.98803711 -40.40344238]
[-73.82330322 -37.96901703]
[-61.91759872 -28.26593208]
[-56.47350311 -13.90426826]
[-41.65574646 -11.57316399]
[-26.83798790 -9.24206066]
[-12.02023029 -6.91095686]
[-6.97090578 -12.45661449]
[-11.52697086 -26.74794960]
[3.12774396 -23.54792976]
[8.17706871 -29.09358788]
[4.47090769 -43.62852478]
[-1.44905555 -57.41090393]
[-9.43897152 -70.10583496]
[-17.42888832 -82.80076599]
[-25.41880417 -95.49569702]
[-40.68040085 -100.44172668]
[-46.19380188 -115.50764465]
[-37.72959518 -129.13616943]
[-21.78079605 -130.87266541]
[-10.58196068 -119.38503265]
[-12.72387505 -103.48561096]
[-4.73395824 -90.79067993]
[3.25595784 -78.09574890]
[11.24587440 -65.40081787]
[11.46340084 -80.39924622]
[16.99036980 -94.34387207]
[27.10703087 -105.41876221]
[40.49594116 -112.18167877]
[55.41352463 -113.75193787]
[69.91713715 -109.92503357]
[82.11804962 -101.19933319]
[90.42738342 -88.71114349]
[93.76306915 -74.08673859]
[91.69070435 -59.23058319]
[84.48017120 -46.07732773]
[73.07045746 -36.33985138]
[58.94739532 -31.28621864]
[43.95016861 -31.57454300]
[30.03178787 -37.16727829]
[19.00584412 -47.33468628]
[22.71200562 -32.79974747]
[43.00696182 -11.58367252]
[36.76494980 11.01393700]
[46.27330780 22.61527824]
[55.78166580 34.21661758]
[65.29002380 45.81795883]
[74.79838562 57.41930008]
[86.82204437 52.30745697]
[99.76451111 50.52089691]
[112.72339630 52.18418121]
[124.79516602 57.18134689]
[135.13813782 65.16397095]
[143.03115845 75.57548523]
[157.04786682 70.23397064]
[171.06457520 64.89245605]
[185.08129883 59.55094528]
[199.09800720 54.20943069]
[213.11471558 48.86791992]
[223.04063416 35.81386566]
[239.27236938 38.15106583]
[245.11212158 53.47520828]
[234.55244446 66.02213287]
[218.45623779 62.88463211]
[204.43951416 68.22614288]
[190.42280579 73.56765747]
[176.40609741 78.90917206]
[162.38937378 84.25068665]
[148.37266541 89.59219360]
[149.35626221 96.50753021]
[149.35626221 103.49246979]
[148.37266541 110.40780640]
[162.38937378 115.74931335]
[176.40609741 121.09082794]
[190.42280579 126.43234253]
[204.43951416 131.77384949]
[219.60879517 126.55154419]
[233.07183838 135.27656555]
[234.50094604 151.25584412]
[222.79983521 162.23143005]
[206.94459534 159.78379822]
[199.09800720 145.79057312]
[185.08129883 140.44905090]
[171.06457520 135.10754395]
[157.04786682 129.76603699]
[143.03115845 124.42451477]
[128.07505798 140.74343872]
[107.50000000 148.90794373]
[107.50000000 163.90794373]
[107.50000000 178.90794373]
[107.50000000 193.90794373]
[107.50000000 208.90794373]
[107.50000000 223.90794373]
[107.50000000 238.90794373]
[107.50000000 253.90794373]
[107.50000000 268.90795898]
[107.50000000 283.90795898]
[122.03988647 287.96926880]
[134.94427490 295.80377197]
[145.25555420 306.83010864]
[152.20857239 320.23004150]
[155.28736877 335.00918579]
[154.26348877 350.07086182]
[149.21287537 364.29739380]
[140.51036072 376.63305664]
[128.80169678 386.16247559]
[114.95575714 392.17849731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 91]
[28 90]
[29 89]
[30 88]
[31 87]
[33 50]
[34 49]
[35 48]
[36 47]
[54 85]
[55 84]
[56 68]
[57 67]
[58 66]
[59 65]
[97 112]
[98 111]
[99 110]
[100 109]
[101 108]
[102 107]
[115 129]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
