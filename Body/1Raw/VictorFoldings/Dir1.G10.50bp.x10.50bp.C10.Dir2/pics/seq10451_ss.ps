%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAACACAGGGGGGGGGGAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACxxxxxxxxxxGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCCCCCCCCCCCACAACAAA\
) } def
/len { sequence length } bind def

/coor [
[67.53308105 387.31057739]
[54.31288528 380.03811646]
[43.42607880 369.59112549]
[35.61494827 356.68185425]
[31.41206932 342.19055176]
[31.10399628 327.10522461]
[34.71173859 312.45437622]
[41.98931122 299.23699951]
[52.44051743 288.35421753]
[65.35278320 280.54809570]
[79.84571838 276.35079956]
[79.53366089 261.35403442]
[79.22160339 246.35729980]
[78.90954590 231.36053467]
[78.59748840 216.36378479]
[78.28543854 201.36703491]
[77.97338104 186.37028503]
[77.66132355 171.37351990]
[77.34926605 156.37677002]
[77.03720856 141.38002014]
[65.24057007 132.11506653]
[50.59706879 135.36589050]
[35.95356750 138.61671448]
[24.15822029 149.16093445]
[10.05659008 144.36579895]
[-4.58691072 147.61662292]
[-8.02149010 162.48828125]
[-17.57521057 174.39161682]
[-31.35117340 180.96318054]
[-46.61415482 180.89820862]
[-60.33367157 174.20959473]
[-69.78571320 162.22537231]
[-73.09355927 147.32501221]
[-69.60044098 132.46697998]
[-59.99992371 120.60137177]
[-46.19818878 114.08409882]
[-30.93558121 114.20916748]
[-17.24250793 120.95175934]
[-7.83773661 132.97311401]
[6.80576468 129.72229004]
[17.55371284 119.41060638]
[32.70274353 123.97322083]
[47.34624481 120.72238922]
[61.98974609 117.47156525]
[59.42943954 107.49181366]
[59.40806961 97.33152008]
[61.85686111 87.61774445]
[66.55673218 78.93280792]
[73.15595245 71.77941895]
[81.19561005 66.55168915]
[90.14105225 63.51366425]
[99.41726685 62.78664017]
[102.20958710 48.04883194]
[105.00191498 33.31102753]
[107.79424286 18.57322121]
[110.58656311 3.83541465]
[108.94328308 -0.34323508]
[108.77378082 -4.41046047]
[109.85395813 -7.90547085]
[111.83017731 -10.49169445]
[114.27265930 -11.98889351]
[118.28040314 -26.44358253]
[122.28813934 -40.89826965]
[126.29588318 -55.35295868]
[115.29525757 -45.15558624]
[102.39090729 -37.50852203]
[88.16369629 -32.75598526]
[73.25407410 -31.11191750]
[58.33316803 -32.65032196]
[44.07265091 -37.30194855]
[31.11444664 -44.85740662]
[20.04186249 -54.97658920]
[11.35332680 -67.20399475]
[5.43994808 -80.98919678]
[2.56791449 -95.71167755]
[2.86650872 -110.70870972]
[6.32229042 -125.30519867]
[12.77969837 -138.84410095]
[21.94805717 -150.71597290]
[33.41465759 -160.38639832]
[46.66333389 -167.42005920]
[61.09770584 -171.50036621]
[76.06801605 -172.44363403]
[90.90039062 -170.20739746]
[104.92714691 -164.89231873]
[117.51688385 -156.73765564]
[128.10289001 -146.11048889]
[136.20861816 -133.48919678]
[141.46920776 -119.44190979]
[143.64785767 -104.60097504]
[142.64649963 -89.63442993]
[138.50933838 -75.21389008]
[149.60066223 -85.31253815]
[154.06343079 -101.09277344]
[170.02514648 -104.85516357]
[181.06576538 -92.72928619]
[175.82763672 -77.18920898]
[159.69931030 -74.22122192]
[148.60800171 -64.12257385]
[140.75056458 -51.34521866]
[136.74282837 -36.89052963]
[132.73509216 -22.43584251]
[128.72734070 -7.98115349]
[125.32437134 6.62773895]
[122.53204346 21.36554527]
[119.73972321 36.10335159]
[116.94739532 50.84115601]
[114.15507507 65.57896423]
[120.36112976 68.84557343]
[125.84419250 73.21844482]
[130.40956116 78.54230499]
[133.89511108 84.62809753]
[136.17707825 91.25972748]
[137.17445374 98.20171356]
[136.85180664 105.20755768]
[150.97660828 110.25631714]
[165.10140991 115.30507660]
[177.83885193 106.44295502]
[193.35195923 106.79389954]
[205.67561340 116.22295380]
[210.07113647 131.10444641]
[204.84834290 145.71615601]
[192.01550293 154.43957520]
[176.50711060 153.92036438]
[164.28646851 144.35818481]
[160.05264282 129.42987061]
[145.92784119 124.38111877]
[131.80303955 119.33235931]
[115.99079895 136.14654541]
[92.03396606 141.06796265]
[92.34602356 156.06471252]
[92.65807343 171.06146240]
[92.97013092 186.05822754]
[93.28218842 201.05497742]
[93.59424591 216.05172729]
[93.90630341 231.04847717]
[94.21836090 246.04524231]
[94.53041077 261.04199219]
[94.84246826 276.03875732]
[109.49745941 279.62951660]
[122.72327423 286.89178467]
[133.61813354 297.33035278]
[141.43923950 310.23358154]
[145.65330505 324.72164917]
[145.97302246 339.80673218]
[142.37660217 354.46035767]
[135.10923767 367.68334961]
[124.66643524 378.57418823]
[111.76020813 386.39028931]
[97.27051544 390.59878540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 44]
[22 43]
[23 42]
[25 40]
[26 39]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
[61 103]
[62 102]
[63 101]
[64 100]
[92 99]
[93 98]
[115 128]
[116 127]
[117 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
