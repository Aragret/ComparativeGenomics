%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUACACUGGGGGGGGGGUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCCAAAxxxxxxxxxxUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUCCCCCCCCCCAAUUUACACU\
) } def
/len { sequence length } bind def

/coor [
[84.09828186 395.18008423]
[70.25234222 389.16406250]
[58.54368210 379.63464355]
[49.84115982 367.29898071]
[44.79055786 353.07244873]
[43.76666641 338.01077271]
[46.84546280 323.23159790]
[53.79848480 309.83166504]
[64.10977173 298.80535889]
[77.01415253 290.97082520]
[91.55403900 286.90951538]
[91.55403900 271.90951538]
[91.55403900 256.90951538]
[91.55403900 241.90953064]
[91.55403900 226.90953064]
[91.55403900 211.90953064]
[91.55403900 196.90953064]
[91.55403900 181.90953064]
[91.55403900 166.90953064]
[91.55403900 151.90953064]
[88.38845825 145.17715454]
[91.71331787 136.59828186]
[92.02537537 121.60152435]
[81.25457001 111.16171265]
[66.27485657 111.94155884]
[51.29513931 112.72140503]
[42.79071426 125.56589508]
[28.52054214 130.87773132]
[14.03025055 126.81627655]
[4.82028866 115.14089203]
[-10.15942574 115.92073059]
[-25.13914108 116.70057678]
[-40.11885452 117.48042297]
[-50.51053238 129.38792419]
[-66.28387451 130.37640381]
[-78.08084869 119.85942078]
[-78.90250397 104.07649994]
[-68.26138306 92.39138031]
[-52.47066116 91.73663330]
[-40.89870071 102.50070953]
[-25.91898537 101.72086334]
[-10.93927097 100.94101715]
[4.04044342 100.16117096]
[11.98826027 87.59255219]
[25.97848320 82.04840088]
[40.72308731 85.84972382]
[50.51529312 97.74169159]
[65.49501038 96.96184540]
[80.47472382 96.18199921]
[82.28587341 87.21518707]
[88.30876923 79.27329254]
[85.82365417 64.48059082]
[79.47652435 50.88963699]
[69.72886658 39.48861694]
[59.98121643 28.08759499]
[50.23356628 16.68657494]
[34.60026932 11.73358727]
[31.33776093 -4.33775663]
[43.80223083 -14.99463558]
[59.17129898 -9.27416611]
[61.63458633 6.93892241]
[71.38224030 18.33994293]
[81.12989044 29.74096489]
[90.87754059 41.14198685]
[88.52549744 26.32753563]
[89.46557617 11.35702324]
[93.65238190 -3.04681754]
[100.88379669 -16.18860817]
[110.81070709 -27.43389511]
[122.95385742 -36.23979187]
[136.72702026 -42.18116379]
[151.46527100 -44.97118759]
[166.45706177 -44.47516251]
[180.97865295 -40.71703720]
[194.32896423 -33.87824249]
[205.86349487 -24.28893661]
[215.02536011 -12.41206837]
[221.37228394 1.17897999]
[224.59783936 15.82806969]
[224.54629517 30.82798195]
[221.22015381 45.45455933]
[214.77998352 59.00167084]
[205.53671265 70.81529999]
[193.93655396 80.32511139]
[180.53956604 87.07199860]
[165.99249268 90.73024750]
[150.99763489 91.12323761]
[136.27891541 88.23200226]
[122.54691315 82.19611359]
[110.46455383 73.30698395]
[100.61635590 61.99546814]
[103.10147858 76.78817749]
[100.70418549 61.98098373]
[107.04109192 48.38526154]
[119.92233276 40.69931793]
[134.89649963 41.57920837]
[146.78894043 50.72085953]
[151.48995972 64.96517181]
[147.37500000 79.38970184]
[135.86608887 89.00973511]
[120.94004822 90.50077820]
[135.87435913 89.09847260]
[150.80865479 87.69617462]
[165.74296570 86.29386902]
[180.67727661 84.89156342]
[195.61158752 83.48925781]
[202.61093140 69.74107361]
[215.94351196 61.97923660]
[231.35491943 62.68052673]
[243.92745972 71.62115479]
[249.64926147 85.94821167]
[246.69451904 101.08998108]
[236.00608826 112.21477509]
[220.99461365 115.77271271]
[206.45018005 110.62847900]
[197.01388550 98.42356873]
[182.07957458 99.82587433]
[167.14527893 101.22817230]
[152.21096802 102.63047791]
[137.27665710 104.03278351]
[122.34235382 105.43508911]
[137.34085083 105.64707947]
[149.07127380 114.99573517]
[152.62461853 129.56878662]
[146.51387024 143.26763916]
[133.29627991 150.35955811]
[118.50318909 147.87669373]
[108.32527924 136.85806274]
[107.02213287 121.91358185]
[106.71007538 136.91033936]
[106.55403900 151.90953064]
[106.55403900 166.90953064]
[106.55403900 181.90953064]
[106.55403900 196.90953064]
[106.55403900 211.90953064]
[106.55403900 226.90953064]
[106.55403900 241.90953064]
[106.55403900 256.90951538]
[106.55403900 271.90951538]
[106.55403900 286.90951538]
[121.09392548 290.97082520]
[133.99830627 298.80535889]
[144.30958557 309.83166504]
[151.26261902 323.23159790]
[154.34141541 338.01077271]
[153.31752014 353.07244873]
[148.26692200 367.29898071]
[139.56439209 379.63464355]
[127.85572815 389.16406250]
[114.00979614 395.18008423]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[24 49]
[25 48]
[26 47]
[30 43]
[31 42]
[32 41]
[33 40]
[51 92]
[52 91]
[53 64]
[54 63]
[55 62]
[56 61]
[101 121]
[102 120]
[103 119]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
