%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGAAACCGGGGGGGGGGAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCxxxxxxxxxxUAGCCCUACUAGUCUCAAUCUCCAACACAUAUGGCCUAGACUACGUACAUCCCCCCCCCCAACCUAAACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 384.81176758]
[71.19830322 378.79574585]
[59.48964310 369.26632690]
[50.78712082 356.93066406]
[45.73651886 342.70413208]
[44.71262741 327.64245605]
[47.79142761 312.86331177]
[54.74444962 299.46337891]
[65.05573273 288.43704224]
[77.96011353 280.60253906]
[92.50000000 276.54122925]
[92.50000000 261.54122925]
[92.50000000 246.54121399]
[92.50000000 231.54121399]
[92.50000000 216.54121399]
[92.50000000 201.54121399]
[92.50000000 186.54121399]
[92.50000000 171.54121399]
[92.50000000 156.54121399]
[92.50000000 141.54121399]
[92.50000000 126.54122162]
[76.92033386 120.43363953]
[66.33260345 105.22371674]
[65.87957764 84.89332581]
[51.06181717 87.22443390]
[36.24406052 89.55553436]
[21.42630196 91.88664246]
[15.96757603 95.79941559]
[10.22055721 96.25005341]
[5.94483995 93.99311829]
[-8.95706177 95.70581055]
[-23.85896492 97.41849518]
[-38.76086807 99.13118744]
[-53.80604553 106.94648743]
[-65.48084259 94.65277100]
[-56.89947128 80.03099060]
[-40.47355652 84.22928619]
[-25.57165337 82.51659393]
[-10.66975212 80.80390930]
[4.23215055 79.09121704]
[19.09519768 77.06887817]
[33.91295624 74.73777771]
[48.73071289 72.40667725]
[63.54847336 70.07556915]
[67.80401611 63.89978409]
[53.68262100 58.84150696]
[38.68806839 59.24582672]
[27.28099632 49.50526047]
[25.33166885 34.63246155]
[33.84324265 22.28122139]
[48.43552017 18.80769348]
[61.59907532 25.99941254]
[66.55977631 40.15376282]
[76.31510925 51.54821014]
[80.57064819 45.37242508]
[77.47232819 30.69589996]
[74.37400818 16.01937485]
[69.51026154 8.20939064]
[71.36724854 1.00541508]
[68.57492065 -13.73239040]
[53.53315353 -15.01604176]
[39.39590073 -20.31139183]
[27.21224785 -29.22549057]
[17.88629913 -41.09685516]
[12.11010265 -55.04454803]
[10.31229019 -70.03355408]
[12.62627125 -84.95159912]
[18.88033295 -98.69166565]
[28.61038399 -110.23413849]
[41.09438705 -118.72249603]
[55.40594864 -123.52684784]
[70.48305511 -124.29067230]
[85.20688629 -120.95729065]
[98.48483276 -113.77407074]
[109.33158875 -103.27404785]
[116.94224548 -90.23638916]
[120.75204468 -75.62858582]
[120.47827911 -60.53462601]
[116.14125061 -46.07458115]
[108.06281281 -33.32149124]
[96.84243011 -23.22171021]
[83.31272888 -16.52471542]
[86.10504913 -1.78690934]
[89.05053711 12.92105198]
[92.14885712 27.59757805]
[95.24717712 42.27410507]
[108.02453613 50.13153076]
[122.52013397 46.27436829]
[137.01573181 42.41720963]
[151.47041321 38.40946960]
[165.88262939 34.25158310]
[180.29484558 30.09369469]
[194.70706177 25.93580818]
[209.11927795 21.77791977]
[223.53149414 17.62003326]
[225.52572632 6.21978092]
[231.62953186 -3.55241966]
[240.91581726 -10.28535175]
[252.00129700 -13.02391529]
[263.25256348 -11.40447140]
[273.02667236 -5.70261097]
[279.91110229 3.21282959]
[294.55459595 -0.03799623]
[309.19808960 -3.28882194]
[316.25372314 -17.24418259]
[330.64926147 -23.35178375]
[345.58755493 -18.72780037]
[354.01522827 -5.55553722]
[351.95297241 9.94546604]
[340.37451172 20.45611000]
[324.74688721 21.01358986]
[312.44894409 11.35467911]
[297.80541992 14.60550499]
[283.16192627 17.85633087]
[276.79016113 35.35657120]
[261.07513428 45.62609863]
[242.19197083 44.41640472]
[227.68937683 32.03224945]
[213.27716064 36.19013596]
[198.86495972 40.34802246]
[184.45274353 44.50591278]
[170.04052734 48.66379929]
[155.62831116 52.82168579]
[150.03721619 57.72938156]
[140.87289429 56.91280746]
[126.37728882 60.76996613]
[111.88169098 64.62712860]
[131.38925171 86.75251007]
[127.78314209 113.35295868]
[107.50000000 126.54122162]
[107.50000000 141.54121399]
[107.50000000 156.54121399]
[107.50000000 171.54121399]
[107.50000000 186.54121399]
[107.50000000 201.54121399]
[107.50000000 216.54121399]
[107.50000000 231.54121399]
[107.50000000 246.54121399]
[107.50000000 261.54122925]
[107.50000000 276.54122925]
[122.03988647 280.60253906]
[134.94427490 288.43704224]
[145.25555420 299.46337891]
[152.20857239 312.86331177]
[155.28736877 327.64245605]
[154.26348877 342.70413208]
[149.21287537 356.93066406]
[140.51036072 369.26632690]
[128.80169678 378.79574585]
[114.95575714 384.81176758]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 44]
[25 43]
[26 42]
[27 41]
[30 40]
[31 39]
[32 38]
[33 37]
[55 86]
[56 85]
[57 84]
[59 83]
[60 82]
[87 127]
[88 126]
[89 125]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
