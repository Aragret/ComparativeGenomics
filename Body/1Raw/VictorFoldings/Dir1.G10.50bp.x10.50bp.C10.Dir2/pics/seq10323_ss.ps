%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACUAUUCGGGGGGGGGGUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUxxxxxxxxxxUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUCCCCCCCCCCAUUACUAUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.81567383]
[71.19830322 375.79965210]
[59.48964310 366.27023315]
[50.78712082 353.93457031]
[45.73651886 339.70803833]
[44.71262741 324.64636230]
[47.79142761 309.86721802]
[54.74444962 296.46728516]
[65.05573273 285.44094849]
[77.96011353 277.60644531]
[92.50000000 273.54513550]
[92.50000000 258.54513550]
[92.50000000 243.54512024]
[92.50000000 228.54512024]
[92.50000000 213.54512024]
[92.50000000 198.54512024]
[92.50000000 183.54512024]
[92.50000000 168.54512024]
[92.50000000 153.54512024]
[92.50000000 138.54512024]
[84.76270294 125.81785583]
[92.50000000 112.01768494]
[90.47766876 97.15463257]
[86.46992493 82.69994354]
[82.46218872 68.24525452]
[78.45444489 53.79056931]
[74.44670105 39.33588028]
[59.72878265 42.26675415]
[44.83460236 44.10266113]
[29.84550476 44.83358002]
[14.84336281 44.45550919]
[-0.08988968 42.97052002]
[-14.87269115 40.38672256]
[-29.42430115 36.71822739]
[-43.66524506 31.98507309]
[-57.51773834 26.21310806]
[-70.90612793 19.43385696]
[-83.75729370 11.68434906]
[-96.00102997 3.00690675]
[-107.57048798 -6.55107450]
[-118.40245819 -16.93739319]
[-128.43778992 -28.09531975]
[-137.62167358 -39.96391296]
[-145.90394592 -52.47835541]
[-153.23936462 -65.57028961]
[-159.58787537 -79.16821289]
[-164.91481018 -93.19786072]
[-169.19107056 -107.58260345]
[-172.39329529 -122.24388123]
[-174.50398254 -137.10160828]
[-175.51162720 -152.07464600]
[-175.41072083 -167.08122253]
[-174.20181274 -182.03935242]
[-171.89151001 -196.86735535]
[-168.49241638 -211.48423767]
[-164.02310181 -225.81018066]
[-158.50798035 -239.76692200]
[-151.97717285 -253.27824402]
[-144.46635437 -266.27035522]
[-136.01654053 -278.67227173]
[-126.67388916 -290.41629028]
[-116.48941803 -301.43826294]
[-105.51874542 -311.67797852]
[-93.82180786 -321.07949829]
[-81.46247864 -329.59152222]
[-68.50827026 -337.16751099]
[-55.02992249 -343.76611328]
[-41.10106277 -349.35125732]
[-26.79775429 -353.89248657]
[-12.19812679 -357.36495972]
[2.61808372 -359.74972534]
[17.56995583 -361.03375244]
[32.57582474 -361.21005249]
[47.55373764 -360.27761841]
[62.42188263 -358.24157715]
[77.09906006 -355.11306763]
[91.50510406 -350.90911865]
[105.56133270 -345.65270996]
[119.19097900 -339.37258911]
[132.31959534 -332.10302734]
[144.87548828 -323.88372803]
[156.79005432 -314.75958252]
[167.99826050 -304.78042603]
[178.43885803 -294.00076294]
[188.05484009 -282.47946167]
[196.79367065 -270.27947998]
[204.60763550 -257.46740723]
[211.45405579 -244.11323547]
[217.29553223 -230.28990173]
[222.10017395 -216.07292175]
[225.84172058 -201.53991699]
[228.49974060 -186.77027893]
[230.05972290 -171.84468079]
[230.51315308 -156.84461975]
[229.85752869 -141.85205078]
[228.09646606 -126.94882965]
[225.23956299 -112.21636963]
[221.30242920 -97.73513794]
[216.30656433 -83.58422089]
[210.27925110 -69.84090424]
[203.25341797 -56.58024979]
[195.26742554 -43.87469101]
[186.36491394 -31.79361725]
[176.59446716 -20.40301132]
[166.00949097 -9.76508808]
[154.66778564 0.06205306]
[142.63127136 9.02473927]
[129.96571350 17.07401848]
[116.74028778 24.16592789]
[103.02721405 30.26173210]
[88.90139008 35.32814026]
[92.90913391 49.78282928]
[96.91687012 64.23751831]
[100.92461395 78.69220734]
[104.93235016 93.14689636]
[114.17104340 88.90203094]
[125.57139587 89.73297882]
[139.47395325 95.36493683]
[153.37651062 100.99689484]
[167.27906799 106.62885284]
[183.43707275 103.82689667]
[193.73344421 116.59078217]
[187.57615662 131.79011536]
[171.29930115 133.78913879]
[161.64710999 120.53141022]
[147.74455261 114.89945221]
[133.84199524 109.26749420]
[119.93943787 103.63553619]
[107.50000000 112.01768494]
[115.23729706 125.81785583]
[107.50000000 138.54512024]
[107.50000000 153.54512024]
[107.50000000 168.54512024]
[107.50000000 183.54512024]
[107.50000000 198.54512024]
[107.50000000 213.54512024]
[107.50000000 228.54512024]
[107.50000000 243.54512024]
[107.50000000 258.54513550]
[107.50000000 273.54513550]
[122.03988647 277.60644531]
[134.94427490 285.44094849]
[145.25555420 296.46728516]
[152.20857239 309.86721802]
[155.28736877 324.64636230]
[154.26348877 339.70803833]
[149.21287537 353.93457031]
[140.51036072 366.27023315]
[128.80169678 375.79965210]
[114.95575714 381.81567383]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 115]
[24 114]
[25 113]
[26 112]
[27 111]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
