%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUAUUCUUGGGGGGGGGGAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGxxxxxxxxxxUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAGGGCGUAGGAACCCCCCCCCCUUAUAUCCUU\
) } def
/len { sequence length } bind def

/coor [
[75.94332123 548.79498291]
[62.09738541 542.77893066]
[50.38872528 533.24951172]
[41.68619919 520.91387939]
[36.63559723 506.68731689]
[35.61170578 491.62564087]
[38.69050598 476.84649658]
[45.64352798 463.44656372]
[55.95481110 452.42022705]
[68.85919189 444.58572388]
[83.39907837 440.52441406]
[83.39907837 425.52441406]
[83.39907837 410.52441406]
[83.39907837 395.52441406]
[83.39907837 380.52441406]
[83.39907837 365.52441406]
[83.39907837 350.52441406]
[83.39907837 335.52441406]
[83.39907837 320.52441406]
[83.39907837 305.52441406]
[75.66178131 292.79714966]
[83.39907837 278.99694824]
[83.39907837 263.99694824]
[83.39907837 248.99696350]
[83.39907837 233.99696350]
[83.39907837 218.99696350]
[83.39907837 203.99696350]
[80.66870880 200.00689697]
[80.46020508 194.24601746]
[83.72412109 188.37623596]
[76.52294922 175.33811951]
[84.82762146 161.87174988]
[85.45159912 146.88473511]
[86.07557678 131.89772034]
[86.69955444 116.91069794]
[78.65519714 83.73226929]
[74.04962921 69.45681000]
[69.44406891 55.18134689]
[64.83850098 40.90588379]
[60.23293686 26.63042450]
[55.62737274 12.35496426]
[40.90388870 15.30738354]
[25.93982315 16.56217384]
[10.93026352 16.10297585]
[-3.92911124 13.93577480]
[-18.44457817 10.08882618]
[-32.42689514 4.61228275]
[-45.69377899 -2.42245770]
[-58.07226562 -10.92368317]
[-69.40097809 -20.78056335]
[-79.53221893 -31.86459160]
[-88.33390808 -44.03126526]
[-95.69130707 -57.12197113]
[-101.50848389 -70.96603394]
[-105.70960236 -85.38298798]
[-108.23989868 -100.18485260]
[-109.06638336 -115.17867279]
[-108.17827606 -130.16897583]
[-105.58715820 -144.96031189]
[-101.32681274 -159.35987854]
[-95.45277405 -173.17991638]
[-88.04163361 -186.24026489]
[-79.19000244 -198.37065125]
[-69.01328278 -209.41294861]
[-57.64415359 -219.22317505]
[-45.23082733 -227.67344666]
[-31.93514061 -234.65359497]
[-17.93042755 -240.07261658]
[-3.39927197 -243.85986328]
[11.46888542 -245.96597290]
[26.48020554 -246.36346436]
[41.43898773 -245.04718018]
[56.15021133 -242.03425598]
[70.42208862 -237.36399841]
[84.06855011 -231.09727478]
[96.91168976 -223.31579590]
[108.78407288 -214.12100220]
[119.53091431 -203.63275146]
[129.01211548 -191.98782349]
[137.10404968 -179.33798218]
[143.70124817 -165.84817505]
[148.71768188 -151.69427490]
[152.08796692 -137.06079102]
[153.76815796 -122.13849640]
[153.73634338 -107.12194824]
[151.99295044 -92.20690918]
[148.56069946 -77.58782959]
[143.48434448 -63.45530701]
[136.83004761 -49.99357605]
[128.68458557 -37.37814331]
[119.15413666 -25.77347374]
[108.36295319 -15.33086395]
[96.45172119 -6.18645000]
[83.57572174 1.54055035]
[69.90283203 7.74939966]
[74.50839996 22.02486038]
[79.11396027 36.30031967]
[83.71952820 50.57578278]
[88.32508850 64.85124207]
[92.93065643 79.12670135]
[92.46843719 64.13382721]
[102.17927551 52.70142746]
[117.04943085 50.73208237]
[129.40142822 59.24256516]
[132.85787964 73.83889771]
[125.63423920 86.98495483]
[111.45801544 91.89334106]
[126.43772888 91.11349487]
[141.41744995 90.33364868]
[153.18147278 79.42552185]
[169.02236938 81.96427155]
[176.78837585 96.00238800]
[170.52204895 110.77103424]
[155.03041077 114.94096375]
[142.19729614 105.31336212]
[127.21757507 106.09320831]
[112.23786163 106.87305450]
[101.68656921 117.53467560]
[101.06259155 132.52169800]
[100.43861389 147.50871277]
[99.81463623 162.49572754]
[106.97117615 176.60581970]
[98.71113586 189.00021362]
[98.39907837 203.99696350]
[98.39907837 218.99696350]
[98.39907837 233.99696350]
[98.39907837 248.99696350]
[98.39907837 263.99694824]
[98.39907837 278.99694824]
[106.13638306 292.79714966]
[98.39907837 305.52441406]
[98.39907837 320.52441406]
[98.39907837 335.52441406]
[98.39907837 350.52441406]
[98.39907837 365.52441406]
[98.39907837 380.52441406]
[98.39907837 395.52441406]
[98.39907837 410.52441406]
[98.39907837 425.52441406]
[98.39907837 440.52441406]
[112.93896484 444.58572388]
[125.84334564 452.42022705]
[136.15463257 463.44656372]
[143.10765076 476.84649658]
[146.18644714 491.62564087]
[145.16256714 506.68731689]
[140.11195374 520.91387939]
[131.40943909 533.24951172]
[119.70077515 542.77893066]
[105.85483551 548.79498291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 126]
[26 125]
[27 124]
[30 123]
[32 121]
[33 120]
[34 119]
[35 118]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 95]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
