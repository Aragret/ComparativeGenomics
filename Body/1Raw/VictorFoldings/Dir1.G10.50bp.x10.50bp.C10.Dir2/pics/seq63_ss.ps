%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGGGGUAUGCACGGGGGGGGGGGCGAUAGCAUUGCGAGACGCUGGAGCCGGAGCACCCUAUGUCGCAGUAUCxxxxxxxxxxAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUCCCCCCCCCCGGCGGUAUGCAC\
) } def
/len { sequence length } bind def

/coor [
[70.82773590 389.31546021]
[56.66712952 384.16046143]
[44.07738495 375.87826538]
[33.73744965 364.91549683]
[26.20493698 351.86334229]
[21.88607216 337.42575073]
[21.01376343 322.38128662]
[23.63505363 307.54129028]
[29.60857964 293.70605469]
[38.61219788 281.62170410]
[50.16035461 271.93994141]
[63.63027191 265.18286133]
[78.29553223 261.71487427]
[78.29553223 246.71488953]
[78.29553223 231.71488953]
[78.29553223 216.71488953]
[78.29553223 201.71488953]
[78.29553223 186.71488953]
[78.29553223 171.71488953]
[78.29553223 156.71488953]
[78.29553223 141.71488953]
[78.29553223 126.71488953]
[68.99420929 114.94690704]
[54.39983368 111.48219299]
[39.80546188 108.01747894]
[25.21108627 104.55275726]
[20.09921646 106.08946228]
[15.39331818 105.52852631]
[11.83566570 103.38807678]
[9.84831619 100.40849304]
[-4.50854397 96.06331635]
[-18.86540413 91.71813965]
[-33.50144577 106.80667877]
[-60.12042236 103.57628632]
[-75.11348724 104.03225708]
[-90.10655975 104.48822021]
[-105.75457764 111.01324463]
[-116.35639954 97.78306580]
[-106.57813263 83.93308258]
[-90.56252289 89.49515533]
[-75.56945801 89.03918457]
[-60.57638931 88.58322144]
[-58.91806793 81.26885223]
[-53.94311142 59.32574844]
[-67.27352905 52.44825745]
[-83.08522034 52.99698257]
[-90.84832764 40.28543854]
[-104.17874908 33.40794754]
[-120.52506256 34.72327805]
[-129.61334229 21.07280922]
[-122.09433746 6.49897337]
[-105.70296478 5.99408340]
[-97.30125427 20.07752609]
[-83.97084045 26.95501709]
[-69.11263275 25.91436768]
[-60.39603806 39.11783600]
[-47.06562042 45.99532700]
[-27.10774422 49.76876068]
[-15.45132637 62.75915527]
[-14.52022648 77.36127472]
[-0.16336660 81.70645905]
[14.19349384 86.05163574]
[28.67580223 89.95838928]
[43.27017593 93.42310333]
[57.86455154 96.88781738]
[72.45892334 100.35253143]
[78.82823944 81.08538818]
[97.09000397 70.90801239]
[96.78600311 55.91109467]
[82.51493835 50.74378967]
[71.07677460 40.76716995]
[64.01844788 27.33048820]
[62.29452515 12.25094795]
[66.13815308 -2.43206716]
[75.02952576 -14.73279953]
[87.76614380 -22.98767662]
[102.62548828 -26.08029366]
[117.59795380 -23.59240150]
[130.65864563 -15.86046410]
[140.04119873 -3.93016434]
[144.47671509 10.58502293]
[143.36531067 25.72203827]
[136.85731506 39.43372345]
[125.83285522 49.86568832]
[111.78292084 55.60709381]
[112.08692932 70.60401154]
[124.22218323 79.42079163]
[138.57904053 75.07561493]
[152.93589783 70.73043823]
[167.29275513 66.38525391]
[181.64962769 62.04008102]
[179.78575134 47.11915588]
[180.47052002 32.09786606]
[183.68420410 17.40840530]
[189.33435059 3.47342014]
[197.25839233 -9.30615425]
[207.22834778 -20.56262398]
[218.95735168 -29.97211647]
[232.10792542 -37.26390457]
[246.30172729 -42.22818375]
[261.13037109 -44.72212982]
[276.16717529 -44.67397690]
[290.97952271 -42.08512115]
[305.14123535 -37.03004074]
[318.24484253 -29.65418625]
[329.91336060 -20.16977119]
[339.81100464 -8.84968376]
[347.65304565 3.98037529]
[353.21383667 17.95125961]
[356.33340454 32.66099930]
[356.92193604 47.68636322]
[354.96255493 62.59504700]
[350.51159668 76.95809174]
[343.69717407 90.36225128]
[334.71530151 102.42185974]
[323.82443237 112.78992462]
[311.33792114 121.16815948]
[297.61499023 127.31548309]
[283.05053711 131.05503845]
[268.06353760 132.27923584]
[253.08528137 130.95283508]
[238.54666138 127.11400604]
[224.86599731 120.87320709]
[212.43692017 112.40999603]
[201.61703491 101.96786499]
[192.71763611 89.84727478]
[185.99479675 76.39694214]
[171.63793945 80.74211884]
[157.28108215 85.08729553]
[142.92422485 89.43247223]
[128.56735229 93.77764893]
[119.75707245 120.38784027]
[93.29553223 126.71488953]
[93.29553223 141.71488953]
[93.29553223 156.71488953]
[93.29553223 171.71488953]
[93.29553223 186.71488953]
[93.29553223 201.71488953]
[93.29553223 216.71488953]
[93.29553223 231.71488953]
[93.29553223 246.71488953]
[93.29553223 261.71487427]
[107.96079254 265.18286133]
[121.43070984 271.93994141]
[132.97886658 281.62170410]
[141.98248291 293.70605469]
[147.95600891 307.54129028]
[150.57730103 322.38128662]
[149.70498657 337.42575073]
[145.38612366 351.86334229]
[137.85362244 364.91549683]
[127.51367950 375.87826538]
[114.92393494 384.16046143]
[100.76332855 389.31546021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 66]
[24 65]
[25 64]
[26 63]
[30 62]
[31 61]
[32 60]
[34 42]
[35 41]
[36 40]
[44 57]
[45 56]
[47 54]
[48 53]
[68 86]
[69 85]
[87 131]
[88 130]
[89 129]
[90 128]
[91 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
