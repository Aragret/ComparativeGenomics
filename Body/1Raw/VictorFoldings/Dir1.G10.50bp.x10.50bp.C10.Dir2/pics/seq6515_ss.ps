%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGGAGCAGGAGGGGGGGGGGACAGGUUGAACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGxxxxxxxxxxUCACUAUACUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCCCCCCCCCCCGCCGGAGGAGGA\
) } def
/len { sequence length } bind def

/coor [
[80.50901794 406.39007568]
[70.73621368 394.91159058]
[63.99499130 381.42755127]
[60.67729187 366.72189331]
[60.97599030 351.64959717]
[64.87372589 337.08691406]
[72.14389038 323.88055420]
[82.36380768 312.79827881]
[94.93930054 304.48440552]
[109.13924408 299.42230225]
[107.62171936 284.49926758]
[103.79367828 278.12542725]
[106.22781372 269.25885010]
[105.01304626 254.30812073]
[103.79827881 239.35739136]
[102.58350372 224.40666199]
[101.36873627 209.45593262]
[100.15396881 194.50520325]
[98.93920135 179.55447388]
[97.72443390 164.60374451]
[96.50966644 149.65301514]
[95.29489136 134.70228577]
[86.55229950 122.64341736]
[93.14658356 108.26197052]
[89.53414154 93.70346069]
[83.61880493 79.91909027]
[77.70346832 66.13472748]
[71.78813171 52.35035706]
[65.87279510 38.56599045]
[59.95745468 24.78162384]
[48.20239639 22.58512688]
[39.07816696 15.04238605]
[34.79785156 4.13409233]
[36.32601166 -7.36256361]
[43.16402435 -16.58076859]
[37.81216431 -30.59353447]
[32.46030426 -44.60630035]
[27.10844612 -58.61906815]
[11.46292686 -57.31359100]
[-3.90489626 -60.45391083]
[-17.75841331 -67.77902222]
[-28.98519897 -78.69150543]
[-36.68635178 -92.30626678]
[-40.24844360 -107.52230072]
[-39.39239883 -123.11174011]
[-34.19532013 -137.81892395]
[-25.08364105 -150.46157837]
[-12.79812908 -160.02575684]
[-18.43288422 -173.92718506]
[-24.06764030 -187.82861328]
[-31.61147881 -200.79357910]
[-40.91280365 -212.56155396]
[-50.21412659 -224.32954407]
[-59.51545334 -236.09751892]
[-68.81677246 -247.86549377]
[-83.84771729 -244.97941589]
[-98.49481964 -249.42024231]
[-109.39228821 -260.16751099]
[-114.03596497 -274.75158691]
[-111.35877228 -289.82113647]
[-101.97589874 -301.91326904]
[-88.04346466 -308.24935913]
[-72.76304626 -307.37338257]
[-59.64596558 -299.48663330]
[-51.70643234 -286.40142822]
[-50.76889801 -271.12466431]
[-57.04879379 -257.16683960]
[-47.74747086 -245.39884949]
[-38.44614792 -233.63085938]
[-29.14482307 -221.86288452]
[-19.84349823 -210.09490967]
[-21.12679482 -225.03990173]
[-16.69259071 -239.36952209]
[-7.19258881 -250.97770691]
[5.97698736 -258.15838623]
[20.88059044 -259.85623169]
[35.32781982 -255.82168579]
[47.19534683 -246.64770508]
[54.73899460 -233.68263245]
[56.85005951 -218.83192444]
[53.21827698 -204.27822876]
[44.37741852 -192.16050720]
[31.62682724 -184.25971985]
[16.84047699 -181.73704529]
[2.19153309 -184.96325684]
[-10.16621876 -193.46336365]
[-4.53146267 -179.56193542]
[1.10329294 -165.66052246]
[15.36256695 -167.37655640]
[29.59049225 -165.33030701]
[42.81058121 -159.65582275]
[54.11386871 -150.73638916]
[62.72139740 -139.17866516]
[68.03789520 -125.77134705]
[69.69296265 -111.43144989]
[67.56684113 -97.14151001]
[61.79906845 -83.88227844]
[52.77934647 -72.56544495]
[41.12121201 -63.97092438]
[46.47307205 -49.95816040]
[51.82492828 -35.94539261]
[57.17678833 -21.93262863]
[74.28131866 -15.53032589]
[81.45207214 1.61154163]
[73.74182129 18.86628532]
[79.65715790 32.65065384]
[85.57249451 46.43502045]
[91.48783875 60.21938705]
[97.40317535 74.00375366]
[103.31851196 87.78812408]
[105.64601135 72.96979523]
[112.81918335 59.79612732]
[124.00321960 49.80025482]
[137.89651489 44.14550400]
[152.88218689 43.48996735]
[167.21620178 47.90993500]
[179.23036194 56.89101791]
[187.52647400 69.38799286]
[191.13905334 83.94647217]
[189.64762878 98.87214661]
[183.22581482 112.42797089]
[172.62095642 123.03631592]
[159.06724548 129.46258545]
[144.14207458 130.95890808]
[129.58239746 127.35112000]
[117.08269501 119.05911255]
[108.09731293 107.04720306]
[116.92679596 120.17544556]
[110.24562836 133.48751831]
[111.46039581 148.43824768]
[112.67516327 163.38897705]
[113.88993073 178.33970642]
[115.10469818 193.29043579]
[116.31946564 208.24116516]
[117.53424072 223.19189453]
[118.74900818 238.14262390]
[119.96377563 253.09335327]
[121.17854309 268.04409790]
[122.54476166 282.98175049]
[124.06228638 297.90478516]
[138.99055481 300.00485229]
[152.98219299 305.61709595]
[165.22375488 314.41525269]
[175.00350952 325.88781738]
[181.75291443 339.36776733]
[185.07952881 354.07141113]
[184.78996277 369.14389038]
[180.90106201 383.70892334]
[173.63890076 396.91967773]
[163.42570496 408.00814819]
[150.85525513 416.32965088]
[136.65838623 421.40036011]
[121.66046906 422.92550659]
[106.73347473 420.81640625]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 127]
[25 110]
[26 109]
[27 108]
[28 107]
[29 106]
[30 105]
[35 102]
[36 101]
[37 100]
[38 99]
[48 88]
[49 87]
[50 86]
[51 71]
[52 70]
[53 69]
[54 68]
[55 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
