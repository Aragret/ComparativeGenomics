%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCCCUCAGGGGGGGGGGCUAAACGUAAGCCUUCUCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGxxxxxxxxxxUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCCCCCCCCCCCUAUCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[83.43740845 367.22811890]
[70.21721649 359.95565796]
[59.33041000 349.50866699]
[51.51927948 336.59939575]
[47.31639862 322.10809326]
[47.00832748 307.02276611]
[50.61606979 292.37191772]
[57.89364243 279.15454102]
[68.34484863 268.27178955]
[81.25711060 260.46563721]
[95.75004578 256.26834106]
[95.43798828 241.27159119]
[95.12593842 226.27484131]
[94.81388092 211.27807617]
[94.50182343 196.28132629]
[94.18976593 181.28457642]
[93.87770844 166.28782654]
[93.56565094 151.29106140]
[93.25360107 136.29431152]
[92.94154358 121.29756165]
[84.43707275 117.19393158]
[78.13072205 109.75386047]
[75.29981232 100.09655762]
[76.67215729 89.81351471]
[82.26029205 80.70651245]
[91.31745148 74.47216034]
[80.65582275 63.92086792]
[69.99420166 53.36957932]
[58.34096527 62.83791351]
[45.73231888 70.99078369]
[32.31609344 77.73259735]
[18.24958420 82.98432159]
[3.69771552 86.68437195]
[-11.16889858 88.78937531]
[-26.17595482 89.27464294]
[-41.14750290 88.13449097]
[-55.90801239 85.38228607]
[-70.28442383 81.05030060]
[-84.10816956 75.18931580]
[-97.21719360 67.86805725]
[-109.45777893 59.17235565]
[-120.68642426 49.20416641]
[-130.77148438 38.08036423]
[-139.59469604 25.93136978]
[-147.05262756 12.89962006]
[-153.05783081 -0.86209214]
[-157.53990173 -15.19241810]
[-160.44630432 -29.92334175]
[-161.74293518 -44.88215256]
[-161.41461182 -59.89346313]
[-159.46517944 -74.78127289]
[-155.91748047 -89.37103271]
[-150.81312561 -103.49168396]
[-144.21195984 -116.97767639]
[-136.19137573 -129.67088318]
[-126.84541321 -141.42248535]
[-116.28364563 -152.09469604]
[-104.62989807 -161.56240845]
[-92.02081299 -169.71459961]
[-78.60422516 -176.45568848]
[-64.53742981 -181.70664978]
[-49.98536682 -185.40592957]
[-35.11863708 -187.51013184]
[-20.11155510 -187.99458313]
[-5.14006710 -186.85363770]
[9.62029362 -184.10063171]
[23.99646759 -179.76786804]
[37.81990433 -173.90614319]
[50.92852783 -166.58418274]
[63.16865158 -157.88781738]
[74.39675903 -147.91902161]
[84.48121643 -136.79467773]
[93.30377197 -124.64521027]
[100.76100922 -111.61306000]
[106.76547241 -97.85102844]
[111.24678040 -83.52045441]
[114.15237427 -68.78937531]
[115.44821167 -53.83049774]
[115.11907196 -38.81920624]
[113.16883850 -23.93149948]
[109.62036133 -9.34192944]
[104.51525116 4.77844858]
[97.91336060 18.26408005]
[89.89208984 30.95685387]
[80.54549408 42.70795441]
[91.20711517 53.25924301]
[101.86874390 63.81053543]
[116.36434174 67.66769409]
[130.85993958 63.81053543]
[145.35552979 59.95337296]
[159.85113525 56.09621429]
[173.44207764 49.74908447]
[185.70445251 41.10997009]
[197.96681213 32.47085190]
[210.22918701 23.83173752]
[212.68128967 8.21883488]
[225.50421143 -1.01959181]
[241.09030151 1.59745073]
[250.19264221 14.51731777]
[247.41096497 30.07488251]
[234.39558411 39.04011536]
[218.86830139 36.09410477]
[206.60592651 44.73322296]
[194.34356689 53.37233734]
[182.08119202 62.01145172]
[197.05900574 61.19587708]
[211.51478577 65.19966888]
[223.93878174 73.60468292]
[233.03344727 85.53310394]
[237.84893799 99.73912811]
[237.88230896 114.73908997]
[233.13009644 128.96640015]
[224.08860779 140.93518066]
[211.70214844 149.39540100]
[197.26432800 153.46348572]
[182.28303528 152.71456909]
[168.32290649 147.22688293]
[156.84191895 137.57351685]
[149.03916931 124.76271057]
[145.72953796 110.13238525]
[147.25871277 95.21053314]
[153.46696472 81.55558777]
[163.70828247 70.59181213]
[149.21269226 74.44897461]
[134.71710205 78.30612946]
[120.22149658 82.16329193]
[125.09286499 93.86402893]
[123.97368622 105.94735718]
[117.62286377 115.64966583]
[107.93829346 120.98550415]
[108.25035095 135.98225403]
[108.56240845 150.97900391]
[108.87446594 165.97576904]
[109.18652344 180.97251892]
[109.49857330 195.96926880]
[109.81063080 210.96601868]
[110.12268829 225.96278381]
[110.43474579 240.95953369]
[110.74680328 255.95628357]
[125.40179443 259.54705811]
[138.62760925 266.80932617]
[149.52247620 277.24789429]
[157.34356689 290.15112305]
[161.55763245 304.63919067]
[161.87736511 319.72427368]
[158.28092957 334.37789917]
[151.01356506 347.60089111]
[140.57077026 358.49172974]
[127.66453552 366.30783081]
[113.17485046 370.51632690]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 87]
[27 86]
[28 85]
[88 126]
[89 125]
[90 124]
[91 123]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
