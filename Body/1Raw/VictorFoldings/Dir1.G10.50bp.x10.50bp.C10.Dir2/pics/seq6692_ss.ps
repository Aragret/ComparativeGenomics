%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUCACAGCGGGGGGGGGGAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACxxxxxxxxxxCCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACCCCCCCCCCCUAGUCACAGC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 360.48208618]
[71.01555634 354.92907715]
[58.81560135 346.06274414]
[49.20452881 334.44042969]
[42.78650284 320.79272461]
[39.96496582 305.97753906]
[40.91728210 290.92617798]
[45.58358765 276.58474731]
[53.67055511 263.85479736]
[64.66983032 253.53651428]
[77.88998413 246.27853394]
[92.50000000 242.53709412]
[92.50000000 227.53709412]
[92.50000000 212.53709412]
[92.50000000 197.53709412]
[92.50000000 182.53709412]
[92.50000000 167.53709412]
[92.50000000 152.53709412]
[92.50000000 137.53709412]
[92.50000000 122.53710175]
[92.50000000 107.53710175]
[91.42292786 92.57582092]
[89.27435303 77.73049927]
[87.12577057 62.88517380]
[84.97719574 48.03985214]
[82.82861328 33.19453049]
[80.68003845 18.34920692]
[65.71779633 19.49130821]
[50.71259308 19.62070274]
[35.73288345 18.73680115]
[20.84702110 16.84363556]
[6.12292862 13.94984531]
[-8.37221241 10.06863213]
[-22.57226372 5.21770573]
[-36.41243362 -0.58079940]
[-49.82957077 -7.30042601]
[-62.76245499 -14.91051292]
[-75.15207672 -23.37633896]
[-86.94190979 -32.65927505]
[-98.07814789 -42.71696091]
[-108.50998688 -53.50351334]
[-118.18982697 -64.96971130]
[-127.07350159 -77.06323242]
[-135.12046814 -89.72890472]
[-142.29402161 -102.90892792]
[-148.56143188 -116.54317474]
[-153.89408875 -130.56942749]
[-158.26766968 -144.92367554]
[-161.66220093 -159.54045105]
[-164.06222534 -174.35304260]
[-165.45677185 -189.29386902]
[-165.83949280 -204.29475403]
[-165.20861816 -219.28724670]
[-163.56703186 -234.20294189]
[-160.92224121 -248.97380066]
[-157.28631592 -263.53240967]
[-152.67581177 -277.81231689]
[-147.11180115 -291.74841309]
[-140.61965942 -305.27709961]
[-133.22900391 -318.33660889]
[-124.97355652 -330.86740112]
[-115.89099121 -342.81228638]
[-106.02275085 -354.11672974]
[-95.41385651 -364.72918701]
[-84.11272430 -374.60122681]
[-72.17090607 -383.68780518]
[-59.64289856 -391.94747925]
[-46.58586121 -399.34252930]
[-33.05937576 -405.83923340]
[-19.12515450 -411.40792847]
[-4.84678078 -416.02322388]
[9.71059704 -419.66406250]
[24.48055649 -422.31381226]
[39.39570618 -423.96041870]
[54.38798904 -424.59634399]
[69.38899994 -424.21868896]
[84.33029175 -422.82916260]
[99.14368439 -420.43411255]
[113.76160431 -417.04449463]
[128.11732483 -412.67575073]
[142.14537048 -407.34780884]
[155.78172302 -401.08499146]
[168.96417236 -393.91586304]
[181.63253784 -385.87316895]
[193.72904968 -376.99356079]
[205.19850159 -367.31759644]
[215.98857117 -356.88937378]
[226.05000305 -345.75653076]
[235.33689880 -333.96981812]
[243.80690002 -321.58303833]
[251.42134094 -308.65270996]
[258.14547729 -295.23785400]
[263.94863892 -281.39962769]
[268.80435181 -267.20120239]
[272.69042969 -252.70736694]
[275.58917236 -237.98425293]
[277.48736572 -223.09902954]
[278.37628174 -208.11961365]
[278.25195312 -193.11436462]
[277.11486816 -178.15174866]
[274.97027588 -163.30003357]
[271.82794189 -148.62696838]
[267.70217896 -134.19952393]
[262.61184692 -120.08353424]
[256.58013916 -106.34339142]
[249.63459778 -93.04179382]
[241.80691528 -80.23943329]
[233.13281250 -67.99473572]
[223.65184021 -56.36355591]
[213.40728760 -45.39897156]
[202.44589233 -35.15101624]
[190.81765747 -25.66644096]
[178.57565308 -16.98852730]
[165.77572632 -9.15687084]
[152.47628784 -2.20720434]
[138.73800659 3.82876182]
[124.62359619 8.92348671]
[110.19744110 13.05372334]
[95.52536011 16.20062637]
[97.67393494 31.04594994]
[99.82251740 45.89127350]
[101.97109222 60.73659515]
[104.11967468 75.58191681]
[106.26824951 90.42723846]
[115.54293060 78.63825226]
[130.18927002 75.40020752]
[143.56932068 82.18063354]
[149.61904907 95.90655518]
[145.59663391 110.35716248]
[133.32508850 118.98323822]
[118.36605835 117.87531281]
[107.50000000 107.53710175]
[107.50000000 122.53710175]
[107.50000000 137.53709412]
[107.50000000 152.53709412]
[107.50000000 167.53709412]
[107.50000000 182.53709412]
[107.50000000 197.53709412]
[107.50000000 212.53709412]
[107.50000000 227.53709412]
[107.50000000 242.53709412]
[122.11001587 246.27853394]
[135.33016968 253.53651428]
[146.32945251 263.85479736]
[154.41641235 276.58474731]
[159.08271790 290.92617798]
[160.03503418 305.97753906]
[157.21350098 320.79272461]
[150.79547119 334.44042969]
[141.18440247 346.06274414]
[128.98443604 354.92907715]
[114.96250153 360.48208618]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 124]
[23 123]
[24 122]
[25 121]
[26 120]
[27 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
