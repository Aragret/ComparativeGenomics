%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGAACAAGUUGGGGGGGGGGACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGxxxxxxxxxxCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCACCCCCCCCCCGGAACAGGUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.07879639]
[71.19830322 373.06277466]
[59.48964310 363.53335571]
[50.78712082 351.19769287]
[45.73651886 336.97116089]
[44.71262741 321.90948486]
[47.79142761 307.13031006]
[54.74444962 293.73040771]
[65.05573273 282.70407104]
[77.96011353 274.86956787]
[92.50000000 270.80822754]
[92.50000000 255.80824280]
[92.50000000 240.80824280]
[92.50000000 225.80824280]
[92.50000000 210.80824280]
[92.50000000 195.80824280]
[92.50000000 180.80824280]
[92.50000000 165.80824280]
[92.50000000 150.80824280]
[92.50000000 135.80824280]
[81.63111115 131.63960266]
[72.62192535 124.26770020]
[66.38454437 114.43888855]
[63.55046463 103.14825439]
[64.40660095 91.53888702]
[68.86628723 80.78614044]
[57.98746490 70.45893860]
[47.10863876 60.13173294]
[36.22981262 49.80452728]
[25.35098839 39.47732162]
[13.79650021 49.07055664]
[1.18846762 57.22983932]
[-12.29611206 63.84062195]
[-26.46793747 68.81010437]
[-41.12805557 72.06851959]
[-56.07066345 73.57012177]
[-71.08599091 73.29383850]
[-85.96324158 71.24354553]
[-100.49356842 67.44802856]
[-114.47298431 61.96055984]
[-127.70524597 54.85818481]
[-140.00457764 46.24060822]
[-151.19833374 36.22880554]
[-161.12936401 24.96332550]
[-169.65824890 12.60232067]
[-176.66526794 -0.68068010]
[-182.05203247 -14.69920540]
[-185.74295044 -29.25645638]
[-187.68617249 -44.14807129]
[-187.85444641 -59.16499710]
[-186.24540710 -74.09642029]
[-182.88162231 -88.73271942]
[-177.81033325 -102.86843109]
[-171.10272217 -116.30511475]
[-162.85296631 -128.85412598]
[-153.17687988 -140.33932495]
[-142.21028137 -150.59944153]
[-130.10713196 -159.49046326]
[-117.03734589 -166.88755798]
[-103.18440247 -172.68690491]
[-88.74277496 -176.80706787]
[-73.91520691 -179.19023132]
[-58.90983963 -179.80290222]
[-43.93733597 -178.63650513]
[-29.20788193 -175.70742798]
[-14.92825890 -171.05674744]
[-1.29892886 -164.74980164]
[11.48877335 -156.87509155]
[23.25532722 -147.54318237]
[33.83555222 -136.88507080]
[43.08091354 -125.05039215]
[50.86162567 -112.20527649]
[57.06845474 -98.53005981]
[61.61426926 -84.21671295]
[64.43525696 -69.46617126]
[65.49180603 -54.48551559]
[64.76908875 -39.48505020]
[62.27725601 -24.67535210]
[58.05128479 -10.26433086]
[52.15050125 3.54570484]
[44.65774155 16.56088448]
[35.67819595 28.59849739]
[46.55701828 38.92570114]
[57.43584442 49.25290680]
[68.31466675 59.58011246]
[79.19349670 69.90731812]
[98.97209167 61.53627396]
[121.15247345 65.61565399]
[138.21723938 81.95812225]
[152.34204102 76.90937042]
[166.46684265 71.86061096]
[180.59164429 66.81185913]
[187.67459106 60.93955994]
[195.06315613 61.80833054]
[209.28993225 57.05451584]
[223.51670837 52.30070114]
[228.28013611 37.65092468]
[240.61230469 28.71945190]
[255.66096497 28.76170349]
[267.65554810 37.55189896]
[281.88235474 32.79808426]
[286.42581177 17.96108437]
[298.84274292 8.65520382]
[314.35858154 8.45874023]
[327.00714111 17.44724083]
[331.92483521 32.16444016]
[327.22067261 46.95127869]
[314.70352173 56.12191010]
[299.18649292 56.15004730]
[286.63616943 47.02486038]
[272.40936279 51.77867889]
[268.10861206 66.01389313]
[256.10830688 75.09444427]
[240.88406372 75.37081146]
[228.27052307 66.52748108]
[214.04374695 71.28129578]
[199.81697083 76.03511047]
[185.64041138 80.93666077]
[171.51560974 85.98541260]
[157.39080811 91.03417206]
[143.26599121 96.08293152]
[142.01911926 111.03101349]
[155.11227417 118.35012054]
[171.49340820 117.58175659]
[180.12046814 131.52830505]
[172.11865234 145.84274292]
[155.71957397 145.79960632]
[147.79316711 131.44326782]
[134.70001221 124.12416840]
[121.76554871 132.87062073]
[107.50000000 135.80824280]
[107.50000000 150.80824280]
[107.50000000 165.80824280]
[107.50000000 180.80824280]
[107.50000000 195.80824280]
[107.50000000 210.80824280]
[107.50000000 225.80824280]
[107.50000000 240.80824280]
[107.50000000 255.80824280]
[107.50000000 270.80822754]
[122.03988647 274.86956787]
[134.94427490 282.70407104]
[145.25555420 293.73040771]
[152.20857239 307.13031006]
[155.28736877 321.90948486]
[154.26348877 336.97116089]
[149.21287537 351.19769287]
[140.51036072 363.53335571]
[128.80169678 373.06277466]
[114.95575714 379.07879639]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[89 121]
[90 120]
[91 119]
[92 118]
[94 117]
[95 116]
[96 115]
[100 111]
[101 110]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
