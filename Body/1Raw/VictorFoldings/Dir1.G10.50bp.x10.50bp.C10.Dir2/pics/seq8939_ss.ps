%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAUACCAAGGGGGGGGGGUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCxxxxxxxxxxACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCCCCCCCCCCCACAUACCAA\
) } def
/len { sequence length } bind def

/coor [
[74.99567413 623.97692871]
[61.14973450 617.96093750]
[49.44107437 608.43151855]
[40.73854828 596.09582520]
[35.68794632 581.86932373]
[34.66405487 566.80761719]
[37.74285507 552.02850342]
[44.69587708 538.62854004]
[55.00716019 527.60223389]
[67.91154480 519.76770020]
[82.45143127 515.70642090]
[82.45143127 500.70639038]
[82.45143127 485.70639038]
[82.45143127 470.70639038]
[82.45143127 455.70639038]
[82.45143127 440.70639038]
[82.45143127 425.70639038]
[82.45143127 410.70639038]
[82.45143127 395.70639038]
[82.45143127 380.70639038]
[82.45143127 365.70639038]
[74.10286713 356.89678955]
[74.01844788 344.35839844]
[82.79152679 334.84591675]
[74.62804413 325.86456299]
[74.80448914 313.32711792]
[83.77355957 303.99920654]
[76.57239532 290.96109009]
[84.87706757 277.49472046]
[85.50104523 262.50772095]
[82.61826324 255.64949036]
[86.29711151 247.21635437]
[87.23274231 232.24555969]
[88.16836548 217.27476501]
[81.23999786 204.08966064]
[89.82302094 190.79898071]
[90.75865173 175.82818604]
[91.69428253 160.85739136]
[92.47412872 145.87768555]
[93.09810638 130.89067078]
[85.89693451 117.85254669]
[94.20160675 104.38618469]
[86.81401062 107.41101837]
[78.62799835 108.44866180]
[70.05355072 107.35644531]
[61.52212143 104.06701660]
[49.25975418 95.42790222]
[35.35506439 101.95132446]
[20.05290222 100.63244629]
[7.46947670 91.82602692]
[0.98966569 77.90095520]
[2.35650492 62.60300446]
[11.20232201 50.04724503]
[25.14763641 43.61111450]
[40.44122696 45.02589798]
[52.96920013 53.91102982]
[59.36158752 67.87644958]
[57.89887238 83.16552734]
[70.16123962 91.80464935]
[77.40903473 89.87606812]
[91.90463257 86.01890564]
[99.15243530 84.09032440]
[105.49956512 70.49937439]
[111.84669495 56.90842438]
[108.18022919 44.49831390]
[113.79668427 33.28785706]
[125.17884064 29.07431221]
[131.80734253 15.61834717]
[119.59592438 6.84730577]
[108.99482727 -3.81415105]
[100.29325867 -16.07517052]
[93.72860718 -29.60126305]
[89.47994995 -44.02342606]
[87.66320801 -58.94821548]
[88.32793427 -73.96846771]
[91.45599365 -88.67442322]
[96.96205139 -102.66488647]
[104.69589996 -115.55819702]
[114.44655609 -127.00260925]
[125.94801331 -136.68591309]
[138.88650513 -144.34394836]
[152.90905762 -149.76777649]
[167.63311768 -152.80944824]
[182.65701294 -153.38598633]
[197.57087708 -151.48165894]
[211.96784973 -147.14842224]
[225.45516968 -140.50447083]
[237.66490173 -131.73107910]
[248.26394653 -121.06758118]
[256.96313477 -108.80488586]
[263.52520752 -95.27752686]
[267.77105713 -80.85454559]
[269.58493042 -65.92940521]
[268.91732788 -50.90928268]
[265.78643799 -36.20392990]
[260.27767944 -22.21452332]
[252.54133606 -9.32270527]
[242.78848267 2.11982846]
[231.28515625 11.80091667]
[218.34518433 19.45645142]
[204.32159424 24.87758446]
[189.59695435 27.91642380]
[174.57293701 28.49006653]
[159.65943909 26.58286476]
[145.26330566 22.24684715]
[138.63481140 35.70281219]
[140.75895691 53.09498978]
[125.43764496 63.25555420]
[119.09051514 76.84650421]
[112.74338531 90.43745422]
[109.18862152 105.01016235]
[116.34516144 119.12024689]
[108.08512115 131.51464844]
[107.46114349 146.50166321]
[110.24442291 155.27122498]
[106.66506958 161.79302979]
[105.72944641 176.76380920]
[104.79381561 191.73460388]
[111.65525818 205.99052429]
[103.13916016 218.21040344]
[102.20352936 233.18118286]
[101.26790619 248.15197754]
[100.48806000 263.13168335]
[99.86408234 278.11871338]
[107.02061462 292.22879028]
[98.76058197 304.62319946]
[107.68236542 320.69744873]
[97.78827667 335.15798950]
[107.04253387 351.04315186]
[97.45143127 365.70639038]
[97.45143127 380.70639038]
[97.45143127 395.70639038]
[97.45143127 410.70639038]
[97.45143127 425.70639038]
[97.45143127 440.70639038]
[97.45143127 455.70639038]
[97.45143127 470.70639038]
[97.45143127 485.70639038]
[97.45143127 500.70639038]
[97.45143127 515.70642090]
[111.99131775 519.76770020]
[124.89569855 527.60223389]
[135.20698547 538.62854004]
[142.16000366 552.02850342]
[145.23880005 566.80761719]
[144.21490479 581.86932373]
[139.16430664 596.09582520]
[130.46177673 608.43151855]
[118.75312042 617.96093750]
[104.90718079 623.97692871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 128]
[27 126]
[29 124]
[30 123]
[32 122]
[33 121]
[34 120]
[36 118]
[37 117]
[38 116]
[39 114]
[40 113]
[42 111]
[46 59]
[47 58]
[62 110]
[63 109]
[64 108]
[67 106]
[68 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
