%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAAAAAAUGGGGGGGGGGCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCxxxxxxxxxxUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAACCCCCCCCCCACCUAAGAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.05211639 709.64709473]
[71.03017426 704.09405518]
[58.83021545 695.22772217]
[49.21914673 683.60540771]
[42.80112076 669.95770264]
[39.97958374 655.14251709]
[40.93190002 640.09118652]
[45.59820557 625.74975586]
[53.68516922 613.01977539]
[64.68444824 602.70153809]
[77.90460205 595.44354248]
[92.51461792 591.70208740]
[92.51461792 576.70208740]
[92.51461792 561.70208740]
[92.51461792 546.70208740]
[92.51461792 531.70208740]
[92.51461792 516.70208740]
[92.51461792 501.70208740]
[92.51461792 486.70208740]
[92.51461792 471.70208740]
[92.51461792 456.70208740]
[77.86023712 453.61260986]
[64.16317749 447.54125977]
[52.02312088 438.75119019]
[41.97214508 427.62466431]
[34.45139694 414.64639282]
[29.79171181 400.38247681]
[28.19908142 385.45559692]
[29.74553871 370.51797485]
[34.36590576 356.22283936]
[41.86053848 343.19570923]
[51.90394974 332.00729370]
[64.05894470 323.14822388]
[77.79564667 317.00772095]
[92.51461792 313.85641479]
[92.51461792 298.85641479]
[92.51461792 283.85641479]
[77.78480530 281.12277222]
[63.80443192 275.72750854]
[51.05015182 267.85299683]
[39.95710754 257.76623535]
[30.90407753 245.80960083]
[24.20055008 232.38943481]
[20.07613945 217.96212769]
[18.67271614 203.01864624]
[20.03953743 188.06774902]
[24.13151360 173.61878967]
[30.81069565 160.16423035]
[39.85092163 148.16293335]
[50.94548035 138.02453613]
[63.71751404 130.09538269]
[77.73282623 124.64677429]
[92.51461792 121.86563110]
[92.51461792 106.86563110]
[89.34930420 99.39417267]
[92.67177582 91.55844116]
[92.97975159 76.56160736]
[93.28773499 61.56476593]
[84.02955627 45.68028259]
[93.62019348 31.01521111]
[93.62019348 16.01521111]
[90.94109344 11.39161205]
[90.40087891 6.67846251]
[91.66570282 2.71995068]
[94.11056519 0.09891177]
[95.03398132 -14.87263775]
[95.95739746 -29.84418869]
[96.88080597 -44.81573868]
[97.80422211 -59.78728867]
[83.80444336 -65.55659485]
[72.43814850 -75.56089783]
[64.93827057 -88.71500397]
[62.11833954 -103.59205627]
[64.28424072 -118.57830811]
[71.20103455 -132.04815674]
[82.11843109 -142.54048157]
[95.85220337 -148.91717529]
[110.91261292 -150.48654175]
[125.66601562 -147.07832336]
[138.51206970 -139.06224060]
[148.05734253 -127.30781555]
[153.26641846 -113.09007263]
[153.57426453 -97.95124817]
[148.94749451 -83.53349304]
[139.88796997 -71.40073395]
[127.37841797 -62.86904526]
[112.77577209 -58.86387253]
[111.85235596 -43.89232254]
[110.92894745 -28.92077446]
[110.00553131 -13.94922447]
[109.08211517 1.02232540]
[108.62019348 16.01521111]
[108.62019348 31.01521111]
[116.96784973 39.82309341]
[117.05404663 52.35959625]
[108.28456879 61.87274170]
[107.97659302 76.86958313]
[107.66861725 91.86641693]
[107.51461792 106.86563110]
[107.51461792 121.86563110]
[122.29640961 124.64677429]
[136.31172180 130.09538269]
[149.08375549 138.02453613]
[160.17831421 148.16293335]
[169.21853638 160.16423035]
[175.89772034 173.61878967]
[179.98970032 188.06774902]
[181.35652161 203.01864624]
[179.95309448 217.96212769]
[175.82868958 232.38943481]
[169.12515259 245.80960083]
[160.07212830 257.76623535]
[148.97908020 267.85299683]
[136.22480774 275.72750854]
[122.24443054 281.12277222]
[107.51461792 283.85641479]
[107.51461792 298.85641479]
[107.51461792 313.85641479]
[122.23358917 317.00772095]
[135.97029114 323.14822388]
[148.12528992 332.00729370]
[158.16870117 343.19570923]
[165.66333008 356.22283936]
[170.28369141 370.51797485]
[171.83015442 385.45559692]
[170.23751831 400.38247681]
[165.57783508 414.64639282]
[158.05708313 427.62466431]
[148.00611877 438.75119019]
[135.86605835 447.54125977]
[122.16899109 453.61260986]
[107.51461792 456.70208740]
[107.51461792 471.70208740]
[107.51461792 486.70208740]
[107.51461792 501.70208740]
[107.51461792 516.70208740]
[107.51461792 531.70208740]
[107.51461792 546.70208740]
[107.51461792 561.70208740]
[107.51461792 576.70208740]
[107.51461792 591.70208740]
[122.12462616 595.44354248]
[135.34478760 602.70153809]
[146.34407043 613.01977539]
[154.43103027 625.74975586]
[159.09733582 640.09118652]
[160.04965210 655.14251709]
[157.22811890 669.95770264]
[150.81008911 683.60540771]
[141.19902039 695.22772217]
[128.99905396 704.09405518]
[114.97711945 709.64709473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[35 118]
[36 117]
[37 116]
[53 100]
[54 99]
[56 98]
[57 97]
[58 96]
[60 93]
[61 92]
[65 91]
[66 90]
[67 89]
[68 88]
[69 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
