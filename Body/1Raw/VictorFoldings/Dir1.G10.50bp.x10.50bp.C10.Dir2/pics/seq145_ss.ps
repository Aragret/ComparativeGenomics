%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUACUUAGGGGGGGGGGCUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGxxxxxxxxxxCUGUCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCCCCCCCCCCCAACAAACUUA\
) } def
/len { sequence length } bind def

/coor [
[97.74372864 376.17932129]
[85.18550873 367.82818604]
[75.09928131 356.61572266]
[68.11908722 343.24682617]
[64.68370819 328.56182861]
[65.00908661 313.48385620]
[69.07476807 298.96075439]
[76.62519073 285.90539551]
[87.18571472 275.13851929]
[100.09251404 267.33688354]
[114.53424072 262.99093628]
[113.91026306 248.00390625]
[113.28628540 233.01689148]
[112.66230774 218.02987671]
[112.03833008 203.04286194]
[111.41435242 188.05584717]
[110.79037476 173.06883240]
[110.16639709 158.08181763]
[109.54241943 143.09480286]
[108.91844177 128.10778809]
[87.91390991 124.17980194]
[76.80281830 108.11462402]
[79.93414307 90.69366455]
[69.27251434 80.14237213]
[58.61088943 69.59107971]
[47.94926071 59.03979111]
[37.28763580 48.48849869]
[26.62600899 37.93721008]
[14.18656921 29.55506706]
[0.40418738 23.63510323]
[-13.37819386 17.71513939]
[-27.16057587 11.79517746]
[-40.94295502 5.87521410]
[-54.84551239 0.24325736]
[-68.86222839 -5.09825516]
[-82.87893677 -10.43976784]
[-96.89565277 -15.78128052]
[-89.73830414 -2.59900475]
[-90.69612122 12.37038326]
[-99.47515869 24.53297043]
[-113.38124084 30.15621376]
[-128.14677429 27.51441002]
[-139.24038696 17.41829681]
[-143.25761414 2.96624184]
[-138.96560669 -11.40660381]
[-127.68153381 -21.28939629]
[-112.86753082 -23.64913368]
[-125.64488983 -31.50655937]
[-138.42224121 -39.36398697]
[-155.08163452 -42.51055527]
[-156.66981506 -59.38995361]
[-140.88972473 -65.58874512]
[-130.56481934 -52.14134216]
[-117.78746033 -44.28391647]
[-105.01010132 -36.42649078]
[-91.55413818 -29.79799271]
[-77.53742981 -24.45648003]
[-63.52071381 -19.11496735]
[-49.50400162 -13.77345562]
[-44.80321121 -14.90398312]
[-39.34571457 -13.04736042]
[-35.02299500 -7.90716743]
[-21.24061203 -1.98720431]
[-7.45823097 3.93275881]
[6.32415056 9.85272217]
[20.10653114 15.77268505]
[11.49694538 3.48956585]
[7.02109861 -10.82709599]
[7.10117626 -25.82688141]
[11.72962475 -40.09494019]
[20.46986580 -52.28543472]
[32.49747849 -61.24850082]
[46.67795563 -66.13870239]
[61.67372894 -66.49475861]
[76.07032013 -62.28309631]
[88.50978088 -53.90097809]
[97.81874847 -42.13904572]
[103.11916351 -28.10673904]
[103.91105652 -13.12765598]
[100.11974335 1.38530123]
[92.10283661 14.06320095]
[80.61652374 23.71020126]
[66.74424744 29.41634941]
[51.79452515 30.64341545]
[37.17729950 27.27558327]
[47.83892441 37.82687378]
[58.50055313 48.37816238]
[69.16217804 58.92945480]
[79.82380676 69.48074341]
[90.48542786 80.03203583]
[111.73741913 77.02021027]
[129.00341797 94.67201233]
[142.52761841 88.18384552]
[156.05180359 81.69567871]
[169.57598877 75.20751190]
[183.10017395 68.71935272]
[183.07135010 53.45626068]
[189.67550659 39.69589233]
[201.60142517 30.17037582]
[216.48117065 26.77101326]
[231.36038208 30.17274666]
[243.28477478 39.70016098]
[249.88674927 53.46158218]
[249.85548401 68.72467041]
[243.19718933 82.45892334]
[231.23385620 91.93740082]
[216.34083557 95.27813721]
[201.47512817 91.81784058]
[189.58834839 82.24353790]
[176.06416321 88.73170471]
[162.53996277 95.21987152]
[149.01577759 101.70803070]
[135.49159241 108.19619751]
[150.47077942 108.98613739]
[164.50576782 103.69285583]
[179.50285339 103.98857880]
[193.31826782 109.83103943]
[203.97715759 120.38508606]
[209.95590210 134.14207458]
[210.39985657 149.13549805]
[205.24557495 163.22213745]
[195.22981262 174.38836670]
[181.78428650 181.03802490]
[166.83097839 182.22056580]
[152.50737000 177.76698303]
[140.86097717 168.31387329]
[133.55656433 155.21250916]
[131.63821411 140.33699036]
[123.90545654 127.48380280]
[124.52943420 142.47082520]
[125.15341187 157.45783997]
[125.77738953 172.44485474]
[126.40136719 187.43186951]
[127.02534485 202.41888428]
[127.64932251 217.40589905]
[128.27330017 232.39291382]
[128.89727783 247.37992859]
[129.52125549 262.36694336]
[144.27426147 265.49740601]
[157.78489685 272.19915771]
[169.20387268 282.05093384]
[177.81338501 294.43347168]
[183.07223511 308.56835938]
[184.64984131 323.56710815]
[182.44703674 338.48681641]
[176.60229492 352.38970947]
[167.48301697 364.40176392]
[155.66244507 373.76791382]
[141.88363647 379.89941406]
[127.01272583 382.41079712]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 90]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 66]
[30 65]
[31 64]
[32 63]
[33 62]
[34 59]
[35 58]
[36 57]
[37 56]
[47 55]
[48 54]
[49 53]
[92 113]
[93 112]
[94 111]
[95 110]
[96 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
