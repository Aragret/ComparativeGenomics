%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUACUCAUGGGGGGGGGGGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUxxxxxxxxxxCUCACUGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUCCCCCCCCCCAUCUACUCAU\
) } def
/len { sequence length } bind def

/coor [
[84.33860779 495.51135254]
[69.84892273 491.30288696]
[56.94269180 483.48675537]
[46.49988937 472.59591675]
[39.23252487 459.37292480]
[35.63610077 444.71932983]
[35.95582199 429.63421631]
[40.16989136 415.14614868]
[47.99098969 402.24295044]
[58.88585663 391.80435181]
[72.11166382 384.54208374]
[86.76665497 380.95132446]
[87.07871246 365.95455933]
[87.39076996 350.95782471]
[87.70282745 335.96105957]
[88.01488495 320.96432495]
[88.32694244 305.96755981]
[88.63899231 290.97079468]
[88.95104980 275.97406006]
[89.26310730 260.97729492]
[89.57516479 245.98054504]
[77.75952911 255.22125244]
[62.84830475 253.59173584]
[53.30739212 242.01715088]
[54.55368805 227.06901550]
[65.87960052 217.23419189]
[80.85479736 218.09645081]
[90.97758484 229.16767883]
[93.15442657 214.32647705]
[95.33126068 199.48526001]
[89.52288055 185.76986694]
[99.18099213 173.23864746]
[101.35782623 158.39744568]
[103.53466034 143.55624390]
[105.71150208 128.71502686]
[84.47983551 121.80931091]
[75.97058105 103.32449341]
[61.20452881 100.68563080]
[49.31902313 110.84775543]
[33.68171692 110.94084167]
[21.67606544 100.92094421]
[18.97077370 85.51914215]
[26.84319496 72.00770569]
[41.57621384 66.76631165]
[56.21334839 72.26979065]
[63.84339142 85.91957092]
[78.60944366 88.55843353]
[82.75780487 82.93624115]
[88.33654022 78.72962189]
[85.54421997 63.99181747]
[82.75189209 49.25401306]
[79.95956421 34.51620483]
[77.16724396 19.77840042]
[74.37491608 5.04059458]
[59.33412552 5.16032982]
[44.51370239 2.59229398]
[30.39006233 -2.58096051]
[17.41722298 -10.19313526]
[6.01220560 -19.99953079]
[-3.45836306 -31.68490982]
[-10.69004440 -44.87363815]
[-15.45037079 -59.14175415]
[-17.58631516 -74.03059387]
[-17.02921867 -89.06153870]
[-13.79698658 -103.75141907]
[-7.99352455 -117.62799835]
[0.19461203 -130.24522400]
[10.50420761 -141.19747925]
[22.60385132 -150.13270569]
[36.10459137 -156.76368713]
[50.57242966 -160.87724304]
[65.54228973 -162.34115601]
[80.53295898 -161.10835266]
[95.06253052 -157.21847534]
[108.66395569 -150.79655457]
[120.90000153 -142.04904175]
[131.37731934 -131.25712585]
[139.75912476 -118.76772308]
[145.77597046 -104.98231506]
[149.23442078 -90.34404755]
[150.02333069 -75.32347870]
[148.11732483 -60.40346527]
[143.57766724 -46.06361389]
[136.55030823 -32.76489639]
[127.26112366 -20.93480873]
[116.00874329 -10.95364094]
[103.15487671 -3.14224696]
[89.11272430 2.24827027]
[91.90505219 16.98607635]
[94.69737244 31.72388268]
[97.48970032 46.46168900]
[100.28202057 61.19949341]
[103.07434845 75.93730164]
[112.99643707 78.04524231]
[121.64668274 84.25380707]
[127.33824921 93.84423065]
[128.77288818 105.41248322]
[143.59065247 103.08138275]
[158.40840149 100.75027466]
[173.22616577 98.41917419]
[178.68489075 94.50639343]
[184.43191528 94.05575562]
[188.70762634 96.31269073]
[203.60952759 94.60000610]
[208.56979370 80.16537476]
[219.30789185 69.31844330]
[233.69177246 64.21287537]
[248.86549377 65.86238098]
[261.81631470 73.93945312]
[269.97283936 86.84038544]
[271.71557617 102.00368500]
[266.69848633 116.41866302]
[255.91775513 127.22322845]
[241.51388550 132.27210999]
[226.34677124 130.56286621]
[213.42787170 122.43486023]
[205.32221985 109.50190735]
[190.42031860 111.21459961]
[175.55726624 113.23693085]
[160.73951721 115.56803131]
[145.92175293 117.89913940]
[131.10398865 120.23023987]
[120.55270386 130.89187622]
[118.37586975 145.73307800]
[116.19902802 160.57427979]
[114.02219391 175.41548157]
[119.67487335 190.19241333]
[110.17246246 201.66210938]
[107.99562836 216.50331116]
[105.81879425 231.34451294]
[104.57191467 246.29260254]
[104.25986481 261.28936768]
[103.94780731 276.28610229]
[103.63574982 291.28286743]
[103.32369232 306.27960205]
[103.01163483 321.27636719]
[102.69957733 336.27313232]
[102.38752747 351.26986694]
[102.07546997 366.26663208]
[101.76341248 381.26339722]
[116.25634766 385.46066284]
[129.16860962 393.26681519]
[139.61981201 404.14959717]
[146.89738464 417.36697388]
[150.50512695 432.01779175]
[150.19705200 447.10314941]
[145.99417114 461.59445190]
[138.18304443 474.50369263]
[127.29624176 484.95071411]
[114.07604980 492.22317505]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[28 130]
[29 129]
[30 128]
[32 126]
[33 125]
[34 124]
[35 123]
[37 47]
[38 46]
[49 93]
[50 92]
[51 91]
[52 90]
[53 89]
[54 88]
[97 122]
[98 121]
[99 120]
[100 119]
[103 118]
[104 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
