%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUCCUAGUCCUGGGGGGGGGGCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGxxxxxxxxxxCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUAUUAAUCCCCCCCCCCCAUCAUCCUAGCCCU\
) } def
/len { sequence length } bind def

/coor [
[28.41599464 483.61959839]
[18.63753128 482.62487793]
[8.94869614 480.97262573]
[-0.60634977 478.67044067]
[-9.98405933 475.72882080]
[-19.14169502 472.16119385]
[-28.03752327 467.98388672]
[-36.63100815 463.21594238]
[-44.88299561 457.87911987]
[-52.75588226 451.99780273]
[-60.21379852 445.59878540]
[-67.22277832 438.71124268]
[-73.75087738 431.36666870]
[-79.76837158 423.59848022]
[-85.24785614 415.44216919]
[-90.16438293 406.93487549]
[-103.74176788 413.31097412]
[-117.31915283 419.68707275]
[-130.76954651 426.32687378]
[-144.08782959 433.22784424]
[-157.40609741 440.12881470]
[-170.72438049 447.02978516]
[-184.04266357 453.93075562]
[-197.36093140 460.83175659]
[-210.67921448 467.73272705]
[-223.99749756 474.63369751]
[-235.27911377 487.28918457]
[-250.56307983 479.95184326]
[-247.74351501 463.23400879]
[-230.89846802 461.31542969]
[-217.58018494 454.41442871]
[-204.26191711 447.51345825]
[-190.94363403 440.61248779]
[-177.62535095 433.71151733]
[-164.30708313 426.81054688]
[-150.98880005 419.90957642]
[-137.67051697 413.00857544]
[-135.38690186 408.76171875]
[-130.38609314 405.93023682]
[-123.69525146 406.10968018]
[-110.11785889 399.73358154]
[-96.54047394 393.35748291]
[-103.79543304 370.31320190]
[-107.13865662 346.38378906]
[-106.47722626 322.22854614]
[-101.82853699 298.51312256]
[-93.31990051 275.89114380]
[-81.18499756 254.98623657]
[-65.75751495 236.37489319]
[-47.46192932 220.57044983]
[-26.80185509 208.00901794]
[-4.34615707 199.03746033]
[19.28668785 193.90371704]
[43.44564056 192.75006104]
[67.46502686 195.60910034]
[71.22938538 181.08912659]
[74.99374390 166.56915283]
[78.75810242 152.04917908]
[82.52246094 137.52920532]
[86.28681946 123.00923920]
[90.05117798 108.48926544]
[93.24615479 93.83347321]
[95.86688995 79.06419373]
[87.08503723 66.19886017]
[89.95323181 51.25803757]
[102.27248383 42.96516800]
[104.74900055 28.17101860]
[107.08106232 13.35341072]
[109.41311646 -1.46419656]
[111.74517822 -16.28180313]
[97.68163300 -21.65863800]
[85.04353333 -29.84228134]
[74.38335419 -40.47498322]
[66.16712189 -53.09192276]
[60.75401306 -67.14154816]
[58.38066101 -82.00966644]
[59.15082550 -97.04630280]
[63.03083420 -111.59413147]
[69.85107422 -125.01717377]
[79.31338501 -136.72863770]
[91.00411987 -146.21653748]
[104.41220856 -153.06611633]
[118.95151520 -156.97793579]
[133.98643494 -157.78099060]
[148.85971069 -155.44017029]
[162.92114258 -150.05780029]
[175.55601501 -141.86918640]
[186.21200562 -131.23229980]
[194.42327881 -118.61212158]
[199.83085632 -104.56037140]
[202.19836426 -89.69132233]
[201.42228699 -74.65498352]
[197.53656006 -60.10868835]
[190.71104431 -46.68832779]
[181.24412537 -34.98059082]
[169.54965210 -25.49728394]
[156.13887024 -18.65297890]
[141.59802246 -14.74687958]
[126.56278992 -13.94974232]
[124.23072815 0.86786479]
[121.89866638 15.68547249]
[119.56660461 30.50308037]
[121.64371490 37.63557434]
[117.04176331 45.58590317]
[125.75569153 57.61100388]
[123.30828857 72.62648773]
[110.63617706 81.68492889]
[108.01544189 96.45420837]
[109.58810425 99.13043976]
[110.20040894 102.44871521]
[109.60890961 106.04638672]
[107.71058655 109.47474670]
[104.57115173 112.25362396]
[100.80679321 126.77359772]
[97.04243469 141.29356384]
[93.27807617 155.81353760]
[89.51371765 170.33351135]
[85.74935913 184.85348511]
[81.98500061 199.37345886]
[91.26280975 202.64764404]
[100.29832458 206.54031372]
[109.05039215 211.03369141]
[117.47911072 216.10728455]
[125.54608917 221.73793030]
[133.21456909 227.89993286]
[140.44961548 234.56517029]
[147.21826172 241.70326233]
[153.48970032 249.28164673]
[159.23533630 257.26574707]
[164.42901611 265.61914062]
[169.04708862 274.30377197]
[173.06854248 283.27999878]
[176.47505188 292.50692749]
[179.25114441 301.94247437]
[181.38417053 311.54357910]
[182.86445618 321.26654053]
[183.68527222 331.06701660]
[183.84291077 340.90029907]
[183.33666992 350.72158813]
[182.16891479 360.48611450]
[180.34498596 370.14935303]
[177.87321472 379.66726685]
[174.76492310 388.99652100]
[171.03428650 398.09454346]
[166.69833374 406.91992188]
[161.77688599 415.43237305]
[156.29237366 423.59320068]
[150.26983643 431.36514282]
[143.73675537 438.71282959]
[136.72293091 445.60278320]
[129.26033020 452.00360107]
[121.38302612 457.88616943]
[113.12693024 463.22366333]
[104.52967834 467.99179077]
[95.63050079 472.16882324]
[86.46995544 475.73577881]
[77.08981323 478.67639160]
[67.53284454 480.97732544]
[57.84262085 482.62811279]
[48.06332016 483.62124634]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 42]
[17 41]
[18 40]
[19 37]
[20 36]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[26 30]
[55 119]
[56 118]
[57 117]
[58 116]
[59 115]
[60 114]
[61 113]
[62 108]
[63 107]
[66 104]
[67 102]
[68 101]
[69 100]
[70 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
