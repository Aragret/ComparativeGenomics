%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAUUUCCGGGGGGGGGGACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUxxxxxxxxxxCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAUACACCUCCUAUGCCCCCCCCCCAAAAAACUUCC\
) } def
/len { sequence length } bind def

/coor [
[5.36120415 271.24295044]
[-3.48633885 266.04583740]
[-12.04924870 260.39205933]
[-20.30397224 254.29711914]
[-28.22780800 247.77778625]
[-35.79895782 240.85200500]
[-42.99660492 233.53881836]
[-49.80094147 225.85835266]
[-56.19326401 217.83171082]
[-62.15598297 209.48097229]
[-67.67270660 200.82911682]
[-80.81433105 208.06082153]
[-93.95596313 215.29252625]
[-107.09759521 222.52423096]
[-120.23922729 229.75593567]
[-133.38085938 236.98762512]
[-146.44755554 244.35386658]
[-159.43794250 251.85386658]
[-172.42831421 259.35388184]
[-185.41870117 266.85388184]
[-198.40907288 274.35388184]
[-199.89706421 289.79943848]
[-210.20474243 301.39819336]
[-225.36859131 304.69021606]
[-239.55780029 298.40963745]
[-247.31634521 284.97143555]
[-245.66088867 269.54293823]
[-235.22799683 258.05667114]
[-220.02932739 254.92933655]
[-205.90907288 261.36349487]
[-192.91870117 253.86349487]
[-179.92831421 246.36349487]
[-166.93794250 238.86349487]
[-153.94755554 231.36349487]
[-149.70117188 225.25772095]
[-140.61256409 223.84599304]
[-127.47093201 216.61430359]
[-114.32929993 209.38259888]
[-101.18766785 202.15089417]
[-88.04603577 194.91918945]
[-74.90440369 187.68748474]
[-89.92366791 147.00689697]
[-95.61315918 104.01714325]
[-91.69340515 60.83005905]
[-78.35695648 19.56715012]
[-91.78440094 12.88107395]
[-105.21185303 6.19499874]
[-121.53767395 7.74405384]
[-130.82031250 -5.77499485]
[-123.51058197 -20.45491028]
[-107.12811279 -21.19425201]
[-98.52577972 -7.23245096]
[-85.09832764 -0.54637545]
[-71.67087555 6.13969994]
[-67.07928467 -1.80943036]
[-62.11987305 -9.53443623]
[-56.80357361 -17.01831245]
[-51.14208603 -24.24458122]
[-45.14787292 -31.19733810]
[-38.83412933 -37.86127472]
[-32.21475220 -44.22172546]
[-25.30431747 -50.26468277]
[-18.11803627 -55.97684479]
[-10.67173004 -61.34563828]
[-2.98178864 -66.35924530]
[4.93485785 -71.00662231]
[13.06078148 -75.27754974]
[21.37809372 -79.16261292]
[29.86848640 -82.65326691]
[38.51326752 -85.74182892]
[47.29340363 -88.42150116]
[56.18957138 -90.68637085]
[65.18218231 -92.53147125]
[74.25144196 -93.95272064]
[83.37738800 -94.94700623]
[92.53991699 -95.51213074]
[101.71887970 -95.64685822]
[110.89405060 -95.35087585]
[120.04524994 -94.62485504]
[129.15231323 -93.47038269]
[138.19520569 -91.88999939]
[147.15400696 -89.88719177]
[156.00900269 -87.46636200]
[164.74070740 -84.63284302]
[173.32987976 -81.39287567]
[181.75762939 -77.75357819]
[190.00540161 -73.72297668]
[198.05503845 -69.30994415]
[205.88880920 -64.52418518]
[213.48947144 -59.37624359]
[220.84030151 -53.87744522]
[227.92510986 -48.03990555]
[234.72830200 -41.87646484]
[241.23490906 -35.40069580]
[247.43058777 -28.62685585]
[253.30171204 -21.56985474]
[258.83535767 -14.24522781]
[271.33941650 -22.53070259]
[278.16079712 -37.44380569]
[294.50994873 -38.72328186]
[303.56826782 -25.05291367]
[296.01733398 -10.49560452]
[279.62487793 -10.02666664]
[267.12084961 -1.74119198]
[272.22497559 7.16030931]
[276.85537720 16.31716156]
[280.99938965 25.70417786]
[284.64553833 35.29553986]
[287.78387451 45.06486893]
[290.40567017 54.98529434]
[292.50378418 65.02953339]
[294.07244873 75.16995239]
[295.10729980 85.37866211]
[295.60552979 95.62759399]
[295.56576538 105.88854218]
[294.98809814 116.13330078]
[293.87414551 126.33368683]
[292.22692871 136.46163940]
[290.05102539 146.48931885]
[287.35238647 156.38911438]
[284.13842773 166.13381958]
[280.41802979 175.69664001]
[276.20138550 185.05125427]
[271.50012207 194.17193604]
[266.32714844 203.03359985]
[260.69671631 211.61187744]
[254.62428284 219.88317871]
[248.12657166 227.82473755]
[241.22143555 235.41473389]
[233.92788696 242.63227844]
[226.26597595 249.45751953]
[218.25677490 255.87167358]
[209.92231750 261.85711670]
[201.28553772 267.39739990]
[192.37016296 272.47723389]
[183.20072937 277.08270264]
[173.80245972 281.20111084]
[164.20118713 284.82113647]
[154.42335510 287.93283081]
[144.49581909 290.52761841]
[134.44590759 292.59835815]
[124.30125427 294.13937378]
[114.08975983 295.14642334]
[103.83950806 295.61672974]
[93.57869720 295.54901123]
[83.33555603 294.94342041]
[73.13824463 293.80169678]
[63.01481247 292.12689209]
[52.99310684 289.92367554]
[43.10069275 287.19805908]
[33.36477661 283.95758057]
[23.81213570 280.21115112]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 41]
[12 40]
[13 39]
[14 38]
[15 37]
[16 36]
[17 34]
[18 33]
[19 32]
[20 31]
[21 30]
[45 54]
[46 53]
[47 52]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
