%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUCCCCCUGGGGGGGGGGCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACAGxxxxxxxxxxUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCCCCCCCCCCCAUUCCCCCU\
) } def
/len { sequence length } bind def

/coor [
[87.07598877 380.28268433]
[73.23004913 374.26666260]
[61.52138901 364.73724365]
[52.81886292 352.40158081]
[47.76826096 338.17504883]
[46.74436951 323.11337280]
[49.82316971 308.33422852]
[56.77619171 294.93429565]
[67.08747864 283.90795898]
[79.99185944 276.07345581]
[94.53174591 272.01214600]
[94.53174591 257.01214600]
[94.53174591 242.01213074]
[94.53174591 227.01213074]
[94.53174591 212.01213074]
[94.53174591 197.01213074]
[94.53174591 182.01213074]
[94.53174591 167.01213074]
[94.53174591 152.01213074]
[94.53174591 137.01213074]
[78.87987518 128.86134338]
[69.34237671 114.96096802]
[67.55257416 98.99208069]
[73.20069122 84.79388428]
[58.38293839 82.46277618]
[43.56517792 80.13167572]
[28.74742126 77.80057526]
[13.88437366 75.77823639]
[-1.01752865 74.06554413]
[-15.91943073 72.35285950]
[-26.43433571 83.61087799]
[-41.38733673 86.48509979]
[-55.00449753 80.07909393]
[-62.15287018 67.03920746]
[-77.05477142 65.32651520]
[-91.95667267 63.61382675]
[-106.85857391 61.90113449]
[-121.76047516 60.18844604]
[-136.58244324 67.20568085]
[-149.91477966 57.65682602]
[-148.04234314 41.36492538]
[-132.89131165 35.08969116]
[-120.04779053 45.28654480]
[-105.14588928 46.99923325]
[-90.24398041 48.71192169]
[-75.34207916 50.42461395]
[-60.44017792 52.13730240]
[-50.51989746 41.05912781]
[-35.80448532 37.90941238]
[-21.89342880 44.10100937]
[-14.20674133 57.45095444]
[0.69516110 59.16364670]
[15.59706306 60.87633514]
[19.87277985 58.61940002]
[25.61980057 59.07003403]
[31.07852364 62.98281479]
[45.89628220 65.31391907]
[60.71403885 67.64501953]
[75.53179932 69.97612762]
[88.77438354 62.93098831]
[95.12151337 49.34003830]
[101.46864319 35.74908829]
[100.90876007 31.29397774]
[101.74943542 27.31097221]
[103.65966034 24.19120979]
[106.21360016 22.17344856]
[108.95028687 21.32615089]
[116.40519714 8.30984211]
[123.86010742 -4.70646715]
[131.31501770 -17.72277641]
[120.25680542 -27.94637489]
[111.75512695 -40.36852646]
[106.23371124 -54.36441040]
[103.96646881 -69.23091888]
[105.06393433 -84.22197723]
[109.46786499 -98.58598328]
[116.95430756 -111.60347748]
[127.14501953 -122.62320709]
[139.52653503 -131.09469604]
[153.47610474 -136.59571838]
[168.29290771 -138.85339355]
[183.23338318 -137.75765991]
[197.54844666 -133.36666870]
[205.00335693 -146.38298035]
[212.45826721 -159.39929199]
[219.91317749 -172.41560364]
[222.53839111 -189.16506958]
[239.36001587 -191.27915955]
[246.04817200 -175.70016479]
[232.92948914 -164.96069336]
[225.47457886 -151.94438171]
[218.01966858 -138.92807007]
[210.56475830 -125.91176605]
[221.59547424 -115.78629303]
[230.10038757 -103.45402527]
[235.65026855 -89.53160858]
[237.96382141 -74.71611023]
[236.92182922 -59.75006866]
[232.57333374 -45.38428497]
[225.13336182 -32.34017563]
[214.97224426 -21.27352715]
[202.59721375 -12.74153709]
[188.62707520 -7.17475319]
[173.76130676 -4.85535002]
[158.74494934 -5.90282965]
[144.33132935 -10.26786613]
[136.87641907 2.74844313]
[129.42150879 15.76475239]
[121.96659088 28.78106308]
[115.05959320 42.09621811]
[108.71246338 55.68716812]
[102.36533356 69.27812195]
[114.95262146 71.18558502]
[126.30358124 78.27806854]
[134.28608704 89.82641602]
[137.17366028 104.23307037]
[151.66926575 108.09023285]
[167.35266113 103.29828644]
[179.15811157 114.68087006]
[174.94117737 130.52856445]
[159.03987122 134.53862000]
[147.81210327 122.58583069]
[133.31649780 118.72866821]
[127.37031555 123.29953766]
[138.24217224 133.63406372]
[149.37150574 143.69081116]
[144.48785400 157.87355042]
[129.52626038 158.94624329]
[122.66931915 145.60501099]
[115.47793579 132.44126892]
[109.53174591 137.01213074]
[109.53174591 152.01213074]
[109.53174591 167.01213074]
[109.53174591 182.01213074]
[109.53174591 197.01213074]
[109.53174591 212.01213074]
[109.53174591 227.01213074]
[109.53174591 242.01213074]
[109.53174591 257.01214600]
[109.53174591 272.01214600]
[124.07163239 276.07345581]
[136.97601318 283.90795898]
[147.28729248 294.93429565]
[154.24031067 308.33422852]
[157.31912231 323.11337280]
[156.29522705 338.17504883]
[151.24462891 352.40158081]
[142.54209900 364.73724365]
[130.83343506 374.26666260]
[116.98749542 380.28268433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 59]
[25 58]
[26 57]
[27 56]
[28 53]
[29 52]
[30 51]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[60 112]
[61 111]
[62 110]
[67 109]
[68 108]
[69 107]
[70 106]
[83 93]
[84 92]
[85 91]
[86 90]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
