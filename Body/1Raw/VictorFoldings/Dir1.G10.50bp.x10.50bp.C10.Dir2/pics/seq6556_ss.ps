%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUAGACCUAACCGGGGGGGGGGAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAxxxxxxxxxxACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCCCCCCCCCCCUAGACCUAACC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 443.60534668]
[70.75619507 438.79592896]
[57.85220718 431.03051758]
[46.91955185 420.67239380]
[38.46956635 408.20596313]
[32.89747238 394.21432495]
[30.46388245 379.35189819]
[31.28262329 364.31381226]
[35.31539917 349.80346680]
[42.37359238 336.49948120]
[52.12707901 325.02413940]
[64.11966705 315.91412354]
[77.79044342 309.59561157]
[92.50000000 306.36404419]
[92.50000000 291.36404419]
[92.50000000 276.36404419]
[92.50000000 261.36404419]
[92.50000000 246.36404419]
[92.50000000 231.36404419]
[92.50000000 216.36404419]
[92.50000000 201.36404419]
[92.50000000 186.36404419]
[92.50000000 171.36404419]
[92.50000000 156.36404419]
[85.32509613 154.93452454]
[78.39311981 152.59559631]
[71.81883240 149.38600159]
[65.71106720 145.35884094]
[60.17093658 140.58079529]
[55.29014969 135.13095093]
[51.14950562 129.09954834]
[47.81754684 122.58641815]
[45.34943771 115.69938660]
[43.78603363 108.55245972]
[43.15321350 101.26395416]
[28.24396324 99.61644745]
[13.33471489 97.96894073]
[-1.57453513 96.32143402]
[-16.48378563 94.67392731]
[-31.39303398 93.02642059]
[-47.80043030 97.29650879]
[-56.44566345 82.71239471]
[-44.82474136 70.36773682]
[-29.74552727 78.11717224]
[-14.83627796 79.76467896]
[0.07297122 81.41218567]
[14.98222065 83.05968475]
[29.89146996 84.70719147]
[44.80072021 86.35469818]
[47.52603531 78.09937286]
[51.47797394 70.35598755]
[56.56415558 63.30555725]
[62.66569138 57.11289215]
[69.63994598 51.92275238]
[77.32389832 47.85645676]
[85.53791809 45.00906372]
[94.09000397 43.44713211]
[102.78024292 43.20717621]
[111.40549469 44.29479980]
[119.76412201 46.68457794]
[127.66075897 50.32065582]
[136.62258911 38.29212952]
[145.58442688 26.26359940]
[154.54626465 14.23507214]
[163.50810242 2.20654416]
[172.46994019 -9.82198334]
[181.43177795 -21.85051155]
[167.50286865 -16.28405190]
[152.76554871 -13.48913097]
[137.76576233 -13.56928253]
[123.05916595 -16.52153969]
[109.19053650 -22.23653603]
[96.67363739 -30.50256538]
[85.97214508 -41.01342010]
[77.48249054 -53.37973404]
[71.51915741 -67.14340973]
[68.30306244 -81.79457855]
[67.95333862 -96.79049683]
[70.48293304 -111.57566071]
[75.79815674 -125.60237122]
[83.70209503 -138.35099792]
[93.90196228 -149.34930420]
[106.01991272 -158.18984985]
[119.60704803 -164.54516602]
[134.16003418 -168.17979431]
[149.13977051 -168.95910645]
[163.99136353 -166.85424805]
[178.16461182 -161.94316101]
[191.13452148 -154.40780640]
[202.42060852 -144.52729797]
[211.60478210 -132.66766357]
[218.34683228 -119.26824188]
[222.39701843 -104.82538605]
[223.60528564 -89.87413025]
[221.92687988 -74.96833038]
[217.42398071 -60.66015244]
[210.26339722 -47.47963715]
[200.71487427 -35.91954041]
[214.90469360 -40.78256226]
[229.09451294 -45.64558029]
[228.83410645 -60.77130127]
[233.26249695 -75.23658752]
[241.94581604 -87.62429047]
[254.03338623 -96.72077179]
[268.34097290 -101.63486481]
[283.46685791 -101.88513947]
[297.92916870 -97.44705963]
[310.31103516 -88.75543976]
[319.39944458 -76.66178131]
[324.30392456 -62.35091400]
[324.54406738 -47.22485733]
[320.09631348 -32.76551819]
[311.39639282 -20.38946724]
[299.29666138 -11.30918789]
[284.98248291 -6.41427279]
[269.85629272 -6.18427563]
[255.39991760 -10.64172935]
[243.02970886 -19.34993744]
[233.95753479 -31.45575905]
[219.76771545 -26.59273911]
[205.57789612 -21.72971916]
[193.46031189 -12.88867474]
[184.49847412 -0.86014688]
[175.53663635 11.16838074]
[166.57479858 23.19690895]
[157.61296082 35.22543716]
[148.65112305 47.25396347]
[139.68928528 59.28249359]
[153.39700317 80.45735168]
[156.59632874 105.47814941]
[148.65765381 129.42086792]
[131.14328003 147.57363892]
[107.50000000 156.36404419]
[107.50000000 171.36404419]
[107.50000000 186.36404419]
[107.50000000 201.36404419]
[107.50000000 216.36404419]
[107.50000000 231.36404419]
[107.50000000 246.36404419]
[107.50000000 261.36404419]
[107.50000000 276.36404419]
[107.50000000 291.36404419]
[107.50000000 306.36404419]
[122.20955658 309.59561157]
[135.88034058 315.91412354]
[147.87292480 325.02413940]
[157.62640381 336.49948120]
[164.68460083 349.80346680]
[168.71737671 364.31381226]
[169.53611755 379.35189819]
[167.10252380 394.21432495]
[161.53042603 408.20596313]
[153.08044434 420.67239380]
[142.14779663 431.03051758]
[129.24380493 438.79592896]
[114.97203827 443.60534668]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[35 49]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[61 128]
[62 127]
[63 126]
[64 125]
[65 124]
[66 123]
[67 122]
[98 121]
[99 120]
[100 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
