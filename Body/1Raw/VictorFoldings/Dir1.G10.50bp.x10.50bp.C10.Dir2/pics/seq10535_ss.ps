%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGACAUCAGGGGGGGGGGUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUxxxxxxxxxxUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCUCCCCCCCCCCCCCCACAUCA\
) } def
/len { sequence length } bind def

/coor [
[130.03900146 632.46362305]
[116.19305420 626.44757080]
[104.48439789 616.91815186]
[95.78186798 604.58251953]
[90.73126984 590.35595703]
[89.70737457 575.29431152]
[92.78617859 560.51513672]
[99.73919678 547.11523438]
[110.05048370 536.08886719]
[122.95486450 528.25439453]
[137.49475098 524.19305420]
[137.49475098 509.19305420]
[137.49475098 494.19305420]
[137.49475098 479.19305420]
[137.49475098 464.19305420]
[137.49475098 449.19305420]
[137.49475098 434.19305420]
[137.49475098 419.19305420]
[137.49475098 404.19305420]
[137.49475098 389.19305420]
[136.24787903 374.24496460]
[133.76275635 359.45227051]
[131.27763367 344.65954590]
[119.03499603 336.25399780]
[116.30400085 321.28750610]
[125.20352173 308.50326538]
[122.71839905 293.71057129]
[120.23328400 278.91784668]
[117.74816895 264.12515259]
[115.26304626 249.33244324]
[101.23883820 247.17543030]
[88.55141449 240.77459717]
[78.45241547 230.74649048]
[71.94273376 218.06622314]
[69.67332458 203.97268677]
[71.88012695 189.84745789]
[78.35962677 177.07939148]
[88.48752594 166.92810059]
[101.27887726 160.39961243]
[99.10204315 145.55841064]
[96.92520905 130.71720886]
[87.72597504 129.93400574]
[78.76479340 126.34103394]
[70.91082764 120.02709198]
[64.99594879 111.35135651]
[61.73066330 100.92730713]
[61.62686539 89.58068085]
[64.93528748 78.28420258]
[53.23566437 68.89704132]
[41.53604126 59.50988007]
[29.83641815 50.12271881]
[13.79640961 50.43523788]
[3.66258287 37.99799347]
[7.20874262 22.35176849]
[21.71457863 15.49901295]
[36.05245590 22.69657135]
[39.22357941 38.42309570]
[50.92320251 47.81025696]
[62.62282944 57.19741821]
[74.32244873 66.58457947]
[81.50654602 64.43078613]
[72.96992493 52.09684372]
[82.06239319 40.16675568]
[96.21824646 45.12778091]
[95.87472534 60.12320328]
[103.05882263 57.96940994]
[107.66438293 43.69395065]
[112.26995087 29.41848946]
[116.87551117 15.14302921]
[121.48107910 0.86756825]
[109.42227936 9.78863049]
[94.70994568 12.71221447]
[80.15649414 9.07944775]
[68.54395294 -0.41522989]
[62.09217834 -13.95681763]
[62.03448868 -28.95670700]
[68.38191223 -42.54751968]
[79.92107391 -52.13124084]
[94.44615173 -55.87584305]
[109.18053436 -53.06551361]
[121.30760193 -44.23747253]
[128.50914001 -31.07928467]
[129.40873718 -16.10773468]
[137.39865112 -28.80266380]
[139.34187317 -37.79575729]
[145.68916321 -41.67616653]
[153.94145203 -54.20212555]
[154.36692810 -70.59575653]
[168.90415955 -78.18527222]
[182.59849548 -69.16323853]
[181.36238098 -52.81074905]
[166.46742249 -45.94983673]
[158.21511841 -33.42387772]
[150.09358215 -20.81274796]
[142.10366821 -8.11781788]
[135.75653076 5.47313261]
[131.15097046 19.74859428]
[126.54541016 34.02405548]
[121.93984222 48.29951477]
[117.33428192 62.57497406]
[135.30036926 86.52001953]
[131.51777649 113.60463715]
[111.76641083 128.54037476]
[113.94324493 143.38157654]
[116.12008667 158.22277832]
[131.71235657 161.34732056]
[145.27529907 169.59823608]
[155.18533325 181.96643066]
[160.26354980 196.95126343]
[159.91580200 212.74258423]
[154.20227051 227.43943787]
[143.82795715 239.27883911]
[130.05575562 246.84732056]
[132.54087830 261.64004517]
[135.02598572 276.43273926]
[137.51110840 291.22546387]
[139.99623108 306.01815796]
[152.58470154 315.19247437]
[154.89424133 330.22979736]
[146.07034302 342.17443848]
[148.55546570 356.96713257]
[151.04058838 371.75985718]
[159.36000061 359.27838135]
[173.37045288 353.92047119]
[187.89535522 357.66574097]
[197.56803894 369.13043213]
[198.81465149 384.07855225]
[191.17459106 396.98706055]
[177.47070312 403.08651733]
[162.76629639 400.12329102]
[152.49475098 389.19305420]
[152.49475098 404.19305420]
[152.49475098 419.19305420]
[152.49475098 434.19305420]
[152.49475098 449.19305420]
[152.49475098 464.19305420]
[152.49475098 479.19305420]
[152.49475098 494.19305420]
[152.49475098 509.19305420]
[152.49475098 524.19305420]
[167.03463745 528.25439453]
[179.93901062 536.08886719]
[190.25030518 547.11523438]
[197.20332336 560.51513672]
[200.28211975 575.29431152]
[199.25822449 590.35595703]
[194.20762634 604.58251953]
[185.50511169 616.91815186]
[173.79644775 626.44757080]
[159.95050049 632.46362305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 122]
[22 121]
[23 120]
[26 117]
[27 116]
[28 115]
[29 114]
[30 113]
[39 105]
[40 104]
[41 103]
[48 60]
[49 59]
[50 58]
[51 57]
[66 100]
[67 99]
[68 98]
[69 97]
[70 96]
[83 95]
[84 94]
[86 93]
[87 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
