%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCCCCUACUCAUCGGGGGGGGGGGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUxxxxxxxxxxAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCCCCCCCCCCCUGCCCCUACUCCUC\
) } def
/len { sequence length } bind def

/coor [
[70.50532532 410.00460815]
[56.57493210 404.34313965]
[43.80179596 396.40872192]
[32.55342484 386.42962646]
[23.15345764 374.69299316]
[15.87235069 361.53649902]
[10.91959476 347.33865356]
[8.43769169 332.50802612]
[8.49805069 317.47125244]
[11.09893417 302.66101074]
[16.16551018 288.50338745]
[23.55200195 275.40576172]
[33.04588699 263.74496460]
[44.37400818 253.85652161]
[57.21043015 246.02488708]
[71.18582153 240.47544861]
[85.89809418 237.36784363]
[85.32003021 222.37898254]
[84.74196625 207.39013672]
[84.16390228 192.40127563]
[83.58583832 177.41241455]
[83.00777435 162.42355347]
[82.42971039 147.43470764]
[81.85164642 132.44584656]
[70.50679779 122.63286591]
[55.59099579 124.21996307]
[40.67519379 125.80705261]
[38.17509079 140.69503784]
[31.74992180 154.35592651]
[21.87648201 165.77598572]
[9.28744411 174.10777283]
[-5.08300114 178.73301697]
[-20.16847038 179.30848694]
[-34.84952545 175.79150391]
[-48.03672791 168.44300842]
[-58.75150681 157.80834961]
[-66.19874573 144.67666626]
[-69.82582092 130.02241516]
[-69.36357117 114.93305206]
[-64.84630585 100.52829742]
[-56.60922623 87.87709045]
[-45.26358414 77.91822815]
[-31.65130043 71.39071655]
[-16.78249931 68.77895355]
[-1.76054204 70.27674103]
[12.29984188 75.77294159]
[24.35527802 84.85968781]
[33.51117325 96.86269379]
[39.08810043 110.89125824]
[54.00390244 109.30416107]
[68.91970825 107.71706390]
[72.44666290 87.95154572]
[86.44476318 75.36185455]
[103.97848511 74.13491821]
[110.41222382 60.58474731]
[116.84596252 47.03458023]
[123.27969360 33.48441315]
[129.71343994 19.93424606]
[116.77613831 12.32346058]
[104.56211853 3.59904647]
[93.16696930 -6.17071295]
[82.67987823 -16.90935516]
[73.18290710 -28.53283119]
[64.75039673 -40.95017624]
[57.44834518 -54.06419754]
[51.33389282 -67.77227020]
[46.45490265 -81.96709442]
[42.84955597 -96.53758240]
[40.54607010 -111.36968994]
[39.56247711 -126.34735107]
[39.90646744 -141.35331726]
[41.57535934 -156.27017212]
[44.55607986 -170.98115540]
[48.82530975 -185.37112427]
[54.34963226 -199.32746887]
[61.08580780 -212.74095154]
[68.98112488 -225.50659180]
[77.97377777 -237.52449036]
[87.99340057 -248.70057678]
[98.96156311 -258.94738770]
[110.79241943 -268.18472290]
[123.39339447 -276.34027100]
[136.66584778 -283.35021973]
[150.50590515 -289.15972900]
[164.80526733 -293.72329712]
[179.45199585 -297.00521851]
[194.33146667 -298.97979736]
[209.32722473 -299.63159180]
[224.32189941 -298.95550537]
[239.19815063 -296.95681763]
[253.83955383 -293.65115356]
[268.13146973 -289.06442261]
[281.96212769 -283.23251343]
[295.22320557 -276.20104980]
[307.81094360 -268.02508545]
[319.62680054 -258.76858521]
[330.57833862 -248.50401306]
[340.57983398 -237.31170654]
[349.55300903 -225.27926636]
[357.42764282 -212.50083923]
[364.14205933 -199.07646179]
[369.64376831 -185.11117554]
[373.88967896 -170.71430969]
[376.84655762 -155.99851990]
[378.49127197 -141.07897949]
[378.81094360 -126.07247162]
[377.80307007 -111.09642792]
[375.47555542 -96.26806641]
[371.84658813 -81.70343781]
[366.94461060 -67.51654053]
[360.80795288 -53.81840134]
[353.48464966 -40.71622467]
[345.03204346 -28.31256485]
[335.51623535 -16.70449257]
[325.01174927 -5.98285913]
[313.60079956 3.76842117]
[301.37265015 12.47303104]
[288.42303467 20.06284332]
[274.85330200 26.47845459]
[260.76968384 31.66965675]
[246.28233337 35.59581757]
[231.50469971 38.22621155]
[216.55241394 39.54024887]
[201.54249573 39.52764893]
[186.59243774 38.18850708]
[171.81922913 35.53330612]
[157.33851624 31.58282471]
[143.26359558 26.36798286]
[136.82986450 39.91815186]
[130.39613342 53.46831894]
[123.96238708 67.01848602]
[117.52865601 80.56864929]
[125.81550598 90.99736786]
[128.12043762 104.70404816]
[123.31999207 118.36317444]
[112.08487701 128.38781738]
[96.84049988 131.86778259]
[97.41856384 146.85664368]
[97.99662781 161.84548950]
[98.57469177 176.83435059]
[99.15275574 191.82321167]
[99.73081970 206.81207275]
[100.30888367 221.80091858]
[100.88694763 236.78977966]
[115.79486084 238.75505066]
[130.15614319 243.21165466]
[143.55761719 250.03137207]
[155.61367798 259.01800537]
[165.97746277 269.91296387]
[174.35075378 282.40277100]
[180.49267578 296.12811279]
[184.22648621 310.69406128]
[185.44476318 325.68151855]
[184.11245728 340.65927124]
[180.26791382 355.19638062]
[174.02171326 368.87457275]
[165.55360413 381.30032349]
[155.10720825 392.11608887]
[142.98310852 401.01068115]
[129.53012085 407.72824097]
[115.13533020 412.07540894]
[100.21289825 413.92715454]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 51]
[26 50]
[27 49]
[54 132]
[55 131]
[56 130]
[57 129]
[58 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
