%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUCUUCAGGGGGGGGGGUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCxxxxxxxxxxGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACCCCCCCCCCCUAUACUUCA\
) } def
/len { sequence length } bind def

/coor [
[83.04385376 428.97467041]
[69.19791412 422.95864868]
[57.48925400 413.42922974]
[48.78673172 401.09356689]
[43.73612976 386.86703491]
[42.71223831 371.80535889]
[45.79103470 357.02618408]
[52.74405670 343.62628174]
[63.05533981 332.59994507]
[75.95972443 324.76541138]
[90.49961090 320.70410156]
[90.49961090 305.70410156]
[90.49961090 290.70410156]
[90.49961090 275.70410156]
[90.49961090 260.70410156]
[90.49961090 245.70411682]
[90.49961090 230.70411682]
[90.49961090 215.70411682]
[90.49961090 200.70411682]
[90.49961090 185.70411682]
[90.49961090 170.70411682]
[90.49961090 155.70411682]
[87.76923370 151.71405029]
[87.56073761 145.95317078]
[90.82464600 140.08337402]
[91.44862366 125.09636688]
[78.34846497 115.30243683]
[73.48860168 99.68460083]
[78.71864319 84.18679810]
[69.70111847 72.19996643]
[60.68358612 60.21313095]
[47.79417801 67.91346741]
[34.15928268 74.20010376]
[19.93339539 79.00179291]
[5.27770758 82.26414490]
[-9.64172268 83.95017242]
[-24.65584564 84.04079437]
[-39.59453964 82.53497314]
[-54.28853989 79.44976044]
[-68.57135010 74.82013702]
[-82.28113556 68.69853973]
[-95.26255035 61.15434647]
[-107.36850739 52.27302551]
[-118.46184540 42.15522003]
[-128.41685486 30.91556358]
[-137.12074280 18.68141556]
[-144.47489929 5.59139729]
[-150.39598083 -8.20617199]
[-154.81689453 -22.55495644]
[-157.68756104 -37.29236984]
[-158.97543335 -52.25143051]
[-158.66595459 -67.26263428]
[-156.76260376 -82.15589905]
[-153.28694153 -96.76247406]
[-148.27838135 -110.91684723]
[-141.79364014 -124.45864105]
[-133.90620422 -137.23442078]
[-124.70545959 -149.09942627]
[-114.29564667 -159.91921997]
[-102.79471588 -169.57119751]
[-90.33298492 -177.94599915]
[-77.05165100 -184.94873047]
[-63.10120773 -190.50006104]
[-48.63971710 -194.53706360]
[-33.83104324 -197.01400757]
[-18.84297752 -197.90283203]
[-3.84534788 -197.19345093]
[10.99191093 -194.89392090]
[25.50068283 -191.03028870]
[39.51657104 -185.64633179]
[52.88076401 -178.80305481]
[65.44183350 -170.57800293]
[77.05745697 -161.06436157]
[87.59602356 -150.36993408]
[96.93811798 -138.61589050]
[104.97788239 -125.93542480]
[111.62422943 -112.47220612]
[116.80184937 -98.37879181]
[120.45207214 -83.81486511]
[122.53353882 -68.94544983]
[123.02265930 -53.93902206]
[121.91390228 -38.96561813]
[119.21983337 -24.19490433]
[114.97096252 -9.79423714]
[109.21543884 4.07321024]
[102.01848602 17.25030899]
[93.46163940 29.58775139]
[83.64186096 40.94574738]
[72.67041779 51.19559860]
[81.68795013 63.18243408]
[90.70547485 75.16926575]
[109.18316650 75.12786865]
[123.20056152 87.16693878]
[137.84405518 83.91610718]
[152.48756409 80.66528320]
[167.13105774 77.41445923]
[181.77456665 74.16363525]
[185.71186829 70.54186249]
[190.20111084 68.99294281]
[194.34321594 69.37324524]
[197.43209839 71.19705200]
[212.24984741 68.86595154]
[221.55462646 56.37359238]
[236.61514282 54.22060776]
[248.46736145 63.16827393]
[263.28512573 60.83716965]
[278.10287476 58.50606537]
[290.51110840 47.78376770]
[305.91006470 53.42330933]
[308.45858765 69.62321472]
[295.53500366 79.71841431]
[280.43399048 73.32382202]
[265.61621094 75.65493011]
[250.79846191 77.98603058]
[242.26602173 90.14057922]
[227.27191162 92.71572876]
[214.58096313 83.68370819]
[199.76319885 86.01480865]
[185.02539062 88.80713654]
[170.38189697 92.05796051]
[155.73838806 95.30878448]
[141.09489441 98.55961609]
[126.45138550 101.81044006]
[124.59572601 109.89968872]
[120.33003235 117.01891327]
[114.07228088 122.47052765]
[106.43564606 125.72034454]
[105.81166840 140.70735168]
[105.49961090 155.70411682]
[105.49961090 170.70411682]
[105.49961090 185.70411682]
[105.49961090 200.70411682]
[105.49961090 215.70411682]
[105.49961090 230.70411682]
[105.49961090 245.70411682]
[105.49961090 260.70410156]
[105.49961090 275.70410156]
[105.49961090 290.70410156]
[105.49961090 305.70410156]
[105.49961090 320.70410156]
[120.03949738 324.76541138]
[132.94387817 332.59994507]
[143.25515747 343.62628174]
[150.20819092 357.02618408]
[153.28698730 371.80535889]
[152.26309204 386.86703491]
[147.21249390 401.09356689]
[138.50996399 413.42922974]
[126.80130005 422.95864868]
[112.95536804 428.97467041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 128]
[26 127]
[29 91]
[30 90]
[31 89]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[101 118]
[102 117]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
