%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUAUUUAGGGGGGGGGGUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACxxxxxxxxxxGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCAAAUCAACAACCCCCCCCCCCAACCUAUUUA\
) } def
/len { sequence length } bind def

/coor [
[84.02814484 395.61730957]
[70.80794525 388.34484863]
[59.92113876 377.89782715]
[52.11000824 364.98858643]
[47.90712738 350.49725342]
[47.59905624 335.41192627]
[51.20679855 320.76110840]
[58.48437119 307.54370117]
[68.93557739 296.66094971]
[81.84783936 288.85479736]
[96.34077454 284.65750122]
[96.02871704 269.66076660]
[95.71666718 254.66400146]
[95.40460968 239.66725159]
[95.09255219 224.67050171]
[94.78049469 209.67375183]
[94.46843719 194.67698669]
[94.15637970 179.68023682]
[93.84432983 164.68348694]
[93.53227234 149.68673706]
[93.22021484 134.68997192]
[92.90815735 119.69322205]
[78.86990356 109.97769165]
[75.69787598 91.32651520]
[60.73762512 92.41782379]
[45.77737808 93.50913239]
[35.46637726 105.18479156]
[20.27901268 106.07842255]
[9.21159744 96.17651367]
[-5.74865103 97.26782227]
[-20.70890045 98.35913086]
[-35.66914749 99.45043945]
[-44.67531967 112.23413849]
[-59.80480194 116.18796539]
[-73.91391754 109.44505310]
[-80.34077454 95.18918610]
[-76.05079651 80.15156555]
[-63.06959915 71.43247986]
[-47.52648926 73.14882660]
[-36.76045990 84.49019623]
[-21.80021095 83.39888000]
[-6.83996153 82.30757141]
[8.12028694 81.21626282]
[17.63354874 69.81304169]
[32.78982162 68.49317932]
[44.68606567 78.54888153]
[59.64631653 77.45757294]
[74.60656738 76.36626434]
[86.95813751 67.85517120]
[93.30526733 54.26422119]
[99.65239716 40.67327118]
[105.99952698 27.08232117]
[93.03275299 19.52070618]
[80.80731964 10.81127834]
[69.42454529 1.02620614]
[58.97874451 -9.75342560]
[49.55647659 -21.43829155]
[41.23581696 -33.93156815]
[34.08572006 -47.12972260]
[28.16543388 -60.92339706]
[23.52401352 -75.19828796]
[20.19992256 -89.83610535]
[18.22070503 -104.71555328]
[17.60276222 -119.71332550]
[18.35121346 -134.70516968]
[20.45985794 -149.56681824]
[23.91122437 -164.17515564]
[28.67670822 -178.40910339]
[34.71682358 -192.15072632]
[41.98152161 -205.28614807]
[50.41059875 -217.70654297]
[59.93420792 -229.30895996]
[70.47343445 -239.99726868]
[81.94094086 -249.68289185]
[94.24171448 -258.28558350]
[107.27380371 -265.73406982]
[120.92923737 -271.96658325]
[135.09484863 -276.93151855]
[149.65327454 -280.58773804]
[164.48384094 -282.90490723]
[179.46368408 -283.86386108]
[194.46865845 -283.45660400]
[209.37443542 -281.68658447]
[224.05751038 -278.56842041]
[238.39617920 -274.12796021]
[252.27163696 -268.40197754]
[265.56890869 -261.43795776]
[278.17782593 -253.29360962]
[289.99389648 -244.03637695]
[300.91915894 -233.74301147]
[310.86315918 -222.49879456]
[319.74343872 -210.39689636]
[327.48641968 -197.53761292]
[334.02795410 -184.02748108]
[339.31384277 -169.97848511]
[343.30026245 -155.50700378]
[345.95422363 -140.73297119]
[347.25366211 -125.77882385]
[347.18786621 -110.76846313]
[345.75735474 -95.82627869]
[342.97399902 -81.07608795]
[338.86083984 -66.64011383]
[333.45199585 -52.63798523]
[326.79226685 -39.18572998]
[318.93682861 -26.39482117]
[309.95077515 -14.37124634]
[299.90859985 -3.21464133]
[288.89349365 6.98254585]
[276.99673462 16.13581657]
[264.31689453 24.16932106]
[250.95907593 31.01649094]
[237.03395081 36.62058640]
[222.65689087 40.93517303]
[207.94706726 43.92449188]
[193.02633667 45.56377411]
[178.01837158 45.83943939]
[163.04750061 44.74919891]
[148.23782349 42.30208969]
[133.71202087 38.51839066]
[119.59047699 33.42945099]
[113.24334717 47.02040100]
[106.89621735 60.61135101]
[100.54908752 74.20230103]
[113.35442352 79.06814575]
[121.41405487 89.48898315]
[122.78692627 102.06351471]
[117.61069489 113.02779388]
[107.90491486 119.38117218]
[108.21696472 134.37792969]
[108.52902222 149.37467957]
[108.84107971 164.37142944]
[109.15313721 179.36817932]
[109.46519470 194.36494446]
[109.77725220 209.36169434]
[110.08930206 224.35844421]
[110.40135956 239.35519409]
[110.71341705 254.35195923]
[111.02547455 269.34869385]
[111.33753204 284.34545898]
[125.99252319 287.93621826]
[139.21833801 295.19848633]
[150.11320496 305.63708496]
[157.93429565 318.54028320]
[162.14836121 333.02835083]
[162.46809387 348.11346436]
[158.87165833 362.76705933]
[151.60429382 375.99005127]
[141.16149902 386.88088989]
[128.25526428 394.69702148]
[113.76557922 398.90548706]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 48]
[25 47]
[26 46]
[29 43]
[30 42]
[31 41]
[32 40]
[49 123]
[50 122]
[51 121]
[52 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
