%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACCCCCCGGGGGGGGGGUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUxxxxxxxxxxCCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUCCCCCCCCCCUGAAGCCCCC\
) } def
/len { sequence length } bind def

/coor [
[90.64990997 374.30108643]
[76.80397034 368.28506470]
[65.09530640 358.75564575]
[56.39278412 346.41998291]
[51.34218216 332.19345093]
[50.31829071 317.13177490]
[53.39709091 302.35260010]
[60.35011292 288.95266724]
[70.66139221 277.92636108]
[83.56578064 270.09182739]
[98.10566711 266.03051758]
[98.10566711 251.03051758]
[98.10566711 236.03051758]
[98.10566711 221.03051758]
[98.10566711 206.03051758]
[98.10566711 191.03051758]
[98.10566711 176.03051758]
[98.10566711 161.03051758]
[98.10566711 146.03051758]
[98.10566711 131.03051758]
[86.53551483 127.55371857]
[77.31406403 120.00549316]
[71.77481842 109.64035797]
[70.65563202 98.10652924]
[56.01213455 101.35735321]
[41.36863327 104.60818481]
[37.93405151 119.47985077]
[28.38033295 131.38317871]
[14.60436916 137.95474243]
[-0.65860993 137.88978577]
[-14.37812901 131.20117188]
[-23.83016777 119.21693420]
[-27.13801765 104.31657410]
[-23.64490128 89.45854950]
[-14.04437923 77.59293365]
[-0.24264386 71.07566071]
[15.01996136 71.20073700]
[28.71303368 77.94332123]
[38.11780548 89.96468353]
[52.76130676 86.71385193]
[67.40480804 83.46302795]
[76.79196930 71.76340485]
[76.79196930 56.76340485]
[76.79196930 41.76340485]
[76.79196930 26.76340675]
[76.79196930 11.76340580]
[69.05467224 -2.03676653]
[76.79196930 -14.76403809]
[76.79196930 -29.76403809]
[76.79196930 -44.76403809]
[74.39953613 -48.56374359]
[73.47586823 -52.52832031]
[73.88655090 -56.16331863]
[75.34677887 -59.07221985]
[77.46786499 -60.99792862]
[78.71473694 -75.94601440]
[79.96160889 -90.89410400]
[71.11457062 -78.78089142]
[59.75536728 -68.98454285]
[46.47360611 -62.01353836]
[31.95869637 -58.22971344]
[16.96403694 -57.82947159]
[2.26793885 -60.83358765]
[-11.36678505 -67.08613586]
[-23.23241425 -76.26255798]
[-32.71305466 -87.88656616]
[-39.31660843 -101.35478973]
[-42.70030975 -115.96816254]
[-42.68852615 -130.96815491]
[-39.28187180 -145.57618713]
[-32.65716553 -159.03402710]
[-23.15827560 -170.64311218]
[-11.27824497 -179.80088806]
[2.36628509 -186.03201294]
[17.06708336 -189.01303101]
[32.06109619 -188.58923340]
[46.57004547 -184.78260803]
[59.84083557 -177.79075623]
[71.18463135 -167.97656250]
[80.01263428 -155.84947205]
[85.86661530 -142.03894043]
[88.44271088 -127.26180267]
[87.60688019 -112.28311920]
[96.11797333 -124.63469696]
[97.57708740 -140.38847351]
[111.16979980 -146.47840881]
[119.68089294 -158.82997131]
[118.20222473 -174.80474854]
[129.86923218 -185.81657410]
[145.73199463 -183.41813660]
[153.62194824 -169.44931030]
[147.48660278 -154.62577820]
[132.03247070 -150.31889343]
[123.52137756 -137.96731567]
[122.67103577 -123.09700012]
[108.46954346 -116.12360382]
[99.95845032 -103.77203369]
[94.90969849 -89.64723206]
[93.66282654 -74.69914246]
[92.41594696 -59.75105286]
[91.79196930 -44.76403809]
[91.79196930 -29.76403809]
[91.79196930 -14.76403809]
[99.52927399 -2.03676653]
[91.79196930 11.76340580]
[91.79196930 26.76340675]
[91.79196930 41.76340485]
[91.79196930 56.76340485]
[91.79196930 71.76340485]
[112.27855682 72.66468048]
[127.57323456 86.89906311]
[130.03131104 108.03753662]
[144.25808716 112.79135132]
[158.48487854 117.54516602]
[172.71165466 122.29898071]
[187.03425598 126.75579834]
[201.44647217 130.91368103]
[215.85868835 135.07157898]
[232.75314331 133.65264893]
[238.79347229 149.49407959]
[225.24325562 159.68368530]
[211.70079041 149.48379517]
[197.28857422 145.32589722]
[182.87635803 141.16801453]
[178.28581238 142.68537903]
[172.69287109 141.28883362]
[167.95783997 136.52575684]
[153.73106384 131.77194214]
[139.50427246 127.01813507]
[125.27750397 122.26432037]
[113.10566711 131.03051758]
[113.10566711 146.03051758]
[113.10566711 161.03051758]
[113.10566711 176.03051758]
[113.10566711 191.03051758]
[113.10566711 206.03051758]
[113.10566711 221.03051758]
[113.10566711 236.03051758]
[113.10566711 251.03051758]
[113.10566711 266.03051758]
[127.64555359 270.09182739]
[140.54992676 277.92636108]
[150.86122131 288.95266724]
[157.81423950 302.35260010]
[160.89303589 317.13177490]
[159.86914062 332.19345093]
[154.81854248 346.41998291]
[146.11601257 358.75564575]
[134.40736389 368.28506470]
[120.56141663 374.30108643]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 41]
[25 40]
[26 39]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[48 103]
[49 102]
[50 101]
[55 100]
[56 99]
[57 98]
[83 97]
[84 96]
[86 94]
[87 93]
[112 130]
[113 129]
[114 128]
[115 127]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
