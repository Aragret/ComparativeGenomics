%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCAUAGAAGGGGGGGGGGGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGxxxxxxxxxxAGACUACUUCUCCAUAAUAUUCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCCCCCCCCCCCAUCAUAGAA\
) } def
/len { sequence length } bind def

/coor [
[85.68092346 430.14239502]
[71.12106323 426.23419189]
[57.91991806 418.95455933]
[46.84498596 408.72668457]
[38.54014587 396.14523315]
[33.48823547 381.94165039]
[31.98295975 366.94174194]
[34.11183548 352.01754761]
[39.75109482 338.03677368]
[48.57287598 325.81222534]
[60.06429672 316.05462646]
[73.55725098 309.33126831]
[88.26728821 306.03302002]
[88.57526398 291.03619385]
[88.88324738 276.03936768]
[89.19122314 261.04251099]
[89.49919891 246.04568481]
[89.80717468 231.04884338]
[90.11515808 216.05200195]
[90.42313385 201.05516052]
[90.73110962 186.05833435]
[91.03908539 171.06149292]
[91.34706879 156.06465149]
[83.87271118 143.18119812]
[91.89172363 129.54280090]
[83.33323669 125.70487213]
[76.33710480 119.45735168]
[71.55914307 111.38589478]
[56.69253922 113.38195801]
[41.82594299 115.37801361]
[26.95934296 117.37406921]
[18.74456024 130.68013000]
[3.88253713 135.54370117]
[-10.60933113 129.66835022]
[-17.88842773 115.82823181]
[-14.51778603 100.55823517]
[-2.08892059 91.06838226]
[13.52963924 91.83949280]
[24.96328735 102.50746918]
[39.82988358 100.51141357]
[54.69648361 98.51535797]
[69.56307983 96.51930237]
[80.06811523 76.73540497]
[101.22926331 69.38938141]
[105.48210907 55.00489807]
[109.73495483 40.62041473]
[95.74261475 35.19142914]
[82.24638367 28.62549973]
[69.33847046 20.96747780]
[57.10704803 12.26967812]
[45.63566208 2.59151459]
[35.00267792 -8.00089931]
[25.28073502 -19.43520546]
[16.53624344 -31.63329506]
[8.82893562 -44.51184082]
[2.21146321 -57.98286819]
[-3.27097011 -71.95435333]
[-7.58091259 -86.33086395]
[-10.68892288 -101.01418304]
[-12.57376957 -115.90400696]
[-13.22257710 -130.89862061]
[-12.63091373 -145.89559937]
[-10.80282116 -160.79251099]
[-7.75078630 -175.48756409]
[-3.49565911 -189.88038635]
[1.93349373 -203.87266541]
[8.49958515 -217.36880493]
[16.15776062 -230.27662659]
[24.85570717 -242.50794983]
[34.53400803 -253.97921753]
[45.12654877 -264.61209106]
[56.56097031 -274.33389282]
[68.75916290 -283.07824707]
[81.63780212 -290.78540039]
[95.10890961 -297.40270996]
[109.08045959 -302.88497925]
[123.45701599 -307.19473267]
[138.14036560 -310.30258179]
[153.03021240 -312.18725586]
[168.02484131 -312.83587646]
[183.02182007 -312.24401855]
[197.91870117 -310.41577148]
[212.61372375 -307.36355591]
[227.00648499 -303.10824585]
[240.99870300 -297.67892456]
[254.49476624 -291.11267090]
[267.40249634 -283.45434570]
[279.63372803 -274.75625610]
[291.10488892 -265.07781982]
[301.73760986 -254.48515320]
[311.45928955 -243.05061340]
[320.20349121 -230.85232544]
[327.91049194 -217.97358704]
[334.52761841 -204.50239563]
[340.00973511 -190.53079224]
[344.31933594 -176.15417480]
[347.42700195 -161.47077942]
[349.31149292 -146.58091736]
[349.95993042 -131.58627319]
[349.36791992 -116.58930969]
[347.53945923 -101.69245911]
[344.48709106 -86.99747467]
[340.23159790 -72.60475159]
[334.80212402 -58.61260223]
[328.23571777 -45.11661148]
[320.57723999 -32.20897293]
[311.87899780 -19.97785759]
[302.20040894 -8.50681686]
[291.60763550 2.12578607]
[280.17297363 11.84732056]
[267.97457886 20.59137726]
[255.09574890 28.29822350]
[241.62448120 34.91521454]
[227.65280151 40.39714813]
[213.27613831 44.70657730]
[198.59271240 47.81406403]
[183.70281982 49.69837570]
[168.70817566 50.34664917]
[153.71121216 49.75444794]
[138.81437683 47.92582321]
[124.11943817 44.87326431]
[119.86659241 59.25774384]
[115.61373901 73.64222717]
[124.58461761 81.72111511]
[129.73770142 92.63857269]
[130.27273560 104.69919586]
[126.10665894 116.03007507]
[117.88642120 124.87161255]
[106.88855743 129.85078430]
[114.34088898 143.80690002]
[106.34390259 156.37263489]
[106.03592682 171.36946106]
[105.72795105 186.36630249]
[105.41996765 201.36314392]
[105.11199188 216.35998535]
[104.80401611 231.35682678]
[104.49604034 246.35365295]
[104.18805695 261.35049438]
[103.88008118 276.34732056]
[103.57210541 291.34417725]
[103.26412964 306.34100342]
[117.82635498 310.24038696]
[131.03190613 317.51202393]
[142.11303711 327.73315430]
[150.42550659 340.30960083]
[155.48602295 354.51010132]
[157.00039673 369.50909424]
[154.88056946 384.43457031]
[149.24978638 398.41876221]
[140.43540955 410.64868164]
[128.94992065 420.41323853]
[115.46103668 427.14477539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[25 129]
[28 42]
[29 41]
[30 40]
[31 39]
[44 123]
[45 122]
[46 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
