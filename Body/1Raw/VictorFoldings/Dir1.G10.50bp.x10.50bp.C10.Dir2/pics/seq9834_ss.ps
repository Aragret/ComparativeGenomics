%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCAACCUUGGGGGGGGGGUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACUCCxxxxxxxxxxUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCAUCACCCCCCCCCCUCCACAACCUU\
) } def
/len { sequence length } bind def

/coor [
[30.94264412 267.05276489]
[19.61250687 261.90551758]
[8.66336632 255.99090576]
[-1.85288191 249.33697510]
[-11.88639736 241.97526550]
[-21.38962555 233.94065857]
[-30.31752586 225.27124023]
[-38.62778473 216.00810242]
[-46.28101349 206.19512939]
[-53.24094391 195.87886047]
[-59.47458267 185.10815430]
[-64.95239258 173.93409729]
[-78.88311005 179.49603271]
[-92.81382751 185.05796814]
[-106.74454498 190.61990356]
[-120.67525482 196.18183899]
[-134.23715210 202.59082031]
[-147.37878418 209.82252502]
[-160.52041626 217.05422974]
[-173.66204834 224.28591919]
[-186.80368042 231.51762390]
[-199.94531250 238.74932861]
[-202.79866028 254.12438965]
[-214.90016174 264.02832031]
[-230.53584290 263.78479004]
[-242.32302856 253.50877380]
[-244.69616699 238.05230713]
[-236.53471375 224.71345520]
[-221.69229126 219.79042053]
[-207.17701721 225.60769653]
[-194.03538513 218.37599182]
[-180.89375305 211.14428711]
[-167.75212097 203.91259766]
[-154.61048889 196.68089294]
[-141.46885681 189.44918823]
[-155.38822937 183.85891724]
[-161.45199585 170.13919067]
[-156.21598816 156.08273315]
[-142.65422058 149.67347717]
[-128.46966553 154.55186462]
[-121.71906281 167.94699097]
[-126.23719788 182.25112915]
[-112.30648041 176.68919373]
[-98.37576294 171.12725830]
[-84.44504547 165.56530762]
[-70.51432800 160.00337219]
[-73.78975677 149.72586060]
[-76.44633484 139.27128601]
[-78.47459412 128.67684937]
[-79.86730957 117.98031616]
[-80.61953735 107.21974945]
[-80.72858429 96.43347168]
[-80.19406891 85.65988922]
[-79.01789856 74.93737793]
[-77.20424652 64.30410767]
[-74.75958252 53.79795456]
[-71.69261932 43.45632172]
[-68.01425934 33.31603622]
[-63.73761368 23.41320992]
[-58.87790680 13.78310490]
[-53.45244598 4.46001244]
[-47.48054886 -4.52286768]
[-40.98348236 -13.13354778]
[-33.98438263 -21.34136581]
[-26.50817299 -29.11709595]
[-18.58147430 -36.43304443]
[-10.23251343 -43.26316833]
[-1.49102187 -49.58313370]
[7.61187315 -55.37044907]
[17.04375648 -60.60449600]
[26.77104378 -65.26663971]
[36.75909424 -69.34027863]
[46.97233963 -72.81090546]
[57.37441635 -75.66616821]
[67.92827606 -77.89588928]
[78.59634399 -79.49213409]
[89.34062958 -80.44921875]
[100.12287903 -80.76373291]
[110.90467834 -80.43455505]
[121.64765930 -79.46286774]
[132.31353760 -77.85211945]
[142.86436462 -75.60805511]
[153.26254272 -72.73865509]
[163.47106934 -69.25414276]
[173.45356750 -65.16693115]
[183.17451477 -60.49156570]
[192.59927368 -55.24470139]
[201.69429016 -49.44501877]
[210.42718506 -43.11317062]
[218.76684570 -36.27170563]
[226.68359375 -28.94498634]
[234.14923096 -21.15909958]
[241.13716125 -12.94177341]
[247.62251282 -4.32226849]
[253.58218384 4.66872215]
[258.99496460 13.99918175]
[263.84158325 23.63588524]
[268.10476685 33.54451752]
[271.76931763 43.68979263]
[274.82223511 54.03558731]
[289.47497559 50.82659149]
[304.12768555 47.61759567]
[318.74670410 44.25833511]
[333.33044434 40.74916840]
[347.91418457 37.24000168]
[362.49795532 33.73083496]
[372.06607056 20.85330391]
[388.10400391 20.44897461]
[398.30886841 32.82801056]
[394.85232544 48.49427795]
[380.38595581 55.42995453]
[366.00711060 48.31458282]
[351.42337036 51.82374954]
[336.83959961 55.33291626]
[322.25585938 58.84208298]
[316.45260620 63.49335861]
[307.33666992 62.27031708]
[292.68395996 65.47931671]
[278.03121948 68.68830872]
[280.52432251 109.30134583]
[273.87042236 149.44308472]
[258.40670776 187.07960510]
[271.24035645 194.84474182]
[284.07400513 202.60987854]
[296.90765381 210.37501526]
[312.76690674 207.95346069]
[324.44995117 218.94827271]
[322.99456787 234.92518616]
[309.51721191 243.62805176]
[294.35653687 238.38079834]
[289.14251709 223.20866394]
[276.30886841 215.44352722]
[263.47521973 207.67839050]
[250.64157104 199.91325378]
[243.41021729 210.04113770]
[235.49917603 219.64746094]
[226.94593811 228.68672180]
[217.79103088 237.11607361]
[208.07785034 244.89555359]
[197.85243225 251.98829651]
[187.16323853 258.36068726]
[176.06094360 263.98254395]
[164.59814453 268.82717896]
[152.82919312 272.87167358]
[140.80986023 276.09683228]
[128.59709167 278.48739624]
[116.24880219 280.03198242]
[103.82349396 280.72332764]
[91.38006592 280.55813599]
[78.97749329 279.53717041]
[66.67455292 277.66528320]
[54.52956390 274.95135498]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 46]
[13 45]
[14 44]
[15 43]
[16 42]
[17 35]
[18 34]
[19 33]
[20 32]
[21 31]
[22 30]
[100 119]
[101 118]
[102 117]
[103 115]
[104 114]
[105 113]
[106 112]
[122 134]
[123 133]
[124 132]
[125 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
