%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUGCAAAAGGGGGGGGGGCCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGxxxxxxxxxxGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUCCCCCCCCCCGACUACAAAA\
) } def
/len { sequence length } bind def

/coor [
[79.61796570 416.14199829]
[65.77202606 410.12597656]
[54.06336212 400.59655762]
[45.36083984 388.26089478]
[40.31023788 374.03436279]
[39.28634644 358.97268677]
[42.36514282 344.19351196]
[49.31816483 330.79360962]
[59.62944794 319.76727295]
[72.53382874 311.93276978]
[87.07371521 307.87142944]
[87.07371521 292.87142944]
[87.07371521 277.87142944]
[87.07371521 262.87142944]
[87.07371521 247.87144470]
[87.07371521 232.87144470]
[87.07371521 217.87144470]
[87.07371521 202.87144470]
[87.07371521 187.87144470]
[87.07371521 172.87144470]
[85.12005615 170.77607727]
[83.90667725 167.75587463]
[83.79957581 164.09931946]
[85.04960632 160.22523499]
[87.74961090 156.63755798]
[88.99648285 141.68946838]
[90.24335480 126.74137878]
[91.49023438 111.79328918]
[81.16302490 100.91446686]
[66.17033386 101.38250732]
[51.17763519 101.85055542]
[44.54857635 115.64598846]
[32.26085663 124.77126312]
[17.13810921 127.12944794]
[2.65542364 122.17864227]
[-7.85918093 111.05651855]
[-11.98952579 96.31884766]
[-8.78648853 81.35224915]
[1.01389611 69.59593201]
[15.15957260 63.75141144]
[30.39996719 65.16171265]
[43.23294830 73.50276947]
[50.70959091 86.85785675]
[65.70228577 86.38981628]
[80.69498444 85.92176819]
[90.17928314 87.06535339]
[96.99009705 91.95697784]
[103.61859131 78.50101471]
[98.76520538 63.69958496]
[105.67913055 50.14774704]
[119.81993866 45.61199951]
[126.44844055 32.15603256]
[133.07693481 18.70006752]
[139.70544434 5.24410200]
[146.05256653 -8.34684849]
[152.11558533 -22.06690216]
[158.17858887 -35.78695679]
[145.18119812 -43.30461121]
[133.07283020 -52.18348694]
[121.99542236 -62.31948090]
[112.07886505 -73.59375000]
[103.43943024 -85.87411499]
[96.17840576 -99.01659393]
[90.38092041 -112.86709595]
[86.11495209 -127.26323700]
[83.43051147 -142.03620911]
[82.35907745 -157.01284790]
[82.91320801 -172.01751709]
[85.08641052 -186.87431335]
[88.85320282 -201.40904236]
[94.16941833 -215.45130920]
[100.97273254 -228.83645630]
[109.18338013 -241.40754700]
[118.70509338 -253.01721191]
[129.42622375 -263.52932739]
[141.22109985 -272.82061768]
[153.95140076 -280.78219604]
[167.46789551 -287.32067871]
[181.61209106 -292.35940552]
[196.21817017 -295.83932495]
[211.11486816 -297.71963501]
[226.12754822 -297.97824097]
[241.08016968 -296.61218262]
[255.79743958 -293.63742065]
[270.10681152 -289.08886719]
[283.84048462 -283.01983643]
[296.83746338 -275.50146484]
[308.94537354 -266.62194824]
[320.02221680 -256.48535156]
[329.93817139 -245.21055603]
[338.57696533 -232.92971802]
[345.83728027 -219.78684998]
[351.63400269 -205.93603516]
[355.89920044 -191.53967285]
[358.58285522 -176.76654053]
[359.65347290 -161.78987122]
[359.09854126 -146.78521729]
[356.92453003 -131.92854309]
[353.15695190 -117.39401245]
[347.83999634 -103.35203552]
[341.03594971 -89.96725464]
[332.82464600 -77.39659882]
[323.30230713 -65.78744507]
[312.58059692 -55.27591324]
[300.78521729 -45.98524475]
[288.05450439 -38.02436066]
[274.53765869 -31.48660851]
[260.39318848 -26.44863129]
[245.78692627 -22.96950150]
[230.89012146 -21.09000969]
[215.87742615 -20.83218956]
[200.92488098 -22.19906616]
[186.20776367 -25.17461205]
[171.89865112 -29.72394371]
[165.83563232 -16.00388908]
[159.77261353 -2.28383565]
[160.65722656 2.46937227]
[158.51937866 7.82296133]
[153.16140747 11.87260056]
[146.53289795 25.32856560]
[139.90440369 38.78453064]
[133.27590942 52.24049759]
[138.29795837 66.21599579]
[131.76739502 79.95668793]
[117.07455444 85.12951660]
[110.44606018 98.58547974]
[106.43831635 113.04016876]
[105.19144440 127.98825073]
[103.94457245 142.93634033]
[102.69769287 157.88442993]
[102.07371521 172.87144470]
[102.07371521 187.87144470]
[102.07371521 202.87144470]
[102.07371521 217.87144470]
[102.07371521 232.87144470]
[102.07371521 247.87144470]
[102.07371521 262.87142944]
[102.07371521 277.87142944]
[102.07371521 292.87142944]
[102.07371521 307.87142944]
[116.61360168 311.93276978]
[129.51799011 319.76727295]
[139.82926941 330.79360962]
[146.78228760 344.19351196]
[149.86108398 358.97268677]
[148.83720398 374.03436279]
[143.78659058 388.26089478]
[135.08407593 400.59655762]
[123.37541199 410.12597656]
[109.52947235 416.14199829]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 45]
[30 44]
[31 43]
[47 126]
[48 125]
[51 122]
[52 121]
[53 120]
[54 119]
[55 116]
[56 115]
[57 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
