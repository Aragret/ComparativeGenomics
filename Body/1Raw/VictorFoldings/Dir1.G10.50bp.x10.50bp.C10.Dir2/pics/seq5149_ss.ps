%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUCUCCUCGGGGGGGGGGACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxCUGUUCGCAGCAGUCUGCGCCCUUACACAAAAUGACAUCAAAAAAAUCGUCCCCCCCCCCAGCCUUCUCCAC\
) } def
/len { sequence length } bind def

/coor [
[55.72012329 480.72000122]
[41.55952072 475.56500244]
[28.96977425 467.28280640]
[18.62983704 456.32000732]
[11.09732628 443.26788330]
[6.77846050 428.83029175]
[5.90615177 413.78582764]
[8.52744198 398.94583130]
[14.50096893 385.11059570]
[23.50458717 373.02624512]
[35.05274200 363.34448242]
[48.52265930 356.58740234]
[63.18791962 353.11941528]
[63.18791962 338.11941528]
[63.18791962 323.11941528]
[63.18791962 308.11941528]
[63.18791962 293.11941528]
[63.18791962 278.11941528]
[63.18791962 263.11941528]
[63.18791962 248.11943054]
[63.18791962 233.11943054]
[63.18791962 218.11943054]
[63.18791962 203.11943054]
[63.18791962 188.11943054]
[52.56413269 190.83840942]
[42.38593674 188.35046387]
[34.94479370 181.68534851]
[31.69400406 172.75692749]
[16.97120857 169.88650513]
[2.24841547 167.01608276]
[-12.47437859 164.14566040]
[-27.19717216 161.27523804]
[-36.27949905 162.70788574]
[-42.18791962 158.19454956]
[-56.84951401 155.02633667]
[-64.66194153 167.99725342]
[-76.26432037 177.72677612]
[-90.39811707 183.15950012]
[-105.53019714 183.70614624]
[-120.01914978 179.30740356]
[-132.29331970 170.44041443]
[-141.02130127 158.06701660]
[-145.25634766 143.52935791]
[-144.53906250 128.40440369]
[-138.94726562 114.33278656]
[-129.08749390 102.84088898]
[-116.02928925 95.17525482]
[-101.18908691 92.16741180]
[-86.17665100 94.14361572]
[-72.62040710 100.88951111]
[-61.99084854 111.67335510]
[-55.44098282 125.32538605]
[-53.68129349 140.36474609]
[-39.01969910 143.53295898]
[-24.32674789 146.55244446]
[-9.60395432 149.42286682]
[5.11883974 152.29328918]
[19.84163475 155.16371155]
[34.56442642 158.03413391]
[42.68419266 150.15315247]
[54.38206100 147.97746277]
[65.86721039 152.86448669]
[73.05607605 163.77384949]
[83.50022125 153.00724792]
[93.94436646 142.24064636]
[104.38851929 131.47404480]
[70.73745728 114.33737946]
[76.69064331 76.08728027]
[76.69064331 61.08728027]
[76.69064331 46.08728027]
[62.63345718 40.30248260]
[51.86358643 29.57502556]
[46.02335358 15.54077721]
[46.00336075 0.33985507]
[51.80664825 -13.70971012]
[62.54825974 -24.46546173]
[76.59017944 -30.28722763]
[91.79111481 -30.28722763]
[105.83303070 -24.46546173]
[116.57464600 -13.70971012]
[122.37793732 0.33985507]
[122.35794067 15.54077721]
[116.51770782 29.57502556]
[105.74783325 40.30248260]
[91.69064331 46.08728027]
[91.69064331 61.08728027]
[91.69064331 76.08728027]
[105.80899811 81.15404510]
[115.34691620 69.57698822]
[124.88482666 57.99993896]
[134.42274475 46.42288208]
[143.96066284 34.84582901]
[146.12757874 18.59047699]
[161.38967896 12.59041500]
[174.04660034 23.01799393]
[171.07798767 39.14621353]
[155.53771973 44.38374329]
[145.99980164 55.96079636]
[136.46188354 67.53784943]
[126.92396545 79.11490631]
[117.38605499 90.69196320]
[121.15797424 97.17444611]
[134.12294006 89.63060760]
[147.08804321 82.08698273]
[154.63145447 95.05220795]
[141.66677856 102.59558105]
[128.70181274 110.13941956]
[132.47373962 116.62190247]
[147.25167847 114.05045319]
[157.62199402 101.80969238]
[173.65306091 102.42955017]
[183.04722595 115.43451691]
[178.59809875 130.84829712]
[163.71864319 136.84675598]
[149.82312012 128.82839966]
[135.04518127 131.39984131]
[149.88540649 133.58340454]
[161.84564209 142.63618469]
[167.97674561 156.32594299]
[166.76690674 171.27706909]
[158.51446533 183.80293274]
[145.25427246 190.81489563]
[130.25605774 190.58395386]
[117.21804810 183.16705322]
[109.35516357 170.39305115]
[108.60622406 155.41175842]
[115.15512085 141.91819763]
[104.71097565 152.68479919]
[94.26682281 163.45140076]
[83.82267761 174.21800232]
[78.18791962 188.11943054]
[78.18791962 203.11943054]
[78.18791962 218.11943054]
[78.18791962 233.11943054]
[78.18791962 248.11943054]
[78.18791962 263.11941528]
[78.18791962 278.11941528]
[78.18791962 293.11941528]
[78.18791962 308.11941528]
[78.18791962 323.11941528]
[78.18791962 338.11941528]
[78.18791962 353.11941528]
[92.85317993 356.58740234]
[106.32309723 363.34448242]
[117.87125397 373.02624512]
[126.87487030 385.11059570]
[132.84840393 398.94583130]
[135.46969604 413.78582764]
[134.59738159 428.83029175]
[130.27851868 443.26788330]
[122.74600220 456.32000732]
[112.40606689 467.28280640]
[99.81632233 475.56500244]
[85.65571594 480.72000122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[28 59]
[29 58]
[30 57]
[31 56]
[32 55]
[34 54]
[35 53]
[63 130]
[64 129]
[65 128]
[66 127]
[68 87]
[69 86]
[70 85]
[88 101]
[89 100]
[90 99]
[91 98]
[92 97]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
