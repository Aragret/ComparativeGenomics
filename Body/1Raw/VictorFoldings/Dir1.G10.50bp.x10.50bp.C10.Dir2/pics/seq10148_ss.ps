%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGCUUUUGGGGGGGGGGAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAAGCCCAxxxxxxxxxxCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUCCCCCCCCCCAAUAGCUUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 381.55712891]
[71.19830322 375.54110718]
[59.48964310 366.01168823]
[50.78712082 353.67602539]
[45.73651886 339.44949341]
[44.71262741 324.38781738]
[47.79142761 309.60864258]
[54.74444962 296.20874023]
[65.05573273 285.18240356]
[77.96011353 277.34790039]
[92.50000000 273.28659058]
[92.50000000 258.28659058]
[92.50000000 243.28657532]
[92.50000000 228.28657532]
[92.50000000 213.28657532]
[92.50000000 198.28657532]
[92.50000000 183.28657532]
[92.50000000 168.28657532]
[92.50000000 153.28657532]
[92.50000000 138.28657532]
[92.50000000 123.28657532]
[77.22242737 112.93885040]
[72.78281403 93.74146271]
[83.20043182 75.55765533]
[68.55693054 78.80847931]
[53.91342926 82.05931091]
[39.26992798 85.31013489]
[24.62642479 88.56095886]
[9.98292446 91.81178284]
[-4.66057730 95.06261444]
[-16.37584686 106.53799438]
[-32.09657669 101.86994934]
[-35.65062714 85.86054993]
[-23.38189697 74.97890472]
[-7.91140270 80.41910553]
[6.73209858 77.16828156]
[21.37559891 73.91745758]
[36.01910019 70.66663361]
[50.66260147 67.41580963]
[65.30610657 64.16497803]
[79.94960785 60.91415405]
[88.07114410 48.30302811]
[84.97282410 33.62650299]
[81.87450409 18.94997597]
[72.46334839 30.63030624]
[57.57123184 32.42611313]
[45.65321732 23.31782341]
[43.47580719 8.47670269]
[52.27523041 -3.67114305]
[67.05558014 -6.22872496]
[79.42610931 2.25732279]
[78.17922974 -12.69076443]
[76.93235779 -27.63885117]
[75.68547821 -42.58693695]
[74.43860626 -57.53502655]
[73.19173431 -72.48310852]
[58.21510696 -73.85123444]
[43.70362854 -77.79942322]
[30.09828949 -84.20768738]
[17.81254005 -92.88129425]
[7.21972847 -103.55666351]
[-1.35824037 -115.90937805]
[-7.66069221 -129.56405640]
[-11.49610233 -144.10574341]
[-12.74791718 -159.09254456]
[-11.37809563 -174.06901550]
[-7.42826509 -188.58004761]
[-1.01845574 -202.18464661]
[7.65654469 -214.46942139]
[18.33311272 -225.06101990]
[30.68680191 -233.63758850]
[44.34219360 -239.93849182]
[58.88431931 -243.77224731]
[73.87125397 -245.02236938]
[88.84757233 -243.65084839]
[103.35815430 -239.69937134]
[116.96203613 -233.28802490]
[129.24581909 -224.61163330]
[139.83621216 -213.93385315]
[148.41137695 -201.57919312]
[154.71073914 -187.92309570]
[158.54284668 -173.38052368]
[159.79125977 -158.39344788]
[158.41804504 -143.41728210]
[154.46492004 -128.90715027]
[148.05203247 -115.30400085]
[139.37423706 -103.02120209]
[128.69526672 -92.43202209]
[116.33963776 -83.85825348]
[102.68281555 -77.56044769]
[88.13981628 -73.72998810]
[89.38669586 -58.78189850]
[90.63356781 -43.83381271]
[91.88043976 -28.88572502]
[93.12731934 -13.93763828]
[94.37419128 1.01044834]
[96.55103302 15.85165405]
[99.64935303 30.52817917]
[102.74767303 45.20470428]
[101.90090179 30.22862434]
[109.61531830 17.36441612]
[123.22501373 11.05759430]
[138.02687073 13.48762512]
[148.90577698 23.81475449]
[152.10226440 38.47021103]
[146.51171875 52.38947678]
[134.06610107 60.76243210]
[119.06591034 60.69551086]
[133.88366699 63.02661514]
[148.70143127 65.35771942]
[156.94694519 52.55415726]
[169.69084167 44.21670914]
[184.72515869 41.78989029]
[199.44509888 45.69416046]
[211.30033875 55.25308228]
[218.23690796 68.81050873]
[219.05299377 84.01754761]
[213.60719299 98.23947144]
[202.84303284 109.01226044]
[188.62548828 114.46945190]
[173.41780090 113.66555786]
[159.85481262 106.73986053]
[150.28639221 94.89228058]
[146.37031555 80.17547607]
[131.55256653 77.84437561]
[116.73480988 75.51326752]
[125.96833801 88.60021973]
[126.78179932 103.88251495]
[119.67834473 116.62837982]
[107.50000000 123.28657532]
[107.50000000 138.28657532]
[107.50000000 153.28657532]
[107.50000000 168.28657532]
[107.50000000 183.28657532]
[107.50000000 198.28657532]
[107.50000000 213.28657532]
[107.50000000 228.28657532]
[107.50000000 243.28657532]
[107.50000000 258.28659058]
[107.50000000 273.28659058]
[122.03988647 277.34790039]
[134.94427490 285.18240356]
[145.25555420 296.20874023]
[152.20857239 309.60864258]
[155.28736877 324.38781738]
[154.26348877 339.44949341]
[149.21287537 353.67602539]
[140.51036072 366.01168823]
[128.80169678 375.54110718]
[114.95575714 381.55712891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 41]
[25 40]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[42 99]
[43 98]
[44 97]
[51 96]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
