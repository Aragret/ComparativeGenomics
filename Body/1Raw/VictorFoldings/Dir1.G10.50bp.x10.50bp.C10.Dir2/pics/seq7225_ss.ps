%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCACAUGAAGGGGGGGGGGACAUCCUAUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAxxxxxxxxxxCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCACCCCCCCCCCCCCACCACAUUAA\
) } def
/len { sequence length } bind def

/coor [
[85.76393127 380.31097412]
[72.84477234 372.55261230]
[62.06348038 362.02359009]
[54.00146103 349.29171753]
[49.09350204 335.04360962]
[47.60427856 320.04763794]
[49.61410141 305.11254883]
[55.01458740 291.04373169]
[63.51449203 278.59991455]
[74.65542603 268.45220947]
[87.83657074 261.14779663]
[102.34709167 257.08068848]
[101.73126221 242.09332275]
[101.11544037 227.10597229]
[100.49961853 212.11862183]
[99.88378906 197.13125610]
[99.26796722 182.14390564]
[98.65213776 167.15655518]
[98.03631592 152.16920471]
[97.42048645 137.18185425]
[96.80466461 122.19449615]
[84.30062866 113.90901947]
[70.25865173 119.18376160]
[56.21667480 124.45850372]
[53.78424835 139.62356567]
[44.08273315 151.53053284]
[29.72178650 156.97653198]
[14.56443024 154.49658203]
[2.68791842 144.75778198]
[-2.71302748 130.37983704]
[-0.18558013 115.23033142]
[9.59038925 103.38440704]
[23.98519516 98.02854919]
[39.12670517 100.60347748]
[50.94193268 110.41652679]
[64.98390961 105.14178467]
[79.02588654 99.86704254]
[88.54922485 88.27799225]
[91.00215149 73.47991943]
[85.62572479 58.60024643]
[95.34014130 47.30957031]
[97.79307556 32.51148987]
[100.24600220 17.71341133]
[102.69892883 2.91533160]
[105.15185547 -11.88274765]
[107.60478210 -26.68082619]
[93.07616425 -30.45250320]
[78.94413757 -35.51134491]
[65.32247162 -41.81661606]
[52.32084656 -49.31755447]
[40.04394913 -57.95376205]
[28.59063148 -67.65570068]
[18.05310249 -78.34526825]
[8.51621246 -89.93638611]
[0.05674404 -102.33572388]
[-7.25718880 -115.44345093]
[-13.36669827 -129.15403748]
[-18.22259331 -143.35708618]
[-21.78577423 -157.93823242]
[-24.02755547 -172.78009033]
[-24.92988396 -187.76315308]
[-24.48549652 -202.76676941]
[-22.69797134 -217.67016602]
[-19.58169937 -232.35331726]
[-15.16177082 -246.69802856]
[-9.47377491 -260.58877563]
[-2.56350875 -273.91372681]
[5.51339006 -286.56561279]
[14.69188881 -298.44253540]
[24.89808655 -309.44888306]
[36.04980850 -319.49603271]
[48.05726624 -328.50311279]
[60.82377625 -336.39755249]
[74.24655151 -343.11584473]
[88.21752167 -348.60385132]
[102.62419128 -352.81741333]
[117.35057068 -355.72259521]
[132.27807617 -357.29602051]
[147.28654480 -357.52499390]
[162.25509644 -356.40768433]
[177.06324768 -353.95306396]
[191.59175110 -350.18096924]
[205.72363281 -345.12167358]
[219.34510803 -338.81600952]
[232.34649658 -331.31466675]
[244.62312317 -322.67807007]
[256.07614136 -312.97579956]
[266.61334229 -302.28588867]
[276.14990234 -290.69448853]
[284.60897827 -278.29489136]
[291.92251587 -265.18695068]
[298.03158569 -251.47616577]
[302.88705444 -237.27297974]
[306.44979858 -222.69171143]
[308.69113159 -207.84979248]
[309.59298706 -192.86671448]
[309.14816284 -177.86309814]
[307.36016846 -162.95976257]
[304.24343872 -148.27670288]
[299.82308960 -133.93212891]
[294.13467407 -120.04155731]
[287.22399902 -106.71681213]
[279.14669800 -94.06518555]
[269.96783447 -82.18853760]
[259.76132202 -71.18249512]
[248.60928345 -61.13568115]
[236.60154724 -52.12898254]
[223.83479309 -44.23491669]
[210.41181946 -37.51704407]
[196.44067383 -32.02945709]
[182.03388977 -27.81633377]
[167.30741882 -24.91160202]
[152.37985229 -23.33864594]
[137.37139893 -23.11013222]
[122.40286255 -24.22789764]
[119.94993591 -9.42981911]
[117.49700928 5.36825943]
[115.04408264 20.16633797]
[112.59114838 34.96441650]
[110.13822174 49.76249695]
[115.69009399 63.58370972]
[105.80023193 75.93284607]
[103.34730530 90.73092651]
[107.46815491 90.65821838]
[111.85237885 92.42714691]
[115.70397186 96.14516449]
[118.20590973 101.59040070]
[118.65052032 108.21676636]
[116.56185150 115.20847321]
[111.79201508 121.57866669]
[112.40784454 136.56602478]
[113.02366638 151.55337524]
[113.63948822 166.54072571]
[114.25531769 181.52807617]
[114.87113953 196.51544189]
[115.48696899 211.50279236]
[116.10279083 226.49014282]
[116.71862030 241.47749329]
[117.33444214 256.46484375]
[132.12971497 259.32781982]
[145.86569214 265.52618408]
[157.80158997 274.72570801]
[167.29374695 286.43020630]
[173.83024597 300.00854492]
[177.05857849 314.72839355]
[176.80465698 329.79598999]
[173.08216858 344.39874268]
[166.09185791 357.74908447]
[156.21072388 369.12713623]
[143.97161865 377.91925049]
[130.03459167 383.65124512]
[115.15125275 386.01406860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 37]
[23 36]
[24 35]
[38 123]
[39 122]
[41 120]
[42 119]
[43 118]
[44 117]
[45 116]
[46 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
