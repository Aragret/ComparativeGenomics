%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUCCUAUCGGGGGGGGGGCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAAxxxxxxxxxxAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCACUACUAGGCCCCCCCCCCCCUCCUCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[116.19716644 437.80307007]
[102.70829010 431.07153320]
[91.22278595 421.30697632]
[82.40841675 409.07708740]
[76.77764130 395.09289551]
[74.65780640 380.16741943]
[76.17218018 365.16842651]
[81.23270416 350.96789551]
[89.54516602 338.39147949]
[100.62629700 328.17031860]
[113.83185577 320.89868164]
[128.39407349 316.99932861]
[128.08610535 302.00247192]
[127.77812195 287.00564575]
[127.47014618 272.00881958]
[127.16217041 257.01196289]
[126.85418701 242.01513672]
[126.54621124 227.01829529]
[126.23823547 212.02145386]
[125.93025970 197.02461243]
[125.62227631 182.02777100]
[125.31430054 167.03094482]
[125.00632477 152.03410339]
[124.69834900 137.03726196]
[81.61560822 138.18446350]
[59.90379715 103.42649841]
[44.92355347 104.19615936]
[29.94331360 104.96582031]
[14.96307278 105.73548126]
[-0.01716859 106.50514221]
[-5.44991541 120.73205566]
[-16.20418167 131.51470947]
[-30.41672897 136.98493958]
[-45.62514114 136.19500732]
[-59.19447708 129.28175354]
[-68.77375793 117.44294739]
[-72.70332336 102.72974396]
[-70.30235291 87.69128418]
[-61.98682022 74.93307495]
[-49.19745255 66.66555786]
[-34.15007401 64.32112122]
[-19.45174408 68.30596161]
[-7.64903116 77.92967987]
[-0.78682870 91.52490234]
[14.19341278 90.75524139]
[29.17365265 89.98558044]
[44.15389633 89.21591949]
[59.13413620 88.44625854]
[63.59221268 82.41503906]
[48.68775177 80.72473907]
[42.69928741 66.97198486]
[51.61521530 54.90938568]
[66.51970673 56.59941483]
[72.50836182 70.35260773]
[76.96643829 64.32139587]
[73.30773163 49.77444077]
[69.64902496 35.22748947]
[65.99031830 20.68053436]
[60.42838287 6.74981737]
[53.06214523 -6.31687737]
[45.69590378 -19.38357162]
[30.69152832 -25.06232643]
[25.91363907 -40.37739563]
[35.02742386 -53.58036804]
[51.04156494 -54.54305267]
[61.67138672 -42.52696228]
[58.76259995 -26.74981117]
[66.12883759 -13.68311691]
[73.49507904 -0.61642212]
[74.80525970 -15.55909348]
[81.98200989 -28.73081207]
[93.82752991 -37.93318939]
[108.36476135 -41.63032913]
[123.16741943 -39.20516968]
[135.76489258 -31.06247520]
[144.05465698 -18.56128120]
[146.65312195 -3.78806162]
[143.12658691 10.79149914]
[134.06365967 22.74403954]
[120.97694397 30.07465744]
[106.05065155 31.55985260]
[91.77600861 26.95174599]
[80.53727722 17.02182770]
[84.19597626 31.56878090]
[87.85468292 46.11573410]
[91.51338959 60.66268921]
[114.35189819 60.12442398]
[134.96658325 72.44812775]
[145.94738770 62.22942352]
[156.92817688 52.01071548]
[167.90898132 41.79200745]
[164.39120483 26.84139824]
[168.83537292 12.13953304]
[180.04605103 1.64113951]
[195.00761414 -1.82976592]
[209.69548035 2.66047263]
[220.15869141 13.90400314]
[223.58267212 28.87637329]
[219.04641724 43.55009079]
[207.77014160 53.97799683]
[192.78712463 57.35504150]
[178.12770081 52.77281189]
[167.14689636 62.99151993]
[156.16609192 73.21022797]
[145.18528748 83.42893219]
[147.31170654 90.62117004]
[159.67807007 82.13158417]
[171.57345581 91.26940918]
[166.55856323 105.40627289]
[151.56455994 105.00565338]
[153.69097900 112.19789886]
[168.46308899 114.80261993]
[176.94398499 102.15372467]
[189.83987427 94.05336761]
[204.91648865 91.90498352]
[219.56170654 96.08079529]
[231.23815918 105.85731506]
[237.92283630 119.54070282]
[238.45756531 134.76022339]
[232.74969482 148.87901306]
[221.78817749 159.45091248]
[207.47212219 164.64424133]
[192.28190613 163.55926514]
[178.84931946 156.38394165]
[169.50161743 144.36143494]
[165.85836792 129.57473755]
[151.08625793 126.97000885]
[139.69519043 136.72927856]
[140.00315857 151.72612000]
[140.31114197 166.72296143]
[140.61911011 181.71980286]
[140.92709351 196.71664429]
[141.23507690 211.71347046]
[141.54304504 226.71031189]
[141.85102844 241.70715332]
[142.15901184 256.70397949]
[142.46697998 271.70083618]
[142.77496338 286.69766235]
[143.08293152 301.69451904]
[143.39091492 316.69134521]
[158.10095215 319.98956299]
[171.59390259 326.71292114]
[183.08532715 336.47052002]
[191.90710449 348.69506836]
[197.54637146 362.67584229]
[199.67524719 377.60003662]
[198.16996765 392.59994507]
[193.11805725 406.80352783]
[184.81321716 419.38497925]
[173.73828125 429.61285400]
[160.53713989 436.89251709]
[145.97727966 440.80068970]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 128]
[26 48]
[27 47]
[28 46]
[29 45]
[30 44]
[55 86]
[56 85]
[57 84]
[58 83]
[59 69]
[60 68]
[61 67]
[88 105]
[89 104]
[90 103]
[91 102]
[111 127]
[112 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
