%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCACCCCGGGGGGGGGGAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUxxxxxxxxxxCGGUCACACGAUUAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUCCCCCCCCCCAGAUCACCCC\
) } def
/len { sequence length } bind def

/coor [
[83.10466003 459.06118774]
[69.25872040 453.04516602]
[57.55006027 443.51574707]
[48.84753799 431.18008423]
[43.79693604 416.95355225]
[42.77304459 401.89187622]
[45.85184479 387.11270142]
[52.80486679 373.71276855]
[63.11614990 362.68646240]
[76.02053070 354.85192871]
[90.56041718 350.79061890]
[90.56041718 335.79061890]
[90.56041718 320.79061890]
[90.56041718 305.79061890]
[90.56041718 290.79061890]
[90.56041718 275.79061890]
[90.56041718 260.79061890]
[90.56041718 245.79063416]
[90.56041718 230.79063416]
[90.56041718 215.79063416]
[90.56041718 200.79063416]
[87.39483643 194.05825806]
[90.71970367 185.47938538]
[91.03175354 170.48263550]
[91.34381104 155.48587036]
[91.65586853 140.48912048]
[91.96792603 125.49237061]
[79.19232941 119.23369598]
[70.82285309 106.72874451]
[69.79225159 90.89339447]
[54.81253433 91.67323303]
[39.83282089 92.45307922]
[24.85310555 93.23292542]
[14.46142960 105.14042664]
[-1.31191719 106.12890625]
[-13.10888672 95.61191559]
[-13.93054676 79.82900238]
[-3.28942037 68.14388275]
[12.50129986 67.48913574]
[24.07326126 78.25321198]
[39.05297470 77.47336578]
[54.03268814 76.69351959]
[69.01240540 75.91367340]
[80.31140900 66.04795074]
[83.10372925 51.31014633]
[85.89605713 36.57234192]
[88.38117218 21.77963448]
[90.55801392 6.93842888]
[92.73484802 -7.90277672]
[94.91168976 -22.74398232]
[97.08852386 -37.58518600]
[99.26535797 -52.42639160]
[101.44219971 -67.26760101]
[103.61903381 -82.10880280]
[89.13890839 -86.09697723]
[75.25865173 -91.83440399]
[62.18868256 -99.23410797]
[50.12714386 -108.18390656]
[39.25688171 -118.54812622]
[29.74268913 -130.16964722]
[21.72879791 -142.87228394]
[15.33669662 -156.46348572]
[10.66328812 -170.73719788]
[7.77941847 -185.47703552]
[6.72880793 -200.45956421]
[7.52738285 -215.45762634]
[10.16303730 -230.24386597]
[14.59581566 -244.59413147]
[20.75851822 -258.29086304]
[28.55771828 -271.12643433]
[37.87518692 -282.90628052]
[48.56966400 -293.45178223]
[60.47903442 -302.60308838]
[73.42275238 -310.22149658]
[87.20458984 -316.19146729]
[101.61562347 -320.42251587]
[116.43737793 -322.85049438]
[131.44515991 -323.43862915]
[146.41146851 -322.17794800]
[161.10940552 -319.08761597]
[175.31616211 -314.21444702]
[188.81636047 -307.63232422]
[201.40534973 -299.44104004]
[212.89227295 -289.76477051]
[223.10299683 -278.75018311]
[231.88272095 -266.56430054]
[239.09835815 -253.39183044]
[244.64053345 -239.43244934]
[248.42520142 -224.89781189]
[250.39498901 -210.00823975]
[250.52006531 -194.98944092]
[248.79849243 -180.06912231]
[245.25640869 -165.47346497]
[239.94747925 -151.42373657]
[232.95220947 -138.13291931]
[224.37663269 -125.80250549]
[214.35076904 -114.61942291]
[203.02658081 -104.75319672]
[190.57575989 -96.35339355]
[177.18704224 -89.54736328]
[163.06341553 -84.43828583]
[148.41897583 -81.10359955]
[133.47573853 -79.59386444]
[118.46024323 -79.93196869]
[116.28340149 -65.09075928]
[114.10656738 -50.24955750]
[111.92972565 -35.40835190]
[109.75289154 -20.56714439]
[107.57605743 -5.72593975]
[105.39921570 9.11526585]
[103.22238159 23.95647049]
[105.34480286 28.30052948]
[104.71506500 34.03068924]
[100.63386536 39.36466599]
[97.84153748 54.10247040]
[95.04921722 68.84027863]
[105.54385376 69.48479462]
[115.06483459 73.50451660]
[122.57993317 80.33457947]
[127.31768036 89.11318970]
[128.84584045 98.78912354]
[127.10865021 108.24714661]
[122.41993713 116.43653870]
[115.41453552 122.48775482]
[106.96467590 125.80442047]
[106.65262604 140.80117798]
[106.34056854 155.79792786]
[106.02851105 170.79467773]
[105.71645355 185.79144287]
[105.56041718 200.79063416]
[105.56041718 215.79063416]
[105.56041718 230.79063416]
[105.56041718 245.79063416]
[105.56041718 260.79061890]
[105.56041718 275.79061890]
[105.56041718 290.79061890]
[105.56041718 305.79061890]
[105.56041718 320.79061890]
[105.56041718 335.79061890]
[105.56041718 350.79061890]
[120.10030365 354.85192871]
[133.00468445 362.68646240]
[143.31596375 373.71276855]
[150.26899719 387.11270142]
[153.34779358 401.89187622]
[152.32389832 416.95355225]
[147.27330017 431.18008423]
[138.57077026 443.51574707]
[126.86211395 453.04516602]
[113.01617432 459.06118774]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[30 43]
[31 42]
[32 41]
[33 40]
[44 116]
[45 115]
[46 114]
[47 111]
[48 110]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
