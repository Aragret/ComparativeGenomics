%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUCAUUUACAGGGGGGGGGGCCAACCACCCAACUAUCUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCxxxxxxxxxxAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCCCCCCCCCCCUCAUUUACA\
) } def
/len { sequence length } bind def

/coor [
[86.48636627 402.89208984]
[72.78421021 396.63119507]
[60.81909561 387.47787476]
[51.19118500 375.89117432]
[44.38340759 362.45236206]
[40.73723984 347.83547974]
[40.43556976 332.77371216]
[43.49353409 318.02255249]
[49.75774384 304.32192993]
[58.91399002 292.35903931]
[70.50299835 282.73391724]
[83.94346619 275.92941284]
[98.56123352 272.28677368]
[98.25722504 257.28985596]
[97.95322418 242.29293823]
[97.64921570 227.29602051]
[97.34521484 212.29910278]
[97.04120636 197.30218506]
[96.73720551 182.30526733]
[96.43319702 167.30834961]
[96.12919617 152.31143188]
[95.82518768 137.31449890]
[95.52118683 122.31758881]
[88.95421600 119.35583496]
[83.77323914 114.57146454]
[80.44577789 108.52642059]
[79.23010254 101.88828278]
[64.32320404 100.21960449]
[49.41630936 98.55092621]
[44.21055603 112.69884491]
[35.76967239 125.18943787]
[24.58439827 135.29652405]
[11.30503368 142.43247986]
[-3.29637837 146.18243408]
[-18.37093163 146.32838440]
[-33.04220963 142.86181641]
[-46.45724487 135.98429871]
[-57.83610153 126.09567261]
[-66.51723480 113.77084351]
[-71.99592590 99.72636414]
[-73.95365906 84.77876282]
[-72.27661133 69.79708099]
[-67.06227875 55.65232086]
[-58.61382675 43.16684723]
[-47.42242813 33.06654739]
[-34.13874054 25.93864059]
[-19.53505707 22.19753456]
[-4.46041822 22.06073189]
[10.20875549 25.53618431]
[23.61961937 32.42183685]
[34.99248123 42.31736374]
[43.66613770 54.64745331]
[49.13631439 68.69525146]
[51.08498764 83.64403534]
[65.99188232 85.31270599]
[80.89877319 86.98138428]
[68.61675262 78.37023926]
[54.48479080 73.34155273]
[45.10033417 61.63975525]
[43.26074219 46.75298691]
[49.51437378 33.11876297]
[61.99711227 24.80123711]
[76.98804474 24.27974129]
[90.01860046 31.70972443]
[97.20456696 44.87641907]
[96.40423584 59.85411072]
[99.62266541 74.50476837]
[103.82212067 60.10460663]
[108.02158356 45.70445251]
[112.22104645 31.30429459]
[116.42050934 16.90413666]
[103.25596619 9.58002949]
[92.05160522 -0.49022231]
[83.36942291 -12.80149746]
[77.64492798 -26.73626900]
[75.16524506 -41.59557343]
[76.05475616 -56.63407516]
[80.26885223 -71.09744263]
[87.59615326 -84.26021576]
[97.66911316 -95.46213531]
[109.98249817 -104.14133453]
[123.91865540 -109.86245728]
[138.77856445 -112.33853912]
[153.81684875 -111.44538116]
[168.27919006 -107.22777557]
[181.44018555 -99.89729309]
[192.63966370 -89.82160950]
[201.31587219 -77.50613403]
[207.03363037 -63.56858826]
[209.50610352 -48.70808411]
[208.60929871 -33.67001724]
[204.38819885 -19.20868683]
[197.05451965 -6.04947233]
[186.97613525 5.14756870]
[174.65855408 13.82079697]
[160.71961975 19.53516579]
[145.85852051 22.00404549]
[130.82066345 21.10359955]
[126.62120819 35.50375748]
[122.42174530 49.90391159]
[118.22228241 64.30406952]
[114.02281952 78.70422363]
[123.67756653 90.18402863]
[138.58445740 88.51535034]
[153.49134827 86.84667206]
[168.39825439 85.17800140]
[183.30514526 83.50932312]
[191.54206848 79.42344666]
[198.53063965 81.96103668]
[213.46829224 80.59482574]
[228.40594482 79.22860718]
[243.34359741 77.86238861]
[258.56619263 70.39853668]
[269.95239258 82.96002197]
[261.03381348 97.37860107]
[244.70982361 92.80004120]
[229.77217102 94.16625977]
[214.83451843 95.53247833]
[199.89686584 96.89868927]
[184.97381592 98.41621399]
[170.06692505 100.08489227]
[155.16003418 101.75357056]
[140.25314331 103.42224884]
[125.34624481 105.09092712]
[140.29164124 106.36968994]
[150.52136230 117.34022522]
[150.75379944 132.33842468]
[140.86892700 143.62068176]
[125.97032928 145.36193848]
[113.75019836 136.66319275]
[110.51810455 122.01358032]
[110.82211304 137.01049805]
[111.12611389 152.00741577]
[111.43012238 167.00433350]
[111.73412323 182.00126648]
[112.03812408 196.99818420]
[112.34213257 211.99510193]
[112.64613342 226.99201965]
[112.95014191 241.98893738]
[113.25414276 256.98583984]
[113.55815125 271.98278809]
[128.31152344 275.03002930]
[142.01670837 281.28427124]
[153.98625183 290.43182373]
[163.61978149 302.01382446]
[170.43408203 315.44934082]
[174.08732605 330.06445312]
[174.39628601 345.12606812]
[171.34547424 359.87869263]
[165.08790588 373.58236694]
[155.93745422 385.54971313]
[144.35311890 395.18041992]
[130.91595459 401.99145508]
[116.29994965 405.64117432]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[27 56]
[28 55]
[29 54]
[67 102]
[68 101]
[69 100]
[70 99]
[71 98]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
