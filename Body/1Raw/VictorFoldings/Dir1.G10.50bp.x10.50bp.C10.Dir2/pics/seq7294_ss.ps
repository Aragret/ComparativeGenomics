%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAUAGUGGGGGGGGGGAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCACCCUxxxxxxxxxxAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACCCCCCCCCCCUCAUAAUAGU\
) } def
/len { sequence length } bind def

/coor [
[85.86305237 371.11584473]
[72.01711273 365.09982300]
[60.30845261 355.57040405]
[51.60593033 343.23474121]
[46.55532837 329.00823975]
[45.53143692 313.94653320]
[48.61023331 299.16738892]
[55.56325531 285.76745605]
[65.87454224 274.74111938]
[78.77892303 266.90661621]
[93.31880951 262.84530640]
[93.31880951 247.84530640]
[93.31880951 232.84530640]
[93.31880951 217.84530640]
[93.31880951 202.84530640]
[93.31880951 187.84530640]
[93.31880951 172.84530640]
[93.31880951 157.84530640]
[93.31880951 142.84530640]
[93.31880951 127.84529877]
[76.09640503 105.03230286]
[87.75575256 83.90943146]
[83.74800873 69.45474243]
[79.74027252 55.00005722]
[75.73252869 40.54536819]
[71.16305542 54.83242035]
[56.86957169 59.38175201]
[44.88271713 50.36425400]
[45.29166031 35.36983109]
[57.75228119 27.01907349]
[42.75309372 27.17511177]
[27.75390434 27.33114815]
[12.75471592 27.48718452]
[-2.24447250 27.64322090]
[-13.12248802 39.10813904]
[-28.92329979 39.43961334]
[-40.27256775 28.44099236]
[-40.43696976 12.63755894]
[-29.31897163 1.40521061]
[-13.51468372 1.40790009]
[-2.40050912 12.64403248]
[12.59867954 12.48799610]
[27.59786797 12.33195877]
[42.59705734 12.17592239]
[57.59624481 12.01988602]
[42.70476913 10.21879196]
[31.39834595 0.36157098]
[27.58416557 -14.14539337]
[32.58030319 -28.28889465]
[44.66022873 -37.18132782]
[59.64945602 -37.74971390]
[72.36811829 -29.79763222]
[78.42099762 -16.07310486]
[75.71622467 -1.31863844]
[80.32179260 -15.59409904]
[84.92735291 -29.86956024]
[89.53292084 -44.14501953]
[75.88571167 -50.41319275]
[63.07566452 -58.25150681]
[51.28261948 -67.54991913]
[40.67213058 -78.17789459]
[31.39315033 -89.98622894]
[23.57594299 -102.80916595]
[17.33024788 -116.46667480]
[12.74374771 -130.76704407]
[9.88082695 -145.50949097]
[8.78167820 -160.48709106]
[9.46173191 -175.48954773]
[11.91143990 -190.30627441]
[16.09641457 -204.72924805]
[21.95790100 -218.55601501]
[29.41361809 -231.59245300]
[38.35889816 -243.65554810]
[48.66815948 -254.57595825]
[60.19667816 -264.20037842]
[72.78261566 -272.39370728]
[86.24928284 -279.04092407]
[100.40762329 -284.04867554]
[115.05888367 -287.34671021]
[129.99737549 -288.88870239]
[145.01339722 -288.65298462]
[159.89613342 -286.64291382]
[174.43666077 -282.88665771]
[188.43086243 -277.43701172]
[201.68226624 -270.37042236]
[214.00485229 -261.78610229]
[225.22561646 -251.80459595]
[235.18705750 -240.56599426]
[243.74931335 -228.22808838]
[250.79220581 -214.96406555]
[256.21685791 -200.96015930]
[259.94708252 -186.41293335]
[261.93054199 -171.52662659]
[262.13940430 -156.51020813]
[260.57070923 -141.57449341]
[257.24649048 -126.92915344]
[252.21343994 -112.77978516]
[245.54217529 -99.32502747]
[237.32635498 -86.75376129]
[227.68133545 -75.24246216]
[216.74250793 -64.95274353]
[204.66343689 -56.02904510]
[191.61369324 -48.59664536]
[177.77647400 -42.75988770]
[163.34603882 -38.60070801]
[148.52494812 -36.17749023]
[133.52130127 -35.52426147]
[118.54570007 -36.65018463]
[103.80838013 -39.53945541]
[99.20281982 -25.26399612]
[94.59725189 -10.98853493]
[89.99168396 3.28692603]
[90.18721771 36.53762817]
[94.19496155 50.99231720]
[98.20269775 65.44700623]
[102.21044159 79.90169525]
[114.37324524 82.01238251]
[124.41973877 91.58107758]
[127.86428070 106.60159302]
[141.25056458 113.36970520]
[154.63685608 120.13781738]
[169.57221985 114.96964264]
[183.75088501 121.95114136]
[188.76086426 136.94032288]
[181.62985229 151.04437256]
[166.58853149 155.89559937]
[152.56066895 148.61587524]
[147.86872864 133.52410889]
[134.48245239 126.75598907]
[121.09616852 119.98787689]
[108.31880951 127.84529877]
[108.31880951 142.84530640]
[108.31880951 157.84530640]
[108.31880951 172.84530640]
[108.31880951 187.84530640]
[108.31880951 202.84530640]
[108.31880951 217.84530640]
[108.31880951 232.84530640]
[108.31880951 247.84530640]
[108.31880951 262.84530640]
[122.85869598 266.90661621]
[135.76307678 274.74111938]
[146.07435608 285.76745605]
[153.02738953 299.16738892]
[156.10618591 313.94653320]
[155.08229065 329.00823975]
[150.03169250 343.23474121]
[141.32916260 355.57040405]
[129.62049866 365.09982300]
[115.77456665 371.11584473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 116]
[23 115]
[24 114]
[25 113]
[30 45]
[31 44]
[32 43]
[33 42]
[34 41]
[54 112]
[55 111]
[56 110]
[57 109]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
