%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUCGCUGUGGGGGGGGGGCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAxxxxxxxxxxCUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUCCCCCCCCCCAGCCAUCGCUGU\
) } def
/len { sequence length } bind def

/coor [
[80.94111633 351.70721436]
[67.73303223 344.47113037]
[56.38959122 334.56457520]
[47.44133759 322.45080566]
[41.30680084 308.69650269]
[38.27290344 293.94488525]
[38.48154449 278.88598633]
[41.92296600 264.22412109]
[48.43621063 250.64501953]
[57.71663666 238.78384399]
[69.33018494 229.19532776]
[82.73367310 222.32795715]
[97.30017853 218.50294495]
[96.69229889 203.51525879]
[96.08441162 188.52758789]
[95.47653198 173.53990173]
[94.86864471 158.55223083]
[94.26076508 143.56455994]
[93.65287781 128.57687378]
[93.04499817 113.58919525]
[89.87677765 98.92760468]
[84.24201965 85.02618408]
[78.60726166 71.12475586]
[72.97251129 57.22333527]
[58.70232391 61.86561966]
[44.14022446 65.48973083]
[29.35875702 68.07761383]
[14.43156242 69.61637115]
[-0.56699151 70.09834290]
[-15.56218243 69.52113342]
[-30.47930336 67.88760376]
[-45.24403763 65.20590973]
[-59.78282928 61.48939133]
[-74.02324677 56.75658035]
[-87.89434052 51.03104782]
[-101.32700348 44.34132385]
[-114.25431824 36.72072983]
[-126.61187744 28.20723724]
[-138.33811951 18.84325790]
[-149.37463379 8.67544174]
[-159.66641235 -2.24555278]
[-169.16220093 -13.86531830]
[-177.81468201 -26.12596512]
[-185.58074951 -38.96641159]
[-192.42172241 -52.32268524]
[-198.30351257 -66.12824249]
[-203.19682312 -80.31430817]
[-207.07725525 -94.81021118]
[-209.92549133 -109.54372406]
[-211.72735596 -124.44145203]
[-212.47384644 -139.42916870]
[-212.16125488 -154.43220520]
[-210.79113770 -169.37582397]
[-208.37031555 -184.18557739]
[-204.91085815 -198.78765869]
[-200.43000793 -213.10935974]
[-194.95007324 -227.07929993]
[-188.49835205 -240.62788391]
[-181.10699463 -253.68762207]
[-172.81283569 -266.19345093]
[-163.65716553 -278.08306885]
[-153.68563843 -289.29721069]
[-142.94790649 -299.78005981]
[-131.49745178 -309.47937012]
[-119.39135742 -318.34680176]
[-106.68991852 -326.33816528]
[-93.45640564 -333.41369629]
[-79.75675201 -339.53811646]
[-65.65921783 -344.68090820]
[-51.23402786 -348.81646729]
[-36.55305099 -351.92419434]
[-21.68943024 -353.98858643]
[-6.71721506 -354.99935913]
[8.28900433 -354.95147705]
[23.25446701 -353.84521484]
[38.10461426 -351.68603516]
[52.76546478 -348.48471069]
[67.16397095 -344.25720215]
[81.22840881 -339.02456665]
[94.88871002 -332.81286621]
[108.07680511 -325.65304565]
[120.72700500 -317.58078003]
[132.77629089 -308.63629150]
[144.16461182 -298.86413574]
[154.83525085 -288.31301880]
[164.73503113 -277.03546143]
[173.81463623 -265.08767700]
[182.02885437 -252.52917480]
[189.33673096 -239.42254639]
[195.70187378 -225.83306885]
[201.09257507 -211.82844543]
[205.48196411 -197.47846985]
[208.84819031 -182.85459900]
[211.17445374 -168.02970886]
[212.44920349 -153.07765198]
[212.66607666 -138.07292175]
[211.82397461 -123.09027100]
[209.92709351 -108.20434570]
[206.98490906 -93.48930359]
[203.01206970 -79.01845551]
[198.02835083 -64.86389923]
[192.05860901 -51.09614563]
[185.13255310 -37.78379059]
[177.28471375 -24.99315453]
[168.55418396 -12.78796196]
[158.98446655 -1.22901809]
[148.62321472 9.62609100]
[137.52204895 19.72328377]
[125.73630524 29.01225853]
[113.32467651 37.44673538]
[100.34900665 44.98469543]
[86.87393188 51.58858109]
[92.50868225 65.49000549]
[98.14344025 79.39142609]
[103.77819824 93.29284668]
[112.00808716 85.58683014]
[122.91307068 80.91271210]
[135.62194824 79.93669128]
[150.06391907 83.99000549]
[164.50590515 88.04331970]
[178.94787598 92.09663391]
[195.83161926 90.55529785]
[201.98660278 106.35253143]
[188.51060486 116.64008331]
[174.89456177 106.53861237]
[160.45259094 102.48529816]
[146.01060486 98.43198395]
[131.56863403 94.37866974]
[125.68464661 99.02932739]
[134.98579407 110.79745483]
[123.21752167 120.09841156]
[113.91666412 108.33065033]
[108.03267670 112.98131561]
[108.64055634 127.96899414]
[109.24844360 142.95666504]
[109.85632324 157.94435120]
[110.46421051 172.93202209]
[111.07209015 187.91970825]
[111.67997742 202.90737915]
[112.28785706 217.89505005]
[127.11629486 220.52784729]
[141.03190613 226.28718567]
[153.38381958 234.90368652]
[163.59434509 245.97433472]
[171.18589783 258.98135376]
[175.80339050 273.31637573]
[177.23089600 288.30889893]
[175.40161133 303.25775146]
[170.40110779 317.46371460]
[162.46327209 330.26232910]
[151.95936584 341.05502319]
[139.38069153 349.33697510]
[125.31554413 354.72082520]
[110.42179871 356.95477295]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 115]
[22 114]
[23 113]
[24 112]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
