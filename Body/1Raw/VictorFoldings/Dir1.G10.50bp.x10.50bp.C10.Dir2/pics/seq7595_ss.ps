%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUAACUGGGGGGGGGGAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUxxxxxxxxxxGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUCCCCCCCCCCAAAGCUAACU\
) } def
/len { sequence length } bind def

/coor [
[86.44673920 377.13772583]
[72.60080719 371.12170410]
[60.89214325 361.59228516]
[52.18961716 349.25662231]
[47.13901520 335.03009033]
[46.11512375 319.96841431]
[49.19392395 305.18927002]
[56.14694595 291.78933716]
[66.45822906 280.76300049]
[79.36260986 272.92849731]
[93.90249634 268.86718750]
[93.90249634 253.86717224]
[93.90249634 238.86717224]
[93.90249634 223.86717224]
[93.90249634 208.86717224]
[93.90249634 193.86717224]
[93.90249634 178.86717224]
[93.90249634 163.86717224]
[93.90249634 148.86717224]
[93.90249634 133.86717224]
[93.90249634 118.86717987]
[93.86344147 133.86712646]
[87.10478210 147.25819397]
[75.06060791 156.19898987]
[60.28650284 158.79240417]
[45.91731644 154.48817444]
[35.00196457 144.19958496]
[29.85652733 130.10971069]
[31.57278633 115.20822144]
[39.78657532 102.65698242]
[52.75505447 95.11917114]
[67.72650909 94.19420624]
[81.52406311 100.07823944]
[67.74168396 94.15827179]
[53.95930099 88.23831177]
[40.17691803 82.31834412]
[26.39453888 76.39838409]
[12.61215687 70.47842407]
[-1.17022455 64.55845642]
[-11.53741455 75.61726379]
[-25.06312180 82.46058655]
[-40.11405182 84.26205444]
[-54.87273407 80.80413818]
[-67.55697632 72.50440216]
[-76.63510895 60.36507034]
[-81.01089478 45.85203171]
[-80.15593719 30.71780205]
[-74.17347717 16.78991890]
[-63.78592300 5.75023651]
[-50.24762726 -1.06814611]
[-35.19340134 -2.84187746]
[-20.44111824 0.64322889]
[-7.77218819 8.96632957]
[1.28355503 21.12236977]
[5.63258600 35.64344788]
[4.74973869 50.77607727]
[18.53211975 56.69603729]
[32.31450272 62.61600113]
[46.09688187 68.53596497]
[59.87926483 74.45592499]
[73.66164398 80.37589264]
[87.44402313 86.29585266]
[91.36231995 81.41059113]
[97.13388062 77.77410889]
[100.84004211 63.23917389]
[104.54620361 48.70423889]
[108.25236511 34.16930008]
[94.75263977 27.50213051]
[82.93434906 18.17359352]
[73.31412506 6.59149313]
[66.31253815 -6.73785019]
[62.23565292 -21.23173523]
[61.26169968 -36.25654984]
[63.43325806 -51.15547943]
[68.65539551 -65.27719879]
[76.69981384 -78.00437164]
[87.21485901 -88.78062439]
[99.74085236 -97.13485718]
[113.73020935 -102.70185852]
[128.57138062 -105.23827362]
[143.61557007 -104.63320923]
[158.20510864 -100.91312408]
[171.70220947 -94.24064636]
[183.51683044 -84.90746307]
[193.13249207 -73.32157898]
[200.12884521 -59.98947906]
[204.20002747 -45.49399185]
[205.16806030 -30.46879387]
[202.99064636 -15.57072163]
[197.76295471 -1.45105660]
[189.71351624 11.27295113]
[179.19424438 22.04506302]
[166.66496277 30.39436722]
[152.67341614 35.95586777]
[137.83125305 38.48644257]
[122.78730011 37.87546158]
[119.08113861 52.41040039]
[115.37497711 66.94533539]
[111.66881561 81.48027039]
[120.56116486 93.56025696]
[135.54087830 94.34010315]
[144.37283325 80.39825439]
[158.93840027 72.83914185]
[175.23561096 73.63346100]
[188.83990479 82.47115326]
[196.10537720 96.87131500]
[211.09806824 97.33935547]
[226.09077454 97.80739594]
[241.08346558 98.27544403]
[256.07617188 98.74348450]
[266.36108398 86.96408081]
[281.81933594 84.60265350]
[295.15200806 92.77419281]
[300.06381226 107.62034607]
[294.23553467 122.13121033]
[280.41912842 129.45521545]
[265.13827515 126.13416290]
[255.60812378 113.73618317]
[240.61541748 113.26813507]
[225.62272644 112.80009460]
[210.63003540 112.33205414]
[195.63732910 111.86401367]
[189.20216370 123.94904327]
[178.12651062 132.11047363]
[164.54748535 134.70237732]
[151.11619568 131.16046143]
[140.48004150 122.12368011]
[134.76103210 109.31981659]
[119.78132629 108.53997040]
[108.90249634 118.86717987]
[108.90249634 133.86717224]
[108.90249634 148.86717224]
[108.90249634 163.86717224]
[108.90249634 178.86717224]
[108.90249634 193.86717224]
[108.90249634 208.86717224]
[108.90249634 223.86717224]
[108.90249634 238.86717224]
[108.90249634 253.86717224]
[108.90249634 268.86718750]
[123.44238281 272.92849731]
[136.34677124 280.76300049]
[146.65805054 291.78933716]
[153.61106873 305.18927002]
[156.68986511 319.96841431]
[155.66598511 335.03009033]
[150.61537170 349.25662231]
[141.91285706 361.59228516]
[130.20419312 371.12170410]
[116.35825348 377.13772583]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[64 99]
[65 98]
[66 97]
[67 96]
[100 129]
[101 128]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
