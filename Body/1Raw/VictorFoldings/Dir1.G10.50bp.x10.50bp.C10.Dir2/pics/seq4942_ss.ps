%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAUAAUCAUGGGGGGGGGGAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxCAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCCCCCCCCCCCUUAUUAAUCAU\
) } def
/len { sequence length } bind def

/coor [
[83.53963470 378.48281860]
[70.05075836 371.75128174]
[58.56525421 361.98669434]
[49.75088501 349.75680542]
[44.12010193 335.77261353]
[42.00027466 320.84713745]
[43.51464462 305.84814453]
[48.57516861 291.64761353]
[56.88763046 279.07119751]
[67.96876526 268.85003662]
[81.17431641 261.57839966]
[95.73654175 257.67904663]
[95.42856598 242.68220520]
[95.12059021 227.68536377]
[94.81260681 212.68853760]
[94.50463104 197.69169617]
[94.19665527 182.69485474]
[93.88867950 167.69801331]
[93.58069611 152.70118713]
[93.27272034 137.70434570]
[92.96474457 122.70750427]
[92.65676880 107.71066284]
[91.11947632 92.78964996]
[88.36322784 78.04505157]
[85.60698700 63.30045700]
[82.85074615 48.55585861]
[80.09450531 33.81126404]
[77.33825684 19.06666756]
[74.58201599 4.32207060]
[71.82577515 -10.42252541]
[56.91105270 -8.76172352]
[41.91440201 -8.20695305]
[26.91773796 -8.76124287]
[12.00296211 -10.42156792]
[-2.74846458 -13.17885780]
[-17.25597191 -17.01805496]
[-31.44032669 -21.91818810]
[-45.22405624 -27.85249710]
[-58.53187943 -34.78857040]
[-71.29110718 -42.68852234]
[-83.43206024 -51.50920486]
[-94.88842773 -61.20244598]
[-105.59763336 -71.71530151]
[-115.50118256 -82.99035645]
[-124.54499817 -94.96602631]
[-132.67967224 -107.57690430]
[-139.86079407 -120.75411224]
[-146.04911804 -134.42568970]
[-151.21086121 -148.51695251]
[-155.31782532 -162.95094299]
[-158.34757996 -177.64881897]
[-160.28358459 -192.53031921]
[-161.11524963 -207.51416016]
[-160.83805847 -222.51850891]
[-159.45349121 -237.46141052]
[-156.96914673 -252.26124573]
[-153.39855957 -266.83718872]
[-148.76126099 -281.10964966]
[-143.08255005 -295.00061035]
[-136.39346313 -308.43429565]
[-128.73052979 -321.33724976]
[-120.13559723 -333.63906860]
[-110.65561676 -345.27252197]
[-100.34235382 -356.17407227]
[-89.25215149 -366.28417969]
[-77.44556427 -375.54766846]
[-64.98709106 -383.91387939]
[-51.94476700 -391.33715820]
[-38.38983154 -397.77694702]
[-24.39631462 -403.19808960]
[-10.04064465 -407.57095337]
[4.59877157 -410.87167358]
[19.44197655 -413.08221436]
[34.40790176 -414.19049072]
[49.41480637 -414.19046021]
[64.38072968 -413.08215332]
[79.22393036 -410.87158203]
[93.86334229 -407.57083130]
[108.21900177 -403.19793701]
[122.21250916 -397.77679443]
[135.76742554 -391.33697510]
[148.80973816 -383.91366577]
[161.26820374 -375.54742432]
[173.07476807 -366.28393555]
[184.16494751 -356.17379761]
[194.47817993 -345.27221680]
[203.95814514 -333.63873291]
[212.55305481 -321.33691406]
[220.21595764 -308.43392944]
[226.90501404 -295.00024414]
[232.58369446 -281.10925293]
[237.22097778 -266.83679199]
[240.79151917 -252.26084900]
[243.27584839 -237.46101379]
[244.66038513 -222.51811218]
[244.93754578 -207.51376343]
[244.10585022 -192.52992249]
[242.16981506 -177.64842224]
[239.14002991 -162.95054626]
[235.03303528 -148.51655579]
[229.87126160 -134.42530823]
[223.68290710 -120.75375366]
[216.50177002 -107.57655334]
[208.36706543 -94.96569824]
[199.32322693 -82.99004364]
[189.41966248 -71.71501160]
[178.71043396 -61.20217514]
[167.25404358 -51.50895309]
[155.11308289 -42.68829346]
[142.35383606 -34.78836823]
[129.04598999 -27.85232353]
[115.26225281 -21.91804123]
[101.07788849 -17.01793671]
[86.57037354 -13.17876816]
[89.32661438 1.56582785]
[92.08285522 16.31042480]
[94.83909607 31.05502129]
[97.59534454 45.79961777]
[100.35158539 60.54421234]
[103.10782623 75.28881073]
[105.86406708 90.03340912]
[113.93224335 77.38806915]
[127.83353424 71.75299835]
[142.42945862 75.21115875]
[152.32476807 86.48426819]
[153.86172485 101.40531921]
[146.47222900 114.45887756]
[132.88774109 120.81980133]
[118.12962341 118.13684082]
[107.65360260 107.40268707]
[107.96157837 122.39952850]
[108.26956177 137.39636230]
[108.57753754 152.39320374]
[108.88551331 167.39004517]
[109.19348907 182.38687134]
[109.50147247 197.38371277]
[109.80944824 212.38055420]
[110.11742401 227.37739563]
[110.42539978 242.37423706]
[110.73338318 257.37106323]
[125.44341278 260.66928101]
[138.93637085 267.39263916]
[150.42779541 277.15023804]
[159.24957275 289.37478638]
[164.88883972 303.35559082]
[167.01771545 318.27975464]
[165.51243591 333.27969360]
[160.46052551 347.48324585]
[152.15568542 360.06472778]
[141.08074951 370.29257202]
[127.87960815 377.57223511]
[113.31974792 381.48043823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 121]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
