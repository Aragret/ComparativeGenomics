%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUCUCCUACUGGGGGGGGGGCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGxxxxxxxxxxCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCCCCCCCCCCCACUCUCCUACU\
) } def
/len { sequence length } bind def

/coor [
[71.64176178 392.30883789]
[57.48115921 387.15383911]
[44.89141464 378.87161255]
[34.55147934 367.90884399]
[27.01896667 354.85671997]
[22.70010185 340.41912842]
[21.82779312 325.37466431]
[24.44908333 310.53466797]
[30.42260933 296.69943237]
[39.42622757 284.61508179]
[50.97438431 274.93328857]
[64.44429779 268.17620850]
[79.10955811 264.70825195]
[79.10955811 249.70825195]
[79.10955811 234.70825195]
[79.10955811 219.70825195]
[79.10955811 204.70825195]
[79.10955811 189.70825195]
[79.10955811 174.70825195]
[79.10955811 159.70825195]
[79.10955811 144.70825195]
[79.10955811 129.70825195]
[68.88576508 118.73218536]
[53.92348862 117.66899109]
[38.96121597 116.60579681]
[23.99894333 115.54259491]
[9.03667068 114.47940063]
[-5.92560196 113.41620636]
[-20.88787460 112.35301208]
[-35.86862183 111.59327698]
[-50.86169052 111.13730621]
[-64.89068604 118.45153809]
[-77.37687683 110.33093262]
[-92.36994171 109.87496185]
[-107.36301422 109.41899872]
[-122.35607910 108.96302795]
[-137.34915161 108.50705719]
[-151.52987671 116.74350739]
[-165.61659241 108.34729004]
[-165.11808777 91.95571899]
[-150.54719543 84.43103790]
[-136.89318848 93.51399231]
[-121.90011597 93.96996307]
[-106.90704346 94.42592621]
[-91.91397858 94.88189697]
[-76.92090607 95.33786011]
[-63.96432114 87.99102020]
[-50.40572357 96.14424133]
[-35.41265488 96.60020447]
[-31.34515762 93.99653625]
[-25.58804321 93.96100616]
[-19.82468033 97.39073944]
[-4.86240625 98.45393372]
[10.09986687 99.51712799]
[25.06213951 100.58032227]
[40.02441406 101.64352417]
[54.98668671 102.70671844]
[69.94895935 103.76991272]
[72.21520233 91.21325684]
[79.27678680 81.17716217]
[89.48659515 75.29387665]
[100.73922729 74.30611420]
[110.89966583 77.99223328]
[114.95477295 62.69953537]
[129.37010193 58.95153809]
[139.81425476 48.18493271]
[150.25839233 37.41833115]
[160.70254517 26.65172768]
[164.75765991 11.35902691]
[179.17298889 7.61102819]
[189.61714172 -3.15557551]
[175.07279968 0.51353270]
[160.11798096 -0.64978594]
[146.31600952 -6.52392149]
[135.10969543 -16.49480820]
[127.67052460 -29.52012062]
[124.77616119 -44.23822784]
[126.72917938 -59.11054230]
[133.32540894 -72.58235168]
[143.87530518 -83.24536133]
[157.27600098 -89.98487854]
[172.12664795 -92.09638977]
[186.87478638 -89.35914612]
[199.97868347 -82.05930328]
[210.06851196 -70.95996094]
[216.08949280 -57.22140884]
[217.41223145 -42.27984238]
[213.89843750 -27.69721031]
[205.91308594 -14.99527359]
[219.38014221 -21.60118675]
[232.84721375 -28.20709801]
[246.31428528 -34.81301117]
[259.78134155 -41.41892242]
[273.24841309 -48.02483368]
[286.71548462 -54.63074875]
[273.74975586 -62.17327118]
[271.35739136 -76.98126221]
[281.28836060 -88.22296143]
[296.27835083 -87.67528534]
[305.36248779 -75.73884583]
[301.89617920 -61.14529800]
[315.96246338 -66.35488129]
[330.02874756 -71.56445312]
[334.09197998 -86.54010010]
[346.20272827 -96.24108887]
[361.70419312 -96.93719482]
[374.63571167 -88.36076355]
[380.02487183 -73.80959320]
[375.79943848 -58.87891006]
[363.58416748 -49.30986786]
[348.07604980 -48.78195953]
[335.23834229 -57.49817276]
[321.17205811 -52.28859711]
[307.10577393 -47.07901764]
[293.32141113 -41.16367722]
[279.85433960 -34.55776596]
[266.38726807 -27.95185471]
[252.92019653 -21.34594154]
[239.45312500 -14.74003029]
[225.98606873 -8.13411808]
[212.51899719 -1.52820551]
[200.38374329 7.28857327]
[189.93959045 18.05517769]
[186.63151550 32.57777786]
[171.46914673 37.09587479]
[161.02500916 47.86248016]
[150.58085632 58.62908173]
[140.13670349 69.39568329]
[136.82862854 83.91828918]
[121.66626740 88.43638611]
[125.56488037 106.85581207]
[114.99004364 124.09512329]
[94.10955811 129.70825195]
[94.10955811 144.70825195]
[94.10955811 159.70825195]
[94.10955811 174.70825195]
[94.10955811 189.70825195]
[94.10955811 204.70825195]
[94.10955811 219.70825195]
[94.10955811 234.70825195]
[94.10955811 249.70825195]
[94.10955811 264.70825195]
[108.77481842 268.17620850]
[122.24473572 274.93328857]
[133.79289246 284.61508179]
[142.79650879 296.69943237]
[148.77003479 310.53466797]
[151.39132690 325.37466431]
[150.51902771 340.41912842]
[146.20014954 354.85671997]
[138.66764832 367.90884399]
[128.32771301 378.87161255]
[115.73796082 387.15383911]
[101.57735443 392.30883789]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 58]
[24 57]
[25 56]
[26 55]
[27 54]
[28 53]
[29 52]
[30 49]
[31 48]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[63 130]
[65 128]
[66 127]
[67 126]
[68 125]
[70 123]
[71 122]
[89 121]
[90 120]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
