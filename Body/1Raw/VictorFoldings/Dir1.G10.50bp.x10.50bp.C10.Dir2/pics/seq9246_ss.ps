%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUAUUUCUGGGGGGGGGGGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUAxxxxxxxxxxGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUACCCCCCCCCCGACUACUUCU\
) } def
/len { sequence length } bind def

/coor [
[69.37927246 407.83544922]
[54.88958359 403.62698364]
[41.98335266 395.81085205]
[31.54055214 384.92001343]
[24.27318764 371.69702148]
[20.67676163 357.04342651]
[20.99648285 341.95831299]
[25.21055412 327.47024536]
[33.03165054 314.56704712]
[43.92651749 304.12844849]
[57.15232849 296.86618042]
[71.80731964 293.27542114]
[72.11937714 278.27865601]
[72.43143463 263.28192139]
[72.74348450 248.28515625]
[73.05554199 233.28840637]
[73.36759949 218.29165649]
[73.67965698 203.29489136]
[73.99171448 188.29814148]
[74.30377197 173.30139160]
[74.61582184 158.30464172]
[74.92787933 143.30787659]
[75.23993683 128.31112671]
[81.42536163 88.46583557]
[74.24285126 75.29724884]
[67.06034088 62.12866592]
[57.31164551 62.34701538]
[48.18055344 59.19404984]
[40.78436279 53.12244797]
[36.00472260 44.93773270]
[21.07041740 46.34003830]
[6.13610888 47.74234009]
[-8.79819870 49.14464569]
[-21.85107994 59.07209778]
[-36.86827469 52.48302460]
[-38.40137863 36.15569687]
[-24.87326813 26.88627052]
[-10.20050240 34.21033478]
[4.73380518 32.80803299]
[19.66811371 31.40572929]
[34.60242081 30.00342560]
[39.32060242 19.22682571]
[48.20866013 11.51976204]
[45.11033630 -3.15676332]
[42.01201630 -17.83328819]
[38.91369247 -32.50981522]
[23.16957855 -37.45971298]
[12.11921501 -49.59169769]
[8.69608879 -65.54513550]
[13.73833561 -80.96453094]
[25.78599358 -91.68859863]
[22.38301468 -106.29749298]
[18.98003769 -120.90637970]
[0.66382372 -112.97496796]
[-23.43241692 -121.93648529]
[-32.44994736 -133.92332458]
[-41.46747589 -145.91015625]
[-50.48500824 -157.89698792]
[-64.83876038 -166.91950989]
[-60.14234924 -183.21000671]
[-43.18840027 -183.20678711]
[-38.49817276 -166.91452026]
[-29.48064423 -154.92767334]
[-20.46311378 -142.94084167]
[-11.44558430 -130.95401001]
[-4.28428602 -133.18241882]
[17.19960976 -139.86764526]
[17.82358742 -154.85466003]
[18.44756508 -169.84167480]
[4.64318419 -176.20623779]
[-5.67112064 -187.37240601]
[-10.92249298 -201.63745117]
[-10.31013584 -216.82604980]
[-3.92743087 -230.62205505]
[7.25230694 -240.92166138]
[21.52424812 -246.15425110]
[36.71202469 -245.52192688]
[50.49961472 -239.12107849]
[60.78450394 -227.92779541]
[65.99832916 -213.64898682]
[65.34601593 -198.46205139]
[58.92703629 -184.68289185]
[47.72023773 -174.41273499]
[33.43458176 -169.21769714]
[32.81060410 -154.23068237]
[32.18662643 -139.24366760]
[33.58892822 -124.30936432]
[36.99190903 -109.70046997]
[40.39488602 -95.09157562]
[53.72830200 -91.98039246]
[64.46332550 -83.37583923]
[70.45983124 -70.91993713]
[70.49080658 -57.02950668]
[64.49291992 -44.42726517]
[53.59021759 -35.60813522]
[56.68854141 -20.93161011]
[59.78686142 -6.25508499]
[62.88518524 8.42144012]
[81.01421356 17.01176453]
[88.24724579 35.99854279]
[80.22891998 54.94615936]
[87.41143036 68.11473846]
[94.59394073 81.28332520]
[98.11186981 66.70168304]
[112.03648376 61.12450027]
[124.64763641 69.24600983]
[125.33068085 84.23045349]
[113.51063538 93.46563721]
[128.47088623 94.55694580]
[143.43113708 95.64825439]
[158.39137268 96.73957062]
[169.15740967 85.39820099]
[184.70051575 83.68185425]
[197.68171692 92.40093994]
[201.97169495 107.43856812]
[195.54484558 121.69442749]
[181.43572998 128.43734741]
[166.30624390 124.48351288]
[157.30006409 111.69981384]
[142.33981323 110.60850525]
[127.37957001 109.51719666]
[112.41931915 108.42588806]
[106.87366486 113.47521210]
[121.16497803 118.03134918]
[124.36479187 132.68608093]
[113.27325439 142.78448486]
[98.98204803 138.22804260]
[95.78234863 123.57386017]
[90.23669434 128.62318420]
[89.92463684 143.61993408]
[89.61257935 158.61669922]
[89.30052185 173.61344910]
[88.98846436 188.61019897]
[88.67640686 203.60694885]
[88.36435699 218.60369873]
[88.05229950 233.60046387]
[87.74024200 248.59721375]
[87.42818451 263.59396362]
[87.11612701 278.59072876]
[86.80406952 293.58746338]
[101.29701233 297.78475952]
[114.20927429 305.59091187]
[124.66047668 316.47366333]
[131.93804932 329.69107056]
[135.54579163 344.34188843]
[135.23771667 359.42721558]
[131.03483582 373.91854858]
[123.22370911 386.82778931]
[112.33690643 397.27478027]
[99.11670685 404.54727173]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 103]
[25 102]
[26 101]
[30 41]
[31 40]
[32 39]
[33 38]
[43 98]
[44 97]
[45 96]
[46 95]
[51 89]
[52 88]
[53 87]
[55 65]
[56 64]
[57 63]
[58 62]
[67 86]
[68 85]
[69 84]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
