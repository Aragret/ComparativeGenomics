%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUAUUUAUGGGGGGGGGGCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAxxxxxxxxxxACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCACCCCCCCCCCUACUAUUUAU\
) } def
/len { sequence length } bind def

/coor [
[92.45155334 418.48632812]
[78.60561371 412.47030640]
[66.89695740 402.94088745]
[58.19443130 390.60522461]
[53.14382935 376.37869263]
[52.11993790 361.31701660]
[55.19873428 346.53784180]
[62.15175629 333.13790894]
[72.46304321 322.11157227]
[85.36742401 314.27706909]
[99.90731049 310.21575928]
[99.90731049 295.21575928]
[99.90731049 280.21575928]
[99.90731049 265.21575928]
[99.90731049 250.21575928]
[99.90731049 235.21575928]
[99.90731049 220.21575928]
[99.90731049 205.21575928]
[99.90731049 190.21575928]
[99.90731049 175.21575928]
[90.31620026 160.55252075]
[99.57045746 144.66735840]
[99.25839996 129.67060852]
[93.66052246 124.67923737]
[90.61299896 139.36639404]
[76.36975861 144.07064819]
[65.17420959 134.08767700]
[68.22204590 119.40058136]
[82.46475220 114.69651031]
[76.86686707 109.70514679]
[61.93256378 111.10745239]
[54.14155960 124.52684021]
[39.93720627 130.77310181]
[24.78136063 127.44445038]
[14.50175858 115.82079315]
[13.05111504 100.37167358]
[20.98723221 87.03759003]
[35.25851059 80.94577789]
[50.37735748 84.43865967]
[60.53025818 96.17314148]
[75.46456909 94.77084351]
[86.55588531 84.67218781]
[89.34820557 69.93438721]
[92.14053345 55.19657898]
[94.93285370 40.45877457]
[97.72518158 25.72096825]
[93.56729126 11.30875111]
[83.35381317 0.32308659]
[73.14033508 -10.66257858]
[62.92685318 -21.64824295]
[52.71337509 -32.63390732]
[42.49989319 -43.61957169]
[32.28641510 -54.60523605]
[22.07293320 -65.59090424]
[11.85945415 -76.57656860]
[-3.96634698 -80.87494659]
[-7.89457512 -96.79666138]
[4.11579370 -107.96282196]
[19.70952225 -102.88663483]
[22.84511948 -86.79004669]
[33.05859756 -75.80438232]
[43.27207947 -64.81871796]
[53.48555756 -53.83305359]
[63.69903946 -42.84738922]
[73.91252136 -31.86172295]
[84.12599945 -20.87605858]
[94.33947754 -9.89039326]
[104.55295563 1.09527147]
[100.85659027 -13.44215965]
[97.16023254 -27.97958946]
[87.41699219 -39.38438797]
[83.22283173 -53.78608704]
[85.31915283 -68.63887787]
[93.33538055 -81.31720734]
[105.85447693 -89.57991028]
[120.66342163 -91.96636200]
[135.14440918 -88.05471802]
[146.73760986 -78.53643799]
[153.39367676 -65.09409332]
[153.93600464 -50.10389709]
[148.26872253 -36.21570206]
[137.39439392 -25.88499641]
[132.20846558 -11.80997849]
[127.02252960 2.26503921]
[138.32153320 -7.60068417]
[149.62054443 -17.46640778]
[146.25900269 -33.62433624]
[151.45681763 -49.18962860]
[163.71191406 -59.96192551]
[179.63146973 -63.08441162]
[194.87080383 -57.80099106]
[205.96211243 -67.89964294]
[217.05343628 -77.99829102]
[221.51620483 -93.77852631]
[237.47792053 -97.54091644]
[248.51853943 -85.41503906]
[243.28041077 -69.87496185]
[227.15208435 -66.90697479]
[216.06076050 -56.80832672]
[204.96945190 -46.70967865]
[208.75968933 -33.55317688]
[206.48701477 -19.98431015]
[198.54048157 -8.67235565]
[186.43095398 -1.86762297]
[172.50415039 -0.95389563]
[159.48626709 -6.16740227]
[148.18725586 3.69832087]
[136.88824463 13.56404400]
[134.02015686 18.49943733]
[130.35639954 22.55052948]
[126.12838745 25.60606766]
[121.57846832 27.61020470]
[116.94751740 28.56218147]
[112.46298981 28.51329231]
[109.67066193 43.25109863]
[106.87833405 57.98890305]
[104.08601379 72.72670746]
[101.29368591 87.46451569]
[105.64093781 86.28678131]
[110.69255829 86.71418762]
[115.85013580 89.02283478]
[120.42591858 93.26957703]
[123.72092438 99.26712799]
[125.10883331 106.58625031]
[124.11660004 114.58577728]
[120.49272156 122.46859741]
[114.25515747 129.35855103]
[114.56721497 144.35530090]
[123.34029388 153.86775208]
[123.25586700 166.40617371]
[114.90731049 175.21575928]
[114.90731049 190.21575928]
[114.90731049 205.21575928]
[114.90731049 220.21575928]
[114.90731049 235.21575928]
[114.90731049 250.21575928]
[114.90731049 265.21575928]
[114.90731049 280.21575928]
[114.90731049 295.21575928]
[114.90731049 310.21575928]
[129.44718933 314.27706909]
[142.35157776 322.11157227]
[152.66285706 333.13790894]
[159.61589050 346.53784180]
[162.69468689 361.31701660]
[161.67079163 376.37869263]
[156.62019348 390.60522461]
[147.91766357 402.94088745]
[136.20899963 412.47030640]
[122.36306763 418.48632812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[30 41]
[31 40]
[42 118]
[43 117]
[44 116]
[45 115]
[46 114]
[47 68]
[48 67]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[55 60]
[84 108]
[85 107]
[86 106]
[91 100]
[92 99]
[93 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
