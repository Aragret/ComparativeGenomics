%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAUACUAGGGGGGGGGGGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACAxxxxxxxxxxCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCACCCCCCCCCCUCCUCAUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[138.19953918 481.18377686]
[124.03894043 476.02877808]
[111.44919586 467.74655151]
[101.10925293 456.78378296]
[93.57674408 443.73165894]
[89.25788116 429.29406738]
[88.38556671 414.24960327]
[91.00685883 399.40960693]
[96.98038483 385.57437134]
[105.98400879 373.49002075]
[117.53216553 363.80822754]
[131.00207520 357.05114746]
[145.66734314 353.58319092]
[145.66734314 338.58319092]
[145.66734314 323.58319092]
[145.66734314 308.58319092]
[145.66734314 293.58319092]
[145.66734314 278.58319092]
[145.66734314 263.58319092]
[145.66734314 248.58319092]
[145.66734314 233.58319092]
[145.66734314 218.58319092]
[142.35069275 203.95445251]
[135.88160706 190.42112732]
[129.41250610 176.88780212]
[122.94340515 163.35449219]
[110.47371674 155.20855713]
[111.50283051 139.42086792]
[105.03372955 125.88754272]
[98.56463623 112.35421753]
[88.01144409 115.25749969]
[75.26880646 109.15338898]
[60.91194153 104.80821228]
[46.55508423 100.46303558]
[31.10527611 103.87097931]
[21.16502953 92.77860260]
[6.80816889 88.43342590]
[-2.02904010 100.72905731]
[-14.38125134 109.48699951]
[-28.90858841 113.75726318]
[-44.03523636 113.07664490]
[-58.12036896 107.51896667]
[-69.63613892 97.68708801]
[-77.33339691 84.64749908]
[-80.37719727 69.81462860]
[-78.43738556 54.79744339]
[-71.72436523 41.22489548]
[-60.96632767 30.56922722]
[-47.33021164 23.98628998]
[-32.29516602 22.19015121]
[-17.49207687 25.37564278]
[-4.52667904 33.19722748]
[5.19464254 44.80647278]
[10.61739063 58.94410324]
[11.15334606 74.07656860]
[25.51020622 78.42174530]
[39.93311310 74.70300293]
[50.90026093 86.10617065]
[65.25711823 90.45135498]
[79.61398315 94.79653168]
[91.28709412 85.37642670]
[90.07232666 70.42569733]
[86.23873138 62.06838226]
[88.98758698 55.16016769]
[88.07607269 40.18788910]
[87.16455841 25.21560860]
[72.47240448 21.66146278]
[59.48143005 13.93319607]
[49.34679413 2.71800351]
[42.96965790 -10.98686886]
[40.91706848 -25.96279144]
[43.37154388 -40.87811661]
[50.11483383 -54.40658569]
[60.54732895 -65.34525299]
[73.74137878 -72.72146606]
[88.52378082 -75.87932587]
[103.58008575 -74.53804779]
[117.57150269 -68.81688690]
[129.25392151 -59.22457886]
[137.58856201 -46.61405563]
[141.83428955 -32.10663986]
[141.61360168 -16.99231911]
[136.94610596 -2.61504841]
[128.24684143 9.74675369]
[116.28932953 18.99388504]
[102.13683319 24.30409622]
[103.04834747 39.27637482]
[103.95986176 54.24865341]
[105.02305603 69.21092987]
[106.23783112 84.16165924]
[110.39642334 69.74964905]
[120.21699524 58.41137314]
[133.88792419 52.23840332]
[148.88735962 52.36946869]
[162.44833374 58.78038788]
[172.06925964 70.28854370]
[175.97538757 84.77102661]
[173.44612122 99.55625153]
[164.94805908 111.91678619]
[152.04882812 119.57249451]
[137.12794495 121.11111450]
[122.93787384 116.24883270]
[112.09795380 105.88512421]
[118.56705475 119.41844177]
[125.03614807 132.95176697]
[137.96855164 142.06568909]
[136.47673035 156.88539124]
[142.94583130 170.41871643]
[149.41491699 183.95202637]
[155.88401794 197.48535156]
[157.25393677 182.54803467]
[162.37588501 168.44961548]
[170.91339111 156.11628723]
[182.30557251 146.35829163]
[195.80400085 139.81671143]
[210.52189636 136.92126465]
[225.49235535 137.86221313]
[239.73188782 142.57769775]
[252.30500793 150.75796509]
[262.38571167 161.86558533]
[269.31176758 175.17083740]
[272.62814331 189.79963684]
[272.11694336 204.79092407]
[267.81179810 219.15983582]
[259.99551392 231.96240234]
[249.18159485 242.35754395]
[236.08045959 249.66235352]
[221.55279541 253.39692688]
[206.55300903 253.31591797]
[192.06652832 249.42465210]
[179.04505920 241.97877502]
[168.34402466 231.46743774]
[160.66734314 218.58319092]
[160.66734314 233.58319092]
[160.66734314 248.58319092]
[160.66734314 263.58319092]
[160.66734314 278.58319092]
[160.66734314 293.58319092]
[160.66734314 308.58319092]
[160.66734314 323.58319092]
[160.66734314 338.58319092]
[160.66734314 353.58319092]
[175.33259583 357.05114746]
[188.80252075 363.80822754]
[200.35067749 373.49002075]
[209.35429382 385.57437134]
[215.32781982 399.40960693]
[217.94911194 414.24960327]
[217.07679749 429.29406738]
[212.75793457 443.73165894]
[205.22541809 456.78378296]
[194.88548279 467.74655151]
[182.29574585 476.02877808]
[168.13513184 481.18377686]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 110]
[24 109]
[25 108]
[26 107]
[28 105]
[29 104]
[30 103]
[32 60]
[33 59]
[34 58]
[36 56]
[37 55]
[61 90]
[62 89]
[64 88]
[65 87]
[66 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
