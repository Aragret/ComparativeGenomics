%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCUCCUCCGGGGGGGGGGGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAxxxxxxxxxxUCGCUCAUUGCAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCCCCCCCCCCCAUUCUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[76.38145447 710.69702148]
[62.35950851 705.14404297]
[50.15955353 696.27770996]
[40.54848099 684.65539551]
[34.13045502 671.00769043]
[31.30891800 656.19250488]
[32.26123428 641.14111328]
[36.92753983 626.79968262]
[45.01450729 614.06976318]
[56.01378250 603.75146484]
[69.23394012 596.49346924]
[83.84395599 592.75207520]
[83.84395599 577.75207520]
[83.84395599 562.75207520]
[83.84395599 547.75207520]
[83.84395599 532.75207520]
[83.84395599 517.75207520]
[83.84395599 502.75204468]
[83.84395599 487.75204468]
[83.84395599 472.75204468]
[83.84395599 457.75204468]
[83.84395599 442.75204468]
[83.84395599 427.75204468]
[71.03615570 422.33740234]
[61.23666763 412.41085815]
[55.95473480 399.45397949]
[56.02182007 385.41864014]
[61.46088791 372.43280029]
[71.47792816 362.47799683]
[84.57765961 357.08694458]
[84.88563538 342.09008789]
[85.19361877 327.09326172]
[85.50159454 312.09643555]
[85.80957031 297.09957886]
[71.67036438 293.75341797]
[58.53628159 287.52551270]
[46.98764801 278.68829346]
[37.53532028 267.62945557]
[30.59810448 254.83505249]
[26.48417473 240.86816406]
[25.37740135 226.34402466]
[27.32912827 211.90298462]
[32.25579834 198.18226624]
[39.94252396 185.78785706]
[50.05246735 175.26768494]
[62.14158249 167.08749390]
[75.67814636 161.61013794]
[90.06610870 159.07954407]
[90.68193817 144.09219360]
[91.29776001 129.10484314]
[91.91358948 114.11748505]
[84.53608704 105.05576324]
[85.13565826 93.38601685]
[93.40301514 85.12810516]
[94.32643127 70.15655518]
[95.24983978 55.18500519]
[94.94186401 40.18816757]
[93.40457153 25.26715088]
[91.86727905 10.34613514]
[90.32998657 -4.57488155]
[82.19503784 -9.55599117]
[77.36776733 -17.62252426]
[76.83877563 -26.86981964]
[80.60081482 -35.18236542]
[87.67952728 -40.71775436]
[87.06369781 -55.70510864]
[86.44787598 -70.69245911]
[71.99533081 -75.26409149]
[59.97986221 -84.50553894]
[51.85239792 -97.30084991]
[48.59436417 -112.10494232]
[50.59918976 -127.13013458]
[57.62477875 -140.56207275]
[68.82275391 -150.77877808]
[82.84091187 -156.54653931]
[97.98648834 -157.16886902]
[112.43058777 -152.57060242]
[124.42900085 -143.30703735]
[132.53286743 -130.49676514]
[135.76362610 -115.68669891]
[133.73110962 -100.66522217]
[126.68077850 -87.24625397]
[115.46398926 -77.05020142]
[101.43522644 -71.30828857]
[102.05105591 -56.32093430]
[102.66687775 -41.33358002]
[115.25286865 -25.01843071]
[105.25100708 -6.11217403]
[106.78829956 8.80884266]
[108.32559204 23.72985840]
[109.86288452 38.65087509]
[118.94128418 26.71008301]
[133.25802612 22.23448563]
[147.52104187 26.87845039]
[156.45812988 38.92537689]
[156.76577759 53.92222214]
[148.33026123 66.32553101]
[134.26969910 71.55052948]
[119.78146362 67.66584778]
[110.22138977 56.10842133]
[109.29798126 71.07997131]
[108.37456512 86.05152130]
[116.24797058 100.83479309]
[106.90093994 114.73331451]
[106.28511810 129.72065735]
[105.66928864 144.70802307]
[105.05346680 159.69537354]
[120.03039551 163.72409058]
[133.73632812 170.96777344]
[145.49139404 181.06362915]
[154.71328735 193.50747681]
[160.94606018 207.67890930]
[163.88273621 222.87226868]
[163.38035583 238.33171082]
[159.46694946 253.28889465]
[152.34005737 267.00106812]
[142.35665894 278.78811646]
[130.01536560 288.06604004]
[115.93150330 294.37612915]
[100.80641174 297.40756226]
[100.49842834 312.40438843]
[100.19045258 327.40124512]
[99.88247681 342.39807129]
[99.57450104 357.39492798]
[114.12205505 364.61697388]
[124.04014587 377.40518188]
[127.39106750 393.17864990]
[123.55609131 408.78170776]
[113.34898376 421.11517334]
[98.84395599 427.75204468]
[98.84395599 442.75204468]
[98.84395599 457.75204468]
[98.84395599 472.75204468]
[98.84395599 487.75204468]
[98.84395599 502.75204468]
[98.84395599 517.75207520]
[98.84395599 532.75207520]
[98.84395599 547.75207520]
[98.84395599 562.75207520]
[98.84395599 577.75207520]
[98.84395599 592.75207520]
[113.45396423 596.49346924]
[126.67412567 603.75146484]
[137.67340088 614.06976318]
[145.76036072 626.79968262]
[150.42666626 641.14111328]
[151.37898254 656.19250488]
[148.55744934 671.00769043]
[142.13941956 684.65539551]
[132.52835083 696.27770996]
[120.32839203 705.14404297]
[106.30644989 710.69702148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[30 124]
[31 123]
[32 122]
[33 121]
[34 120]
[48 107]
[49 106]
[50 105]
[51 104]
[54 102]
[55 101]
[56 100]
[57 91]
[58 90]
[59 89]
[60 88]
[65 86]
[66 85]
[67 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
