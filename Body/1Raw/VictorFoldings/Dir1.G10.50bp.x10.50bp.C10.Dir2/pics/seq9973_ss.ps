%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCUCUCUAGGGGGGGGGGUACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAAxxxxxxxxxxAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCUUUUAUAGUAAAGACCCCCCCCCCUACCUCUUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 369.01312256]
[71.19830322 362.99710083]
[59.48964310 353.46768188]
[50.78712082 341.13201904]
[45.73651886 326.90548706]
[44.71262741 311.84381104]
[47.79142761 297.06463623]
[54.74444962 283.66473389]
[65.05573273 272.63839722]
[77.96011353 264.80389404]
[92.50000000 260.74255371]
[92.50000000 245.74256897]
[92.50000000 230.74256897]
[92.50000000 215.74256897]
[92.50000000 200.74256897]
[92.50000000 185.74256897]
[92.50000000 170.74256897]
[92.50000000 155.74256897]
[92.50000000 140.74256897]
[92.50000000 125.74256897]
[92.50000000 110.74256897]
[91.87602234 95.75555420]
[90.62915039 80.80746460]
[89.38227081 65.85937500]
[88.13539886 50.91128922]
[73.13294983 51.19813919]
[58.14295197 50.52318192]
[43.22699738 48.88919830]
[28.44637680 46.30289841]
[13.86183071 42.77491379]
[-0.46671033 38.31973648]
[-14.48036575 32.95568085]
[-28.12155151 26.70478058]
[-41.33421326 19.59272957]
[-54.06405258 11.64874840]
[-66.25876617 2.90548348]
[-77.86823273 -6.60113811]
[-88.84475708 -16.83205032]
[-99.14323425 -27.74521446]
[-108.72133636 -39.29578400]
[-117.53970337 -51.43629074]
[-125.56211090 -64.11685181]
[-132.75558472 -77.28536224]
[-139.09056091 -90.88770294]
[-144.54103088 -104.86798096]
[-149.08456421 -119.16874695]
[-152.70251465 -133.73124695]
[-155.37998962 -148.49562073]
[-157.10601807 -163.40119934]
[-157.87348938 -178.38674927]
[-157.67924500 -193.39068604]
[-156.52410889 -208.35133362]
[-154.41279602 -223.20724487]
[-151.35400391 -237.89735413]
[-147.36029053 -252.36131287]
[-142.44807434 -266.53967285]
[-136.63752747 -280.37417603]
[-129.95254517 -293.80795288]
[-122.42058563 -306.78582764]
[-114.07260895 -319.25445557]
[-104.94290924 -331.16262817]
[-95.06900024 -342.46136475]
[-84.49147034 -353.10427856]
[-73.25377655 -363.04760742]
[-61.40209579 -372.25051880]
[-48.98513412 -380.67517090]
[-36.05391312 -388.28695679]
[-22.66157150 -395.05456543]
[-8.86313915 -400.95025635]
[5.28467989 -405.94973755]
[19.72375107 -410.03250122]
[34.39473724 -413.18173218]
[49.23735809 -415.38455200]
[64.19061279 -416.63186646]
[79.19306183 -416.91854858]
[94.18305206 -416.24340820]
[109.09899139 -414.60925293]
[123.87958527 -412.02279663]
[138.46409607 -408.49465942]
[152.79258728 -404.03930664]
[166.80618286 -398.67510986]
[180.44729614 -392.42404175]
[193.65988159 -385.31185913]
[206.38963318 -377.36773682]
[218.58424377 -368.62432861]
[230.19360352 -359.11758423]
[241.17001343 -348.88656616]
[251.46836853 -337.97326660]
[261.04635620 -326.42260742]
[269.86459351 -314.28198242]
[277.88684082 -301.60134888]
[285.08016968 -288.43273926]
[291.41500854 -274.83035278]
[296.86532593 -260.85000610]
[301.40869141 -246.54917908]
[305.02645874 -231.98664856]
[307.70379639 -217.22224426]
[309.42965698 -202.31665039]
[310.19696045 -187.33108521]
[310.00256348 -172.32716370]
[308.84722900 -157.36651611]
[306.73577881 -142.51062012]
[303.67681885 -127.82054901]
[299.68295288 -113.35663605]
[294.77056885 -99.17833710]
[288.95986938 -85.34391022]
[282.27474976 -71.91019440]
[274.74264526 -58.93239975]
[266.39450073 -46.46385574]
[257.26467896 -34.55579758]
[247.39065552 -23.25716019]
[236.81300354 -12.61436939]
[225.57519531 -2.67116022]
[213.72341919 6.53160858]
[201.30636597 14.95611954]
[188.37506104 22.56775475]
[174.98263550 29.33523750]
[161.18414307 35.23075867]
[147.03627014 40.23008728]
[132.59715271 44.31268692]
[117.92613220 47.46177673]
[103.08348846 49.66441727]
[104.33036041 64.61250305]
[105.57723236 79.56059265]
[106.82411194 94.50867462]
[109.04457092 96.70036316]
[110.49360657 99.76873779]
[110.83758545 103.42081451]
[109.85923004 107.24191284]
[107.50000000 110.74256897]
[107.50000000 125.74256897]
[107.50000000 140.74256897]
[107.50000000 155.74256897]
[107.50000000 170.74256897]
[107.50000000 185.74256897]
[107.50000000 200.74256897]
[107.50000000 215.74256897]
[107.50000000 230.74256897]
[107.50000000 245.74256897]
[107.50000000 260.74255371]
[122.03988647 264.80389404]
[134.94427490 272.63839722]
[145.25555420 283.66473389]
[152.20857239 297.06463623]
[155.28736877 311.84381104]
[154.26348877 326.90548706]
[149.21287537 341.13201904]
[140.51036072 353.46768188]
[128.80169678 362.99710083]
[114.95575714 369.01312256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 125]
[23 124]
[24 123]
[25 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
