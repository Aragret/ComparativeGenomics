%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACGAGCAGGGGGGGGGGUAUUUCACCUCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUxxxxxxxxxxACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCCCCCCCCCCCACACGAGAA\
) } def
/len { sequence length } bind def

/coor [
[91.77781677 359.07073975]
[77.93187714 353.05471802]
[66.22321320 343.52529907]
[57.52069092 331.18963623]
[52.47008896 316.96310425]
[51.44619751 301.90142822]
[54.52499771 287.12225342]
[61.47801590 273.72232056]
[71.78929901 262.69598389]
[84.69367981 254.86148071]
[99.23356628 250.80017090]
[99.23356628 235.80017090]
[99.23356628 220.80017090]
[99.23356628 205.80017090]
[99.23356628 190.80017090]
[99.23356628 175.80017090]
[99.23356628 160.80017090]
[99.23356628 145.80017090]
[99.23356628 130.80017090]
[99.23356628 115.80017090]
[90.69340515 115.97887421]
[82.11876678 111.32213593]
[76.25001526 102.03636169]
[62.02323151 97.28254700]
[47.79645538 92.52873230]
[32.25554276 95.49362946]
[22.63644791 84.12163544]
[8.40966892 79.36781311]
[-3.50064945 84.42727661]
[-15.27907562 80.12755585]
[-20.76466942 69.30094147]
[-34.88947296 64.25218201]
[-49.01427460 59.20342636]
[-57.21599197 71.84575653]
[-68.11257172 82.25543213]
[-81.11637115 89.87106323]
[-95.52611542 94.28195190]
[-110.56470490 95.25022888]
[-125.42112732 92.72367859]
[-139.29418945 86.83854675]
[-151.43574524 77.91220856]
[-161.19100952 66.42606354]
[-168.03388977 52.99953079]
[-171.59535217 38.35669327]
[-171.68334961 23.28722191]
[-168.29312134 8.60379219]
[-161.60751343 -4.90173674]
[-151.98706055 -16.50102806]
[-139.95057678 -25.56854820]
[-126.14719391 -31.61529541]
[-111.32128906 -34.31517792]
[-96.27242279 -33.52259445]
[-81.81214905 -29.28028488]
[-68.72029114 -21.81703568]
[-57.70288849 -11.53532791]
[-49.35408783 1.01035821]
[-44.12413025 15.14344883]
[-42.29505920 30.10176468]
[-43.96551895 45.07862473]
[-29.84071541 50.12738037]
[-15.71591187 55.17613602]
[1.31999040 51.08004379]
[13.16348362 65.14103699]
[27.39026260 69.89485168]
[41.91358185 66.58993530]
[52.55027008 78.30195618]
[66.77704620 83.05577087]
[81.00382996 87.80958557]
[93.35540009 79.29849243]
[93.97937775 64.31147766]
[80.49098206 57.16823578]
[71.44461060 44.87490845]
[68.63642120 29.87234879]
[72.62399292 15.13932228]
[82.61557770 3.60108399]
[96.62734985 -2.45144010]
[111.87725067 -1.81651747]
[125.33741760 5.37978745]
[134.33531189 17.70864296]
[137.08439636 32.72214890]
[133.03883362 47.43935776]
[123.00189209 58.93815613]
[108.96639252 64.93545532]
[108.34241486 79.92247009]
[119.94375610 89.43083191]
[134.51646423 85.87606812]
[149.08915710 82.32130432]
[163.66186523 78.76654816]
[178.19680786 75.06038666]
[192.69239807 71.20322418]
[207.18798828 67.34606934]
[206.13645935 52.33637619]
[207.94479370 37.39896011]
[212.54762268 23.07379150]
[219.77856445 9.87872028]
[229.37623596 -1.70926189]
[240.99366760 -11.27125645]
[254.21090698 -18.46160316]
[268.55014038 -23.02037621]
[283.49307251 -24.78277969]
[298.49945068 -23.68510056]
[313.02682495 -19.76702118]
[326.55007935 -13.17017841]
[338.58032227 -4.13304234]
[348.68267822 7.01769876]
[356.49194336 19.87895393]
[361.72583008 33.98579407]
[364.19509888 48.82826996]
[363.81054688 63.86983490]
[360.58605957 78.56674194]
[354.63818359 92.38771057]
[346.18191528 104.83311462]
[335.52297974 115.45307159]
[323.04666138 123.86367035]
[309.20397949 129.76087952]
[294.49536133 132.93150330]
[279.45248413 133.26094055]
[264.61917114 130.73727417]
[250.53160095 125.45174408]
[237.69905090 117.59540558]
[226.58538818 107.45226288]
[217.59240723 95.38899231]
[211.04515076 81.84165955]
[196.54956055 85.69882202]
[182.05395508 89.55598450]
[176.36199951 94.34629822]
[167.21662903 93.33924866]
[152.64392090 96.89401245]
[138.07122803 100.44877625]
[123.49851990 104.00353241]
[114.23356628 115.80017090]
[114.23356628 130.80017090]
[114.23356628 145.80017090]
[114.23356628 160.80017090]
[114.23356628 175.80017090]
[114.23356628 190.80017090]
[114.23356628 205.80017090]
[114.23356628 220.80017090]
[114.23356628 235.80017090]
[114.23356628 250.80017090]
[128.77345276 254.86148071]
[141.67784119 262.69598389]
[151.98912048 273.72232056]
[158.94213867 287.12225342]
[162.02095032 301.90142822]
[160.99705505 316.96310425]
[155.94645691 331.18963623]
[147.24392700 343.52529907]
[135.53526306 353.05471802]
[121.68932343 359.07073975]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 68]
[24 67]
[25 66]
[27 64]
[28 63]
[31 61]
[32 60]
[33 59]
[69 84]
[70 83]
[85 130]
[86 129]
[87 128]
[88 127]
[89 125]
[90 124]
[91 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
