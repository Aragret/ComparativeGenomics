%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCGCCUUACCGGGGGGGGGGCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUxxxxxxxxxxCAGCAGCCAUUCAAGCAAUCCUAUACAACCGUAUCGGCGAUAUCGGUUUCCCCCCCCCCCAUCCUCGCCUUAGC\
) } def
/len { sequence length } bind def

/coor [
[84.06047058 421.32849121]
[70.04573059 415.84457397]
[57.37030792 407.73162842]
[46.52140808 397.30148315]
[37.91603088 384.95507812]
[31.88494873 371.16696167]
[28.65997887 356.46710205]
[28.36507988 341.42053223]
[31.01158714 326.60559082]
[36.49777603 312.59176636]
[44.61277008 299.91763306]
[55.04465485 289.07043457]
[67.39245605 280.46707153]
[81.18154907 274.43820190]
[95.88192749 271.21560669]
[95.58557129 256.21853638]
[95.28921509 241.22146606]
[94.99285889 226.22439575]
[94.69650269 211.22732544]
[94.40014648 196.23025513]
[94.10378265 181.23318481]
[93.80742645 166.23611450]
[93.51107025 151.23904419]
[93.21471405 136.24195862]
[75.09761810 131.12969971]
[60.63402176 116.94367981]
[45.84506989 119.45104980]
[31.05611801 121.95842743]
[16.26716805 124.46580505]
[12.08614540 139.14509583]
[1.94364667 150.55091858]
[-12.14652729 156.41859436]
[-27.38676071 155.58312988]
[-40.75109863 148.21038818]
[-49.58603668 135.76425171]
[-52.13739395 120.71588135]
[-47.89859772 106.05316162]
[-37.71126175 94.68737793]
[-23.59809113 88.87522125]
[-8.36126423 89.77069855]
[4.97393465 97.19600677]
[13.75979233 109.67685699]
[28.54874229 107.16947937]
[43.33769226 104.66210175]
[58.12664413 102.15472412]
[60.04780197 87.27826691]
[46.38102341 81.09609222]
[32.71424866 74.91392517]
[16.45731544 77.06896973]
[6.67840815 63.90443039]
[13.43722725 48.96286392]
[29.78087807 47.61487198]
[38.89641571 61.24715042]
[52.56319427 67.42932129]
[66.22997284 73.61148834]
[78.78981018 57.74435806]
[98.81494141 48.31084442]
[95.00427246 33.80295563]
[91.19360352 19.29507065]
[87.38293457 4.78718233]
[82.02125549 -9.22182751]
[75.17181396 -22.56668472]
[68.43292236 -28.81356621]
[68.32182312 -36.24354935]
[61.73738098 -49.72112656]
[55.15293503 -63.19870377]
[42.76747513 -74.77612305]
[50.46380997 -89.88250732]
[67.11038971 -86.66880798]
[68.63050842 -69.78314972]
[75.21495819 -56.30557251]
[81.79940033 -42.82799530]
[88.51667023 -29.41612244]
[95.36611176 -16.07126617]
[97.79362488 -30.87353706]
[106.72428894 -42.92522430]
[120.17920685 -49.55584717]
[135.17695618 -49.29616165]
[148.39425659 -42.20370102]
[156.90234375 -29.85005951]
[158.81594849 -14.97262192]
[153.71104431 -0.86801624]
[142.71879578 9.33838177]
[128.27493286 13.38498020]
[113.58001709 10.37511253]
[101.89082336 0.97651321]
[105.70149231 15.48440075]
[109.51216125 29.99228859]
[113.32283020 44.50017548]
[128.08628845 47.15353012]
[136.71015930 34.88043213]
[132.51315308 19.81659508]
[139.02793884 5.60070467]
[153.17843628 -1.05493021]
[168.28320312 2.99227762]
[177.21025085 15.83135986]
[175.74447632 31.40009499]
[164.57798767 42.34740448]
[148.98326111 43.50429916]
[140.35939026 55.77739716]
[143.51782227 62.57991409]
[156.97001648 55.94375992]
[170.42221069 49.30760574]
[179.48400879 37.35420227]
[194.39823914 38.95601273]
[200.71501160 52.56109619]
[192.31423950 64.98796082]
[177.33531189 64.19676971]
[163.58502197 70.19085693]
[149.83471680 76.18495178]
[152.99314880 82.98746490]
[167.93389893 84.31940460]
[182.87464905 85.65134430]
[197.81539917 86.98328400]
[212.75613403 88.31522369]
[227.70932007 89.49949646]
[242.67346191 90.53598785]
[257.63760376 91.57247925]
[272.60174561 92.60897064]
[288.82083130 87.67155457]
[298.05517578 101.88996887]
[286.94873047 114.69947815]
[271.56527710 107.57312012]
[256.60110474 106.53662872]
[241.63697815 105.50013733]
[226.67282104 104.46363831]
[219.74578857 107.15308380]
[211.42420959 103.25597382]
[196.48345947 101.92403412]
[181.54270935 100.59209442]
[166.60195923 99.26015472]
[151.66120911 97.92821503]
[135.17416382 126.90974426]
[108.21178436 135.94560242]
[108.50814056 150.94268799]
[108.80450439 165.93975830]
[109.10086060 180.93682861]
[109.39721680 195.93389893]
[109.69357300 210.93096924]
[109.98992920 225.92803955]
[110.28628540 240.92510986]
[110.58264160 255.92218018]
[110.87900543 270.91925049]
[125.69522095 273.55856323]
[139.71173096 279.03796387]
[152.38978577 287.14678955]
[163.24205017 297.57342529]
[171.85142517 309.91702271]
[177.88697815 323.70318604]
[181.11669922 338.40200806]
[181.41647339 353.44848633]
[178.77476501 368.26428223]
[173.29310608 382.27990723]
[165.18222046 394.95663452]
[154.75384521 405.80722046]
[142.40882874 414.41458130]
[128.62168884 420.44790649]
[113.92234802 423.67526245]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[26 45]
[27 44]
[28 43]
[29 42]
[46 55]
[47 54]
[48 53]
[57 89]
[58 88]
[59 87]
[60 86]
[61 74]
[62 73]
[64 72]
[65 71]
[66 70]
[90 100]
[91 99]
[111 132]
[112 131]
[113 130]
[114 129]
[115 128]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
