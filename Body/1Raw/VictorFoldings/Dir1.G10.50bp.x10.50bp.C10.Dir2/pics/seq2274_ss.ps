%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUUAACUGGGGGGGGGGGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGAAAAAACCUUGUAGAxxxxxxxxxxAGUCUAAUAGAAAACAACCGAAACCAAAUAAUUCAAGCACUGCUUAUUACCCCCCCCCCCAAUUUUACUG\
) } def
/len { sequence length } bind def

/coor [
[84.37402344 408.76239014]
[71.50074768 400.85952759]
[61.37645721 389.64901733]
[54.82187271 376.03967285]
[52.36835098 361.13476562]
[54.21479034 346.14251709]
[60.21150208 332.27832031]
[69.87236023 320.66604614]
[82.41420746 312.24710083]
[96.82033539 307.70394897]
[96.50827789 292.70718384]
[96.19622040 277.71041870]
[95.88416290 262.71368408]
[95.57210541 247.71691895]
[95.26004791 232.72016907]
[94.94799805 217.72341919]
[94.63594055 202.72666931]
[94.32388306 187.72990417]
[94.01182556 172.73315430]
[93.69976807 157.73640442]
[93.38771057 142.73965454]
[70.32412720 135.96571350]
[52.93085861 116.89156342]
[47.59085464 89.82158661]
[32.61113739 90.60142517]
[17.63142395 91.38127136]
[2.65171051 92.16111755]
[-12.32800388 92.94096375]
[-27.30771828 93.72080994]
[-42.28743362 94.50065613]
[-57.26714706 95.28050232]
[-72.24686432 96.06034088]
[-87.22657776 96.84018707]
[-97.61825562 108.74768829]
[-113.39160156 109.73617554]
[-125.18856812 99.21918488]
[-126.01023102 83.43626404]
[-115.36910248 71.75115204]
[-99.57838440 71.09640503]
[-88.00642395 81.86047363]
[-73.02670288 81.08062744]
[-58.04699326 80.30078125]
[-43.06727600 79.52094269]
[-28.08756256 78.74109650]
[-13.10784912 77.96125031]
[1.87186527 77.18140411]
[16.85157967 76.40155792]
[31.83129311 75.62171173]
[46.81100845 74.84186554]
[52.73097229 61.05948639]
[42.98331833 49.65846634]
[28.13449287 44.19742966]
[25.74463272 29.49580383]
[15.99698067 18.09478188]
[6.24932861 6.69376135]
[-9.52443695 5.71199179]
[-19.92117882 -6.19108820]
[-18.77269363 -21.95359230]
[-6.76035833 -32.22390747]
[8.98912239 -30.90883446]
[19.13186073 -18.78858757]
[17.65035057 -3.05389047]
[27.39800262 8.34713078]
[37.14565277 19.74815178]
[51.29726410 24.39371109]
[54.38434219 39.91081619]
[64.13199615 51.31183624]
[78.30854797 46.41028595]
[78.93252563 31.42326927]
[79.55650330 16.43625259]
[66.06810760 9.29300880]
[57.02173615 -3.00031805]
[54.21355057 -18.00288010]
[58.20111847 -32.73590469]
[68.19270325 -44.27414322]
[82.20447540 -50.32666779]
[97.45438385 -49.69174576]
[110.91454315 -42.49544144]
[119.91243744 -30.16658401]
[122.66152191 -15.15307999]
[118.61596680 -0.43587124]
[108.57901764 11.06293106]
[94.54351807 17.06023026]
[93.91954041 32.04724503]
[93.29557037 47.03426361]
[105.36249542 47.90861130]
[116.69025421 51.44340515]
[126.71269989 57.35184479]
[134.95428467 65.23155212]
[141.05244446 74.59046173]
[154.43873596 67.82234955]
[167.82501221 61.05423355]
[165.26818848 46.15611267]
[167.21791077 31.16644669]
[173.50079346 17.41811180]
[183.55818176 6.13359880]
[196.49578857 -1.68368185]
[211.16319275 -5.33862209]
[226.25619507 -4.50622797]
[240.43272400 0.73948538]
[252.43220520 9.93207264]
[261.18768311 22.25413513]
[265.92059326 36.61000061]
[266.21011353 51.72316360]
[262.03045654 66.24976349]
[253.75334167 78.89810181]
[242.11471558 88.54351044]
[228.14950562 94.32831573]
[213.09945679 95.73814392]
[198.30282593 92.64762115]
[185.07533264 85.33156586]
[174.59313965 74.44052124]
[161.20684814 81.20863342]
[147.82057190 87.97674561]
[149.22286987 102.91105652]
[163.63508606 107.06893921]
[178.04730225 111.22682953]
[192.45951843 115.38471985]
[209.35398865 113.96579742]
[215.39430237 129.80722046]
[201.84410095 139.99682617]
[188.30163574 129.79693604]
[173.88941956 125.63904572]
[159.47720337 121.48115540]
[145.06498718 117.32327271]
[138.29290771 127.28951263]
[129.46287537 135.01832581]
[119.24950409 140.12786865]
[108.38446808 142.42759705]
[108.69652557 157.42434692]
[109.00858307 172.42109680]
[109.32063293 187.41784668]
[109.63269043 202.41461182]
[109.94474792 217.41136169]
[110.25680542 232.40811157]
[110.56886292 247.40486145]
[110.88092041 262.40161133]
[111.19297028 277.39837646]
[111.50502777 292.39514160]
[111.81708527 307.39187622]
[126.39972687 311.33184814]
[139.28092957 319.22177124]
[149.41648865 330.42211914]
[155.98474121 344.02484131]
[158.45323181 358.92730713]
[156.62185669 373.92141724]
[150.63906860 387.79162598]
[140.98988342 399.41357422]
[128.45649719 407.84512329]
[114.05494690 412.40274048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 49]
[25 48]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[50 67]
[51 66]
[53 64]
[54 63]
[55 62]
[68 85]
[69 84]
[70 83]
[90 114]
[91 113]
[92 112]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
