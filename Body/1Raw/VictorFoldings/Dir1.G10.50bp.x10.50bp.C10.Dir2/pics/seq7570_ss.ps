%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAACAAAGGGGGGGGGGACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAAxxxxxxxxxxCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCCCCCCCCCCCUCAAAACAAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 537.63574219]
[71.01555634 532.08276367]
[58.81560135 523.21643066]
[49.20452881 511.59411621]
[42.78650284 497.94641113]
[39.96496582 483.13122559]
[40.91728210 468.07983398]
[45.58358765 453.73843384]
[53.67055511 441.00845337]
[64.66983032 430.69018555]
[77.88998413 423.43222046]
[92.50000000 419.69079590]
[92.50000000 404.69079590]
[92.50000000 389.69079590]
[92.50000000 374.69079590]
[92.50000000 359.69079590]
[92.50000000 344.69079590]
[92.50000000 329.69079590]
[92.50000000 314.69079590]
[92.50000000 299.69079590]
[92.50000000 284.69079590]
[77.77018738 281.95712280]
[63.78981781 276.56185913]
[51.03553772 268.68737793]
[39.94248962 258.60058594]
[30.88946152 246.64395142]
[24.18593407 233.22378540]
[20.06152153 218.79647827]
[18.65810013 203.85299683]
[20.02492142 188.90211487]
[24.11689758 174.45314026]
[30.79607773 160.99858093]
[39.83630371 148.99728394]
[50.93086243 138.85888672]
[63.70289993 130.92973328]
[77.71820831 125.48112488]
[92.50000000 122.69998169]
[92.50000000 107.69998169]
[89.74375916 92.95538330]
[84.32513428 78.96829987]
[75.65852356 66.72534943]
[64.26744843 56.96607208]
[52.87637711 47.20679855]
[41.48530197 37.44752502]
[30.09423065 27.68824959]
[18.70315552 17.92897415]
[7.31208229 8.16970062]
[-5.88034821 15.63532734]
[-20.83108521 18.13558388]
[-35.73475266 15.36855030]
[-48.79166412 7.66836166]
[-58.42512894 -4.03514767]
[-63.47186279 -18.32872200]
[-63.32244873 -33.48634338]
[-57.99492645 -47.67765427]
[-48.13262177 -59.18898773]
[-34.92645645 -66.63028717]
[-19.97113609 -69.10298920]
[-5.07259226 -66.30849457]
[7.97010517 -58.58425522]
[17.58198738 -46.86301422]
[22.60237122 -32.56016159]
[22.42502213 -17.40284348]
[17.07135582 -3.22137356]
[28.46243095 6.53790092]
[39.85350418 16.29717636]
[51.24457932 26.05644989]
[62.63565063 35.81572342]
[74.02672577 45.57500076]
[85.41780090 55.33427429]
[80.69258881 41.09796906]
[79.44451141 26.14998055]
[81.74343872 11.32719707]
[87.46065521 -2.54051352]
[96.27608490 -14.67674828]
[107.69618225 -24.40204430]
[121.08158112 -31.17191696]
[135.68287659 -34.60734940]
[150.68260193 -34.51600266]
[165.24096680 -30.90298843]
[178.54292297 -23.97059059]
[189.84371948 -14.10692596]
[198.51068115 -1.86422539]
[204.05857849 12.07208920]
[206.17680359 26.92177391]
[204.74674988 41.85345078]
[199.84851074 56.03115082]
[191.75628662 68.66111755]
[180.92315674 79.03623962]
[167.95561218 86.57566833]
[153.57968140 90.85728455]
[138.60018921 91.64137268]
[123.85578918 88.88405609]
[110.17197418 82.73968506]
[98.31221771 73.54967499]
[103.73084259 87.53675842]
[106.43154144 72.78189087]
[113.48370361 59.54304504]
[124.22180176 49.06959152]
[137.63247681 42.34992981]
[152.45013428 40.01819611]
[167.27641296 42.29444504]
[180.71215820 48.96386337]
[191.48937988 59.39704514]
[198.59104919 72.60939789]
[201.34696960 87.35405731]
[199.49703979 102.23954773]
[193.21586609 115.86109924]
[183.09619141 126.93324280]
[170.09303284 134.41107178]
[155.43351746 137.58889771]
[140.50108337 136.16680908]
[126.70491028 130.27905273]
[115.34698486 120.48121643]
[107.50000000 107.69998169]
[107.50000000 122.69998169]
[122.28179169 125.48112488]
[136.29710388 130.92973328]
[149.06913757 138.85888672]
[160.16369629 148.99728394]
[169.20391846 160.99858093]
[175.88310242 174.45314026]
[179.97508240 188.90211487]
[181.34190369 203.85299683]
[179.93847656 218.79647827]
[175.81407166 233.22378540]
[169.11053467 246.64395142]
[160.05751038 258.60058594]
[148.96446228 268.68737793]
[136.21018982 276.56185913]
[122.22981262 281.95712280]
[107.50000000 284.69079590]
[107.50000000 299.69079590]
[107.50000000 314.69079590]
[107.50000000 329.69079590]
[107.50000000 344.69079590]
[107.50000000 359.69079590]
[107.50000000 374.69079590]
[107.50000000 389.69079590]
[107.50000000 404.69079590]
[107.50000000 419.69079590]
[122.11001587 423.43222046]
[135.33016968 430.69018555]
[146.32945251 441.00845337]
[154.41641235 453.73843384]
[159.08271790 468.07983398]
[160.03503418 483.13122559]
[157.21350098 497.94641113]
[150.79547119 511.59411621]
[141.18440247 523.21643066]
[128.98443604 532.08276367]
[114.96250153 537.63574219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[37 116]
[38 115]
[39 96]
[40 95]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
