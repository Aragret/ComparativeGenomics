%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUGGCAUUGUGGGGGGGGGGAUUAGCAAACUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGxxxxxxxxxxAUUUCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUCCCCCCCCCCACUGGCAUUUU\
) } def
/len { sequence length } bind def

/coor [
[75.88993073 446.80654907]
[61.86798477 441.25354004]
[49.66802597 432.38720703]
[40.05695724 420.76489258]
[33.63893127 407.11718750]
[30.81739426 392.30200195]
[31.76971054 377.25064087]
[36.43601608 362.90921021]
[44.52297974 350.17926025]
[55.52225494 339.86099243]
[68.74241638 332.60299683]
[83.35242462 328.86157227]
[83.35242462 313.86157227]
[83.35242462 298.86157227]
[83.35242462 283.86157227]
[83.35242462 268.86157227]
[83.35242462 253.86157227]
[83.35242462 238.86157227]
[83.35242462 223.86157227]
[83.35242462 208.86157227]
[83.35242462 193.86157227]
[83.35242462 178.86157227]
[83.35242462 163.86157227]
[83.35242462 148.86157227]
[83.35242462 133.86157227]
[83.35242462 118.86156464]
[86.35595703 89.47781372]
[81.51614380 75.28005981]
[76.67632294 61.08230972]
[71.83650970 46.88455582]
[56.78694534 47.85713577]
[42.00994492 44.90321732]
[28.51162338 38.23004532]
[17.20945549 28.29789352]
[8.86990547 15.78831196]
[4.05645752 1.55737031]
[3.09153724 -13.42293262]
[6.03492641 -28.13105392]
[12.68009472 -41.56557083]
[22.56867981 -52.81335449]
[35.02210236 -61.11165619]
[30.18228531 -75.30941010]
[22.15528870 -87.98092651]
[11.38660908 -98.42293549]
[-29.22183037 -79.60778809]
[-42.21221161 -87.10778809]
[-55.20259094 -94.60778809]
[-68.19297028 -102.10778809]
[-83.99915314 -99.36112213]
[-95.90547943 -110.11374664]
[-94.77844238 -126.11716461]
[-81.48259735 -135.09492493]
[-66.21738434 -130.16004944]
[-60.69297409 -115.09816742]
[-47.70259094 -107.59816742]
[-34.71221161 -100.09816742]
[-21.72183037 -92.59816742]
[-16.39137459 -97.87417603]
[-0.40001202 -113.70219421]
[-7.76625156 -126.76889038]
[-15.13249111 -139.83558655]
[-22.49872971 -152.90228271]
[-35.54409790 -163.73069763]
[-28.75017357 -179.26385498]
[-11.94331360 -177.03544617]
[-9.43203545 -160.26852417]
[-2.06579614 -147.20182800]
[5.30044365 -134.13513184]
[12.66668320 -121.06843567]
[21.82861900 -109.19161224]
[32.59729767 -98.74960327]
[28.74464798 -113.24639893]
[28.54834366 -128.24511719]
[32.02026367 -142.83778381]
[38.95023346 -156.14099121]
[48.91873169 -167.34942627]
[61.32229996 -175.78456116]
[75.41006470 -180.93576050]
[90.32920837 -182.49118042]
[105.17655945 -180.35667419]
[119.05331421 -174.66143799]
[131.11941528 -165.75025940]
[140.64443970 -154.16259766]
[147.05174255 -140.59991455]
[149.95347595 -125.88325500]
[149.17395020 -110.90352631]
[144.76039124 -96.56754303]
[136.97994995 -83.74316406]
[126.30363464 -73.20673370]
[113.37776184 -65.59609222]
[98.98481750 -61.37196732]
[83.99610901 -60.79006577]
[69.31900024 -63.88562393]
[55.84199524 -70.47123718]
[44.38003922 -80.14922333]
[49.21985245 -65.95146942]
[64.14889526 -66.98747253]
[78.84865570 -64.12151337]
[92.31597137 -57.54306030]
[103.63016510 -47.69515228]
[112.01605988 -35.24455643]
[116.89702606 -21.03663063]
[117.93466187 -6.03793049]
[115.05225372 8.72954655]
[108.44039154 22.25800323]
[98.54437256 33.62261200]
[86.03426361 42.04473877]
[90.87407684 56.24249268]
[95.71389008 70.44024658]
[100.55371094 84.63800049]
[112.04437256 94.27980804]
[126.86685944 96.58068848]
[139.53936768 87.52279663]
[154.53869629 90.06735992]
[163.09591675 102.20447540]
[177.91839600 104.50534821]
[193.00634766 98.07997131]
[205.95050049 108.14878845]
[203.43501282 124.35385895]
[188.04759216 130.02479553]
[175.61752319 119.32783508]
[160.79502869 117.02695465]
[148.96110535 125.99877930]
[133.89622498 123.87651825]
[124.56598663 111.40316772]
[109.74349976 109.10229492]
[98.35242462 118.86156464]
[98.35242462 133.86157227]
[98.35242462 148.86157227]
[98.35242462 163.86157227]
[98.35242462 178.86157227]
[98.35242462 193.86157227]
[98.35242462 208.86157227]
[98.35242462 223.86157227]
[98.35242462 238.86157227]
[98.35242462 253.86157227]
[98.35242462 268.86157227]
[98.35242462 283.86157227]
[98.35242462 298.86157227]
[98.35242462 313.86157227]
[98.35242462 328.86157227]
[112.96244049 332.60299683]
[126.18260193 339.86099243]
[137.18186951 350.17926025]
[145.26884460 362.90921021]
[149.93515015 377.25064087]
[150.88746643 392.30200195]
[148.06591797 407.11718750]
[141.64790344 420.76489258]
[132.03683472 432.38720703]
[119.83686829 441.25354004]
[105.81492615 446.80654907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[26 127]
[27 110]
[28 109]
[29 108]
[30 107]
[41 96]
[42 95]
[43 71]
[44 70]
[45 57]
[46 56]
[47 55]
[48 54]
[59 69]
[60 68]
[61 67]
[62 66]
[111 126]
[112 125]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
