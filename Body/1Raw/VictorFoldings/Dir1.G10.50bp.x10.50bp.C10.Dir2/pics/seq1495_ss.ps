%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAAACUCAAAGGGGGGGGGGGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUxxxxxxxxxxACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCCCCCCCCCCCUAAAACUCACAG\
) } def
/len { sequence length } bind def

/coor [
[94.44915771 395.07385254]
[80.57649994 389.22210693]
[68.22386169 380.61361694]
[57.93125153 369.62472534]
[50.14862061 356.73580933]
[45.21618652 342.51031494]
[43.34957886 327.57009888]
[44.63039398 312.56832886]
[49.00264359 298.16079712]
[56.27519226 284.97732544]
[66.13011169 273.59426880]
[78.13658905 264.50921631]
[91.76975250 258.11932373]
[106.43361664 254.70396423]
[106.13726044 239.70689392]
[105.84090424 224.70982361]
[105.54454041 209.71275330]
[105.24818420 194.71568298]
[104.95182800 179.71861267]
[104.65547180 164.72154236]
[104.35911560 149.72445679]
[104.06275940 134.72738647]
[103.76639557 119.73031616]
[91.32530975 111.35061646]
[81.20252991 123.50955200]
[66.55043030 120.83273315]
[52.54141998 126.19441223]
[38.53240967 131.55609131]
[28.62529945 144.62442017]
[12.39020729 142.31059265]
[6.52840614 126.99486542]
[17.07001495 114.43276215]
[33.17073059 117.54708862]
[47.17973709 112.18540192]
[61.18874741 106.82372284]
[70.30951691 95.04828644]
[85.96363068 97.34160614]
[71.19738770 99.97943878]
[56.68659973 96.17984009]
[45.10806274 86.64372253]
[38.59767151 73.13021851]
[38.35639572 58.13216400]
[44.42874527 44.41623688]
[55.69455338 34.51262665]
[70.07561493 30.24824142]
[84.91906738 32.40973663]
[97.48672485 40.59838486]
[105.46024323 53.30361938]
[107.36874390 68.18170929]
[102.86169434 82.48545074]
[109.97344971 69.27851868]
[117.08521271 56.07159424]
[124.19696808 42.86466980]
[131.30873108 29.65774345]
[138.42048645 16.45081711]
[137.42637634 -1.91183591]
[152.65643311 -10.58460903]
[148.04772949 -25.46404266]
[155.18412781 -38.90005112]
[169.39779663 -43.20205307]
[176.24723816 -56.54690933]
[183.09667969 -69.89176178]
[183.15255737 -76.58914948]
[186.16139221 -81.48928833]
[190.48945618 -83.62055206]
[197.86076355 -96.68439484]
[205.23205566 -109.74823761]
[193.13638306 -118.65059662]
[182.20199585 -128.94606018]
[172.58834839 -140.48448181]
[164.43562317 -153.09759521]
[157.86273193 -166.60145569]
[152.96551514 -180.79914856]
[149.81538391 -195.48364258]
[148.45829773 -210.44076538]
[148.91401672 -225.45240784]
[151.17591858 -240.29968262]
[155.21101379 -254.76603699]
[160.96043396 -268.64050293]
[168.34037781 -281.72079468]
[177.24319458 -293.81613159]
[187.53906250 -304.75015259]
[199.07783508 -314.36337280]
[211.69125366 -322.51562500]
[225.19537354 -329.08801270]
[239.39324951 -333.98468018]
[254.07785034 -337.13427734]
[269.03503418 -338.49081421]
[284.04666138 -338.03451538]
[298.89382935 -335.77206421]
[313.36004639 -331.73641968]
[327.23431396 -325.98648071]
[340.31433105 -318.60604858]
[352.40933228 -309.70278931]
[363.34295654 -299.40649414]
[372.95574951 -287.86737061]
[381.10751343 -275.25366211]
[387.67938232 -261.74929810]
[392.57556152 -247.55122375]
[395.72457886 -232.86650085]
[397.08056641 -217.90928650]
[396.62371826 -202.89765930]
[394.36068726 -188.05056763]
[390.32452393 -173.58451843]
[384.57406616 -159.71046448]
[377.19314575 -146.63072205]
[368.28942871 -134.53605652]
[357.99273682 -123.60282135]
[346.45324707 -113.99046326]
[333.83920288 -105.83916473]
[320.33462524 -99.26778412]
[306.13635254 -94.37215424]
[291.45153809 -91.22367859]
[276.49426270 -89.86826324]
[261.48263550 -90.32566833]
[246.63563538 -92.58923340]
[232.16973877 -96.62594604]
[218.29589844 -102.37693024]
[210.92459106 -89.31309509]
[203.55329895 -76.24925232]
[196.44154358 -63.04232788]
[189.59210205 -49.69747162]
[182.74266052 -36.35261536]
[187.53361511 -22.29621696]
[180.77742004 -8.66506195]
[166.00129700 -3.73517013]
[169.40585327 7.90710735]
[163.76496887 19.09710693]
[151.62741089 23.56257439]
[144.51565552 36.76950073]
[137.40390015 49.97642517]
[130.29212952 63.18335342]
[123.18038177 76.39028168]
[116.06861877 89.59720612]
[118.76347351 119.43395996]
[119.05982971 134.43103027]
[119.35618591 149.42810059]
[119.65254211 164.42517090]
[119.94889832 179.42225647]
[120.24525452 194.41932678]
[120.54161835 209.41639709]
[120.83797455 224.41346741]
[121.13433075 239.41053772]
[121.43068695 254.40760803]
[136.21803284 257.24099731]
[150.09300232 263.08728027]
[162.44902039 271.69091797]
[172.74595642 282.67575073]
[180.53366089 295.56161499]
[185.47167969 309.78515625]
[187.34416199 324.72463989]
[186.06925964 339.72689819]
[181.70266724 354.13616943]
[174.43531799 367.32247925]
[164.58486938 378.70944214]
[152.58197021 387.79922485]
[138.95132446 394.19445801]
[124.28880310 397.61560059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 144]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 37]
[26 35]
[27 34]
[28 33]
[50 134]
[51 133]
[52 132]
[53 131]
[54 130]
[55 129]
[57 126]
[60 123]
[61 122]
[62 121]
[65 120]
[66 119]
[67 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
