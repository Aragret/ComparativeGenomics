%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGGUCUAGGGGGGGGGGUCACCCUAUUAACCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUxxxxxxxxxxGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCCCCCCCCCCCACAGCUCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 391.61633301]
[71.19830322 385.60031128]
[59.48964310 376.07089233]
[50.78712082 363.73522949]
[45.73651886 349.50869751]
[44.71262741 334.44702148]
[47.79142761 319.66784668]
[54.74444962 306.26791382]
[65.05573273 295.24157715]
[77.96011353 287.40707397]
[92.50000000 283.34576416]
[92.50000000 268.34576416]
[92.50000000 253.34576416]
[92.50000000 238.34576416]
[92.50000000 223.34576416]
[92.50000000 208.34576416]
[92.50000000 193.34576416]
[92.50000000 178.34576416]
[92.50000000 163.34576416]
[92.50000000 148.34576416]
[92.50000000 133.34576416]
[92.50000000 118.34577179]
[78.48177338 99.08274078]
[93.06348419 77.80265045]
[78.29742432 80.44151306]
[63.53137207 83.08037567]
[60.30979156 97.93601227]
[51.64432907 110.42513275]
[38.85640335 118.64324188]
[23.89607430 121.33714294]
[9.04469204 118.09602356]
[-3.43302107 109.41413879]
[-11.63430214 96.61540985]
[-14.30851555 81.65155029]
[-11.04786396 66.80444336]
[-2.34957242 54.33816147]
[10.45993233 46.15372467]
[25.42729378 43.49919891]
[40.27009964 46.77937698]
[52.72492599 55.49406052]
[60.89250946 68.31432343]
[75.65856171 65.67545319]
[90.42462158 63.03659439]
[101.41028595 52.82311249]
[105.11644745 38.28817749]
[108.82260895 23.75324059]
[112.52877045 9.21830463]
[111.07317352 4.07040882]
[111.71646118 -0.63475436]
[113.92479706 -4.15965366]
[116.94612885 -6.09331512]
[121.55169678 -20.36877632]
[126.15725708 -34.64423752]
[130.76281738 -48.91969681]
[135.36839294 -63.19515610]
[138.77136230 -77.80404663]
[140.94819641 -92.64525604]
[133.87232971 -103.47973633]
[136.03288269 -115.83088684]
[145.72560120 -123.13558960]
[148.21072388 -137.92829895]
[150.69583130 -152.72100830]
[153.18095398 -167.51371765]
[155.66607666 -182.30641174]
[141.59457397 -187.64297485]
[128.83471680 -195.62248230]
[117.87696838 -205.93820190]
[109.14251709 -218.19363403]
[102.96708679 -231.91770935]
[99.58805084 -246.58291626]
[99.13529205 -261.62554932]
[101.62619781 -276.46743774]
[106.96504211 -290.53808594]
[114.94660187 -303.29666138]
[125.26409149 -314.25271606]
[137.52093506 -322.98519897]
[151.24601746 -329.15841675]
[165.91177368 -332.53506470]
[180.95449829 -332.98538208]
[195.79597473 -330.49209595]
[209.86575317 -325.15097046]
[222.62303162 -317.16732788]
[233.57742310 -306.84808350]
[242.30790710 -294.58981323]
[248.47889709 -280.86373901]
[251.85317993 -266.19744873]
[252.30108643 -251.15464783]
[249.80535889 -236.31356812]
[244.46197510 -222.24464417]
[236.47627258 -209.48867798]
[226.15524292 -198.53593445]
[213.89556885 -189.80743408]
[200.16848755 -183.63867188]
[185.50164795 -180.26675415]
[170.45878601 -179.82130432]
[167.97366333 -165.02859497]
[165.48854065 -150.23588562]
[163.00343323 -135.44317627]
[160.51831055 -120.65047455]
[167.54754639 -104.60086823]
[155.78941345 -90.46842194]
[153.61256409 -75.62721252]
[165.36242676 -84.95142365]
[180.34121704 -85.74880219]
[193.01458740 -77.72472382]
[198.69996643 -63.84392548]
[195.29672241 -49.23509598]
[184.06230164 -39.29589844]
[169.14758301 -37.69866943]
[156.06326294 -45.03355408]
[149.64384460 -58.58959198]
[145.03828430 -44.31413269]
[140.43272400 -30.03867149]
[135.82714844 -15.76321125]
[131.22158813 -1.48775065]
[127.06370544 12.92446518]
[123.35754395 27.45940208]
[119.65138245 41.99433899]
[115.94522095 56.52927399]
[122.57371521 69.98523712]
[136.35609436 75.90520477]
[153.29577637 76.60080719]
[157.31671143 93.07103729]
[142.60325623 101.49425507]
[130.43614197 89.68758392]
[116.65375519 83.76762390]
[121.94930267 97.33513641]
[118.07873535 110.61567688]
[107.50000000 118.34577179]
[107.50000000 133.34576416]
[107.50000000 148.34576416]
[107.50000000 163.34576416]
[107.50000000 178.34576416]
[107.50000000 193.34576416]
[107.50000000 208.34576416]
[107.50000000 223.34576416]
[107.50000000 238.34576416]
[107.50000000 253.34576416]
[107.50000000 268.34576416]
[107.50000000 283.34576416]
[122.03988647 287.40707397]
[134.94427490 295.24157715]
[145.25555420 306.26791382]
[152.20857239 319.66784668]
[155.28736877 334.44702148]
[154.26348877 349.50869751]
[149.21287537 363.73522949]
[140.51036072 376.07089233]
[128.80169678 385.60031128]
[114.95575714 391.61633301]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 43]
[25 42]
[26 41]
[44 119]
[45 118]
[46 117]
[47 116]
[51 115]
[52 114]
[53 113]
[54 112]
[55 111]
[56 102]
[57 101]
[60 99]
[61 98]
[62 97]
[63 96]
[64 95]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
