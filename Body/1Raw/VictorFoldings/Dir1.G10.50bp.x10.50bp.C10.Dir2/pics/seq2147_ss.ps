%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGACCCCCGGGGGGGGGGGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGxxxxxxxxxxUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUACCCCCCCCCCUAAAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[134.00436401 472.78222656]
[120.15842438 466.76620483]
[108.44976807 457.23678589]
[99.74723816 444.90112305]
[94.69664001 430.67459106]
[93.67274475 415.61291504]
[96.75154877 400.83374023]
[103.70456696 387.43380737]
[114.01585388 376.40750122]
[126.92023468 368.57296753]
[141.46011353 364.51165771]
[141.46011353 349.51165771]
[141.46011353 334.51165771]
[141.46011353 319.51165771]
[141.46011353 304.51165771]
[141.46011353 289.51165771]
[141.46011353 274.51165771]
[141.46011353 259.51165771]
[141.46011353 244.51167297]
[141.46011353 229.51167297]
[138.51463318 214.80371094]
[132.73837280 200.96049500]
[126.96208954 187.11726379]
[121.18582153 173.27404785]
[108.66616821 170.07170105]
[100.16541290 160.08113098]
[98.97368622 146.82188416]
[105.75231171 135.13822937]
[100.26528168 121.17784119]
[88.09208679 117.51493073]
[80.20886993 107.54203796]
[79.45566559 94.85202789]
[86.10383606 84.01663971]
[80.90841675 69.94512177]
[69.50856018 63.82164001]
[65.49116516 51.94394684]
[70.50271606 40.88991165]
[65.60116577 26.71335220]
[60.69961166 12.53679466]
[55.79806137 -1.63976371]
[50.89651108 -15.81632137]
[45.99496078 -29.99287987]
[41.09341049 -44.16943741]
[35.03039551 -57.88949203]
[27.84788704 -71.05807495]
[20.66537857 -84.22665405]
[10.56672859 -95.31797028]
[-1.87271178 -103.70011902]
[-14.31215191 -112.08226013]
[-30.27066994 -110.43749237]
[-41.40327072 -121.98932648]
[-39.16997528 -137.87617493]
[-25.28397751 -145.91101074]
[-10.39742565 -139.93019104]
[-5.93000889 -124.52169800]
[6.50943136 -116.13955688]
[18.94887161 -107.75741577]
[12.65511799 -121.37316132]
[9.87561893 -136.11338806]
[10.77855873 -151.08619690]
[15.30930233 -165.38557434]
[23.19369888 -178.14630127]
[33.95467758 -188.59625244]
[46.94110107 -196.10310364]
[61.36718369 -200.21261597]
[76.36002350 -200.67614746]
[91.01241302 -197.46565247]
[104.43776703 -190.77536011]
[115.82373810 -181.01013184]
[124.48136902 -168.76083374]
[129.88679504 -154.76864624]
[131.71295166 -139.88021851]
[129.84933472 -124.99643707]
[124.40870667 -111.01789856]
[115.72027588 -98.79042053]
[104.30976868 -89.05387115]
[90.86762238 -82.39739990]
[76.20719147 -79.22378540]
[61.21557236 -79.72504425]
[46.79987717 -83.87085724]
[33.83396149 -91.40916443]
[41.01646805 -78.24058533]
[48.19897842 -65.07199860]
[51.98312378 -79.58683014]
[63.47365189 -89.22880554]
[78.42504120 -90.43541718]
[91.31305695 -82.76084137]
[97.37582397 -69.04067993]
[94.37327576 -54.34426117]
[83.41479492 -44.10161972]
[68.54932404 -42.09720612]
[55.26996613 -49.07098770]
[60.17151642 -34.89443207]
[65.07306671 -20.71787262]
[69.97461700 -6.54131460]
[74.87616730 7.63524342]
[79.77771759 21.81180191]
[84.67927551 35.98836136]
[98.53536987 46.71255875]
[94.97993469 64.74971008]
[100.17535400 78.82122803]
[115.29952240 85.35432434]
[121.16624451 100.74924469]
[114.22567749 115.69080353]
[119.71270752 129.65119934]
[135.85356140 136.31529236]
[142.08850098 152.26551819]
[135.02903748 167.49778748]
[140.80531311 181.34100342]
[146.58158875 195.18421936]
[152.35784912 209.02743530]
[154.66394043 194.20576477]
[161.16123962 180.68595886]
[171.29356384 169.62539673]
[184.19352722 161.97091675]
[198.75680542 158.37777710]
[213.73674011 159.15357971]
[227.85093689 164.23191833]
[239.89115906 173.17803955]
[248.82669067 185.22612000]
[253.89260864 199.34477234]
[254.65524292 214.32537842]
[251.04931641 228.88549805]
[243.38349915 241.77871704]
[232.31402588 251.90132141]
[218.78851318 258.38674927]
[203.96482849 260.67977905]
[189.11193848 258.58416748]
[175.50132751 252.27931213]
[164.29815674 242.30490112]
[156.46011353 229.51167297]
[156.46011353 244.51167297]
[156.46011353 259.51165771]
[156.46011353 274.51165771]
[156.46011353 289.51165771]
[156.46011353 304.51165771]
[156.46011353 319.51165771]
[156.46011353 334.51165771]
[156.46011353 349.51165771]
[156.46011353 364.51165771]
[171.00000000 368.57296753]
[183.90438843 376.40750122]
[194.21566772 387.43380737]
[201.16870117 400.83374023]
[204.24749756 415.61291504]
[203.22360229 430.67459106]
[198.17300415 444.90112305]
[189.47047424 457.23678589]
[177.76181030 466.76620483]
[163.91587830 472.78222656]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 111]
[22 110]
[23 109]
[24 108]
[28 105]
[29 104]
[33 101]
[34 100]
[37 98]
[38 97]
[39 96]
[40 95]
[41 94]
[42 93]
[43 92]
[44 83]
[45 82]
[46 81]
[47 57]
[48 56]
[49 55]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
