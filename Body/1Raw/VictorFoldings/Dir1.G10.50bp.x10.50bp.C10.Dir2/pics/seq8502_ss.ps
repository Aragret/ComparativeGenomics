%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUAAACCUAGGGGGGGGGGGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCxxxxxxxxxxAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACCCCCCCCCCCUAUUAACCUA\
) } def
/len { sequence length } bind def

/coor [
[79.29306793 430.54266357]
[65.27112579 424.98965454]
[53.07116699 416.12332153]
[43.46009445 404.50100708]
[37.04206848 390.85330200]
[34.22053146 376.03811646]
[35.17284775 360.98672485]
[39.83915329 346.64529419]
[47.92612076 333.91534424]
[58.92539597 323.59707642]
[72.14555359 316.33911133]
[86.75556946 312.59765625]
[86.75556946 297.59765625]
[86.75556946 282.59765625]
[86.75556946 267.59765625]
[86.75556946 252.59767151]
[86.75556946 237.59767151]
[86.75556946 222.59767151]
[86.75556946 207.59767151]
[86.75556946 192.59767151]
[86.75556946 177.59767151]
[84.80513000 175.50318909]
[83.59350586 172.48637390]
[83.48526764 168.83465576]
[84.73044586 164.96514893]
[87.42195892 161.37969971]
[88.65257263 146.43026733]
[89.88317871 131.48083496]
[76.98129272 123.73883057]
[68.84564972 111.08147430]
[53.94120026 112.77187347]
[39.03675079 114.46226501]
[29.38930893 126.98034668]
[13.70540333 128.92730713]
[1.29001951 119.14806366]
[-0.49101585 103.44445038]
[9.41895390 91.13314819]
[25.14052010 89.51824188]
[37.34635544 99.55782318]
[52.25080109 97.86742401]
[67.15525055 96.17702484]
[77.72325134 75.56356812]
[99.22386169 66.94261932]
[102.28225708 52.25772095]
[105.34065247 37.57282639]
[108.24813080 22.85730171]
[111.00437164 8.11270618]
[102.14517975 -2.08162928]
[100.81426239 -15.32586575]
[107.27593231 -26.73969650]
[118.96429443 -32.24736786]
[122.02268982 -46.93226624]
[125.08108521 -61.61716461]
[128.13948059 -76.30206299]
[131.19787598 -90.98696136]
[117.27591705 -85.40313721]
[104.12752533 -92.62254333]
[101.36685944 -107.36631012]
[111.01252747 -118.85374451]
[126.01158142 -118.68518066]
[135.39649963 -106.98448181]
[139.94380188 -121.27861023]
[144.49108887 -135.57273865]
[149.03837585 -149.86686707]
[153.58566284 -164.16099548]
[152.53056335 -170.78892517]
[154.69648743 -176.12715149]
[158.62422180 -178.94175720]
[163.75451660 -193.03715515]
[168.88482666 -207.13253784]
[156.06315613 -215.01858521]
[145.09162903 -225.32441711]
[136.41950989 -237.62805176]
[130.40194702 -251.42565918]
[127.28533173 -266.15222168]
[127.19729614 -281.20471191]
[130.14144897 -295.96670532]
[135.99722290 -309.83374023]
[144.52482605 -322.23797607]
[155.37506104 -332.67144775]
[168.10360718 -340.70690918]
[182.18927002 -346.01531982]
[197.05520630 -348.37933350]
[212.09271240 -347.70208740]
[226.68597412 -344.01135254]
[240.23741150 -337.45825195]
[252.19212341 -328.31112671]
[262.06054688 -316.94454956]
[269.43859863 -303.82397461]
[274.02413940 -289.48669434]
[275.62939453 -274.51980591]
[274.18865967 -259.53619385]
[269.76086426 -245.14939880]
[262.52737427 -231.94857788]
[252.78439331 -220.47430420]
[240.93087769 -211.19641113]
[227.45222473 -204.49485779]
[212.90037537 -200.64405823]
[197.87123108 -199.80168152]
[182.98020935 -202.00224304]
[177.84991455 -187.90684509]
[172.71960449 -173.81146240]
[167.87979126 -159.61370850]
[163.33250427 -145.31958008]
[158.78521729 -131.02545166]
[154.23793030 -116.73131561]
[149.69062805 -102.43718719]
[145.88278198 -87.92856598]
[142.82438660 -73.24366760]
[139.76599121 -58.55876923]
[136.70759583 -43.87387085]
[133.64920044 -29.18897247]
[143.45799255 -15.56213474]
[140.34443665 1.27940333]
[125.74897003 10.86894894]
[122.99272156 25.61354446]
[124.86670685 32.81079483]
[120.02555084 40.63122177]
[116.96715546 55.31611633]
[113.90876007 70.00101471]
[121.77047729 75.11146545]
[127.88155365 82.22328186]
[131.75057983 90.76457977]
[133.06645203 100.04852295]
[131.72334290 109.32856750]
[127.82925415 117.85847473]
[121.69733429 124.95232391]
[113.82065582 130.03967285]
[104.83261871 132.71144104]
[103.60200500 147.66087341]
[102.37139130 162.61030579]
[101.75556946 177.59767151]
[101.75556946 192.59767151]
[101.75556946 207.59767151]
[101.75556946 222.59767151]
[101.75556946 237.59767151]
[101.75556946 252.59767151]
[101.75556946 267.59765625]
[101.75556946 282.59765625]
[101.75556946 297.59765625]
[101.75556946 312.59765625]
[116.36557770 316.33911133]
[129.58573914 323.59707642]
[140.58500671 333.91534424]
[148.67198181 346.64529419]
[153.33828735 360.98672485]
[154.29060364 376.03811646]
[151.46907043 390.85330200]
[145.05104065 404.50100708]
[135.43997192 416.12332153]
[123.24001312 424.98965454]
[109.21806335 430.54266357]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 131]
[27 130]
[28 129]
[30 41]
[31 40]
[32 39]
[43 120]
[44 119]
[45 118]
[46 116]
[47 115]
[51 112]
[52 111]
[53 110]
[54 109]
[55 108]
[61 107]
[62 106]
[63 105]
[64 104]
[65 103]
[68 102]
[69 101]
[70 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
