%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCCUAUUUGGGGGGGGGGAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCAxxxxxxxxxxACUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACCCCCCCCCCCUAAUCAUAUUU\
) } def
/len { sequence length } bind def

/coor [
[83.40316010 371.83724976]
[69.91428375 365.10571289]
[58.42877960 355.34112549]
[49.61441040 343.11123657]
[43.98362732 329.12704468]
[41.86380005 314.20156860]
[43.37817001 299.20257568]
[48.43869400 285.00204468]
[56.75115585 272.42562866]
[67.83229065 262.20449829]
[81.03784180 254.93284607]
[95.60006714 251.03347778]
[95.29209137 236.03663635]
[94.98411560 221.03979492]
[94.67613220 206.04296875]
[94.36815643 191.04612732]
[94.06018066 176.04928589]
[93.75220490 161.05244446]
[93.44422150 146.05561829]
[93.13624573 131.05877686]
[92.82826996 116.06193542]
[86.51272583 129.66758728]
[71.76348877 132.39886475]
[60.99478149 121.95688629]
[63.27048492 107.13052368]
[76.67525482 100.39891815]
[61.67604065 100.55291748]
[46.67683029 100.70691681]
[35.65614319 111.71519470]
[20.44261742 111.65769958]
[10.01582527 101.08331299]
[-4.98338461 101.23731232]
[-19.98259354 101.39131165]
[-34.98180389 101.54530334]
[-44.76948166 113.74101257]
[-60.11653519 116.74135590]
[-73.77655029 109.12965393]
[-79.29968262 94.49992371]
[-74.07808685 79.75988007]
[-60.57723618 71.86931610]
[-45.17181778 74.55391693]
[-35.13579941 86.54609680]
[-20.13659096 86.39209747]
[-5.13738155 86.23809814]
[9.86182785 86.08410645]
[20.06931114 75.29786682]
[35.27845001 74.92802429]
[46.52283478 85.70770264]
[61.52204514 85.55371094]
[76.52125549 85.39971161]
[83.11642456 83.43209076]
[89.30401611 83.50240326]
[94.54544830 85.31191254]
[98.41774750 88.43284607]
[100.64208221 92.34532928]
[109.80401611 80.46850586]
[118.96595764 68.59168243]
[128.12788391 56.71485901]
[137.28982544 44.83803558]
[139.28665161 26.56118202]
[155.71614075 20.46885872]
[164.63229370 8.40642738]
[153.54016113 -1.71131420]
[143.54714966 -12.91594982]
[134.75920105 -25.08870316]
[127.26946259 -38.10053635]
[121.15733337 -51.81351852]
[116.48759460 -66.08228302]
[113.30976105 -80.75556946]
[111.65751648 -95.67784119]
[111.54837799 -110.69090271]
[112.98348999 -125.63562012]
[115.94765472 -140.35356140]
[120.40944672 -154.68870544]
[126.32155609 -168.48910522]
[133.62132263 -181.60845947]
[142.23136902 -193.90768433]
[152.06042480 -205.25642395]
[163.00427246 -215.53436279]
[174.94692993 -224.63255310]
[187.76177979 -232.45455933]
[201.31298828 -238.91743469]
[215.45689392 -243.95268250]
[230.04357910 -247.50694275]
[244.91841125 -249.54251099]
[259.92370605 -250.03784180]
[274.90039062 -248.98765564]
[289.68969727 -246.40309143]
[304.13488770 -242.31155396]
[318.08282471 -236.75640869]
[331.38562012 -229.79655457]
[343.90228271 -221.50576782]
[355.50009155 -211.97192383]
[366.05618286 -201.29608154]
[375.45858765 -189.59144592]
[383.60766602 -176.98205566]
[390.41699219 -163.60159302]
[395.81445312 -149.59188843]
[399.74276733 -135.10147095]
[402.16033936 -120.28392792]
[403.04150391 -105.29634857]
[402.37692261 -90.29759979]
[400.17367554 -75.44668579]
[396.45510864 -60.90102386]
[391.26062012 -46.81481552]
[384.64529419 -33.33737564]
[376.67922974 -20.61157799]
[367.44689941 -8.77231789]
[357.04614258 2.05489755]
[345.58724976 11.75529575]
[333.19168091 20.22604752]
[319.99081421 27.37735558]
[306.12460327 33.13341522]
[291.74002075 37.43320847]
[276.98959351 40.23115158]
[262.02963257 41.49758911]
[247.01876831 41.21909332]
[232.11608887 39.39862061]
[217.47956848 36.05546188]
[203.26440430 31.22506332]
[189.62123108 24.95862579]
[176.69471741 17.32257843]
[167.77856445 29.38500977]
[169.25595093 41.42990875]
[161.87344360 51.56252289]
[149.16665649 53.99996948]
[140.00471497 65.87679291]
[130.84277344 77.75361633]
[121.68083954 89.63043976]
[112.51890564 101.50726318]
[107.82510376 115.75395966]
[108.13308716 130.75079346]
[108.44106293 145.74763489]
[108.74903870 160.74447632]
[109.05701447 175.74130249]
[109.36499786 190.73814392]
[109.67297363 205.73498535]
[109.98094940 220.73182678]
[110.28892517 235.72866821]
[110.59690857 250.72549438]
[125.30693817 254.02372742]
[138.79989624 260.74707031]
[150.29132080 270.50466919]
[159.11309814 282.72921753]
[164.75236511 296.71002197]
[166.88124084 311.63418579]
[165.37596130 326.63412476]
[160.32405090 340.83767700]
[152.01921082 353.41915894]
[140.94427490 363.64700317]
[127.74313354 370.92666626]
[113.18327332 374.83486938]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 50]
[27 49]
[28 48]
[31 45]
[32 44]
[33 43]
[34 42]
[55 130]
[56 129]
[57 128]
[58 127]
[59 126]
[61 123]
[62 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
