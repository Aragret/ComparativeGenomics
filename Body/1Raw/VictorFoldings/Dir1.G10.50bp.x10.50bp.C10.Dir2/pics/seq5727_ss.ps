%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCCCCAGGGGGGGGGGUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCxxxxxxxxxxUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAGCCUAGCCCCCCCCCCCCCCUACCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[104.19760895 600.00421143]
[92.98217010 589.93884277]
[84.39076996 577.55804443]
[78.88673401 563.52941895]
[76.76686859 548.60955811]
[78.14551544 533.60302734]
[82.94831085 519.31909180]
[90.91625977 506.52816772]
[101.61965179 495.91995239]
[114.48126984 488.06655884]
[128.80749512 483.39154053]
[127.56062317 468.44345093]
[126.31375122 453.49536133]
[125.06687927 438.54730225]
[123.81999969 423.59921265]
[122.57312775 408.65112305]
[121.32625580 393.70303345]
[120.07937622 378.75494385]
[118.83250427 363.80685425]
[110.06402588 351.76678467]
[116.62741089 337.37121582]
[115.38053894 322.42312622]
[104.60374451 308.60791016]
[112.50551605 292.00845337]
[110.94793701 277.08953857]
[96.61185455 272.91744995]
[84.93366241 263.54916382]
[77.71240234 250.38792419]
[76.07579803 235.42433167]
[80.30418396 220.93521118]
[89.78312683 209.13722229]
[103.09245300 201.84767151]
[101.53486633 186.92875671]
[99.97728729 172.00984192]
[98.41970825 157.09092712]
[96.86212921 142.17201233]
[95.30454254 127.25310516]
[78.40602112 117.27655029]
[72.38078308 98.60066986]
[80.26275635 80.62940216]
[72.80784607 67.61309052]
[65.35293579 54.59677887]
[57.89802170 41.58047104]
[48.63307571 29.78383064]
[37.75424957 19.45662498]
[24.38822556 22.97068024]
[11.14061356 19.43318939]
[1.46001005 9.87618065]
[-2.18872786 -3.11605453]
[1.04848957 -16.10514259]
[-9.61313629 -26.65643311]
[-20.27476311 -37.20772171]
[-30.93638992 -47.75901413]
[-46.73717499 -47.42619324]
[-58.08737564 -58.42384720]
[-58.25312424 -74.22726440]
[-47.13608170 -85.46056366]
[-31.33179283 -85.45922089]
[-20.21666145 -74.22402954]
[-20.38509941 -58.42063904]
[-9.72347260 -47.86935043]
[0.93815356 -37.31805801]
[11.59978008 -26.76676941]
[27.67483330 -29.94449806]
[42.63622284 -22.86475372]
[50.52871323 -8.12738037]
[48.08145523 8.57779980]
[58.96027756 18.90500450]
[55.64020538 4.27704859]
[58.06533051 -10.52561283]
[65.87955475 -23.32943344]
[77.93549347 -32.25436783]
[92.46290588 -35.98992157]
[107.32865906 -33.98759460]
[120.34994507 -26.54138756]
[129.61479187 -14.74466896]
[133.76280212 -0.32960597]
[132.18489075 14.58716965]
[125.11276245 27.81535721]
[113.58483887 37.41259766]
[99.29383087 41.96968079]
[84.33814240 40.81747437]
[70.91432953 34.12556076]
[78.36923981 47.14186859]
[85.82415009 60.15818024]
[93.27906036 73.17449188]
[99.48237610 72.35020447]
[105.71219635 72.94173431]
[111.64952087 74.91877747]
[116.99033356 78.18010712]
[123.51721191 63.76794815]
[138.35374451 62.45402527]
[150.43373108 53.56167221]
[162.51373291 44.66932297]
[174.59371948 35.77697372]
[178.41629028 20.19597816]
[193.04116821 13.60108376]
[207.24938965 21.05132866]
[210.14161682 36.83152390]
[199.49919128 48.83645248]
[183.48606873 47.85696411]
[171.40608215 56.74931335]
[159.32609558 65.64166260]
[147.24609375 74.53401184]
[141.58326721 88.31013489]
[125.88268280 90.26010132]
[127.31264496 104.33572388]
[121.59397888 117.27655029]
[110.22345734 125.69552612]
[111.78103638 140.61444092]
[113.33861542 155.53335571]
[114.89620209 170.45225525]
[116.45378113 185.37117004]
[118.01136017 200.29008484]
[132.53936768 204.67332458]
[144.25082397 214.25898743]
[151.38082886 227.56224060]
[152.87031555 242.54119873]
[148.52330017 256.91021729]
[139.03201294 268.48867798]
[125.86684418 275.53195190]
[127.42443085 290.45086670]
[136.95787048 299.20114136]
[137.91598511 311.70318604]
[130.32862854 321.17626953]
[131.57550049 336.12432861]
[140.43316650 349.23358154]
[133.78059387 362.55996704]
[135.02746582 377.50805664]
[136.27433777 392.45614624]
[137.52120972 407.40423584]
[138.76809692 422.35232544]
[140.01496887 437.30041504]
[141.26184082 452.24850464]
[142.50871277 467.19659424]
[143.75558472 482.14468384]
[158.65837097 484.38159180]
[172.64335632 489.99560547]
[184.95632935 498.68392944]
[194.93330383 509.97802734]
[202.03620911 523.26885986]
[205.88200378 537.83959961]
[206.26329041 552.90447998]
[203.15948486 567.65112305]
[196.73800659 581.28424072]
[187.34513855 593.06854248]
[175.48742676 602.36865234]
[161.80433655 608.68286133]
[147.03378296 611.67083740]
[131.97233582 611.17126465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[21 126]
[22 125]
[24 122]
[25 121]
[32 114]
[33 113]
[34 112]
[35 111]
[36 110]
[37 109]
[40 86]
[41 85]
[42 84]
[43 83]
[44 68]
[45 67]
[50 63]
[51 62]
[52 61]
[53 60]
[90 106]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
