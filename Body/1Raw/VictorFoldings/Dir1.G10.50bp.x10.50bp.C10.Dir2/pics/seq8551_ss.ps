%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACACCCCUGGGGGGGGGGUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAxxxxxxxxxxCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCCCCCCCCCCCUCCACCCCU\
) } def
/len { sequence length } bind def

/coor [
[72.78063202 376.41058350]
[59.56043625 369.13812256]
[48.67362976 358.69110107]
[40.86249924 345.78186035]
[36.65961838 331.29055786]
[36.35154724 316.20520020]
[39.95928955 301.55438232]
[47.23686218 288.33700562]
[57.68806839 277.45422363]
[70.60033417 269.64807129]
[85.09326935 265.45080566]
[84.78121185 250.45404053]
[84.46915436 235.45729065]
[84.15709686 220.46054077]
[83.84503937 205.46377563]
[83.53298950 190.46702576]
[83.22093201 175.47027588]
[82.90887451 160.47352600]
[82.59681702 145.47676086]
[69.58050537 138.02185059]
[56.48735428 145.34095764]
[43.39419937 152.66006470]
[30.30104446 159.97917175]
[22.37464905 174.33551025]
[5.97555780 174.37863159]
[-2.02624846 160.06419373]
[6.60080194 146.11766052]
[22.98193932 146.88601685]
[36.07509232 139.56690979]
[49.16824722 132.24780273]
[62.26140213 124.92870331]
[60.05715561 117.51708984]
[59.23073196 110.09906769]
[59.71783829 102.91970825]
[44.81593704 101.20701599]
[29.91403198 99.49432373]
[19.51920509 111.01505280]
[4.33096886 114.19264984]
[-9.81048965 107.80525208]
[-17.46749115 94.30895996]
[-15.69576168 78.89336395]
[-5.17656851 67.48607635]
[10.04524517 64.47343445]
[24.11658096 71.01386261]
[31.62672234 84.59242249]
[46.52862549 86.30511475]
[61.43052673 88.01779938]
[63.76399612 82.16381836]
[66.97970581 76.74408722]
[70.99935913 71.89057159]
[75.72509003 67.72143555]
[81.04183960 64.33818054]
[86.82015991 61.82318497]
[84.64332581 46.98197937]
[82.46648407 32.14077377]
[80.28964996 17.29957008]
[78.11281586 2.45836401]
[63.08427811 1.60513055]
[48.53522110 -2.25619340]
[35.06141663 -8.96748924]
[23.21460915 -18.25393295]
[13.47991848 -29.73525238]
[6.25597382 -42.94129181]
[1.83859050 -57.33127594]
[0.40865809 -72.31594086]
[2.02473140 -87.28167725]
[6.62063313 -101.61563873]
[14.00816441 -114.73087311]
[23.88480949 -126.09030914]
[35.84612656 -135.22879028]
[49.40230942 -141.77209473]
[63.99823380 -145.45227051]
[79.03621674 -146.11865234]
[93.90045166 -143.74391174]
[107.98226166 -138.42532349]
[120.70500946 -130.38066101]
[131.54769897 -119.93934631]
[140.06632996 -107.52895355]
[145.91207886 -93.65768433]
[148.84556580 -78.89355469]
[148.74664307 -63.84114456]
[145.61938477 -49.11683655]
[139.59185791 -35.32358932]
[130.91085815 -23.02622604]
[119.93188477 -12.72831345]
[107.10451508 -4.85154629]
[92.95401764 0.28152701]
[95.13085938 15.12273216]
[97.30769348 29.96393776]
[99.48452759 44.80514526]
[101.66136932 59.64635086]
[110.50871277 61.00327682]
[118.83991241 64.27556610]
[126.24577332 69.30249786]
[132.36254883 75.83715820]
[136.88980103 83.55860138]
[139.60519409 92.08757782]
[154.60437012 91.93154144]
[169.60356140 91.77550507]
[184.60275269 91.61946869]
[199.34056091 88.82714844]
[213.35726929 83.48563385]
[223.28318787 70.43157959]
[239.51492310 72.76878357]
[245.35467529 88.09292603]
[234.79499817 100.63984680]
[218.69879150 97.50234985]
[204.68206787 102.84385681]
[205.69323730 110.27538300]
[208.72674561 132.56996155]
[223.66104126 133.97225952]
[238.59535217 135.37455750]
[250.60507202 125.10118103]
[266.35488892 126.41223145]
[276.50070190 138.52989197]
[275.02322388 154.26496887]
[262.79898071 164.28211975]
[247.08039856 162.63833618]
[237.19305420 150.30886841]
[222.25874329 148.90657043]
[207.32443237 147.50425720]
[195.68327332 141.42904663]
[187.47988892 133.01315308]
[183.04953003 123.56075287]
[182.30372620 114.37230682]
[184.75878906 106.61865997]
[169.75959778 106.77469635]
[154.76040649 106.93073273]
[139.76123047 107.08676910]
[126.60322571 133.53833008]
[97.59357452 145.16470337]
[97.90562439 160.16146851]
[98.21768188 175.15821838]
[98.52973938 190.15496826]
[98.84179688 205.15171814]
[99.15385437 220.14848328]
[99.46591187 235.14523315]
[99.77796173 250.14198303]
[100.09001923 265.13873291]
[114.74501038 268.72949219]
[127.97082520 275.99176025]
[138.86569214 286.43035889]
[146.68678284 299.33355713]
[150.90086365 313.82162476]
[151.22058105 328.90673828]
[147.62416077 343.56033325]
[140.35679626 356.78335571]
[129.91398621 367.67416382]
[117.00775909 375.49029541]
[102.51806641 379.69876099]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 31]
[21 30]
[22 29]
[23 28]
[34 47]
[35 46]
[36 45]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[97 129]
[98 128]
[99 127]
[100 126]
[101 108]
[102 107]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
