%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACUAAAGGGGGGGGGGUACUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCxxxxxxxxxxAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCCCCCCCCCCCUACUAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 404.78070068]
[71.19830322 398.76467896]
[59.48964310 389.23526001]
[50.78712082 376.89959717]
[45.73651886 362.67306519]
[44.71262741 347.61138916]
[47.79142761 332.83221436]
[54.74444962 319.43228149]
[65.05573273 308.40597534]
[77.96011353 300.57144165]
[92.50000000 296.51013184]
[92.50000000 281.51013184]
[92.50000000 266.51013184]
[92.50000000 251.51013184]
[92.50000000 236.51013184]
[92.50000000 221.51013184]
[92.50000000 206.51013184]
[92.50000000 191.51013184]
[92.50000000 176.51013184]
[92.50000000 161.51013184]
[92.50000000 146.51013184]
[71.60614014 137.59297180]
[57.31447983 119.93462372]
[52.94813156 97.64103699]
[59.52237320 75.89596558]
[48.02056885 66.26743317]
[36.51876450 56.63890839]
[22.86252403 50.43350220]
[8.04476643 48.10239792]
[-6.77299213 45.77129364]
[-21.59074974 43.44018936]
[-36.40850830 41.10908890]
[-51.22626495 38.77798462]
[-58.53964996 52.05541611]
[-69.95516968 62.02846146]
[-84.09435272 67.49282837]
[-99.24982452 67.78865814]
[-113.59148407 62.88023758]
[-125.38751221 53.36027908]
[-133.21347046 40.37836075]
[-136.12434387 25.50211906]
[-133.76863098 10.52792645]
[-126.43079376 -2.73600721]
[-114.99691010 -12.68799877]
[-100.84767914 -18.12629509]
[-85.69168854 -18.39419746]
[-71.35910034 -13.45935535]
[-59.58063889 -3.91767335]
[-51.77861786 9.07864285]
[-48.89516068 23.96022606]
[-34.07740402 26.29132843]
[-19.25964546 28.62243271]
[-4.44188833 30.95353699]
[10.37586975 33.28464127]
[25.19362831 35.61574554]
[13.77884197 25.88421631]
[4.76487255 13.89470577]
[-1.41311002 0.22603574]
[-4.45684910 -14.46190643]
[-4.21940088 -29.46002769]
[-0.71222919 -44.04425812]
[5.89534950 -57.51050568]
[15.28433895 -69.20866394]
[27.00146294 -78.57397461]
[40.48105240 -85.15429688]
[55.07234573 -88.63196564]
[70.07091522 -88.83907318]
[84.75267029 -85.76563263]
[98.40881348 -79.56001282]
[110.38006592 -70.52181244]
[120.08849335 -59.08736801]
[127.06538391 -45.80870056]
[130.97392273 -31.32687187]
[131.62541199 -16.34102631]
[128.98838806 -1.57463992]
[123.19018555 12.25940514]
[114.51071167 24.49323845]
[103.36898804 34.53624344]
[90.30290222 41.90357208]
[75.94326019 46.23954773]
[60.98330307 47.33483887]
[46.14729309 45.13710785]
[57.64909363 54.76563263]
[69.15090179 64.39415741]
[80.76934814 56.99273300]
[94.03208160 53.26856613]
[107.80509186 53.54008484]
[120.91073608 57.78407669]
[132.22845459 65.63766479]
[140.79052734 76.42934418]
[154.80723572 71.08782959]
[168.82395935 65.74632263]
[166.97451782 50.78493500]
[168.75999451 35.81578445]
[174.07661438 21.70915413]
[182.61526489 9.28518581]
[193.87950134 -0.73380965]
[207.21446228 -7.76533937]
[221.84484863 -11.40059948]
[236.92008972 -11.42824173]
[251.56370544 -7.84665728]
[264.92434692 -0.86407632]
[276.22525024 9.11354351]
[284.80941772 21.50611687]
[290.17773438 35.59315491]
[292.01809692 50.55565643]
[290.22354126 65.52371979]
[284.89837646 79.62712860]
[276.35220337 92.04592133]
[265.08187866 102.05808258]
[251.74266052 109.08152771]
[237.11006165 112.70791626]
[222.03482056 112.72641754]
[207.39337158 109.13595581]
[194.03695679 102.14527893]
[182.74209595 92.16080475]
[174.16546631 79.76303101]
[160.14875793 85.10454559]
[146.13203430 90.44606018]
[147.03341675 97.29811859]
[146.92262268 104.20832062]
[145.80204773 111.02796173]
[143.69578552 117.61027527]
[140.64916992 123.81361389]
[136.72776794 129.50447083]
[132.01597595 134.56037903]
[126.61519623 138.87254333]
[120.64163971 142.34814453]
[114.22386932 144.91241455]
[107.50000000 146.51013184]
[107.50000000 161.51013184]
[107.50000000 176.51013184]
[107.50000000 191.51013184]
[107.50000000 206.51013184]
[107.50000000 221.51013184]
[107.50000000 236.51013184]
[107.50000000 251.51013184]
[107.50000000 266.51013184]
[107.50000000 281.51013184]
[107.50000000 296.51013184]
[122.03988647 300.57144165]
[134.94427490 308.40597534]
[145.25555420 319.43228149]
[152.20857239 332.83221436]
[155.28736877 347.61138916]
[154.26348877 362.67306519]
[149.21287537 376.89959717]
[140.51036072 389.23526001]
[128.80169678 398.76467896]
[114.95575714 404.78070068]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 84]
[26 83]
[27 82]
[28 55]
[29 54]
[30 53]
[31 52]
[32 51]
[33 50]
[90 119]
[91 118]
[92 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
