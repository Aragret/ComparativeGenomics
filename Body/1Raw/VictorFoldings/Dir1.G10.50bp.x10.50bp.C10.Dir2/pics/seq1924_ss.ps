%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACUACCAGGGGGGGGGGGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUxxxxxxxxxxAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCCCCCCCCCCCUUACUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 534.90881348]
[71.01555634 529.35577393]
[58.81560135 520.48944092]
[49.20452881 508.86715698]
[42.78650284 495.21945190]
[39.96496582 480.40426636]
[40.91728210 465.35287476]
[45.58358765 451.01147461]
[53.67055511 438.28149414]
[64.66983032 427.96322632]
[77.88998413 420.70526123]
[92.50000000 416.96380615]
[92.50000000 401.96380615]
[92.50000000 386.96380615]
[92.50000000 371.96380615]
[92.50000000 356.96380615]
[92.50000000 341.96380615]
[92.50000000 326.96380615]
[92.50000000 311.96380615]
[92.50000000 296.96380615]
[92.50000000 281.96380615]
[77.80443573 279.06304932]
[63.95278549 273.34906006]
[51.47812653 265.03973389]
[40.86095047 254.45289612]
[32.51063156 241.99407959]
[26.74966240 228.14109802]
[23.80118752 213.42565918]
[23.78036499 198.41294861]
[26.68986511 183.67997742]
[32.41970444 169.79331970]
[40.75139618 157.28742981]
[51.36627960 146.64398193]
[63.85771179 138.27336121]
[77.74665070 132.49885559]
[92.50000000 129.54412842]
[79.55514526 124.35596466]
[69.79805756 113.58761597]
[65.57660675 99.07210541]
[68.23133850 83.59544373]
[53.89127350 79.19514465]
[39.55121231 74.79484558]
[25.21115112 70.39454651]
[9.35841274 74.59248352]
[-2.01001763 62.77339554]
[2.80072737 47.09574509]
[18.84176445 43.68735123]
[29.61145210 56.05448151]
[43.95151138 60.45478058]
[58.29157257 64.85507965]
[72.63163757 69.25538635]
[85.46528625 61.49024582]
[88.22153473 46.74565125]
[90.97777557 32.00105286]
[85.90798950 17.01413155]
[95.85218048 5.92529058]
[98.60842133 -8.81930637]
[97.10523987 -17.89323616]
[101.57559204 -23.83698082]
[104.63398743 -38.52187729]
[107.69238281 -53.20677567]
[110.75077820 -67.89167786]
[113.80917358 -82.57656860]
[116.86756897 -97.26146698]
[106.68282318 -86.24916077]
[94.11744690 -78.05701447]
[79.93209839 -73.18096924]
[64.98551178 -71.91619110]
[50.18251419 -74.33924866]
[36.41922379 -80.30346680]
[24.52882767 -89.44778442]
[15.23113155 -101.21862793]
[9.08898735 -114.90344238]
[6.47422075 -129.67378235]
[7.54512024 -144.63549805]
[12.23685837 -158.88287354]
[20.26541138 -171.55340576]
[31.14475632 -181.88006592]
[44.21629715 -189.23770142]
[58.68872070 -193.18092346]
[73.68591309 -193.47100830]
[88.30000305 -190.09039307]
[101.64628601 -183.24374390]
[112.91683197 -173.34552002]
[121.42935181 -160.99493408]
[126.66854095 -146.93965149]
[128.31721497 -132.03053284]
[126.27523804 -117.16883087]
[135.67909241 -128.85504150]
[145.08294678 -140.54124451]
[144.79333496 -156.58168030]
[157.24504089 -166.69773865]
[172.88618469 -163.12924194]
[179.71821594 -148.61363220]
[172.50019836 -134.28605652]
[156.76916504 -131.13739014]
[147.36529541 -119.45117950]
[137.96144104 -107.76496887]
[131.55247498 -94.20307159]
[128.49407959 -79.51817322]
[125.43567657 -64.83328247]
[122.37728119 -50.14838028]
[119.31888580 -35.46348190]
[116.26049042 -20.77858543]
[113.35301971 -6.06306314]
[110.59677887 8.68153286]
[115.86370087 22.61382484]
[105.72237396 34.75729752]
[102.96612549 49.50189209]
[100.20988464 64.24649048]
[114.21810913 68.01711273]
[125.28993988 76.90636444]
[131.71310425 89.22278595]
[132.62322998 102.77490234]
[128.11322021 115.25990295]
[119.17632294 124.65486145]
[107.50000000 129.54412842]
[122.25334930 132.49885559]
[136.14228821 138.27336121]
[148.63372803 146.64398193]
[159.24861145 157.28742981]
[167.58029175 169.79331970]
[173.31013489 183.67997742]
[176.21963501 198.41294861]
[176.19880676 213.42565918]
[173.25033569 228.14109802]
[167.48936462 241.99407959]
[159.13905334 254.45289612]
[148.52186584 265.03973389]
[136.04721069 273.34906006]
[122.19556427 279.06304932]
[107.50000000 281.96380615]
[107.50000000 296.96380615]
[107.50000000 311.96380615]
[107.50000000 326.96380615]
[107.50000000 341.96380615]
[107.50000000 356.96380615]
[107.50000000 371.96380615]
[107.50000000 386.96380615]
[107.50000000 401.96380615]
[107.50000000 416.96380615]
[122.11001587 420.70526123]
[135.33016968 427.96322632]
[146.32945251 438.28149414]
[154.41641235 451.01147461]
[159.08271790 465.35287476]
[160.03503418 480.40426636]
[157.21350098 495.21945190]
[150.79547119 508.86715698]
[141.18440247 520.48944092]
[128.98443604 529.35577393]
[114.96250153 534.90881348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[36 117]
[40 51]
[41 50]
[42 49]
[43 48]
[52 110]
[53 109]
[54 108]
[56 106]
[57 105]
[59 104]
[60 103]
[61 102]
[62 101]
[63 100]
[64 99]
[88 98]
[89 97]
[90 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
