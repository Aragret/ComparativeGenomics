%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGCCCAUGGGGGGGGGGGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUxxxxxxxxxxCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCACCCCCCCCCCCCAAAGCCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.34887695]
[71.19830322 377.33285522]
[59.48964310 367.80343628]
[50.78712082 355.46777344]
[45.73651886 341.24124146]
[44.71262741 326.17956543]
[47.79142761 311.40039062]
[54.74444962 298.00048828]
[65.05573273 286.97415161]
[77.96011353 279.13964844]
[92.50000000 275.07830811]
[92.50000000 260.07830811]
[92.50000000 245.07832336]
[92.50000000 230.07832336]
[92.50000000 215.07832336]
[92.50000000 200.07832336]
[92.50000000 185.07832336]
[92.50000000 170.07832336]
[92.50000000 155.07832336]
[92.50000000 140.07832336]
[92.50000000 125.07832336]
[79.92874146 116.80229187]
[73.99337769 102.97114563]
[59.22731781 100.33227539]
[44.46126556 97.69341278]
[29.66855621 95.20829773]
[14.85079861 92.87718964]
[8.70087910 106.64721680]
[-0.79653376 118.34698486]
[-12.98937130 127.18274689]
[-27.04296303 132.55705261]
[-41.99718094 134.10917664]
[-56.83202362 131.73927307]
[-70.53720093 125.61484528]
[-82.18092346 116.15883636]
[-90.97326660 104.02050018]
[-96.31974792 90.03079224]
[-97.86152649 75.14548492]
[-112.67929077 72.81437683]
[-127.78032684 79.20896912]
[-140.70390320 69.11376953]
[-138.15536499 52.91386795]
[-122.75642395 47.27432251]
[-110.34818268 57.99662018]
[-95.53042603 60.32772446]
[-89.49276733 46.63480377]
[-80.10916901 34.96240616]
[-68.01458740 26.10996246]
[-54.02993774 20.68576622]
[-39.10632706 19.06516075]
[-24.26039886 21.36459160]
[-10.50506973 27.43324852]
[1.21958268 36.86294556]
[10.11056328 49.01557541]
[15.55695724 63.06627655]
[17.18190193 78.05943298]
[31.99966049 80.39053345]
[39.14218521 78.30967712]
[47.10012817 82.92736053]
[61.86618423 85.56622314]
[76.63224030 88.20508575]
[91.96304321 75.08856201]
[112.06879425 76.77250671]
[122.50860596 66.00170135]
[132.94842529 55.23088837]
[143.38822937 44.46008301]
[153.82804871 33.68927383]
[144.30627441 22.07748604]
[136.17024231 9.45596886]
[129.52601624 -4.01073170]
[124.46021271 -18.14704895]
[121.03888702 -32.76868820]
[119.30664062 -47.68502426]
[119.28604889 -62.70159149]
[120.97738647 -77.62261963]
[124.35860443 -92.25358582]
[129.38562012 -106.40373993]
[135.99290466 -119.88861084]
[144.09429932 -132.53239441]
[153.58419800 -144.17024231]
[164.33886719 -154.65045166]
[176.21812439 -163.83636475]
[189.06707764 -171.60824585]
[202.71821594 -177.86477661]
[216.99357605 -182.52436829]
[231.70704651 -185.52629089]
[246.66680908 -186.83139038]
[261.67782593 -186.42268372]
[276.54440308 -184.30546570]
[291.07272339 -180.50735474]
[305.07339478 -175.07786560]
[318.36386108 -168.08778381]
[330.77087402 -159.62823486]
[342.13265991 -149.80952454]
[352.30111694 -138.75962830]
[361.14367676 -126.62261963]
[368.54507446 -113.55673218]
[374.40875244 -99.73230743]
[378.65835571 -85.32957458]
[381.23840332 -70.53629303]
[382.11532593 -55.54533768]
[381.27761841 -40.55213928]
[378.73626709 -25.75216293]
[374.52438354 -11.33836079]
[368.69686890 2.50135517]
[361.32968140 15.58655643]
[352.51889038 27.74664879]
[342.37936401 38.82310486]
[331.04330444 48.67151260]
[318.65844727 57.16348648]
[305.38632202 64.18830872]
[291.39990234 69.65440369]
[276.88159180 73.49050140]
[262.02059937 75.64659119]
[247.01069641 76.09457397]
[232.04756165 74.82859802]
[217.32629395 71.86518097]
[203.03878784 67.24294281]
[189.37132263 61.02214813]
[176.50209045 53.28390121]
[164.59884644 44.12908554]
[154.15904236 54.89989471]
[143.71922302 65.67070007]
[133.27941895 76.44151306]
[122.83959961 87.21231842]
[125.87286377 96.02922821]
[125.62322998 105.34997559]
[122.12237549 113.99188232]
[115.81450653 120.85842133]
[107.50000000 125.07832336]
[107.50000000 140.07832336]
[107.50000000 155.07832336]
[107.50000000 170.07832336]
[107.50000000 185.07832336]
[107.50000000 200.07832336]
[107.50000000 215.07832336]
[107.50000000 230.07832336]
[107.50000000 245.07832336]
[107.50000000 260.07830811]
[107.50000000 275.07830811]
[122.03988647 279.13964844]
[134.94427490 286.97415161]
[145.25555420 298.00048828]
[152.20857239 311.40039062]
[155.28736877 326.17956543]
[154.26348877 341.24124146]
[149.21287537 355.46777344]
[140.51036072 367.80343628]
[128.80169678 377.33285522]
[114.95575714 383.34887695]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 61]
[24 60]
[25 59]
[26 57]
[27 56]
[38 45]
[39 44]
[63 125]
[64 124]
[65 123]
[66 122]
[67 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
