%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUAGACGGGGGGGGGGCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUxxxxxxxxxxUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCCCCCCCCCCCUCCUAGGC\
) } def
/len { sequence length } bind def

/coor [
[84.92958832 363.71649170]
[71.08364868 357.70046997]
[59.37498856 348.17105103]
[50.67246246 335.83538818]
[45.62186050 321.60885620]
[44.59796906 306.54718018]
[47.67676926 291.76803589]
[54.62979126 278.36810303]
[64.94107819 267.34176636]
[77.84545898 259.50726318]
[92.38534546 255.44593811]
[92.38534546 240.44593811]
[92.38534546 225.44593811]
[92.38534546 210.44593811]
[92.38534546 195.44593811]
[92.38534546 180.44593811]
[92.38534546 165.44593811]
[92.38534546 150.44593811]
[92.38534546 135.44593811]
[92.38534546 120.44594574]
[89.21976471 113.71357727]
[92.54462433 105.13470459]
[90.24052429 101.95232391]
[89.38129425 97.75620270]
[90.39274597 93.22904205]
[93.37313843 89.22016907]
[94.62001038 74.27207947]
[95.86688995 59.32399368]
[84.28625488 49.16549301]
[80.94685364 34.30945587]
[86.92484283 20.49903870]
[99.73533630 12.94726753]
[100.98221588 -2.00081921]
[102.22908783 -16.94890594]
[103.47595978 -31.89699364]
[96.91258240 -46.29256821]
[105.68105316 -58.33263016]
[106.92793274 -73.28071594]
[92.11600494 -75.69752502]
[77.53936005 -79.26901245]
[63.28787231 -83.97317505]
[49.44940186 -89.78100586]
[36.10927200 -96.65668488]
[23.34972954 -104.55783081]
[11.24944019 -113.43572998]
[-0.11698982 -123.23564911]
[-10.67948341 -133.89715576]
[-20.37291718 -145.35453796]
[-29.13752937 -157.53713989]
[-36.91928101 -170.36984253]
[-43.67019272 -183.77354431]
[-49.34864426 -197.66560364]
[-53.91962433 -211.96037292]
[-57.35495377 -226.56970215]
[-59.63345337 -241.40353394]
[-60.74106598 -256.37039185]
[-60.67097473 -271.37805176]
[-59.42360306 -286.33392334]
[-57.00664902 -301.14581299]
[-53.43500519 -315.72241211]
[-48.73069763 -329.97387695]
[-42.92273331 -343.81228638]
[-36.04691315 -357.15234375]
[-28.14563370 -369.91180420]
[-19.26761055 -382.01199341]
[-9.46757793 -393.37832642]
[1.19404113 -403.94070435]
[12.65151405 -413.63403320]
[24.83420181 -422.39849854]
[37.66699219 -430.18014526]
[51.07076263 -436.93090820]
[64.96288300 -442.60922241]
[79.25769043 -447.18005371]
[93.86705780 -450.61523438]
[108.70091248 -452.89358521]
[123.66779327 -454.00103760]
[138.67543030 -453.93078613]
[153.63128662 -452.68328857]
[168.44316101 -450.26617432]
[183.01974487 -446.69436646]
[197.27113342 -441.98992920]
[211.10948181 -436.18182373]
[224.44947815 -429.30584717]
[237.20886230 -421.40444946]
[249.30895996 -412.52630615]
[260.67520142 -402.72616577]
[271.23745728 -392.06442261]
[280.93066406 -380.60684204]
[289.69503784 -368.42407227]
[297.47653198 -355.59121704]
[304.22717285 -342.18737793]
[309.90533447 -328.29519653]
[314.47601318 -314.00033569]
[317.91104126 -299.39093018]
[320.18923950 -284.55706787]
[321.29653931 -269.59014893]
[321.22616577 -254.58251953]
[319.97848511 -239.62667847]
[317.56121826 -224.81483459]
[313.98928833 -210.23829651]
[309.28466797 -195.98695374]
[303.47644043 -182.14865112]
[296.60034180 -168.80873108]
[288.69879150 -156.04943848]
[279.82052612 -143.94941711]
[270.02026367 -132.58328247]
[259.35842896 -122.02111816]
[247.90075684 -112.32804108]
[235.71789551 -103.56379700]
[222.88494873 -95.78244019]
[209.48103333 -89.03194427]
[195.58880615 -83.35391235]
[181.29389954 -78.78337097]
[166.68446350 -75.34848785]
[151.85055542 -73.07044983]
[136.88365173 -71.96328735]
[121.87601471 -72.03384399]
[120.62914276 -57.08575439]
[127.28171539 -43.75936890]
[118.42404938 -30.65011787]
[117.17717743 -15.70203209]
[115.93029785 -0.75394469]
[114.68342590 14.19414234]
[126.06575012 23.76392365]
[129.67309570 38.37388992]
[123.91857147 52.47136688]
[110.81497192 60.57086945]
[109.56809998 75.51895905]
[108.32122803 90.46704102]
[107.54138184 105.44675446]
[107.38534546 120.44594574]
[107.38534546 135.44593811]
[107.38534546 150.44593811]
[107.38534546 165.44593811]
[107.38534546 180.44593811]
[107.38534546 195.44593811]
[107.38534546 210.44593811]
[107.38534546 225.44593811]
[107.38534546 240.44593811]
[107.38534546 255.44593811]
[121.92523193 259.50726318]
[134.82960510 267.34176636]
[145.14089966 278.36810303]
[152.09391785 291.76803589]
[155.17271423 306.54718018]
[154.14881897 321.60885620]
[149.09822083 335.83538818]
[140.39570618 348.17105103]
[128.68704224 357.70046997]
[114.84109497 363.71649170]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[26 129]
[27 128]
[28 127]
[32 123]
[33 122]
[34 121]
[35 120]
[37 118]
[38 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
