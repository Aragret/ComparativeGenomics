%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUAAAACUGGGGGGGGGGUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUxxxxxxxxxxUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGACCCCCCCCCCGCAUCAAACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.17544556]
[71.19830322 367.15942383]
[59.48964310 357.63000488]
[50.78712082 345.29434204]
[45.73651886 331.06781006]
[44.71262741 316.00613403]
[47.79142761 301.22698975]
[54.74444962 287.82705688]
[65.05573273 276.80072021]
[77.96011353 268.96621704]
[92.50000000 264.90490723]
[92.50000000 249.90489197]
[92.50000000 234.90489197]
[92.50000000 219.90489197]
[92.50000000 204.90489197]
[92.50000000 189.90489197]
[92.50000000 174.90489197]
[92.50000000 159.90489197]
[92.50000000 144.90489197]
[92.50000000 129.90489197]
[92.50000000 114.90489960]
[81.11373138 95.93003845]
[99.08496857 78.06491852]
[92.73783875 64.47396851]
[86.39070892 50.88301849]
[80.04357910 37.29206848]
[65.11459351 39.52932358]
[50.17515182 37.47128677]
[36.43482971 31.29321861]
[25.00366211 21.50359535]
[16.80250359 8.90228748]
[12.48883057 -5.48480129]
[12.40404606 -20.48925209]
[16.54647446 -34.89501572]
[24.57218933 -47.53697968]
[35.82354736 -57.39518738]
[29.47641754 -70.98613739]
[23.12928772 -84.57708740]
[16.78215981 -98.16803741]
[10.43502998 -111.75898743]
[4.08790016 -125.34994507]
[-10.22267151 -120.78530884]
[-24.99947548 -118.08819580]
[-39.99986267 -117.30290222]
[-54.97751617 -118.44231415]
[-69.68648529 -121.48773193]
[-83.88523865 -126.38912964]
[-97.34061432 -133.06604004]
[-109.83167267 -141.40881348]
[-121.15328979 -151.28045654]
[-131.11956787 -162.51885986]
[-139.56683350 -174.93948364]
[-146.35638428 -188.33837891]
[-151.37672424 -202.49551392]
[-154.54542542 -217.17842102]
[-155.81044006 -232.14598083]
[-155.15101624 -247.15243530]
[-152.57797241 -261.95135498]
[-148.13354492 -276.29971313]
[-141.89073181 -289.96191406]
[-133.95205688 -302.71359253]
[-124.44785309 -314.34536743]
[-113.53420258 -324.66625977]
[-101.39031219 -333.50674438]
[-88.21560669 -340.72167969]
[-74.22641754 -346.19259644]
[-59.65245819 -349.82965088]
[-44.73305130 -351.57308960]
[-29.71318436 -351.39434814]
[-14.83949852 -349.29629517]
[-0.35623392 -345.31338501]
[13.49878216 -339.51107788]
[26.49803734 -331.98461914]
[38.42807388 -322.85760498]
[49.09298706 -312.27987671]
[58.31765366 -300.42517090]
[65.95059204 -287.48815918]
[71.86646271 -273.68124390]
[75.96811676 -259.23117065]
[78.18821716 -244.37521362]
[78.49029541 -229.35733032]
[76.86939240 -214.42410278]
[73.35212708 -199.82077026]
[67.99625397 -185.78713989]
[60.88972092 -172.55363464]
[52.14922714 -160.33758545]
[41.91829681 -149.33956909]
[30.36493301 -139.74018860]
[17.67885017 -131.69706726]
[24.02598000 -118.10611725]
[30.37310982 -104.51516724]
[36.72023773 -90.92421722]
[43.06736755 -77.33326721]
[49.41449738 -63.74231720]
[64.19590759 -66.04170990]
[79.04132080 -64.08082581]
[92.74650574 -58.01009750]
[104.19729614 -48.31370544]
[112.46017456 -35.77093887]
[116.85835266 -21.39359665]
[117.02722168 -6.34435129]
[112.94454956 8.15726280]
[104.93296814 20.93368340]
[93.63452911 30.94493866]
[99.98165894 44.53588867]
[106.32878876 58.12683868]
[112.67591858 71.71778870]
[124.47255707 80.98274231]
[139.18052673 83.92822266]
[153.88847351 86.87370300]
[168.59643555 89.81919098]
[185.86190796 83.50385284]
[198.60914612 95.52499390]
[213.37519836 98.16385651]
[228.14126587 100.80271912]
[243.37205505 94.72367096]
[256.08282471 105.08554077]
[253.19781494 121.22892761]
[237.68489075 126.54689026]
[225.50239563 115.56877899]
[210.73634338 112.92990875]
[195.97029114 110.29104614]
[185.82937622 116.95957947]
[173.47166443 114.83687592]
[165.65095520 104.52714539]
[150.94299316 101.58166504]
[136.23503113 98.63618469]
[121.52707672 95.69070435]
[117.36683655 108.46456146]
[107.50000000 114.90489960]
[107.50000000 129.90489197]
[107.50000000 144.90489197]
[107.50000000 159.90489197]
[107.50000000 174.90489197]
[107.50000000 189.90489197]
[107.50000000 204.90489197]
[107.50000000 219.90489197]
[107.50000000 234.90489197]
[107.50000000 249.90489197]
[107.50000000 264.90490723]
[122.03988647 268.96621704]
[134.94427490 276.80072021]
[145.25555420 287.82705688]
[152.20857239 301.22698975]
[155.28736877 316.00613403]
[154.26348877 331.06781006]
[149.21287537 345.29434204]
[140.51036072 357.63000488]
[128.80169678 367.15942383]
[114.95575714 373.17544556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 107]
[24 106]
[25 105]
[26 104]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[108 128]
[109 127]
[110 126]
[111 125]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
