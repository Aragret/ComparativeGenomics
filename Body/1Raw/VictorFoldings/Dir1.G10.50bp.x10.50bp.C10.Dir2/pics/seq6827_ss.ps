%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAUUCUGGGGGGGGGGGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAxxxxxxxxxxUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCCCCCCCCCCCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[79.66828918 495.29980469]
[65.17859650 491.09133911]
[52.27236938 483.27520752]
[41.82956696 472.38439941]
[34.56220245 459.16137695]
[30.96577644 444.50778198]
[31.28549767 429.42266846]
[35.49956894 414.93460083]
[43.32066727 402.03140259]
[54.21553421 391.59280396]
[67.44134521 384.33053589]
[82.09633636 380.73977661]
[82.40839386 365.74304199]
[82.72044373 350.74627686]
[83.03250122 335.74951172]
[83.34455872 320.75277710]
[83.65661621 305.75601196]
[83.96867371 290.75924683]
[84.28073120 275.76251221]
[84.59278107 260.76574707]
[84.90483856 245.76899719]
[85.21689606 230.77224731]
[75.66529846 224.39591980]
[70.34920502 214.08055115]
[70.70620728 202.36106873]
[76.76329803 192.18165588]
[87.10087585 186.15609741]
[88.03650665 171.18530273]
[88.97212982 156.21450806]
[89.90776062 141.24371338]
[90.84339142 126.27292633]
[80.53372192 119.87899017]
[73.92493439 109.70571899]
[72.27345276 97.68722534]
[75.89326477 86.10842896]
[84.09618378 77.17065430]
[95.32268524 72.57313538]
[96.88026428 57.65422058]
[98.43785095 42.73530960]
[99.99542999 27.81639671]
[101.55300903 12.89748478]
[103.11058807 -2.02142715]
[104.66817474 -16.94034004]
[94.14535522 -6.25060606]
[79.72473907 -2.12194777]
[65.13905334 -5.62305403]
[54.16375732 -15.84767532]
[49.63977432 -30.14919853]
[52.73812485 -44.82571793]
[62.65680695 -56.07826233]
[76.82839966 -60.99414444]
[91.58463287 -58.30090332]
[103.10590363 -48.69567490]
[108.40994263 -34.66484833]
[113.01551056 -48.94030762]
[117.62107086 -63.21577072]
[122.22663879 -77.49123383]
[126.83219910 -91.76669312]
[116.68473053 -105.26042938]
[116.55683899 -121.97764587]
[126.30150604 -135.35700989]
[141.93548584 -140.26454163]
[146.24307251 -154.63273621]
[150.55065918 -169.00091553]
[137.05485535 -175.62762451]
[124.83393097 -184.38540649]
[114.22127533 -195.03535461]
[105.50641632 -207.28692627]
[98.92709351 -220.80589294]
[94.66279602 -235.22344971]
[92.82985687 -250.14625549]
[93.47828674 -265.16720581]
[96.59039307 -279.87655640]
[102.08126831 -293.87298584]
[109.80113220 -306.77468872]
[119.53936005 -318.22967529]
[131.03030396 -327.92544556]
[143.96047974 -335.59750366]
[157.97714233 -341.03652954]
[172.69789124 -344.09417725]
[187.72116089 -344.68704224]
[202.63706970 -342.79888916]
[217.03874207 -338.48126221]
[230.53326416 -331.85195923]
[242.75250244 -323.09179688]
[253.36309814 -312.43981934]
[262.07559204 -300.18655396]
[268.65231323 -286.66632080]
[272.91384888 -272.24795532]
[274.74389648 -257.32479858]
[274.09259033 -242.30395508]
[270.97763062 -227.59521484]
[265.48406982 -213.59985352]
[257.76171875 -200.69964600]
[248.02128601 -189.24653625]
[236.52847290 -179.55297852]
[223.59681702 -171.88340759]
[209.57911682 -166.44706726]
[194.85777283 -163.39224243]
[179.83439636 -162.80230713]
[164.91883850 -164.69332886]
[160.61125183 -150.32514954]
[156.30366516 -135.95695496]
[165.36526489 -126.10385895]
[168.38313293 -112.95076752]
[164.46069336 -99.92520905]
[154.52441406 -90.47622681]
[141.10766602 -87.16112518]
[136.50210571 -72.88566589]
[131.89653015 -58.61020660]
[127.29096985 -44.33474350]
[122.68540192 -30.05928421]
[119.58708191 -15.38275814]
[118.02950287 -0.46384618]
[116.47192383 14.45506573]
[114.91434479 29.37397766]
[113.35675812 44.29288864]
[111.79917908 59.21180344]
[110.24160004 74.13071442]
[123.64216614 85.33172607]
[127.72654724 102.31277466]
[120.88528442 118.38246918]
[105.81417847 127.20855713]
[104.87855530 142.17935181]
[103.94292450 157.15014648]
[103.00729370 172.12092590]
[102.07167053 187.09172058]
[115.13470459 200.74296570]
[114.15586090 219.29394531]
[100.21365356 231.08430481]
[99.90159607 246.08105469]
[99.58953857 261.07781982]
[99.27748108 276.07455444]
[98.96542358 291.07131958]
[98.65336609 306.06805420]
[98.34131622 321.06481934]
[98.02925873 336.06158447]
[97.71720123 351.05831909]
[97.40514374 366.05508423]
[97.09308624 381.05184937]
[111.58602142 385.24911499]
[124.49828339 393.05526733]
[134.94949341 403.93804932]
[142.22706604 417.15542603]
[145.83480835 431.80624390]
[145.52673340 446.89160156]
[141.32385254 461.38290405]
[133.51272583 474.29214478]
[122.62592316 484.73916626]
[109.40572357 492.01162720]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[37 119]
[38 118]
[39 117]
[40 116]
[41 115]
[42 114]
[43 113]
[54 112]
[55 111]
[56 110]
[57 109]
[58 108]
[62 103]
[63 102]
[64 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
