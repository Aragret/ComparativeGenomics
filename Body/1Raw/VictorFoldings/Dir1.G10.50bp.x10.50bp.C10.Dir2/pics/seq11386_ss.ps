%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAAUAGCCGGGGGGGGGGAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAxxxxxxxxxxGCUAAAGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCCCCCCCCCCCUAAAUAGCC\
) } def
/len { sequence length } bind def

/coor [
[104.68812561 546.14361572]
[90.66617584 540.59063721]
[78.46622467 531.72430420]
[68.85514832 520.10198975]
[62.43712616 506.45428467]
[59.61558914 491.63909912]
[60.56790543 476.58770752]
[65.23420715 462.24630737]
[73.32117462 449.51635742]
[84.32044983 439.19805908]
[97.54061127 431.94009399]
[112.15061951 428.19866943]
[112.15061951 413.19866943]
[112.15061951 398.19866943]
[112.15061951 383.19866943]
[112.15061951 368.19866943]
[112.15061951 353.19866943]
[112.15061951 338.19866943]
[112.15061951 323.19866943]
[112.15061951 308.19866943]
[112.15061951 293.19866943]
[104.41332245 280.47137451]
[112.15061951 266.67120361]
[111.22721100 251.69966125]
[101.98451996 240.01968384]
[107.96729279 225.37329102]
[106.12397003 210.48696899]
[104.28064728 195.60066223]
[95.03795624 183.92068481]
[101.02073669 169.27429199]
[99.17741394 154.38798523]
[97.33408356 139.50167847]
[95.49076080 124.61536407]
[86.70630646 121.20205688]
[79.80722046 114.78178406]
[75.77195740 106.26509857]
[60.79171753 105.49543762]
[46.44171524 113.43328857]
[32.53380966 104.74408722]
[33.37525940 88.36653900]
[48.10045624 81.14846802]
[61.56137848 90.51519775]
[76.54161835 91.28485107]
[83.33153534 81.33420563]
[93.98397064 75.70891571]
[94.90738678 60.73736572]
[95.83079529 45.76581573]
[96.75421143 30.79426384]
[97.67762756 15.82271481]
[96.29360199 0.88670188]
[92.63489532 -13.66025257]
[88.97618866 -28.20720673]
[73.99081421 -26.98718452]
[59.00902557 -28.25046730]
[44.43953705 -31.96258736]
[30.67981339 -38.02227783]
[18.10523033 -46.26422882]
[7.05883169 -56.46358871]
[-2.15802860 -68.34210968]
[-9.29390812 -81.57574463]
[-14.15413380 -95.80346680]
[-16.60611725 -110.63713837]
[-16.58296394 -125.67207336]
[-14.08530712 -140.49810791]
[-9.18128490 -154.71080017]
[-2.00468183 -167.92239380]
[7.24871874 -179.77247620]
[18.32647705 -189.93775940]
[30.92638588 -198.14094543]
[44.70470810 -204.15823364]
[59.28556061 -207.82546997]
[74.27117157 -209.04260254]
[89.25271606 -207.77642822]
[103.82148743 -204.06150818]
[117.58003998 -197.99916077]
[130.15303040 -189.75479126]
[141.19746399 -179.55329895]
[150.41204834 -167.67300415]
[157.54537964 -154.43798828]
[162.40286255 -140.20933533]
[164.85198975 -125.37519836]
[164.82592773 -110.34026337]
[162.32542419 -95.51470184]
[157.41865540 -81.30296326]
[150.23951721 -68.09275055]
[140.98382568 -56.24445343]
[129.90411377 -46.08129501]
[117.30261993 -37.88054276]
[103.52313995 -31.86591148]
[107.18184662 -17.31895828]
[110.84055328 -2.77200389]
[117.91421509 -0.27934295]
[132.06152344 4.70597887]
[139.13519287 7.19863987]
[151.10543823 -1.84087944]
[163.07569885 -10.88039875]
[166.70732117 -26.50700951]
[181.25038147 -33.28039169]
[195.54870605 -26.00458336]
[198.63385010 -10.26096630]
[188.13912964 1.87330687]
[172.11521912 1.08985937]
[160.14495850 10.12937927]
[148.17471313 19.16889763]
[134.64541626 23.34351158]
[122.24068451 22.21778107]
[112.64917755 16.74612808]
[111.72576141 31.71767807]
[110.80234528 46.68922806]
[109.87893677 61.66077805]
[108.95552063 76.63232422]
[122.82814789 89.74694824]
[123.41603851 108.82828522]
[110.37706757 122.77204132]
[112.22039795 137.65835571]
[114.06372070 152.54466248]
[115.90704346 167.43096924]
[125.28157806 180.17572021]
[119.16695404 193.75733948]
[121.01027679 208.64364624]
[122.85360718 223.52995300]
[132.22813416 236.27470398]
[126.11351776 249.85633850]
[136.46652222 239.00207520]
[151.45664978 238.45777893]
[162.56959534 248.53260803]
[163.49331665 263.50415039]
[153.70310974 274.86865234]
[138.75978088 276.17117310]
[127.15061951 266.67120361]
[134.88792419 280.47137451]
[127.15061951 293.19866943]
[127.15061951 308.19866943]
[127.15061951 323.19866943]
[127.15061951 338.19866943]
[127.15061951 353.19866943]
[127.15061951 368.19866943]
[127.15061951 383.19866943]
[127.15061951 398.19866943]
[127.15061951 413.19866943]
[127.15061951 428.19866943]
[141.76063538 431.94009399]
[154.98078918 439.19805908]
[165.98007202 449.51635742]
[174.06703186 462.24630737]
[178.73333740 476.58770752]
[179.68565369 491.63909912]
[176.86412048 506.45428467]
[170.44609070 520.10198975]
[160.83502197 531.72430420]
[148.63507080 540.59063721]
[134.61312866 546.14361572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 123]
[26 121]
[27 120]
[28 119]
[30 117]
[31 116]
[32 115]
[33 114]
[36 43]
[37 42]
[45 111]
[46 110]
[47 109]
[48 108]
[49 107]
[50 91]
[51 90]
[52 89]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
