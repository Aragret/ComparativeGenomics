%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUAUUUGGGGGGGGGGCACUUUACAUCCAAACAUCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGxxxxxxxxxxAUUGCCCUCCUUUUACCCCUACCAUGAGCCCUACAAACAACUAACCUGCCCCCCCCCCCCACUAAUAGUU\
) } def
/len { sequence length } bind def

/coor [
[73.45092773 153.45297241]
[60.99306107 145.17224121]
[50.98559952 134.05380249]
[44.05722046 120.79610443]
[40.64315414 106.23200226]
[40.95788193 91.27640533]
[44.98162460 76.86882019]
[52.46161652 63.91433716]
[62.92796326 53.22674942]
[75.72316742 45.47745132]
[90.04344940 41.15325165]
[89.41947174 26.16623497]
[88.79549408 11.17921829]
[88.17151642 -3.80779743]
[87.54753876 -18.79481316]
[86.92356110 -33.78182983]
[86.29958344 -48.76884460]
[85.67560577 -63.75586319]
[85.05162811 -78.74288177]
[84.42765045 -93.72989655]
[83.80367279 -108.71691132]
[83.17969513 -123.70392609]
[68.17760468 -123.96883392]
[53.21754837 -125.12201691]
[38.35208893 -127.15940857]
[23.63343048 -130.07386780]
[9.11327839 -133.85516357]
[-5.15736580 -138.48999023]
[-19.12837601 -143.96209717]
[-32.75067902 -150.25222778]
[-45.97642136 -157.33831787]
[-58.75915146 -165.19546509]
[-71.05397034 -173.79608154]
[-82.81768799 -183.10993958]
[-94.00897980 -193.10432434]
[-104.58854675 -203.74414062]
[-114.51921844 -214.99201965]
[-123.76612091 -226.80844116]
[-132.29676819 -239.15190125]
[-140.08119202 -251.97904968]
[-147.09205627 -265.24481201]
[-153.30473328 -278.90261841]
[-158.69740295 -292.90447998]
[-163.25111389 -307.20123291]
[-166.94987488 -321.74261475]
[-169.78070068 -336.47760010]
[-171.73365784 -351.35437012]
[-172.80184937 -366.32073975]
[-172.98155212 -381.32409668]
[-172.27214050 -396.31173706]
[-170.67608643 -411.23104858]
[-168.19900513 -426.02960205]
[-164.84959412 -440.65539551]
[-160.63961792 -455.05709839]
[-155.58386230 -469.18411255]
[-149.70010376 -482.98681641]
[-143.00898743 -496.41671753]
[-135.53402710 -509.42663574]
[-127.30149078 -521.97088623]
[-118.34026337 -534.00537109]
[-108.68185425 -545.48791504]
[-98.36016846 -556.37805176]
[-87.41146851 -566.63763428]
[-75.87420654 -576.23059082]
[-63.78892136 -585.12322998]
[-51.19805145 -593.28430176]
[-38.14582825 -600.68511963]
[-24.67809486 -607.29974365]
[-10.84216118 -613.10485840]
[3.31337595 -618.08020020]
[17.73879242 -622.20819092]
[32.38341904 -625.47436523]
[47.19581985 -627.86724854]
[62.12395859 -629.37841797]
[77.11540222 -630.00256348]
[92.11749268 -629.73754883]
[107.07752991 -628.58422852]
[121.94297791 -626.54669189]
[136.66160583 -623.63208008]
[151.18173218 -619.85064697]
[165.45233154 -615.21569824]
[179.42329407 -609.74353027]
[193.04554749 -603.45324707]
[206.27122498 -596.36706543]
[219.05387878 -588.50976562]
[231.34863281 -579.90905762]
[243.11225891 -570.59509277]
[254.30346680 -560.60058594]
[264.88293457 -549.96069336]
[274.81350708 -538.71276855]
[284.06030273 -526.89624023]
[292.59085083 -514.55267334]
[300.37515259 -501.72549438]
[307.38592529 -488.45965576]
[313.59848022 -474.80178833]
[318.99102783 -460.79989624]
[323.54461670 -446.50311279]
[327.24325562 -431.96166992]
[330.07394409 -417.22668457]
[332.02676392 -402.34988403]
[333.09481812 -387.38351440]
[333.27438354 -372.38015747]
[332.56484985 -357.39251709]
[330.96865845 -342.47320557]
[328.49145508 -327.67468262]
[325.14190674 -313.04891968]
[320.93182373 -298.64724731]
[315.87594604 -284.52026367]
[309.99206543 -270.71765137]
[303.30081177 -257.28781128]
[295.82574463 -244.27795410]
[287.59310913 -231.73377991]
[278.63177490 -219.69934082]
[268.97326660 -208.21691895]
[258.65145874 -197.32684326]
[247.70268250 -187.06736755]
[236.16534424 -177.47451782]
[224.07997131 -168.58200073]
[211.48902893 -160.42103577]
[198.43675232 -153.02030945]
[184.96896362 -146.40582275]
[171.13296509 -140.60078430]
[156.97738647 -135.62559509]
[142.55194092 -131.49772644]
[127.90727997 -128.23168945]
[113.09486389 -125.83894348]
[98.16670990 -124.32790375]
[98.79068756 -109.34088898]
[99.41466522 -94.35387421]
[100.03864288 -79.36685181]
[100.66262054 -64.37983704]
[101.28659821 -49.39282227]
[101.91057587 -34.40580750]
[102.53455353 -19.41879082]
[103.15853119 -4.43177509]
[103.78250885 10.55524158]
[104.40648651 25.54225731]
[105.03046417 40.52927399]
[119.66062164 43.64813614]
[133.05570984 50.30701447]
[144.37423706 60.08759689]
[152.90518188 72.37547302]
[158.11264038 86.39871979]
[159.66944885 101.27639771]
[157.47784424 116.07389069]
[151.67549133 129.86163330]
[142.62687683 141.77345276]
[130.90046692 151.06108093]
[117.23287964 157.14106750]
[102.48272705 159.63143921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
