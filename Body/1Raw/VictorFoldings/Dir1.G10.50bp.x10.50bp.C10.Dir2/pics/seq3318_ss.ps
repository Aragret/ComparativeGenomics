%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCCUCAGGGGGGGGGGUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAxxxxxxxxxxUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCCCCCCCCCCCUACUACUCA\
) } def
/len { sequence length } bind def

/coor [
[101.58641052 432.65463257]
[87.74047089 426.63861084]
[76.03181458 417.10919189]
[67.32928467 404.77352905]
[62.27868652 390.54699707]
[61.25479507 375.48532104]
[64.33359528 360.70614624]
[71.28661346 347.30621338]
[81.59790039 336.27990723]
[94.50228119 328.44537354]
[109.04216766 324.38406372]
[109.04216766 309.38406372]
[109.04216766 294.38406372]
[109.04216766 279.38406372]
[109.04216766 264.38406372]
[109.04216766 249.38407898]
[109.04216766 234.38407898]
[109.04216766 219.38407898]
[109.04216766 204.38407898]
[109.04216766 189.38407898]
[99.45105743 174.72084045]
[108.70531464 158.83566284]
[108.39325714 143.83891296]
[108.08120728 128.84216309]
[102.48332214 123.85079193]
[88.24015045 128.55528259]
[91.28755951 113.86806488]
[85.68967438 108.87670135]
[70.75536346 110.27900696]
[55.82105637 111.68131256]
[40.88674927 113.08361816]
[33.09574890 126.50299835]
[18.89139366 132.74926758]
[3.73554778 129.42060852]
[-6.54405499 117.79695129]
[-7.99469805 102.34783173]
[-0.05858027 89.01375580]
[14.21269989 82.92194366]
[29.33154297 86.41481781]
[39.48444748 98.14930725]
[54.41875458 96.74700165]
[69.35306549 95.34469604]
[84.28736877 93.94239807]
[87.38568878 79.26586914]
[74.29253387 71.94676208]
[61.19938278 64.62766266]
[48.10622787 57.30855179]
[35.01307297 49.98944855]
[18.23720551 47.53860474]
[15.94824600 30.73988533]
[31.45681763 23.89002991]
[42.33218002 36.89629364]
[55.42533493 44.21540070]
[68.51848602 51.53450394]
[81.61164093 58.85361099]
[94.70479584 66.17271423]
[109.38132477 63.07439423]
[118.39884949 51.08756256]
[127.41638184 39.10073090]
[116.34671783 28.96080780]
[106.30738068 17.79983521]
[97.39212036 5.72201967]
[89.68417358 -7.15986824]
[83.25550079 -20.72554970]
[78.16613770 -34.84836578]
[74.46360016 -49.39644623]
[72.18245697 -64.23396301]
[71.34400177 -79.22237396]
[71.95607758 -94.22174072]
[74.01295471 -109.09200287]
[77.49543762 -123.69432831]
[82.37100220 -137.89236450]
[88.59413910 -151.55355835]
[96.10672760 -164.55035400]
[104.83863068 -176.76138306]
[114.70832062 -188.07264709]
[125.62364197 -198.37854004]
[137.48268127 -207.58282471]
[150.17469788 -215.59954834]
[163.58120728 -222.35389709]
[177.57702637 -227.78276062]
[192.03146362 -231.83549500]
[206.80957031 -234.47421265]
[221.77337646 -235.67431641]
[236.78314209 -235.42459106]
[251.69873047 -233.72735596]
[266.38088989 -230.59844971]
[280.69250488 -226.06712341]
[294.49996948 -220.17564392]
[307.67437744 -212.97906494]
[320.09268188 -204.54454041]
[331.63894653 -194.95083618]
[342.20538330 -184.28753662]
[351.69329834 -172.65419006]
[360.01416016 -160.15942383]
[367.09024048 -146.91990662]
[372.85543823 -133.05926514]
[377.25598145 -118.70687866]
[380.25076294 -103.99678802]
[381.81182861 -89.06632996]
[381.92456055 -74.05490875]
[380.58795166 -59.10268402]
[377.81448364 -44.34926605]
[373.63000488 -29.93240738]
[368.07363892 -15.98671722]
[361.19723511 -2.64240623]
[353.06503296 9.97593117]
[343.75289917 21.75047684]
[333.34783936 32.57129288]
[321.94696045 42.33734894]
[309.65676880 50.95745468]
[296.59194946 58.35112762]
[282.87454224 64.44933319]
[268.63259888 69.19512939]
[253.99909973 72.54421234]
[239.11068726 74.46530151]
[224.10636902 74.94046783]
[209.12623596 73.96527100]
[194.31015015 71.54882050]
[179.79646301 67.71367645]
[165.72067261 62.49563980]
[152.21421814 55.94344330]
[139.40321350 48.11825943]
[130.38568115 60.10509109]
[121.36815643 72.09192657]
[123.07795715 128.53010559]
[123.39001465 143.52685547]
[123.70207214 158.52360535]
[132.47515869 168.03607178]
[132.39073181 180.57447815]
[124.04216766 189.38407898]
[124.04216766 204.38407898]
[124.04216766 219.38407898]
[124.04216766 234.38407898]
[124.04216766 249.38407898]
[124.04216766 264.38406372]
[124.04216766 279.38406372]
[124.04216766 294.38406372]
[124.04216766 309.38406372]
[124.04216766 324.38406372]
[138.58206177 328.44537354]
[151.48643494 336.27990723]
[161.79771423 347.30621338]
[168.75074768 360.70614624]
[171.82954407 375.48532104]
[170.80564880 390.54699707]
[165.75505066 404.77352905]
[157.05252075 417.10919189]
[145.34385681 426.63861084]
[131.49792480 432.65463257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[24 126]
[28 43]
[29 42]
[30 41]
[31 40]
[44 56]
[45 55]
[46 54]
[47 53]
[48 52]
[57 125]
[58 124]
[59 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
