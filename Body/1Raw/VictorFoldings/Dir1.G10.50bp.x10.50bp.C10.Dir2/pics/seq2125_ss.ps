%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGAAAUAAGGGGGGGGGGCUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUxxxxxxxxxxGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCCCCCCCCCCCUAGAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[75.91592407 376.08663940]
[62.69572449 368.81417847]
[51.80892181 358.36715698]
[43.99779129 345.45791626]
[39.79491043 330.96661377]
[39.48683548 315.88125610]
[43.09457779 301.23043823]
[50.37215042 288.01306152]
[60.82335663 277.13027954]
[73.73561859 269.32412720]
[88.22855377 265.12686157]
[87.91650391 250.13009644]
[87.60444641 235.13334656]
[87.29238892 220.13659668]
[86.98033142 205.13984680]
[86.66827393 190.14308167]
[86.35621643 175.14633179]
[86.04416656 160.14958191]
[85.73210907 145.15283203]
[85.42005157 130.15606689]
[73.72042847 120.76891327]
[59.01246643 123.71439362]
[44.30450439 126.65987396]
[32.29235077 136.95642090]
[18.29352760 131.86894226]
[3.58556700 134.81443787]
[-5.81416607 149.53117371]
[-22.61249924 152.86283875]
[-36.36526489 143.23374939]
[-51.00876617 146.48457336]
[-62.72403717 157.95996094]
[-78.44476318 153.29191589]
[-81.99881744 137.28251648]
[-69.73008728 126.40087128]
[-54.25959396 131.84107971]
[-39.61609268 128.59025574]
[-34.26117706 116.82923126]
[-22.93093681 110.21863556]
[-9.66882706 111.37812805]
[0.64008445 120.10646820]
[15.34804630 117.16098785]
[26.30818939 107.07512665]
[41.35902023 111.95191193]
[56.06698227 109.00643158]
[70.77494812 106.06095123]
[71.54560089 96.18834686]
[75.42950439 87.49374390]
[81.74604797 80.88364410]
[89.57855988 76.95323944]
[97.90074158 75.93628693]
[105.70862579 77.70242310]
[113.96091461 65.17646027]
[122.21320343 52.65049744]
[116.03993225 36.93608475]
[120.38323975 20.79243851]
[133.34837341 10.50307274]
[149.72520447 9.95107555]
[157.71513367 -2.74385428]
[153.35704041 -6.87202740]
[150.23364258 -12.65373898]
[148.93136597 -19.67977142]
[149.89233398 -27.34416580]
[150.20439148 -42.34091949]
[150.51644897 -57.33767319]
[150.82850647 -72.33442688]
[136.37625122 -76.69734192]
[123.63764954 -84.79862213]
[113.55799103 -96.03707886]
[106.88523865 -109.57875061]
[104.11457062 -124.41876984]
[105.45157623 -139.45588684]
[110.79705048 -153.57426453]
[119.75431824 -165.72621155]
[131.65869141 -175.00997925]
[145.62680054 -180.73666382]
[160.62208557 -182.48127747]
[175.53182983 -180.11439514]
[189.24961853 -173.81161499]
[200.75749207 -164.04067993]
[209.20150757 -151.52664185]
[213.95504761 -137.19812012]
[214.66539001 -122.11840057]
[211.27978516 -107.40648651]
[204.04949951 -94.15410614]
[193.51106262 -83.34467316]
[180.44648743 -75.78031921]
[165.82525635 -72.02236938]
[165.51319885 -57.02561569]
[165.20114136 -42.02886200]
[164.88908386 -27.03211021]
[177.06092834 -18.26590347]
[191.18572998 -23.31465912]
[205.31053162 -28.36341476]
[219.43533325 -33.41217041]
[233.56013489 -38.46092987]
[240.64306641 -44.33322525]
[248.03163147 -43.46445465]
[262.25842285 -48.21826935]
[276.48519897 -52.97208405]
[290.71197510 -57.72589874]
[304.93875122 -62.47971344]
[319.16552734 -67.23352814]
[325.99795532 -81.48461914]
[340.93377686 -86.65152740]
[355.11181641 -79.66882324]
[360.12054443 -64.67921448]
[352.98831177 -50.57577515]
[337.94659424 -45.72582245]
[323.91934204 -53.00675201]
[309.69256592 -48.25293350]
[295.46578979 -43.49911880]
[281.23901367 -38.74530411]
[267.01223755 -33.99148941]
[252.78544617 -29.23767662]
[238.60888672 -24.33612442]
[224.48408508 -19.28736877]
[210.35928345 -14.23861217]
[196.23448181 -9.18985653]
[182.10968018 -4.14109993]
[170.41006470 5.24606228]
[162.42013550 17.94099236]
[168.51972961 29.85699272]
[167.91360474 43.33824158]
[160.65356445 54.84225464]
[148.55390930 61.29293060]
[134.73916626 60.90278625]
[126.48687744 73.42874908]
[118.23458862 85.95471191]
[123.79763794 111.50279236]
[100.41680145 129.84400940]
[100.72885895 144.84077454]
[101.04091644 159.83752441]
[101.35297394 174.83427429]
[101.66503143 189.83102417]
[101.97708893 204.82778931]
[102.28913879 219.82453918]
[102.60119629 234.82128906]
[102.91325378 249.81803894]
[103.22531128 264.81478882]
[117.88030243 268.40557861]
[131.10610962 275.66781616]
[142.00097656 286.10641479]
[149.82208252 299.00964355]
[154.03614807 313.49768066]
[154.35586548 328.58279419]
[150.75944519 343.23638916]
[143.49208069 356.45941162]
[133.04927063 367.35025024]
[120.14305115 375.16635132]
[105.65335846 379.37481689]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 45]
[22 44]
[23 43]
[25 41]
[26 40]
[29 36]
[30 35]
[51 128]
[52 127]
[53 126]
[57 121]
[58 120]
[62 90]
[63 89]
[64 88]
[65 87]
[91 119]
[92 118]
[93 117]
[94 116]
[95 115]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
