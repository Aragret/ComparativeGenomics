%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCAxxxxxxxxxxCCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUCCCCCCCCCCAACCCUAACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.15939331]
[71.19830322 351.14337158]
[59.48964310 341.61395264]
[50.78712082 329.27828979]
[45.73651886 315.05175781]
[44.71262741 299.99008179]
[47.79142761 285.21093750]
[54.74444962 271.81100464]
[65.05573273 260.78466797]
[77.96011353 252.95016479]
[92.50000000 248.88883972]
[92.50000000 233.88883972]
[92.50000000 218.88883972]
[92.50000000 203.88883972]
[92.50000000 188.88883972]
[92.50000000 173.88883972]
[92.50000000 158.88883972]
[92.50000000 143.88883972]
[92.50000000 128.88883972]
[92.50000000 113.88884735]
[80.14842987 105.37775421]
[66.13171387 110.71926880]
[52.11500168 116.06078339]
[38.09828949 121.40229797]
[24.08157539 126.74380493]
[19.12587547 141.57536316]
[5.76909304 149.70742798]
[-9.68210888 147.30027771]
[-19.93214417 135.49049377]
[-20.14126205 119.85430908]
[-10.21072006 107.77464294]
[5.17058182 104.95514679]
[18.74006271 112.72709656]
[32.75677490 107.38558197]
[46.77348709 102.04406738]
[60.79020309 96.70255280]
[74.80691528 91.36104584]
[81.18119049 88.88341522]
[87.34943390 88.52323914]
[92.74296570 90.06327057]
[96.87826538 93.14930725]
[102.94128418 79.42925262]
[109.00429535 65.70919800]
[115.06730652 51.98914719]
[121.13031769 38.26909256]
[116.33493042 33.31536484]
[112.80046082 27.43712044]
[110.69577789 20.94634819]
[110.11435699 14.18337154]
[111.07025909 7.49900055]
[113.49819183 1.23634553]
[102.19918823 -8.62937737]
[90.90018463 -18.49510002]
[74.99231720 -24.35822487]
[76.22257996 -41.26747894]
[92.81157684 -44.76624680]
[100.76590729 -29.79410553]
[112.06491089 -19.92838287]
[123.36391449 -10.06265926]
[132.69439697 -14.24563026]
[142.89250183 -14.98955631]
[152.73124695 -12.20492840]
[162.47889709 -23.60594940]
[172.22656250 -35.00696945]
[161.93550110 -45.94046402]
[152.88690186 -57.92254257]
[145.18685913 -70.81272125]
[138.92565918 -84.45986938]
[134.17671204 -98.70397949]
[130.99568176 -113.37804413]
[129.41987610 -128.31002808]
[129.46775818 -143.32485962]
[131.13879395 -158.24647522]
[134.41336060 -172.89996338]
[139.25306702 -187.11347961]
[145.60119629 -200.72041321]
[153.38330078 -213.56121826]
[162.50814819 -225.48532104]
[172.86874390 -236.35295105]
[184.34361267 -246.03668213]
[196.79823303 -254.42295837]
[210.08657837 -261.41348267]
[224.05282593 -266.92626953]
[238.53326416 -270.89666748]
[253.35809326 -273.27819824]
[268.35351562 -274.04287720]
[283.34368896 -273.18176270]
[298.15289307 -270.70492554]
[312.60751343 -266.64141846]
[326.53802490 -261.03890991]
[339.78109741 -253.96307373]
[352.18151855 -245.49685669]
[363.59387207 -235.73951721]
[373.88433838 -224.80546570]
[382.93228149 -212.82290649]
[390.63162231 -199.93231201]
[396.89208984 -186.28482056]
[401.64028931 -172.04046631]
[404.82052612 -157.36622620]
[406.39553833 -142.43415833]
[406.34683228 -127.41933441]
[404.67501831 -112.49779510]
[401.39965820 -97.84449768]
[396.55917358 -83.63122559]
[390.21029663 -70.02463531]
[382.42752075 -57.18425751]
[373.30203247 -45.26063538]
[362.94085693 -34.39356613]
[351.46545410 -24.71046257]
[339.01037598 -16.32485199]
[325.72167969 -9.33505344]
[311.75512695 -3.82301879]
[297.27447510 0.14662714]
[282.44949341 2.52734208]
[267.45404053 3.29121304]
[252.46391296 2.42928433]
[237.65483093 -0.04833852]
[223.20045471 -4.11260653]
[209.27024841 -9.71586895]
[196.02754211 -16.79242897]
[183.62757874 -25.25931931]
[173.87992859 -13.85829735]
[164.13227844 -2.45727658]
[169.24154663 19.52853775]
[157.25863647 38.93752670]
[134.85037231 44.33210754]
[128.78736877 58.05216217]
[122.72434998 71.77221680]
[116.66133118 85.49227142]
[110.59832001 99.21231842]
[107.50000000 113.88884735]
[107.50000000 128.88883972]
[107.50000000 143.88883972]
[107.50000000 158.88883972]
[107.50000000 173.88883972]
[107.50000000 188.88883972]
[107.50000000 203.88883972]
[107.50000000 218.88883972]
[107.50000000 233.88883972]
[107.50000000 248.88883972]
[122.03988647 252.95016479]
[134.94427490 260.78466797]
[145.25555420 271.81100464]
[152.20857239 285.21093750]
[155.28736877 299.99008179]
[154.26348877 315.05175781]
[149.21287537 329.27828979]
[140.51036072 341.61395264]
[128.80169678 351.14337158]
[114.95575714 357.15939331]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[24 34]
[25 33]
[41 130]
[42 129]
[43 128]
[44 127]
[45 126]
[51 59]
[52 58]
[53 57]
[62 123]
[63 122]
[64 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
