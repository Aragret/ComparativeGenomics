%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCGGUACGGGGGGGGGGCCUAACCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGxxxxxxxxxxGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGUCAAUAGUACUUCCCCCCCCCCGCCGCAGUAC\
) } def
/len { sequence length } bind def

/coor [
[23.50745201 481.80581665]
[9.66151333 475.78979492]
[-2.04714823 466.26037598]
[-10.74967289 453.92471313]
[-15.80027485 439.69818115]
[-16.82416534 424.63650513]
[-13.74536705 409.85736084]
[-6.79234505 396.45742798]
[3.51893902 385.43109131]
[16.42332077 377.59658813]
[30.96320724 373.53527832]
[30.96320724 358.53527832]
[30.96320724 343.53527832]
[30.96320724 328.53527832]
[30.96320724 313.53527832]
[30.96320724 298.53527832]
[30.96320724 283.53527832]
[30.96320724 268.53527832]
[30.96320724 253.53526306]
[30.96320724 238.53526306]
[25.36532402 233.54389954]
[18.17394066 246.70764160]
[12.67743969 260.66430664]
[-1.91481769 264.13790894]
[-13.11010456 254.15466309]
[-11.32390881 239.26138306]
[1.91301572 232.20855713]
[14.16955853 223.56117249]
[8.57167530 218.56980896]
[-6.33022690 220.28250122]
[-21.23213005 221.99519348]
[-29.69872284 235.14247131]
[-44.65063858 239.72222900]
[-59.02803421 233.57206726]
[-66.04234314 219.59590149]
[-62.38162994 204.39283752]
[-49.77436447 195.14129639]
[-34.17331696 196.20959473]
[-22.94481850 207.09329224]
[-8.04291630 205.38059998]
[6.85898542 203.66790771]
[24.94445992 206.79710388]
[35.91022110 217.29788208]
[42.53871918 203.84190369]
[37.51667023 189.86640930]
[44.04722595 176.12571716]
[58.74006653 170.95289612]
[65.36856842 157.49693298]
[71.99706268 144.04095459]
[78.34419250 130.45001221]
[84.40720367 116.72995758]
[76.14679718 106.14928436]
[74.91024780 91.79791260]
[82.14976501 78.22069550]
[96.46793365 70.28617096]
[95.22106171 55.33808517]
[93.97418976 40.38999939]
[90.91632080 36.00034714]
[89.98678589 31.34327316]
[90.92206573 27.29025841]
[93.14567566 24.47546768]
[92.83361816 9.47871304]
[92.52156067 -5.51804018]
[92.20950317 -20.51479340]
[91.89744568 -35.51154709]
[91.58539581 -50.50830078]
[77.15824127 -55.10568237]
[65.00704193 -64.14045715]
[56.44987488 -76.63259888]
[52.41495514 -91.22705841]
[53.33995819 -106.34072876]
[59.12455368 -120.33419800]
[69.14126587 -131.68955994]
[82.30355072 -139.17506409]
[97.18367767 -141.97874451]
[112.16754913 -139.79647827]
[125.62982941 -132.86499023]
[136.11024475 -121.93613434]
[142.47192383 -108.19541168]
[144.02484131 -93.13330078]
[140.60052490 -78.38362885]
[132.57041931 -65.54633331]
[120.80557251 -56.01390839]
[106.58214569 -50.82035828]
[106.89420319 -35.82360458]
[107.20626068 -20.82685089]
[107.51831818 -5.83009672]
[107.83036804 9.16665745]
[108.14242554 24.16341019]
[108.92227173 39.14312363]
[110.16914368 54.09121323]
[111.41602325 69.03929901]
[123.94198608 77.29158783]
[138.16876221 72.53777313]
[152.39553833 67.78395844]
[166.62231445 63.03014374]
[173.82588196 57.30646896]
[181.19477844 58.32876205]
[188.51586914 52.75618744]
[195.86189270 53.93155670]
[210.27410889 49.77367020]
[224.68632507 45.61578369]
[229.84306335 30.98062897]
[242.63635254 22.19932747]
[258.14691162 22.64846992]
[270.41064453 32.15534973]
[274.71185303 47.06438065]
[269.39666748 61.64273453]
[256.50888062 70.28473663]
[241.00407410 69.66735840]
[228.84420776 60.02799988]
[214.43199158 64.18588257]
[200.01977539 68.34377289]
[185.65159607 72.65135956]
[171.37612915 77.25691986]
[157.14935303 82.01073456]
[142.92257690 86.76454926]
[128.69580078 91.51836395]
[120.48033905 116.65309143]
[98.12725830 122.79296875]
[92.06424713 136.51303101]
[92.39833069 143.22091675]
[89.66555786 148.29667664]
[85.45303345 150.66946411]
[78.82453156 164.12542725]
[72.19602966 177.58139038]
[77.04942322 192.38282776]
[70.13549805 205.93466187]
[55.99468231 210.47041321]
[49.36618423 223.92637634]
[45.96320724 238.53526306]
[45.96320724 253.53526306]
[45.96320724 268.53527832]
[45.96320724 283.53527832]
[45.96320724 298.53527832]
[45.96320724 313.53527832]
[45.96320724 328.53527832]
[45.96320724 343.53527832]
[45.96320724 358.53527832]
[45.96320724 373.53527832]
[60.50309372 377.59658813]
[73.40747833 385.43109131]
[83.71875763 396.45742798]
[90.67178345 409.85736084]
[93.75057983 424.63650513]
[92.72669220 439.69818115]
[87.67608643 453.92471313]
[78.97356415 466.26037598]
[67.26490021 475.78979492]
[53.41896057 481.80581665]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 41]
[30 40]
[31 39]
[43 130]
[44 129]
[47 126]
[48 125]
[49 124]
[50 121]
[51 120]
[55 92]
[56 91]
[57 90]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[66 84]
[93 118]
[94 117]
[95 116]
[96 115]
[98 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
