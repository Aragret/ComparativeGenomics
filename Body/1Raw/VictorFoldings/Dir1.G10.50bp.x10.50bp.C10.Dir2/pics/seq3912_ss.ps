%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUAUCACAGGGGGGGGGGACACAAGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUxxxxxxxxxxAAACCCCCUGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCCCCCCCCCCCUAAUCACA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 398.18060303]
[71.19830322 392.16458130]
[59.48964310 382.63516235]
[50.78712082 370.29949951]
[45.73651886 356.07296753]
[44.71262741 341.01129150]
[47.79142761 326.23211670]
[54.74444962 312.83218384]
[65.05573273 301.80584717]
[77.96011353 293.97134399]
[92.50000000 289.91003418]
[92.50000000 274.91003418]
[92.50000000 259.91003418]
[92.50000000 244.91003418]
[92.50000000 229.91003418]
[92.50000000 214.91003418]
[92.50000000 199.91003418]
[92.50000000 184.91003418]
[92.50000000 169.91003418]
[92.50000000 154.91003418]
[92.50000000 139.91003418]
[92.50000000 124.91004181]
[82.48583984 119.23574829]
[75.90020752 109.79591370]
[60.96590042 111.19821930]
[46.22809219 113.99054718]
[31.81587791 118.14842987]
[17.40366173 122.30632019]
[8.42104435 135.59887695]
[-7.58278275 136.72007751]
[-18.33105278 124.80981445]
[-15.57861519 109.00463867]
[-1.43690169 101.42891693]
[13.24577332 107.89410400]
[27.65798950 103.73621368]
[42.07020569 99.57833099]
[28.42584038 93.34685516]
[20.19212532 80.80867004]
[19.89588165 65.81159973]
[27.62802315 52.95803833]
[41.01565552 46.19258881]
[55.95028305 47.59148026]
[67.84866333 56.72540665]
[73.05932617 70.79128265]
[69.98319244 85.47248077]
[59.56359482 96.26391602]
[74.49790192 94.86161041]
[80.65007019 82.61206818]
[92.17469025 75.19023132]
[105.87198639 74.65676117]
[113.32689667 61.64044952]
[120.78180695 48.62414169]
[128.23670959 35.60783005]
[132.54429626 21.23964691]
[133.47993469 6.26885605]
[120.24266052 -1.25018668]
[111.61782837 -13.72012234]
[109.27207184 -28.63714790]
[113.61774445 -43.03423309]
[123.74163055 -54.07128143]
[137.59623718 -59.59534836]
[138.53187561 -74.56613922]
[139.46749878 -89.53693390]
[140.40312195 -104.50772095]
[125.98273468 -108.88369751]
[112.96052551 -116.46780396]
[102.03875732 -126.85104370]
[93.80643463 -139.47346497]
[88.70751953 -153.65435791]
[87.01697540 -168.62896729]
[88.82598877 -183.58972168]
[94.03699493 -197.72981262]
[102.36896515 -210.28668213]
[113.37257385 -220.58316040]
[126.45441437 -228.06394958]
[140.90898132 -232.32563782]
[155.95678711 -233.13839722]
[170.78628540 -230.45840454]
[184.59777832 -224.43017578]
[196.64639282 -215.37879944]
[206.28239441 -203.79241943]
[212.98611450 -190.29586792]
[216.39601135 -175.61698914]
[216.32823181 -160.54740906]
[212.78639221 -145.89981079]
[205.96151733 -132.46412659]
[196.22166443 -120.96490479]
[184.09210205 -112.02230072]
[170.22694397 -106.11856842]
[155.37391663 -103.57209778]
[154.43829346 -88.60130310]
[153.50265503 -73.63051605]
[152.56703186 -58.65972137]
[165.62603760 -51.45363235]
[174.29695129 -39.24197006]
[176.81626892 -24.41584206]
[172.63148499 -9.90695667]
[162.52116394 1.39209020]
[148.45071411 7.20448446]
[147.51509094 22.17527580]
[152.50645447 27.77315903]
[155.03538513 12.98787785]
[168.17166138 5.74646378]
[182.02362061 11.50173473]
[186.16067505 25.91994476]
[177.46760559 38.14411926]
[162.48918152 38.96892548]
[167.48054504 44.56680679]
[182.46026611 45.34665298]
[197.43997192 46.12649918]
[207.09594727 33.97982407]
[222.05641174 29.86104774]
[236.56874084 35.35392380]
[245.05267334 48.34633255]
[244.24594116 63.84242249]
[234.45877075 75.88363647]
[219.45451355 79.83987427]
[205.00260925 74.18988800]
[196.66012573 61.10621262]
[181.68041992 60.32636642]
[166.70069885 59.54652405]
[150.48686218 54.12173843]
[141.25302124 43.06274033]
[133.79811096 56.07905197]
[126.34320831 69.09535980]
[118.88829803 82.11167145]
[125.93273163 97.93761444]
[121.47824097 114.67805481]
[107.50000000 124.91004181]
[107.50000000 139.91003418]
[107.50000000 154.91003418]
[107.50000000 169.91003418]
[107.50000000 184.91003418]
[107.50000000 199.91003418]
[107.50000000 214.91003418]
[107.50000000 229.91003418]
[107.50000000 244.91003418]
[107.50000000 259.91003418]
[107.50000000 274.91003418]
[107.50000000 289.91003418]
[122.03988647 293.97134399]
[134.94427490 301.80584717]
[145.25555420 312.83218384]
[152.20857239 326.23211670]
[155.28736877 341.01129150]
[154.26348877 356.07296753]
[149.21287537 370.29949951]
[140.51036072 382.63516235]
[128.80169678 392.16458130]
[114.95575714 398.18060303]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 47]
[25 46]
[26 36]
[27 35]
[28 34]
[50 126]
[51 125]
[52 124]
[53 123]
[54 100]
[55 99]
[61 93]
[62 92]
[63 91]
[64 90]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
