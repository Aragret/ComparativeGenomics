%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGUACCCUAAGGGGGGGGGGCCGUGCAAAGGUAGCAUAAUCACUUGUUCCUUAAAUAGGGACCUGUAUGAxxxxxxxxxxACAACCGCUAUGUAUUUCGUACAUUACUGCCAGCCACCAUGAAUAUUGUACCCCCCCCCCCGGUACCAUAA\
) } def
/len { sequence length } bind def

/coor [
[79.41142273 445.14477539]
[65.38948059 439.59176636]
[53.18952179 430.72543335]
[43.57844925 419.10314941]
[37.16042328 405.45544434]
[34.33888626 390.64025879]
[35.29120255 375.58886719]
[39.95750809 361.24743652]
[48.04447556 348.51748657]
[59.04374695 338.19921875]
[72.26390839 330.94125366]
[86.87391663 327.19979858]
[86.87391663 312.19979858]
[86.87391663 297.19979858]
[86.87391663 282.19979858]
[86.87391663 267.19979858]
[86.87391663 252.19979858]
[86.87391663 237.19979858]
[86.87391663 222.19979858]
[86.87391663 207.19979858]
[86.87391663 192.19979858]
[84.59504700 189.43322754]
[83.57630920 185.40435791]
[84.40564728 180.73341370]
[87.36429596 176.28350830]
[88.28771210 161.31195068]
[89.21112061 146.34040833]
[90.13453674 131.36885071]
[91.05795288 116.39730835]
[82.76371765 105.84537506]
[83.79930878 92.81141663]
[73.92359924 81.52113342]
[64.04789734 70.23085785]
[49.13837814 64.93775940]
[46.58274460 50.26403809]
[35.39444733 40.27294159]
[23.06316376 31.73248100]
[10.73187923 23.19202232]
[6.25294018 22.99512863]
[2.47279477 21.50045395]
[-0.27980962 19.09839058]
[-1.84136951 16.24694061]
[-2.22125745 13.41026783]
[-13.81030560 3.88693047]
[-29.32862854 5.23579693]
[-40.94590759 -4.58731174]
[-42.13621140 -19.38997269]
[-53.72525787 -28.91331100]
[-65.31430817 -38.43664932]
[-76.90335846 -47.95998383]
[-88.49240112 -57.48332214]
[-100.08145142 -67.00666046]
[-116.12402344 -66.88173676]
[-126.11170959 -79.43663788]
[-122.38282013 -95.04032135]
[-107.79784393 -101.72297668]
[-93.54511261 -94.35823822]
[-90.55811310 -78.59571075]
[-78.96907043 -69.07237244]
[-67.38002014 -59.54903412]
[-55.79096985 -50.02569580]
[-44.20192337 -40.50235748]
[-32.61287308 -30.97902107]
[-17.86022949 -32.68051147]
[-5.97162247 -23.18758583]
[-4.28696823 -7.70211792]
[7.30208015 1.82121956]
[19.27233887 10.86073875]
[31.60362244 19.40119743]
[43.93490601 27.94165611]
[38.85428619 13.82828331]
[40.28210068 -1.10360682]
[47.94528580 -13.99839497]
[60.37831497 -22.39004517]
[75.20346069 -24.67370987]
[89.58551025 -20.41265869]
[100.77400970 -10.42178440]
[106.62922668 3.38822746]
[106.03139496 18.37631035]
[99.09484863 31.67609596]
[87.14615631 40.74409866]
[72.47041321 43.84612274]
[57.87302399 40.38833237]
[72.07616425 44.87387466]
[75.33817291 60.35514832]
[85.21388245 71.64543152]
[95.08958435 82.93570709]
[109.91207123 85.23658752]
[122.74571991 77.47145081]
[135.57937622 69.70631409]
[147.82232666 61.03970718]
[159.41137695 51.51636887]
[171.00042725 41.99303055]
[182.58947754 32.46969604]
[194.17852783 22.94635773]
[197.16552734 7.18382549]
[211.41824341 -0.18091090]
[226.00323486 6.50174284]
[229.73211670 22.10542679]
[219.74443054 34.66033173]
[203.70185852 34.53540421]
[192.11280823 44.05874252]
[180.52375793 53.58208084]
[168.93472290 63.10541916]
[157.34567261 72.62875366]
[172.23333740 74.46108246]
[182.58578491 85.31588745]
[183.71112061 100.27362061]
[175.09934998 112.55519867]
[160.65342712 116.59444427]
[146.92048645 110.56070709]
[140.12446594 97.18856049]
[143.34451294 82.53997040]
[130.51086426 90.30510712]
[117.67720032 98.07023621]
[131.23878479 91.66061401]
[146.23472595 92.00999451]
[159.48307800 99.04426575]
[168.17277527 111.27084351]
[170.45997620 126.09544373]
[165.85937500 140.37249756]
[155.34715271 151.07264709]
[141.15383911 155.92547607]
[126.29105377 153.90127563]
[113.91243744 145.42956543]
[106.64455414 132.30790710]
[106.02950287 117.32071686]
[105.10608673 132.29226685]
[104.18267059 147.26382446]
[103.25926208 162.23536682]
[102.33584595 177.20692444]
[101.87391663 192.19979858]
[101.87391663 207.19979858]
[101.87391663 222.19979858]
[101.87391663 237.19979858]
[101.87391663 252.19979858]
[101.87391663 267.19979858]
[101.87391663 282.19979858]
[101.87391663 297.19979858]
[101.87391663 312.19979858]
[101.87391663 327.19979858]
[116.48393250 330.94125366]
[129.70408630 338.19921875]
[140.70336914 348.51748657]
[148.79032898 361.24743652]
[153.45663452 375.58886719]
[154.40895081 390.64025879]
[151.58741760 405.45544434]
[145.16938782 419.10314941]
[135.55831909 430.72543335]
[123.35836029 439.59176636]
[109.33641815 445.14477539]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
[31 87]
[32 86]
[33 85]
[35 83]
[36 70]
[37 69]
[38 68]
[43 67]
[44 66]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[88 115]
[89 114]
[90 113]
[91 105]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
