%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUCACCACGGGGGGGGGGCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAxxxxxxxxxxUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCCCCCCCCCCCAAAUCACCAC\
) } def
/len { sequence length } bind def

/coor [
[63.83715820 372.92724609]
[50.91800308 365.16891479]
[40.13670349 354.63989258]
[32.07468796 341.90798950]
[27.16672897 327.65988159]
[25.67750549 312.66394043]
[27.68732834 297.72882080]
[33.08781433 283.66000366]
[41.58771896 271.21621704]
[52.72865295 261.06848145]
[65.90979767 253.76409912]
[80.42031860 249.69696045]
[79.80448914 234.70960999]
[79.18866730 219.72225952]
[78.57283783 204.73490906]
[77.95701599 189.74754333]
[77.34118652 174.76019287]
[76.72536469 159.77284241]
[76.10954285 144.78549194]
[75.49371338 129.79814148]
[86.39189148 93.65803528]
[78.23522186 81.06959534]
[70.07855988 68.48115540]
[56.88224411 75.62897491]
[43.16579056 81.71938324]
[29.01377487 86.71483612]
[14.51344299 90.58451843]
[-0.24580218 93.30458832]
[-15.17296505 94.85826111]
[-30.17601204 95.23596954]
[-45.16244507 94.43537903]
[-60.03986359 92.46143341]
[-74.71654510 89.32628632]
[-89.10199738 85.04928589]
[-103.10753632 79.65679169]
[-116.64680481 73.18204498]
[-129.63633728 65.66497803]
[-141.99603271 57.15193176]
[-153.64968872 47.69538879]
[-164.52548218 37.35365677]
[-174.55632019 26.19049644]
[-183.68038940 14.27473164]
[-191.84143066 1.67982900]
[-198.98912048 -11.51655960]
[-205.07939148 -25.23307228]
[-210.07469177 -39.38513947]
[-213.94422913 -53.88550949]
[-216.66415405 -68.64478302]
[-218.21766663 -83.57196045]
[-218.59523010 -98.57501221]
[-217.79447937 -113.56143951]
[-215.82038879 -128.43884277]
[-212.68508911 -143.11549377]
[-208.40794373 -157.50090027]
[-203.01530457 -171.50637817]
[-196.54042053 -185.04557800]
[-189.02322388 -198.03503418]
[-180.51004028 -210.39463806]
[-171.05339050 -222.04821777]
[-160.71154785 -232.92388916]
[-149.54827881 -242.95462036]
[-137.63241577 -252.07856750]
[-125.03742981 -260.23947144]
[-111.84097290 -267.38702393]
[-98.12439728 -273.47717285]
[-83.97227478 -278.47232056]
[-69.47187042 -282.34170532]
[-54.71256638 -285.06146240]
[-39.78537369 -286.61483765]
[-24.78231812 -286.99224854]
[-9.79590225 -286.19134521]
[5.08147717 -284.21710205]
[19.75809479 -281.08166504]
[34.14346313 -276.80435181]
[48.14889145 -271.41159058]
[61.68802643 -264.93655396]
[74.67739868 -257.41921997]
[87.03691864 -248.90592957]
[98.69039154 -239.44914246]
[109.56596375 -229.10719299]
[119.59658813 -217.94383240]
[128.72041321 -206.02787781]
[136.88119507 -193.43280029]
[144.02861023 -180.23626709]
[150.11860657 -166.51963806]
[155.11361694 -152.36746216]
[158.98284912 -137.86701965]
[161.70246887 -123.10768890]
[163.25569153 -108.18047333]
[163.63293457 -93.17741394]
[162.83189392 -78.19100952]
[160.85748291 -63.31364822]
[157.72189331 -48.63706589]
[153.44444275 -34.25173950]
[148.05152893 -20.24636841]
[141.57637024 -6.70729733]
[134.05889893 6.28199863]
[125.54547119 18.64143372]
[116.08857727 30.29480934]
[105.74650574 41.17027664]
[94.58303833 51.20078278]
[82.66699982 60.32448959]
[90.82366180 72.91292572]
[98.98033142 85.50136566]
[112.04701996 92.86760712]
[127.03990936 93.32952881]
[142.03279114 93.79145813]
[132.89505005 81.89601135]
[134.65655518 66.99980164]
[146.31678772 57.56376266]
[161.25282288 58.94749451]
[170.98110962 70.36505127]
[169.97604370 85.33133698]
[158.80775452 95.34588623]
[173.63023376 97.64675903]
[188.45271301 99.94763947]
[203.54067993 93.52226257]
[216.48483276 103.59107208]
[213.96934509 119.79614258]
[198.58192444 125.46708679]
[186.15184021 114.77011871]
[171.32936096 112.46924591]
[156.50688171 110.16836548]
[141.57086182 108.78433990]
[126.57798004 108.32241821]
[111.58509827 107.86048889]
[106.30908966 113.19094849]
[116.96983337 123.74312592]
[106.41748810 134.40370178]
[95.75707245 123.85185242]
[90.48106384 129.18231201]
[91.09689331 144.16966248]
[91.71271515 159.15701294]
[92.32854462 174.14436340]
[92.94436646 189.13172913]
[93.56019592 204.11907959]
[94.17601776 219.10643005]
[94.79184723 234.09378052]
[95.40766907 249.08113098]
[110.20294189 251.94410706]
[123.93891907 258.14248657]
[135.87481689 267.34197998]
[145.36697388 279.04650879]
[151.90347290 292.62481689]
[155.13180542 307.34469604]
[154.87788391 322.41229248]
[151.15539551 337.01501465]
[144.16508484 350.36538696]
[134.28395081 361.74340820]
[122.04484558 370.53552246]
[108.10781860 376.26754761]
[93.22447968 378.63037109]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 104]
[22 103]
[23 102]
[105 126]
[106 125]
[107 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
