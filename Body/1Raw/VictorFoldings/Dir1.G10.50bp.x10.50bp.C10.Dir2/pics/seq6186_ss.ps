%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAAAUCACCGGGGGGGGGGUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAxxxxxxxxxxUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACCCCCCCCCCCGAAAAUAACC\
) } def
/len { sequence length } bind def

/coor [
[118.96466064 428.02481079]
[105.74446869 420.75234985]
[94.85766602 410.30532837]
[87.04653168 397.39608765]
[82.84365082 382.90478516]
[82.53557587 367.81942749]
[86.14331818 353.16860962]
[93.42089081 339.95123291]
[103.87210083 329.06845093]
[116.78436279 321.26229858]
[131.27729797 317.06503296]
[130.96524048 302.06826782]
[130.65318298 287.07150269]
[130.34112549 272.07476807]
[130.02906799 257.07800293]
[129.71701050 242.08125305]
[129.40496826 227.08450317]
[129.09291077 212.08773804]
[128.78085327 197.09098816]
[128.46879578 182.09423828]
[128.15673828 167.09748840]
[124.29957581 152.60188293]
[117.11706543 139.43330383]
[109.25964355 126.65594482]
[100.74855042 114.30437469]
[88.20511627 108.12749481]
[86.89987183 94.20671844]
[78.38878632 81.85514832]
[69.87769318 69.50357056]
[58.17807007 60.11640930]
[44.27551651 54.48445511]
[30.37295914 48.85249710]
[16.47040367 43.22053909]
[2.56784678 37.58858490]
[-11.55695629 32.53982925]
[-25.87955284 28.08301163]
[-40.20215225 23.62619591]
[-54.52474976 19.16938019]
[-69.02034760 15.31222153]
[-83.66384888 12.06139565]
[-97.91466522 19.42982483]
[-112.50137329 12.75095177]
[-116.23430634 -2.85176539]
[-106.24987030 -15.40925694]
[-90.20727539 -15.28848934]
[-80.41301727 -2.58210564]
[-65.76951599 0.66872007]
[-63.30055618 -0.78440201]
[-60.08915710 -1.31439590]
[-56.49629211 -0.62649840]
[-52.98519897 1.43342090]
[-50.06793213 4.84678364]
[-35.74533463 9.30359936]
[-21.42273712 13.76041508]
[-7.10014057 18.21722984]
[-4.51893282 16.97436905]
[-1.27459228 16.71315765]
[2.24865699 17.69733047]
[5.57636929 20.04198074]
[8.19980335 23.68602753]
[22.10235977 29.31798553]
[36.00491714 34.94994354]
[49.90747070 40.58189774]
[63.81002808 46.21385574]
[54.97626495 34.09095764]
[48.80178070 20.42070770]
[45.54634857 5.77822971]
[45.34693146 -9.22044468]
[48.21191406 -23.94429779]
[54.02076721 -37.77387619]
[62.52909851 -50.12734985]
[73.37895203 -60.48498535]
[86.11386108 -68.41102600]
[100.19805145 -73.57200623]
[115.03896332 -75.75080109]
[130.01223755 -74.85574341]
[144.48791504 -70.92449188]
[157.85697937 -64.12243652]
[169.55699158 -54.73574829]
[179.09568787 -43.15934372]
[186.07179260 -29.88025856]
[190.19178772 -15.45716286]
[191.28233337 -0.49685913]
[189.29756165 14.37125111]
[184.32098389 28.52164459]
[176.56195068 41.35898972]
[166.34692383 52.34320450]
[154.10562134 61.01216507]
[140.35310364 67.00115967]
[125.66792297 70.05821228]
[110.66792297 70.05471039]
[95.98417664 66.99080658]
[82.22926331 60.99248123]
[90.74035645 73.34405518]
[99.25144958 85.69562531]
[111.79488373 91.87250519]
[113.10012817 105.79328156]
[121.61121368 118.14485168]
[127.20030975 104.22501373]
[141.50532532 99.71205902]
[154.07043457 107.90460968]
[155.71157837 122.81455994]
[145.22920227 133.54394531]
[130.28564453 132.25079346]
[137.46815491 145.41937256]
[138.15093994 130.43492126]
[142.47102356 116.07049561]
[150.16700745 103.19525909]
[160.77323914 92.58827972]
[173.64793396 84.89137268]
[188.01205444 80.57026672]
[202.99645996 79.88642120]
[217.69445801 82.88122559]
[231.21669006 89.37345886]
[242.74494934 98.97029114]
[251.58168030 111.09102631]
[257.19219971 125.00225067]
[259.23696899 139.86222839]
[257.59231567 154.77178955]
[252.35772705 168.82878113]
[243.84994507 181.18264771]
[232.58378601 191.08584595]
[219.24092102 197.93916321]
[204.62872314 201.32791138]
[189.63134766 201.04705811]
[175.15628052 197.11357117]
[162.07937622 189.76547241]
[151.19189453 179.44737244]
[143.15348816 166.78543091]
[143.46554565 181.78218079]
[143.77760315 196.77893066]
[144.08966064 211.77568054]
[144.40171814 226.77244568]
[144.71377563 241.76919556]
[145.02583313 256.76596069]
[145.33789062 271.76269531]
[145.64993286 286.75946045]
[145.96199036 301.75619507]
[146.27404785 316.75296021]
[160.92904663 320.34371948]
[174.15486145 327.60598755]
[185.04972839 338.04458618]
[192.87081909 350.94778442]
[197.08488464 365.43585205]
[197.40461731 380.52096558]
[193.80818176 395.17456055]
[186.54081726 408.39755249]
[176.09802246 419.28839111]
[163.19178772 427.10452271]
[148.70210266 431.31298828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 105]
[23 104]
[24 98]
[25 97]
[27 95]
[28 94]
[29 93]
[30 64]
[31 63]
[32 62]
[33 61]
[34 60]
[35 55]
[36 54]
[37 53]
[38 52]
[39 47]
[40 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
