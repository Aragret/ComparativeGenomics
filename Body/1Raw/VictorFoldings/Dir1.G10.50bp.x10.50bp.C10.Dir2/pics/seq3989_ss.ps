%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCACACUGGGGGGGGGGAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAAGGGGAGUCCGAACxxxxxxxxxxCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACCCCCCCCCCCUCGCCACACU\
) } def
/len { sequence length } bind def

/coor [
[83.29785919 422.14031982]
[70.07765961 414.86782837]
[59.19086075 404.42083740]
[51.37973022 391.51159668]
[47.17684937 377.02026367]
[46.86877441 361.93493652]
[50.47651672 347.28411865]
[57.75408936 334.06671143]
[68.20529938 323.18395996]
[81.11756134 315.37780762]
[95.61049652 311.18051147]
[95.29843903 296.18377686]
[94.98638153 281.18701172]
[94.67432404 266.19024658]
[94.36227417 251.19351196]
[94.05021667 236.19674683]
[93.73815918 221.19999695]
[93.42610168 206.20324707]
[93.11404419 191.20649719]
[92.80198669 176.20973206]
[84.27196503 167.57572937]
[83.92671204 155.04179382]
[92.50000000 145.34887695]
[92.50000000 130.34887695]
[92.50000000 115.34887695]
[80.60025787 94.84968567]
[101.48591614 76.98766327]
[98.38759613 62.31113815]
[95.28927612 47.63461304]
[89.54800415 61.49238205]
[74.92582703 64.83782196]
[63.73003387 54.85512543]
[65.38397217 39.94659042]
[78.49562836 32.66052246]
[63.56131744 31.25822067]
[48.62701035 29.85591698]
[33.69270325 28.45361328]
[20.47020149 37.53903961]
[5.16542244 32.72829437]
[-0.48111701 17.71176529]
[7.86212492 4.00884962]
[23.79492760 2.13125300]
[35.09500885 13.51930523]
[50.02931595 14.92160892]
[64.96362305 16.32391357]
[79.89792633 17.72621536]
[66.40092468 11.18168831]
[62.12938690 -3.19725299]
[69.86431885 -16.04913139]
[84.56986237 -19.00667381]
[96.67189789 -10.14435673]
[98.29148102 4.76754189]
[101.99764252 -9.76739407]
[105.70380402 -24.30233002]
[109.40996552 -38.83726501]
[101.60393524 -52.31701660]
[105.56956482 -67.00471497]
[118.46855164 -74.36349487]
[122.17471313 -88.89843750]
[125.88087463 -103.43337250]
[129.58703613 -117.96830750]
[133.29319763 -132.50325012]
[123.55561066 -144.43997192]
[122.72362518 -159.64396667]
[130.90704346 -172.27313232]
[144.79162598 -177.59815979]
[148.49778748 -192.13310242]
[152.20394897 -206.66802979]
[138.79740906 -213.53913879]
[127.25628662 -223.22161865]
[118.15949249 -235.22978210]
[111.96332550 -248.96133423]
[108.97856903 -263.72747803]
[109.35494995 -278.78756714]
[113.07357788 -293.38616943]
[119.94793701 -306.79104614]
[129.63320923 -318.32983398]
[141.64358521 -327.42370605]
[155.37663269 -333.61654663]
[170.14349365 -336.59771729]
[185.20347595 -336.21768188]
[199.80119324 -332.49551392]
[213.20440674 -325.61791992]
[224.74084473 -315.92987061]
[233.83180237 -303.91726685]
[240.02133179 -290.18273926]
[242.99891663 -275.41516113]
[242.61524963 -260.35525513]
[238.88954163 -245.75843811]
[232.00868225 -232.35688782]
[222.31782532 -220.82281494]
[210.30303955 -211.73475647]
[196.56700134 -205.54856873]
[181.79869080 -202.57455444]
[166.73889160 -202.96186829]
[163.03273010 -188.42694092]
[159.32656860 -173.89199829]
[168.96612549 -162.56871033]
[170.10311890 -147.56300354]
[162.09252930 -134.61372375]
[147.82812500 -128.79708862]
[144.12196350 -114.26214600]
[140.41580200 -99.72721100]
[136.70964050 -85.19227600]
[133.00347900 -70.65734100]
[140.80393982 -58.02054596]
[137.25242615 -43.22725677]
[123.94490051 -35.13110352]
[120.23873901 -20.59616852]
[116.53257751 -6.06123304]
[112.82641602 8.47370338]
[109.96579742 44.53629303]
[113.06412506 59.21281815]
[116.16244507 73.88934326]
[126.60225677 84.66014862]
[141.17495728 88.21491241]
[155.74766541 91.76967621]
[172.56848145 89.64920044]
[179.26255798 105.22564697]
[166.14794922 115.97010040]
[152.19290161 106.34237671]
[137.62019348 102.78761292]
[123.04749298 99.23285675]
[119.79127502 107.22240448]
[114.17518616 112.76490021]
[107.50000000 115.34887695]
[107.50000000 130.34887695]
[107.50000000 145.34887695]
[117.08272552 161.03808594]
[107.79874420 175.89768982]
[108.11080170 190.89443970]
[108.42285919 205.89118958]
[108.73490906 220.88793945]
[109.04696655 235.88470459]
[109.35902405 250.88145447]
[109.67108154 265.87820435]
[109.98313904 280.87496948]
[110.29519653 295.87170410]
[110.60724640 310.86846924]
[125.26224518 314.45922852]
[138.48805237 321.72149658]
[149.38291931 332.16009521]
[157.20401001 345.06329346]
[161.41809082 359.55136108]
[161.73780823 374.63647461]
[158.14138794 389.29006958]
[150.87402344 402.51306152]
[140.43121338 413.40390015]
[127.52498627 421.22003174]
[113.03529358 425.42849731]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 128]
[24 127]
[25 126]
[27 114]
[28 113]
[29 112]
[34 46]
[35 45]
[36 44]
[37 43]
[52 111]
[53 110]
[54 109]
[55 108]
[58 105]
[59 104]
[60 103]
[61 102]
[62 101]
[66 97]
[67 96]
[68 95]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
