%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUUAGUUCAGGGGGGGGGGACUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGxxxxxxxxxxGUGCAGCCGCUAUUAAAGGUUCGUUUGUUCAACGAUUAAAGUCCUACGUGCCCCCCCCCCAUCUGAGUUCA\
) } def
/len { sequence length } bind def

/coor [
[106.67891693 505.19430542]
[92.65697479 499.64129639]
[80.45701599 490.77496338]
[70.84594727 479.15264893]
[64.42791748 465.50494385]
[61.60638428 450.68975830]
[62.55870056 435.63839722]
[67.22500610 421.29696655]
[75.31197357 408.56701660]
[86.31124878 398.24874878]
[99.53140259 390.99075317]
[114.14141846 387.24932861]
[114.14141846 372.24932861]
[114.14141846 357.24932861]
[114.14141846 342.24932861]
[114.14141846 327.24932861]
[114.14141846 312.24932861]
[114.14141846 297.24932861]
[114.14141846 282.24932861]
[114.14141846 267.24932861]
[114.14141846 252.24932861]
[112.91080475 237.29989624]
[110.45787811 222.50181580]
[108.00495148 207.70373535]
[105.55201721 192.90565491]
[103.09909058 178.10757446]
[100.64616394 163.30949402]
[98.19323730 148.51141357]
[87.21243286 138.29270935]
[72.27642059 136.90869141]
[57.34040833 135.52465820]
[42.40439606 134.14064026]
[50.79251862 146.57604980]
[48.11732864 161.33555603]
[35.89831543 170.03588867]
[21.07578850 167.73530579]
[12.06883430 155.74052429]
[13.99333572 140.86450195]
[25.75694275 131.55647278]
[11.10421848 128.34747314]
[-3.54850602 125.13848114]
[-19.00340271 130.62284851]
[-31.30315590 119.77626801]
[-27.79483604 103.75679016]
[-12.08750057 99.04386902]
[-0.33950967 110.48575592]
[14.31321526 113.69474792]
[28.96594048 116.90374756]
[43.78842163 119.20462036]
[58.72443390 120.58864594]
[73.66044617 121.97267151]
[88.59645844 123.35669708]
[76.83025360 107.84477234]
[79.48960876 89.74401093]
[93.32924652 79.66459656]
[93.94506836 64.67723846]
[94.56089783 49.68988800]
[95.17671967 34.70253372]
[92.38929749 25.93748665]
[95.96218872 19.41470528]
[96.88559723 4.44315481]
[97.80901337 -10.52839470]
[84.20248413 -17.24688721]
[74.23168182 -28.63223076]
[69.39256287 -42.92896271]
[70.39303589 -57.94850540]
[77.04957581 -71.40418243]
[88.31992340 -81.25937653]
[102.46614838 -86.03573608]
[103.38955688 -101.00728607]
[104.31297302 -115.97883606]
[90.78891754 -122.98024750]
[81.28688812 -134.88114929]
[77.45315552 -149.61961365]
[79.95195007 -164.64212036]
[88.35033417 -177.34594727]
[101.19323730 -185.53005981]
[116.25555420 -187.77650452]
[130.92764282 -183.69609070]
[142.66748047 -173.99577332]
[149.44105530 -160.35618591]
[150.07481384 -145.14045715]
[144.45895386 -130.98481750]
[133.56646729 -120.34181976]
[119.28452301 -115.05541992]
[118.36110687 -100.08386993]
[117.43769836 -85.11231995]
[130.88973999 -78.63375854]
[140.86357117 -67.46826935]
[145.81611633 -53.29656982]
[144.96328735 -38.26792145]
[138.40394592 -24.67422104]
[127.10958099 -14.60046768]
[112.78056335 -9.60498142]
[111.85714722 5.36656857]
[110.93373871 20.33811760]
[110.16407776 35.31835938]
[109.54824829 50.30571365]
[108.93242645 65.29306793]
[108.31659698 80.28041840]
[123.32741547 95.83275604]
[117.76762390 118.97070312]
[132.35137939 115.46154022]
[146.93511963 111.95236969]
[161.51887512 108.44320679]
[176.10261536 104.93403625]
[185.67073059 92.05651093]
[201.70869446 91.65217590]
[211.91354370 104.03121185]
[208.45700073 119.69747925]
[193.99063110 126.63315582]
[179.61178589 119.51778412]
[165.02804565 123.02695465]
[150.44429016 126.53611755]
[135.86053467 130.04528809]
[121.27679443 133.55445862]
[112.99131775 146.05848694]
[115.44424438 160.85656738]
[117.89717102 175.65464783]
[120.35009766 190.45272827]
[122.80302429 205.25080872]
[125.25595856 220.04888916]
[127.70888519 234.84696960]
[136.03498840 222.36994934]
[150.04904175 217.02148438]
[164.57089233 220.77859497]
[174.23265076 232.25250244]
[175.46293640 247.20196533]
[167.80699158 260.10104370]
[154.09475708 266.18170166]
[139.39483643 263.19631958]
[129.14141846 252.24932861]
[129.14141846 267.24932861]
[129.14141846 282.24932861]
[129.14141846 297.24932861]
[129.14141846 312.24932861]
[129.14141846 327.24932861]
[129.14141846 342.24932861]
[129.14141846 357.24932861]
[129.14141846 372.24932861]
[129.14141846 387.24932861]
[143.75143433 390.99075317]
[156.97158813 398.24874878]
[167.97087097 408.56701660]
[176.05783081 421.29696655]
[180.72413635 435.63839722]
[181.67645264 450.68975830]
[178.85491943 465.50494385]
[172.43688965 479.15264893]
[162.82582092 490.77496338]
[150.62585449 499.64129639]
[136.60391235 505.19430542]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 123]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[28 117]
[29 52]
[30 51]
[31 50]
[32 49]
[39 48]
[40 47]
[41 46]
[55 100]
[56 99]
[57 98]
[58 97]
[60 96]
[61 95]
[62 94]
[69 87]
[70 86]
[71 85]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
