%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUCCAGGGGGGGGGGCAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAAxxxxxxxxxxAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCCCCCCCCCCCAUCCUCCA\
) } def
/len { sequence length } bind def

/coor [
[100.00169373 639.07867432]
[87.44346619 630.72747803]
[77.35724640 619.51501465]
[70.37705231 606.14611816]
[66.94166565 591.46112061]
[67.26704407 576.38317871]
[71.33272552 561.86004639]
[78.88314819 548.80474854]
[89.44367981 538.03784180]
[102.35047150 530.23620605]
[116.79219818 525.89025879]
[116.16822052 510.90322876]
[115.54424286 495.91619873]
[114.92026520 480.92919922]
[114.29628754 465.94216919]
[113.67230988 450.95516968]
[113.04833221 435.96813965]
[112.42435455 420.98114014]
[111.80037689 405.99411011]
[111.17640686 391.00708008]
[95.99931335 388.03884888]
[81.95928192 381.53488159]
[69.86740875 371.86636353]
[60.42332077 359.58743286]
[54.17472839 345.40335083]
[51.48564148 330.13009644]
[52.51515961 314.64739990]
[57.20808029 299.84805298]
[65.29783630 286.58645630]
[76.32161713 275.62921143]
[89.64688873 267.61093140]
[104.50764465 262.99737549]
[103.57201385 248.02656555]
[102.63638306 233.05577087]
[101.70075226 218.08499146]
[87.08090210 211.27238464]
[77.82302094 197.95045471]
[76.52057648 181.68597412]
[83.62151337 166.89164734]
[97.28099823 157.62896729]
[96.03411865 142.68087769]
[94.78724670 127.73278809]
[93.54037476 112.78469849]
[85.72563171 101.19067383]
[91.51154327 88.46217346]
[79.74349976 97.76342773]
[65.08736420 94.57005310]
[58.25558090 81.21614838]
[64.24162292 67.46234131]
[78.67018890 63.36154556]
[90.99483490 71.91054535]
[91.30688477 56.91379166]
[91.61894226 41.91703796]
[91.93099976 26.92028427]
[92.24305725 11.92353058]
[92.55511475 -3.07322264]
[92.39907837 -18.07241058]
[91.77510071 -33.05942535]
[91.15112305 -48.04644394]
[90.52714539 -63.03345871]
[89.90316772 -78.02047729]
[78.55492401 -88.69076538]
[78.13562012 -103.89862061]
[88.37804413 -114.65167999]
[87.75406647 -129.63870239]
[87.13008881 -144.62571716]
[72.67506409 -149.18948364]
[60.65456772 -158.42439270]
[52.52014542 -171.21528625]
[49.25405884 -186.01759338]
[51.25070953 -201.04388428]
[58.26899338 -214.47962952]
[69.46141052 -224.70242310]
[83.47643280 -230.47781372]
[98.62166595 -231.10838318]
[113.06826019 -226.51797485]
[125.07171631 -217.26094055]
[133.18255615 -204.45507812]
[136.42135620 -189.64675903]
[134.39701843 -174.62419128]
[127.35398102 -161.20138550]
[116.14274597 -150.99923706]
[102.11710358 -145.24969482]
[102.74108124 -130.26268005]
[103.36505890 -115.27565765]
[114.46588898 -105.41121674]
[115.31218719 -90.22113800]
[104.89018250 -78.64445496]
[105.51416016 -63.65743637]
[106.13813782 -48.67042160]
[106.76211548 -33.68340302]
[107.38609314 -18.69638824]
[109.78094482 -16.02577591]
[110.96720886 -12.03899097]
[110.32997131 -7.33300447]
[107.55186462 -2.76116633]
[107.23980713 12.23558712]
[106.92775726 27.23234177]
[106.61569977 42.22909546]
[106.30364227 57.22584915]
[105.99158478 72.22260284]
[106.45962524 87.21530151]
[114.27436829 98.80932617]
[108.48845673 111.53782654]
[109.73533630 126.48591614]
[110.98220825 141.43400574]
[112.22908020 156.38209534]
[125.20516205 161.69879150]
[134.56942749 172.04779053]
[138.52870178 185.36203003]
[136.36175537 199.01530457]
[128.54989624 210.34024048]
[116.67154694 217.14935303]
[117.60717773 232.12014771]
[118.54280090 247.09094238]
[119.47843170 262.06173706]
[133.84707642 264.50601196]
[147.29922485 270.09643555]
[159.15583801 278.54711914]
[168.81924438 289.42797852]
[175.80322266 302.18649292]
[179.75753784 316.17575073]
[180.48541260 330.68740845]
[177.95343018 344.98730469]
[172.29293823 358.35290527]
[163.79331970 370.10949707]
[152.88716125 379.66455078]
[140.12823486 386.53729248]
[126.16342163 390.38311768]
[126.78739929 405.37011719]
[127.41137695 420.35714722]
[128.03535461 435.34417725]
[128.65933228 450.33117676]
[129.28330994 465.31820679]
[129.90728760 480.30520630]
[130.53126526 495.29223633]
[131.15524292 510.27923584]
[131.77922058 525.26623535]
[146.53222656 528.39672852]
[160.04286194 535.09844971]
[171.46183777 544.95025635]
[180.07135010 557.33276367]
[185.33020020 571.46765137]
[186.90780640 586.46643066]
[184.70500183 601.38616943]
[178.86024475 615.28900146]
[169.74096680 627.30108643]
[157.92039490 636.66723633]
[144.14158630 642.79870605]
[129.27069092 645.31011963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[32 116]
[33 115]
[34 114]
[35 113]
[40 107]
[41 106]
[42 105]
[43 104]
[45 102]
[51 101]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[64 85]
[65 84]
[66 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
