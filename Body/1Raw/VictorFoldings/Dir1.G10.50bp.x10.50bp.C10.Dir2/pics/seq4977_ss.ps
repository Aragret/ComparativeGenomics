%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAGCUAUGGGGGGGGGGAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUAxxxxxxxxxxCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGCCCCCCCCCCAUAACAGCUAU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 378.38836670]
[71.01555634 372.83535767]
[58.81560135 363.96902466]
[49.20452881 352.34671021]
[42.78650284 338.69900513]
[39.96496582 323.88381958]
[40.91728210 308.83245850]
[45.58358765 294.49102783]
[53.67055511 281.76107788]
[64.66983032 271.44277954]
[77.88998413 264.18481445]
[92.50000000 260.44338989]
[92.50000000 245.44337463]
[92.50000000 230.44337463]
[92.50000000 215.44337463]
[92.50000000 200.44337463]
[92.50000000 185.44337463]
[92.50000000 170.44337463]
[92.50000000 155.44337463]
[92.50000000 140.44337463]
[92.50000000 125.44338226]
[75.46742249 110.08803558]
[76.77095032 87.19270325]
[66.21893311 76.53179169]
[55.66691971 65.87088776]
[58.95208359 80.50672150]
[59.37393570 95.50078583]
[56.91686630 110.29817963]
[51.67181015 124.35127258]
[43.83287048 137.13998413]
[33.69016266 148.19102478]
[21.61904335 157.09539795]
[8.06624699 163.52360535]
[-6.46665859 167.23771667]
[-21.44183731 168.10029602]
[-36.30508041 166.07940674]
[-50.50632858 161.24986267]
[-63.52001190 153.79035950]
[-74.86452484 143.97700500]
[-84.12001038 132.17294312]
[-90.94395447 118.81503296]
[-95.08380890 104.39762115]
[-96.38636780 89.45428467]
[-94.80341339 74.53804016]
[-90.39354706 60.20092392]
[-83.31995392 46.97351456]
[-73.84442139 35.34534836]
[-62.31762314 25.74675560]
[-49.16614914 18.53296852]
[-34.87671280 13.97095490]
[-19.97813797 12.22954941]
[-5.02179861 13.37319756]
[9.43879604 17.35957336]
[22.86848450 24.04115105]
[34.77025604 33.17065430]
[44.70617294 44.41370010]
[42.25324631 29.61561966]
[39.80031586 14.81754112]
[37.34738922 0.01946181]
[34.89446259 -14.77861691]
[30.05464554 -28.97636986]
[22.95824242 -42.19155121]
[8.73815250 -50.35985184]
[8.97264576 -66.75732422]
[23.42049408 -74.51565552]
[37.21899033 -65.65373993]
[36.17342377 -49.28795624]
[43.26982880 -36.07277298]
[44.33582306 -51.03484726]
[50.36816406 -64.76841736]
[60.66511917 -75.67587280]
[74.02886200 -82.48838806]
[88.90482330 -84.41345978]
[103.56250000 -81.22715759]
[116.29679108 -73.30013275]
[125.62635803 -61.55452728]
[130.46589661 -47.35667801]
[130.25242615 -32.35819626]
[125.01078796 -18.30382919]
[115.35073853 -6.82849026]
[102.39600372 0.73291475]
[87.65358734 3.50078177]
[72.83843994 1.15313053]
[59.67398453 -6.03694153]
[49.69253922 -17.23154449]
[52.14546967 -2.43346620]
[54.59839630 12.36461258]
[57.05132294 27.16269112]
[59.50425339 41.96076965]
[66.32782745 55.31887054]
[76.87984467 65.97978210]
[87.43186188 76.64068604]
[98.16385651 70.99534607]
[111.34349823 70.50653076]
[124.43002319 76.15708923]
[137.85746765 69.47101593]
[151.28492737 62.78493881]
[164.71237183 56.09886169]
[178.13981628 49.41278839]
[191.56727600 42.72671127]
[196.35147095 27.66394234]
[210.42361450 20.47018433]
[225.43496704 25.41336441]
[232.47953796 39.56078339]
[227.37792969 54.51902771]
[213.15681458 61.41363907]
[198.25334167 56.15416336]
[184.82589722 62.84023666]
[171.39845276 69.52631378]
[157.97099304 76.21238708]
[144.54354858 82.89846039]
[131.11610413 89.58454132]
[132.50012207 104.52055359]
[146.92750549 108.62549591]
[161.35488892 112.73043823]
[175.78227234 116.83538818]
[186.75260925 106.08608246]
[201.63182068 102.27761841]
[216.41749573 106.43445587]
[227.13237000 117.43841553]
[230.89416504 132.32949829]
[226.69100952 147.10208130]
[215.65351868 157.78239441]
[200.75071716 161.49751282]
[185.99137878 157.24806213]
[175.34571838 146.17713928]
[171.67733765 131.26277161]
[157.24995422 127.15782166]
[142.82255554 123.05287933]
[128.39517212 118.94793701]
[117.97973633 124.42766571]
[107.50000000 125.44338226]
[107.50000000 140.44337463]
[107.50000000 155.44337463]
[107.50000000 170.44337463]
[107.50000000 185.44337463]
[107.50000000 200.44337463]
[107.50000000 215.44337463]
[107.50000000 230.44337463]
[107.50000000 245.44337463]
[107.50000000 260.44338989]
[122.11001587 264.18481445]
[135.33016968 271.44277954]
[146.32945251 281.76107788]
[154.41641235 294.49102783]
[159.08271790 308.83245850]
[160.03503418 323.88381958]
[157.21350098 338.69900513]
[150.79547119 352.34671021]
[141.18440247 363.96902466]
[128.98443604 372.83535767]
[114.96250153 378.38836670]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 92]
[24 91]
[25 90]
[56 89]
[57 88]
[58 87]
[59 86]
[60 85]
[61 68]
[62 67]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
