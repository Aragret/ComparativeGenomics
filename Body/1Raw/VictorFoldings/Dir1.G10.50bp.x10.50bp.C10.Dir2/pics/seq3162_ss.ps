%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACACCCACCGGGGGGGGGGCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUxxxxxxxxxxUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCCCCCCCCCCCACAACCACC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 386.35519409]
[71.01555634 380.80218506]
[58.81560135 371.93585205]
[49.20452881 360.31353760]
[42.78650284 346.66583252]
[39.96496582 331.85064697]
[40.91728210 316.79925537]
[45.58358765 302.45785522]
[53.67055511 289.72790527]
[64.66983032 279.40960693]
[77.88998413 272.15164185]
[92.50000000 268.41021729]
[92.50000000 253.41020203]
[92.50000000 238.41020203]
[92.50000000 223.41020203]
[92.50000000 208.41020203]
[92.50000000 193.41020203]
[92.50000000 178.41020203]
[92.50000000 163.41020203]
[92.50000000 148.41020203]
[92.50000000 133.41020203]
[86.24570465 135.72779846]
[79.18416595 136.85377502]
[71.54087830 136.60739136]
[63.57592010 134.84982300]
[55.57629395 131.49029541]
[41.06766891 135.29815674]
[26.55904198 139.10601807]
[12.05041695 142.91387939]
[2.74871874 155.98513794]
[-13.27755642 156.71867371]
[-23.73442078 144.55177307]
[-20.60026550 128.81784058]
[-6.27934313 121.58660126]
[8.24255753 128.40525818]
[22.75118256 124.59738922]
[37.25980759 120.78953552]
[51.76843262 116.98167419]
[52.30696869 109.50103760]
[37.74510574 113.09994507]
[29.82249641 100.36290741]
[39.48793793 88.89210510]
[53.38403702 94.53975677]
[53.92257309 87.05911255]
[40.10898972 81.21232605]
[26.29540825 75.36553955]
[9.35228634 74.75977325]
[5.24405193 58.31110382]
[19.91263008 49.80997849]
[32.14219666 61.55195618]
[45.95578003 67.39874268]
[59.76936340 73.24552917]
[68.05484009 60.74149323]
[57.28615952 50.29948425]
[41.28742218 49.10784531]
[32.36341476 35.77586365]
[37.35987091 20.53070259]
[52.44393539 15.06714058]
[66.04441071 23.57635498]
[67.72816467 39.53080750]
[78.49684906 49.97281647]
[90.36363983 50.51905060]
[100.98624420 53.64215851]
[109.85057068 58.83610916]
[116.60033417 65.50239563]
[121.05116272 72.99369812]
[132.64021301 63.47035980]
[144.22926331 53.94702530]
[155.81831360 44.42368698]
[167.40736389 34.90034866]
[178.99639893 25.37701035]
[170.84643555 12.76449203]
[164.18733215 -0.69485843]
[159.10591125 -14.82556915]
[155.66842651 -29.44341850]
[153.91970825 -44.35783005]
[153.88252258 -59.37436676]
[155.55737305 -74.29725647]
[158.92242432 -88.93194580]
[163.93379211 -103.08765411]
[170.52616882 -116.57981110]
[178.61358643 -129.23252869]
[188.09062195 -140.88087463]
[198.83370972 -151.37295532]
[210.70280457 -160.57199097]
[223.54316711 -168.35806274]
[237.18737793 -174.62966919]
[251.45758057 -179.30503845]
[266.16772461 -182.32321167]
[281.12603760 -183.64485168]
[296.13751221 -183.25271606]
[311.00640869 -181.15193176]
[325.53890991 -177.36988831]
[339.54556274 -171.95587158]
[352.84375000 -164.98048401]
[365.26010132 -156.53465271]
[376.63275146 -146.72848511]
[386.81341553 -135.68983459]
[395.66937256 -123.56260681]
[403.08517456 -110.50490570]
[408.96417236 -96.68697357]
[413.22964478 -82.28894043]
[415.82604980 -67.49851990]
[416.71954346 -52.50854111]
[415.89840698 -37.51442719]
[413.37341309 -22.71165085]
[409.17745972 -8.29320335]
[403.36523438 5.55294418]
[396.01251221 18.64627838]
[387.21517944 30.81609917]
[377.08789062 41.90375137]
[365.76269531 51.76467896]
[353.38726807 60.27033234]
[340.12289429 67.30981445]
[326.14254761 72.79135895]
[311.62844849 76.64350128]
[296.76983643 78.81601715]
[281.76043701 79.28057861]
[266.79592896 78.03114319]
[252.07139587 75.08398438]
[237.77879333 70.47753906]
[224.10447693 64.27185059]
[211.22668457 56.54783249]
[199.31333923 47.40617371]
[188.51974487 36.96606064]
[176.93069458 46.48939896]
[165.34164429 56.01273346]
[153.75259399 65.53607178]
[142.16354370 75.05941010]
[130.57449341 84.58274841]
[130.95880127 114.63026428]
[107.50000000 133.41020203]
[107.50000000 148.41020203]
[107.50000000 163.41020203]
[107.50000000 178.41020203]
[107.50000000 193.41020203]
[107.50000000 208.41020203]
[107.50000000 223.41020203]
[107.50000000 238.41020203]
[107.50000000 253.41020203]
[107.50000000 268.41021729]
[122.11001587 272.15164185]
[135.33016968 279.40960693]
[146.32945251 289.72790527]
[154.41641235 302.45785522]
[159.08271790 316.79925537]
[160.03503418 331.85064697]
[157.21350098 346.66583252]
[150.79547119 360.31353760]
[141.18440247 371.93585205]
[128.98443604 380.80218506]
[114.96250153 386.35519409]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[26 38]
[27 37]
[28 36]
[29 35]
[44 52]
[45 51]
[46 50]
[53 61]
[54 60]
[66 130]
[67 129]
[68 128]
[69 127]
[70 126]
[71 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
