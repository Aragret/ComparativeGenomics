%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACCCUCAGGGGGGGGGGCUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAxxxxxxxxxxGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACUCCUCACCCCCCCCCCAUUACCCACA\
) } def
/len { sequence length } bind def

/coor [
[75.54453278 381.15914917]
[61.69858932 375.14312744]
[49.98992920 365.61370850]
[41.28740311 353.27804565]
[36.23680115 339.05151367]
[35.21291351 323.98983765]
[38.29170990 309.21066284]
[45.24473190 295.81076050]
[55.55601501 284.78442383]
[68.46039581 276.94989014]
[83.00028229 272.88858032]
[83.00028229 257.88858032]
[83.00028229 242.88859558]
[83.00028229 227.88859558]
[83.00028229 212.88859558]
[83.00028229 197.88859558]
[83.00028229 182.88859558]
[83.00028229 167.88859558]
[83.00028229 152.88859558]
[83.00028229 137.88859558]
[70.64871216 129.37750244]
[56.63199997 134.71900940]
[42.61528778 140.06053162]
[28.59857368 145.40203857]
[25.52695465 160.52052307]
[14.75290585 171.56242371]
[-0.28561369 175.00428772]
[-14.78986740 169.74784851]
[-24.13159943 157.47041321]
[-25.32989883 142.08966064]
[-18.00239182 128.51353455]
[-4.48725891 121.07412720]
[10.90287018 122.14533234]
[23.25706100 131.38533020]
[37.27377319 126.04381561]
[51.29048538 120.70230103]
[65.30719757 115.36078644]
[64.99617767 91.28640747]
[78.86721039 73.10691833]
[99.83084869 67.66687775]
[103.23382568 53.05798721]
[106.63680267 38.44909286]
[110.03977966 23.84020233]
[113.44276428 9.23130989]
[111.88038635 4.11480999]
[112.42565155 -0.60271752]
[114.56018066 -4.17279577]
[117.54062653 -6.16889381]
[121.84821320 -20.53707695]
[126.15579987 -34.90526199]
[130.46337891 -49.27344513]
[116.58962250 -64.56935883]
[114.21159363 -84.95355988]
[124.06800842 -102.80794525]
[142.35317993 -111.54698944]
[143.60005188 -126.49507904]
[144.84692383 -141.44316101]
[146.09379578 -156.39125061]
[137.21853638 -144.29870605]
[125.91659546 -134.43634033]
[112.73362732 -127.28028107]
[98.30605316 -123.17600250]
[83.33039856 -122.32164764]
[68.52966309 -124.75846100]
[54.61837006 -130.36880493]
[42.26812363 -138.88182068]
[32.07516861 -149.88653564]
[24.53158569 -162.85165405]
[20.00156021 -177.15126038]
[18.70379257 -192.09501648]
[20.70093346 -206.96147156]
[25.89656448 -221.03291321]
[34.03985977 -233.63000488]
[44.73767471 -244.14459229]
[57.47355652 -252.06907654]
[71.63264465 -257.02087402]
[86.53137970 -258.76089478]
[101.45048523 -257.20520020]
[115.66970825 -252.42884827]
[128.50259399 -244.66242981]
[139.32958984 -234.28089905]
[147.62800598 -221.78544617]
[152.99720764 -207.77931213]
[155.17799377 -192.93869019]
[154.06546021 -177.98210144]
[162.83168030 -190.15394592]
[171.59788513 -202.32577515]
[168.81355286 -217.88287354]
[177.91369629 -230.80427551]
[193.49934387 -233.42398071]
[206.32383728 -224.18772888]
[208.77859497 -208.57525635]
[199.40728760 -195.84913635]
[183.76971436 -193.55957031]
[175.00350952 -181.38772583]
[166.23730469 -169.21589661]
[161.04188538 -155.14437866]
[159.79501343 -140.19628906]
[158.54814148 -125.24819946]
[157.30126953 -110.30011749]
[164.57546997 -106.93473053]
[170.82695007 -101.91886902]
[175.68882751 -95.54690552]
[190.01142883 -100.00371552]
[203.33876038 -110.48314667]
[217.09802246 -100.57763672]
[211.38856506 -84.61397552]
[194.46824646 -85.68112183]
[180.14564514 -81.22430420]
[179.20196533 -69.95987701]
[174.50634766 -59.61455917]
[166.56927490 -51.40600967]
[156.28514099 -46.31447983]
[144.83157349 -44.96586227]
[140.52398682 -30.59767723]
[136.21640015 -16.22949409]
[131.90881348 -1.86130917]
[128.05165100 12.63428783]
[124.64867401 27.24317932]
[121.24569702 41.85207367]
[117.84272003 56.46096420]
[114.43974304 71.06985474]
[122.85774231 76.25839233]
[129.45486450 83.87518311]
[133.53865051 93.29243469]
[134.63008118 103.68793488]
[132.51692200 114.11669159]
[127.28342438 123.59680176]
[119.31263733 131.20187378]
[109.26002502 136.15110779]
[98.00028229 137.88859558]
[98.00028229 152.88859558]
[98.00028229 167.88859558]
[98.00028229 182.88859558]
[98.00028229 197.88859558]
[98.00028229 212.88859558]
[98.00028229 227.88859558]
[98.00028229 242.88859558]
[98.00028229 257.88858032]
[98.00028229 272.88858032]
[112.54016876 276.94989014]
[125.44454956 284.78442383]
[135.75584412 295.81076050]
[142.70886230 309.21066284]
[145.78765869 323.98983765]
[144.76376343 339.05151367]
[139.71316528 353.27804565]
[131.01063538 365.61370850]
[119.30197906 375.14312744]
[105.45603943 381.15914917]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[24 34]
[40 122]
[41 121]
[42 120]
[43 119]
[44 118]
[48 117]
[49 116]
[50 115]
[51 114]
[55 100]
[56 99]
[57 98]
[58 97]
[85 96]
[86 95]
[87 94]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
