%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCUAAUGGGGGGGGGGGCUUACCGAACGAAAAAUUCUAGGCUAUAUACAACUACGCAAAGGCCCCAxxxxxxxxxxCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACCCCCCCCCCCAAUCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[92.78337860 362.70327759]
[78.93743896 356.68725586]
[67.22877502 347.15783691]
[58.52625275 334.82217407]
[53.47565079 320.59564209]
[52.45175934 305.53396606]
[55.53055954 290.75479126]
[62.48358154 277.35488892]
[72.79486847 266.32855225]
[85.69924927 258.49404907]
[100.23913574 254.43272400]
[100.23913574 239.43272400]
[100.23913574 224.43272400]
[100.23913574 209.43272400]
[100.23913574 194.43272400]
[100.23913574 179.43272400]
[100.23913574 164.43272400]
[100.23913574 149.43272400]
[100.23913574 134.43272400]
[100.23913574 119.43272400]
[88.63779449 109.92436218]
[73.92983246 112.86985016]
[59.22187042 115.81533051]
[44.51390839 118.76081085]
[29.80594635 121.70629883]
[24.51471138 125.84275818]
[18.79141426 126.53207397]
[14.42551231 124.45495605]
[-0.39224586 126.78605652]
[-15.21000385 129.11715698]
[-23.12236214 142.60525513]
[-37.87082291 147.80303955]
[-52.49161148 142.25627136]
[-60.08124161 128.58398438]
[-57.05611801 113.24179840]
[-44.84461594 103.47383118]
[-29.21263123 103.89221954]
[-17.54110718 114.29940796]
[-2.72334981 111.96829987]
[12.09440804 109.63719940]
[26.86046410 106.99833679]
[41.56842422 104.05284882]
[56.27638626 101.10736847]
[70.98435211 98.16188812]
[85.69230652 95.21640015]
[97.09333038 85.46875000]
[102.28874969 71.39723206]
[107.48416138 57.32571411]
[112.67958069 43.25419235]
[117.72833252 29.12939072]
[122.62988281 14.95283222]
[127.53143311 0.77627438]
[117.76894379 -16.71487617]
[123.82436371 -35.49116135]
[141.41848755 -43.72630310]
[145.42622375 -58.18099213]
[149.43395996 -72.63568115]
[153.44171143 -87.09037018]
[140.31466675 -104.71134949]
[143.22021484 -126.24332428]
[160.16035461 -139.45207214]
[159.84829712 -154.44882202]
[159.53623962 -169.44558716]
[159.22418213 -184.44233704]
[158.91212463 -199.43908691]
[144.37385559 -203.57792664]
[131.70231628 -211.81950378]
[122.02426910 -223.43099976]
[116.20027924 -237.37992859]
[114.74820709 -252.42594910]
[117.79717255 -267.23120117]
[125.07605743 -280.47918701]
[135.93763733 -290.99191284]
[149.41609192 -297.83459473]
[164.31295776 -300.39880371]
[179.30357361 -298.45651245]
[193.05502319 -292.18041992]
[204.34451294 -282.12863159]
[212.16819763 -269.19488525]
[215.83039856 -254.52929688]
[215.00547791 -239.43588257]
[209.76676941 -225.25675964]
[200.58012390 -213.25273132]
[188.26240540 -204.49116516]
[173.90887451 -199.75114441]
[174.22093201 -184.75439453]
[174.53298950 -169.75764465]
[174.84504700 -154.76087952]
[175.15710449 -139.76412964]
[178.37126160 -138.74440002]
[181.44122314 -137.34941101]
[184.32334900 -135.59898376]
[195.82514954 -145.22750854]
[207.32695007 -154.85603333]
[212.44229126 -170.43696594]
[228.54670715 -173.53211975]
[239.07334900 -160.95745850]
[233.19331360 -145.64872742]
[216.95547485 -143.35423279]
[205.45367432 -133.72570801]
[193.95187378 -124.09718323]
[196.69572449 -113.09605408]
[194.90148926 -101.82170868]
[188.79524231 -92.08350372]
[179.29994202 -85.46844482]
[167.89639282 -83.08262634]
[163.88865662 -68.62793732]
[159.88092041 -54.17325211]
[155.87316895 -39.71856308]
[163.22055054 -32.39219666]
[166.86018372 -22.58901405]
[166.06181335 -12.08115768]
[160.90406799 -2.79857373]
[152.27246094 3.52545357]
[141.70799255 5.67782497]
[136.80644226 19.85438347]
[131.90489197 34.03094101]
[132.69676208 41.42814255]
[126.75109863 48.44960785]
[121.55567932 62.52112961]
[116.36026764 76.59265137]
[111.16484833 90.66416931]
[121.06040192 79.39127350]
[135.47515869 75.24221039]
[149.84944153 79.52940369]
[159.63636780 90.89673615]
[161.74012756 105.74847412]
[155.49525452 119.38671112]
[142.87713623 127.49739838]
[127.87715149 127.51495361]
[115.23913574 119.43272400]
[115.23913574 134.43272400]
[115.23913574 149.43272400]
[115.23913574 164.43272400]
[115.23913574 179.43272400]
[115.23913574 194.43272400]
[115.23913574 209.43272400]
[115.23913574 224.43272400]
[115.23913574 239.43272400]
[115.23913574 254.43272400]
[129.77902222 258.49404907]
[142.68339539 266.32855225]
[152.99468994 277.35488892]
[159.94770813 290.75479126]
[163.02650452 305.53396606]
[162.00260925 320.59564209]
[156.95201111 334.82217407]
[148.24949646 347.15783691]
[136.54083252 356.68725586]
[122.69488525 362.70327759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 45]
[22 44]
[23 43]
[24 42]
[25 41]
[28 40]
[29 39]
[30 38]
[46 122]
[47 121]
[48 120]
[49 119]
[50 117]
[51 116]
[52 115]
[55 109]
[56 108]
[57 107]
[58 106]
[61 89]
[62 88]
[63 87]
[64 86]
[65 85]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
