%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACUCAUCGGGGGGGGGGACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAAxxxxxxxxxxAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCCCCCCCCCCCACACUUAUC\
) } def
/len { sequence length } bind def

/coor [
[94.11925507 382.77154541]
[80.89905548 375.49908447]
[70.01225281 365.05209351]
[62.20112228 352.14282227]
[57.99824142 337.65151978]
[57.69017029 322.56619263]
[61.29791260 307.91534424]
[68.57548523 294.69796753]
[79.02669525 283.81518555]
[91.93895721 276.00906372]
[106.43189240 271.81176758]
[106.11983490 256.81500244]
[105.80777740 241.81825256]
[105.49571991 226.82150269]
[105.18366241 211.82475281]
[104.87161255 196.82800293]
[104.55955505 181.83123779]
[104.24749756 166.83448792]
[103.93544006 151.83773804]
[103.62338257 136.84098816]
[93.68329620 135.05364990]
[84.97451782 130.74229431]
[78.09229279 124.43405914]
[73.44117737 116.78213501]
[59.21439743 121.53594971]
[44.98762131 126.28976440]
[39.41923904 140.90232849]
[25.73573685 148.47172546]
[10.39804268 145.42391968]
[0.64814806 133.19798279]
[1.08965445 117.56662750]
[11.51409626 105.91051483]
[26.99937057 103.73329163]
[40.23380661 112.06298828]
[54.46058273 107.30917358]
[68.68736267 102.55535889]
[70.61072540 88.89676666]
[78.19917297 77.37844086]
[89.98995209 70.22064209]
[88.74307251 55.27256012]
[87.49620056 40.32447052]
[86.24932861 25.37638474]
[85.00244904 10.42829800]
[74.14872742 -4.41004848]
[82.16537476 -19.98995018]
[80.60778809 -34.90886307]
[72.75036621 -47.68621826]
[60.13923645 -55.80776215]
[47.52811050 -63.92930222]
[31.13094330 -64.18421936]
[23.39060974 -78.64171600]
[32.26970291 -92.42916870]
[48.63417053 -91.36322021]
[55.64965057 -76.54042816]
[68.26078033 -68.41889191]
[80.87191010 -60.29734802]
[94.11449432 -67.34248352]
[94.42655182 -82.33923340]
[94.73860931 -97.33599091]
[82.54688263 -106.75236511]
[78.28733826 -121.37117767]
[83.39225769 -135.52758789]
[95.70676422 -143.86370850]
[96.01882172 -158.86045837]
[96.33087921 -173.85720825]
[81.87863159 -178.22013855]
[69.14002991 -186.32141113]
[59.06036377 -197.55986023]
[52.38761520 -211.10154724]
[49.61694717 -225.94155884]
[50.95395660 -240.97866821]
[56.29942703 -255.09704590]
[65.25669861 -267.24899292]
[77.16107178 -276.53277588]
[91.12917328 -282.25942993]
[106.12446594 -284.00405884]
[121.03421021 -281.63717651]
[134.75199890 -275.33441162]
[146.25987244 -265.56347656]
[154.70388794 -253.04942322]
[159.45742798 -238.72090149]
[160.16775513 -223.64118958]
[156.78216553 -208.92927551]
[149.55187988 -195.67689514]
[139.01344299 -184.86746216]
[125.94886017 -177.30310059]
[111.32762909 -173.54515076]
[111.01557922 -158.54840088]
[110.70352173 -143.55165100]
[122.66059875 -134.71047974]
[127.17221069 -120.35396576]
[122.30823517 -105.92500305]
[109.73535919 -97.02393341]
[109.42330170 -82.02717590]
[109.11124420 -67.03042603]
[110.69512939 -59.07273102]
[109.72040558 -51.35762405]
[106.49565887 -44.65350723]
[101.54310608 -39.56239319]
[95.52670288 -36.46644211]
[97.08428192 -21.54753113]
[106.30249023 -13.65246677]
[107.68843079 -1.19059980]
[99.95053864 9.18142319]
[101.19741058 24.12951088]
[102.44429016 39.07759857]
[103.69116211 54.02568436]
[104.93803406 68.97377014]
[122.64354706 75.60535431]
[134.20759583 91.90917969]
[134.67041016 112.97497559]
[149.08262634 117.13286591]
[163.49484253 121.29074860]
[173.27033997 109.61344910]
[186.95314026 102.92758942]
[202.17262268 102.39154053]
[216.29191589 108.09816742]
[226.86474609 119.05877686]
[232.05934143 133.37437439]
[230.97567749 148.56468201]
[223.80152893 161.99789429]
[211.77983093 171.34663391]
[196.99345398 174.99118042]
[182.00419617 172.30006409]
[169.40904236 163.73956299]
[161.39019775 150.79283142]
[159.33694458 135.70297241]
[144.92472839 131.54507446]
[130.51251221 127.38719177]
[118.62014008 136.52893066]
[118.93219757 151.52568054]
[119.24424744 166.52243042]
[119.55630493 181.51919556]
[119.86836243 196.51594543]
[120.18041992 211.51269531]
[120.49247742 226.50944519]
[120.80453491 241.50621033]
[121.11658478 256.50296021]
[121.42864227 271.49972534]
[136.08363342 275.09048462]
[149.30944824 282.35272217]
[160.20431519 292.79132080]
[168.02540588 305.69454956]
[172.23948669 320.18261719]
[172.55920410 335.26770020]
[168.96276855 349.92132568]
[161.69541931 363.14431763]
[151.25260925 374.03515625]
[138.34637451 381.85125732]
[123.85668945 386.05975342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 36]
[25 35]
[26 34]
[39 108]
[40 107]
[41 106]
[42 105]
[43 104]
[45 101]
[46 100]
[47 56]
[48 55]
[49 54]
[57 95]
[58 94]
[59 93]
[63 89]
[64 88]
[65 87]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
