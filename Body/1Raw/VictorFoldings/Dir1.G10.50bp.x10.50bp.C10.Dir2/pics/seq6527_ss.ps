%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCCUUAGCAGGGGGGGGGGGGGAACUACUCCCACCCUGGAGCCUCCGUAGACCUAACCAUCUUCUCCUUxxxxxxxxxxUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCAACGAUCCCCCCCCCCCCCUCCCUUACCA\
) } def
/len { sequence length } bind def

/coor [
[83.29570007 437.18035889]
[68.27335358 436.27746582]
[53.71586990 432.46093750]
[40.18281555 425.87741089]
[28.19435310 416.77999878]
[18.21129227 405.51834106]
[10.61735535 392.52532959]
[5.70443249 378.30038452]
[3.66136312 363.39025879]
[4.56667757 348.36804199]
[8.38557816 333.81118774]
[14.97127628 320.27917480]
[24.07063484 308.29220581]
[35.33390045 298.31097412]
[48.32814026 290.71911621]
[62.55389404 285.80850220]
[77.46435547 283.76785278]
[78.36427307 268.79486084]
[79.26419067 253.82188416]
[80.16410828 238.84890747]
[81.06401825 223.87593079]
[81.96393585 208.90295410]
[82.86385345 193.92996216]
[83.76377106 178.95698547]
[84.66368103 163.98400879]
[85.56359863 149.01101685]
[86.46351624 134.03804016]
[81.24040222 128.65574646]
[70.47564697 139.10180664]
[60.02976608 128.33688354]
[70.79416656 117.89117432]
[65.57104492 112.50888062]
[50.57780457 112.95904541]
[35.58456039 113.40920258]
[20.59131813 113.85936737]
[9.94023609 125.53540802]
[-5.85103703 126.17669678]
[-17.41381836 115.40276337]
[-17.88811684 99.60559082]
[-6.99253798 88.15736389]
[8.80876350 87.85011292]
[20.14115715 98.86611938]
[35.13439941 98.41596222]
[50.12764359 97.96579742]
[65.12088776 97.51564026]
[69.96176910 87.24509430]
[77.46105194 79.74842834]
[86.38707733 75.56935883]
[95.46334076 74.77078247]
[103.54017639 76.97005463]
[110.47010040 63.66682053]
[117.40003204 50.36358261]
[116.91356659 34.54985809]
[129.65557861 26.83685684]
[136.58551025 13.53361988]
[143.51542664 0.23038319]
[150.44535828 -13.07285404]
[157.37528992 -26.37609100]
[144.78109741 -34.54499817]
[133.02044678 -43.87408066]
[122.19983673 -54.27885818]
[112.41728210 -65.66509247]
[103.76136780 -77.92967224]
[96.31048584 -90.96151733]
[90.13211060 -104.64261627]
[85.28219604 -118.84906006]
[81.80467224 -133.45219421]
[79.73102570 -148.31977844]
[79.08003998 -163.31713867]
[79.85760498 -178.30847168]
[82.05667877 -193.15802002]
[85.65735626 -207.73127747]
[90.62702179 -221.89627075]
[96.92066193 -235.52471924]
[104.48129272 -248.49320984]
[113.24043274 -260.68429565]
[123.11875916 -271.98754883]
[134.02680969 -282.30059814]
[145.86578369 -291.53005981]
[158.52848816 -299.59237671]
[171.90023804 -306.41448975]
[185.85992432 -311.93463135]
[200.28112793 -316.10281372]
[215.03323364 -318.88125610]
[229.98266602 -320.24487305]
[244.99401855 -320.18121338]
[259.93133545 -318.69094849]
[274.65936279 -315.78750610]
[289.04470825 -311.49722290]
[302.95709229 -305.85891724]
[316.27053833 -298.92370605]
[328.86441040 -290.75433350]
[340.62472534 -281.42480469]
[351.44494629 -271.01965332]
[361.22711182 -259.63305664]
[369.88256836 -247.36816406]
[377.33297729 -234.33604431]
[383.51086426 -220.65470886]
[388.36026001 -206.44808960]
[391.83724976 -191.84483337]
[393.91033936 -176.97717285]
[394.56079102 -161.97979736]
[393.78268433 -146.98847961]
[391.58303833 -132.13902283]
[387.98184204 -117.56589508]
[383.01165771 -103.40107727]
[376.71752930 -89.77285004]
[369.15643311 -76.80464172]
[360.39685059 -64.61389160]
[350.51809692 -53.31099701]
[339.60968018 -42.99833298]
[327.77035522 -33.76929092]
[315.10736084 -25.70745277]
[301.73538208 -18.88582611]
[287.77548218 -13.36619377]
[273.35412598 -9.19854164]
[258.60192871 -6.42061377]
[243.65243530 -5.05756855]
[228.64108276 -5.12175035]
[213.70381165 -6.61257696]
[198.97589111 -9.51654816]
[184.59069824 -13.80736351]
[170.67852783 -19.44616508]
[163.74859619 -6.14292717]
[156.81866455 7.16030979]
[149.88874817 20.46354675]
[142.95881653 33.76678467]
[143.94094849 48.62897491]
[130.70326233 57.29351044]
[123.77333832 70.59674835]
[116.84341431 83.89998627]
[127.01841736 110.89922333]
[101.43649292 134.93795776]
[100.53658295 149.91093445]
[99.63666534 164.88392639]
[98.73674774 179.85690308]
[97.83683014 194.82987976]
[96.93692017 209.80285645]
[96.03700256 224.77584839]
[95.13708496 239.74882507]
[94.23716736 254.72180176]
[93.33725739 269.69479370]
[92.43733978 284.66775513]
[106.99605560 288.47958374]
[120.53124237 295.05871582]
[132.52264404 304.15225220]
[142.50935364 315.41067505]
[150.10749817 328.40124512]
[155.02502441 342.62460327]
[157.07292175 357.53405762]
[156.17247009 372.55657959]
[152.35827637 387.11465454]
[145.77696228 400.64877319]
[136.68148804 412.63873291]
[125.42144775 422.62359619]
[112.42966461 430.21963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[32 45]
[33 44]
[34 43]
[35 42]
[50 131]
[51 130]
[52 129]
[54 127]
[55 126]
[56 125]
[57 124]
[58 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
