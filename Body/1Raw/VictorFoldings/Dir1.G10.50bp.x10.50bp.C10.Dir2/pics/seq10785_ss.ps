%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUUCUUGCGGGGGGGGGGUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAxxxxxxxxxxAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCCCCCCCCCCCUCCUGCUUGC\
) } def
/len { sequence length } bind def

/coor [
[32.60693359 496.20983887]
[20.04871178 487.85870361]
[9.96248913 476.64624023]
[2.98229575 463.27734375]
[-0.45308828 448.59234619]
[-0.12771128 433.51437378]
[3.93797326 418.99127197]
[11.48839283 405.93591309]
[22.04892159 395.16903687]
[34.95571518 387.36740112]
[49.39744568 383.02145386]
[48.77346802 368.03442383]
[48.14949036 353.04742432]
[47.52551270 338.06039429]
[46.90153503 323.07339478]
[46.27755737 308.08636475]
[45.65357971 293.09933472]
[45.02960205 278.11233521]
[44.40562439 263.12530518]
[43.78164673 248.13830566]
[31.00429153 240.28086853]
[17.34804916 246.48628235]
[3.69180870 252.69168091]
[-9.96443272 258.89709473]
[-23.62067413 265.10250854]
[-32.71300888 278.75027466]
[-49.05892944 277.43008423]
[-55.84315491 262.50003052]
[-46.08665466 249.31887817]
[-29.82608032 251.44625854]
[-16.16983986 245.24085999]
[-2.51359820 239.03544617]
[11.14264297 232.83003235]
[24.79888344 226.62463379]
[22.17130852 208.47221375]
[28.41802216 191.86936951]
[41.44541550 180.73591614]
[57.63953781 177.39866638]
[60.73785782 162.72215271]
[63.83618164 148.04562378]
[62.12947083 140.80456543]
[67.15464020 133.09745789]
[70.55761719 118.48857117]
[65.50885773 104.36376953]
[53.61648178 95.22203064]
[48.31199265 94.52777863]
[44.24265289 92.07975006]
[41.87543869 88.65952301]
[41.29115295 85.12030029]
[29.99214745 75.25457764]
[18.69314194 65.38885498]
[3.27169371 67.97978973]
[-10.18096066 60.00732803]
[-15.31288815 45.23582458]
[-9.70095062 30.63993073]
[4.00506735 23.11137772]
[19.33360291 26.20492363]
[29.04698944 38.45988464]
[28.55886459 54.08984756]
[39.85786819 63.95557022]
[51.15687561 73.82129669]
[62.75821686 83.32965088]
[74.65059662 92.47138977]
[82.84059906 82.17623901]
[94.28404999 77.68151093]
[105.58758545 79.40828705]
[114.35379791 67.23645020]
[123.12000275 55.06461334]
[131.88621521 42.89277649]
[118.02913666 48.63572693]
[103.08271790 49.90246582]
[88.45677948 46.57350922]
[75.53090668 38.96286774]
[65.52433777 27.78840637]
[59.38093948 14.10415936]
[57.68018341 -0.79910988]
[60.58249283 -15.51565075]
[67.81411743 -28.65732765]
[78.69291687 -38.98455429]
[92.19277191 -45.52321243]
[107.04029083 -47.65654755]
[121.83499146 -45.18333435]
[135.18136597 -38.33685303]
[145.82051086 -27.76290131]
[152.74890137 -14.45886326]
[155.31301880 0.32035640]
[153.27099609 15.18071079]
[146.81532288 28.72065163]
[159.42645264 20.59910965]
[161.32568359 16.53039360]
[164.15875244 13.60725784]
[167.43721008 11.98441601]
[170.67346191 11.63711262]
[173.44091797 12.37774372]
[186.68350220 5.33260918]
[199.92608643 -1.71252584]
[213.16867065 -8.75766087]
[226.41127014 -15.80279541]
[230.78822327 -30.98890114]
[244.66160583 -38.55889130]
[259.80059814 -34.02162552]
[267.22348022 -20.06898308]
[262.52639771 -4.97881842]
[248.49606323 2.29614067]
[233.45640564 -2.56020999]
[220.21380615 4.48492479]
[206.97122192 11.53005981]
[193.72863770 18.57519531]
[180.48605347 25.62032890]
[167.54800415 33.21023941]
[154.93687439 41.33177948]
[144.05804443 51.65898514]
[135.29183960 63.83082199]
[126.52563477 76.00265503]
[117.75942230 88.17449188]
[122.49797821 102.27986145]
[116.82447815 116.96087646]
[102.33507538 125.05834198]
[85.16651154 121.89154816]
[81.76353455 136.50044250]
[78.51270294 151.14393616]
[75.41438293 165.82046509]
[72.31606293 180.49699402]
[84.37680817 188.93692017]
[91.74185181 202.09716797]
[92.67207336 217.51058960]
[86.67013550 232.12834167]
[74.64096069 242.92300415]
[58.76866531 247.51432800]
[59.39264297 262.50134277]
[60.01662064 277.48834229]
[60.64059830 292.47537231]
[61.26457596 307.46237183]
[61.88854980 322.44940186]
[62.51252747 337.43643188]
[63.13650513 352.42343140]
[63.76048279 367.41046143]
[64.38446045 382.39746094]
[79.13746643 385.52792358]
[92.64810181 392.22967529]
[104.06707764 402.08145142]
[112.67659760 414.46398926]
[117.93544006 428.59887695]
[119.51304626 443.59762573]
[117.31024170 458.51736450]
[111.46549988 472.42022705]
[102.34621429 484.43228149]
[90.52564240 493.79843140]
[76.74683380 499.92993164]
[61.87593460 502.44131470]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[38 123]
[39 122]
[40 121]
[42 120]
[43 119]
[44 63]
[45 62]
[49 61]
[50 60]
[51 59]
[66 115]
[67 114]
[68 113]
[69 112]
[88 111]
[89 110]
[94 109]
[95 108]
[96 107]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
