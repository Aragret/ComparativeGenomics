%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGUUCAACGGGGGGGGGGUUUAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUxxxxxxxxxxUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGCUAUUAAAGGUUCGCCCCCCCCCCUUUGUUCAAC\
) } def
/len { sequence length } bind def

/coor [
[68.32604980 388.36840820]
[54.48011398 382.35238647]
[42.77145004 372.82296753]
[34.06892776 360.48730469]
[29.01832581 346.26077271]
[27.99443436 331.19909668]
[31.07323265 316.41992188]
[38.02625275 303.02001953]
[48.33753967 291.99368286]
[61.24192047 284.15917969]
[75.78180695 280.09783936]
[75.78180695 265.09783936]
[75.78180695 250.09785461]
[75.78180695 235.09785461]
[75.78180695 220.09785461]
[75.78180695 205.09785461]
[75.78180695 190.09785461]
[75.78180695 175.09785461]
[75.78180695 160.09785461]
[75.78180695 145.09785461]
[75.78180695 130.09785461]
[66.51686096 118.30121613]
[51.94415283 114.74645233]
[37.37145233 111.19168854]
[22.79874992 107.63692474]
[8.22604656 104.08216858]
[-6.34665680 100.52740479]
[-20.91935921 96.97264099]
[-35.49206161 93.41787720]
[-39.75049591 94.84169006]
[-43.82103348 94.79950714]
[-47.25515747 93.53908539]
[-49.73514175 91.43109131]
[-51.10333252 88.91407013]
[-65.33010864 84.16025543]
[-79.55689240 79.40644073]
[-88.53574371 91.58163452]
[-100.83866882 100.38465881]
[-115.26033783 104.95309448]
[-130.38787842 104.83936310]
[-144.73922729 100.05461121]
[-156.90840149 91.06759644]
[-165.70318604 78.75878143]
[-170.26194763 64.33404541]
[-170.13807678 49.20659637]
[-165.34371948 34.85845184]
[-156.34854126 22.69530296]
[-144.03384399 13.90877056]
[-129.60606384 9.35966873]
[-114.47869110 9.49367332]
[-100.13376617 14.29765415]
[-87.97664642 23.30096817]
[-79.19836426 35.62155914]
[-74.65893555 50.05238724]
[-74.80307770 65.17965698]
[-60.57629395 69.93347168]
[-46.34951782 74.68728638]
[-31.93729973 78.84517670]
[-17.36459732 82.39994049]
[-2.79189467 85.95470428]
[11.78080845 89.50946045]
[26.35351181 93.06422424]
[40.92621231 96.61898804]
[55.49891663 100.17375183]
[70.07161713 103.72850800]
[101.19197845 75.32676697]
[109.44426727 62.80080795]
[117.69656372 50.27484512]
[108.91584015 41.16155624]
[102.12889862 30.48728752]
[97.60559845 18.68086624]
[95.52487946 6.21603584]
[95.96776581 -6.40754461]
[98.91413116 -18.68432999]
[104.24366760 -30.12313652]
[111.74075317 -40.26679230]
[121.10317993 -48.71041107]
[131.95437622 -55.11754990]
[143.85847473 -59.23361969]
[156.33790588 -60.89599609]
[168.89250183 -60.04043961]
[181.01956177 -56.70359039]
[192.23396301 -51.02138519]
[201.74232483 -62.62272644]
[211.25068665 -74.22406769]
[220.75904846 -85.82540894]
[230.26739502 -97.42675018]
[225.41900635 -112.07245636]
[229.28048706 -127.00874329]
[240.61962891 -137.46949768]
[255.81817627 -140.11671448]
[270.02630615 -134.10571289]
[278.71029663 -121.35454559]
[279.09906006 -105.93208313]
[271.06860352 -92.75956726]
[257.18136597 -86.04030609]
[241.86874390 -87.91838837]
[232.36038208 -76.31704712]
[222.85202026 -64.71570587]
[213.34367371 -53.11436844]
[203.83531189 -41.51302719]
[214.12001038 -27.32057190]
[220.08787537 -10.82747936]
[221.26792908 6.68485498]
[217.56146240 23.85382843]
[209.25022888 39.34164810]
[196.97508240 51.93957138]
[181.68652344 60.66223907]
[164.57112122 64.82476044]
[146.95942688 64.09645081]
[130.22251892 58.52713394]
[121.97023010 71.05309296]
[113.71794128 83.57905579]
[118.91336060 97.65058136]
[133.32557678 101.80846405]
[144.86894226 91.57350922]
[160.11676025 89.22670746]
[174.20352173 95.51691437]
[182.63418579 108.43695831]
[182.71855164 123.86408997]
[174.42971802 136.87557983]
[160.41259766 143.31948853]
[145.14001465 141.13960266]
[133.48539734 131.03152466]
[129.16769409 116.22068024]
[114.75547028 112.06279755]
[108.76205444 116.57155609]
[110.57836151 131.46118164]
[96.77522278 125.58908844]
[90.78180695 130.09785461]
[90.78180695 145.09785461]
[90.78180695 160.09785461]
[90.78180695 175.09785461]
[90.78180695 190.09785461]
[90.78180695 205.09785461]
[90.78180695 220.09785461]
[90.78180695 235.09785461]
[90.78180695 250.09785461]
[90.78180695 265.09783936]
[90.78180695 280.09783936]
[105.32169342 284.15917969]
[118.22607422 291.99368286]
[128.53735352 303.02001953]
[135.49038696 316.41992188]
[138.56918335 331.19909668]
[137.54528809 346.26077271]
[132.49468994 360.48730469]
[123.79216003 372.82296753]
[112.08350372 382.35238647]
[98.23756409 388.36840820]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 65]
[23 64]
[24 63]
[25 62]
[26 61]
[27 60]
[28 59]
[29 58]
[34 57]
[35 56]
[36 55]
[66 113]
[67 112]
[68 111]
[83 101]
[84 100]
[85 99]
[86 98]
[87 97]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
