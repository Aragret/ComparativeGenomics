%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCCUCCCGGGGGGGGGGCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGxxxxxxxxxxGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGACUAUAUGGAUGCCCCCCCCCCCCCCCCACCC\
) } def
/len { sequence length } bind def

/coor [
[66.25379181 560.36401367]
[52.40785599 554.34802246]
[40.69919586 544.81860352]
[31.99666977 532.48291016]
[26.94606781 518.25640869]
[25.92217636 503.19470215]
[29.00097656 488.41555786]
[35.95399857 475.01562500]
[46.26528168 463.98928833]
[59.16966248 456.15478516]
[73.70954895 452.09347534]
[73.70954895 437.09347534]
[73.70954895 422.09347534]
[73.70954895 407.09347534]
[73.70954895 392.09347534]
[73.70954895 377.09347534]
[73.70954895 362.09347534]
[73.70954895 347.09347534]
[73.70954895 332.09347534]
[73.70954895 317.09347534]
[73.70954895 302.09347534]
[73.70954895 287.09347534]
[73.70954895 272.09347534]
[70.97917938 268.10339355]
[70.77067566 262.34252930]
[74.03459167 256.47274780]
[74.65856934 241.48571777]
[75.28254700 226.49870300]
[63.98353958 216.63298035]
[49.21748352 219.27183533]
[34.45142746 221.91070557]
[22.26894188 232.88882446]
[6.75600290 227.57086182]
[3.87099457 211.42747498]
[16.58176613 201.06561279]
[31.81256485 207.14465332]
[46.57862091 204.50578308]
[61.34467697 201.86692810]
[60.21267319 190.11189270]
[62.77737045 178.82290649]
[68.63731384 169.10975647]
[77.07482910 161.88015747]
[87.14102936 157.75541687]
[97.76132202 157.01856995]
[101.46748352 142.48362732]
[105.17364502 127.94869995]
[90.52366638 125.57650757]
[79.65264130 116.39029694]
[75.26541901 103.49150085]
[78.02750397 90.77134705]
[66.72849274 80.90562439]
[55.42948914 71.03990173]
[44.13048553 61.17417908]
[28.22262383 55.31105423]
[29.45288086 38.40180206]
[46.04188156 34.90303040]
[53.99620819 49.87517166]
[65.29521179 59.74089432]
[76.59421539 69.60662079]
[87.89322662 79.47234344]
[92.21245575 77.47639465]
[96.84210205 76.37826538]
[99.63442993 61.64045715]
[94.60134125 46.64117050]
[104.57264709 35.57670212]
[107.36496735 20.83889580]
[110.15729523 6.10108995]
[112.94961548 -8.63671589]
[115.74194336 -23.37452126]
[102.21224213 -30.07151794]
[90.99185944 -40.17129517]
[82.91341400 -52.92438889]
[78.57639313 -67.38442993]
[78.30262756 -82.47839355]
[82.11242676 -97.08619690]
[89.72308350 -110.12385559]
[100.56983185 -120.62387848]
[113.84778595 -127.80709839]
[128.57160950 -131.14047241]
[143.64872742 -130.37664795]
[157.96028137 -125.57230377]
[170.44429016 -117.08394623]
[180.17433167 -105.54147339]
[186.42840576 -91.80140686]
[188.74238586 -76.88336182]
[186.94456482 -61.89435196]
[181.16836548 -47.94665909]
[171.84242249 -36.07529831]
[159.65876770 -27.16119957]
[145.52151489 -21.86584854]
[130.47975159 -20.58219719]
[127.68742371 -5.84439182]
[124.89510345 8.89341450]
[122.10277557 23.63121986]
[119.31044769 38.36902618]
[124.54325867 52.31416702]
[114.37223816 64.43277740]
[111.57991028 79.17058563]
[120.48480225 85.04587555]
[126.36877441 94.71609497]
[127.64192200 106.61968994]
[142.34988403 103.67420959]
[157.05784607 100.72872925]
[171.76580811 97.78324127]
[186.47377014 94.83776093]
[195.02738953 81.54824829]
[210.49031067 78.28116608]
[223.68864441 86.97481537]
[226.79205322 102.47140503]
[217.95935059 115.57708740]
[202.43081665 118.51649475]
[189.41925049 109.54572296]
[174.71128845 112.49120331]
[160.00332642 115.43669128]
[145.29536438 118.38217163]
[130.58740234 121.32765198]
[119.70858002 131.65486145]
[116.00241852 146.18978882]
[112.29625702 160.72473145]
[124.65749359 170.50868225]
[131.31597900 185.17842102]
[130.50926208 201.61424255]
[122.10092163 216.15988159]
[107.68009186 225.43586731]
[90.26956177 227.12268066]
[89.64558411 242.10969543]
[89.02160645 257.09671021]
[88.70954895 272.09347534]
[88.70954895 287.09347534]
[88.70954895 302.09347534]
[88.70954895 317.09347534]
[88.70954895 332.09347534]
[88.70954895 347.09347534]
[88.70954895 362.09347534]
[88.70954895 377.09347534]
[88.70954895 392.09347534]
[88.70954895 407.09347534]
[88.70954895 422.09347534]
[88.70954895 437.09347534]
[88.70954895 452.09347534]
[103.24943542 456.15478516]
[116.15381622 463.98928833]
[126.46510315 475.01562500]
[133.41812134 488.41555786]
[136.49691772 503.19470215]
[135.47303772 518.25640869]
[130.42242432 532.48291016]
[121.71990204 544.81860352]
[110.01124573 554.34802246]
[96.16530609 560.36401367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[26 127]
[27 126]
[28 125]
[29 38]
[30 37]
[31 36]
[44 119]
[45 118]
[46 117]
[50 60]
[51 59]
[52 58]
[53 57]
[62 98]
[63 97]
[65 95]
[66 94]
[67 93]
[68 92]
[69 91]
[101 116]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
