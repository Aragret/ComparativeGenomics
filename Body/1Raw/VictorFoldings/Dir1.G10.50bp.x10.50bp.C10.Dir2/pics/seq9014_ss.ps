%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUACCACUGGGGGGGGGGCCAGCCUAGCCCCUACCCCCCAAUUAGGAGGGCACUGGCCCCCAACAGGCxxxxxxxxxxUUCUUCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCCCCCCCCCCCUUUUACCCCU\
) } def
/len { sequence length } bind def

/coor [
[139.08924866 243.19261169]
[125.02676392 237.97276306]
[112.11959839 230.33044434]
[100.78096008 220.51029968]
[91.37384796 208.82672119]
[84.19940948 195.65373230]
[79.48733521 181.41307068]
[77.38848114 166.56063843]
[77.97003937 151.57191467]
[81.21338654 136.92675781]
[87.01469421 123.09400940]
[95.19181824 110.51196289]
[81.59363556 116.84358215]
[67.99545288 123.17519379]
[54.39727020 129.50682068]
[40.79908752 135.83843994]
[27.20090294 142.17005920]
[13.60271931 148.50167847]
[0.13565075 155.10758972]
[-13.19476986 161.98507690]
[-26.52519035 168.86256409]
[-39.85560989 175.74006653]
[-53.18603134 182.61755371]
[-56.44974136 197.91076660]
[-68.81189728 207.48735046]
[-84.43547058 206.82554626]
[-95.94348907 196.23783875]
[-97.90220642 180.72340393]
[-89.38678741 167.60771179]
[-74.41795349 163.08355713]
[-60.06352234 169.28713989]
[-46.73310089 162.40963745]
[-33.40268326 155.53215027]
[-20.07226181 148.65466309]
[-6.74184132 141.77716064]
[-4.44900370 137.52668762]
[0.56746620 134.70169067]
[7.27110004 134.90348816]
[20.86928368 128.57186890]
[34.46746826 122.24024963]
[48.06565094 115.90863037]
[61.66383362 109.57701111]
[75.26201630 103.24539185]
[88.86019897 96.91377258]
[75.81216431 89.51453400]
[74.28728485 74.59224701]
[85.56903076 64.70679474]
[100.16171265 68.17862701]
[105.78285980 82.08563995]
[113.84591675 69.43703461]
[121.90897369 56.78843307]
[129.97203064 44.13983154]
[138.03507996 31.49123001]
[146.09812927 18.84262657]
[154.16119385 6.19402504]
[162.22424316 -6.45457745]
[150.31861877 -15.59489632]
[139.25494385 -25.73808479]
[129.11740112 -36.80694580]
[119.98316193 -48.71724319]
[111.92174530 -61.37831879]
[104.99450684 -74.69382477]
[99.25415039 -88.56241608]
[94.74438477 -102.87853241]
[91.49951935 -117.53323364]
[89.54425812 -132.41497803]
[88.89347076 -147.41050720]
[89.55212402 -162.40568542]
[91.51519775 -177.28640747]
[94.76775360 -191.93940735]
[99.28503418 -206.25315857]
[105.03266144 -220.11872864]
[111.96689606 -233.43058777]
[120.03495789 -246.08743286]
[129.17544556 -257.99295044]
[139.31878662 -269.05648804]
[150.38778687 -279.19384766]
[162.29821777 -288.32794189]
[174.95941162 -296.38916016]
[188.27500916 -303.31622314]
[202.14367676 -309.05639648]
[216.45985413 -313.56594849]
[231.11460876 -316.81060791]
[245.99638367 -318.76565552]
[260.99191284 -319.41622925]
[275.98709106 -318.75738525]
[290.86776733 -316.79409790]
[305.52072144 -313.54132080]
[319.83441162 -309.02383423]
[333.69992065 -303.27603149]
[347.01168823 -296.34161377]
[359.66842651 -288.27337646]
[371.57379150 -279.13272095]
[382.63717651 -268.98922729]
[392.77441406 -257.92007446]
[401.90829468 -246.00952148]
[409.96936035 -233.34820557]
[416.89624023 -220.03251648]
[422.63619995 -206.16377258]
[427.14556885 -191.84751892]
[430.39001465 -177.19273376]
[432.34487915 -162.31092834]
[432.99523926 -147.31538391]
[432.33615112 -132.32022095]
[430.37268066 -117.43955231]
[427.11968994 -102.78665161]
[422.60202026 -88.47302246]
[416.85400391 -74.60761261]
[409.91940308 -61.29594040]
[401.85098267 -48.63932037]
[392.71014404 -36.73408127]
[382.56649780 -25.67082405]
[371.49722290 -15.53375340]
[359.58654785 -6.40001869]
[346.92510986 1.66086566]
[333.60931396 8.58755016]
[319.74050903 14.32731724]
[305.42419434 18.83648491]
[290.76934814 22.08073235]
[275.88751221 24.03536987]
[260.89196777 24.68552017]
[245.89680481 24.02623749]
[231.01617432 22.06253815]
[216.36331177 18.80936623]
[202.04975891 14.29148197]
[188.18441772 8.54327011]
[174.87284851 1.60847759]
[166.80979919 14.25708008]
[158.74673462 26.90568161]
[150.68368530 39.55428314]
[142.62062073 52.20288849]
[134.55757141 64.85148621]
[126.49451447 77.50009155]
[118.43146515 90.14869690]
[131.97322083 83.69726562]
[146.44789124 79.76234436]
[161.39212036 78.46990967]
[176.32743835 79.86132812]
[190.77572632 83.89205933]
[204.27444458 90.43306732]
[216.39143372 99.27494049]
[226.73876953 110.13462067]
[234.98519897 122.66443634]
[240.86672974 136.46325684]
[244.19505310 151.08934021]
[244.86361694 166.07443237]
[242.85104370 180.93881226]
[238.22172546 195.20658875]
[231.12390137 208.42100525]
[221.78477478 220.15901184]
[210.50334167 230.04483032]
[197.64077759 237.76196289]
[183.60884094 243.06336975]
[168.85676575 245.77931213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 44]
[13 43]
[14 42]
[15 41]
[16 40]
[17 39]
[18 38]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[49 134]
[50 133]
[51 132]
[52 131]
[53 130]
[54 129]
[55 128]
[56 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
