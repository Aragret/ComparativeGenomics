%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUAAUAAAGGGGGGGGGGCACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCxxxxxxxxxxUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACCCCCCCCCCCUUAAAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[82.83341217 515.21411133]
[69.61321259 507.94165039]
[58.72640991 497.49465942]
[50.91527939 484.58541870]
[46.71239853 470.09408569]
[46.40432739 455.00875854]
[50.01206970 440.35794067]
[57.28964233 427.14053345]
[67.74085236 416.25778198]
[80.65311432 408.45162964]
[95.14604950 404.25433350]
[94.83399200 389.25759888]
[94.52193451 374.26083374]
[94.20987701 359.26409912]
[93.89781952 344.26733398]
[93.58576965 329.27056885]
[93.27371216 314.27383423]
[92.96165466 299.27706909]
[92.64959717 284.28030396]
[92.33753967 269.28356934]
[78.25071716 267.02914429]
[64.77453613 262.33700562]
[52.32748413 255.35153198]
[41.29630661 246.28833008]
[32.02402115 235.42758179]
[24.79923439 223.10540771]
[19.84716034 209.70343018]
[17.32260704 195.63696289]
[17.30513382 181.34217834]
[19.79654312 167.26251221]
[24.72078323 153.83497620]
[31.92627525 141.47656250]
[41.19057846 130.57130432]
[52.22725296 121.45829773]
[64.69470978 114.42124176]
[78.20681000 109.67952728]
[92.34477997 107.38145447]
[91.56493378 92.40174103]
[89.69732666 77.51846313]
[87.82971191 62.63518143]
[83.82196808 48.18049240]
[77.75895691 34.46044159]
[71.69594574 20.74038696]
[65.63292694 7.02033281]
[59.56991577 -6.69972086]
[53.50690460 -20.41977501]
[47.44388962 -34.13982773]
[41.38087845 -47.85988235]
[35.31786346 -61.57993698]
[26.17613029 -73.47231293]
[14.47650623 -82.85947418]
[-1.56350219 -82.54695892]
[-11.69732857 -94.98419952]
[-8.15116882 -110.63042450]
[6.35466719 -117.48318481]
[20.69254303 -110.28562164]
[23.86366844 -94.55909729]
[35.56329346 -85.17193604]
[30.42312813 -99.26373291]
[28.87853050 -114.18399811]
[31.02295876 -129.02992249]
[36.72665787 -142.90319824]
[45.64450455 -154.96437073]
[57.23688889 -164.48364258]
[70.80237579 -170.88502502]
[85.52013397 -173.78114319]
[100.49961853 -172.99679565]
[114.83442688 -168.57942200]
[127.65718842 -160.79631042]
[138.19201660 -150.11842346]
[145.80145264 -137.19184875]
[150.02508545 -122.79875946]
[150.60731506 -107.81005859]
[147.51293945 -93.13270569]
[140.92916870 -79.65479279]
[131.25440979 -68.19185638]
[119.07403564 -59.43750763]
[105.12509155 -53.92145538]
[90.25159454 -51.97746277]
[75.35352325 -53.72316742]
[61.33234024 -59.05293655]
[49.03791809 -67.64295197]
[55.10093307 -53.92289352]
[61.16394424 -40.20284271]
[67.22695923 -26.48278809]
[73.28997040 -12.76273441]
[79.35298157 0.95731956]
[85.41600037 14.67737293]
[91.47901154 28.39742661]
[97.54202271 42.11748123]
[100.11099243 27.33910370]
[108.04937744 14.61188602]
[120.19153595 5.80462217]
[134.75459290 2.21052623]
[149.60017395 4.35733604]
[162.54843140 11.92982578]
[171.69810486 23.81608963]
[175.70573425 38.27081299]
[173.98281860 53.17153549]
[166.78237915 66.33032227]
[155.16166687 75.81499481]
[140.82701111 80.23287964]
[125.88323975 78.93527222]
[112.52462006 72.11271667]
[102.71298981 60.76757050]
[104.58060455 75.65084839]
[106.44821930 90.53412628]
[115.96110535 78.93650055]
[130.66987610 75.99508667]
[143.91131592 83.04236603]
[149.68693542 96.88586426]
[145.38029480 111.25433350]
[132.94236755 119.63871765]
[118.00764465 118.24080658]
[107.34153748 107.69351196]
[122.76714325 111.00992584]
[137.25787354 117.24092102]
[150.26890564 126.15036011]
[161.31144714 137.40141296]
[169.97102356 150.56932068]
[175.92312622 165.15747070]
[178.94526672 180.61601257]
[178.92539978 196.36270142]
[175.86598206 211.80477905]
[169.88389587 226.36126709]
[161.20593262 239.48484802]
[150.16021729 250.68246460]
[137.16378784 259.53381348]
[122.70684052 265.70709229]
[107.33429718 268.97149658]
[107.64635468 283.96826172]
[107.95840454 298.96502686]
[108.27046204 313.96176147]
[108.58251953 328.95852661]
[108.89457703 343.95526123]
[109.20663452 358.95202637]
[109.51869202 373.94879150]
[109.83074188 388.94552612]
[110.14279938 403.94229126]
[124.79779053 407.53305054]
[138.02360535 414.79531860]
[148.91847229 425.23391724]
[156.73956299 438.13711548]
[160.95364380 452.62518311]
[161.27336121 467.71029663]
[157.67692566 482.36389160]
[150.40957642 495.58688354]
[139.96676636 506.47772217]
[127.06053925 514.29382324]
[112.57084656 518.50231934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[37 115]
[38 107]
[39 106]
[40 105]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 58]
[51 57]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
