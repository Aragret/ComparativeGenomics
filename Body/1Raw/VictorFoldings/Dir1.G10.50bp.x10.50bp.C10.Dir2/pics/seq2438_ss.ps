%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAACAUAUAAGGGGGGGGGGCUGAACUCCUCACACCCAAUUGGACCAAUCUAUCACCCUAUAGAAGAACUxxxxxxxxxxGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCCCCCCCCCCCGCAAACAUAUCA\
) } def
/len { sequence length } bind def

/coor [
[84.08708191 417.14480591]
[70.21294403 411.29656982]
[57.85814285 402.69119263]
[47.56276703 391.70486450]
[39.77688980 378.81790161]
[34.84087753 364.59365845]
[32.97050858 349.65393066]
[34.24754715 334.65182495]
[38.61617279 320.24319458]
[45.88539886 307.05789185]
[55.73745346 295.67236328]
[67.74164581 286.58428955]
[81.37319946 280.19097900]
[96.03620148 276.77191162]
[95.73606873 261.77490234]
[95.43593597 246.77792358]
[95.13580322 231.78091431]
[94.83567047 216.78392029]
[94.53553772 201.78692627]
[94.23541260 186.78993225]
[93.93527985 171.79293823]
[93.63514709 156.79592896]
[93.33501434 141.79893494]
[76.44039154 135.16415405]
[63.87809753 122.06312561]
[49.89420700 127.48998260]
[35.91031265 132.91683960]
[28.14917374 146.95764160]
[12.30914783 149.50187683]
[0.54134846 138.59782410]
[1.87302411 122.61013031]
[15.28262711 113.80319977]
[30.48345757 118.93294525]
[44.46735001 113.50608826]
[58.45124054 108.07923126]
[57.67456055 99.63870239]
[58.59521866 91.21266174]
[61.17629242 83.13900757]
[65.31427765 75.74151611]
[70.84323120 69.31684113]
[77.54143524 64.12262726]
[85.14027405 60.36716461]
[93.33501434 58.20106125]
[93.63514709 43.20406342]
[93.93527985 28.20706749]
[94.23541260 13.21007061]
[94.53553772 -1.78692639]
[84.14916229 -6.13471889]
[76.00052643 -14.55095387]
[71.66305542 -25.92155075]
[72.16959381 -38.53648758]
[77.79381561 -50.34616089]
[67.45581055 -61.21471405]
[57.11779404 -72.08327484]
[46.77978134 -82.95182800]
[36.44176865 -93.82038116]
[20.63814354 -93.96504211]
[9.62535381 -105.30056763]
[9.93709278 -121.10177612]
[21.38841248 -131.99411011]
[37.18544769 -131.51531982]
[47.95609665 -119.94948578]
[47.31032562 -104.15839386]
[57.64833832 -93.28984070]
[67.98635101 -82.42128754]
[78.32436371 -71.55272675]
[88.66237640 -60.68417358]
[103.39216614 -63.51847458]
[108.95865631 -77.44737244]
[114.52514648 -91.37626648]
[120.09164429 -105.30516815]
[108.05963135 -96.34799957]
[93.79820251 -91.69918060]
[78.79890442 -91.84492493]
[64.63050079 -96.76998901]
[52.77481842 -105.95926666]
[44.47182083 -118.45166779]
[40.58989716 -132.94065857]
[41.53504944 -147.91084290]
[47.20843124 -161.79655457]
[57.01667023 -173.14549255]
[69.93395233 -180.77070618]
[84.60927582 -183.87469482]
[99.50779724 -182.13282776]
[113.07130432 -175.72726440]
[123.88122559 -165.32794189]
[130.80697632 -152.02253723]
[133.12420654 -137.20260620]
[130.59094238 -122.41924286]
[140.48582458 -133.69271851]
[150.38072205 -144.96618652]
[160.27560425 -156.23965454]
[156.72610474 -171.34530640]
[162.76440430 -185.63931274]
[176.06866455 -193.62533569]
[191.52310181 -192.23258972]
[203.18519592 -181.99659729]
[206.57061768 -166.85333252]
[200.37760925 -152.62567139]
[186.98750305 -144.78445435]
[171.54907227 -146.34477234]
[161.65419006 -135.07130432]
[151.75930786 -123.79782867]
[141.86441040 -112.52435303]
[134.02053833 -99.73867035]
[128.45404053 -85.80977631]
[122.88755035 -71.88088226]
[117.32106018 -57.95198441]
[132.50207520 -37.47341537]
[128.32109070 -13.84938145]
[109.53253937 -1.48679423]
[109.23240662 13.51020241]
[108.93227386 28.50720024]
[108.63214111 43.50419617]
[108.33200836 58.50119400]
[132.08923340 72.39828491]
[142.27809143 97.96627045]
[157.15139771 99.91176605]
[170.69613647 91.31411743]
[185.81547546 96.67929077]
[190.91114807 111.89157867]
[182.07420349 125.28141785]
[166.08355713 126.57726288]
[155.20590210 114.78506470]
[140.33259583 112.83956909]
[138.27275085 118.07678986]
[135.53630066 122.99445343]
[132.17164612 127.50561523]
[128.23825073 131.53053284]
[123.80567169 134.99804688]
[118.95224762 137.84686279]
[113.76378632 140.02664185]
[108.33200836 141.49880981]
[108.63214111 156.49580383]
[108.93227386 171.49279785]
[109.23240662 186.48979187]
[109.53253937 201.48680115]
[109.83267212 216.48379517]
[110.13280487 231.48078918]
[110.43293762 246.47778320]
[110.73307037 261.47479248]
[111.03319550 276.47177124]
[125.82125854 279.30145264]
[139.69769287 285.14422607]
[152.05587769 293.74475098]
[162.35557556 304.72702026]
[170.14651489 317.61090088]
[175.08813477 331.83322144]
[176.96437073 346.77221680]
[175.69323730 361.77481079]
[171.33029175 376.18515015]
[164.06623840 389.37332153]
[154.21867371 400.76272583]
[142.21806335 409.85552979]
[128.58901978 416.25421143]
[113.92736053 419.67904663]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 35]
[26 34]
[27 33]
[43 115]
[44 114]
[45 113]
[46 112]
[47 111]
[52 67]
[53 66]
[54 65]
[55 64]
[56 63]
[68 108]
[69 107]
[70 106]
[71 105]
[89 104]
[90 103]
[91 102]
[92 101]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
