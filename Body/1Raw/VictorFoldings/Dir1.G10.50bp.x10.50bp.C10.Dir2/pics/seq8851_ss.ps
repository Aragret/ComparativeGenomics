%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCCCUCCUAGGGGGGGGGGAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUxxxxxxxxxxCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCCCCCCCCCCCAGACCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[60.60622025 430.60736084]
[47.11734009 423.87582397]
[35.63183975 414.11123657]
[26.81747055 401.88134766]
[21.18668938 387.89715576]
[19.06686020 372.97167969]
[20.58123016 357.97268677]
[25.64175224 343.77215576]
[33.95421982 331.19573975]
[45.03535080 320.97460938]
[58.24090195 313.70294189]
[72.80313110 309.80358887]
[72.49514771 294.80676270]
[72.18717194 279.80990601]
[71.87919617 264.81307983]
[71.57122040 249.81623840]
[71.26323700 234.81939697]
[70.95526123 219.82255554]
[70.64728546 204.82572937]
[70.33930969 189.82888794]
[70.03132629 174.83204651]
[66.72924805 168.16807556]
[69.87416840 159.52485657]
[69.87416840 144.52485657]
[69.87416840 129.52485657]
[64.22903442 124.58700562]
[58.32554245 138.37644958]
[43.38672256 137.02305603]
[40.05755997 122.39716339]
[52.93875122 114.71130371]
[47.29360962 109.77344513]
[32.42701340 111.76950836]
[17.56041336 113.76556396]
[2.66673398 121.86585236]
[-9.23997211 109.79660797]
[-0.93850142 95.01411438]
[15.56435585 98.89896393]
[30.43095398 96.90290833]
[45.29755402 94.90685272]
[55.51626205 83.92604828]
[56.43967438 68.95449829]
[57.36308670 53.98294830]
[58.28650284 39.01139832]
[51.41342926 24.76108551]
[59.91955566 12.53426743]
[60.84296799 -2.43728232]
[61.76638031 -17.40883255]
[46.94862366 -19.81976700]
[32.44455338 -23.69411278]
[18.39832306 -28.99336433]
[4.94953680 -35.66485214]
[-7.76814270 -43.64227295]
[-19.62831879 -52.84634018]
[-30.51311684 -63.18557358]
[-40.31435394 -74.55722046]
[-48.93461990 -86.84825897]
[-56.28824234 -99.93653107]
[-62.30213165 -113.69195557]
[-66.91651917 -127.97782898]
[-70.08554077 -142.65216064]
[-71.77770996 -157.56909180]
[-71.97620392 -172.58039856]
[-70.67903900 -187.53686523]
[-67.89912415 -202.28985596]
[-63.66407776 -216.69273376]
[-58.01599503 -230.60237122]
[-51.01101303 -243.88050842]
[-42.71874237 -256.39517212]
[-33.22160721 -268.02200317]
[-22.61399460 -278.64541626]
[-11.00132751 -288.15985107]
[1.50097680 -296.47076416]
[14.76866150 -303.49551392]
[28.66986275 -309.16430664]
[43.06642151 -313.42077637]
[57.81525421 -316.22268677]
[72.76977539 -317.54211426]
[87.78135681 -317.36596680]
[102.70080566 -315.69601440]
[117.37983704 -312.54885864]
[131.67256165 -307.95574951]
[145.43692017 -301.96234131]
[158.53613281 -294.62823486]
[170.83999634 -286.02627563]
[182.22622681 -276.24200439]
[192.58166504 -265.37258911]
[201.80339050 -253.52615356]
[209.79974365 -240.82035828]
[216.49124146 -227.38153076]
[221.81141663 -213.34320068]
[225.70735168 -198.84492493]
[228.14035034 -184.03076172]
[229.08622742 -169.04797363]
[228.53558350 -154.04547119]
[226.49388123 -139.17233276]
[222.98143005 -124.57640076]
[218.03311157 -110.40273285]
[211.69813538 -96.79219818]
[204.03944397 -83.88007355]
[195.13316345 -71.79467773]
[185.06781006 -60.65612411]
[173.94342041 -50.57512665]
[161.87055969 -41.65187073]
[148.96920776 -33.97504425]
[135.36758423 -27.62094307]
[121.20088959 -22.65271950]
[106.60990143 -19.11975098]
[91.73965454 -17.05714989]
[76.73793030 -16.48541832]
[75.81452179 -1.51386881]
[74.89110565 13.45768070]
[81.83023071 26.63712883]
[73.25804901 39.93481064]
[72.33464050 54.90636063]
[71.41122437 69.87791443]
[70.48780823 84.84946442]
[106.26708221 72.39158630]
[123.43858337 99.34706116]
[137.77864075 103.74736023]
[152.56823730 97.53066254]
[166.58021545 105.34374237]
[169.06576538 121.19308472]
[158.11820984 132.92042542]
[142.13555908 131.52954102]
[133.37834167 118.08742523]
[119.03828430 113.68711853]
[106.64750671 127.51929474]
[84.87416840 129.52485657]
[84.87416840 144.52485657]
[84.87416840 159.52485657]
[85.02816772 174.52407837]
[85.33614349 189.52090454]
[85.64411926 204.51774597]
[85.95210266 219.51458740]
[86.26007843 234.51142883]
[86.56805420 249.50825500]
[86.87602997 264.50509644]
[87.18401337 279.50192261]
[87.49198914 294.49877930]
[87.79996490 309.49560547]
[102.51000214 312.79382324]
[116.00296021 319.51718140]
[127.49437714 329.27478027]
[136.31616211 341.49932861]
[141.95541382 355.48013306]
[144.08428955 370.40429688]
[142.57902527 385.40423584]
[137.52711487 399.60781860]
[129.22227478 412.18927002]
[118.14733887 422.41714478]
[104.94618988 429.69677734]
[90.38633728 433.60498047]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 130]
[24 129]
[25 128]
[31 39]
[32 38]
[33 37]
[40 116]
[41 115]
[42 114]
[43 113]
[45 111]
[46 110]
[47 109]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
