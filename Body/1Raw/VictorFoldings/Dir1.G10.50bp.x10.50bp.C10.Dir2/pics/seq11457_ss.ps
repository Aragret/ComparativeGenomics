%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUCGUUGGGGGGGGGGGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCxxxxxxxxxxACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUCCCCCCCCCCACCAUCAUUG\
) } def
/len { sequence length } bind def

/coor [
[83.17461395 351.12139893]
[70.30133820 343.21853638]
[60.17704773 332.00802612]
[53.62246323 318.39868164]
[51.16894531 303.49374390]
[53.01538086 288.50149536]
[59.01209259 274.63729858]
[68.67295074 263.02505493]
[81.21479797 254.60609436]
[95.62092590 250.06294250]
[95.30886841 235.06619263]
[94.99681091 220.06942749]
[94.68475342 205.07267761]
[94.37269592 190.07592773]
[94.06064606 175.07917786]
[93.74858856 160.08241272]
[93.43653107 145.08566284]
[93.12447357 130.08891296]
[92.81241608 115.09215546]
[82.04161072 104.65234375]
[67.04241943 104.80838013]
[52.04323196 104.96441650]
[37.04404449 105.12045288]
[22.04485512 105.27648926]
[7.06514120 106.05633545]
[-7.86916637 107.45864105]
[-22.80347443 108.86093903]
[-26.60955620 123.53369141]
[-35.20703506 136.01805115]
[-47.55772400 144.80645752]
[-62.17021561 148.83769226]
[-77.27998352 147.62495422]
[-91.06244659 141.31469727]
[-101.85330963 130.66888428]
[-108.34951782 116.97308350]
[-109.76662445 101.88111115]
[-105.93350983 87.21540070]
[-97.31304169 74.74691010]
[-84.94617462 65.98126984]
[-70.32627869 61.97697067]
[-55.21876907 63.21755219]
[-41.44795990 69.55320740]
[-30.67673492 80.21887970]
[-24.20577812 93.92663574]
[-9.27147007 92.52433014]
[5.66283798 91.12202454]
[7.56637907 88.98103333]
[10.45993137 87.49061584]
[14.09046173 87.04214478]
[18.06443405 87.92452240]
[21.88881874 90.27729797]
[36.88800812 90.12126160]
[51.88719559 89.96522522]
[66.88638306 89.80918884]
[81.88557434 89.65315247]
[90.05407715 85.93927002]
[97.57516479 86.63373566]
[102.52539825 90.37989807]
[112.96520996 79.60908508]
[123.40502167 68.83827972]
[133.84483337 58.06747055]
[127.88029480 44.11397552]
[127.71284485 28.98073578]
[133.33685303 14.97415924]
[143.86640930 4.21702480]
[157.67472839 -1.67323220]
[172.64541626 -1.82767165]
[186.49685669 3.74610186]
[178.73960876 -8.06585312]
[173.63453674 -21.23612785]
[171.40621948 -35.17791748]
[172.15118408 -49.27064133]
[175.83361816 -62.88756180]
[182.28715515 -75.42366028]
[191.22236633 -86.32253265]
[202.23971558 -95.10104370]
[214.84748840 -101.37078857]
[228.48368835 -104.85527039]
[242.54106140 -105.40205383]
[256.39422607 -102.98947906]
[269.42736816 -97.72749329]
[281.06182861 -89.85261536]
[291.94064331 -100.17981720]
[302.81945801 -110.50701904]
[313.69830322 -120.83422852]
[324.57711792 -131.16143799]
[325.70440674 -144.05262756]
[335.03240967 -152.43161011]
[347.16702271 -152.18951416]
[358.25833130 -162.28816223]
[369.34967041 -172.38681030]
[380.44097900 -182.48545837]
[380.93008423 -198.28218079]
[392.50296021 -209.04527283]
[408.29360962 -208.38917542]
[418.93374634 -196.70315552]
[418.11074829 -180.92030334]
[406.31289673 -170.40432739]
[390.53961182 -171.39414978]
[379.44830322 -161.29548645]
[368.35699463 -151.19683838]
[357.26568604 -141.09819031]
[352.88052368 -124.13439941]
[334.90432739 -120.28260803]
[324.02551270 -109.95539856]
[313.14666748 -99.62819672]
[302.26785278 -89.30099487]
[291.38900757 -78.97378540]
[299.42318726 -65.22800446]
[303.96841431 -49.96031952]
[304.76129150 -34.04177856]
[301.75247192 -18.38154030]
[295.10998535 -3.87496114]
[285.20965576 8.64759922]
[272.61392212 18.46831131]
[258.03988647 25.02302170]
[242.31846619 27.93365479]
[226.34703064 27.03002548]
[211.03820801 22.35978508]
[197.26766968 14.18591404]
[203.27093506 27.85668945]
[203.58369446 42.82490921]
[198.12716675 56.81029892]
[187.70382690 67.67038727]
[173.87954712 73.72869873]
[158.74844360 74.03352356]
[144.61564636 68.50728607]
[134.17582703 79.27809143]
[123.73601532 90.04890442]
[113.29620361 100.81970978]
[107.80917358 114.78009796]
[108.12123108 129.77685547]
[108.43328094 144.77360535]
[108.74533844 159.77035522]
[109.05739594 174.76712036]
[109.36945343 189.76387024]
[109.68151093 204.76062012]
[109.99356842 219.75737000]
[110.30561829 234.75413513]
[110.61767578 249.75088501]
[125.20031738 253.69084167]
[138.08152771 261.58078003]
[148.21707153 272.78109741]
[154.78532410 286.38385010]
[157.25381470 301.28631592]
[155.42243958 316.28039551]
[149.43966675 330.15063477]
[139.79048157 341.77258301]
[127.25709534 350.20413208]
[112.85553741 354.76174927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 55]
[21 54]
[22 53]
[23 52]
[24 51]
[25 46]
[26 45]
[27 44]
[58 130]
[59 129]
[60 128]
[61 127]
[68 120]
[82 108]
[83 107]
[84 106]
[85 105]
[86 104]
[89 102]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
