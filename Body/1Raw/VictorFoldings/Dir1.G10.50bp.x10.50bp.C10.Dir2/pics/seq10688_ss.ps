%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCCCACAACAAGGGGGGGGGGUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCxxxxxxxxxxACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCCCUCCCCACAUCAA\
) } def
/len { sequence length } bind def

/coor [
[194.66340637 590.09289551]
[181.02789307 583.73132324]
[168.84289551 574.90393066]
[158.54888916 563.92993164]
[150.51797485 551.20587158]
[145.04048157 537.19183350]
[142.31440735 522.39434814]
[142.43832397 507.34838867]
[145.40771484 492.59783936]
[151.11526489 478.67590332]
[159.35464478 466.08584595]
[169.82800293 455.28283691]
[182.15672302 446.65734863]
[195.89515686 440.52120972]
[210.54663086 437.09622192]
[209.95404053 422.10794067]
[209.36143494 407.11965942]
[208.76884460 392.13134766]
[208.17623901 377.14306641]
[207.58363342 362.15478516]
[206.99104309 347.16647339]
[206.39843750 332.17819214]
[205.80584717 317.18991089]
[205.21324158 302.20162964]
[204.62065125 287.21331787]
[200.52407837 272.78356934]
[193.15278625 259.71972656]
[185.78147888 246.65588379]
[169.42227173 242.86009216]
[160.67573547 228.13035583]
[165.35328674 211.30033875]
[157.72532654 198.38467407]
[149.71797180 185.70074463]
[141.33827209 173.25965881]
[132.95857239 160.81857300]
[124.57887268 148.37748718]
[116.19917297 135.93640137]
[107.81946564 123.49531555]
[99.43976593 111.05422974]
[106.38867188 124.34756470]
[105.18471527 139.29916382]
[96.19827271 151.30932617]
[82.19395447 156.68324280]
[67.48003387 153.76766968]
[56.58311081 143.45956421]
[52.85551834 128.93009949]
[57.44472122 114.64808655]
[45.08702850 106.14588928]
[32.72933197 97.64369202]
[20.37163925 89.14148712]
[6.18400097 95.20073700]
[-9.02344799 92.60515594]
[-20.39806557 82.18298340]
[-24.31025314 67.25990295]
[-19.51164436 52.59781265]
[-7.53346014 42.87533188]
[7.80210590 41.19486618]
[21.60153008 48.09265137]
[29.46146584 61.36762619]
[28.87383842 76.78379822]
[41.23153305 85.28599548]
[53.58922577 93.78819275]
[65.94692230 102.29039001]
[72.58518982 98.79991913]
[65.60425568 85.52338409]
[58.62351990 72.24673462]
[71.90027618 65.26620483]
[78.88079071 78.54244232]
[85.86173248 91.81898499]
[92.50000000 88.32851410]
[92.50000000 73.32851410]
[92.50000000 58.32851410]
[78.44281006 52.54371262]
[67.67294312 41.81625748]
[61.83271027 27.78200912]
[61.81271362 12.58108711]
[67.61599731 -1.46847880]
[78.35761261 -12.22423077]
[92.39952850 -18.04599571]
[107.60047150 -18.04599571]
[121.64238739 -12.22423077]
[132.38400269 -1.46847880]
[138.18728638 12.58108711]
[138.16729736 27.78200912]
[132.32705688 41.81625748]
[121.55718994 52.54371262]
[107.50000000 58.32851410]
[107.50000000 73.32851410]
[107.50000000 88.32851410]
[111.88085175 102.67453003]
[120.26055145 115.11561584]
[128.64025879 127.55670166]
[137.01995850 139.99778748]
[145.39965820 152.43887329]
[153.77935791 164.87995911]
[162.15905762 177.32104492]
[166.94828796 179.65254211]
[170.02365112 183.24627686]
[171.19137573 187.22306824]
[170.64097595 190.75671387]
[178.26895142 203.67236328]
[191.64328003 205.51629639]
[201.36013794 214.60644531]
[204.01136780 227.44660950]
[198.84532166 239.28457642]
[206.21662903 252.34841919]
[213.58792114 265.41226196]
[213.84210205 250.41441345]
[217.61535645 235.89674377]
[224.69615173 222.67320251]
[234.68751526 211.48512268]
[247.02925110 202.95979309]
[261.02944946 197.57516479]
[275.90319824 195.63311768]
[290.81661987 197.24255371]
[304.93356323 202.31321716]
[317.46261597 210.56085205]
[327.70129395 221.52302551]
[335.07559204 234.58517456]
[339.17208862 249.01495361]
[339.76110840 264.00338745]
[336.80960083 278.71014404]
[330.48306274 292.31069946]
[321.13619995 304.04254150]
[309.29302979 313.24792480]
[295.61755371 319.41079712]
[280.87643433 322.18557739]
[265.89614868 321.41671753]
[251.51655579 317.14733887]
[238.54385376 309.61682129]
[227.70533752 299.24731445]
[219.60893250 286.62072754]
[220.20153809 301.60900879]
[220.79412842 316.59732056]
[221.38673401 331.58560181]
[221.97932434 346.57388306]
[222.57192993 361.56216431]
[223.16453552 376.55047607]
[223.75712585 391.53875732]
[224.34973145 406.52703857]
[224.94232178 421.51535034]
[225.53492737 436.50363159]
[240.41108704 438.76113892]
[254.59107971 443.79345703]
[267.56231689 451.41864014]
[278.85589600 461.36108398]
[288.06353760 473.26129150]
[294.85244751 486.68914795]
[298.97714233 501.15924072]
[300.28857422 516.14843750]
[298.73928833 531.11499023]
[294.38534546 545.51770020]
[287.38406372 558.83612061]
[277.98861694 570.58862305]
[266.53857422 580.35046387]
[253.44789124 587.76867676]
[239.18977356 592.57519531]
[224.27964783 594.59625244]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 107]
[27 106]
[28 105]
[31 101]
[32 100]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[47 63]
[48 62]
[49 61]
[50 60]
[70 89]
[71 88]
[72 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
