%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUAAAACUGGGGGGGGGGCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAxxxxxxxxxxUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUACCCCCCCCCCAGCUUCAAACU\
) } def
/len { sequence length } bind def

/coor [
[105.36460114 381.80941772]
[91.34265900 376.25640869]
[79.14270020 367.39007568]
[69.53163147 355.76776123]
[63.11360550 342.12005615]
[60.29206848 327.30487061]
[61.24438477 312.25350952]
[65.91069031 297.91207886]
[73.99765778 285.18212891]
[84.99693298 274.86383057]
[98.21709442 267.60586548]
[112.82710266 263.86444092]
[112.82710266 248.86444092]
[112.82710266 233.86444092]
[112.82710266 218.86444092]
[112.82710266 203.86444092]
[112.82710266 188.86444092]
[112.82710266 173.86444092]
[112.82710266 158.86444092]
[112.82710266 143.86444092]
[112.82710266 128.86444092]
[106.93603516 124.22274017]
[95.15390015 114.93935394]
[89.26283264 110.29766083]
[74.67907715 113.80683136]
[60.09532928 117.31599426]
[48.48821259 128.06706238]
[34.30402374 123.52194977]
[19.72027397 127.03111267]
[5.13652563 130.54028320]
[-6.37406588 142.22096252]
[-22.17485619 137.83152771]
[-26.01134682 121.88746643]
[-13.93688393 110.79064178]
[1.62735820 115.95652771]
[16.21110725 112.44736481]
[30.79485703 108.93819427]
[41.35884857 98.43813324]
[56.58616257 102.73224640]
[71.16991425 99.22308350]
[85.75366211 95.71391296]
[70.76396179 95.15807343]
[57.88971329 87.46043396]
[50.30543900 74.51907349]
[49.88126755 59.52507019]
[56.72179031 46.17564011]
[69.14027405 37.76248169]
[84.07456970 36.36010742]
[97.84219360 42.31431198]
[107.04832458 54.15690994]
[109.42292023 68.96775818]
[104.38113403 83.09379578]
[113.04774475 70.85084534]
[121.71434784 58.60789108]
[124.14129639 49.73626709]
[130.68670654 46.20501328]
[139.60285950 34.14258194]
[148.51901245 22.08015060]
[157.43516541 10.01771927]
[159.05630493 -8.29627895]
[175.35725403 -14.72464561]
[184.02386475 -26.96759987]
[192.69046021 -39.21055222]
[187.87471008 -53.84320831]
[192.54394531 -68.33636475]
[204.70806885 -77.19626617]
[219.57878113 -77.19454956]
[228.24539185 -89.43750763]
[236.91200256 -101.68045807]
[225.94476318 -111.94853973]
[216.47790527 -123.61440277]
[208.68777466 -136.46070862]
[202.71951294 -150.24815369]
[198.68429565 -164.71987915]
[196.65730286 -179.60629272]
[196.67630005 -194.63005066]
[198.74090576 -209.51127625]
[202.81269836 -223.97276306]
[208.81578064 -237.74507141]
[216.63835144 -250.57165527]
[226.13467407 -262.21356201]
[237.12782288 -272.45388794]
[249.41302490 -281.10186768]
[262.76138306 -287.99639893]
[276.92425537 -293.00906372]
[291.63778687 -296.04647827]
[306.62786865 -297.05200195]
[321.61526489 -296.00695801]
[336.32073975 -292.93078613]
[350.47033691 -287.88082886]
[363.80050659 -280.95111084]
[376.06286621 -272.27078247]
[387.02899170 -262.00149536]
[396.49456787 -250.33460999]
[404.28332520 -237.48745728]
[410.25009155 -223.69937134]
[414.28372192 -209.22720337]
[416.30911255 -194.34057617]
[416.28851318 -179.31681824]
[414.22225952 -164.43582153]
[410.14892578 -149.97477722]
[404.14434814 -136.20310974]
[396.32037354 -123.37738037]
[386.82281494 -111.73651123]
[375.82855225 -101.49737549]
[363.54241943 -92.85071564]
[350.19329834 -85.95761108]
[336.02987671 -80.94648743]
[321.31600952 -77.91068268]
[306.32583618 -76.90676880]
[291.33856201 -77.95343781]
[276.63342285 -81.03119659]
[262.48434448 -86.08270264]
[249.15495300 -93.01385498]
[240.48834229 -80.77089691]
[231.82173157 -68.52794647]
[236.76570129 -54.50313950]
[232.45225525 -40.08584976]
[220.33482361 -30.86516953]
[204.93342590 -30.54394531]
[196.26681519 -18.30099297]
[187.60020447 -6.05803823]
[189.32456970 5.95398664]
[182.15165710 16.23604202]
[169.49760437 18.93387032]
[160.58145142 30.99630165]
[151.66529846 43.05873489]
[142.74914551 55.12116623]
[133.95730591 67.27449799]
[125.29069519 79.51744843]
[116.62408447 91.76040649]
[127.82710266 128.86444092]
[127.82710266 143.86444092]
[127.82710266 158.86444092]
[127.82710266 173.86444092]
[127.82710266 188.86444092]
[127.82710266 203.86444092]
[127.82710266 218.86444092]
[127.82710266 233.86444092]
[127.82710266 248.86444092]
[127.82710266 263.86444092]
[142.43711853 267.60586548]
[155.65727234 274.86383057]
[166.65655518 285.18212891]
[174.74351501 297.91207886]
[179.40982056 312.25350952]
[180.36213684 327.30487061]
[177.54060364 342.12005615]
[171.12257385 355.76776123]
[161.51150513 367.39007568]
[149.31155396 376.25640869]
[135.28959656 381.80941772]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[52 131]
[53 130]
[54 129]
[56 128]
[57 127]
[58 126]
[59 125]
[61 122]
[62 121]
[63 120]
[67 116]
[68 115]
[69 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
