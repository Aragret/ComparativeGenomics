%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUAACCAGGGGGGGGGGUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUAxxxxxxxxxxUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCCCCCCCCCCCAACACAACCA\
) } def
/len { sequence length } bind def

/coor [
[83.16996002 354.37478638]
[69.94976044 347.10232544]
[59.06295395 336.65530396]
[51.25182724 323.74606323]
[47.04894257 309.25476074]
[46.74087143 294.16940308]
[50.34861374 279.51858521]
[57.62618637 266.30120850]
[68.07739258 255.41844177]
[80.98965454 247.61228943]
[95.48258972 243.41500854]
[95.17053223 228.41824341]
[94.85848236 213.42149353]
[94.54642487 198.42474365]
[94.23436737 183.42799377]
[93.92230988 168.43122864]
[93.61025238 153.43447876]
[93.29819489 138.43772888]
[92.98614502 123.44097137]
[92.67408752 108.44422150]
[92.20604706 93.45152283]
[91.58206940 78.46450806]
[90.95809174 63.47749329]
[81.98901367 54.14960480]
[81.81256866 41.61214828]
[89.97605133 32.63078308]
[89.66399384 17.63402748]
[89.35193634 2.63727403]
[89.03988647 -12.35947990]
[74.05050659 -13.06064129]
[59.14266968 -14.77213669]
[44.38438034 -17.48615646]
[29.84298706 -21.19031525]
[15.58483601 -25.86771393]
[1.67498422 -31.49701118]
[-11.82309914 -38.05251694]
[-24.84782600 -45.50432587]
[-37.33976746 -53.81843567]
[-49.24192047 -62.95690536]
[-60.49998474 -72.87804413]
[-71.06258392 -83.53657532]
[-80.88153839 -94.88387299]
[-89.91202545 -106.86816406]
[-98.11285400 -119.43476105]
[-105.44660187 -132.52632141]
[-111.87980652 -146.08312988]
[-117.38311005 -160.04330444]
[-121.93141174 -174.34315491]
[-125.50395203 -188.91744995]
[-128.08442688 -203.69967651]
[-129.66107178 -218.62237549]
[-130.22668457 -233.61747742]
[-129.77870178 -248.61654663]
[-128.31913757 -263.55117798]
[-125.85466766 -278.35317993]
[-122.39653778 -292.95501709]
[-117.96052551 -307.29013062]
[-112.56687164 -321.29302979]
[-106.24018860 -334.89987183]
[-99.00933838 -348.04855347]
[-90.90731812 -360.67907715]
[-81.97109985 -372.73382568]
[-72.24144745 -384.15777588]
[-61.76276016 -394.89880371]
[-50.58285141 -404.90792847]
[-38.75273132 -414.13946533]
[-26.32637978 -422.55130005]
[-13.36049652 -430.10504150]
[0.08575892 -436.76620483]
[13.95103359 -442.50439453]
[28.17206383 -447.29348755]
[42.68395996 -451.11157227]
[57.42050934 -453.94125366]
[72.31446838 -455.76962280]
[87.29788208 -456.58831787]
[102.30238342 -456.39361572]
[117.25950623 -455.18640137]
[132.10101318 -452.97219849]
[146.75917053 -449.76107788]
[161.16711426 -445.56771851]
[175.25907898 -440.41125488]
[188.97079468 -434.31518555]
[202.23968506 -427.30737305]
[215.00518799 -419.41973877]
[227.20909119 -410.68829346]
[238.79568481 -401.15292358]
[249.71211243 -390.85705566]
[259.90856934 -379.84771729]
[269.33850098 -368.17514038]
[277.95892334 -355.89257812]
[285.73046875 -343.05609131]
[292.61770630 -329.72421265]
[298.58920288 -315.95779419]
[303.61767578 -301.81964111]
[307.68023682 -287.37426758]
[310.75830078 -272.68759155]
[312.83786011 -257.82662964]
[313.90942383 -242.85917664]
[313.96807861 -227.85353088]
[313.01354980 -212.87814331]
[311.05023193 -198.00137329]
[308.08703613 -183.29109192]
[304.13754272 -168.81440735]
[299.21969604 -154.63739014]
[293.35601807 -140.82470703]
[286.57321167 -127.43940735]
[278.90222168 -114.54254150]
[270.37808228 -102.19297791]
[261.03967285 -90.44704437]
[250.92958069 -79.35834503]
[240.09396362 -68.97747803]
[228.58226013 -59.35180664]
[216.44699097 -50.52524948]
[203.74351501 -42.53808212]
[190.52981567 -35.42675018]
[176.86618042 -29.22369766]
[162.81494141 -23.95722961]
[148.44021606 -19.65137672]
[133.80761719 -16.32578278]
[118.98387146 -13.99562645]
[104.03663635 -12.67153645]
[104.34869385 2.32521772]
[104.66075134 17.32197189]
[104.97280884 32.31872559]
[114.86688995 46.77925873]
[105.94510651 62.85351562]
[106.56908417 77.84053040]
[107.19306183 92.82754517]
[110.66732025 100.16332245]
[107.67083740 108.13216400]
[107.98289490 123.12892151]
[108.29495239 138.12567139]
[108.60700989 153.12242126]
[108.91906738 168.11918640]
[109.23111725 183.11593628]
[109.54317474 198.11268616]
[109.85523224 213.10943604]
[110.16728973 228.10620117]
[110.47934723 243.10295105]
[125.13433838 246.69371033]
[138.36015320 253.95597839]
[149.25502014 264.39456177]
[157.07611084 277.29779053]
[161.29017639 291.78585815]
[161.60990906 306.87094116]
[158.01347351 321.52453613]
[150.74610901 334.74755859]
[140.30331421 345.63839722]
[127.39707947 353.45449829]
[112.90739441 357.66296387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 126]
[26 124]
[27 123]
[28 122]
[29 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
