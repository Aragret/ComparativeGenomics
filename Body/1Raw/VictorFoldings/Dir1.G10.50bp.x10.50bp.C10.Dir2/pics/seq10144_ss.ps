%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUACACAAUGGGGGGGGGGAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAxxxxxxxxxxACCCCUUAAACACCCCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCCCCCCCCCCCGCCUACACAAU\
) } def
/len { sequence length } bind def

/coor [
[88.61384583 381.05221558]
[74.59190369 375.49920654]
[62.39194489 366.63287354]
[52.78087234 355.01058960]
[46.36284637 341.36288452]
[43.54130936 326.54769897]
[44.49362564 311.49630737]
[49.15993118 297.15487671]
[57.24689865 284.42492676]
[68.24617004 274.10665894]
[81.46633148 266.84869385]
[96.07634735 263.10723877]
[96.07634735 248.10725403]
[96.07634735 233.10725403]
[96.07634735 218.10725403]
[96.07634735 203.10725403]
[96.07634735 188.10725403]
[96.07634735 173.10725403]
[96.07634735 158.10725403]
[96.07634735 143.10725403]
[96.07634735 128.10725403]
[76.76206207 107.52703094]
[85.81857300 85.23361969]
[80.11390686 71.36073303]
[74.40924835 57.48785400]
[68.70458221 43.61497498]
[57.09074402 37.91212845]
[52.64241028 26.19105148]
[57.24459839 14.96242428]
[51.82597351 0.97534060]
[29.25131416 -5.31706619]
[19.33235359 -29.04784012]
[4.39634085 -30.43186569]
[-10.53967190 -31.81589127]
[-25.47568512 -33.19991684]
[-40.41169739 -34.58394241]
[-55.34770966 -35.96796799]
[-70.28372192 -37.35199356]
[-84.94751740 -30.00997353]
[-98.48696136 -39.26283646]
[-96.97383881 -55.59202957]
[-81.96471405 -62.19947815]
[-68.89969635 -52.28800583]
[-53.96368408 -50.90398026]
[-39.02767181 -49.51995468]
[-24.09165955 -48.13592911]
[-9.15564632 -46.75190353]
[5.78036642 -45.36787796]
[20.71637917 -43.98385239]
[31.48505783 -54.42586136]
[30.56164360 -69.39741516]
[29.63823128 -84.36896515]
[14.65437603 -85.44948578]
[-0.05175309 -88.51757812]
[-14.21770763 -93.51850128]
[-27.59067917 -100.36299133]
[-39.93201065 -108.92890930]
[-51.02145767 -119.06338501]
[-60.66111755 -130.58555603]
[-68.67895508 -143.28979492]
[-74.93189240 -156.94938660]
[-79.30832672 -171.32054138]
[-81.73015594 -186.14680481]
[-82.15416718 -201.16358948]
[-80.57279205 -216.10289001]
[-77.01424408 -230.69810486]
[-71.54203796 -244.68875122]
[-64.25382996 -257.82516479]
[-55.27968597 -269.87292480]
[-44.77976227 -280.61697388]
[-32.94143677 -289.86563110]
[-19.97598457 -297.45382690]
[-6.11478424 -303.24609375]
[8.39479160 -307.13912964]
[23.29380417 -309.06341553]
[38.31636047 -308.98461914]
[53.19437027 -306.90417480]
[67.66231537 -302.85916138]
[81.46199036 -296.92178345]
[94.34713745 -289.19802856]
[106.08779907 -279.82571411]
[116.47444916 -268.97210693]
[125.32173157 -256.83090210]
[132.47174072 -243.61874390]
[137.79690552 -229.57147217]
[141.20216370 -214.93972778]
[142.62673950 -199.98466492]
[142.04524231 -184.97315979]
[139.46803284 -170.17311096]
[134.94110107 -155.84864807]
[128.54522705 -142.25540161]
[120.39457703 -129.63595581]
[110.63458252 -118.21553802]
[99.43944550 -108.19794464]
[87.00894165 -99.76194763]
[73.56491089 -93.05809784]
[59.34728241 -88.20604706]
[44.60977936 -85.29237366]
[45.53319550 -70.32082367]
[46.45660782 -55.34927368]
[61.71799850 -52.07726288]
[72.93128967 -42.01587677]
[77.48876190 -28.22661972]
[74.69382477 -14.52847672]
[65.81305695 -4.44328451]
[71.23168182 9.54379940]
[85.47231293 19.75403214]
[82.57746124 37.91031265]
[88.28212738 51.78319168]
[93.98679352 65.65607452]
[99.69145203 79.52895355]
[112.53648376 80.58723450]
[123.62180328 89.76377869]
[127.92347717 105.06871033]
[142.17016602 109.76251221]
[156.41685486 114.45631409]
[170.66355896 119.15011597]
[182.06594849 108.86026001]
[197.08897400 105.66587830]
[211.69152832 110.42623138]
[221.94558716 121.86081696]
[225.09286499 136.89378357]
[220.28675842 151.48135376]
[208.82009888 161.69952393]
[193.77732849 164.79966736]
[179.20491028 159.94786072]
[169.02273560 148.44921875]
[165.96975708 133.39680481]
[151.72306824 128.70300293]
[137.47636414 124.00920868]
[123.22967529 119.31540680]
[111.07634735 128.10725403]
[111.07634735 143.10725403]
[111.07634735 158.10725403]
[111.07634735 173.10725403]
[111.07634735 188.10725403]
[111.07634735 203.10725403]
[111.07634735 218.10725403]
[111.07634735 233.10725403]
[111.07634735 248.10725403]
[111.07634735 263.10723877]
[125.68635559 266.84869385]
[138.90650940 274.10665894]
[149.90579224 284.42492676]
[157.99275208 297.15487671]
[162.65905762 311.49630737]
[163.61137390 326.54769897]
[160.78984070 341.36288452]
[154.37181091 355.01058960]
[144.76074219 366.63287354]
[132.56079102 375.49920654]
[118.53884125 381.05221558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 111]
[24 110]
[25 109]
[26 108]
[29 106]
[30 105]
[32 49]
[33 48]
[34 47]
[35 46]
[36 45]
[37 44]
[38 43]
[50 100]
[51 99]
[52 98]
[114 131]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
