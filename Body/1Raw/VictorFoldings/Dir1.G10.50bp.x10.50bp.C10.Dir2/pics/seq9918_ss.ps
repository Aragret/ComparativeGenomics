%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACUCCUACCCGGGGGGGGGGCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACGxxxxxxxxxxUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUCCCCCCCCCCUGACUCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[82.57652283 536.85845947]
[68.41591644 531.70343018]
[55.82617188 523.42126465]
[45.48623657 512.45849609]
[37.95372391 499.40634155]
[33.63485718 484.96875000]
[32.76255035 469.92428589]
[35.38384247 455.08428955]
[41.35736847 441.24905396]
[50.36098480 429.16470337]
[61.90914154 419.48294067]
[75.37905884 412.72586060]
[90.04431915 409.25787354]
[90.04431915 394.25787354]
[90.04431915 379.25787354]
[90.04431915 364.25787354]
[90.04431915 349.25787354]
[90.04431915 334.25787354]
[90.04431915 319.25787354]
[90.04431915 304.25787354]
[90.04431915 289.25787354]
[90.04431915 274.25787354]
[75.57946014 270.42153931]
[62.59060287 262.96591187]
[51.96613312 252.39402771]
[44.43452454 239.42224121]
[40.51437759 224.93179321]
[40.47871017 209.90888977]
[44.33596039 195.37756348]
[51.82900238 182.32992554]
[62.45226288 171.65835571]
[75.48584747 164.09455872]
[90.04431915 160.15931702]
[90.04431915 145.15931702]
[90.04431915 130.15931702]
[90.04431915 115.15931702]
[80.62421417 103.48619843]
[65.96262360 100.31797791]
[51.30102539 97.14975739]
[40.48036957 108.14598083]
[25.42742729 111.52421570]
[10.94553661 106.20647430]
[1.65581512 93.88963318]
[0.52258056 78.50394440]
[7.90744352 64.95893097]
[21.45392036 57.57675934]
[36.83938217 58.71304703]
[49.15438080 68.00521088]
[54.46924591 82.48815918]
[69.13084412 85.65637970]
[83.79243469 88.82460022]
[72.60159302 78.83635712]
[74.26292419 63.92864227]
[87.37810516 56.64907837]
[100.90827179 63.12477875]
[103.46523285 77.90531158]
[108.53199768 63.78695679]
[113.59876251 49.66860199]
[118.66552734 35.55024719]
[105.20149231 28.90061569]
[92.58324432 20.75951385]
[80.97528076 11.23307896]
[70.52893829 0.44550791]
[61.38040543 -11.46256161]
[53.64895248 -24.33588219]
[47.43537521 -38.00662613]
[42.82067871 -52.29656219]
[39.86502457 -67.01940155]
[38.60694885 -81.98319244]
[39.06285477 -96.99285126]
[41.22679138 -111.85269928]
[45.07055283 -126.36901093]
[50.54402542 -140.35252380]
[57.57585144 -153.62095642]
[66.07435608 -166.00131226]
[75.92874908 -177.33218384]
[87.01055145 -187.46586609]
[99.17530060 -196.27023315]
[112.26438141 -203.63049316]
[126.10717773 -209.45071411]
[140.52319336 -213.65499878]
[155.32450867 -216.18853760]
[170.31814575 -217.01831055]
[185.30863953 -216.13349915]
[200.10055542 -213.54563904]
[214.50105286 -209.28845215]
[228.32237244 -203.41744995]
[241.38435364 -196.00917053]
[253.51669312 -187.16020203]
[264.56121826 -176.98591614]
[274.37393188 -165.61894226]
[282.82693481 -153.20747375]
[289.80999756 -139.91331482]
[295.23211670 -125.90979004]
[299.02255249 -111.37946320]
[301.13189697 -96.51177216]
[301.53271484 -81.50054169]
[300.21969604 -66.54146576]
[297.21002197 -51.82958221]
[292.54287720 -37.55668259]
[286.27914429 -23.90884590]
[278.50048828 -11.06399632]
[269.30831909 0.81040514]
[258.82241821 11.55955124]
[247.17956543 21.04330444]
[234.53150940 29.13802528]
[221.04316711 35.73818207]
[206.89035034 40.75772858]
[192.25761414 44.13122559]
[177.33569336 45.81468964]
[162.31913757 45.78617477]
[147.40371704 44.04605484]
[132.78387451 40.61701202]
[127.71711731 54.73536682]
[122.65035248 68.85372162]
[117.58358765 82.97207642]
[121.54320526 97.91733551]
[115.76893616 110.25477600]
[105.04431915 115.15931702]
[105.04431915 130.15931702]
[105.04431915 145.15931702]
[105.04431915 160.15931702]
[119.60279083 164.09455872]
[132.63638306 171.65835571]
[143.25962830 182.32992554]
[150.75267029 195.37756348]
[154.60992432 209.90888977]
[154.57426453 224.93179321]
[150.65411377 239.42224121]
[143.12251282 252.39402771]
[132.49803162 262.96591187]
[119.50917816 270.42153931]
[105.04431915 274.25787354]
[105.04431915 289.25787354]
[105.04431915 304.25787354]
[105.04431915 319.25787354]
[105.04431915 334.25787354]
[105.04431915 349.25787354]
[105.04431915 364.25787354]
[105.04431915 379.25787354]
[105.04431915 394.25787354]
[105.04431915 409.25787354]
[119.70957947 412.72586060]
[133.17948914 419.48294067]
[144.72764587 429.16470337]
[153.73127747 441.24905396]
[159.70480347 455.08428955]
[162.32608032 469.92428589]
[161.45378113 484.96875000]
[157.13491821 499.40634155]
[149.60240173 512.45849609]
[139.26246643 523.42126465]
[126.67272186 531.70343018]
[112.51211548 536.85845947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[33 122]
[34 121]
[35 120]
[36 119]
[37 51]
[38 50]
[39 49]
[56 116]
[57 115]
[58 114]
[59 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
