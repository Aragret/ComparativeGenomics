%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUUUCACUGGGGGGGGGGAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGxxxxxxxxxxUCAUAUUUACCAAAUGCCCCUCAUUUACAUAAAUAUUAUACUAGCAUUUACCCCCCCCCCCCAUCUCACU\
) } def
/len { sequence length } bind def

/coor [
[63.45817947 362.65158081]
[49.61224365 356.63555908]
[37.90357971 347.10614014]
[29.20105553 334.77047729]
[24.15045547 320.54394531]
[23.12656403 305.48226929]
[26.20536232 290.70312500]
[33.15838242 277.30319214]
[43.46966934 266.27685547]
[56.37405014 258.44235229]
[70.91393280 254.38102722]
[70.91393280 239.38102722]
[70.91393280 224.38102722]
[70.91393280 209.38102722]
[70.91393280 194.38102722]
[70.91393280 179.38102722]
[70.91393280 164.38102722]
[70.91393280 149.38102722]
[70.91393280 134.38102722]
[70.91393280 119.38102722]
[68.07613373 134.11015320]
[60.24652100 146.90457153]
[48.42246628 156.13450623]
[34.11014557 160.62420654]
[19.13270950 159.80178833]
[5.39802408 153.77198792]
[-5.34434319 143.30291748]
[-11.72599888 129.72814941]
[-12.93402863 114.77687073]
[-8.81455040 100.35363007]
[0.10768476 88.29569244]
[12.69613647 80.13904572]
[27.34724998 76.92270660]
[42.19472504 79.05636597]
[55.34724045 86.26824951]
[65.12819672 97.63763428]
[57.67328644 84.62132263]
[50.21837616 71.60501862]
[42.76346588 58.58870697]
[35.30855560 45.57239532]
[27.85364532 32.55608749]
[13.90403080 38.13769913]
[-0.68665630 41.72350311]
[-15.63440323 43.24370193]
[-30.64824677 42.66870499]
[-45.43593979 40.00970459]
[-59.70963287 35.31846237]
[-73.19149017 28.68628693]
[-85.61907196 20.24228287]
[-96.75048828 10.15081024]
[-106.36904907 -1.39169419]
[-114.28752899 -14.16055393]
[-120.35179901 -27.90721893]
[-124.44380951 -42.36410522]
[-126.48390961 -57.24980927]
[-126.43238831 -72.27456665]
[-124.29025269 -87.14592743]
[-120.09918976 -101.57441711]
[-113.94079590 -115.27916718]
[-105.93492889 -127.99342346]
[-96.23744202 -139.46969604]
[-85.03707886 -149.48458862]
[-72.55187988 -157.84317017]
[-59.02485657 -164.38273621]
[-44.71932602 -168.97598267]
[-29.91374779 -171.53349304]
[-14.89631271 -172.00552368]
[0.04065673 -170.38284302]
[14.60640907 -166.69706726]
[28.51741791 -161.01991272]
[41.50289917 -153.46191406]
[53.31009293 -144.17018127]
[63.70915985 -133.32557678]
[72.49768829 -121.13919067]
[79.50460052 -107.84824371]
[84.59350586 -93.71144104]
[87.66534424 -79.00395966]
[88.66033173 -64.01209259]
[87.55908966 -49.02765274]
[84.38305664 -34.34231949]
[79.19406128 -20.24195099]
[72.09310150 -7.00100899]
[63.21840668 5.12276459]
[52.74272156 15.89337730]
[40.86995316 25.10117722]
[48.32486343 38.11748505]
[55.77977371 51.13379669]
[63.23468399 64.15010834]
[70.68959808 77.16641235]
[78.14450836 90.18272400]
[98.85815430 78.75302124]
[116.04898834 90.60610199]
[130.95088196 88.89340973]
[145.85278320 87.18072510]
[160.75469971 85.46803284]
[175.65660095 83.75534821]
[190.55850220 82.04265594]
[192.20510864 67.06813049]
[197.14306641 52.83562088]
[205.12469482 40.05902863]
[215.74963379 29.37922096]
[228.48495483 21.33189011]
[242.69183350 16.32068825]
[257.65768433 14.59697437]
[272.63180542 16.24721146]
[286.86312866 21.18862152]
[299.63778687 29.17334747]
[310.31500244 39.80087662]
[318.35925293 52.53813934]
[323.36703491 66.74623871]
[325.08709717 81.71250153]
[323.43322754 96.68623352]
[318.48837280 110.91634369]
[310.50054932 123.68906403]
[299.87045288 134.36372375]
[287.13122559 142.40487671]
[272.92193604 147.40919495]
[257.95523071 149.12565613]
[242.98191833 147.46817017]
[228.75300598 142.51986694]
[215.98220825 134.52894592]
[205.31013489 123.89624023]
[197.27206421 111.15508270]
[192.27119446 96.94455719]
[177.36927795 98.65724945]
[162.46737671 100.36993408]
[147.56547546 102.08262634]
[132.66357422 103.79531860]
[117.76167297 105.50800323]
[106.70948029 120.19209290]
[85.91393280 119.38102722]
[85.91393280 134.38102722]
[85.91393280 149.38102722]
[85.91393280 164.38102722]
[85.91393280 179.38102722]
[85.91393280 194.38102722]
[85.91393280 209.38102722]
[85.91393280 224.38102722]
[85.91393280 239.38102722]
[85.91393280 254.38102722]
[100.45382690 258.44235229]
[113.35820770 266.27685547]
[123.66948700 277.30319214]
[130.62251282 290.70312500]
[133.70130920 305.48226929]
[132.67741394 320.54394531]
[127.62681580 334.77047729]
[118.92429352 347.10614014]
[107.21562958 356.63555908]
[93.36968994 362.65158081]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 90]
[37 89]
[38 88]
[39 87]
[40 86]
[41 85]
[92 129]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
