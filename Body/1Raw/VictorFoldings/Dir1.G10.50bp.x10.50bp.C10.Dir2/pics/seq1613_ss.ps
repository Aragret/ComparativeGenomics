%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUACAAAGGGGGGGGGGGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGGUGUAGCCCAUGAGxxxxxxxxxxUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACCCCCCCCCCCGGCUACAUAG\
) } def
/len { sequence length } bind def

/coor [
[98.11213684 529.72607422]
[85.23886108 521.82318115]
[75.11457062 510.61270142]
[68.55998230 497.00335693]
[66.10646820 482.09841919]
[67.95290375 467.10617065]
[73.94961548 453.24197388]
[83.61047363 441.62973022]
[96.15232086 433.21078491]
[110.55844116 428.66760254]
[110.24639130 413.67086792]
[109.93433380 398.67410278]
[109.62227631 383.67733765]
[109.31021881 368.68060303]
[108.99816132 353.68383789]
[108.68610382 338.68710327]
[108.37405396 323.69033813]
[108.06199646 308.69357300]
[107.74993896 293.69683838]
[107.43788147 278.70007324]
[107.12582397 263.70330811]
[97.23174286 249.24278259]
[106.15352631 233.16853333]
[105.52954865 218.18151855]
[91.79286194 212.37040710]
[81.90077972 201.12513733]
[77.85556030 186.64076233]
[80.51113892 171.77577209]
[89.39352417 159.48796082]
[102.78435516 152.24592590]
[102.16037750 137.25891113]
[101.53639984 122.27189636]
[91.38442230 133.31442261]
[76.99337006 129.08386230]
[74.43241119 114.30409241]
[86.56230927 105.47824860]
[71.74455261 103.14714050]
[56.92679214 100.81604004]
[42.10903168 98.48493195]
[27.00799751 104.87952423]
[14.08441162 94.78433228]
[16.63295174 78.58441925]
[32.03189850 72.94487762]
[44.44013596 83.66717529]
[59.25789642 85.99828339]
[74.07565308 88.32938385]
[88.89340973 90.66049194]
[79.93374634 78.63034058]
[86.76932526 65.27838135]
[101.76747894 65.51351929]
[108.18101501 79.07436371]
[113.08256531 64.89780426]
[117.98411560 50.72124481]
[122.88566589 36.54468918]
[127.78721619 22.36812973]
[132.68876648 8.19157124]
[137.59031677 -5.98498678]
[142.49186707 -20.16154480]
[147.39341736 -34.33810425]
[152.29496765 -48.51465988]
[157.19651794 -62.69121933]
[143.79753113 -69.48686218]
[131.44871521 -78.04376221]
[120.38012695 -88.20250702]
[110.79797363 -99.77385712]
[102.88076019 -112.54222870]
[96.77597809 -126.26977539]
[92.59735870 -140.70074463]
[90.42274475 -155.56629944]
[90.29264832 -170.58950806]
[92.20949554 -185.49049377]
[96.13758087 -199.99166870]
[102.00371552 -213.82287598]
[109.69861603 -226.72644043]
[119.07894897 -238.46200562]
[129.96994019 -248.81091309]
[142.16871643 -257.58038330]
[155.44801331 -264.60705566]
[169.56045532 -269.76000977]
[184.24311829 -272.94323730]
[199.22248840 -274.09747314]
[214.21949768 -273.20120239]
[228.95477295 -270.27111816]
[243.15380859 -265.36178589]
[256.55206299 -258.56469727]
[268.89996338 -250.00646973]
[279.96743774 -239.84651184]
[289.54833984 -228.27413940]
[297.46417236 -215.50489807]
[303.56747437 -201.77670288]
[307.74453735 -187.34527588]
[309.91754150 -172.47947693]
[310.04598999 -157.45625305]
[308.12753296 -142.55548096]
[304.19787598 -128.05473328]
[298.33026123 -114.22415924]
[290.63394165 -101.32142639]
[281.25234985 -89.58688354]
[270.36022949 -79.23915863]
[258.16052246 -70.47100067]
[244.88044739 -63.44577789]
[230.76745605 -58.29435349]
[216.08445740 -55.11269760]
[201.10494995 -53.96008301]
[186.10803223 -54.85798264]
[171.37307739 -57.78966904]
[166.47152710 -43.61310959]
[161.56997681 -29.43655205]
[156.66842651 -15.25999451]
[151.76687622 -1.08343601]
[146.86532593 13.09312248]
[141.96377563 27.26968002]
[137.06222534 41.44623947]
[132.16067505 55.62279510]
[127.25912476 69.79935455]
[122.35757446 83.97591400]
[116.52341461 121.64791870]
[117.14739227 136.63493347]
[117.77136993 151.62194824]
[131.71784973 157.72579956]
[141.59091187 169.23274231]
[145.47296143 183.82554626]
[142.64575195 198.59605408]
[133.72265625 210.62467957]
[120.51656342 217.55754089]
[121.14054108 232.54455566]
[130.10961914 241.87243652]
[130.28605652 254.40989685]
[122.12258148 263.39126587]
[122.43463898 278.38803101]
[122.74668884 293.38476562]
[123.05874634 308.38153076]
[123.37080383 323.37826538]
[123.68286133 338.37503052]
[123.99491882 353.37179565]
[124.30697632 368.36853027]
[124.61902618 383.36529541]
[124.93108368 398.36206055]
[125.24314117 413.35879517]
[125.55519867 428.35556030]
[140.13783264 432.29550171]
[153.01904297 440.18545532]
[163.15460205 451.38577271]
[169.72285461 464.98852539]
[172.19134521 479.89099121]
[170.35997009 494.88507080]
[164.37718201 508.75527954]
[154.72799683 520.37725830]
[142.19461060 528.80877686]
[127.79306030 533.36645508]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 126]
[24 125]
[30 119]
[31 118]
[32 117]
[36 47]
[37 46]
[38 45]
[39 44]
[51 116]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
[57 110]
[58 109]
[59 108]
[60 107]
[61 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
