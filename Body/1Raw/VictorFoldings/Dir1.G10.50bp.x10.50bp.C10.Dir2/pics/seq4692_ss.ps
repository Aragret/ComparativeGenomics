%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCAUCAGGGGGGGGGGCAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACxxxxxxxxxxACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUCUCCCCCCCCCCACACUUAUCA\
) } def
/len { sequence length } bind def

/coor [
[92.02478027 364.18511963]
[78.17884064 358.16909790]
[66.47017670 348.63967896]
[57.76765060 336.30401611]
[52.71705246 322.07748413]
[51.69316101 307.01580811]
[54.77195740 292.23666382]
[61.72497940 278.83673096]
[72.03626251 267.81039429]
[84.94064331 259.97589111]
[99.48052979 255.91456604]
[99.48052979 240.91456604]
[99.48052979 225.91456604]
[99.48052979 210.91456604]
[99.48052979 195.91456604]
[99.48052979 180.91456604]
[99.48052979 165.91456604]
[99.48052979 150.91456604]
[99.48052979 135.91456604]
[99.48052979 120.91457367]
[87.30869293 112.14836884]
[73.08191681 116.90218353]
[58.85513687 121.65599823]
[48.21844864 133.36801147]
[33.69512939 130.06309509]
[19.46835136 134.81690979]
[13.89997196 149.42948914]
[0.21646909 156.99888611]
[-15.12122440 153.95106506]
[-24.87112045 141.72512817]
[-24.42961311 126.09378052]
[-14.00517178 114.43766022]
[1.48010302 112.26044464]
[14.71453667 120.59013367]
[28.94131660 115.83631897]
[38.56040955 104.46432495]
[54.10132217 107.42921448]
[68.32810211 102.67539978]
[82.55487823 97.92158508]
[67.58170319 98.81823730]
[53.79514313 92.90800476]
[44.12050247 81.44496918]
[40.61058807 66.86139679]
[44.01015854 52.25170898]
[53.59786987 40.71586227]
[67.33935547 34.70158386]
[82.31888580 35.48501587]
[95.35801697 42.89992523]
[103.69006348 55.37298203]
[105.54707336 70.25758362]
[100.53512573 84.39529419]
[109.04621887 72.04371643]
[117.55731201 59.69214630]
[120.19617462 44.92609024]
[116.49001312 30.39115524]
[112.78385162 15.85621834]
[109.07769012 1.32128251]
[94.00298309 1.45034993]
[79.33559418 -2.03263044]
[65.92826843 -8.92516327]
[54.56048584 -18.82652473]
[45.89315796 -31.16106415]
[40.43018723 -45.21166611]
[38.48918915 -60.16144562]
[40.18301010 -75.14124298]
[45.41316986 -89.28015900]
[53.87559509 -101.75616455]
[65.07829285 -111.84393311]
[78.36994934 -118.95696259]
[92.97781372 -122.68171692]
[108.05259705 -122.80165100]
[122.71787262 -119.30977631]
[136.12101746 -112.40911865]
[147.48278809 -102.50086212]
[156.14263916 -90.16107178]
[161.59709167 -76.10716248]
[163.52902222 -61.15620804]
[161.82612610 -46.17743683]
[156.58740234 -32.04169846]
[148.11740112 -19.57082176]
[136.90859985 -9.48985100]
[123.61262512 -2.38487864]
[127.31878662 12.15005779]
[131.02494812 26.68499374]
[134.73110962 41.21992874]
[141.14366150 27.65972137]
[156.14179993 27.42334366]
[162.97846985 40.77473831]
[154.01870728 52.80605698]
[168.59141541 49.25129700]
[183.16412354 45.69653320]
[197.73681641 42.14177322]
[212.30952454 38.58700943]
[211.85507202 23.53751945]
[214.53990173 8.72248077]
[220.24665833 -5.21045589]
[228.72584534 -17.65220261]
[239.60679626 -28.05886078]
[252.41384888 -35.97549438]
[266.58712769 -41.05602264]
[281.50704956 -43.07834625]
[296.52136230 -41.95405960]
[310.97372437 -37.73230743]
[324.23229980 -30.59765434]
[335.71752930 -20.86198997]
[344.92730713 -8.95091724]
[351.45904541 4.61486149]
[355.02716064 19.24230957]
[355.47567749 34.29197693]
[352.78503418 49.10595703]
[347.07278442 63.03664780]
[338.58871460 75.47505951]
[327.70367432 85.87743378]
[314.89349365 93.78903198]
[300.71823120 98.86398315]
[285.79751587 100.88043213]
[270.78363037 99.75024414]
[256.33294678 95.52280426]
[243.07716370 88.38293457]
[231.59576416 78.64275360]
[222.39067078 66.72805786]
[215.86428833 53.15971375]
[201.29158020 56.71447372]
[186.71888733 60.26923752]
[172.14617920 63.82399750]
[157.57347107 67.37876129]
[129.90888977 68.20323944]
[121.39778900 80.55480957]
[112.88670349 92.90637970]
[119.54092407 104.59616089]
[114.48052979 120.91457367]
[114.48052979 135.91456604]
[114.48052979 150.91456604]
[114.48052979 165.91456604]
[114.48052979 180.91456604]
[114.48052979 195.91456604]
[114.48052979 210.91456604]
[114.48052979 225.91456604]
[114.48052979 240.91456604]
[114.48052979 255.91456604]
[129.02041626 259.97589111]
[141.92480469 267.81039429]
[152.23608398 278.83673096]
[159.18910217 292.23666382]
[162.26789856 307.01580811]
[161.24401855 322.07748413]
[156.19340515 336.30401611]
[147.49089050 348.63967896]
[135.78222656 358.16909790]
[121.93628693 364.18511963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 39]
[22 38]
[23 37]
[25 35]
[26 34]
[51 129]
[52 128]
[53 127]
[54 85]
[55 84]
[56 83]
[57 82]
[89 126]
[90 125]
[91 124]
[92 123]
[93 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
