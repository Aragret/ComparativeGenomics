%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAACAUUGGGGGGGGGGAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUxxxxxxxxxxCAAAUAUCAUUCUGAGGGGCCACAGUAAUUACAAACUUACUAUCCGCCAUCCCCCCCCCCCCCAUACAUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 379.83224487]
[71.19830322 373.81622314]
[59.48964310 364.28680420]
[50.78712082 351.95114136]
[45.73651886 337.72460938]
[44.71262741 322.66293335]
[47.79142761 307.88375854]
[54.74444962 294.48385620]
[65.05573273 283.45751953]
[77.96011353 275.62301636]
[92.50000000 271.56167603]
[92.50000000 256.56167603]
[92.50000000 241.56169128]
[92.50000000 226.56169128]
[92.50000000 211.56169128]
[92.50000000 196.56169128]
[92.50000000 181.56169128]
[92.50000000 166.56169128]
[92.50000000 151.56169128]
[92.50000000 136.56169128]
[92.50000000 121.56169128]
[78.50312805 107.68382263]
[80.53157806 88.07788086]
[71.02321625 76.47653961]
[61.51486206 64.87519836]
[52.00650024 53.27385330]
[39.55680084 61.66071320]
[26.37643814 68.84489441]
[12.58124542 74.76326752]
[-1.70754039 79.36382294]
[-16.36434746 82.60611725]
[-31.26036644 84.46166992]
[-46.26469040 84.91416931]
[-61.24545670 83.95963287]
[-76.07100677 81.60645294]
[-90.61106110 77.87532043]
[-104.73782349 72.79900360]
[-118.32715607 66.42213440]
[-131.25962830 58.80074310]
[-143.42160034 50.00181198]
[-154.70616150 40.10266876]
[-165.01416016 29.19030952]
[-174.25500488 17.36063194]
[-182.34748840 4.71759844]
[-189.22047424 -8.62767982]
[-194.81358337 -22.55792046]
[-199.07765198 -36.95070267]
[-201.97520447 -51.67954254]
[-203.48077393 -66.61499023]
[-203.58114624 -81.62580109]
[-202.27542114 -96.58005524]
[-199.57507324 -111.34632111]
[-195.50384521 -125.79483032]
[-190.09751892 -139.79861450]
[-183.40359497 -153.23460388]
[-175.48091125 -165.98472595]
[-166.39907837 -177.93692017]
[-156.23791504 -188.98614502]
[-145.08673096 -199.03529358]
[-133.04351807 -207.99606323]
[-120.21411133 -215.78970337]
[-106.71126556 -222.34773254]
[-92.65364075 -227.61248779]
[-78.16477966 -231.53771973]
[-63.37202072 -234.08892822]
[-48.40535736 -235.24371338]
[-33.39632416 -234.99188232]
[-18.47682571 -233.33569336]
[-3.77797365 -230.28967285]
[10.57105255 -225.88059998]
[24.44415283 -220.14723206]
[37.71940231 -213.13993835]
[50.28013992 -204.92030334]
[62.01597595 -195.56056213]
[72.82377625 -185.14299011]
[82.60855865 -173.75912476]
[91.28432465 -161.50900269]
[98.77484131 -148.50028992]
[105.01427460 -134.84730530]
[109.94779205 -120.67002869]
[113.53203583 -106.09307861]
[115.73550415 -91.24452972]
[116.53883362 -76.25489807]
[115.93497467 -61.25590515]
[113.92921448 -46.37936783]
[110.53919983 -31.75601959]
[105.79470825 -17.51437950]
[99.73744202 -3.77960610]
[92.42063904 9.32759857]
[83.90859222 21.69204330]
[74.27610779 33.20507050]
[63.60784149 43.76549530]
[73.11620331 55.36683655]
[82.62455750 66.96817780]
[92.13291931 78.56951904]
[103.95217133 77.51585388]
[114.70364380 82.53691101]
[121.48250580 92.27611542]
[136.48168945 92.12007141]
[151.48088074 91.96403503]
[161.06309509 78.06320190]
[176.87803650 72.64386749]
[192.65602112 77.64601135]
[202.26531982 90.91879272]
[217.25801086 90.45074463]
[232.25070190 89.98270416]
[247.24340820 89.51466370]
[262.23608398 89.04662323]
[270.84896851 76.13932800]
[285.41528320 70.79122162]
[300.33398438 75.05875397]
[309.86853027 87.30096436]
[310.35272217 102.81048584]
[301.60034180 115.62358093]
[286.97686768 120.81336212]
[272.10534668 116.38424683]
[262.70413208 104.03931427]
[247.71144104 104.50736237]
[232.71875000 104.97540283]
[217.72605896 105.44344330]
[202.73335266 105.91148376]
[196.25996399 117.62861633]
[184.74131775 124.65942383]
[171.14410400 125.06725311]
[159.03318787 118.63774872]
[151.63691711 106.96322632]
[136.63772583 107.11926270]
[121.63854218 107.27529907]
[116.22618103 116.05825806]
[107.50000000 121.56169128]
[107.50000000 136.56169128]
[107.50000000 151.56169128]
[107.50000000 166.56169128]
[107.50000000 181.56169128]
[107.50000000 196.56169128]
[107.50000000 211.56169128]
[107.50000000 226.56169128]
[107.50000000 241.56169128]
[107.50000000 256.56167603]
[107.50000000 271.56167603]
[122.03988647 275.62301636]
[134.94427490 283.45751953]
[145.25555420 294.48385620]
[152.20857239 307.88375854]
[155.28736877 322.66293335]
[154.26348877 337.72460938]
[149.21287537 351.95114136]
[140.51036072 364.28680420]
[128.80169678 373.81622314]
[114.95575714 379.83224487]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 95]
[24 94]
[25 93]
[26 92]
[98 128]
[99 127]
[100 126]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
