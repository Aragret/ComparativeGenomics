%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCAUUCUGGGGGGGGGGAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAxxxxxxxxxxAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACACCCCCCCCCCUAACCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.42724609]
[71.19830322 377.41122437]
[59.48964310 367.88180542]
[50.78712082 355.54614258]
[45.73651886 341.31961060]
[44.71262741 326.25793457]
[47.79142761 311.47875977]
[54.74444962 298.07885742]
[65.05573273 287.05252075]
[77.96011353 279.21801758]
[92.50000000 275.15670776]
[92.50000000 260.15670776]
[92.50000000 245.15669250]
[92.50000000 230.15669250]
[92.50000000 215.15669250]
[92.50000000 200.15669250]
[92.50000000 185.15669250]
[92.50000000 170.15669250]
[92.50000000 155.15669250]
[92.50000000 140.15669250]
[78.03089142 134.44079590]
[66.74794769 123.72996521]
[60.28753662 109.57759094]
[45.30782318 110.35743713]
[30.32810783 111.13728333]
[24.60910225 123.94114685]
[13.97295475 132.97792053]
[0.54165518 136.51983643]
[-13.03736019 133.92793274]
[-24.11301994 125.76650238]
[-30.54818916 113.68147278]
[-45.54088593 114.14951324]
[-60.53358078 114.61755371]
[-75.52627563 115.08560181]
[-90.51897430 115.55364227]
[-106.16172791 122.09126282]
[-116.77420807 108.86962128]
[-107.00709534 95.01177216]
[-90.98701477 100.56094360]
[-75.99431610 100.09290314]
[-61.00162506 99.62486267]
[-46.00892639 99.15682220]
[-31.01623154 98.68877411]
[-23.75076675 84.28861237]
[-10.14645863 75.45092010]
[6.15075207 74.65660858]
[20.71630859 82.21571350]
[29.54826355 96.15756989]
[44.52797699 95.37772369]
[59.50769043 94.59787750]
[60.90023804 88.16705322]
[63.30717087 82.04321289]
[66.66603851 76.38523865]
[56.22622681 65.61442566]
[45.78641510 54.84362030]
[30.42097855 47.67844391]
[33.05255890 30.92997932]
[49.87498474 28.82227898]
[56.55722427 44.40380859]
[66.99703217 55.17461395]
[77.43685150 65.94542694]
[85.00706482 61.99971390]
[93.23201752 59.71347046]
[101.75252533 59.18653870]
[110.19650269 60.44192505]
[116.54363251 46.85097504]
[122.89076233 33.26002502]
[129.23789978 19.66907310]
[135.58502197 6.07812214]
[123.31011200 -2.61476493]
[112.78479004 -13.35987282]
[104.34739685 -25.81179047]
[98.26917267 -39.57024002]
[94.74549866 -54.19294739]
[93.88964844 -69.20984650]
[95.72913361 -84.13821411]
[100.20482635 -98.49815369]
[107.17284393 -111.82806396]
[116.40919495 -123.69944000]
[127.61697388 -133.73066711]
[140.43589783 -141.59927368]
[154.45388794 -147.05232239]
[169.22032166 -149.91453552]
[184.26051331 -150.09388733]
[199.09100342 -147.58460999]
[213.23503113 -142.46737671]
[226.23794556 -134.90667725]
[237.68173218 -125.14556122]
[247.19854736 -113.49781036]
[254.48245239 -100.33784485]
[259.29928589 -86.08871460]
[261.49423218 -71.20845795]
[260.99670410 -56.17541885]
[257.82272339 -41.47284698]
[252.07431030 -27.57336807]
[243.93624878 -14.92379570]
[233.67013550 -3.93075967]
[221.60600281 5.05236006]
[208.13165283 11.73679256]
[193.68022156 15.90766239]
[178.71629333 17.43089104]
[163.72085571 16.25751495]
[149.17597961 12.42525196]
[142.82884216 26.01620293]
[136.48171997 39.60715485]
[130.13458252 53.19810486]
[123.78746033 66.78905487]
[136.83184814 82.33010101]
[140.79014587 102.23014832]
[155.36285400 105.78491211]
[169.93556213 109.33966827]
[178.59213257 96.87258911]
[191.16996765 88.37773132]
[205.96800232 85.00396729]
[220.98495483 87.20756531]
[234.18988037 94.69050598]
[243.79692078 106.44078827]
[248.50682068 120.86927795]
[247.68258667 136.02464294]
[241.43569946 149.85723877]
[230.61099243 160.49633789]
[216.67242432 166.50306702]
[201.50508118 167.06507874]
[187.16020203 162.10635376]
[175.57781982 152.29754639]
[168.32435608 138.96517944]
[166.38079834 123.91237640]
[151.80809021 120.35761261]
[137.23538208 116.80284882]
[125.23220825 132.12702942]
[107.50000000 140.15669250]
[107.50000000 155.15669250]
[107.50000000 170.15669250]
[107.50000000 185.15669250]
[107.50000000 200.15669250]
[107.50000000 215.15669250]
[107.50000000 230.15669250]
[107.50000000 245.15669250]
[107.50000000 260.15670776]
[107.50000000 275.15670776]
[122.03988647 279.21801758]
[134.94427490 287.05252075]
[145.25555420 298.07885742]
[152.20857239 311.47875977]
[155.28736877 326.25793457]
[154.26348877 341.31961060]
[149.21287537 355.54614258]
[140.51036072 367.88180542]
[128.80169678 377.41122437]
[114.95575714 383.42724609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 50]
[24 49]
[25 48]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[53 61]
[54 60]
[55 59]
[65 107]
[66 106]
[67 105]
[68 104]
[69 103]
[109 129]
[110 128]
[111 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
