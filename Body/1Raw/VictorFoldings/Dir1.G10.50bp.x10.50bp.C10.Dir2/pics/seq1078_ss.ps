%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCACACCCGGGGGGGGGGCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUxxxxxxxxxxCUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUACCCCCCCCCCUACCCACACCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 374.96685791]
[71.01555634 369.41384888]
[58.81560135 360.54751587]
[49.20452881 348.92520142]
[42.78650284 335.27749634]
[39.96496582 320.46231079]
[40.91728210 305.41094971]
[45.58358765 291.06951904]
[53.67055511 278.33956909]
[64.66983032 268.02130127]
[77.88998413 260.76330566]
[92.50000000 257.02188110]
[92.50000000 242.02188110]
[92.50000000 227.02188110]
[92.50000000 212.02188110]
[92.50000000 197.02188110]
[92.50000000 182.02188110]
[92.50000000 167.02188110]
[92.50000000 152.02188110]
[92.50000000 137.02188110]
[92.50000000 122.02188110]
[80.60829163 112.85204315]
[76.79621887 98.32734680]
[82.65209198 84.49957275]
[75.28585052 71.43287659]
[67.91960907 58.36618423]
[60.55337143 45.29948807]
[53.18712997 32.23279190]
[41.90546799 34.09415436]
[30.59570885 32.58376694]
[20.24153328 27.84715080]
[11.73937893 20.30980682]
[5.82082701 10.63903713]
[2.98966432 -0.31511942]
[3.47902465 -11.59460163]
[7.23225498 -22.21711349]
[13.90907478 -31.26167297]
[5.49566460 -43.67998505]
[-2.91774583 -56.09830093]
[-11.33115578 -68.51661682]
[-25.53146935 -62.49152756]
[-40.62677383 -59.33885193]
[-56.04229736 -59.17679214]
[-71.19143677 -62.00971603]
[-85.49806213 -67.72805786]
[-98.41844940 -76.11254883]
[-109.46193695 -86.84263611]
[-118.20954895 -99.50872803]
[-124.32991028 -113.62783051]
[-127.59177399 -128.66198730]
[-127.87277985 -144.03871155]
[-125.16403961 -159.17288208]
[-119.57039642 -173.48890686]
[-111.30636597 -186.44271851]
[-100.68793488 -197.54234314]
[-109.35454559 -209.78530884]
[-118.02114868 -222.02825928]
[-126.68775940 -234.27120972]
[-135.35437012 -246.51416016]
[-150.47045898 -252.87306213]
[-152.25280762 -269.17507935]
[-138.86787415 -278.65005493]
[-124.08493805 -271.55099487]
[-123.11141205 -255.18077087]
[-114.44480896 -242.93782043]
[-105.77819824 -230.69487000]
[-97.11158752 -218.45190430]
[-88.44498444 -206.20895386]
[-75.16532135 -212.28720093]
[-60.98759079 -215.80953979]
[-46.39910889 -216.65336609]
[-31.90161514 -214.78811646]
[-17.99398804 -210.27642822]
[-5.15510321 -203.27206421]
[6.17267370 -194.01460266]
[15.59871864 -182.82131958]
[22.79762459 -170.07626343]
[27.52043152 -156.21707153]
[29.60323715 -141.72001648]
[28.97288704 -127.08354187]
[25.64953995 -112.81118011]
[19.74602699 -99.39422607]
[11.46402454 -87.29482269]
[1.08715832 -76.93002319]
[9.50056839 -64.51171112]
[17.91397858 -52.09339523]
[26.32738876 -39.67508316]
[42.59979248 -42.60219193]
[58.57719803 -38.34994888]
[67.98105621 -50.03615570]
[77.38491058 -61.72236633]
[82.60425568 -77.85292053]
[99.54927826 -77.30293274]
[103.71163940 -60.86787415]
[89.07112122 -52.31850815]
[79.66726685 -40.63230133]
[70.26340485 -28.94609070]
[78.73706818 -11.27812099]
[77.31709290 8.39088535]
[66.25382996 24.86655426]
[73.62006378 37.93325043]
[80.98630524 50.99994278]
[88.35254669 64.06663513]
[95.71878052 77.13333130]
[113.04862976 80.74002838]
[122.82405853 95.49716187]
[137.69065857 97.49321747]
[152.55725098 99.48927307]
[167.42385864 101.48533630]
[182.13090515 95.65323639]
[193.71537781 105.01535034]
[208.58198547 107.01140594]
[217.38285828 94.48930359]
[231.00025940 87.50181580]
[246.30500793 87.65462494]
[259.78018188 94.91261292]
[268.32928467 107.60794830]
[269.98779297 122.82333374]
[264.37460327 137.06237793]
[252.77955627 147.05307007]
[237.86715698 150.49961853]
[223.06413269 146.61001587]
[211.77210999 136.27807617]
[206.58592224 121.87800598]
[191.71932983 119.88195038]
[178.07563782 125.85681915]
[165.42779541 116.35192871]
[150.56120300 114.35587311]
[135.69459534 112.35981750]
[120.82800293 110.36376190]
[115.31655884 117.51046753]
[107.50000000 122.02188110]
[107.50000000 137.02188110]
[107.50000000 152.02188110]
[107.50000000 167.02188110]
[107.50000000 182.02188110]
[107.50000000 197.02188110]
[107.50000000 212.02188110]
[107.50000000 227.02188110]
[107.50000000 242.02188110]
[107.50000000 257.02188110]
[122.11001587 260.76330566]
[135.33016968 268.02130127]
[146.32945251 278.33956909]
[154.41641235 291.06951904]
[159.08271790 305.41094971]
[160.03503418 320.46231079]
[157.21350098 335.27749634]
[150.79547119 348.92520142]
[141.18440247 360.54751587]
[128.98443604 369.41384888]
[114.96250153 374.96685791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 104]
[25 103]
[26 102]
[27 101]
[28 100]
[37 87]
[38 86]
[39 85]
[40 84]
[55 68]
[56 67]
[57 66]
[58 65]
[59 64]
[89 97]
[90 96]
[91 95]
[106 130]
[107 129]
[108 128]
[109 127]
[111 125]
[112 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
