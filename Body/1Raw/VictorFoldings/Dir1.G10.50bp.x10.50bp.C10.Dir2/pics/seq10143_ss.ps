%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACACAAUAGGGGGGGGGGGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCCACUUAUGACUCCCUAAxxxxxxxxxxUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCCCCCCCCCCCUUACACAAAA\
) } def
/len { sequence length } bind def

/coor [
[84.12644196 407.05725098]
[70.63756561 400.32571411]
[59.15206528 390.56115723]
[50.33769608 378.33126831]
[44.70691299 364.34704590]
[42.58708572 349.42156982]
[44.10145187 334.42257690]
[49.16197586 320.22207642]
[57.47444153 307.64566040]
[68.55557251 297.42449951]
[81.76113129 290.15286255]
[96.32334900 286.25347900]
[96.01537323 271.25665283]
[95.70739746 256.25982666]
[95.39942169 241.26296997]
[95.09143829 226.26614380]
[94.78346252 211.26930237]
[94.47548676 196.27246094]
[94.16751099 181.27561951]
[93.85952759 166.27877808]
[93.55155182 151.28195190]
[93.24357605 136.28511047]
[92.93560028 121.28826904]
[84.89064026 117.86778259]
[78.46702576 111.41126251]
[74.80187225 102.67541504]
[74.68424988 92.83650970]
[78.40401459 83.33274841]
[63.89538956 79.52488708]
[49.38676453 75.71702576]
[34.56428146 73.41615295]
[19.58404160 72.64649200]
[4.60380125 71.87683105]
[-10.37644005 71.10717010]
[-25.35668182 70.33750916]
[-40.33692169 69.56785583]
[-55.31716156 68.79819489]
[-69.66716766 76.73604584]
[-83.57507324 68.04684448]
[-82.73361969 51.66930008]
[-68.00842285 44.45122147]
[-54.54750443 53.81795120]
[-39.56726074 54.58761215]
[-24.58702087 55.35727310]
[-9.60678005 56.12693024]
[5.37346125 56.89659119]
[20.35370255 57.66625214]
[35.33394241 58.43591309]
[39.88123322 44.14178085]
[27.20971680 36.11478424]
[10.59373283 32.74649429]
[9.23062801 15.84743118]
[25.09192276 9.85947132]
[35.23671341 23.44326782]
[47.90822983 31.47026634]
[53.61955643 39.25684738]
[56.20186996 47.47092819]
[55.88260269 55.07915497]
[53.19462585 61.20840073]
[67.70324707 65.01625824]
[82.21187592 68.82411957]
[96.50600433 64.27683258]
[106.14781952 52.78616333]
[115.78963470 41.29549789]
[101.59490204 46.14417267]
[86.67100525 47.65322876]
[71.79296875 45.74428940]
[57.73344803 40.51649475]
[45.22258377 32.24133682]
[34.91009521 21.34856033]
[27.33153152 8.40385532]
[22.88047028 -5.92053127]
[21.78806114 -20.88069916]
[24.11103821 -35.69973373]
[29.72876167 -49.60804749]
[38.34949112 -61.88334656]
[49.52553177 -71.88815308]
[62.67648697 -79.10289001]
[77.11940002 -83.15287018]
[92.10420227 -83.82778931]
[106.85271454 -81.09257507]
[120.59900665 -75.08928680]
[132.62921143 -66.12969208]
[142.31854248 -54.67907333]
[149.16384888 -41.33209229]
[152.80960083 -26.78188896]
[153.06649780 -11.78408909]
[149.92118835 2.88243723]
[143.53700256 16.45602226]
[134.24850464 28.22872734]
[148.29048157 22.95398521]
[162.33245850 17.67924309]
[176.37443542 12.40450191]
[179.76063538 8.27062511]
[183.98280334 6.10753632]
[188.13325500 5.89957094]
[191.44664001 7.26660061]
[205.78669739 2.86630034]
[220.12675476 -1.53399992]
[220.87974548 -16.67364311]
[226.76824951 -30.64151382]
[237.08119202 -41.75091934]
[250.57324219 -48.66035080]
[265.61517334 -50.53545761]
[280.39059448 -47.14981079]
[293.11532593 -38.91224289]
[302.25274658 -26.81748199]
[306.69949341 -12.32603073]
[305.91860962 2.81219959]
[300.00439453 16.76919365]
[289.67098999 27.85957718]
[276.16622925 34.74413300]
[261.12084961 36.59151459]
[246.35168457 33.17864227]
[233.64218140 24.91764069]
[224.52705383 12.80606174]
[210.18699646 17.20636177]
[195.84693909 21.60666275]
[181.64918518 26.44647789]
[167.60720825 31.72122002]
[153.56523132 36.99596024]
[139.52325439 42.27070236]
[127.28029633 50.93730927]
[117.63848877 62.42797852]
[107.99667358 73.91864014]
[120.71002197 84.16975403]
[124.84205627 99.20513916]
[119.66285706 113.12744904]
[107.93243408 120.98029327]
[108.24041748 135.97712708]
[108.54839325 150.97396851]
[108.85636902 165.97080994]
[109.16434479 180.96765137]
[109.47232819 195.96447754]
[109.78030396 210.96131897]
[110.08827972 225.95816040]
[110.39625549 240.95500183]
[110.70423126 255.95182800]
[111.01221466 270.94866943]
[111.32019043 285.94552612]
[126.03022766 289.24374390]
[139.52317810 295.96710205]
[151.01460266 305.72470093]
[159.83638000 317.94924927]
[165.47564697 331.93002319]
[167.60452271 346.85421753]
[166.09924316 361.85412598]
[161.04733276 376.05770874]
[152.74249268 388.63916016]
[141.66755676 398.86703491]
[128.46641541 406.14666748]
[113.90655518 410.05487061]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[28 61]
[29 60]
[30 59]
[31 48]
[32 47]
[33 46]
[34 45]
[35 44]
[36 43]
[37 42]
[49 55]
[50 54]
[62 125]
[63 124]
[64 123]
[90 122]
[91 121]
[92 120]
[93 119]
[97 118]
[98 117]
[99 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
