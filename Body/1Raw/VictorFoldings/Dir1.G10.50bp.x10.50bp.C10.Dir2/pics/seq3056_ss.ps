%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUCCUCCCGGGGGGGGGGUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCxxxxxxxxxxAAAGUAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUCCCCCCCCCCAAUUCCCCCC\
) } def
/len { sequence length } bind def

/coor [
[98.76095581 362.53570557]
[84.91502380 356.51968384]
[73.20635986 346.99026489]
[64.50383759 334.65460205]
[59.45323181 320.42807007]
[58.42934036 305.36639404]
[61.50814056 290.58724976]
[68.46115875 277.18731689]
[78.77244568 266.16098022]
[91.67682648 258.32647705]
[106.21671295 254.26516724]
[106.21671295 239.26516724]
[106.21671295 224.26516724]
[106.21671295 209.26516724]
[106.21671295 194.26516724]
[106.21671295 179.26516724]
[106.21671295 164.26516724]
[106.21671295 149.26516724]
[106.21671295 134.26516724]
[106.21671295 119.26515961]
[93.60558319 111.14361572]
[79.94934845 117.34902191]
[66.29310608 123.55443573]
[56.93007660 136.30764771]
[42.14209366 134.52867126]
[33.04975891 148.17643738]
[16.70383644 146.85624695]
[9.91961098 131.92619324]
[19.67611122 118.74504852]
[35.93668365 120.87242889]
[44.32292557 108.56307220]
[60.08769608 109.89819336]
[73.74393463 103.69278717]
[87.40017700 97.48738098]
[97.26589966 86.18836975]
[101.57348633 71.82019043]
[98.12511444 56.37935638]
[109.19143677 46.41010666]
[113.49901581 32.04192352]
[117.80660248 17.67374039]
[117.49454498 2.67698622]
[112.59299469 -11.49957180]
[104.08190918 -23.85114479]
[92.58010101 -33.47967148]
[81.07830048 -43.10819626]
[69.57649231 -52.73672485]
[58.07469177 -62.36524963]
[46.47335052 -71.87361145]
[34.77372742 -81.26077271]
[20.17925072 -76.26029205]
[5.20360518 -79.96617889]
[-5.37453461 -91.19589233]
[-8.17972279 -106.36607361]
[-2.31683421 -120.63597870]
[10.34330463 -129.45211792]
[25.76089096 -130.00131226]
[39.01622772 -122.10829926]
[45.87958145 -108.29172516]
[44.16088867 -92.96039581]
[55.86051178 -83.57323456]
[63.09264374 -81.82911682]
[67.70321655 -73.86705017]
[79.20502472 -64.23852539]
[90.70682526 -54.61000061]
[102.20862579 -44.98147583]
[113.71043396 -35.35294724]
[108.93651581 -49.57299423]
[107.38336182 -64.49237061]
[109.12596130 -79.39080048]
[114.08018494 -93.54904175]
[122.00685120 -106.28356171]
[132.52328491 -116.97957611]
[145.12176514 -125.12070465]
[159.19410706 -130.31391907]
[174.06089783 -132.30851746]
[189.00442505 -131.00817871]
[203.30325317 -126.47570038]
[216.26708984 -118.92989349]
[227.27005005 -108.73504639]
[235.78094482 -96.38334656]
[241.38890076 -82.47109222]
[243.82318115 -67.66992950]
[242.96624756 -52.69442749]
[238.85949707 -38.26755905]
[231.70117188 -25.08581352]
[221.83686829 -13.78557110]
[209.74279785 -4.91237879]
[196.00283813 1.10539055]
[181.28031921 3.97721529]
[166.28599548 3.56445098]
[151.74377441 -0.11297513]
[138.35568237 -6.87752676]
[126.76955414 -16.40112305]
[131.67111206 -2.22456455]
[135.11064148 -16.82489204]
[141.28167725 -30.49670029]
[149.95593262 -42.73423767]
[160.81253052 -53.08480835]
[173.44985962 -61.16552353]
[187.40043640 -66.67745972]
[202.14819336 -69.41671753]
[217.14758301 -69.28197479]
[231.84375000 -66.27819824]
[245.69305420 -60.51652145]
[258.18316650 -52.21007156]
[268.85205078 -41.66612625]
[277.30505371 -29.27472496]
[283.22946167 -15.49425793]
[286.40615845 -0.83449215]
[286.71755981 14.16227436]
[284.15222168 28.94127846]
[278.80499268 42.95581436]
[270.87368774 55.68745041]
[260.65173340 66.66521454]
[248.51722717 75.48302460]
[234.91905212 81.81467438]
[220.36026001 85.42595673]
[205.37939453 86.18328094]
[190.53062439 84.05862427]
[176.36325073 79.13058472]
[163.40135193 71.58145905]
[152.12442017 61.69051361]
[142.94961548 49.82363129]
[136.21632385 36.41979599]
[132.17478943 21.98132515]
[127.86720276 36.34951019]
[123.55961609 50.71769333]
[127.31609344 65.13081360]
[115.94167328 76.12776947]
[111.63408661 90.49595642]
[121.21671295 119.26515961]
[121.21671295 134.26516724]
[121.21671295 149.26516724]
[121.21671295 164.26516724]
[121.21671295 179.26516724]
[121.21671295 194.26516724]
[121.21671295 209.26516724]
[121.21671295 224.26516724]
[121.21671295 239.26516724]
[121.21671295 254.26516724]
[135.75660706 258.32647705]
[148.66098022 266.16098022]
[158.97225952 277.18731689]
[165.92529297 290.58724976]
[169.00408936 305.36639404]
[167.98019409 320.42807007]
[162.92959595 334.65460205]
[154.22706604 346.99026489]
[142.51840210 356.51968384]
[128.67247009 362.53570557]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 34]
[22 33]
[23 32]
[25 30]
[35 130]
[36 129]
[38 127]
[39 126]
[40 125]
[41 94]
[42 93]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 60]
[49 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
