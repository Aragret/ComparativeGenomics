%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAAAACACCGGGGGGGGGGCUCAUGUUCAUACACCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGAxxxxxxxxxxACACCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGACCCCCCCCCCAGAAAACCCC\
) } def
/len { sequence length } bind def

/coor [
[88.59629822 374.91860962]
[74.75035858 368.90258789]
[63.04169464 359.37316895]
[54.33917236 347.03750610]
[49.28857040 332.81097412]
[48.26467896 317.74929810]
[51.34347534 302.97012329]
[58.29649734 289.57022095]
[68.60778046 278.54388428]
[81.51216125 270.70938110]
[96.05204773 266.64804077]
[96.05204773 251.64805603]
[96.05204773 236.64805603]
[96.05204773 221.64805603]
[96.05204773 206.64805603]
[96.05204773 191.64805603]
[96.05204773 176.64805603]
[96.05204773 161.64805603]
[96.05204773 146.64805603]
[96.05204773 131.64805603]
[89.92086792 127.32849884]
[81.28156281 139.59072876]
[69.01946259 130.95123291]
[77.65850067 118.68937683]
[71.52731323 114.36981964]
[57.40251160 119.41857910]
[43.27770996 124.46733093]
[33.08237076 137.31207275]
[16.90276337 134.63769531]
[11.38307571 119.19537354]
[22.20149231 106.87084961]
[38.22895050 110.34252930]
[52.35375595 105.29377747]
[66.47856140 100.24501801]
[80.24305725 82.31717682]
[97.98708344 80.59745789]
[102.29467010 66.22927856]
[106.60225677 51.86109161]
[99.36371613 38.06829071]
[103.93690491 23.55827332]
[117.13083649 16.74243355]
[121.43842316 2.37424994]
[120.19822693 -2.82974005]
[121.03668976 -7.50407076]
[123.38974762 -10.93405533]
[126.48889923 -12.74036026]
[131.68431091 -26.81188011]
[136.87973022 -40.88339996]
[142.07514954 -54.95491791]
[147.27056885 -69.02643585]
[152.46597290 -83.09795380]
[157.66139221 -97.16947937]
[144.14608765 -103.70339203]
[131.32450867 -111.51123810]
[119.31634521 -120.52010345]
[108.23374176 -130.64588928]
[98.18016815 -141.79402161]
[89.24948883 -153.86044312]
[81.52510071 -166.73248291]
[75.07911682 -180.28994751]
[69.97172546 -194.40625000]
[66.25061035 -208.94960022]
[63.95052719 -223.78419495]
[63.09293747 -238.77151489]
[63.68585968 -253.77165222]
[65.72374725 -268.64453125]
[69.18758392 -283.25128174]
[74.04502106 -297.45553589]
[80.25070190 -311.12466431]
[87.74669647 -324.13104248]
[96.46299744 -336.35321045]
[106.31823730 -347.67706299]
[117.22039032 -357.99688721]
[129.06765747 -367.21630859]
[141.74943542 -375.24923706]
[155.14730835 -382.02069092]
[169.13618469 -387.46743774]
[183.58544922 -391.53860474]
[198.36016846 -394.19619751]
[213.32243347 -395.41540527]
[228.33250427 -395.18484497]
[243.25025940 -393.50665283]
[257.93640137 -390.39648438]
[272.25378418 -385.88345337]
[286.06875610 -380.00961304]
[299.25231934 -372.82983398]
[311.68139648 -364.41116333]
[323.23989868 -354.83221436]
[333.81994629 -344.18243408]
[343.32272339 -332.56121826]
[351.65951538 -320.07708740]
[358.75247192 -306.84661865]
[364.53540039 -292.99331665]
[368.95425415 -278.64657593]
[371.96780396 -263.94033813]
[373.54794312 -249.01187134]
[373.67984009 -234.00059509]
[372.36233521 -219.04667664]
[369.60769653 -204.28973389]
[365.44165039 -189.86755371]
[359.90307617 -175.91477966]
[353.04373169 -162.56169128]
[344.92761230 -149.93298340]
[335.63055420 -138.14656067]
[325.23928833 -127.31246185]
[313.85092163 -117.53186035]
[301.57171631 -108.89607239]
[288.51635742 -101.48572540]
[274.80673218 -95.37001038]
[260.57086182 -90.60603333]
[245.94166565 -87.23827362]
[231.05570984 -85.29817200]
[216.05201721 -84.80384827]
[201.07064819 -85.75991821]
[186.25148010 -88.15744781]
[171.73291016 -91.97406006]
[166.53749084 -77.90254211]
[161.34208679 -63.83102036]
[156.14666748 -49.75950241]
[150.95124817 -35.68798447]
[145.75582886 -21.61646461]
[140.56042480 -7.54494476]
[135.80661011 6.68183470]
[131.49902344 21.05001831]
[138.76704407 34.00035858]
[134.60322571 48.63310623]
[120.97043610 56.16867447]
[116.66285706 70.53685760]
[112.35527039 84.90504456]
[126.10966492 104.61566925]
[111.05204773 131.64805603]
[111.05204773 146.64805603]
[111.05204773 161.64805603]
[111.05204773 176.64805603]
[111.05204773 191.64805603]
[111.05204773 206.64805603]
[111.05204773 221.64805603]
[111.05204773 236.64805603]
[111.05204773 251.64805603]
[111.05204773 266.64804077]
[125.59193420 270.70938110]
[138.49632263 278.54388428]
[148.80760193 289.57022095]
[155.76062012 302.97012329]
[158.83941650 317.74929810]
[157.81553650 332.81097412]
[152.76492310 347.03750610]
[144.06240845 359.37316895]
[132.35374451 368.90258789]
[118.50780487 374.91860962]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 34]
[26 33]
[27 32]
[36 129]
[37 128]
[38 127]
[41 124]
[42 123]
[46 122]
[47 121]
[48 120]
[49 119]
[50 118]
[51 117]
[52 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
