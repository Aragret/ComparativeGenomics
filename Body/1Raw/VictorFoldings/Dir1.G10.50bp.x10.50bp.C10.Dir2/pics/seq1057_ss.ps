%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUAGCCUAGGGGGGGGGGGCCACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAxxxxxxxxxxGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUUCCCCCCCCCCGCUCAGCCUA\
) } def
/len { sequence length } bind def

/coor [
[82.02153778 299.18420410]
[68.80133820 291.91171265]
[57.91453552 281.46472168]
[50.10340500 268.55548096]
[45.90052414 254.06416321]
[45.59245300 238.97882080]
[49.20019150 224.32800293]
[56.47776794 211.11061096]
[66.92897034 200.22784424]
[79.84123230 192.42169189]
[94.33417511 188.22441101]
[94.02211761 173.22766113]
[93.71006012 158.23089600]
[93.39800262 143.23414612]
[93.08594513 128.23739624]
[92.77388763 113.24063873]
[79.53130341 106.19550323]
[66.92017365 114.31704712]
[54.30904770 122.43859100]
[41.69792175 130.56013489]
[29.08679199 138.68167114]
[24.29978943 153.99389648]
[9.29203510 159.66371155]
[-4.42380333 151.34173584]
[-6.32610941 135.41186523]
[5.04440355 124.09413910]
[20.96525002 126.07054138]
[33.57637787 117.94900513]
[46.18750763 109.82746124]
[58.79863358 101.70591736]
[71.40975952 93.58437347]
[80.44151306 89.55247498]
[89.09848785 89.62884521]
[95.92519379 93.20927429]
[100.82674408 79.03271484]
[105.72829437 64.85615540]
[110.62984467 50.67959976]
[115.53139496 36.50304031]
[115.53139496 21.50304222]
[110.62984467 7.32648325]
[105.72829437 -6.85007477]
[100.82674408 -21.02663231]
[95.63132477 -35.09815216]
[90.14429474 -49.05854034]
[84.65726471 -63.01893234]
[78.56681824 -69.91518402]
[79.20462036 -77.32726288]
[67.16640472 -87.59332275]
[70.01654816 -102.21269226]
[65.89701080 -105.62574768]
[63.75697708 -109.86516571]
[63.57535934 -114.02072906]
[64.96606445 -117.32730103]
[60.65848160 -131.69548035]
[56.35089874 -146.06367493]
[41.32024002 -145.05021667]
[26.44100189 -147.40731812]
[12.45951366 -153.01675415]
[0.07708478 -161.59715271]
[-10.08518791 -172.71810913]
[-17.51757050 -185.82183838]
[-21.84725571 -200.25102234]
[-22.85706902 -215.28192139]
[-20.49635887 -230.16059875]
[-14.88353825 -244.14073181]
[-6.30014229 -256.52108765]
[4.82328844 -266.68066406]
[17.92880630 -274.10986328]
[32.35904694 -278.43603516]
[47.39019394 -279.44223022]
[62.26829147 -277.07791138]
[76.24705505 -271.46170044]
[88.62532806 -262.87530518]
[98.78221130 -251.74940491]
[106.20824432 -238.64208984]
[110.53092957 -224.21080017]
[111.53346252 -209.17941284]
[109.16554260 -194.30189514]
[103.54594421 -180.32447815]
[94.95655060 -167.94828796]
[83.82820129 -157.79411316]
[70.71908569 -150.37124634]
[75.02666473 -136.00306702]
[79.33425140 -121.63488770]
[84.08806610 -107.40810394]
[95.75466919 -98.14853668]
[93.27613831 -82.52267456]
[98.61765289 -68.50596619]
[104.10468292 -54.54557419]
[109.59171295 -40.58518219]
[113.59243011 -37.87044144]
[115.89382172 -32.58509445]
[115.00329590 -25.92818451]
[119.90485382 -11.75162506]
[124.80640411 2.42493272]
[129.70794678 16.60149002]
[134.35002136 12.85181618]
[140.94657898 11.35087776]
[155.17335510 6.59706306]
[169.40013123 1.84324813]
[183.62690735 -2.91056657]
[188.17037964 -17.74756432]
[200.58731079 -27.05344582]
[216.10314941 -27.24990845]
[228.75172424 -18.26140976]
[233.66940308 -3.54420948]
[228.96525574 11.24262810]
[216.44810486 20.41326141]
[200.93106079 20.44139481]
[188.38072205 11.31621265]
[174.15394592 16.07002640]
[159.92716980 20.82384300]
[145.70039368 25.57765770]
[160.46466064 28.22647285]
[175.42144775 27.08863258]
[189.75570679 31.50778008]
[201.47546387 40.86979675]
[208.95204163 53.87367249]
[211.14645386 68.71228790]
[207.75373840 83.32357025]
[199.24537659 95.67701721]
[186.80374146 104.05591583]
[172.15783691 107.29586792]
[157.34294128 104.94662476]
[144.41784668 97.33465576]
[135.17872620 85.51777649]
[130.90951538 71.13814545]
[132.20303345 56.19562149]
[129.70794678 41.40459061]
[124.80640411 55.58115005]
[119.90485382 69.75770569]
[115.00329590 83.93426514]
[110.10174561 98.11082458]
[107.77064514 112.92858124]
[108.08270264 127.92533875]
[108.39476013 142.92208862]
[108.70681000 157.91883850]
[109.01886749 172.91560364]
[109.33092499 187.91235352]
[123.98591614 191.50311279]
[137.21173096 198.76538086]
[148.10659790 209.20397949]
[155.92768860 222.10717773]
[160.14176941 236.59524536]
[160.46148682 251.68034363]
[156.86505127 266.33395386]
[149.59768677 279.55694580]
[139.15489197 290.44778442]
[126.24866486 298.26391602]
[111.75897217 302.47238159]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 31]
[18 30]
[19 29]
[20 28]
[21 27]
[34 133]
[35 132]
[36 131]
[37 130]
[38 129]
[39 96]
[40 95]
[41 94]
[42 93]
[43 90]
[44 89]
[45 88]
[47 87]
[49 85]
[53 84]
[54 83]
[55 82]
[98 113]
[99 112]
[100 111]
[101 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
