%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUAAUCCGGGGGGGGGGAAACUCUAACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCxxxxxxxxxxACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCCCCCCCCCCCACUCAUCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 433.92584229]
[71.01555634 428.37283325]
[58.81560135 419.50650024]
[49.20452881 407.88418579]
[42.78650284 394.23648071]
[39.96496582 379.42129517]
[40.91728210 364.36993408]
[45.58358765 350.02850342]
[53.67055511 337.29855347]
[64.66983032 326.98028564]
[77.88998413 319.72229004]
[92.50000000 315.98086548]
[92.50000000 300.98086548]
[92.50000000 285.98086548]
[92.50000000 270.98086548]
[92.50000000 255.98086548]
[92.50000000 240.98086548]
[92.50000000 225.98086548]
[92.50000000 210.98086548]
[92.50000000 195.98086548]
[92.50000000 180.98086548]
[92.50000000 165.98086548]
[92.50000000 150.98086548]
[81.20407867 147.97927856]
[70.87514496 142.50930786]
[62.04460907 134.85235596]
[55.16676331 125.40235138]
[50.59545898 114.64546204]
[48.56587219 103.13511658]
[49.18242264 91.46347046]
[52.41339111 80.23101044]
[58.09255219 70.01560211]
[65.92772675 61.34280777]
[75.51582336 54.65880966]
[70.38552094 40.56341934]
[65.25521851 26.46803093]
[60.12491608 12.37264252]
[54.99461365 -1.72274709]
[49.86431122 -15.81813622]
[44.73400879 -29.91352654]
[38.18613815 -43.40890884]
[30.28965759 -56.16216660]
[22.39317513 -68.91542053]
[8.21990490 -63.84617996]
[-6.69183207 -61.83549118]
[-21.68991089 -62.96883774]
[-36.11893463 -67.19425201]
[-49.34888840 -74.32470703]
[-60.80263519 -84.04638672]
[-69.98109436 -95.93249512]
[-76.48500061 -109.46199036]
[-80.03224945 -124.04243469]
[-80.47015381 -139.03593445]
[-77.78200531 -153.78706360]
[-72.08769226 -167.65144348]
[-63.63837433 -180.02398682]
[-52.80537796 -190.36526489]
[-60.70186234 -203.11851501]
[-68.59834290 -215.87176514]
[-76.49482727 -228.62503052]
[-91.71969604 -233.68298340]
[-97.12231445 -248.78898621]
[-88.55826569 -262.35501099]
[-72.59714508 -263.97433472]
[-61.48296356 -252.40478516]
[-63.74156952 -236.52151489]
[-55.84508514 -223.76824951]
[-47.94860458 -211.01499939]
[-40.05212021 -198.26173401]
[-25.96631241 -203.34953308]
[-11.12467575 -205.39814758]
[3.82438111 -204.31559753]
[18.22724915 -200.14678955]
[31.45369530 -193.07160950]
[42.92443085 -183.39718628]
[52.13650131 -171.54450989]
[58.68531418 -158.03019714]
[62.28242874 -143.44389343]
[62.76825333 -128.42260742]
[60.11912155 -113.62284088]
[54.44843292 -99.69194031]
[46.00180435 -87.23973846]
[35.14643097 -76.81190491]
[43.04291534 -64.05864716]
[50.93939590 -51.30539322]
[52.69271851 -66.20256805]
[61.55048370 -78.30793762]
[75.21883392 -84.48662567]
[90.15813446 -83.13856506]
[102.49961853 -74.61285400]
[109.04726410 -61.11735535]
[108.10545349 -46.14695358]
[99.91808319 -33.57846069]
[86.60540009 -26.66669273]
[71.61494446 -27.20155716]
[58.82939911 -35.04382706]
[63.95970154 -20.94843864]
[69.09000397 -6.85304928]
[74.22030640 7.24234009]
[79.35060883 21.33772850]
[84.48091125 35.43311691]
[89.61121368 49.52850723]
[110.82412720 49.62007523]
[130.20266724 58.24958420]
[144.46272278 73.95457458]
[151.18765259 94.07351685]
[166.18052673 94.53543854]
[181.17341614 94.99736786]
[187.38836670 81.12499237]
[198.44239807 70.69057465]
[212.64984131 65.28530121]
[227.84416199 65.73342896]
[241.70835876 71.96662140]
[252.12821960 83.03436279]
[257.51480103 97.24890137]
[257.04669189 112.44263458]
[250.79525757 126.29860687]
[239.71382141 136.70390320]
[225.49220276 142.07177734]
[210.29910278 141.58367920]
[196.45137024 135.31404114]
[186.06065369 124.21891785]
[180.71148682 109.99024963]
[165.71861267 109.52832794]
[150.72572327 109.06639862]
[146.91482544 121.31425476]
[140.19691467 132.24139404]
[130.98823547 141.17071533]
[119.85939789 147.54895020]
[107.50000000 150.98086548]
[107.50000000 165.98086548]
[107.50000000 180.98086548]
[107.50000000 195.98086548]
[107.50000000 210.98086548]
[107.50000000 225.98086548]
[107.50000000 240.98086548]
[107.50000000 255.98086548]
[107.50000000 270.98086548]
[107.50000000 285.98086548]
[107.50000000 300.98086548]
[107.50000000 315.98086548]
[122.11001587 319.72229004]
[135.33016968 326.98028564]
[146.32945251 337.29855347]
[154.41641235 350.02850342]
[159.08271790 364.36993408]
[160.03503418 379.42129517]
[157.21350098 394.23648071]
[150.79547119 407.88418579]
[141.18440247 419.50650024]
[128.98443604 428.37283325]
[114.96250153 433.92584229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[41 85]
[42 84]
[43 83]
[57 69]
[58 68]
[59 67]
[60 66]
[106 125]
[107 124]
[108 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
