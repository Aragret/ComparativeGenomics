%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUAACAGGGGGGGGGGGUCACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAxxxxxxxxxxACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGCCCCCCCCCCACUUCUAACAG\
) } def
/len { sequence length } bind def

/coor [
[261.80224609 194.43705750]
[247.39753723 186.85044861]
[233.71447754 178.02777100]
[220.85884094 168.03715515]
[208.93005371 156.95578003]
[198.02035522 144.86921692]
[188.21411133 131.87083435]
[179.58717346 118.06106567]
[172.20628357 103.54658508]
[166.12855530 88.43955994]
[151.78849792 92.83985901]
[137.44844055 97.24015808]
[123.10837555 101.64046478]
[108.76831818 106.04076385]
[95.41021729 112.86433411]
[83.43995667 121.90385437]
[71.46969604 130.94337463]
[59.49943924 139.98289490]
[47.52918243 149.02241516]
[35.55892181 158.06193542]
[29.66853523 173.36668396]
[13.42915249 175.65020752]
[3.54645824 162.56340027]
[10.18692207 147.56886292]
[26.51940346 146.09167480]
[38.48966217 137.05215454]
[50.45992279 128.01263428]
[62.43017960 118.97312164]
[74.40043640 109.93360138]
[86.37069702 100.89408112]
[81.67689514 86.64738464]
[66.67768860 86.49339294]
[52.79880524 94.08860016]
[40.15163803 86.22104645]
[25.15242958 86.06704712]
[10.15322113 85.91305542]
[-3.85879397 94.43334961]
[-18.11170959 86.32246399]
[-17.94334793 69.92418671]
[-3.52690601 62.10765076]
[10.30721760 70.91384125]
[25.30642700 71.06784058]
[40.30563736 71.22183990]
[53.11167145 63.61560822]
[66.83168030 71.49417877]
[81.83089447 71.64817810]
[99.08070374 78.49331665]
[104.36801147 91.70069885]
[118.70807648 87.30039978]
[133.04814148 82.90010071]
[147.38819885 78.49980164]
[161.72825623 74.09950256]
[158.69908142 60.51531601]
[156.69848633 46.74228668]
[155.73773193 32.85817719]
[155.82221985 18.94138336]
[156.95141602 5.07047796]
[159.11892700 -8.67622375]
[162.31245422 -22.22111320]
[166.51393127 -35.48772430]
[171.69960022 -48.40116501]
[177.84016418 -60.88853836]
[184.90089417 -72.87935638]
[192.84191895 -84.30594635]
[201.61833191 -95.10379791]
[211.18058777 -105.21199036]
[221.47465515 -114.57346344]
[232.44238281 -123.13539124]
[244.02182007 -130.84947205]
[256.14758301 -137.67218018]
[268.75115967 -143.56501770]
[281.76141357 -148.49476624]
[295.10482788 -152.43362427]
[308.70608521 -155.35939026]
[322.48837280 -157.25556946]
[336.37390137 -158.11149597]
[350.28421021 -157.92239380]
[364.14080811 -156.68936157]
[377.86541748 -154.41940308]
[391.38061523 -151.12535095]
[404.61007690 -146.82586670]
[417.47909546 -141.54525757]
[429.91503906 -135.31336975]
[441.84774780 -128.16543579]
[453.20980835 -120.14182281]
[463.93713379 -111.28788757]
[473.96917725 -101.65363312]
[483.24929810 -91.29349518]
[491.72515869 -80.26599121]
[499.34890747 -68.63339996]
[506.07757568 -56.46143341]
[511.87316895 -43.81882477]
[516.70300293 -30.77697182]
[520.53985596 -17.40952873]
[523.36212158 -3.79197693]
[525.15386963 9.99878979]
[540.13409424 9.22912979]
[555.11431885 8.45946980]
[570.09460449 7.68980980]
[585.05584717 6.61274004]
[599.99188232 5.22871447]
[614.92791748 3.84468913]
[622.90679932 -9.33269882]
[636.95086670 -15.21637154]
[651.59332275 -11.74328136]
[661.26715088 -0.44927612]
[676.20318604 -1.83330154]
[691.13916016 -3.21732688]
[706.07519531 -4.60135221]
[721.01123047 -5.98537779]
[734.07623291 -15.89684868]
[749.08532715 -9.28940105]
[750.59844971 7.03979111]
[737.05902100 16.29265404]
[722.39520264 8.95063496]
[707.45922852 10.33466053]
[692.52319336 11.71868610]
[677.58721924 13.10271072]
[662.65118408 14.48673630]
[655.21728516 27.36600494]
[641.46234131 33.47050476]
[626.57629395 30.26760292]
[616.31188965 18.78070259]
[601.37591553 20.16472816]
[586.43988037 21.54875183]
[582.72039795 24.63331604]
[577.00720215 25.37314224]
[570.86425781 22.67005157]
[555.88403320 23.43971062]
[540.90374756 24.20937157]
[525.92352295 24.97903061]
[525.38861084 41.24106598]
[523.42742920 57.39368820]
[520.05505371 73.31204987]
[515.29754639 88.87310028]
[509.19149780 103.95655823]
[501.78411865 118.44580841]
[493.13253784 132.22883606]
[483.30361938 145.19906616]
[472.37322998 157.25622559]
[460.42581177 168.30706787]
[447.55361938 178.26612854]
[433.85614014 187.05638123]
[419.43920898 194.60981750]
[404.41418457 200.86801147]
[388.89715576 205.78248596]
[373.00805664 209.31523132]
[356.86968994 211.43885803]
[340.60671997 212.13687134]
[324.34490967 211.40380859]
[308.20989990 209.24525452]
[292.32641602 205.67784119]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 52]
[11 51]
[12 50]
[13 49]
[14 48]
[15 30]
[16 29]
[17 28]
[18 27]
[19 26]
[20 25]
[31 46]
[32 45]
[34 43]
[35 42]
[36 41]
[96 131]
[97 130]
[98 129]
[99 128]
[100 125]
[101 124]
[102 123]
[106 119]
[107 118]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
