%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUUCACUAGGGGGGGGGGUCAUAUUCAUCGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCxxxxxxxxxxUACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCCCCCCCCCCCAUUUCUCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 376.64453125]
[71.19830322 370.62850952]
[59.48964310 361.09909058]
[50.78712082 348.76342773]
[45.73651886 334.53689575]
[44.71262741 319.47521973]
[47.79142761 304.69604492]
[54.74444962 291.29614258]
[65.05573273 280.26980591]
[77.96011353 272.43530273]
[92.50000000 268.37396240]
[92.50000000 253.37397766]
[92.50000000 238.37397766]
[92.50000000 223.37397766]
[92.50000000 208.37397766]
[92.50000000 193.37397766]
[92.50000000 178.37397766]
[92.50000000 163.37397766]
[92.50000000 148.37397766]
[92.50000000 133.37397766]
[77.33497620 125.61969757]
[67.78949738 111.51329041]
[66.23027039 94.55229187]
[73.04388428 78.94198608]
[63.53552246 67.34064484]
[54.02716446 55.73930740]
[39.29516220 49.97053909]
[37.21166992 35.22237778]
[27.70331001 23.62103653]
[18.19495201 12.01969433]
[8.68659306 0.41835317]
[-0.82176578 -11.18298817]
[-10.33012390 -22.78432846]
[-25.06212807 -28.55309486]
[-27.14562035 -43.30125809]
[-36.65398026 -54.90259933]
[-46.16233826 -66.50394440]
[-58.99444580 -58.68836975]
[-72.78942108 -52.73481369]
[-87.27873993 -48.75915909]
[-102.18035889 -46.83879852]
[-117.20422363 -47.01110840]
[-132.05787659 -49.27273178]
[-146.45220947 -53.57965088]
[-160.10700989 -59.84803009]
[-172.75648499 -67.95584869]
[-184.15441895 -77.74529266]
[-194.07894897 -89.02580261]
[-202.33688354 -101.57779694]
[-208.76748657 -115.15695953]
[-213.24557495 -129.49894714]
[-215.68399048 -144.32461548]
[-216.03526306 -159.34535217]
[-214.29255676 -174.26879883]
[-210.48979187 -188.80445862]
[-204.70098877 -202.66937256]
[-197.03883362 -215.59367371]
[-187.65248108 -227.32577515]
[-176.72462463 -237.63732910]
[-164.46797180 -246.32759094]
[-151.12112427 -253.22743225]
[-136.94386292 -258.20251465]
[-122.21216583 -261.15603638]
[-107.21278381 -262.03045654]
[-92.23768616 -260.80877686]
[-77.57836151 -257.51480103]
[-63.52016068 -252.21260071]
[-50.33673477 -245.00541687]
[-38.28470230 -236.03353882]
[-27.59865570 -225.47160339]
[-18.48660469 -213.52519226]
[-11.12591648 -200.42686462]
[-5.65987062 -186.43156433]
[-2.19486499 -171.81172180]
[-0.79834634 -156.85191345]
[-1.49749863 -141.84333801]
[-4.27871275 -127.07813263]
[-9.08785152 -112.84372711]
[-15.83130360 -99.41719055]
[-24.37780571 -87.05986786]
[-34.56099701 -76.01229858]
[-25.05263901 -64.41095734]
[-15.54428005 -52.80961609]
[-1.49237800 -47.87065506]
[1.27121699 -32.29268646]
[10.77957535 -20.69134712]
[20.28793335 -9.09000492]
[29.79629326 2.51133585]
[39.30464935 14.11267757]
[48.81301117 25.71401787]
[62.86491013 30.65297890]
[65.62850952 46.23094559]
[75.13686371 57.83228683]
[84.64522552 69.43363190]
[103.46342468 65.96947479]
[121.19789886 73.15374756]
[132.29936218 88.73843384]
[147.20127869 87.02574158]
[162.08454895 85.15812683]
[176.94760132 83.13579559]
[191.81063843 81.11345673]
[206.62840271 78.78235626]
[221.39445496 76.14349365]
[236.16050720 73.50462341]
[241.99282837 59.22219849]
[254.63404846 50.37895584]
[270.05041504 49.79674530]
[283.32263184 57.66134262]
[290.21557617 71.46318817]
[288.52972412 86.79816437]
[278.80303955 98.77293396]
[264.13925171 103.56639099]
[249.21754456 99.64896393]
[238.79937744 88.27068329]
[224.03332520 90.90954590]
[209.26727295 93.54840851]
[205.81977844 96.93814850]
[200.18542480 98.15688324]
[193.83297729 95.97650909]
[178.96994019 97.99884033]
[164.10688782 100.02117920]
[157.86277771 104.06552124]
[148.91395569 101.92764282]
[134.01205444 103.64033508]
[132.83404541 109.59152222]
[130.62324524 115.24102020]
[127.44920349 120.41110229]
[123.41175079 124.93916321]
[118.63788605 128.68276978]
[113.27776337 131.52416992]
[107.50000000 133.37397766]
[107.50000000 148.37397766]
[107.50000000 163.37397766]
[107.50000000 178.37397766]
[107.50000000 193.37397766]
[107.50000000 208.37397766]
[107.50000000 223.37397766]
[107.50000000 238.37397766]
[107.50000000 253.37397766]
[107.50000000 268.37396240]
[122.03988647 272.43530273]
[134.94427490 280.26980591]
[145.25555420 291.29614258]
[152.20857239 304.69604492]
[155.28736877 319.47521973]
[154.26348877 334.53689575]
[149.21287537 348.76342773]
[140.51036072 361.09909058]
[128.80169678 370.62850952]
[114.95575714 376.64453125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 94]
[25 93]
[26 92]
[28 90]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[35 83]
[36 82]
[37 81]
[97 124]
[98 123]
[99 121]
[100 120]
[101 119]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
