%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACAAACUGGGGGGGGGGUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUxxxxxxxxxxCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCCCCCCCCCCCUAACAAACU\
) } def
/len { sequence length } bind def

/coor [
[82.08630371 366.50613403]
[69.52808380 358.15496826]
[59.44186020 346.94253540]
[52.46166611 333.57360840]
[49.02627945 318.88864136]
[49.35165787 303.81066895]
[53.41734314 289.28753662]
[60.96776199 276.23220825]
[71.52828979 265.46530151]
[84.43508911 257.66366577]
[98.87681580 253.31771851]
[98.25283813 238.33070374]
[97.62886047 223.34368896]
[97.00488281 208.35667419]
[96.38090515 193.36965942]
[95.75692749 178.38264465]
[95.13294983 163.39562988]
[94.50897217 148.40861511]
[93.88499451 133.42160034]
[93.26101685 118.43457794]
[82.61754608 112.85708618]
[76.41996765 101.25975037]
[77.90774536 87.05274200]
[62.90855408 86.89670563]
[47.90936661 86.74066925]
[32.91017532 86.58463287]
[17.91098785 86.42859650]
[2.91180038 86.27256012]
[-12.08738804 86.11652374]
[-27.08657646 85.96048737]
[-42.08576584 85.80445099]
[-48.38591385 99.66908264]
[-59.78494644 109.76769257]
[-74.30791473 114.35063171]
[-89.43862152 112.62389374]
[-102.55558014 104.88662720]
[-111.38619995 92.47937012]
[-114.40052032 77.55175018]
[-111.07630157 62.69007492]
[-101.98947144 50.46921539]
[-88.71438599 43.00650787]
[-73.55103302 41.59490967]
[-59.12655640 46.47899628]
[-47.94007874 56.81256485]
[-41.92972946 70.80525970]
[-26.93054008 70.96129608]
[-11.93135166 71.11733246]
[3.06783700 71.27336884]
[18.06702614 71.42940521]
[33.06621552 71.58544159]
[48.06540298 71.74147797]
[63.06459045 71.89751434]
[78.06378174 72.05355072]
[63.36613464 69.05702209]
[51.28110504 60.17152023]
[44.03802490 47.03615570]
[42.97301483 32.07401276]
[48.28253937 18.04515266]
[58.98715591 7.53747845]
[73.11218262 2.48934054]
[88.05197144 3.83196831]
[101.05058289 11.31768703]
[109.71017456 23.56560707]
[112.43329620 38.31635666]
[108.71762848 52.84886551]
[99.25098419 64.48041534]
[110.75278473 54.85189056]
[122.25459290 45.22336578]
[133.75639343 35.59484100]
[145.25819397 25.96631432]
[138.16197205 12.17717457]
[134.29870605 -2.83470273]
[133.85742188 -18.32247353]
[136.85697937 -33.51632309]
[143.14527893 -47.66172791]
[152.40696716 -60.05692673]
[164.17929077 -70.08773041]
[177.87519836 -77.25797272]
[192.81254578 -81.21401215]
[208.24821472 -81.76222992]
[223.41491699 -78.87844849]
[237.55949402 -72.70902252]
[249.98019409 -63.56338120]
[261.27920532 -73.42910767]
[262.94177246 -86.26225281]
[272.61026001 -94.24594879]
[284.72427368 -93.49927521]
[296.22610474 -103.12779999]
[307.72790527 -112.75632477]
[319.22970581 -122.38484955]
[330.73150635 -132.01338196]
[328.00292969 -147.12796021]
[333.21234131 -161.57641602]
[344.95837402 -171.47218323]
[360.08142090 -174.15335083]
[374.51348877 -168.89869690]
[384.37237549 -157.12170410]
[387.00613403 -141.99031067]
[381.70626831 -127.57479858]
[369.89843750 -117.75286102]
[354.75885010 -115.16654968]
[340.36001587 -120.51157379]
[328.85821533 -110.88304901]
[317.35641479 -101.25452423]
[305.85461426 -91.62599945]
[294.35281372 -81.99746704]
[289.26577759 -65.23077393]
[271.14492798 -62.13010025]
[259.84591675 -52.26437759]
[266.88790894 -39.55353928]
[271.12155151 -25.64640999]
[272.35763550 -11.15569496]
[270.53912354 3.27963448]
[265.74371338 17.02251244]
[258.18051147 29.46590233]
[248.18099976 40.05960464]
[236.18438721 48.33457947]
[222.71839905 53.92373276]
[208.37605286 56.57817078]
[193.78953552 56.17831421]
[179.60234070 52.73925781]
[166.44084167 46.41022873]
[154.88671875 37.46811676]
[143.38491821 47.09664154]
[131.88311768 56.72517014]
[120.38130951 66.35369873]
[108.87950897 75.98222351]
[122.59928131 99.10040283]
[108.24803162 117.81060028]
[108.87200928 132.79762268]
[109.49598694 147.78463745]
[110.11996460 162.77165222]
[110.74394226 177.75866699]
[111.36791992 192.74568176]
[111.99189758 207.73269653]
[112.61587524 222.71971130]
[113.23985291 237.70672607]
[113.86383057 252.69375610]
[128.61683655 255.82418823]
[142.12747192 262.52593994]
[153.54644775 272.37774658]
[162.15596008 284.76025391]
[167.41481018 298.89517212]
[168.99241638 313.89389038]
[166.78961182 328.81362915]
[160.94487000 342.71649170]
[151.82557678 354.72854614]
[140.00502014 364.09472656]
[126.22620392 370.22619629]
[111.35530090 372.73760986]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[66 127]
[67 126]
[68 125]
[69 124]
[70 123]
[83 109]
[84 108]
[87 106]
[88 105]
[89 104]
[90 103]
[91 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
