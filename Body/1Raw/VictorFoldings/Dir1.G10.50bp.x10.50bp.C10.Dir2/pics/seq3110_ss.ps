%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGUAAAUGGGGGGGGGGGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUxxxxxxxxxxGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCCCCCCCCCCCUUAAAU\
) } def
/len { sequence length } bind def

/coor [
[87.07167053 641.55676270]
[72.58197784 637.34826660]
[59.67575073 629.53216553]
[49.23294830 618.64135742]
[41.96558380 605.41833496]
[38.36915970 590.76470947]
[38.68888092 575.67962646]
[42.90295029 561.19158936]
[50.72404861 548.28833008]
[61.61891556 537.84973145]
[74.84472656 530.58752441]
[89.49971771 526.99670410]
[89.81177521 511.99996948]
[90.12382507 497.00323486]
[90.43588257 482.00646973]
[90.74794006 467.00970459]
[91.05999756 452.01296997]
[91.37205505 437.01620483]
[91.68411255 422.01943970]
[91.99616241 407.02270508]
[92.30821991 392.02593994]
[92.62027740 377.02920532]
[77.63465881 373.37576294]
[63.82459641 366.49005127]
[51.87780762 356.71151733]
[42.38999557 344.52377319]
[35.83512115 330.53060913]
[32.54174805 315.42617798]
[32.67655945 299.96051025]
[36.23593903 284.90228271]
[43.04598236 271.00054932]
[52.77100754 258.94757080]
[64.93008423 249.34429932]
[78.92082977 242.67044067]
[94.04924774 239.26046753]
[94.04924774 224.26046753]
[94.04924774 209.26046753]
[94.04924774 194.26046753]
[81.66847992 182.92138672]
[81.28041077 165.80024719]
[93.61025238 153.43447876]
[93.29819489 138.43772888]
[92.98614502 123.44097137]
[92.67408752 108.44422150]
[92.20604706 93.45152283]
[91.58206940 78.46450806]
[90.95809174 63.47749329]
[90.33411407 48.49047470]
[88.15727234 33.64926910]
[84.45111084 19.11433411]
[77.96295166 5.59014463]
[68.94541931 -6.39668798]
[59.92788696 -18.38352013]
[50.91035843 -30.37035370]
[35.81476212 -27.84418869]
[21.27793121 -32.63367081]
[10.64032459 -43.63821411]
[6.34638834 -58.32905197]
[9.38283539 -73.33033752]
[19.05191231 -85.19488525]
[33.13173676 -91.19631195]
[48.38687134 -89.95552826]
[61.31179047 -81.75765991]
[68.93644714 -68.48651886]
[69.50875092 -53.19171906]
[62.89719009 -39.38788223]
[71.91471863 -27.40105057]
[80.93225098 -15.41421795]
[89.94978333 -3.42738509]
[88.52226257 -18.35930443]
[91.47768402 -33.06526947]
[98.56304932 -46.28637695]
[109.17180634 -56.89082718]
[122.39579010 -63.97081757]
[137.10295105 -66.92026520]
[152.03428650 -65.48668671]
[165.91159058 -59.79280090]
[177.54690552 -50.32603073]
[185.94415283 -37.89678955]
[190.38452148 -23.56908035]
[190.48785400 -8.56943607]
[186.24534607 5.81809425]
[178.02014160 18.36186028]
[166.51638794 27.98805046]
[152.71884155 33.87260818]
[137.80868530 35.51178741]
[123.06227112 32.76526260]
[109.74198914 25.86815453]
[98.98605347 15.40817356]
[102.69220734 29.94310951]
[108.86116791 16.27036476]
[120.95915985 7.40252495]
[135.85466003 5.63500404]
[149.69201660 11.42531967]
[158.88945007 23.27466583]
[161.06626892 38.11587524]
[155.65898132 52.10734558]
[144.06726074 61.62742996]
[129.29158020 64.21187592]
[115.15658569 59.19171906]
[105.32112885 47.86650085]
[105.94510651 62.85351562]
[106.56908417 77.84053040]
[107.19306183 92.82754517]
[110.66732025 100.16332245]
[107.67083740 108.13216400]
[107.98289490 123.12892151]
[108.29495239 138.12567139]
[108.60700989 153.12242126]
[119.36207581 161.29470825]
[123.36819458 173.99034119]
[119.37022400 186.48396301]
[109.04924774 194.26046753]
[109.04924774 209.26046753]
[109.04924774 224.26046753]
[109.04924774 239.26046753]
[123.32254791 242.38006592]
[136.62394714 248.40950012]
[148.36776733 257.08053589]
[158.03747559 268.00860596]
[165.20846558 280.71002197]
[169.56661987 294.62326050]
[170.92211914 309.13381958]
[169.21772766 323.60144043]
[164.53112793 337.38821411]
[157.07144165 349.88687134]
[147.16992188 360.54733276]
[135.26518250 368.90112305]
[121.88380432 374.58184814]
[107.61703491 377.34124756]
[107.30497742 392.33801270]
[106.99291992 407.33474731]
[106.68086243 422.33151245]
[106.36880493 437.32824707]
[106.05674744 452.32501221]
[105.74469757 467.32177734]
[105.43264008 482.31851196]
[105.12058258 497.31527710]
[104.80852509 512.31201172]
[104.49646759 527.30877686]
[118.98940277 531.50604248]
[131.90167236 539.31219482]
[142.35287476 550.19500732]
[149.63044739 563.41235352]
[153.23818970 578.06317139]
[152.93011475 593.14855957]
[148.72723389 607.63983154]
[140.91610718 620.54907227]
[130.02929688 630.99609375]
[116.80910492 638.26855469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[35 116]
[36 115]
[37 114]
[38 113]
[41 109]
[42 108]
[43 107]
[44 106]
[45 104]
[46 103]
[47 102]
[48 101]
[49 90]
[50 89]
[51 69]
[52 68]
[53 67]
[54 66]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
