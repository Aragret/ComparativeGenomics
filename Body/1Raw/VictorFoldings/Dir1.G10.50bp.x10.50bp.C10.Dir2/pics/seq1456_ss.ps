%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAAACUGGGGGGGGGGGCUCGCCAGAACACUACGAGCCACAGCUUAAAACUCAAAGGACCUGGCGGxxxxxxxxxxAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCCCCCCCCCCCAAUAAAACU\
) } def
/len { sequence length } bind def

/coor [
[74.65434265 364.68145752]
[61.43414688 357.40899658]
[50.54734421 346.96197510]
[42.73621368 334.05273438]
[38.53333282 319.56143188]
[38.22525787 304.47607422]
[41.83300018 289.82525635]
[49.11057281 276.60787964]
[59.56178284 265.72509766]
[72.47404480 257.91894531]
[86.96697998 253.72166443]
[86.65492249 238.72491455]
[86.34286499 223.72816467]
[86.03080750 208.73141479]
[85.71875763 193.73464966]
[85.40670013 178.73789978]
[85.09464264 163.74114990]
[84.78258514 148.74440002]
[84.47052765 133.74763489]
[72.39054108 124.85529327]
[57.97832489 129.01318359]
[43.56610870 133.17106628]
[29.15389252 137.32894897]
[14.74167728 141.48684692]
[0.32946092 145.64472961]
[-6.60718012 156.56886292]
[-18.74567604 159.71145630]
[-29.40580940 153.90896606]
[-43.90140533 157.76612854]
[-55.12917709 169.71891785]
[-71.03047943 165.70887756]
[-75.24742126 149.86117554]
[-63.44197083 138.47859192]
[-47.75856400 143.27053833]
[-33.26296997 139.41337585]
[-21.55910301 126.37422180]
[-3.82842660 131.23251343]
[10.58378983 127.07462311]
[24.99600601 122.91674042]
[39.40822220 118.75885010]
[53.82043839 114.60095978]
[68.23265076 110.44307709]
[70.61058807 89.01841736]
[84.98178864 74.83193970]
[103.72592926 73.01342773]
[109.78894043 59.29337311]
[115.85195923 45.57331848]
[121.91497040 31.85326576]
[108.73469543 24.67413712]
[96.19229126 16.43110085]
[84.37343597 7.18046951]
[73.35886383 -3.01456738]
[63.22381973 -14.08436489]
[54.03753662 -25.95330429]
[45.86276627 -38.54030991]
[38.75535202 -51.75939178]
[32.76384354 -65.52025604]
[27.92917252 -79.72889709]
[24.28436470 -94.28825378]
[21.85431671 -109.09887695]
[20.65562820 -124.05957794]
[20.69648933 -139.06817627]
[21.97661972 -154.02212524]
[24.48727417 -168.81929016]
[28.21130371 -183.35859680]
[33.12326813 -197.54069519]
[39.18961334 -211.26873779]
[46.36890030 -224.44892883]
[54.61208344 -236.99122620]
[63.86285782 -248.80996704]
[74.05802155 -259.82443237]
[85.12794495 -269.95935059]
[96.99699402 -279.14547729]
[109.58409119 -287.32009888]
[122.80326080 -294.42736816]
[136.56419373 -300.41870117]
[150.77290344 -305.25320435]
[165.33230591 -308.89782715]
[180.14294434 -311.32769775]
[195.10366821 -312.52621460]
[210.11225891 -312.48516846]
[225.06619263 -311.20486450]
[239.86334229 -308.69403076]
[254.40258789 -304.96984863]
[268.58462524 -300.05770874]
[282.31259155 -293.99118042]
[295.49270630 -286.81173706]
[308.03491211 -278.56842041]
[319.85354614 -269.31750488]
[330.86785889 -259.12219238]
[341.00265503 -248.05216980]
[350.18865967 -236.18299866]
[358.36312866 -223.59580994]
[365.47021484 -210.37655640]
[371.46139526 -196.61553955]
[376.29574585 -182.40678406]
[379.94018555 -167.84733582]
[382.36990356 -153.03666687]
[383.56823730 -138.07592773]
[383.52700806 -123.06734467]
[382.24652100 -108.11341858]
[379.73550415 -93.31630707]
[376.01113892 -78.77709961]
[371.09884644 -64.59511566]
[365.03216553 -50.86722183]
[357.85256958 -37.68720245]
[349.60906982 -25.14509392]
[340.35803223 -13.32656860]
[330.16259766 -2.31236219]
[319.09243774 7.82228565]
[307.22317505 17.00814438]
[294.63586426 25.18246460]
[281.41653442 32.28940582]
[267.65545654 38.28042221]
[253.44664001 43.11458588]
[238.88714600 46.75887299]
[224.07644653 49.18839264]
[209.11569214 50.38654709]
[194.10710144 50.34514999]
[179.15319824 49.06448364]
[164.35610962 46.55329895]
[149.81695557 42.82875061]
[135.63502502 37.91627884]
[129.57200623 51.63633347]
[123.50899506 65.35638428]
[117.44598389 79.07643890]
[126.41542816 89.34867096]
[129.54437256 103.23973083]
[125.52300262 117.52584076]
[114.77144623 128.61238098]
[99.46728516 133.43557739]
[99.77934265 148.43234253]
[100.09139252 163.42909241]
[100.40345001 178.42584229]
[100.71550751 193.42259216]
[101.02756500 208.41935730]
[101.33962250 223.41610718]
[101.65167999 238.41285706]
[101.96372986 253.40960693]
[116.61872864 257.00039673]
[129.84452820 264.26263428]
[140.73939514 274.70123291]
[148.56050110 287.60443115]
[152.77456665 302.09249878]
[153.09428406 317.17761230]
[149.49786377 331.83120728]
[142.23049927 345.05422974]
[131.78770447 355.94506836]
[118.88146973 363.76116943]
[104.39177704 367.96963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[25 37]
[28 35]
[29 34]
[45 126]
[46 125]
[47 124]
[48 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
