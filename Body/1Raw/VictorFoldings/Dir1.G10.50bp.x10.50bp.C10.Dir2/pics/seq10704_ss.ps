%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUCAUGUGCGGGGGGGGGGCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACxxxxxxxxxxACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCAUACCCCCCCCCCCUAUUUAUGUGC\
) } def
/len { sequence length } bind def

/coor [
[87.09182739 404.94891357]
[74.75871277 396.29779053]
[64.66026306 385.11883545]
[57.30301285 371.97277832]
[53.05599213 357.51904297]
[52.13223648 342.48260498]
[54.57807159 327.61770630]
[60.27082443 313.66992188]
[68.92494965 301.33892822]
[80.10635376 291.24316406]
[93.25418091 283.88909912]
[107.70894623 279.64559937]
[106.78553772 264.67404175]
[105.86212158 249.70248413]
[104.93870544 234.73094177]
[104.01529694 219.75938416]
[103.09188080 204.78784180]
[102.16846466 189.81628418]
[101.24505615 174.84474182]
[99.86103058 159.90872192]
[98.01770020 145.02241516]
[96.17437744 130.13610840]
[94.33105469 115.24980164]
[83.87528992 102.16497803]
[90.50932312 86.78559875]
[88.36074066 71.94027710]
[85.04698944 67.74810028]
[83.83724213 63.16093445]
[84.52201080 59.06206894]
[86.56623077 56.11785889]
[85.33561707 41.16842651]
[84.10501099 26.21899033]
[82.87439728 11.26955605]
[81.64378357 -3.67987871]
[66.63658905 -3.59692669]
[51.66707993 -4.66301441]
[36.82310486 -6.87188578]
[22.19177055 -10.21057796]
[7.85894632 -14.65949726]
[-6.09125900 -20.19253731]
[-19.57697868 -26.77722549]
[-32.51906967 -34.37491989]
[-44.84158707 -42.94103622]
[-56.47221375 -52.42530060]
[-67.34269714 -62.77206039]
[-77.38923645 -73.92058563]
[-86.55288696 -85.80546570]
[-94.77986145 -98.35694885]
[-102.02188110 -111.50136566]
[-108.23645782 -125.16159821]
[-113.38710785 -139.25746155]
[-117.44361115 -153.70625305]
[-120.38215637 -168.42317200]
[-122.18550873 -183.32185364]
[-122.84307861 -198.31486511]
[-122.35100555 -213.31422424]
[-120.71218109 -228.23188782]
[-117.93622589 -242.98034668]
[-114.03942108 -257.47302246]
[-109.04463959 -271.62487793]
[-102.98119354 -285.35284424]
[-95.88467407 -298.57638550]
[-87.79671478 -311.21789551]
[-78.76477814 -323.20318604]
[-68.84188080 -334.46191406]
[-58.08624649 -344.92800903]
[-46.56099319 -354.54003906]
[-34.33375931 -363.24160767]
[-21.47629929 -370.98165894]
[-8.06406784 -377.71478271]
[5.82422686 -383.40142822]
[20.10708237 -388.00827026]
[34.70067978 -391.50820923]
[49.51937485 -393.88076782]
[64.47620392 -395.11196899]
[79.48340607 -395.19464111]
[94.45288849 -394.12826538]
[109.29682922 -391.91912842]
[123.92809296 -388.58016968]
[138.26083374 -384.13095093]
[152.21093750 -378.59765625]
[165.69653320 -372.01272583]
[178.63847351 -364.41476440]
[190.96083069 -355.84841919]
[202.59127808 -346.36395264]
[213.46156311 -336.01696777]
[223.50790405 -324.86825562]
[232.67132568 -312.98321533]
[240.89805603 -300.43157959]
[248.13983154 -287.28701782]
[254.35414124 -273.62667847]
[259.50451660 -259.53070068]
[263.56076050 -245.08183289]
[266.49902344 -230.36485291]
[268.30209351 -215.46614075]
[268.95938110 -200.47311401]
[268.46701050 -185.47377014]
[266.82791138 -170.55613708]
[264.05166626 -155.80773926]
[260.15460205 -141.31512451]
[255.15954590 -127.16337585]
[249.09584045 -113.43550873]
[241.99906921 -100.21209717]
[233.91087341 -87.57074738]
[224.87870789 -75.58563995]
[214.95559692 -64.32710266]
[204.19976807 -53.86121750]
[192.67433167 -44.24939728]
[180.44692993 -35.54804993]
[167.58932495 -27.80823517]
[154.17697144 -21.07537842]
[140.28855896 -15.38898945]
[126.00562286 -10.78243923]
[111.41195679 -7.28276014]
[96.59321594 -4.91049099]
[97.82382965 10.03894329]
[99.05444336 24.98837852]
[100.28505707 39.93781281]
[101.51567078 54.88724518]
[103.20606232 69.79169464]
[105.35464478 84.63701630]
[114.27162170 92.18883514]
[115.82656860 103.77005005]
[109.21736145 113.40647888]
[111.06068420 128.29278564]
[112.90401459 143.17909241]
[114.74733734 158.06539917]
[117.97431946 162.32472229]
[119.08963013 166.93576050]
[118.32084656 171.01971436]
[116.21660614 173.92132568]
[117.14001465 188.89286804]
[118.06343079 203.86442566]
[118.98684692 218.83596802]
[119.91025543 233.80752563]
[120.83367157 248.77906799]
[121.75708771 263.75061035]
[122.68049622 278.72216797]
[137.54718018 281.15719604]
[151.49908447 286.83981323]
[163.83639526 295.48498535]
[173.94026184 306.65902710]
[181.30387878 319.80151367]
[185.55790710 334.25320435]
[186.48895264 349.28918457]
[184.05030823 364.15527344]
[178.36431885 378.10580444]
[169.71617126 390.44100952]
[158.53967285 400.54217529]
[145.39540100 407.90261841]
[130.94268799 412.15313721]
[115.90647888 413.08053589]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 127]
[21 126]
[22 125]
[23 124]
[25 121]
[26 120]
[30 119]
[31 118]
[32 117]
[33 116]
[34 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
