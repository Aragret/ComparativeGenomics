%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACGUUGUAGGGGGGGGGGGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAACUCUUCACxxxxxxxxxxUACAUCAUUAUUCUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCCCCCCCCCCCAUCGUUGUA\
) } def
/len { sequence length } bind def

/coor [
[58.66343689 396.42440796]
[44.64149094 390.87139893]
[32.44153595 382.00506592]
[22.83046341 370.38275146]
[16.41243744 356.73504639]
[13.59090137 341.91986084]
[14.54321766 326.86849976]
[19.20952225 312.52706909]
[27.29648972 299.79711914]
[38.29576492 289.47885132]
[51.51592255 282.22085571]
[66.12593842 278.47943115]
[66.12593842 263.47943115]
[66.12593842 248.47943115]
[66.12593842 233.47943115]
[66.12593842 218.47943115]
[66.12593842 203.47943115]
[66.12593842 188.47943115]
[66.12593842 173.47943115]
[66.12593842 158.47943115]
[66.12593842 143.47943115]
[53.62189865 135.19395447]
[39.80831528 141.04074097]
[25.99473381 146.88752747]
[12.18115139 152.73432922]
[-1.63243163 158.58111572]
[-11.07794952 171.98686218]
[-27.38383484 170.24040222]
[-33.77599335 155.13833618]
[-23.67871666 142.21638489]
[-7.47921991 144.76753235]
[6.33436298 138.92074585]
[20.14794540 133.07395935]
[33.96152878 127.22716522]
[47.77511215 121.38037872]
[48.31364441 113.89973450]
[33.35236740 112.82266235]
[18.39108467 111.74559784]
[3.42980409 110.66852570]
[-11.53147697 109.59145355]
[-26.49273872 108.51413727]
[-25.41517258 93.55289459]
[-10.45440674 94.63017273]
[4.50687408 95.70724487]
[19.46815491 96.78431702]
[34.42943573 97.86138153]
[49.39071655 98.93845367]
[49.92925262 91.45781708]
[37.09559631 83.69268036]
[20.69772339 83.89712524]
[12.55549335 69.66209412]
[21.04493332 55.63136673]
[37.43283463 56.23854828]
[44.86073303 70.85902405]
[57.69438553 78.62416077]
[85.92933655 62.59690094]
[112.16422272 69.83525085]
[120.83083344 57.59229660]
[129.49743652 45.34934235]
[115.74835205 51.34622192]
[100.99856567 54.07455826]
[86.01407623 53.39266205]
[71.57305145 49.33594513]
[58.42546082 42.11508560]
[47.25408554 32.10507584]
[38.63907623 19.82575607]
[33.02783585 5.91482735]
[30.71176338 -8.90528774]
[31.81114388 -23.86494637]
[36.26887894 -38.18725586]
[43.85347366 -51.12842941]
[54.17103577 -62.01639938]
[66.68576050 -70.28572845]
[80.74771118 -75.50696564]
[95.62664032 -77.40897369]
[110.54983521 -75.89296722]
[124.74230194 -71.03767395]
[137.46699524 -63.09524155]
[148.06309509 -52.47814560]
[155.98031616 -39.73775482]
[160.80749512 -25.53569984]
[162.29394531 -10.60953426]
[160.36248779 4.26559496]
[155.11341858 18.31718636]
[146.82208252 30.81224060]
[160.38398743 24.40326500]
[173.94587708 17.99428940]
[187.50776672 11.58531284]
[201.06967163 5.17633772]
[214.63156128 -1.23263800]
[216.40322876 -13.06266499]
[223.61520386 -22.45485115]
[234.36624146 -27.12463951]
[245.91351318 -26.00775337]
[255.37210083 -19.50035095]
[269.18566895 -25.34713936]
[282.99926758 -31.19392776]
[282.50253296 -46.36355972]
[287.52294922 -60.68696213]
[297.38153076 -72.22701263]
[310.74499512 -79.42301178]
[325.80603027 -81.30176544]
[340.52777100 -77.60919189]
[352.91918945 -68.84466553]
[361.30447388 -56.19352722]
[364.54959106 -41.36673737]
[362.21566772 -26.36949921]
[354.61831665 -13.23006439]
[342.78503418 -3.72543430]
[328.31619263 0.85896891]
[313.16854858 -0.09685834]
[299.39071655 -6.46364832]
[288.84603882 -17.38034439]
[275.03247070 -11.53355694]
[261.21887207 -5.68676853]
[255.43142700 11.63322830]
[238.55949402 19.41263962]
[221.04054260 12.32925797]
[207.47865295 18.73823357]
[193.91674805 25.14720917]
[180.35485840 31.55618477]
[166.79295349 37.96516037]
[153.23106384 44.37413788]
[141.74038696 54.01594925]
[133.07379150 66.25890350]
[124.40718079 78.50186157]
[133.71998596 90.60585785]
[136.88619995 106.66286469]
[132.31135559 123.51492310]
[120.02155304 137.42182922]
[101.83506012 144.88275146]
[81.12593842 143.47943115]
[81.12593842 158.47943115]
[81.12593842 173.47943115]
[81.12593842 188.47943115]
[81.12593842 203.47943115]
[81.12593842 218.47943115]
[81.12593842 233.47943115]
[81.12593842 248.47943115]
[81.12593842 263.47943115]
[81.12593842 278.47943115]
[95.73594666 282.22085571]
[108.95610809 289.47885132]
[119.95538330 299.79711914]
[128.04234314 312.52706909]
[132.70864868 326.86849976]
[133.66096497 341.91986084]
[130.83943176 356.73504639]
[124.42140961 370.38275146]
[114.81033325 382.00506592]
[102.61037445 390.87139893]
[88.58843231 396.42440796]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 35]
[23 34]
[24 33]
[25 32]
[26 31]
[48 55]
[49 54]
[57 126]
[58 125]
[59 124]
[85 123]
[86 122]
[87 121]
[88 120]
[89 119]
[90 118]
[95 115]
[96 114]
[97 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
