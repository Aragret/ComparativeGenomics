%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACCUCCUCGGGGGGGGGGAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAUAAACAxxxxxxxxxxCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAAUUAAACUCCCCCCCCCCUUACUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 468.58981323]
[71.19830322 462.57379150]
[59.48964310 453.04437256]
[50.78712082 440.70870972]
[45.73651886 426.48217773]
[44.71262741 411.42050171]
[47.79142761 396.64132690]
[54.74444962 383.24139404]
[65.05573273 372.21508789]
[77.96011353 364.38055420]
[92.50000000 360.31924438]
[92.50000000 345.31924438]
[92.50000000 330.31924438]
[92.50000000 315.31924438]
[92.50000000 300.31924438]
[92.50000000 285.31924438]
[92.50000000 270.31924438]
[92.50000000 255.31925964]
[92.50000000 240.31925964]
[92.50000000 225.31925964]
[92.50000000 210.31925964]
[79.53267670 202.99026489]
[71.92427826 190.06863403]
[71.80444336 174.97387695]
[79.30548859 161.75906372]
[92.50000000 154.02264404]
[92.50000000 139.02264404]
[92.50000000 124.02264404]
[80.07112122 116.99953461]
[73.06040955 103.91455078]
[74.17753601 88.54134369]
[83.68089294 75.69080353]
[99.11296844 69.70599365]
[94.21141815 55.52943420]
[89.30986786 41.35287476]
[75.37540436 34.39093018]
[70.60649109 19.94405937]
[77.32951355 6.70258951]
[68.81842041 -5.64898300]
[57.31661987 -15.27750969]
[45.81481552 -24.90603638]
[34.31301117 -34.53456116]
[22.81120872 -44.16308975]
[11.30940628 -53.79161453]
[-1.92027152 -51.06520844]
[-14.11835289 -56.39763260]
[-20.89986038 -67.62641144]
[-19.96938896 -80.51559448]
[-31.26839447 -90.38131714]
[-42.56739807 -100.24703979]
[-57.35725403 -95.85800171]
[-72.16577911 -100.18363953]
[-82.26762390 -111.84367371]
[-84.43932343 -127.11741638]
[-77.98790741 -141.13107300]
[-64.97198486 -149.41294861]
[-49.54490280 -149.32031250]
[-36.62937546 -140.88273621]
[-30.34671021 -126.79261017]
[-32.70167542 -111.54604340]
[-21.40267181 -101.68032074]
[-10.10366631 -91.81459808]
[6.58069706 -93.68273926]
[19.73272896 -82.71423340]
[20.93793297 -65.29341888]
[32.43973541 -55.66489029]
[43.94153976 -46.03636551]
[55.44334412 -36.40784073]
[66.94514465 -26.77931213]
[78.44695282 -17.15078735]
[73.67303467 -31.37083244]
[72.11988068 -46.29020691]
[73.86248016 -61.18864059]
[78.81670380 -75.34687805]
[86.74336243 -88.08139801]
[97.25979614 -98.77741241]
[109.85828400 -106.91854095]
[123.93061829 -112.11176300]
[138.79740906 -114.10635376]
[153.74095154 -112.80601501]
[168.03977966 -108.27353668]
[181.00360107 -100.72772980]
[192.00656128 -90.53288269]
[200.51745605 -78.18118286]
[206.12541199 -64.26892853]
[208.55969238 -49.46776962]
[207.70277405 -34.49226761]
[203.59600830 -20.06539726]
[196.43769836 -6.88365221]
[186.57337952 4.41658974]
[174.47932434 13.28978252]
[160.73936462 19.30755234]
[146.01684570 22.17937660]
[131.02252197 21.76661301]
[116.48028564 18.08918571]
[103.09220123 11.32463455]
[91.50607300 1.80103862]
[104.97211456 8.06212997]
[110.14493561 22.36935234]
[103.48641968 36.45132446]
[108.38796997 50.62788391]
[113.28952026 64.80444336]
[125.98445129 72.79435730]
[140.88635254 71.08166504]
[155.78825378 69.36898041]
[161.82505798 55.24621201]
[174.12409973 46.04678345]
[189.37696838 44.24529648]
[203.48074341 50.32633972]
[212.64157104 62.65414429]
[214.39524841 77.91259003]
[208.27001953 91.99723816]
[195.91355896 101.11938477]
[180.64968872 102.82521057]
[166.58432007 96.65586853]
[157.50094604 84.27088165]
[142.59904480 85.98356628]
[127.69714355 87.69625854]
[129.18331909 97.63694763]
[127.32679749 107.16567230]
[122.56422424 115.22895050]
[115.64022064 121.01256561]
[107.50000000 124.02264404]
[107.50000000 139.02264404]
[107.50000000 154.02264404]
[120.69451141 161.75906372]
[128.19555664 174.97387695]
[128.07571411 190.06863403]
[120.46732330 202.99026489]
[107.50000000 210.31925964]
[107.50000000 225.31925964]
[107.50000000 240.31925964]
[107.50000000 255.31925964]
[107.50000000 270.31924438]
[107.50000000 285.31924438]
[107.50000000 300.31924438]
[107.50000000 315.31924438]
[107.50000000 330.31924438]
[107.50000000 345.31924438]
[107.50000000 360.31924438]
[122.03988647 364.38055420]
[134.94427490 372.21508789]
[145.25555420 383.24139404]
[152.20857239 396.64132690]
[155.28736877 411.42050171]
[154.26348877 426.48217773]
[149.21287537 440.70870972]
[140.51036072 453.04437256]
[128.80169678 462.57379150]
[114.95575714 468.58981323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 125]
[27 124]
[28 123]
[33 102]
[34 101]
[35 100]
[38 97]
[39 70]
[40 69]
[41 68]
[42 67]
[43 66]
[44 65]
[48 62]
[49 61]
[50 60]
[103 118]
[104 117]
[105 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
