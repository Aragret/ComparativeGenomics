%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCAUAUAUGGGGGGGGGGUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUACCxxxxxxxxxxGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCCCCCCCCCCCUCCAUAUAU\
) } def
/len { sequence length } bind def

/coor [
[110.79293060 509.16799927]
[97.57273102 501.89550781]
[86.68592834 491.44851685]
[78.87480164 478.53927612]
[74.67192078 464.04794312]
[74.36384583 448.96261597]
[77.97158813 434.31179810]
[85.24916077 421.09439087]
[95.70037079 410.21163940]
[108.61263275 402.40548706]
[123.10556793 398.20819092]
[122.79351044 383.21145630]
[122.48145294 368.21469116]
[122.16939545 353.21792603]
[121.85733795 338.22119141]
[121.54528809 323.22442627]
[121.23323059 308.22766113]
[120.92117310 293.23092651]
[120.60911560 278.23416138]
[120.29705811 263.23742676]
[118.89476013 248.30310059]
[116.40963745 233.51039124]
[113.92452240 218.71769714]
[101.68187714 210.31214905]
[98.95088196 195.34564209]
[107.85040283 182.56141663]
[105.21154022 167.79536438]
[102.41921234 153.05755615]
[99.62689209 138.31974792]
[96.83456421 123.58193970]
[94.04224396 108.84413910]
[89.88435364 94.43192291]
[84.39732361 80.47153473]
[78.91029358 66.51113892]
[73.42325592 52.55075073]
[59.21125793 46.17448425]
[53.84549713 31.93849945]
[60.01187897 18.42882347]
[54.52484894 4.46843290]
[49.03781509 -9.49195671]
[43.55078506 -23.45234680]
[28.89306641 -34.54879761]
[32.09792709 -51.77461624]
[26.32165527 -65.61783600]
[9.75947475 -77.03459167]
[12.90010071 -96.07575989]
[6.55297136 -109.66670990]
[0.20584187 -123.25765991]
[-8.04644775 -135.78363037]
[-18.02917290 -146.97938538]
[-28.01189995 -158.17515564]
[-42.50523376 -153.49934387]
[-57.64668274 -155.12921143]
[-70.81289673 -162.78236389]
[-79.72274780 -175.13284302]
[-82.83255768 -190.04086304]
[-79.60353088 -204.92350769]
[-70.59510803 -217.20228577]
[-57.36806488 -224.74980164]
[-42.21405411 -226.25842285]
[-27.75860977 -221.46676636]
[-16.50621986 -211.20501709]
[-10.40643120 -197.25106812]
[-10.51606750 -182.02255249]
[-16.81613350 -168.15788269]
[-6.83340788 -156.96211243]
[3.14931846 -145.76635742]
[1.05668318 -160.61965942]
[4.70388508 -175.16950989]
[13.55538750 -187.27944946]
[26.31148338 -195.17135620]
[41.09913254 -197.68638611]
[55.74699402 -194.45527649]
[68.10425568 -185.95245361]
[76.35643768 -173.42640686]
[79.29183960 -158.71643066]
[76.47943115 -143.98245239]
[68.33218384 -131.38790894]
[56.04638672 -122.78215027]
[41.42602539 -119.42877197]
[26.61788177 -121.82018280]
[13.79679298 -129.60479736]
[20.14392281 -116.01383972]
[26.49105263 -102.42288971]
[36.44349289 -99.78076935]
[43.41860199 -91.90885925]
[44.90489578 -81.27426910]
[40.16487503 -71.39410400]
[45.94114685 -57.55088806]
[57.03831482 -52.63558578]
[61.94458008 -41.09663010]
[57.51117325 -28.93937874]
[62.99820709 -14.97898865]
[68.48523712 -1.01859868]
[73.97226715 12.94179153]
[87.68711090 18.63729668]
[93.45060730 32.71695328]
[87.38365173 47.06372070]
[92.87068176 61.02410889]
[98.35771179 74.98449707]
[103.84474182 88.94489288]
[108.77336121 74.77771759]
[120.48688507 65.40790558]
[135.39057922 63.71092987]
[148.91070557 70.20757294]
[156.89808655 82.90409088]
[156.90151978 97.90409088]
[148.91993713 110.60426331]
[135.40278625 117.10707855]
[120.49831390 115.41692352]
[108.78004456 106.05181122]
[111.57237244 120.78961945]
[114.36469269 135.52742004]
[117.15702057 150.26522827]
[119.94934082 165.00303650]
[124.64955902 172.91250610]
[122.64311218 180.07629395]
[135.23158264 189.25061035]
[137.54112244 204.28793335]
[128.71722412 216.23257446]
[131.20234680 231.02528381]
[133.68746948 245.81799316]
[142.70967102 233.83467102]
[157.28335571 230.28393555]
[170.80650330 236.77430725]
[177.15296936 250.36555481]
[173.44776917 264.90072632]
[161.36938477 273.79525757]
[146.38945007 273.01983643]
[135.29380798 262.92535400]
[135.60586548 277.92211914]
[135.91792297 292.91885376]
[136.22998047 307.91561890]
[136.54203796 322.91238403]
[136.85409546 337.90911865]
[137.16615295 352.90588379]
[137.47821045 367.90261841]
[137.79026794 382.89938354]
[138.10232544 397.89614868]
[152.75730896 401.48690796]
[165.98312378 408.74917603]
[176.87799072 419.18777466]
[184.69908142 432.09097290]
[188.91316223 446.57904053]
[189.23287964 461.66412354]
[185.63645935 476.31774902]
[178.36909485 489.54074097]
[167.92628479 500.43157959]
[155.02005005 508.24768066]
[140.53036499 512.45617676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 122]
[22 121]
[23 120]
[26 117]
[27 115]
[28 114]
[29 113]
[30 112]
[31 111]
[32 101]
[33 100]
[34 99]
[35 98]
[38 95]
[39 94]
[40 93]
[41 92]
[43 89]
[44 88]
[46 84]
[47 83]
[48 82]
[49 67]
[50 66]
[51 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
