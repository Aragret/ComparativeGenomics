%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUAACAGGGGGGGGGGAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUxxxxxxxxxxAUCACGAAAAAAACUCUACCUCUCUAUACUAAUCUCCCUACAAAUCUCCUCCCCCCCCCCUAAUUAUAACA\
) } def
/len { sequence length } bind def

/coor [
[111.07258606 428.84838867]
[97.05064392 423.29537964]
[84.85068512 414.42907715]
[75.23961639 402.80676270]
[68.82158661 389.15905762]
[66.00005341 374.34387207]
[66.95236969 359.29248047]
[71.61867523 344.95104980]
[79.70564270 332.22109985]
[90.70491791 321.90283203]
[103.92507172 314.64486694]
[118.53508759 310.90341187]
[118.53508759 295.90341187]
[118.53508759 280.90341187]
[118.53508759 265.90341187]
[118.53508759 250.90342712]
[118.53508759 235.90342712]
[118.53508759 220.90342712]
[118.53508759 205.90342712]
[118.53508759 190.90342712]
[118.53508759 175.90342712]
[118.53508759 160.90342712]
[117.61167145 145.93186951]
[115.76834869 131.04556274]
[113.92502594 116.15925598]
[94.65819550 118.50522614]
[83.56480408 105.03860474]
[68.74231720 102.73773193]
[53.91983795 100.43685913]
[39.09735489 98.13598633]
[24.27487373 95.83510590]
[9.45239067 93.53423309]
[-5.37009144 91.23336029]
[-12.40652466 104.64109039]
[-23.41690063 115.03582001]
[-37.20689774 121.28999329]
[-52.28067780 122.72521210]
[-67.00315094 119.18579865]
[-79.77733612 111.05567169]
[-89.21758270 99.21672821]
[-94.29988098 84.95317841]
[-94.47294617 69.81221771]
[-89.71800232 55.43621826]
[-80.55082703 43.38459396]
[-67.96582031 34.96460724]
[-53.32809067 31.08959579]
[-38.22544479 32.17989349]
[-24.29609680 38.11723328]
[-13.05099964 48.25757217]
[-5.70993853 61.50096893]
[-3.06921649 76.41087341]
[11.75326538 78.71175385]
[26.57574844 81.01262665]
[41.39823151 83.31349945]
[56.22071075 85.61437225]
[71.04319763 87.91525269]
[85.86567688 90.21612549]
[95.29984283 82.03404236]
[108.74190521 82.06620026]
[119.58215332 91.54026031]
[127.73881531 78.95182037]
[116.06067657 69.51578522]
[105.43285370 58.91073227]
[95.97180939 47.25284576]
[87.78118896 34.66986465]
[80.95074463 21.29964638]
[75.55530548 7.28868866]
[71.65399170 -7.20949936]
[69.28954315 -22.03606796]
[68.48786926 -37.02856445]
[69.25775909 -52.02273178]
[71.59077454 -66.85427856]
[75.46134949 -81.36070251]
[80.82707214 -95.38306427]
[87.62916565 -108.76773071]
[95.79309082 -121.36804962]
[105.22940826 -133.04595947]
[115.83472443 -143.67352295]
[127.49283600 -153.13429260]
[140.07601929 -161.32460022]
[153.44639587 -168.15472412]
[167.45748901 -173.54981995]
[181.95578003 -177.45079041]
[196.78239441 -179.81486511]
[211.77491760 -180.61618042]
[226.76905823 -179.84591675]
[241.60055542 -177.51254272]
[256.10687256 -173.64161682]
[270.12911987 -168.27555847]
[283.51361084 -161.47314453]
[296.11373901 -153.30889893]
[307.79141235 -143.87231445]
[318.41873169 -133.26673889]
[327.87921143 -121.60839081]
[336.06921387 -109.02500916]
[342.89901733 -95.65445709]
[348.29376221 -81.64324188]
[352.19436646 -67.14485931]
[354.55810547 -52.31818008]
[355.35903931 -37.32564163]
[354.58843994 -22.33151436]
[352.25469971 -7.50008154]
[348.38342285 7.00615549]
[343.01699829 21.02825928]
[336.21426392 34.41259384]
[328.04974365 47.01251221]
[318.61285400 58.68996811]
[308.00701904 69.31701660]
[296.34844971 78.77721405]
[283.76486206 86.96691132]
[270.39413452 93.79638672]
[256.38278198 99.19080353]
[241.88432312 103.09106445]
[227.05758667 105.45442963]
[212.06503296 106.25500488]
[197.07092285 105.48402405]
[182.23954773 103.14993286]
[167.73339844 99.27829742]
[153.71142578 93.91155243]
[140.32725525 87.10848236]
[132.17059326 99.69692230]
[128.81132507 114.31593323]
[130.65466309 129.20223999]
[132.49798584 144.08854675]
[142.85099792 133.23428345]
[157.84111023 132.68998718]
[168.95407104 142.76481628]
[169.87777710 157.73634338]
[160.08758545 169.10086060]
[145.14424133 170.40338135]
[133.53507996 160.90342712]
[133.53507996 175.90342712]
[133.53507996 190.90342712]
[133.53507996 205.90342712]
[133.53507996 220.90342712]
[133.53507996 235.90342712]
[133.53507996 250.90342712]
[133.53507996 265.90341187]
[133.53507996 280.90341187]
[133.53507996 295.90341187]
[133.53507996 310.90341187]
[148.14509583 314.64486694]
[161.36526489 321.90283203]
[172.36453247 332.22109985]
[180.45149231 344.95104980]
[185.11779785 359.29248047]
[186.07011414 374.34387207]
[183.24858093 389.15905762]
[176.83055115 402.80676270]
[167.21948242 414.42907715]
[155.01953125 423.29537964]
[140.99758911 428.84838867]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 124]
[24 123]
[25 122]
[27 57]
[28 56]
[29 55]
[30 54]
[31 53]
[32 52]
[33 51]
[60 121]
[61 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
