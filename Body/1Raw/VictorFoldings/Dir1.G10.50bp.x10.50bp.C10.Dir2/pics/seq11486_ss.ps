%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCACCAGACGGGGGGGGGGGCCUCAACCGCCUUUUCAUCAAUCGCCCACAUCACUCGAGACGUAAAUUAxxxxxxxxxxACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUACCCCCCCCCCUUCUCACCAGAC\
) } def
/len { sequence length } bind def

/coor [
[63.96253204 640.69421387]
[49.34653473 637.04449463]
[35.90936279 630.23345947]
[24.32502174 620.60272217]
[15.17457485 608.63537598]
[8.91700554 594.93170166]
[5.86618996 580.17907715]
[6.17515659 565.11749268]
[9.82840824 550.50238037]
[16.64269829 537.06683350]
[26.27622414 525.48486328]
[38.24577332 516.33728027]
[51.95095825 510.08303833]
[66.70433807 507.03579712]
[67.00833893 492.03887939]
[67.31233978 477.04196167]
[67.61634827 462.04504395]
[67.92034912 447.04812622]
[68.22435760 432.05120850]
[68.52835846 417.05429077]
[68.83236694 402.05737305]
[69.13636780 387.06045532]
[69.44037628 372.06353760]
[56.14363480 368.99008179]
[43.71170044 363.34701538]
[32.63591385 355.35507202]
[23.35447121 345.32775879]
[16.23510933 333.65921021]
[11.56051731 320.80868530]
[9.51712418 307.28240967]
[10.18765450 293.61370850]
[13.54778957 280.34188843]
[19.46703911 267.99108887]
[27.71380997 257.04949951]
[37.96445847 247.95005798]
[49.81600952 241.05334473]
[62.80197144 236.63328552]
[76.41072845 234.86627197]
[77.62549591 219.91554260]
[78.84026337 204.96481323]
[80.05503845 190.01408386]
[78.01031494 187.07356262]
[77.32153320 182.97918701]
[78.52305603 178.39480591]
[81.82515717 174.20091248]
[67.69996643 169.23010254]
[54.81578064 161.59939575]
[43.66762543 151.60197449]
[34.68382645 139.62193298]
[28.20955467 126.11957550]
[24.49355698 111.61366272]
[23.67860794 96.66154480]
[25.79601860 81.83769989]
[30.76443481 67.71166229]
[38.39296341 54.82618713]
[48.38851166 43.67634201]
[60.36703110 34.69052124]
[73.86830139 28.21396828]
[88.37358093 24.49551964]
[103.32556152 23.67804527]
[105.44660187 8.82876301]
[107.56764221 -6.02051926]
[109.68869019 -20.86980057]
[103.98051453 -35.62538910]
[113.43974304 -47.13070297]
[115.56078339 -61.97998428]
[117.68183136 -76.82926178]
[119.80287170 -91.67855072]
[110.10475922 -80.23535919]
[97.12440491 -72.71801758]
[82.37245941 -70.00139618]
[67.56574249 -72.40164948]
[54.42746353 -79.63944244]
[44.48664474 -90.87243652]
[38.90019989 -104.79334259]
[38.31827545 -119.78205109]
[42.80859375 -134.09417725]
[51.84857559 -146.06408691]
[64.38615417 -154.29872131]
[78.96219635 -157.83973694]
[93.88036346 -156.27503967]
[107.40447998 -149.78671265]
[117.96060944 -139.12988281]
[124.32023621 -125.54477692]
[125.74317169 -110.61164093]
[132.48521423 -124.01107025]
[139.22726440 -137.41050720]
[140.94531250 -154.27717590]
[157.62843323 -157.29544067]
[165.14707947 -142.09983826]
[152.62669373 -130.66845703]
[145.88464355 -117.26902771]
[139.14260864 -103.86959076]
[134.65216064 -89.55750275]
[132.53111267 -74.70822144]
[130.41006470 -59.85894012]
[128.28903198 -45.00965881]
[134.14891052 -31.31619263]
[124.53797150 -18.74875832]
[122.41692352 -3.89947629]
[120.29588318 10.94980621]
[118.17484283 25.79908752]
[132.30003357 30.76989174]
[145.18421936 38.40059662]
[156.33238220 48.39802551]
[165.31617737 60.37806702]
[171.79045105 73.88042450]
[175.50643921 88.38633728]
[176.32139587 103.33845520]
[174.20397949 118.16230011]
[169.23556519 132.28833008]
[161.60704041 145.17381287]
[151.61149597 156.32365417]
[139.63296509 165.30947876]
[126.13169861 171.78602600]
[111.62641907 175.50448608]
[96.67443848 176.32196045]
[95.00576782 191.22885132]
[93.79099274 206.17958069]
[92.57622528 221.13031006]
[91.36145782 236.08103943]
[107.01396942 241.11483765]
[121.02683258 249.70050049]
[132.60836792 261.34851074]
[141.10530090 275.39645386]
[146.03968811 291.04663086]
[147.13565063 307.41152954]
[144.33497620 323.56396484]
[137.80003357 338.58975220]
[127.90447235 351.63937378]
[115.21181488 361.97601318]
[100.44338226 369.01718140]
[84.43729401 372.36752319]
[84.13328552 387.36444092]
[83.82928467 402.36135864]
[83.52527618 417.35827637]
[83.22127533 432.35519409]
[82.91726685 447.35214233]
[82.61326599 462.34906006]
[82.30926514 477.34597778]
[82.00525665 492.34289551]
[81.70125580 507.33981323]
[96.31901550 510.98242188]
[109.75948334 517.78692627]
[121.34849548 527.41204834]
[130.50474548 539.37493896]
[136.76895142 553.07556152]
[139.82691956 567.82672119]
[139.52523804 582.88848877]
[135.87907410 597.50537109]
[129.07130432 610.94421387]
[119.44338226 622.53088379]
[107.47827148 631.68420410]
[93.77611542 637.94512939]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[38 121]
[39 120]
[40 119]
[41 118]
[45 117]
[60 102]
[61 101]
[62 100]
[63 99]
[65 97]
[66 96]
[67 95]
[68 94]
[85 93]
[86 92]
[87 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
