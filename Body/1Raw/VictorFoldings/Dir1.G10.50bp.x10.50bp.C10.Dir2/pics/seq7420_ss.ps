%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAGAAAAACGGGGGGGGGGCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUxxxxxxxxxxUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAACCCCCCCCCCAUUAAAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 373.91702271]
[71.01555634 368.36401367]
[58.81560135 359.49768066]
[49.20452881 347.87536621]
[42.78650284 334.22766113]
[39.96496582 319.41247559]
[40.91728210 304.36108398]
[45.58358765 290.01968384]
[53.67055511 277.28973389]
[64.66983032 266.97143555]
[77.88998413 259.71347046]
[92.50000000 255.97203064]
[92.50000000 240.97203064]
[92.50000000 225.97203064]
[92.50000000 210.97203064]
[92.50000000 195.97203064]
[92.50000000 180.97203064]
[92.50000000 165.97203064]
[92.50000000 150.97203064]
[92.50000000 135.97203064]
[92.50000000 120.97203064]
[76.59962463 114.01470947]
[68.07386017 95.23635864]
[53.16941452 96.92675781]
[38.26496506 98.61715698]
[23.36051941 100.30754852]
[19.06829071 103.49063110]
[14.44604206 104.55854797]
[10.37020969 103.74787903]
[7.49034739 101.61396027]
[-7.48989391 102.38361359]
[-22.47013474 103.15327454]
[-37.45037460 103.92293549]
[-52.43061829 104.69259644]
[-67.41085815 105.46225739]
[-82.91888428 112.31334686]
[-93.79528046 99.30795288]
[-84.30902863 85.25635529]
[-68.18051910 90.48201752]
[-53.20027542 89.71235657]
[-38.22003555 88.94269562]
[-23.23979568 88.17303467]
[-8.25955391 87.40337372]
[6.72068739 86.63371277]
[21.67012215 85.40310669]
[36.57456970 83.71270752]
[51.47901535 82.02230835]
[66.38346100 80.33190918]
[71.36878967 66.18459320]
[60.81677246 55.52368546]
[50.26475525 44.86277771]
[39.71274185 34.20186996]
[29.16072655 23.54095840]
[18.60871124 12.88005066]
[2.80533099 13.04956245]
[-8.43061161 1.93519533]
[-8.43303013 -13.86909389]
[2.79950833 -24.98690033]
[18.60293961 -24.82222557]
[29.60136795 -13.47277164]
[29.26961899 2.32803535]
[39.82163620 12.98894405]
[50.37364960 23.64985275]
[60.92566299 34.31076050]
[71.47767639 44.97167206]
[82.02969360 55.63257980]
[97.00124359 56.55599213]
[108.78337860 47.27260590]
[120.56552124 37.98922348]
[112.55654144 25.28985405]
[105.91889954 11.82287884]
[100.72532654 -2.26415443]
[97.03272247 -16.81690025]
[94.88154602 -31.67590904]
[94.29537201 -46.67837906]
[95.28061676 -61.65993500]
[97.82648468 -76.45642853]
[101.90509033 -90.90574646]
[107.47173309 -104.84956360]
[114.46543121 -118.13511658]
[122.80956268 -130.61683655]
[132.41268921 -142.15795898]
[143.16960144 -152.63204956]
[154.96244812 -161.92433167]
[167.66200256 -169.93301392]
[181.12915039 -176.57032776]
[195.21630859 -181.76354980]
[209.76913452 -185.45579529]
[224.62820435 -187.60661316]
[239.63069153 -188.19242859]
[254.61221313 -187.20681763]
[269.40866089 -184.66058350]
[283.85787964 -180.58163452]
[297.80154419 -175.01464844]
[311.08694458 -168.02062988]
[323.56845093 -159.67619324]
[335.10934448 -150.07278442]
[345.58316040 -139.31561279]
[354.87515259 -127.52255249]
[362.88354492 -114.82279205]
[369.52050781 -101.35549927]
[374.71340942 -87.26821136]
[378.40530396 -72.71528625]
[380.55575562 -57.85617447]
[381.14120483 -42.85367584]
[380.15524292 -27.87216568]
[377.60864258 -13.07579517]
[373.52932739 1.37332177]
[367.96200562 15.31687260]
[360.96768188 28.60208511]
[352.62292480 41.08339691]
[343.01925659 52.62405777]
[332.26181030 63.09762192]
[320.46853638 72.38933563]
[307.76858521 80.39739227]
[294.30111694 87.03404999]
[280.21371460 92.22659302]
[265.66070557 95.91813660]
[250.80152893 98.06822968]
[235.79901123 98.65331268]
[220.81753540 97.66697693]
[206.02122498 95.12002563]
[191.57220459 91.04037476]
[177.62878418 85.47270966]
[164.34375000 78.47804260]
[151.86264038 70.13301086]
[140.32220459 60.52903748]
[129.84890747 49.77135849]
[118.06676483 59.05474472]
[106.28462982 68.33812714]
[127.20202637 97.99018860]
[107.50000000 120.97203064]
[107.50000000 135.97203064]
[107.50000000 150.97203064]
[107.50000000 165.97203064]
[107.50000000 180.97203064]
[107.50000000 195.97203064]
[107.50000000 210.97203064]
[107.50000000 225.97203064]
[107.50000000 240.97203064]
[107.50000000 255.97203064]
[122.11001587 259.71347046]
[135.33016968 266.97143555]
[146.32945251 277.28973389]
[154.41641235 290.01968384]
[159.08271790 304.36108398]
[160.03503418 319.41247559]
[157.21350098 334.22766113]
[150.79547119 347.87536621]
[141.18440247 359.49768066]
[128.98443604 368.36401367]
[114.96250153 373.91702271]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 48]
[24 47]
[25 46]
[26 45]
[30 44]
[31 43]
[32 42]
[33 41]
[34 40]
[35 39]
[49 66]
[50 65]
[51 64]
[52 63]
[53 62]
[54 61]
[67 130]
[68 129]
[69 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
