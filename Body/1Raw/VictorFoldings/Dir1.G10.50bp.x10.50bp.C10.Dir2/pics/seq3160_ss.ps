%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACACCCACGGGGGGGGGGCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUxxxxxxxxxxACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCCCCCCCCCCCUCACCCAC\
) } def
/len { sequence length } bind def

/coor [
[103.53001404 384.34326172]
[90.04113007 377.61172485]
[78.55563354 367.84716797]
[69.74126434 355.61727905]
[64.11048126 341.63308716]
[61.99065399 326.70761108]
[63.50502014 311.70858765]
[68.56554413 297.50808716]
[76.87801361 284.93167114]
[87.95914459 274.71051025]
[101.16469574 267.43887329]
[115.72692108 263.53952026]
[115.41894531 248.54266357]
[115.11096191 233.54583740]
[114.80298615 218.54899597]
[114.49501038 203.55215454]
[114.18703461 188.55531311]
[113.87905121 173.55847168]
[113.57107544 158.56164551]
[113.26309967 143.56480408]
[112.95512390 128.56796265]
[107.06405640 123.92626953]
[101.87573242 138.00041199]
[86.88716125 137.41497803]
[82.81239319 122.97904968]
[95.28191376 114.64288330]
[89.39084625 110.00119019]
[74.73812103 113.21018982]
[60.08539963 116.41918945]
[45.43267441 119.62818146]
[35.60217667 132.30654907]
[19.55929756 132.38150024]
[9.61076164 119.79554749]
[13.38823318 104.20355225]
[27.99395943 97.56636047]
[42.22367859 104.97545624]
[56.87639999 101.76646423]
[71.52912903 98.55746460]
[86.18185425 95.34846497]
[73.45542145 87.40882111]
[72.55735779 72.43572998]
[84.24353790 63.03184128]
[98.67787170 67.11228180]
[103.71116638 81.24268341]
[109.98056793 67.61570740]
[116.24997711 53.98872375]
[122.51937866 40.36174393]
[109.41242218 33.05175018]
[96.91135406 24.74804115]
[85.09135437 15.50055790]
[74.02351379 5.36491680]
[63.77439880 -5.59792471]
[54.40564346 -17.32203293]
[45.97359467 -29.73690033]
[38.52896881 -42.76785660]
[32.11653137 -56.33653259]
[26.77485847 -70.36132812]
[22.53606796 -84.75788879]
[19.42565536 -99.43963623]
[17.46232796 -114.31826782]
[16.65789223 -129.30429077]
[17.01718521 -144.30760193]
[18.53804970 -159.23794556]
[21.21133614 -174.00555420]
[25.02096748 -188.52157593]
[29.94403267 -202.69873047]
[35.95092392 -216.45175171]
[43.00550842 -229.69792175]
[51.06536865 -242.35758972]
[60.08202362 -254.35459900]
[70.00125122 -265.61679077]
[80.76338959 -276.07647705]
[92.30371094 -285.67068481]
[104.55281830 -294.34179688]
[117.43704224 -302.03756714]
[130.87889099 -308.71179199]
[144.79751587 -314.32427979]
[159.10920715 -318.84130859]
[173.72792053 -322.23568726]
[188.56570435 -324.48703003]
[203.53332520 -325.58175659]
[218.54078674 -325.51330566]
[233.49780273 -324.28210449]
[248.31443787 -321.89553833]
[262.90158081 -318.36798096]
[277.17147827 -313.72061157]
[291.03833008 -307.98141479]
[304.41876221 -301.18487549]
[317.23223877 -293.37188721]
[329.40176392 -284.58944702]
[340.85409546 -274.89038086]
[351.52038574 -264.33297729]
[361.33648682 -252.98077393]
[370.24334717 -240.90203857]
[378.18740845 -228.16938782]
[385.12091064 -214.85942078]
[391.00210571 -201.05218506]
[395.79565430 -186.83071899]
[399.47274780 -172.28056335]
[402.01123047 -157.48919678]
[403.39587402 -142.54559326]
[403.61831665 -127.53963470]
[402.67721558 -112.56156158]
[400.57827759 -97.70146179]
[397.33410645 -83.04869080]
[392.96417236 -68.69139099]
[387.49481201 -54.71589661]
[380.95889282 -41.20626831]
[373.39572144 -28.24375153]
[364.85079956 -15.90630722]
[355.37551880 -4.26813269]
[345.02682495 6.60077667]
[333.86700439 16.63505363]
[321.96316528 25.77434731]
[309.38687134 33.96369553]
[296.21380615 41.15384674]
[282.52313232 47.30155563]
[268.39724731 52.36984634]
[253.92108154 56.32824326]
[239.18170166 59.15293503]
[224.26774597 60.82693481]
[209.26892090 61.34017563]
[194.27542114 60.68957138]
[179.37742615 58.87903214]
[164.66453552 55.91944885]
[150.22523499 51.82862091]
[136.14636230 46.63114929]
[129.87695312 60.25812912]
[123.60755157 73.88510895]
[117.33814240 87.51208496]
[127.95195770 128.25997925]
[128.25993347 143.25682068]
[128.56791687 158.25366211]
[128.87588501 173.25050354]
[129.18386841 188.24734497]
[129.49185181 203.24417114]
[129.79981995 218.24101257]
[130.10780334 233.23785400]
[130.41578674 248.23469543]
[130.72375488 263.23153687]
[145.43379211 266.52975464]
[158.92675781 273.25311279]
[170.41816711 283.01071167]
[179.23995972 295.23526001]
[184.87921143 309.21603394]
[187.00808716 324.14022827]
[185.50280762 339.14013672]
[180.45089722 353.34371948]
[172.14605713 365.92517090]
[161.07112122 376.15304565]
[147.86997986 383.43267822]
[133.31011963 387.34088135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[27 39]
[28 38]
[29 37]
[30 36]
[44 130]
[45 129]
[46 128]
[47 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
