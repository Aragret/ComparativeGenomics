%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAAAAGGGGGGGGGGGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAxxxxxxxxxxGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCACACACCACCUGCCCCCCCCCCUCCAAAAAGG\
) } def
/len { sequence length } bind def

/coor [
[97.14108276 386.80502319]
[85.64492035 376.99026489]
[77.55386353 364.22210693]
[73.58735657 349.63586426]
[74.09809875 334.52856445]
[79.04068756 320.24353027]
[87.97561646 308.05096436]
[100.10839844 299.03503418]
[114.36020660 293.99743652]
[113.73622894 279.01043701]
[113.11225128 264.02340698]
[112.48827362 249.03639221]
[111.86429596 234.04937744]
[111.24031830 219.06236267]
[110.61634064 204.07534790]
[109.99236298 189.08833313]
[109.36839294 174.10131836]
[108.74441528 159.11430359]
[106.25929260 144.32159424]
[101.95170593 129.95339966]
[97.64412689 115.58522034]
[86.14231873 105.95669556]
[71.24041748 104.24400330]
[56.33851624 102.53131866]
[56.71949768 122.78779602]
[38.14126587 141.71923828]
[23.56856155 145.27400208]
[8.99585915 148.82875061]
[-5.57684374 152.38351440]
[-15.10463524 165.29090881]
[-31.14125061 165.74539185]
[-41.38476944 153.39833069]
[-37.97724152 137.72134399]
[-23.53262901 130.74044800]
[-9.13160515 137.81082153]
[5.44109726 134.25605774]
[20.01379967 130.70129395]
[34.58650208 127.14653015]
[35.98886108 112.21155548]
[37.39110947 97.27791595]
[23.73486900 91.07250977]
[10.07862759 84.86710358]
[-3.57761335 78.66168976]
[-17.23385429 72.45628357]
[-30.89009476 66.25087738]
[-44.54633713 60.04547119]
[-61.46787262 58.99760437]
[-65.14530182 42.44729233]
[-50.25979614 34.33199692]
[-38.34093094 46.38923264]
[-24.68468857 52.59463882]
[-11.02844715 58.80004501]
[2.62779379 65.00545502]
[16.28403473 71.21086121]
[29.94027519 77.41626740]
[43.59651566 83.62167358]
[58.05120468 87.62941742]
[72.95310974 89.34210205]
[87.85501099 91.05479431]
[77.38801575 80.31040192]
[80.08498383 65.55484772]
[93.67591858 59.20768356]
[106.72151184 66.61122894]
[108.24143982 81.53409576]
[116.49372864 69.00814056]
[124.74601746 56.48217392]
[113.93232727 46.02749634]
[105.22621155 33.76699829]
[98.92298889 20.11908150]
[95.23598480 5.54916525]
[94.28935242 -9.44618225]
[96.11387634 -24.35617447]
[100.64595032 -38.67320251]
[107.72983551 -51.91011047]
[117.12297821 -63.61678314]
[128.50434875 -73.39544678]
[141.48536682 -80.91418457]
[155.62319946 -85.91819000]
[170.43586731 -88.23843384]
[185.41868591 -87.79734039]
[200.06141663 -84.61138916]
[213.86567688 -78.79053497]
[214.99673462 -94.57125854]
[228.45982361 -100.94264984]
[236.71211243 -113.46861267]
[231.12101746 -127.94338989]
[235.13832092 -142.93141174]
[247.21928406 -152.66947937]
[262.71853638 -153.41310120]
[275.67630005 -144.87634277]
[281.11001587 -130.34176636]
[276.93035889 -115.39820099]
[264.74447632 -105.79176331]
[249.23806763 -105.21632385]
[240.98577881 -92.69036102]
[240.44497681 -77.80557251]
[226.39163208 -70.53824615]
[237.18804932 -60.15181732]
[245.89433289 -47.95508575]
[252.21279907 -34.36257935]
[255.92694092 -19.83660126]
[256.90881348 -4.87149620]
[255.12356567 10.02316475]
[250.63049316 24.33994102]
[243.58123779 37.59080887]
[234.21458435 49.32379532]
[222.84838867 59.13840103]
[209.86877441 66.69925690]
[195.71707153 71.74759674]
[180.87474060 74.11010742]
[165.84703064 73.70488739]
[151.14578247 70.54427338]
[137.27197266 64.73446655]
[129.01968384 77.26042938]
[120.76739502 89.78638458]
[112.01230621 111.27763367]
[116.31989288 125.64582062]
[120.62747955 140.01400757]
[125.18691254 137.24557495]
[130.87893677 135.75941467]
[137.35299683 135.87713623]
[144.17973328 137.82818604]
[157.11779785 145.41809082]
[172.94264221 142.78111267]
[184.77410889 153.61604309]
[183.53611755 169.61126709]
[170.17832947 178.49659729]
[154.94770813 173.45597839]
[149.52789307 158.35614014]
[136.58982849 150.76623535]
[123.73143005 158.49032593]
[124.35540771 173.47734070]
[124.97938538 188.46435547]
[125.60336304 203.45137024]
[126.22734070 218.43838501]
[126.85131836 233.42539978]
[127.47529602 248.41241455]
[128.09927368 263.39944458]
[128.72325134 278.38644409]
[129.34722900 293.37347412]
[143.96846008 297.20895386]
[156.80870056 305.18511963]
[166.72621155 316.59277344]
[172.83914185 330.41751099]
[174.60391235 345.43008423]
[171.86361694 360.29556274]
[164.86190796 373.69210815]
[154.22138977 384.42852783]
[140.88819885 391.55014038]
[126.04790497 394.42367554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 118]
[20 117]
[21 116]
[22 59]
[23 58]
[24 57]
[26 38]
[27 37]
[28 36]
[29 35]
[40 56]
[41 55]
[42 54]
[43 53]
[44 52]
[45 51]
[46 50]
[64 115]
[65 114]
[66 113]
[82 97]
[84 95]
[85 94]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
