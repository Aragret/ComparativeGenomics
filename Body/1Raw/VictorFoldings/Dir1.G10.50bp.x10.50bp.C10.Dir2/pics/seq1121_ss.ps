%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAAUAAACGGGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCCCCCCCCCCCUAGAAAUAAAC\
) } def
/len { sequence length } bind def

/coor [
[68.27885437 437.80328369]
[54.25690842 432.25027466]
[42.05695343 423.38394165]
[32.44588089 411.76162720]
[26.02785492 398.11392212]
[23.20631790 383.29873657]
[24.15863419 368.24737549]
[28.82493973 353.90594482]
[36.91190720 341.17599487]
[47.91117859 330.85772705]
[61.13134003 323.59973145]
[75.74134827 319.85830688]
[75.74134827 304.85830688]
[75.74134827 289.85830688]
[75.74134827 274.85830688]
[75.74134827 259.85830688]
[75.74134827 244.85830688]
[75.74134827 229.85830688]
[75.74134827 214.85830688]
[75.74134827 199.85830688]
[75.74134827 184.85830688]
[75.74134827 169.85830688]
[69.53219604 165.65159607]
[57.11388016 157.23818970]
[50.90472412 153.03147888]
[36.97400665 158.59341431]
[23.04329109 164.15534973]
[10.57521820 175.64376831]
[-3.91572380 166.84326172]
[0.52936566 150.48240662]
[17.48135376 150.22463989]
[31.41206932 144.66270447]
[45.34278488 139.10076904]
[59.03992844 139.04687500]
[70.41455841 143.41044617]
[78.26863861 151.03509521]
[82.22525024 136.56632996]
[86.18186188 122.09755707]
[72.45249176 114.91986084]
[63.41228104 99.29692078]
[63.98446655 78.66486359]
[50.55701447 71.97879028]
[37.12956619 65.29271698]
[23.70211601 58.60663986]
[10.27466774 51.92056274]
[-3.15278220 45.23448944]
[-16.58023071 38.54841232]
[-32.90605164 40.09746933]
[-42.18869019 26.57842064]
[-34.87896347 11.89850521]
[-18.49648857 11.15916252]
[-9.89415646 25.12096405]
[3.53329325 31.80703926]
[16.96074295 38.49311447]
[30.38819122 45.17919159]
[43.81563950 51.86526489]
[57.24309158 58.55134201]
[70.67053986 65.23741913]
[76.92256165 61.09468079]
[68.34433746 48.78963470]
[56.79450989 39.21876907]
[62.13649368 25.20223618]
[77.12662506 25.74629021]
[81.43847656 40.11314011]
[89.42658997 52.80920410]
[95.67861176 48.66646576]
[94.75519562 33.69491577]
[93.83178711 18.72336769]
[79.54984283 13.43696690]
[68.65734863 2.79396653]
[63.04149246 -11.36167049]
[63.67525482 -26.57739449]
[70.44883728 -40.21698761]
[82.18866730 -49.91730881]
[96.86075592 -53.99771881]
[111.92306519 -51.75126266]
[124.76597595 -43.56715393]
[133.16435242 -30.86333466]
[135.66314697 -15.84082127]
[131.82942200 -1.10235381]
[122.32739258 10.79853821]
[108.80333710 17.79995346]
[109.72674561 32.77150345]
[110.65016174 47.74305344]
[123.32167816 55.77005005]
[137.25239563 50.20811462]
[151.18310547 44.64617538]
[165.11383057 39.08423996]
[179.04454041 33.52230072]
[192.40264893 26.69872665]
[205.07415771 18.67173004]
[217.74566650 10.64473152]
[221.32054138 -4.51633883]
[234.28561401 -12.47634506]
[248.71734619 -8.97482204]
[261.38885498 -17.00181961]
[274.06036377 -25.02881622]
[275.96182251 -40.55036545]
[287.43066406 -51.18048859]
[303.05169678 -51.89995956]
[315.44912720 -42.36906815]
[318.76925659 -27.08801270]
[311.44445801 -13.27203846]
[296.93322754 -7.44462538]
[282.08737183 -12.35729980]
[269.41586304 -4.33030319]
[256.74435425 3.69669390]
[253.74398804 18.24088287]
[241.00761414 26.56191063]
[225.77267456 23.31624794]
[213.10115051 31.34324455]
[200.42964172 39.37024307]
[215.27688599 41.50548172]
[226.70800781 51.21781921]
[231.21327209 65.52524567]
[227.40943909 80.03492737]
[216.46438599 90.29191589]
[201.73860168 93.14698792]
[187.75338745 87.72354126]
[178.80265808 75.68674469]
[177.63455200 60.73229980]
[184.60647583 47.45301819]
[170.67576599 53.01495361]
[156.74504089 58.57689285]
[142.81433105 64.13883209]
[128.88362122 69.70076752]
[131.68450928 112.22580719]
[100.65062714 126.05416870]
[96.69401550 140.52293396]
[92.73741150 154.99169922]
[90.74134827 169.85830688]
[90.74134827 184.85830688]
[90.74134827 199.85830688]
[90.74134827 214.85830688]
[90.74134827 229.85830688]
[90.74134827 244.85830688]
[90.74134827 259.85830688]
[90.74134827 274.85830688]
[90.74134827 289.85830688]
[90.74134827 304.85830688]
[90.74134827 319.85830688]
[105.35136414 323.59973145]
[118.57152557 330.85772705]
[129.57080078 341.17599487]
[137.65776062 353.90594482]
[142.32406616 368.24737549]
[143.27638245 383.29873657]
[140.45484924 398.11392212]
[134.03681946 411.76162720]
[124.42575073 423.38394165]
[112.22579193 432.25027466]
[98.20384979 437.80328369]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 33]
[26 32]
[27 31]
[36 130]
[37 129]
[38 128]
[41 58]
[42 57]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[66 84]
[67 83]
[68 82]
[85 126]
[86 125]
[87 124]
[88 123]
[89 122]
[90 112]
[91 111]
[92 110]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
