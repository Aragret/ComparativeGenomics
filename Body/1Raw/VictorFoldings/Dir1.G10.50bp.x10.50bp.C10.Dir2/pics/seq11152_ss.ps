%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCAAACAACAAGGGGGGGGGGUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUxxxxxxxxxxCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCAUAUACCCCCCCCCCUCCAAACAACAA\
) } def
/len { sequence length } bind def

/coor [
[74.88079834 429.46450806]
[60.72019196 424.30950928]
[48.13044739 416.02728271]
[37.79050827 405.06451416]
[30.25799751 392.01239014]
[25.93913269 377.57479858]
[25.06682396 362.53033447]
[27.68811417 347.69033813]
[33.66164017 333.85510254]
[42.66526031 321.77075195]
[54.21341705 312.08895874]
[67.68333435 305.33187866]
[82.34859467 301.86392212]
[82.34859467 286.86392212]
[82.34859467 271.86392212]
[82.34859467 256.86392212]
[82.34859467 241.86392212]
[82.34859467 226.86392212]
[82.34859467 211.86392212]
[82.34859467 196.86392212]
[82.34859467 181.86392212]
[82.34859467 166.86392212]
[82.34859467 151.86392212]
[75.15721130 165.02764893]
[72.12997437 179.71900940]
[63.24099731 191.80148315]
[50.11662292 199.06445312]
[35.15809250 200.17907715]
[21.10223770 194.94142151]
[10.52073479 184.30978394]
[5.34958506 170.22932434]
[6.53490734 155.27622986]
[13.85983467 142.18634033]
[25.98418999 133.35456848]
[40.68968964 130.39682007]
[55.28494263 133.85380554]
[70.25401306 132.89100647]
[56.65582657 126.55939484]
[43.05764389 120.22777557]
[29.52524757 127.58851624]
[14.42985725 125.59288025]
[3.53298044 115.21395111]
[0.86901665 100.58380127]
[-12.72916698 94.25218201]
[-26.32735062 87.92056274]
[-39.92553329 81.58894348]
[-53.52371979 75.25732422]
[-69.80329895 77.23402405]
[-79.43730164 63.96307373]
[-72.51509094 49.09650040]
[-56.15764236 47.92775345]
[-47.19210052 61.65914536]
[-33.59391403 67.99076080]
[-19.99573135 74.32238007]
[-6.39754820 80.65399933]
[7.20063543 86.98561859]
[20.11204529 79.60771179]
[35.06901550 81.26692200]
[46.31246185 91.53524017]
[49.38926315 106.62959290]
[62.98744583 112.96121216]
[76.58563232 119.29283142]
[75.63510895 87.75657654]
[101.20183563 75.83251190]
[106.55368805 61.81974411]
[111.90554810 47.80698013]
[117.25740814 33.79421234]
[122.60926819 19.78144646]
[127.96112823 5.76868105]
[115.05548096 -1.95242131]
[103.68678284 -11.79740810]
[94.20050812 -23.46710014]
[86.88493347 -36.60687256]
[81.96237946 -50.81741714]
[79.58243561 -65.66689301]
[79.81742096 -80.70404053]
[82.66019440 -95.47190857]
[88.02436829 -109.52169800]
[95.74693298 -122.42646790]
[105.59321594 -133.79405212]
[117.26398468 -143.27900696]
[130.40458679 -150.59307861]
[144.61567688 -155.51402283]
[159.46542358 -157.89228821]
[174.50254822 -157.65559387]
[189.27009583 -154.81115723]
[203.31927490 -149.44538879]
[216.22317505 -141.72135925]
[227.58964539 -131.87379456]
[237.07327271 -120.20194244]
[244.38586426 -107.06051636]
[249.30519104 -92.84885406]
[251.68176270 -77.99884033]
[251.44337463 -62.96173859]
[248.59724426 -48.19452286]
[243.22988892 -34.14594650]
[235.50439453 -21.24292564]
[225.65553284 -9.87757492]
[213.98262024 -0.39527231]
[200.84036255 6.91582632]
[186.62814331 11.83354473]
[171.77786255 14.20843887]
[156.74078369 13.96833801]
[141.97389221 11.12053967]
[136.62203979 25.13330650]
[131.27017212 39.14607239]
[125.91831970 53.15883636]
[120.56645966 67.17160034]
[115.21459961 81.18437195]
[125.67825317 94.57762146]
[125.16467285 112.92898560]
[112.18993378 127.78221893]
[126.85152435 130.95043945]
[141.51312256 134.11865234]
[150.13650513 121.60044098]
[162.89669800 113.33934021]
[177.84786987 110.59510040]
[192.71008301 113.78621674]
[205.21693420 122.42605591]
[213.46125793 135.19711304]
[216.18582153 150.15188599]
[212.97515869 165.00987244]
[204.31887817 177.50537109]
[191.53698730 185.73286438]
[176.57864380 188.43775940]
[161.72488403 185.20755005]
[149.24079895 176.53483582]
[141.03010559 163.74214172]
[138.34489441 148.78025818]
[123.68330383 145.61203003]
[109.02171326 142.44381714]
[97.34859467 151.86392212]
[97.34859467 166.86392212]
[97.34859467 181.86392212]
[97.34859467 196.86392212]
[97.34859467 211.86392212]
[97.34859467 226.86392212]
[97.34859467 241.86392212]
[97.34859467 256.86392212]
[97.34859467 271.86392212]
[97.34859467 286.86392212]
[97.34859467 301.86392212]
[112.01385498 305.33187866]
[125.48377228 312.08895874]
[137.03192139 321.77075195]
[146.03553772 333.85510254]
[152.00906372 347.69033813]
[154.63035583 362.53033447]
[153.75805664 377.57479858]
[149.43919373 392.01239014]
[141.90667725 405.06451416]
[131.56674194 416.02728271]
[118.97698975 424.30950928]
[104.81639099 429.46450806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[37 62]
[38 61]
[39 60]
[43 56]
[44 55]
[45 54]
[46 53]
[47 52]
[64 109]
[65 108]
[66 107]
[67 106]
[68 105]
[69 104]
[112 131]
[113 130]
[114 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
