%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAACUCAGGGGGGGGGGUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCAxxxxxxxxxxUCUUCCCACUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCGCCCCCCCCCCAGCAAUCUCA\
) } def
/len { sequence length } bind def

/coor [
[92.48357391 352.48324585]
[78.63763428 346.46719360]
[66.92897797 336.93777466]
[58.22645187 324.60211182]
[53.17584991 310.37561035]
[52.15195847 295.31390381]
[55.23075867 280.53475952]
[62.18378067 267.13482666]
[72.49506378 256.10848999]
[85.39944458 248.27398682]
[99.93933105 244.21267700]
[99.93933105 229.21267700]
[99.93933105 214.21267700]
[99.93933105 199.21267700]
[99.93933105 184.21267700]
[99.93933105 169.21267700]
[99.93933105 154.21267700]
[99.93933105 139.21267700]
[99.93933105 124.21267700]
[86.84617615 116.89356995]
[74.06881714 124.75099945]
[61.29146194 132.60842896]
[53.96912766 147.28205872]
[37.58602524 148.00732422]
[28.99568748 134.03814697]
[37.03511429 119.74479675]
[53.43403625 119.83106232]
[66.21139526 111.97364044]
[78.98875427 104.11621094]
[76.83496094 96.93212128]
[70.37358093 75.37984467]
[55.38088608 75.84788513]
[40.38818741 76.31593323]
[25.39549255 76.78397369]
[13.40708447 87.44500732]
[-2.37757730 84.57724762]
[-9.84985065 70.38060760]
[-3.27764654 55.74552155]
[12.29740238 51.89878082]
[24.92745018 61.79127502]
[39.92014694 61.32323456]
[54.91284180 60.85519028]
[69.90554047 60.38714981]
[71.68292236 53.10079956]
[77.01506042 31.24174309]
[63.92190933 23.92263794]
[50.82875443 16.60353279]
[37.73559952 9.28442669]
[20.95973206 6.83358526]
[18.67077255 -9.96513557]
[34.17934418 -16.81499100]
[45.05470657 -3.80872774]
[58.14786148 3.51037788]
[71.24101257 10.82948303]
[84.33416748 18.14858818]
[110.41894531 31.93916130]
[125.72774506 52.10205078]
[129.53919983 73.19699097]
[123.43891907 90.20429993]
[110.90369415 99.40130615]
[121.99501038 89.30265808]
[112.92471313 77.34289551]
[104.96300507 64.61821747]
[98.17398834 51.23107529]
[92.61233521 37.28926086]
[88.32281494 22.90502357]
[85.33996582 8.19418144]
[83.68781281 -6.72482109]
[83.37965393 -21.73186111]
[84.41796112 -36.70611191]
[86.79438782 -51.52700424]
[90.48979950 -66.07520294]
[95.47443390 -80.23358154]
[101.70816040 -93.88813782]
[109.14078522 -106.92893219]
[117.71247101 -119.25096893]
[127.35419464 -130.75502014]
[137.98832703 -141.34848022]
[149.52926636 -150.94604492]
[161.88404846 -159.47044373]
[174.95323181 -166.85304260]
[188.63157654 -173.03439331]
[202.80895996 -177.96473694]
[217.37121582 -181.60435486]
[232.20111084 -183.92396545]
[247.17922974 -184.90489197]
[262.18496704 -184.53921509]
[277.09753418 -182.82989502]
[291.79684448 -179.79069519]
[306.16452026 -175.44607544]
[320.08493042 -169.83102417]
[333.44595337 -162.99076843]
[346.14001465 -154.98034668]
[358.06494141 -145.86427307]
[369.12466431 -135.71595764]
[379.23019409 -124.61709595]
[388.30014038 -112.65705872]
[396.26144409 -99.93213654]
[403.05004883 -86.54479218]
[408.61129761 -72.60280609]
[412.90036011 -58.21843719]
[415.88275146 -43.50750351]
[417.53445435 -28.58845139]
[417.84216309 -13.58139992]
[416.80340576 1.39281750]
[414.42651367 16.21363640]
[410.73065186 30.76172638]
[405.74560547 44.91995239]
[399.51144409 58.57431793]
[392.07843018 71.61488342]
[383.50637817 83.93665314]
[373.86428833 95.44042206]
[363.22982788 106.03355408]
[351.68862915 115.63076782]
[339.33355713 124.15479279]
[326.26416016 131.53698730]
[312.58563232 137.71792603]
[298.40808105 142.64782715]
[283.84573364 146.28700256]
[269.01574707 148.60615540]
[254.03761292 149.58662415]
[239.03187561 149.22048950]
[224.11936951 147.51071167]
[209.42015076 144.47106934]
[195.05259705 140.12600708]
[181.13237000 134.51054382]
[167.77156067 127.66986084]
[155.07772827 119.65905762]
[143.15309143 110.54263306]
[132.09365845 100.39397430]
[121.00234222 110.49262238]
[114.93933105 124.21267700]
[114.93933105 139.21267700]
[114.93933105 154.21267700]
[114.93933105 169.21267700]
[114.93933105 184.21267700]
[114.93933105 199.21267700]
[114.93933105 214.21267700]
[114.93933105 229.21267700]
[114.93933105 244.21267700]
[129.47921753 248.27398682]
[142.38360596 256.10848999]
[152.69488525 267.13482666]
[159.64790344 280.53475952]
[162.72669983 295.31390381]
[161.70281982 310.37561035]
[156.65220642 324.60211182]
[147.94969177 336.93777466]
[136.24102783 346.46719360]
[122.39508820 352.48324585]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 29]
[21 28]
[22 27]
[31 43]
[32 42]
[33 41]
[34 40]
[45 55]
[46 54]
[47 53]
[48 52]
[60 131]
[61 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
