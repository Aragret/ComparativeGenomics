%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUUCAAGCCGGGGGGGGGGAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUxxxxxxxxxxACCGGGGGUAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACACCCCCCCCCCGUUUCAUGCC\
) } def
/len { sequence length } bind def

/coor [
[96.95383453 385.49655151]
[83.10789490 379.48052979]
[71.39923096 369.95111084]
[62.69670868 357.61544800]
[57.64610672 343.38891602]
[56.62221527 328.32723999]
[59.70101547 313.54809570]
[66.65403748 300.14816284]
[76.96532440 289.12182617]
[89.86970520 281.28732300]
[104.40959167 277.22601318]
[104.40959167 262.22601318]
[104.40959167 247.22601318]
[104.40959167 232.22601318]
[104.40959167 217.22601318]
[104.40959167 202.22601318]
[104.40959167 187.22601318]
[104.40959167 172.22601318]
[104.40959167 157.22601318]
[104.40959167 142.22601318]
[95.77645111 141.41186523]
[87.65824127 138.88619995]
[80.38307953 134.82357788]
[74.22996521 129.45903015]
[69.41814423 123.07545471]
[66.09956360 115.98934174]
[51.52685928 119.54410553]
[36.95415878 123.09886932]
[22.38145447 126.65363312]
[7.80875206 130.20838928]
[-6.14629269 139.83612061]
[-19.26090240 129.09165955]
[-12.56682777 113.51521301]
[4.25399017 115.63568878]
[18.82669258 112.08092499]
[33.39939499 108.52616882]
[47.97209930 104.97140503]
[62.54479980 101.41664124]
[62.75382614 95.80222321]
[63.79970169 90.28211212]
[65.65893555 84.98035431]
[53.39656448 76.34123230]
[41.13419724 67.70211792]
[28.87182808 59.06300354]
[16.60946083 50.42388535]
[4.34709215 41.78477097]
[-8.51448917 43.21081161]
[-18.56203270 35.70975494]
[-20.70746231 23.76385880]
[-32.78745270 14.87150860]
[-48.80057526 15.85099983]
[-59.44300079 3.84607005]
[-56.55076981 -11.93412495]
[-42.34255600 -19.38437080]
[-27.71768188 -12.78947544]
[-23.89510155 2.79152036]
[-11.81511307 11.68387032]
[5.67950296 12.65254879]
[12.98620796 29.52240181]
[25.24857712 38.16151810]
[37.51094437 46.80063248]
[49.77331161 55.43975067]
[62.03567886 64.07886505]
[74.29804993 72.71797943]
[86.45438385 65.05124664]
[100.60227203 62.52286148]
[114.66160583 65.50454712]
[123.17269897 53.15297699]
[131.68379211 40.80140305]
[140.19487000 28.44983292]
[130.43975830 16.94883919]
[123.99915314 3.32518268]
[121.30666351 -11.48989105]
[122.53991699 -26.48541451]
[127.60887146 -40.63968658]
[136.16232300 -52.98988342]
[147.61228943 -62.69755554]
[161.17437744 -69.10553741]
[175.92152405 -71.78245544]
[190.84741211 -70.55174255]
[204.93508911 -65.50328064]
[213.44618225 -77.85485077]
[221.95727539 -90.20642853]
[230.46835327 -102.55799866]
[231.92747498 -118.31177521]
[245.52018738 -124.40171051]
[254.03128052 -136.75328064]
[252.55261230 -152.72804260]
[264.21963501 -163.73988342]
[280.08236694 -161.34144592]
[287.97232056 -147.37260437]
[281.83697510 -132.54907227]
[266.38284302 -128.24218750]
[257.87176514 -115.89061737]
[257.02142334 -101.02030945]
[242.81993103 -94.04690552]
[234.30883789 -81.69533539]
[225.79774475 -69.34376526]
[217.28666687 -56.99219131]
[227.02081299 -45.62576294]
[233.48597717 -32.11656189]
[236.23600769 -17.38286591]
[235.07754517 -2.42792106]
[230.08358765 11.72837925]
[221.58886719 24.11905098]
[210.16749573 33.89606857]
[196.59413147 40.38840103]
[181.79142761 43.14807129]
[166.76733398 41.98105621]
[152.54644775 36.96092224]
[144.03535461 49.31249619]
[135.52426147 61.66406631]
[127.01317596 74.01564026]
[139.58595276 94.48121643]
[137.48098755 119.94130707]
[151.38354492 125.57326508]
[165.28610229 131.20521545]
[179.18865967 136.83717346]
[193.09121704 142.46913147]
[207.54528809 136.07733154]
[222.25521851 141.85607910]
[228.49383545 156.37692261]
[222.55989075 171.02493286]
[207.97389221 177.10968018]
[193.38945007 171.02120972]
[187.45925903 156.37168884]
[173.55670166 150.73973083]
[159.65414429 145.10777283]
[145.75158691 139.47581482]
[131.84902954 133.84385681]
[119.40959167 142.22601318]
[119.40959167 157.22601318]
[119.40959167 172.22601318]
[119.40959167 187.22601318]
[119.40959167 202.22601318]
[119.40959167 217.22601318]
[119.40959167 232.22601318]
[119.40959167 247.22601318]
[119.40959167 262.22601318]
[119.40959167 277.22601318]
[133.94947815 281.28732300]
[146.85385132 289.12182617]
[157.16514587 300.14816284]
[164.11816406 313.54809570]
[167.19696045 328.32723999]
[166.17306519 343.38891602]
[161.12246704 357.61544800]
[152.41993713 369.95111084]
[140.71128845 379.48052979]
[126.86534119 385.49655151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 38]
[27 37]
[28 36]
[29 35]
[30 34]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[49 57]
[50 56]
[67 113]
[68 112]
[69 111]
[70 110]
[81 99]
[82 98]
[83 97]
[84 96]
[86 94]
[87 93]
[115 130]
[116 129]
[117 128]
[118 127]
[119 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
