%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCAAACAUGGGGGGGGGGCACUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUxxxxxxxxxxGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCAGCCCCCCCCCCACCCAAACAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 398.15414429]
[71.19830322 392.13812256]
[59.48964310 382.60870361]
[50.78712082 370.27304077]
[45.73651886 356.04650879]
[44.71262741 340.98483276]
[47.79142761 326.20565796]
[54.74444962 312.80572510]
[65.05573273 301.77941895]
[77.96011353 293.94488525]
[92.50000000 289.88357544]
[92.50000000 274.88357544]
[92.50000000 259.88357544]
[92.50000000 244.88359070]
[92.50000000 229.88359070]
[92.50000000 214.88359070]
[92.50000000 199.88359070]
[92.50000000 184.88359070]
[92.50000000 169.88359070]
[92.50000000 154.88359070]
[92.50000000 139.88359070]
[85.90717316 139.03611755]
[79.40040588 137.08435059]
[73.16664124 134.03558350]
[67.39243317 129.92900085]
[62.25841904 124.83567810]
[57.93391037 118.85768127]
[43.29040909 122.10850525]
[28.64690971 125.35932922]
[14.00340748 128.61015320]
[2.28813839 140.08554077]
[-13.43259144 135.41749573]
[-16.98664284 119.40809631]
[-4.71791267 108.52645111]
[10.75258160 113.96665955]
[25.39608383 110.71582794]
[40.03958511 107.46500397]
[54.68308640 104.21417999]
[55.77439499 89.25392914]
[41.75768280 83.91241455]
[27.74097061 78.57090759]
[15.87917519 88.32761383]
[0.72558033 90.83044434]
[-13.64357185 85.40614319]
[-23.36305237 73.51382446]
[-25.81836891 58.35245895]
[-20.34905434 44.00037766]
[-8.42632675 34.31822205]
[6.74266005 31.91044044]
[21.07752419 37.42471695]
[30.72226143 49.37773132]
[33.08248138 64.55419159]
[47.09919739 69.89570618]
[61.11590958 75.23722076]
[78.15679169 61.50490189]
[98.79031372 57.59564590]
[117.98334503 63.61937714]
[127.00087738 51.63254547]
[136.01840210 39.64571381]
[145.03593445 27.65888023]
[154.05346680 15.67204666]
[163.07099915 3.68521428]
[155.58996582 -18.02421379]
[173.24971008 -40.41981125]
[174.49658203 -55.36789703]
[175.74345398 -70.31598663]
[176.99032593 -85.26406860]
[162.89564514 -90.69697571]
[150.90335083 -99.88182831]
[141.98562622 -112.07407379]
[136.86537170 -126.28532410]
[135.95767212 -141.36354065]
[139.33610535 -156.08641052]
[146.72682190 -169.26040649]
[157.53065491 -179.81758118]
[170.87181091 -186.90208435]
[185.66876221 -189.93965149]
[200.72200012 -188.68400574]
[214.81123352 -183.23693848]
[226.79428101 -174.04003906]
[235.69976807 -161.83885193]
[240.80574036 -147.62246704]
[241.69828796 -132.54333496]
[238.30505371 -117.82386780]
[230.90112305 -104.65730286]
[220.08668518 -94.11100006]
[206.73841858 -87.03988647]
[191.93841553 -84.01719666]
[190.69154358 -69.06910706]
[189.44467163 -54.12102509]
[188.19779968 -39.17293549]
[193.89830017 -34.29911041]
[199.64578247 -48.15430832]
[214.59893799 -46.96959305]
[218.09295654 -32.38220978]
[205.29933167 -24.55145836]
[210.99983215 -19.67763138]
[225.57254028 -23.23239517]
[240.14524841 -26.78715706]
[254.71794128 -30.34191895]
[269.29064941 -33.89667892]
[283.86334229 -37.45144272]
[298.43606567 -41.00620270]
[304.19711304 -55.41417694]
[317.34463501 -63.65569687]
[332.82308960 -62.56172562]
[344.68072510 -52.55292130]
[348.35803223 -37.47787094]
[342.44100952 -23.13324356]
[329.20486450 -15.03483582]
[313.73916626 -16.29665375]
[301.99081421 -26.43350029]
[287.41812134 -22.87873840]
[272.84539795 -19.32397652]
[258.27270508 -15.76921558]
[243.70001221 -12.21445370]
[229.12730408 -8.65969181]
[214.55459595 -5.10492945]
[196.61329651 14.89074802]
[175.05783081 12.70274448]
[166.04029846 24.68957710]
[157.02276611 36.67641068]
[148.00523376 48.66324234]
[138.98770142 60.65007401]
[129.97018433 72.63690948]
[138.58605957 87.42753601]
[140.33738708 104.45484161]
[134.91261292 120.68961334]
[123.27680206 133.24365234]
[107.50000000 139.88359070]
[107.50000000 154.88359070]
[107.50000000 169.88359070]
[107.50000000 184.88359070]
[107.50000000 199.88359070]
[107.50000000 214.88359070]
[107.50000000 229.88359070]
[107.50000000 244.88359070]
[107.50000000 259.88357544]
[107.50000000 274.88357544]
[107.50000000 289.88357544]
[122.03988647 293.94488525]
[134.94427490 301.77941895]
[145.25555420 312.80572510]
[152.20857239 326.20565796]
[155.28736877 340.98483276]
[154.26348877 356.04650879]
[149.21287537 370.27304077]
[140.51036072 382.60870361]
[128.80169678 392.13812256]
[114.95575714 398.15414429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 38]
[28 37]
[29 36]
[30 35]
[39 54]
[40 53]
[41 52]
[57 125]
[58 124]
[59 123]
[60 122]
[61 121]
[62 120]
[64 91]
[65 90]
[66 89]
[67 88]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
[102 113]
[103 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
