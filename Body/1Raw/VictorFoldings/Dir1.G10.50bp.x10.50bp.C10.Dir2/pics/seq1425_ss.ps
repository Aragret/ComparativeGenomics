%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUCAACAGGGGGGGGGGGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAAAAxxxxxxxxxxUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAAACUCCCCCCCCCCAACCUCAAAA\
) } def
/len { sequence length } bind def

/coor [
[97.72470856 386.87500000]
[83.87876892 380.85897827]
[72.17010498 371.32955933]
[63.46758270 358.99389648]
[58.41698074 344.76736450]
[57.39308929 329.70568848]
[60.47188568 314.92654419]
[67.42491150 301.52661133]
[77.73619080 290.50027466]
[90.64057159 282.66577148]
[105.18045807 278.60446167]
[105.18045807 263.60446167]
[105.18045807 248.60444641]
[105.18045807 233.60444641]
[105.18045807 218.60444641]
[105.18045807 203.60444641]
[105.18045807 188.60444641]
[105.18045807 173.60444641]
[105.18045807 158.60444641]
[105.18045807 143.60444641]
[92.74102020 135.22230530]
[78.83846283 140.85426331]
[64.93590546 146.48622131]
[62.89192581 161.70849609]
[53.49794388 173.85957336]
[39.28089905 179.67088318]
[24.06510353 177.57919312]
[11.94353104 168.14717102]
[6.17682362 153.91197205]
[8.31619644 138.70280457]
[17.78616714 126.61086273]
[32.03936386 120.88880157]
[47.24174881 123.07583618]
[59.30395126 132.58366394]
[73.20650482 126.95171356]
[87.10906219 121.31975555]
[80.17463684 110.61936951]
[79.95224762 99.12827301]
[66.29600525 92.92286682]
[52.63976669 86.71746063]
[38.98352432 80.51205444]
[25.32728386 74.30664825]
[12.95598221 78.10200500]
[1.68770611 72.60247040]
[-2.64401031 61.26476669]
[-16.16819954 54.77659988]
[-32.46951294 56.56524277]
[-41.94968414 43.18397141]
[-34.85632324 28.39829254]
[-18.48647690 27.41844368]
[-9.68003559 41.25241089]
[3.84415483 47.74057388]
[21.21329689 45.43561172]
[31.53269005 60.65040588]
[45.18893051 66.85581207]
[58.84517288 73.06121826]
[72.50141144 79.26663208]
[86.15765381 85.47203827]
[100.70711517 78.73323059]
[116.56155396 84.78385925]
[123.67089844 101.21747589]
[116.52014160 118.64920807]
[127.81915283 108.78348541]
[119.04791260 96.60153961]
[111.45595551 83.65176392]
[105.11001587 70.04795837]
[100.06585693 55.90967560]
[96.36780548 41.36117554]
[94.04835510 26.53030777]
[93.12790680 11.54741001]
[93.61453247 -3.45584512]
[95.50396729 -18.34760475]
[98.77959442 -32.99699783]
[103.41264343 -47.27528000]
[109.36238098 -61.05697250]
[116.57653046 -74.22096252]
[124.99169159 -86.65155029]
[134.53390503 -98.23950195]
[145.11930847 -108.88298035]
[156.65489197 -118.48844147]
[169.03926086 -126.97147369]
[182.16358948 -134.25753784]
[195.91252136 -140.28257751]
[210.16523743 -144.99366760]
[224.79649353 -148.34939575]
[239.67770386 -150.32026672]
[254.67807007 -150.88896179]
[269.66577148 -150.05047607]
[284.50912476 -147.81221008]
[299.07763672 -144.19380188]
[313.24328613 -139.22705078]
[326.88159180 -132.95562744]
[339.87271118 -125.43463898]
[352.10247803 -116.73017120]
[363.46337891 -106.91872406]
[373.85559082 -96.08653259]
[383.18777466 -84.32878113]
[391.37792969 -71.74880981]
[398.35409546 -58.45716476]
[404.05493164 -44.57065964]
[408.43032837 -30.21133614]
[411.44189453 -15.50538349]
[413.06307983 -0.58204103]
[413.27972412 14.42754078]
[412.08987427 29.39145470]
[409.50396729 44.17819214]
[405.54476929 58.65781021]
[400.24707031 72.70304871]
[393.65740967 86.19048309]
[385.83370972 99.00157928]
[376.84472656 111.02375031]
[366.76947021 122.15134430]
[355.69644165 132.28657532]
[343.72299194 141.34036255]
[330.95434570 149.23313904]
[317.50268555 155.89553833]
[303.48626709 161.26902771]
[289.02825928 165.30636597]
[274.25567627 167.97207642]
[259.29843140 169.24273682]
[244.28788757 169.10717773]
[229.35600281 167.56658936]
[214.63400269 164.63450623]
[200.25125122 160.33671570]
[186.33416748 154.71095276]
[173.00503540 147.80670166]
[160.38101196 139.68460083]
[148.57304382 130.41604614]
[137.68487549 120.08248901]
[126.38587189 129.94821167]
[120.18045807 143.60444641]
[120.18045807 158.60444641]
[120.18045807 173.60444641]
[120.18045807 188.60444641]
[120.18045807 203.60444641]
[120.18045807 218.60444641]
[120.18045807 233.60444641]
[120.18045807 248.60444641]
[120.18045807 263.60446167]
[120.18045807 278.60446167]
[134.72035217 282.66577148]
[147.62472534 290.50027466]
[157.93601990 301.52661133]
[164.88903809 314.92654419]
[167.96783447 329.70568848]
[166.94393921 344.76736450]
[161.89334106 358.99389648]
[153.19081116 371.32955933]
[141.48216248 380.85897827]
[127.63621521 386.87500000]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 36]
[22 35]
[23 34]
[38 58]
[39 57]
[40 56]
[41 55]
[42 54]
[45 52]
[46 51]
[62 130]
[63 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
