%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUCCAGGGGGGGGGGACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCxxxxxxxxxxAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAAAACCCCCCCCCCACCCAAUCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 389.79150391]
[71.19830322 383.77548218]
[59.48964310 374.24606323]
[50.78712082 361.91040039]
[45.73651886 347.68386841]
[44.71262741 332.62219238]
[47.79142761 317.84304810]
[54.74444962 304.44311523]
[65.05573273 293.41677856]
[77.96011353 285.58227539]
[92.50000000 281.52096558]
[92.50000000 266.52096558]
[92.50000000 251.52095032]
[92.50000000 236.52095032]
[92.50000000 221.52095032]
[92.50000000 206.52095032]
[92.50000000 191.52095032]
[92.50000000 176.52095032]
[92.50000000 161.52095032]
[92.50000000 146.52095032]
[73.26289368 138.80175781]
[59.19936371 123.57450867]
[45.18264771 128.91601562]
[31.16593552 134.25753784]
[17.14922333 139.59904480]
[12.19352341 154.43060303]
[-1.16325927 162.56265259]
[-16.61446190 160.15551758]
[-26.86449814 148.34573364]
[-27.07361412 132.70954895]
[-17.14307213 120.62988281]
[-1.76177073 117.81038666]
[11.80771065 125.58233643]
[25.82442284 120.24082184]
[39.84113693 114.89930725]
[53.85784912 109.55779266]
[52.88349152 99.30427551]
[54.16016388 89.08399963]
[57.62688065 79.38524628]
[63.11800766 70.67137909]
[70.37120819 63.35871124]
[62.91629791 50.34239960]
[55.46138763 37.32609177]
[48.00647736 24.30978203]
[39.11412811 12.22979259]
[24.05098152 7.39117241]
[21.05162621 -7.19831419]
[10.83814621 -18.18397903]
[0.62466598 -29.16964340]
[-1.42817342 -14.31077957]
[-13.26936150 -5.10283375]
[-28.17601585 -6.77365494]
[-37.68482590 -18.37462807]
[-36.39712143 -33.31925201]
[-25.04400826 -43.12265778]
[-10.06986427 -42.21825790]
[-18.83607101 -54.39009476]
[-27.60227966 -66.56192780]
[-42.76975250 -72.79729462]
[-44.68503952 -89.08421326]
[-31.37785721 -98.66809845]
[-16.53749275 -91.68987274]
[-15.43044186 -75.32814026]
[-6.66423512 -63.15630341]
[2.10197210 -50.98446655]
[11.61033058 -39.38312531]
[21.82381058 -28.39745903]
[32.03728867 -17.41179466]
[46.36989975 -13.35894203]
[50.09979248 2.01631308]
[48.54032516 -12.90240192]
[53.97298431 -26.88404083]
[65.19611359 -36.83599472]
[79.72726440 -40.55698013]
[94.35227203 -37.22395325]
[105.83622742 -27.57414436]
[111.63898468 -13.74200726]
[110.47702026 1.21291995]
[102.60736084 13.98274422]
[89.77069092 21.74289894]
[74.80637360 22.77690887]
[61.02278519 16.85487175]
[68.47769928 29.87117958]
[75.93260956 42.88748932]
[83.38751984 55.90380096]
[100.82484436 52.88557434]
[118.14582825 56.51232147]
[132.90754700 66.27252197]
[143.02801514 80.78961945]
[157.52362061 76.93245697]
[172.01921082 73.07530212]
[186.51481628 69.21813965]
[201.01040649 65.36097717]
[215.33300781 60.90416336]
[229.45780945 55.85540771]
[243.58261108 50.80665207]
[243.37074280 35.66618347]
[248.08882141 21.27804756]
[257.22506714 9.20296288]
[269.78845215 0.75074601]
[284.41619873 -3.16177106]
[299.52160645 -2.11018777]
[313.46612549 3.79142785]
[324.73718262 13.90291309]
[332.11215210 27.12744904]
[334.79107666 42.03053665]
[332.48336792 56.99560547]
[325.43933105 70.39934540]
[314.42306519 80.78783417]
[300.62954712 87.03419495]
[285.55493164 88.46086884]
[270.83447266 84.91310883]
[258.06491089 76.77574158]
[248.63136292 64.93145752]
[234.50656128 69.98020935]
[220.38175964 75.02896881]
[219.06623840 77.57390594]
[216.63064575 79.73303986]
[213.22348022 81.06463623]
[209.15469360 81.19149017]
[204.86756897 79.85657501]
[190.37197876 83.71373749]
[175.87637329 87.57089233]
[161.38078308 91.42805481]
[146.88517761 95.28521729]
[146.58091736 107.11815643]
[143.33737183 118.50193024]
[137.35923767 128.71823120]
[129.02371216 137.12240601]
[118.85678864 143.18415833]
[107.50000000 146.52095032]
[107.50000000 161.52095032]
[107.50000000 176.52095032]
[107.50000000 191.52095032]
[107.50000000 206.52095032]
[107.50000000 221.52095032]
[107.50000000 236.52095032]
[107.50000000 251.52095032]
[107.50000000 266.52096558]
[107.50000000 281.52096558]
[122.03988647 285.58227539]
[134.94427490 293.41677856]
[145.25555420 304.44311523]
[152.20857239 317.84304810]
[155.28736877 332.62219238]
[154.26348877 347.68386841]
[149.21287537 361.91040039]
[140.51036072 374.24606323]
[128.80169678 383.77548218]
[114.95575714 389.79150391]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 36]
[23 35]
[24 34]
[25 33]
[41 85]
[42 84]
[43 83]
[44 82]
[45 70]
[47 68]
[48 67]
[49 66]
[56 65]
[57 64]
[58 63]
[89 125]
[90 124]
[91 123]
[92 122]
[93 121]
[94 116]
[95 115]
[96 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
