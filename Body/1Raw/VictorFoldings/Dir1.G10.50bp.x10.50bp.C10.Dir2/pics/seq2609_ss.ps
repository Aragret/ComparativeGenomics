%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAACCAACGGGGGGGGGGAAGUCAUUAUUACCCUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAxxxxxxxxxxCUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCCCCCCCCCCCAUCACCCAAC\
) } def
/len { sequence length } bind def

/coor [
[74.03872681 435.07144165]
[60.81853104 427.79898071]
[49.93172836 417.35195923]
[42.12059784 404.44271851]
[37.91771698 389.95141602]
[37.60964584 374.86605835]
[41.21738434 360.21524048]
[48.49495697 346.99786377]
[58.94616699 336.11508179]
[71.85842896 328.30892944]
[86.35136414 324.11166382]
[86.03930664 309.11489868]
[85.72724915 294.11813354]
[85.41519928 279.12139893]
[85.10314178 264.12463379]
[84.79108429 249.12788391]
[84.47902679 234.13113403]
[84.16696930 219.13438416]
[83.85491180 204.13761902]
[83.54286194 189.14086914]
[83.23080444 174.14411926]
[82.13948822 159.18386841]
[80.27188110 144.30058289]
[78.40426636 129.41731262]
[79.59922791 144.36962891]
[74.41178894 158.44409180]
[63.79887390 169.04437256]
[49.71824265 174.21505737]
[34.76735306 173.00227356]
[21.70418739 165.62977600]
[12.93851376 153.45755005]
[10.08733177 138.73101807]
[13.67660046 124.16677856]
[23.04420662 112.45149231]
[36.46210861 105.74627686]
[51.45510864 105.28804779]
[65.25495148 111.15955353]
[51.73076630 104.67138672]
[38.01071167 98.60837555]
[24.10815430 92.97641754]
[10.20559883 87.34445953]
[-3.69695687 81.71250916]
[-16.24069977 90.69348907]
[-31.64978409 91.44429016]
[-45.00722504 83.72532654]
[-52.05071259 69.99970245]
[-50.53269577 54.64720535]
[-40.93756485 42.56676483]
[-26.32709885 37.61320496]
[-11.36343670 41.36718750]
[-0.82143247 52.63083267]
[1.93499970 67.80995178]
[15.83755589 73.44190979]
[29.74011230 79.07386017]
[43.64266968 84.70581818]
[47.06476974 83.63032532]
[51.18515396 84.19963837]
[55.20594025 86.72662354]
[58.21892929 91.14720154]
[71.74311829 97.63536072]
[75.66013336 88.32756805]
[82.34209442 81.42008972]
[90.63163757 77.61032867]
[99.25299072 77.10322571]
[107.00384521 79.62277222]
[116.51220703 68.02143097]
[126.02056122 56.42008591]
[135.52891541 44.81874466]
[145.03727722 33.21740341]
[154.54563904 21.61606216]
[140.25141907 26.16306305]
[125.27399445 25.34034348]
[111.56381226 19.25504112]
[100.90628052 8.69961739]
[94.68927765 -4.95134735]
[93.72241211 -19.92015457]
[98.13159180 -34.25748825]
[107.34263611 -46.09626389]
[120.15603638 -53.89477921]
[134.90315247 -56.63747025]
[149.66355896 -53.96716690]
[162.51506042 -46.23161316]
[171.78408813 -34.43817139]
[176.26356506 -20.12264633]
[175.37014771 -5.14927578]
[169.22120667 8.53056717]
[181.83233643 0.40902478]
[194.44346619 -7.71251726]
[207.05459595 -15.83405972]
[219.66571045 -23.95560074]
[232.27684021 -32.07714462]
[228.89910889 -46.85437775]
[230.78225708 -61.89530945]
[237.69891357 -75.38366699]
[248.81384277 -85.69066620]
[262.78485107 -91.57168579]
[277.92489624 -92.31656647]
[292.40573120 -87.83536530]
[304.47872925 -78.66919708]
[312.68600464 -65.92493439]
[316.03652954 -51.14149857]
[314.12564087 -36.10406494]
[307.18414307 -22.62847900]
[296.05026245 -12.34197998]
[282.06842041 -6.48671436]
[266.92703247 -5.76973391]
[252.45446777 -10.27761745]
[240.39839172 -19.46601486]
[227.78726196 -11.34447384]
[215.17613220 -3.22293139]
[202.56500244 4.89861059]
[189.95387268 13.02015305]
[177.34274292 21.14169502]
[166.14698792 31.12442207]
[156.63862610 42.72576141]
[147.13026428 54.32710266]
[137.62190247 65.92844391]
[128.11354065 77.52978516]
[118.60518646 89.13112640]
[120.00542450 114.91169739]
[93.28754425 127.54969788]
[95.15515900 142.43296814]
[97.02277374 157.31625366]
[108.39370728 147.53352356]
[123.16999817 150.11445618]
[130.55137634 163.17260742]
[125.14263916 177.16352844]
[110.89715576 181.86097717]
[98.22755432 173.83206177]
[98.53961182 188.82881165]
[98.85166931 203.82556152]
[99.16372681 218.82232666]
[99.47578430 233.81907654]
[99.78783417 248.81582642]
[100.09989166 263.81259155]
[100.41194916 278.80932617]
[100.72400665 293.80609131]
[101.03606415 308.80285645]
[101.34812164 323.79959106]
[116.00311279 327.39038086]
[129.22891235 334.65261841]
[140.12379456 345.09121704]
[147.94488525 357.99441528]
[152.15895081 372.48248291]
[152.47868347 387.56759644]
[148.88224792 402.22119141]
[141.61488342 415.44421387]
[131.17208862 426.33505249]
[118.26585388 434.15115356]
[103.77616119 438.35961914]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 123]
[23 122]
[24 121]
[37 60]
[38 59]
[39 55]
[40 54]
[41 53]
[42 52]
[65 119]
[66 118]
[67 117]
[68 116]
[69 115]
[70 114]
[86 113]
[87 112]
[88 111]
[89 110]
[90 109]
[91 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
