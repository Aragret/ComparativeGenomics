%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACAACAUAGGGGGGGGGGCCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCxxxxxxxxxxCUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCACCCCCCCCCCUAAACAACAUA\
) } def
/len { sequence length } bind def

/coor [
[100.52610779 469.59088135]
[86.50415802 464.03787231]
[74.30420685 455.17153931]
[64.69313049 443.54922485]
[58.27510834 429.90151978]
[55.45357132 415.08633423]
[56.40588760 400.03497314]
[61.07219315 385.69354248]
[69.15915680 372.96359253]
[80.15843201 362.64532471]
[93.37859344 355.38732910]
[107.98860168 351.64590454]
[107.98860168 336.64590454]
[107.98860168 321.64590454]
[107.98860168 306.64590454]
[107.98860168 291.64590454]
[107.98860168 276.64590454]
[107.98860168 261.64590454]
[107.98860168 246.64590454]
[107.98860168 231.64590454]
[107.98860168 216.64590454]
[96.06936646 203.58326721]
[100.61401367 184.89492798]
[120.10119629 177.67007446]
[116.74193573 163.05107117]
[113.38267517 148.43205261]
[77.23164368 96.51882935]
[61.85816574 92.78161621]
[57.81213379 78.44708252]
[45.97827530 87.11126709]
[32.75167084 93.43930817]
[18.58795357 97.21491241]
[3.97472596 98.30966949]
[-10.58522797 96.68743896]
[-24.59123611 92.40555573]
[-37.56196213 85.61276245]
[-49.05194092 76.54405975]
[-58.66688156 65.51261139]
[-66.07719421 52.89888000]
[-71.02929688 39.13752365]
[-73.35427094 24.70243454]
[-72.97365570 10.09039593]
[-69.90206909 -4.19600105]
[-64.24665070 -17.66564751]
[-56.20335770 -29.85579872]
[-66.97203827 -40.29780960]
[-77.74071503 -50.73981857]
[-88.50939178 -61.18182755]
[-99.27807617 -71.62383270]
[-110.04675293 -82.06584167]
[-124.16265869 -76.35086060]
[-139.38244629 -76.87790680]
[-153.06921387 -83.55567169]
[-162.85162354 -95.22718811]
[-167.03482056 -109.87030029]
[-164.89404297 -124.94799805]
[-156.80020142 -137.84797668]
[-144.15557861 -146.33525085]
[-129.15097046 -148.93931580]
[-114.38597107 -145.20904541]
[-102.41873932 -135.79069519]
[-95.32266235 -122.31607056]
[-94.32717133 -107.11972809]
[-99.60474396 -92.83452606]
[-88.83606720 -82.39251709]
[-78.06738281 -71.95050812]
[-67.29870605 -61.50849533]
[-56.53002930 -51.06648636]
[-45.76134872 -40.62447739]
[-33.16429901 -49.41465378]
[-19.09616089 -55.59387207]
[-4.09153032 -58.92536163]
[11.27902699 -59.28059387]
[26.43067551 -56.64424896]
[40.78656006 -51.11487198]
[53.79976273 -42.90119171]
[64.97414398 -32.31422806]
[73.88327026 -19.75552940]
[80.18665314 -5.70193672]
[83.64279938 9.31252193]
[84.11844635 24.71692276]
[81.59369659 39.92515182]
[76.16283417 54.35821915]
[68.03083801 67.46627808]
[82.61889648 70.47257996]
[87.45034790 85.53802490]
[102.38636017 84.15399933]
[111.30251312 72.09156799]
[120.21866608 60.02913666]
[119.27075195 44.01411057]
[131.29664612 33.39537811]
[147.07110596 36.31871796]
[154.49331665 50.54159546]
[147.86959839 65.15343475]
[132.28109741 68.94528961]
[123.36494446 81.00772095]
[114.44879150 93.07015228]
[118.71902466 99.23579407]
[133.66845703 98.00514984]
[127.25948334 111.56707764]
[131.52970886 117.73271942]
[145.95709229 113.62777710]
[160.38447571 109.52282715]
[174.81185913 105.41788483]
[189.23924255 101.31294250]
[198.27061462 88.05345154]
[214.27844238 86.99102020]
[224.98291016 98.94065857]
[222.17247009 114.73562622]
[208.00303650 122.25936890]
[193.34419250 115.74032593]
[178.91680908 119.84526825]
[164.48942566 123.95021057]
[150.06204224 128.05516052]
[135.63465881 132.16011047]
[128.00169373 145.07279968]
[131.36094666 159.69180298]
[134.72019958 174.31082153]
[144.36201477 185.80148315]
[158.17559814 191.64826965]
[171.98918152 197.49505615]
[186.54060364 191.32809448]
[201.15917969 197.33415222]
[207.17196655 211.94996643]
[201.01167297 226.50422668]
[186.33311462 232.36213684]
[171.84478760 226.04832458]
[166.14239502 211.30863953]
[152.32881165 205.46185303]
[138.51522827 199.61506653]
[132.91661072 211.10411072]
[122.98860168 216.64590454]
[122.98860168 231.64590454]
[122.98860168 246.64590454]
[122.98860168 261.64590454]
[122.98860168 276.64590454]
[122.98860168 291.64590454]
[122.98860168 306.64590454]
[122.98860168 321.64590454]
[122.98860168 336.64590454]
[122.98860168 351.64590454]
[137.59861755 355.38732910]
[150.81877136 362.64532471]
[161.81805420 372.96359253]
[169.90501404 385.69354248]
[174.57131958 400.03497314]
[175.52363586 415.08633423]
[172.70210266 429.90151978]
[166.28407288 443.54922485]
[156.67300415 455.17153931]
[144.47305298 464.03787231]
[130.45111084 469.59088135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 118]
[25 117]
[26 116]
[27 86]
[29 84]
[45 69]
[46 68]
[47 67]
[48 66]
[49 65]
[50 64]
[87 97]
[88 96]
[89 95]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
