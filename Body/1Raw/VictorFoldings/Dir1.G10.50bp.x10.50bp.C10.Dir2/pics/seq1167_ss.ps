%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAACCCCAGGGGGGGGGGGGGUUGGUCAAUUUCGUGCCAGCCACCGCGGUCACACGAUUAACCCAAGUxxxxxxxxxxAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUAAUCAACCCCCCCCCCACUAACCUCA\
) } def
/len { sequence length } bind def

/coor [
[58.88740921 370.87710571]
[45.04147339 364.86108398]
[33.33280945 355.33166504]
[24.63028526 342.99600220]
[19.57968330 328.76947021]
[18.55579376 313.70779419]
[21.63459206 298.92861938]
[28.58761406 285.52871704]
[38.89889908 274.50238037]
[51.80327988 266.66787720]
[66.34316254 262.60653687]
[66.34316254 247.60655212]
[66.34316254 232.60655212]
[66.34316254 217.60655212]
[66.34316254 202.60655212]
[66.34316254 187.60655212]
[66.34316254 172.60655212]
[66.34316254 157.60655212]
[66.34316254 142.60655212]
[66.34316254 127.60655212]
[84.69084930 86.45845795]
[79.78929901 72.28189850]
[74.88774872 58.10533905]
[69.98619843 43.92878342]
[64.18789673 36.78514481]
[65.13348389 29.40601540]
[60.52791977 15.13055515]
[55.92235565 0.85509497]
[55.08662415 15.83179569]
[45.25809479 27.16316986]
[30.54984856 30.10721970]
[17.11704445 23.43190956]
[10.58109379 9.93074894]
[13.67718697 -4.74624681]
[25.10965919 -14.45699215]
[40.09541702 -15.13734436]
[25.86863899 -19.89115906]
[11.64186001 -24.64497375]
[-2.63360047 -29.25053787]
[-16.95619774 -33.70735550]
[-26.14657021 -33.27270889]
[-31.52865791 -38.40873718]
[-45.75543594 -43.16255188]
[-61.70720291 -39.35819244]
[-72.77967834 -51.45498657]
[-67.58244324 -67.00878906]
[-51.46197128 -70.01918030]
[-41.00162125 -57.38933182]
[-26.77484322 -52.63551712]
[-12.49938202 -48.02995300]
[1.82321525 -43.57313538]
[9.19210720 -44.59542847]
[16.39567566 -38.87175369]
[30.62245369 -34.11793900]
[44.84923172 -29.36412430]
[49.19219971 -28.11108971]
[52.85391998 -25.95045471]
[55.67359543 -23.05724335]
[59.98117828 -37.42542648]
[64.28876495 -51.79360962]
[68.59634399 -66.16179657]
[72.90393066 -80.52997589]
[59.31154251 -86.94126129]
[46.82657242 -95.30686188]
[35.72795105 -105.43988800]
[26.26361847 -117.11396790]
[18.64501381 -130.06828308]
[13.04233932 -144.01345825]
[9.58076096 -158.63792419]
[8.33761024 -173.61499023]
[9.34066105 -188.61003113]
[12.56750488 -203.28808594]
[17.94605255 -217.32122803]
[25.35614395 -230.39593506]
[34.63223648 -242.22013855]
[45.56710052 -252.52966309]
[57.91644287 -261.09420776]
[71.40438080 -267.72244263]
[85.72958374 -272.26623535]
[100.57201385 -274.62414551]
[115.60010529 -274.74346924]
[130.47810364 -272.62152100]
[144.87365723 -268.30575562]
[158.46513367 -261.89251709]
[170.94889832 -253.52514648]
[182.04608154 -243.39053345]
[191.50875854 -231.71511841]
[199.12551880 -218.75970459]
[204.72619629 -204.81373596]
[208.18569946 -190.18876648]
[209.42671204 -175.21153259]
[208.42152405 -160.21662903]
[205.19259644 -145.53904724]
[199.81204224 -131.50666809]
[192.40010071 -118.43301392]
[183.12231445 -106.61013031]
[172.18598938 -96.30216217]
[159.83541870 -87.73937225]
[146.34654236 -81.11308289]
[132.02069092 -76.57130432]
[117.17792511 -74.21551514]
[102.14981842 -74.09833527]
[87.27211761 -76.22239685]
[82.96453094 -61.85420990]
[78.65694427 -47.48602676]
[74.34936523 -33.11784363]
[70.04177856 -18.74965858]
[70.19781494 -3.75046945]
[74.80337524 10.52499104]
[79.40894318 24.80045128]
[84.16275787 39.02722931]
[89.06430817 53.20378876]
[93.96585846 67.38034821]
[98.86740875 81.55690765]
[103.97504425 67.45328522]
[117.83271027 61.71175003]
[131.41830444 68.07034302]
[135.88685608 82.38928223]
[128.32910156 95.34615326]
[113.66599274 98.50540924]
[127.05227661 105.27352905]
[140.43856812 112.04164124]
[156.77355957 110.59251404]
[165.97329712 124.16811371]
[158.57388306 138.80302429]
[142.18719482 139.44210815]
[133.67045593 125.42792511]
[120.28416443 118.65981293]
[106.89788055 111.89170074]
[100.50920105 115.82041168]
[81.34316254 127.60655212]
[81.34316254 142.60655212]
[81.34316254 157.60655212]
[81.34316254 172.60655212]
[81.34316254 187.60655212]
[81.34316254 202.60655212]
[81.34316254 217.60655212]
[81.34316254 232.60655212]
[81.34316254 247.60655212]
[81.34316254 262.60653687]
[95.88304901 266.66787720]
[108.78742981 274.50238037]
[119.09871674 285.52871704]
[126.05174255 298.92861938]
[129.13053894 313.70779419]
[128.10664368 328.76947021]
[123.05604553 342.99600220]
[114.35352325 355.33166504]
[102.64485931 364.86108398]
[88.79891968 370.87710571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 114]
[22 113]
[23 112]
[24 111]
[26 110]
[27 109]
[28 108]
[36 55]
[37 54]
[38 53]
[39 51]
[40 50]
[42 49]
[43 48]
[58 107]
[59 106]
[60 105]
[61 104]
[62 103]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
