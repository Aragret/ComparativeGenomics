%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCAUUAAAGGGGGGGGGGCGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUxxxxxxxxxxCCACCCCAUCAUACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUCCCCCCCCCCAACCCCACUAAA\
) } def
/len { sequence length } bind def

/coor [
[86.51888275 479.27999878]
[72.81672668 473.01910400]
[60.85161209 463.86575317]
[51.22369766 452.27908325]
[44.41592026 438.84027100]
[40.76975250 424.22338867]
[40.46808243 409.16162109]
[43.52604675 394.41046143]
[49.79025650 380.70983887]
[58.94650269 368.74694824]
[70.53550720 359.12182617]
[83.97598267 352.31732178]
[98.59374237 348.67468262]
[98.28974152 333.67776489]
[97.98573303 318.68084717]
[97.68173218 303.68392944]
[97.37772369 288.68701172]
[97.07372284 273.69009399]
[96.76971436 258.69317627]
[96.46571350 243.69625854]
[96.16171265 228.69932556]
[95.70574188 213.70626831]
[95.09785461 198.71858215]
[94.48997498 183.73091125]
[85.79316711 175.27018738]
[85.19735718 162.74940491]
[93.57056427 152.88815308]
[93.26655579 137.89123535]
[92.96255493 122.89431763]
[80.91584778 117.24270630]
[73.04290771 105.37825012]
[72.42680359 90.21845245]
[57.44605255 89.45870972]
[51.30918884 92.16395569]
[45.59890366 91.43029022]
[41.87730026 88.35242462]
[26.93964767 86.98620605]
[12.00199604 85.61998749]
[-1.19851613 94.73733521]
[-16.51487350 89.96357727]
[-22.19767761 74.96073914]
[-13.88756847 61.23770523]
[2.04065084 59.32161713]
[13.36821270 70.68233490]
[28.30586433 72.04855347]
[43.24351883 73.41477203]
[58.20579147 74.47796631]
[73.18653870 75.23770142]
[85.41051483 66.54435730]
[89.60997772 52.14419937]
[93.80944061 37.74404144]
[98.00890350 23.34388542]
[102.20836639 8.94372749]
[106.40782928 -5.45642900]
[92.49409485 -11.09548664]
[79.22225189 -18.11326027]
[66.72848511 -26.43773460]
[55.14101028 -35.98348999]
[44.57872772 -46.65256882]
[35.15002823 -58.33548737]
[26.95166588 -70.91236877]
[20.06776428 -84.25414276]
[14.56896687 -98.22389984]
[10.51170063 -112.67829895]
[7.93759871 -127.46900177]
[6.87307549 -142.44424438]
[7.32905531 -157.45034790]
[9.30085945 -172.33332825]
[12.76825237 -186.94044495]
[17.69565582 -201.12184143]
[24.03250313 -214.73196411]
[31.71376991 -227.63114929]
[40.66063309 -239.68704224]
[50.78128433 -250.77593994]
[61.97186661 -260.78402710]
[74.11754608 -269.60861206]
[87.09369659 -277.15914917]
[100.76715088 -283.35815430]
[114.99759674 -288.14202881]
[129.63902283 -291.46163940]
[144.54115295 -293.28295898]
[159.55110168 -293.58731079]
[174.51481628 -292.37152100]
[189.27876282 -289.64810181]
[203.69142151 -285.44497681]
[217.60491943 -279.80532837]
[230.87644958 -272.78695679]
[243.36984253 -264.46194458]
[254.95690918 -254.91567993]
[265.51870728 -244.24612427]
[274.94689941 -232.56278992]
[283.14471436 -219.98554993]
[290.02801514 -206.64347839]
[295.52621460 -192.67347717]
[299.58282471 -178.21890259]
[302.15628052 -163.42808533]
[303.22015381 -148.45278931]
[302.76351929 -133.44671631]
[300.79104614 -118.56381989]
[297.32302856 -103.95684814]
[292.39498901 -89.77567291]
[286.05755615 -76.16583252]
[278.37570190 -63.26697922]
[269.42831421 -51.21147919]
[259.30718994 -40.12303543]
[248.11614990 -30.11543846]
[235.97007751 -21.29137993]
[222.99360657 -13.74141312]
[209.31987000 -7.54300976]
[195.08921814 -2.75977635]
[180.44764709 0.55920267]
[165.54542542 2.37986946]
[150.53547668 2.68354130]
[135.57180786 1.46710145]
[120.80798340 -1.25696695]
[116.60852051 13.14318943]
[112.40906525 27.54334641]
[108.20960236 41.94350433]
[104.01013947 56.34366226]
[99.81067657 70.74382019]
[114.86690521 76.04222107]
[124.39135742 88.11080170]
[125.92082977 102.81867218]
[119.60264587 115.53593445]
[107.95947266 122.59031677]
[108.26347351 137.58723450]
[108.56748199 152.58415222]
[118.46556091 168.07957458]
[109.47765350 183.12303162]
[110.08553314 198.11070251]
[110.69342041 213.09837341]
[114.18518829 221.60418701]
[111.15863037 228.39532471]
[111.46263123 243.39224243]
[111.76663971 258.38916016]
[112.07064056 273.38607788]
[112.37464142 288.38299561]
[112.67864990 303.37991333]
[112.98265076 318.37683105]
[113.28665924 333.37374878]
[113.59066010 348.37066650]
[128.34403992 351.41790771]
[142.04922485 357.67218018]
[154.01876831 366.81970215]
[163.65229797 378.40173340]
[170.46658325 391.83724976]
[174.11984253 406.45236206]
[174.42880249 421.51397705]
[171.37799072 436.26660156]
[165.12042236 449.97027588]
[155.96997070 461.93762207]
[144.38563538 471.56832886]
[130.94845581 478.37936401]
[116.33246613 482.02908325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 131]
[23 130]
[24 129]
[27 127]
[28 126]
[29 125]
[32 48]
[33 47]
[36 46]
[37 45]
[38 44]
[49 120]
[50 119]
[51 118]
[52 117]
[53 116]
[54 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
