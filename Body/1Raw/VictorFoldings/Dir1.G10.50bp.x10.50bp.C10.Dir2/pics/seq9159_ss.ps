%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCACCAUUGGGGGGGGGGUCCGACGGCAUCUACGGCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGxxxxxxxxxxCCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACCCCCCCCCCCUCCACCAUU\
) } def
/len { sequence length } bind def

/coor [
[93.71804047 381.36798096]
[79.87210846 375.35192871]
[68.16344452 365.82254028]
[59.46091843 353.48684692]
[54.41031647 339.26034546]
[53.38642502 324.19866943]
[56.46522522 309.41949463]
[63.41824722 296.01956177]
[73.72953033 284.99322510]
[86.63391113 277.15872192]
[101.17379761 273.09741211]
[101.17379761 258.09741211]
[101.17379761 243.09741211]
[101.17379761 228.09741211]
[101.17379761 213.09741211]
[101.17379761 198.09741211]
[101.17379761 183.09741211]
[101.17379761 168.09741211]
[101.17379761 153.09741211]
[101.17379761 138.09741211]
[101.17379761 123.09741211]
[88.15748596 115.64250183]
[75.21943665 123.23241425]
[64.61700439 136.46211243]
[48.96928787 129.93637085]
[50.90827560 113.09366608]
[67.62952423 110.29435730]
[80.56758118 102.70444489]
[83.20644379 87.93839264]
[73.69808960 76.33705139]
[64.18972778 64.73571014]
[54.68136978 53.13436890]
[45.17301178 41.53302765]
[30.44100761 35.76425934]
[28.35751534 21.01609612]
[18.84915543 9.41475582]
[9.34079742 -2.18658566]
[-3.74719405 4.22722054]
[-17.93013000 7.55247164]
[-32.48995590 7.62427378]
[-46.69030380 4.44235992]
[-59.81373978 -1.82906294]
[-71.19800568 -10.86978722]
[-80.26945496 -22.21995163]
[-86.57193756 -35.30343246]
[-89.78973389 -49.45708084]
[-89.76338959 -63.96434784]
[-86.49761200 -78.09154510]
[-80.16083527 -91.12496185]
[-71.07656097 -102.40691376]
[-80.34151459 -114.20355988]
[-89.60646057 -126.00019836]
[-99.23498535 -137.50199890]
[-109.21771240 -148.69776917]
[-119.20043945 -159.89352417]
[-129.18316650 -171.08929443]
[-144.23724365 -178.88745117]
[-140.91122437 -195.51194763]
[-124.01568604 -196.91802979]
[-117.98740387 -181.07202148]
[-108.00467682 -169.87625122]
[-98.02194977 -158.68049622]
[-88.03922272 -147.48472595]
[-84.49411011 -146.93728638]
[-81.04944611 -144.60577393]
[-78.55921173 -140.56211853]
[-77.80982208 -135.26515198]
[-68.54486847 -123.46850586]
[-59.27992249 -111.67186737]
[-45.22969818 -118.13295746]
[-30.03583145 -121.06047058]
[-14.57339764 -120.28157043]
[0.26604789 -115.83699799]
[13.62587929 -107.97900391]
[24.73385239 -97.15697479]
[32.94673920 -83.99179077]
[37.78757858 -69.24018097]
[38.97336960 -53.75120544]
[36.43162155 -38.41743469]
[30.30475235 -24.12347221]
[20.94213867 -11.69494438]
[30.45049667 -0.09360287]
[39.95885468 11.50773811]
[54.01075745 16.44669914]
[56.77435303 32.02466583]
[66.28271484 43.62600708]
[75.79106903 55.22734833]
[85.29943085 66.82868958]
[94.80778503 78.43003082]
[108.87930298 83.62545013]
[123.64536285 80.98657990]
[138.41142273 78.34771729]
[147.45428467 65.66449738]
[162.46676636 63.19865799]
[174.50254822 71.89781952]
[189.26860046 69.25895691]
[204.03466797 66.62008667]
[218.80072021 63.98122406]
[233.56677246 61.34236145]
[248.33282471 58.70349503]
[263.09887695 56.06463242]
[265.97760010 41.16236496]
[274.04852295 28.30840492]
[286.22018433 19.24113846]
[300.84643555 15.18684292]
[315.94918823 16.69382668]
[329.48593140 23.55828285]
[339.62594604 34.85184860]
[344.99786377 49.04716492]
[344.87518311 64.22443390]
[339.27447510 78.33104706]
[328.95321655 89.45920563]
[315.30725098 96.10391235]
[300.18209839 97.36653900]
[285.62329102 93.07630920]
[273.59982300 83.81345367]
[265.73776245 70.83068848]
[250.97169495 73.46955109]
[236.20564270 76.10841370]
[221.43957520 78.74728394]
[206.67352295 81.38614655]
[191.90747070 84.02500916]
[177.14141846 86.66387177]
[168.86367798 98.99329376]
[153.92639160 101.87982941]
[141.05027771 93.11377716]
[126.28422546 95.75263977]
[111.51817322 98.39150238]
[118.25856018 107.94828796]
[116.17379761 123.09741211]
[116.17379761 138.09741211]
[116.17379761 153.09741211]
[116.17379761 168.09741211]
[116.17379761 183.09741211]
[116.17379761 198.09741211]
[116.17379761 213.09741211]
[116.17379761 228.09741211]
[116.17379761 243.09741211]
[116.17379761 258.09741211]
[116.17379761 273.09741211]
[130.71368408 277.15872192]
[143.61807251 284.99322510]
[153.92935181 296.01956177]
[160.88237000 309.41949463]
[163.96116638 324.19866943]
[162.93728638 339.26034546]
[157.88667297 353.48684692]
[149.18415833 365.82254028]
[137.47549438 375.35192871]
[123.62955475 381.36798096]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 28]
[23 27]
[29 89]
[30 88]
[31 87]
[32 86]
[33 85]
[35 83]
[36 82]
[37 81]
[50 69]
[51 68]
[52 67]
[53 63]
[54 62]
[55 61]
[56 60]
[90 128]
[91 127]
[92 126]
[95 123]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
