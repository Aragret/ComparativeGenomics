%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAAUACUAAGGGGGGGGGGCUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCxxxxxxxxxxCCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAACCCCCCCCCCUCCUAAUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[139.07139587 466.51986694]
[125.36924744 460.25897217]
[113.40413666 451.10565186]
[103.77622223 439.51895142]
[96.96844482 426.08013916]
[93.32227325 411.46325684]
[93.02060699 396.40148926]
[96.07857513 381.65032959]
[102.34278107 367.94970703]
[111.49902344 355.98681641]
[123.08803558 346.36169434]
[136.52850342 339.55718994]
[151.14627075 335.91455078]
[150.84226990 320.91763306]
[150.53825378 305.92071533]
[150.23425293 290.92379761]
[149.93025208 275.92687988]
[149.62625122 260.92996216]
[149.32223511 245.93304443]
[149.01823425 230.93612671]
[148.71423340 215.93920898]
[144.95445251 201.41804504]
[137.94221497 188.15800476]
[130.92999268 174.89796448]
[123.91775513 161.63792419]
[116.90552521 148.37789917]
[104.11596680 140.74400330]
[104.50442505 124.92755890]
[97.49219513 111.66751862]
[95.18752289 126.48941040]
[86.35959625 138.61656189]
[72.96289062 145.36402893]
[57.96342087 145.23794556]
[44.68203735 138.26623535]
[36.05920792 125.99240875]
[34.00401306 111.13387299]
[38.97146606 96.98027039]
[49.86178970 86.66519165]
[64.26387787 82.47236633]
[78.98914337 85.33007812]
[90.77633667 94.60423279]
[86.86958313 80.12192535]
[81.58353424 72.59870911]
[83.03359222 65.30645752]
[79.42115784 50.74794006]
[75.80872345 36.18943024]
[72.19628143 21.63091469]
[61.36322403 10.10028458]
[65.80770111 -4.11576033]
[62.19526291 -18.67427254]
[58.58282471 -33.23278427]
[54.97038651 -47.79129791]
[39.99480820 -46.49573135]
[25.00093842 -47.55893326]
[10.35801983 -50.95472336]
[-3.57335615 -56.59947968]
[-16.45011520 -64.35419464]
[-27.95515442 -74.02789307]
[-37.80515671 -85.38237000]
[-45.75754929 -98.13799286]
[-51.61650467 -111.98064423]
[-55.23773575 -126.56945038]
[-56.53206635 -141.54513550]
[-55.46762848 -156.53890991]
[-52.07062912 -171.18154907]
[-46.42472458 -185.11247253]
[-38.66894913 -197.98858643]
[-28.99429512 -209.49282837]
[-17.63901138 -219.34188843]
[-4.88273287 -227.29322815]
[8.96040726 -233.15104675]
[23.54950905 -236.77107239]
[38.52530289 -238.06416321]
[53.51899719 -236.99848938]
[68.16135406 -233.60028076]
[82.09179688 -227.95323181]
[94.96727753 -220.19639587]
[106.47071838 -210.52078247]
[116.31884766 -199.16468811]
[124.26913452 -186.40776062]
[130.12580872 -172.56413269]
[133.74462891 -157.97473145]
[135.03648376 -142.99884033]
[133.96957397 -128.00523376]
[130.57015991 -113.36315155]
[124.92195892 -99.43317413]
[117.16405487 -86.55833435]
[107.48750305 -75.05568695]
[96.13059998 -65.20850372]
[83.37300873 -57.25926208]
[69.52890015 -51.40373611]
[73.14133453 -36.84522247]
[76.75377655 -22.28671074]
[80.36621094 -7.72819757]
[90.94087982 2.76111126]
[86.75479889 18.01847839]
[90.36723328 32.57699203]
[93.97966766 47.13550186]
[97.59210968 61.69401550]
[101.35189819 76.21517181]
[105.25865173 90.69747925]
[110.75223541 104.65529633]
[117.76446533 117.91532898]
[131.05558777 126.49767303]
[130.16557312 141.36566162]
[137.17779541 154.62570190]
[144.19003296 167.88574219]
[151.20225525 181.14578247]
[158.21447754 194.40582275]
[158.97743225 179.42523193]
[163.37597656 165.08462524]
[171.14369202 152.25253296]
[181.81013489 141.70613098]
[194.72930908 134.08412170]
[209.11877441 129.84817505]
[224.10704041 129.25479126]
[238.78633118 132.33995056]
[252.26762390 138.91677856]
[263.73443604 148.58695984]
[272.49227905 160.76481628]
[278.01071167 174.71281433]
[279.95556641 189.58619690]
[278.20901489 204.48417664]
[272.87686157 218.50444031]
[264.28201294 230.79788208]
[252.94503784 240.61994934]
[239.55255127 247.37577820]
[224.91564941 250.65618896]
[209.92082214 250.26252747]
[195.47619629 246.21862793]
[182.45663452 238.76939392]
[171.65065002 228.36601257]
[163.71115112 215.63520813]
[164.01515198 230.63212585]
[164.31916809 245.62904358]
[164.62316895 260.62594604]
[164.92716980 275.62286377]
[165.23117065 290.61981201]
[165.53517151 305.61672974]
[165.83918762 320.61364746]
[166.14318848 335.61056519]
[180.89656067 338.65780640]
[194.60174561 344.91204834]
[206.57128906 354.05960083]
[216.20481873 365.64160156]
[223.01911926 379.07711792]
[226.67236328 393.69223022]
[226.98132324 408.75384521]
[223.93051147 423.50646973]
[217.67294312 437.21014404]
[208.52249146 449.17749023]
[196.93815613 458.80819702]
[183.50099182 465.61923218]
[168.88499451 469.26895142]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[28 103]
[29 102]
[41 101]
[42 100]
[44 99]
[45 98]
[46 97]
[47 96]
[49 94]
[50 93]
[51 92]
[52 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
