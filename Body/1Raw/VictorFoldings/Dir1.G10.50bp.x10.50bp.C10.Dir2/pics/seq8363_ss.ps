%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUAACCUCGGGGGGGGGGAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUUAxxxxxxxxxxAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCACCCCCCCCCCAAACUAACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 374.82974243]
[71.01555634 369.27673340]
[58.81560135 360.41040039]
[49.20452881 348.78808594]
[42.78650284 335.14038086]
[39.96496582 320.32519531]
[40.91728210 305.27383423]
[45.58358765 290.93240356]
[53.67055511 278.20245361]
[64.66983032 267.88418579]
[77.88998413 260.62619019]
[92.50000000 256.88476562]
[92.50000000 241.88476562]
[92.50000000 226.88476562]
[92.50000000 211.88476562]
[92.50000000 196.88476562]
[92.50000000 181.88476562]
[92.50000000 166.88476562]
[92.50000000 151.88476562]
[92.50000000 136.88476562]
[92.50000000 121.88475800]
[84.67468262 118.18109131]
[78.56946564 111.71343231]
[75.14445496 103.24951935]
[75.02690887 93.88301849]
[78.40410614 84.89253235]
[84.97476959 77.56707764]
[93.96868896 73.02181244]
[84.56482697 61.33560181]
[75.16097260 49.64939499]
[65.75711060 37.96318436]
[56.35325623 26.27697563]
[46.94940186 14.59076786]
[33.68962479 21.69108963]
[19.35470772 26.23271179]
[4.43328905 28.06235695]
[-10.56627178 27.11916924]
[-25.13322830 23.43673325]
[-38.77183533 17.14188194]
[-51.01821518 8.45032883]
[-61.45614624 -2.34072232]
[-69.73119354 -14.86274338]
[-75.56276703 -28.68846512]
[-78.75359344 -43.34645462]
[-79.19645691 -58.33719635]
[-76.87772369 -73.15010834]
[-71.87781525 -87.28092957]
[-64.36840057 -100.24890900]
[-54.60648727 -111.61312103]
[-64.01034546 -123.29932404]
[-73.41419983 -134.98553467]
[-83.51963806 -146.07066345]
[-94.28831482 -156.51268005]
[-105.05699158 -166.95468140]
[-121.05573273 -168.14633179]
[-129.97973633 -181.47830200]
[-124.98328400 -196.72346497]
[-109.89921570 -202.18702698]
[-96.29874420 -193.67781067]
[-94.61498260 -177.72337341]
[-83.84630585 -167.28135681]
[-73.07762909 -156.83934021]
[-71.81659698 -171.78623962]
[-60.47931671 -181.60795593]
[-45.50527954 -180.72583008]
[-35.39962387 -169.64089966]
[-35.90229416 -154.64932251]
[-46.72777557 -144.26620483]
[-61.72799301 -144.38938904]
[-52.32413864 -132.70318604]
[-42.92028046 -121.01697540]
[-29.73077393 -128.12170410]
[-15.45651531 -132.68298340]
[-0.58319783 -134.54408264]
[14.38282299 -133.64016724]
[28.93176079 -130.00053406]
[42.56776810 -123.74774933]
[54.82583618 -115.09341431]
[65.28764343 -104.33106995]
[73.59584808 -91.82623291]
[79.46627045 -78.00396729]
[82.69763184 -63.33443832]
[83.17845917 -48.31693649]
[80.89090729 -33.46286392]
[75.91143799 -19.27832222]
[68.40824890 -6.24688387]
[58.63560867 5.18691063]
[68.03946686 16.87311935]
[77.44332123 28.55932808]
[86.84718323 40.24553680]
[96.25103760 51.93174362]
[105.65489197 63.61795425]
[119.69686890 68.89269257]
[134.46899414 66.28797150]
[149.24110413 63.68325043]
[164.01321411 61.07852554]
[178.78533936 58.47380447]
[193.43806458 55.26480865]
[207.94668579 51.45695114]
[222.45530701 47.64908981]
[223.82922363 32.55312347]
[230.28620911 18.83878517]
[241.04655457 8.16214180]
[254.81089783 1.81245399]
[269.91714478 0.55647647]
[284.54110718 4.54587460]
[296.91690063 13.29891014]
[305.55007935 25.75860977]
[309.39813232 40.42040634]
[307.99639893 55.51381302]
[301.51416016 69.21623230]
[290.73416138 79.87302399]
[276.95812988 86.19733429]
[261.84960938 87.42547607]
[247.23300171 83.40913391]
[234.87336731 74.63330841]
[226.26316833 62.15771484]
[211.75454712 65.96557617]
[197.24592590 69.77343750]
[195.71519470 72.19167328]
[193.10476685 74.12944794]
[189.60015869 75.16115570]
[185.54132080 74.93907166]
[181.39006042 73.24591827]
[166.61793518 75.85064697]
[151.84582520 78.45536804]
[137.07371521 81.06008911]
[122.30158997 83.66481018]
[126.16096497 95.67124939]
[124.22330475 107.60543823]
[117.37664032 116.93171692]
[107.50000000 121.88475800]
[107.50000000 136.88476562]
[107.50000000 151.88476562]
[107.50000000 166.88476562]
[107.50000000 181.88476562]
[107.50000000 196.88476562]
[107.50000000 211.88476562]
[107.50000000 226.88476562]
[107.50000000 241.88476562]
[107.50000000 256.88476562]
[122.11001587 260.62619019]
[135.33016968 267.88418579]
[146.32945251 278.20245361]
[154.41641235 290.93240356]
[159.08271790 305.27383423]
[160.03503418 320.32519531]
[157.21350098 335.14038086]
[150.79547119 348.78808594]
[141.18440247 360.41040039]
[128.98443604 369.27673340]
[114.96250153 374.82974243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 92]
[29 91]
[30 90]
[31 89]
[32 88]
[33 87]
[49 71]
[50 70]
[51 69]
[52 62]
[53 61]
[54 60]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[98 119]
[99 118]
[100 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
