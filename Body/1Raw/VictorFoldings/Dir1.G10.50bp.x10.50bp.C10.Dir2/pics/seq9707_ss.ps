%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUACAUAACGGGGGGGGGGCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUAxxxxxxxxxxUUGGGUACCACCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCCCCCCCCCCCGUACAUUAC\
) } def
/len { sequence length } bind def

/coor [
[64.45640564 538.90472412]
[50.61046600 532.88867188]
[38.90180206 523.35925293]
[30.19927979 511.02362061]
[25.14867783 496.79708862]
[24.12478638 481.73541260]
[27.20358467 466.95623779]
[34.15660858 453.55633545]
[44.46789169 442.52999878]
[57.37227249 434.69549561]
[71.91215515 430.63418579]
[71.91215515 415.63418579]
[71.91215515 400.63418579]
[71.91215515 385.63418579]
[71.91215515 370.63418579]
[71.91215515 355.63418579]
[71.91215515 340.63418579]
[71.91215515 325.63418579]
[71.91215515 310.63418579]
[71.91215515 295.63418579]
[69.18178558 291.64410400]
[68.97328186 285.88320923]
[72.23719788 280.01342773]
[72.86117554 265.02642822]
[73.48515320 250.03941345]
[70.92312622 245.93922424]
[70.95444489 240.17465210]
[74.45970917 234.44572449]
[75.70658875 219.49763489]
[76.95346069 204.54954529]
[75.18073273 202.29904175]
[74.22261047 199.18841553]
[74.41983032 195.53561401]
[75.98757172 191.77885437]
[78.97645569 188.42802429]
[81.46157074 173.63531494]
[83.79267883 158.81755066]
[85.96951294 143.97634888]
[75.50271606 139.12361145]
[66.56618500 131.82693481]
[59.71816635 122.54212952]
[55.38642883 111.84918976]
[53.84156799 100.41606140]
[55.18008423 88.95694733]
[59.31836319 78.18765259]
[47.42598343 69.04592133]
[35.53360367 59.90418625]
[23.64122581 50.76245117]
[7.98460960 48.48627853]
[2.60959578 34.59532928]
[-9.28278446 25.45359421]
[-25.60201263 23.83654976]
[-32.11377716 8.78567123]
[-22.11933517 -4.21598768]
[-5.90010881 -1.79343534]
[-0.14104986 13.56121445]
[11.75132942 22.70294952]
[26.55732346 24.32524300]
[32.78295898 38.87007141]
[44.67533875 48.01180649]
[56.56771851 57.15354156]
[68.46009827 66.29527283]
[78.42852020 57.95408249]
[90.59149933 52.57125854]
[104.06860352 50.71842957]
[117.83295441 52.70478058]
[121.84069061 38.25009155]
[125.84843445 23.79540443]
[129.85617065 9.34071541]
[118.17891693 18.75568390]
[103.60093689 22.28874779]
[88.90895844 19.26452637]
[76.91150665 10.26113224]
[69.90200806 -3.00034952]
[69.22039795 -17.98485565]
[74.99696350 -31.82794762]
[86.12747192 -41.88338470]
[100.48421478 -46.22896957]
[115.32274628 -44.03399658]
[127.80654907 -35.71806335]
[135.54920959 -22.87084007]
[137.07083130 -7.94967222]
[144.52574158 -20.96598244]
[151.98065186 -33.98229218]
[159.43556213 -46.99860001]
[166.89047241 -60.01491165]
[169.51568604 -76.76437378]
[186.33731079 -78.87846375]
[193.02546692 -63.29947662]
[179.90676880 -52.56000137]
[172.45185852 -39.54368973]
[164.99694824 -26.52737999]
[157.54203796 -13.51107121]
[150.08712769 -0.49476194]
[144.31086731 13.34845543]
[140.30311584 27.80314445]
[136.29537964 42.25783157]
[132.28764343 56.71252060]
[142.94926453 67.26380920]
[157.36148071 63.10592270]
[171.77369690 58.94803619]
[186.18591309 54.79014969]
[191.34265137 40.15499496]
[204.13594055 31.37369537]
[219.64651489 31.82283783]
[231.91023254 41.32971954]
[236.21145630 56.23874664]
[230.89625549 70.81710052]
[218.00845337 79.45909882]
[202.50367737 78.84172058]
[190.34379578 69.20236206]
[175.93157959 73.36025238]
[161.51936340 77.51814270]
[147.10714722 81.67602539]
[149.75173950 97.49669647]
[147.29992676 113.11241913]
[140.14802551 126.94702148]
[129.15898132 137.65121460]
[115.56089020 144.23394775]
[100.81071472 146.15318298]
[98.63388062 160.99438477]
[100.49149323 170.00555420]
[96.25428009 176.12043762]
[93.76915741 190.91313171]
[91.90155029 205.79641724]
[90.65467072 220.74450684]
[89.40779877 235.69259644]
[88.47216797 250.66339111]
[87.84819031 265.65039062]
[87.22421265 280.63742065]
[86.91215515 295.63418579]
[86.91215515 310.63418579]
[86.91215515 325.63418579]
[86.91215515 340.63418579]
[86.91215515 355.63418579]
[86.91215515 370.63418579]
[86.91215515 385.63418579]
[86.91215515 400.63418579]
[86.91215515 415.63418579]
[86.91215515 430.63418579]
[101.45204926 434.69549561]
[114.35643005 442.52999878]
[124.66770935 453.55633545]
[131.62072754 466.95623779]
[134.69953918 481.73541260]
[133.67564392 496.79708862]
[128.62504578 511.02362061]
[119.92251587 523.35925293]
[108.21385193 532.88867188]
[94.36791229 538.90472412]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[25 128]
[28 127]
[29 126]
[30 125]
[35 124]
[36 123]
[37 121]
[38 120]
[45 62]
[46 61]
[47 60]
[48 59]
[50 57]
[51 56]
[66 98]
[67 97]
[68 96]
[69 95]
[82 94]
[83 93]
[84 92]
[85 91]
[86 90]
[99 114]
[100 113]
[101 112]
[102 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
