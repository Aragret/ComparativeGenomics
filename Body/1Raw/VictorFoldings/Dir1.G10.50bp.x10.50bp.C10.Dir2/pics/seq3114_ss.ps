%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAUGAUAUGGGGGGGGGGCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAxxxxxxxxxxCUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUCCCCCCCCCCUAUAUGAUAU\
) } def
/len { sequence length } bind def

/coor [
[106.55349731 376.40463257]
[92.70755768 370.38858032]
[80.99889374 360.85916138]
[72.29637146 348.52349854]
[67.24576569 334.29699707]
[66.22187805 319.23532104]
[69.30067444 304.45614624]
[76.25370026 291.05621338]
[86.56497955 280.02987671]
[99.46936035 272.19537354]
[114.00924683 268.13406372]
[114.00924683 253.13406372]
[114.00924683 238.13406372]
[114.00924683 223.13406372]
[114.00924683 208.13406372]
[114.00924683 193.13406372]
[114.00924683 178.13406372]
[114.00924683 163.13406372]
[114.00924683 148.13406372]
[114.00924683 133.13406372]
[93.69446564 132.25619507]
[78.94194031 121.02822876]
[73.83558655 105.07620239]
[58.90127945 103.67389679]
[43.96697235 102.27159119]
[39.57651901 116.66981506]
[32.37729645 129.88934326]
[22.66410255 141.38885498]
[10.83469200 150.69744873]
[-2.62653208 157.43394470]
[-17.16833878 161.32247925]
[-32.19525146 162.20384216]
[-47.09192657 160.04190063]
[-61.24835587 154.92523193]
[-74.08484650 147.06332397]
[-85.07573700 136.77813721]
[-93.77097321 124.49083710]
[-99.81449127 110.70458221]
[-102.95880127 95.98390961]
[-103.07514954 80.93162537]
[-100.15877533 66.16410065]
[-94.32910156 52.28607178]
[-85.82484436 39.86582184]
[-74.99425507 29.41196060]
[-62.28083801 21.35256386]
[-48.20519638 16.01766014]
[-33.34371948 13.62570858]
[-18.30497742 14.27465916]
[-3.70479774 17.93793869]
[9.85895348 24.46553612]
[21.83084869 33.59015274]
[31.72064590 44.93813705]
[39.12336349 58.04480362]
[43.73586655 72.37343597]
[45.36927414 87.33728790]
[60.30358124 88.73959351]
[75.23789215 90.14189148]
[89.19139862 72.27271271]
[114.25212097 70.38414001]
[134.34530640 89.29836273]
[143.11151123 77.12652588]
[151.87773132 64.95468903]
[160.64393616 52.78285599]
[169.41014099 40.61101913]
[167.07603455 25.21005249]
[176.13961792 12.99095631]
[190.83647156 10.86066341]
[199.60267639 -1.31117368]
[189.18057251 -12.73425770]
[181.35070801 -26.06190300]
[176.45004272 -40.71597672]
[174.68849182 -56.06137848]
[176.13999939 -71.43354034]
[180.73941040 -86.16722870]
[188.28538513 -99.62532043]
[198.44924927 -111.22637177]
[210.78921509 -120.46971130]
[224.76972961 -126.95706940]
[239.78459167 -130.40971375]
[255.18328857 -130.68048096]
[270.29916382 -127.75995636]
[284.47833252 -121.77687836]
[292.98944092 -134.12844849]
[301.50051880 -146.48002625]
[310.01159668 -158.83158875]
[318.52270508 -171.18316650]
[314.18789673 -186.20793152]
[320.57220459 -200.48289490]
[334.66113281 -207.26785278]
[349.80236816 -203.35917664]
[358.84661865 -190.60240173]
[357.52349854 -175.02088928]
[346.45776367 -163.97175598]
[330.87426758 -162.67207336]
[322.36318970 -150.32049561]
[313.85208130 -137.96893311]
[305.34100342 -125.61735535]
[296.82992554 -113.26578522]
[306.96218872 -102.79406738]
[314.84765625 -90.53502655]
[320.17874146 -76.96336365]
[322.74664307 -62.60504913]
[322.44985962 -48.01694489]
[319.29791260 -33.76522446]
[313.41122437 -20.40338898]
[305.01647949 -8.45076370]
[294.43780518 1.62767327]
[282.08447266 9.43938637]
[268.43475342 14.67957115]
[254.01771545 17.14304543]
[239.39250183 16.73227882]
[225.12675476 13.46126270]
[211.77450562 7.45503330]
[203.00830078 19.62687111]
[205.64556885 34.24126053]
[196.92877197 46.71011353]
[181.58197021 49.37722397]
[172.81576538 61.54906082]
[164.04956055 73.72090149]
[155.28335571 85.89273834]
[146.51715088 98.06457520]
[149.61546326 112.74109650]
[162.55352783 120.33100891]
[178.37837219 117.69403076]
[190.20983887 128.52896118]
[188.97184753 144.52418518]
[175.61405945 153.40951538]
[160.38343811 148.36889648]
[154.96362305 133.26905823]
[142.02555847 125.67915344]
[129.00924683 133.13406372]
[129.00924683 148.13406372]
[129.00924683 163.13406372]
[129.00924683 178.13406372]
[129.00924683 193.13406372]
[129.00924683 208.13406372]
[129.00924683 223.13406372]
[129.00924683 238.13406372]
[129.00924683 253.13406372]
[129.00924683 268.13406372]
[143.54913330 272.19537354]
[156.45352173 280.02987671]
[166.76480103 291.05621338]
[173.71781921 304.45614624]
[176.79661560 319.23532104]
[175.77273560 334.29699707]
[170.72213745 348.52349854]
[162.01960754 360.85916138]
[150.31094360 370.38858032]
[136.46501160 376.40463257]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 57]
[24 56]
[25 55]
[60 121]
[61 120]
[62 119]
[63 118]
[64 117]
[67 114]
[68 113]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
