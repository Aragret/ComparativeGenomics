%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACUAUGCUUAGGGGGGGGGGGCCCUAAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGxxxxxxxxxxUACCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCCCCCCCCCCCUACUAUGCCUAG\
) } def
/len { sequence length } bind def

/coor [
[79.25563812 173.52395630]
[65.31111908 168.06454468]
[52.69953537 159.98971558]
[41.90549469 149.60975647]
[33.34376144 137.32353210]
[27.34332275 123.60312653]
[24.13475227 108.97576141]
[23.84133530 94.00349426]
[26.47435188 79.26165009]
[31.93262482 65.31668091]
[40.00641632 52.70444107]
[50.38548660 41.90954971]
[62.67102051 33.34681320]
[76.39093781 27.34525299]
[91.01804352 24.13548470]
[90.72536469 9.13834095]
[90.43268585 -5.85880327]
[90.14000702 -20.85594749]
[89.84733582 -35.85309219]
[89.55465698 -50.85023499]
[89.26197815 -65.84738159]
[88.96930695 -80.84452820]
[88.67662811 -95.84166718]
[88.38394928 -110.83881378]
[73.38982391 -111.38008881]
[58.44894409 -112.75382233]
[43.60750580 -114.95577240]
[28.91137314 -117.97912598]
[14.40597820 -121.81454468]
[0.13615403 -126.45017242]
[-13.85399246 -131.87167358]
[-27.52121735 -138.06231689]
[-40.82327652 -145.00292969]
[-53.71905518 -152.67207336]
[-66.16868591 -161.04605103]
[-78.13369751 -170.09898376]
[-89.57710266 -179.80287170]
[-100.46353149 -190.12773132]
[-110.75933075 -201.04164124]
[-120.43267822 -212.51086426]
[-129.45367432 -224.49996948]
[-137.79443359 -236.97187805]
[-145.42918396 -249.88806152]
[-152.33430481 -263.20858765]
[-158.48847961 -276.89224243]
[-163.87268066 -290.89678955]
[-168.47024536 -305.17892456]
[-172.26698303 -319.69451904]
[-175.25114441 -334.39865112]
[-177.41352844 -349.24591064]
[-178.74742126 -364.19039917]
[-179.24873352 -379.18591309]
[-178.91587830 -394.18609619]
[-177.74990845 -409.14462280]
[-175.75442505 -424.01522827]
[-172.93557739 -438.75198364]
[-169.30210876 -453.30926514]
[-164.86523438 -467.64212036]
[-159.63867188 -481.70626831]
[-153.63858032 -495.45819092]
[-146.88348389 -508.85543823]
[-139.39428711 -521.85656738]
[-131.19412231 -534.42132568]
[-122.30834961 -546.51098633]
[-112.76442719 -558.08813477]
[-102.59185028 -569.11700439]
[-91.82207489 -579.56347656]
[-80.48838043 -589.39526367]
[-68.62579346 -598.58203125]
[-56.27099609 -607.09527588]
[-43.46216583 -614.90881348]
[-30.23889732 -621.99835205]
[-16.64206314 -628.34210205]
[-2.71368933 -633.92041016]
[11.50317097 -638.71600342]
[25.96457481 -642.71411133]
[40.62582397 -645.90234375]
[55.44159698 -648.27081299]
[70.36610413 -649.81225586]
[85.35321045 -650.52191162]
[100.35659027 -650.39752197]
[115.32987213 -649.43957520]
[130.22677612 -647.65093994]
[145.00125122 -645.03717041]
[159.60763550 -641.60632324]
[174.00077820 -637.36907959]
[188.13618469 -632.33843994]
[201.97018433 -626.53002930]
[215.45999146 -619.96179199]
[228.56391907 -612.65399170]
[241.24145508 -604.62921143]
[253.45344543 -595.91229248]
[265.16210938 -586.53021240]
[276.33126831 -576.51190186]
[286.92639160 -565.88830566]
[296.91473389 -554.69232178]
[306.26544189 -542.95855713]
[314.94958496 -530.72326660]
[322.94033813 -518.02429199]
[330.21298218 -504.90078735]
[336.74508667 -491.39343262]
[342.51638794 -477.54391479]
[347.50909424 -463.39508057]
[351.70776367 -448.99063110]
[355.09942627 -434.37512207]
[357.67358398 -419.59368896]
[359.42230225 -404.69204712]
[360.34014893 -389.71624756]
[360.42428589 -374.71258545]
[359.67446899 -359.72741699]
[358.09304810 -344.80709839]
[355.68484497 -329.99774170]
[352.45733643 -315.34509277]
[348.42050171 -300.89443970]
[343.58679199 -286.69049072]
[337.97119141 -272.77713013]
[331.59103394 -259.19732666]
[324.46603394 -245.99311829]
[316.61825562 -233.20527649]
[308.07186890 -220.87333679]
[298.85339355 -209.03543091]
[288.99124146 -197.72811890]
[278.51593018 -186.98637390]
[267.45986938 -176.84339905]
[255.85716248 -167.33055115]
[243.74372864 -158.47720337]
[231.15699768 -150.31074524]
[218.13586426 -142.85643005]
[204.72058105 -136.13726807]
[190.95260620 -130.17404175]
[176.87451172 -124.98519897]
[162.52980042 -120.58675385]
[147.96282959 -116.99230957]
[133.21859741 -114.21298218]
[118.34268951 -112.25736237]
[103.38109589 -111.13149261]
[103.67377472 -96.13434601]
[103.96644592 -81.13719940]
[104.25912476 -66.14006042]
[104.55180359 -51.14291382]
[104.84448242 -36.14576721]
[105.13715363 -21.14862442]
[105.42983246 -6.15147972]
[105.72251129 8.84566498]
[106.01518250 23.84280968]
[120.75638580 26.47944069]
[134.70001221 31.94113159]
[147.31027222 40.01801682]
[158.10261536 50.39973831]
[166.66233826 62.68737030]
[172.66053772 76.40875244]
[175.86671448 91.03664398]
[176.15768433 106.00895691]
[173.52226257 120.75037384]
[168.06170654 134.69444275]
[159.98585510 147.30537415]
[149.60501099 158.09855652]
[137.31808472 166.65928650]
[123.59718323 172.65859985]
[108.96955872 175.86598206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 145]
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
