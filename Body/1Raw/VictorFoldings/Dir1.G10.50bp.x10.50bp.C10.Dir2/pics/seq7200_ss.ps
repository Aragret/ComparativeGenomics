%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAACACUUGGGGGGGGGGUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAUxxxxxxxxxxCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCGCUCCGGGCCCCCCCCCCCCCAUAACACUU\
) } def
/len { sequence length } bind def

/coor [
[38.61545944 515.92187500]
[24.45485687 510.76684570]
[11.86511230 502.48461914]
[1.52517426 491.52185059]
[-6.00733709 478.46972656]
[-10.32620239 464.03213501]
[-11.19851112 448.98767090]
[-8.57722092 434.14767456]
[-2.60369372 420.31243896]
[6.39992476 408.22808838]
[17.94808006 398.54632568]
[31.41799736 391.78924561]
[46.08325577 388.32125854]
[46.08325577 373.32125854]
[46.08325577 358.32125854]
[46.08325577 343.32125854]
[46.08325577 328.32125854]
[46.08325577 313.32125854]
[46.08325577 298.32125854]
[46.08325577 283.32125854]
[46.08325577 268.32125854]
[46.08325577 253.32125854]
[33.85927582 244.62791443]
[19.69030190 249.55134583]
[12.56067753 255.35734558]
[5.18398666 254.42781067]
[-9.08186054 259.06304932]
[-23.34770966 263.69830322]
[-31.88294220 277.28247070]
[-47.84058762 278.93569946]
[-58.97930527 267.38977051]
[-56.75442123 251.50172424]
[-42.87268066 243.45953369]
[-27.98296356 249.43246460]
[-13.71711636 244.79721069]
[0.54873180 240.16195679]
[14.76687336 235.38237000]
[28.93584824 230.45893860]
[15.66892052 223.45976257]
[13.69114017 208.59071350]
[24.66717720 198.36689758]
[39.35865021 201.39353943]
[45.39994431 215.12324524]
[51.31528091 201.33888245]
[57.23061752 187.55451965]
[63.14595795 173.77014160]
[68.92130280 159.92654419]
[74.41488647 145.96873474]
[79.76674652 131.95596313]
[68.43088531 122.65890503]
[61.23603821 109.43428040]
[59.49814606 94.08279419]
[63.76581192 78.82435608]
[73.69745636 65.97707367]
[64.15953827 54.40002441]
[54.62162399 42.82296753]
[45.08370972 31.24591446]
[29.33049393 29.97637558]
[19.15276337 17.88549805]
[20.58878326 2.14658427]
[32.78659058 -7.90274620]
[48.50944138 -6.30040455]
[58.42924881 6.00296831]
[56.66076660 21.70800018]
[66.19867706 33.28505325]
[75.73659515 44.86211014]
[85.27450562 56.43916321]
[100.07775116 54.01760483]
[105.42961121 40.00484085]
[110.78147125 25.99207306]
[97.95139313 18.13689804]
[86.78331757 8.05777454]
[77.65762329 -3.90200591]
[70.88513184 -17.33509827]
[66.69650269 -31.78397560]
[65.23440552 -46.75651550]
[66.54863739 -61.74275589]
[70.59444427 -76.23227692]
[77.23400879 -89.73155975]
[86.24120331 -101.78083801]
[97.30924988 -111.96971130]
[110.06116486 -119.95114899]
[124.06262207 -125.45330048]
[138.83674622 -128.28877258]
[153.88032532 -128.36100769]
[168.68099976 -125.66750336]
[182.73463440 -120.30003357]
[195.56260681 -112.44139862]
[206.72795105 -102.35926819]
[215.85043335 -90.39702606]
[222.61930847 -76.96211243]
[226.80403137 -62.51210403]
[228.26210022 -47.53917313]
[226.94381714 -32.55328369]
[222.89411926 -18.06485748]
[216.25091553 -4.56736040]
[207.24046326 7.47948790]
[196.16967773 17.66537476]
[183.41561890 25.64337349]
[169.41267395 31.14175797]
[154.63778687 33.97325134]
[139.59417725 34.04141617]
[124.79423523 31.34393311]
[119.44237518 45.35669708]
[114.09052277 59.36946487]
[124.95423126 67.11994934]
[132.50279236 77.46614075]
[136.23460388 89.15463257]
[151.17225647 87.78841400]
[166.10990906 86.42219543]
[181.04756165 85.05598450]
[195.98521423 83.68976593]
[211.20779419 76.22591400]
[222.59399414 88.78739929]
[213.67543030 103.20597839]
[197.35142517 98.62741852]
[182.41377258 99.99363708]
[167.47612000 101.35984802]
[152.53846741 102.72606659]
[137.60081482 104.09228516]
[132.91119385 118.63923645]
[122.84730530 130.14247131]
[109.05252838 136.72355652]
[93.77951813 137.30781555]
[88.42765808 151.32058716]
[88.28212738 160.51406860]
[82.82272339 165.56129456]
[82.49089813 174.74993896]
[76.93032074 179.68548584]
[71.01498413 193.46984863]
[65.09964752 207.25421143]
[59.18431091 221.03858948]
[61.08325577 253.32125854]
[61.08325577 268.32125854]
[61.08325577 283.32125854]
[61.08325577 298.32125854]
[61.08325577 313.32125854]
[61.08325577 328.32125854]
[61.08325577 343.32125854]
[61.08325577 358.32125854]
[61.08325577 373.32125854]
[61.08325577 388.32125854]
[75.74851990 391.78924561]
[89.21843719 398.54632568]
[100.76659393 408.22808838]
[109.77021027 420.31243896]
[115.74373627 434.14767456]
[118.36502838 448.98767090]
[117.49271393 464.03213501]
[113.17385101 478.46972656]
[105.64134216 491.52185059]
[95.30139923 502.48461914]
[82.71165466 510.76684570]
[68.55105591 515.92187500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[43 132]
[44 131]
[45 130]
[46 129]
[47 127]
[48 125]
[49 124]
[54 67]
[55 66]
[56 65]
[57 64]
[68 105]
[69 104]
[70 103]
[108 120]
[109 119]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
