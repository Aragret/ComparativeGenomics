%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[81.00785065 339.92376709]
[67.78765869 332.65130615]
[56.90085220 322.20428467]
[49.08972168 309.29504395]
[44.88684082 294.80374146]
[44.57876968 279.71838379]
[48.18650818 265.06756592]
[55.46408081 251.85017395]
[65.91529083 240.96740723]
[78.82755280 233.16127014]
[93.32048798 228.96397400]
[93.00843048 213.96722412]
[92.69637299 198.97047424]
[92.38432312 183.97370911]
[92.07226562 168.97695923]
[91.76020813 153.98020935]
[91.44815063 138.98345947]
[91.13609314 123.98670197]
[90.82403564 108.98994446]
[85.19208527 95.08739471]
[74.97859955 84.10173035]
[64.76512146 73.11606598]
[54.55164337 62.13039780]
[42.11220169 53.74825668]
[28.09548950 48.40674210]
[14.07877636 43.06523132]
[0.06206311 37.72371674]
[-14.43353367 33.86655807]
[-29.25129128 31.53545380]
[-44.06904984 29.20434952]
[-58.88680649 26.87324524]
[-65.33075714 40.53531647]
[-75.36376190 51.82759476]
[-88.17249298 59.83465958]
[-102.71860504 63.90741730]
[-117.82290649 63.71570587]
[-132.26095581 59.27507019]
[-144.86233521 50.94548798]
[-154.60549927 39.40220642]
[-160.70062256 25.58098221]
[-162.65359497 10.60224438]
[-160.30609131 -4.31975031]
[-153.84841919 -17.97534180]
[-143.80407715 -29.25753212]
[-130.98730469 -37.25172424]
[-116.43711090 -41.30986786]
[-101.33300781 -41.10298157]
[-86.89942169 -36.64784622]
[-74.30641937 -28.30560875]
[-64.57485199 -16.75254440]
[-58.49362183 -2.92520452]
[-56.55570221 12.05548763]
[-41.73794556 14.38659191]
[-26.92018700 16.71769524]
[-12.10242939 19.04879951]
[-22.23062897 7.98446131]
[-25.60398102 -6.63130093]
[-21.34930420 -21.01523972]
[-10.56790829 -31.44411850]
[3.94947481 -35.21845245]
[18.44506454 -31.36126709]
[29.16672134 -20.87098312]
[33.33917999 -6.46297836]
[29.88240623 8.13327885]
[19.69118118 19.13959122]
[5.40357542 23.70700455]
[19.42028809 29.04851723]
[33.43700027 34.39002991]
[47.45371628 39.73154068]
[38.23214722 27.90095901]
[32.31903839 14.11563492]
[30.10247803 -0.71968931]
[31.72793388 -15.63135910]
[37.08872986 -29.64070892]
[45.83303070 -41.82829285]
[57.38694000 -51.39422989]
[70.99216461 -57.71070099]
[85.75579071 -60.36314774]
[100.70885468 -59.17749405]
[114.86998749 -54.23154831]
[127.30977631 -45.84991837]
[137.21177673 -34.58269882]
[143.92613220 -21.16937065]
[147.01217651 -6.49025631]
[146.26734924 8.49124050]
[141.74053955 22.79187012]
[133.72885132 35.47307205]
[122.75809479 45.70256805]
[109.54829407 52.80898666]
[94.96642303 56.32592773]
[79.96949005 56.02257156]
[65.53730774 51.91691971]
[75.75078583 62.90258408]
[85.96426392 73.88824463]
[96.17774963 84.87390900]
[93.39114380 70.13502502]
[101.20732880 57.33239365]
[115.59077454 53.07604599]
[129.11528015 59.56354904]
[134.79811096 73.44538116]
[129.70521545 87.55432892]
[116.46403503 94.60616302]
[131.42428589 95.69747162]
[146.38452148 96.78878021]
[161.38128662 96.47672272]
[176.28318787 94.76403809]
[191.18508911 93.05134583]
[206.08699036 91.33865356]
[218.93051147 81.14179993]
[234.08154297 87.41703796]
[235.95397949 103.70893860]
[222.62164307 113.25778961]
[207.79968262 106.24055481]
[192.89778137 107.95324707]
[177.99588013 109.66593933]
[163.09397888 111.37862396]
[175.51737976 119.78450775]
[181.56005859 133.51353455]
[179.36756897 148.35243225]
[169.61277771 159.74734497]
[155.28929138 164.20130920]
[140.79281616 160.34747314]
[130.57212830 149.36851501]
[127.76382446 134.63374329]
[133.22975159 120.66506958]
[145.29321289 111.74903107]
[130.33297729 110.65772247]
[115.37271881 109.56640625]
[111.91874695 109.99341583]
[108.68910980 109.67166901]
[105.82079315 108.67789459]
[106.13285065 123.67464447]
[106.44490814 138.67140198]
[106.75695801 153.66815186]
[107.06901550 168.66490173]
[107.38107300 183.66166687]
[107.69313049 198.65841675]
[108.00518799 213.65516663]
[108.31724548 228.65191650]
[122.97223663 232.24269104]
[136.19804382 239.50494385]
[147.09291077 249.94354248]
[154.91400146 262.84674072]
[159.12808228 277.33480835]
[159.44779968 292.41992188]
[155.85137939 307.07351685]
[148.58401489 320.29653931]
[138.14120483 331.18734741]
[125.23497772 339.00347900]
[110.74528503 343.21194458]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 95]
[21 94]
[22 93]
[23 92]
[24 69]
[25 68]
[26 67]
[27 66]
[28 55]
[29 54]
[30 53]
[31 52]
[102 128]
[103 127]
[104 126]
[105 116]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
