%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAACAAGGGGGGGGGGAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCxxxxxxxxxxAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCCCCCCCCCCCAUACACAA\
) } def
/len { sequence length } bind def

/coor [
[87.91641235 537.26641846]
[74.07047272 531.25036621]
[62.36181259 521.72094727]
[53.65929031 509.38528442]
[48.60868835 495.15875244]
[47.58479691 480.09707642]
[50.66359329 465.31790161]
[57.61661530 451.91799927]
[67.92790222 440.89166260]
[80.83228302 433.05715942]
[95.37216949 428.99581909]
[95.37216949 413.99581909]
[95.37216949 398.99581909]
[95.37216949 383.99581909]
[95.37216949 368.99581909]
[95.37216949 353.99581909]
[95.37216949 338.99581909]
[95.37216949 323.99581909]
[95.37216949 308.99581909]
[95.37216949 293.99581909]
[87.63487244 281.26855469]
[95.37216949 267.46838379]
[95.37216949 252.46838379]
[85.78105927 237.80514526]
[95.03531647 221.91998291]
[94.72325897 206.92321777]
[94.41120911 191.92646790]
[94.09915161 176.92971802]
[93.78709412 161.93296814]
[85.78668976 149.36941528]
[93.23522186 135.41125488]
[81.73458099 131.08204651]
[72.35608673 123.14160156]
[66.18938446 112.51245880]
[63.95093536 100.42957306]
[49.24297333 97.48408508]
[34.53501129 94.53860474]
[24.45357895 106.12567902]
[9.92405605 111.10448456]
[-5.14519024 108.13574982]
[-16.70060730 98.01804352]
[-21.63384438 83.47298431]
[-18.61788940 68.41312408]
[-8.46401405 56.88947678]
[6.09643602 52.00185394]
[21.14677429 55.06499863]
[32.63853836 65.25494385]
[37.48049545 79.83064270]
[52.18845749 82.77613068]
[66.89641571 85.72161102]
[81.11513519 69.29036713]
[102.19428253 64.01521301]
[106.20202637 49.56052780]
[110.20976257 35.10583878]
[114.21750641 20.65114975]
[118.22524261 6.19646215]
[110.70133209 -7.44276381]
[114.97166443 -22.04478073]
[128.02095032 -29.13362885]
[132.02868652 -43.58831787]
[136.03642273 -58.04300690]
[140.04417419 -72.49769592]
[144.05191040 -86.95238495]
[136.52799988 -100.59160614]
[140.79832458 -115.19362640]
[153.84761047 -122.28247070]
[157.85534668 -136.73716736]
[161.86308289 -151.19184875]
[148.55169678 -158.23606873]
[137.06611633 -167.97749329]
[127.94354248 -179.96051025]
[121.61064911 -193.62464905]
[118.36364746 -208.33081055]
[118.35439301 -223.39114380]
[121.58333588 -238.10128784]
[127.89943695 -251.77319336]
[137.00727844 -263.76739502]
[148.48089600 -273.52291870]
[161.78361511 -280.58349609]
[176.29325867 -284.61886597]
[191.33119202 -285.44027710]
[206.19406128 -283.00933838]
[220.18667603 -277.43975830]
[232.65461731 -268.99197388]
[243.01470947 -258.06118774]
[250.78239441 -245.15858459]
[255.59437561 -230.88766479]
[257.22558594 -215.91592407]
[255.59971619 -200.94358826]
[250.79283142 -186.67095947]
[243.02973938 -173.76559448]
[232.67355347 -162.83110046]
[220.20863342 -154.37889099]
[206.21798706 -148.80429077]
[191.35600281 -146.36805725]
[176.31777954 -147.18411255]
[172.31004333 -132.72941589]
[168.30229187 -118.27473450]
[175.83816528 -105.47840118]
[171.97966003 -90.76219940]
[158.50659180 -82.94464111]
[154.49885559 -68.48995209]
[150.49111938 -54.03526688]
[146.48336792 -39.58057785]
[142.47563171 -25.12588882]
[150.01150513 -12.32955265]
[146.15299988 2.38664842]
[132.67993164 10.20420265]
[128.67219543 24.65889168]
[124.66445160 39.11357880]
[120.65670776 53.56826782]
[116.64897156 68.02295685]
[126.53897095 75.59912109]
[133.25971985 86.08920288]
[136.00866699 98.24048615]
[134.45750427 110.60189056]
[128.79148865 121.69722748]
[119.68724060 130.20152283]
[108.23197937 135.09919739]
[116.25469971 148.73542786]
[108.78384399 161.62091064]
[109.09590149 176.61766052]
[109.40795898 191.61441040]
[109.72001648 206.61117554]
[110.03207397 221.60792542]
[118.80515289 231.12037659]
[118.72072601 243.65879822]
[110.37216949 252.46838379]
[110.37216949 267.46838379]
[118.10946655 281.26855469]
[110.37216949 293.99581909]
[110.37216949 308.99581909]
[110.37216949 323.99581909]
[110.37216949 338.99581909]
[110.37216949 353.99581909]
[110.37216949 368.99581909]
[110.37216949 383.99581909]
[110.37216949 398.99581909]
[110.37216949 413.99581909]
[110.37216949 428.99581909]
[124.91205597 433.05715942]
[137.81643677 440.89166260]
[148.12771606 451.91799927]
[155.08074951 465.31790161]
[158.15954590 480.09707642]
[157.13565063 495.15875244]
[152.08505249 509.38528442]
[143.38252258 521.72094727]
[131.67385864 531.25036621]
[117.82792664 537.26641846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[25 125]
[26 124]
[27 123]
[28 122]
[29 121]
[31 119]
[35 50]
[36 49]
[37 48]
[52 112]
[53 111]
[54 110]
[55 109]
[56 108]
[59 105]
[60 104]
[61 103]
[62 102]
[63 101]
[66 98]
[67 97]
[68 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
