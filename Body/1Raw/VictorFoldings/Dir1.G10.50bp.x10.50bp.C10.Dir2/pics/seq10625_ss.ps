%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUCCCCCGGGGGGGGGGCAUCCUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUxxxxxxxxxxCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCACCCCCCCCCCUCAUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[72.81987000 402.19342041]
[58.97393036 396.17739868]
[47.26527023 386.64797974]
[38.56274414 374.31231689]
[33.51214218 360.08578491]
[32.48825073 345.02410889]
[35.56705093 330.24493408]
[42.52007294 316.84500122]
[52.83135605 305.81869507]
[65.73574066 297.98416138]
[80.27562714 293.92285156]
[80.27562714 278.92285156]
[80.27562714 263.92285156]
[80.27562714 248.92286682]
[80.27562714 233.92286682]
[80.27562714 218.92286682]
[80.27562714 203.92286682]
[80.27562714 188.92286682]
[80.27562714 173.92286682]
[80.27562714 158.92286682]
[64.94298553 113.50045776]
[88.67351532 93.62600708]
[77.37451172 83.76028442]
[66.07550812 73.89456177]
[54.77650070 64.02883911]
[43.47749329 54.16311646]
[32.45658875 64.35977173]
[20.41426468 73.32718658]
[7.48697090 80.96375275]
[-6.17881489 87.18294525]
[-20.42824936 91.91430664]
[-35.09987640 95.10420227]
[-50.02745438 96.71651459]
[-65.04183960 96.73295593]
[-79.97291565 95.15335083]
[-94.65148926 91.99559021]
[-108.91125488 87.29545593]
[-122.59062958 81.10620880]
[-135.53462219 73.49797058]
[-147.59655762 64.55695343]
[-158.63977051 54.38446426]
[-168.53912354 43.09576416]
[-177.18247986 30.81876755]
[-184.47186279 17.69257545]
[-190.32470703 3.86592293]
[-194.67468262 -10.50452614]
[-197.47250366 -25.25594139]
[-198.68647766 -40.22117996]
[-198.30282593 -55.23067474]
[-196.32592773 -70.11435699]
[-192.77815247 -84.70357513]
[-187.69970703 -98.83303833]
[-181.14816284 -112.34262848]
[-173.19770813 -125.07929230]
[-163.93846130 -136.89869690]
[-153.47531128 -147.66693115]
[-141.92684937 -157.26197815]
[-129.42388916 -165.57510376]
[-116.10812378 -172.51214600]
[-102.13042450 -177.99447632]
[-87.64916229 -181.95999146]
[-72.82843781 -184.36373901]
[-57.83616257 -185.17851257]
[-42.84222031 -184.39505005]
[-28.01650238 -182.02224731]
[-13.52699566 -178.08697510]
[0.46212241 -172.63385010]
[13.79234505 -165.72462463]
[26.31262970 -157.43762207]
[37.88111496 -147.86671448]
[48.36671448 -137.12034607]
[57.65062332 -125.32030487]
[65.62764740 -112.60027313]
[72.20740509 -99.10438538]
[77.31533051 -84.98556519]
[80.89356232 -70.40378571]
[82.90154266 -55.52426147]
[83.31652832 -40.51560211]
[82.13381195 -25.54786110]
[79.36679077 -10.79063511]
[75.04683685 3.58886576]
[69.22287750 17.42770958]
[61.96090698 30.56909180]
[53.34321976 42.86411285]
[64.64221954 52.72983551]
[75.94123077 62.59555817]
[87.24023438 72.46128082]
[98.53923798 82.32700348]
[113.45815277 83.88458252]
[126.55130005 76.56548309]
[139.64445496 69.24637604]
[126.30808258 62.38043213]
[123.15222931 47.71617126]
[132.48356628 35.97197723]
[147.48164368 35.73190689]
[157.18408203 47.17142868]
[154.49957275 61.92864990]
[168.28195190 56.00868607]
[182.06433105 50.08872223]
[195.84671021 44.16875839]
[209.62908936 38.24879456]
[219.00338745 24.79313850]
[235.31829834 26.45310020]
[241.79045105 41.52105331]
[231.76185608 54.49637985]
[215.54905701 52.03117752]
[201.76667786 57.95114136]
[187.98429871 63.87110519]
[174.20190430 69.79106903]
[160.41952515 75.71102905]
[146.96356201 82.33953094]
[133.87040710 89.65863037]
[120.77725220 96.97773743]
[121.55604553 104.43719482]
[135.25500488 110.54772186]
[123.11362457 119.35610962]
[123.89241791 126.81556702]
[138.21501160 131.27238464]
[154.08418274 127.13698578]
[165.40591431 139.00080872]
[160.53338623 154.65937805]
[144.47903442 158.00448608]
[133.75819397 145.59497070]
[119.43560028 141.13816833]
[113.39560699 145.58433533]
[127.13655853 151.59983826]
[128.79734802 166.50761414]
[116.71716309 175.39970398]
[102.97634888 169.38389587]
[101.31562042 154.47668457]
[95.27562714 158.92286682]
[95.27562714 173.92286682]
[95.27562714 188.92286682]
[95.27562714 203.92286682]
[95.27562714 218.92286682]
[95.27562714 233.92286682]
[95.27562714 248.92286682]
[95.27562714 263.92285156]
[95.27562714 278.92285156]
[95.27562714 293.92285156]
[109.81551361 297.98416138]
[122.71989441 305.81869507]
[133.03117371 316.84500122]
[139.98419189 330.24493408]
[143.06300354 345.02410889]
[142.03910828 360.08578491]
[136.98851013 374.31231689]
[128.28598022 386.64797974]
[116.57731628 396.17739868]
[102.73137665 402.19342041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 88]
[23 87]
[24 86]
[25 85]
[26 84]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
