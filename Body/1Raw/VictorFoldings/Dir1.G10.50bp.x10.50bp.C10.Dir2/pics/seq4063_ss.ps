%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUCUUCAUGGGGGGGGGGAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCUxxxxxxxxxxCGUAAAUUAUGGCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAACCCCCCCCCCUAUUCUUUAU\
) } def
/len { sequence length } bind def

/coor [
[72.14335632 390.67834473]
[58.29741669 384.66229248]
[46.58875275 375.13287354]
[37.88623047 362.79721069]
[32.83562851 348.57070923]
[31.81173706 333.50900269]
[34.89053726 318.72985840]
[41.84355927 305.32992554]
[52.15484238 294.30358887]
[65.05921936 286.46908569]
[79.59910583 282.40777588]
[79.59910583 267.40777588]
[79.59910583 252.40777588]
[79.59910583 237.40777588]
[79.59910583 222.40777588]
[79.59910583 207.40777588]
[79.59910583 192.40777588]
[79.59910583 177.40777588]
[79.59910583 162.40777588]
[79.59910583 147.40777588]
[68.91734314 109.29736328]
[88.91812134 92.68986511]
[78.70464325 81.70420074]
[68.49116516 70.71853638]
[62.42861176 77.40969086]
[52.40271759 81.13122559]
[37.58495712 83.46232605]
[22.76720047 85.79343414]
[7.94944191 88.12453461]
[1.82126665 102.28253937]
[-11.00119591 110.86087799]
[-26.42634583 111.12224579]
[-39.53207397 102.98323822]
[-46.13638687 89.04098511]
[-44.13187790 73.74440002]
[-34.15817261 61.97457123]
[-19.39784813 57.48721313]
[-4.56086969 61.71422195]
[5.61833763 73.30677795]
[20.43609619 70.97566986]
[35.25385284 68.64456940]
[50.07161331 66.31346130]
[57.52652359 53.29715729]
[52.03948975 39.33676529]
[46.55245972 25.37637520]
[41.06542969 11.41598606]
[35.57839584 -2.54440403]
[20.90125465 0.70028627]
[5.89722490 1.60889435]
[-9.06420612 0.15904520]
[-23.61459923 -3.61355758]
[-37.39564133 -9.61600971]
[-50.06795502 -17.70049667]
[-61.31947708 -27.66792870]
[-70.87313080 -39.27285004]
[-78.49364471 -52.22948074]
[-83.99336243 -66.21875000]
[-87.23683929 -80.89615631]
[-88.14421082 -95.90026093]
[-86.69312286 -110.86157227]
[-82.91931915 -125.41165924]
[-76.91573334 -139.19219971]
[-68.83020020 -151.86384583]
[-58.86183929 -163.11454773]
[-47.25613022 -172.66725159]
[-34.29887009 -180.28669739]
[-20.30914879 -185.78524780]
[-5.63147259 -189.02752686]
[9.37270737 -189.93365479]
[24.33389854 -188.48133850]
[38.88367081 -184.70632935]
[52.66371918 -178.70159912]
[65.33470154 -170.61502075]
[76.58457947 -160.64573669]
[86.13631439 -149.03923035]
[93.75469208 -136.08134460]
[99.25209808 -122.09117889]
[102.49315643 -107.41323090]
[103.39804840 -92.40897369]
[101.94449615 -77.44790649]
[98.16828918 -62.89844513]
[92.16242981 -49.11889267]
[84.07480621 -36.44857788]
[74.10459137 -25.19952202]
[62.49730301 -15.64874268]
[49.53878784 -8.03143501]
[55.02581787 5.92895460]
[60.51284790 19.88934517]
[65.99987793 33.84973526]
[71.48691559 47.81012344]
[79.47682953 60.50505447]
[89.69030762 71.49071503]
[99.90378571 82.47637939]
[114.58031464 85.57470703]
[128.36270142 79.65473938]
[142.14508057 73.73477936]
[155.92745972 67.81481934]
[156.53356934 52.56373596]
[163.70442200 39.09000397]
[176.01626587 30.06883430]
[191.02455139 27.29138947]
[205.74937439 31.30913162]
[217.26712036 41.32433701]
[223.29092407 55.34847641]
[222.62475586 70.59704590]
[215.40089417 84.04244232]
[203.05363464 93.01505280]
[188.03453064 95.73337555]
[173.32563782 91.65767670]
[161.84742737 81.59719849]
[148.06503296 87.51715851]
[134.28265381 93.43712616]
[120.50027466 99.35708618]
[121.74715424 114.30517578]
[136.31985474 117.85993195]
[150.89256287 121.41469574]
[165.46525574 124.96945953]
[182.28607178 122.84898376]
[188.98014832 138.42543030]
[175.86553955 149.16989136]
[161.91049194 139.54216003]
[147.33779907 135.98739624]
[132.76509094 132.43263245]
[118.19239044 128.87786865]
[112.29406738 133.51034546]
[126.21603394 139.09416199]
[128.34117126 153.94285583]
[116.54433441 163.20755005]
[102.62249756 157.62342834]
[100.49742889 142.77529907]
[94.59910583 147.40777588]
[94.59910583 162.40777588]
[94.59910583 177.40777588]
[94.59910583 192.40777588]
[94.59910583 207.40777588]
[94.59910583 222.40777588]
[94.59910583 237.40777588]
[94.59910583 252.40777588]
[94.59910583 267.40777588]
[94.59910583 282.40777588]
[109.13899994 286.46908569]
[122.04338074 294.30358887]
[132.35466003 305.32992554]
[139.30767822 318.72985840]
[142.38648987 333.50900269]
[141.36259460 348.57070923]
[136.31199646 362.79721069]
[127.60946655 375.13287354]
[115.90080261 384.66229248]
[102.05486298 390.67834473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 93]
[23 92]
[24 91]
[26 42]
[27 41]
[28 40]
[29 39]
[43 90]
[44 89]
[45 88]
[46 87]
[47 86]
[94 113]
[95 112]
[96 111]
[97 110]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
