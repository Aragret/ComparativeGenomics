%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGAAAUAAGGGGGGGGGGACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCxxxxxxxxxxGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCCCCCCCCCCCUAGCAAUAA\
) } def
/len { sequence length } bind def

/coor [
[98.25517273 428.31381226]
[84.23322296 422.76080322]
[72.03327179 413.89447021]
[62.42219925 402.27218628]
[56.00417328 388.62448120]
[53.18263626 373.80929565]
[54.13495255 358.75790405]
[58.80125809 344.41647339]
[66.88822174 331.68652344]
[77.88749695 321.36825562]
[91.10765839 314.11029053]
[105.71766663 310.36883545]
[105.71766663 295.36883545]
[105.71766663 280.36883545]
[105.71766663 265.36883545]
[105.71766663 250.36885071]
[105.71766663 235.36885071]
[105.71766663 220.36885071]
[105.71766663 205.36885071]
[105.71766663 190.36885071]
[105.71766663 175.36885071]
[105.71766663 160.36885071]
[102.98945618 156.38059998]
[102.77993011 150.62351990]
[106.03829193 144.75617981]
[106.65412140 129.76882935]
[88.92646027 126.49861908]
[77.16780090 114.28974152]
[74.88907623 98.57900238]
[60.84709930 93.30426025]
[46.59396362 99.58803558]
[32.42854309 94.03866577]
[26.52575684 80.41175842]
[12.48377991 75.13701630]
[-1.55819643 69.86227417]
[-15.60017300 64.58753204]
[-29.64214897 59.31278992]
[-43.68412399 54.03804779]
[-53.30648804 65.72944641]
[-66.20498657 73.66087341]
[-80.98047638 76.97198486]
[-96.03024292 75.30361938]
[-109.72177887 68.83674622]
[-120.56993866 58.27283859]
[-127.39800262 44.75779724]
[-129.46530151 29.75763130]
[-126.54759216 14.89944553]
[-118.96136475 1.79494429]
[-107.52952576 -8.13439274]
[-93.49211121 -13.81150627]
[-78.37178802 -14.62058544]
[-63.80870056 -10.47386742]
[-51.38254547 -1.82115638]
[-42.44121933 10.39896584]
[-37.95460510 24.86095238]
[-38.40938568 39.99607468]
[-24.36740685 45.27081299]
[-10.32543087 50.54555511]
[3.71654510 55.82029724]
[17.75852203 61.09503937]
[31.80049706 66.36978149]
[45.21512985 59.99928284]
[59.53083038 65.14859009]
[66.12184143 79.26228333]
[80.16381836 84.53702545]
[87.42445374 78.21850586]
[96.52676392 75.08987427]
[98.97969055 60.29179382]
[101.43261719 45.49371338]
[87.68865204 39.26750183]
[76.02507782 29.69548798]
[67.23713684 17.43031311]
[61.92400360 3.30823541]
[60.44794464 -11.70787811]
[62.90959549 -26.59420395]
[69.14112091 -40.33576584]
[78.71763611 -51.99564743]
[90.98619843 -60.77885056]
[105.11032867 -66.08652496]
[120.12700653 -67.55678558]
[135.01239014 -65.08938599]
[148.75154114 -58.85256195]
[160.40771484 -49.27154541]
[169.18618774 -36.99958801]
[174.48840332 -22.87341118]
[175.95286560 -7.85616255]
[173.47972107 7.02825785]
[167.23759460 20.76500511]
[157.65208435 32.41748428]
[145.37673950 41.19121170]
[131.24850464 46.48797989]
[116.23069763 47.94664383]
[113.77777100 62.74472046]
[111.32484436 77.54280090]
[124.71034241 87.20326996]
[130.16978455 104.49940491]
[145.07423401 102.80900574]
[159.97868347 101.11860657]
[174.88311768 99.42820740]
[189.43008423 95.76950073]
[203.36079407 90.20756531]
[217.29150391 84.64562988]
[231.22222900 79.08369446]
[240.94099426 65.87470245]
[257.20758057 67.95558167]
[263.28833008 83.18570709]
[252.92787170 95.89762878]
[236.78416443 93.01441193]
[222.85345459 98.57634735]
[208.92272949 104.13828278]
[194.99201965 109.70021820]
[209.62745667 112.98717499]
[221.72702026 121.85287476]
[229.27125549 134.81761169]
[231.00103760 149.71752930]
[226.62765503 164.06582642]
[216.88102722 175.46771240]
[203.38789368 182.02021790]
[188.40026855 182.62968445]
[174.41964722 177.19441223]
[163.77941895 166.62155151]
[158.25544739 152.67573547]
[158.76971436 137.68455505]
[165.23637390 124.15006256]
[176.57351685 114.33265686]
[161.66906738 116.02305603]
[146.76463318 117.71345520]
[131.86018372 119.40384674]
[121.64147186 130.38465881]
[121.02565002 145.37200928]
[120.71766663 160.36885071]
[120.71766663 175.36885071]
[120.71766663 190.36885071]
[120.71766663 205.36885071]
[120.71766663 220.36885071]
[120.71766663 235.36885071]
[120.71766663 250.36885071]
[120.71766663 265.36883545]
[120.71766663 280.36883545]
[120.71766663 295.36883545]
[120.71766663 310.36883545]
[135.32768250 314.11029053]
[148.54783630 321.36825562]
[159.54711914 331.68652344]
[167.63407898 344.41647339]
[172.30038452 358.75790405]
[173.25270081 373.80929565]
[170.43116760 388.62448120]
[164.01313782 402.27218628]
[154.40206909 413.89447021]
[142.20211792 422.76080322]
[128.18016052 428.31381226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[25 130]
[26 129]
[29 65]
[30 64]
[33 61]
[34 60]
[35 59]
[36 58]
[37 57]
[38 56]
[67 94]
[68 93]
[69 92]
[96 128]
[97 127]
[98 126]
[99 125]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
