%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGAAGCCGGGGGGGGGGGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUxxxxxxxxxxUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCCCCCCCCCCCUUCGAAACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.85299683]
[71.19830322 356.83697510]
[59.48964310 347.30755615]
[50.78712082 334.97189331]
[45.73651886 320.74536133]
[44.71262741 305.68368530]
[47.79142761 290.90451050]
[54.74444962 277.50460815]
[65.05573273 266.47827148]
[77.96011353 258.64373779]
[92.50000000 254.58244324]
[92.50000000 239.58244324]
[92.50000000 224.58244324]
[92.50000000 209.58244324]
[92.50000000 194.58244324]
[92.50000000 179.58244324]
[92.50000000 164.58244324]
[92.50000000 149.58244324]
[92.50000000 134.58244324]
[92.50000000 119.58243561]
[80.06056213 111.20029449]
[66.15800476 116.83225250]
[52.25544739 122.46421051]
[50.21146393 137.68649292]
[40.81748199 149.83757019]
[26.60043716 155.64886475]
[11.38464260 153.55717468]
[-0.73692983 144.12515259]
[-6.50363779 129.88995361]
[-4.36426544 114.68079376]
[5.10570669 102.58885193]
[19.35890388 96.86679077]
[34.56128693 99.05382538]
[46.62348938 108.56165314]
[60.52604675 102.92969513]
[74.42860413 97.29773712]
[82.93968964 84.94616699]
[83.25174713 69.94941711]
[83.56380463 54.95265961]
[75.19402313 45.08348846]
[75.79994965 32.55943680]
[84.50775146 24.10475922]
[85.13172913 9.11774349]
[74.90735626 0.29052487]
[71.70092773 -12.63026333]
[76.47040558 -24.85018158]
[87.25634766 -31.96777916]
[88.19197845 -46.93857193]
[89.12760925 -61.90936279]
[90.06323242 -76.88015747]
[90.99886322 -91.85094452]
[81.25265503 -80.44869232]
[67.37211609 -74.76267242]
[52.42751312 -76.05058289]
[39.72443771 -84.02754211]
[32.07270050 -96.92913055]
[31.16479492 -111.90162659]
[37.20154190 -125.63325500]
[48.84766388 -135.08671570]
[63.52714920 -138.17097473]
[77.99303436 -134.20382690]
[89.04559326 -124.06278229]
[94.24033356 -109.98896027]
[98.54792023 -124.35713959]
[102.85550690 -138.72532654]
[107.16308594 -153.09350586]
[111.17082977 -167.54820251]
[114.87699127 -182.08312988]
[118.58315277 -196.61807251]
[122.28931427 -211.15299988]
[109.12648010 -218.52879333]
[98.32183075 -229.06074524]
[90.61205292 -242.03077698]
[86.52279663 -256.55456543]
[86.33288574 -271.64184570]
[90.05525970 -286.26397705]
[97.43613434 -299.42395020]
[107.97225952 -310.22454834]
[120.94525909 -317.92932129]
[135.47062683 -322.01296997]
[150.55799866 -322.19705200]
[165.17866516 -318.46902466]
[178.33580017 -311.08306885]
[189.13230896 -300.54278564]
[196.83207703 -287.56680298]
[200.91011047 -273.03985596]
[201.08837891 -257.95242310]
[197.35470581 -243.33317566]
[189.96366882 -230.17890930]
[179.41921997 -219.38645935]
[166.44026184 -211.69171143]
[151.91174316 -207.61927795]
[136.82424927 -207.44683838]
[133.11808777 -192.91191101]
[129.41192627 -178.37696838]
[125.70576477 -163.84204102]
[127.36563110 -159.30107117]
[126.14428711 -153.66728210]
[121.53127289 -148.78591919]
[117.22368622 -134.41773987]
[112.91609955 -120.04956055]
[108.60852051 -105.68137360]
[105.96965790 -90.91531372]
[105.03402710 -75.94452667]
[104.09839630 -60.97373581]
[103.16276550 -46.00294113]
[102.22714233 -31.03215218]
[113.87651825 -18.94290161]
[113.19589996 -1.83089340]
[100.11874390 9.74172115]
[99.49476624 24.72873688]
[108.46760559 39.77825928]
[98.56056213 55.26471710]
[98.24850464 70.26146698]
[97.93644714 85.25822449]
[114.55690765 77.17765808]
[137.54466248 88.54354858]
[151.56137085 93.88505554]
[165.57807922 99.22657013]
[179.59480286 104.56808472]
[196.54873657 104.55842590]
[201.25134277 120.84712982]
[186.90101624 129.87510681]
[174.25328064 118.58479309]
[160.23657227 113.24328613]
[146.21986389 107.90177155]
[132.20314026 102.56025696]
[126.02735901 106.81580353]
[127.22241974 121.76811981]
[113.67578888 115.32689667]
[107.50000000 119.58243561]
[107.50000000 134.58244324]
[107.50000000 149.58244324]
[107.50000000 164.58244324]
[107.50000000 179.58244324]
[107.50000000 194.58244324]
[107.50000000 209.58244324]
[107.50000000 224.58244324]
[107.50000000 239.58244324]
[107.50000000 254.58244324]
[122.03988647 258.64373779]
[134.94427490 266.47827148]
[145.25555420 277.50460815]
[152.20857239 290.90451050]
[155.28736877 305.68368530]
[154.26348877 320.74536133]
[149.21287537 334.97189331]
[140.51036072 347.30755615]
[128.80169678 356.83697510]
[114.95575714 362.85299683]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 36]
[22 35]
[23 34]
[37 115]
[38 114]
[39 113]
[42 111]
[43 110]
[47 107]
[48 106]
[49 105]
[50 104]
[51 103]
[63 102]
[64 101]
[65 100]
[66 99]
[67 96]
[68 95]
[69 94]
[70 93]
[117 127]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
