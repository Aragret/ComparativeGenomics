%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUAAUAGGGGGGGGGGGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCACUxxxxxxxxxxUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCCCCCCACUACUAG\
) } def
/len { sequence length } bind def

/coor [
[80.51214600 434.27130127]
[68.63544464 424.98651123]
[59.32640839 413.12878418]
[53.12625122 399.38757324]
[50.39544296 384.56170654]
[51.29275131 369.51318359]
[55.76600647 355.11688232]
[63.55513763 342.20977783]
[74.20729828 331.54232788]
[87.10317993 323.73464966]
[101.49304199 319.24072266]
[100.56962585 304.26916504]
[99.64620972 289.29763794]
[98.72280121 274.32608032]
[97.79938507 259.35452271]
[96.87596893 244.38298035]
[95.95256042 229.41142273]
[95.02914429 214.43988037]
[94.10572815 199.46832275]
[92.72170258 184.53231812]
[90.87837982 169.64599609]
[89.03505707 154.75968933]
[87.19173431 139.87338257]
[85.34840393 124.98708344]
[83.56430817 92.57860565]
[75.40764618 79.99016571]
[67.25097656 67.40172577]
[59.09431076 54.81328583]
[45.09671783 47.43914795]
[44.66928101 32.55067825]
[36.51261520 19.96223831]
[22.37741661 23.17542076]
[8.01356411 21.52004623]
[-4.95385599 15.20803738]
[-15.06592464 4.97675610]
[-21.19402313 -7.99705696]
[-22.66576576 -22.23259163]
[-37.24951553 -25.74175835]
[-51.83326340 -29.25092697]
[-66.41701508 -32.76009369]
[-78.88377380 -23.32007980]
[-94.49912262 -24.15371895]
[-105.88996887 -34.86738968]
[-107.67789459 -50.40242386]
[-99.01870728 -63.42365646]
[-84.00100708 -67.78285980]
[-69.71569061 -61.42174530]
[-62.90784836 -47.34384155]
[-48.32409668 -43.83467484]
[-33.74034882 -40.32550812]
[-19.15659904 -36.81634140]
[-13.69347000 -45.94433975]
[-6.13278389 -53.42779922]
[3.05082035 -58.79692841]
[-0.30843839 -73.41593170]
[-3.66769719 -88.03494263]
[-18.71627235 -87.68099213]
[-33.52798843 -90.36388397]
[-47.49631882 -95.97376251]
[-60.04926682 -104.28089142]
[-70.67279816 -114.94510651]
[-78.93187714 -127.52971649]
[-84.48831177 -141.51939392]
[-87.11457062 -156.34124756]
[-86.70309448 -171.38836670]
[-83.27075195 -186.04455566]
[-76.95808411 -199.70965576]
[-68.02359009 -211.82409668]
[-56.83313751 -221.89179993]
[-43.84496307 -229.50050354]
[-29.59092712 -234.33862305]
[-14.65472507 -236.20803833]
[0.35201722 -235.03221130]
[14.81478310 -230.85928345]
[28.14133072 -223.86013794]
[39.78594589 -214.32139587]
[49.27178955 -202.63363647]
[56.21042252 -189.27548218]
[60.31771469 -174.79394531]
[61.42546844 -159.78201294]
[59.48832703 -144.85444641]
[54.58561325 -130.62249756]
[46.91809082 -117.66896820]
[36.79974365 -106.52429199]
[24.64490318 -97.64482880]
[10.95131016 -91.39420319]
[14.31056881 -76.77519226]
[17.66982841 -62.15618515]
[34.65070343 -59.61053085]
[49.27704620 -50.53187180]
[59.14428711 -36.37154388]
[62.61398315 -19.41961861]
[59.08580399 -2.43457270]
[49.10105133 11.80557156]
[57.25771713 24.39401054]
[70.67189789 30.86773872]
[71.68275452 46.65662003]
[79.83941650 59.24505997]
[87.99608612 71.83349609]
[96.15274811 84.42193604]
[110.02562714 90.12660217]
[124.67835236 86.91760254]
[139.33108521 83.70861053]
[153.98381042 80.49961090]
[158.56336975 65.83935547]
[169.87037659 55.44478989]
[184.86331177 52.11199951]
[199.50915527 56.73749542]
[209.86822510 68.07703400]
[213.15399170 83.08034515]
[208.48262024 97.71160126]
[197.11065674 108.03507996]
[182.09712219 111.27381134]
[167.48057556 106.55659485]
[157.19279480 95.15233612]
[142.54006958 98.36133575]
[127.88735199 101.57032776]
[113.23462677 104.77932739]
[127.64801788 108.93312836]
[132.60939026 123.08886719]
[123.94281006 135.33184814]
[108.94282532 135.35731506]
[100.23471069 123.14375305]
[102.07804108 138.03005981]
[103.92136383 152.91636658]
[105.76468658 167.80267334]
[107.60800934 182.68898010]
[110.83499146 186.94830322]
[111.95030212 191.55935669]
[111.18151855 195.64329529]
[109.07727814 198.54490662]
[110.00069427 213.51646423]
[110.92410278 228.48800659]
[111.84751892 243.45956421]
[112.77093506 258.43112183]
[113.69434357 273.40264893]
[114.61775970 288.37420654]
[115.54117584 303.34576416]
[116.46458435 318.31732178]
[131.29762268 321.00881958]
[145.05523682 327.17257690]
[156.93756104 336.45016479]
[166.25378418 348.30221558]
[172.46228027 362.03970337]
[175.20207214 376.86389160]
[174.31388855 391.91296387]
[169.84936523 406.31198120]
[162.06805420 419.22378540]
[151.42236328 429.89770508]
[138.53121948 437.71319580]
[124.14408875 442.21585083]
[109.09741974 443.14389038]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 127]
[21 126]
[22 125]
[23 124]
[24 123]
[25 100]
[26 99]
[27 98]
[28 97]
[30 95]
[31 94]
[37 51]
[38 50]
[39 49]
[40 48]
[54 88]
[55 87]
[56 86]
[101 118]
[102 117]
[103 116]
[104 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
