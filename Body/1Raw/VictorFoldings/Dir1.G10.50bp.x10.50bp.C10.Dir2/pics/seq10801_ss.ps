%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCCUCGCGGGGGGGGGGCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGxxxxxxxxxxAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[82.47116089 375.74972534]
[69.91293335 367.39859009]
[59.82670975 356.18612671]
[52.84651947 342.81723022]
[49.41113281 328.13223267]
[49.73651123 313.05426025]
[53.80219650 298.53115845]
[61.35261536 285.47579956]
[71.91314697 274.70892334]
[84.81993866 266.90728760]
[99.26166534 262.56134033]
[98.63768768 247.57431030]
[98.01371002 232.58729553]
[97.38973236 217.60028076]
[96.76575470 202.61326599]
[96.14177704 187.62625122]
[95.51779938 172.63923645]
[94.89382172 157.65222168]
[94.26985168 142.66519165]
[93.64587402 127.67818451]
[73.90702820 111.20774841]
[75.55156708 85.55248260]
[65.11175537 74.78166962]
[54.67193985 64.01086426]
[44.23212814 53.24005508]
[30.64117813 46.89292526]
[15.68093014 45.80161667]
[0.72068095 44.71030426]
[-14.23956776 43.61899567]
[-29.19981575 42.52768326]
[-43.52633667 49.24045944]
[-55.65695953 40.59770584]
[-70.61721039 39.50639343]
[-78.17784882 52.76533127]
[-90.74746704 61.42371368]
[-105.83034515 63.76241302]
[-120.43177032 59.31707382]
[-131.65263367 48.97032547]
[-137.26499939 34.77652359]
[-136.15454102 19.55385399]
[-128.54174805 6.32479143]
[-115.93813324 -2.28402472]
[-100.84616089 -4.56330776]
[-86.26235199 -0.06050422]
[-75.08232880 10.33035088]
[-69.52590179 24.54614449]
[-54.56565094 25.63745499]
[-41.30918503 18.84662056]
[-28.10850525 27.56743431]
[-13.14825726 28.65874481]
[1.81199157 29.75005531]
[16.77223969 30.84136581]
[31.73248863 31.93267632]
[32.30986786 18.88543129]
[40.14120865 10.34982491]
[37.34888458 -4.38798094]
[34.55655670 -19.12578773]
[19.50254631 -19.56260490]
[4.89450312 -23.22581482]
[-8.58432961 -29.94408607]
[-20.30352020 -39.40319061]
[-29.71494102 -51.16070557]
[-36.37840271 -64.66671753]
[-39.98224640 -79.28952026]
[-40.35791016 -94.34518433]
[-37.48782349 -109.12952423]
[-31.50622749 -122.95104980]
[-22.69289017 -135.16329956]
[-11.46002960 -145.19509888]
[1.66697478 -152.57722473]
[16.07414818 -156.96441650]
[31.08764076 -158.15145874]
[46.00524521 -156.08285522]
[60.12923813 -150.85534668]
[72.79901886 -142.71342468]
[83.42198944 -132.03791809]
[91.50129700 -119.32812500]
[96.65906525 -105.17851257]
[98.65404510 -90.25087738]
[97.39293671 -75.24342346]
[92.93472290 -60.85807419]
[85.48791504 -47.76765060]
[75.40082550 -36.58441925]
[63.14523315 -27.83144379]
[49.29436493 -21.91811180]
[52.08668900 -7.18030548]
[54.87901306 7.55750036]
[68.40663147 23.41499710]
[55.00293732 42.80024338]
[65.44274902 53.57105255]
[75.88256073 64.34185791]
[86.32237244 75.11267090]
[92.20478058 72.69264984]
[98.47827148 71.64261627]
[104.82810211 72.01525116]
[110.93570709 73.79185486]
[116.49468231 76.88329315]
[121.22613525 81.13447571]
[124.89269257 86.33213043]
[127.31040192 92.21548462]
[142.30958557 92.05944824]
[157.30877686 91.90341187]
[172.22769165 90.34583282]
[186.93565369 87.40034485]
[201.64361572 84.45486450]
[216.35157776 81.50938416]
[228.30303955 70.28020477]
[243.92324829 75.27429199]
[247.14347839 91.35415649]
[234.65103149 101.97821808]
[219.29705811 96.21734619]
[204.58909607 99.16282654]
[189.88113403 102.10830688]
[175.17317200 105.05379486]
[188.25231934 112.39788818]
[195.41531372 125.57710266]
[194.46389771 140.54690552]
[185.69006348 152.71324158]
[171.78639221 158.34242249]
[157.01972961 155.70693970]
[145.92178345 145.61557007]
[141.89837646 131.16523743]
[146.18423462 116.79055786]
[157.46481323 106.90260315]
[142.46562195 107.05863953]
[127.46643829 107.21467590]
[123.56739044 115.84407806]
[117.04791260 122.71179199]
[108.63288879 127.05420685]
[109.25686646 142.04121399]
[109.88084412 157.02824402]
[110.50482178 172.01525879]
[111.12879944 187.00227356]
[111.75277710 201.98928833]
[112.37675476 216.97630310]
[113.00072479 231.96331787]
[113.62470245 246.95033264]
[114.24868011 261.93734741]
[129.00169373 265.06777954]
[142.51232910 271.76956177]
[153.93130493 281.62133789]
[162.54081726 294.00387573]
[167.79966736 308.13876343]
[169.37727356 323.13751221]
[167.17446899 338.05722046]
[161.32971191 351.96011353]
[152.21043396 363.97216797]
[140.38986206 373.33831787]
[126.61105347 379.46981812]
[111.74015808 381.98120117]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 92]
[23 91]
[24 90]
[25 89]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[32 47]
[33 46]
[55 87]
[56 86]
[57 85]
[100 126]
[101 125]
[102 124]
[103 114]
[104 113]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
