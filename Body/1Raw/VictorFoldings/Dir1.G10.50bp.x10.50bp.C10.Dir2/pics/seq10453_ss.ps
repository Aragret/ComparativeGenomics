%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACACAAUGGGGGGGGGGGGGGCUCACUCACCCACCACAUUAACAACAUAAAACCCUCAUUCACACGAxxxxxxxxxxCAACCCCCUAGGAAUCACCUCCCAUUCCGAUAAAAUCACCUUCCACCCUUCCCCCCCCCCACUACACAAU\
) } def
/len { sequence length } bind def

/coor [
[72.98632812 360.09356689]
[59.76613235 352.82110596]
[48.87932968 342.37411499]
[41.06819916 329.46484375]
[36.86531830 314.97354126]
[36.55724335 299.88821411]
[40.16498566 285.23736572]
[47.44255829 272.01998901]
[57.89376450 261.13723755]
[70.80603027 253.33106995]
[85.29896545 249.13378906]
[84.98690796 234.13703918]
[84.67485046 219.14028931]
[84.36279297 204.14352417]
[84.05074310 189.14677429]
[83.73868561 174.15002441]
[83.42662811 159.15327454]
[83.11457062 144.15650940]
[82.80251312 129.15975952]
[76.17401886 115.70379639]
[64.47439575 106.31663513]
[52.77476883 96.92947388]
[41.07514572 87.54231262]
[29.37552261 78.15515137]
[18.82616425 88.83761597]
[7.23432350 98.37875366]
[-5.27712107 106.67741394]
[-18.57554054 113.64562988]
[-32.51996231 119.20954132]
[-46.96257401 123.31015778]
[-61.75026703 125.90401459]
[-76.72629547 126.96361542]
[-91.73188782 126.47772980]
[-106.60799408 124.45150757]
[-121.19690704 120.90642548]
[-135.34397888 115.88006592]
[-148.89924622 109.42570496]
[-161.71902466 101.61177063]
[-173.66738892 92.52108765]
[-184.61770630 82.25003052]
[-194.45388794 70.90747833]
[-203.07165527 58.61365891]
[-210.37966919 45.49889755]
[-216.30046082 31.70222092]
[-220.77127075 17.36988068]
[-223.74467468 2.65380716]
[-225.18919373 -12.29000092]
[-225.08949280 -27.30313110]
[-223.44662476 -42.22643661]
[-220.27801514 -56.90172195]
[-215.61726379 -71.17341614]
[-209.51374817 -84.89023590]
[-202.03219604 -97.90677643]
[-193.25189209 -110.08505249]
[-183.26593018 -121.29597473]
[-172.18016052 -131.42068481]
[-160.11210632 -140.35186768]
[-147.18969727 -147.99484253]
[-133.54989624 -154.26860046]
[-119.33731079 -159.10662842]
[-104.70259857 -162.45762634]
[-89.80089569 -164.28610229]
[-74.79016876 -164.57264709]
[-59.82954025 -163.31422424]
[-45.07759857 -160.52418518]
[-30.69072723 -156.23211670]
[-16.82143021 -150.48348999]
[-3.61673379 -143.33926392]
[8.78338718 -134.87516785]
[20.24748421 -125.18090820]
[30.65402985 -114.35926819]
[39.89271164 -102.52496338]
[47.86559296 -89.80344391]
[54.48815536 -76.32955170]
[59.69019699 -62.24612808]
[63.41657639 -47.70246506]
[65.62778473 -32.85273361]
[66.30039215 -17.85434532]
[65.42725372 -2.86629367]
[63.01764297 11.95253849]
[59.09709167 26.44506454]
[53.70716095 40.45765305]
[46.90499115 53.84177017]
[38.76268387 66.45552826]
[50.46230698 75.84268951]
[62.16193008 85.22985077]
[73.86155701 94.61701202]
[85.56118011 104.00417328]
[80.00160217 91.51550293]
[86.40897369 74.99055481]
[106.09372711 65.32759094]
[118.70485687 57.20604706]
[131.31597900 49.08450317]
[143.92710876 40.96296310]
[156.53823853 32.84141922]
[157.27496338 17.34184265]
[167.00764465 5.25654078]
[181.99386597 1.23255742]
[196.47114563 6.81719732]
[204.87265015 19.86305237]
[203.96783447 35.35372543]
[194.10462952 47.33273697]
[179.07562256 51.19390869]
[164.65979004 45.45254898]
[152.04866028 53.57408905]
[139.43753052 61.69563293]
[126.82640076 69.81717682]
[114.21527100 77.93871307]
[118.52285767 92.30690002]
[133.52204895 92.15086365]
[148.52124023 91.99482727]
[164.29661560 85.78404999]
[174.63172913 99.22360992]
[164.57844543 112.87525940]
[148.67727661 106.99401855]
[133.67808533 107.15005493]
[118.67889404 107.30609131]
[113.45898438 112.69149017]
[126.69682312 119.74555206]
[139.93466187 126.79961395]
[154.65191650 129.69827271]
[165.01985168 140.53828430]
[167.26080322 155.36994934]
[160.55821228 168.78916931]
[147.35427856 175.90647888]
[132.46002197 174.12861633]
[121.30232239 164.10334778]
[117.94654083 149.48486328]
[110.48285675 136.47358704]
[103.01917267 123.46230316]
[97.79927063 128.84770203]
[98.11132812 143.84446716]
[98.42337799 158.84121704]
[98.73543549 173.83796692]
[99.04749298 188.83471680]
[99.35955048 203.83148193]
[99.67160797 218.82823181]
[99.98366547 233.82498169]
[100.29571533 248.82173157]
[114.95071411 252.41250610]
[128.17651367 259.67477417]
[139.07138062 270.11334229]
[146.89248657 283.01657104]
[151.10655212 297.50463867]
[151.42626953 312.58972168]
[147.82984924 327.24334717]
[140.56248474 340.46633911]
[130.11968994 351.35717773]
[117.21345520 359.17327881]
[102.72376251 363.38177490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 88]
[21 87]
[22 86]
[23 85]
[24 84]
[91 108]
[92 107]
[93 106]
[94 105]
[95 104]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
