%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAGCCUCAGGGGGGGGGGCCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAxxxxxxxxxxUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCCCCCCCCCCCAUGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[73.76282501 382.13311768]
[61.87855148 372.85803223]
[52.55984497 361.00790405]
[46.34848022 347.27172852]
[43.60557556 332.44812012]
[44.49060440 317.39886475]
[48.95211411 302.99890137]
[56.73070908 290.08547974]
[67.37416077 279.40930176]
[80.26367188 271.59112549]
[94.64985657 267.08544922]
[93.71423340 252.11466980]
[92.77860260 237.14387512]
[91.84297180 222.17309570]
[90.90734863 207.20230103]
[89.97171783 192.23150635]
[89.03608704 177.26071167]
[88.10045624 162.28991699]
[87.16483307 147.31913757]
[86.22920227 132.34834290]
[82.91732025 146.97814941]
[69.88235474 154.40039062]
[55.61078262 149.78279114]
[49.39418030 136.13163757]
[55.27989197 122.33459473]
[69.43555450 117.37425232]
[54.45584106 118.15409851]
[41.07659149 126.59839630]
[27.96426964 119.53324890]
[12.98455620 120.31309509]
[-1.99515831 121.09294128]
[-16.97487259 121.87277985]
[-31.95458603 122.65262604]
[-42.34626389 134.56013489]
[-58.11960983 135.54861450]
[-69.91658020 125.03162384]
[-70.73823547 109.24870300]
[-60.09711456 97.56359100]
[-44.30639267 96.90884399]
[-32.73443222 107.67291260]
[-17.75471687 106.89306641]
[-2.77500343 106.11322021]
[12.20471096 105.33338165]
[27.18442535 104.55353546]
[39.49222565 96.16500854]
[53.67599487 103.17437744]
[68.65570831 102.39453888]
[72.91675568 88.98224640]
[82.13224792 79.70258331]
[93.63191986 75.98558044]
[104.57474518 77.81951904]
[112.29882812 64.96111298]
[120.02291870 52.10271072]
[127.74700165 39.24430847]
[115.62424469 30.39304352]
[104.34371185 20.49072266]
[93.99624634 9.61707973]
[84.66514587 -2.14033771]
[76.42555237 -14.68686390]
[69.34380341 -27.92147827]
[63.47690964 -41.73762512]
[58.87212372 -56.02405548]
[55.56651306 -70.66574860]
[53.58669281 -85.54481506]
[52.94860458 -100.54145050]
[53.65738678 -115.53491211]
[55.70732880 -130.40447998]
[59.08193207 -145.03042603]
[63.75402451 -159.29498291]
[69.68598175 -173.08331299]
[76.83004761 -186.28440857]
[85.12870026 -198.79194641]
[94.51512909 -210.50523376]
[104.91374207 -221.32997131]
[116.24082947 -231.17900085]
[128.40518188 -239.97302246]
[141.30886841 -247.64122009]
[154.84797668 -254.12185669]
[168.91351318 -259.36276245]
[183.39221191 -263.32171631]
[198.16751099 -265.96688843]
[213.12043762 -267.27691650]
[228.13059998 -267.24130249]
[243.07714844 -265.86032104]
[257.83972168 -263.14511108]
[272.29946899 -259.11746216]
[286.33999634 -253.80989075]
[299.84820557 -247.26507568]
[312.71533203 -239.53573608]
[324.83782959 -230.68411255]
[336.11807251 -220.78144836]
[346.46520996 -209.90748596]
[355.79592896 -198.14978027]
[364.03515625 -185.60299683]
[371.11648560 -172.36817932]
[376.98297119 -158.55184937]
[381.58731079 -144.26527405]
[384.89248657 -129.62347412]
[386.87185669 -114.74435425]
[387.50946045 -99.74770355]
[386.80023193 -84.75425720]
[384.74984741 -69.88475800]
[381.37478638 -55.25891495]
[376.70227051 -40.99449158]
[370.76986694 -27.20634079]
[363.62539673 -14.00547791]
[355.32638550 -1.49819028]
[345.93960571 10.21481895]
[335.54064941 21.03924179]
[324.21325684 30.88792419]
[312.04864502 39.68156815]
[299.14471436 47.34937286]
[285.60540771 53.82959747]
[271.53970337 59.07006836]
[257.06088257 63.02859497]
[242.28550720 65.67329407]
[227.33255005 66.98288727]
[212.32238770 66.94681549]
[197.37588501 65.56537628]
[182.61338806 62.84969330]
[168.15376282 58.82162857]
[154.11341858 53.51361847]
[140.60540771 46.96839523]
[132.88131714 59.82679749]
[125.15723419 72.68519592]
[117.43315125 85.54360199]
[124.68966675 111.03005219]
[101.19999695 131.41270447]
[102.13562012 146.38349915]
[103.07125092 161.35429382]
[104.00688171 176.32508850]
[104.94250488 191.29588318]
[105.87813568 206.26666260]
[106.81376648 221.23745728]
[107.74938965 236.20825195]
[108.68502045 251.17904663]
[109.62065125 266.14984131]
[124.45588684 268.82925415]
[138.21852112 274.98175049]
[150.10841370 284.24966431]
[159.43429565 296.09411621]
[165.65399170 309.82650757]
[168.40588379 324.64846802]
[167.52998352 339.69827271]
[163.07719421 354.10092163]
[155.30642700 367.01907349]
[144.66944885 377.70169067]
[131.78468323 385.52767944]
[117.40123749 390.04205322]
[102.35533142 390.98239136]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[26 47]
[27 46]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[51 126]
[52 125]
[53 124]
[54 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
