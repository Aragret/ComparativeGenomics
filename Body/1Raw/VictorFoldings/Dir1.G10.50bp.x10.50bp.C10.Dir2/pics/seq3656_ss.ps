%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCUCAAGGGGGGGGGGCCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAxxxxxxxxxxUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUACCCCCCCCCCCUCCACCUCAA\
) } def
/len { sequence length } bind def

/coor [
[83.60039520 375.06063843]
[70.38019562 367.78817749]
[59.49339294 357.34115601]
[51.68226242 344.43191528]
[47.47938156 329.94058228]
[47.17130661 314.85525513]
[50.77904892 300.20443726]
[58.05662155 286.98703003]
[68.50782776 276.10427856]
[81.42008972 268.29812622]
[95.91302490 264.10083008]
[95.60097504 249.10409546]
[95.28891754 234.10733032]
[94.97686005 219.11058044]
[94.66480255 204.11383057]
[94.35274506 189.11708069]
[94.04068756 174.12031555]
[93.72863770 159.12356567]
[93.41658020 144.12681580]
[93.10452271 129.13006592]
[78.07622528 120.38274384]
[70.44546509 104.75787354]
[55.51115417 103.35556793]
[40.57684708 101.95326996]
[25.64253998 100.55096436]
[10.70823193 99.14865875]
[-4.22607613 97.74635315]
[-9.04987240 112.02317810]
[-17.03661537 124.80240631]
[-27.75559425 135.39486694]
[-40.62874222 143.22932434]
[-54.96183395 147.88328552]
[-69.98189545 149.10574341]
[-84.87892151 146.83079529]
[-98.84952545 141.18112183]
[-111.14029694 132.46139526]
[-121.08841705 121.14186096]
[-128.15737915 107.83297729]
[-131.96597290 93.25246429]
[-132.30880737 78.18663788]
[-129.16738892 63.44797134]
[-122.71112823 49.83131027]
[-113.28821564 38.07098007]
[-101.40679932 28.80120277]
[-87.70764923 22.52188301]
[-72.92952728 19.57165909]
[-57.86940002 20.10963058]
[-43.33945084 24.10678673]
[-30.12325478 31.34756470]
[-18.93354607 41.44148254]
[-10.37377167 53.84418106]
[-4.90554857 67.88680267]
[-2.82377243 82.81204987]
[12.11053562 84.21435547]
[27.04484367 85.61665344]
[41.97914886 87.01895905]
[56.91345978 88.42126465]
[71.84776306 89.82357025]
[87.33322144 72.87693024]
[110.26781464 71.88096619]
[118.77890015 59.52939224]
[127.28999329 47.17782211]
[115.93746948 37.35013199]
[105.73500061 26.33320045]
[96.80642700 14.26076221]
[89.26013947 1.27936244]
[83.18774414 -12.45341396]
[78.66294861 -26.77086449]
[75.74067688 -41.49919128]
[74.45641327 -56.45959854]
[74.82573700 -71.47048950]
[76.84417725 -86.34963989]
[80.48722076 -100.91642761]
[85.71064758 -114.99403381]
[92.45104980 -128.41156006]
[100.62660980 -141.00614929]
[110.13807678 -152.62489319]
[120.86999512 -163.12675476]
[132.69209290 -172.38424683]
[145.46084595 -180.28501892]
[159.02127075 -186.73312378]
[173.20874023 -191.65031433]
[187.85104370 -194.97689819]
[202.77043152 -196.67248535]
[217.78579712 -196.71649170]
[232.71487427 -195.10839844]
[247.37643433 -191.86770630]
[261.59246826 -187.03376770]
[275.19046021 -180.66525269]
[288.00531006 -172.83947754]
[299.88146973 -163.65142822]
[310.67477417 -153.21266174]
[320.25418091 -141.64987183]
[328.50341797 -129.10343933]
[335.32238770 -115.72564697]
[340.62823486 -101.67890167]
[344.35659790 -87.13371277]
[346.46221924 -72.26664734]
[346.91952515 -57.25818634]
[345.72299194 -42.29050446]
[342.88711548 -27.54530334]
[338.44631958 -13.20157337]
[332.45452881 0.56656313]
[324.98446655 13.59197521]
[316.12680054 25.71654510]
[305.98910522 36.79309464]
[294.69436646 46.68716049]
[282.37976074 55.27864075]
[269.19476318 62.46324158]
[255.29937744 68.15374756]
[240.86233521 72.28108215]
[226.05886841 74.79515076]
[211.06867981 75.66542053]
[196.07373047 74.88133240]
[181.25605774 72.45240784]
[166.79551697 68.40813446]
[152.86766052 62.79759979]
[139.64157104 55.68891144]
[131.13047791 68.04048157]
[122.61938477 80.39205933]
[126.08011627 85.30524445]
[128.48973083 90.81068420]
[129.75111389 96.68648529]
[129.81343079 102.69583130]
[128.67416382 108.59651947]
[126.37924194 114.15074921]
[123.02114868 119.13465118]
[118.73522186 123.34736633]
[113.69421387 126.61910248]
[108.10127258 128.81800842]
[108.41333008 143.81475830]
[108.72538757 158.81150818]
[109.03744507 173.80827332]
[109.34950256 188.80502319]
[109.66156006 203.80177307]
[109.97360992 218.79852295]
[110.28566742 233.79528809]
[110.59772491 248.79203796]
[110.90978241 263.78878784]
[125.56477356 267.37954712]
[138.79058838 274.64181519]
[149.68545532 285.08041382]
[157.50654602 297.98361206]
[161.72061157 312.47167969]
[162.04034424 327.55679321]
[158.44390869 342.21038818]
[151.17654419 355.43338013]
[140.73374939 366.32421875]
[127.82752228 374.14035034]
[113.33782959 378.34881592]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 58]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[60 120]
[61 119]
[62 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
