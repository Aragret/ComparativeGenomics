%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCAACCAAUGGGGGGGGGGAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCAGGCCACCUACUCAxxxxxxxxxxUUCUUGCUCAUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCCCCCCCCCCCAUUCAAGCAAU\
) } def
/len { sequence length } bind def

/coor [
[91.68719482 426.08264160]
[77.52659607 420.92764282]
[64.93685150 412.64544678]
[54.59691238 401.68264771]
[47.06439972 388.63052368]
[42.74553680 374.19293213]
[41.87322617 359.14846802]
[44.49451828 344.30847168]
[50.46804428 330.47323608]
[59.47166443 318.38888550]
[71.01982117 308.70712280]
[84.48973846 301.95004272]
[99.15499878 298.48205566]
[99.15499878 283.48205566]
[99.15499878 268.48205566]
[99.15499878 253.48207092]
[99.15499878 238.48207092]
[99.15499878 223.48207092]
[99.15499878 208.48207092]
[99.15499878 193.48207092]
[99.15499878 178.48207092]
[99.15499878 163.48207092]
[95.99142456 156.75366211]
[99.31008911 148.17883301]
[99.61408997 133.18191528]
[88.16929626 132.40744019]
[77.24610138 127.65768433]
[68.22940063 119.21604156]
[62.36436081 107.84758759]
[47.64156723 110.71800995]
[32.91877365 113.58843994]
[22.79867554 126.03685760]
[6.75833082 125.74203491]
[-2.89747858 112.93013000]
[1.23835683 97.42933655]
[15.99317837 91.13054657]
[30.04834938 98.86564636]
[44.77114487 95.99521637]
[59.49393845 93.12479401]
[60.55713272 78.16252136]
[46.38815689 73.23908997]
[32.21918106 68.31566620]
[20.14448547 77.91802216]
[4.79289913 79.44522095]
[-8.93694019 72.40995026]
[-16.66389084 59.05713272]
[-15.92230988 43.64760208]
[-6.94883490 31.09848595]
[7.39313173 25.41416168]
[22.52712059 28.40847778]
[33.62393188 39.12595749]
[37.14261246 54.14669037]
[51.31158447 59.07011795]
[65.48056030 63.99354553]
[78.94763184 57.38763428]
[83.72721863 43.16949081]
[88.50680542 28.95135117]
[93.28639221 14.73320866]
[89.20419312 -3.19486237]
[102.74526215 -14.31813812]
[107.23571014 -28.63022614]
[96.01013184 -18.68103409]
[82.88195038 -11.42494869]
[68.48555756 -7.21260929]
[53.51663208 -6.24756956]
[38.69852448 -8.57646370]
[24.74729919 -14.08675194]
[12.33712101 -22.51215935]
[2.06769204 -33.44554138]
[-5.56473446 -46.35855865]
[-10.19133472 -60.62721634]
[-11.58853531 -75.56200409]
[-9.68881989 -90.44121552]
[-4.58398819 -104.54585266]
[3.47927690 -117.19432068]
[14.11133194 -127.77540588]
[26.79840088 -135.77780151]
[40.92740250 -140.81480408]
[55.81557465 -142.64299011]
[70.74347687 -141.17404175]
[84.98973083 -136.47892761]
[97.86592865 -128.78454590]
[108.74983978 -118.46269226]
[117.11550903 -106.01217651]
[122.55870056 -92.03462982]
[124.81636047 -77.20550537]
[123.77940369 -62.24139023]
[119.49881744 -47.86748886]
[130.57792664 -57.97953033]
[141.34452820 -68.42368317]
[151.78868103 -79.19028473]
[162.23281860 -89.95688629]
[172.67697144 -100.72348785]
[183.12112427 -111.49009705]
[186.59736633 -127.51656342]
[202.29522705 -132.26092529]
[214.06610107 -120.84258270]
[209.80111694 -105.00775146]
[193.88772583 -101.04594421]
[183.44357300 -90.27934265]
[172.99942017 -79.51274109]
[162.55528259 -68.74613190]
[152.11112976 -57.97953033]
[151.81948853 -54.40987396]
[149.74763489 -50.81184769]
[145.90527344 -48.03761292]
[140.68995667 -46.90042496]
[129.61085510 -36.78838348]
[121.54779816 -24.13978004]
[117.05735016 -9.82769108]
[122.38509369 1.07338488]
[118.71656799 13.05949593]
[107.50453186 19.51279640]
[102.72494507 33.73093796]
[97.94535828 47.94907761]
[93.16577148 62.16722107]
[127.08192444 76.56376648]
[131.47024536 110.52671814]
[145.73609924 115.16197968]
[160.00193787 119.79723358]
[173.16659546 111.35768890]
[188.66944885 113.40596771]
[199.19053650 124.97492981]
[199.76211548 140.60206604]
[190.11430359 152.90872192]
[174.80250549 156.08406067]
[161.05647278 148.62879944]
[155.36668396 134.06307983]
[141.10084534 129.42782593]
[126.83499146 124.79257202]
[114.61100769 133.48591614]
[114.30700684 148.48283386]
[114.15499878 163.48207092]
[114.15499878 178.48207092]
[114.15499878 193.48207092]
[114.15499878 208.48207092]
[114.15499878 223.48207092]
[114.15499878 238.48207092]
[114.15499878 253.48207092]
[114.15499878 268.48205566]
[114.15499878 283.48205566]
[114.15499878 298.48205566]
[128.82025146 301.95004272]
[142.29017639 308.70712280]
[153.83833313 318.38888550]
[162.84194946 330.47323608]
[168.81547546 344.30847168]
[171.43676758 359.14846802]
[170.56445312 374.19293213]
[166.24559021 388.63052368]
[158.71307373 401.68264771]
[148.37313843 412.64544678]
[135.78340149 420.92764282]
[121.62279510 426.08264160]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 132]
[25 131]
[29 39]
[30 38]
[31 37]
[40 54]
[41 53]
[42 52]
[55 116]
[56 115]
[57 114]
[58 113]
[60 110]
[61 109]
[88 108]
[89 107]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
[118 130]
[119 129]
[120 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
