%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAGCAGUACGGGGGGGGGGAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAxxxxxxxxxxCCCCAUUAUUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCCCCCCCCCCCGAGUAGUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 397.91479492]
[71.19830322 391.89877319]
[59.48964310 382.36935425]
[50.78712082 370.03369141]
[45.73651886 355.80715942]
[44.71262741 340.74548340]
[47.79142761 325.96630859]
[54.74444962 312.56637573]
[65.05573273 301.54003906]
[77.96011353 293.70553589]
[92.50000000 289.64422607]
[92.50000000 274.64422607]
[92.50000000 259.64422607]
[92.50000000 244.64422607]
[92.50000000 229.64422607]
[92.50000000 214.64422607]
[92.50000000 199.64422607]
[92.50000000 184.64422607]
[92.50000000 169.64422607]
[92.50000000 154.64422607]
[92.50000000 139.64422607]
[92.50000000 124.64423370]
[81.09897614 114.89658356]
[66.28121948 117.22768402]
[51.46346283 119.55878448]
[42.15868759 132.05114746]
[27.09816742 134.20413208]
[15.24595833 125.25646210]
[0.42820024 127.58756256]
[-14.38955784 129.91867065]
[-29.20731544 132.24977112]
[-39.77505875 144.32049561]
[-55.79395294 143.44036865]
[-64.97566986 130.28454590]
[-60.27678680 114.94505310]
[-45.30187988 109.18903351]
[-31.53841972 117.43201447]
[-16.72066116 115.10091400]
[-1.90290368 112.76980591]
[12.91485405 110.43870544]
[21.44729996 98.28415680]
[36.44140625 95.70900726]
[49.13235855 104.74102783]
[63.95011520 102.40992737]
[78.76787567 100.07881927]
[86.75778961 87.38389587]
[82.45021057 73.01570892]
[78.14262390 58.64752579]
[63.26491928 60.77157974]
[48.23681641 60.65440369]
[33.39404297 58.29861450]
[19.06819344 53.75683975]
[5.57931471 47.13054276]
[-6.77124834 38.56776047]
[-17.70757866 28.25978661]
[-26.98535728 16.43690491]
[-34.39731216 3.36324501]
[-39.77785873 -10.66912460]
[-43.00679016 -25.34671402]
[-44.01197815 -40.34162140]
[-42.77096176 -55.31885529]
[-39.31146622 -69.94381714]
[-33.71077728 -83.88978577]
[-26.09401703 -96.84519196]
[-16.63134766 -108.52061462]
[-5.53416729 -118.65522766]
[6.94960785 -127.02260590]
[20.54108620 -133.43582153]
[34.93662643 -137.75160217]
[49.81463242 -139.87355042]
[64.84272003 -139.75422668]
[79.68515778 -137.39633179]
[94.01036072 -132.85250854]
[107.49829102 -126.22429657]
[119.84764099 -117.65975189]
[130.78250122 -107.35021973]
[140.05859375 -95.52601624]
[147.46868896 -82.45130157]
[152.84722900 -68.41816711]
[156.07408142 -53.74011612]
[157.07713318 -38.74506760]
[155.83398438 -23.76800919]
[152.37240601 -9.14353943]
[146.76972961 4.80162811]
[139.15112305 17.75595284]
[129.68678284 29.43002892]
[118.58816528 39.56305695]
[106.10319519 47.92865753]
[92.51080322 54.33993912]
[96.81838989 68.70812225]
[101.12597656 83.07630920]
[106.51816559 77.86341095]
[109.62638092 63.18898010]
[112.73459625 48.51454544]
[123.42352295 37.99091339]
[137.55880737 43.00867462]
[128.05827332 54.61642075]
[118.55773926 66.22416687]
[123.94992828 61.01127243]
[137.85249329 55.37931824]
[151.75503540 49.74736023]
[165.65759277 44.11540222]
[178.06771851 32.56441116]
[192.60275269 41.29190063]
[188.24003601 57.67491150]
[171.28955078 58.01795959]
[157.38699341 63.64991760]
[143.48443604 69.28187561]
[129.58189392 74.91383362]
[131.60421753 89.77687836]
[146.50611877 91.48956299]
[161.09948730 85.37856293]
[172.86007690 94.51845551]
[186.26873779 85.71006775]
[201.47012329 90.83817291]
[206.80303955 105.96891785]
[198.17652893 119.49530029]
[182.20811462 121.04102325]
[171.14739990 109.42035675]
[157.61991882 115.65386200]
[144.79342651 106.39147186]
[129.89152527 104.67877960]
[124.29364777 109.67014313]
[138.53684998 114.37451172]
[141.58444214 129.06164551]
[130.38887024 139.04458618]
[116.14557648 134.34048462]
[113.09788513 119.65287018]
[107.50000000 124.64423370]
[107.50000000 139.64422607]
[107.50000000 154.64422607]
[107.50000000 169.64422607]
[107.50000000 184.64422607]
[107.50000000 199.64422607]
[107.50000000 214.64422607]
[107.50000000 229.64422607]
[107.50000000 244.64422607]
[107.50000000 259.64422607]
[107.50000000 274.64422607]
[107.50000000 289.64422607]
[122.03988647 293.70553589]
[134.94427490 301.54003906]
[145.25555420 312.56637573]
[152.20857239 325.96630859]
[155.28736877 340.74548340]
[154.26348877 355.80715942]
[149.21287537 370.03369141]
[140.51036072 382.36935425]
[128.80169678 391.89877319]
[114.95575714 397.91479492]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 45]
[24 44]
[25 43]
[28 40]
[29 39]
[30 38]
[31 37]
[46 91]
[47 90]
[48 89]
[99 109]
[100 108]
[101 107]
[102 106]
[110 122]
[111 121]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
