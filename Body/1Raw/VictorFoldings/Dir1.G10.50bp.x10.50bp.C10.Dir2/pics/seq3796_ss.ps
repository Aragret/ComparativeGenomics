%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUAGCGGGGGGGGGGCAUCAUUCUACUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCAxxxxxxxxxxAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[96.32286072 568.45745850]
[83.76463318 560.10632324]
[73.67841339 548.89385986]
[66.69821930 535.52496338]
[63.26283646 520.83996582]
[63.58821106 505.76199341]
[67.65389252 491.23886108]
[75.20431519 478.18353271]
[85.76484680 467.41662598]
[98.67163849 459.61499023]
[113.11336517 455.26904297]
[112.48938751 440.28204346]
[111.86540985 425.29501343]
[111.24143219 410.30801392]
[110.61746216 395.32098389]
[109.99348450 380.33395386]
[109.36950684 365.34695435]
[108.74552917 350.35992432]
[108.12155151 335.37292480]
[107.49757385 320.38589478]
[91.95133972 318.08670044]
[77.13748932 312.82717896]
[63.61425400 304.80374146]
[51.89159012 294.31692505]
[42.41194153 281.76019287]
[35.53354263 267.60516357]
[31.51688576 252.38400269]
[30.51484871 236.66920471]
[32.56687546 221.05226135]
[37.59744263 206.12126160]
[45.41881180 192.43884277]
[55.73806000 180.52091980]
[68.16803741 170.81726074]
[82.24188232 163.69453430]
[97.43059540 159.42240906]
[96.18371582 144.47431946]
[94.93684387 129.52622986]
[83.97299957 126.64366150]
[74.49150848 119.69670105]
[67.99012756 109.40656281]
[65.62841797 97.04025269]
[68.03227234 84.25647736]
[54.01556015 78.91496277]
[39.99884415 73.57344818]
[23.90262985 76.71095276]
[13.34295177 64.16402435]
[19.18270111 48.83988571]
[35.41444778 46.50268555]
[45.34035873 59.55673981]
[59.35707092 64.89825439]
[73.37378693 70.23976135]
[86.23218536 62.51567841]
[80.27331543 47.85953903]
[89.53505707 36.19465256]
[91.40266418 21.31137276]
[93.27027893 6.42809343]
[95.13789368 -8.45518684]
[97.00550842 -23.33846664]
[82.53876495 -27.40923500]
[68.84037018 -33.59078598]
[56.21633911 -41.74501801]
[44.94870377 -51.68976593]
[35.28918076 -63.20285797]
[27.45357323 -76.02709198]
[21.61693001 -89.87596130]
[17.90964127 -104.44008636]
[16.41453171 -119.39408875]
[17.16500282 -134.40390015]
[20.14428711 -149.13420105]
[25.28582764 -163.25588989]
[32.47476196 -176.45349121]
[41.55047989 -188.43218994]
[52.31023407 -198.92434692]
[64.51364899 -207.69557190]
[77.88808441 -214.54991150]
[92.13476562 -219.33424377]
[106.93540192 -221.94168091]
[121.95935059 -222.31398010]
[136.87097168 -220.44281006]
[151.33712769 -216.36997986]
[165.03465271 -210.18647766]
[177.65751648 -202.03044128]
[188.92373657 -192.08409119]
[198.58161926 -180.56962585]
[206.41540527 -167.74427795]
[212.25007629 -153.89457703]
[215.95527649 -139.32992554]
[217.44825745 -124.37570953]
[216.69564819 -109.36600494]
[213.71427917 -94.63613892]
[208.57072449 -80.51517487]
[201.37991333 -67.31858826]
[192.30247498 -55.34119415]
[181.54122925 -44.85057068]
[169.33657837 -36.08108139]
[155.96115112 -29.22864342]
[141.71380615 -24.44633865]
[126.91278839 -21.84100723]
[111.88878632 -21.47085381]
[110.02117157 -6.58757353]
[108.15355682 8.29570675]
[106.28594971 23.17898560]
[104.41833496 38.06226730]
[110.51078796 51.65385437]
[101.11546326 64.38329315]
[119.08215332 71.25914001]
[130.32780457 86.09535217]
[131.97685242 104.01547241]
[124.18215942 119.54412079]
[109.88493347 128.27935791]
[111.13180542 143.22744751]
[112.37867737 158.17553711]
[126.63246918 159.58726501]
[140.41401672 163.47692871]
[153.29614258 169.72262573]
[164.87974548 178.12945557]
[174.80622864 188.43563843]
[182.76855469 200.32054138]
[188.52075195 213.41476440]
[191.88552856 227.31161499]
[192.75971985 241.57966614]
[191.11749268 255.77619934]
[187.01101685 269.46096802]
[180.56889343 282.20980835]
[171.99209595 293.62774658]
[161.54771423 303.36138916]
[149.56062317 311.10964966]
[136.40336609 316.63320923]
[122.48458862 319.76193237]
[123.10856628 334.74893188]
[123.73254395 349.73596191]
[124.35652161 364.72296143]
[124.98049927 379.70999146]
[125.60447693 394.69699097]
[126.22845459 409.68402100]
[126.85243225 424.67105103]
[127.47640991 439.65805054]
[128.10038757 454.64508057]
[142.85339355 457.77551270]
[156.36402893 464.47726440]
[167.78300476 474.32907104]
[176.39251709 486.71157837]
[181.65136719 500.84649658]
[183.22897339 515.84521484]
[181.02616882 530.76495361]
[175.18141174 544.66784668]
[166.06213379 556.67987061]
[154.24156189 566.04602051]
[140.46275330 572.17755127]
[125.59185791 574.68890381]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[35 112]
[36 111]
[37 110]
[42 51]
[43 50]
[44 49]
[52 105]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
