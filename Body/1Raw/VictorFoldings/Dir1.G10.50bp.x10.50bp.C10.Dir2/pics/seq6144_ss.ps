%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUACUUCGGGGGGGGGGUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGxxxxxxxxxxGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUCCCCCCCCCCAAUCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.93447876]
[71.19830322 364.91845703]
[59.48964310 355.38903809]
[50.78712082 343.05337524]
[45.73651886 328.82684326]
[44.71262741 313.76516724]
[47.79142761 298.98602295]
[54.74444962 285.58609009]
[65.05573273 274.55975342]
[77.96011353 266.72525024]
[92.50000000 262.66394043]
[92.50000000 247.66392517]
[92.50000000 232.66392517]
[92.50000000 217.66392517]
[92.50000000 202.66392517]
[92.50000000 187.66392517]
[92.50000000 172.66392517]
[92.50000000 157.66392517]
[92.50000000 142.66392517]
[92.50000000 127.66393280]
[79.88887024 119.54238892]
[66.23262787 125.74779510]
[52.57638931 131.95320129]
[38.92014694 138.15861511]
[25.26390648 144.36401367]
[16.17157364 158.01177979]
[-0.17434794 156.69158936]
[-6.95857382 141.76155090]
[2.79792571 128.58039856]
[19.05850029 130.70777893]
[32.71474075 124.50237274]
[46.37098312 118.29695892]
[60.02722549 112.09155273]
[73.68346405 105.88614655]
[73.99552155 90.88939667]
[60.60923767 84.12127686]
[47.22294998 77.35316467]
[30.74061203 83.12116241]
[15.47183228 75.36562347]
[10.60360622 59.29831696]
[-5.18552923 60.30517578]
[-13.31387329 47.82402039]
[-26.83806419 41.33585358]
[-40.36225510 34.84769058]
[-53.88644409 28.35952377]
[-68.71106720 33.83729935]
[-83.03189850 27.15227699]
[-88.35263062 12.27056599]
[-81.51657104 -1.97878087]
[-66.57943726 -7.14187813]
[-52.40316391 -0.15555193]
[-47.39827728 14.83533478]
[-33.87408829 21.32349968]
[-20.34989738 27.81166458]
[-6.82570839 34.29983139]
[7.99608660 32.82889175]
[17.09177208 45.77412415]
[28.56745529 39.83228683]
[41.56116104 41.63171005]
[51.27487564 50.73509979]
[53.99106598 63.96688080]
[67.37734985 70.73499298]
[80.76363373 77.50311279]
[90.23941040 73.63469696]
[99.95491028 73.37178802]
[108.64902496 76.39198303]
[115.31307220 81.96810913]
[125.75288391 71.19729614]
[117.37714386 58.69026947]
[111.78715515 44.72048569]
[109.22501373 29.89948082]
[109.80030823 14.87550163]
[113.48545837 0.30516446]
[120.11704254 -13.17524719]
[129.40298462 -24.97756958]
[140.93550110 -34.58741760]
[154.20892334 -41.58660889]
[168.64193726 -45.67135239]
[183.60299683 -46.66544342]
[198.43798828 -44.52785873]
[212.49880981 -39.35443497]
[225.17169189 -31.37359238]
[235.61149597 -42.14440155]
[246.05131531 -52.91520691]
[256.49111938 -63.68601608]
[266.93093872 -74.45682526]
[277.37075806 -85.22763062]
[271.65289307 -99.34237671]
[272.17681885 -114.56227875]
[278.85180664 -128.25039673]
[290.52133179 -138.03518677]
[305.16357422 -142.22137451]
[320.24169922 -140.08367920]
[333.14334106 -131.99246216]
[341.63317871 -119.34957886]
[344.24032593 -104.34548187]
[340.51306152 -89.57973480]
[331.09716797 -77.61058044]
[317.62399292 -70.51174927]
[302.42782593 -69.51316071]
[288.14157104 -74.78781891]
[277.70175171 -64.01701355]
[267.26193237 -53.24620438]
[256.82211304 -42.47539520]
[246.38230896 -31.70458794]
[235.94248962 -20.93377876]
[244.31488037 -8.51609516]
[249.92451477 5.37645149]
[252.52395630 20.13751984]
[251.99717712 35.12231445]
[248.36477661 49.67575455]
[241.78315735 63.16110992]
[232.53784180 74.98786163]
[221.03100586 84.63755035]
[207.76408386 91.68653107]
[193.31582642 95.82452393]
[178.31712341 96.86833191]
[163.42338562 94.76988983]
[149.28598022 89.61852264]
[136.52369690 81.63710785]
[126.08388519 92.40792084]
[128.10621643 107.27096558]
[141.04428101 114.86087036]
[153.98233032 122.45078278]
[170.70358276 125.25009155]
[172.64256287 142.09280396]
[156.99484253 148.61853027]
[146.39242554 135.38883972]
[133.45436096 127.79892731]
[120.51631165 120.20902252]
[107.50000000 127.66393280]
[107.50000000 142.66392517]
[107.50000000 157.66392517]
[107.50000000 172.66392517]
[107.50000000 187.66392517]
[107.50000000 202.66392517]
[107.50000000 217.66392517]
[107.50000000 232.66392517]
[107.50000000 247.66392517]
[107.50000000 262.66394043]
[122.03988647 266.72525024]
[134.94427490 274.55975342]
[145.25555420 285.58609009]
[152.20857239 298.98602295]
[155.28736877 313.76516724]
[154.26348877 328.82684326]
[149.21287537 343.05337524]
[140.51036072 355.38903809]
[128.80169678 364.91845703]
[114.95575714 370.93447876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 34]
[22 33]
[23 32]
[24 31]
[25 30]
[35 63]
[36 62]
[37 61]
[40 57]
[42 55]
[43 54]
[44 53]
[45 52]
[67 121]
[68 120]
[82 106]
[83 105]
[84 104]
[85 103]
[86 102]
[87 101]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
