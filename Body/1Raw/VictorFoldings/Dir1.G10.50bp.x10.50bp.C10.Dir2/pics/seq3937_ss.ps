%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACACAAGAAGGGGGGGGGGCACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUUAUxxxxxxxxxxCUAGGCCUACUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUCCCCCCCCCCAACACGAGAA\
) } def
/len { sequence length } bind def

/coor [
[79.14088440 412.84976196]
[65.29494476 406.83374023]
[53.58628464 397.30432129]
[44.88375854 384.96865845]
[39.83315659 370.74212646]
[38.80926895 355.68045044]
[41.88806534 340.90127563]
[48.84108734 327.50137329]
[59.15237045 316.47503662]
[72.05675507 308.64053345]
[86.59664154 304.57919312]
[86.59664154 289.57919312]
[86.59664154 274.57919312]
[86.59664154 259.57919312]
[86.59664154 244.57920837]
[86.59664154 229.57920837]
[86.59664154 214.57920837]
[86.59664154 199.57920837]
[86.59664154 184.57920837]
[86.59664154 169.57920837]
[86.44060516 154.58001709]
[86.12854767 139.58326721]
[77.36387634 151.75621033]
[64.00403595 158.57637024]
[49.00409317 158.53518677]
[35.68189621 151.64176941]
[26.98419762 139.42089844]
[24.83484650 124.57568359]
[29.70925713 110.38977051]
[40.52925491 100.00094604]
[54.90156174 95.70713043]
[69.64714813 98.45806885]
[81.50443268 107.64527893]
[87.85108185 121.23857880]
[90.94940186 106.56204987]
[93.89488220 91.85408783]
[92.41373444 82.77345276]
[96.90164948 76.84013367]
[99.99996948 62.16360855]
[103.09828949 47.48707962]
[106.19660950 32.81055450]
[109.29492950 18.13402939]
[112.39325714 3.45750451]
[115.49157715 -11.21902084]
[102.16226959 -4.33936882]
[87.81503296 -8.71620178]
[80.59555817 -21.86455536]
[84.60273743 -36.31940079]
[97.56147766 -43.87393951]
[112.11440277 -40.23905182]
[119.99928284 -27.47693825]
[124.90083313 -41.65349579]
[129.80238342 -55.83005524]
[134.70393372 -70.00661469]
[121.10448456 -76.36842346]
[108.24453735 -84.11693573]
[96.26499176 -93.16725159]
[85.29710388 -103.42021179]
[75.46104431 -114.76347351]
[66.86457825 -127.07276154]
[59.60190201 -140.21319580]
[53.75257874 -154.04081726]
[49.38070679 -168.40412903]
[46.53417969 -183.14573669]
[45.24418640 -198.10412598]
[45.52486420 -213.11541748]
[47.37313461 -228.01513672]
[50.76874924 -242.64002991]
[55.67450333 -256.82986450]
[62.03664780 -270.42916870]
[69.78546906 -283.28890991]
[78.83607483 -295.26824951]
[89.08930206 -306.23590088]
[100.43280792 -316.07168579]
[112.74230194 -324.66784668]
[125.88291931 -331.93020630]
[139.71067810 -337.77917480]
[154.07409668 -342.15069580]
[168.81576538 -344.99688721]
[183.77420044 -346.28649902]
[198.78547668 -346.00546265]
[213.68515015 -344.15682983]
[228.30996704 -340.76086426]
[242.49967957 -335.85476685]
[256.09881592 -329.49227905]
[268.95840454 -321.74316406]
[280.93750000 -312.69226074]
[291.90487671 -302.43875122]
[301.74038696 -291.09503174]
[310.33627319 -278.78530884]
[317.59829712 -265.64453125]
[323.44696045 -251.81661987]
[327.81811523 -237.45309448]
[330.66394043 -222.71134949]
[331.95321655 -207.75289917]
[331.67178345 -192.74162292]
[329.82281494 -177.84199524]
[326.42648315 -163.21725464]
[321.52001953 -149.02766418]
[315.15722656 -135.42868042]
[307.40777588 -122.56929779]
[298.35659790 -110.59040833]
[288.10284424 -99.62326813]
[276.75885010 -89.78804016]
[264.44894409 -81.19246674]
[251.30796814 -73.93074799]
[237.47991943 -68.08243561]
[223.11630249 -63.71160889]
[208.37448120 -60.86615372]
[193.41600037 -59.57725143]
[178.40472412 -59.85902405]
[163.50514221 -61.70838165]
[148.88049316 -65.10506439]
[143.97894287 -50.92850494]
[139.07739258 -36.75194550]
[134.17584229 -22.57538795]
[130.16810608 -8.12069893]
[127.06977844 6.55582619]
[123.97145844 21.23235130]
[120.87313843 35.90887833]
[117.77481842 50.58540344]
[114.67649078 65.26193237]
[111.57817078 79.93845367]
[108.63269043 94.64641571]
[110.35212708 102.57910919]
[105.62592316 109.66037750]
[102.52760315 124.33689880]
[101.12529755 139.27120972]
[101.43735504 154.26795959]
[104.76222229 162.84683228]
[101.59664154 169.57920837]
[101.59664154 184.57920837]
[101.59664154 199.57920837]
[101.59664154 214.57920837]
[101.59664154 229.57920837]
[101.59664154 244.57920837]
[101.59664154 259.57919312]
[101.59664154 274.57919312]
[101.59664154 289.57919312]
[101.59664154 304.57919312]
[116.13652802 308.64053345]
[129.04090881 316.47503662]
[139.35218811 327.50137329]
[146.30522156 340.90127563]
[149.38401794 355.68045044]
[148.36012268 370.74212646]
[143.30952454 384.96865845]
[134.60699463 397.30432129]
[122.89833069 406.83374023]
[109.05239868 412.84976196]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 129]
[22 128]
[34 127]
[35 126]
[36 124]
[38 123]
[39 122]
[40 121]
[41 120]
[42 119]
[43 118]
[44 117]
[51 116]
[52 115]
[53 114]
[54 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
