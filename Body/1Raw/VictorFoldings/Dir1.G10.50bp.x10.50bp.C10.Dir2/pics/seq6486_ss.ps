%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCUACUCGGGGGGGGGGCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUxxxxxxxxxxCGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUCCCCCCCCCCUCCCCUACUC\
) } def
/len { sequence length } bind def

/coor [
[79.04991913 367.93984985]
[65.20397949 361.92382812]
[53.49532318 352.39440918]
[44.79279709 340.05874634]
[39.74219513 325.83221436]
[38.71830368 310.77053833]
[41.79710388 295.99136353]
[48.75012589 282.59143066]
[59.06140900 271.56509399]
[71.96578979 263.73059082]
[86.50567627 259.66928101]
[86.50567627 244.66928101]
[86.50567627 229.66928101]
[86.50567627 214.66928101]
[86.50567627 199.66928101]
[86.50567627 184.66928101]
[86.50567627 169.66928101]
[86.50567627 154.66928101]
[86.50567627 139.66928101]
[86.50567627 124.66928864]
[75.84404755 114.11799622]
[60.84486389 114.27403259]
[45.84567261 114.43006897]
[30.84648514 114.58610535]
[15.84729671 114.74214172]
[0.84810853 114.89817810]
[-14.14458752 115.36621857]
[-29.12430191 116.14606476]
[-42.50355148 124.59037018]
[-55.61587143 117.52521515]
[-70.59558868 118.30506134]
[-85.57530212 119.08490753]
[-100.55501556 119.86475372]
[-115.53472900 120.64459991]
[-128.98927307 130.02047729]
[-143.71937561 122.81241608]
[-144.57196045 106.43544769]
[-130.66996765 97.73679352]
[-116.31457520 105.66488647]
[-101.33486176 104.88504028]
[-86.35514832 104.10519409]
[-71.37542725 103.32534790]
[-56.39571762 102.54550171]
[-44.08791733 94.15698242]
[-29.90414619 101.16635132]
[-14.92443275 100.38650513]
[-11.08172035 97.45238495]
[-5.33946371 96.94465637]
[0.69207197 99.89898682]
[15.69126034 99.74295044]
[30.69044876 99.58691406]
[45.68963623 99.43087769]
[60.68882370 99.27484131]
[75.68801117 99.11880493]
[82.00878906 86.29001617]
[93.72639465 80.05196381]
[105.86220551 81.71369934]
[113.85211945 69.01876831]
[121.70954132 56.24141312]
[129.43362427 43.38301086]
[137.15771484 30.52460861]
[137.63134766 14.71049213]
[150.81773376 7.78457117]
[158.54180908 -5.07383108]
[159.01544189 -20.88794708]
[172.20182800 -27.81386757]
[160.96260071 -37.80966187]
[151.75401306 -49.69738770]
[144.88850403 -63.07128906]
[140.59860229 -77.47521973]
[139.02900696 -92.41820526]
[140.23171997 -107.39118958]
[144.16430664 -121.88435364]
[150.69142151 -135.40447998]
[159.58946228 -147.49176025]
[170.55419922 -157.73541260]
[183.21121216 -165.78762817]
[197.12864685 -171.37541199]
[211.83197021 -174.30984497]
[226.82017517 -174.49238586]
[241.58274841 -171.91831970]
[255.61721802 -166.67672729]
[263.34130859 -179.53512573]
[271.06536865 -192.39353943]
[278.78945923 -205.25193787]
[286.51354980 -218.11033630]
[286.25671387 -234.50747681]
[300.46563721 -242.69514465]
[314.52343750 -234.25059509]
[313.96862793 -217.86082458]
[299.37194824 -210.38624573]
[291.64785767 -197.52784729]
[283.92379761 -184.66944885]
[276.19970703 -171.81105042]
[268.47561646 -158.95263672]
[279.69473267 -149.02432251]
[288.90084839 -137.20031738]
[295.77926636 -123.88241577]
[300.09445190 -109.52351379]
[301.69802856 -94.61220551]
[300.53390503 -79.65617371]
[296.64028931 -65.16488647]
[290.14834595 -51.63224792]
[281.27786255 -39.51977921]
[270.32977295 -29.24085236]
[257.67593384 -21.14661026]
[243.74647522 -15.51395130]
[229.01525879 -12.53606319]
[213.98370361 -12.31580162]
[199.16369629 -14.86213398]
[185.06022644 -20.08978271]
[185.13908386 -5.19538641]
[171.40022278 2.65025377]
[163.67613220 15.50865650]
[163.75498962 30.40305328]
[150.01611328 38.24869156]
[142.29203796 51.10709381]
[134.56794739 63.96549606]
[133.81480408 71.36674500]
[126.54705048 77.00868988]
[118.55712891 89.70361328]
[122.11189270 104.27632141]
[135.04995728 111.86622620]
[147.98800659 119.45613861]
[164.70925903 122.25544739]
[166.64823914 139.09814453]
[151.00051880 145.62388611]
[140.39810181 132.39419556]
[127.46004486 124.80428314]
[114.52198792 117.21437836]
[101.50567627 124.66928864]
[101.50567627 139.66928101]
[101.50567627 154.66928101]
[101.50567627 169.66928101]
[101.50567627 184.66928101]
[101.50567627 199.66928101]
[101.50567627 214.66928101]
[101.50567627 229.66928101]
[101.50567627 244.66928101]
[101.50567627 259.66928101]
[116.04556274 263.73059082]
[128.94995117 271.56509399]
[139.26123047 282.59143066]
[146.21424866 295.99136353]
[149.29304504 310.77053833]
[148.26916504 325.83221436]
[143.21855164 340.05874634]
[134.51603699 352.39440918]
[122.80737305 361.92382812]
[108.96143341 367.93984985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 54]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 46]
[28 45]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[57 121]
[58 120]
[59 118]
[60 117]
[61 116]
[63 114]
[64 113]
[66 111]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
