%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAAACUCAGGGGGGGGGGAACUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAxxxxxxxxxxCCUCCAAAUAUCUCAUCAACAACCGACUAAUCACCACCCAACAAUGACUACCCCCCCCCCAUCAAACUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 385.93505859]
[71.19830322 379.91903687]
[59.48964310 370.38961792]
[50.78712082 358.05395508]
[45.73651886 343.82742310]
[44.71262741 328.76574707]
[47.79142761 313.98660278]
[54.74444962 300.58666992]
[65.05573273 289.56033325]
[77.96011353 281.72583008]
[92.50000000 277.66452026]
[92.50000000 262.66452026]
[92.50000000 247.66452026]
[92.50000000 232.66452026]
[92.50000000 217.66452026]
[92.50000000 202.66452026]
[92.50000000 187.66452026]
[92.50000000 172.66452026]
[92.50000000 157.66452026]
[92.50000000 142.66452026]
[75.82701874 135.94686890]
[63.31636429 123.03956604]
[57.12223816 106.16509247]
[42.12954330 105.69705200]
[27.13684654 105.22901154]
[12.14414978 104.76097107]
[-2.85260344 104.44891357]
[-17.85179138 104.29287720]
[-32.78609848 105.69518280]
[-47.49406052 108.64066315]
[-57.55053329 121.14054108]
[-73.59217072 120.92753601]
[-83.31320190 108.16504669]
[-79.25648499 92.64336395]
[-64.53398895 86.26939392]
[-50.43954468 93.93270111]
[-35.73158264 90.98722076]
[-35.88761902 75.98802948]
[-50.65367508 73.34916687]
[-65.41973114 70.71030426]
[-82.07553101 73.87585449]
[-89.72814941 58.74728012]
[-77.30926514 47.20571899]
[-62.78086472 55.94424438]
[-48.01480865 58.58311081]
[-33.24875259 61.22197342]
[-18.74286270 74.40935516]
[-17.69575500 89.29368591]
[-2.69656682 89.44972229]
[4.06836510 86.35434723]
[12.61219215 89.76827240]
[27.60488892 90.23631287]
[42.59758377 90.70435333]
[57.59028244 91.17240143]
[59.72877502 84.03945160]
[63.05730820 77.37814331]
[67.47752380 71.38533020]
[72.85879517 66.23809814]
[79.04210663 62.08855438]
[85.84474182 59.05931854]
[93.06567383 57.23990250]
[100.49151611 56.68407822]
[107.90283966 57.40826416]
[115.08061981 59.39106369]
[121.81276703 62.57388306]
[127.90032959 66.86267090]
[139.40213013 57.23414612]
[150.90393066 47.60561752]
[162.40573120 37.97709274]
[154.11599731 25.45670128]
[147.28024292 12.08686352]
[141.98445129 -1.96427953]
[138.29522705 -16.52001953]
[136.25895691 -31.39730453]
[135.90122986 -46.40903473]
[137.22659302 -61.36642456]
[140.21832275 -76.08136749]
[144.83883667 -90.36880493]
[151.03001404 -104.04905701]
[158.71398926 -116.95008850]
[167.79412842 -128.90963745]
[178.15625000 -139.77732849]
[189.67002869 -149.41645813]
[202.19067383 -157.70582581]
[215.56071472 -164.54118347]
[229.61201477 -169.83654785]
[244.16786194 -173.52534485]
[259.04519653 -175.56117249]
[274.05694580 -175.91844177]
[289.01428223 -174.59265137]
[303.72915649 -171.60046387]
[318.01644897 -166.97952271]
[331.69650269 -160.78793335]
[344.59732056 -153.10357666]
[356.55661011 -144.02307129]
[367.42398071 -133.66062927]
[377.06277466 -122.14656830]
[385.35174561 -109.62567902]
[392.18670654 -96.25543976]
[397.48165894 -82.20397949]
[401.17001343 -67.64801788]
[403.20541382 -52.77061081]
[403.56222534 -37.75885773]
[402.23596191 -22.80154800]
[399.24334717 -8.08678627]
[394.62197876 6.20037556]
[388.42999268 19.88026047]
[380.74523926 32.78083038]
[371.66439819 44.73984528]
[361.30163574 55.60690689]
[349.78726196 65.24535370]
[337.26614380 73.53397369]
[323.89569092 80.36852264]
[309.84405518 85.66304779]
[295.28799438 89.35097504]
[280.41052246 91.38591766]
[265.39877319 91.74228668]
[250.44149780 90.41559601]
[235.72682190 87.42253113]
[221.43980408 82.80073547]
[207.76010132 76.60833740]
[194.85975647 68.92320251]
[182.90101624 59.84198761]
[172.03427124 49.47889709]
[160.53245544 59.10742188]
[149.03065491 68.73594666]
[137.52885437 78.36447144]
[143.27862549 98.13671112]
[139.24949646 118.32996368]
[126.35187531 134.38153076]
[107.50000000 142.66452026]
[107.50000000 157.66452026]
[107.50000000 172.66452026]
[107.50000000 187.66452026]
[107.50000000 202.66452026]
[107.50000000 217.66452026]
[107.50000000 232.66452026]
[107.50000000 247.66452026]
[107.50000000 262.66452026]
[107.50000000 277.66452026]
[122.03988647 281.72583008]
[134.94427490 289.56033325]
[145.25555420 300.58666992]
[152.20857239 313.98660278]
[155.28736877 328.76574707]
[154.26348877 343.82742310]
[149.21287537 358.05395508]
[140.51036072 370.38961792]
[128.80169678 379.91903687]
[114.95575714 385.93505859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 54]
[24 53]
[25 52]
[26 51]
[27 49]
[28 48]
[29 37]
[30 36]
[38 46]
[39 45]
[40 44]
[66 127]
[67 126]
[68 125]
[69 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
