%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACGCCGCAGGGGGGGGGGGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUxxxxxxxxxxGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUGGUAUCCCCCCCCCCAAUACGCCUCA\
) } def
/len { sequence length } bind def

/coor [
[101.90951538 390.60702515]
[87.02617645 388.24420166]
[73.08914948 382.51217651]
[60.85004425 373.72009277]
[50.96890259 362.34204102]
[43.97859573 348.99166870]
[40.25610733 334.38894653]
[40.00218582 319.32135010]
[43.23052216 304.60150146]
[49.76701736 291.02316284]
[59.25917053 279.31863403]
[71.19507599 270.11914062]
[84.93104553 263.92077637]
[99.72631836 261.05780029]
[100.34214783 246.07044983]
[100.95796967 231.08308411]
[101.57379913 216.09573364]
[102.18962097 201.10838318]
[102.80545044 186.12103271]
[103.42127228 171.13368225]
[104.03710175 156.14631653]
[104.65292358 141.15896606]
[105.26875305 126.17161560]
[82.36026764 115.94437408]
[80.06988525 93.84501648]
[68.28775024 84.56163025]
[56.50561523 75.27824402]
[42.46363831 70.00350189]
[27.48339653 69.23384094]
[12.50315666 68.46417999]
[-2.47708488 67.69451904]
[-12.59536552 75.75827026]
[-25.09331894 74.77211761]
[-33.27906418 65.81356049]
[-48.24034500 64.73648834]
[-63.20162582 63.65942001]
[-78.16290283 62.58235168]
[-91.18462372 71.95329285]
[-106.59043884 67.47664642]
[-112.56233215 52.58650970]
[-104.51918030 38.70532990]
[-88.63099670 36.48155212]
[-77.08583832 47.62107086]
[-62.12455750 48.69813919]
[-47.16327667 49.77521133]
[-32.20199585 50.85227966]
[-16.88612747 42.33942413]
[-1.70742476 52.71427917]
[13.27281666 53.48394012]
[28.25305748 54.25359726]
[43.23329926 55.02325821]
[30.94543457 46.42044449]
[20.53224373 35.62389755]
[12.37910080 23.03317642]
[6.78773928 9.11424351]
[3.96508670 -5.61778402]
[4.01560402 -20.61769867]
[6.93742228 -35.33037949]
[12.62240887 -49.21133423]
[20.86017418 -61.74685287]
[31.34584999 -72.47301483]
[43.69137955 -80.99287415]
[57.43987656 -86.99110413]
[72.08253479 -90.24573517]
[87.07744598 -90.63632202]
[101.86968231 -88.14839935]
[115.91180420 -82.87404633]
[128.68414307 -75.00845337]
[139.71400452 -64.84272003]
[148.59318542 -52.75305557]
[154.99311829 -39.18688583]
[158.67691040 -24.64626503]
[159.50825500 -9.66932011]
[157.45637512 5.18967724]
[152.59721375 19.38082123]
[145.11061096 32.37892151]
[135.27360535 43.70294189]
[123.45026398 52.93379593]
[110.07815552 59.72986603]
[95.65214539 63.83964539]
[80.70612335 65.11103058]
[65.78900146 63.49610519]
[77.57113647 72.77948761]
[89.35327148 82.06287384]
[99.93257141 77.68176270]
[112.01280975 79.47987366]
[122.04386139 87.71234131]
[126.68891907 100.64405060]
[141.34164429 97.43505859]
[155.99436951 94.22605896]
[167.81977844 83.71557617]
[181.90765381 88.55096436]
[196.56037903 85.34196472]
[202.49522400 73.20988464]
[214.17312622 66.82180786]
[227.20286560 68.32344818]
[236.83087158 76.94051361]
[251.54638672 74.03304291]
[266.26190186 71.12557220]
[280.97744751 68.21810150]
[295.69296265 65.31063080]
[310.34567261 62.10163116]
[324.92944336 58.59246445]
[339.51318359 55.08329773]
[344.48895264 40.48038101]
[356.58398438 30.90363884]
[371.93878174 29.40897560]
[385.65365601 36.47333145]
[393.35229492 49.84249878]
[392.57806396 65.25041962]
[383.57800293 77.78048706]
[369.22402954 83.43440247]
[354.09640503 80.40802002]
[343.02233887 69.66704559]
[328.43859863 73.17621613]
[313.85485840 76.68537903]
[310.61553955 80.27091217]
[305.06723022 81.82145691]
[298.60043335 80.02614594]
[283.88491821 82.93362427]
[269.16937256 85.84109497]
[254.45385742 88.74856567]
[239.73834229 91.65603638]
[231.01263428 106.00055695]
[214.28955078 109.69786835]
[199.76937866 99.99468994]
[185.11665344 103.20368958]
[174.33930969 113.48464203]
[159.20336914 108.87878418]
[144.55064392 112.08778381]
[129.89791870 115.29677582]
[120.25610352 126.78744507]
[119.64027405 141.77479553]
[119.02445221 156.76214600]
[118.40862274 171.74949646]
[117.79280090 186.73686218]
[117.17697906 201.72421265]
[116.56114960 216.71156311]
[115.94532776 231.69891357]
[115.32949829 246.68626404]
[114.71367645 261.67361450]
[129.22419739 265.74075317]
[142.40533447 273.04513550]
[153.54627991 283.19287109]
[162.04617310 295.63668823]
[167.44665527 309.70547485]
[169.45648193 324.64059448]
[167.96725464 339.63656616]
[163.05929565 353.88467407]
[154.99728394 366.61654663]
[144.21598816 377.14556885]
[131.29682922 384.90393066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[25 84]
[26 83]
[27 82]
[28 51]
[29 50]
[30 49]
[31 48]
[34 46]
[35 45]
[36 44]
[37 43]
[88 131]
[89 130]
[90 129]
[92 127]
[93 126]
[97 123]
[98 122]
[99 121]
[100 120]
[101 119]
[102 116]
[103 115]
[104 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
