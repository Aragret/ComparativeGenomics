%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACCCCCGGGGGGGGGGCUCCUAAUACUAACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAxxxxxxxxxxUAUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCCCCCCCCCCCAAACAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[80.43476105 435.72647095]
[66.27415466 430.57147217]
[53.68441391 422.28927612]
[43.34447479 411.32647705]
[35.81196213 398.27435303]
[31.49309731 383.83676147]
[30.62079048 368.79229736]
[33.24208069 353.95230103]
[39.21560669 340.11706543]
[48.21922684 328.03271484]
[59.76737976 318.35095215]
[73.23729706 311.59387207]
[87.90255737 308.12588501]
[87.90255737 293.12588501]
[87.90255737 278.12588501]
[87.90255737 263.12588501]
[87.90255737 248.12590027]
[87.90255737 233.12590027]
[87.90255737 218.12590027]
[87.90255737 203.12590027]
[87.90255737 188.12590027]
[87.90255737 173.12590027]
[80.16526031 160.39862061]
[87.90255737 146.59844971]
[87.90255737 131.59844971]
[87.90255737 116.59844971]
[80.71117401 129.76219177]
[78.84439850 144.64558411]
[71.26646423 157.59065247]
[59.20245361 166.50465393]
[44.60267639 169.94653320]
[29.82739067 167.35984802]
[17.26523018 159.16276550]
[8.94703960 146.68046570]
[6.21757174 131.93089294]
[9.51808357 117.29850769]
[18.31500053 105.14884949]
[31.18617821 97.44607544]
[46.05081177 95.43544006]
[60.50818253 99.44320679]
[75.42593384 97.87456512]
[61.58233261 92.09922028]
[47.73872757 86.32388306]
[35.57889938 95.70653534]
[20.35472488 97.73632812]
[6.16142797 91.86726379]
[-3.18306375 79.67808533]
[-5.16513014 64.44762421]
[0.74839514 50.27279663]
[12.96680260 40.96655655]
[28.20340347 39.03224182]
[42.35962677 44.99016953]
[51.62752151 57.23768616]
[53.51406860 72.48027802]
[67.35767365 78.25561523]
[81.20127869 84.03096008]
[90.14058685 71.98567963]
[80.60266876 60.40862656]
[65.06239319 55.17109299]
[62.09378815 39.04287338]
[74.75070953 28.61529732]
[90.01279449 34.61536026]
[92.17972565 50.87071228]
[101.71763611 62.44776535]
[116.70531464 61.83988190]
[125.27433777 49.52843094]
[133.84336853 37.21697617]
[142.41238403 24.90552521]
[150.98141479 12.59407425]
[140.37504578 1.33817351]
[132.33091736 -11.86438751]
[127.19536591 -26.44065285]
[125.18859100 -41.75861740]
[126.39518738 -57.15462494]
[130.76057434 -71.96213531]
[138.09346008 -85.54055786]
[148.07424927 -97.30297852]
[160.26893616 -106.74154663]
[174.14799500 -113.44935608]
[189.10937500 -117.13802338]
[204.50460815 -117.65008545]
[219.66693115 -114.96569061]
[233.94012451 -109.20339203]
[235.15377808 -124.97797394]
[248.65002441 -131.27880859]
[256.96777344 -143.76139832]
[265.28552246 -156.24398804]
[273.60327148 -168.72657776]
[269.03506470 -183.68202209]
[275.19631958 -198.05467224]
[289.17791748 -205.05816650]
[304.37814331 -201.38569641]
[313.61993408 -188.77128601]
[312.53958130 -173.17106628]
[301.64721680 -161.95098877]
[286.08584595 -160.40882874]
[277.76809692 -147.92623901]
[269.45034790 -135.44364929]
[261.13262939 -122.96105957]
[260.51391602 -108.07930756]
[246.42271423 -100.88564301]
[256.71499634 -90.57508850]
[264.78952026 -78.44306183]
[270.33139038 -64.95911407]
[273.12380981 -50.64559555]
[273.05654907 -36.05740738]
[270.13024902 -21.76048851]
[264.45654297 -8.30986023]
[256.25372314 3.77192378]
[245.83836365 14.01506805]
[233.61318970 22.02081299]
[220.05136108 27.47695351]
[205.67828369 30.17001343]
[191.05114746 29.99360275]
[176.73745728 26.95261002]
[163.29286194 21.16309738]
[154.72383118 33.47454834]
[146.15481567 45.78599930]
[137.58578491 58.09745407]
[129.01676941 70.40890503]
[126.88583374 83.83634949]
[120.42359161 93.96315002]
[134.48986816 99.17272949]
[151.44297791 99.00377655]
[156.29841614 115.24757385]
[142.03353882 124.40998840]
[129.28028870 113.23900604]
[115.21401215 108.02942657]
[102.90255737 116.59844971]
[102.90255737 131.59844971]
[102.90255737 146.59844971]
[110.63986206 160.39862061]
[102.90255737 173.12590027]
[102.90255737 188.12590027]
[102.90255737 203.12590027]
[102.90255737 218.12590027]
[102.90255737 233.12590027]
[102.90255737 248.12590027]
[102.90255737 263.12588501]
[102.90255737 278.12588501]
[102.90255737 293.12588501]
[102.90255737 308.12588501]
[117.56781769 311.59387207]
[131.03773499 318.35095215]
[142.58589172 328.03271484]
[151.58950806 340.11706543]
[157.56303406 353.95230103]
[160.18432617 368.79229736]
[159.31201172 383.83676147]
[154.99314880 398.27435303]
[147.46064758 411.32647705]
[137.12069702 422.28927612]
[124.53096008 430.57147217]
[110.37035370 435.72647095]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[26 129]
[41 56]
[42 55]
[43 54]
[57 64]
[58 63]
[65 120]
[66 119]
[67 118]
[68 117]
[69 116]
[83 101]
[85 99]
[86 98]
[87 97]
[88 96]
[122 128]
[123 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
