%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCCUACGGGGGGGGGGAAGCCUCAGAGUACUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACxxxxxxxxxxUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAAAUAUCCCCCCCCCCCACUCUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[112.43849182 416.89968872]
[99.21829224 409.62722778]
[88.33148956 399.18023682]
[80.52035522 386.27096558]
[76.31747437 371.77966309]
[76.00940704 356.69433594]
[79.61714935 342.04348755]
[86.89472198 328.82611084]
[97.34592438 317.94332886]
[110.25818634 310.13720703]
[124.75112152 305.93991089]
[124.43907166 290.94314575]
[124.12701416 275.94641113]
[123.81495667 260.94964600]
[123.50289917 245.95289612]
[123.19084167 230.95614624]
[122.87878418 215.95938110]
[122.56673431 200.96263123]
[122.25467682 185.96588135]
[121.94261932 170.96913147]
[121.63056183 155.97236633]
[117.32297516 141.60418701]
[109.33306122 128.90925598]
[101.34314728 116.21433258]
[90.12666321 112.93157959]
[84.00468445 102.97631836]
[86.13606262 91.48532104]
[78.41197968 78.62692261]
[70.68788910 65.76851654]
[62.96380615 52.91011429]
[55.23972321 40.05171204]
[51.22633743 54.50483322]
[38.96158218 63.14056396]
[24.00151062 62.04682541]
[13.12318230 51.71909714]
[11.25458431 36.83594131]
[19.24221230 24.13957214]
[33.46759033 19.38156891]
[47.48679352 24.71761513]
[41.71051788 10.87439728]
[35.93424606 -2.96882033]
[30.01428413 -16.75120163]
[23.95127106 -30.47125626]
[17.88825798 -44.19131088]
[11.82524490 -57.91136169]
[5.76223135 -71.63141632]
[-8.76723099 -67.77898407]
[-23.72047806 -66.24702454]
[-38.72927094 -67.07324219]
[-53.42400360 -70.23730469]
[-67.44281006 -75.66129303]
[-80.44045258 -83.21163177]
[-92.09687042 -92.70239258]
[-102.12500000 -103.89984894]
[-110.27789307 -116.52825928]
[-116.35478210 -130.27664185]
[-120.20600891 -144.80642700]
[-121.73674774 -159.75979614]
[-120.90928650 -174.76852417]
[-117.74401093 -189.46299744]
[-112.31886292 -203.48135376]
[-104.76745605 -216.47837830]
[-95.27573395 -228.13400269]
[-84.07744598 -238.16120911]
[-71.44836426 -246.31306458]
[-57.69948196 -252.38880920]
[-43.16938400 -256.23883057]
[-28.21588516 -257.76834106]
[-13.20722866 -256.93963623]
[1.48698258 -253.77316284]
[15.50489140 -248.34686279]
[28.50129318 -240.79437256]
[40.15614319 -231.30169678]
[50.18242264 -220.10258484]
[58.33323288 -207.47282410]
[64.40785217 -193.72343445]
[68.25668335 -179.19302368]
[69.78495026 -164.23939514]
[68.95500946 -149.23080444]
[65.78731537 -134.53686523]
[60.35985565 -120.51940155]
[52.80630112 -107.52362061]
[43.31265640 -95.86955261]
[32.11271667 -85.84420013]
[19.48228455 -77.69442749]
[25.54529762 -63.97437668]
[31.60831070 -50.25432205]
[37.67132568 -36.53426743]
[43.73433685 -22.81421471]
[49.35102844 -17.93584824]
[49.77746582 -8.74509239]
[55.55373764 5.09812498]
[61.33000946 18.94134331]
[68.09812164 32.32762909]
[75.82221222 45.18603134]
[83.54629517 58.04443359]
[91.27037811 70.90283203]
[98.99446106 83.76123810]
[113.85906219 91.47737885]
[114.03807831 108.22441101]
[122.02799225 120.91934204]
[130.01791382 133.61427307]
[129.84066772 118.61531830]
[132.94335938 103.93971252]
[139.17616272 90.29595947]
[148.23818970 78.34272766]
[159.69195557 68.65710449]
[172.98448181 61.70667648]
[187.47407532 57.82699585]
[202.46118164 57.20536041]
[217.22229004 59.87178040]
[231.04475403 65.69753265]
[243.26127625 74.40135956]
[253.28207397 85.56306458]
[260.62335205 98.64379883]
[264.93072510 113.01204681]
[265.99621582 127.97415924]
[263.76840210 142.80780029]
[258.35482788 156.79682922]
[250.01684570 169.26591492]
[239.15699768 179.61308289]
[226.29956055 187.33877563]
[212.06526184 192.07003784]
[197.14129639 193.57844543]
[182.24815369 191.79118347]
[168.10482788 186.79454041]
[155.39413452 178.82972717]
[144.72970581 168.28128052]
[136.62731934 155.66032410]
[136.93937683 170.65707397]
[137.25143433 185.65382385]
[137.56349182 200.65057373]
[137.87553406 215.64733887]
[138.18759155 230.64408875]
[138.49964905 245.64083862]
[138.81170654 260.63760376]
[139.12376404 275.63433838]
[139.43582153 290.63110352]
[139.74787903 305.62786865]
[154.40287781 309.21862793]
[167.62867737 316.48086548]
[178.52354431 326.91946411]
[186.34465027 339.82269287]
[190.55871582 354.31076050]
[190.87843323 369.39584351]
[187.28201294 384.04943848]
[180.01464844 397.27246094]
[169.57183838 408.16329956]
[156.66561890 415.97940063]
[142.17591858 420.18789673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 102]
[23 101]
[24 100]
[27 98]
[28 97]
[29 96]
[30 95]
[31 94]
[39 93]
[40 92]
[41 91]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
