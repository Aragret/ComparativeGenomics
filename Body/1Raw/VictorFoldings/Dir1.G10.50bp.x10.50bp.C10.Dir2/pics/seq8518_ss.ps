%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAUCCCCUUAGGGGGGGGGGUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUxxxxxxxxxxUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUACCCCCCCCCCGCCAACCCCUUA\
) } def
/len { sequence length } bind def

/coor [
[89.58605957 395.62435913]
[75.42546082 390.46936035]
[62.83571625 382.18716431]
[52.49577713 371.22439575]
[44.96326447 358.17227173]
[40.64440155 343.73464966]
[39.77209091 328.69021606]
[42.39338303 313.85021973]
[48.36690903 300.01498413]
[57.37052536 287.93060303]
[68.91868591 278.24884033]
[82.38860321 271.49176025]
[97.05386353 268.02380371]
[97.05386353 253.02378845]
[97.05386353 238.02378845]
[97.05386353 223.02378845]
[97.05386353 208.02378845]
[97.05386353 193.02378845]
[97.05386353 178.02378845]
[97.05386353 163.02378845]
[97.05386353 148.02378845]
[97.05386353 133.02378845]
[97.05386353 118.02378845]
[86.50113678 107.36357880]
[71.50190735 107.21157074]
[56.50267792 107.05956268]
[41.50344849 106.90755463]
[26.50421906 106.75553894]
[11.50499058 106.90755463]
[-3.48807788 107.36351776]
[-18.48114586 107.81948853]
[-24.21046066 121.92958069]
[-35.18804550 132.48480225]
[-49.51196289 137.65637207]
[-64.70051575 136.54830933]
[-78.12218475 129.35256958]
[-87.45159912 117.31587982]
[-91.07236481 102.52365112]
[-88.35717773 87.53874207]
[-79.77645111 74.95736694]
[-66.81684875 66.95932770]
[-51.72370148 64.93033600]
[-37.11198807 69.22192383]
[-25.51327515 79.09055328]
[-18.93711281 92.82641602]
[-3.94404531 92.37045288]
[11.04902267 91.91448212]
[14.95078468 89.06845856]
[20.69510078 88.68314362]
[26.65622902 91.75630951]
[41.65546036 91.90831757]
[56.65468979 92.06033325]
[71.65391541 92.21234131]
[86.65315247 92.36434937]
[99.61811829 84.82051086]
[106.89765167 71.70531464]
[114.17717743 58.59011459]
[103.10784149 47.45655060]
[95.61968994 33.67398071]
[92.30892944 18.35679817]
[93.43435669 2.74089384]
[98.89716339 -11.91609001]
[108.24956512 -24.43602943]
[120.73146820 -33.81501770]
[135.33227539 -39.30387115]
[150.87268066 -40.46795273]
[166.09991455 -37.22159195]
[173.11213684 -50.48163223]
[180.12437439 -63.74166870]
[187.13659668 -77.00170898]
[175.11013794 -86.01895905]
[164.64244080 -96.80663300]
[155.99128723 -109.09906769]
[149.36972046 -122.59355927]
[144.94078064 -136.95777893]
[142.81356812 -151.83802795]
[143.04045105 -166.86782837]
[145.61582947 -181.67707825]
[150.47630310 -195.90107727]
[157.50216675 -209.18955994]
[166.52041626 -221.21527100]
[177.30894470 -231.68208313]
[189.60209656 -240.33221436]
[203.09713745 -246.95268250]
[217.46173096 -251.38043213]
[232.34213257 -253.50640869]
[247.37191772 -253.27830505]
[262.18096924 -250.70169067]
[276.40457153 -245.84004211]
[289.69247437 -238.81307983]
[301.71743774 -229.79385376]
[312.18334961 -219.00445557]
[320.83248901 -206.71058655]
[327.45181274 -193.21501160]
[331.87838745 -178.85005188]
[334.00314331 -163.96945190]
[333.77377319 -148.93969727]
[331.19595337 -134.13085938]
[326.33312988 -119.90766144]
[319.30508423 -106.62034607]
[310.28485107 -94.59611511]
[299.49459839 -84.13109589]
[287.20001221 -75.48297882]
[273.70388794 -68.86474609]
[259.33856201 -64.43937683]
[244.45779419 -62.31583786]
[229.42805481 -62.54643631]
[214.61944580 -65.12548828]
[200.39663696 -69.98947906]
[193.38441467 -56.72944260]
[186.37217712 -43.46940231]
[179.35995483 -30.20936203]
[189.85124207 -20.40098000]
[197.44300842 -8.19499016]
[201.60931396 5.57499313]
[202.05845642 19.96661377]
[198.75332642 33.99325943]
[191.91441345 46.69169617]
[182.00508118 57.18822098]
[169.70021057 64.75878143]
[155.84024048 68.87888336]
[141.37370300 69.25998688]
[127.29238129 65.86964417]
[120.01284790 78.98484039]
[112.73332214 92.10004425]
[125.59178925 84.37606812]
[140.37118530 86.93913269]
[149.87802124 98.54173279]
[149.48506165 113.53658295]
[139.38357544 124.62532043]
[124.49021149 126.41077423]
[112.05386353 118.02378845]
[112.05386353 133.02378845]
[112.05386353 148.02378845]
[112.05386353 163.02378845]
[112.05386353 178.02378845]
[112.05386353 193.02378845]
[112.05386353 208.02378845]
[112.05386353 223.02378845]
[112.05386353 238.02378845]
[112.05386353 253.02378845]
[112.05386353 268.02380371]
[126.71912384 271.49176025]
[140.18904114 278.24884033]
[151.73719788 287.93060303]
[160.74081421 300.01498413]
[166.71434021 313.85021973]
[169.33563232 328.69021606]
[168.46331787 343.73464966]
[164.14445496 358.17227173]
[156.61193848 371.22439575]
[146.27200317 382.18716431]
[133.68226624 390.46936035]
[119.52165985 395.62435913]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 54]
[25 53]
[26 52]
[27 51]
[28 50]
[29 47]
[30 46]
[31 45]
[55 125]
[56 124]
[57 123]
[67 112]
[68 111]
[69 110]
[70 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
