%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAGCAUUGGGGGGGGGGAACCUUUUAAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUxxxxxxxxxxUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACCCCCCCCCCCACCUAGCAUU\
) } def
/len { sequence length } bind def

/coor [
[80.41100311 376.64776611]
[67.19080353 369.37527466]
[56.30400085 358.92828369]
[48.49287033 346.01904297]
[44.28998947 331.52770996]
[43.98191833 316.44238281]
[47.58965683 301.79156494]
[54.86723328 288.57415771]
[65.31843567 277.69140625]
[78.23069763 269.88525391]
[92.72364044 265.68795776]
[92.41158295 250.69120789]
[92.09952545 235.69445801]
[91.78746796 220.69770813]
[91.47541046 205.70094299]
[91.16335297 190.70419312]
[90.85130310 175.70744324]
[90.53924561 160.71069336]
[90.22718811 145.71392822]
[89.91513062 130.71717834]
[77.13777161 122.85975647]
[63.61358261 129.34791565]
[50.08939362 135.83609009]
[46.38372040 151.02825928]
[33.74913788 160.24244690]
[18.15131760 159.12800598]
[6.95506811 148.21113586]
[5.44691801 132.64645386]
[14.33896923 119.78311920]
[29.43266678 115.69480896]
[43.60123062 122.31189728]
[57.12541962 115.82373047]
[70.64961243 109.33556366]
[70.74527740 92.53995514]
[79.54551697 78.62856293]
[94.07792664 71.63758087]
[109.77429199 73.37153625]
[109.77429199 58.37153625]
[109.77429199 43.37153625]
[109.77429199 28.37153816]
[102.18438721 15.43348217]
[89.09123230 8.11437607]
[75.99807739 0.79527068]
[62.90492249 -6.52383471]
[49.81176758 -13.84294033]
[36.24743271 -6.49363279]
[20.86477089 -7.66722107]
[8.57233906 -16.98921776]
[3.29260325 -31.48500824]
[6.71030998 -46.52903748]
[17.73488045 -57.32081223]
[32.84841537 -60.41671371]
[47.22824097 -54.82885361]
[56.28580475 -42.34029770]
[57.13087463 -26.93609428]
[70.22402954 -19.61698914]
[83.31718445 -12.29788399]
[96.41033936 -4.97877789]
[109.50349426 2.34032750]
[116.22984314 -9.67173767]
[127.21144104 -15.69820309]
[126.27581024 -30.66899490]
[117.11462402 -39.80827332]
[116.67739105 -52.33934784]
[124.65225983 -61.48859787]
[124.02828217 -76.47561646]
[123.40430450 -91.46263123]
[122.78032684 -106.44964600]
[108.74483490 -112.44694519]
[98.70788574 -123.94574738]
[94.66233063 -138.66296387]
[97.41141510 -153.67646790]
[106.40930939 -166.00531006]
[119.86946869 -173.20162964]
[135.11936951 -173.83654785]
[149.13114929 -167.78402710]
[159.12272644 -156.24578857]
[163.11030579 -141.51275635]
[160.30210876 -126.51019287]
[151.25573730 -114.21686554]
[137.76734924 -107.07362366]
[138.39132690 -92.08660889]
[139.01530457 -77.09959412]
[139.63928223 -62.11257553]
[149.83204651 -47.86100388]
[141.24659729 -31.60462189]
[142.18223572 -16.63383102]
[145.42276001 -15.38542652]
[148.42445374 -13.63915825]
[160.68681335 -22.27827454]
[172.94918823 -30.91739082]
[185.21154785 -39.55650711]
[197.47392273 -48.19562149]
[196.01119995 -63.48470688]
[202.40359497 -77.45012665]
[214.93156433 -86.33525848]
[230.22515869 -87.75003815]
[244.17047119 -81.31391144]
[253.01628113 -68.75814819]
[254.38313293 -53.46019745]
[247.90332031 -39.53512573]
[235.31988525 -30.72870827]
[220.01773071 -29.40982628]
[206.11303711 -35.93325424]
[193.85066223 -27.29413795]
[181.58830261 -18.65502357]
[169.32592773 -10.01590633]
[157.06356812 -1.37679040]
[156.59307861 15.39075375]
[143.85464478 28.00708008]
[124.77429199 28.37153816]
[124.77429199 43.37153625]
[124.77429199 58.37153625]
[124.77429199 73.37153625]
[133.41340637 85.63390350]
[147.53820801 90.68266296]
[159.19447327 80.68129730]
[174.29270935 77.86375427]
[188.77160645 82.98795319]
[198.73638916 94.67549896]
[201.50657654 109.78250122]
[196.33702087 124.24525452]
[184.61830139 134.17335510]
[169.50268555 136.89617920]
[155.05621338 131.68132019]
[145.16490173 119.93154144]
[142.48945618 104.80746460]
[128.36465454 99.75871277]
[122.60567474 119.08160400]
[104.91188812 130.40512085]
[105.22393799 145.40188599]
[105.53599548 160.39863586]
[105.84805298 175.39538574]
[106.16011047 190.39213562]
[106.47216797 205.38890076]
[106.78422546 220.38565063]
[107.09627533 235.38240051]
[107.40833282 250.37915039]
[107.72039032 265.37591553]
[122.37538147 268.96667480]
[135.60119629 276.22894287]
[146.49606323 286.66754150]
[154.31715393 299.57073975]
[158.53123474 314.05880737]
[158.85095215 329.14389038]
[155.25451660 343.79751587]
[147.98715210 357.02050781]
[137.54435730 367.91134644]
[124.63813019 375.72747803]
[110.14843750 379.93594360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 33]
[22 32]
[23 31]
[37 114]
[38 113]
[39 112]
[40 111]
[41 59]
[42 58]
[43 57]
[44 56]
[45 55]
[61 87]
[62 86]
[65 84]
[66 83]
[67 82]
[68 81]
[89 108]
[90 107]
[91 106]
[92 105]
[93 104]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
