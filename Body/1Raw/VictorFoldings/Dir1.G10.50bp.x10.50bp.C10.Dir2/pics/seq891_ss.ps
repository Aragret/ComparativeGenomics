%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCACCCCGGGGGGGGGGAUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUxxxxxxxxxxACUCUUCACCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUCCCCCCCCCCACAUCACCGC\
) } def
/len { sequence length } bind def

/coor [
[93.31781006 380.60122681]
[79.47187805 374.58520508]
[67.76321411 365.05578613]
[59.06068802 352.72012329]
[54.01008606 338.49359131]
[52.98619461 323.43191528]
[56.06499481 308.65277100]
[63.01801682 295.25283813]
[73.32929993 284.22650146]
[86.23368073 276.39199829]
[100.77356720 272.33068848]
[100.77356720 257.33068848]
[100.77356720 242.33067322]
[100.77356720 227.33067322]
[100.77356720 212.33067322]
[100.77356720 197.33067322]
[100.77356720 182.33067322]
[100.77356720 167.33067322]
[100.77356720 152.33067322]
[100.77356720 137.33067322]
[100.77356720 122.33067322]
[87.99620819 114.47325134]
[74.60992432 121.24136353]
[69.91799164 136.33312988]
[55.89012527 143.61285400]
[40.84881210 138.76162720]
[33.71779633 124.65757751]
[38.72778320 109.66839600]
[52.90643692 102.68689728]
[67.84181213 107.85507965]
[81.22809601 101.08695984]
[89.99430084 88.91512299]
[92.17114258 74.07392120]
[94.34797668 59.23271561]
[87.14355469 42.31892776]
[98.48571777 28.96395493]
[100.35332489 14.08067417]
[102.22093964 -0.80260551]
[104.08855438 -15.68588543]
[89.46916962 -20.72381783]
[76.21356964 -28.67502975]
[64.89437866 -39.19331741]
[56.00000381 -51.82163620]
[49.91357803 -66.01197052]
[46.89643860 -81.14910889]
[47.07690048 -96.57731628]
[50.44482422 -111.62874603]
[56.85213089 -125.65232086]
[66.01934052 -138.04194641]
[77.54771423 -148.26268005]
[90.93666840 -155.87379456]
[105.60543823 -160.54785156]
[120.91830444 -162.08473206]
[122.47588348 -177.00364685]
[124.03346252 -191.92256165]
[125.12477875 -206.88281250]
[125.74875641 -221.86982727]
[126.37273407 -236.85684204]
[126.99671173 -251.84385681]
[127.62068939 -266.83087158]
[128.24465942 -281.81790161]
[119.32288361 -297.89215088]
[129.21696472 -312.35269165]
[129.52902222 -327.34942627]
[129.68505859 -342.34863281]
[129.68505859 -357.34863281]
[129.68505859 -372.34863281]
[129.68505859 -387.34863281]
[115.62786865 -393.13342285]
[104.85799408 -403.86087036]
[99.01776123 -417.89514160]
[98.99777222 -433.09603882]
[104.80105591 -447.14562988]
[115.54267120 -457.90136719]
[129.58459473 -463.72314453]
[144.78552246 -463.72314453]
[158.82743835 -457.90136719]
[169.56906128 -447.14562988]
[175.37234497 -433.09603882]
[175.35234070 -417.89514160]
[169.51211548 -403.86087036]
[158.74224854 -393.13342285]
[144.68505859 -387.34863281]
[144.68505859 -372.34863281]
[144.68505859 -357.34863281]
[144.68505859 -342.34863281]
[147.85063171 -335.61624146]
[144.52577209 -327.03738403]
[144.21371460 -312.04061890]
[152.37719727 -303.05926514]
[152.20075989 -290.52178955]
[143.23167419 -281.19390869]
[142.60769653 -266.20690918]
[141.98371887 -251.21987915]
[141.35974121 -236.23286438]
[140.73576355 -221.24584961]
[140.11178589 -206.25883484]
[142.27636719 -203.39839172]
[143.12712097 -199.32679749]
[142.10090637 -194.69006348]
[138.95237732 -190.36497498]
[137.39479065 -175.44607544]
[135.83721924 -160.52716064]
[149.74659729 -156.18563843]
[162.53936768 -149.19921875]
[173.71809387 -139.83726501]
[182.84774780 -128.46162415]
[189.57246399 -115.51253510]
[193.62956238 -101.49161530]
[194.85971069 -86.94244385]
[193.21322632 -72.42947388]
[188.75207520 -58.51613998]
[181.64750671 -45.74298477]
[172.17352295 -34.60665894]
[160.69631958 -25.54059219]
[147.66007996 -18.89816093]
[133.56982422 -14.93887615]
[118.97183228 -13.81827259]
[117.10421753 1.06500757]
[115.23661041 15.94828796]
[113.36899567 30.83156776]
[120.55573273 40.61206436]
[119.07836914 53.06342697]
[109.18918610 61.40955353]
[107.01234436 76.25075531]
[104.83551025 91.09196472]
[112.18424225 92.25621033]
[118.70539856 98.89823914]
[120.76033783 109.98974609]
[115.77356720 122.33067322]
[115.77356720 137.33067322]
[115.77356720 152.33067322]
[115.77356720 167.33067322]
[115.77356720 182.33067322]
[115.77356720 197.33067322]
[115.77356720 212.33067322]
[115.77356720 227.33067322]
[115.77356720 242.33067322]
[115.77356720 257.33068848]
[115.77356720 272.33068848]
[130.31346130 276.39199829]
[143.21783447 284.22650146]
[153.52911377 295.25283813]
[160.48214722 308.65277100]
[163.56094360 323.43191528]
[162.53704834 338.49359131]
[157.48645020 352.72012329]
[148.78392029 365.05578613]
[137.07525635 374.58520508]
[123.22932434 380.60122681]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 31]
[23 30]
[32 126]
[33 125]
[34 124]
[36 121]
[37 120]
[38 119]
[39 118]
[53 103]
[54 102]
[55 101]
[56 97]
[57 96]
[58 95]
[59 94]
[60 93]
[61 92]
[63 89]
[64 88]
[65 86]
[66 85]
[67 84]
[68 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
