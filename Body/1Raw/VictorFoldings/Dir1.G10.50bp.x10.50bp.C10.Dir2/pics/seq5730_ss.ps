%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCCCAUGGGGGGGGGGAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCxxxxxxxxxxCAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAACCCCCCCCCCUAAUCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 367.72018433]
[71.19830322 361.70416260]
[59.48964310 352.17474365]
[50.78712082 339.83908081]
[45.73651886 325.61254883]
[44.71262741 310.55087280]
[47.79142761 295.77172852]
[54.74444962 282.37179565]
[65.05573273 271.34545898]
[77.96011353 263.51095581]
[92.50000000 259.44964600]
[92.50000000 244.44963074]
[92.50000000 229.44963074]
[92.50000000 214.44963074]
[92.50000000 199.44963074]
[92.50000000 184.44963074]
[92.50000000 169.44963074]
[92.50000000 154.44963074]
[92.50000000 139.44963074]
[92.50000000 124.44963837]
[77.81459808 116.92940521]
[69.77429962 100.92198181]
[72.94929504 81.85523224]
[58.01498795 83.25753784]
[47.94911575 95.14517975]
[32.78363037 96.35456848]
[21.51261330 86.68504333]
[6.57830477 88.08734894]
[2.13300109 102.62377167]
[-7.54063034 114.34935760]
[-20.96743202 121.47602844]
[-36.09991074 122.91702271]
[-50.63047791 118.45260620]
[-62.34332657 108.76355743]
[-69.45233154 95.32739258]
[-70.87342072 80.19303131]
[-66.38988495 65.66835022]
[-56.68544006 53.96825409]
[-43.23993301 46.87693405]
[-28.10371590 45.47575378]
[-13.58494377 49.97838974]
[-1.89762843 59.69821930]
[5.17600107 73.15303802]
[20.11030960 71.75073242]
[29.38428307 60.15207291]
[44.50981903 58.51719284]
[56.61268234 68.32323456]
[71.54698944 66.92092896]
[79.40441895 54.14356995]
[73.91738892 40.18318176]
[68.43035126 26.22278976]
[62.94332123 12.26240063]
[48.09250641 14.74171066]
[33.05075836 14.07878971]
[18.47563553 10.30261707]
[5.00430012 3.57827115]
[-6.77433729 -5.80028868]
[-16.34536743 -17.42307091]
[-23.29038239 -30.78198051]
[-27.30578041 -45.29301834]
[-28.21602249 -60.32183075]
[-25.98131752 -75.21141815]
[-20.69935799 -89.31086731]
[-12.60104752 -102.00382233]
[-2.04040933 -112.73539734]
[10.52089024 -121.03644562]
[24.53372383 -126.54409027]
[39.38551331 -129.01756287]
[54.42700195 -128.34872437]
[69.00064087 -124.56681061]
[82.46932220 -117.83716583]
[94.24427032 -108.45397186]
[103.81072998 -96.82742310]
[110.75048828 -83.46578979]
[114.76017761 -68.95317078]
[115.66450500 -53.92399979]
[113.42394257 -39.03529739]
[108.13643646 -24.93792152]
[100.03313446 -12.24815559]
[89.46827698 -1.52073956]
[76.90370941 6.77536917]
[82.39074707 20.73575974]
[87.87777710 34.69614792]
[93.36480713 48.65653992]
[106.88899994 55.14470291]
[121.21159363 50.68788910]
[135.53419495 46.23107147]
[149.85678101 41.77425766]
[164.17938232 37.31744003]
[178.50198364 32.86062622]
[191.67056274 25.67811584]
[203.17236328 16.04959106]
[214.67417908 6.42106390]
[226.17597961 -3.20746231]
[231.29132080 -18.78838921]
[247.39573669 -21.88354111]
[257.92236328 -9.30888939]
[252.04234314 5.99984121]
[235.80450439 8.29434109]
[224.30270386 17.92286682]
[212.80088806 27.55139351]
[201.29908752 37.17992020]
[216.13659668 34.97802734]
[230.97633362 37.16489792]
[244.54792786 43.55331421]
[255.68957520 53.59640121]
[263.44750977 66.43441010]
[267.15759277 80.96834564]
[266.50222778 95.95402527]
[261.53750610 110.10858917]
[252.68846130 122.22032928]
[240.71260071 131.25242615]
[226.63511658 136.43167114]
[211.66113281 137.31469727]
[197.07249451 133.82592773]
[184.11805725 126.26399231]
[173.90681458 115.27625275]
[167.31288147 101.80331421]
[164.90074158 86.99852753]
[166.87689209 72.12927246]
[173.07215881 58.46842575]
[182.95880127 47.18322372]
[168.63619995 51.64003754]
[154.31359863 56.09685516]
[139.99101257 60.55366898]
[125.66841125 65.01048279]
[111.34580994 69.46730042]
[125.56098175 82.77527618]
[129.06106567 100.84506989]
[121.73355103 116.56015015]
[107.50000000 124.44963837]
[107.50000000 139.44963074]
[107.50000000 154.44963074]
[107.50000000 169.44963074]
[107.50000000 184.44963074]
[107.50000000 199.44963074]
[107.50000000 214.44963074]
[107.50000000 229.44963074]
[107.50000000 244.44963074]
[107.50000000 259.44964600]
[122.03988647 263.51095581]
[134.94427490 271.34545898]
[145.25555420 282.37179565]
[152.20857239 295.77172852]
[155.28736877 310.55087280]
[154.26348877 325.61254883]
[149.21287537 339.83908081]
[140.51036072 352.17474365]
[128.80169678 361.70416260]
[114.95575714 367.72018433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 48]
[24 47]
[27 44]
[28 43]
[49 84]
[50 83]
[51 82]
[52 81]
[85 127]
[86 126]
[87 125]
[88 124]
[89 123]
[90 122]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
