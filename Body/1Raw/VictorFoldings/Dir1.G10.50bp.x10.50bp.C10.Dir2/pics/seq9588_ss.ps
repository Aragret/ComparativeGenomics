%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUAUCCGGGGGGGGGGUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACxxxxxxxxxxUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUAUCCCCCAUUCUCCCCCCCCCCCCUCCUAUCC\
) } def
/len { sequence length } bind def

/coor [
[95.32581329 405.15573120]
[81.47987366 399.13970947]
[69.77120972 389.61029053]
[61.06868362 377.27462769]
[56.01808167 363.04809570]
[54.99419022 347.98641968]
[58.07299042 333.20724487]
[65.02601624 319.80731201]
[75.33729553 308.78100586]
[88.24167633 300.94647217]
[102.78156281 296.88516235]
[102.78156281 281.88516235]
[102.78156281 266.88516235]
[102.78156281 251.88517761]
[102.78156281 236.88517761]
[102.78156281 221.88517761]
[102.78156281 206.88517761]
[102.78156281 191.88517761]
[102.78156281 176.88517761]
[102.78156281 161.88517761]
[96.83537292 157.31430054]
[84.94299316 148.17256165]
[78.99680328 143.60169983]
[64.50120544 147.45886230]
[50.00561142 151.31602478]
[38.65909576 162.34176636]
[24.37020302 158.13739014]
[9.87460709 161.99455261]
[-4.62098980 165.85171509]
[-15.84875965 177.80450439]
[-31.75006676 173.79444885]
[-35.96700668 157.94676208]
[-24.16155624 146.56416321]
[-8.47814941 151.35610962]
[6.01744747 147.49896240]
[20.51304436 143.64179993]
[30.82273674 132.89193726]
[46.14845276 136.82041931]
[60.64405060 132.96327209]
[75.13964844 129.10610962]
[75.52957153 121.61624908]
[76.69933319 99.14667511]
[62.68262482 93.80516052]
[48.66590881 88.46365356]
[32.56969452 91.60115051]
[22.01001549 79.05422974]
[27.84976578 63.73008728]
[44.08151245 61.39288330]
[54.00742340 74.44693756]
[68.02413940 79.78845215]
[82.04084778 85.12996674]
[93.64218903 75.62160492]
[91.15707397 60.82889938]
[86.62242126 52.82334900]
[88.77746582 45.70285797]
[86.60063171 30.86165237]
[84.42379761 16.02044678]
[69.39525604 15.16721439]
[54.84620285 11.30589008]
[41.37239838 4.59459400]
[29.52559090 -4.69185019]
[19.79090118 -16.17317009]
[12.56695557 -29.37920952]
[8.14957237 -43.76919174]
[6.71964025 -58.75385666]
[8.33571339 -73.71958923]
[12.93161488 -88.05355835]
[20.31914711 -101.16878510]
[30.19579124 -112.52822113]
[42.15710831 -121.66670227]
[55.71329117 -128.21000671]
[70.30921936 -131.89019775]
[85.34719849 -132.55656433]
[100.21143341 -130.18182373]
[114.29324341 -124.86323547]
[127.01599121 -116.81857300]
[137.85868835 -106.37725830]
[146.37731934 -93.96687317]
[152.22306824 -80.09560394]
[155.15653992 -65.33147430]
[155.05763245 -50.27906036]
[151.93037415 -35.55475616]
[145.90283203 -21.76150703]
[137.22183228 -9.46414280]
[126.24286652 0.83376962]
[113.41549683 8.71053696]
[99.26499939 13.84361076]
[101.44184113 28.68481636]
[103.61867523 43.52602005]
[105.94977570 58.34378052]
[108.43489838 73.13648987]
[120.32727814 82.27822113]
[135.26158142 80.87591553]
[150.19589233 79.47360992]
[165.13020325 78.07131195]
[179.58488464 74.06356812]
[193.10908508 67.57540131]
[206.63327026 61.08723831]
[220.15745544 54.59907532]
[225.16233826 39.60818863]
[239.33862305 32.62186050]
[254.27575684 37.78495789]
[261.11181641 52.03430557]
[255.79107666 66.91601562]
[241.47024536 73.60103607]
[226.64562988 68.12326813]
[213.12142944 74.61142731]
[199.59724426 81.09959412]
[186.07305908 87.58776093]
[200.97900391 89.26489258]
[214.57168579 95.60831451]
[225.43148804 105.95551300]
[232.42424011 119.22583771]
[234.81959534 134.03335571]
[232.36740112 148.83154297]
[225.32374573 162.07492065]
[214.42430115 172.38035583]
[200.80735779 178.67153931]
[185.89508057 180.29142761]
[171.24490356 177.07084656]
[158.38685608 169.34614563]
[148.66386414 157.92408752]
[143.09136963 143.99760437]
[142.25134277 129.02113342]
[146.23155212 114.55884552]
[154.61628723 102.12114716]
[166.53250122 93.00561523]
[151.59819031 94.40792084]
[136.66389465 95.81022644]
[121.72958374 97.21253204]
[117.78156281 161.88517761]
[117.78156281 176.88517761]
[117.78156281 191.88517761]
[117.78156281 206.88517761]
[117.78156281 221.88517761]
[117.78156281 236.88517761]
[117.78156281 251.88517761]
[117.78156281 266.88516235]
[117.78156281 281.88516235]
[117.78156281 296.88516235]
[132.32145691 300.94647217]
[145.22583008 308.78100586]
[155.53712463 319.80731201]
[162.49014282 333.20724487]
[165.56893921 347.98641968]
[164.54504395 363.04809570]
[159.49444580 377.27462769]
[150.79191589 389.61029053]
[139.08325195 399.13970947]
[125.23731995 405.15573120]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 40]
[24 39]
[25 38]
[27 36]
[28 35]
[29 34]
[42 51]
[43 50]
[44 49]
[52 91]
[53 90]
[55 89]
[56 88]
[57 87]
[92 130]
[93 129]
[94 128]
[95 127]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
