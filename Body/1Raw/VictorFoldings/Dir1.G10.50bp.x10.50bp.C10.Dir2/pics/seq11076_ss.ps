%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCUCAUCGCUGGGGGGGGGGACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACxxxxxxxxxxGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCCCCCCCCCCCUACUCUCCUCGCU\
) } def
/len { sequence length } bind def

/coor [
[84.32704926 383.09274292]
[70.05527496 378.28329468]
[57.15129471 370.51791382]
[46.21863937 360.15975952]
[37.76865387 347.69335938]
[32.19655609 333.70172119]
[29.76296806 318.83929443]
[30.58170891 303.80120850]
[34.61448669 289.29083252]
[41.67267990 275.98684692]
[51.42616272 264.51150513]
[63.41875076 255.40151978]
[77.08953094 249.08297729]
[91.79908752 245.85142517]
[91.79908752 230.85142517]
[91.79908752 215.85142517]
[91.79908752 200.85142517]
[91.79908752 185.85142517]
[91.79908752 170.85142517]
[91.79908752 155.85142517]
[91.79908752 140.85142517]
[91.79908752 125.85141754]
[91.79908752 110.85141754]
[84.16608429 123.76409912]
[73.50080872 134.31170654]
[60.50424194 141.80097961]
[46.03059006 145.73968506]
[31.03114700 145.86897278]
[16.49175835 142.18031311]
[3.36803603 134.91615295]
[-7.47745705 124.55395508]
[-15.33189297 111.77475739]
[-19.67903328 97.41849518]
[-20.23316193 82.42873383]
[-16.95785522 67.79068756]
[-10.06838799 54.46645355]
[-0.01757224 43.33177185]
[12.53399467 35.11848068]
[26.76135445 30.36639977]
[41.72940063 29.38786697]
[56.45435715 32.24719238]
[69.96840668 38.75644684]
[81.38333893 48.48780823]
[89.94889069 60.80167389]
[95.10209656 74.88870239]
[96.50431824 89.82120514]
[102.89643860 76.25135803]
[109.28855896 62.68150711]
[115.68067932 49.11165619]
[122.07279968 35.54180908]
[128.46492004 21.97196007]
[115.44614410 14.50484371]
[103.07044220 6.01435757]
[91.41807556 -3.44443321]
[80.56462097 -13.81018448]
[70.58045959 -25.01566887]
[61.53034973 -36.98821259]
[53.47298431 -49.65016937]
[46.46061707 -62.91941833]
[40.53872681 -76.70990753]
[35.74571991 -90.93218994]
[32.11268234 -105.49404144]
[29.66317558 -120.30100250]
[28.41308784 -135.25706482]
[28.37052345 -150.26521301]
[29.53575897 -165.22811890]
[31.90123940 -180.04873657]
[35.45162201 -194.63095093]
[40.16387939 -208.88020325]
[46.00745392 -222.70405579]
[52.94444275 -236.01286316]
[60.92986298 -248.72032166]
[69.91191864 -260.74401855]
[79.83235931 -272.00595093]
[90.62684631 -282.43307495]
[102.22537231 -291.95782471]
[114.55271149 -300.51837158]
[127.52892303 -308.05920410]
[141.06983948 -314.53143311]
[155.08766174 -319.89306641]
[169.49145508 -324.10937500]
[184.18780518 -327.15292358]
[199.08142090 -329.00405884]
[214.07569885 -329.65075684]
[229.07337952 -329.08880615]
[243.97720337 -327.32183838]
[258.69052124 -324.36135864]
[273.11791992 -320.22653198]
[287.16580200 -314.94415283]
[300.74307251 -308.54855347]
[313.76168823 -301.08114624]
[326.13720703 -292.59039307]
[337.78936768 -283.13134766]
[348.64257812 -272.76535034]
[358.62649536 -261.55963135]
[367.67633057 -249.58689880]
[375.73342896 -236.92475891]
[382.74551392 -223.65536499]
[388.66708374 -209.86474609]
[393.45977783 -195.64234924]
[397.09249878 -181.08042908]
[399.54168701 -166.27340698]
[400.79144287 -151.31732178]
[400.83367920 -136.30917358]
[399.66809082 -121.34629059]
[397.30230713 -106.52571869]
[393.75158691 -91.94358063]
[389.03903198 -77.69444275]
[383.19515991 -63.87071609]
[376.25787354 -50.56205750]
[368.27215576 -37.85477448]
[359.28985596 -25.83128929]
[349.36914062 -14.56957245]
[338.57443237 -4.14266443]
[326.97570801 5.38181210]
[314.64816284 13.94208622]
[301.67178345 21.48264122]
[288.13073730 27.95457077]
[274.11279297 33.31590652]
[259.70892334 37.53186798]
[245.01248169 40.57512283]
[230.11883545 42.42593002]
[215.12454224 43.07228470]
[200.12687683 42.50999832]
[185.22308350 40.74271393]
[170.50982666 37.78189468]
[156.08253479 33.64674759]
[142.03475952 28.36408043]
[135.64263916 41.93392944]
[129.25051880 55.50378036]
[122.85840607 69.07362366]
[116.46628571 82.64347839]
[110.07416534 96.21332550]
[106.79908752 110.85141754]
[106.79908752 125.85141754]
[106.79908752 140.85142517]
[106.79908752 155.85142517]
[106.79908752 170.85142517]
[106.79908752 185.85142517]
[106.79908752 200.85142517]
[106.79908752 215.85142517]
[106.79908752 230.85142517]
[106.79908752 245.85142517]
[121.50864410 249.08297729]
[135.17941284 255.40151978]
[147.17201233 264.51150513]
[156.92549133 275.98684692]
[163.98368835 289.29083252]
[168.01646423 303.80120850]
[168.83520508 318.83929443]
[166.40161133 333.70172119]
[160.82951355 347.69335938]
[152.37953186 360.15975952]
[141.44688416 370.51791382]
[128.54289246 378.28329468]
[114.27112579 383.09274292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[46 133]
[47 132]
[48 131]
[49 130]
[50 129]
[51 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
