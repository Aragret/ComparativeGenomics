%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUUAUGGGGGGGGGGGUAAAAUCCAUUGUCGCAUCCACCUUUAUUAUCAGUCUCUUCCCCACAACAxxxxxxxxxxUCUAACAGCCCUAGACCUCAACUACCUAACCAACAAACUUAAAAUAAAAUCCCCCCCCCCCCCCACUAUG\
) } def
/len { sequence length } bind def

/coor [
[79.18392944 148.21990967]
[66.44388580 140.40367126]
[56.42148590 129.31521606]
[49.92840958 115.85260010]
[47.49051666 101.10610962]
[49.30525208 86.27003479]
[55.22564316 72.54592896]
[64.77220917 61.04525757]
[77.17179108 52.69944763]
[91.42018127 48.18440247]
[91.10813141 33.18764877]
[90.79607391 18.19089699]
[90.48401642 3.19414306]
[90.17195892 -11.80261040]
[89.85990143 -26.79936409]
[89.54784393 -41.79611969]
[89.23579407 -56.79287338]
[88.92373657 -71.78962708]
[88.61167908 -86.78637695]
[73.61685944 -87.30827332]
[58.67422104 -88.66269684]
[43.82994843 -90.84546661]
[29.12992287 -93.84983063]
[14.61958313 -97.66650391]
[0.34378001 -102.28368378]
[-13.65336037 -107.68711090]
[-27.32857323 -113.86007690]
[-40.63959122 -120.78349304]
[-53.54526901 -128.43597412]
[-66.00571442 -136.79385376]
[-77.98241425 -145.83131409]
[-89.43834686 -155.52040100]
[-100.33810425 -165.83119202]
[-110.64800262 -176.73178101]
[-120.33615875 -188.18850708]
[-129.37263489 -200.16593933]
[-137.72950745 -212.62705994]
[-145.38095093 -225.53337097]
[-152.30328369 -238.84494019]
[-158.47512817 -252.52066040]
[-163.87742615 -266.51824951]
[-168.49343872 -280.79443359]
[-172.30892944 -295.30505371]
[-175.31210327 -310.00534058]
[-177.49366760 -324.84979248]
[-178.84687805 -339.79254150]
[-179.36755371 -354.78738403]
[-179.05407715 -369.78802490]
[-177.90744019 -384.74804688]
[-175.93118286 -399.62121582]
[-173.13139343 -414.36157227]
[-169.51672363 -428.92355347]
[-165.09838867 -443.26214600]
[-159.88999939 -457.33300781]
[-153.90766907 -471.09268188]
[-147.16989136 -484.49862671]
[-139.69750977 -497.50939941]
[-131.51359558 -510.08480835]
[-122.64344788 -522.18591309]
[-113.11448669 -533.77539062]
[-102.95617676 -544.81738281]
[-92.19990540 -555.27777100]
[-80.87892151 -565.12420654]
[-69.02822876 -574.32629395]
[-56.68443680 -582.85552979]
[-43.88571548 -590.68554688]
[-30.67161942 -597.79223633]
[-17.08299446 -604.15350342]
[-3.16183996 -609.74981689]
[11.04881191 -614.56378174]
[25.50503731 -618.58056641]
[40.16215134 -621.78771973]
[54.97485352 -624.17535400]
[69.89735413 -625.73608398]
[84.88352966 -626.46508789]
[99.88706207 -626.36010742]
[114.86157227 -625.42150879]
[129.76077271 -623.65209961]
[144.53862000 -621.05743408]
[159.14941406 -617.64550781]
[173.54801941 -613.42681885]
[187.68992615 -608.41448975]
[201.53140259 -602.62396240]
[215.02969360 -596.07312012]
[228.14305115 -588.78228760]
[240.83096313 -580.77392578]
[253.05419922 -572.07281494]
[264.77496338 -562.70581055]
[275.95706177 -552.70190430]
[286.56591797 -542.09204102]
[296.56872559 -530.90899658]
[305.93457031 -519.18731689]
[314.63452148 -506.96325684]
[322.64169312 -494.27459717]
[329.93130493 -481.16052246]
[336.48083496 -467.66162109]
[342.27001953 -453.81958008]
[347.28100586 -439.67721558]
[351.49829102 -425.27819824]
[354.90884399 -410.66705322]
[357.50210571 -395.88897705]
[359.27005005 -380.98959351]
[360.20724487 -366.01501465]
[360.31079102 -351.01147461]
[359.58035278 -336.02536011]
[358.01818848 -321.10299683]
[355.62911987 -306.29052734]
[352.42056274 -291.63372803]
[348.40240479 -277.17788696]
[343.58706665 -262.96768188]
[337.98944092 -249.04707336]
[331.62686157 -235.45906067]
[324.51892090 -222.24565125]
[316.68765259 -209.44767761]
[308.15722656 -197.10470581]
[298.95404053 -185.25488281]
[289.10650635 -173.93484497]
[278.64511108 -163.17958069]
[267.60214233 -153.02232361]
[256.01174927 -143.49447632]
[243.90977478 -134.62548828]
[231.33358765 -126.44277954]
[218.32209778 -118.97163391]
[204.91551208 -112.23514557]
[191.15525818 -106.25414276]
[177.08387756 -101.04710388]
[162.74487305 -96.63012695]
[148.18254089 -93.01686096]
[133.44192505 -90.21848297]
[118.56855774 -88.24364471]
[103.60842896 -87.09843445]
[103.92048645 -72.10168457]
[104.23254395 -57.10492706]
[104.54460144 -42.10817337]
[104.85665894 -27.11142159]
[105.16871643 -12.11466694]
[105.48076630 2.88208675]
[105.79282379 17.87883949]
[106.10488129 32.87559509]
[106.41693878 47.87234879]
[120.84081268 51.79077148]
[133.57684326 59.61355591]
[143.59355164 70.70714569]
[150.07972717 84.17309570]
[152.51004028 98.92083740]
[150.68769836 113.75597382]
[144.76026917 127.47704315]
[135.20779419 138.97280884]
[122.80393219 147.31225586]
[108.55322266 151.81999207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
