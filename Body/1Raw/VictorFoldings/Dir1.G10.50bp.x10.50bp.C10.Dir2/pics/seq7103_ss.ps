%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACCCUAGGGGGGGGGGGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUxxxxxxxxxxUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUCCCCCCCCCCUAUACCCUAG\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 412.58059692]
[71.19830322 406.56454468]
[59.48964310 397.03512573]
[50.78712082 384.69946289]
[45.73651886 370.47296143]
[44.71262741 355.41125488]
[47.79142761 340.63211060]
[54.74444962 327.23217773]
[65.05573273 316.20584106]
[77.96011353 308.37133789]
[92.50000000 304.31002808]
[92.50000000 289.31002808]
[92.50000000 274.31002808]
[92.50000000 259.31002808]
[92.50000000 244.31002808]
[92.50000000 229.31002808]
[92.50000000 214.31002808]
[92.50000000 199.31002808]
[92.50000000 184.31002808]
[92.50000000 169.31002808]
[92.50000000 154.31002808]
[77.55121613 150.01881409]
[64.40889740 141.70254517]
[54.13061905 130.03047180]
[47.54346848 115.94181824]
[45.17752457 100.57032013]
[47.22317123 85.15292358]
[53.51580048 70.93029022]
[63.54903412 59.04690170]
[76.51549530 50.45903397]
[91.37177277 45.85775375]
[91.05971527 30.86100006]
[90.74765778 15.86424637]
[90.43560028 0.86749309]
[75.45095062 0.04433977]
[60.57146835 -1.90973306]
[45.88238525 -4.98353243]
[31.46784210 -9.15945244]
[17.41040230 -14.41357231]
[3.79058743 -20.71579742]
[-9.31358814 -28.03002739]
[-21.82706451 -36.31436920]
[-33.67816162 -45.52136612]
[-44.79900360 -55.59828568]
[-55.12588501 -66.48740387]
[-64.59965515 -78.12635040]
[-73.16604614 -90.44845581]
[-80.77599335 -103.38314056]
[-87.38591003 -116.85631561]
[-92.95792389 -130.79080200]
[-97.46012878 -145.10679626]
[-100.86673737 -159.72227478]
[-103.15822601 -174.55354309]
[-104.32147980 -189.51564026]
[-104.34983063 -204.52285767]
[-103.24311066 -219.48924255]
[-101.00766754 -234.32905579]
[-97.65631104 -248.95730591]
[-93.20822144 -263.29019165]
[-87.68888855 -277.24563599]
[-81.12992096 -290.74371338]
[-73.56890106 -303.70703125]
[-65.04911804 -316.06143188]
[-55.61938858 -327.73608398]
[-45.33372116 -338.66412354]
[-34.25103378 -348.78298950]
[-22.43480110 -358.03469849]
[-9.95271301 -366.36627197]
[3.12373495 -373.72994995]
[16.71964264 -380.08358765]
[30.75713158 -385.39077759]
[45.15579605 -389.62112427]
[59.83316040 -392.75039673]
[74.70515442 -394.76068115]
[89.68659210 -395.64044189]
[104.69165039 -395.38464355]
[119.63439941 -393.99475098]
[134.42922974 -391.47875977]
[148.99140930 -387.85101318]
[163.23751831 -383.13235474]
[177.08595276 -377.34979248]
[190.45741272 -370.53643799]
[203.27526855 -362.73132324]
[215.46612549 -353.97918701]
[226.96015930 -344.33010864]
[237.69151306 -333.83935547]
[247.59872437 -322.56707764]
[256.62506104 -310.57778931]
[264.71878052 -297.94021606]
[271.83358765 -284.72668457]
[277.92864990 -271.01290894]
[282.96911621 -256.87747192]
[286.92608643 -242.40127563]
[289.77691650 -227.66729736]
[291.50524902 -212.75991821]
[292.10119629 -197.76451111]
[291.56137085 -182.76696777]
[289.88882446 -167.85322571]
[287.09313965 -153.10867310]
[283.19036865 -138.61779785]
[278.20281982 -124.46357727]
[272.15908813 -110.72710419]
[265.09378052 -97.48705292]
[257.04739380 -84.81926727]
[248.06597900 -72.79629517]
[238.20101929 -61.48702240]
[227.50898743 -50.95621490]
[216.05113220 -41.26419830]
[203.89311218 -32.46648788]
[191.10453796 -24.61347389]
[177.75868225 -17.75013924]
[163.93197632 -11.91579914]
[149.70361328 -7.14387083]
[135.15510559 -3.46168828]
[120.36979675 -0.89034289]
[105.43235779 0.55543685]
[105.74441528 15.55219078]
[106.05646515 30.54894447]
[106.36852264 45.54569626]
[120.28307343 49.06449127]
[132.80757141 56.07400894]
[143.08369446 66.09387970]
[150.40718079 78.43741608]
[154.27615356 92.25868988]
[154.42546082 106.61048889]
[150.84486389 120.50925446]
[143.77973938 133.00247192]
[133.71429443 143.23396301]
[121.33833313 150.50251770]
[107.50000000 154.31002808]
[107.50000000 169.31002808]
[107.50000000 184.31002808]
[107.50000000 199.31002808]
[107.50000000 214.31002808]
[107.50000000 229.31002808]
[107.50000000 244.31002808]
[107.50000000 259.31002808]
[107.50000000 274.31002808]
[107.50000000 289.31002808]
[107.50000000 304.31002808]
[122.03988647 308.37133789]
[134.94427490 316.20584106]
[145.25555420 327.23217773]
[152.20857239 340.63211060]
[155.28736877 355.41125488]
[154.26348877 370.47296143]
[149.21287537 384.69946289]
[140.51036072 397.03512573]
[128.80169678 406.56454468]
[114.95575714 412.58059692]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[31 119]
[32 118]
[33 117]
[34 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
