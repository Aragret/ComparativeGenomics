%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAUCAACAAGGGGGGGGGGUAGGGUUUACGACCUCGAUGUUGGAUCAGGACAUCCCGAUGGUGCAGCCGxxxxxxxxxxACAACCACCCACAGCCUAAUUAUUAGCAUCAUCCCUCUACUAUUUUUUAACCCCCCCCCCCCAAAUCAACAA\
) } def
/len { sequence length } bind def

/coor [
[80.13377380 448.08407593]
[65.97316742 442.92907715]
[53.38342667 434.64685059]
[43.04348755 423.68408203]
[35.51097870 410.63195801]
[31.19211197 396.19436646]
[30.31980324 381.14990234]
[32.94109344 366.30990601]
[38.91461945 352.47467041]
[47.91823959 340.39031982]
[59.46639633 330.70852661]
[72.93630981 323.95144653]
[87.60157013 320.48348999]
[87.60157013 305.48348999]
[87.60157013 290.48348999]
[87.60157013 275.48348999]
[87.60157013 260.48348999]
[87.60157013 245.48348999]
[87.60157013 230.48348999]
[87.60157013 215.48348999]
[87.60157013 200.48348999]
[87.60157013 185.48348999]
[87.60157013 170.48348999]
[86.38680267 155.53276062]
[83.96524811 140.72950745]
[71.15583038 132.92445374]
[56.88998032 137.55970764]
[42.62413406 142.19496155]
[34.08889771 155.77912903]
[18.13125420 157.43234253]
[6.99253702 145.88641357]
[9.21741867 129.99838257]
[23.09916115 121.95619202]
[37.98887634 127.92912292]
[52.25472641 123.29386902]
[66.52057648 118.65860748]
[64.85678864 110.47084045]
[65.07535553 102.47340393]
[67.01114655 95.07607269]
[53.05333328 89.58248138]
[39.09552383 84.08889771]
[25.13771439 78.59530640]
[11.17990303 73.10171509]
[-1.27401650 82.20684814]
[-16.67488289 83.11066437]
[-30.10833359 75.52476501]
[-37.28780365 61.86977386]
[-35.92235565 46.50295639]
[-26.44769096 34.32780457]
[-11.88714504 29.22936821]
[3.11306477 32.83453751]
[13.76642704 43.99291611]
[16.67349243 59.14390564]
[30.63130379 64.63749695]
[44.58911514 70.13108826]
[58.54692459 75.62467194]
[72.50473785 81.11826324]
[81.54008484 72.21977234]
[93.24394989 67.33709717]
[105.92443848 67.17606354]
[111.83977509 53.39170074]
[117.75511932 39.60733414]
[123.67045593 25.82296562]
[129.58578491 12.03859806]
[135.50112915 -1.74576926]
[141.41647339 -15.53013611]
[147.33180237 -29.31450272]
[134.55767822 -37.23154068]
[123.10627747 -46.96411514]
[113.23342133 -58.29479599]
[105.15966797 -70.97044373]
[99.06539154 -84.70789337]
[95.08674622 -99.20024109]
[93.31260681 -114.12371063]
[93.78261566 -129.14492798]
[96.48626709 -143.92828369]
[101.36317444 -158.14353943]
[108.30436707 -171.47311401]
[117.15478516 -183.61921692]
[127.71670532 -194.31050110]
[139.75416565 -203.30810547]
[152.99826050 -210.41104126]
[167.15310669 -215.46061707]
[181.90246582 -218.34403992]
[196.91683960 -218.99685669]
[211.86079407 -217.40451050]
[226.40049744 -213.60256958]
[240.21112061 -207.67596436]
[252.98411560 -199.75711060]
[264.43411255 -190.02290344]
[274.30535889 -178.69082642]
[282.37731934 -166.01402283]
[288.46963501 -152.27569580]
[292.44622803 -137.78279114]
[294.21823120 -122.85906219]
[293.74609375 -107.83792114]
[291.04031372 -93.05493927]
[286.16140747 -78.84037781]
[279.21832275 -65.51179504]
[270.36614990 -53.36695480]
[259.80270386 -42.67718124]
[247.76396179 -33.68128204]
[234.51885986 -26.58023071]
[220.36331177 -21.53267097]
[205.61354065 -18.65136337]
[190.59907532 -18.00067902]
[175.65533447 -19.59515190]
[161.11616516 -23.39916611]
[155.20083618 -9.61479855]
[149.28549194 4.16956854]
[143.37016296 17.95393562]
[137.45481873 31.73830223]
[131.53948975 45.52267075]
[125.62414551 59.30703735]
[119.70880890 73.09140778]
[128.57670593 81.45863342]
[133.99328613 92.66674805]
[135.08406067 105.32434082]
[131.52465820 117.78666687]
[123.60689545 128.36941528]
[112.22319794 135.57598877]
[98.76849365 138.30795288]
[101.19004822 153.11119080]
[109.52265930 140.63851929]
[123.54022980 135.29927063]
[138.05909729 139.06790161]
[147.71018982 150.55078125]
[148.92454529 165.50154114]
[141.25311279 178.39141846]
[127.53276062 184.45376587]
[112.83726501 181.44670105]
[102.60157013 170.48348999]
[102.60157013 185.48348999]
[102.60157013 200.48348999]
[102.60157013 215.48348999]
[102.60157013 230.48348999]
[102.60157013 245.48348999]
[102.60157013 260.48348999]
[102.60157013 275.48348999]
[102.60157013 290.48348999]
[102.60157013 305.48348999]
[102.60157013 320.48348999]
[117.26683044 323.95144653]
[130.73675537 330.70852661]
[142.28491211 340.39031982]
[151.28852844 352.47467041]
[157.26205444 366.30990601]
[159.88334656 381.14990234]
[159.01103210 396.19436646]
[154.69216919 410.63195801]
[147.15965271 423.68408203]
[136.81971741 434.64685059]
[124.22997284 442.92907715]
[110.06936646 448.08407593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 123]
[25 122]
[26 36]
[27 35]
[28 34]
[39 57]
[40 56]
[41 55]
[42 54]
[43 53]
[60 115]
[61 114]
[62 113]
[63 112]
[64 111]
[65 110]
[66 109]
[67 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
