%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCCAAAGACGGGGGGGGGGCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCxxxxxxxxxxUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCCCCCCCCCCCAACUCCAAAGCC\
) } def
/len { sequence length } bind def

/coor [
[85.11811066 167.61401367]
[70.93198395 162.83450317]
[58.10485077 155.11734009]
[47.23641968 144.82331848]
[38.83480835 132.43370056]
[33.29281235 118.52771759]
[30.86953545 103.75553131]
[31.67826843 88.80776215]
[35.68120193 74.38325500]
[42.69119263 61.15639114]
[52.38050461 49.74555969]
[64.29613495 40.68423843]
[77.88101196 34.39606857]
[92.50000000 31.17503929]
[92.50000000 16.17503929]
[92.50000000 1.17503905]
[92.50000000 -13.82496071]
[92.50000000 -28.82496071]
[92.50000000 -43.82496262]
[92.50000000 -58.82496262]
[92.50000000 -73.82495880]
[92.50000000 -88.82495880]
[92.50000000 -103.82495880]
[92.50000000 -118.82495880]
[92.50000000 -133.82496643]
[77.52111053 -134.69726562]
[62.61828232 -136.43902588]
[47.84194183 -139.04437256]
[33.24208832 -142.50448608]
[18.86812401 -146.80764771]
[4.76868677 -151.93931580]
[-9.00851727 -157.88209534]
[-22.41686821 -164.61590576]
[-35.41099548 -172.11795044]
[-47.94693756 -180.36285400]
[-59.98226547 -189.32269287]
[-71.47626495 -198.96717834]
[-82.39003754 -209.26367188]
[-92.68666077 -220.17730713]
[-102.33128357 -231.67118835]
[-111.29128265 -243.70640564]
[-119.53633118 -256.24224854]
[-127.03854370 -269.23626709]
[-133.77252197 -282.64456177]
[-139.71546936 -296.42169189]
[-144.84730530 -310.52105713]
[-149.15065002 -324.89495850]
[-152.61094666 -339.49478149]
[-155.21647644 -354.27108765]
[-156.95843506 -369.17388916]
[-157.83091736 -384.15277100]
[-157.83097839 -399.15704346]
[-156.95861816 -414.13592529]
[-155.21678162 -429.03875732]
[-152.61137390 -443.81506348]
[-149.15119934 -458.41491699]
[-144.84797668 -472.78884888]
[-139.71626282 -486.88827515]
[-133.77342224 -500.66546631]
[-127.03955078 -514.07379150]
[-119.53745270 -527.06787109]
[-111.29251099 -539.60375977]
[-102.33261108 -551.63909912]
[-92.68807983 -563.13305664]
[-82.39154816 -574.04675293]
[-71.47785950 -584.34332275]
[-59.98394012 -593.98791504]
[-47.94868469 -602.94787598]
[-35.41281509 -611.19287109]
[-22.41874695 -618.69500732]
[-9.01045227 -625.42895508]
[4.76670265 -631.37182617]
[18.86609840 -636.50360107]
[33.24002457 -640.80688477]
[47.83985138 -644.26715088]
[62.61616898 -646.87261963]
[77.51898193 -648.61450195]
[92.49786377 -649.48693848]
[107.50213623 -649.48693848]
[122.48101807 -648.61450195]
[137.38383484 -646.87261963]
[152.16015625 -644.26715088]
[166.75997925 -640.80688477]
[181.13389587 -636.50360107]
[195.23329163 -631.37182617]
[209.01045227 -625.42895508]
[222.41874695 -618.69500732]
[235.41281128 -611.19287109]
[247.94868469 -602.94787598]
[259.98394775 -593.98791504]
[271.47787476 -584.34332275]
[282.39154053 -574.04675293]
[292.68807983 -563.13305664]
[302.33261108 -551.63909912]
[311.29251099 -539.60375977]
[319.53744507 -527.06787109]
[327.03955078 -514.07379150]
[333.77340698 -500.66546631]
[339.71624756 -486.88827515]
[344.84799194 -472.78884888]
[349.15121460 -458.41491699]
[352.61138916 -443.81506348]
[355.21679688 -429.03875732]
[356.95861816 -414.13592529]
[357.83096313 -399.15704346]
[357.83090210 -384.15277100]
[356.95843506 -369.17388916]
[355.21646118 -354.27108765]
[352.61093140 -339.49478149]
[349.15066528 -324.89495850]
[344.84732056 -310.52105713]
[339.71548462 -296.42169189]
[333.77252197 -282.64456177]
[327.03854370 -269.23626709]
[319.53634644 -256.24224854]
[311.29129028 -243.70640564]
[302.33129883 -231.67118835]
[292.68664551 -220.17730713]
[282.39004517 -209.26367188]
[271.47625732 -198.96717834]
[259.98226929 -189.32269287]
[247.94692993 -180.36285400]
[235.41099548 -172.11795044]
[222.41687012 -164.61590576]
[209.00851440 -157.88209534]
[195.23130798 -151.93931580]
[181.13188171 -146.80764771]
[166.75790405 -142.50448608]
[152.15806580 -139.04437256]
[137.38171387 -136.43902588]
[122.47888947 -134.69726562]
[107.50000000 -133.82496643]
[107.50000000 -118.82495880]
[107.50000000 -103.82495880]
[107.50000000 -88.82495880]
[107.50000000 -73.82495880]
[107.50000000 -58.82496262]
[107.50000000 -43.82496262]
[107.50000000 -28.82496071]
[107.50000000 -13.82496071]
[107.50000000 1.17503905]
[107.50000000 16.17503929]
[107.50000000 31.17503929]
[122.11898804 34.39606857]
[135.70385742 40.68423843]
[147.61949158 49.74555969]
[157.30880737 61.15639114]
[164.31880188 74.38325500]
[168.32173157 88.80776215]
[169.13046265 103.75553131]
[166.70718384 118.52771759]
[161.16519165 132.43370056]
[152.76358032 144.82331848]
[141.89514160 155.11734009]
[129.06802368 162.83450317]
[114.88188934 167.61401367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
