%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUAGUACCGGGGGGGGGGGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGACUAACxxxxxxxxxxCUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUCCCCCCCCCCAAAUAGUACCG\
) } def
/len { sequence length } bind def

/coor [
[98.85687256 511.71963501]
[84.83493042 506.16662598]
[72.63497162 497.30029297]
[63.02390289 485.67797852]
[56.60587692 472.03027344]
[53.78433990 457.21508789]
[54.73665619 442.16372681]
[59.40296173 427.82229614]
[67.48992920 415.09234619]
[78.48920441 404.77404785]
[91.70935822 397.51608276]
[106.31937408 393.77465820]
[106.31937408 378.77465820]
[106.31937408 363.77465820]
[106.31937408 348.77465820]
[106.31937408 333.77465820]
[106.31937408 318.77465820]
[106.31937408 303.77465820]
[106.31937408 288.77465820]
[106.31937408 273.77465820]
[106.31937408 258.77465820]
[92.49401855 253.13648987]
[81.85174561 242.60618591]
[76.03617096 228.76623535]
[75.96221161 213.71359253]
[81.67227173 199.74188232]
[92.32505798 188.99194336]
[106.31937408 183.12382507]
[106.31937408 168.12382507]
[106.31937408 153.12382507]
[106.31937408 138.12382507]
[106.31937408 123.12382507]
[83.48313141 112.97896576]
[84.21585083 91.26358032]
[75.29969788 79.20114899]
[66.38354492 67.13871765]
[57.46739578 55.07628250]
[44.34616852 62.38803482]
[30.39763832 67.96179962]
[15.85085678 71.70605469]
[0.94469124 73.55931854]
[-14.07608414 73.49114990]
[-28.96481323 71.50267029]
[-43.47701263 67.62653351]
[-57.37437439 61.92639542]
[-70.42869568 54.49584961]
[-82.42561340 45.45691299]
[-93.16812134 34.95801926]
[-102.47982788 23.17156219]
[-110.20780945 10.29109001]
[-116.22518158 -3.47188735]
[-120.43312836 -17.89137077]
[-122.76255035 -32.73057938]
[-123.17520142 -47.74584198]
[-121.66429901 -62.69058990]
[-118.25465393 -77.31941986]
[-113.00225830 -91.39211273]
[-105.99335480 -104.67758179]
[-97.34304810 -116.95766449]
[-87.19337463 -128.03071594]
[-75.71100616 -137.71490479]
[-63.08449173 -145.85121155]
[-49.52116776 -152.30601501]
[-35.24375916 -156.97334290]
[-20.48671341 -159.77655029]
[-5.49235344 -160.66958618]
[9.49309731 -159.63780212]
[24.22356606 -156.69813538]
[38.45716476 -151.89886475]
[51.96016693 -145.31880188]
[64.51083374 -137.06597900]
[75.90308380 -127.27593994]
[85.94983673 -116.10942078]
[94.48611450 -103.74980164]
[101.37174988 -90.40003204]
[106.49367523 -76.27932739]
[109.76777649 -61.61956787]
[111.14029694 -46.66147614]
[110.58869934 -31.65067673]
[108.12203217 -16.83366203]
[103.78080750 -2.45374298]
[97.63630676 11.25295258]
[89.78943634 24.06134605]
[80.36904907 35.76111221]
[69.52982330 46.16013336]
[78.44597626 58.22256470]
[87.36212921 70.28499603]
[96.27828217 82.34742737]
[112.11437988 82.83892822]
[123.75805664 96.80620575]
[137.57164001 90.95941925]
[151.38522339 85.11263275]
[161.07798767 72.60819244]
[175.81449890 74.77260590]
[185.50726318 62.26817322]
[200.24375916 64.43258667]
[214.05734253 58.58579636]
[227.87092590 52.73900604]
[241.62376404 46.75070953]
[255.31439209 40.62153625]
[269.00500488 34.49236298]
[282.69564819 28.36318970]
[291.86392212 14.76632786]
[308.20223999 16.17762947]
[314.90310669 31.14526939]
[305.07327271 44.27182007]
[288.82479858 42.05381393]
[275.13418579 48.18298721]
[261.44357300 54.31216049]
[247.75292969 60.44133759]
[242.90315247 66.07975769]
[233.71771240 66.55258942]
[219.90412903 72.39937592]
[206.09054565 78.24617004]
[197.38583374 90.33239746]
[181.66128540 88.58618927]
[172.95655823 100.67242432]
[157.23200989 98.92621613]
[143.41842651 104.77300262]
[129.60484314 110.61978912]
[121.31937408 123.12382507]
[121.31937408 138.12382507]
[121.31937408 153.12382507]
[121.31937408 168.12382507]
[121.31937408 183.12382507]
[135.31369019 188.99194336]
[145.96647644 199.74188232]
[151.67654419 213.71359253]
[151.60256958 228.76623535]
[145.78700256 242.60618591]
[135.14472961 253.13648987]
[121.31937408 258.77465820]
[121.31937408 273.77465820]
[121.31937408 288.77465820]
[121.31937408 303.77465820]
[121.31937408 318.77465820]
[121.31937408 333.77465820]
[121.31937408 348.77465820]
[121.31937408 363.77465820]
[121.31937408 378.77465820]
[121.31937408 393.77465820]
[135.92938232 397.51608276]
[149.14955139 404.77404785]
[160.14881897 415.09234619]
[168.23577881 427.82229614]
[172.90208435 442.16372681]
[173.85440063 457.21508789]
[171.03286743 472.03027344]
[164.61483765 485.67797852]
[155.00376892 497.30029297]
[142.80381775 506.16662598]
[128.78187561 511.71963501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 125]
[29 124]
[30 123]
[31 122]
[32 121]
[34 88]
[35 87]
[36 86]
[37 85]
[90 120]
[91 119]
[92 118]
[94 116]
[96 114]
[97 113]
[98 112]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
