%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUAAUGAAGGGGGGGGGGUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACxxxxxxxxxxAAUUUCACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGCCCCCCCCCCGCAUAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[83.49532318 382.10879517]
[70.27512360 374.83633423]
[59.38831711 364.38934326]
[51.57718658 351.48007202]
[47.37430573 336.98876953]
[47.06623459 321.90341187]
[50.67397690 307.25259399]
[57.95154953 294.03521729]
[68.40275574 283.15243530]
[81.31501770 275.34631348]
[95.80795288 271.14901733]
[95.49589539 256.15225220]
[95.18384552 241.15550232]
[94.87178802 226.15875244]
[94.55973053 211.16200256]
[94.24767303 196.16525269]
[93.93561554 181.16848755]
[93.62355804 166.17173767]
[93.31150818 151.17498779]
[85.31110382 138.61143494]
[92.75963593 124.65328217]
[92.44757843 109.65652466]
[84.19740295 122.18388367]
[71.62655640 130.36763000]
[56.83214188 132.84255981]
[42.28219223 129.19577026]
[30.40397453 120.03564453]
[23.17903519 106.89029694]
[21.81266022 91.95265961]
[26.53278923 77.71466827]
[36.55200195 66.55153656]
[50.19886398 60.32553482]
[65.19677734 60.07529068]
[79.04374695 65.84255219]
[89.42979431 76.66521454]
[94.62208557 90.73641205]
[98.32824707 76.20146942]
[102.03440857 61.66653442]
[105.74057007 47.13159943]
[104.28497314 41.98370361]
[104.92826080 37.27854156]
[107.13660431 33.75364304]
[110.15793610 31.81998062]
[114.76349640 17.54451942]
[110.46082306 -0.32911548]
[123.85881805 -11.62042332]
[128.16639709 -25.98860741]
[132.47398376 -40.35679245]
[118.54013824 -45.93836975]
[105.16271210 -52.74651337]
[92.44942474 -60.72640228]
[80.50263977 -69.81378937]
[69.41854095 -79.93550110]
[59.28638458 -91.01004028]
[50.18773651 -102.94824982]
[42.19586182 -115.65400696]
[35.37510681 -129.02500916]
[29.78038597 -142.95358276]
[25.45675278 -157.32760620]
[22.43901253 -172.03132629]
[20.75146866 -186.94636536]
[20.40770340 -201.95263672]
[21.41048622 -216.92930603]
[23.75174332 -231.75579834]
[27.41262627 -246.31272888]
[32.36365509 -260.48287964]
[38.56496811 -274.15219116]
[45.96663666 -287.21057129]
[54.50906372 -299.55291748]
[64.12346649 -311.07983398]
[74.73243713 -321.69848633]
[86.25056458 -331.32339478]
[98.58509827 -339.87707520]
[111.63672638 -347.29067993]
[125.30036926 -353.50445557]
[139.46600342 -358.46841431]
[154.01959229 -362.14257812]
[168.84393311 -364.49737549]
[183.81968689 -365.51382446]
[198.82626343 -365.18374634]
[213.74282837 -363.50979614]
[228.44931030 -360.50549316]
[242.82727051 -356.19497681]
[256.76095581 -350.61297607]
[270.13815308 -343.80441284]
[282.85119629 -335.82415771]
[294.79769897 -326.73638916]
[305.88150024 -316.61434937]
[316.01333618 -305.53948975]
[325.11160278 -293.60101318]
[333.10308838 -280.89501953]
[339.92343140 -267.52380371]
[345.51773071 -253.59504700]
[349.84094238 -239.22090149]
[352.85821533 -224.51707458]
[354.54531860 -209.60198975]
[354.88861084 -194.59571838]
[353.88537598 -179.61906433]
[351.54367065 -164.79264832]
[347.88232422 -150.23583984]
[342.93087769 -136.06582642]
[336.72915649 -122.39670563]
[329.32708740 -109.33853912]
[320.78427124 -96.99646759]
[311.16952515 -85.46986389]
[300.56021118 -74.85152435]
[289.04180908 -65.22695923]
[276.70700073 -56.67364502]
[263.65515137 -49.26046371]
[249.99131775 -43.04709625]
[235.82553101 -38.08356857]
[221.27183533 -34.40985107]
[206.44741821 -32.05551529]
[191.47163391 -31.03952217]
[176.46507263 -31.37005043]
[161.54855347 -33.04443741]
[146.84216309 -36.04920578]
[142.53459167 -21.68102264]
[138.22700500 -7.31283903]
[143.69404602 3.52315712]
[140.17422485 15.55768490]
[129.03895569 22.15008354]
[124.43339539 36.42554474]
[120.27550507 50.83776093]
[116.56934357 65.37269592]
[112.86318207 79.90763092]
[109.15702057 94.44256592]
[107.44433594 109.34447479]
[107.75638580 124.34122467]
[115.77910614 137.97744751]
[108.30825806 150.86293030]
[108.62031555 165.85968018]
[108.93237305 180.85643005]
[109.24443054 195.85319519]
[109.55648041 210.84994507]
[109.86853790 225.84669495]
[110.18059540 240.84344482]
[110.49265289 255.84020996]
[110.80471039 270.83694458]
[125.45970154 274.42773438]
[138.68551636 281.68997192]
[149.58038330 292.12857056]
[157.40147400 305.03179932]
[161.61553955 319.51986694]
[161.93527222 334.60494995]
[158.33883667 349.25854492]
[151.07147217 362.48156738]
[140.62867737 373.37240601]
[127.72244263 381.18850708]
[113.23275757 385.39700317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[36 127]
[37 126]
[38 125]
[39 124]
[43 123]
[44 122]
[46 119]
[47 118]
[48 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
