%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAACCCACGGGGGGGGGGUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUxxxxxxxxxxAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUCUCAGGCUACACCCUAGACCCCCCCCCCCCAAACCUAC\
) } def
/len { sequence length } bind def

/coor [
[87.09177399 386.99700928]
[73.24583435 380.98098755]
[61.53717422 371.45156860]
[52.83465195 359.11590576]
[47.78404999 344.88937378]
[46.76015854 329.82769775]
[49.83895874 315.04855347]
[56.79198074 301.64862061]
[67.10326385 290.62228394]
[80.00764465 282.78778076]
[94.54753113 278.72647095]
[94.54753113 263.72647095]
[94.54753113 248.72645569]
[94.54753113 233.72645569]
[94.54753113 218.72645569]
[94.54753113 203.72645569]
[94.54753113 188.72645569]
[94.54753113 173.72645569]
[94.54753113 158.72645569]
[94.54753113 143.72645569]
[94.54753113 128.72645569]
[94.54753113 113.72646332]
[90.75630951 111.68163300]
[87.68685150 108.60733032]
[85.61316681 104.74808502]
[84.72888184 100.41960907]
[70.94650269 94.49964905]
[57.16411972 88.57968140]
[39.77334976 101.13578796]
[14.01437378 91.84112549]
[-0.98481441 91.68508911]
[-15.98400307 91.52905273]
[-22.01553917 94.48338318]
[-27.75779533 93.97566223]
[-31.60050774 91.04153442]
[-46.58022308 90.26168823]
[-59.41333771 99.88928986]
[-74.90499115 95.71936035]
[-81.17130280 80.95072174]
[-73.40530396 66.91259766]
[-57.56439972 64.37384796]
[-45.80037689 75.28197479]
[-30.82066154 76.06182098]
[-15.82796669 76.52986145]
[-0.82877785 76.68589783]
[14.17041016 76.84193420]
[17.48465919 70.11395264]
[4.02869463 63.48545456]
[-10.81698132 61.33931351]
[-13.36326218 46.55701447]
[-0.09121473 39.56753922]
[10.65719318 50.02948761]
[24.11315918 56.65798950]
[27.42740822 49.93000412]
[18.16245842 38.13336563]
[8.89750957 26.33672523]
[-0.36744016 14.54008579]
[-15.78116798 8.94106388]
[-18.37230873 -7.25208378]
[-5.47531939 -17.38123512]
[9.64248276 -11.02638817]
[11.42920017 5.27513599]
[20.69414902 17.07177544]
[29.95909882 28.86841583]
[39.22404861 40.66505432]
[61.27905273 54.45438385]
[63.08408356 74.79730225]
[76.86646271 80.71726227]
[90.64884949 86.63722992]
[78.06599426 78.47194672]
[70.06888580 65.78154755]
[68.13274384 50.90702820]
[72.61473083 36.59228897]
[82.68805695 25.47796631]
[96.49449158 19.61432266]
[111.48716736 20.08302116]
[124.90038300 26.79760170]
[134.25981140 38.51942825]
[137.83891296 53.08617020]
[134.97744751 67.81070709]
[126.20327759 79.97680664]
[113.13789368 87.33929443]
[127.26269531 82.29053497]
[141.38749695 77.24177551]
[155.51229858 72.19302368]
[169.41485596 66.56106567]
[183.07109070 60.35565948]
[192.43412781 47.60245132]
[207.22210693 49.38142014]
[220.87835693 43.17601395]
[233.48947144 35.05447006]
[244.78848267 25.18874741]
[256.08749390 15.32302380]
[258.60165405 -0.52180004]
[272.62771606 -8.30956268]
[287.40606689 -2.06615925]
[291.60000610 13.41900635]
[281.99234009 26.26703835]
[265.95321655 26.62202835]
[254.65420532 36.48775101]
[243.35519409 46.35347366]
[258.22949219 44.41546249]
[272.74060059 48.21382141]
[284.75781250 57.19081879]
[292.51660156 70.02832031]
[294.87765503 84.84133148]
[291.49435425 99.45478821]
[282.86343384 111.72293091]
[270.25222778 119.84436798]
[255.51251221 122.62658691]
[240.80857849 119.66106415]
[228.29948425 111.38323975]
[219.82197571 99.00859070]
[216.62088013 84.35413361]
[219.16619873 69.57167053]
[227.08375549 56.83225250]
[213.42752075 63.03766251]
[205.04127502 75.34701538]
[189.27650452 74.01190186]
[175.62026978 80.21730804]
[174.52082825 82.86279297]
[172.27314758 85.21691132]
[168.98846436 86.82711792]
[164.94432068 87.29174805]
[160.56105042 86.31782532]
[146.43624878 91.36658478]
[132.31144714 96.41533661]
[118.18664551 101.46409607]
[109.54753113 113.72646332]
[109.54753113 128.72645569]
[109.54753113 143.72645569]
[109.54753113 158.72645569]
[109.54753113 173.72645569]
[109.54753113 188.72645569]
[109.54753113 203.72645569]
[109.54753113 218.72645569]
[109.54753113 233.72645569]
[109.54753113 248.72645569]
[109.54753113 263.72647095]
[109.54753113 278.72647095]
[124.08741760 282.78778076]
[136.99180603 290.62228394]
[147.30308533 301.64862061]
[154.25610352 315.04855347]
[157.33489990 329.82769775]
[156.31101990 344.88937378]
[151.26040649 359.11590576]
[142.55789185 371.45156860]
[130.84922791 380.98098755]
[117.00328827 386.99700928]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 69]
[27 68]
[28 67]
[30 46]
[31 45]
[32 44]
[35 43]
[36 42]
[54 65]
[55 64]
[56 63]
[57 62]
[82 128]
[83 127]
[84 126]
[85 125]
[86 120]
[87 119]
[89 117]
[90 116]
[91 101]
[92 100]
[93 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
