%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACUAUACGGGGGGGGGGUACUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAxxxxxxxxxxCAUCUUUCUUUUCACCGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCCCCCCCCCCCAUCACUAGAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 393.71469116]
[71.01555634 388.16168213]
[58.81560135 379.29534912]
[49.20452881 367.67303467]
[42.78650284 354.02532959]
[39.96496582 339.21014404]
[40.91728210 324.15875244]
[45.58358765 309.81735229]
[53.67055511 297.08740234]
[64.66983032 286.76910400]
[77.88998413 279.51113892]
[92.50000000 275.76971436]
[92.50000000 260.76971436]
[92.50000000 245.76969910]
[92.50000000 230.76969910]
[92.50000000 215.76969910]
[92.50000000 200.76969910]
[92.50000000 185.76969910]
[92.50000000 170.76969910]
[92.50000000 155.76969910]
[92.50000000 140.76969910]
[78.56114960 135.47949219]
[67.39541626 125.59999847]
[60.44710159 112.40913391]
[58.61495972 97.61315155]
[62.13598633 83.12590790]
[70.55473328 70.82132721]
[82.78223419 62.29101944]
[79.12352753 47.74406815]
[75.46482086 33.19711304]
[68.79080963 46.63056564]
[55.98920822 54.44842529]
[40.99051666 54.25035477]
[28.39981842 46.09717560]
[22.08286858 32.49217224]
[23.97917366 17.61252022]
[33.50650787 6.02675581]
[47.73966599 1.29208267]
[62.30861664 4.86219931]
[72.73934937 15.63933849]
[71.81594086 0.66778898]
[70.89252472 -14.30376053]
[59.81437302 -22.02931786]
[55.29319763 -34.54890823]
[58.77571487 -47.19409561]
[68.76766205 -55.38637161]
[68.15183258 -70.37372589]
[67.53601074 -85.36107635]
[66.92018127 -100.34843445]
[66.30435944 -115.33578491]
[65.68852997 -130.32313538]
[58.22834778 -134.33485413]
[52.74203110 -140.67161560]
[49.90015030 -148.46263123]
[50.01552200 -156.66630554]
[53.01001740 -164.20951843]
[43.36820221 -175.70018005]
[27.78137398 -180.79751587]
[24.66761017 -196.89833069]
[37.23008728 -207.43949890]
[52.54560089 -201.57716370]
[54.85886765 -185.34199524]
[64.50068665 -173.85133362]
[66.82260895 -174.57186890]
[69.20912933 -175.03555298]
[72.26752472 -189.72044373]
[75.32592010 -204.40534973]
[61.54400253 -210.46771240]
[49.32392120 -219.26335144]
[39.19988251 -230.40774536]
[31.61447144 -243.41372681]
[26.89928627 -257.71270752]
[25.26045799 -272.67959595]
[26.76962662 -287.66012573]
[31.36081696 -301.99938965]
[38.83332443 -315.07055664]
[48.86048126 -326.30218506]
[61.00394821 -335.20330811]
[74.73285675 -341.38479614]
[89.44704437 -344.57641602]
[104.50326538 -344.63864136]
[119.24332428 -341.56875610]
[133.02285767 -335.50094604]
[145.23948669 -326.70053101]
[155.35913086 -315.55212402]
[162.93943787 -302.54318237]
[167.64898682 -288.24237061]
[169.28193665 -273.27481079]
[167.76687622 -258.29489136]
[163.17002869 -243.95742798]
[155.69238281 -230.88920593]
[145.66081238 -219.66151428]
[133.51383972 -210.76516724]
[119.78250885 -204.58908081]
[105.06707001 -201.40325928]
[90.01081848 -201.34695435]
[86.95242310 -186.66204834]
[83.89402771 -171.97715759]
[95.10038757 -150.83622742]
[80.67588806 -130.93896484]
[81.29170990 -115.95161438]
[81.90753174 -100.96425629]
[82.52336121 -85.97690582]
[83.13918304 -70.98954773]
[83.75501251 -56.00219727]
[96.59132385 -45.17943192]
[97.67969513 -28.08712196]
[85.86407471 -15.22717476]
[86.78749084 -0.25562459]
[87.71089935 14.71592522]
[90.01177216 29.53840828]
[93.67047882 44.08536148]
[97.32918549 58.63231659]
[115.31557465 61.47920227]
[130.34640503 71.75971222]
[139.52108765 87.48993683]
[141.06912231 105.63430786]
[155.31581116 110.32810974]
[169.56251526 115.02191162]
[183.80920410 119.71571350]
[199.74479675 115.84413910]
[210.86816406 127.89414978]
[205.73654175 143.46972656]
[189.62889099 146.54804993]
[179.11540222 133.96240234]
[164.86871338 129.26860046]
[150.62202454 124.57480621]
[136.37532043 119.88100433]
[131.10057068 127.40753174]
[124.29702759 133.58679199]
[116.29911804 138.11505127]
[107.50000000 140.76969910]
[107.50000000 155.76969910]
[107.50000000 170.76969910]
[107.50000000 185.76969910]
[107.50000000 200.76969910]
[107.50000000 215.76969910]
[107.50000000 230.76969910]
[107.50000000 245.76969910]
[107.50000000 260.76971436]
[107.50000000 275.76971436]
[122.11001587 279.51113892]
[135.33016968 286.76910400]
[146.32945251 297.08740234]
[154.41641235 309.81735229]
[159.08271790 324.15875244]
[160.03503418 339.21014404]
[157.21350098 354.02532959]
[150.79547119 367.67303467]
[141.18440247 379.29534912]
[128.98443604 388.16168213]
[114.96250153 393.71469116]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 113]
[29 112]
[30 111]
[40 110]
[41 109]
[42 108]
[46 105]
[47 104]
[48 103]
[49 102]
[50 101]
[51 100]
[56 63]
[57 62]
[65 98]
[66 97]
[67 96]
[117 128]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
