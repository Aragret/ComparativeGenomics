%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACCCUAGCAGGGGGGGGGGUUACUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCxxxxxxxxxxCUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAAUUCUUCCCCCCCCCCCUCACCCUAACA\
) } def
/len { sequence length } bind def

/coor [
[88.20069885 548.83129883]
[74.04009247 543.67626953]
[61.45035172 535.39410400]
[51.11041260 524.43127441]
[43.57790375 511.37918091]
[39.25903702 496.94158936]
[38.38672638 481.89712524]
[41.00801849 467.05712891]
[46.98154449 453.22189331]
[55.98516464 441.13754272]
[67.53331757 431.45574951]
[81.00323486 424.69866943]
[95.66849518 421.23071289]
[95.66849518 406.23071289]
[95.66849518 391.23071289]
[95.66849518 376.23071289]
[95.66849518 361.23071289]
[95.66849518 346.23071289]
[95.66849518 331.23071289]
[95.66849518 316.23071289]
[95.66849518 301.23071289]
[95.66849518 286.23071289]
[81.50013733 278.51730347]
[73.09212494 264.64013672]
[72.81108093 248.32324219]
[80.82772064 234.00123596]
[95.04479218 225.61401367]
[94.74079132 210.61709595]
[94.43679047 195.62017822]
[94.13278198 180.62326050]
[86.13912964 168.05541992]
[93.59515381 154.10125732]
[93.29114532 139.10433960]
[92.98714447 124.10742188]
[78.25972748 112.55821991]
[75.61326599 94.03047943]
[86.51837158 78.81996918]
[82.61161804 64.33766174]
[78.70486450 49.85535049]
[74.79811096 35.37303925]
[59.98643494 37.82106400]
[45.00461578 38.78213501]
[30.00155067 38.24670792]
[15.12635517 36.22009277]
[0.52686763 32.72244263]
[-13.65181160 27.78851128]
[-27.26876450 21.46734047]
[-40.18865585 13.82175255]
[-52.28308105 4.92773533]
[-63.43183136 -5.12631559]
[-73.52410889 -16.24047661]
[-82.45960236 -28.30428696]
[-90.14951324 -41.19784927]
[-96.51741028 -54.79301453]
[-101.50000000 -68.95466614]
[-105.04776001 -83.54205322]
[-107.12544250 -98.41020203]
[-107.71239471 -113.41133881]
[-106.80277252 -128.39637756]
[-104.40562439 -143.21636963]
[-100.54477692 -157.72404480]
[-95.25859833 -171.77519226]
[-88.59962463 -185.23017883]
[-80.63404083 -197.95527649]
[-71.44100952 -209.82400513]
[-61.11190414 -220.71842957]
[-49.74938202 -230.53024292]
[-37.46636963 -239.16194153]
[-24.38494492 -246.52772522]
[-10.63512039 -252.55441284]
[3.64644814 -257.18209839]
[18.31782150 -260.36477661]
[33.23318481 -262.07080078]
[48.24429321 -262.28326416]
[63.20196533 -261.00003052]
[77.95753479 -258.23382568]
[92.36434937 -254.01219177]
[106.27922821 -248.37705994]
[119.56387329 -241.38442993]
[132.08624268 -233.10380554]
[143.72190857 -223.61749268]
[154.35519409 -213.01977539]
[163.88043213 -201.41595459]
[172.20295715 -188.92138672]
[179.24005127 -175.66024780]
[184.92176819 -161.76432800]
[189.19166565 -147.37173462]
[192.00726318 -132.62551880]
[193.34060669 -117.67223358]
[193.17843628 -102.66049194]
[191.52236938 -87.73949432]
[188.38887024 -73.05754852]
[183.80906677 -58.76055145]
[177.82847595 -44.99061584]
[170.50654602 -31.88458824]
[161.91604614 -19.57272720]
[152.14234924 -8.17739773]
[141.28260803 2.18814588]
[129.44473267 11.42088318]
[116.74639130 19.42905235]
[103.31378937 26.13306427]
[89.28042603 31.46628761]
[93.18717194 45.94859695]
[97.09392548 60.43090439]
[101.00067902 74.91321564]
[113.49579620 78.82899475]
[122.31991577 88.50350952]
[137.09786987 85.93206024]
[144.79011536 72.31724548]
[159.45222473 66.88062286]
[174.16116333 72.18919373]
[181.97184753 85.73641968]
[179.19628906 101.12570953]
[167.14503479 111.09072113]
[151.50831604 110.92626190]
[139.66931152 100.71000671]
[124.89136505 103.28145599]
[121.99571991 112.10521698]
[116.09064484 119.27275848]
[107.98406219 123.80342102]
[108.28807068 138.80033875]
[108.59207153 153.79725647]
[116.60746765 167.43778992]
[109.12969971 180.31925964]
[109.43370819 195.31617737]
[109.73770905 210.31309509]
[110.04171753 225.31001282]
[122.65497589 231.43066406]
[131.34904480 242.34468079]
[134.46514893 255.87786865]
[131.44844055 269.36566162]
[122.94589233 280.17764282]
[110.66849518 286.23071289]
[110.66849518 301.23071289]
[110.66849518 316.23071289]
[110.66849518 331.23071289]
[110.66849518 346.23071289]
[110.66849518 361.23071289]
[110.66849518 376.23071289]
[110.66849518 391.23071289]
[110.66849518 406.23071289]
[110.66849518 421.23071289]
[125.33375549 424.69866943]
[138.80368042 431.45574951]
[150.35182190 441.13754272]
[159.35545349 453.22189331]
[165.32897949 467.05712891]
[167.95027161 481.89712524]
[167.07795715 496.94158936]
[162.75909424 511.37918091]
[155.22657776 524.43127441]
[144.88664246 535.39410400]
[132.29689026 543.67626953]
[118.13629150 548.83129883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[27 127]
[28 126]
[29 125]
[30 124]
[32 122]
[33 121]
[34 120]
[37 105]
[38 104]
[39 103]
[40 102]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
