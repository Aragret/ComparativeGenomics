%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCCUAACGGGGGGGGGGCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAxxxxxxxxxxCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCCCCCCCCCCCACCCUUAC\
) } def
/len { sequence length } bind def

/coor [
[81.64929199 356.00973511]
[69.09107208 347.65856934]
[59.00484467 336.44613647]
[52.02465057 323.07720947]
[48.58926773 308.39224243]
[48.91464615 293.31427002]
[52.98033142 278.79113770]
[60.53075027 265.73580933]
[71.09127808 254.96891785]
[83.99806976 247.16728210]
[98.43980408 242.82131958]
[97.81582642 227.83430481]
[97.19184875 212.84729004]
[96.56787109 197.86027527]
[95.94389343 182.87326050]
[95.31991577 167.88624573]
[94.69593811 152.89923096]
[94.07196045 137.91221619]
[93.44798279 122.92520142]
[92.82400513 107.93817902]
[90.33889008 93.14547729]
[86.03130341 78.77729034]
[81.72371674 64.40910339]
[77.41613007 50.04092407]
[62.77650833 53.33729935]
[47.94260025 55.60443115]
[32.98667526 56.83127213]
[17.98160744 57.01184845]
[3.00049305 56.14528275]
[-11.88367844 54.23579025]
[-26.59839249 51.29267883]
[-41.07196045 47.33028412]
[-55.23386765 42.36791611]
[-69.01511383 36.42974091]
[-82.34857178 29.54470062]
[-95.16925812 21.74633026]
[-107.41473389 13.07262707]
[-119.02532959 3.56584740]
[-129.94447327 -6.72769117]
[-140.11897278 -17.75784111]
[-149.49926758 -29.47086143]
[-158.03964233 -41.80968857]
[-165.69850159 -54.71420670]
[-172.43853760 -68.12155151]
[-178.22688293 -81.96639252]
[-183.03536987 -96.18128967]
[-186.84054565 -110.69698334]
[-189.62388611 -125.44274902]
[-191.37182617 -140.34675598]
[-192.07586670 -155.33639526]
[-191.73255920 -170.33862305]
[-190.34356689 -185.28034973]
[-187.91567993 -200.08880615]
[-184.46072388 -214.69181824]
[-179.99551392 -229.01824951]
[-174.54182434 -242.99830627]
[-168.12620544 -256.56387329]
[-160.77993774 -269.64886475]
[-152.53878784 -282.18951416]
[-143.44291687 -294.12475586]
[-133.53665161 -305.39642334]
[-122.86822510 -315.94961548]
[-111.48963928 -325.73287964]
[-99.45632172 -334.69857788]
[-86.82689667 -342.80307007]
[-73.66289520 -350.00680542]
[-60.02845383 -356.27468872]
[-45.98999405 -361.57623291]
[-31.61591339 -365.88558960]
[-16.97624016 -369.18176270]
[-2.14229941 -371.44866943]
[12.81363964 -372.67532349]
[27.81871223 -372.85568237]
[42.79981232 -371.98889160]
[57.68395996 -370.07919312]
[72.39862823 -367.13586426]
[86.87213898 -363.17324829]
[101.03397369 -358.21069336]
[114.81513977 -352.27230835]
[128.14849854 -345.38708496]
[140.96907043 -337.58853149]
[153.21441650 -328.91464233]
[164.82487488 -319.40771484]
[175.74388123 -309.11401367]
[185.91822815 -298.08370972]
[195.29835510 -286.37057495]
[203.83854675 -274.03161621]
[211.49722290 -261.12698364]
[218.23706055 -247.71954346]
[224.02520752 -233.87461853]
[228.83348083 -219.65965271]
[232.63845825 -205.14390564]
[235.42158508 -190.39810181]
[237.16932678 -175.49406433]
[237.87313843 -160.50442505]
[237.52961731 -145.50219727]
[236.14041138 -130.56048584]
[233.71232605 -115.75207520]
[230.25715637 -101.14910889]
[225.79173279 -86.82274628]
[220.33784485 -72.84276581]
[213.92204285 -59.27729034]
[206.57557678 -46.19240570]
[198.33424377 -33.65185928]
[189.23820496 -21.71675110]
[179.33177185 -10.44522762]
[168.66320801 0.10779789]
[157.28448486 9.89091110]
[145.25103760 18.85645103]
[132.62149048 26.96073532]
[119.45738220 34.16427994]
[105.82285309 40.43199539]
[91.78431702 45.73333740]
[96.09190369 60.10152054]
[100.39948273 74.46970367]
[104.70706940 88.83789062]
[109.57488251 74.64971161]
[120.03071594 63.89445496]
[134.07583618 58.62809753]
[149.02539062 59.85735321]
[162.02160645 67.34723663]
[170.58013916 79.66598511]
[173.06492615 94.45874786]
[169.00100708 108.89773560]
[159.16520691 120.22280121]
[145.43775940 126.26905060]
[130.44279480 125.88066864]
[117.04673004 119.13191223]
[107.81101990 107.31420135]
[108.43499756 122.30122375]
[109.05897522 137.28823853]
[109.68295288 152.27525330]
[110.30693054 167.26226807]
[110.93090820 182.24928284]
[111.55488586 197.23629761]
[112.17886353 212.22331238]
[112.80284119 227.21032715]
[113.42681885 242.19735718]
[128.17982483 245.32778931]
[141.69046021 252.02954102]
[153.10943604 261.88134766]
[161.71894836 274.26385498]
[166.97779846 288.39877319]
[168.55540466 303.39749146]
[166.35260010 318.31723022]
[160.50785828 332.22009277]
[151.38856506 344.23214722]
[139.56799316 353.59832764]
[125.78919220 359.72979736]
[110.91828918 362.24121094]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 116]
[22 115]
[23 114]
[24 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
