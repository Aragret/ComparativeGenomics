%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAUGUCGGGGGGGGGGGCAGUAUCUGUCUUUGAUUCCUGCCUCAUCCUAUUAUUUAUCGCACCUACxxxxxxxxxxACAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGCCCCCCCCCCACCCUAUAUC\
) } def
/len { sequence length } bind def

/coor [
[82.99154663 345.80075073]
[69.77134705 338.52828979]
[58.88454437 328.08129883]
[51.07341385 315.17202759]
[46.87053299 300.68072510]
[46.56246185 285.59536743]
[50.17020416 270.94454956]
[57.44777679 257.72717285]
[67.89898682 246.84440613]
[80.81124115 239.03825378]
[95.30418396 234.84097290]
[94.99212646 219.84422302]
[94.68006897 204.84745789]
[94.36801147 189.85070801]
[94.05595398 174.85395813]
[93.74389648 159.85720825]
[93.43184662 144.86044312]
[93.11978912 129.86369324]
[92.80773163 114.86694336]
[81.01109314 105.60198975]
[66.36759186 108.85282135]
[51.72409058 112.10364532]
[37.08058929 115.35446930]
[22.43708611 118.60529327]
[9.19754124 131.36045837]
[-7.32093477 125.51752472]
[-21.89363670 129.07229614]
[-36.46633911 132.62704468]
[-43.23011780 146.72618103]
[-57.49547195 153.13194275]
[-72.52673340 148.81973267]
[-81.22660065 135.82563782]
[-79.48726654 120.28508759]
[-68.12998962 109.53584290]
[-52.51733017 108.65337372]
[-40.02110291 118.05435181]
[-25.44839859 114.49958801]
[-10.87569714 110.94482422]
[-4.29553652 100.74635315]
[7.86569548 97.69293213]
[19.18626022 103.96179199]
[33.82976151 100.71096802]
[48.47326279 97.46014404]
[63.11676407 94.20932007]
[77.76026917 90.95848846]
[63.35085678 86.79089355]
[49.32674026 81.46884155]
[37.90151596 71.74956512]
[30.39999199 58.76006699]
[27.69200516 44.00653076]
[30.09155655 29.19970512]
[37.32040787 16.05650520]
[48.54034042 6.10094881]
[62.45035172 0.48743057]
[77.43750763 -0.13313678]
[91.76398468 4.31120443]
[103.76854706 13.30511284]
[112.05922699 25.80570030]
[115.67466736 40.36346817]
[114.19564056 55.29037476]
[107.79497528 68.85369873]
[104.40184021 83.46488190]
[114.38456726 72.26911163]
[124.36729431 61.07334900]
[134.35002136 49.87758255]
[144.33274841 38.68181610]
[134.33618164 27.47617149]
[125.68215179 15.20402718]
[118.48348236 2.02537298]
[112.83402252 -11.88797855]
[108.80741882 -26.35463905]
[106.45617676 -41.18600464]
[105.81093597 -56.18871689]
[106.88011932 -71.16719055]
[109.64978790 -85.92613983]
[114.08382416 -100.27316284]
[120.12443542 -114.02121735]
[127.69285583 -126.99105835]
[136.69041443 -139.01359558]
[146.99983215 -149.93211365]
[158.48667908 -159.60423279]
[171.00120544 -167.90390015]
[184.38027954 -174.72286987]
[198.44944763 -179.97225952]
[213.02529907 -183.58364868]
[227.91783142 -185.50991821]
[242.93286133 -185.72599792]
[257.87463379 -184.22904968]
[272.54837036 -181.03857422]
[286.76278687 -176.19619751]
[300.33251953 -169.76502991]
[313.08068848 -161.82891846]
[324.84109497 -152.49133301]
[335.46041870 -141.87399292]
[344.80020142 -130.11532593]
[352.73870850 -117.36863708]
[359.17239380 -103.80010223]
[364.01742554 -89.58660889]
[367.21063232 -74.91346741]
[368.71038818 -59.97196198]
[368.49713135 -44.95689392]
[366.57360840 -30.06401062]
[362.96496582 -15.48747635]
[357.71820068 -1.41732335]
[350.90173340 11.96301460]
[342.60440063 24.47909737]
[332.93441772 35.96775436]
[322.01785278 46.27920151]
[309.99697876 55.27901459]
[297.02856445 62.84985733]
[283.28164673 68.89302826]
[268.93545532 73.32975006]
[254.17700195 76.10217285]
[239.19873047 77.17415619]
[224.19589233 76.53172302]
[209.36408997 74.18325043]
[194.89668274 70.15934753]
[180.98226929 64.51248932]
[167.80227661 57.31628036]
[155.52851868 48.66454315]
[145.54579163 59.86030960]
[135.56306458 71.05607605]
[125.58033752 82.25183868]
[115.59761047 93.44760895]
[130.01144409 89.29531860]
[143.48870850 95.88038635]
[149.07107544 109.80292511]
[143.87635803 123.87470245]
[130.58657837 130.83042908]
[116.06330872 127.07883453]
[107.80448151 114.55488586]
[108.11653900 129.55163574]
[108.42859650 144.54838562]
[108.74065399 159.54515076]
[109.05271149 174.54190063]
[109.36476898 189.53865051]
[109.67681885 204.53540039]
[109.98887634 219.53216553]
[110.30093384 234.52891541]
[124.95592499 238.11968994]
[138.18173218 245.38194275]
[149.07659912 255.82054138]
[156.89770508 268.72375488]
[161.11177063 283.21182251]
[161.43148804 298.29690552]
[157.83506775 312.95050049]
[150.56770325 326.17352295]
[140.12490845 337.06436157]
[127.21867371 344.88046265]
[112.72898102 349.08895874]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 45]
[21 44]
[22 43]
[23 42]
[24 41]
[26 38]
[27 37]
[28 36]
[62 124]
[63 123]
[64 122]
[65 121]
[66 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
