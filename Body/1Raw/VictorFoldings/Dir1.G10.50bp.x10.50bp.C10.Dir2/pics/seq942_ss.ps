%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUGGUCCUAGGGGGGGGGGGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAxxxxxxxxxxCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCACCCCCCCCCCUUGGUCUUAG\
) } def
/len { sequence length } bind def

/coor [
[75.12168121 533.31127930]
[61.27573776 527.29528809]
[49.56707764 517.76586914]
[40.86455154 505.43020630]
[35.81394958 491.20367432]
[34.79006195 476.14199829]
[37.86885834 461.36282349]
[44.82188034 447.96289062]
[55.13316345 436.93658447]
[68.03754425 429.10205078]
[82.57743073 425.04074097]
[82.57743073 410.04074097]
[82.57743073 395.04074097]
[82.57743073 380.04074097]
[82.57743073 365.04074097]
[82.57743073 350.04074097]
[82.57743073 335.04074097]
[82.57743073 320.04074097]
[82.57743073 305.04074097]
[82.57743073 290.04074097]
[72.57778931 286.53112793]
[63.94815445 280.34335327]
[57.38937378 271.96533203]
[53.43817902 262.06347656]
[52.42332077 251.42953491]
[54.43822479 240.91749573]
[59.33252716 231.37486267]
[66.72323608 223.57438660]
[76.02468872 218.15147400]
[86.49491882 215.55244446]
[88.05249786 200.63352966]
[89.61008453 185.71461487]
[91.16766357 170.79570007]
[92.72524261 155.87680054]
[93.34922028 140.88978577]
[93.03716278 125.89302826]
[92.72510529 110.89627075]
[91.78948212 95.92547607]
[90.23190308 81.00656891]
[88.67431641 66.08765411]
[77.51425171 51.47831726]
[85.20503998 35.73501205]
[83.33742523 20.85173225]
[81.46981812 5.96845293]
[73.64649963 18.76672363]
[60.53853226 26.05926895]
[45.53887177 25.95843315]
[32.53013229 18.49032021]
[24.87958908 5.58802700]
[24.56756020 -9.40872669]
[31.67481232 -22.61807823]
[44.36166000 -30.62082481]
[59.34414291 -31.34548187]
[72.74410248 -24.60447311]
[81.09294891 -12.14278889]
[82.33982849 -27.09087563]
[83.58670044 -42.03896332]
[84.83357239 -56.98704910]
[76.02272797 -44.84748459]
[64.41666412 -35.34489822]
[50.77708054 -29.10295296]
[35.99917221 -26.53131104]
[21.05281448 -27.79875374]
[6.91895294 -32.82209778]
[-5.47479439 -41.27165604]
[-15.31501675 -52.59287262]
[-21.95589256 -66.04273224]
[-24.96157455 -80.73851013]
[-24.13479805 -95.71571350]
[-19.52982521 -109.99136353]
[-11.44888210 -122.62854767]
[-0.42233077 -132.79786682]
[12.82614899 -139.83190918]
[27.42704773 -143.26902771]
[42.42209625 -142.88363647]
[56.82715607 -138.70101929]
[69.69681549 -130.99571228]
[80.18641663 -120.27338409]
[87.60753632 -107.23777771]
[91.47310638 -92.74442291]
[91.52882385 -77.73972321]
[99.25290680 -90.59812164]
[106.97699738 -103.45652771]
[114.70108032 -116.31492615]
[122.42516327 -129.17332458]
[118.35728455 -144.44512939]
[126.35184479 -158.07827759]
[141.66580200 -161.98446655]
[155.21365356 -153.84622192]
[158.95771790 -138.49182129]
[150.67669678 -125.03076172]
[135.28356934 -121.44924164]
[127.55947876 -108.59084320]
[119.83539581 -95.73243713]
[112.11131287 -82.87403870]
[104.38722992 -70.01563263]
[99.78166199 -55.74017334]
[98.53479004 -40.79208755]
[97.28791046 -25.84400177]
[96.04103851 -10.89591408]
[96.35309601 4.10083961]
[98.22071075 18.98411942]
[100.08831787 33.86740112]
[109.46878052 41.56898117]
[111.11367035 53.99931717]
[103.59323120 64.53007507]
[105.15081024 79.44898987]
[106.70838928 94.36789703]
[108.97396851 96.51291656]
[110.48652649 99.55048370]
[110.90640259 103.19461060]
[110.00775909 107.03523254]
[107.72186279 110.58421326]
[108.03392029 125.58097076]
[108.34597778 140.57772827]
[119.76698303 130.85350037]
[134.73307800 131.86131287]
[144.74722290 143.02899170]
[144.12382507 158.01603699]
[133.21682739 168.31349182]
[118.21872711 168.07492065]
[107.64415741 157.43437195]
[106.08657837 172.35328674]
[104.52899170 187.27220154]
[102.97141266 202.19111633]
[101.41383362 217.11003113]
[118.06109619 227.85667419]
[127.00165558 245.45248413]
[125.87518311 265.07934570]
[115.06601715 281.40701294]
[97.57743073 290.04074097]
[97.57743073 305.04074097]
[97.57743073 320.04074097]
[97.57743073 335.04074097]
[97.57743073 350.04074097]
[97.57743073 365.04074097]
[97.57743073 380.04074097]
[97.57743073 395.04074097]
[97.57743073 410.04074097]
[97.57743073 425.04074097]
[112.11731720 429.10205078]
[125.02169800 436.93658447]
[135.33299255 447.96289062]
[142.28601074 461.36282349]
[145.36480713 476.14199829]
[144.34091187 491.20367432]
[139.29031372 505.43020630]
[130.58778381 517.76586914]
[118.87912750 527.29528809]
[105.03318787 533.31127930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 126]
[31 125]
[32 124]
[33 123]
[34 122]
[35 115]
[36 114]
[37 113]
[38 108]
[39 107]
[40 106]
[42 103]
[43 102]
[44 101]
[55 100]
[56 99]
[57 98]
[58 97]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
