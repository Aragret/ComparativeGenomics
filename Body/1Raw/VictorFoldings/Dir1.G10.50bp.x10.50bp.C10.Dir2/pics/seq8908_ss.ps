%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGCCUACUGGGGGGGGGGAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAxxxxxxxxxxCCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCCCCCCCCCCCUAGGCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[107.37175751 385.64990234]
[93.34981537 380.09689331]
[81.14985657 371.23056030]
[71.53878784 359.60824585]
[65.12075806 345.96054077]
[62.29922485 331.14535522]
[63.25154114 316.09399414]
[67.91784668 301.75256348]
[76.00481415 289.02261353]
[87.00408936 278.70434570]
[100.22424316 271.44635010]
[114.83425903 267.70492554]
[114.83425903 252.70492554]
[114.83425903 237.70492554]
[114.83425903 222.70492554]
[114.83425903 207.70492554]
[114.83425903 192.70492554]
[114.83425903 177.70492554]
[114.83425903 162.70492554]
[114.83425903 147.70492554]
[114.83425903 132.70492554]
[114.83425903 117.70491791]
[95.53435516 120.12580872]
[83.56910706 107.66909027]
[68.56989288 107.82308960]
[53.57068634 107.97708893]
[39.85067749 115.85565948]
[27.04463959 108.24942780]
[12.04543114 108.40342712]
[7.29626513 122.78132629]
[-1.86606193 134.83663940]
[-14.44768906 143.26168823]
[-29.08385658 147.14257812]
[-44.18694305 146.05834961]
[-58.11867523 140.12660217]
[-69.36784363 129.99078369]
[-76.71422577 116.75034332]
[-79.36093903 101.84149933]
[-77.02088928 86.88145447]
[-69.94790649 73.49296570]
[-58.90921402 63.12831497]
[-45.10221100 56.91178131]
[-30.02456856 55.51768875]
[-15.31180573 59.09725952]
[-2.55984879 67.26219940]
[6.84806442 79.12685394]
[11.89143372 93.40421295]
[26.89064407 93.25022125]
[39.53781128 85.38265991]
[53.41669083 92.97787476]
[68.41590118 92.82387543]
[83.41510773 92.66988373]
[99.52006531 79.39029694]
[120.66902161 89.68927765]
[126.65731812 75.93644714]
[132.64561462 62.18362045]
[131.06092834 46.44197845]
[143.23590088 37.86179352]
[149.22419739 24.10896492]
[155.21249390 10.35613632]
[145.60508728 -0.17172675]
[141.87077332 -14.50680161]
[145.37306213 -29.47703743]
[155.81193542 -41.51745224]
[171.17884827 -47.51745987]
[172.71614075 -62.43847656]
[174.25343323 -77.35949707]
[175.79072571 -92.28050995]
[161.74362183 -97.81057739]
[149.71012878 -106.92635345]
[140.58317566 -118.95138550]
[135.04008484 -132.99334717]
[133.49215698 -148.01022339]
[136.05426025 -162.88766479]
[142.53630066 -176.52165222]
[152.45722961 -187.90048218]
[165.08087158 -196.17974854]
[179.47045898 -200.74507141]
[194.55819702 -201.25769043]
[209.22447205 -197.67955017]
[222.38095093 -190.27619934]
[233.05131531 -179.59696960]
[240.44378662 -166.43437195]
[244.00976562 -151.76515198]
[243.48464966 -136.67784119]
[238.90740967 -122.29203033]
[230.61769104 -109.67525482]
[219.23065186 -99.76374817]
[205.59129333 -93.29300690]
[190.71174622 -90.74321747]
[189.17445374 -75.82220459]
[187.63716125 -60.90118408]
[186.09986877 -45.98016739]
[198.68830872 -37.82350159]
[211.67868042 -45.32350159]
[224.66906738 -52.82350159]
[232.75170898 -66.42428589]
[247.64250183 -66.08722687]
[260.63287354 -73.58722687]
[273.62326050 -81.08722687]
[284.31719971 -94.24307251]
[299.91928101 -87.60897827]
[297.86352539 -70.78012848]
[281.12326050 -68.09684753]
[268.13287354 -60.59684372]
[255.14250183 -53.09684372]
[247.98901367 -40.03250885]
[232.16906738 -39.83312225]
[219.17868042 -32.33312225]
[206.18830872 -24.83312225]
[204.62528992 -1.63719690]
[189.43627930 14.16359711]
[168.96531677 16.34443283]
[162.97702026 30.09726143]
[156.98872375 43.85009003]
[159.00172424 58.60803986]
[146.39843750 68.17192078]
[140.41014099 81.92474365]
[134.42184448 95.67757416]
[145.08226013 85.12504578]
[159.34185791 80.47060394]
[174.17497253 82.70184326]
[186.43426514 91.34533691]
[193.51846313 104.56706238]
[193.92443848 119.56156158]
[187.56604004 133.14724731]
[175.79241943 142.44142151]
[161.10176086 145.47201538]
[146.61119080 141.59597778]
[135.39541626 131.63574219]
[129.83425903 117.70491791]
[129.83425903 132.70492554]
[129.83425903 147.70492554]
[129.83425903 162.70492554]
[129.83425903 177.70492554]
[129.83425903 192.70492554]
[129.83425903 207.70492554]
[129.83425903 222.70492554]
[129.83425903 237.70492554]
[129.83425903 252.70492554]
[129.83425903 267.70492554]
[144.44427490 271.44635010]
[157.66442871 278.70434570]
[168.66369629 289.02261353]
[176.75067139 301.75256348]
[181.41697693 316.09399414]
[182.36929321 331.14535522]
[179.54776001 345.96054077]
[173.12973022 359.60824585]
[163.51866150 371.23056030]
[151.31869507 380.09689331]
[137.29675293 385.64990234]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[24 52]
[25 51]
[26 50]
[28 48]
[29 47]
[54 119]
[55 118]
[56 117]
[58 115]
[59 114]
[60 113]
[65 93]
[66 92]
[67 91]
[68 90]
[94 110]
[95 109]
[96 108]
[98 106]
[99 105]
[100 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
