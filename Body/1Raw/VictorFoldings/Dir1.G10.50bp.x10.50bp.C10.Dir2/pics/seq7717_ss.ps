%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCUUACCAUGGGGGGGGGGCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGxxxxxxxxxxAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCCCCCCCCCCCUCCCUCACCAU\
) } def
/len { sequence length } bind def

/coor [
[76.22358704 411.15344238]
[61.95182037 406.34402466]
[49.04783630 398.57861328]
[38.11518097 388.22048950]
[29.66519737 375.75405884]
[24.09309959 361.76242065]
[21.65951157 346.89999390]
[22.47825241 331.86190796]
[26.51102829 317.35153198]
[33.56922150 304.04757690]
[43.32270813 292.57220459]
[55.31529617 283.46221924]
[68.98606873 277.14367676]
[83.69562531 273.91210938]
[83.69562531 258.91210938]
[83.69562531 243.91212463]
[83.69562531 228.91212463]
[83.69562531 213.91212463]
[83.69562531 198.91212463]
[83.69562531 183.91212463]
[83.69562531 168.91212463]
[83.69562531 153.91212463]
[83.69562531 138.91212463]
[71.15110779 130.68807983]
[57.39553833 136.67007446]
[43.63997269 142.65206909]
[36.44681168 156.99215698]
[20.72126389 160.16810608]
[8.52661896 149.74360657]
[9.21756744 133.71543884]
[22.26407242 124.37904358]
[37.65797043 128.89649963]
[51.41353989 122.91450500]
[65.16910553 116.93250275]
[62.48231506 102.17509460]
[47.50108337 101.42502594]
[32.51984787 100.67495728]
[17.53861237 99.92489624]
[3.19900346 107.88150787]
[-10.72025490 99.21050262]
[-9.90022373 82.83187103]
[4.81551933 75.59454346]
[18.28867912 84.94365692]
[33.26991272 85.69372559]
[48.25114822 86.44379425]
[63.23238373 87.19386292]
[76.47895050 75.93617249]
[91.28345490 73.00689697]
[103.43321228 77.17539215]
[110.36314392 63.87215424]
[117.29306793 50.56892014]
[124.22299194 37.26568222]
[125.39392090 7.72106218]
[124.49400330 -7.25191879]
[123.59408569 -22.22489929]
[122.69417572 -37.19787979]
[121.04666901 -52.10712814]
[118.65569305 -66.91534424]
[116.26471710 -81.72355652]
[113.87374115 -96.53177643]
[111.48276520 -111.33998871]
[109.09178925 -126.14820862]
[94.06598663 -127.36827087]
[79.76900482 -132.14945984]
[67.03205872 -140.21380615]
[56.59565353 -151.09245300]
[49.06655121 -164.15292358]
[44.88248444 -178.63591003]
[44.28670883 -193.69940186]
[47.31385803 -208.46760559]
[53.78794479 -222.08192444]
[63.33256531 -233.75083923]
[75.39281464 -242.79592896]
[89.26752472 -248.69134521]
[104.15003967 -251.09431458]
[119.17510223 -249.86514282]
[133.46917725 -245.07528687]
[146.20123291 -237.00321960]
[156.63104248 -226.11825562]
[164.15222168 -213.05320740]
[168.32751465 -198.56768799]
[168.91415405 -183.50384521]
[165.87805176 -168.73748779]
[159.39572144 -155.12709045]
[149.84402466 -143.46395874]
[137.77828979 -134.42617798]
[123.90000916 -128.53918457]
[126.29098511 -113.73096466]
[128.68196106 -98.92275238]
[131.07293701 -84.11453247]
[133.46391296 -69.30632019]
[135.85488892 -54.49810410]
[146.83992004 -64.71225739]
[161.70370483 -62.69534683]
[169.56967163 -49.92324829]
[164.68191528 -35.74192810]
[150.61703491 -30.52855873]
[137.66716003 -38.09779739]
[138.56706238 -23.12481499]
[139.46697998 -8.15183449]
[140.36689758 6.82114649]
[152.30516052 15.90287876]
[166.97529602 12.77441788]
[181.64543152 9.64595699]
[183.72045898 -5.36970377]
[190.80874634 -18.76865768]
[202.05435181 -28.93291283]
[216.09931946 -34.63508987]
[231.24763489 -35.18661880]
[245.67008972 -30.52090645]
[257.62506104 -21.20135307]
[265.66897583 -8.35334492]
[268.83047485 6.47166109]
[266.72778320 21.48347282]
[259.61480713 34.86933899]
[248.35047913 45.01285553]
[234.29502869 50.68913651]
[219.14572144 51.21275330]
[204.73190308 46.52046585]
[192.79409790 37.17889786]
[184.77388000 24.31608772]
[170.10375977 27.44454765]
[155.43362427 30.57300949]
[169.16091919 36.61962128]
[173.95538330 50.83274841]
[166.69557190 63.95887375]
[152.10801697 67.45217133]
[139.69000244 59.03831100]
[137.52622986 44.19561005]
[130.59629822 57.49884415]
[123.66637421 70.80208588]
[116.73645020 84.10531616]
[128.28298950 112.71016693]
[98.69562531 138.91212463]
[98.69562531 153.91212463]
[98.69562531 168.91212463]
[98.69562531 183.91212463]
[98.69562531 198.91212463]
[98.69562531 213.91212463]
[98.69562531 228.91212463]
[98.69562531 243.91212463]
[98.69562531 258.91210938]
[98.69562531 273.91210938]
[113.40518951 277.14367676]
[127.07596588 283.46221924]
[139.06855774 292.57220459]
[148.82203674 304.04757690]
[155.88023376 317.35153198]
[159.91300964 331.86190796]
[160.73175049 346.89999390]
[158.29815674 361.76242065]
[152.72605896 375.75405884]
[144.27607727 388.22048950]
[133.34341431 398.57861328]
[120.43943787 406.34402466]
[106.16767120 411.15344238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 34]
[25 33]
[26 32]
[35 46]
[36 45]
[37 44]
[38 43]
[49 132]
[50 131]
[51 130]
[52 129]
[53 101]
[54 100]
[55 99]
[56 98]
[57 92]
[58 91]
[59 90]
[60 89]
[61 88]
[62 87]
[102 123]
[103 122]
[104 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
