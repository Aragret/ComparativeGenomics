%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCAUUACUGGGGGGGGGGUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAAxxxxxxxxxxAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCCCCCCCCCCCUAACAUUACU\
) } def
/len { sequence length } bind def

/coor [
[79.39495087 392.00210571]
[65.90607452 385.27056885]
[54.42057037 375.50601196]
[45.60620117 363.27612305]
[39.97541809 349.29193115]
[37.85559082 334.36645508]
[39.36996078 319.36743164]
[44.43048477 305.16693115]
[52.74294662 292.59051514]
[63.82408142 282.36935425]
[77.02963257 275.09771729]
[91.59185791 271.19833374]
[91.28388214 256.20150757]
[90.97590637 241.20466614]
[90.66792297 226.20783997]
[90.35994720 211.21099854]
[90.05197144 196.21415710]
[89.74399567 181.21731567]
[89.43601227 166.22047424]
[89.12803650 151.22364807]
[77.63737488 141.58183289]
[62.81488800 143.88270569]
[47.99240875 146.18357849]
[39.93387985 150.61708069]
[32.84226608 148.37626648]
[17.97566795 150.37232971]
[3.10906911 152.36839294]
[-11.16730404 163.95353699]
[-27.12994194 156.72590637]
[-41.95242310 159.02677917]
[-56.77490616 161.32765198]
[-71.59738922 163.62854004]
[-84.02747345 174.32550049]
[-99.41488647 168.65455627]
[-101.93037415 152.44949341]
[-88.98622131 142.38067627]
[-73.89826202 148.80604553]
[-59.07578278 146.50517273]
[-44.25329971 144.20429993]
[-29.43081665 141.90342712]
[-22.00763512 132.30349731]
[-9.63271618 130.29533386]
[1.11301208 137.50178528]
[15.97961044 135.50573730]
[30.84620857 133.50967407]
[45.69153214 131.36109924]
[60.51401520 129.06022644]
[75.33649445 126.75934601]
[68.00295258 114.06254578]
[66.48987579 100.06818390]
[70.58860779 87.21639252]
[79.15066528 77.56285095]
[90.35746765 72.45072937]
[102.08919525 72.33145905]
[107.21949768 58.23606873]
[112.34980011 44.14067841]
[117.48009491 30.04528999]
[104.02043915 23.38941193]
[91.37468719 15.29323196]
[79.69635010 5.85503054]
[69.12718964 -4.81062174]
[59.79551697 -16.57425308]
[51.81460190 -29.29306412]
[45.28132248 -42.81266022]
[40.27499390 -56.96892548]
[36.85638428 -71.59001923]
[35.06698990 -86.49844360]
[34.92853928 -101.51323700]
[36.44270706 -116.45213318]
[39.59111786 -131.13377380]
[44.33554840 -145.37995911]
[50.61840820 -159.01773071]
[58.36342621 -171.88154602]
[67.47658539 -183.81526184]
[77.84726715 -194.67399597]
[89.34957123 -204.32594299]
[101.84387970 -212.65394592]
[115.17851257 -219.55690002]
[129.19160461 -224.95100403]
[143.71305847 -228.77078247]
[158.56657410 -230.96987915]
[173.57186890 -231.52157593]
[188.54678345 -230.41920471]
[203.30952454 -227.67611694]
[217.68090820 -223.32563782]
[231.48645020 -217.42054749]
[244.55859375 -210.03256226]
[256.73864746 -201.25134277]
[267.87872314 -191.18350220]
[277.84365845 -179.95124817]
[286.51242065 -167.69091797]
[293.77978516 -154.55134583]
[299.55758667 -140.69204712]
[303.77566528 -126.28124237]
[306.38278198 -111.49387360]
[307.34732056 -96.50945282]
[306.65756226 -81.50987244]
[304.32186890 -66.67721558]
[300.36865234 -52.19152832]
[294.84582520 -38.22866440]
[287.82046509 -24.95811272]
[279.37783813 -12.54096889]
[269.62045288 -1.12796462]
[258.66674805 9.14235592]
[246.64968872 18.14532089]
[233.71514893 25.77164268]
[220.02014160 31.92874336]
[205.73091125 36.54188538]
[191.02090454 39.55506516]
[176.06872559 40.93170547]
[161.05583191 40.65509796]
[146.16450500 38.72859573]
[131.57548523 35.17559433]
[126.44518280 49.27098083]
[121.31488037 63.36637115]
[116.18457794 77.46176147]
[132.06307983 99.35966492]
[122.38997650 128.68867493]
[136.20356750 134.53546143]
[148.41169739 125.21575165]
[163.64616394 123.26464081]
[177.80894470 129.20695496]
[187.09033203 141.44424438]
[188.99368286 156.68475342]
[183.00700378 170.82884216]
[170.74069214 180.07182312]
[155.49429321 181.92739868]
[141.36903381 175.89640808]
[132.16455078 163.60118103]
[130.35676575 148.34904480]
[116.54319000 142.50225830]
[104.12487793 150.91566467]
[104.43285370 165.91250610]
[104.74082947 180.90934753]
[105.04880524 195.90617371]
[105.35678864 210.90301514]
[105.66476440 225.89985657]
[105.97274017 240.89669800]
[106.28071594 255.89352417]
[106.58869934 270.89038086]
[121.29872894 274.18859863]
[134.79168701 280.91195679]
[146.28311157 290.66955566]
[155.10488892 302.89410400]
[160.74415588 316.87487793]
[162.87303162 331.79907227]
[161.36775208 346.79898071]
[156.31584167 361.00256348]
[148.01100159 373.58401489]
[136.93606567 383.81188965]
[123.73492432 391.09152222]
[109.17506409 394.99972534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 48]
[22 47]
[23 46]
[25 45]
[26 44]
[27 43]
[29 40]
[30 39]
[31 38]
[32 37]
[54 116]
[55 115]
[56 114]
[57 113]
[118 131]
[119 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
