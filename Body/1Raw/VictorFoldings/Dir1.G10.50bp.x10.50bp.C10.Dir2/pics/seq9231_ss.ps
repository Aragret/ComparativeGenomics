%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACAUCACUGGGGGGGGGGUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUGAxxxxxxxxxxUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCCCCCCCCCCCAAAUAUCACU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 396.20275879]
[71.01555634 390.64974976]
[58.81560135 381.78341675]
[49.20452881 370.16110229]
[42.78650284 356.51339722]
[39.96496582 341.69821167]
[40.91728210 326.64685059]
[45.58358765 312.30541992]
[53.67055511 299.57546997]
[64.66983032 289.25720215]
[77.88998413 281.99920654]
[92.50000000 278.25778198]
[92.50000000 263.25778198]
[92.50000000 248.25778198]
[92.50000000 233.25778198]
[92.50000000 218.25778198]
[92.50000000 203.25778198]
[92.50000000 188.25778198]
[92.50000000 173.25778198]
[92.50000000 158.25778198]
[92.50000000 143.25778198]
[79.74889374 140.87937927]
[67.79410553 134.69372559]
[57.78159332 124.98043823]
[43.73961639 130.25518799]
[29.69763947 135.52992249]
[15.65566349 140.80467224]
[5.66773558 153.81132507]
[-10.55270195 151.39689636]
[-16.31945229 136.04513550]
[-5.70017862 123.54862213]
[10.38092232 126.76268768]
[24.42289925 121.48794556]
[38.46487427 116.21320343]
[52.50685120 110.93846130]
[51.42978287 95.97718048]
[36.77705765 92.76818848]
[22.12433243 89.55918884]
[11.83655071 100.96344757]
[-2.77999568 105.68067169]
[-17.79352951 102.44194031]
[-29.16548538 92.11846161]
[-33.83686447 77.48719788]
[-30.55109024 62.48389053]
[-20.19201660 51.14434814]
[-5.54618549 46.51885605]
[9.44674969 49.85164261]
[20.75376511 60.24620819]
[25.33332825 74.90646362]
[39.98605347 78.11546326]
[54.63877869 81.32445526]
[58.78489304 75.01554871]
[63.77475739 69.52696228]
[69.45652771 64.96556854]
[75.66596222 61.41133499]
[82.23097992 58.91614914]
[88.97637939 57.50334549]
[87.74576569 42.55391312]
[86.51515198 27.60447693]
[74.74761963 36.90636444]
[60.09189606 33.71108246]
[53.26431274 20.35503006]
[59.25722504 6.60421085]
[73.68859100 2.51327872]
[86.00582123 11.07300091]
[86.31380463 -3.92383671]
[86.62178040 -18.92067528]
[86.92975616 -33.91751099]
[72.70492554 -39.10719299]
[60.93748474 -48.63642120]
[52.90388870 -61.47153091]
[49.47555542 -76.22026825]
[51.02437210 -91.28279877]
[57.38232422 -105.02526093]
[67.85975647 -115.95696259]
[81.32015991 -122.89212036]
[96.30343628 -125.07846069]
[111.18431854 -122.27882385]
[124.34864807 -114.79689789]
[134.36843872 -103.44425964]
[140.15684509 -89.45236206]
[141.08595276 -74.33894348]
[137.05500793 -59.74338913]
[128.50123596 -47.24892044]
[116.35250092 -38.21083832]
[101.92659760 -33.60953522]
[101.61861420 -18.61269760]
[101.31063843 -3.61585903]
[101.00266266 11.38097858]
[101.46458435 26.37386513]
[102.69519806 41.32329941]
[103.92581177 56.27273560]
[127.17131805 65.51514435]
[141.59541321 85.95337677]
[156.41789246 83.65250397]
[171.24037170 81.35162354]
[186.06285095 79.05075073]
[200.88534546 76.74987793]
[215.70782471 74.44900513]
[230.53030396 72.14812469]
[245.35278320 69.84725189]
[235.22994995 58.77801132]
[237.36462402 43.93068314]
[250.19595337 36.16169739]
[264.34158325 41.15176773]
[269.45822144 55.25213242]
[261.80502319 68.15219879]
[276.78524780 67.38253784]
[291.76550293 66.61287689]
[300.11688232 53.53487778]
[314.57260132 47.89472198]
[329.57418823 51.86116409]
[339.35314941 63.90902710]
[340.14935303 79.40566254]
[331.65658569 92.39229584]
[317.14053345 97.87530518]
[302.18286133 93.74636078]
[292.53515625 81.59312439]
[277.55493164 82.36278534]
[262.57467651 83.13243866]
[247.65365601 84.66973114]
[232.83117676 86.97061157]
[218.00869751 89.27148438]
[203.18621826 91.57235718]
[188.36373901 93.87322998]
[173.54124451 96.17411041]
[158.71876526 98.47498322]
[143.89628601 100.77585602]
[141.04167175 115.59060669]
[133.34025574 128.56419373]
[121.70154572 138.16448975]
[107.50000000 143.25778198]
[107.50000000 158.25778198]
[107.50000000 173.25778198]
[107.50000000 188.25778198]
[107.50000000 203.25778198]
[107.50000000 218.25778198]
[107.50000000 233.25778198]
[107.50000000 248.25778198]
[107.50000000 263.25778198]
[107.50000000 278.25778198]
[122.11001587 281.99920654]
[135.33016968 289.25720215]
[146.32945251 299.57546997]
[154.41641235 312.30541992]
[159.08271790 326.64685059]
[160.03503418 341.69821167]
[157.21350098 356.51339722]
[150.79547119 370.16110229]
[141.18440247 381.78341675]
[128.98443604 390.64974976]
[114.96250153 396.20275879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 35]
[25 34]
[26 33]
[27 32]
[36 51]
[37 50]
[38 49]
[57 92]
[58 91]
[59 90]
[65 89]
[66 88]
[67 87]
[68 86]
[94 128]
[95 127]
[96 126]
[97 125]
[98 124]
[99 123]
[100 122]
[101 121]
[107 120]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
