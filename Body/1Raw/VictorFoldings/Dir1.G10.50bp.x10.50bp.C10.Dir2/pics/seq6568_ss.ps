%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCAUCUGGGGGGGGGGUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCxxxxxxxxxxUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACCCCCCCCCCCUAACCAUAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 423.26275635]
[71.19830322 417.24673462]
[59.48964310 407.71731567]
[50.78712082 395.38165283]
[45.73651886 381.15512085]
[44.71262741 366.09344482]
[47.79142761 351.31430054]
[54.74444962 337.91436768]
[65.05573273 326.88803101]
[77.96011353 319.05352783]
[92.50000000 314.99221802]
[92.50000000 299.99221802]
[92.50000000 284.99221802]
[92.50000000 269.99221802]
[92.50000000 254.99220276]
[92.50000000 239.99220276]
[92.50000000 224.99220276]
[92.50000000 209.99220276]
[92.50000000 194.99220276]
[92.50000000 179.99220276]
[92.50000000 164.99220276]
[81.28466797 162.68949890]
[70.64250946 158.46687317]
[60.89944839 152.45362854]
[52.35387802 144.83395386]
[45.26751709 135.84120178]
[39.85738754 125.75077820]
[36.28917694 114.87171936]
[21.38727570 116.58440399]
[6.48537302 118.29709625]
[-8.41652966 120.00978851]
[-23.31843185 121.72247314]
[-38.22033310 123.43516541]
[-53.26551437 131.25045776]
[-64.94030762 118.95674896]
[-56.35893631 104.33496857]
[-39.93302536 108.53326416]
[-25.03112221 106.82057190]
[-10.12921906 105.10787964]
[4.77268362 103.39519501]
[19.67458534 101.68250275]
[34.57648849 99.96981049]
[35.61213303 88.40520477]
[38.67576981 77.20579529]
[43.67091370 66.72431946]
[50.44022751 57.29091644]
[58.77050400 49.20270157]
[68.39936829 42.71442795]
[79.02353668 38.03045273]
[90.30840302 35.29830170]
[101.89851379 34.60403442]
[113.42882538 35.96951294]
[124.53617859 39.35173035]
[131.71868896 26.18314743]
[138.90119934 13.01456547]
[146.08370972 -0.15401714]
[145.18350220 -18.51619339]
[160.44924927 -27.11602974]
[167.35624695 -40.43118668]
[174.26324463 -53.74634171]
[181.17024231 -67.06150055]
[168.75010681 -75.50404358]
[157.41569519 -85.35633087]
[147.32614136 -96.48004913]
[138.62306213 -108.71903992]
[131.42864990 -121.90148926]
[125.84391022 -135.84233093]
[121.94723511 -150.34585571]
[119.79331970 -165.20845032]
[119.41241455 -180.22149658]
[120.80986023 -195.17419434]
[123.96604919 -209.85667419]
[128.83665466 -224.06277466]
[135.35331726 -237.59309387]
[143.42454529 -250.25767517]
[152.93702698 -261.87872314]
[163.75723267 -272.29312134]
[175.73326111 -281.35464478]
[188.69699097 -288.93606567]
[202.46641541 -294.93099976]
[216.84825134 -299.25524902]
[231.64059448 -301.84814453]
[246.63577271 -302.67324829]
[261.62329102 -301.71899414]
[276.39276123 -298.99877930]
[290.73681641 -294.55078125]
[304.45407104 -288.43746948]
[317.35202026 -280.74462891]
[329.24954224 -271.58026123]
[339.97961426 -261.07305908]
[349.39163208 -249.37048340]
[357.35345459 -236.63684082]
[363.75332642 -223.05088806]
[368.50137329 -208.80334473]
[371.53094482 -194.09423828]
[372.79953003 -179.13003540]
[372.28930664 -164.12084961]
[370.00744629 -149.27734375]
[365.98596191 -134.80792236]
[360.28134155 -120.91571808]
[352.97363281 -107.79573822]
[344.16543579 -95.63217926]
[333.98043823 -84.59578705]
[322.56155396 -74.84150696]
[310.06915283 -66.50627136]
[296.67858887 -59.70709229]
[282.57781982 -54.53941727]
[267.96481323 -51.07579422]
[253.04473877 -49.36484909]
[238.02700806 -49.43059540]
[223.12248230 -51.27211761]
[208.54037476 -54.86355591]
[194.48539734 -60.15449905]
[187.57839966 -46.83934402]
[180.67140198 -33.52418900]
[173.76440430 -20.20903206]
[177.11869812 -8.54472828]
[171.42012024 2.62420964]
[159.25228882 7.02849197]
[152.06977844 20.19707489]
[144.88726807 33.36565781]
[137.70475769 46.53424072]
[151.88320923 60.14565659]
[161.37911987 77.35400391]
[165.33543396 96.60618591]
[163.39511108 116.16467285]
[155.73326111 134.26426697]
[143.04138184 149.27145386]
[126.46495056 159.83178711]
[107.50000000 164.99220276]
[107.50000000 179.99220276]
[107.50000000 194.99220276]
[107.50000000 209.99220276]
[107.50000000 224.99220276]
[107.50000000 239.99220276]
[107.50000000 254.99220276]
[107.50000000 269.99221802]
[107.50000000 284.99221802]
[107.50000000 299.99221802]
[107.50000000 314.99221802]
[122.03988647 319.05352783]
[134.94427490 326.88803101]
[145.25555420 337.91436768]
[152.20857239 351.31430054]
[155.28736877 366.09344482]
[154.26348877 381.15512085]
[149.21287537 395.38165283]
[140.51036072 407.71731567]
[128.80169678 417.24673462]
[114.95575714 423.26275635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[53 122]
[54 121]
[55 120]
[56 119]
[58 116]
[59 115]
[60 114]
[61 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
