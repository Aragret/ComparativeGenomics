%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACCCCCAGGGGGGGGGGUACUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACxxxxxxxxxxUAUAACAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCCCCCCCCCCCAUUGCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[94.80612183 378.58755493]
[81.58592987 371.31509399]
[70.69911957 360.86807251]
[62.88799286 347.95883179]
[58.68511200 333.46752930]
[58.37704086 318.38217163]
[61.98477936 303.73135376]
[69.26235199 290.51397705]
[79.71356201 279.63119507]
[92.62582397 271.82504272]
[107.11875916 267.62777710]
[106.80670166 252.63101196]
[106.49464417 237.63426208]
[106.18259430 222.63751221]
[105.87053680 207.64074707]
[105.55847931 192.64399719]
[105.24642181 177.64724731]
[104.93436432 162.65049744]
[104.62230682 147.65373230]
[104.31025696 132.65698242]
[81.39830780 124.76935577]
[71.31860352 104.37268829]
[78.04950714 84.19397736]
[68.78456116 72.39733124]
[59.51961136 60.60069656]
[46.93164444 68.77683258]
[33.66143799 75.79167175]
[19.81584740 81.58872223]
[5.50634575 86.12132263]
[-9.15185165 89.35295868]
[-24.04072189 91.25762939]
[-39.04039001 91.81998444]
[-54.03007889 91.03550720]
[-68.88910675 88.91051483]
[-83.49782562 85.46210480]
[-97.73861694 80.71804810]
[-111.49682617 74.71654510]
[-124.66166687 67.50591278]
[-137.12715149 59.14421463]
[-148.79289246 49.69876480]
[-159.56500244 39.24562454]
[-169.35670471 27.86895370]
[-178.08918762 15.66035080]
[-185.69213867 2.71811604]
[-192.10432434 -10.85354519]
[-197.27413940 -24.94536018]
[-201.15995789 -39.44387054]
[-203.73046875 -54.23233414]
[-204.96499634 -69.19168091]
[-204.85360718 -84.20147705]
[-203.39717102 -99.14085388]
[-200.60743713 -113.88953400]
[-196.50685120 -128.32876587]
[-191.12843323 -142.34230042]
[-184.51550293 -155.81729126]
[-176.72129822 -168.64524841]
[-167.80856323 -180.72288513]
[-157.84907532 -191.95297241]
[-146.92300415 -202.24507141]
[-135.11834717 -211.51632690]
[-122.53012085 -219.69207764]
[-109.25970459 -226.70651245]
[-95.41393280 -232.50314331]
[-81.10429382 -237.03529358]
[-66.44599915 -240.26649475]
[-51.55707169 -242.17070007]
[-36.55738831 -242.73260498]
[-21.56772041 -241.94767761]
[-6.70875931 -239.82221985]
[7.89985561 -236.37336731]
[22.14050484 -231.62887573]
[35.89852524 -225.62695312]
[49.06314850 -218.41592407]
[61.52836990 -210.05383301]
[73.19383240 -200.60803223]
[83.96561432 -190.15457153]
[93.75697327 -178.77758789]
[102.48908997 -166.56872559]
[110.09163666 -153.62625122]
[116.50341797 -140.05439758]
[121.67280579 -125.96242523]
[125.55817413 -111.46379852]
[128.12823486 -96.67525482]
[129.36230469 -81.71586609]
[129.25044250 -66.70608521]
[127.79356384 -51.76674652]
[125.00337219 -37.01815033]
[120.90235138 -22.57904243]
[115.52351379 -8.56567860]
[108.91017151 4.90911055]
[101.11557007 17.73683167]
[92.20246887 29.81420135]
[82.24263000 41.04397964]
[71.31625366 51.33574677]
[80.58119965 63.13238525]
[89.84615326 74.92902374]
[97.95692444 72.18423462]
[106.77881622 72.07883453]
[115.44956207 74.78245544]
[123.07321167 80.18267059]
[128.81225586 87.88156891]
[131.97821045 97.22234344]
[132.11100769 107.34437561]
[147.01290894 109.05706787]
[161.91481018 110.76976013]
[176.81672668 112.48244476]
[191.71862793 114.19513702]
[206.62052917 115.90782928]
[221.53942871 117.46540833]
[236.47373962 118.86771393]
[251.40805054 120.27001190]
[266.34234619 121.67231750]
[278.35208130 111.39894104]
[294.10189819 112.70999146]
[304.24771118 124.82764435]
[302.77023315 140.56271362]
[290.54598999 150.57986450]
[274.82739258 148.93609619]
[264.94006348 136.60662842]
[250.00575256 135.20431519]
[235.07144165 133.80201721]
[220.13713074 132.39971924]
[213.13830566 134.92204285]
[204.90783691 130.80972290]
[190.00593567 129.09704590]
[175.10403442 127.38434601]
[160.20213318 125.67166138]
[145.30023193 123.95896912]
[130.39831543 122.24627686]
[119.30700684 132.34492493]
[119.61906433 147.34169006]
[119.93112183 162.33843994]
[120.24317932 177.33518982]
[120.55522919 192.33193970]
[120.86728668 207.32870483]
[121.17934418 222.32545471]
[121.49140167 237.32220459]
[121.80345917 252.31895447]
[122.11551666 267.31570435]
[136.77050781 270.90649414]
[149.99630737 278.16873169]
[160.89118958 288.60733032]
[168.71228027 301.51055908]
[172.92634583 315.99859619]
[173.24607849 331.08370972]
[169.64964294 345.73730469]
[162.38227844 358.96032715]
[151.93948364 369.85116577]
[139.03324890 377.66726685]
[124.54355621 381.87573242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 96]
[24 95]
[25 94]
[103 129]
[104 128]
[105 127]
[106 126]
[107 125]
[108 124]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
