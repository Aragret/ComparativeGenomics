%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGCUCAUAAGGGGGGGGGGGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUxxxxxxxxxxGUAGUAACAGCCAUUCUCAUCCAAACCCCCUGAAGCUUCACCGGCGCAGUCCCCCCCCCCCAUUCUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[94.89426422 409.60150146]
[80.01092529 407.23867798]
[66.07389832 401.50665283]
[53.83479691 392.71456909]
[43.95365524 381.33651733]
[36.96334839 367.98614502]
[33.24085999 353.38342285]
[32.98693848 338.31582642]
[36.21527481 323.59594727]
[42.75177002 310.01763916]
[52.24392319 298.31311035]
[64.17982483 289.11361694]
[77.91580200 282.91522217]
[92.71107483 280.05227661]
[93.32689667 265.06491089]
[93.94272614 250.07756042]
[94.55854797 235.09020996]
[95.17437744 220.10285950]
[95.79019928 205.11550903]
[96.40602875 190.12814331]
[97.02185059 175.14079285]
[97.63767242 160.15344238]
[98.25350189 145.16609192]
[98.86932373 130.17874146]
[79.19523621 118.64034271]
[74.39903259 98.14877319]
[84.99868011 82.03884888]
[79.58005524 68.05176544]
[74.16143036 54.06467819]
[68.74280548 40.07759476]
[53.57368088 39.66106796]
[39.75692749 33.48527908]
[29.38528824 22.51975441]
[24.01661301 8.45686245]
[24.43991089 -6.54932499]
[30.55954933 -20.21297836]
[41.41456985 -30.46469879]
[35.99594498 -44.45178223]
[29.94110298 -51.37526703]
[30.61289978 -58.78208160]
[25.48259735 -72.87747192]
[14.11268234 -79.05231476]
[10.14930630 -90.94613647]
[15.20860577 -101.97635651]
[10.36878967 -116.17411041]
[4.64459658 -111.66561127]
[-3.07607412 -109.06567383]
[-12.17567444 -109.00823212]
[-21.86227608 -111.93662262]
[-31.22575569 -118.05976105]
[-41.55665970 -128.93507385]
[-51.88756180 -139.81039429]
[-66.59455872 -135.57214355]
[-81.58423615 -138.66540527]
[-93.41206360 -148.37936401]
[-99.36010742 -162.48181152]
[-98.06153870 -177.73214722]
[-89.81476593 -190.62591553]
[-76.51483154 -198.20024109]
[-61.21796799 -198.71458435]
[-47.43928146 -192.05078125]
[-38.34500885 -179.74009705]
[-36.02495575 -164.61145020]
[-41.01224899 -150.14129639]
[-30.68134499 -139.26597595]
[-20.35044289 -128.39065552]
[-13.22709560 -130.73756409]
[8.14294243 -137.77825928]
[9.98626614 -152.66456604]
[11.82959080 -167.55087280]
[13.67291546 -182.43717957]
[0.16251446 -189.31068420]
[-10.17996788 -200.39259338]
[-16.10562706 -214.34474182]
[-16.89891243 -229.48233032]
[-12.46402740 -243.97741699]
[-3.33650875 -256.07965088]
[9.38145256 -264.32763672]
[24.15410042 -267.72540283]
[39.19756317 -265.86260986]
[52.69527435 -258.96423340]
[63.01731873 -247.86326599]
[68.91725922 -233.90022278]
[69.68264008 -218.76119995]
[65.22105408 -204.27430725]
[56.07124710 -192.18891907]
[43.33810806 -183.96438599]
[28.55922318 -180.59385681]
[26.71589851 -165.70755005]
[24.87257385 -150.82124329]
[23.02924919 -135.93493652]
[24.56654167 -121.01392365]
[29.40635872 -106.81616974]
[43.21580505 -96.02989197]
[39.57798767 -78.00777435]
[44.70829010 -63.91238403]
[49.98302841 -49.87040710]
[55.40165329 -35.88332367]
[70.33015442 -35.62019348]
[84.05776215 -29.64540482]
[94.48018646 -18.84087181]
[99.98679352 -4.83141613]
[99.70948792 10.25953388]
[93.65938568 24.13178253]
[82.72988892 34.65896988]
[88.14851379 48.64605331]
[93.56713867 62.63313675]
[98.98576355 76.62022400]
[113.95071411 78.45436859]
[125.95963287 89.68505096]
[129.33610535 107.17129517]
[143.91986084 110.68045807]
[158.50360107 114.18962860]
[169.93130493 108.12240601]
[182.03526306 111.38825989]
[188.43550110 121.69841003]
[202.94412231 125.50626373]
[217.45274353 129.31413269]
[231.97465515 122.49547577]
[246.29556274 129.72671509]
[249.42973328 145.46064758]
[238.97285461 157.62754822]
[222.94657898 156.89401245]
[213.64488220 143.82275391]
[199.13626099 140.01489258]
[184.62763977 136.20703125]
[168.00831604 141.76066589]
[154.99443054 128.77337646]
[140.41069031 125.26420593]
[125.82693481 121.75504303]
[113.85668182 130.79455566]
[113.24085236 145.78192139]
[112.62503052 160.76927185]
[112.00920105 175.75662231]
[111.39337921 190.74397278]
[110.77754974 205.73132324]
[110.16172791 220.71868896]
[109.54589844 235.70603943]
[108.93007660 250.69338989]
[108.31425476 265.68075562]
[107.69842529 280.66809082]
[122.20894623 284.73522949]
[135.39009094 292.03961182]
[146.53102112 302.18734741]
[155.03092957 314.63113403]
[160.43141174 328.69995117]
[162.44123840 343.63507080]
[160.95201111 358.63101196]
[156.04405212 372.87915039]
[147.98204041 385.61102295]
[137.20074463 396.14004517]
[124.28158569 403.89840698]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[27 108]
[28 107]
[29 106]
[30 105]
[37 98]
[38 97]
[40 96]
[41 95]
[44 93]
[45 92]
[50 66]
[51 65]
[52 64]
[68 91]
[69 90]
[70 89]
[71 88]
[111 130]
[112 129]
[113 128]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
