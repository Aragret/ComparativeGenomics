%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUUCAAAGGGGGGGGGGAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCxxxxxxxxxxAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCCCCCCCCCCCUUCUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[91.47225952 496.05645752]
[78.25205994 488.78396606]
[67.36525726 478.33697510]
[59.55412674 465.42773438]
[55.35124588 450.93640137]
[55.04317474 435.85107422]
[58.65091705 421.20025635]
[65.92848969 407.98284912]
[76.37969971 397.10009766]
[89.29196167 389.29394531]
[103.78489685 385.09664917]
[103.47283936 370.09991455]
[103.16078186 355.10314941]
[102.84872437 340.10638428]
[102.53666687 325.10964966]
[102.22461700 310.11288452]
[101.91255951 295.11614990]
[101.60050201 280.11938477]
[101.28844452 265.12261963]
[100.97638702 250.12586975]
[87.03417969 238.33552551]
[86.05533600 219.78453064]
[99.11837006 206.13330078]
[98.18274689 191.16250610]
[97.24711609 176.19171143]
[96.31148529 161.22091675]
[95.37586212 146.25013733]
[77.23872375 140.52630615]
[62.91243362 128.01730347]
[54.79557800 110.81747437]
[39.83533096 111.90878296]
[24.87508202 113.00009155]
[9.91483307 114.09140015]
[-1.61971605 125.24190521]
[-17.51000977 123.03325653]
[-25.56637383 109.15973663]
[-19.60865593 94.26392365]
[-4.20710707 89.77261353]
[8.82352257 99.13115692]
[23.78377151 98.03984070]
[38.74401855 96.94853210]
[53.70426941 95.85722351]
[55.08228302 88.04776001]
[57.76776123 80.58621216]
[45.32831955 72.20406342]
[32.88887787 63.82192230]
[20.44943810 55.43978119]
[8.00999832 47.05763626]
[-4.42944193 38.67549515]
[-16.86888123 30.29335022]
[-33.38296509 26.45649719]
[-34.26760864 9.52564526]
[-18.24331665 3.98864627]
[-8.48673916 17.85391045]
[3.95270133 26.23605347]
[16.39214134 34.61819839]
[28.83158112 43.00033951]
[41.27102280 51.38248444]
[53.71046448 59.76462555]
[66.14990234 68.14676666]
[73.40383148 60.99815750]
[82.16731262 55.50739288]
[92.06013489 51.99263000]
[102.63532257 50.68457031]
[113.39926910 51.71254730]
[123.83478546 55.09523010]
[129.61105347 41.25201416]
[135.38732910 27.40879440]
[141.16360474 13.56557751]
[128.62268066 5.25162601]
[117.88200378 -5.28565836]
[109.32984161 -17.66535950]
[103.27534485 -31.43995857]
[99.93738556 -46.11151505]
[99.43663025 -61.14965820]
[101.79116821 -76.01076508]
[106.91590118 -90.15763092]
[114.62556458 -103.07883453]
[124.64145660 -114.30729675]
[136.60151672 -123.43711853]
[150.07337952 -130.13824463]
[164.57006836 -134.16845703]
[179.56753540 -135.38204956]
[194.52360535 -133.73515320]
[208.89764404 -129.28730774]
[222.17004395 -122.19928741]
[233.86100769 -112.72734070]
[243.54792786 -101.21385956]
[250.88059998 -88.07505035]
[255.59397888 -73.78587341]
[257.51766968 -58.86287689]
[256.58212280 -43.84550858]
[252.82118225 -29.27664757]
[246.37078857 -15.68294144]
[237.46411133 -3.55579782]
[226.42312622 6.66639566]
[213.64697266 14.61411285]
[199.59747314 20.00004959]
[184.78253174 22.62950516]
[169.73770142 22.40743065]
[155.00682068 19.34185028]
[149.23054504 33.18506622]
[143.45426941 47.02828598]
[137.67800903 60.87150192]
[146.94294739 72.66814423]
[161.76071167 70.33703613]
[176.57847595 68.00593567]
[188.98670959 57.28363419]
[204.38565063 62.92317963]
[206.93418884 79.12308502]
[194.01060486 89.21828461]
[178.90957642 82.82369232]
[164.09181213 85.15480042]
[149.27406311 87.48590088]
[150.20489502 98.95307159]
[148.53446960 110.19317627]
[144.41278076 120.63108826]
[138.11361694 129.74739075]
[130.01715088 137.10414124]
[120.58757782 142.36585999]
[110.34664917 145.31449890]
[111.28227997 160.28529358]
[112.21790314 175.25608826]
[113.15353394 190.22688293]
[114.08916473 205.19766235]
[124.42674255 211.22322083]
[130.48382568 221.40264893]
[130.84083557 233.12213135]
[125.52474213 243.43750000]
[115.97314453 249.81381226]
[116.28520203 264.81057739]
[116.59725189 279.80731201]
[116.90930939 294.80407715]
[117.22136688 309.80084229]
[117.53342438 324.79757690]
[117.84548187 339.79434204]
[118.15753937 354.79110718]
[118.46958923 369.78784180]
[118.78164673 384.78460693]
[133.43664551 388.37536621]
[146.66244507 395.63763428]
[157.55731201 406.07623291]
[165.37841797 418.97943115]
[169.59248352 433.46749878]
[169.91220093 448.55261230]
[166.31578064 463.20620728]
[159.04841614 476.42919922]
[148.60562134 487.32003784]
[135.69938660 495.13616943]
[121.20969391 499.34463501]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 125]
[24 124]
[25 123]
[26 122]
[27 121]
[30 42]
[31 41]
[32 40]
[33 39]
[44 60]
[45 59]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[66 104]
[67 103]
[68 102]
[69 101]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
