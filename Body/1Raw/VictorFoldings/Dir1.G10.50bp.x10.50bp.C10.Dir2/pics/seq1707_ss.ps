%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUCCUCAGGGGGGGGGGAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGxxxxxxxxxxCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUACCCCCCCCCCACGCUCCUCA\
) } def
/len { sequence length } bind def

/coor [
[83.21759033 442.87765503]
[68.72789764 438.66918945]
[55.82167053 430.85305786]
[45.37887192 419.96221924]
[38.11150742 406.73922729]
[34.51507950 392.08563232]
[34.83480072 377.00051880]
[39.04887390 362.51245117]
[46.86996841 349.60925293]
[57.76483917 339.17065430]
[70.99064636 331.90838623]
[85.64563751 328.31762695]
[85.95769501 313.32086182]
[86.26975250 298.32412720]
[86.58181000 283.32736206]
[86.89385986 268.33059692]
[87.20591736 253.33386230]
[87.51797485 238.33709717]
[87.83003235 223.34034729]
[88.14208984 208.34359741]
[85.11725616 201.54682922]
[88.61986542 193.03897095]
[89.24384308 178.05195618]
[89.86782074 163.06494141]
[90.49179840 148.07792664]
[77.17233276 143.36808777]
[65.74978638 135.05447388]
[57.17333603 123.82791901]
[52.15566635 110.62133789]
[51.11373138 96.53215027]
[54.13411713 82.73113251]
[60.96583176 70.36511230]
[71.04117584 60.46166611]
[64.13417816 47.14651108]
[57.22718048 33.83135605]
[44.00444031 25.14402771]
[45.01218033 10.28355122]
[38.10518265 -3.03160405]
[31.19818306 -16.34675980]
[24.29118538 -29.66191483]
[10.18288231 -24.50593376]
[-4.46893501 -21.19646645]
[-19.42367172 -19.78785706]
[-34.43575668 -20.30323792]
[-49.25867844 -22.73414230]
[-63.64903259 -27.04065514]
[-77.37051392 -33.15206146]
[-90.19780731 -40.96800232]
[-101.92027283 -50.36013412]
[-112.34541321 -61.17423248]
[-121.30204773 -73.23271179]
[-128.64309692 -86.33757782]
[-134.24801636 -100.27361298]
[-138.02474976 -114.81199646]
[-139.91131592 -129.71398926]
[-139.87669373 -144.73487854]
[-137.92149353 -159.62800598]
[-134.07778931 -174.14883423]
[-128.40870667 -188.05889893]
[-121.00733948 -201.12979126]
[-111.99523163 -213.14686584]
[-101.52036285 -223.91279602]
[-89.75473785 -233.25080872]
[-76.89156342 -241.00755310]
[-63.14206314 -247.05566406]
[-48.73201752 -251.29580688]
[-33.89804840 -253.65838623]
[-18.88374710 -254.10456848]
[-3.93566084 -252.62705994]
[10.70074940 -249.25010681]
[24.78514099 -244.02915955]
[38.08623505 -237.04995728]
[50.38561249 -228.42710876]
[61.48131180 -218.30220032]
[71.19113159 -206.84149170]
[79.35562134 -194.23318481]
[85.84072113 -180.68431091]
[90.53993225 -166.41737366]
[93.37609100 -151.66662598]
[94.30262756 -136.67430115]
[93.30432892 -121.68657684]
[90.39758301 -106.94957733]
[85.63011932 -92.70529175]
[79.08023834 -79.18762207]
[70.85547638 -66.61854553]
[61.09090424 -55.20446014]
[49.94686127 -45.13278580]
[37.60633850 -36.56891251]
[44.51334000 -23.25375748]
[51.42033768 -9.93860245]
[58.32733536 3.37655306]
[71.05604553 11.11149216]
[70.54233551 26.92435646]
[77.44933319 40.23951340]
[84.35633087 53.55466843]
[104.88093567 51.23454285]
[124.53854370 57.57650375]
[139.83743286 71.45404053]
[153.22372437 64.68592834]
[166.61000061 57.91781235]
[178.01699829 45.37520599]
[193.22720337 52.86426544]
[190.24142456 69.55323029]
[173.37812805 71.30409241]
[159.99183655 78.07221222]
[146.60554504 84.84032440]
[147.87248230 89.50627899]
[148.67350769 94.27436066]
[149.00080872 99.09816742]
[163.86386108 101.12050629]
[178.72691345 103.14283752]
[188.06596375 90.94949341]
[202.25663757 85.07410431]
[217.48171997 87.09710693]
[229.64573669 96.47434235]
[235.47660828 110.68336487]
[233.40589905 125.90202332]
[223.99058533 138.03657532]
[209.76335144 143.82290649]
[194.55125427 141.70448303]
[182.44627380 132.25119019]
[176.70457458 118.00588226]
[161.84152222 115.98355103]
[146.97848511 113.96121216]
[140.95811462 126.91329956]
[131.45903015 137.57954407]
[119.28802490 145.05403137]
[105.47881317 148.70190430]
[104.85483551 163.68891907]
[104.23086548 178.67593384]
[103.60688782 193.66294861]
[103.13883972 208.65565491]
[102.82678223 223.65240479]
[102.51473236 238.64915466]
[102.20267487 253.64591980]
[101.89061737 268.64266968]
[101.57855988 283.63943481]
[101.26650238 298.63616943]
[100.95444489 313.63293457]
[100.64239502 328.62966919]
[115.13533020 332.82696533]
[128.04759216 340.63311768]
[138.49879456 351.51586914]
[145.77636719 364.73327637]
[149.38410950 379.38409424]
[149.07603455 394.46942139]
[144.87315369 408.96075439]
[137.06202698 421.86999512]
[126.17522430 432.31698608]
[112.95502472 439.58947754]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 131]
[23 130]
[24 129]
[25 128]
[33 95]
[34 94]
[35 93]
[37 91]
[38 90]
[39 89]
[40 88]
[98 106]
[99 105]
[100 104]
[109 124]
[110 123]
[111 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
