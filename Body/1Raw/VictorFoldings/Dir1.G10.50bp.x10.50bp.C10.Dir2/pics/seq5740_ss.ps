%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCUAACAACGGGGGGGGGGGUAAAAAUAAAAUGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCxxxxxxxxxxACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCAGAUUGUGACCCCCCCCCCAUCUGACAAC\
) } def
/len { sequence length } bind def

/coor [
[47.46523666 525.67645264]
[33.61929703 519.66040039]
[21.91063690 510.13101196]
[13.20811176 497.79534912]
[8.15750980 483.56881714]
[7.13361883 468.50714111]
[10.21241760 453.72796631]
[17.16543961 440.32803345]
[27.47672462 429.30172729]
[40.38110352 421.46719360]
[54.92098999 417.40588379]
[54.92098999 402.40588379]
[54.92098999 387.40588379]
[54.92098999 372.40588379]
[54.92098999 357.40588379]
[54.92098999 342.40588379]
[54.92098999 327.40588379]
[54.92098999 312.40588379]
[54.92098999 297.40588379]
[54.92098999 282.40588379]
[47.18369293 269.67861938]
[54.92098999 255.87844849]
[46.18376541 268.07110596]
[33.07973099 275.37069702]
[18.11384964 276.38186646]
[4.14700270 270.91131592]
[-6.15091181 260.00476074]
[-10.81134605 245.74710083]
[-8.94341087 230.86386108]
[-0.90418166 218.20010376]
[11.76956463 210.17663574]
[26.65511513 208.32720947]
[40.90695190 213.00537109]
[51.80069351 223.31683350]
[57.25366974 237.28900146]
[60.95983124 222.75407410]
[64.66599274 208.21913147]
[68.37215424 193.68420410]
[72.07831573 179.14926147]
[75.78447723 164.61433411]
[79.49063873 150.07939148]
[83.19680023 135.54444885]
[86.90296173 121.00952148]
[75.03091431 109.67575073]
[72.27504730 92.20815277]
[81.27089691 75.52381134]
[99.68833923 67.16082764]
[98.13075256 52.24192047]
[96.57317352 37.32300568]
[95.01559448 22.40409470]
[93.45801544 7.48518276]
[90.97289276 -7.30752468]
[87.56991577 -21.91641808]
[84.16693878 -36.52531052]
[80.76396179 -51.13420105]
[77.36098480 -65.74309540]
[62.30183029 -65.55330658]
[47.55404663 -68.60567474]
[33.80741119 -74.75743103]
[21.70488167 -83.72084808]
[11.81251049 -95.07669067]
[4.59298611 -108.29381561]
[0.38397682 -122.75405121]
[-0.61765409 -137.78105164]
[1.63494146 -152.67198181]
[7.03640556 -166.73037720]
[15.33410168 -179.29867554]
[26.13993263 -189.78906250]
[38.94849014 -197.71086121]
[53.16069031 -202.69357300]
[68.11180878 -204.50413513]
[83.10255432 -203.05786133]
[97.43177795 -198.42240906]
[110.42927551 -190.81459045]
[121.48713684 -180.59020996]
[130.08816528 -168.22750854]
[135.83006287 -154.30470276]
[138.44429016 -139.47297668]
[137.80856323 -124.42605591]
[133.95260620 -109.86769867]
[127.05679321 -96.47883606]
[117.44364166 -84.88567352]
[105.56276703 -75.63046265]
[91.96987152 -69.14607239]
[95.37285614 -54.53718185]
[98.77583313 -39.92828751]
[102.17881012 -25.31939507]
[105.58178711 -10.71050262]
[114.74790955 -22.58409309]
[129.59944153 -24.68932343]
[141.70436096 -15.83094406]
[144.19006348 -1.03833294]
[135.64526367 11.28994465]
[120.92131042 14.15445900]
[108.37692261 5.92760181]
[109.93450928 20.84651375]
[111.49208832 35.76542664]
[113.04966736 50.68433762]
[114.60724640 65.60324860]
[115.70436859 50.64342499]
[126.54983521 40.28119278]
[141.54409790 39.86659241]
[152.94560242 49.61368179]
[154.86772156 64.49002075]
[146.31803894 76.81492615]
[131.70878601 80.22473145]
[146.68849182 79.44488525]
[161.66821289 78.66503906]
[176.64791870 77.88519287]
[188.41194153 66.97706604]
[204.25285339 69.51581573]
[212.01885986 83.55393982]
[205.75253296 98.32257843]
[190.26087952 102.49250793]
[177.42776489 92.86490631]
[162.44805908 93.64475250]
[147.46833801 94.42459869]
[132.48863220 95.20444489]
[122.33770752 118.17726135]
[101.43789673 124.71568298]
[97.73173523 139.25061035]
[94.02557373 153.78555298]
[90.31941223 168.32049561]
[86.61325073 182.85542297]
[82.90708923 197.39036560]
[79.20092773 211.92529297]
[75.49476624 226.46023560]
[71.78860474 240.99516296]
[69.92098999 255.87844849]
[77.65829468 269.67861938]
[69.92098999 282.40588379]
[69.92098999 297.40588379]
[69.92098999 312.40588379]
[69.92098999 327.40588379]
[69.92098999 342.40588379]
[69.92098999 357.40588379]
[69.92098999 372.40588379]
[69.92098999 387.40588379]
[69.92098999 402.40588379]
[69.92098999 417.40588379]
[84.46087646 421.46719360]
[97.36525726 429.30172729]
[107.67654419 440.32803345]
[114.62956238 453.72796631]
[117.70836639 468.50714111]
[116.68447113 483.56881714]
[111.63387299 497.79534912]
[102.93135071 510.13101196]
[91.22268677 519.66040039]
[77.37674713 525.67645264]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[35 128]
[36 127]
[37 126]
[38 125]
[39 124]
[40 123]
[41 122]
[42 121]
[43 120]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[52 88]
[53 87]
[54 86]
[55 85]
[56 84]
[106 118]
[107 117]
[108 116]
[109 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
