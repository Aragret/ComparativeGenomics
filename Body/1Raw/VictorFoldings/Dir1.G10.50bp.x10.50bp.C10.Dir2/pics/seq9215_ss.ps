%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACAUCCAAACAUCAGGGGGGGGGGCUUUGGCUUCGAAGCCGCCGCCUGAUACUGGCAUUUUGUAGAUGUGGUUUxxxxxxxxxxCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAAUAAUCCCCAUCCUCCACCCCCCCCCCUAUAUCCAAACAACA\
) } def
/len { sequence length } bind def

/coor [
[72.56412506 399.71194458]
[58.76831436 393.71902466]
[46.26440811 385.35885620]
[35.45435333 374.90023804]
[26.68565178 362.67938232]
[20.24017906 349.08911133]
[16.32512856 334.56628418]
[15.06635571 319.57778931]
[16.50432396 304.60540771]
[20.59280968 290.13046265]
[27.20038223 276.61825562]
[36.11463928 264.50314331]
[47.04901886 254.17459106]
[59.65203094 245.96461487]
[73.51853943 240.13711548]
[88.20279694 236.87942505]
[87.61755371 221.89085388]
[87.03231049 206.90226746]
[86.44706726 191.91369629]
[85.86183167 176.92510986]
[85.27658844 161.93653870]
[84.69134521 146.94796753]
[84.10610199 131.95938110]
[72.37863159 122.60703278]
[57.63562012 125.37174225]
[42.89260864 128.13644409]
[33.95823669 140.89633179]
[18.96734047 143.49011230]
[6.85779619 134.89392090]
[-7.88521576 137.65863037]
[-22.62822723 140.42332458]
[-37.37123871 143.18803406]
[-52.11425400 145.95274353]
[-64.20266724 157.03436279]
[-79.76039886 151.84889221]
[-82.78298187 135.73069763]
[-70.16104889 125.26080322]
[-54.87895584 131.20973206]
[-40.13594437 128.44502258]
[-25.39293289 125.68032074]
[-10.64992046 122.91561127]
[4.09309196 120.15090942]
[12.26537514 107.75133514]
[27.17750168 104.73751831]
[40.12790298 113.39343262]
[54.87091446 110.62872314]
[69.61392975 107.86402130]
[78.08780670 82.18483734]
[101.19691467 74.93481445]
[106.35776520 60.85058212]
[105.43808746 55.60948181]
[106.54234314 51.01475525]
[109.07389832 47.73741913]
[112.25465393 46.10824966]
[118.23066711 32.35007858]
[124.20668793 18.59190941]
[121.67297363 0.37649527]
[136.12246704 -9.54438019]
[141.82890320 -23.41653252]
[147.53533936 -37.28868484]
[153.10615540 -51.21585083]
[158.54083252 -65.19670868]
[163.97550964 -79.17755890]
[169.27351379 -93.21077728]
[174.43437195 -107.29500580]
[179.59521484 -121.37924194]
[184.61842346 -135.51315308]
[189.50347900 -149.69540405]
[194.38853455 -163.87765503]
[191.56735229 -179.44529724]
[203.02774048 -188.95890808]
[207.91281128 -203.14115906]
[194.79302979 -210.49719238]
[183.19769287 -220.07778931]
[173.49954224 -231.57499695]
[166.01034546 -244.61921692]
[160.97082520 -258.79113770]
[158.54299927 -273.63516235]
[158.80491638 -288.67416382]
[161.74813843 -303.42465210]
[167.27806091 -317.41250610]
[175.21691895 -330.18801880]
[185.30952454 -341.34057617]
[197.23141479 -350.51162720]
[210.59938049 -357.40634155]
[224.98367310 -361.80316162]
[239.92190552 -363.56066895]
[254.93388367 -362.62237549]
[269.53701782 -359.01849365]
[283.26190186 -352.86483765]
[295.66732788 -344.35922241]
[306.35449219 -333.77505493]
[314.97985840 -321.45260620]
[321.26617432 -307.78799438]
[325.01132202 -293.22042847]
[326.09497070 -278.21826172]
[324.48223877 -263.26370239]
[320.22497559 -248.83747864]
[313.46002197 -235.40336609]
[304.40487671 -223.39320374]
[293.35061646 -213.19305420]
[280.65258789 -205.13082886]
[266.71896362 -199.46568298]
[251.99765015 -196.37971497]
[236.96191406 -195.97216797]
[222.09506226 -198.25610352]
[217.20999146 -184.07385254]
[220.38058472 -169.52061462]
[208.57078552 -158.99259949]
[203.68572998 -144.81034851]
[198.80065918 -130.62809753]
[199.59967041 -123.24240112]
[193.67945862 -116.21839142]
[188.51860046 -102.13415527]
[183.35775757 -88.04992676]
[184.01249695 -80.65004730]
[177.95635986 -73.74288940]
[172.52168274 -59.76203156]
[167.08700562 -45.78117752]
[167.59724426 -38.36993408]
[161.40748596 -31.58225250]
[155.70104980 -17.71010017]
[149.99462891 -3.83794737]
[154.36317444 7.47614765]
[149.68249512 19.09871101]
[137.96485901 24.56792641]
[131.98883057 38.32609558]
[126.01281738 52.08426666]
[120.44200134 66.01142883]
[115.28115082 80.09566498]
[122.98278809 87.54087067]
[127.10998535 97.89526367]
[126.60684204 109.46573639]
[121.20816803 120.20102692]
[111.54644012 128.05514526]
[99.09468079 131.37414551]
[99.67992401 146.36271667]
[100.26516724 161.35130310]
[100.85041046 176.33987427]
[101.43564606 191.32846069]
[102.02088928 206.31703186]
[102.60613251 221.30561829]
[103.19137573 236.29418945]
[118.08493042 238.39697266]
[132.36360168 243.12551880]
[145.56840515 250.32781982]
[157.27484131 259.77233887]
[167.10661316 271.15551758]
[174.74765015 284.11135864]
[179.95233154 298.22344971]
[182.55335999 313.03811646]
[182.46711731 328.07913208]
[179.69636536 342.86300659]
[174.33020020 356.91448975]
[166.54107666 369.78186035]
[156.57942200 381.05151367]
[144.76545715 390.36117554]
[131.47892761 397.41159058]
[117.14696503 401.97607422]
[102.23027039 403.90792847]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 47]
[25 46]
[26 45]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[49 130]
[50 129]
[54 128]
[55 127]
[56 126]
[58 123]
[59 122]
[60 121]
[61 119]
[62 118]
[63 117]
[64 115]
[65 114]
[66 113]
[67 111]
[68 110]
[69 109]
[71 107]
[72 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
