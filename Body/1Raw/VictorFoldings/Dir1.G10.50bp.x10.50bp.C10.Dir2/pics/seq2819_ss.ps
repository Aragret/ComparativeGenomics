%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAUGGAGGGGGGGGGGGCUUUAAUUUAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAAxxxxxxxxxxGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUCCCCCCCCCCACCCUAGGGA\
) } def
/len { sequence length } bind def

/coor [
[108.07485962 406.29147339]
[94.22891998 400.27545166]
[82.52026367 390.74603271]
[73.81773376 378.41036987]
[68.76713562 364.18383789]
[67.74324036 349.12216187]
[70.82204437 334.34298706]
[77.77506256 320.94308472]
[88.08634949 309.91674805]
[100.99073029 302.08224487]
[115.53061676 298.02090454]
[115.53061676 283.02090454]
[115.53061676 268.02090454]
[115.53061676 253.02091980]
[115.53061676 238.02091980]
[115.53061676 223.02091980]
[115.53061676 208.02091980]
[115.53061676 193.02091980]
[115.53061676 178.02091980]
[115.53061676 163.02091980]
[103.26824951 154.38180542]
[89.14344788 159.43055725]
[78.75271606 171.36132812]
[64.16378021 168.35926819]
[50.03897858 173.40802002]
[35.91417694 178.45677185]
[21.78937340 183.50553894]
[11.59403706 196.35026550]
[-4.58557224 193.67588806]
[-10.10525894 178.23358154]
[0.71315759 165.90905762]
[16.74061775 169.38073730]
[30.86542130 164.33197021]
[44.99022293 159.28321838]
[59.11502838 154.23446655]
[68.49546051 142.66481018]
[84.09468842 145.30575562]
[98.21949005 140.25700378]
[79.47544098 132.62438965]
[67.57097626 117.37594604]
[64.97328949 99.10776520]
[71.49931335 82.80632019]
[84.58948517 72.48967743]
[80.58174133 58.03499222]
[76.57400513 43.58030319]
[68.58408356 30.88537407]
[57.28508377 21.01965141]
[45.98607635 11.15392780]
[34.68707275 1.28820503]
[20.43880081 6.87796021]
[5.22616673 5.19441414]
[-7.45508003 -3.37556672]
[-14.69088078 -16.86266327]
[-14.81850147 -32.16764069]
[-7.80861664 -45.77352524]
[4.72795486 -54.55378342]
[19.91040039 -56.49077988]
[34.24990463 -51.13940430]
[44.45135117 -39.72936630]
[48.17053223 -24.88260460]
[44.55279541 -10.01079941]
[55.85179901 -0.14507672]
[67.15080261 9.72064590]
[78.44980621 19.58636856]
[74.06238556 5.24236393]
[72.69388580 -9.69507980]
[74.40188599 -24.59751892]
[79.11453247 -38.83798981]
[86.63356018 -51.81736755]
[96.64261627 -62.98959732]
[108.72061920 -71.88464355]
[122.35942841 -78.12828064]
[136.98522949 -81.45782471]
[151.98269653 -81.73320007]
[166.72087097 -78.94281769]
[180.57969666 -73.20407867]
[192.97610474 -64.75841522]
[203.38854980 -53.96115494]
[211.37898254 -41.26654816]
[216.61122131 -27.20868301]
[218.86515808 -12.37898922]
[218.04592896 2.59862351]
[214.18804932 17.09402466]
[207.45378113 30.49737167]
[198.12646484 42.24476242]
[186.59851074 51.84197235]
[173.35493469 58.88522720]
[158.95288086 63.07820892]
[143.99829102 64.24451447]
[129.12033081 62.33506775]
[114.94491577 57.43021393]
[102.06843567 49.73629761]
[91.02869415 39.57256317]
[95.03643036 54.02725220]
[99.04417419 68.48194122]
[119.27321625 71.44113922]
[135.06829834 87.07283020]
[138.82786560 110.77925873]
[152.48411560 104.57385254]
[166.14035034 98.36844635]
[179.79660034 92.16304016]
[191.71546936 80.10580444]
[206.60096741 88.22109985]
[202.92353821 104.77141571]
[186.00199890 105.81927490]
[172.34576416 112.02468872]
[158.68951416 118.23009491]
[145.03327942 124.43550110]
[146.28015137 139.38359070]
[160.77575684 143.24075317]
[175.27134705 147.09790039]
[189.76693726 150.95506287]
[204.26254272 154.81222534]
[218.75813293 158.66938782]
[236.38391113 153.44328308]
[248.35650635 166.23612976]
[262.92919922 169.79089355]
[279.75003052 167.67041016]
[286.44409180 183.24685669]
[273.32949829 193.99131775]
[259.37445068 184.36358643]
[244.80174255 180.80883789]
[234.26463318 186.83183289]
[222.06338501 183.94244385]
[214.90098572 173.16497803]
[200.40538025 169.30781555]
[185.90979004 165.45066833]
[171.41418457 161.59350586]
[156.91859436 157.73634338]
[142.42298889 153.87918091]
[130.53060913 163.02091980]
[130.53060913 178.02091980]
[130.53060913 193.02091980]
[130.53060913 208.02091980]
[130.53060913 223.02091980]
[130.53060913 238.02091980]
[130.53060913 253.02091980]
[130.53060913 268.02090454]
[130.53060913 283.02090454]
[130.53060913 298.02090454]
[145.07049561 302.08224487]
[157.97488403 309.91674805]
[168.28616333 320.94308472]
[175.23919678 334.34298706]
[178.31799316 349.12216187]
[177.29409790 364.18383789]
[172.24349976 378.41036987]
[163.54096985 390.74603271]
[151.83230591 400.27545166]
[137.98637390 406.29147339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 38]
[22 37]
[24 35]
[25 34]
[26 33]
[27 32]
[43 95]
[44 94]
[45 93]
[46 64]
[47 63]
[48 62]
[49 61]
[98 108]
[99 107]
[100 106]
[101 105]
[109 130]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
