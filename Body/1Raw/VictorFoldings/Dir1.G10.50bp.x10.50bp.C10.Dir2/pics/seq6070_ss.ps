%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAAGCCCGGGGGGGGGGUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGxxxxxxxxxxUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACCCCCCCCCCCAGCUAAGCAC\
) } def
/len { sequence length } bind def

/coor [
[100.59066772 655.14294434]
[87.37046814 647.87048340]
[76.48366547 637.42346191]
[68.67253876 624.51422119]
[64.46965790 610.02288818]
[64.16158295 594.93756104]
[67.76932526 580.28674316]
[75.04689789 567.06933594]
[85.49810028 556.18658447]
[98.41036224 548.38043213]
[112.90330505 544.18316650]
[112.59124756 529.18640137]
[112.27919006 514.18963623]
[111.96713257 499.19287109]
[111.65507507 484.19613647]
[111.34301758 469.19937134]
[111.03096771 454.20260620]
[110.71891022 439.20587158]
[110.40685272 424.20910645]
[110.09479523 409.21234131]
[109.78273773 394.21560669]
[109.47068024 379.21884155]
[109.15863037 364.22210693]
[108.69058228 349.22940063]
[108.06660461 334.24237061]
[107.44262695 319.25537109]
[91.72394562 313.93231201]
[79.20988464 302.97668457]
[71.82282257 288.03421021]
[70.71173859 271.36590576]
[76.07360840 255.50584412]
[87.11919403 242.87600708]
[102.18904877 235.41636658]
[100.94216919 220.46827698]
[99.69529724 205.52018738]
[98.44842529 190.57209778]
[89.39646149 182.48696899]
[88.27007294 169.99896240]
[96.22206879 159.79016113]
[95.28643799 144.81938171]
[94.35081482 129.84858704]
[93.41518402 114.87779236]
[83.77325439 101.18370056]
[91.32579041 86.23531342]
[90.07891846 71.28722382]
[88.83203888 56.33913803]
[87.58516693 41.39105225]
[74.51004028 37.99568558]
[63.14639282 30.73358536]
[54.60192490 20.32942581]
[49.70431519 7.81331778]
[48.92107391 -5.58116436]
[52.31495285 -18.53856850]
[59.53917694 -29.79075050]
[69.87279510 -38.24098206]
[82.29265594 -43.07085037]
[81.66867828 -58.05786514]
[81.04470062 -73.04488373]
[80.42072296 -88.03189850]
[76.91810608 -96.53974915]
[79.94293976 -103.33651733]
[79.63088989 -118.33326721]
[68.50708008 -129.23733521]
[68.40424347 -144.45062256]
[78.86815643 -154.98828125]
[78.55610657 -169.98503113]
[78.24404907 -184.98178101]
[63.97020721 -190.14141846]
[52.52669525 -200.11190796]
[45.46115112 -213.54479980]
[43.72912979 -228.62339783]
[47.56488037 -243.30848694]
[56.44964218 -255.61398315]
[69.18182373 -263.87570190]
[84.03950500 -266.97628784]
[99.01331329 -264.49642944]
[112.07814789 -256.77151489]
[121.46710968 -244.84625244]
[125.91041565 -230.33345032]
[124.80714417 -215.19584656]
[118.30650330 -201.48066711]
[107.28765106 -191.04278564]
[93.24079895 -185.29383850]
[93.55285645 -170.29708862]
[93.86491394 -155.30032349]
[104.75811768 -145.20707703]
[105.28822327 -130.00268555]
[94.62763977 -118.64532471]
[94.93969727 -103.64857483]
[95.40773773 -88.65587616]
[96.03171539 -73.66886139]
[96.65569305 -58.68184280]
[97.27967072 -43.69482803]
[112.99835205 -38.37178421]
[125.51241302 -27.41614914]
[132.89947510 -12.47367954]
[134.01055908 4.19463682]
[128.64869690 20.05469513]
[117.60311127 32.68453217]
[102.53325653 40.14417648]
[103.78012848 55.09226608]
[105.02700043 70.04035187]
[106.27388000 84.98844147]
[114.71889496 93.06726837]
[115.56916809 104.72329712]
[108.38597870 113.94216156]
[109.32160187 128.91294861]
[110.25723267 143.88374329]
[111.19286346 158.85453796]
[121.73554230 173.91546631]
[113.39650726 189.32522583]
[114.64338684 204.27331543]
[115.89025879 219.22140503]
[117.13713074 234.16947937]
[130.21226501 237.56484985]
[141.57591248 244.82695007]
[150.12037659 255.23110962]
[155.01799011 267.74722290]
[155.80122375 281.14169312]
[152.40734863 294.09912109]
[145.18312073 305.35128784]
[134.84950256 313.80151367]
[122.42964935 318.63137817]
[123.05362701 333.61840820]
[123.67760468 348.60540771]
[127.18021393 357.11328125]
[124.15538025 363.91003418]
[124.46743774 378.90679932]
[124.77949524 393.90353394]
[125.09155273 408.90029907]
[125.40360260 423.89706421]
[125.71566010 438.89379883]
[126.02771759 453.89056396]
[126.33977509 468.88729858]
[126.65183258 483.88406372]
[126.96389008 498.88082886]
[127.27593994 513.87756348]
[127.58799744 528.87432861]
[127.90005493 543.87109375]
[142.55505371 547.46185303]
[155.78085327 554.72412109]
[166.67572021 565.16271973]
[174.49682617 578.06591797]
[178.71089172 592.55395508]
[179.03060913 607.63909912]
[175.43418884 622.29266357]
[168.16682434 635.51568604]
[157.72402954 646.40649414]
[144.81779480 654.22265625]
[130.32810974 658.43109131]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 125]
[25 124]
[26 123]
[33 114]
[34 113]
[35 112]
[36 111]
[39 109]
[40 108]
[41 107]
[42 106]
[44 103]
[45 102]
[46 101]
[47 100]
[56 93]
[57 92]
[58 91]
[59 90]
[61 89]
[62 88]
[65 85]
[66 84]
[67 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
