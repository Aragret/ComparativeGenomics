%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUACCUCCCUCGGGGGGGGGGUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGxxxxxxxxxxUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCCCCCCCCCCCUUACCACCCUC\
) } def
/len { sequence length } bind def

/coor [
[87.89812469 385.69284058]
[74.19596863 379.43194580]
[62.23085785 370.27859497]
[52.60294342 358.69192505]
[45.79516602 345.25311279]
[42.14899826 330.63623047]
[41.84732819 315.57446289]
[44.90529251 300.82330322]
[51.16950226 287.12268066]
[60.32574844 275.15975952]
[71.91475677 265.53466797]
[85.35522461 258.73013306]
[99.97299194 255.08750916]
[99.66898346 240.09059143]
[99.36498260 225.09367371]
[99.06097412 210.09675598]
[98.75697327 195.09983826]
[98.45296478 180.10292053]
[98.14896393 165.10600281]
[97.84496307 150.10908508]
[97.54095459 135.11216736]
[97.23695374 120.11524200]
[94.59172058 134.88015747]
[84.10733032 145.60757446]
[69.40689850 148.59040833]
[55.57048416 142.79785156]
[47.37957382 130.23165894]
[47.66472244 115.23437500]
[56.32738876 102.98863220]
[70.37399292 97.72622681]
[84.95071411 101.26588440]
[71.35253143 94.93426514]
[57.75434875 88.60264587]
[44.15616608 82.27102661]
[30.55798340 75.93940735]
[16.95979881 69.60778809]
[3.36161542 63.27616501]
[-10.23656845 56.94454575]
[-23.96028137 50.88982391]
[-37.80388641 45.11447906]
[-53.51919937 46.94190598]
[-62.28625107 34.90080643]
[-76.12985992 29.12546349]
[-89.97346497 23.35011864]
[-103.81707001 17.57477570]
[-117.66067505 11.79943275]
[-133.84677124 14.43424225]
[-144.01068115 1.56462085]
[-137.69662476 -13.57026768]
[-121.39997864 -15.40094757]
[-111.88533020 -2.04417253]
[-98.04172516 3.73117065]
[-84.19812012 9.50651455]
[-70.35451508 15.28185749]
[-56.51091003 21.05720139]
[-41.78578186 18.81668282]
[-32.02854538 31.27087402]
[-18.18493843 37.04621887]
[-13.45618153 36.06515503]
[-8.06529808 38.08604813]
[-3.90494919 43.34636307]
[9.69323444 49.67798233]
[23.29141808 56.00960159]
[36.88960266 62.34122086]
[50.48778534 68.67283630]
[64.08596802 75.00445557]
[77.68415070 81.33607483]
[91.28233337 87.66769409]
[106.18923187 85.99902344]
[98.22709656 73.27176666]
[91.57176971 59.81497192]
[86.28940582 45.76238632]
[82.43248749 31.25367165]
[80.03936005 16.43302536]
[79.13380432 1.44774628]
[79.72481537 -13.55323124]
[81.80652618 -28.42081642]
[85.35824585 -43.00724411]
[90.34468079 -57.16754532]
[96.71625519 -70.76098633]
[104.40966034 -83.65245819]
[113.34842682 -95.71384430]
[123.44371796 -106.82527161]
[134.59519958 -116.87629700]
[146.69203186 -125.76703644]
[159.61399841 -133.40911865]
[173.23266602 -139.72659302]
[187.41267395 -144.65669250]
[202.01310730 -148.15037537]
[216.88885498 -150.17295837]
[231.89205933 -150.70431519]
[246.87362671 -149.73918152]
[261.68463135 -147.28713989]
[276.17791748 -143.37257385]
[290.20938110 -138.03436279]
[303.63958740 -131.32559204]
[316.33508301 -123.31291199]
[328.16967773 -114.07597351]
[339.02575684 -103.70657349]
[348.79541016 -92.30777740]
[357.38153076 -79.99286652]
[364.69879150 -66.88423920]
[370.67449951 -53.11217880]
[375.24923706 -38.81356049]
[378.37753296 -24.13049698]
[380.02828979 -9.20891666]
[380.18515015 5.80287886]
[378.84649658 20.75569153]
[376.02563477 35.50091171]
[371.75064087 49.89198685]
[366.06399536 63.78588867]
[359.02218628 77.04453278]
[350.69522095 89.53614807]
[341.16586304 101.13657379]
[330.52883911 111.73052216]
[318.88980103 121.21270752]
[306.36447144 129.48887634]
[293.07736206 136.47679138]
[279.16049194 142.10699463]
[264.75216675 146.32351685]
[249.99562073 149.08447266]
[235.03749084 150.36239624]
[220.02645874 150.14462280]
[205.11170959 148.43327332]
[190.44146729 145.24539185]
[176.16154480 140.61264038]
[162.41384888 134.58108521]
[149.33503723 127.21063995]
[137.05509949 118.57458496]
[125.69606018 108.75873566]
[115.37081909 97.86065674]
[112.23387146 119.81124115]
[112.53787231 134.80815125]
[112.84188080 149.80508423]
[113.14588165 164.80200195]
[113.44989014 179.79891968]
[113.75389099 194.79583740]
[114.05789185 209.79275513]
[114.36190033 224.78967285]
[114.66590118 239.78659058]
[114.96990967 254.78350830]
[129.72328186 257.83074951]
[143.42846680 264.08499146]
[155.39802551 273.23254395]
[165.03153992 284.81454468]
[171.84584045 298.25006104]
[175.49908447 312.86517334]
[175.80805969 327.92678833]
[172.75723267 342.67944336]
[166.49966431 356.38311768]
[157.34922791 368.35043335]
[145.76487732 377.98117065]
[132.32771301 384.79220581]
[117.71171570 388.44189453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 58]
[40 57]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[69 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
