%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACUACUAGGGGGGGGGGACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAGAxxxxxxxxxxUCAAAACAAAUGAUAACCAUACACAACACUAAAGGACGAACCUGAUCUCUCCCCCCCCCCUAUACUAGUA\
) } def
/len { sequence length } bind def

/coor [
[32.42581177 549.29589844]
[18.57987213 543.27984619]
[6.87121105 533.75042725]
[-1.83131325 521.41479492]
[-6.88191509 507.18823242]
[-7.90580654 492.12655640]
[-4.82700729 477.34741211]
[2.12601423 463.94747925]
[12.43729877 452.92114258]
[25.34167862 445.08663940]
[39.88156509 441.02532959]
[39.88156509 426.02532959]
[39.88156509 411.02532959]
[39.88156509 396.02532959]
[39.88156509 381.02532959]
[39.88156509 366.02532959]
[39.88156509 351.02532959]
[39.88156509 336.02532959]
[39.88156509 321.02532959]
[39.88156509 306.02532959]
[39.88156509 291.02532959]
[32.14426422 278.29803467]
[39.88156509 264.49786377]
[39.88156509 249.49787903]
[39.88156509 234.49787903]
[32.08124542 247.31016541]
[21.04116631 257.46481323]
[7.62290668 264.16931152]
[-7.12636042 266.90045166]
[-22.05559158 265.44506836]
[-35.99969482 259.91677856]
[-47.87046051 250.74700928]
[-56.74148560 238.65135193]
[-61.92046356 224.57377625]
[-63.00322723 209.61289978]
[-59.90527725 194.93629456]
[-52.86837769 181.68933105]
[-42.44169235 170.90582275]
[-29.43893242 163.42730713]
[-14.87484360 159.83741760]
[0.11398187 160.41630554]
[14.35780144 165.11882019]
[26.74501610 173.57795715]
[36.30891800 185.13354492]
[42.30313110 198.88380432]
[44.25983429 213.75833130]
[50.32284927 200.03828430]
[55.95480347 186.13572693]
[61.15021896 172.06420898]
[66.34563446 157.99269104]
[71.54105377 143.92117310]
[68.69091034 129.30180359]
[80.72912598 119.03573608]
[85.92453766 104.96421814]
[84.05692291 90.08094025]
[75.54583740 77.72936249]
[61.34434891 70.75596619]
[60.49400330 55.88565445]
[51.98291397 43.53408432]
[38.01691055 33.92226791]
[43.38691711 17.84124184]
[60.32605362 18.54971695]
[64.33448792 35.02299118]
[72.84558105 47.37456512]
[86.43829346 53.46449661]
[87.89740753 69.21827698]
[96.40850067 81.56984711]
[111.40525055 81.25778961]
[119.39517212 68.56285858]
[108.04459381 58.71070862]
[98.33105469 47.24128723]
[90.48225403 34.42346191]
[84.68216705 20.55769539]
[81.06676483 5.96902466]
[79.72079468 -9.00057125]
[80.67581177 -24.00018311]
[83.90942383 -38.67819977]
[89.34583282 -52.69054794]
[96.85760498 -65.70875549]
[106.26864624 -77.42765808]
[117.35835266 -87.57255554]
[129.86676025 -95.90562439]
[143.50067139 -102.23152924]
[157.94046021 -106.40198517]
[172.84767151 -108.31922913]
[187.87281799 -107.93831635]
[202.66372681 -105.26818085]
[216.87365723 -100.37141418]
[230.16950989 -93.36279297]
[242.23960876 -84.40662384]
[252.80102539 -73.71284485]
[261.60617065 -61.53212738]
[268.44866943 -48.15001678]
[273.16806030 -33.88020325]
[275.65377808 -19.05719376]
[275.84753418 -4.02845764]
[273.74478149 10.85370827]
[269.39480591 25.24044418]
[262.89959717 38.79450607]
[254.41137695 51.19816208]
[244.12915039 62.16065979]
[232.29394531 71.42501831]
[219.18319702 78.77407074]
[205.10423279 84.03554535]
[190.38706970 87.08609772]
[175.37673950 87.85422516]
[160.42506409 86.32192230]
[145.88255310 82.52510834]
[132.09010315 76.55278015]
[124.10018158 89.24771118]
[122.26438141 101.74150848]
[115.32843018 109.95025635]
[106.78263855 112.49500275]
[99.99605560 110.15963745]
[94.80064392 124.23115540]
[97.27917480 139.85700989]
[85.61257172 149.11657715]
[80.41715240 163.18809509]
[75.22174072 177.25962830]
[70.02632141 191.33114624]
[70.93949890 196.60235596]
[69.81111145 201.21528625]
[67.24868774 204.49182129]
[64.04290009 206.10128784]
[57.97988892 219.82135010]
[54.88156509 234.49787903]
[54.88156509 249.49787903]
[54.88156509 264.49786377]
[62.61886597 278.29803467]
[54.88156509 291.02532959]
[54.88156509 306.02532959]
[54.88156509 321.02532959]
[54.88156509 336.02532959]
[54.88156509 351.02532959]
[54.88156509 366.02532959]
[54.88156509 381.02532959]
[54.88156509 396.02532959]
[54.88156509 411.02532959]
[54.88156509 426.02532959]
[54.88156509 441.02532959]
[69.42145538 445.08663940]
[82.32583618 452.92114258]
[92.63711548 463.94747925]
[99.59014130 477.34741211]
[102.66893768 492.12655640]
[101.64505005 507.18823242]
[96.59444427 521.41479492]
[87.89192200 533.75042725]
[76.18325806 543.27984619]
[62.33732224 549.29589844]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[46 125]
[47 124]
[48 120]
[49 119]
[50 118]
[51 117]
[53 115]
[54 114]
[55 67]
[56 66]
[58 64]
[59 63]
[68 110]
[69 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
