%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUAAAUUUGGGGGGGGGGGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGxxxxxxxxxxUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCCCCCCCCCCCUUUAGAUUU\
) } def
/len { sequence length } bind def

/coor [
[74.42974091 527.90704346]
[60.58380508 521.89099121]
[48.87514496 512.36157227]
[40.17261887 500.02590942]
[35.12201691 485.79937744]
[34.09812546 470.73770142]
[37.17692566 455.95855713]
[44.12994766 442.55862427]
[54.44123077 431.53228760]
[67.34561157 423.69778442]
[81.88549805 419.63647461]
[81.88549805 404.63647461]
[81.88549805 389.63647461]
[81.88549805 374.63647461]
[81.88549805 359.63647461]
[81.88549805 344.63647461]
[81.88549805 329.63647461]
[81.88549805 314.63647461]
[81.88549805 299.63647461]
[81.88549805 284.63647461]
[79.93183899 282.54110718]
[78.71846008 279.52087402]
[78.61135101 275.86431885]
[79.86138916 271.99026489]
[82.56139374 268.40255737]
[83.80826569 253.45448303]
[85.05513763 238.50639343]
[86.30201721 223.55830383]
[86.77005768 208.56561279]
[75.87684631 198.47236633]
[75.34674835 183.26797485]
[86.00733185 171.91061401]
[85.69527435 156.91384888]
[85.38321686 141.91709900]
[85.07115936 126.92034912]
[84.75910187 111.92359161]
[75.86675262 99.84360504]
[61.63997650 95.08979034]
[47.41319656 90.33597565]
[33.18641663 85.58216095]
[21.74075317 95.82386017]
[6.70438957 98.95488739]
[-7.87796736 94.13301849]
[-18.08373642 82.65530396]
[-21.16761780 67.60919952]
[-16.30006409 53.04203033]
[-4.79041910 42.87228775]
[10.26527786 39.83558273]
[24.81711960 44.74877548]
[34.95073700 56.29024124]
[37.94023132 71.35538483]
[52.16701126 76.10919952]
[66.39379120 80.86301422]
[80.62056732 85.61682892]
[85.00366974 79.53090668]
[98.15298462 61.27315521]
[89.13545227 49.28631973]
[80.11792755 37.29948807]
[65.76416779 28.27695656]
[70.46058655 11.98646736]
[87.41452789 11.98968697]
[92.10475922 28.28195763]
[101.12228394 40.26879120]
[110.13981628 52.25562286]
[125.07412720 50.85332108]
[131.70262146 37.39735413]
[138.33111572 23.94138908]
[126.16053009 14.40284348]
[116.23082733 2.55658889]
[108.97007751 -11.08305836]
[104.69052887 -25.92454720]
[103.57520294 -41.32474899]
[105.67005157 -56.61683273]
[110.88208771 -71.13912201]
[118.98347473 -84.26374054]
[129.62153625 -95.42375946]
[142.33406067 -104.13768005]
[156.56939697 -110.03019714]
[171.71043396 -112.84838867]
[187.10128784 -112.47254944]
[202.07574463 -108.92127228]
[208.42286682 -122.51222229]
[214.77000427 -136.10317993]
[221.11712646 -149.69412231]
[222.34097290 -166.60385132]
[238.92863464 -170.10891724]
[246.88865662 -155.13980103]
[234.70808411 -143.34700012]
[228.36094666 -129.75604248]
[222.01382446 -116.16509247]
[215.66670227 -102.57414246]
[227.39382935 -93.92579651]
[237.20137024 -83.14260101]
[244.70722961 -70.64170837]
[249.61846924 -56.90726089]
[251.74266052 -42.47158432]
[250.99542236 -27.89462090]
[247.40380859 -13.74216461]
[241.10530090 -0.56392068]
[232.34259033 11.12785053]
[221.45414734 20.87824821]
[208.86123657 28.30742455]
[195.05155945 33.12538910]
[180.56042480 35.14332581]
[165.94989014 34.28098679]
[151.78709412 30.56988716]
[145.15858459 44.02585220]
[138.53009033 57.48181915]
[145.21903992 79.25242615]
[142.11012268 98.91457367]
[132.05331421 112.75150299]
[119.04438019 118.95417786]
[107.19736481 117.84481049]
[99.75585938 111.61154175]
[100.06791687 126.60829163]
[100.37996674 141.60504150]
[100.69202423 156.60180664]
[101.00408173 171.59855652]
[112.12789154 182.50262451]
[112.23072052 197.71591187]
[101.76680756 208.25355530]
[114.09210205 199.70445251]
[128.52050781 203.80578613]
[134.50604248 217.55981445]
[127.67375183 230.91346741]
[113.01749420 234.10629272]
[101.25009918 224.80519104]
[100.00322723 239.75326538]
[98.75635529 254.70135498]
[97.50947571 269.64944458]
[96.88549805 284.63647461]
[96.88549805 299.63647461]
[96.88549805 314.63647461]
[96.88549805 329.63647461]
[96.88549805 344.63647461]
[96.88549805 359.63647461]
[96.88549805 374.63647461]
[96.88549805 389.63647461]
[96.88549805 404.63647461]
[96.88549805 419.63647461]
[111.42538452 423.69778442]
[124.32976532 431.53228760]
[134.64105225 442.55862427]
[141.59407043 455.95855713]
[144.67286682 470.73770142]
[143.64898682 485.79937744]
[138.59837341 500.02590942]
[129.89585876 512.36157227]
[118.18719482 521.89099121]
[104.34125519 527.90704346]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[28 127]
[29 121]
[32 118]
[33 117]
[34 116]
[35 115]
[36 114]
[37 54]
[38 53]
[39 52]
[40 51]
[56 64]
[57 63]
[58 62]
[65 108]
[66 107]
[67 106]
[81 91]
[82 90]
[83 89]
[84 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
