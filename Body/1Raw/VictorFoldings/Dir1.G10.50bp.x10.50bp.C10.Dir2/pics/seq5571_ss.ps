%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUCCCCAGGGGGGGGGGCCAUCAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAxxxxxxxxxxAUCUGUACCCACGCCUUCUUCAAAGCCAUACUAUUUAUGUGCUCCGGGUCCCCCCCCCCCCAUCAUCCACA\
) } def
/len { sequence length } bind def

/coor [
[85.25888062 412.83206177]
[71.76999664 406.10052490]
[60.28450012 396.33596802]
[51.47013092 384.10607910]
[45.83934784 370.12188721]
[43.71952057 355.19641113]
[45.23389053 340.19741821]
[50.29441071 325.99688721]
[58.60687637 313.42047119]
[69.68801117 303.19931030]
[82.89356232 295.92767334]
[97.45578766 292.02832031]
[97.14781189 277.03146362]
[96.83982849 262.03463745]
[96.53185272 247.03779602]
[96.22387695 232.04095459]
[95.91590118 217.04412842]
[95.60791779 202.04728699]
[95.29994202 187.05044556]
[94.99196625 172.05360413]
[94.68399048 157.05677795]
[94.22206116 142.06388855]
[93.60623932 127.07653046]
[82.69406891 121.78356171]
[75.07064056 112.35095215]
[72.18466949 100.57122040]
[74.58459473 88.68293762]
[81.81433868 78.94529724]
[92.50000000 73.20879364]
[92.50000000 58.20879364]
[92.50000000 43.20879364]
[92.34600067 28.20958328]
[92.03802490 13.21274471]
[77.05146790 12.43767357]
[62.15989685 10.58321953]
[47.44096375 7.65905333]
[32.97140121 3.68041921]
[18.82665062 -1.33194005]
[5.08045244 -7.35189199]
[-8.19552231 -14.34805012]
[-20.93206024 -22.28394127]
[-33.06275940 -31.11818886]
[-44.52437210 -40.80473709]
[-55.25714111 -51.29307938]
[-65.20511627 -62.52854156]
[-74.31642914 -74.45253754]
[-82.54357147 -87.00291443]
[-89.84366608 -100.11421967]
[-96.17863464 -113.71810913]
[-101.51546478 -127.74365997]
[-105.82632446 -142.11775208]
[-109.08873749 -156.76542664]
[-111.28569794 -171.61032104]
[-112.40574646 -186.57505798]
[-112.44305420 -201.58160400]
[-111.39742279 -216.55171204]
[-109.27429199 -231.40736389]
[-106.08474731 -246.07107544]
[-101.84541321 -260.46640015]
[-96.57838440 -274.51831055]
[-90.31113434 -288.15353394]
[-83.07631683 -301.30099487]
[-74.91167450 -313.89212036]
[-65.85976410 -325.86126709]
[-55.96777344 -337.14605713]
[-45.28728104 -347.68762207]
[-33.87397385 -357.43103027]
[-21.78734779 -366.32550049]
[-9.09042549 -374.32461548]
[4.15060139 -381.38668823]
[17.86669731 -387.47491455]
[31.98635292 -392.55752563]
[46.43595505 -396.60806274]
[61.14016724 -399.60537720]
[76.02233124 -401.53384399]
[91.00485229 -402.38342285]
[106.00962067 -402.14965820]
[120.95841217 -400.83380127]
[135.77328491 -398.44271851]
[150.37699890 -394.98883057]
[164.69342041 -390.49017334]
[178.64790344 -384.97018433]
[192.16769409 -378.45767212]
[205.18231201 -370.98657227]
[217.62391663 -362.59585571]
[229.42761230 -353.32922363]
[240.53189087 -343.23501587]
[250.87882996 -332.36587524]
[260.41452026 -320.77841187]
[269.08920288 -308.53311157]
[276.85766602 -295.69378662]
[283.67944336 -282.32736206]
[289.51892090 -268.50354004]
[294.34570312 -254.29438782]
[298.13458252 -239.77397156]
[300.86581421 -225.01802063]
[302.52514648 -210.10345459]
[303.10397339 -195.10803223]
[302.59924316 -180.10993958]
[301.01358032 -165.18734741]
[298.35528564 -150.41809082]
[294.63818359 -135.87913513]
[289.88168335 -121.64631653]
[284.11056519 -107.79380798]
[277.35491943 -94.39384460]
[269.64996338 -81.51629639]
[261.03585815 -69.22827911]
[251.55755615 -57.59387970]
[241.26443481 -46.67374420]
[230.21015930 -36.52480698]
[218.45239258 -27.19998169]
[206.05239868 -18.74788284]
[193.07484436 -11.21257687]
[179.58738708 -4.63334990]
[165.66033936 0.95549643]
[151.36631775 5.52482462]
[136.77984619 9.05081177]
[121.97696686 11.51507568]
[107.03486633 12.90476704]
[107.34284210 27.90160561]
[110.64492035 34.56557083]
[107.50000000 43.20879364]
[107.50000000 58.20879364]
[107.50000000 73.20879364]
[121.99238586 82.96022797]
[127.81533051 99.42877960]
[122.67341614 116.12250519]
[108.59358978 126.46070862]
[109.20941925 141.44805908]
[112.70653534 149.95487976]
[109.68082428 156.74879456]
[109.98880768 171.74563599]
[110.29678345 186.74247742]
[110.60475922 201.73930359]
[110.91273499 216.73614502]
[111.22071838 231.73298645]
[111.52869415 246.72982788]
[111.83666992 261.72665405]
[112.14464569 276.72351074]
[112.45262146 291.72033691]
[127.16265869 295.01855469]
[140.65562439 301.74191284]
[152.14703369 311.49951172]
[160.96882629 323.72406006]
[166.60807800 337.70483398]
[168.73695374 352.62902832]
[167.23167419 367.62893677]
[162.17976379 381.83251953]
[153.87492371 394.41397095]
[142.80000305 404.64184570]
[129.59884644 411.92150879]
[115.03899384 415.82968140]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 129]
[23 128]
[29 124]
[30 123]
[31 122]
[32 120]
[33 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
