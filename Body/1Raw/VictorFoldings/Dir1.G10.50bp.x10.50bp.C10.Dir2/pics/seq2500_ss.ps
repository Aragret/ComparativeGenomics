%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAAUGUUGGGGGGGGGGAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUxxxxxxxxxxACUUCACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCCCCCCCCCCCAACUAAUAUU\
) } def
/len { sequence length } bind def

/coor [
[82.07720947 366.28771973]
[69.51898956 357.93658447]
[59.43276596 346.72412109]
[52.45257187 333.35522461]
[49.01718903 318.67022705]
[49.34256363 303.59225464]
[53.40824890 289.06915283]
[60.95866776 276.01379395]
[71.51919556 265.24691772]
[84.42599487 257.44528198]
[98.86772156 253.09931946]
[98.24374390 238.11230469]
[97.61976624 223.12528992]
[96.99578857 208.13827515]
[96.37181091 193.15126038]
[95.74783325 178.16424561]
[95.12385559 163.17723083]
[94.49987793 148.19020081]
[93.87590027 133.20318604]
[93.25192261 118.21617889]
[82.11937714 112.55262756]
[75.73299408 100.19754791]
[62.20880508 106.68570709]
[58.50312805 121.87787628]
[45.86854935 131.09207153]
[30.27072906 129.97763062]
[19.07448006 119.06076813]
[17.56632996 103.49607849]
[26.45837975 90.63274384]
[41.55207825 86.54443359]
[55.72064209 93.16152191]
[69.24482727 86.67335510]
[78.13717651 74.59336853]
[80.31401825 59.75215912]
[82.49085236 44.91095352]
[84.66769409 30.06974983]
[86.84452820 15.22854424]
[76.63290405 26.21593094]
[62.87994003 32.20392227]
[47.87994385 32.19358063]
[34.13524628 26.18663597]
[23.93877983 15.18517971]
[18.99153709 1.02450204]
[20.11883163 -13.93307781]
[27.13260269 -27.19230080]
[38.86280060 -36.54122925]
[53.35256195 -40.42025757]
[68.18466949 -38.18227005]
[80.88479614 -30.20061493]
[89.33427429 -17.80681229]
[92.12356567 -3.06984806]
[98.18657684 -16.78990173]
[104.24959564 -30.50995445]
[110.02586365 -44.35317230]
[115.51289368 -58.31356430]
[119.06765747 -72.88626862]
[120.62523651 -87.80517578]
[122.18282318 -102.72409058]
[123.74040222 -117.64300537]
[124.52024841 -132.62271118]
[124.52024841 -147.62271118]
[124.36421204 -162.62190247]
[124.05215454 -177.61865234]
[123.74009705 -192.61541748]
[113.83305359 -208.10186768]
[122.80589294 -223.15139771]
[122.18191528 -238.13841248]
[107.89625549 -243.33345032]
[96.68946075 -253.60360718]
[90.27047729 -267.38275146]
[89.61816406 -282.56970215]
[94.83198547 -296.84851074]
[105.11688232 -308.04177856]
[118.90446472 -314.44262695]
[134.09223938 -315.07495117]
[148.36418152 -309.84237671]
[159.54393005 -299.54275513]
[165.92663574 -285.74676514]
[166.53898621 -270.55816650]
[161.28761292 -256.29312134]
[150.97331238 -245.12693787]
[137.16893005 -238.76239014]
[137.79290771 -223.77537537]
[146.50070190 -215.32069397]
[147.10662842 -202.79664612]
[138.73684692 -192.92747498]
[139.04890442 -177.93070984]
[139.36096191 -162.93395996]
[142.66590881 -156.26890564]
[139.52024841 -147.62271118]
[139.52024841 -132.62271118]
[152.02072144 -140.91355896]
[166.36068726 -136.51295471]
[172.05879211 -122.63736725]
[164.95018005 -109.42874908]
[150.23066711 -106.54152679]
[138.65931702 -116.08541870]
[137.10173035 -101.16651154]
[135.54415894 -86.24759674]
[133.98657227 -71.32868195]
[143.73229980 -82.73135376]
[157.22427368 -89.28625488]
[172.21171570 -89.89990234]
[186.19438171 -84.46991730]
[196.83967590 -73.90214539]
[202.37168884 -59.95951843]
[201.86758423 -44.96799469]
[195.41145325 -31.42848396]
[184.08030701 -21.59968948]
[169.76445007 -17.12126923]
[154.85208130 -18.74032593]
[141.83093262 -26.18676567]
[132.87319946 -38.21835327]
[129.47328186 -52.82653046]
[123.98625946 -38.86614227]
[125.06782532 -34.15384674]
[123.15452576 -28.71595955]
[117.96965027 -24.44694138]
[111.90663147 -10.72688866]
[105.84362030 2.99316502]
[101.68572998 17.40538025]
[99.50889587 32.24658585]
[97.33206177 47.08779144]
[95.15522003 61.92899704]
[92.97838593 76.77020264]
[110.14832306 79.29608917]
[120.40170288 92.18619537]
[119.13720703 107.72187805]
[108.23893738 117.59220123]
[108.86291504 132.57920837]
[109.48689270 147.56622314]
[110.11087036 162.55325317]
[110.73484802 177.54026794]
[111.35882568 192.52728271]
[111.98280334 207.51429749]
[112.60678101 222.50131226]
[113.23075867 237.48832703]
[113.85473633 252.47534180]
[128.60774231 255.60578918]
[142.11837769 262.30755615]
[153.53735352 272.15933228]
[162.14686584 284.54187012]
[167.40571594 298.67675781]
[168.98332214 313.67550659]
[166.78051758 328.59521484]
[160.93577576 342.49810791]
[151.81649780 354.51016235]
[139.99592590 363.87631226]
[126.21710968 370.00781250]
[111.34620667 372.51919556]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 32]
[23 31]
[33 125]
[34 124]
[35 123]
[36 122]
[37 121]
[51 120]
[52 119]
[53 118]
[54 115]
[55 114]
[56 100]
[57 99]
[58 98]
[59 97]
[60 91]
[61 90]
[62 88]
[63 87]
[64 86]
[66 83]
[67 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
