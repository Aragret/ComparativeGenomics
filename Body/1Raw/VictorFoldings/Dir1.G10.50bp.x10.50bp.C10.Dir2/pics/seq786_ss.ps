%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCCCAGGGGGGGGGGAAGACACCCCCCACAGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGxxxxxxxxxxCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACCACCUACCUCCCUCCCCCCCCCCCACCAAAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[95.26232147 667.21844482]
[81.77344513 660.48693848]
[70.28794098 650.72235107]
[61.47357559 638.49249268]
[55.84279251 624.50830078]
[53.72296524 609.58282471]
[55.23733521 594.58380127]
[60.29785538 580.38330078]
[68.61032104 567.80688477]
[79.69145203 557.58569336]
[92.89701080 550.31408691]
[107.45922852 546.41473389]
[107.15125275 531.41784668]
[106.84327698 516.42102051]
[106.53530121 501.42419434]
[106.22732544 486.42736816]
[105.91934204 471.43051147]
[105.61136627 456.43368530]
[105.30339050 441.43682861]
[104.99541473 426.44000244]
[104.68743134 411.44317627]
[104.37945557 396.44631958]
[94.48974609 381.98126221]
[103.41983032 365.91003418]
[102.80400085 350.92269897]
[88.19384003 347.68344116]
[74.90984344 340.76736450]
[63.86029816 330.64056396]
[55.80248260 317.98892212]
[51.29073715 303.67163086]
[50.63833237 288.66287231]
[53.89574814 273.98544312]
[60.84680176 260.64117432]
[71.02297974 249.54246521]
[83.73504639 241.44993591]
[98.11968231 236.92031860]
[97.50386047 221.93296814]
[96.88803101 206.94561768]
[96.27220917 191.95826721]
[95.65637970 176.97090149]
[87.40308380 164.57202148]
[94.56729889 150.46582031]
[93.95146942 135.47846985]
[93.33564758 120.49111938]
[76.33981323 109.28279877]
[74.42197418 85.74012756]
[62.45171356 76.70060730]
[50.48145676 67.66108704]
[38.51119995 58.62156677]
[24.06987000 64.04850006]
[8.99184990 60.78401184]
[-1.91152060 49.86979675]
[-5.16101503 34.78853989]
[0.28026775 20.35261345]
[12.67603493 11.16846943]
[28.07084084 10.16673470]
[41.55226135 17.66705894]
[48.81842041 31.27611732]
[47.55071640 46.65130615]
[59.52097702 55.69082642]
[71.49123383 64.73034668]
[83.46149445 73.76986694]
[97.70818329 69.07606506]
[101.96102905 54.69158554]
[106.21387482 40.30710220]
[110.46672821 25.92262268]
[97.00293732 19.22205353]
[84.90735626 10.28516674]
[74.54753876 -0.61645538]
[66.23831940 -13.15152454]
[60.23220062 -26.93911552]
[56.71170044 -41.56023788]
[55.78380585 -56.57057190]
[57.47671509 -71.51396942]
[61.73897934 -85.93632507]
[68.44107819 -99.39934540]
[77.37933350 -111.49391937]
[88.28212738 -121.85249329]
[100.81814575 -130.16029358]
[114.60641479 -136.16485596]
[129.22793579 -139.68368530]
[144.23837280 -140.60987854]
[159.18157959 -138.91528320]
[173.60345459 -134.65138245]
[187.06571960 -127.94776154]
[199.15927124 -119.00812531]
[209.51661682 -108.10415649]
[217.82299805 -95.56719971]
[223.82598877 -81.77825165]
[227.34317017 -67.15633392]
[228.26765442 -52.14578629]
[226.57136536 -37.20277023]
[222.30581665 -22.78138733]
[215.60067749 -9.31988335]
[206.65966797 2.77266073]
[195.75453186 13.12876606]
[183.21662903 21.43372154]
[169.42700195 27.43515015]
[154.80467224 30.95067406]
[139.79402161 31.87346077]
[124.85120392 30.17546844]
[120.59835815 44.55995178]
[116.34551239 58.94443130]
[112.09266663 73.32891083]
[124.87886047 90.29296875]
[122.21160889 109.41995239]
[108.32299805 119.87529755]
[108.93881989 134.86265564]
[109.55464935 149.85000610]
[117.85198975 163.32087708]
[110.64373016 176.35508728]
[111.25955963 191.34243774]
[111.87538147 206.32978821]
[112.49121094 221.31713867]
[113.10703278 236.30448914]
[127.81479645 239.63871765]
[141.14791870 246.66105652]
[152.20034790 256.88748169]
[160.22274780 269.61648560]
[164.67332458 283.97720337]
[165.25445557 298.98892212]
[161.93251038 313.62808228]
[154.93981934 326.89813232]
[144.75833130 337.89730835]
[132.08651733 345.87991333]
[117.79135895 350.30685425]
[118.40718079 365.29421997]
[127.37013245 374.62530518]
[127.54135132 387.16091919]
[119.37629700 396.13833618]
[119.68427277 411.13519287]
[119.99224854 426.13201904]
[120.30022430 441.12887573]
[120.60820770 456.12570190]
[120.91618347 471.12252808]
[121.22415924 486.11938477]
[121.53213501 501.11621094]
[121.84011841 516.11303711]
[122.14809418 531.10986328]
[122.45606995 546.10675049]
[137.16610718 549.40496826]
[150.65905762 556.12829590]
[162.15048218 565.88592529]
[170.97225952 578.11047363]
[176.61152649 592.09124756]
[178.74040222 607.01544189]
[177.23512268 622.01531982]
[172.18321228 636.21893311]
[163.87837219 648.80035400]
[152.80343628 659.02825928]
[139.60229492 666.30792236]
[125.04244232 670.21606445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 127]
[25 126]
[36 115]
[37 114]
[38 113]
[39 112]
[40 111]
[42 109]
[43 108]
[44 107]
[46 62]
[47 61]
[48 60]
[49 59]
[63 104]
[64 103]
[65 102]
[66 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
