%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUCCUCGGGGGGGGGGCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCxxxxxxxxxxAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCCCCCCCCCCCAGACCUCCUC\
) } def
/len { sequence length } bind def

/coor [
[75.68806458 437.67315674]
[64.47263336 427.60784912]
[55.88123322 415.22702026]
[50.37718964 401.19839478]
[48.25732803 386.27853394]
[49.63597107 371.27197266]
[54.43877411 356.98809814]
[62.40671921 344.19714355]
[73.11010742 333.58892822]
[85.97172546 325.73553467]
[100.29795837 321.06051636]
[99.05108643 306.11242676]
[97.80420685 291.16433716]
[96.55733490 276.21624756]
[95.31046295 261.26818848]
[94.06358337 246.32008362]
[92.81671143 231.37199402]
[84.04823303 219.33193970]
[90.61161804 204.93637085]
[89.36474609 189.98828125]
[88.11786652 175.04019165]
[86.87099457 160.09210205]
[85.62412262 145.14401245]
[84.37724304 130.19592285]
[75.34806061 111.57935333]
[79.99778748 95.63014221]
[91.15087128 89.52569580]
[85.08786011 75.80564117]
[78.74073029 62.21468735]
[72.11222839 48.75872421]
[57.41938782 43.58589554]
[50.88883209 29.84520721]
[55.91088104 15.86970615]
[49.28237915 2.41374040]
[42.65388107 -11.04222488]
[35.88576889 -24.42851067]
[28.97876930 -37.74366379]
[22.07176971 -51.05882263]
[15.16477203 -64.37397766]
[10.25768566 -50.19933319]
[-2.52184272 -42.34543991]
[-17.38456154 -44.37018585]
[-27.59751320 -55.35633850]
[-28.53413200 -70.32707214]
[-19.77011871 -82.50048828]
[-5.27565908 -86.36191559]
[8.38340664 -80.16180420]
[3.48185539 -94.33836365]
[-1.41969538 -108.51492310]
[-6.32124615 -122.69148254]
[-13.64035225 -135.78463745]
[-23.14871025 -147.38597107]
[-32.65707016 -158.98731995]
[-42.16542816 -170.58865356]
[-57.47804642 -168.71057129]
[-71.36527252 -175.42984009]
[-79.39574432 -188.60234070]
[-79.00696564 -204.02481079]
[-70.32299805 -216.77597046]
[-56.11485291 -222.78698730]
[-40.91630936 -220.13975525]
[-29.57716560 -209.67900085]
[-25.71569633 -194.74272156]
[-30.56408691 -180.09701538]
[-21.05572701 -168.49568176]
[-11.54736900 -156.89433289]
[-2.03901052 -145.29299927]
[-3.94212317 -160.17176819]
[-1.00065553 -174.88053894]
[6.47818756 -187.88311768]
[17.71331978 -197.82151794]
[31.53135109 -203.65777588]
[46.48913574 -204.78237915]
[61.02448654 -201.07785034]
[73.61934662 -192.93110657]
[82.95831299 -181.19297791]
[88.06603241 -167.08938599]
[88.40905762 -152.09330750]
[83.95155334 -137.77091980]
[75.15907288 -125.61805725]
[62.94989014 -116.90393829]
[48.59912491 -112.53866577]
[33.60556412 -112.97815704]
[19.53512764 -118.17649841]
[7.85531187 -127.59303284]
[12.75686264 -113.41647339]
[17.65841293 -99.23991394]
[22.55996513 -85.06335449]
[28.47992706 -71.28097534]
[35.38692474 -57.96582031]
[42.29392624 -44.65066528]
[49.20092392 -31.33550835]
[55.11096573 -26.81698418]
[56.10984802 -17.67072296]
[62.73834610 -4.21475840]
[69.36684418 9.24120712]
[83.50765991 13.77695560]
[90.42158508 27.32879257]
[85.56819153 42.13022232]
[92.19669342 55.58618927]
[96.40921783 57.95897675]
[99.14199829 63.03472900]
[98.80790710 69.74262238]
[104.87092590 83.46267700]
[117.72932434 91.18676758]
[132.68957520 90.09545135]
[147.64982605 89.00414276]
[162.61007690 87.91283417]
[172.75178528 75.79172516]
[188.50114441 74.47531128]
[200.51435852 84.74460602]
[201.66418457 100.50701141]
[191.26844788 112.41097260]
[175.49476624 113.39408112]
[163.70138550 102.87307739]
[148.74113464 103.96439362]
[133.78088379 105.05570221]
[118.82063293 106.14701080]
[113.94680786 111.84752655]
[125.34767151 121.59536743]
[115.59963989 132.99606323]
[104.19915771 123.24854279]
[99.32533264 128.94905090]
[100.57220459 143.89714050]
[101.81908417 158.84523010]
[103.06595612 173.79331970]
[104.31282806 188.74140930]
[105.55970764 203.68948364]
[114.41736603 216.79873657]
[107.76480103 230.12512207]
[109.01167297 245.07321167]
[110.25854492 260.02130127]
[111.50542450 274.96939087]
[112.75229645 289.91748047]
[113.99916840 304.86557007]
[115.24604797 319.81365967]
[130.14883423 322.05056763]
[144.13380432 327.66458130]
[156.44679260 336.35290527]
[166.42376709 347.64700317]
[173.52667236 360.93780518]
[177.37246704 375.50854492]
[177.75373840 390.57345581]
[174.64994812 405.32009888]
[168.22846985 418.95318604]
[158.83558655 430.73751831]
[146.97787476 440.03759766]
[133.29479980 446.35186768]
[118.52424622 449.33978271]
[103.46279907 448.84024048]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[19 128]
[20 127]
[21 126]
[22 125]
[23 124]
[24 123]
[27 104]
[28 103]
[29 100]
[30 99]
[33 96]
[34 95]
[35 94]
[36 92]
[37 91]
[38 90]
[39 89]
[47 88]
[48 87]
[49 86]
[50 85]
[51 67]
[52 66]
[53 65]
[54 64]
[105 118]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
