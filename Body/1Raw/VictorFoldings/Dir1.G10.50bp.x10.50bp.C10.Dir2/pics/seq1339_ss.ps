%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGCUAAGAGGGGGGGGGGCCCAAACUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGxxxxxxxxxxUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCCCCCCCCCCCAAAGCUAAGA\
) } def
/len { sequence length } bind def

/coor [
[92.30827332 370.02468872]
[80.42400360 360.74960327]
[71.10529327 348.89947510]
[64.89392853 335.16333008]
[62.15102768 320.33969116]
[63.03605652 305.29043579]
[67.49756622 290.89050293]
[75.27616119 277.97705078]
[85.91961670 267.30090332]
[98.80912018 259.48269653]
[113.19531250 254.97703552]
[112.25968170 240.00625610]
[111.32405090 225.03546143]
[110.38842773 210.06466675]
[109.45279694 195.09387207]
[108.51716614 180.12307739]
[107.58154297 165.15229797]
[106.64591217 150.18150330]
[105.71028137 135.21070862]
[104.77465057 120.23991394]
[91.68150330 112.92081451]
[78.43891144 119.96595001]
[65.19632721 127.01108551]
[51.95374298 134.05621338]
[40.81015778 146.83341980]
[25.44744301 139.66239929]
[28.08538437 122.91493988]
[44.90860748 120.81362915]
[58.15119171 113.76849365]
[71.39377594 106.72335815]
[84.63636780 99.67822266]
[83.24020386 92.30932617]
[80.44787598 77.57151794]
[79.05171204 70.20261383]
[64.14981079 68.48992157]
[49.24790955 66.77723694]
[38.85308456 78.29796600]
[23.66484642 81.47555542]
[9.52338886 75.08816528]
[1.86638689 61.59187317]
[3.63811588 46.17627335]
[14.15730953 34.76898956]
[29.37912369 31.75634575]
[43.45045853 38.29676819]
[50.96060181 51.87533188]
[65.86250305 53.58802414]
[80.76440430 55.30071259]
[94.07955933 48.39371490]
[101.26206970 35.22513199]
[108.44458008 22.05654907]
[115.62709045 8.88796616]
[103.10724640 0.60983974]
[91.33454895 -8.70022964]
[80.39381409 -18.97516060]
[70.36387634 -30.14092445]
[61.31700897 -42.11706543]
[53.31838608 -54.81729507]
[46.42564011 -68.15010834]
[40.68843842 -82.01943970]
[36.14811707 -96.32536316]
[32.83739090 -110.96479034]
[30.78011131 -125.83225250]
[29.99110222 -140.82063293]
[30.47604752 -155.82191467]
[32.23145676 -170.72802734]
[35.24467850 -185.43157959]
[39.49400330 -199.82661438]
[44.94881439 -213.80943298]
[51.56980515 -227.27925110]
[59.30927658 -240.13905334]
[68.11146545 -252.29617310]
[77.91294098 -263.66299438]
[88.64309692 -274.15765381]
[100.22460175 -283.70449829]
[112.57402802 -292.23477173]
[125.60238647 -299.68701172]
[139.21580505 -306.00750732]
[153.31620789 -311.15072632]
[167.80198669 -315.07958984]
[182.56877136 -317.76583862]
[197.51016235 -319.19006348]
[212.51852417 -319.34204102]
[227.48570251 -318.22064209]
[242.30384827 -315.83398438]
[256.86621094 -312.19924927]
[271.06787109 -307.34262085]
[284.80648804 -301.29910278]
[297.98309326 -294.11224365]
[310.50271606 -285.83377075]
[322.27517700 -276.52340698]
[333.21563721 -266.24819946]
[343.24530029 -255.08216858]
[352.29183960 -243.10580444]
[360.29016113 -230.40536499]
[367.18255615 -217.07237244]
[372.91940308 -203.20288086]
[377.45935059 -188.89685059]
[380.76968384 -174.25733948]
[382.82659912 -159.38981628]
[383.61520386 -144.40142822]
[383.12988281 -129.40014648]
[381.37408447 -114.49407959]
[378.36047363 -99.79060364]
[374.11077881 -85.39567566]
[368.65560913 -71.41300964]
[362.03427124 -57.94335556]
[354.29446411 -45.08375549]
[345.49197388 -32.92687225]
[335.69018555 -21.56029510]
[324.95977783 -11.06591988]
[313.37802124 -1.51936352]
[301.02838135 7.01059103]
[287.99981689 14.46248436]
[274.38623047 20.78262520]
[260.28570557 25.92547417]
[245.79981995 29.85397720]
[231.03297424 32.53982925]
[216.09153748 33.96368027]
[201.08317566 34.11526489]
[186.11602783 32.99349976]
[171.29794312 30.60646057]
[156.73565674 26.97134781]
[142.53413391 22.11435509]
[128.79566956 16.07047462]
[121.61315918 29.23905754]
[114.43064880 42.40763855]
[107.24814606 55.57622147]
[119.74544525 119.30429077]
[120.68107605 134.27508545]
[121.61669922 149.24586487]
[122.55233002 164.21665955]
[123.48796082 179.18745422]
[124.42358398 194.15824890]
[125.35921478 209.12904358]
[126.29484558 224.09982300]
[127.23047638 239.07061768]
[128.16610718 254.04141235]
[143.00132751 256.72082520]
[156.76396179 262.87335205]
[168.65386963 272.14123535]
[177.97975159 283.98568726]
[184.19944763 297.71810913]
[186.95133972 312.54006958]
[186.07542419 327.58984375]
[181.62265015 341.99249268]
[173.85188293 354.91064453]
[163.21490479 365.59326172]
[150.33013916 373.41925049]
[135.94668579 377.93365479]
[120.90078735 378.87396240]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 31]
[22 30]
[23 29]
[24 28]
[34 47]
[35 46]
[36 45]
[48 127]
[49 126]
[50 125]
[51 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
