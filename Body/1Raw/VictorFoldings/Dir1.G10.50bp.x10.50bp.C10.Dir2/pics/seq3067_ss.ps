%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCCUGUACGGGGGGGGGGGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAxxxxxxxxxxAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACCCCCCCCCCCUCCCUCUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 468.43893433]
[71.19830322 462.42291260]
[59.48964310 452.89349365]
[50.78712082 440.55783081]
[45.73651886 426.33129883]
[44.71262741 411.26962280]
[47.79142761 396.49047852]
[54.74444962 383.09054565]
[65.05573273 372.06420898]
[77.96011353 364.22970581]
[92.50000000 360.16839600]
[92.50000000 345.16839600]
[92.50000000 330.16839600]
[92.50000000 315.16839600]
[92.50000000 300.16839600]
[92.50000000 285.16839600]
[92.50000000 270.16839600]
[92.50000000 255.16839600]
[92.50000000 240.16839600]
[92.50000000 225.16839600]
[84.76270294 212.44111633]
[92.50000000 198.64094543]
[84.76270294 185.91366577]
[92.50000000 172.11349487]
[92.50000000 157.11349487]
[92.50000000 142.11349487]
[71.87520599 132.23031616]
[59.29007339 113.13388062]
[58.34213638 90.28304291]
[69.30236816 70.20986176]
[60.53616333 58.03802109]
[51.76995468 45.86618423]
[43.00374985 33.69434738]
[27.65694809 31.02723694]
[18.94016075 18.55838585]
[21.57741928 3.94399476]
[12.81121254 -8.22784233]
[1.51220810 -18.09356499]
[-11.73037720 -25.13870049]
[-24.97296333 -32.18383408]
[-38.21554947 -39.22896957]
[-51.45813370 -46.27410507]
[-64.77329254 -53.18110275]
[-78.15957642 -59.94921875]
[-91.40644836 -52.04201508]
[-106.82461548 -52.57469177]
[-119.49418640 -61.37727356]
[-125.37236023 -75.64089203]
[-122.58341980 -90.81406403]
[-112.01731110 -102.05510712]
[-97.04564667 -105.77703094]
[-82.44581604 -100.79218292]
[-72.87658691 -88.69121552]
[-71.39145660 -73.33550262]
[-58.00517654 -66.56739044]
[-50.56874847 -66.35471344]
[-44.41299820 -59.51668930]
[-31.17041397 -52.47155380]
[-17.92782784 -45.42642212]
[-4.68524265 -38.38128662]
[8.55734253 -31.33615112]
[0.88052738 -44.22283173]
[-3.27019048 -58.63711166]
[-3.62239528 -73.63298035]
[-0.15297195 -88.22623444]
[6.91037846 -101.45911407]
[17.10408211 -112.46312714]
[29.75911903 -120.51608276]
[44.04492950 -125.08944702]
[59.02391815 -125.88307190]
[73.71300507 -122.84487152]
[87.14813995 -116.17424774]
[98.44754791 -106.30899048]
[106.86965942 -93.89657593]
[111.86170197 -79.75162506]
[113.09606171 -64.80250549]
[110.49172211 -50.03031921]
[104.21960449 -36.40458679]
[94.69135284 -24.81958008]
[82.53231812 -16.03562546]
[68.54050446 -10.62922287]
[53.63420868 -8.95520115]
[38.79174423 -11.12342644]
[24.98304939 -16.99404907]
[33.74925613 -4.82221270]
[48.44610977 -2.69191933]
[57.50968170 9.52717590]
[55.17558670 24.92814255]
[63.94179153 37.09997940]
[72.70800018 49.27181625]
[81.47420502 61.44365311]
[90.94748688 57.10021973]
[101.43634033 55.11012650]
[112.35042572 55.70848083]
[123.04597473 58.98116302]
[132.86369324 64.85297394]
[145.30313110 56.47083282]
[155.05970764 42.60556793]
[171.08399963 48.14256668]
[170.19935608 65.07341766]
[153.68527222 68.91027069]
[141.24583435 77.29241943]
[146.29458618 91.41722107]
[161.22889709 90.01491547]
[176.16320801 88.61260986]
[191.09750366 87.21030426]
[198.09686279 73.46212006]
[211.42942810 65.70028687]
[226.84085083 66.40157318]
[239.41337585 75.34220886]
[245.13519287 89.66925812]
[242.18045044 104.81102753]
[231.49201965 115.93582153]
[216.48054504 119.49376678]
[201.93611145 114.34952545]
[192.49981689 102.14461517]
[177.56550598 103.54692078]
[162.63119507 104.94922638]
[147.69689941 106.35152435]
[144.48063660 115.87204742]
[139.42823792 124.34260559]
[132.83280945 131.42353821]
[125.04690552 136.85043335]
[116.46421051 140.44361877]
[107.50000000 142.11349487]
[107.50000000 157.11349487]
[107.50000000 172.11349487]
[115.23729706 185.91366577]
[107.50000000 198.64094543]
[115.23729706 212.44111633]
[107.50000000 225.16839600]
[107.50000000 240.16839600]
[107.50000000 255.16839600]
[107.50000000 270.16839600]
[107.50000000 285.16839600]
[107.50000000 300.16839600]
[107.50000000 315.16839600]
[107.50000000 330.16839600]
[107.50000000 345.16839600]
[107.50000000 360.16839600]
[122.03988647 364.22970581]
[134.94427490 372.06420898]
[145.25555420 383.09054565]
[152.20857239 396.49047852]
[155.28736877 411.26962280]
[154.26348877 426.33129883]
[149.21287537 440.55783081]
[140.51036072 452.89349365]
[128.80169678 462.42291260]
[114.95575714 468.43893433]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[24 127]
[25 126]
[26 125]
[30 91]
[31 90]
[32 89]
[33 88]
[36 85]
[37 84]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 55]
[44 54]
[96 102]
[97 101]
[103 119]
[104 118]
[105 117]
[106 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
