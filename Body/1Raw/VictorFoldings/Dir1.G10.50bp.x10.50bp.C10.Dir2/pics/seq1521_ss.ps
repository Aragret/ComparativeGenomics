%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUCCCUCUGGGGGGGGGGAGAGGAGCCUGUUCUGUAAUCGAUAAACCCCGAUCAACCUCACCACCUCUxxxxxxxxxxUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGAUCAACCCCCCCCCCAUAUCACUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 357.80120850]
[71.19830322 351.78518677]
[59.48964310 342.25576782]
[50.78712082 329.92010498]
[45.73651886 315.69357300]
[44.71262741 300.63189697]
[47.79142761 285.85275269]
[54.74444962 272.45281982]
[65.05573273 261.42648315]
[77.96011353 253.59197998]
[92.50000000 249.53065491]
[92.50000000 234.53065491]
[92.50000000 219.53065491]
[92.50000000 204.53065491]
[92.50000000 189.53065491]
[92.50000000 174.53065491]
[92.50000000 159.53065491]
[92.50000000 144.53065491]
[92.50000000 129.53065491]
[92.50000000 114.53066254]
[83.73379517 102.35882568]
[69.50701141 97.60501099]
[55.28023529 92.85119629]
[41.05345535 88.09738159]
[26.82667542 83.34356689]
[18.17094231 95.71118927]
[6.39283419 105.12918091]
[-7.54778481 110.84093475]
[-22.51789093 112.39148712]
[-37.30339050 109.66366577]
[-50.70757675 102.88694763]
[-61.64800262 92.61817169]
[-69.24387360 79.69577026]
[-72.88697815 65.17133331]
[-72.29035187 50.22405243]
[-86.51712799 45.47023392]
[-93.16442108 46.42995834]
[-98.47341919 44.18366623]
[-101.22962952 40.21141434]
[-115.24634552 34.86989975]
[-129.26306152 29.52838898]
[-143.27976990 24.18687630]
[-156.19882202 32.78208542]
[-171.70127869 32.10848999]
[-183.82611084 22.42510033]
[-187.91107178 7.45537567]
[-182.38543701 -7.04451704]
[-169.37390137 -15.49907398]
[-153.87966919 -14.65734577]
[-141.86059570 -4.84299421]
[-137.93826294 10.17016220]
[-123.92154694 15.51167488]
[-109.90483093 20.85318756]
[-95.88811493 26.19470024]
[-81.76331329 31.24345589]
[-67.53653717 35.99727249]
[-59.02747345 23.69389153]
[-47.38455582 14.27721405]
[-33.54598236 8.51703548]
[-18.62997818 6.88806725]
[-3.84444618 9.53082180]
[9.61085415 16.23953819]
[20.64165688 26.47817421]
[28.34818268 39.42323303]
[32.09853363 54.02998352]
[31.58049202 69.11678314]
[45.80727005 73.87059784]
[60.03404999 78.62441254]
[74.26082611 83.37822723]
[88.48760986 88.13204193]
[78.28153229 77.13949585]
[65.49809265 69.29197693]
[55.51977921 58.09227371]
[49.19390869 44.49141693]
[47.05763245 29.64431763]
[49.29235840 14.81171989]
[55.70832443 1.25312865]
[65.76071930 -9.88012695]
[78.59593964 -17.64266777]
[93.12409210 -21.37533951]
[108.11151123 -20.76118088]
[122.28555298 -15.85234261]
[134.44261169 -7.06566048]
[143.55038452 4.85274649]
[148.83549500 18.89082718]
[149.84913635 33.85653687]
[146.50524902 48.47906876]
[139.08776855 61.51674652]
[128.22731018 71.86196136]
[117.35543823 82.19649506]
[131.85104370 78.33933258]
[146.34663391 74.48217773]
[160.84222412 70.62501526]
[175.33782959 66.76785278]
[189.83341980 62.91069794]
[204.32902527 59.05353546]
[218.82461548 55.19637680]
[207.59814453 45.24819183]
[208.16334534 30.25884628]
[220.10710144 21.18433380]
[234.69949341 24.65739250]
[241.27465820 38.13949585]
[235.02720642 51.77589417]
[249.84495544 49.44478989]
[264.66271973 47.11368561]
[271.60150146 33.23446655]
[285.38858032 26.11435699]
[300.72256470 28.49118805]
[311.70715332 39.45101929]
[314.11862183 54.77956772]
[307.02969360 68.58270264]
[293.16616821 75.55282593]
[277.85888672 73.00978851]
[266.99380493 61.93144608]
[252.17605591 64.26255035]
[237.35830688 66.59365082]
[222.68177795 69.69197083]
[208.18618774 73.54913330]
[193.69058228 77.40629578]
[179.19499207 81.26345062]
[164.69938660 85.12061310]
[150.20379639 88.97776794]
[135.70819092 92.83493042]
[121.21260071 96.69209290]
[136.20922852 97.00997162]
[147.12130737 107.30204010]
[148.31489563 122.25447845]
[139.17373657 134.14730835]
[124.41744995 136.84022522]
[111.66472626 128.94288635]
[107.50000000 114.53066254]
[107.50000000 129.53065491]
[107.50000000 144.53065491]
[107.50000000 159.53065491]
[107.50000000 174.53065491]
[107.50000000 189.53065491]
[107.50000000 204.53065491]
[107.50000000 219.53065491]
[107.50000000 234.53065491]
[107.50000000 249.53065491]
[122.03988647 253.59197998]
[134.94427490 261.42648315]
[145.25555420 272.45281982]
[152.20857239 285.85275269]
[155.28736877 300.63189697]
[154.26348877 315.69357300]
[149.21287537 329.92010498]
[140.51036072 342.25576782]
[128.80169678 351.78518677]
[114.95575714 357.80120850]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 70]
[22 69]
[23 68]
[24 67]
[25 66]
[35 56]
[36 55]
[39 54]
[40 53]
[41 52]
[42 51]
[90 124]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
[97 117]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
