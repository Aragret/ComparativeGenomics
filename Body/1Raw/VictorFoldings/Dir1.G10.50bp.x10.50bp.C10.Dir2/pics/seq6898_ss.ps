%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAUUUCACCUGGGGGGGGGGCCGCUACCAUAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGAxxxxxxxxxxACGUCAUUAUUGGCUCAACUUUCCUCACUAUCUGCUUCAUCCGCCAACUACCCCCCCCCCAUAUUUCACUU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 384.72821045]
[71.01555634 379.17520142]
[58.81560135 370.30886841]
[49.20452881 358.68655396]
[42.78650284 345.03884888]
[39.96496582 330.22366333]
[40.91728210 315.17230225]
[45.58358765 300.83087158]
[53.67055511 288.10092163]
[64.66983032 277.78262329]
[77.88998413 270.52465820]
[92.50000000 266.78323364]
[92.50000000 251.78321838]
[92.50000000 236.78321838]
[92.50000000 221.78321838]
[92.50000000 206.78321838]
[92.50000000 191.78321838]
[92.50000000 176.78321838]
[92.50000000 161.78321838]
[92.50000000 146.78321838]
[92.50000000 131.78321838]
[74.71809387 123.36926270]
[64.22354889 105.52233887]
[65.64153290 83.83273315]
[51.39484406 79.13893127]
[37.14815140 74.44512939]
[22.90145874 69.75132751]
[14.60820770 82.34725189]
[3.34579611 92.35942078]
[-10.11406612 99.10982513]
[-24.85117340 102.14369202]
[-39.85973358 101.26008606]
[-54.11702347 96.52524567]
[-66.65305328 88.26761627]
[-76.61660004 77.05512238]
[-83.33296967 63.65605545]
[-86.34969330 48.98648834]
[-85.46701813 34.04760361]
[-99.71370697 29.35380173]
[-113.96040344 24.65999985]
[-124.91236115 35.35173416]
[-139.58184814 39.71805573]
[-154.59791565 36.75560760]
[-166.50999451 27.14514732]
[-172.58078003 13.09508419]
[-171.41522217 -2.16597986]
[-163.28118896 -15.13116360]
[-150.04780579 -22.82116318]
[-134.75599670 -23.46887207]
[-120.91973877 -16.92545319]
[-111.71847534 -4.69453382]
[-109.26660156 10.41330814]
[-95.01990509 15.10710907]
[-80.77321625 19.80090904]
[-72.60320282 7.26295090]
[-61.45753098 -2.74058867]
[-48.09194565 -9.52333164]
[-33.41481781 -12.61756611]
[-18.42539787 -11.80649185]
[-4.14579010 -7.13939810]
[8.44874859 1.07128203]
[18.49641228 12.27088642]
[25.30781174 25.69998741]
[28.41328239 40.44588470]
[27.59525871 55.50463867]
[41.84194946 60.19843674]
[56.08864212 64.89223480]
[70.33533478 69.58603668]
[82.75364685 61.17263031]
[83.67706299 46.20108032]
[84.60047913 31.22952843]
[71.07642365 24.22811317]
[61.57438660 12.32722092]
[57.74065781 -2.41124582]
[60.23945236 -17.43375969]
[68.63784027 -30.13757896]
[81.48074341 -38.32168961]
[96.54306030 -40.56814575]
[111.21514130 -36.48773575]
[122.95497894 -26.78741264]
[129.72856140 -13.14781857]
[130.36231995 2.06790471]
[124.74645996 16.22354126]
[113.85396576 26.86654282]
[99.57202911 32.15294266]
[98.64861298 47.12449265]
[97.72519684 62.09604263]
[108.56446838 64.37177277]
[117.90606689 69.56216431]
[125.02384186 77.00440216]
[129.44288635 85.87415314]
[144.09561157 82.66516113]
[158.74833679 79.45616150]
[173.40106201 76.24716187]
[188.05378723 73.03816986]
[187.95552063 57.98213959]
[190.99009705 43.23476791]
[197.02488708 29.44074440]
[205.79605103 17.20308685]
[216.92016602 7.05677080]
[229.91093445 -0.55464882]
[244.20045471 -5.29843378]
[259.16403198 -6.96720648]
[274.14755249 -5.48801565]
[288.49597168 -0.92552418]
[301.58206177 6.52081490]
[312.83374023 16.52547836]
[321.75915527 28.65110779]
[327.96807861 42.36762238]
[331.18914795 57.07539368]
[331.28149414 72.13146210]
[328.24111938 86.87763977]
[322.20089722 100.66928101]
[313.42492676 112.90348816]
[302.29681396 123.04543304]
[289.30303955 130.65173340]
[275.01165771 135.38990784]
[260.04742432 137.05278015]
[245.06449890 135.56770325]
[230.71786499 130.99957275]
[217.63470459 123.54808044]
[206.38696289 113.53898621]
[197.46633911 101.40985107]
[191.26278687 87.69089508]
[176.61006165 90.89988708]
[161.95733643 94.10888672]
[147.30461121 97.31788635]
[132.65188599 100.52687836]
[130.71122742 111.10154724]
[125.44176483 120.47290802]
[117.41467285 127.62522125]
[107.50000000 131.78321838]
[107.50000000 146.78321838]
[107.50000000 161.78321838]
[107.50000000 176.78321838]
[107.50000000 191.78321838]
[107.50000000 206.78321838]
[107.50000000 221.78321838]
[107.50000000 236.78321838]
[107.50000000 251.78321838]
[107.50000000 266.78323364]
[122.11001587 270.52465820]
[135.33016968 277.78262329]
[146.32945251 288.10092163]
[154.41641235 300.83087158]
[159.08271790 315.17230225]
[160.03503418 330.22366333]
[157.21350098 345.03884888]
[150.79547119 358.68655396]
[141.18440247 370.30886841]
[128.98443604 379.17520142]
[114.96250153 384.72821045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 68]
[25 67]
[26 66]
[27 65]
[38 54]
[39 53]
[40 52]
[69 87]
[70 86]
[71 85]
[91 128]
[92 127]
[93 126]
[94 125]
[95 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
