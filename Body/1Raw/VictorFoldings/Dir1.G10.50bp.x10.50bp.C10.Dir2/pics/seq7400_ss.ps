%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCCAUGAGGGGGGGGGGCUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAxxxxxxxxxxGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACAUUACUGCCACCCCCCCCCCGCCACCAUGA\
) } def
/len { sequence length } bind def

/coor [
[140.78315735 415.32894897]
[126.93721771 409.31292725]
[115.22855377 399.78350830]
[106.52603149 387.44784546]
[101.47542572 373.22131348]
[100.45153809 358.15963745]
[103.53033447 343.38046265]
[110.48336029 329.98052979]
[120.79463959 318.95419312]
[133.69902039 311.11968994]
[148.23890686 307.05838013]
[148.23890686 292.05838013]
[148.23890686 277.05838013]
[148.23890686 262.05838013]
[148.23890686 247.05838013]
[148.23890686 232.05838013]
[148.23890686 217.05838013]
[148.23890686 202.05838013]
[148.23890686 187.05838013]
[148.23890686 172.05838013]
[135.54397583 164.06846619]
[122.01979065 170.55664062]
[108.49559784 177.04479980]
[94.97141266 183.53295898]
[81.44721985 190.02113342]
[69.78176880 202.32371521]
[54.73065567 194.51985168]
[58.06298447 177.89660645]
[74.95905304 176.49693298]
[88.48324585 170.00877380]
[102.00743866 163.52061462]
[115.53162384 157.03244019]
[129.05581665 150.54428101]
[138.07334900 138.55744934]
[140.55847168 123.76473999]
[143.04357910 108.97203064]
[123.10700989 133.08160400]
[94.65986633 136.34613037]
[74.02585602 120.54965973]
[70.60574341 97.45805359]
[56.48093796 92.40930176]
[42.35613632 87.36054230]
[28.23133087 82.31179047]
[13.17397976 87.84854889]
[-0.46765900 79.40548706]
[-2.22888660 63.45940399]
[9.24135971 52.24276352]
[25.14408875 54.36001587]
[33.28008652 68.18698120]
[47.40489197 73.23574066]
[61.52969360 78.28450012]
[75.65449524 83.33325195]
[84.60873413 66.64333344]
[104.64646149 56.27749252]
[96.65654755 43.58256149]
[88.66662598 30.88763237]
[80.67671204 18.19270134]
[72.68679810 5.49777269]
[64.69687653 -7.19715691]
[56.70696259 -19.89208603]
[43.15288162 -30.07654762]
[49.18719101 -45.92026901]
[66.08219147 -44.50776291]
[69.40189362 -27.88200378]
[77.39180756 -15.18707371]
[85.38172150 -2.49214363]
[93.37164307 10.20278549]
[101.36155701 22.89771461]
[109.35147095 35.59264374]
[117.34139252 48.28757477]
[124.82678223 48.75539017]
[123.90124512 33.78396988]
[122.97570801 18.81255150]
[118.90674591 4.37497807]
[128.33000183 -7.29558897]
[143.30078125 -6.35974598]
[151.19728088 6.39350176]
[145.36235046 20.21164894]
[142.57997131 34.95133209]
[139.79757690 49.69101715]
[147.28297424 50.15883255]
[156.79133606 38.55749130]
[159.32507324 20.34870148]
[175.92488098 14.74097824]
[185.18981934 2.94433880]
[194.45477295 -8.85230160]
[203.71972656 -20.64894104]
[199.35119629 -35.53838730]
[204.60047913 -50.14060211]
[217.44911194 -58.84073639]
[232.95652771 -58.29341125]
[245.15982056 -48.70908356]
[249.36656189 -33.77312469]
[243.95918274 -19.22871208]
[231.01693726 -10.66847229]
[215.51635742 -11.38399220]
[206.25141907 0.41264802]
[196.98646545 12.20928764]
[187.72151184 24.00592804]
[188.84582520 36.09076309]
[181.16769409 46.00365448]
[168.39266968 48.06584930]
[158.88430786 59.66719055]
[161.84429932 66.55838013]
[175.62677002 60.63864517]
[181.54627991 74.42122650]
[167.76425171 80.34075928]
[170.72424316 87.23195648]
[185.68449402 88.32326508]
[200.64474487 89.41457367]
[215.60498047 90.50588226]
[230.56523132 91.59719849]
[243.59587097 82.23865509]
[258.99740601 86.72996521]
[264.95513916 101.62577820]
[256.89877319 115.49929810]
[241.00846863 117.70794678]
[229.47392273 106.55744171]
[214.51367188 105.46613312]
[199.55342102 104.37482452]
[184.59318542 103.28351593]
[169.63293457 102.19219971]
[157.83628845 111.45715332]
[155.35116577 126.24985504]
[152.86605835 141.04257202]
[157.69239807 144.12519836]
[161.62991333 148.46040344]
[164.35379028 153.79090881]
[165.61395264 159.77549744]
[165.25646973 166.01078796]
[163.23890686 172.05838013]
[163.23890686 187.05838013]
[163.23890686 202.05838013]
[163.23890686 217.05838013]
[163.23890686 232.05838013]
[163.23890686 247.05838013]
[163.23890686 262.05838013]
[163.23890686 277.05838013]
[163.23890686 292.05838013]
[163.23890686 307.05838013]
[177.77879333 311.11968994]
[190.68318176 318.95419312]
[200.99446106 329.98052979]
[207.94747925 343.38046265]
[211.02629089 358.15963745]
[210.00239563 373.22131348]
[204.95179749 387.44784546]
[196.24926758 399.78350830]
[184.54060364 409.31292725]
[170.69467163 415.32894897]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[24 30]
[25 29]
[34 125]
[35 124]
[36 123]
[40 52]
[41 51]
[42 50]
[43 49]
[54 70]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[60 64]
[81 103]
[82 102]
[84 99]
[85 98]
[86 97]
[87 96]
[108 122]
[109 121]
[110 120]
[111 119]
[112 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
