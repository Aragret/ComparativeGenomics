%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUCUCCAUCUGGGGGGGGGGAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCCAAxxxxxxxxxxCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUACCCCCCCCCCGUCUCAAUCU\
) } def
/len { sequence length } bind def

/coor [
[100.14993286 371.49514771]
[86.30399323 365.47912598]
[74.59532928 355.94970703]
[65.89280701 343.61401367]
[60.84220505 329.38751221]
[59.81831360 314.32583618]
[62.89711380 299.54666138]
[69.85013580 286.14672852]
[80.16142273 275.12039185]
[93.06580353 267.28588867]
[107.60569000 263.22457886]
[107.60569000 248.22457886]
[107.60569000 233.22457886]
[107.60569000 218.22457886]
[107.60569000 203.22457886]
[107.60569000 188.22457886]
[107.60569000 173.22457886]
[107.60569000 158.22457886]
[107.60569000 143.22457886]
[107.60569000 128.22457886]
[94.99567413 127.69129181]
[84.26647949 122.00153351]
[77.32099915 112.62604523]
[75.18887329 101.63961029]
[77.88726807 91.26980591]
[66.38546753 81.64127350]
[54.88366318 72.01274872]
[41.56850815 65.10575104]
[26.24279213 69.03424072]
[15.93309879 58.28438187]
[1.43750179 54.42721939]
[-13.05809498 50.57006073]
[-18.22085381 51.97202682]
[-22.91906929 51.27982712]
[-26.42080688 49.03494263]
[-28.32293510 45.99365997]
[-42.54971313 41.23984528]
[-56.77649307 36.48603058]
[-68.68681335 41.54549408]
[-80.46524048 37.24576569]
[-85.95082855 26.41915131]
[-100.07563019 21.37039566]
[-114.20043945 16.32164001]
[-128.32524109 11.27288342]
[-145.27531433 11.63524532]
[-150.31576538 -4.55210209]
[-136.15635681 -13.87667179]
[-123.27648163 -2.85191989]
[-109.15167999 2.19683647]
[-95.02687836 7.24559259]
[-80.90207672 12.29434872]
[-63.86617279 8.19825745]
[-52.02267838 22.25925064]
[-37.79589844 27.01306534]
[-23.56912041 31.76688004]
[-9.20093536 36.07446289]
[5.29466105 39.93162537]
[19.79025841 43.78878403]
[34.07915115 39.58440399]
[45.42566681 50.61015701]
[35.03242493 39.79440308]
[27.87530136 26.61200523]
[24.46559334 12.00468254]
[25.04687691 -2.98405004]
[29.57762909 -17.28343010]
[37.73418427 -29.87194252]
[48.93385315 -39.85029221]
[62.37655640 -46.50564194]
[77.10197449 -49.36255646]
[92.05816650 -48.21694183]
[106.17668152 -43.15063477]
[118.44893646 -34.52556229]
[127.99821472 -22.95788383]
[134.14234924 -9.27396488]
[136.44241333 5.54864359]
[134.73408508 20.45104790]
[129.13941956 34.36865234]
[120.05808258 46.30721283]
[108.13881683 55.41386795]
[94.23311615 61.03805542]
[79.33437347 62.77799988]
[64.51219177 60.51094818]
[76.01399231 70.13947296]
[87.51579285 79.76799774]
[104.50328827 74.80638123]
[121.58503723 83.10289001]
[129.16856384 101.91527557]
[143.87652588 98.96979523]
[158.58448792 96.02431488]
[173.29244995 93.07882690]
[175.61776733 82.12271118]
[182.90750122 72.77917480]
[194.13436890 67.27843475]
[207.28799438 67.23169708]
[219.73171997 73.21103668]
[233.74842834 67.86952209]
[247.76515198 62.52800751]
[261.78186035 57.18649673]
[275.79858398 51.84498215]
[282.75781250 45.82660675]
[290.16284180 46.54147720]
[304.28765869 41.49272156]
[318.41244507 36.44396591]
[331.29232788 25.41921425]
[345.45172119 34.74378204]
[340.41128540 50.93112946]
[323.46121216 50.56876755]
[309.33639526 55.61752319]
[295.21160889 60.66628265]
[281.14007568 65.86169434]
[267.12338257 71.20320892]
[253.10665894 76.54472351]
[239.08995056 81.88623047]
[225.07322693 87.22774506]
[225.69720459 102.21475983]
[240.10942078 106.37265015]
[254.52163696 110.53054047]
[268.93386841 114.68842316]
[285.82833862 113.26950073]
[291.86865234 129.11093140]
[278.31845093 139.30053711]
[264.77597046 129.10064697]
[250.36375427 124.94275665]
[235.95153809 120.78486633]
[221.53932190 116.62697601]
[194.67037964 123.80041504]
[176.23793030 107.78678894]
[161.52996826 110.73227692]
[146.82200623 113.67775726]
[132.11404419 116.62323761]
[122.60569000 128.22457886]
[122.60569000 143.22457886]
[122.60569000 158.22457886]
[122.60569000 173.22457886]
[122.60569000 188.22457886]
[122.60569000 203.22457886]
[122.60569000 218.22457886]
[122.60569000 233.22457886]
[122.60569000 248.22457886]
[122.60569000 263.22457886]
[137.14556885 267.28588867]
[150.04995728 275.12039185]
[160.36123657 286.14672852]
[167.31425476 299.54666138]
[170.39306641 314.32583618]
[169.36917114 329.38751221]
[164.31857300 343.61401367]
[155.61604309 355.94970703]
[143.90737915 365.47912598]
[130.06144714 371.49514771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 84]
[26 83]
[27 82]
[28 60]
[30 58]
[31 57]
[32 56]
[36 55]
[37 54]
[38 53]
[41 51]
[42 50]
[43 49]
[44 48]
[87 130]
[88 129]
[89 128]
[90 127]
[95 114]
[96 113]
[97 112]
[98 111]
[99 110]
[101 109]
[102 108]
[103 107]
[115 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
