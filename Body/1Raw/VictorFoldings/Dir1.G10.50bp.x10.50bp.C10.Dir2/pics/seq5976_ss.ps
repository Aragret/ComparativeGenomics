%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGAGCCUUCAAAGGGGGGGGGGGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAxxxxxxxxxxCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCAACUAUAGCCCCCCCCCCCAACAGCCUUCAUAG\
) } def
/len { sequence length } bind def

/coor [
[101.94203949 586.06646729]
[87.50516510 581.82702637]
[74.13162994 574.93170166]
[62.30487823 565.62988281]
[52.45244598 554.25769043]
[44.93048859 541.22631836]
[40.01091766 527.00683594]
[37.87157822 512.11322021]
[38.58980179 497.08389282]
[42.13962936 482.46215820]
[48.39273071 468.77658081]
[57.12306213 456.52185059]
[68.01502991 446.14105225]
[80.67489624 438.00933838]
[94.64501190 432.42077637]
[109.42037201 429.57730103]
[109.42037201 414.57730103]
[109.42037201 399.57730103]
[109.42037201 384.57730103]
[109.42037201 369.57730103]
[109.42037201 354.57730103]
[109.42037201 339.57730103]
[109.42037201 324.57730103]
[109.42037201 309.57730103]
[109.42037201 294.57730103]
[109.42037201 279.57730103]
[97.85881042 289.13397217]
[82.90998840 287.89596558]
[73.07808685 276.56750488]
[73.95632935 261.59323120]
[85.04511261 251.49180603]
[100.03616333 252.00976562]
[110.40064240 262.85083008]
[112.15280151 247.95350647]
[113.75953674 233.03981018]
[115.22068787 218.11114502]
[116.68184662 203.18247986]
[118.14299774 188.25381470]
[119.60414886 173.32514954]
[121.06530762 158.39648438]
[122.52645874 143.46781921]
[123.98761749 128.53915405]
[110.31057739 134.56404114]
[95.85617065 134.60980225]
[83.04293823 129.05917358]
[73.86064148 119.19942474]
[69.56243896 106.94866943]
[70.50140381 94.49135590]
[76.13097382 83.89087677]
[85.15981293 76.74784088]
[80.83181000 62.38579178]
[76.50380707 48.02374649]
[72.17579651 33.66169739]
[67.84779358 19.29965210]
[63.51979065 4.93760633]
[48.59664917 6.78362751]
[33.57618713 6.08090258]
[18.89058304 2.84964991]
[4.96236467 -2.81716084]
[-7.80772352 -10.75648403]
[-19.05226135 -20.73988914]
[-28.44771957 -32.48013306]
[-35.72377396 -45.63943100]
[-40.67107773 -59.83915710]
[-43.14728546 -74.67075348]
[-43.08115005 -89.70749664]
[-40.47457886 -104.51674652]
[-35.40256882 -118.67240906]
[-28.01104546 -131.76719666]
[-18.51268387 -143.42434692]
[-7.18076706 -153.30845642]
[5.65866184 -161.13514709]
[19.63618660 -166.67922974]
[34.34964752 -169.78117371]
[49.37570572 -170.35174561]
[64.28203583 -168.37454224]
[78.63974762 -163.90641785]
[92.03574371 -157.07595825]
[104.08460236 -148.07966614]
[114.43963623 -137.17640686]
[122.80292511 -124.67987061]
[128.93383789 -110.94961548]
[132.65597534 -96.38068390]
[133.86224365 -81.39225769]
[132.51792908 -66.41558075]
[128.66171265 -51.88156509]
[122.40456390 -38.20838165]
[113.92649078 -25.78943062]
[103.47142792 -14.98203659]
[91.34020233 -6.09714699]
[77.88183594 0.60960186]
[82.20983887 14.97164822]
[86.53784943 29.33369446]
[90.86585236 43.69573975]
[95.19385529 58.05778885]
[99.52185822 72.41983795]
[109.42246246 70.65922546]
[120.30123138 72.66524506]
[130.68675232 78.82897949]
[142.41423035 69.47663116]
[154.14170837 60.12428284]
[159.62603760 44.66937637]
[175.79948425 41.95798874]
[186.02418518 54.77935791]
[179.78184509 69.94396210]
[163.49404907 71.85175323]
[151.76657104 81.20410156]
[140.03910828 90.55644989]
[146.28242493 104.19539642]
[161.02543640 101.43069458]
[175.76844788 98.66598511]
[181.47874451 84.33433533]
[194.04408264 75.38360596]
[209.45492554 74.66992950]
[222.79373169 82.42104340]
[229.80413818 96.16360474]
[228.24913025 111.51239777]
[218.62492371 123.56968689]
[204.00256348 128.48803711]
[189.04798889 124.69801331]
[178.53315735 113.40900421]
[163.79014587 116.17370605]
[149.04713440 118.93840790]
[138.91627502 130.00032043]
[137.45512390 144.92898560]
[135.99397278 159.85765076]
[134.53282166 174.78631592]
[133.07167053 189.71498108]
[131.61050415 204.64363098]
[130.14935303 219.57229614]
[128.68820190 234.50096130]
[130.97451782 243.39807129]
[127.05011749 249.70567322]
[125.29795837 264.60299683]
[124.42037201 279.57730103]
[124.42037201 294.57730103]
[124.42037201 309.57730103]
[124.42037201 324.57730103]
[124.42037201 339.57730103]
[124.42037201 354.57730103]
[124.42037201 369.57730103]
[124.42037201 384.57730103]
[124.42037201 399.57730103]
[124.42037201 414.57730103]
[124.42037201 429.57730103]
[139.19572449 432.42077637]
[153.16584778 438.00933838]
[165.82571411 446.14105225]
[176.71768188 456.52185059]
[185.44801331 468.77658081]
[191.70111084 482.46215820]
[195.25094604 497.08389282]
[195.96916199 512.11322021]
[193.82981873 527.00683594]
[188.91024780 541.22631836]
[181.38829041 554.25769043]
[171.53585815 565.62988281]
[159.70912170 574.93170166]
[146.33558655 581.82702637]
[131.89871216 586.06646729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 135]
[33 134]
[34 133]
[35 131]
[36 130]
[37 129]
[38 128]
[39 127]
[40 126]
[41 125]
[42 124]
[50 96]
[51 95]
[52 94]
[53 93]
[54 92]
[55 91]
[99 108]
[100 107]
[101 106]
[109 123]
[110 122]
[111 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
