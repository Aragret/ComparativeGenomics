%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAACUUUACGGGGGGGGGGAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCxxxxxxxxxxACAGCACCAAAUCUCCACCUCCAUCAUCACCUCAACCCAAAAAGGCAUAACCCCCCCCCCUUAAACUUUAC\
) } def
/len { sequence length } bind def

/coor [
[81.42596436 374.59844971]
[67.40402222 369.04544067]
[55.20406342 360.17910767]
[45.59299088 348.55679321]
[39.17496490 334.90908813]
[36.35342789 320.09390259]
[37.30574417 305.04254150]
[41.97204971 290.70111084]
[50.05901718 277.97116089]
[61.05829239 267.65289307]
[74.27845001 260.39489746]
[88.88846588 256.65347290]
[88.88846588 241.65347290]
[88.88846588 226.65347290]
[88.88846588 211.65347290]
[88.88846588 196.65347290]
[88.88846588 181.65347290]
[88.88846588 166.65347290]
[88.88846588 151.65347290]
[88.88846588 136.65347290]
[88.88846588 121.65347290]
[77.29941559 112.13013458]
[62.58389282 115.03761292]
[54.73807526 125.32579803]
[42.37705994 127.41785431]
[32.25343704 120.72648621]
[17.48131943 123.33120728]
[2.70920300 125.93593597]
[-12.06291294 128.54064941]
[-26.83502960 131.14538574]
[-34.49660873 144.77748108]
[-49.14642334 150.24711609]
[-63.86728668 144.97167969]
[-71.70845032 131.44207764]
[-68.96756744 116.04656982]
[-56.93878174 106.05445099]
[-41.30173492 106.18368530]
[-29.43975258 116.37326050]
[-14.66763592 113.76853943]
[0.10448023 111.16381836]
[14.87659645 108.55909729]
[29.64871216 105.95436859]
[42.42559052 93.96287537]
[59.67641830 100.32209015]
[74.39194489 97.41461945]
[76.44441223 90.20092010]
[62.01702881 86.09597778]
[47.58971405 81.99079132]
[51.69513702 67.56354523]
[66.12197876 71.66859436]
[80.54936218 75.77353668]
[82.60182953 68.55984497]
[71.62103271 58.34114075]
[60.64022827 48.12243271]
[44.54513550 44.97917557]
[39.47637177 29.38303185]
[50.64824295 17.37797928]
[66.56808472 21.31378365]
[70.85893250 37.14162827]
[81.83973694 47.36033630]
[92.82054138 57.57904434]
[107.80789185 56.96321869]
[117.91333008 45.87808609]
[128.01876831 34.79294968]
[118.00368500 23.60861969]
[109.17150879 11.46845150]
[101.61286926 -1.50297666]
[95.40532684 -15.17255688]
[90.61257935 -29.40001678]
[87.28381348 -44.03935623]
[85.45318604 -58.94035721]
[85.13948059 -73.95011139]
[86.34591675 -88.91458130]
[89.06011200 -103.68022156]
[93.25421906 -118.09551239]
[98.88520050 -132.01251221]
[105.89526367 -145.28843689]
[114.21248627 -157.78703308]
[123.75151062 -169.38003540]
[134.41445923 -179.94851685]
[146.09190369 -189.38398743]
[158.66401672 -197.58966064]
[172.00180054 -204.48130798]
[185.96836853 -209.98820496]
[200.42039490 -214.05386353]
[215.20960999 -216.63655090]
[230.18423462 -217.70976257]
[245.19059753 -217.26249695]
[260.07470703 -215.29933167]
[274.68383789 -211.84042358]
[288.86810303 -206.92124939]
[302.48190308 -200.59231567]
[315.38552856 -192.91853333]
[327.44662476 -183.97866821]
[338.54138184 -173.86445618]
[348.55596924 -162.67968750]
[357.38760376 -150.53912354]
[364.94567871 -137.56736755]
[371.15261841 -123.89751434]
[375.94476318 -109.66984558]
[379.27285767 -95.03035736]
[381.10284424 -80.12927246]
[381.41589355 -65.11951447]
[380.20880127 -50.15509033]
[377.49395752 -35.38956833]
[373.29919434 -20.97446632]
[367.66760254 -7.05770683]
[360.65695190 6.21790123]
[352.33920288 18.71612930]
[342.79965210 30.30872345]
[332.13623047 40.87672806]
[320.45837402 50.31169128]
[307.88589478 58.51680374]
[294.54782104 65.40785980]
[280.58102417 70.91415405]
[266.12881470 74.97917175]
[251.33947754 77.56121063]
[236.36480713 78.63376617]
[221.35845947 78.18583679]
[206.47444153 76.22202301]
[191.86544800 72.76246643]
[177.68142700 67.84266663]
[164.06790161 61.51312637]
[151.16459656 53.83877945]
[139.10389709 44.89838409]
[128.99845886 55.98352051]
[118.89302826 67.06865692]
[129.43696594 81.49019623]
[131.49610901 97.70574188]
[125.96652985 111.46832275]
[115.57122803 119.80475616]
[103.88846588 121.65347290]
[103.88846588 136.65347290]
[103.88846588 151.65347290]
[103.88846588 166.65347290]
[103.88846588 181.65347290]
[103.88846588 196.65347290]
[103.88846588 211.65347290]
[103.88846588 226.65347290]
[103.88846588 241.65347290]
[103.88846588 256.65347290]
[118.49847412 260.39489746]
[131.71862793 267.65289307]
[142.71791077 277.97116089]
[150.80487061 290.70111084]
[155.47117615 305.04254150]
[156.42349243 320.09390259]
[153.60195923 334.90908813]
[147.18392944 348.55679321]
[137.57286072 360.17910767]
[125.37290955 369.04544067]
[111.35095978 374.59844971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 45]
[23 44]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[52 61]
[53 60]
[54 59]
[62 127]
[63 126]
[64 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
