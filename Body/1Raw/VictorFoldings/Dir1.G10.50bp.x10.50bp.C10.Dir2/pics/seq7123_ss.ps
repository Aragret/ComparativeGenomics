%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACCUAGGGGGGGGGGCGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAACUUUCUxxxxxxxxxxUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCACCCCCCCCCCACCACACCUA\
) } def
/len { sequence length } bind def

/coor [
[48.04966354 358.55169678]
[34.20372391 352.53567505]
[22.49506378 343.00625610]
[13.79253864 330.67059326]
[8.74193668 316.44406128]
[7.71804571 301.38238525]
[10.79684448 286.60324097]
[17.74986649 273.20330811]
[28.06114960 262.17697144]
[40.96553040 254.34246826]
[55.50541687 250.28114319]
[55.50541687 235.28114319]
[55.50541687 220.28114319]
[55.50541687 205.28114319]
[55.50541687 190.28114319]
[55.50541687 175.28114319]
[55.50541687 160.28114319]
[55.50541687 145.28114319]
[55.50541687 130.28114319]
[55.50541687 115.28115082]
[44.95412827 104.61952209]
[29.95493889 104.46348572]
[14.95575142 104.30744934]
[-0.04343702 104.15141296]
[-14.86119556 106.48252106]
[-29.08797455 111.23633575]
[-43.31475449 115.99015045]
[-51.73664474 129.64486694]
[-67.67997742 131.43081665]
[-78.91439819 119.97798920]
[-76.82180786 104.07199097]
[-63.00747681 95.91455841]
[-48.06856918 101.76336670]
[-33.84178925 97.00955200]
[-19.61500931 92.25573730]
[-34.16972733 88.62804413]
[-46.65944672 80.32099915]
[-55.63199234 68.30046082]
[-60.04413223 53.96403885]
[-59.38288116 38.97861862]
[-53.72511292 25.08654976]
[-43.72865295 13.90304279]
[-30.55578232 6.72839928]
[-15.73810101 4.39680767]
[-0.99844736 7.17936087]
[11.94941235 14.75253296]
[21.60004044 26.23579788]
[26.83136559 40.29400635]
[27.03514862 55.29262161]
[22.18769264 69.48777008]
[12.85261059 81.22898865]
[0.11259954 89.15222931]
[15.11178780 89.30826569]
[30.11097717 89.46430206]
[45.11016464 89.62033844]
[30.11552620 89.21928406]
[17.93709946 80.46224213]
[12.78341198 66.37538147]
[16.43543625 51.82675171]
[27.63113213 41.84394455]
[42.50157928 39.87675476]
[55.90795517 46.60498047]
[63.21739197 59.70353699]
[61.90381241 74.64624786]
[63.46139526 59.72733307]
[65.01897430 44.80842209]
[66.57655334 29.88950920]
[52.53699112 24.34034729]
[40.51589584 15.20821667]
[31.40531158 3.17078042]
[25.88130951 -10.87870216]
[24.35380363 -25.89766693]
[26.93614578 -40.77160645]
[33.43670654 -54.39677811]
[43.37310791 -65.76210022]
[56.00799561 -74.02419281]
[70.40378571 -78.56994629]
[85.49220276 -79.06204987]
[100.15359497 -75.46397400]
[113.29998779 -68.04272461]
[123.95583344 -57.34901047]
[131.33039856 -44.17637253]
[134.87643433 -29.50230408]
[134.33079529 -14.41572571]
[129.73399353 -0.03615832]
[121.42712402 12.56933880]
[110.02662659 22.46535301]
[96.37847900 28.91753578]
[81.49546814 31.44709015]
[79.93788910 46.36600113]
[78.38031006 61.28491592]
[76.82272339 76.20382690]
[100.17686462 63.83919525]
[127.55697632 72.25539398]
[141.33935547 66.33543396]
[155.12173462 60.41547012]
[168.90411377 54.49550629]
[182.68649292 48.57554245]
[184.41336060 33.31403732]
[193.55252075 20.97015953]
[207.64559937 14.86434937]
[222.90161133 16.63903999]
[235.21678162 25.81684685]
[241.27838135 39.92898941]
[239.45588684 55.17936707]
[230.23951721 67.46570587]
[216.10844421 73.48304749]
[200.86386108 71.61275482]
[188.60646057 62.35792542]
[174.82408142 68.27788544]
[161.04170227 74.19785309]
[147.25932312 80.11781311]
[133.47694397 86.03777313]
[133.24291992 93.53412628]
[148.23561096 94.00216675]
[163.22830200 94.47043610]
[162.75979614 109.46311951]
[147.76757812 108.99486542]
[132.77487183 108.52681732]
[132.54084778 116.02317047]
[145.92713928 122.79128265]
[160.86251831 117.62310028]
[175.04116821 124.60460663]
[180.05114746 139.59378052]
[172.92013550 153.69783020]
[157.87882996 158.54905701]
[143.85095215 151.26933289]
[139.15902710 136.17756653]
[125.77273560 129.40945435]
[93.29168701 135.53355408]
[70.50541687 115.28115082]
[70.50541687 130.28114319]
[70.50541687 145.28114319]
[70.50541687 160.28114319]
[70.50541687 175.28114319]
[70.50541687 190.28114319]
[70.50541687 205.28114319]
[70.50541687 220.28114319]
[70.50541687 235.28114319]
[70.50541687 250.28114319]
[85.04530334 254.34246826]
[97.94968414 262.17697144]
[108.26097107 273.20330811]
[115.21398926 286.60324097]
[118.29279327 301.38238525]
[117.26889801 316.44406128]
[112.21829987 330.67059326]
[103.51576996 343.00625610]
[91.80711365 352.53567505]
[77.96117401 358.55169678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 55]
[22 54]
[23 53]
[24 52]
[25 35]
[26 34]
[27 33]
[64 92]
[65 91]
[66 90]
[67 89]
[94 113]
[95 112]
[96 111]
[97 110]
[98 109]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
