%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGAGCAGAAGGGGGGGGGGCCCAACCUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUAxxxxxxxxxxCUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCCCCCCCCCCCGGAGCAGGA\
) } def
/len { sequence length } bind def

/coor [
[74.09122467 594.40765381]
[60.87102509 587.13519287]
[49.98422241 576.68817139]
[42.17309189 563.77893066]
[37.97021103 549.28759766]
[37.66213608 534.20227051]
[41.26987839 519.55145264]
[48.54745102 506.33407593]
[58.99865723 495.45129395]
[71.91091919 487.64514160]
[86.40385437 483.44787598]
[86.09180450 468.45111084]
[85.77974701 453.45434570]
[85.46768951 438.45761108]
[85.15563202 423.46084595]
[84.84357452 408.46411133]
[84.53151703 393.46734619]
[84.21946716 378.47058105]
[83.90740967 363.47384644]
[83.59535217 348.47708130]
[83.28329468 333.48031616]
[82.97123718 318.48358154]
[70.64595032 327.03268433]
[56.21753693 322.93133545]
[50.23200607 309.17730713]
[57.06429291 295.82366943]
[71.72055054 292.63085938]
[83.48794556 301.93194580]
[84.73482513 286.98385620]
[85.98169708 272.03576660]
[87.22856903 257.08767700]
[87.85254669 242.10067749]
[87.85254669 227.10067749]
[87.85254669 212.10067749]
[87.85254669 197.10067749]
[87.85254669 182.10067749]
[85.57086182 179.33274841]
[84.55146790 175.30006409]
[85.38391113 170.62466431]
[88.34980011 166.17234802]
[89.28543091 151.20155334]
[90.22105408 136.23075867]
[91.15668488 121.25997162]
[84.06972504 116.62579346]
[79.13710022 109.74320984]
[77.02588654 101.54299927]
[78.02159119 93.13412476]
[65.94160461 84.24177551]
[53.86161423 75.34942627]
[41.78162766 66.45707703]
[25.76850319 67.43656921]
[15.12607670 55.43163681]
[18.01830864 39.65144348]
[32.22652435 32.20119858]
[46.85139847 38.79609299]
[50.67397690 54.37708664]
[62.75396347 63.26943588]
[74.83395386 72.16178894]
[86.91394043 81.05413818]
[91.56916046 78.57311249]
[96.66686249 77.21665192]
[101.93949890 77.05596161]
[108.00251007 63.33590698]
[114.06552124 49.61585236]
[101.32498932 41.64970016]
[89.84789276 31.95140266]
[79.86788940 20.71840286]
[71.58816528 8.17938805]
[65.17727661 -5.41036129]
[60.76574707 -19.77417564]
[58.44338608 -34.61962509]
[58.25747681 -49.64447784]
[60.21180344 -64.54284668]
[64.26657867 -79.01142120]
[70.33925629 -92.75563049]
[78.30619049 -105.49567413]
[88.00520325 -116.97216797]
[99.23882294 -126.95147705]
[111.77834320 -135.23042297]
[125.36849213 -141.64047241]
[139.73257446 -146.05111694]
[154.57817078 -148.37255859]
[169.60304260 -148.55754089]
[184.50128174 -146.60227966]
[198.96960449 -142.54661560]
[212.71343994 -136.47309875]
[225.45298767 -128.50537109]
[236.92889404 -118.80564880]
[246.90750122 -107.57141113]
[255.18566895 -95.03137207]
[261.59487915 -81.44082642]
[266.00463867 -67.07646942]
[268.32516479 -52.23072815]
[268.50921631 -37.20585251]
[266.55303955 -22.30772781]
[262.49645996 -7.83965874]
[256.42208862 5.90380287]
[248.45358276 18.64285851]
[238.75314331 30.11815453]
[227.51829529 40.09607315]
[214.97773743 48.37347031]
[201.38681030 54.78183365]
[187.02217102 59.19069672]
[172.17628479 61.51029968]
[157.15139771 61.69342041]
[142.25340271 59.73632812]
[127.78557587 55.67886734]
[121.72256470 69.39891815]
[115.65955353 83.11897278]
[122.36994171 105.45676422]
[106.12747955 122.19560242]
[105.19184875 137.16639709]
[104.25621796 152.13717651]
[103.32058716 167.10797119]
[102.85254669 182.10067749]
[102.85254669 197.10067749]
[102.85254669 212.10067749]
[102.85254669 227.10067749]
[102.85254669 242.10067749]
[105.24497986 245.90037537]
[106.16865540 249.86495972]
[105.75797272 253.49995422]
[104.29773712 256.40884399]
[102.17665863 258.33456421]
[100.92978668 273.28265381]
[99.68290710 288.23074341]
[98.43603516 303.17883301]
[97.96799469 318.17150879]
[98.28005219 333.16827393]
[98.59210205 348.16503906]
[98.90415955 363.16177368]
[99.21621704 378.15853882]
[99.52827454 393.15527344]
[99.84033203 408.15203857]
[100.15238953 423.14880371]
[100.46443939 438.14553833]
[100.77649689 453.14230347]
[101.08855438 468.13906860]
[101.40061188 483.13580322]
[116.05560303 486.72656250]
[129.28141785 493.98883057]
[140.17628479 504.42742920]
[147.99737549 517.33062744]
[152.21144104 531.81872559]
[152.53117371 546.90380859]
[148.93473816 561.55743408]
[141.66737366 574.78039551]
[131.22457886 585.67126465]
[118.31835175 593.48736572]
[103.82865906 597.69586182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[28 127]
[29 126]
[30 125]
[31 124]
[32 119]
[33 118]
[34 117]
[35 116]
[36 115]
[40 114]
[41 113]
[42 112]
[43 111]
[47 59]
[48 58]
[49 57]
[50 56]
[62 109]
[63 108]
[64 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
