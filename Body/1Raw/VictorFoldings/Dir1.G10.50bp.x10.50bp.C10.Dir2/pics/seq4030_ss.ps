%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUCUCAGGGGGGGGGGGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCxxxxxxxxxxCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCCCCCCCCCCCAGUCUCAG\
) } def
/len { sequence length } bind def

/coor [
[99.26651764 482.42224121]
[90.16753387 470.40954590]
[84.08468628 456.62200928]
[81.34601593 441.80322266]
[82.09922028 426.75234985]
[86.30367279 412.28100586]
[93.73263550 399.16967773]
[103.98548126 388.12539673]
[116.50927734 379.74380493]
[130.62863159 374.47686768]
[128.76101685 359.59359741]
[126.89340210 344.71032715]
[125.02579498 329.82702637]
[123.15818024 314.94375610]
[121.29056549 300.06048584]
[119.42295074 285.17718506]
[117.40061951 270.31414795]
[115.22377777 255.47294617]
[113.04694366 240.63174438]
[110.87010956 225.79054260]
[101.36770630 214.32086182]
[107.02037811 199.54391479]
[104.84354401 184.70271301]
[102.66670227 169.86151123]
[100.48986816 155.02030945]
[85.79815674 153.15808105]
[72.13524628 147.44500732]
[60.49089050 138.29496765]
[51.70863342 126.37077332]
[46.42466736 112.53624725]
[45.02177429 97.79357910]
[30.25571823 95.15471649]
[15.48966217 92.51585388]
[0.72360712 89.87699127]
[-10.47304344 100.45721436]
[-25.57620811 102.39315033]
[-38.76728058 95.15024567]
[-45.08836365 81.68986511]
[-59.85441971 79.05099487]
[-74.62047577 76.41213226]
[-91.27627563 79.57768250]
[-98.92889404 64.44911194]
[-86.51000977 52.90755081]
[-71.98161316 61.64608002]
[-57.21555328 64.28494263]
[-42.44949722 66.92380524]
[-31.85752869 56.48598480]
[-16.97430992 54.26028061]
[-3.47654271 61.30752563]
[3.36247134 75.11093140]
[18.12852669 77.74980164]
[32.89458084 80.38866425]
[47.66063690 83.02752686]
[62.11810303 60.09466934]
[85.77158356 46.84902573]
[83.90397644 31.96574783]
[82.03636169 17.08246803]
[80.16874695 2.19918752]
[65.16578674 0.93232757]
[50.75419235 -3.42651677]
[37.56396484 -10.68679523]
[26.17173386 -20.53112030]
[17.07551384 -32.52914047]
[10.67295551 -46.15635300]
[7.24394846 -60.81703568]
[6.93839598 -75.87028503]
[9.76965523 -90.65803528]
[15.61395454 -104.53383636]
[24.21580696 -116.89109802]
[35.19917679 -127.18960571]
[48.08391953 -134.97915649]
[62.30676651 -139.91921997]
[77.24595642 -141.79385376]
[92.24842072 -140.52108765]
[106.65830231 -136.15658569]
[119.84566498 -128.89111328]
[131.23402405 -119.04230499]
[140.32553101 -107.04071045]
[146.72271729 -93.41098022]
[150.14596558 -78.74894714]
[150.44558716 -63.69557953]
[147.60852051 -48.90893936]
[141.75875854 -35.03543854]
[133.15203857 -22.68156815]
[122.16461945 -12.38738155]
[109.27681732 -4.60289955]
[95.05202484 0.33157429]
[96.91963959 15.21485424]
[98.78725433 30.09813499]
[100.65486908 44.98141479]
[106.91619873 45.41392136]
[113.08753967 46.55666733]
[119.08860016 48.39477921]
[124.84129333 50.90433884]
[130.27076721 54.05269623]
[135.30638123 57.79888916]
[139.88259888 62.09417343]
[143.93991089 66.88265991]
[147.42550659 72.10205078]
[150.29402161 77.68442535]
[164.70623779 73.52653503]
[179.11845398 69.36865234]
[193.53067017 65.21076202]
[200.94999695 51.25622559]
[216.08782959 46.71509552]
[229.96313477 54.28154373]
[234.34396362 69.46652985]
[226.63124084 83.26107788]
[211.40078735 87.48111725]
[197.68855286 79.62297821]
[183.27633667 83.78086853]
[168.86412048 87.93875122]
[154.45190430 92.09664154]
[154.77633667 105.19863892]
[151.99296570 118.00569153]
[146.25970459 129.79116821]
[137.90184021 139.88639832]
[127.39356232 147.71861267]
[115.33106995 152.84346008]
[117.50791168 167.68467712]
[119.68474579 182.52587891]
[121.86158752 197.36708069]
[131.51968384 209.89830017]
[125.71131134 223.61369324]
[127.88814545 238.45491028]
[130.06498718 253.29611206]
[132.24182129 268.13732910]
[136.60894775 276.23547363]
[134.30622864 283.30960083]
[136.17384338 298.19287109]
[138.04145813 313.07614136]
[139.90907288 327.95941162]
[141.77668762 342.84271240]
[143.64430237 357.72598267]
[145.51191711 372.60925293]
[160.49484253 374.22430420]
[174.70124817 379.25170898]
[187.36500549 387.42031860]
[197.80316162 398.28961182]
[205.45278931 411.27343750]
[209.90138245 425.67160034]
[210.90899658 440.70761108]
[208.42134094 455.57058716]
[202.57252502 469.45901489]
[193.67799377 481.62387085]
[182.21740723 491.40914917]
[168.80883789 498.28713989]
[154.17536926 501.88693237]
[139.10617065 502.01434326]
[124.41392517 498.66256714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 135]
[11 134]
[12 133]
[13 132]
[14 131]
[15 130]
[16 129]
[17 127]
[18 126]
[19 125]
[20 124]
[22 122]
[23 121]
[24 120]
[25 119]
[31 53]
[32 52]
[33 51]
[34 50]
[38 46]
[39 45]
[40 44]
[55 90]
[56 89]
[57 88]
[58 87]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
