%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAACACCCUGGGGGGGGGGCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUCCCCUGAACxxxxxxxxxxCAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUCCCCCCCCCCAUAACCACCCU\
) } def
/len { sequence length } bind def

/coor [
[83.02917480 353.62622070]
[69.54029846 346.89468384]
[58.05479431 337.13012695]
[49.24042511 324.90020752]
[43.60964584 310.91601562]
[41.48981476 295.99053955]
[43.00418472 280.99154663]
[48.06470871 266.79104614]
[56.37717438 254.21461487]
[67.45830536 243.99345398]
[80.66385651 236.72181702]
[95.22608185 232.82244873]
[94.91810608 217.82562256]
[94.61013031 202.82878113]
[94.30214691 187.83193970]
[93.99417114 172.83509827]
[93.68619537 157.83827209]
[93.37821960 142.84143066]
[93.07023621 127.84458923]
[92.76226044 112.84774780]
[87.20032501 98.91703796]
[77.09488678 87.83190155]
[66.98945618 76.74676514]
[56.88402176 65.66163635]
[46.77858734 54.57649994]
[36.67315292 43.49136734]
[24.66876221 52.50465393]
[11.86195278 60.33602905]
[-1.63129330 66.91455841]
[-15.68877506 72.18067169]
[-30.18318367 76.08667755]
[-44.98325348 78.59719086]
[-59.95494843 79.68949127]
[-74.96267700 79.35367584]
[-89.87052917 77.59279633]
[-104.54349518 74.42278290]
[-118.84867859 69.87236023]
[-132.65653992 63.98273087]
[-145.84202576 56.80723190]
[-158.28572083 48.41085434]
[-169.87493896 38.86963272]
[-180.50471497 28.26997948]
[-190.07878113 16.70788574]
[-198.51043701 4.28806543]
[-205.72331238 -8.87700558]
[-211.65209961 -22.66809845]
[-216.24310303 -36.96031570]
[-219.45472717 -51.62422180]
[-221.25790405 -66.52701569]
[-221.63630676 -81.53373718]
[-220.58650208 -96.50846863]
[-218.11798096 -111.31560516]
[-214.25312805 -125.82103729]
[-209.02691650 -139.89340210]
[-202.48670959 -153.40525818]
[-194.69169617 -166.23423767]
[-185.71250916 -178.26416016]
[-175.63044739 -189.38606262]
[-164.53683472 -199.49923706]
[-152.53210449 -208.51210022]
[-139.72502136 -216.34300232]
[-126.23152924 -222.92103577]
[-112.17385864 -228.18664551]
[-97.67930603 -232.09211731]
[-82.87914276 -234.60209656]
[-67.90740967 -235.69384766]
[-52.89969254 -235.35748291]
[-37.99190521 -233.59605408]
[-23.31905746 -230.42550659]
[-9.01403713 -225.87455750]
[4.79360914 -219.98443604]
[17.97883224 -212.80845642]
[30.42222214 -204.41162109]
[42.01108551 -194.86997986]
[52.64047623 -184.26994324]
[62.21411896 -172.70748901]
[70.64532471 -160.28736877]
[77.85772705 -147.12203979]
[83.78601074 -133.33071899]
[88.37648773 -119.03833771]
[91.58758545 -104.37431335]
[93.39022064 -89.47145081]
[93.76807404 -74.46472168]
[92.71771240 -59.49002838]
[90.24865723 -44.68298340]
[86.38327026 -30.17769051]
[81.15655518 -16.10551262]
[74.61584473 -2.59389353]
[66.82038116 10.23480225]
[57.84075165 22.26439285]
[47.75828552 33.38593292]
[57.86371994 44.47106552]
[67.96915436 55.55619812]
[78.07459259 66.64133453]
[88.18002319 77.72646332]
[98.28546143 88.81159973]
[94.73160553 74.23867798]
[87.86808777 60.90105820]
[86.97159576 45.92787170]
[92.19466400 31.86659241]
[102.64865875 21.10954666]
[116.55498505 15.48689461]
[131.54766846 15.95524788]
[145.07592773 22.43492317]
[154.83811951 33.82349396]
[159.17335510 48.18336105]
[157.34403992 63.07139969]
[149.66140747 75.95461273]
[137.43530273 84.63993073]
[122.95447540 88.55216980]
[137.53822327 92.06133270]
[152.12197876 95.57050323]
[166.70571899 99.07966614]
[175.61859131 86.76589203]
[188.56791687 78.80451202]
[203.57901001 76.40958405]
[218.36277771 79.94631195]
[230.66482544 88.87538147]
[238.60916138 101.83515930]
[240.98434448 116.84938049]
[237.42816162 131.62849426]
[228.48292542 143.91877747]
[215.51271057 151.84606934]
[200.49537659 154.20149231]
[185.72094727 150.62586975]
[173.44244385 141.66447449]
[165.53222656 128.68383789]
[163.19656372 113.66342163]
[148.61280823 110.15425110]
[134.02905273 106.64508057]
[119.44531250 103.13591766]
[107.75910187 112.53977203]
[108.06707764 127.53661346]
[108.37505341 142.53344727]
[108.68303680 157.53028870]
[108.99101257 172.52713013]
[109.29898834 187.52395630]
[109.60696411 202.52079773]
[109.91494751 217.51763916]
[110.22292328 232.51448059]
[124.93296051 235.81269836]
[138.42591858 242.53605652]
[149.91732788 252.29365540]
[158.73912048 264.51821899]
[164.37837219 278.49899292]
[166.50724792 293.42315674]
[165.00196838 308.42309570]
[159.95005798 322.62667847]
[151.64521790 335.20812988]
[140.57029724 345.43600464]
[127.36914825 352.71563721]
[112.80928802 356.62384033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 96]
[22 95]
[23 94]
[24 93]
[25 92]
[26 91]
[110 131]
[111 130]
[112 129]
[113 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
