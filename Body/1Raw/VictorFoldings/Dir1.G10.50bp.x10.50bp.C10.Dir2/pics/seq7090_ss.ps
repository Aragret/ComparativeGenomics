%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAUUCUCAGGGGGGGGGGGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUxxxxxxxxxxCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACCCCCCCCCCCACUAUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[76.30831146 382.89038086]
[62.28637314 377.33737183]
[50.08641434 368.47103882]
[40.47534180 356.84872437]
[34.05731583 343.20104980]
[31.23578072 328.38586426]
[32.18809509 313.33447266]
[36.85440063 298.99304199]
[44.94136810 286.26309204]
[55.94064331 275.94482422]
[69.16080475 268.68685913]
[83.77081299 264.94540405]
[83.77081299 249.94540405]
[83.77081299 234.94540405]
[83.77081299 219.94540405]
[83.77081299 204.94540405]
[83.77081299 189.94540405]
[83.77081299 174.94540405]
[83.77081299 159.94540405]
[83.77081299 144.94540405]
[83.77081299 129.94540405]
[72.48053741 120.06970215]
[57.61393356 122.06575775]
[42.74733734 124.06181335]
[40.65697098 139.01283264]
[34.60932922 152.84498596]
[25.05318832 164.53186035]
[12.69767284 173.20617676]
[-1.54035270 178.22425842]
[-16.60433388 179.21374512]
[-31.37642097 176.10118103]
[-44.76042938 169.11756897]
[-55.76317596 158.78112793]
[-63.56818390 145.85887146]
[-67.59626770 131.30975342]
[-67.54852295 116.21337891]
[-63.42848587 101.69002533]
[-55.54189301 88.81741333]
[-44.47398376 78.55076599]
[-31.04606628 71.65195465]
[-16.25458527 68.63290405]
[-1.19716513 69.71765137]
[13.00883293 74.82569885]
[25.30923080 83.57800293]
[34.79125595 95.32508087]
[40.75127792 109.19522095]
[55.61787796 107.19915771]
[70.48447418 105.20310211]
[75.41349792 87.10401917]
[89.34243011 76.77227783]
[105.26351929 77.25227356]
[113.16000366 64.49901581]
[121.05648804 51.74575806]
[121.16967010 33.36049652]
[136.88827515 25.61645699]
[144.52124023 12.70376015]
[152.15420532 -0.20893823]
[159.78718567 -13.12163639]
[164.62699890 -27.31938934]
[155.36961365 -15.51680660]
[143.59834290 -6.21966076]
[129.97218323 0.05153710]
[115.25403595 2.94568563]
[100.26790619 2.30075240]
[85.85281372 -1.84715569]
[72.81580353 -9.26581192]
[61.88677979 -19.53987503]
[53.67760468 -32.09413528]
[48.64788818 -46.22572708]
[47.07921982 -61.14347839]
[49.05942917 -76.01219940]
[54.47764587 -89.99943542]
[63.03052521 -102.32211304]
[74.23922729 -112.29030609]
[87.47621918 -119.34595490]
[102.00039673 -123.09403229]
[116.99862671 -123.32469177]
[131.63119507 -120.02502441]
[145.07890320 -113.37976074]
[156.58882141 -103.76095581]
[165.51660156 -91.70712280]
[171.36238098 -77.89311218]
[173.79887390 -63.09231567]
[172.68898010 -48.12975693]
[181.35559082 -60.37270737]
[190.02218628 -72.61566162]
[191.68040466 -88.34973145]
[205.34906006 -94.26728058]
[214.01565552 -106.51023102]
[214.98918152 -122.88046265]
[229.77212524 -129.97953796]
[243.15705872 -120.50453186]
[241.37471008 -104.20252991]
[226.25862122 -97.84362793]
[217.59201050 -85.60066986]
[216.55368042 -70.74230194]
[202.26515198 -63.94905472]
[193.59854126 -51.70610046]
[184.93193054 -39.46314621]
[179.51330566 -25.47606468]
[188.78900146 -37.26425171]
[200.96420288 -46.02579880]
[215.08827209 -51.07661438]
[230.05842590 -52.02234268]
[244.70582581 -48.78913879]
[257.88684082 -41.62944794]
[268.57229614 -31.10229111]
[275.92788696 -18.02960396]
[279.37933350 -3.43208408]
[278.65710449 11.55051994]
[273.81762695 25.74839020]
[265.23876953 38.05298233]
[253.59031677 47.50357437]
[239.78178406 53.36227798]
[224.89131165 55.17165375]
[210.08152771 52.79043579]
[196.50874329 46.40453720]
[185.23271179 36.51256561]
[177.13385010 23.88686562]
[172.84448242 9.51323032]
[172.69987488 -5.48866606]
[165.06690979 7.42403173]
[157.43394470 20.33672905]
[149.80096436 33.24942780]
[152.50500488 45.07949066]
[146.19981384 55.91535568]
[133.80973816 59.64224243]
[125.91326141 72.39550018]
[118.01677704 85.14875793]
[125.47895813 101.98330688]
[118.43252563 120.76161194]
[98.77081299 129.94540405]
[98.77081299 144.94540405]
[98.77081299 159.94540405]
[98.77081299 174.94540405]
[98.77081299 189.94540405]
[98.77081299 204.94540405]
[98.77081299 219.94540405]
[98.77081299 234.94540405]
[98.77081299 249.94540405]
[98.77081299 264.94540405]
[113.38082886 268.68685913]
[126.60098267 275.94482422]
[137.60026550 286.26309204]
[145.68722534 298.99304199]
[150.35353088 313.33447266]
[151.30584717 328.38586426]
[148.48431396 343.20104980]
[142.06628418 356.84872437]
[132.45521545 368.47103882]
[120.25525665 377.33737183]
[106.23331451 382.89038086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 48]
[23 47]
[24 46]
[51 129]
[52 128]
[53 127]
[55 124]
[56 123]
[57 122]
[58 121]
[59 100]
[84 99]
[85 98]
[86 97]
[88 95]
[89 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
