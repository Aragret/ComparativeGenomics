%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGCAUCACGGGGGGGGGGCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUxxxxxxxxxxGCUACGACCAACUCAUACACCUCCUAUGAAAAAACUUCCUACCACUCACCCCCCCCCCCCCUAGCAUUAC\
) } def
/len { sequence length } bind def

/coor [
[89.43616486 526.40771484]
[76.87794495 518.05657959]
[66.79171753 506.84411621]
[59.81152344 493.47518921]
[56.37614059 478.79019165]
[56.70151901 463.71224976]
[60.76720428 449.18911743]
[68.31761932 436.13378906]
[78.87815094 425.36688232]
[91.78494263 417.56524658]
[106.22667694 413.21929932]
[105.60269928 398.23226929]
[104.97872162 383.24526978]
[104.35474396 368.25823975]
[103.73076630 353.27124023]
[103.10678864 338.28421021]
[102.48281097 323.29721069]
[101.85883331 308.31018066]
[101.23485565 293.32318115]
[100.61087799 278.33615112]
[90.41810608 264.08459473]
[99.00354767 247.82820129]
[98.06792450 232.85740662]
[97.13229370 217.88661194]
[85.82865143 208.25524902]
[84.66652679 193.08605957]
[94.84543610 181.29507446]
[93.90980530 166.32427979]
[92.97417450 151.35348511]
[91.72730255 136.40539551]
[90.16972351 121.48648834]
[75.09741211 94.03757477]
[64.65760040 83.26676941]
[53.15579224 73.63824463]
[40.71635437 65.25609589]
[28.27691269 56.87395477]
[15.83747292 48.49180984]
[3.39803290 40.10966873]
[-9.43109798 41.80296707]
[-19.63251686 34.51256180]
[-22.02600288 22.61388588]
[-34.28837204 13.97476864]
[-46.55073929 5.33565283]
[-58.64777374 14.41953468]
[-72.96047211 19.31871033]
[-88.08661652 19.55321121]
[-102.54429626 15.10006237]
[-114.91710663 6.39553785]
[-123.99288177 -5.70758247]
[-128.88246155 -20.02355766]
[-129.10682678 -35.14985275]
[-124.64399719 -49.60455322]
[-115.93118286 -61.97152710]
[-103.82198334 -71.03918457]
[-89.50273132 -75.91918182]
[-74.37628937 -76.13340759]
[-59.92458725 -71.66088867]
[-47.56345367 -62.93978882]
[-38.50391006 -50.82451630]
[-33.63351440 -36.50200272]
[-33.42942047 -21.37541962]
[-37.91162109 -6.92671537]
[-25.64925385 1.71240091]
[-13.38688660 10.35151672]
[4.12409592 10.95603275]
[11.78017616 27.67022705]
[24.21961594 36.05237198]
[36.65905762 44.43451309]
[49.09849548 52.81665802]
[61.53793716 61.19879913]
[57.04293442 46.88814163]
[60.17100525 32.21792984]
[70.11245728 20.98550034]
[84.29398346 16.09833527]
[99.04473114 18.82146454]
[110.54651642 28.45001030]
[115.82214355 42.49165726]
[113.50601959 57.31176376]
[104.19767761 69.07419586]
[90.30654907 74.73427582]
[75.42840576 72.82695770]
[85.86821747 83.59776306]
[81.87022400 69.14037323]
[74.99015808 55.81128693]
[76.06523132 40.84986115]
[84.78032684 28.64138031]
[98.58101654 22.76421738]
[113.42223358 24.94099998]
[124.95392609 34.53370285]
[129.79611206 48.73064804]
[126.52949524 63.37063599]
[116.11138153 74.16270447]
[108.13002777 86.86302185]
[121.22318268 79.54391479]
[134.31632996 72.22480774]
[147.40948486 64.90570068]
[160.50263977 57.58659744]
[163.25349426 42.19286728]
[175.28872681 32.20853043]
[190.92568970 32.34788132]
[202.78108215 42.54512405]
[205.25714111 57.98543167]
[197.18476868 71.37836456]
[182.37545776 76.40018463]
[167.82174683 70.67974854]
[154.72859192 77.99885559]
[141.63543701 85.31796265]
[128.54228210 92.63706970]
[115.44913483 99.95617676]
[130.44364929 99.55068207]
[140.85641479 110.34763336]
[139.90815735 125.31763458]
[128.21623230 134.71438599]
[113.39273071 132.42008972]
[105.08863068 119.92890930]
[106.64621735 134.84782410]
[110.26990509 140.50257874]
[110.42114258 146.26525879]
[107.94496918 150.41786194]
[108.88059998 165.38865662]
[109.81622314 180.35943604]
[121.38399506 190.79133606]
[122.11959076 205.98718262]
[112.10308838 216.95098877]
[113.03871155 231.92178345]
[113.97434235 246.89257812]
[123.13553619 256.03186035]
[123.57276154 268.56292725]
[115.59789276 277.71218872]
[116.22187042 292.69918823]
[116.84584808 307.68621826]
[117.46982574 322.67321777]
[118.09380341 337.66024780]
[118.71778107 352.64724731]
[119.34175873 367.63427734]
[119.96573639 382.62127686]
[120.58971405 397.60830688]
[121.21369171 412.59533691]
[135.96669006 415.72576904]
[149.47732544 422.42752075]
[160.89631653 432.27929688]
[169.50582886 444.66183472]
[174.76466370 458.79675293]
[176.34226990 473.79547119]
[174.13946533 488.71520996]
[168.29472351 502.61807251]
[159.17544556 514.63012695]
[147.35487366 523.99627686]
[133.57606506 530.12780762]
[118.70516205 532.63916016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 126]
[23 125]
[24 124]
[27 121]
[28 120]
[29 119]
[30 116]
[31 115]
[32 82]
[33 81]
[34 70]
[35 69]
[36 68]
[37 67]
[38 66]
[41 64]
[42 63]
[43 62]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
