%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCUAUCACAGGGGGGGGGGCCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGxxxxxxxxxxCGUUUUCACACUUCUAGUAAGCCUCUACCUGCACGACAACACAUAAUGACCCCCCCCCCCCCACCAAUCACA\
) } def
/len { sequence length } bind def

/coor [
[53.99922943 476.64993286]
[39.83862686 471.49493408]
[27.24888229 463.21273804]
[16.90894508 452.24993896]
[9.37643337 439.19781494]
[5.05756807 424.76022339]
[4.18525934 409.71575928]
[6.80655003 394.87576294]
[12.78007698 381.04052734]
[21.78369522 368.95617676]
[33.33185196 359.27441406]
[46.80176544 352.51733398]
[61.46702957 349.04934692]
[61.46702957 334.04934692]
[61.46702957 319.04934692]
[61.46702957 304.04934692]
[61.46702957 289.04934692]
[61.46702957 274.04934692]
[61.46702957 259.04934692]
[61.46702957 244.04936218]
[61.46702957 229.04936218]
[61.46702957 214.04936218]
[51.14827347 206.27554321]
[47.14879990 193.78601074]
[51.14949417 181.09230042]
[61.89779282 172.91691589]
[62.20179749 157.91999817]
[62.50580215 142.92308044]
[51.12443161 133.15248108]
[36.34648514 135.72393799]
[21.56854248 138.29537964]
[12.68056774 151.36364746]
[-2.86024451 154.23744202]
[-15.83380699 145.21179199]
[-18.54313469 129.64146423]
[-9.38083172 116.76406097]
[6.21726942 114.21950531]
[18.99709320 123.51744080]
[33.77503967 120.94599152]
[48.55298233 118.37454224]
[49.46281052 110.92993164]
[51.28247070 96.04071045]
[52.19229889 88.59610748]
[38.46858597 82.54138184]
[24.74487114 76.48665619]
[11.02115822 70.43193054]
[-4.39643574 74.86784363]
[-17.39333916 65.46252441]
[-17.99944115 49.43092728]
[-5.74979162 39.07111740]
[9.95872688 42.33026123]
[17.07588196 56.70821762]
[30.79959679 62.76293945]
[44.52330780 68.81766510]
[58.24702454 74.87239075]
[83.06678009 62.60169983]
[105.93300629 67.15611267]
[111.84834290 53.37174606]
[117.76367950 39.58737564]
[116.09560394 23.85435104]
[128.22492981 15.20977497]
[134.14027405 1.42540812]
[121.15282440 -6.11671352]
[109.16919708 -15.16934299]
[98.36415100 -25.60046577]
[88.89525604 -37.25796509]
[80.90058136 -49.97183990]
[74.49673462 -63.55669022]
[69.77709198 -77.81439972]
[66.81047821 -92.53705597]
[65.64015198 -107.50995636]
[66.28319550 -122.51474762]
[68.73020935 -137.33262634]
[72.94553375 -151.74749756]
[78.86767578 -165.54914856]
[86.41027832 -178.53630066]
[95.46335602 -190.51959229]
[105.89488983 -201.32424927]
[117.55274200 -210.79270935]
[130.26692200 -218.78691101]
[143.85200500 -225.19024658]
[158.10989380 -229.90936279]
[172.83265686 -232.87542725]
[187.80560303 -234.04518127]
[202.81036377 -233.40158081]
[217.62815857 -230.95401001]
[232.04286194 -226.73815918]
[245.84429932 -220.81549072]
[258.83117676 -213.27239990]
[270.81411743 -204.21887207]
[281.61837769 -193.78694153]
[291.08642578 -182.12873840]
[299.08013916 -169.41426086]
[305.48297119 -155.82893372]
[310.20153809 -141.57087708]
[313.16705322 -126.84799957]
[314.33627319 -111.87501526]
[313.69210815 -96.87026215]
[311.24398804 -82.05257416]
[307.02758789 -67.63801575]
[301.10440063 -53.83681107]
[293.56082153 -40.85021210]
[284.50683594 -28.86760139]
[274.07452393 -18.06372452]
[262.41595459 -8.59613228]
[249.70117188 -0.60289133]
[236.11561584 5.79943466]
[221.85737610 10.51748085]
[207.13438416 13.48244381]
[192.16136169 14.65108490]
[177.15663147 14.00636387]
[162.33903503 11.55768108]
[147.92463684 7.34074593]
[142.00929260 21.12511253]
[144.10047913 35.87218857]
[131.54804993 45.50271606]
[125.63270569 59.28708267]
[119.71736908 73.07144928]
[128.00544739 79.15596008]
[134.34934998 87.81498718]
[137.94871521 98.40730286]
[138.21978760 110.04457855]
[134.87072754 121.66563416]
[127.95114136 132.13311768]
[117.86975861 140.34387207]
[105.37626648 145.34225464]
[91.50769806 146.42509460]
[77.50272369 143.22708130]
[77.19871521 158.22399902]
[76.89471436 173.22091675]
[89.23202515 185.58322144]
[88.84857178 202.70719910]
[76.46702576 214.04936218]
[76.46702576 229.04936218]
[76.46702576 244.04936218]
[76.46702576 259.04934692]
[76.46702576 274.04934692]
[76.46702576 289.04934692]
[76.46702576 304.04934692]
[76.46702576 319.04934692]
[76.46702576 334.04934692]
[76.46702576 349.04934692]
[91.13228607 352.51733398]
[104.60220337 359.27441406]
[116.15036011 368.95617676]
[125.15397644 381.04052734]
[131.12750244 394.87576294]
[133.74879456 409.71575928]
[132.87648010 424.76022339]
[128.55761719 439.19781494]
[121.02510834 452.24993896]
[110.68517303 463.21273804]
[98.09542847 471.49493408]
[83.93482208 476.64993286]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[26 130]
[27 129]
[28 128]
[29 40]
[30 39]
[31 38]
[43 55]
[44 54]
[45 53]
[46 52]
[57 118]
[58 117]
[59 116]
[61 114]
[62 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
