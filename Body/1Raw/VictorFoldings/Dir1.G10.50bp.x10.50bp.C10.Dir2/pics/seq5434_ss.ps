%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUACUAUCGGGGGGGGGGUCGCACCUGAAACAAGCUAACAUGACUAACACCCUUAAUUCCAUCCACCCxxxxxxxxxxAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUACCCCCCCCCCUACUACUAAC\
) } def
/len { sequence length } bind def

/coor [
[80.44052887 447.80819702]
[66.59458923 441.79217529]
[54.88592529 432.26275635]
[46.18340302 419.92706299]
[41.13280106 405.70056152]
[40.10890961 390.63888550]
[43.18770599 375.85971069]
[50.14072800 362.45977783]
[60.45201492 351.43344116]
[73.35639191 343.59893799]
[87.89627838 339.53762817]
[87.89627838 324.53762817]
[87.89627838 309.53762817]
[87.89627838 294.53762817]
[87.89627838 279.53762817]
[87.89627838 264.53762817]
[87.89627838 249.53762817]
[87.89627838 234.53762817]
[87.89627838 219.53762817]
[87.89627838 204.53762817]
[87.89627838 189.53762817]
[80.15898132 176.81036377]
[87.89627838 163.01019287]
[85.94261932 160.91482544]
[84.72924042 157.89460754]
[84.62213898 154.23805237]
[85.87216949 150.36398315]
[88.57217407 146.77629089]
[89.81904602 131.82820129]
[91.06591797 116.88011932]
[81.78778076 105.75077057]
[82.99222565 91.31140137]
[93.98599243 81.87300110]
[87.42260742 67.47743225]
[96.19108582 55.43736649]
[97.43795776 40.48928070]
[98.68483734 25.54119492]
[85.22673798 18.53010750]
[75.50440979 6.93186092]
[70.97550964 -7.46614981]
[72.30046082 -22.46055222]
[79.24635315 -35.76917648]
[90.72712708 -45.37840271]
[104.97330475 -49.84781265]
[106.22018433 -64.79589844]
[107.46705627 -79.74398804]
[108.71392822 -94.69207764]
[93.95575714 -97.44658661]
[79.55197906 -101.68004608]
[65.65040588 -107.34901428]
[52.39368057 -114.39530945]
[39.91784668 -122.74663544]
[28.35092545 -132.31729126]
[17.81161308 -143.00904846]
[8.40806007 -154.71221924]
[0.23676045 -167.30670166]
[-6.61843348 -180.66325378]
[-12.08717632 -194.64480591]
[-16.11334991 -209.10789490]
[-18.65563774 -223.90409851]
[-19.68795586 -238.88159180]
[-19.19970512 -253.88667297]
[-17.19590187 -268.76538086]
[-13.69710350 -283.36502075]
[-8.73921585 -297.53576660]
[-2.37311459 -311.13223267]
[5.33587408 -324.01489258]
[14.30864239 -336.05151367]
[24.45311546 -347.11862183]
[35.66519547 -357.10260010]
[47.82982635 -365.90106201]
[60.82218170 -373.42367554]
[74.50893402 -379.59326172]
[88.74964142 -384.34649658]
[103.39816284 -387.63464355]
[118.30418396 -389.42391968]
[133.31474304 -389.69595337]
[148.27581787 -388.44799805]
[163.03387451 -385.69284058]
[177.43745422 -381.45874023]
[191.33879089 -375.78918457]
[204.59519958 -368.74230957]
[217.07066345 -360.39041138]
[228.63716125 -350.81927490]
[239.17601013 -340.12704468]
[248.57904053 -328.42343140]
[256.74978638 -315.82861328]
[263.60440063 -302.47177124]
[269.07250977 -288.48995972]
[273.09805298 -274.02670288]
[275.63970947 -259.23037720]
[276.67135620 -244.25283813]
[276.18243408 -229.24777222]
[274.17797852 -214.36915588]
[270.67855835 -199.76968384]
[265.72003174 -185.59913635]
[259.35333252 -172.00296021]
[251.64378357 -159.12065125]
[242.67048645 -147.08441162]
[232.52552795 -136.01776123]
[221.31300354 -126.03425598]
[209.14797974 -117.23634338]
[196.15530396 -109.71429443]
[182.46827698 -103.54531097]
[168.22735596 -98.79269409]
[153.57868958 -95.50521088]
[138.67259216 -93.71659088]
[123.66201782 -93.44519806]
[122.41514587 -78.49711609]
[121.16826630 -63.54902649]
[119.92139435 -48.60093689]
[133.23022461 -41.83306122]
[142.96034241 -30.45455742]
[147.60534668 -16.17909622]
[146.42779541 -1.17239845]
[139.57609558 12.27631474]
[128.06658936 22.10353470]
[113.63291931 26.78806877]
[112.38604736 41.73615646]
[111.13917542 56.68424225]
[117.79174042 70.01062775]
[108.93408203 83.11988068]
[118.21221924 94.24922943]
[117.00777435 108.68859863]
[106.01400757 118.12699890]
[104.76713562 133.07508850]
[103.52025604 148.02316284]
[102.89627838 163.01019287]
[110.63358307 176.81036377]
[102.89627838 189.53762817]
[102.89627838 204.53762817]
[102.89627838 219.53762817]
[102.89627838 234.53762817]
[102.89627838 249.53762817]
[102.89627838 264.53762817]
[102.89627838 279.53762817]
[102.89627838 294.53762817]
[102.89627838 309.53762817]
[102.89627838 324.53762817]
[102.89627838 339.53762817]
[117.43616486 343.59893799]
[130.34054565 351.43344116]
[140.65184021 362.45977783]
[147.60485840 375.85971069]
[150.68365479 390.63888550]
[149.65975952 405.70056152]
[144.60916138 419.92706299]
[135.90663147 432.26275635]
[124.19797516 441.79217529]
[110.35203552 447.80819702]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[28 127]
[29 126]
[30 125]
[33 122]
[35 120]
[36 119]
[37 118]
[44 111]
[45 110]
[46 109]
[47 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
