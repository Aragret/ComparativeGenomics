%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAGCAGGGGGGGGGGGCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUxxxxxxxxxxUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCCCCCCCCCCCUAGCAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 384.11749268]
[71.19830322 378.10147095]
[59.48964310 368.57205200]
[50.78712082 356.23638916]
[45.73651886 342.00985718]
[44.71262741 326.94818115]
[47.79142761 312.16903687]
[54.74444962 298.76910400]
[65.05573273 287.74276733]
[77.96011353 279.90826416]
[92.50000000 275.84695435]
[92.50000000 260.84695435]
[92.50000000 245.84695435]
[92.50000000 230.84695435]
[92.50000000 215.84695435]
[92.50000000 200.84695435]
[92.50000000 185.84695435]
[92.50000000 170.84695435]
[92.50000000 155.84695435]
[92.50000000 140.84695435]
[92.50000000 125.84694672]
[87.01911926 123.57565308]
[82.16905975 120.15867615]
[78.18550873 115.76206207]
[64.06070709 120.81082153]
[49.93590164 125.85958099]
[43.40143967 140.24972534]
[28.57634544 145.72624207]
[14.25609016 139.03999329]
[8.93662262 124.15783691]
[15.77389050 109.90906525]
[30.71146393 104.74723816]
[44.88714600 111.73477173]
[59.01194763 106.68601990]
[73.13674927 101.63726044]
[73.05059814 92.05725098]
[76.41355133 82.65423584]
[83.07304382 74.67591858]
[92.42543793 69.27723694]
[83.91434479 56.92566681]
[75.40325928 44.57409286]
[63.60661697 35.30914307]
[49.58990479 29.96763039]
[35.57319260 24.62611961]
[19.47697639 27.76361656]
[8.91729832 15.21669579]
[14.75704861 -0.10744736]
[30.98879242 -2.44464779]
[40.91470337 10.60940552]
[54.93141937 15.95091820]
[68.94812775 21.29243088]
[59.90986633 9.32122421]
[53.41447449 -4.19949675]
[49.71793747 -18.73688316]
[48.96593475 -33.71802139]
[51.18810272 -48.55250549]
[56.29686737 -62.65571594]
[64.09088898 -75.47184753]
[74.26300812 -86.49581909]
[86.41235352 -95.29317474]
[100.06011200 -101.51721954]
[114.66842651 -104.92266083]
[129.66159058 -105.37529755]
[144.44874573 -102.85728455]
[158.44709778 -97.46784973]
[171.10499573 -89.41940308]
[181.92359924 -79.02912903]
[190.47654724 -66.70650482]
[196.42675781 -52.93715286]
[199.53974915 -38.26373291]
[199.69284058 -23.26451302]
[196.87997437 -8.53061295]
[191.21203613 5.35730982]
[182.91236877 17.85193443]
[172.30809021 28.46085358]
[159.81709290 36.76596832]
[145.93164062 42.43997955]
[131.19897461 45.25927353]
[116.19968414 45.11274338]
[101.52490997 42.00616455]
[87.75482941 36.06300354]
[96.26592255 48.41457367]
[104.77700806 60.76614761]
[119.05247498 65.37171173]
[133.17727661 60.32295609]
[147.30207825 55.27420044]
[161.42687988 50.22544479]
[175.55168152 45.17668533]
[178.44653320 31.66302490]
[187.58087158 21.43674850]
[200.47769165 17.10978889]
[213.71855164 19.71578217]
[223.84959412 28.46551132]
[238.07638550 23.71169662]
[252.30316162 18.95788193]
[266.52993774 14.20406723]
[266.38580322 -0.92320621]
[270.92523193 -15.35403252]
[279.70352173 -27.67462540]
[291.86062622 -36.67793655]
[306.20556641 -41.48191833]
[321.33291626 -41.61592484]
[335.76071167 -37.06682205]
[348.07540894 -28.28028870]
[357.07058716 -16.11714172]
[361.86492920 -1.76899743]
[361.98880005 13.35845566]
[357.43005371 27.78318596]
[348.63525391 40.09200287]
[336.46609497 49.07901764]
[322.11474609 53.86376953]
[306.98721313 53.97750092]
[292.56552124 49.40906906]
[280.26260376 40.60604095]
[271.28375244 28.43084717]
[257.05697632 33.18466187]
[242.83020020 37.93847656]
[228.60340881 42.69229126]
[224.18609619 58.47179031]
[211.11729431 68.62918091]
[194.40423584 69.02297211]
[180.60043335 59.30149078]
[166.47563171 64.35025024]
[152.35083008 69.39900208]
[138.22602844 74.44776154]
[124.10122681 79.49651337]
[129.81260681 93.75186920]
[128.04081726 108.42072296]
[119.77372742 119.95888519]
[107.50000000 125.84694672]
[107.50000000 140.84695435]
[107.50000000 155.84695435]
[107.50000000 170.84695435]
[107.50000000 185.84695435]
[107.50000000 200.84695435]
[107.50000000 215.84695435]
[107.50000000 230.84695435]
[107.50000000 245.84695435]
[107.50000000 260.84695435]
[107.50000000 275.84695435]
[122.03988647 279.90826416]
[134.94427490 287.74276733]
[145.25555420 298.76910400]
[152.20857239 312.16903687]
[155.28736877 326.94818115]
[154.26348877 342.00985718]
[149.21287537 356.23638916]
[140.51036072 368.57205200]
[128.80169678 378.10147095]
[114.95575714 384.11749268]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 35]
[25 34]
[26 33]
[39 83]
[40 82]
[41 81]
[42 51]
[43 50]
[44 49]
[84 126]
[85 125]
[86 124]
[87 123]
[88 122]
[93 118]
[94 117]
[95 116]
[96 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
