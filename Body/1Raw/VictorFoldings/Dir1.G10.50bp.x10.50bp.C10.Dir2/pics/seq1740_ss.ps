%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAAACCCGGGGGGGGGGCUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAxxxxxxxxxxGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGGGCUCCCCCCCCCCACUACAACCC\
) } def
/len { sequence length } bind def

/coor [
[59.41439819 363.97833252]
[45.56845856 357.96231079]
[33.85979462 348.43289185]
[25.15727234 336.09722900]
[20.10667038 321.87069702]
[19.08277893 306.80902100]
[22.16157722 292.02984619]
[29.11459923 278.62991333]
[39.42588425 267.60360718]
[52.33026505 259.76907349]
[66.87014771 255.70777893]
[66.87014771 240.70777893]
[66.87014771 225.70777893]
[66.87014771 210.70777893]
[66.87014771 195.70777893]
[66.87014771 180.70777893]
[66.87014771 165.70777893]
[66.87014771 150.70777893]
[66.87014771 135.70777893]
[66.87014771 120.70777130]
[54.88331985 111.69023895]
[40.47110367 115.84812927]
[29.35642052 127.10754395]
[14.98315239 123.20133972]
[3.86846924 134.46075439]
[-10.50479889 130.55455017]
[-14.82250977 145.36538696]
[-26.47712898 155.47346497]
[-41.74970627 157.65335083]
[-55.76682281 151.20944214]
[-64.05566406 138.19795227]
[-63.97129059 122.77082062]
[-55.54062653 109.85078430]
[-41.45386887 103.56056976]
[-26.20604515 105.90737152]
[-14.66268539 116.14232635]
[-4.57886124 105.18031311]
[10.82526493 108.78912354]
[20.90909004 97.82711029]
[36.31321716 101.43591309]
[50.72542953 97.27802277]
[60.47308350 85.87700653]
[62.34069824 70.99372864]
[64.20831299 56.11044312]
[66.07592010 41.22716522]
[63.82958603 34.89775085]
[64.98963928 29.25101852]
[68.34333038 25.76845360]
[70.82845306 10.97574711]
[73.31356812 -3.81696033]
[56.98281097 -0.91116750]
[38.83967590 -9.28280258]
[28.85694885 -20.47856903]
[18.87422180 -31.67433548]
[8.89149475 -42.87010193]
[-6.97862530 -45.21931839]
[-14.91187191 -59.16360855]
[-8.82253647 -74.00609589]
[6.61816311 -78.36090851]
[19.56544495 -68.88739014]
[20.08726120 -52.85282516]
[30.06998825 -41.65706253]
[40.05271530 -30.46129608]
[50.03543854 -19.26552963]
[57.48639297 -20.12187386]
[72.38829041 -21.83456421]
[79.83924866 -22.69090843]
[87.02175140 -35.85948944]
[94.20426178 -49.02807236]
[80.54880524 -42.82094193]
[65.56616974 -43.54248047]
[52.57037735 -51.03309631]
[44.43597412 -63.63593292]
[42.96221924 -78.56336212]
[48.47509003 -92.51356506]
[59.75519180 -102.40089417]
[74.30747223 -106.03836060]
[88.91310120 -102.62139130]
[100.34143829 -92.90578461]
[106.06465912 -79.04055023]
[104.81619263 -64.09066010]
[114.79891968 -75.28642273]
[124.78164673 -86.48219299]
[134.76437378 -97.67795563]
[127.32859802 -110.86840820]
[124.58110046 -125.75901031]
[126.81990814 -140.73454285]
[133.80216980 -154.17056274]
[144.77049255 -164.60964966]
[158.53514099 -170.91943359]
[173.60301208 -172.41548157]
[188.33964539 -168.93550110]
[201.14654541 -160.85700989]
[210.63449097 -149.05625916]
[215.77432251 -134.81333923]
[216.00849915 -119.67320251]
[211.31161499 -105.27812958]
[202.19316101 -93.18959808]
[189.64222717 -84.71888733]
[175.02026367 -80.78482819]
[159.91334534 -81.81416321]
[145.96014404 -87.69522858]
[135.97741699 -76.49946594]
[125.99468994 -65.30369568]
[116.01196289 -54.10793304]
[107.37284851 -41.84556580]
[100.19033813 -28.67698288]
[93.00782776 -15.50839996]
[88.10627747 -1.33184171]
[85.62115479 13.46086502]
[83.13603973 28.25357246]
[80.95920563 43.09477997]
[79.09159088 57.97805786]
[77.22397614 72.86133575]
[75.35636139 87.74462128]
[95.14120483 74.84974670]
[115.76806641 82.29611206]
[121.73853302 101.64001465]
[135.39477539 107.84542084]
[149.05101013 114.05082703]
[162.70726013 120.25623322]
[178.96783447 118.12885284]
[188.72433472 131.31001282]
[181.94010925 146.24005127]
[165.59417725 147.56024170]
[156.50184631 133.91247559]
[142.84561157 127.70706940]
[129.18936157 121.50166321]
[115.53312683 115.29625702]
[100.91181183 124.64468384]
[81.87014771 120.70777130]
[81.87014771 135.70777893]
[81.87014771 150.70777893]
[81.87014771 165.70777893]
[81.87014771 180.70777893]
[81.87014771 195.70777893]
[81.87014771 210.70777893]
[81.87014771 225.70777893]
[81.87014771 240.70777893]
[81.87014771 255.70777893]
[96.41004181 259.76907349]
[109.31442261 267.60360718]
[119.62570190 278.62991333]
[126.57872772 292.02984619]
[129.65753174 306.80902100]
[128.63363647 321.87069702]
[123.58303070 336.09722900]
[114.88050842 348.43289185]
[103.17184448 357.96231079]
[89.32590485 363.97833252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 41]
[22 40]
[24 38]
[26 36]
[42 115]
[43 114]
[44 113]
[45 112]
[48 111]
[49 110]
[50 109]
[52 64]
[53 63]
[54 62]
[55 61]
[67 108]
[68 107]
[69 106]
[81 105]
[82 104]
[83 103]
[84 102]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
