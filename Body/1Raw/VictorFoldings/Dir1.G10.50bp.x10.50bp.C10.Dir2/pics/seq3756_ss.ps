%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCAAACGGGGGGGGGGUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAxxxxxxxxxxACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAACCCCCCCCCCAAACUCAUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 386.82766724]
[71.19830322 380.81164551]
[59.48964310 371.28222656]
[50.78712082 358.94656372]
[45.73651886 344.72003174]
[44.71262741 329.65835571]
[47.79142761 314.87918091]
[54.74444962 301.47924805]
[65.05573273 290.45291138]
[77.96011353 282.61840820]
[92.50000000 278.55709839]
[92.50000000 263.55709839]
[92.50000000 248.55709839]
[92.50000000 233.55709839]
[92.50000000 218.55709839]
[92.50000000 203.55709839]
[92.50000000 188.55709839]
[92.50000000 173.55709839]
[92.50000000 158.55709839]
[92.50000000 143.55709839]
[92.50000000 128.55709839]
[82.99502563 124.13687897]
[75.63348389 116.67425537]
[61.50867844 121.72301483]
[47.38387299 126.77177429]
[33.25907135 131.82052612]
[26.72460747 146.21067810]
[11.89951611 151.68719482]
[-2.42074060 145.00094604]
[-7.74020767 130.11878967]
[-0.90293932 115.87001801]
[14.03463364 110.70819092]
[28.21031570 117.69572449]
[42.33511734 112.64696503]
[56.45992279 107.59821320]
[70.58472443 102.54945374]
[68.48740387 93.91429901]
[69.06317139 84.36300659]
[54.49047089 80.80824280]
[39.91776657 77.25348663]
[25.34506416 73.69872284]
[9.76474094 78.81590271]
[-2.27495575 67.68137360]
[1.61138201 51.74938202]
[17.42582321 47.40939331]
[28.89982605 59.12601852]
[43.47253036 62.68078232]
[58.04523087 66.23554230]
[72.61793518 69.79030609]
[85.39529419 61.93288040]
[88.79827118 47.32398605]
[74.60375977 42.43319321]
[60.98736572 36.10880661]
[48.09342957 28.41786766]
[36.05863953 19.44190788]
[25.01056862 9.27607727]
[15.06633091 -1.97186363]
[6.33134222 -14.18267822]
[-1.10180259 -27.22692490]
[-7.15430737 -40.96632767]
[-11.76201248 -55.25524521]
[-14.87607288 -69.94219971]
[-16.46347809 -84.87150574]
[-16.50740242 -99.88490295]
[-15.00737762 -114.82324219]
[-11.97930622 -129.52816772]
[-7.45528746 -143.84379578]
[-1.48327839 -157.61837769]
[5.87341452 -170.70590210]
[14.53680611 -182.96760559]
[24.41506004 -194.27354431]
[35.40346146 -204.50384521]
[47.38552475 -213.55007935]
[60.23423767 -221.31632996]
[73.81339264 -227.72027588]
[87.97904205 -232.69403076]
[102.58103180 -236.18489075]
[117.46455383 -238.15583801]
[132.47186279 -238.58596802]
[147.44383240 -237.47073364]
[162.22180176 -234.82194519]
[176.64906311 -230.66769409]
[190.57272339 -225.05201721]
[203.84516907 -218.03443909]
[216.32568359 -209.68934631]
[227.88200378 -200.10520935]
[238.39160156 -189.38362122]
[247.74307251 -177.63824463]
[255.83728027 -164.99357605]
[262.58843994 -151.58364868]
[267.92495728 -137.55064392]
[271.79031372 -123.04328918]
[274.14349365 -108.21538544]
[274.95953369 -93.22412109]
[274.22982788 -78.22840118]
[271.96209717 -63.38719940]
[268.18035889 -48.85783005]
[262.92471313 -34.79431915]
[256.25091553 -21.34574318]
[248.22962952 -8.65466976]
[238.94595337 3.14437103]
[228.49827576 13.92630291]
[216.99736023 23.57683182]
[204.56509399 31.99365425]
[191.33328247 39.08755112]
[177.44219971 44.78331757]
[163.03909302 49.02058411]
[148.27662659 51.75442505]
[133.31132507 52.95586014]
[118.30179596 52.61215973]
[103.40716553 50.72696304]
[100.00418091 65.33585358]
[122.73252106 77.34361267]
[129.52539062 100.09548950]
[144.02099609 103.95264435]
[158.51658630 107.80980682]
[173.01219177 111.66696930]
[188.69558716 106.87502289]
[200.50105286 118.25760651]
[196.28410339 134.10530090]
[180.38279724 138.11535645]
[169.15502930 126.16256714]
[154.65942383 122.30540466]
[140.16383362 118.44824219]
[125.66823578 114.59108734]
[123.02660370 118.48063660]
[119.80103302 121.90153503]
[116.07333374 124.76703644]
[111.93803406 127.00447083]
[107.50000000 128.55709839]
[107.50000000 143.55709839]
[107.50000000 158.55709839]
[107.50000000 173.55709839]
[107.50000000 188.55709839]
[107.50000000 203.55709839]
[107.50000000 218.55709839]
[107.50000000 233.55709839]
[107.50000000 248.55709839]
[107.50000000 263.55709839]
[107.50000000 278.55709839]
[122.03988647 282.61840820]
[134.94427490 290.45291138]
[145.25555420 301.47924805]
[152.20857239 314.87918091]
[155.28736877 329.65835571]
[154.26348877 344.72003174]
[149.21287537 358.94656372]
[140.51036072 371.28222656]
[128.80169678 380.81164551]
[114.95575714 386.82766724]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 36]
[24 35]
[25 34]
[26 33]
[38 49]
[39 48]
[40 47]
[41 46]
[50 112]
[51 111]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
