%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCUUUAGGGGGGGGGGUUAUCAGUCUCUUCCCCACAACAAUAUUCAUGUGCCUAGACCAAGAAGUUxxxxxxxxxxCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACCCCCCCCCCCUCCACCAUUA\
) } def
/len { sequence length } bind def

/coor [
[82.26938629 392.47390747]
[69.04918671 385.20144653]
[58.16238403 374.75442505]
[50.35125351 361.84518433]
[46.14837265 347.35388184]
[45.84030151 332.26852417]
[49.44804382 317.61770630]
[56.72561646 304.40032959]
[67.17682648 293.51754761]
[80.08908844 285.71139526]
[94.58202362 281.51412964]
[94.26996613 266.51736450]
[93.95790863 251.52061462]
[93.64585114 236.52384949]
[93.33379364 221.52709961]
[93.02174377 206.53034973]
[92.70968628 191.53359985]
[92.39762878 176.53683472]
[92.08557129 161.54008484]
[91.77351379 146.54333496]
[91.46145630 131.54658508]
[91.14940643 116.54982758]
[85.35002899 106.01873016]
[87.66835785 96.18422699]
[77.00673676 85.63293457]
[66.34510803 75.08164978]
[57.98688889 71.23561096]
[55.57429886 64.19820404]
[45.13448715 53.42739868]
[34.69467545 42.65658951]
[24.25486374 31.88578033]
[11.70509624 40.17671204]
[-2.15081644 46.01879120]
[-16.84041595 49.21441269]
[-31.86310768 49.65616989]
[-46.70722198 47.33048248]
[-60.86744308 42.31800842]
[-73.86199951 34.79083252]
[-85.24908447 25.00658226]
[-94.64183044 13.29958820]
[-101.72150421 0.06947000]
[-106.24827576 -14.23250198]
[-108.06938171 -29.11880493]
[-107.12425232 -44.08227921]
[-103.44653320 -58.61340714]
[-97.16291046 -72.21766663]
[-88.48870850 -84.43234253]
[-98.92852020 -95.20315552]
[-109.36833191 -105.97396088]
[-124.52887726 -110.49816895]
[-127.83110046 -125.02209473]
[-138.27091980 -135.79290771]
[-153.37442017 -132.64845276]
[-167.77212524 -138.19009399]
[-176.86976624 -150.64947510]
[-177.76432800 -166.05088806]
[-170.17034912 -179.47978210]
[-156.51104736 -186.65103149]
[-141.14505005 -185.27635193]
[-128.97560120 -175.79437256]
[-123.88591766 -161.23075867]
[-127.50010681 -146.23271179]
[-117.06029510 -135.46191406]
[-102.64647675 -131.70809937]
[-98.59752655 -116.41377258]
[-88.15771484 -105.64296722]
[-77.71790314 -94.87215424]
[-65.23851013 -103.16100311]
[-51.44480896 -109.01708221]
[-36.80599976 -112.23958588]
[-21.82032204 -112.71735382]
[-6.99809027 -110.43264771]
[7.15566969 -105.46181488]
[20.15843964 -97.97277069]
[31.56665421 -88.21930695]
[40.99083328 -76.53247833]
[48.10887527 -63.30937576]
[52.67707062 -48.99964523]
[54.53844452 -34.09019089]
[53.62815475 -19.08859825]
[49.97573471 -4.50586414]
[43.70415497 9.16101265]
[35.02567291 21.44596863]
[45.46548462 32.21677780]
[55.90529633 42.98758316]
[66.34510803 53.75839233]
[76.89640045 64.42002106]
[87.55802917 74.97131348]
[98.21965027 85.52259827]
[112.58783722 89.83018494]
[127.29579926 86.88470459]
[142.00375366 83.93921661]
[155.50579834 71.46224213]
[171.89913940 77.64756012]
[186.54264832 74.39673615]
[201.18614197 71.14591217]
[215.82965088 67.89508057]
[230.47314453 64.64425659]
[245.11665344 61.39343262]
[259.76016235 58.14260864]
[262.01644897 43.13349152]
[269.54568481 29.95491600]
[281.32962036 20.38917732]
[295.77456665 15.72996044]
[310.92694092 16.60738754]
[324.73751831 22.90279388]
[335.33856201 33.76477432]
[341.29632568 47.72434235]
[341.80508423 62.89357376]
[336.79605103 77.22095490]
[326.94662476 88.76882935]
[313.58889771 95.97544098]
[298.52935791 97.86615753]
[283.80468750 94.18526459]
[271.40631104 85.43058014]
[263.01098633 72.78610992]
[248.36747742 76.03693390]
[233.72396851 79.28775787]
[219.08047485 82.53858185]
[204.43696594 85.78941345]
[189.79347229 89.04023743]
[175.14996338 92.29106140]
[168.35906982 102.35043335]
[156.13694763 105.15019989]
[144.94923401 98.64717865]
[130.24128723 101.59266663]
[115.53331757 104.53814697]
[106.14615631 116.23777008]
[106.45821381 131.23452759]
[106.77027130 146.23127747]
[107.08232880 161.22802734]
[107.39437866 176.22477722]
[107.70643616 191.22154236]
[108.01849365 206.21829224]
[108.33055115 221.21504211]
[108.64260864 236.21179199]
[108.95466614 251.20855713]
[109.26671600 266.20529175]
[109.57877350 281.20205688]
[124.23376465 284.79281616]
[137.45957947 292.05508423]
[148.35444641 302.49368286]
[156.17553711 315.39688110]
[160.38961792 329.88494873]
[160.70933533 344.97006226]
[157.11289978 359.62365723]
[149.84555054 372.84664917]
[139.40274048 383.73748779]
[126.49651337 391.55361938]
[112.00682068 395.76208496]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[24 89]
[25 88]
[26 87]
[28 86]
[29 85]
[30 84]
[31 83]
[47 67]
[48 66]
[49 65]
[51 63]
[52 62]
[90 127]
[91 126]
[92 125]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
