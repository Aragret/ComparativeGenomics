%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCGAACCCAUCGGGGGGGGGGCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUxxxxxxxxxxACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUCCCCCCCCCCAUCGAAACCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 401.41250610]
[70.87159729 396.25750732]
[58.28185654 387.97531128]
[47.94191742 377.01254272]
[40.40940475 363.96041870]
[36.09054184 349.52282715]
[35.21823120 334.47836304]
[37.83952332 319.63836670]
[43.81304932 305.80313110]
[52.81666565 293.71878052]
[64.36482239 284.03698730]
[77.83473969 277.27990723]
[92.50000000 273.81195068]
[92.50000000 258.81195068]
[92.50000000 243.81193542]
[92.50000000 228.81193542]
[92.50000000 213.81193542]
[92.50000000 198.81193542]
[92.50000000 183.81193542]
[92.50000000 168.81193542]
[92.50000000 153.81193542]
[92.50000000 138.81193542]
[83.16245270 135.76469421]
[74.86444855 130.50935364]
[68.11830902 123.37037659]
[63.34053040 114.78851318]
[48.61773682 117.65893555]
[33.89494324 120.52936554]
[19.17214966 123.39978790]
[4.44935560 126.27021027]
[-10.27343845 129.14064026]
[-20.39353752 141.58905029]
[-36.43387985 141.29423523]
[-46.08969116 128.48233032]
[-41.95385361 112.98153687]
[-27.19903374 106.68274689]
[-13.14386272 114.41783905]
[1.57893133 111.54741669]
[16.30172539 108.67699432]
[31.02451897 105.80656433]
[45.74731445 102.93614197]
[60.47010803 100.06571960]
[67.10425568 78.07999420]
[84.84073639 63.49228287]
[81.82125854 48.79933167]
[78.80178070 34.10638428]
[75.78230286 19.41343307]
[72.76282501 4.72048473]
[57.78735352 5.87739420]
[42.78496933 5.14820623]
[27.99228477 2.54442143]
[13.64260101 -1.89289546]
[-0.03776835 -8.09376144]
[-12.83306313 -15.96037960]
[-24.54148102 -25.36868095]
[-34.97836685 -36.17028427]
[-43.97911453 -48.19483566]
[-51.40176773 -61.25268555]
[-57.12926483 -75.13789368]
[-61.07126617 -89.63147736]
[-63.16561127 -104.50483704]
[-63.37926483 -119.52341461]
[-61.70885468 -134.45033264]
[-58.18072891 -149.05018616]
[-52.85052872 -163.09269714]
[-45.80231857 -176.35639954]
[-37.14726257 -188.63212585]
[-27.02186394 -199.72624207]
[-15.58580971 -209.46379089]
[-3.01946664 -217.69120789]
[10.47897720 -224.27871704]
[24.69663239 -229.12242126]
[39.40926361 -232.14595032]
[54.38483429 -233.30158997]
[69.38715363 -232.57113647]
[84.17962646 -229.96611023]
[98.52893066 -225.52758789]
[112.20877838 -219.32557678]
[125.00341034 -211.45787048]
[136.71104431 -202.04858398]
[147.14701843 -191.24610901]
[156.14675903 -179.22079468]
[163.56831360 -166.16232300]
[169.29463196 -152.27662659]
[173.23541260 -137.78271484]
[175.32850647 -122.90917969]
[175.54089355 -107.89058685]
[173.86923218 -92.96380615]
[170.33987427 -78.36425781]
[165.00849915 -64.32218933]
[157.95916748 -51.05907440]
[149.30308533 -38.78408432]
[139.17674255 -27.69081879]
[127.73987579 -17.95422935]
[115.17283630 -9.72787857]
[101.67383575 -3.14150763]
[87.45578003 1.70100677]
[90.47525787 16.39395523]
[93.49473572 31.08690453]
[96.51421356 45.77985382]
[99.53369141 60.47280502]
[116.90782928 64.26847076]
[130.85989380 75.29608154]
[138.56602478 91.32366943]
[153.55908203 90.86769867]
[168.55215454 90.41173553]
[172.76992798 75.88363647]
[181.27236938 63.37109375]
[193.22650146 54.09996033]
[207.46118164 48.97852707]
[222.58183289 48.50853729]
[237.10710144 52.73603821]
[249.61393738 61.24686050]
[258.87707520 73.20719910]
[263.98895264 87.44531250]
[264.44882202 102.56627655]
[260.21157837 117.08871460]
[251.69238281 129.58984375]
[239.72583008 138.84495544]
[225.48431396 143.94731140]
[210.36303711 144.39703369]
[195.84344482 140.15007019]
[183.34802246 131.62249756]
[174.10093689 119.64974976]
[169.00811768 105.40480042]
[154.01506042 105.86077118]
[139.02198792 106.31673431]
[136.94386292 114.06297302]
[133.34501648 121.23033142]
[128.37355042 127.52377319]
[122.23413849 132.68424988]
[115.17948914 136.49931335]
[107.50000000 138.81193542]
[107.50000000 153.81193542]
[107.50000000 168.81193542]
[107.50000000 183.81193542]
[107.50000000 198.81193542]
[107.50000000 213.81193542]
[107.50000000 228.81193542]
[107.50000000 243.81193542]
[107.50000000 258.81195068]
[107.50000000 273.81195068]
[122.16526031 277.27990723]
[135.63517761 284.03698730]
[147.18333435 293.71878052]
[156.18695068 305.80313110]
[162.16047668 319.63836670]
[164.78176880 334.47836304]
[163.90945435 349.52282715]
[159.59059143 363.96041870]
[152.05809021 377.01254272]
[141.71813965 387.97531128]
[129.12840271 396.25750732]
[114.96779633 401.41250610]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[26 42]
[27 41]
[28 40]
[29 39]
[30 38]
[31 37]
[44 101]
[45 100]
[46 99]
[47 98]
[48 97]
[104 127]
[105 126]
[106 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
