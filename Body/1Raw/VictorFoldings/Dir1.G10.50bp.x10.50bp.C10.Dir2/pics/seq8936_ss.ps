%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUAACCAUGGGGGGGGGGAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACAUACCAAGGCCACCxxxxxxxxxxCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCCCCCCCCCCCACUAAACAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 387.37924194]
[71.19830322 381.36322021]
[59.48964310 371.83380127]
[50.78712082 359.49813843]
[45.73651886 345.27160645]
[44.71262741 330.20993042]
[47.79142761 315.43075562]
[54.74444962 302.03082275]
[65.05573273 291.00451660]
[77.96011353 283.16998291]
[92.50000000 279.10867310]
[92.50000000 264.10867310]
[92.50000000 249.10867310]
[92.50000000 234.10867310]
[92.50000000 219.10867310]
[92.50000000 204.10867310]
[92.50000000 189.10867310]
[92.50000000 174.10867310]
[92.50000000 159.10867310]
[92.50000000 144.10867310]
[92.50000000 129.10867310]
[86.13637543 126.67142487]
[80.48522186 122.86347961]
[75.83697510 117.88053131]
[61.93441772 123.51248932]
[48.03186417 129.14443970]
[38.37967300 142.40217590]
[22.10281754 140.40315247]
[15.94553185 125.20381927]
[26.24190140 112.43993378]
[42.39990616 115.24188995]
[56.30246353 109.60993195]
[70.20501709 103.97797394]
[72.76431274 87.28062439]
[83.92481232 74.60012817]
[79.31924438 60.32466507]
[74.71368408 46.04920578]
[70.10811615 31.77374649]
[65.50254822 17.49828529]
[60.89698792 3.22282434]
[46.18656540 6.23391676]
[31.23417854 7.60843658]
[16.22133446 7.32969904]
[1.33027422 5.40108681]
[-13.25823593 1.84601235]
[-27.36710739 -3.29236937]
[-40.82506943 -9.95168304]
[-53.46875381 -18.05109024]
[-65.14468384 -27.49227333]
[-75.71111298 -38.16062546]
[-85.03978729 -49.92663574]
[-93.01745605 -62.64748383]
[-99.54727936 -76.16874695]
[-104.54999542 -90.32629395]
[-107.96487427 -104.94825745]
[-109.75045776 -119.85713959]
[-109.88507843 -134.87196350]
[-108.36709595 -149.81047058]
[-105.21494293 -164.49131775]
[-100.46687317 -178.73628235]
[-94.18053436 -192.37245178]
[-86.43222809 -205.23429871]
[-77.31602478 -217.16567993]
[-66.94257355 -228.02177429]
[-55.43780518 -237.67077637]
[-42.94137192 -245.99559021]
[-29.60497665 -252.89514160]
[-15.59050560 -258.28567505]
[-1.06808305 -262.10174561]
[13.78600216 -264.29702759]
[28.79143524 -264.84490967]
[43.76606369 -263.73870850]
[58.52811050 -260.99185181]
[72.89837646 -256.63769531]
[86.70242310 -250.72909546]
[99.77267456 -243.33778381]
[111.95046997 -234.55345154]
[123.08799744 -224.48275757]
[133.05003357 -213.24795532]
[141.71568298 -200.98541260]
[148.97970581 -187.84399414]
[154.75396729 -173.98321533]
[158.96835327 -159.57133484]
[161.57170105 -144.78330994]
[162.53240967 -129.79864502]
[161.83882141 -114.79924011]
[159.49935913 -99.96717834]
[155.54241943 -85.48249817]
[150.01603699 -71.52104187]
[142.98728943 -58.25228882]
[134.54150391 -45.83729935]
[124.78121185 -34.42678452]
[113.82488251 -24.15926170]
[101.80551910 -15.15936470]
[88.86902618 -7.53634548]
[75.17244720 -1.38274002]
[79.77801514 12.89272022]
[84.38357544 27.16818047]
[88.98914337 41.44364166]
[93.59470367 55.71910095]
[98.20027161 69.99456024]
[118.56656647 76.36003113]
[129.57719421 94.63764954]
[144.53744507 95.72895813]
[159.49769592 96.82027435]
[164.97753906 82.73258972]
[174.36764526 70.88703156]
[186.83305359 62.33689499]
[201.26536560 57.84245300]
[216.38124084 57.80334473]
[230.83660889 62.22305298]
[243.34609985 70.70857239]
[252.79737854 82.50538635]
[258.35003662 96.56452179]
[259.51034546 111.63585663]
[256.17514038 126.37925720]
[248.64096069 139.48373413]
[237.57775879 149.78407288]
[223.96925354 156.36436462]
[209.02551270 158.63948059]
[194.07533264 156.40713501]
[180.44805908 149.86581421]
[169.35542297 139.59718323]
[161.78376770 126.51431274]
[158.40638733 111.78051758]
[143.44613647 110.68920898]
[128.48588562 109.59790039]
[123.81650543 118.33956146]
[116.55821228 125.08766174]
[107.50000000 129.10867310]
[107.50000000 144.10867310]
[107.50000000 159.10867310]
[107.50000000 174.10867310]
[107.50000000 189.10867310]
[107.50000000 204.10867310]
[107.50000000 219.10867310]
[107.50000000 234.10867310]
[107.50000000 249.10867310]
[107.50000000 264.10867310]
[107.50000000 279.10867310]
[122.03988647 283.16998291]
[134.94427490 291.00451660]
[145.25555420 302.03082275]
[152.20857239 315.43075562]
[155.28736877 330.20993042]
[154.26348877 345.27160645]
[149.21287537 359.49813843]
[140.51036072 371.83380127]
[128.80169678 381.36322021]
[114.95575714 387.37924194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 33]
[25 32]
[26 31]
[35 101]
[36 100]
[37 99]
[38 98]
[39 97]
[40 96]
[103 127]
[104 126]
[105 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
