%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCGCCCGGGGGGGGGGCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUAxxxxxxxxxxUUCCCCCUCUAUUGAUCCCCACCUCCAAAUAUCUCAUCAACAACCGACUACCCCCCCCCCAUCACCACCC\
) } def
/len { sequence length } bind def

/coor [
[282.38485718 227.77682495]
[273.06933594 218.35929871]
[264.54156494 208.22248840]
[256.85696411 197.43208313]
[250.06535339 186.05802917]
[244.21084595 174.17407227]
[239.33145142 161.85726929]
[235.45887756 149.18745422]
[232.61827087 136.24679565]
[230.82812500 123.11920166]
[230.10008240 109.88980103]
[215.10739136 109.42176056]
[200.11468506 108.95372009]
[185.11793518 108.64166260]
[170.11874390 108.48562622]
[155.11955261 108.32958984]
[140.12037659 108.17355347]
[125.12117767 108.01751709]
[110.12199402 107.86148071]
[88.65609741 145.97137451]
[74.24388123 150.12927246]
[59.83166122 154.28715515]
[45.41944504 158.44503784]
[44.10373688 173.56567383]
[37.41116333 187.18821716]
[26.24684334 197.47036743]
[12.12065601 203.02151489]
[-3.05694604 203.09092712]
[-17.23331833 197.66921997]
[-28.49122047 187.48962402]
[-35.30811691 173.92886353]
[-36.76207352 158.82090759]
[-32.65645981 144.20896912]
[-23.54652405 132.06922913]
[-10.66430950 124.04345703]
[4.24796867 121.21708679]
[19.17354774 123.97235107]
[32.09386826 131.93663025]
[41.26155853 144.03282166]
[55.67377472 139.87493896]
[70.08599091 135.71705627]
[84.49820709 131.55915833]
[85.43201447 124.11752319]
[87.29962921 109.23424530]
[88.23342896 101.79260254]
[75.29537964 94.20269775]
[62.35731888 86.61278534]
[47.12866211 90.83930969]
[33.41308975 82.98700714]
[29.34781265 67.71450806]
[37.34468842 54.08272552]
[52.65930939 50.17914581]
[66.20578003 58.31969833]
[69.94722748 73.67473602]
[82.88528442 81.26464081]
[95.82334137 88.85455322]
[110.27803040 92.86228943]
[125.27721405 93.01832581]
[140.27641296 93.17436218]
[155.27558899 93.33039856]
[170.27478027 93.48643494]
[185.27397156 93.64247131]
[193.95242310 90.58691406]
[200.58273315 93.96102142]
[215.57542419 94.42906189]
[230.56811523 94.89710236]
[232.78688049 77.85308838]
[236.77151489 61.13422394]
[242.47843933 44.92295074]
[249.84518433 29.39614868]
[258.79125977 14.72322178]
[269.21887207 1.06423080]
[281.01412964 -11.43183517]
[294.04818726 -22.62869263]
[308.17868042 -32.40424728]
[323.25134277 -40.65192795]
[339.10156250 -47.28184509]
[355.55630493 -52.22177124]
[372.43594360 -55.41793060]
[389.55624390 -56.83557892]
[406.73034668 -56.45938873]
[423.77078247 -54.29360580]
[440.49160767 -50.36201477]
[456.71038818 -44.70766449]
[472.25012207 -37.39239502]
[486.94125366 -28.49618340]
[500.62359619 -18.11624146]
[513.14782715 -6.36597061]
[524.37738037 6.62628222]
[534.18988037 20.71862602]
[542.47821045 35.75717545]
[549.15216064 51.57772827]
[563.47473145 47.12091064]
[577.79730225 42.66409683]
[592.11993408 38.20727921]
[606.44250488 33.75046539]
[606.38928223 18.63462639]
[610.79547119 4.17512989]
[619.26928711 -8.34229469]
[631.05725098 -17.80460739]
[645.11114502 -23.37042427]
[660.18139648 -24.54483986]
[674.92791748 -21.22342300]
[688.03942871 -13.70151329]
[698.35009766 -2.64795280]
[704.94317627 10.95438194]
[707.23223877 25.89598274]
[705.01391602 40.84825134]
[698.48535156 54.48163986]
[688.22711182 65.58387756]
[675.15130615 73.16777039]
[660.42065430 76.55894470]
[645.34503174 75.45587921]
[631.26495361 69.95664978]
[619.43231201 60.55023575]
[610.89935303 48.07306290]
[596.57672119 52.52987671]
[582.25415039 56.98669434]
[567.93157959 61.44350815]
[553.60894775 65.90032196]
[556.44647217 78.82855988]
[558.23461914 91.94352722]
[558.96160889 105.16017151]
[558.62280273 118.39278412]
[557.22021484 131.55555725]
[554.76300049 144.56311035]
[551.26702881 157.33108521]
[546.75488281 169.77664185]
[541.25573730 181.81907654]
[534.80529785 193.38024902]
[527.44531250 204.38517761]
[519.22344971 214.76243591]
[510.19305420 224.44471741]
[500.41256714 233.36917114]
[489.94540405 241.47790527]
[478.85946655 248.71826172]
[467.22656250 255.04325867]
[455.12213135 260.41183472]
[442.62466431 264.78909302]
[429.81518555 268.14663696]
[416.77676392 270.46264648]
[403.59393311 271.72198486]
[390.35217285 271.91650391]
[377.13735962 271.04486084]
[364.03521729 269.11264038]
[351.13073730 266.13232422]
[338.50759888 262.12322998]
[326.24768066 257.11126709]
[314.43051147 251.12890625]
[303.13275146 244.21488953]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 66]
[12 65]
[13 64]
[14 62]
[15 61]
[16 60]
[17 59]
[18 58]
[19 57]
[20 42]
[21 41]
[22 40]
[23 39]
[45 56]
[46 55]
[47 54]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
