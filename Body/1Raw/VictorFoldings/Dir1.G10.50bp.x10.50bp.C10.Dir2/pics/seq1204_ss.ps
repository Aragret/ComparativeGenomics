%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCGGCGUGGGGGGGGGGAAAGAGUGUUUUAGAUCACCCCCUCCCCAAUAAAGCUAAAACUCACCUGAxxxxxxxxxxUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCAUCCCCCCCCCCAAGCCUGCGU\
) } def
/len { sequence length } bind def

/coor [
[88.45693970 461.78109741]
[74.61100006 455.76507568]
[62.90233994 446.23565674]
[54.19981766 433.89999390]
[49.14921570 419.67346191]
[48.12532425 404.61178589]
[51.20412064 389.83261108]
[58.15714264 376.43267822]
[68.46842957 365.40634155]
[81.37281036 357.57183838]
[95.91269684 353.51052856]
[95.91269684 338.51052856]
[95.91269684 323.51052856]
[95.91269684 308.51052856]
[95.91269684 293.51052856]
[95.91269684 278.51052856]
[95.91269684 263.51052856]
[95.91269684 248.51052856]
[95.91269684 233.51052856]
[95.91269684 218.51052856]
[95.91269684 203.51052856]
[82.21878815 191.43267822]
[81.62608337 172.86534119]
[94.97029114 159.48881531]
[94.34631348 144.50180054]
[93.72233582 129.51478577]
[61.12582779 104.08068085]
[80.48211670 56.14683151]
[66.15952301 51.69001389]
[51.83692169 47.23320007]
[37.51432419 42.77638245]
[23.19172859 38.31956863]
[8.86913109 33.86275101]
[-5.45346594 29.40593719]
[-20.92933464 32.69349670]
[-30.78292656 21.52407455]
[-39.71559143 33.75053024]
[-52.13560867 42.41204834]
[-66.69574738 46.56908798]
[-81.81664276 45.77072525]
[-95.85807800 40.10356140]
[-107.29695892 30.18232918]
[-114.89246368 17.08320999]
[-117.82070160 2.22709465]
[-115.76403809 -12.77453327]
[-108.94556427 -26.29441071]
[-98.10488892 -36.86600113]
[-84.41793823 -43.34258270]
[-69.36936188 -45.02161407]
[-54.59152603 -41.72097778]
[-41.68741226 -33.79869461]
[-32.05676270 -22.11411667]
[-26.74424171 -7.93470097]
[-26.32611084 7.20147705]
[-11.87469006 3.59513497]
[-0.99665052 15.08333874]
[13.32594681 19.54015541]
[27.64854431 23.99697113]
[41.97114182 28.45378685]
[56.29373932 32.91060257]
[70.61633301 37.36741638]
[84.93893433 41.82423401]
[96.92576599 32.80670166]
[96.61370850 17.80994987]
[85.48990631 6.90588188]
[85.38706970 -8.30740452]
[95.85098267 -18.84505463]
[95.53892517 -33.84180832]
[81.48446655 -39.70627594]
[71.03508759 -50.78465271]
[66.00122070 -65.15754700]
[67.25500488 -80.33476257]
[74.57921600 -93.68675995]
[86.70488739 -102.90022278]
[101.53118134 -106.37886047]
[116.48934937 -103.51998138]
[128.98779297 -94.81890869]
[136.86108398 -81.78314209]
[138.74513245 -66.67121887]
[134.31350708 -52.10136795]
[124.33402252 -40.59790039]
[110.53568268 -34.15386581]
[110.84774017 -19.15711212]
[121.74094391 -9.06386471]
[122.27104950 6.14053059]
[111.61046600 17.49789429]
[111.92252350 32.49464798]
[118.43067169 36.22210312]
[125.88580322 23.20591736]
[138.90185547 30.66125870]
[131.44699097 43.67701340]
[137.95513916 47.40446854]
[151.04829407 40.08536148]
[164.14144897 32.76625824]
[177.23460388 25.44715118]
[190.32775879 18.12804604]
[203.42091370 10.80893993]
[211.69142151 -2.67843270]
[226.57611084 -2.13487148]
[237.45146179 -15.14113426]
[252.96003723 -8.29127884]
[250.67108154 8.50744152]
[233.89521790 10.95828342]
[226.56120300 23.92214394]
[210.74002075 23.90209389]
[197.64686584 31.22119904]
[184.55371094 38.54030609]
[171.46055603 45.85940933]
[158.36740112 53.17851639]
[145.27424622 60.49762344]
[148.37255859 75.17414856]
[163.30686951 76.57645416]
[178.24118042 77.97875214]
[192.91394043 70.65468597]
[206.44206238 79.92411041]
[204.90895081 96.25144196]
[189.89175415 102.84051514]
[176.83888245 92.91306305]
[161.90457153 91.51075745]
[146.97026062 90.10845184]
[140.33087158 111.93115997]
[125.60433960 125.47242737]
[108.70935059 128.89080811]
[109.33332825 143.87782288]
[109.95730591 158.86483765]
[120.16729736 165.10415649]
[126.01130676 175.40737915]
[126.12442017 187.13175964]
[120.59487915 197.33430481]
[110.91269684 203.51052856]
[110.91269684 218.51052856]
[110.91269684 233.51052856]
[110.91269684 248.51052856]
[110.91269684 263.51052856]
[110.91269684 278.51052856]
[110.91269684 293.51052856]
[110.91269684 308.51052856]
[110.91269684 323.51052856]
[110.91269684 338.51052856]
[110.91269684 353.51052856]
[125.45258331 357.57183838]
[138.35696411 365.40634155]
[148.66824341 376.43267822]
[155.62127686 389.83261108]
[158.70007324 404.61178589]
[157.67617798 419.67346191]
[152.62557983 433.89999390]
[143.92304993 446.23565674]
[132.21438599 455.76507568]
[118.36845398 461.78109741]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 125]
[25 124]
[26 123]
[28 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 57]
[34 56]
[36 54]
[63 87]
[64 86]
[67 83]
[68 82]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
[97 105]
[99 103]
[111 120]
[112 119]
[113 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
