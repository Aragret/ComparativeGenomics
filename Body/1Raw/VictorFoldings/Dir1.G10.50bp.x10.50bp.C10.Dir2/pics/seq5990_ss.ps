%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAGCCCUGGGGGGGGGGCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCxxxxxxxxxxUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCACAUUACAGCCCCCCCCCCUCAAAUCCCU\
) } def
/len { sequence length } bind def

/coor [
[35.79914093 535.61022949]
[21.95320320 529.59423828]
[10.24454117 520.06481934]
[1.54201686 507.72912598]
[-3.50858498 493.50262451]
[-4.53247643 478.44091797]
[-1.45367742 463.66177368]
[5.49934435 450.26184082]
[15.81062889 439.23550415]
[28.71500969 431.40100098]
[43.25489807 427.33969116]
[43.25489807 412.33969116]
[43.25489807 397.33969116]
[43.25489807 382.33969116]
[43.25489807 367.33969116]
[43.25489807 352.33969116]
[43.25489807 337.33969116]
[43.25489807 322.33969116]
[43.25489807 307.33969116]
[43.25489807 292.33969116]
[43.25489807 277.33969116]
[35.51759720 264.61242676]
[43.25489807 250.81224060]
[43.25489807 235.81224060]
[43.25489807 220.81224060]
[43.25489807 205.81224060]
[32.81508255 195.04142761]
[17.82238770 194.57339478]
[2.82969189 194.10534668]
[-12.16300392 193.63731384]
[-27.15570068 193.16926575]
[-42.14839554 192.70121765]
[-49.15093994 206.26319885]
[-61.34949875 215.43696594]
[-76.32203674 218.40106201]
[-91.09574890 214.56697083]
[-102.73729706 204.69593811]
[-108.93524933 190.74789429]
[-108.45899963 175.49220276]
[-101.40309906 161.95791626]
[-89.16851044 152.83226013]
[-74.18441772 149.92715454]
[-59.42592239 153.81938171]
[-47.82333374 163.73617554]
[-41.68035507 177.70852661]
[-26.68765831 178.17657471]
[-11.69496250 178.64460754]
[3.29773402 179.11265564]
[18.29043007 179.58070374]
[33.28312683 180.04873657]
[43.73510742 158.31520081]
[65.17299652 153.72724915]
[71.80149841 140.27127075]
[78.42999268 126.81531525]
[85.05849457 113.35934448]
[73.98632812 93.59152222]
[88.24243927 68.58852386]
[79.38478088 55.47927856]
[86.03734589 42.15288925]
[84.79047394 27.20480347]
[83.54360199 12.25671577]
[82.29672241 -2.69137144]
[67.44629669 -5.36103916]
[53.79325485 -11.78419304]
[42.26848984 -21.52289200]
[33.65778351 -33.91313553]
[28.54822159 -48.11013412]
[27.28818512 -63.14591599]
[29.96358681 -77.99531555]
[36.39200974 -91.64587402]
[46.13515854 -103.16687775]
[58.52872467 -111.77279663]
[72.72769928 -116.87687683]
[87.76396179 -118.13111115]
[102.61232758 -115.44997406]
[116.26040649 -109.01628113]
[127.77764130 -99.26868439]
[136.37878418 -86.87179565]
[141.47737122 -72.67085266]
[142.72579956 -57.63410187]
[140.03894043 -42.78677368]
[133.59997559 -29.14118385]
[123.84793091 -17.62770844]
[111.44772339 -9.03135872]
[97.24481201 -3.93824601]
[98.49168396 11.00984097]
[99.73856354 25.95792770]
[100.98543549 40.90601349]
[109.75391388 52.94607544]
[103.19052887 67.34165192]
[109.49609375 71.40242004]
[122.83510590 64.54161072]
[122.10722351 79.52396393]
[128.41278076 83.58473206]
[142.53758240 78.53598022]
[156.66238403 73.48722076]
[170.78718567 68.43846893]
[182.33560181 54.13412857]
[199.45303345 57.87492371]
[213.46974182 52.53340912]
[227.48645020 47.19189835]
[241.50317383 41.85038376]
[251.42907715 28.79633141]
[267.66082764 31.13353157]
[273.50057983 46.45767593]
[262.94088745 59.00459671]
[246.84468079 55.86709595]
[232.82797241 61.20861053]
[218.81126404 66.55012512]
[204.79454041 71.89163208]
[199.53536987 82.83002472]
[187.84895325 87.37385559]
[175.83595276 82.56327057]
[161.71115112 87.61202240]
[147.58634949 92.66078186]
[133.46154785 97.70954132]
[118.88896942 118.99964142]
[98.51445770 119.98784637]
[91.88595581 133.44381714]
[85.25746155 146.89978027]
[78.62895966 160.35574341]
[86.59732056 173.04585266]
[85.55809784 188.76791382]
[75.00736237 201.49085999]
[58.25489807 205.81224060]
[58.25489807 220.81224060]
[58.25489807 235.81224060]
[58.25489807 250.81224060]
[65.99219513 264.61242676]
[58.25489807 277.33969116]
[58.25489807 292.33969116]
[58.25489807 307.33969116]
[58.25489807 322.33969116]
[58.25489807 337.33969116]
[58.25489807 352.33969116]
[58.25489807 367.33969116]
[58.25489807 382.33969116]
[58.25489807 397.33969116]
[58.25489807 412.33969116]
[58.25489807 427.33969116]
[72.79478455 431.40100098]
[85.69916534 439.23550415]
[96.01045227 450.26184082]
[102.96347046 463.66177368]
[106.04226685 478.44091797]
[105.01837921 493.50262451]
[99.96777344 507.72912598]
[91.26525116 520.06481934]
[79.55658722 529.59423828]
[65.71065521 535.61022949]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[26 125]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[52 121]
[53 120]
[54 119]
[55 118]
[57 90]
[59 88]
[60 87]
[61 86]
[62 85]
[94 116]
[95 115]
[96 114]
[97 113]
[99 110]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
