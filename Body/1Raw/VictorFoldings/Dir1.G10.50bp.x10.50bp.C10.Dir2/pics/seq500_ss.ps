%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAACAGUCGGGGGGGGGGACCCCCCAACUAACACAUUAUUUUCCCCUCCCACUCCCAUACUACUAAUCxxxxxxxxxxCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGCCCCCCCCCCUUGAACAGUC\
) } def
/len { sequence length } bind def

/coor [
[-168.46667480 354.26556396]
[-185.48826599 349.95318604]
[-202.04371643 344.10250854]
[-217.99435425 336.76260376]
[-233.20654297 327.99508667]
[-247.55284119 317.87347412]
[-260.91308594 306.48266602]
[-271.57470703 317.03396606]
[-282.23632812 327.58526611]
[-283.09521484 340.49713135]
[-292.24688721 349.06832886]
[-304.38388062 349.07873535]
[-315.26272583 359.40594482]
[-326.14154053 369.73315430]
[-337.02038574 380.06036377]
[-347.89920044 390.38754272]
[-358.77801514 400.71475220]
[-362.91152954 416.58441162]
[-378.79153442 420.67807007]
[-390.08203125 408.78448486]
[-385.16833496 393.13879395]
[-369.10522461 389.83593750]
[-358.22640991 379.50872803]
[-347.34756470 369.18151855]
[-336.46875000 358.85430908]
[-325.58993530 348.52713013]
[-314.71109009 338.19992065]
[-310.67980957 321.14855957]
[-292.78762817 316.92361450]
[-282.12600708 306.37234497]
[-271.46438599 295.82104492]
[-279.99844360 285.83258057]
[-287.82879639 275.28317261]
[-294.91867065 264.22225952]
[-301.23477173 252.70176697]
[-306.74743652 240.77571106]
[-311.43075562 228.50007629]
[-315.26278687 215.93241882]
[-318.22546387 203.13172913]
[-320.30490112 190.15805054]
[-321.49127197 177.07226562]
[-321.77902222 163.93576050]
[-321.16674805 150.81019592]
[-319.65731812 137.75714111]
[-317.25778198 124.83785248]
[-313.97937012 112.11296082]
[-309.83743286 99.64218903]
[-304.85140991 87.48405457]
[-299.04461670 75.69561005]
[-292.44433594 64.33219147]
[-285.08148193 53.44713211]
[-276.99060059 43.09152222]
[-268.20959473 33.31396484]
[-258.77972412 24.16036415]
[-248.74513245 15.67368603]
[-238.15295410 7.89377356]
[-227.05282593 0.85715395]
[-215.49685669 -5.40313196]
[-203.53924561 -10.85768700]
[-191.23608398 -15.48089027]
[-178.64509583 -19.25102615]
[-165.82536316 -22.15037727]
[-152.83702087 -24.16531372]
[-139.74101257 -25.28635406]
[-126.59878540 -25.50821304]
[-113.47201538 -24.82982254]
[-100.42229462 -23.25433731]
[-87.51086426 -20.78912735]
[-74.79830170 -17.44573212]
[-62.34427261 -13.23981380]
[-50.20722198 -8.19108391]
[-38.44411469 -2.32320833]
[-27.11015129 4.33630371]
[-16.25853157 11.75622559]
[-5.94018984 19.90176392]
[3.79644108 28.73471642]
[12.90565681 38.21365738]
[21.34469414 48.29412460]
[29.07393456 58.92883682]
[36.05709076 70.06790924]
[42.26136780 81.65908051]
[47.65763474 93.64798737]
[52.22054672 105.97837067]
[66.63276672 101.82048798]
[81.04498291 97.66259766]
[88.14081573 85.02949524]
[102.06256104 81.01310730]
[114.79713440 87.92518616]
[129.20935059 83.76729584]
[143.62156677 79.60941315]
[158.03378296 75.45152283]
[172.44599915 71.29364014]
[186.85821533 67.13574982]
[201.27043152 62.97786331]
[215.68264771 58.81997681]
[230.00524902 54.36315918]
[244.23202515 49.60934448]
[254.86871338 37.89732361]
[269.39202881 41.20223999]
[283.61880493 36.44842529]
[297.84558105 31.69461060]
[312.07235718 26.94079590]
[326.29913330 22.18698120]
[336.75949097 9.55712986]
[352.87997437 12.56752396]
[358.07720947 28.12132645]
[347.00473022 40.21812057]
[331.05294800 36.41376114]
[316.82617188 41.16757584]
[302.59939575 45.92139053]
[288.37261963 50.67520523]
[274.14584351 55.42901993]
[264.52676392 66.80101776]
[248.98583984 63.83612442]
[234.75906372 68.58993530]
[231.83999634 72.44409943]
[226.44213867 74.46759796]
[219.84053040 73.23219299]
[205.42831421 77.39007568]
[191.01609802 81.54796600]
[176.60388184 85.70585632]
[162.19166565 89.86373901]
[147.77944946 94.02162933]
[133.36723328 98.17951202]
[118.95501709 102.33740234]
[111.85918427 114.97050476]
[97.93743896 118.98689270]
[85.20286560 112.07481384]
[70.79064941 116.23270416]
[56.37843323 120.39058685]
[59.79496765 137.62509155]
[61.62111282 155.09933472]
[61.84165573 172.66688538]
[60.45483017 190.18051147]
[57.47234726 207.49346924]
[52.91928864 224.46067810]
[46.83389282 240.94000244]
[39.26723480 256.79336548]
[30.28280258 271.88793945]
[19.95596123 286.09729004]
[8.37331676 299.30239868]
[-4.36800146 311.39266968]
[-18.16116142 322.26684570]
[-32.89052582 331.83386230]
[-48.43261719 340.01361084]
[-64.65715027 346.73767090]
[-81.42813110 351.94976807]
[-98.60499573 355.60626221]
[-116.04378510 357.67663574]
[-133.59835815 358.14361572]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 31]
[8 30]
[9 29]
[12 27]
[13 26]
[14 25]
[15 24]
[16 23]
[17 22]
[83 130]
[84 129]
[85 128]
[88 125]
[89 124]
[90 123]
[91 122]
[92 121]
[93 120]
[94 119]
[95 118]
[96 115]
[97 114]
[99 112]
[100 111]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
