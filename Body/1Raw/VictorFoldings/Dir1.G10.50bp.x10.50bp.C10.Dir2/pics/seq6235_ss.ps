%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCAGCCAUGGGGGGGGGGUUUACCUCACCCCCACUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAAxxxxxxxxxxAUUCUCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGCCCCCCCCCCACUCACCCAU\
) } def
/len { sequence length } bind def

/coor [
[86.27637482 431.92218018]
[72.43043518 425.90615845]
[60.72177505 416.37673950]
[52.01924896 404.04107666]
[46.96864700 389.81454468]
[45.94475555 374.75286865]
[49.02355576 359.97369385]
[55.97657776 346.57379150]
[66.28786469 335.54745483]
[79.19224548 327.71295166]
[93.73213196 323.65161133]
[93.73213196 308.65161133]
[93.73213196 293.65161133]
[93.73213196 278.65161133]
[93.73213196 263.65161133]
[93.73213196 248.65162659]
[93.73213196 233.65162659]
[93.73213196 218.65162659]
[93.73213196 203.65162659]
[93.73213196 188.65162659]
[93.73213196 173.65162659]
[84.14102173 158.98838806]
[93.39527893 143.10321045]
[93.08322144 128.10646057]
[92.77116394 113.10971069]
[89.82568359 98.40174866]
[84.33865356 84.44136047]
[78.70669556 70.53880310]
[64.36511993 64.45957947]
[58.70436096 50.33830261]
[64.58835602 36.70326614]
[58.81208038 22.86004829]
[53.03580856 9.01683044]
[47.25953674 -4.82638741]
[41.48326492 -18.66960526]
[35.25066757 -25.43766212]
[35.73413467 -32.86140060]
[30.24710464 -46.82179260]
[24.76007271 -60.78218079]
[10.25788975 -56.88773727]
[-4.58915043 -54.64154053]
[-19.59433174 -54.07183838]
[-34.56894684 -55.18579865]
[-49.32467651 -57.96941376]
[-63.67594528 -62.38767242]
[-77.44228363 -68.38500977]
[-90.45054626 -75.88600922]
[-102.53716278 -84.79633331]
[-113.55010986 -95.00392151]
[-123.35090637 -106.38040924]
[-131.81628418 -118.78272247]
[-138.83978271 -132.05488586]
[-144.33308411 -146.02999878]
[-148.22709656 -160.53230286]
[-150.47285461 -175.37940979]
[-151.04209900 -190.38459778]
[-149.92768860 -205.35919189]
[-147.14363098 -220.11483765]
[-142.72494507 -234.46597290]
[-136.72720337 -248.23213196]
[-129.22581482 -261.24017334]
[-120.31512451 -273.32650757]
[-110.10720825 -284.33917236]
[-98.73042297 -294.13961792]
[-86.32785797 -302.60461426]
[-73.05548096 -309.62771606]
[-59.08020782 -315.12060547]
[-44.57779312 -319.01419067]
[-29.73061752 -321.25949097]
[-14.72540283 -321.82830811]
[0.24914564 -320.71343994]
[15.00470734 -317.92895508]
[29.35571480 -313.50982666]
[43.12168884 -307.51165771]
[56.12950897 -300.00988770]
[68.21558380 -291.09884644]
[79.22792816 -280.89059448]
[89.02803802 -269.51351929]
[97.49267578 -257.11068726]
[104.51538849 -243.83811951]
[110.00785065 -229.86267090]
[113.90099335 -215.36013794]
[116.14585876 -200.51289368]
[116.71421051 -185.50767517]
[115.59890747 -170.53315735]
[112.81397247 -155.77767944]
[108.39442444 -141.42680359]
[102.39585114 -127.66100311]
[94.89368439 -114.65341187]
[85.98227692 -102.56759644]
[75.77369690 -91.55556488]
[64.39633179 -81.75579071]
[51.99325943 -73.29152679]
[38.72046280 -66.26921082]
[44.20749283 -52.30882263]
[49.69452667 -38.34843445]
[55.32648087 -24.44587708]
[61.10275650 -10.60266018]
[66.87902832 3.24055767]
[72.65529633 17.08377457]
[78.43157196 30.92699242]
[92.26193237 36.33594513]
[98.31709290 50.29265213]
[92.54991150 64.76252747]
[98.06389618 69.75669098]
[98.29904175 78.95433044]
[103.78607178 92.91471863]
[108.51646423 89.50624084]
[114.55309296 87.79095459]
[121.39802551 88.11417389]
[136.21578979 90.44527435]
[151.03353882 92.77638245]
[165.85130310 95.10748291]
[180.66906738 97.43859100]
[195.48681641 99.76969147]
[212.07315063 96.25832367]
[220.03886414 111.22441864]
[207.86276245 123.02184296]
[193.15571594 114.58744812]
[178.33795166 112.25634766]
[163.52020264 109.92523956]
[148.70243835 107.59413910]
[133.88468933 105.26303101]
[119.06692505 102.93193054]
[107.76792145 112.79765320]
[108.07997894 127.79441071]
[108.39203644 142.79116821]
[117.16511536 152.30361938]
[117.08068848 164.84204102]
[108.73213196 173.65162659]
[108.73213196 188.65162659]
[108.73213196 203.65162659]
[108.73213196 218.65162659]
[108.73213196 233.65162659]
[108.73213196 248.65162659]
[108.73213196 263.65161133]
[108.73213196 278.65161133]
[108.73213196 293.65161133]
[108.73213196 308.65161133]
[108.73213196 323.65161133]
[123.27201843 327.71295166]
[136.17639160 335.54745483]
[146.48768616 346.57379150]
[153.44070435 359.97369385]
[156.51950073 374.75286865]
[155.49560547 389.81454468]
[150.44500732 404.04107666]
[141.74249268 416.37673950]
[130.03382874 425.90615845]
[116.18788147 431.92218018]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 127]
[24 126]
[25 125]
[26 107]
[27 106]
[28 104]
[31 101]
[32 100]
[33 99]
[34 98]
[35 97]
[37 96]
[38 95]
[39 94]
[110 124]
[111 123]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
