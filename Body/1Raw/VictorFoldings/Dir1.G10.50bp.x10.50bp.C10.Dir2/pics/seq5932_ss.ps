%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACUAAUAAGGGGGGGGGGUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUCAxxxxxxxxxxACAGCAGUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACCCCCCCCCCCUAUACUACUAA\
) } def
/len { sequence length } bind def

/coor [
[79.40340424 419.13110352]
[65.91452789 412.39956665]
[54.42902374 402.63497925]
[45.61465454 390.40509033]
[39.98387527 376.42089844]
[37.86404419 361.49542236]
[39.37841415 346.49642944]
[44.43893814 332.29589844]
[52.75140381 319.71948242]
[63.83253479 309.49832153]
[77.03808594 302.22668457]
[91.60031128 298.32733154]
[91.29233551 283.33050537]
[90.98435974 268.33364868]
[90.67638397 253.33682251]
[90.36840057 238.33998108]
[90.06042480 223.34313965]
[89.75244904 208.34629822]
[89.44447327 193.34945679]
[89.13648987 178.35263062]
[88.82851410 163.35578918]
[88.52053833 148.35894775]
[77.10962677 158.09503174]
[62.14265442 157.10017395]
[52.12075043 145.93946838]
[52.73627853 130.95210266]
[63.63962936 120.65078735]
[78.63777924 120.88660431]
[89.21218109 131.52632141]
[90.74947357 116.60530853]
[81.40620422 109.68008423]
[77.20314789 97.65428162]
[80.73992920 84.26296234]
[67.04930115 78.13378143]
[53.35867691 72.00460815]
[39.54509354 66.15782166]
[25.61437798 60.59588623]
[11.68366146 55.03394699]
[-2.24705434 49.47201157]
[-12.32509422 60.79494858]
[-25.66950035 67.98540497]
[-40.66886902 70.17509460]
[-55.51195145 67.09960938]
[-68.40637970 59.13031769]
[-77.79508209 47.22956085]
[-82.54433441 32.83440781]
[-82.08063507 17.68314362]
[-76.45997620 3.60535932]
[-66.36109161 -7.69898653]
[-53.00345612 -14.86483765]
[-38.00007629 -17.02688408]
[-23.16268349 -13.92404652]
[-10.28296566 -5.93100929]
[-0.91620892 5.98703051]
[3.80650401 20.39091110]
[3.31488299 35.54129410]
[17.24559975 41.10323334]
[31.17631531 46.66516876]
[45.10703278 52.22710800]
[49.82257843 51.17219925]
[55.24695206 53.11231232]
[59.48785019 58.31398392]
[73.17847443 64.44316101]
[86.86910248 70.57233429]
[101.61370087 67.81609344]
[112.16571045 57.15518188]
[122.71772766 46.49427414]
[108.10121155 49.86435318]
[93.20225525 48.12619781]
[79.75403595 41.48200607]
[69.32094574 30.70468521]
[63.11665726 17.04793549]
[61.86289597 2.10042524]
[65.70551300 -12.39903259]
[74.19750214 -24.76374435]
[86.35101318 -33.55534744]
[100.75224304 -37.75112534]
[115.72592926 -36.86300278]
[129.53021240 -30.99428177]
[140.55924988 -20.82766533]
[147.53009033 -7.54581594]
[149.63179016 7.30621481]
[146.61988831 22.00071907]
[138.84590149 34.82699585]
[152.27334595 28.14092064]
[165.70079041 21.45484543]
[179.12825012 14.76877022]
[192.55569458 8.08269501]
[205.98313904 1.39661956]
[208.53921509 -15.29369736]
[220.40591431 -27.07121468]
[236.78689575 -29.45353317]
[251.22454834 -21.70083809]
[264.51190186 -28.66119385]
[277.79922485 -35.62154770]
[276.05966187 -50.69929123]
[279.88803101 -65.38629150]
[288.76663208 -77.69624329]
[301.49468994 -85.96434021]
[316.35079956 -89.07238007]
[331.32583618 -86.60002899]
[344.39456177 -78.88165283]
[353.78948975 -66.96109772]
[358.24008179 -52.45052338]
[357.14437866 -37.31236267]
[350.65060425 -23.59392929]
[339.63699341 -13.15052795]
[325.59301758 -7.39454222]
[310.41802979 -7.10442305]
[296.16433716 -12.31940651]
[284.75958252 -22.33420753]
[271.47222900 -15.37385178]
[258.18490601 -8.41349602]
[257.47064209 4.95220518]
[250.17370605 16.30217171]
[238.11819458 22.60058975]
[224.41722107 22.09986496]
[212.66921997 14.82406902]
[199.24177551 21.51014519]
[185.81431580 28.19622040]
[172.38687134 34.88229370]
[158.95942688 41.56837082]
[145.53196716 48.25444412]
[133.37863159 57.04628754]
[122.82662201 67.70719910]
[112.27460480 78.36810303]
[121.81540680 102.33432770]
[105.67049408 118.14260101]
[104.13320160 133.06361389]
[103.51737213 148.05097961]
[103.82535553 163.04780579]
[104.13333130 178.04464722]
[104.44130707 193.04148865]
[104.74928284 208.03833008]
[105.05726624 223.03515625]
[105.36524200 238.03199768]
[105.67321777 253.02883911]
[105.98119354 268.02566528]
[106.28917694 283.02252197]
[106.59715271 298.01934814]
[121.30718994 301.31756592]
[134.80014038 308.04092407]
[146.29156494 317.79852295]
[155.11334229 330.02307129]
[160.75260925 344.00384521]
[162.88148499 358.92803955]
[161.37620544 373.92797852]
[156.32429504 388.13153076]
[148.01945496 400.71301270]
[136.94451904 410.94085693]
[123.74337769 418.22052002]
[109.18351746 422.12872314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[29 129]
[30 128]
[33 64]
[34 63]
[35 62]
[36 59]
[37 58]
[38 57]
[39 56]
[65 126]
[66 125]
[67 124]
[84 123]
[85 122]
[86 121]
[87 120]
[88 119]
[89 118]
[93 113]
[94 112]
[95 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
