%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUGAUCUGAGGGGGGGGGGGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUACXUUCAAAUUCCUCCxxxxxxxxxxUUAGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCACCCCCCCCCCGUGCUCUGAG\
) } def
/len { sequence length } bind def

/coor [
[94.18167877 433.67388916]
[80.33573914 427.65786743]
[68.62708282 418.12844849]
[59.92455673 405.79278564]
[54.87395477 391.56625366]
[53.85006332 376.50457764]
[56.92886353 361.72540283]
[63.88188553 348.32546997]
[74.19316864 337.29916382]
[87.09754944 329.46463013]
[101.63743591 325.40332031]
[101.63743591 310.40332031]
[101.63743591 295.40332031]
[101.63743591 280.40332031]
[101.63743591 265.40332031]
[101.63743591 250.40333557]
[101.63743591 235.40333557]
[101.63743591 220.40333557]
[101.63743591 205.40333557]
[101.63743591 190.40333557]
[101.63743591 175.40333557]
[93.90013885 162.67605591]
[101.63743591 148.87588501]
[101.63743591 133.87588501]
[101.63743591 118.87588501]
[90.23641205 109.12823486]
[75.41865540 111.45933533]
[60.60089874 113.79043579]
[45.80819321 116.27555847]
[31.04213715 118.91442108]
[16.27608109 121.55328369]
[4.09359312 132.53140259]
[-11.41934586 127.21343231]
[-14.30435371 111.07005310]
[-1.59358263 100.70818329]
[13.63721657 106.78723145]
[28.40327263 104.14836884]
[43.16932678 101.50950623]
[49.23979187 97.20890808]
[58.26979446 98.97267914]
[73.08755493 96.64157867]
[87.90531158 94.31047058]
[99.50665283 84.80211639]
[104.70206451 70.73059845]
[109.89748383 56.65907669]
[105.21212006 44.59668732]
[109.87727356 32.95816040]
[120.86978149 27.81305885]
[126.35681152 13.85266972]
[126.59195709 4.65503120]
[132.10594177 -0.33912724]
[137.88221741 -14.18234539]
[123.15308380 -11.34462452]
[111.61360931 -20.92797089]
[111.69821167 -35.92773056]
[123.34505463 -45.38029861]
[138.04124451 -42.37660599]
[145.04501343 -29.11277199]
[152.22752380 -42.28135300]
[159.41003418 -55.44993591]
[166.59254456 -68.61852264]
[166.40791321 -84.43864441]
[179.29478455 -91.90710449]
[186.47729492 -105.07569122]
[193.65980530 -118.24427032]
[180.62559509 -110.82070160]
[165.95320129 -107.70288086]
[151.02658081 -109.18489075]
[137.25370789 -115.12694550]
[125.93370819 -124.96855927]
[118.13431549 -137.78141785]
[114.59122467 -152.35696411]
[115.63863373 -167.32035828]
[121.17774200 -181.26016235]
[130.68608093 -192.86152649]
[143.26676941 -201.03013611]
[157.73313904 -204.99549866]
[172.72065735 -204.38357544]
[186.81561279 -199.25210571]
[198.68850708 -190.08508301]
[207.21943665 -177.74720764]
[211.60372925 -163.40223694]
[211.42781067 -148.40327454]
[206.70820618 -134.16490173]
[218.21002197 -143.79344177]
[229.71182251 -153.42196655]
[231.64100647 -166.21774292]
[241.47349548 -173.99856567]
[253.56936646 -173.00004578]
[258.34460449 -180.86445618]
[265.61145020 -182.45774841]
[277.50381470 -191.59948730]
[275.40637207 -206.81448364]
[281.21228027 -221.03372192]
[293.35980225 -230.43231201]
[308.58129883 -232.48205566]
[322.78228760 -226.63160706]
[332.14273071 -214.45468140]
[334.14477539 -199.22683716]
[328.24981689 -185.04426575]
[316.04364014 -175.72201538]
[300.80957031 -173.76773071]
[286.64553833 -179.70710754]
[274.75317383 -170.56536865]
[262.95654297 -161.30041504]
[257.52178955 -144.64317322]
[239.34034729 -141.92015076]
[227.83854675 -132.29162598]
[216.33674622 -122.66310883]
[206.82838440 -111.06176758]
[199.64587402 -97.89318085]
[192.46336365 -84.72460175]
[193.16172791 -69.84637451]
[179.76112366 -61.43600845]
[172.57861328 -48.26742935]
[165.39610291 -35.09884644]
[158.21359253 -21.93026161]
[151.72543335 -8.40607262]
[145.94915771 5.43714523]
[140.31719971 19.33970070]
[134.83016968 33.30009079]
[138.39270020 50.45550919]
[123.96900177 61.85449219]
[118.77359009 75.92601013]
[113.57817078 89.99752808]
[116.63743591 118.87588501]
[116.63743591 133.87588501]
[116.63743591 148.87588501]
[124.37473297 162.67605591]
[116.63743591 175.40333557]
[116.63743591 190.40333557]
[116.63743591 205.40333557]
[116.63743591 220.40333557]
[116.63743591 235.40333557]
[116.63743591 250.40333557]
[116.63743591 265.40332031]
[116.63743591 280.40332031]
[116.63743591 295.40332031]
[116.63743591 310.40332031]
[116.63743591 325.40332031]
[131.17732239 329.46463013]
[144.08171082 337.29916382]
[154.39299011 348.32546997]
[161.34600830 361.72540283]
[164.42480469 376.50457764]
[163.40092468 391.56625366]
[158.35031128 405.79278564]
[149.64779663 418.12844849]
[137.93913269 427.65786743]
[124.09319305 433.67388916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[26 42]
[27 41]
[28 40]
[29 38]
[30 37]
[31 36]
[43 125]
[44 124]
[45 123]
[48 121]
[49 120]
[51 119]
[52 118]
[58 117]
[59 116]
[60 115]
[61 114]
[63 112]
[64 111]
[65 110]
[84 109]
[85 108]
[86 107]
[89 105]
[91 104]
[92 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
