%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUGCCACUAGGGGGGGGGGAUAGUUAUGUCAUCCCUCUUAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCxxxxxxxxxxCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAACCCCCCCCCCAACCUGCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[83.13600159 364.41186523]
[69.43385315 358.15097046]
[57.46873474 348.99761963]
[47.84082031 337.41094971]
[41.03304291 323.97213745]
[37.38687515 309.35525513]
[37.08520889 294.29348755]
[40.14317322 279.54232788]
[46.40738297 265.84170532]
[55.56362534 253.87879944]
[67.15263367 244.25369263]
[80.59310150 237.44917297]
[95.21086884 233.80654907]
[94.90686035 218.80963135]
[94.60285950 203.81271362]
[94.29885101 188.81579590]
[93.99485016 173.81887817]
[93.69084930 158.82196045]
[93.38684082 143.82504272]
[93.08283997 128.82812500]
[92.77883148 113.83119965]
[89.46219635 99.20246124]
[83.26870728 85.54081726]
[77.07521057 71.87916565]
[70.88172150 58.21751404]
[64.68823242 44.55586243]
[50.59059143 49.70113754]
[36.14419174 53.76548004]
[21.43178177 56.72561646]
[6.53763533 58.56458664]
[-8.45293331 59.27185822]
[-23.45405960 58.84337616]
[-38.37981796 57.28160095]
[-53.14471054 54.59547424]
[-67.66416931 50.80038834]
[-81.85502625 45.91807175]
[-95.63599396 39.97649765]
[-108.92813873 33.00969696]
[-121.65531921 25.05757141]
[-133.74462891 16.16567802]
[-145.12684631 6.38494444]
[-155.73674011 -4.22860384]
[-165.51356506 -15.61417294]
[-174.40130615 -27.70654678]
[-182.34904480 -40.43646240]
[-189.31127930 -53.73099899]
[-195.24810791 -67.51400757]
[-200.12554932 -81.70654297]
[-203.91564941 -96.22730255]
[-206.59669495 -110.99312592]
[-208.15333557 -125.91941833]
[-208.57666016 -140.92068481]
[-207.86422729 -155.91101074]
[-206.02014160 -170.80451965]
[-203.05494690 -185.51591492]
[-198.98564148 -199.96092224]
[-193.83552551 -214.05679321]
[-187.63409424 -227.72279358]
[-180.41687012 -240.88064575]
[-172.22520447 -253.45498657]
[-163.10601807 -265.37377930]
[-153.11152649 -276.56878662]
[-142.29899597 -286.97583008]
[-130.73036194 -296.53530884]
[-118.47188568 -305.19250488]
[-105.59377289 -312.89782715]
[-92.16979980 -319.60708618]
[-78.27685547 -325.28189087]
[-63.99452209 -329.88973999]
[-49.40460205 -333.40423584]
[-34.59066772 -335.80523682]
[-19.63757896 -337.07901001]
[-4.63098001 -337.21823120]
[10.34316921 -336.22210693]
[25.19909668 -334.09637451]
[39.85171127 -330.85314941]
[54.21707535 -326.51107788]
[68.21291351 -321.09500122]
[81.75905609 -314.63595581]
[94.77790070 -307.17089844]
[107.19489288 -298.74261475]
[118.93889618 -289.39941406]
[129.94264221 -279.19476318]
[140.14311218 -268.18713379]
[149.48185730 -256.43957520]
[157.90541077 -244.01937866]
[165.36550903 -230.99768066]
[171.81941223 -217.44909668]
[177.23016357 -203.45120239]
[181.56677246 -189.08418274]
[184.80439758 -174.43032837]
[186.92449951 -159.57359314]
[187.91491699 -144.59907532]
[187.76998901 -129.59252930]
[186.49053955 -114.63992310]
[184.08390808 -99.82690430]
[180.56385803 -85.23831940]
[175.95057678 -70.95774078]
[170.27047729 -57.06695557]
[163.55610657 -43.64553452]
[155.84590149 -30.77035713]
[147.18405151 -18.51517105]
[137.62014771 -6.95017099]
[127.20899200 3.85839677]
[116.01020050 13.84862137]
[104.08793640 22.96327972]
[91.51048279 31.15016174]
[78.34988403 38.36237335]
[84.54337311 52.02402496]
[90.73686218 65.68567657]
[96.93035126 79.34732056]
[103.12384796 93.00897217]
[110.95527649 85.09690094]
[121.99237061 80.58546448]
[135.07150269 80.40338898]
[149.59265137 84.16317749]
[164.11381531 87.92296600]
[174.82472229 76.91515350]
[189.60891724 72.75301361]
[204.48950195 76.55612946]
[215.46368408 87.30149841]
[219.57946777 102.09865570]
[215.72972107 116.96724701]
[204.95001221 127.90769196]
[190.14002991 131.97708130]
[175.28356934 128.08074951]
[164.37696838 117.26679230]
[160.35403442 102.44412231]
[145.83287048 98.68433380]
[131.31170654 94.92454529]
[125.42772675 99.57521057]
[113.65974426 108.87653351]
[107.77574921 113.52719116]
[108.07975769 128.52410889]
[108.38375854 143.52102661]
[108.68776703 158.51795959]
[108.99176788 173.51487732]
[109.29577637 188.51179504]
[109.59977722 203.50871277]
[109.90378571 218.50563049]
[110.20778656 233.50254822]
[124.96115875 236.54978943]
[138.66635132 242.80403137]
[150.63589478 251.95158386]
[160.26942444 263.53359985]
[167.08370972 276.96911621]
[170.73696899 291.58422852]
[171.04592896 306.64584351]
[167.99511719 321.39846802]
[161.73754883 335.10214233]
[152.58709717 347.06948853]
[141.00276184 356.70019531]
[127.56558990 363.51123047]
[112.94959259 367.16094971]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
