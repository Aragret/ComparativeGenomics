%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCCAAACGGGGGGGGGGAAUCUCAUAUGAAGUCACCCUAGCCAUCAUUCUACUAUCAACAUUACUAAxxxxxxxxxxGUGAACUGUAUCCGACAUCUGGUUCCUACUUCAGGGUCAUAAAGCCUAAACCCCCCCCCCUAGCCCACAC\
) } def
/len { sequence length } bind def

/coor [
[90.75885773 638.73358154]
[76.91291809 632.71752930]
[65.20425415 623.18811035]
[56.50172806 610.85247803]
[51.45112610 596.62591553]
[50.42723465 581.56427002]
[53.50603485 566.78509521]
[60.45905685 553.38519287]
[70.77033997 542.35882568]
[83.67472076 534.52429199]
[98.21460724 530.46301270]
[98.21460724 515.46301270]
[98.21460724 500.46301270]
[98.21460724 485.46301270]
[98.21460724 470.46301270]
[98.21460724 455.46301270]
[98.21460724 440.46301270]
[98.21460724 425.46301270]
[98.21460724 410.46301270]
[98.21460724 395.46301270]
[82.68966675 390.16870117]
[69.88064575 379.88174438]
[61.33388138 365.82168579]
[58.08877563 349.66485596]
[60.55140686 333.34454346]
[68.44380951 318.81970215]
[80.83522034 307.83975220]
[96.25183105 301.73391724]
[95.62785339 286.74688721]
[95.00387573 271.75988770]
[94.37989807 256.77285767]
[82.23513031 265.57653809]
[67.72451782 261.77624512]
[61.45414352 248.14971924]
[68.00714874 234.65682983]
[82.59381104 231.15979004]
[94.55216217 240.21406555]
[95.48778534 225.24327087]
[96.42341614 210.27249146]
[97.35904694 195.30169678]
[98.29467010 180.33090210]
[97.98261261 165.33415222]
[96.42503357 150.41523743]
[94.86745453 135.49632263]
[93.30987549 120.57741547]
[91.75228882 105.65850067]
[87.89513397 91.16290283]
[81.83212280 77.44284821]
[75.76910400 63.72279739]
[61.12686920 67.17527008]
[46.09954453 67.87821198]
[31.19895554 65.80768585]
[16.93260956 61.03421783]
[3.78641486 53.72037888]
[-7.79187441 44.11528397]
[-17.40790558 32.54607391]
[-24.73416138 19.40679741]
[-29.52111244 5.14496946]
[-31.60571480 -9.75365734]
[-30.91696930 -24.78164101]
[-27.47833443 -39.42713165]
[-21.40692902 -53.19131470]
[-12.90954208 -65.60537720]
[-2.27559137 -76.24651337]
[10.13273430 -84.75228119]
[23.89281082 -90.83298492]
[38.53597641 -94.28150940]
[53.56349182 -94.98040009]
[68.46352386 -92.90586090]
[82.72858429 -88.12854767]
[95.87280273 -80.81116486]
[107.44850159 -71.20294952]
[117.06141663 -59.63114929]
[124.38413239 -46.48989487]
[129.16723633 -32.22677612]
[131.24781799 -17.32758904]
[130.55502319 -2.29979229]
[127.11244202 12.34477234]
[121.03733063 26.10731697]
[112.53659821 38.51909256]
[101.89978027 49.15736008]
[89.48915863 57.65978241]
[95.55216980 71.37983704]
[101.61518860 85.09989166]
[109.04670715 86.11106110]
[123.90975952 88.13339233]
[131.34127808 89.14456177]
[140.84963989 77.54322052]
[150.35800171 65.94187927]
[150.21234131 49.89948654]
[162.75433350 39.89558411]
[178.36282349 43.60431290]
[185.06431580 58.18064880]
[177.71800232 72.44287872]
[161.95933533 75.45023346]
[152.45097351 87.05157471]
[142.94262695 98.65291595]
[130.83944702 105.06607056]
[118.30973816 106.82910156]
[106.67120361 104.10092163]
[108.22878265 119.01982880]
[109.78636932 133.93875122]
[111.34394836 148.85765076]
[112.90152740 163.77656555]
[121.98328400 151.83831787]
[136.30065918 147.36474609]
[150.56365967 152.00874329]
[159.50239563 164.05444336]
[159.81419373 179.05120850]
[151.38383484 191.45802307]
[137.32617188 196.69081116]
[122.83523560 192.81617737]
[113.26546478 181.26652527]
[112.32983398 196.23731995]
[111.39420319 211.20811462]
[110.45858002 226.17890930]
[109.52294922 241.14970398]
[109.36691284 256.14889526]
[109.99089050 271.13589478]
[110.61486816 286.12292480]
[111.23884583 301.10992432]
[124.45400238 304.66979980]
[136.10865784 311.81265259]
[145.25633240 321.94729614]
[151.15731812 334.23992920]
[153.33848572 347.68286133]
[151.63117981 361.17718506]
[146.18423462 373.62240601]
[137.45109558 384.00637817]
[126.15197754 391.48748779]
[113.21460724 395.46301270]
[113.21460724 410.46301270]
[113.21460724 425.46301270]
[113.21460724 440.46301270]
[113.21460724 455.46301270]
[113.21460724 470.46301270]
[113.21460724 485.46301270]
[113.21460724 500.46301270]
[113.21460724 515.46301270]
[113.21460724 530.46301270]
[127.75449371 534.52429199]
[140.65887451 542.35882568]
[150.97015381 553.38519287]
[157.92318726 566.78509521]
[161.00198364 581.56427002]
[159.97808838 596.62591553]
[154.92749023 610.85247803]
[146.22496033 623.18811035]
[134.51629639 632.71752930]
[120.67036438 638.73358154]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 121]
[29 120]
[30 119]
[31 118]
[37 117]
[38 116]
[39 115]
[40 114]
[41 113]
[42 104]
[43 103]
[44 102]
[45 101]
[46 100]
[47 84]
[48 83]
[49 82]
[87 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
