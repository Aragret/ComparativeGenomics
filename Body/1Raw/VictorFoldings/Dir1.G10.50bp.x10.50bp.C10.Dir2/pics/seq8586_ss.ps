%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGUUAUUAGGGGGGGGGGUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAxxxxxxxxxxCAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCCCCCCCCCCCUAAUUAUUA\
) } def
/len { sequence length } bind def

/coor [
[103.28790283 364.69070435]
[89.44196320 358.67465210]
[77.73329926 349.14523315]
[69.03077698 336.80957031]
[63.98017120 322.58306885]
[62.95627975 307.52136230]
[66.03507996 292.74221802]
[72.98809814 279.34228516]
[83.29938507 268.31594849]
[96.20376587 260.48144531]
[110.74365234 256.42013550]
[110.74365234 241.42013550]
[110.74365234 226.42013550]
[110.74365234 211.42013550]
[110.74365234 196.42013550]
[110.74365234 181.42013550]
[110.74365234 166.42013550]
[110.74365234 151.42013550]
[110.74365234 136.42013550]
[110.74365234 121.42013550]
[90.77091980 119.53804016]
[81.22525024 104.26356506]
[66.45919800 101.62469482]
[75.94538116 113.24417877]
[77.79093170 128.13020325]
[71.42948151 141.71446228]
[58.81326294 149.82809448]
[43.81404495 149.98114014]
[31.03488922 142.12664795]
[24.39756203 128.67503357]
[25.93896866 113.75444031]
[35.18607330 101.94380951]
[49.30186081 96.86761475]
[35.28514862 91.52610016]
[21.26843452 86.18459320]
[12.43795776 98.41917419]
[0.74121618 107.95063019]
[-13.02428913 114.12908173]
[-27.92000198 116.53327942]
[-42.93030930 114.99929047]
[-57.03178024 109.63171387]
[-69.26295471 100.79651642]
[-78.78989410 89.09609222]
[-84.96303558 75.32820129]
[-87.36147308 60.43156433]
[-85.82169342 45.42185211]
[-80.44866943 31.32245255]
[-71.60874939 19.09468842]
[-59.90465164 9.57226849]
[-46.13437653 3.40444708]
[-31.23681259 1.01175642]
[-16.22769547 2.55733418]
[-2.13037276 7.93580008]
[10.09397697 16.78044128]
[19.61187744 28.48821640]
[25.77438164 42.26086807]
[28.16131973 57.15935898]
[26.60994720 72.16787720]
[40.62665939 77.50939178]
[54.64337158 82.85089874]
[69.09806061 86.85864258]
[83.86411285 89.49750519]
[92.13690186 81.14331055]
[104.37049103 78.83848572]
[116.38362122 84.16429138]
[123.61942291 95.95385742]
[135.69940186 87.06150818]
[129.17616272 73.50852203]
[125.25550842 58.99147415]
[124.06954956 44.00515366]
[125.65721893 29.06006432]
[129.96299744 14.66503334]
[136.83882141 1.30989254]
[146.04922485 -10.55119419]
[157.27937317 -20.51517296]
[170.14582825 -28.24379921]
[184.20965576 -33.47511673]
[198.99134827 -36.03233337]
[213.98727417 -35.82980728]
[228.68669128 -32.87589645]
[242.58930969 -27.27264023]
[255.22218323 -19.21222878]
[266.15588379 -8.97041225]
[278.23587036 -17.86276245]
[290.31585693 -26.75511169]
[293.35974121 -32.74195480]
[298.25372314 -35.78828430]
[303.08840942 -35.75368118]
[315.52786255 -44.13582230]
[327.96731567 -52.51796722]
[333.37973022 -59.95822906]
[340.75387573 -60.94194412]
[353.36499023 -69.06348419]
[365.97613525 -77.18502808]
[365.15066528 -92.52172089]
[372.11846924 -106.20913696]
[385.00521851 -114.56543732]
[400.34442139 -115.34280396]
[414.00991821 -108.33213806]
[422.32577515 -95.41927338]
[423.05505371 -80.07770538]
[416.00161743 -66.43424225]
[403.06274414 -58.15889740]
[387.71896362 -57.47770309]
[374.09765625 -64.57389832]
[361.48654175 -56.45235825]
[348.87539673 -48.33081436]
[336.34945679 -40.07852554]
[323.91000366 -31.69638252]
[311.47058105 -23.31423950]
[299.20819092 -14.67512321]
[287.12820435 -5.78277302]
[275.04821777 3.10957646]
[281.57888794 16.59255028]
[285.52178955 31.04983902]
[286.74124146 45.98945999]
[285.19424438 60.90272903]
[280.93203735 75.28160095]
[274.09832764 88.63595581]
[264.92462158 100.51031494]
[253.72212219 110.49938965]
[240.87139893 118.26187134]
[226.80935669 123.53215790]
[212.01438904 126.12937164]
[196.99009705 125.96363068]
[182.24819946 123.03910065]
[168.29104614 117.45394897]
[155.59449768 109.39703369]
[144.59175110 99.14150238]
[132.51176453 108.03385162]
[125.74365234 121.42013550]
[125.74365234 136.42013550]
[125.74365234 151.42013550]
[125.74365234 166.42013550]
[125.74365234 181.42013550]
[125.74365234 196.42013550]
[125.74365234 211.42013550]
[125.74365234 226.42013550]
[125.74365234 241.42013550]
[125.74365234 256.42013550]
[140.28353882 260.48144531]
[153.18792725 268.31594849]
[163.49920654 279.34228516]
[170.45222473 292.74221802]
[173.53102112 307.52136230]
[172.50714111 322.58306885]
[167.45652771 336.80957031]
[158.75401306 349.14523315]
[147.04534912 358.67465210]
[133.19940186 364.69070435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 62]
[23 61]
[33 60]
[34 59]
[35 58]
[66 130]
[67 129]
[83 113]
[84 112]
[85 111]
[88 110]
[89 109]
[90 108]
[92 107]
[93 106]
[94 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
