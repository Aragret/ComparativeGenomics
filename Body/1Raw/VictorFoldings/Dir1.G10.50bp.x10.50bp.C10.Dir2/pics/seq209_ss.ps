%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACAAUUGGGGGGGGGGGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAAAAUUUCCAxxxxxxxxxxACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGCCCCCCCCCCAUAUCAAUUG\
) } def
/len { sequence length } bind def

/coor [
[85.99156952 352.59313965]
[72.14562988 346.57711792]
[60.43696976 337.04769897]
[51.73444366 324.71203613]
[46.68384171 310.48550415]
[45.65995026 295.42382812]
[48.73875046 280.64465332]
[55.69177246 267.24472046]
[66.00305939 256.21841431]
[78.90744019 248.38389587]
[93.44732666 244.32258606]
[93.44732666 229.32258606]
[93.44732666 214.32258606]
[93.44732666 199.32258606]
[93.44732666 184.32258606]
[93.44732666 169.32258606]
[93.44732666 154.32258606]
[93.44732666 139.32258606]
[93.44732666 124.32257843]
[93.44732666 109.32257843]
[91.03742218 108.77864838]
[88.63399506 107.64188385]
[73.64129639 108.10992432]
[58.64859772 108.57796478]
[43.65590286 109.04601288]
[28.66320801 109.51405334]
[13.67051125 109.98209381]
[-1.32218480 110.45013428]
[-5.76924038 124.92433167]
[-14.67712402 137.16885376]
[-27.07957458 145.85551453]
[-41.63126755 150.04202271]
[-56.75374603 149.27429199]
[-70.80663300 143.63557434]
[-82.26557922 133.73753357]
[-89.88760376 120.65382385]
[-92.84592438 105.80367279]
[-90.81964111 90.79790497]
[-84.02855682 77.26425171]
[-73.20932007 66.67072296]
[-59.53551483 60.16643906]
[-44.49037170 58.45692825]
[-29.70587921 61.72763062]
[-16.78574753 69.62376404]
[-7.13145447 81.28881073]
[-1.79022694 95.45744324]
[13.20246887 94.98939514]
[28.19516563 94.52135468]
[43.18786240 94.05331421]
[58.18055725 93.58527374]
[73.17325592 93.11722565]
[88.16594696 92.64918518]
[101.55223083 85.88107300]
[110.81718445 74.08443451]
[120.08213043 62.28779221]
[129.34707642 50.49115372]
[131.78599548 34.85906219]
[145.73211670 29.62883759]
[140.26541138 20.31256294]
[137.85008240 9.81973934]
[138.68804932 -0.88019842]
[142.68162537 -10.80503178]
[149.44441223 -19.04991531]
[158.33859253 -24.86987495]
[168.53501892 -27.74709129]
[169.78190613 -42.69517899]
[171.02877808 -57.64326477]
[172.27565002 -72.59135437]
[173.52252197 -87.53943634]
[159.74819946 -93.86745453]
[148.97105408 -104.52714539]
[142.49249268 -118.23130798]
[141.09481812 -133.32508850]
[144.94682312 -147.98585510]
[153.58334351 -160.44322205]
[165.96148682 -169.19293213]
[180.58653259 -173.17840576]
[195.69242859 -171.91836548]
[209.45506287 -165.56497192]
[220.21253967 -154.88543701]
[226.66584778 -141.16937256]
[228.03569031 -126.07303619]
[224.15667725 -111.41939545]
[215.49722290 -98.97795105]
[203.10296631 -90.25107574]
[188.47061157 -86.29256439]
[187.22373962 -71.34447479]
[185.97686768 -56.39638901]
[184.72998047 -41.44830322]
[183.48310852 -26.50021553]
[190.17164612 -23.63777161]
[196.12100220 -19.45024872]
[201.07238770 -14.11979008]
[204.81047058 -7.87824297]
[219.45396423 -11.12906933]
[234.09747314 -14.37989426]
[241.85643005 -19.32461929]
[249.07933044 -17.54267693]
[263.78729248 -20.48815918]
[278.49526978 -23.43364143]
[293.20321655 -26.37912369]
[281.62142944 -35.91127777]
[279.98062134 -50.82126617]
[289.21240234 -62.64388657]
[304.07537842 -64.66679382]
[316.13101196 -55.74148178]
[318.53469849 -40.93532562]
[309.92044067 -28.65374565]
[324.88067627 -29.74505615]
[338.13726807 -39.39881134]
[353.01412964 -32.49874878]
[354.20724487 -16.14306068]
[340.48922729 -7.15707731]
[325.97198486 -14.78480721]
[311.01174927 -13.69349670]
[296.14871216 -11.67116261]
[281.44073486 -8.72568035]
[266.73278809 -5.78019762]
[252.02482605 -2.83471513]
[237.34829712 0.26360664]
[222.70478821 3.51443243]
[208.06129456 6.76525831]
[200.64630127 28.75772858]
[180.95854187 41.37708282]
[157.52874756 38.89378738]
[155.75251770 53.68210220]
[141.14372253 59.75609970]
[131.87876892 71.55274200]
[122.61382294 83.34938049]
[113.34887695 95.14601898]
[108.44732666 109.32257843]
[108.44732666 124.32257843]
[108.44732666 139.32258606]
[108.44732666 154.32258606]
[108.44732666 169.32258606]
[108.44732666 184.32258606]
[108.44732666 199.32258606]
[108.44732666 214.32258606]
[108.44732666 229.32258606]
[108.44732666 244.32258606]
[122.98721313 248.38389587]
[135.89158630 256.21841431]
[146.20288086 267.24472046]
[153.15589905 280.64465332]
[156.23469543 295.42382812]
[155.21080017 310.48550415]
[150.16020203 324.71203613]
[141.45767212 337.04769897]
[129.74902344 346.57711792]
[115.90307617 352.59313965]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 52]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[53 130]
[54 129]
[55 128]
[56 127]
[58 125]
[65 90]
[66 89]
[67 88]
[68 87]
[69 86]
[94 122]
[95 121]
[96 120]
[98 119]
[99 118]
[100 117]
[101 116]
[108 115]
[109 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
