%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAAAGCGCCGGGGGGGGGGUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCxxxxxxxxxxAACAAACAAUGUUCAACCAGUAACUACUACUAAUCAACGCCCAUAAUCAUCCCCCCCCCCACAAAGCCCC\
) } def
/len { sequence length } bind def

/coor [
[84.86396027 352.45587158]
[71.01802063 346.43984985]
[59.30935669 336.91043091]
[50.60683441 324.57476807]
[45.55623245 310.34823608]
[44.53234100 295.28656006]
[47.61113739 280.50741577]
[54.56415939 267.10748291]
[64.87544250 256.08114624]
[77.77982330 248.24662781]
[92.31970978 244.18531799]
[92.31970978 229.18531799]
[92.31970978 214.18531799]
[92.31970978 199.18531799]
[92.31970978 184.18531799]
[92.31970978 169.18531799]
[92.31970978 154.18531799]
[92.31970978 139.18531799]
[92.31970978 124.18531799]
[92.31970978 109.18531799]
[83.30369568 121.17329407]
[69.80486298 127.71404266]
[54.80902100 127.36081696]
[41.63311768 120.19174194]
[33.19154358 107.79255676]
[31.35149002 92.90584564]
[36.51996613 78.82440948]
[47.55375290 68.66293335]
[62.01227188 64.66904449]
[76.69744110 67.72615051]
[88.36102295 77.15805054]
[94.42350769 90.88043976]
[97.82648468 76.27154541]
[101.22946930 61.66265488]
[104.63244629 47.05376434]
[108.03542328 32.44487000]
[94.14438629 25.43301964]
[82.33169556 15.31787682]
[73.27558899 2.68569636]
[67.49474335 -11.73291111]
[65.31855011 -27.10522461]
[66.86834717 -42.54451370]
[72.05065918 -57.16117859]
[80.56284332 -70.11402130]
[91.91072845 -80.65863037]
[105.43732452 -88.19020844]
[120.36087036 -92.27820587]
[135.81997681 -92.69098663]
[138.91830444 -107.36750793]
[142.01663208 -122.04403687]
[145.11494446 -136.72056580]
[148.21327209 -151.39707947]
[151.31158447 -166.07360840]
[137.05879211 -170.79991150]
[123.42481995 -177.09233093]
[110.58110809 -184.87173462]
[98.68919373 -194.04028320]
[87.89862061 -204.48268127]
[78.34510803 -216.06761169]
[70.14878845 -228.64935303]
[63.41274261 -242.06970215]
[58.22168732 -256.15988159]
[54.64089966 -270.74267578]
[52.71541214 -285.63470459]
[52.46944427 -300.64868164]
[53.90608597 -315.59579468]
[57.00727081 -330.28805542]
[61.73400116 -344.54071045]
[68.02682495 -358.17449951]
[75.80661774 -371.01797485]
[84.97552490 -382.90960693]
[95.41824341 -393.69985962]
[107.00344849 -403.25305176]
[119.58544159 -411.44897461]
[133.00598145 -418.18463135]
[147.09631348 -423.37527466]
[161.67921448 -426.95559692]
[176.57130432 -428.88064575]
[191.58529663 -429.12615967]
[206.53234863 -427.68908691]
[221.22453308 -424.58746338]
[235.47703552 -419.86029053]
[249.11064148 -413.56707764]
[261.95388794 -405.78689575]
[273.84524536 -396.61764526]
[284.63519287 -386.17459106]
[294.18801880 -374.58911133]
[302.38357544 -362.00686646]
[309.11883545 -348.58612061]
[314.30905151 -334.49563599]
[317.88894653 -319.91262817]
[319.81356812 -305.02047729]
[320.05862427 -290.00646973]
[318.62109375 -275.05944824]
[315.51901245 -260.36737061]
[310.79144287 -246.11500549]
[304.49780273 -232.48159790]
[296.71725464 -219.63858032]
[287.54763794 -207.74748230]
[277.10424805 -196.95785522]
[265.51849365 -187.40538025]
[252.93600464 -179.21018982]
[239.51504517 -172.47535706]
[225.42442322 -167.28555298]
[210.84129333 -163.70608521]
[195.94909668 -161.78192139]
[180.93510437 -161.53730774]
[165.98811340 -162.97529602]
[162.88980103 -148.29876709]
[159.79147339 -133.62223816]
[156.69314575 -118.94571686]
[153.59483337 -104.26918793]
[150.49650574 -89.59265900]
[163.63117981 -83.48635864]
[175.07513428 -74.59476471]
[184.24755859 -63.36491013]
[190.68194580 -50.36259842]
[194.04988098 -36.24391937]
[194.17773438 -21.72213364]
[191.05569458 -7.53163290]
[184.83837891 5.60918713]
[175.83714294 17.03430176]
[164.50460815 26.16381454]
[151.41177368 32.53339005]
[137.21934509 35.81786346]
[122.64431763 35.84785080]
[119.24133301 50.45674133]
[115.83835602 65.06563568]
[112.43537903 79.67453003]
[109.03240204 94.28341675]
[107.31970978 109.18531799]
[107.31970978 124.18531799]
[107.31970978 139.18531799]
[107.31970978 154.18531799]
[107.31970978 169.18531799]
[107.31970978 184.18531799]
[107.31970978 199.18531799]
[107.31970978 214.18531799]
[107.31970978 229.18531799]
[107.31970978 244.18531799]
[121.85959625 248.24662781]
[134.76397705 256.08114624]
[145.07527161 267.10748291]
[152.02828979 280.50741577]
[155.10708618 295.28656006]
[154.08319092 310.34823608]
[149.03259277 324.57476807]
[140.33006287 336.91043091]
[128.62139893 346.43984985]
[114.77546692 352.45587158]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 130]
[33 129]
[34 128]
[35 127]
[36 126]
[48 113]
[49 112]
[50 111]
[51 110]
[52 109]
[53 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
