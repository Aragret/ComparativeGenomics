%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCACCCAACUUAGGGGGGGGGGCACUUAGGAGAUUUCAACUUAACUUGACCGCUCUGAGCUAAACCUAGCCCxxxxxxxxxxCUACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCCCCCCCCCCCAUCACCCAACUAA\
) } def
/len { sequence length } bind def

/coor [
[90.89628601 482.60385132]
[77.02215576 476.75558472]
[64.66735077 468.15020752]
[54.37197495 457.16390991]
[46.58609772 444.27694702]
[41.65008545 430.05270386]
[39.77971649 415.11297607]
[41.05675507 400.11087036]
[45.42538071 385.70223999]
[52.69460678 372.51693726]
[62.54666138 361.13137817]
[74.55084991 352.04330444]
[88.18240356 345.64999390]
[102.84541321 342.23095703]
[102.54528046 327.23394775]
[102.24514771 312.23693848]
[101.94501495 297.23995972]
[101.64488220 282.24295044]
[101.34474945 267.24597168]
[101.04461670 252.24896240]
[100.74448395 237.25196838]
[100.44435120 222.25497437]
[100.14421844 207.25798035]
[85.82342529 199.82858276]
[77.13981628 186.12063599]
[76.53442383 169.81123352]
[84.26612854 155.33190918]
[98.31568146 146.66444397]
[97.71553802 131.67645264]
[97.11539459 116.68846130]
[87.22050476 105.41498566]
[72.43695068 102.87597656]
[57.65340042 100.33696747]
[46.52851105 110.99262238]
[31.43877602 113.03057861]
[18.19905663 105.87699127]
[11.78714561 92.45964050]
[-2.99640679 89.92063141]
[-17.77995872 87.38162231]
[-32.56351089 84.84261322]
[-45.32289886 94.16857147]
[-60.92654800 91.65825653]
[-70.11708832 78.80097961]
[-67.44194031 63.22474289]
[-54.48821640 54.17065048]
[-38.94113541 57.01033401]
[-30.02450180 70.05905914]
[-15.24094963 72.59806824]
[-0.45739675 75.13707733]
[14.32615566 77.67608643]
[24.84734154 67.16691589]
[39.71517944 64.84067535]
[53.26026535 71.79653931]
[60.19241333 85.55341339]
[74.97596741 88.09242249]
[89.75951385 90.63143158]
[103.19875336 83.96907806]
[110.12867737 70.66584015]
[95.95443726 44.73402023]
[110.98956299 14.62684822]
[103.53292847 1.61152637]
[96.07629395 -11.40379524]
[88.61965942 -24.41911697]
[74.18061829 -32.19382858]
[73.96472931 -48.59155655]
[88.19406891 -56.74372101]
[102.23072815 -48.26407623]
[101.63497925 -31.87575150]
[109.09161377 -18.86042976]
[116.54824829 -5.84510899]
[124.00489044 7.17021275]
[131.32392883 8.80775166]
[131.02000427 -6.18916893]
[130.71606445 -21.18608856]
[130.41212463 -36.18301010]
[123.79235840 -49.64327240]
[124.42947388 -64.62973785]
[132.16775513 -77.47959900]
[145.11592102 -85.05226135]
[160.10932922 -85.49690247]
[173.48348999 -78.70485687]
[181.96965027 -66.33615112]
[183.49374390 -51.41377640]
[177.68325806 -37.58488464]
[165.95932007 -28.22980118]
[159.29356384 -14.79225731]
[152.62779236 -1.35471392]
[145.96203613 12.08282948]
[153.28108215 13.72036839]
[165.57313538 5.12355280]
[177.86520386 -3.47326279]
[190.15725708 -12.07007790]
[202.44932556 -20.66689301]
[214.74137878 -29.26371002]
[210.80226135 -43.90130234]
[212.11015320 -59.00313187]
[218.50711060 -72.74557495]
[229.22067261 -83.46916962]
[242.95712280 -89.87898254]
[258.05770874 -91.20100403]
[272.69900513 -87.27558899]
[285.11294556 -78.57675171]
[293.80050659 -66.15492249]
[297.71264648 -51.51009750]
[296.37692261 -36.41070175]
[289.95465088 -22.68007088]
[279.22137451 -11.97624016]
[265.47311401 -5.59175110]
[250.37011719 -4.29756117]
[235.73609924 -8.24995041]
[223.33819580 -16.97164726]
[211.04614258 -8.37483311]
[198.75407410 0.22198279]
[186.46202087 8.81879807]
[174.16995239 17.41561317]
[161.87789917 26.01243019]
[166.36547852 38.41587830]
[166.35263062 51.16385651]
[162.13986206 62.72612762]
[154.51443481 71.81480408]
[144.62351990 77.52736664]
[133.80967712 79.43318176]
[123.43191528 77.59576416]
[116.50198364 90.89900208]
[112.10338593 116.08831787]
[112.70352936 131.07630920]
[113.30367279 146.06430054]
[126.03407288 151.93377686]
[134.94169617 162.67221069]
[138.32553101 176.13938904]
[135.57814026 189.68304443]
[127.29383850 200.66128540]
[115.14122009 206.95783997]
[115.44135284 221.95483398]
[115.74148560 236.95182800]
[116.04161835 251.94883728]
[116.34174347 266.94583130]
[116.64187622 281.94284058]
[116.94200897 296.93981934]
[117.24214172 311.93682861]
[117.54227448 326.93380737]
[117.84240723 341.93081665]
[132.63046265 344.76046753]
[146.50689697 350.60327148]
[158.86508179 359.20379639]
[169.16477966 370.18603516]
[176.95573425 383.06994629]
[181.89733887 397.29226685]
[183.77359009 412.23123169]
[182.50244141 427.23382568]
[178.13949585 441.64419556]
[170.87545776 454.83233643]
[161.02787781 466.22177124]
[149.02726746 475.31457520]
[135.39822388 481.71325684]
[120.73657227 485.13806152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[28 127]
[29 126]
[30 125]
[31 56]
[32 55]
[33 54]
[37 50]
[38 49]
[39 48]
[40 47]
[57 124]
[58 123]
[60 71]
[61 70]
[62 69]
[63 68]
[89 116]
[90 115]
[91 114]
[92 113]
[93 112]
[94 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
