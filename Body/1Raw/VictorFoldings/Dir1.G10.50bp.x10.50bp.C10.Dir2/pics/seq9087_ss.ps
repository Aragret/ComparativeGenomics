%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAUCCGUAGGGGGGGGGGUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAxxxxxxxxxxGACUCAUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCCCCCCCCCCCACAUCUGUA\
) } def
/len { sequence length } bind def

/coor [
[66.75431061 438.23242188]
[52.90837479 432.21640015]
[41.19971085 422.68698120]
[32.49718857 410.35131836]
[27.44658661 396.12478638]
[26.42269516 381.06311035]
[29.50149345 366.28396606]
[36.45451355 352.88403320]
[46.76580048 341.85769653]
[59.67018127 334.02319336]
[74.21006775 329.96188354]
[74.21006775 314.96188354]
[74.21006775 299.96188354]
[74.21006775 284.96188354]
[74.21006775 269.96188354]
[74.21006775 254.96186829]
[74.21006775 239.96186829]
[74.21006775 224.96186829]
[74.21006775 209.96186829]
[74.21006775 194.96186829]
[64.85414886 206.68649292]
[50.94020081 212.29025269]
[36.06981277 210.32263184]
[24.09213448 201.29293823]
[18.10755539 187.53849792]
[19.66516304 172.61958313]
[28.36177635 160.39793396]
[41.94630432 154.03706360]
[56.90243149 155.18347168]
[69.35881042 163.54042053]
[76.09112549 176.94464111]
[79.18944550 162.26811218]
[82.28776550 147.59158325]
[85.38608551 132.91505432]
[88.48441315 118.23853302]
[81.39797211 113.60196686]
[76.27429962 106.18760681]
[74.19641876 96.85888672]
[75.85948944 86.89377594]
[61.44727325 82.73589325]
[47.03505707 78.57800293]
[33.32283020 86.43614197]
[18.09237289 82.21610260]
[10.37964821 68.42155457]
[14.76047802 53.23656845]
[28.63579369 45.67012024]
[43.77361679 50.21125031]
[51.19294357 64.16578674]
[65.60516357 68.32367706]
[80.01737976 72.48155975]
[93.79975891 66.56159973]
[100.70675659 53.24644470]
[107.61375427 39.93128967]
[94.97275543 31.83682251]
[83.12020874 22.62637329]
[72.15432739 12.37626457]
[62.16598511 1.17143416]
[53.23794556 -10.89527035]
[45.44419098 -23.72385788]
[38.84930801 -37.20802307]
[33.50794220 -51.23603439]
[29.46435165 -65.69164276]
[26.75205040 -80.45506287]
[25.39350700 -95.40396118]
[25.39998436 -110.41446686]
[26.77142715 -125.36219025]
[29.49646950 -140.12326050]
[33.55253220 -154.57537842]
[38.90600204 -168.59877014]
[45.51251984 -182.07723999]
[53.31734467 -194.89909363]
[62.25579453 -206.95809937]
[72.25379944 -218.15429688]
[83.22852325 -228.39494324]
[95.08901215 -237.59515381]
[107.73699188 -245.67871094]
[121.06765747 -252.57862854]
[134.97053528 -258.23770142]
[149.33041382 -262.60906982]
[164.02832031 -265.65652466]
[178.94244385 -267.35476685]
[193.94921875 -267.68972778]
[208.92427063 -266.65866089]
[223.74351501 -264.27011108]
[238.28414917 -260.54385376]
[252.42568970 -255.51075745]
[266.05096436 -249.21253967]
[279.04702759 -241.70141602]
[291.30624390 -233.03958130]
[302.72698975 -223.29884338]
[313.21463013 -212.55992126]
[322.68225098 -200.91177368]
[331.05142212 -188.45094299]
[338.25277710 -175.28070068]
[344.22665405 -161.51014709]
[348.92355347 -147.25341797]
[352.30453491 -132.62863159]
[354.34161377 -117.75698853]
[355.01785278 -102.76172638]
[354.32769775 -87.76709747]
[352.27685547 -72.89735413]
[348.88232422 -58.27571487]
[344.17221069 -44.02333832]
[338.18557739 -30.25833321]
[330.97201538 -17.09475708]
[322.59130859 -4.64169264]
[313.11288452 6.99766874]
[302.61529541 17.72687721]
[291.18554688 27.45702553]
[278.91830444 36.10748672]
[265.91528320 43.60657501]
[252.28417969 49.89215469]
[238.13798523 54.91213608]
[223.59388733 58.62491989]
[208.77244568 60.99974442]
[193.79643250 62.01692963]
[178.78999329 61.66804886]
[163.87744141 59.95598602]
[149.18237305 56.89493561]
[134.82653809 52.51025772]
[120.92890930 46.83828735]
[114.02191162 60.15344238]
[107.11491394 73.46859741]
[123.50960541 90.11695862]
[120.50777435 111.54898071]
[103.16093445 121.33686066]
[100.06261444 136.01338196]
[96.96429443 150.68991089]
[93.86596680 165.36643982]
[90.76764679 180.04295349]
[89.21006775 194.96186829]
[89.21006775 209.96186829]
[89.21006775 224.96186829]
[89.21006775 239.96186829]
[89.21006775 254.96186829]
[89.21006775 269.96188354]
[89.21006775 284.96188354]
[89.21006775 299.96188354]
[89.21006775 314.96188354]
[89.21006775 329.96188354]
[103.74995422 334.02319336]
[116.65433502 341.85769653]
[126.96562195 352.88403320]
[133.91864014 366.28396606]
[136.99743652 381.06311035]
[135.97355652 396.12478638]
[130.92294312 410.35131836]
[122.22042084 422.68698120]
[110.51176453 432.21640015]
[96.66582489 438.23242188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[31 130]
[32 129]
[33 128]
[34 127]
[35 126]
[39 50]
[40 49]
[41 48]
[51 123]
[52 122]
[53 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
