%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCCCUACCGGGGGGGGGGAUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUxxxxxxxxxxGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCCCCCCCCCCCUACCCCUUCC\
) } def
/len { sequence length } bind def

/coor [
[82.67236328 356.91934204]
[70.11413574 348.56817627]
[60.02791595 337.35574341]
[53.04772186 323.98684692]
[49.61233902 309.30184937]
[49.93771362 294.22387695]
[54.00339890 279.70077515]
[61.55381775 266.64541626]
[72.11434937 255.87852478]
[85.02114105 248.07688904]
[99.46286774 243.73094177]
[98.83889771 228.74392700]
[98.21492004 213.75691223]
[97.59094238 198.76989746]
[96.96696472 183.78288269]
[96.34298706 168.79585266]
[95.71900940 153.80883789]
[95.09503174 138.82182312]
[94.47105408 123.83480835]
[93.84707642 108.84779358]
[91.41493988 109.18879700]
[88.78340912 108.98824310]
[73.88150787 110.70092773]
[65.65103149 114.81324768]
[58.65221024 112.29091644]
[43.71790314 113.69322205]
[40.42643356 128.45877075]
[32.73151016 141.48348999]
[21.38699913 151.49134827]
[7.50432491 157.50189209]
[-7.55643177 158.92623901]
[-22.31977081 155.62487793]
[-35.33933258 147.92123413]
[-45.33958817 136.57002258]
[-51.34082031 122.68331909]
[-52.75508881 107.62161255]
[-49.44383240 92.86048889]
[-41.73146057 79.84609222]
[-30.37354851 69.85343933]
[-16.48283195 63.86151886]
[-1.42018008 62.45734406]
[13.33872128 65.77848816]
[26.34794617 73.49958038]
[36.33298492 84.86418152]
[42.31560135 98.75891113]
[57.24990845 97.35661316]
[72.16881561 95.79902649]
[87.07072449 94.08634186]
[99.68184662 85.96479797]
[107.40593719 73.10639191]
[115.13002014 60.24799347]
[109.23049164 46.01768112]
[112.79971313 31.21518135]
[124.26517487 21.46802139]
[139.09414673 20.35455322]
[146.81822205 7.49615002]
[154.54231262 -5.36225224]
[155.01593018 -21.17636871]
[168.20233154 -28.10228920]
[175.92640686 -40.96069336]
[183.65049744 -53.81909561]
[191.37458801 -66.67749786]
[199.09866333 -79.53589630]
[187.24974060 -88.76412964]
[176.59957886 -99.35334778]
[167.30348206 -111.14910889]
[159.49703979 -123.97941589]
[153.29406738 -137.65715027]
[148.78503418 -151.98286438]
[146.03569031 -166.74763489]
[145.08613586 -181.73614502]
[145.95021057 -196.72984314]
[148.61532593 -211.51005554]
[153.04258728 -225.86123657]
[159.16746521 -239.57412720]
[166.90063477 -252.44873047]
[176.12931824 -264.29730225]
[186.71891785 -274.94708252]
[198.51502991 -284.24273682]
[211.34562683 -292.04870605]
[225.02360535 -298.25115967]
[239.34948730 -302.75964355]
[254.11434937 -305.50845337]
[269.10290527 -306.45742798]
[284.09655762 -305.59280396]
[298.87667847 -302.92715454]
[313.22769165 -298.49932861]
[326.94036865 -292.37393188]
[339.81466675 -284.64028931]
[351.66290283 -275.41116333]
[362.31228638 -264.82116699]
[371.60748291 -253.02470398]
[379.41296387 -240.19381714]
[385.61492920 -226.51560974]
[390.12289429 -212.18957520]
[392.87112427 -197.42459106]
[393.81954956 -182.43600464]
[392.95437622 -167.44238281]
[390.28814697 -152.66236877]
[385.85980225 -138.31150818]
[379.73388672 -124.59908295]
[371.99978638 -111.72505188]
[362.77020264 -99.87716675]
[352.17980957 -89.22818756]
[340.38299561 -79.93342590]
[327.55181885 -72.12841034]
[313.87338257 -65.92697906]
[299.54718018 -61.41954803]
[284.78207397 -58.67186356]
[269.79345703 -57.72398758]
[254.79986572 -58.58974457]
[240.01995850 -61.25651169]
[225.66926575 -65.68539429]
[211.95706177 -71.81181335]
[204.23298645 -58.95341110]
[196.50889587 -46.09500885]
[188.78482056 -33.23660660]
[181.06072998 -20.37820435]
[181.13958740 -5.48380756]
[167.40071106 2.36183262]
[159.67663574 15.22023487]
[151.95254517 28.07863808]
[157.93434143 41.69319534]
[154.71420288 56.39336014]
[143.32235718 66.49678040]
[127.98841858 67.97207642]
[120.26433563 80.83048248]
[112.54025269 93.68888092]
[108.83409119 108.22381592]
[109.45806885 123.21083069]
[110.08204651 138.19784546]
[110.70602417 153.18486023]
[111.33000183 168.17189026]
[111.95397949 183.15890503]
[112.57795715 198.14591980]
[113.20193481 213.13293457]
[113.82591248 228.11994934]
[114.44989014 243.10696411]
[129.20289612 246.23741150]
[142.71353149 252.93916321]
[154.13250732 262.79095459]
[162.74201965 275.17349243]
[168.00086975 289.30838013]
[169.57847595 304.30709839]
[167.37567139 319.22683716]
[161.53092957 333.12973022]
[152.41163635 345.14178467]
[140.59106445 354.50793457]
[126.81226349 360.63943481]
[111.94136047 363.15081787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 48]
[23 47]
[25 46]
[26 45]
[49 128]
[50 127]
[51 126]
[55 122]
[56 121]
[57 120]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
