%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGAAAUAGGGGGGGGGGAACAUGCUAGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCxxxxxxxxxxGCUAACAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCCCCCCCCCCCUAGCAAUA\
) } def
/len { sequence length } bind def

/coor [
[70.99591064 509.59637451]
[57.77571487 502.32388306]
[46.88891220 491.87689209]
[39.07778168 478.96765137]
[34.87490082 464.47631836]
[34.56682587 449.39099121]
[38.17456818 434.74017334]
[45.45214081 421.52276611]
[55.90335083 410.64001465]
[68.81561279 402.83386230]
[83.30854797 398.63656616]
[82.99649048 383.63983154]
[82.68443298 368.64306641]
[82.37237549 353.64633179]
[82.06032562 338.64956665]
[81.74826813 323.65280151]
[81.43621063 308.65606689]
[81.12415314 293.65930176]
[80.81209564 278.66253662]
[80.50003815 263.66580200]
[68.09678650 257.86761475]
[59.37057877 247.23124695]
[56.07621002 233.80535889]
[58.91504288 220.20806885]
[67.38663483 209.11650085]
[79.87585449 202.73954773]
[79.87585449 187.73954773]
[79.87585449 172.73954773]
[70.10644531 184.12193298]
[55.77725983 188.55752563]
[41.28573608 184.68507385]
[31.07914543 173.69302368]
[28.28975296 158.95465088]
[33.77359390 144.99301147]
[45.84774399 136.09272766]
[60.80680084 134.98521423]
[74.06002045 142.01031494]
[81.54035187 155.01292419]
[84.33267975 140.27511597]
[87.12500000 125.53730774]
[89.91732788 110.79950714]
[79.76676178 90.32844543]
[72.85976410 77.01328278]
[65.95276642 63.69813156]
[51.89375687 67.88069153]
[37.30824661 69.39437103]
[22.69820404 68.18862152]
[8.56615734 64.30644989]
[-4.60209084 57.88287735]
[-16.35415840 49.14028931]
[-26.28662872 38.38069534]
[-34.05890274 25.97530365]
[-39.40486526 12.35173607]
[-42.14201736 -2.02073932]
[-42.17768478 -16.64735413]
[-39.51216888 -31.02488327]
[-34.23867035 -44.65894699]
[-26.54004860 -57.08102417]
[-16.68247223 -67.86453247]
[-5.00621271 -76.63951111]
[-11.63471127 -90.09547424]
[-18.26321030 -103.55144501]
[-32.18803787 -112.21350098]
[-31.37852669 -128.59265137]
[-16.66743660 -135.83943176]
[-3.18827271 -126.49897766]
[-4.80724430 -110.17993927]
[1.82125413 -96.72397614]
[8.44975281 -83.26801300]
[23.26827431 -87.30815887]
[38.59381104 -88.39518738]
[53.84343338 -86.48596191]
[68.43675232 -81.65131378]
[81.81799316 -74.07348633]
[93.47718811 -64.03919983]
[102.96958923 -51.92884827]
[109.93264771 -38.20205307]
[114.09983826 -23.38024139]
[115.31090546 -8.02681351]
[113.51796722 7.27425003]
[108.78745270 21.94061470]
[101.29763031 35.41374588]
[91.33185577 47.18019104]
[79.26792145 56.79113388]
[86.17491913 70.10628510]
[93.08192444 83.42144012]
[107.30870056 88.17525482]
[120.83289337 81.68709564]
[134.35708618 75.19892883]
[147.88127136 68.71076202]
[157.88191223 53.28458023]
[175.29524231 55.22769928]
[188.68151855 48.45958328]
[202.06781006 41.69147110]
[215.45410156 34.92335510]
[224.27850342 21.79169846]
[239.12768555 22.95396996]
[240.61282349 7.59825563]
[250.18205261 -4.50271082]
[264.78186035 -9.48755550]
[279.75354004 -5.76563311]
[290.31964111 5.47540474]
[293.10858154 20.64858437]
[287.23040771 34.91219711]
[274.56085205 43.71477890]
[259.14266968 44.24745560]
[245.89579773 36.34025574]
[238.02886963 48.98781204]
[222.22221375 48.30963898]
[208.83592224 55.07775497]
[195.44964600 61.84587097]
[182.06335449 68.61398315]
[177.96844482 80.03935242]
[166.81701660 85.77212524]
[154.36943054 82.23495483]
[140.84524536 88.72312164]
[127.32105255 95.21128082]
[113.79686737 101.69944763]
[104.65512848 113.59182739]
[101.86280823 128.32963562]
[99.07048035 143.06744385]
[96.27816010 157.80525208]
[94.87585449 172.73954773]
[94.87585449 187.73954773]
[94.87585449 202.73954773]
[109.25801849 210.83473206]
[117.56416321 224.98759460]
[117.61820984 241.30406189]
[109.49975586 255.34944153]
[95.49679565 263.35372925]
[95.80885315 278.35049438]
[96.12091064 293.34725952]
[96.43296051 308.34399414]
[96.74501801 323.34075928]
[97.05707550 338.33749390]
[97.36913300 353.33425903]
[97.68119049 368.33102417]
[97.99324799 383.32775879]
[98.30529785 398.32452393]
[112.96029663 401.91528320]
[126.18610382 409.17755127]
[137.08096313 419.61614990]
[144.90206909 432.51934814]
[149.11613464 447.00741577]
[149.43586731 462.09252930]
[145.83943176 476.74612427]
[138.57206726 489.96911621]
[128.12927246 500.85995483]
[115.22303772 508.67608643]
[100.73334503 512.88458252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 125]
[27 124]
[28 123]
[38 122]
[39 121]
[40 120]
[41 119]
[42 86]
[43 85]
[44 84]
[60 69]
[61 68]
[62 67]
[87 118]
[88 117]
[89 116]
[90 115]
[92 112]
[93 111]
[94 110]
[95 109]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
