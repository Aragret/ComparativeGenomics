%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAGGCAACCUGGGGGGGGGGUCUAGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGxxxxxxxxxxACGGCGGACUAAUCUUCAACUCCUACAUACUUCCCCCAUUAUUCCUAGAACCCCCCCCCCCCAGGCGACCU\
) } def
/len { sequence length } bind def

/coor [
[72.76101685 472.22741699]
[59.27213669 465.49588013]
[47.78663635 455.73132324]
[38.97226715 443.50143433]
[33.34148788 429.51721191]
[31.22165871 414.59176636]
[32.73602676 399.59274292]
[37.79655075 385.39224243]
[46.10901642 372.81582642]
[57.19014740 362.59466553]
[70.39569855 355.32302856]
[84.95792389 351.42364502]
[84.64994812 336.42681885]
[84.34197235 321.42999268]
[84.03399658 306.43313599]
[83.72601318 291.43630981]
[83.41803741 276.43945312]
[83.11006165 261.44262695]
[82.80208588 246.44578552]
[82.49410248 231.44894409]
[74.49712372 218.88322449]
[81.94944763 204.92709351]
[81.64147186 189.93026733]
[81.33348846 174.93342590]
[81.02551270 159.93658447]
[80.71753693 144.93974304]
[80.40956116 129.94291687]
[69.85754395 119.28199768]
[54.86465836 118.82007599]
[39.87177277 118.35814667]
[24.87888718 117.89622498]
[9.88600063 117.43429565]
[3.30438018 131.16754150]
[-8.29825211 141.03157043]
[-22.91166878 145.31735229]
[-38.00400925 143.28236389]
[-50.96043015 135.27917480]
[-59.53615952 122.69438171]
[-62.24539185 107.70839691]
[-58.61874390 92.91761017]
[-49.28455353 80.88462067]
[-35.86001968 73.69422150]
[-20.67103195 72.59219360]
[-6.34916735 77.76946259]
[4.62422037 88.32904053]
[10.34792709 102.44141388]
[25.34081268 102.90333557]
[40.33369827 103.36526489]
[55.32658386 103.82718658]
[70.31947327 104.28911591]
[71.95262909 88.85048676]
[81.12432861 76.20111847]
[95.47253418 69.76812744]
[92.41413879 55.08323288]
[89.35574341 40.39833450]
[84.51459503 32.57790756]
[86.38857269 25.38065910]
[81.70900726 17.46248436]
[83.73036957 10.30522823]
[81.27744293 -4.49285078]
[78.82450867 -19.29092979]
[63.80669785 -20.74959373]
[49.67847443 -26.04636192]
[37.40312958 -34.82008743]
[27.81761169 -46.47256851]
[21.57548141 -60.20931625]
[19.10233688 -75.09373474]
[20.56679916 -90.11098480]
[25.86902237 -104.23715973]
[34.64748764 -116.50911713]
[46.30366898 -126.09013367]
[60.04282379 -132.32696533]
[74.92819977 -134.79435730]
[89.94487762 -133.32409668]
[104.06900787 -128.01641846]
[116.33757782 -119.23321533]
[125.91409302 -107.57334137]
[132.14561462 -93.83177948]
[134.60726929 -78.94544983]
[133.13121033 -63.92933655]
[127.81807709 -49.80725861]
[119.03013611 -37.54208374]
[107.36656189 -27.97007179]
[93.62258911 -21.74385834]
[96.07551575 -6.94577885]
[98.52845001 7.85230017]
[101.13317108 22.62441635]
[104.04064178 37.33993912]
[107.09903717 52.02483749]
[110.15743256 66.70973206]
[123.22412872 74.07597351]
[137.37144470 69.09065247]
[151.51875305 64.10533142]
[165.66607666 59.12000656]
[164.19560242 44.11663818]
[166.35908508 29.19742966]
[172.03076172 15.22976875]
[180.88087463 3.02571440]
[192.39489746 -6.70520401]
[205.90341187 -13.39724445]
[220.62106323 -16.66134071]
[235.69216919 -16.30772018]
[250.24052429 -12.35694599]
[263.42031860 -5.03870773]
[274.46527100 5.22152090]
[282.73327637 17.82722282]
[287.74359131 32.04552078]
[289.20498657 47.04978180]
[287.03244019 61.96767426]
[281.35232544 75.93189240]
[272.49481201 88.13057709]
[260.97488403 97.85451508]
[247.46231079 104.53836823]
[232.74269104 107.79354095]
[217.67179871 107.43077850]
[203.12583923 103.47118378]
[189.95048523 96.14495850]
[178.91174316 85.87803650]
[170.65139771 73.26732635]
[156.50408936 78.25264740]
[142.35676575 83.23796844]
[128.20944214 88.22328949]
[128.91650391 109.30125427]
[115.85050201 125.68517303]
[95.40639496 129.63493347]
[95.71437836 144.63177490]
[96.02235413 159.62860107]
[96.33032990 174.62544250]
[96.63830566 189.62228394]
[96.94628906 204.61912537]
[104.96529388 218.25752258]
[97.49094391 231.14097595]
[97.79891968 246.13781738]
[98.10689545 261.13464355]
[98.41487885 276.13150024]
[98.72285461 291.12832642]
[99.03083038 306.12515259]
[99.33880615 321.12200928]
[99.64678955 336.11883545]
[99.95476532 351.11569214]
[114.66480255 354.41390991]
[128.15776062 361.13726807]
[139.64916992 370.89486694]
[148.47096252 383.11941528]
[154.11021423 397.10018921]
[156.23908997 412.02438354]
[154.73382568 427.02429199]
[149.68190002 441.22787476]
[141.37705994 453.80932617]
[130.30213928 464.03720093]
[117.10099030 471.31683350]
[102.54113007 475.22503662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[22 130]
[23 129]
[24 128]
[25 127]
[26 126]
[27 125]
[28 50]
[29 49]
[30 48]
[31 47]
[32 46]
[53 90]
[54 89]
[55 88]
[57 87]
[59 86]
[60 85]
[61 84]
[91 122]
[92 121]
[93 120]
[94 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
