%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCCUUUACAGGGGGGGGGGUAACAGACGAGGUCAACGAUCCCUCCCUUACCAUCAAAUCAAUUGGCCACxxxxxxxxxxUCAGUUGAUGAUACGCCCGAGCAGAUGCCAACACAGCAGCCAUUCAAGCACCCCCCCCCCAUCCUAUACA\
) } def
/len { sequence length } bind def

/coor [
[102.06217194 391.88647461]
[88.21623230 385.87045288]
[76.50756836 376.34103394]
[67.80504608 364.00537109]
[62.75444412 349.77883911]
[61.73055267 334.71716309]
[64.80934906 319.93798828]
[71.76237488 306.53805542]
[82.07365417 295.51174927]
[94.97803497 287.67721558]
[109.51792145 283.61590576]
[109.51792145 268.61590576]
[109.51792145 253.61590576]
[109.51792145 238.61590576]
[109.51792145 223.61590576]
[109.51792145 208.61590576]
[109.51792145 193.61590576]
[109.51792145 178.61590576]
[109.51792145 163.61590576]
[109.51792145 148.61590576]
[109.51792145 133.61590576]
[96.30925751 133.51211548]
[84.55680084 128.58747864]
[75.88149261 119.90167236]
[71.33354950 109.00253296]
[56.35383224 109.78237915]
[47.11974716 118.84800720]
[34.58480453 119.15485382]
[25.51900482 111.08524323]
[10.52630901 111.55328369]
[-4.46638775 112.02133179]
[-19.45908356 112.48937225]
[-27.30235100 125.77420044]
[-41.09310532 132.68930054]
[-56.43077087 131.02809143]
[-68.42115021 121.32064819]
[-73.23815918 106.66459656]
[-69.34470367 91.73661041]
[-57.98317719 81.30017090]
[-42.77899933 78.68550873]
[-28.58376503 84.72693634]
[-19.92712593 97.49667358]
[-4.93442965 97.02863312]
[10.05826664 96.56059265]
[25.05096245 96.09255219]
[39.40779114 86.04857635]
[55.57398605 94.80266571]
[70.55370331 94.02281952]
[72.31276703 88.32830048]
[75.16121674 83.09301758]
[78.98696136 78.52295685]
[83.63948059 74.79792023]
[88.93572235 72.06448364]
[87.06810760 57.18120575]
[85.20049286 42.29792404]
[83.33288574 27.41464615]
[79.59233856 21.83648872]
[79.32124329 16.07820702]
[81.71049500 11.87499428]
[80.46362305 -3.07309246]
[79.21674347 -18.02117920]
[77.96987152 -32.96926498]
[76.72299957 -47.91735458]
[75.47612000 -62.86544037]
[74.22924805 -77.81352997]
[59.59688568 -81.77203369]
[47.20264053 -90.49891663]
[38.54317474 -102.94036102]
[34.66416168 -117.59399414]
[36.03401566 -132.69033813]
[42.48731613 -146.40640259]
[53.24479294 -157.08593750]
[67.00743103 -163.43933105]
[82.11332703 -164.69937134]
[96.73837280 -160.71389771]
[109.11651611 -151.96418762]
[117.75303650 -139.50680542]
[121.60503387 -124.84605408]
[120.20736694 -109.75226593]
[113.72880554 -96.04811096]
[102.95166016 -85.38841248]
[89.17733765 -79.06040192]
[90.42420959 -64.11231232]
[91.67108154 -49.16422653]
[92.91796112 -34.21614075]
[94.16483307 -19.26805496]
[95.41170502 -4.31996727]
[96.65858459 10.62811947]
[98.21616364 25.54703140]
[100.08377838 40.43031311]
[101.95139313 55.31359100]
[103.81900024 70.19686890]
[119.99693298 75.43263245]
[131.49000549 89.14881897]
[134.06529236 107.75737000]
[149.04499817 106.97753143]
[159.59666443 95.51889801]
[174.79933167 94.94142151]
[185.65835571 105.07143402]
[200.63807678 104.29158783]
[209.14250183 91.44709778]
[223.41267395 86.13526154]
[237.90295410 90.19671631]
[247.11291504 101.87210083]
[260.49215698 93.42780304]
[273.60449219 100.49295044]
[288.58419800 99.71310425]
[303.56393433 98.93325806]
[312.83410645 86.33969116]
[328.04254150 82.70146942]
[342.00833130 89.73645020]
[348.13723755 104.12292480]
[343.53533936 119.06804657]
[330.37554932 127.51519012]
[314.87152100 125.47586060]
[304.34375000 113.91297150]
[289.36404419 114.69281769]
[274.38433838 115.47266388]
[262.07653809 123.86119080]
[247.89276123 116.85182190]
[239.94494629 129.42044067]
[225.95472717 134.96459961]
[211.21012878 131.16326904]
[201.41792297 119.27130127]
[186.43820190 120.05114746]
[176.68977356 131.25398254]
[161.50932312 132.25825500]
[149.82484436 121.95724487]
[134.84512329 122.73708344]
[124.51792145 133.61590576]
[124.51792145 148.61590576]
[124.51792145 163.61590576]
[124.51792145 178.61590576]
[124.51792145 193.61590576]
[124.51792145 208.61590576]
[124.51792145 223.61590576]
[124.51792145 238.61590576]
[124.51792145 253.61590576]
[124.51792145 268.61590576]
[124.51792145 283.61590576]
[139.05781555 287.67721558]
[151.96218872 295.51174927]
[162.27348328 306.53805542]
[169.22650146 319.93798828]
[172.30529785 334.71716309]
[171.28140259 349.77883911]
[166.23080444 364.00537109]
[157.52827454 376.34103394]
[145.81962585 385.87045288]
[131.97367859 391.88647461]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 48]
[26 47]
[29 45]
[30 44]
[31 43]
[32 42]
[53 92]
[54 91]
[55 90]
[56 89]
[59 88]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[95 129]
[96 128]
[99 125]
[100 124]
[104 120]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
