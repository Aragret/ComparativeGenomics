%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAAACCCCUGGGGGGGGGGACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAAxxxxxxxxxxGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUCCCCCCCCCCUAAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[99.38152313 515.82434082]
[85.53559113 509.80831909]
[73.82692719 500.27890015]
[65.12440491 487.94323730]
[60.07379913 473.71670532]
[59.04990768 458.65502930]
[62.12870789 443.87585449]
[69.08172607 430.47595215]
[79.39301300 419.44961548]
[92.29739380 411.61511230]
[106.83728027 407.55377197]
[106.83728027 392.55377197]
[106.83728027 377.55377197]
[106.83728027 362.55377197]
[106.83728027 347.55377197]
[106.83728027 332.55377197]
[106.83728027 317.55377197]
[106.83728027 302.55377197]
[106.83728027 287.55377197]
[106.83728027 272.55377197]
[106.83728027 257.55377197]
[103.67169952 250.82142639]
[106.99656677 242.24253845]
[107.30862427 227.24578857]
[106.52877808 212.26606750]
[104.66116333 197.38279724]
[102.79354858 182.49951172]
[100.92593384 167.61624146]
[99.05832672 152.73295593]
[97.19071198 137.84967041]
[86.08283997 135.31008911]
[76.22934723 129.58793640]
[68.51835632 121.19895935]
[63.64486694 110.89927673]
[62.04814148 99.61721802]
[63.87210083 88.36966705]
[68.95233917 78.17037201]
[76.83096313 69.93862915]
[70.20246887 56.48266602]
[63.57396698 43.02670288]
[56.94546890 29.57073593]
[50.31697083 16.11477089]
[40.92980957 4.41514730]
[29.23018646 -4.97201443]
[17.53056145 -14.35917664]
[13.06967735 -14.87103367]
[9.39936161 -16.63166809]
[6.82116365 -19.22681236]
[5.46612501 -22.18617821]
[5.29151392 -25.04569817]
[-5.58731127 -35.37290192]
[-16.46613693 -45.70010757]
[-27.34496117 -56.02731323]
[-43.35543823 -57.04919815]
[-52.42034531 -70.28577423]
[-47.58586502 -85.58307648]
[-32.56059647 -91.20631409]
[-18.87063980 -82.84183502]
[-17.01775742 -66.90613556]
[-6.13893127 -56.57893372]
[4.73989391 -46.25172806]
[15.61871910 -35.92452240]
[26.91772461 -26.05879974]
[38.61734772 -16.67163849]
[50.31697083 -7.28447628]
[45.18231583 -21.37828064]
[43.96424866 -36.32874298]
[46.74978256 -51.06783295]
[53.33992386 -64.54262543]
[63.26388931 -75.79051208]
[75.81273651 -84.00795746]
[90.08999634 -88.60794067]
[105.07573700 -89.26184082]
[119.69940948 -85.92295074]
[132.91633606 -78.82978058]
[143.78231812 -68.48906708]
[151.52111816 -55.63951492]
[155.57989502 -41.19907761]
[155.66870117 -26.19933891]
[151.78117371 -11.71185303]
[144.19506836 1.22842705]
[133.45228577 11.69707680]
[120.32027435 18.94623756]
[105.73715973 22.45804787]
[90.74472809 21.98162842]
[76.41400146 17.55101776]
[63.77293777 9.48627281]
[70.40143585 22.94223785]
[77.02993011 36.39820480]
[83.65843201 49.85416794]
[90.28693390 63.31013489]
[112.02835083 64.00265503]
[129.81872559 76.51950836]
[143.20501709 69.75139618]
[152.02941895 56.61973572]
[166.87860107 57.78200531]
[180.26489258 51.01389313]
[193.65116882 44.24577713]
[207.03746033 37.47766113]
[213.38859558 22.74529266]
[228.90396118 18.66450500]
[241.68150330 28.36573219]
[241.91938782 44.40702057]
[229.43513489 54.48286819]
[213.80557251 50.86394882]
[200.41929626 57.63206100]
[187.03300476 64.40017700]
[173.64671326 71.16828918]
[165.77978516 83.81584930]
[149.97312927 83.13768005]
[136.58683777 89.90579224]
[137.72497559 104.16127777]
[133.50708008 117.82597351]
[124.53201294 128.95980835]
[112.07398987 135.98205566]
[113.94160461 150.86534119]
[115.80921936 165.74862671]
[117.67682648 180.63189697]
[119.54444122 195.51518250]
[121.41205597 210.39846802]
[130.92494202 198.80082703]
[145.63371277 195.85942078]
[158.87516785 202.90669250]
[164.65077209 216.75019836]
[160.34413147 231.11866760]
[147.90620422 239.50305176]
[132.97148132 238.10514832]
[122.30537415 227.55784607]
[121.99331665 242.55459595]
[121.83728027 257.55377197]
[121.83728027 272.55377197]
[121.83728027 287.55377197]
[121.83728027 302.55377197]
[121.83728027 317.55377197]
[121.83728027 332.55377197]
[121.83728027 347.55377197]
[121.83728027 362.55377197]
[121.83728027 377.55377197]
[121.83728027 392.55377197]
[121.83728027 407.55377197]
[136.37716675 411.61511230]
[149.28155518 419.44961548]
[159.59283447 430.47595215]
[166.54585266 443.87585449]
[169.62464905 458.65502930]
[168.60076904 473.71670532]
[163.55015564 487.94323730]
[154.84764099 500.27890015]
[143.13897705 509.80831909]
[129.29302979 515.82434082]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 129]
[24 128]
[25 120]
[26 119]
[27 118]
[28 117]
[29 116]
[30 115]
[38 91]
[39 90]
[40 89]
[41 88]
[42 87]
[43 65]
[44 64]
[45 63]
[50 62]
[51 61]
[52 60]
[53 59]
[93 111]
[94 110]
[96 108]
[97 107]
[98 106]
[99 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
