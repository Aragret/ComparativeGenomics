%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGAUUAAAGGGGGGGGGGGUCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCxxxxxxxxxxGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAACCCCCCCCCCAACUAUUAAA\
) } def
/len { sequence length } bind def

/coor [
[94.63408661 472.44641113]
[80.14440155 468.23791504]
[67.23816681 460.42181396]
[56.79536819 449.53097534]
[49.52800369 436.30798340]
[45.93157959 421.65435791]
[46.25130081 406.56927490]
[50.46537018 392.08120728]
[58.28646851 379.17800903]
[69.18133545 368.73941040]
[82.40714264 361.47714233]
[97.06213379 357.88638306]
[97.37419128 342.88961792]
[97.68624878 327.89285278]
[97.99830627 312.89611816]
[98.31036377 297.89935303]
[98.62242126 282.90261841]
[98.93447113 267.90585327]
[99.24652863 252.90910339]
[99.55858612 237.91233826]
[99.87064362 222.91558838]
[100.18270111 207.91883850]
[92.02156830 203.39659119]
[86.24680328 195.72048950]
[84.03968048 186.08895874]
[86.00112152 176.12345886]
[92.01026154 167.59579468]
[101.20800781 162.11331177]
[112.11473846 160.81831360]
[107.80715179 146.45013428]
[103.49956512 132.08195496]
[99.19198608 117.71376801]
[98.69795990 132.70562744]
[90.50112915 145.26795959]
[76.97806549 151.75846863]
[62.04959869 150.29531860]
[50.04403305 141.30274963]
[44.44223022 127.38801575]
[46.86835480 112.58551788]
[56.61898804 101.18704224]
[70.86705780 96.49742889]
[85.47938538 99.87519836]
[72.70202637 92.01776886]
[59.92466736 84.16034698]
[47.14730835 76.30291748]
[34.28890610 68.57883453]
[21.35085106 60.98892593]
[8.41279602 53.39901733]
[-7.98078108 53.82641983]
[-16.31582451 39.70342255]
[-8.01795578 25.55854988]
[8.37668800 25.94283676]
[16.00270462 40.46096039]
[28.94075966 48.05086899]
[41.87881470 55.64077759]
[49.28749466 56.31688309]
[55.00473404 63.52556229]
[67.78208923 71.38298798]
[80.55944824 79.24040985]
[93.33680725 87.09783936]
[107.35352325 81.75632477]
[111.66110229 67.38813782]
[115.96868896 53.01995850]
[120.27627563 38.65177155]
[124.43415833 24.23955727]
[128.44190979 9.78486824]
[132.44964600 -4.66982031]
[119.04836273 -11.52479458]
[107.30152893 -20.93737411]
[97.69014740 -32.52212143]
[90.60781860 -45.80464554]
[86.34454346 -60.24103546]
[85.07491302 -75.24013519]
[86.85090637 -90.18772888]
[91.59980011 -104.47174072]
[99.12714386 -117.50723267]
[109.12467957 -128.76042175]
[121.18302155 -137.77047729]
[134.80838013 -144.16847229]
[149.44282532 -147.69238281]
[164.48707581 -148.19793701]
[179.32507324 -145.66441345]
[193.34921265 -140.19555664]
[205.98521423 -132.01531982]
[216.71565247 -121.45867157]
[225.10110474 -108.95791626]
[230.79820251 -95.02493286]
[233.57365417 -80.23027802]
[233.31381226 -65.17978668]
[230.02929688 -50.48976135]
[223.85462952 -36.76174927]
[215.04264832 -24.55790329]
[203.95419312 -14.37796783]
[191.04333496 -6.63880110]
[176.83877563 -1.65731835]
[161.92216492 0.36249205]
[146.90432739 -0.66207993]
[142.89659119 13.79260826]
[138.88885498 28.24729729]
[140.14057922 35.58070374]
[134.64445496 42.95935822]
[130.33686829 57.32754135]
[126.02928925 71.69572449]
[121.72170258 86.06391144]
[113.56016541 113.40618134]
[117.86775208 127.77436066]
[122.17533875 142.14254761]
[126.48291779 156.51072693]
[137.46858215 166.72421265]
[152.11209106 169.97503662]
[146.72741699 155.97485352]
[154.13122559 142.92939758]
[168.91192627 140.37387085]
[180.26602173 150.17613220]
[179.89459229 165.17152405]
[168.06976318 174.39950562]
[182.29653931 179.15332031]
[196.52331543 183.90713501]
[211.46223450 178.05831909]
[225.27656555 186.21575928]
[227.36915588 202.12174988]
[216.13473511 213.57458496]
[200.19140625 211.78862000]
[191.76950073 198.13391113]
[177.54272461 193.38009644]
[163.31594849 188.62628174]
[148.86126709 184.61854553]
[134.21775818 181.36770630]
[129.42491150 199.24070740]
[115.17945099 208.23089600]
[114.86739349 223.22764587]
[114.55534363 238.22439575]
[114.24328613 253.22116089]
[113.93122864 268.21789551]
[113.61917114 283.21466064]
[113.30711365 298.21142578]
[112.99505615 313.20816040]
[112.68300629 328.20492554]
[112.37094879 343.20169067]
[112.05889130 358.19842529]
[126.55182648 362.39572144]
[139.46409607 370.20187378]
[149.91529846 381.08462524]
[157.19287109 394.30203247]
[160.80061340 408.95285034]
[160.49253845 424.03817749]
[156.28965759 438.52951050]
[148.47853088 451.43875122]
[137.59172058 461.88574219]
[124.37152863 469.15820312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[29 108]
[30 107]
[31 106]
[32 105]
[42 60]
[43 59]
[44 58]
[45 57]
[46 55]
[47 54]
[48 53]
[61 104]
[62 103]
[63 102]
[64 101]
[65 99]
[66 98]
[67 97]
[109 128]
[110 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
