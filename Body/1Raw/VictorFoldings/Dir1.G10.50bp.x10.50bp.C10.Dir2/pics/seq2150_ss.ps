%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCGAAAGGGGGGGGGGCCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCxxxxxxxxxxAUUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGACCCCCCCCCCACCCCCCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.47879028 358.17263794]
[71.63285065 352.15661621]
[59.92419052 342.62719727]
[51.22166443 330.29153442]
[46.17106247 316.06500244]
[45.14717102 301.00332642]
[48.22597122 286.22415161]
[55.17899323 272.82424927]
[65.49028015 261.79791260]
[78.39466095 253.96339417]
[92.93454742 249.90208435]
[92.93454742 234.90208435]
[92.93454742 219.90208435]
[92.93454742 204.90208435]
[92.93454742 189.90208435]
[92.93454742 174.90208435]
[92.93454742 159.90208435]
[92.93454742 144.90208435]
[92.93454742 129.90208435]
[92.93454742 114.90207672]
[89.75341034 111.62560272]
[87.78102112 107.80899048]
[87.05431366 103.84859467]
[72.41081238 100.59777069]
[57.76731491 97.34694672]
[43.12381363 94.09612274]
[28.48031235 90.84529114]
[13.53222466 89.59841919]
[-1.44748950 90.37826538]
[-16.42720413 91.15811157]
[-31.40691757 91.93795776]
[-38.31287766 105.65667725]
[-51.16177750 114.07102966]
[-66.49732208 114.91761017]
[-80.19432068 107.96868134]
[-88.56836700 95.09347534]
[-89.36686707 79.75534821]
[-82.37504578 66.08019257]
[-69.47364807 57.74655151]
[-54.13309860 56.99612808]
[-40.47992706 64.03078461]
[-32.18676376 76.95823669]
[-17.20704842 76.17839813]
[-2.22733450 75.39855194]
[12.75237942 74.61870575]
[-0.02630300 66.76343536]
[-8.59831810 54.45406723]
[-11.53366089 39.74407578]
[-8.34265041 25.08742523]
[0.44238138 12.92916775]
[13.35589409 5.29757547]
[28.24362373 3.46576905]
[42.62196350 7.73933506]
[54.09228134 17.40534592]
[60.74107361 30.85129547]
[61.45917130 45.83409882]
[56.12678146 59.85428238]
[45.63346481 70.57296753]
[31.73113823 76.20178986]
[46.37463760 79.45262146]
[61.01813889 82.70344543]
[75.66164398 85.95426941]
[90.30514526 89.20509338]
[76.13883209 84.27400970]
[63.99295807 75.47186279]
[54.89680481 63.54458237]
[49.62121582 49.50292587]
[48.61326218 34.53683090]
[51.95835495 19.91457558]
[59.37302780 6.87530184]
[70.22892761 -3.47599673]
[83.60609436 -10.26211548]
[98.37090302 -12.90797520]
[113.27211761 -11.18935585]
[127.04697418 -5.25190020]
[138.52813721 4.40123129]
[146.74264526 16.95199966]
[150.99438477 31.33680725]
[150.92304993 46.33663940]
[146.53466797 60.68035126]
[138.20114136 73.15241241]
[126.62868500 82.69589996]
[112.79418945 88.50302887]
[127.20640564 84.34514618]
[141.61862183 80.18725586]
[156.03083801 76.02937317]
[154.06166077 61.13037491]
[154.33515930 46.10430527]
[156.84521484 31.28684044]
[161.53576660 17.00901222]
[168.30203247 3.58979273]
[176.99282837 -8.67102814]
[187.41400146 -19.49954033]
[199.33276367 -28.65382767]
[212.48281860 -35.92938232]
[226.57038879 -41.16366577]
[241.28077698 -44.23974228]
[256.28533936 -45.08889389]
[271.24884033 -43.69214249]
[285.83703613 -40.08069992]
[299.72396851 -34.33524323]
[312.59945679 -26.58412552]
[324.17581177 -17.00051498]
[334.19442749 -5.79851198]
[342.43148804 6.77162886]
[348.70297241 20.42908478]
[352.86880493 34.86874390]
[354.83584595 49.76801682]
[354.56021118 64.79405212]
[352.04803467 79.61115265]
[347.35543823 93.88831329]
[340.58728027 107.30657196]
[331.89474487 119.56615448]
[321.47201538 130.39318848]
[309.55197144 139.54577637]
[296.40087891 146.81945801]
[282.31253052 152.05172729]
[267.60171509 155.12571716]
[252.59704590 155.97273254]
[237.63372803 154.57383728]
[223.04606628 150.96032715]
[209.15992737 145.21289062]
[196.28555298 137.45993042]
[184.71057129 127.87467957]
[174.69354248 116.67124939]
[166.45826721 104.09993744]
[160.18872070 90.44158936]
[145.77650452 94.59947205]
[131.36428833 98.75736237]
[116.95207214 102.91524506]
[107.93454742 114.90207672]
[107.93454742 129.90208435]
[107.93454742 144.90208435]
[107.93454742 159.90208435]
[107.93454742 174.90208435]
[107.93454742 189.90208435]
[107.93454742 204.90208435]
[107.93454742 219.90208435]
[107.93454742 234.90208435]
[107.93454742 249.90208435]
[122.47443390 253.96339417]
[135.37881470 261.79791260]
[145.69009399 272.82424927]
[152.64311218 286.22415161]
[155.72192383 301.00332642]
[154.69802856 316.06500244]
[149.64743042 330.29153442]
[140.94490051 342.62719727]
[129.23623657 352.15661621]
[115.39029694 358.17263794]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 63]
[24 62]
[25 61]
[26 60]
[27 59]
[28 45]
[29 44]
[30 43]
[31 42]
[83 130]
[84 129]
[85 128]
[86 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
