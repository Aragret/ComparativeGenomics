%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACCUCAGGGGGGGGGGUAUCCUCCCUACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAxxxxxxxxxxAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUACCCCCCCCCCUCACACAUCA\
) } def
/len { sequence length } bind def

/coor [
[114.97509766 276.35794067]
[120.36608124 262.36019897]
[127.52015686 249.17613220]
[136.31744385 237.02674866]
[146.61051941 226.11561584]
[158.22686768 216.62559509]
[170.97183228 208.71574402]
[184.63182068 202.51858521]
[198.97792053 198.13800049]
[213.76969910 195.64739990]
[228.76892090 195.08877563]
[216.32946777 186.70661926]
[203.89002991 178.32447815]
[191.45059204 169.94233704]
[179.01115417 161.56019592]
[166.57171631 153.17805481]
[154.13227844 144.79591370]
[141.69282532 136.41377258]
[129.25338745 128.03161621]
[116.81394958 119.64948273]
[104.37451172 111.26733398]
[96.79103851 120.55109406]
[81.43930054 122.94660187]
[66.57625580 124.96894073]
[51.71320724 126.99127197]
[36.85015869 129.01361084]
[28.40161324 138.81544495]
[15.93555832 140.16319275]
[6.23034811 132.87510681]
[-8.67155361 134.58779907]
[-23.57345581 136.30049133]
[-32.04005051 149.44775391]
[-46.99196243 154.02752686]
[-61.36936188 147.87736511]
[-68.38367462 133.90119934]
[-64.72296143 118.69813538]
[-52.11569214 109.44660187]
[-36.51464081 110.51488495]
[-25.28614616 121.39858246]
[-10.38424397 119.68589783]
[4.51765871 117.97320557]
[17.98989677 106.77058411]
[34.82782364 114.15055847]
[49.69087219 112.12822723]
[64.55391693 110.10589600]
[79.41696167 108.08355713]
[84.61238098 94.01203918]
[74.62965393 82.81627655]
[64.64692688 71.62050629]
[54.66419983 60.42473984]
[44.68147659 49.22897339]
[34.46799469 38.24330902]
[24.02818298 27.47250175]
[8.44473457 28.77256393]
[-4.29865074 19.70944405]
[-8.18493652 4.56247091]
[-1.37913811 -9.51641846]
[12.90525532 -15.87960243]
[27.92358971 -11.52258015]
[36.58466721 1.49739504]
[34.79899216 17.03269005]
[45.23880386 27.80349731]
[49.97639084 28.76826859]
[54.13561249 32.75978470]
[55.87723923 39.24625015]
[65.85997009 50.44201279]
[75.84269714 61.63777924]
[85.82541656 72.83354950]
[95.80814362 84.02931213]
[90.74867249 69.90834808]
[91.66262817 54.93621445]
[98.40213013 41.53549957]
[109.87667847 31.87451553]
[124.22963715 27.51646805]
[139.13861084 29.16651154]
[152.19122314 36.55765915]
[161.27551270 48.49398422]
[164.92156982 63.04411316]
[162.53942871 77.85375214]
[154.51455688 90.52661896]
[142.14543152 99.01216125]
[127.43341827 101.93737030]
[112.75665283 98.82789612]
[125.19609070 107.21003723]
[137.63552856 115.59218597]
[150.07498169 123.97432709]
[162.51441956 132.35647583]
[174.95385742 140.73861694]
[187.39329529 149.12075806]
[199.83273315 157.50289917]
[212.27217102 165.88504028]
[224.71162415 174.26718140]
[237.15106201 182.64932251]
[241.83312988 182.40533447]
[246.04507446 183.76538086]
[260.16989136 178.71662903]
[274.29467773 173.66787720]
[288.41949463 168.61911011]
[302.49099731 163.42370605]
[316.50772095 158.08218384]
[330.52444458 152.74067688]
[336.75811768 138.21769714]
[351.46606445 132.43395996]
[365.92233276 138.82083130]
[371.55023193 153.58911133]
[365.01086426 167.97703552]
[350.18392944 173.44850159]
[335.86593628 166.75738525]
[321.84924316 172.09890747]
[307.83251953 177.44041443]
[302.66873169 182.79588318]
[293.46823120 182.74392700]
[279.34344482 187.79267883]
[265.21862793 192.84143066]
[251.09382629 197.89018250]
[265.48092651 202.13414001]
[279.19924927 208.20111084]
[292.01885986 215.98941040]
[303.72494507 225.36851501]
[314.12130737 236.18127441]
[323.03372192 248.24645996]
[330.31286621 261.36187744]
[335.83673096 275.30773926]
[339.51272583 289.85031128]
[341.27926636 304.74594116]
[341.10675049 319.74493408]
[338.99804688 334.59597778]
[334.98852539 349.05017090]
[329.14538574 362.86529541]
[321.56649780 375.80981445]
[312.37890625 387.66680908]
[301.73660278 398.23757935]
[289.81790161 407.34497070]
[276.82254028 414.83633423]
[262.96829224 420.58615112]
[248.48739624 424.49807739]
[233.62246704 426.50653076]
[218.62263489 426.57785034]
[203.73927307 424.71084595]
[189.22181702 420.93682861]
[175.31353760 415.31903076]
[162.24752808 407.95156860]
[150.24273682 398.95794678]
[139.50038147 388.48886108]
[130.20045471 376.71978760]
[122.49880981 363.84793091]
[116.52453613 350.08898926]
[112.37773895 335.67358398]
[110.12791443 320.84326172]
[109.81275940 305.84658813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 93]
[12 92]
[13 91]
[14 90]
[15 89]
[16 88]
[17 87]
[18 86]
[19 85]
[20 84]
[21 83]
[23 46]
[24 45]
[25 44]
[26 43]
[29 41]
[30 40]
[31 39]
[47 69]
[48 68]
[49 67]
[50 66]
[51 65]
[52 62]
[53 61]
[95 115]
[96 114]
[97 113]
[98 112]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
