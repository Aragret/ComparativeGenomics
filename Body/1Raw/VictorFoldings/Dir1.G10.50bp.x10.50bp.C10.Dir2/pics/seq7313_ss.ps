%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAACCUGGGGGGGGGGGGAGUGACUAUAUGGAUGCCCCCCACCCUACCACACAUUCGAAGAACCCGxxxxxxxxxxAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCCCCCCCCCCCAUUAACCU\
) } def
/len { sequence length } bind def

/coor [
[94.67518616 372.28302002]
[80.82925415 366.26699829]
[69.12059021 356.73757935]
[60.41806412 344.40191650]
[55.36746216 330.17538452]
[54.34357071 315.11370850]
[57.42237091 300.33456421]
[64.37538910 286.93463135]
[74.68667603 275.90829468]
[87.59105682 268.07379150]
[102.13094330 264.01248169]
[102.13094330 249.01246643]
[102.13094330 234.01246643]
[102.13094330 219.01246643]
[102.13094330 204.01246643]
[102.13094330 189.01246643]
[102.13094330 174.01246643]
[102.13094330 159.01246643]
[102.13094330 144.01246643]
[102.13094330 129.01246643]
[79.64673615 113.94794464]
[81.69429779 91.32515717]
[71.48081970 80.33949280]
[61.26733780 69.35382843]
[51.05385971 58.36816406]
[40.84037781 47.38249969]
[39.89890289 62.35292435]
[29.68238831 73.33576965]
[14.81901360 75.35569000]
[2.04203391 67.49765015]
[-2.86045432 53.32141876]
[2.33242416 39.24896240]
[15.26824474 31.65524483]
[30.08730888 33.98048782]
[21.57621765 21.62891388]
[6.28822565 18.64311028]
[-2.16727734 5.99561501]
[0.77344608 -8.56074905]
[-7.73764420 -20.91232109]
[-16.24873352 -33.26389313]
[-29.73150444 -26.62817764]
[-44.03679276 -22.02636909]
[-58.85967636 -19.55656052]
[-73.88420868 -19.27139282]
[-88.79013824 -21.17694473]
[-103.25974274 -25.23260117]
[-116.98460388 -31.35191345]
[-129.67218018 -39.40444946]
[-141.05203247 -49.21856689]
[-150.88159180 -60.58507919]
[-158.95133972 -73.26171112]
[-165.08927917 -86.97824860]
[-169.16458130 -101.44233704]
[-171.09036255 -116.34566498]
[-170.82560730 -131.37057495]
[-168.37591553 -146.19679260]
[-163.79353333 -160.50831604]
[-157.17613220 -174.00009155]
[-148.66474915 -186.38452148]
[-138.44081116 -197.39764404]
[-126.72225189 -206.80473328]
[-113.75884247 -214.40524292]
[-99.82689667 -220.03718567]
[-85.22338104 -223.58052063]
[-70.25956726 -224.95970154]
[-55.25441360 -224.14535522]
[-40.52775192 -221.15483093]
[-26.39348412 -216.05184937]
[-13.15288067 -208.94522095]
[-1.08816695 -199.98638916]
[9.54349613 -189.36633301]
[18.51549530 -177.31141663]
[25.63659096 -164.07858276]
[30.75499535 -149.94990540]
[33.76161194 -135.22651672]
[34.59235382 -120.22225952]
[33.22951126 -105.25694275]
[29.70213699 -90.64956665]
[24.08541489 -76.71147919]
[16.49906540 -63.73977280]
[7.10479355 -52.01094055]
[-3.89716172 -41.77498245]
[4.61392832 -29.42341232]
[13.12501907 -17.07183838]
[27.77437210 -14.63625717]
[36.58177948 -2.23125029]
[33.92779160 13.11782455]
[42.43888092 25.46939659]
[51.82604218 37.16902161]
[62.03952408 48.15468597]
[72.25300598 59.14035034]
[82.46648407 70.12601471]
[92.67996216 81.11167908]
[112.87091827 78.94911194]
[128.93487549 96.99371338]
[143.70092773 94.35485077]
[158.46697998 91.71598053]
[161.11639404 78.69983673]
[168.03195190 67.39656067]
[178.36470032 59.15184784]
[190.86038208 54.93849945]
[204.01176453 55.24166107]
[216.24031067 60.00306702]
[226.08576965 68.63066864]
[232.38044739 80.07215118]
[247.24349976 78.04981232]
[262.10653687 76.02748108]
[272.92312622 64.17922211]
[288.92022705 65.39241028]
[297.82626343 78.73639679]
[292.80929565 93.97481537]
[277.71786499 99.41805267]
[264.12887573 90.89052582]
[249.26583862 92.91286469]
[234.40278625 94.93519592]
[229.69299316 111.10413361]
[218.37628174 123.65032196]
[202.67497253 130.03842163]
[185.70372009 128.94943237]
[170.85171509 120.55279541]
[161.10585022 106.48204041]
[146.33978271 109.12090302]
[131.57373047 111.75976562]
[146.56297302 111.19171143]
[158.76356506 119.91786194]
[163.06974792 134.28646851]
[157.67945862 148.28450012]
[144.84844971 156.05400085]
[129.94628906 154.34356689]
[119.20928955 143.86900330]
[117.13094330 129.01246643]
[117.13094330 144.01246643]
[117.13094330 159.01246643]
[117.13094330 174.01246643]
[117.13094330 189.01246643]
[117.13094330 204.01246643]
[117.13094330 219.01246643]
[117.13094330 234.01246643]
[117.13094330 249.01246643]
[117.13094330 264.01248169]
[131.67083740 268.07379150]
[144.57521057 275.90829468]
[154.88648987 286.93463135]
[161.83952332 300.33456421]
[164.91831970 315.11370850]
[163.89442444 330.17538452]
[158.84382629 344.40191650]
[150.14129639 356.73757935]
[138.43263245 366.26699829]
[124.58670044 372.28302002]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[34 88]
[35 87]
[38 84]
[39 83]
[40 82]
[95 123]
[96 122]
[97 121]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
