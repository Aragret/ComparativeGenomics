%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCACUCGGGGGGGGGGUGCAUCAACUGAACGCAAAUCAGCCACUUUAAUUAAGCUAAGCCCUUACUxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACCCCCCCCCCCAACCCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 365.90023804]
[71.19830322 359.88421631]
[59.48964310 350.35479736]
[50.78712082 338.01913452]
[45.73651886 323.79260254]
[44.71262741 308.73092651]
[47.79142761 293.95178223]
[54.74444962 280.55184937]
[65.05573273 269.52551270]
[77.96011353 261.69100952]
[92.50000000 257.62969971]
[92.50000000 242.62968445]
[92.50000000 227.62968445]
[92.50000000 212.62968445]
[92.50000000 197.62968445]
[92.50000000 182.62968445]
[92.50000000 167.62968445]
[92.50000000 152.62968445]
[92.50000000 137.62968445]
[92.50000000 122.62968445]
[80.14842987 114.11859894]
[66.13171387 119.46010590]
[52.11500168 124.80162048]
[50.35778809 140.00592041]
[41.72648621 152.64550781]
[28.20449829 159.81590271]
[12.89908409 159.86938477]
[-0.67268735 152.79368591]
[-9.39212132 140.21472168]
[-11.25555515 125.02307892]
[-5.83478642 110.70966339]
[5.62453270 100.56359863]
[20.48913383 96.91637421]
[35.34324265 100.60610199]
[46.77348709 110.78490448]
[60.79020309 105.44339752]
[74.80691528 100.10188293]
[74.65087891 85.10269165]
[60.52607727 80.05393982]
[46.40127182 75.00518036]
[35.18525696 85.41957092]
[20.41112328 89.41752625]
[5.47386312 86.08032990]
[-6.19405174 76.17485809]
[-11.91141987 61.97731400]
[-10.36443233 46.75018692]
[-1.90857542 33.99256134]
[11.51305771 26.63604164]
[26.81627274 26.37110710]
[40.48450470 33.25863647]
[49.37689209 45.71592331]
[51.45002747 60.88037872]
[65.57482910 65.92913818]
[79.69963837 70.97789001]
[88.40298462 77.03817749]
[94.88123322 84.80805969]
[96.12811279 69.85997772]
[97.37498474 54.91188812]
[98.62185669 39.96380234]
[99.86873627 25.01571465]
[101.11560822 10.06762695]
[86.60794830 6.08737135]
[73.07878113 -0.49110311]
[60.98891068 -9.44373608]
[50.75010681 -20.46560287]
[42.71110535 -33.18130493]
[37.14570618 -47.15774918]
[34.24346924 -61.91890335]
[34.10324097 -76.96200562]
[36.72979736 -91.77469635]
[42.03367996 -105.85246277]
[49.83424377 -118.71582031]
[59.86579895 -129.92663574]
[71.78667450 -139.10310364]
[85.19085693 -145.93263245]
[99.62179565 -150.18264771]
[114.58798218 -151.70838928]
[129.57968140 -150.45787048]
[144.08625793 -146.47370911]
[157.61364746 -139.89158630]
[169.70111084 -130.93569946]
[179.93695068 -119.91107178]
[187.97251892 -107.19319916]
[193.53414917 -93.21525574]
[196.43240356 -78.45332336]
[196.56858826 -63.41017914]
[193.93803406 -48.59819794]
[188.63035583 -34.52186203]
[180.82632446 -21.66061020]
[170.79174805 -10.45249176]
[158.86839294 -1.27925003]
[145.46238708 5.54667711]
[131.03028870 9.79280090]
[116.06369781 11.31450176]
[114.81681824 26.26258850]
[113.56994629 41.21067429]
[112.32307434 56.15876389]
[111.07619476 71.10684967]
[109.82932281 86.05493927]
[119.57697296 97.45595551]
[134.53723145 98.54726410]
[149.49746704 99.63858032]
[154.02320862 85.26448822]
[161.74237061 72.32187653]
[172.23866272 61.50871277]
[184.94604492 53.40813828]
[199.17921448 48.45701218]
[214.17059326 46.92233658]
[229.11172485 48.88687897]
[243.19683838 54.24469376]
[255.66635132 62.70683670]
[265.84780884 73.81696320]
[273.19210815 86.97590637]
[277.30322266 101.47402954]
[277.95941162 116.52946472]
[275.12527466 131.33029175]
[268.95370483 145.07832336]
[259.77746582 157.03213501]
[248.09149170 166.54708862]
[234.52592468 173.11004639]
[219.81237793 176.36706543]
[204.74432373 176.14251709]
[190.13436890 172.44850159]
[176.77038574 165.48423767]
[165.37310791 155.62530518]
[156.55717468 143.40335083]
[150.79798889 129.47753906]
[148.40615845 114.59882355]
[133.44590759 113.50751495]
[118.48566437 112.41620636]
[107.50000000 122.62968445]
[107.50000000 137.62968445]
[107.50000000 152.62968445]
[107.50000000 167.62968445]
[107.50000000 182.62968445]
[107.50000000 197.62968445]
[107.50000000 212.62968445]
[107.50000000 227.62968445]
[107.50000000 242.62968445]
[107.50000000 257.62969971]
[122.03988647 261.69100952]
[134.94427490 269.52551270]
[145.25555420 280.55184937]
[152.20857239 293.95178223]
[155.28736877 308.73092651]
[154.26348877 323.79260254]
[149.21287537 338.01913452]
[140.51036072 350.35479736]
[128.80169678 359.88421631]
[114.95575714 365.90023804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 37]
[22 36]
[23 35]
[38 54]
[39 53]
[40 52]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[61 94]
[100 130]
[101 129]
[102 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
