%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACCCCCAGGGGGGGGGGCUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGxxxxxxxxxxAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCAACCCCCCCCCCCCCCUGACCCCCA\
) } def
/len { sequence length } bind def

/coor [
[81.96660614 370.61761475]
[69.04745483 362.85925293]
[58.26615524 352.33023071]
[50.20413971 339.59835815]
[45.29618073 325.35025024]
[43.80695343 310.35427856]
[45.81678009 295.41915894]
[51.21726227 281.35034180]
[59.71716690 268.90655518]
[70.85810089 258.75881958]
[84.03924561 251.45443726]
[98.54976654 247.38729858]
[97.93394470 232.39994812]
[97.31811523 217.41259766]
[96.70229340 202.42524719]
[96.08646393 187.43789673]
[95.47064209 172.45053101]
[94.85481262 157.46318054]
[94.23899078 142.47583008]
[93.62316132 127.48847961]
[93.00733948 112.50112152]
[85.68813324 100.58807373]
[92.00531006 88.11470032]
[91.38948059 73.12734985]
[90.77365875 58.13999557]
[88.32073212 43.34191513]
[84.06788635 28.95743561]
[79.81503296 14.57295418]
[75.56218719 0.18847348]
[60.88716125 3.32954526]
[46.01474762 5.33803129]
[31.03222275 6.20214462]
[16.02751160 5.91681480]
[1.08867037 4.48371553]
[-13.69663334 1.91125739]
[-28.24163246 -1.78546321]
[-42.46097183 -6.58475256]
[-56.27120209 -12.45844555]
[-69.59127808 -19.37207413]
[-82.34304047 -27.28506279]
[-94.45164490 -36.15097809]
[-105.84603882 -45.91778564]
[-116.45935059 -56.52817535]
[-126.22929382 -67.91987610]
[-135.09854126 -80.02603912]
[-143.01504517 -92.77561951]
[-149.93234253 -106.09379578]
[-155.80982971 -119.90240479]
[-160.61303711 -134.12042236]
[-164.31376648 -148.66439819]
[-166.89028931 -163.44900513]
[-168.32751465 -178.38745117]
[-168.61697388 -193.39207458]
[-167.75698853 -208.37483215]
[-165.75259399 -223.24780273]
[-162.61557007 -237.92370605]
[-158.36430359 -252.31639099]
[-153.02375793 -266.34140015]
[-146.62527466 -279.91647339]
[-139.20639038 -292.96188354]
[-130.81066895 -305.40112305]
[-121.48735046 -317.16116333]
[-111.29116821 -328.17300415]
[-100.28194427 -338.37200928]
[-88.52429199 -347.69833374]
[-76.08721924 -356.09725952]
[-63.04369736 -363.51947021]
[-49.47028351 -369.92144775]
[-35.44662857 -375.26559448]
[-21.05502892 -379.52053833]
[-6.37994194 -382.66131592]
[8.49251080 -384.66952515]
[23.47505188 -385.53335571]
[38.47975922 -385.24774170]
[53.41857147 -383.81436157]
[68.20382690 -381.24163818]
[82.74875641 -377.54461670]
[96.96800232 -372.74508667]
[110.77812195 -366.87112427]
[124.09806824 -359.95724487]
[136.84968567 -352.04400635]
[148.95811462 -343.17785645]
[160.35232544 -333.41082764]
[170.96543884 -322.80023193]
[180.73516846 -311.40835571]
[189.60418701 -299.30203247]
[197.52044678 -286.55230713]
[204.43748474 -273.23397827]
[210.31471252 -259.42526245]
[215.11766052 -245.20715332]
[218.81809998 -230.66311646]
[221.39434814 -215.87846375]
[222.83128357 -200.93998718]
[223.12046814 -185.93534851]
[222.26019287 -170.95260620]
[220.25552368 -156.07968140]
[217.11820984 -141.40385437]
[212.86666870 -127.01123810]
[207.52586365 -112.98631287]
[201.12712097 -99.41137695]
[193.70800781 -86.36609650]
[185.31202698 -73.92702484]
[175.98849487 -62.16716385]
[165.79209900 -51.15552139]
[154.78268433 -40.95671844]
[143.02485657 -31.63061333]
[130.58761597 -23.23192787]
[117.54396057 -15.80995464]
[103.97042847 -9.40824604]
[89.94667053 -4.06437302]
[94.19951630 10.32010746]
[98.45236206 24.70458794]
[102.70520782 39.08906937]
[107.59500885 24.90845299]
[118.06855011 14.17043781]
[132.12283325 8.92859268]
[147.07009888 10.18538380]
[160.05175781 17.70046043]
[168.58517456 30.03661346]
[171.03840637 44.83464432]
[166.94226074 59.26453018]
[157.08012390 70.56665802]
[143.33804321 76.57958221]
[128.34410095 76.15336609]
[114.96578217 69.36951447]
[105.76100922 57.52416992]
[106.37683868 72.51152039]
[106.99266052 87.49887848]
[114.31186676 99.41192627]
[107.99468994 111.88529968]
[108.61051941 126.87265015]
[109.22634125 141.86000061]
[109.84217072 156.84735107]
[110.45799255 171.83471680]
[111.07382202 186.82206726]
[111.68964386 201.80941772]
[112.30547333 216.79676819]
[112.92129517 231.78411865]
[113.53711700 246.77148438]
[128.33239746 249.63444519]
[142.06835938 255.83280945]
[154.00427246 265.03231812]
[163.49642944 276.73684692]
[170.03291321 290.31515503]
[173.26126099 305.03503418]
[173.00733948 320.10263062]
[169.28485107 334.70535278]
[162.29454041 348.05572510]
[152.41339111 359.43377686]
[140.17428589 368.22586060]
[126.23726654 373.95788574]
[111.35392761 376.32070923]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[24 127]
[25 126]
[26 113]
[27 112]
[28 111]
[29 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
