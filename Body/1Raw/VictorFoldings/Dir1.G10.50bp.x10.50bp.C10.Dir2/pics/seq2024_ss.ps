%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAUGAAAAAUGGGGGGGGGGUAUAACCAAGCAUAAUAUAGCAAGGACUAACCCCUAUACCUUCUGCAUAAxxxxxxxxxxCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUCCCCCCCCCCAAGAUUAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[88.78759766 593.12939453]
[74.62699127 587.97436523]
[62.03724670 579.69219971]
[51.69731140 568.72937012]
[44.16479874 555.67724609]
[39.84593582 541.23968506]
[38.97362518 526.19519043]
[41.59491730 511.35522461]
[47.56844330 497.51998901]
[56.57205963 485.43563843]
[68.12021637 475.75384521]
[81.59013367 468.99679565]
[96.25539398 465.52880859]
[96.25539398 450.52880859]
[96.25539398 435.52880859]
[96.25539398 420.52880859]
[96.25539398 405.52880859]
[96.25539398 390.52880859]
[96.25539398 375.52880859]
[96.25539398 360.52880859]
[96.25539398 345.52880859]
[96.25539398 330.52880859]
[82.19146729 325.47991943]
[70.68193054 315.90603638]
[63.12825775 302.94775391]
[60.45880127 288.15939331]
[63.01474762 273.32238770]
[70.50662994 260.23071289]
[82.04697418 250.47404480]
[96.25539398 245.24468994]
[96.25539398 230.24468994]
[96.25539398 215.24468994]
[96.25539398 200.24468994]
[95.95139313 185.24777222]
[95.34350586 170.26010132]
[94.73561859 155.27243042]
[94.12773895 140.28474426]
[93.51985168 125.29706573]
[84.99865723 122.61962128]
[77.58050537 117.05642700]
[72.24330139 109.06105042]
[69.77926636 99.41696167]
[70.68479156 89.16204834]
[75.08058167 79.47710419]
[62.85660172 70.78375244]
[50.63261795 62.09040451]
[38.40863800 53.39705658]
[25.31937218 61.18107986]
[10.19492435 62.96180344]
[-4.34430170 58.43071365]
[-15.77929783 48.37284088]
[-22.12888145 34.53078079]
[-22.29294968 19.30274773]
[-16.24307442 5.32709360]
[-5.02743673 -4.97481585]
[9.41078949 -9.81811237]
[24.57009315 -8.36366653]
[37.82403183 -0.86346805]
[46.87628174 11.38302708]
[50.15848923 26.25403976]
[47.10198593 41.17307663]
[59.32596588 49.86642456]
[71.54994965 58.55977249]
[83.77392578 67.25312042]
[98.29508209 63.49333191]
[104.76418304 49.96001053]
[111.23328400 36.42668915]
[98.66420746 44.61316299]
[84.20291138 48.59699631]
[69.21471405 48.00207138]
[55.11467743 42.88455582]
[43.23401260 33.72760010]
[34.69439697 21.39573479]
[30.30206680 7.05322933]
[30.47171402 -7.94581127]
[35.18732071 -22.18530083]
[44.00368118 -34.32086182]
[56.08842087 -43.20675278]
[70.30059814 -48.00404358]
[85.29841614 -48.25980759]
[99.66590881 -43.94990158]
[112.04660034 -35.48123169]
[121.27162170 -23.65334129]
[126.47000885 -9.58292103]
[127.15098572 5.40161324]
[123.24887848 19.88864136]
[134.12077332 9.55413723]
[138.79229736 -5.56166458]
[153.34767151 -8.72239399]
[164.21955872 -19.05689812]
[158.72740173 -33.23098373]
[159.08250427 -48.42776871]
[165.23069763 -62.32986069]
[176.23443604 -72.81728363]
[190.41574097 -78.29079437]
[205.61204529 -77.91570282]
[219.50602722 -71.74922943]
[229.97897339 -60.73169708]
[235.43382263 -46.54321289]
[235.03874207 -31.34741211]
[228.85398865 -17.46154594]
[217.82269287 -7.00310612]
[203.62704468 -1.56693006]
[188.43177795 -1.98199499]
[174.55406189 -8.18500614]
[163.68217468 2.14949727]
[159.78828430 16.52610588]
[144.45527649 20.42602921]
[133.58337402 30.76053238]
[124.76660156 42.89578629]
[118.29750061 56.42910767]
[111.82840729 69.96243286]
[128.02371216 88.67285919]
[125.63592529 111.67710114]
[108.50753021 124.68918610]
[109.11541748 139.67686462]
[109.72329712 154.66453552]
[110.33118439 169.65222168]
[110.93906403 184.63989258]
[114.19201660 190.50485229]
[113.98149872 196.25822449]
[111.25539398 200.24468994]
[111.25539398 215.24468994]
[111.25539398 230.24468994]
[111.25539398 245.24468994]
[125.46381378 250.47404480]
[137.00416565 260.23071289]
[144.49603271 273.32238770]
[147.05198669 288.15939331]
[144.38253784 302.94775391]
[136.82885742 315.90603638]
[125.31932068 325.47991943]
[111.25539398 330.52880859]
[111.25539398 345.52880859]
[111.25539398 360.52880859]
[111.25539398 375.52880859]
[111.25539398 390.52880859]
[111.25539398 405.52880859]
[111.25539398 420.52880859]
[111.25539398 435.52880859]
[111.25539398 450.52880859]
[111.25539398 465.52880859]
[125.92065430 468.99679565]
[139.39056396 475.75384521]
[150.93872070 485.43563843]
[159.94235229 497.51998901]
[165.91587830 511.35522461]
[168.53715515 526.19519043]
[167.66485596 541.23968506]
[163.34599304 555.67724609]
[155.81347656 568.72937012]
[145.47354126 579.69219971]
[132.88378906 587.97436523]
[118.72319031 593.12939453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[30 125]
[31 124]
[32 123]
[33 122]
[34 119]
[35 118]
[36 117]
[37 116]
[38 115]
[44 64]
[45 63]
[46 62]
[47 61]
[65 112]
[66 111]
[67 110]
[86 109]
[87 108]
[89 106]
[90 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
