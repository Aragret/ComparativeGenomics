%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCAGUAAGGGGGGGGGGACUAAGAGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCxxxxxxxxxxUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACCCCCCCCCCCUUAGCAUUAA\
) } def
/len { sequence length } bind def

/coor [
[64.15879822 375.79391479]
[50.93859863 368.52145386]
[40.05179596 358.07443237]
[32.24066544 345.16519165]
[28.03778267 330.67388916]
[27.72971153 315.58853149]
[31.33745193 300.93771362]
[38.61502457 287.72033691]
[49.06623459 276.83755493]
[61.97849655 269.03140259]
[76.47142792 264.83413696]
[76.15937805 249.83737183]
[75.84732056 234.84062195]
[75.53526306 219.84387207]
[75.22320557 204.84710693]
[74.91114807 189.85035706]
[74.59909058 174.85360718]
[74.28704071 159.85685730]
[73.97498322 144.86009216]
[73.66292572 129.86334229]
[74.11432648 101.63063049]
[90.95396423 92.03009796]
[85.46693420 78.06970978]
[79.97989655 64.10932159]
[73.88945007 57.21306229]
[74.52725983 49.80099106]
[69.33184052 35.72946930]
[63.55556870 21.88625145]
[57.20843887 8.29530144]
[50.86130905 -5.29564953]
[44.51418304 -18.88660049]
[38.16705322 -32.47755051]
[31.26005363 -45.79270554]
[23.80514336 -58.80901718]
[16.35023308 -71.82532501]
[8.89532185 -84.84163666]
[1.44041181 -97.85794830]
[-6.14949656 -110.79599762]
[-13.87358189 -123.65440369]
[-23.62123299 -135.05541992]
[-35.12303543 -144.68394470]
[-46.72437668 -154.19230652]
[-58.42400360 -163.57946777]
[-74.02987671 -166.18086243]
[-79.11474609 -180.18063354]
[-90.81436920 -189.56779480]
[-99.52677155 -192.52513123]
[-102.65707397 -199.27397156]
[-118.20545197 -202.19946289]
[-122.99797058 -216.30198669]
[-134.49977112 -225.93051147]
[-150.21820068 -224.28540039]
[-162.44331360 -234.30151367]
[-163.92213440 -250.03645325]
[-153.77734375 -262.15496826]
[-138.02763367 -263.46737671]
[-126.01705170 -253.19500732]
[-124.87124634 -237.43231201]
[-113.36944580 -227.80378723]
[-98.64375305 -225.56698608]
[-93.02854919 -210.77577209]
[-81.42720795 -201.26741028]
[-69.72757721 -191.88024902]
[-54.95854187 -189.95028687]
[-49.03683853 -175.27909851]
[-37.33721542 -165.89193726]
[-30.10508537 -164.14781189]
[-25.49451065 -156.18576050]
[-13.99270725 -146.55722046]
[-18.52672768 -160.85557556]
[-17.99305725 -175.84606934]
[-12.45374680 -189.78581238]
[-2.55284667 -201.05400085]
[10.55847263 -208.34051514]
[25.35577011 -210.79815674]
[40.11857605 -208.14117432]
[53.13043213 -200.67848206]
[62.87845993 -189.27778625]
[68.22926331 -175.26461792]
[68.56070709 -160.26828003]
[63.83426285 -146.03237915]
[54.59946442 -134.21212769]
[41.93003082 -126.18183899]
[27.29903412 -122.87519836]
[12.40760231 -124.67665863]
[-1.01517904 -131.37849426]
[6.70890570 -118.52008820]
[12.88928318 -114.37899780]
[14.45672131 -105.31285858]
[21.91163254 -92.29654694]
[29.36654282 -79.28023529]
[36.82145309 -66.26392365]
[44.27636337 -53.24761581]
[47.01304245 -52.40032196]
[49.56698608 -50.38256073]
[51.47721100 -47.26279831]
[52.31788635 -43.27979279]
[51.75800323 -38.82468033]
[58.10513306 -25.23373032]
[64.45226288 -11.64277935]
[70.79939270 1.94817173]
[77.14652252 15.53912258]
[79.80329895 16.61097336]
[82.18067169 18.83404922]
[83.82495880 22.10180092]
[84.33163452 26.14090157]
[83.40335846 30.53405380]
[88.59877777 44.60557556]
[93.94029236 58.62228775]
[99.42732239 72.58267975]
[104.91435242 86.54306793]
[116.11011505 96.52579498]
[130.60571289 100.38294983]
[145.10131836 104.24011230]
[155.88586426 93.30443573]
[170.69764709 89.24160767]
[185.55236816 93.14450836]
[196.45419312 103.96327972]
[200.47058105 118.78772736]
[196.52113342 133.63014221]
[185.66824341 144.49800110]
[170.83126831 148.46789551]
[156.00129700 144.47195435]
[145.16752625 133.58503723]
[141.24415588 118.73571014]
[126.74855804 114.87854767]
[112.25296021 111.02139282]
[106.35463715 115.65386200]
[94.55799866 124.91881561]
[88.65967560 129.55128479]
[88.97173309 144.54803467]
[89.28379059 159.54479980]
[89.59584808 174.54154968]
[89.90790558 189.53829956]
[90.21996307 204.53504944]
[90.53201294 219.53181458]
[90.84407043 234.52856445]
[91.15612793 249.52531433]
[91.46818542 264.52206421]
[106.12317657 268.11285400]
[119.34898376 275.37509155]
[130.24385071 285.81369019]
[138.06495667 298.71688843]
[142.27902222 313.20495605]
[142.59873962 328.29006958]
[139.00231934 342.94366455]
[131.73495483 356.16668701]
[121.29215240 367.05752563]
[108.38592529 374.87362671]
[93.89623260 379.08209229]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 111]
[23 110]
[24 109]
[26 108]
[27 107]
[28 102]
[29 101]
[30 100]
[31 99]
[32 98]
[33 93]
[34 92]
[35 91]
[36 90]
[37 89]
[38 87]
[39 86]
[40 69]
[41 68]
[42 66]
[43 65]
[45 63]
[46 62]
[48 61]
[50 59]
[51 58]
[112 127]
[113 126]
[114 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
