%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACAACAUAGGGGGGGGGGUUUUGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAAxxxxxxxxxxCUGACUAGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCACCCCCCCCCCUAAACAACAUA\
) } def
/len { sequence length } bind def

/coor [
[86.00761414 419.62811279]
[71.98567200 414.07513428]
[59.78571320 405.20880127]
[50.17464066 393.58648682]
[43.75661850 379.93878174]
[40.93508148 365.12359619]
[41.88739777 350.07220459]
[46.55369949 335.73077393]
[54.64066696 323.00082397]
[65.63994598 312.68255615]
[78.86009979 305.42459106]
[93.47011566 301.68313599]
[93.47011566 286.68313599]
[93.47011566 271.68313599]
[93.47011566 256.68313599]
[93.47011566 241.68315125]
[93.47011566 226.68315125]
[93.47011566 211.68315125]
[93.47011566 196.68315125]
[93.47011566 181.68315125]
[93.47011566 166.68315125]
[93.47011566 151.68315125]
[67.11587524 138.50442505]
[52.77653885 113.72316742]
[54.38941956 85.97381592]
[70.50735474 64.36047363]
[59.31906128 54.36937714]
[48.13076401 44.37828064]
[36.94246674 34.38718414]
[25.72934914 44.37536240]
[13.45073605 53.02021408]
[0.26670161 60.20902252]
[-13.65087128 65.84807587]
[-28.12053871 69.86386108]
[-42.95365906 72.20401001]
[-57.95685196 72.83802795]
[-72.93451691 71.75764465]
[-87.69139862 68.97693634]
[-102.03510284 64.53217316]
[-115.77862549 58.48128510]
[-128.74279785 50.90316772]
[-140.75862122 41.89661407]
[-151.66941833 31.57904053]
[-161.33294678 20.08496284]
[-169.62324524 7.56422567]
[-176.43220520 -5.81993484]
[-181.67108154 -19.89302826]
[-185.27156067 -34.47158813]
[-187.18669128 -49.36554337]
[-187.39154053 -64.38072968]
[-185.88340759 -79.32138824]
[-182.68197632 -93.99274445]
[-177.82896423 -108.20351410]
[-171.38764954 -121.76844025]
[-163.44200134 -134.51066589]
[-154.09562683 -146.26409912]
[-143.47035217 -156.87547302]
[-131.70469666 -166.20646667]
[-118.95207977 -174.13542175]
[-105.37873077 -180.55897522]
[-91.16162109 -185.39337158]
[-76.48609161 -188.57560730]
[-61.54346848 -190.06417847]
[-46.52856445 -189.83967590]
[-31.63712692 -187.90504456]
[-17.06329536 -184.28549194]
[-2.99706984 -179.02819824]
[10.37816620 -172.20172119]
[22.88804054 -163.89505005]
[34.36946106 -154.21647644]
[44.67274094 -143.29217529]
[53.66355896 -131.26458740]
[61.22470093 -118.29050446]
[67.25759125 -104.53907013]
[71.68358612 -90.18955994]
[74.44496918 -75.42905426]
[75.50574493 -60.44998550]
[74.85208893 -45.44763565]
[72.49252319 -30.61759186]
[68.45780945 -16.15319443]
[62.80054092 -2.24301410]
[55.59447861 10.93159866]
[46.93356323 23.19888687]
[58.12186050 33.18998337]
[69.31015778 43.18107986]
[80.49845123 53.17217636]
[95.41947174 51.63488388]
[104.33562469 39.57245255]
[113.25177002 27.51002312]
[112.30385590 11.49499798]
[124.32975006 0.87626344]
[140.10420227 3.79960346]
[147.52642822 18.02248192]
[140.90270996 32.63432312]
[125.31420135 36.42617416]
[116.39805603 48.48860550]
[107.48190308 60.55103683]
[111.75212860 66.71667480]
[126.70156097 65.48603821]
[120.29258728 79.04795837]
[124.56282043 85.21360779]
[138.99020386 81.10865784]
[153.41758728 77.00371552]
[167.84497070 72.89877319]
[182.27235413 68.79382324]
[191.30372620 55.53433228]
[207.31155396 54.47190857]
[218.01602173 66.42154694]
[215.20558167 82.21651459]
[201.03614807 89.74025726]
[186.37730408 83.22120667]
[171.94992065 87.32615662]
[157.52253723 91.43109894]
[143.09515381 95.53604126]
[128.66777039 99.64099121]
[128.20605469 107.12676239]
[140.71011353 115.41221619]
[127.28264618 122.09831238]
[126.82093811 129.58409119]
[140.63452148 135.43087769]
[154.44810486 141.27766418]
[168.99952698 135.11068726]
[183.61810303 141.11676025]
[189.63088989 155.73257446]
[183.47059631 170.28683472]
[168.79202271 176.14474487]
[154.30371094 169.83093262]
[148.60131836 155.09124756]
[134.78773499 149.24446106]
[120.97415161 143.39767456]
[108.47011566 151.68315125]
[108.47011566 166.68315125]
[108.47011566 181.68315125]
[108.47011566 196.68315125]
[108.47011566 211.68315125]
[108.47011566 226.68315125]
[108.47011566 241.68315125]
[108.47011566 256.68313599]
[108.47011566 271.68313599]
[108.47011566 286.68313599]
[108.47011566 301.68313599]
[123.08012390 305.42459106]
[136.30029297 312.68255615]
[147.29956055 323.00082397]
[155.38652039 335.73077393]
[160.05282593 350.07220459]
[161.00514221 365.12359619]
[158.18360901 379.93878174]
[151.76557922 393.58648682]
[142.15451050 405.20880127]
[129.95455933 414.07513428]
[115.93260956 419.62811279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[26 86]
[27 85]
[28 84]
[29 83]
[87 97]
[88 96]
[89 95]
[101 115]
[102 114]
[103 113]
[104 112]
[105 111]
[119 130]
[120 129]
[121 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
