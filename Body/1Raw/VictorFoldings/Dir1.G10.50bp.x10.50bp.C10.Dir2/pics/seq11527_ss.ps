%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACCUCCCAGGGGGGGGGGUUCCGAUAAAAUCACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGxxxxxxxxxxCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUAACCCCCCCCCCAAUCACCUUCCA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 406.32284546]
[70.87159729 401.16784668]
[58.28185654 392.88562012]
[47.94191742 381.92285156]
[40.40940475 368.87072754]
[36.09054184 354.43313599]
[35.21823120 339.38867188]
[37.83952332 324.54867554]
[43.81304932 310.71343994]
[52.81666565 298.62908936]
[64.36482239 288.94732666]
[77.83473969 282.19024658]
[92.50000000 278.72225952]
[92.50000000 263.72225952]
[92.50000000 248.72225952]
[92.50000000 233.72225952]
[92.50000000 218.72225952]
[92.50000000 203.72225952]
[92.50000000 188.72225952]
[92.50000000 173.72225952]
[92.50000000 158.72225952]
[92.50000000 143.72225952]
[92.50000000 128.72225952]
[92.50000000 113.72225952]
[86.86524200 99.82083893]
[76.42109680 89.05423737]
[65.97694397 78.28763580]
[54.22927856 87.63424683]
[41.62204361 95.78435516]
[28.27665329 102.65948486]
[14.32163811 108.19341278]
[-0.10860393 112.33284760]
[-14.87509918 115.03791046]
[-29.83563423 116.28256989]
[-44.84613037 116.05482483]
[-59.76201630 114.35687256]
[-74.43965149 111.20506287]
[-88.73767090 106.62975311]
[-102.51837158 100.67501068]
[-115.64904022 93.39817810]
[-128.00321960 84.86933136]
[-139.46192932 75.17063141]
[-149.91479492 64.39546204]
[-159.26116943 52.64760590]
[-167.41104126 40.04020691]
[-174.28588867 26.69468117]
[-179.81954956 12.73955536]
[-183.95867920 -1.69076967]
[-186.66346741 -16.45731926]
[-187.90782166 -31.41787910]
[-187.67976379 -46.42836761]
[-185.98152161 -61.34422302]
[-182.82942200 -76.02179718]
[-178.25382996 -90.31971741]
[-172.29879761 -104.10030365]
[-165.02169800 -117.23082733]
[-156.49261475 -129.58483887]
[-146.79368591 -141.04335022]
[-136.01831055 -151.49600220]
[-124.27026367 -160.84214783]
[-111.66270447 -168.99176025]
[-98.31703949 -175.86634827]
[-84.36180115 -181.39971924]
[-69.93139648 -185.53857422]
[-55.16479111 -188.24305725]
[-40.20420456 -189.48710632]
[-25.19372177 -189.25875854]
[-10.27789974 -187.56021118]
[4.39960623 -184.40782166]
[18.69744110 -179.83193970]
[32.47790909 -173.87663269]
[45.60828781 -166.59927368]
[57.96212387 -158.06994629]
[69.42044067 -148.37078857]
[79.87287903 -137.59519958]
[89.21878815 -125.84696960]
[97.36814117 -113.23924255]
[104.24246979 -99.89344025]
[109.77555847 -85.93809509]
[113.91412354 -71.50760651]
[116.61830902 -56.74094772]
[117.86206818 -41.78033447]
[117.63342285 -26.76985550]
[115.93457031 -11.85406876]
[112.78188324 2.82337451]
[108.20571899 17.12111855]
[102.25014496 30.90146446]
[94.97252655 44.03170013]
[86.44294739 56.38536453]
[76.74355316 67.84348297]
[87.18769836 78.61009216]
[97.63185120 89.37669373]
[104.74675751 85.71051025]
[114.58329773 87.46451569]
[129.36123657 84.89306641]
[144.13919067 82.32161713]
[130.48080444 76.12092590]
[120.44299316 64.97451782]
[115.70178223 50.74353409]
[117.04881287 35.80414200]
[124.25917816 22.65078735]
[136.12893677 13.47971153]
[150.67620850 9.82221889]
[165.47196960 12.28900814]
[178.04579163 20.46819496]
[186.29818726 32.99408722]
[188.85124207 47.77522278]
[185.27867126 62.34356689]
[176.17698669 74.26663208]
[163.06452942 81.55402374]
[178.00218201 82.92024231]
[192.93983459 84.28646088]
[207.87748718 85.65267944]
[222.81513977 87.01889801]
[232.93966675 75.25991058]
[248.05001831 71.73051453]
[262.33596802 77.78783417]
[270.30429077 91.10269928]
[268.89099121 106.55527496]
[258.63949585 118.20373535]
[243.49172974 121.56900787]
[229.27232361 115.35707092]
[221.44892883 101.95655060]
[206.51127625 100.59033203]
[191.57362366 99.22411346]
[176.63597107 97.85789490]
[161.69831848 96.49167633]
[146.71063232 97.09956360]
[131.93269348 99.67101288]
[117.15474701 102.24246216]
[107.50000000 113.72225952]
[107.50000000 128.72225952]
[107.50000000 143.72225952]
[107.50000000 158.72225952]
[107.50000000 173.72225952]
[107.50000000 188.72225952]
[107.50000000 203.72225952]
[107.50000000 218.72225952]
[107.50000000 233.72225952]
[107.50000000 248.72225952]
[107.50000000 263.72225952]
[107.50000000 278.72225952]
[122.16526031 282.19024658]
[135.63517761 288.94732666]
[147.18333435 298.62908936]
[156.18695068 310.71343994]
[162.16047668 324.54867554]
[164.78176880 339.38867188]
[163.90945435 354.43313599]
[159.59059143 368.87072754]
[152.05809021 381.92285156]
[141.71813965 392.88562012]
[129.12840271 401.16784668]
[114.96779633 406.32284546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 92]
[26 91]
[27 90]
[94 130]
[95 129]
[96 128]
[110 127]
[111 126]
[112 125]
[113 124]
[114 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
