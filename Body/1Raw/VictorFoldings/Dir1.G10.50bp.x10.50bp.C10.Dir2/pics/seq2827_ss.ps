%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAGUACCUAGGGGGGGGGGACAAACCCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGxxxxxxxxxxUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCUACCCACCCUUCCCCCCCCCCAACAGUACAUA\
) } def
/len { sequence length } bind def

/coor [
[84.91825867 376.80996704]
[70.89631653 371.25695801]
[58.69636154 362.39062500]
[49.08528900 350.76831055]
[42.66726303 337.12060547]
[39.84572601 322.30541992]
[40.79804230 307.25405884]
[45.46434784 292.91262817]
[53.55131531 280.18267822]
[64.55059052 269.86437988]
[77.77075195 262.60641479]
[92.38076019 258.86499023]
[92.38076019 243.86497498]
[92.38076019 228.86497498]
[92.38076019 213.86497498]
[92.38076019 198.86497498]
[92.38076019 183.86497498]
[92.38076019 168.86497498]
[92.38076019 153.86497498]
[92.38076019 138.86497498]
[92.38076019 123.86498260]
[92.38076019 108.86498260]
[82.63172150 120.26481628]
[68.30988312 124.72406769]
[53.81251144 120.87359619]
[43.59076309 109.89562225]
[40.78305054 95.16073608]
[46.25143433 81.19303131]
[58.31694031 72.28104401]
[73.27506256 71.16103363]
[86.53318787 78.17688751]
[94.02018738 91.17272186]
[96.77643585 76.42812347]
[99.53267670 61.68352890]
[99.37867737 46.68432236]
[96.32028198 31.99942398]
[93.26188660 17.31452560]
[90.20349121 2.62962842]
[87.14509583 -12.05526924]
[72.22461700 -10.40482044]
[57.21480942 -10.18014431]
[42.25161362 -11.38327408]
[27.47053909 -14.00331497]
[13.00545025 -18.01653862]
[-1.01265192 -23.38659859]
[-14.45681572 -30.06486320]
[-27.20528412 -37.99085236]
[-39.14260483 -47.09278107]
[-50.16066742 -57.28822708]
[-60.15968704 -68.48484802]
[-69.04911041 -80.58124542]
[-76.74843597 -93.46787262]
[-83.18792725 -107.02803040]
[-88.30927277 -121.13889313]
[-92.06608582 -135.67268372]
[-94.42434692 -150.49777222]
[-95.36270142 -165.47990417]
[-94.87264252 -180.48339844]
[-92.95861816 -195.37236023]
[-89.63796234 -210.01196289]
[-84.94073486 -224.26962280]
[-78.90949249 -238.01622009]
[-71.59884644 -251.12725830]
[-63.07500839 -263.48397827]
[-53.41516876 -274.97451782]
[-42.70681763 -285.49478149]
[-31.04692650 -294.94949341]
[-18.54109573 -303.25305176]
[-5.30258274 -310.33023071]
[8.54872131 -316.11694336]
[22.88737297 -320.56079102]
[37.58351517 -323.62155151]
[52.50405884 -325.27145386]
[67.51387024 -325.49557495]
[82.47702789 -324.29190063]
[97.25800323 -321.67132568]
[111.72294617 -317.65756226]
[125.74085236 -312.28698730]
[139.18476868 -305.60824585]
[151.93295288 -297.68179321]
[163.86993408 -288.57943726]
[174.88763428 -278.38357544]
[184.88624573 -267.18658447]
[193.77522278 -255.08987427]
[201.47407532 -242.20295715]
[207.91307068 -228.64257812]
[213.03390503 -214.53152466]
[216.79019165 -199.99758911]
[219.14791870 -185.17240906]
[220.08572388 -170.19024658]
[219.59512329 -155.18678284]
[217.68055725 -140.29788208]
[214.35935974 -125.65840149]
[209.66162109 -111.40091705]
[203.62986755 -97.65454102]
[196.31874084 -84.54376984]
[187.79444885 -72.18734741]
[178.13420105 -60.69717026]
[167.42546082 -50.17729950]
[155.76522827 -40.72300339]
[143.25909424 -32.41991043]
[130.02032471 -25.34320831]
[116.16880798 -19.55699348]
[101.82999420 -15.11366463]
[104.88838959 -0.42876714]
[107.94678497 14.25613022]
[111.00518036 28.94102859]
[114.06357574 43.62592697]
[119.08091736 29.48993301]
[127.97583771 17.41183662]
[139.98651123 8.42609215]
[154.08427429 3.30229855]
[169.06167603 2.47929430]
[183.63595581 6.02756691]
[196.55888367 13.64321804]
[206.72363281 24.67399025]
[213.25962830 38.17512894]
[215.60707092 52.99030685]
[213.56492615 67.85064697]
[207.30810547 81.48340607]
[197.37245178 92.72097015]
[184.60896301 100.60089111]
[170.11076355 104.44827271]
[155.11959839 103.93359375]
[140.91940308 99.10093689]
[128.72639465 90.36421204]
[119.58485413 78.47167969]
[114.27727509 64.43977356]
[111.52102661 79.18437195]
[108.76478577 93.92896271]
[107.38076019 108.86498260]
[107.38076019 123.86498260]
[107.38076019 138.86497498]
[107.38076019 153.86497498]
[107.38076019 168.86497498]
[107.38076019 183.86497498]
[107.38076019 198.86497498]
[107.38076019 213.86497498]
[107.38076019 228.86497498]
[107.38076019 243.86497498]
[107.38076019 258.86499023]
[121.99077606 262.60641479]
[135.21093750 269.86437988]
[146.21020508 280.18267822]
[154.29718018 292.91262817]
[158.96348572 307.25405884]
[159.91580200 322.30541992]
[157.09425354 337.12060547]
[150.67623901 350.76831055]
[141.06515503 362.39062500]
[128.86520386 371.25695801]
[114.84326172 376.80996704]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[32 130]
[33 129]
[34 128]
[35 108]
[36 107]
[37 106]
[38 105]
[39 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
