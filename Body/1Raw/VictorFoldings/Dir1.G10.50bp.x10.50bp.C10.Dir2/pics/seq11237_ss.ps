%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAAUCCCCGGGGGGGGGGUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCCUCCUAGACCUxxxxxxxxxxACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCCCCCCCCCCCACAAACCCC\
) } def
/len { sequence length } bind def

/coor [
[106.71519470 572.13720703]
[94.83092499 562.86212158]
[85.51221466 551.01202393]
[79.30084991 537.27581787]
[76.55794525 522.45220947]
[77.44297791 507.40295410]
[81.90447998 493.00302124]
[89.68308258 480.08956909]
[100.32653046 469.41342163]
[113.21604156 461.59524536]
[127.60222626 457.08956909]
[126.66660309 442.11877441]
[125.73097229 427.14797974]
[124.79534149 412.17718506]
[123.85971832 397.20639038]
[122.92408752 382.23559570]
[121.98845673 367.26483154]
[121.05282593 352.29403687]
[120.11720276 337.32324219]
[119.18157196 322.35244751]
[118.24594116 307.38165283]
[107.75888824 293.34521484]
[116.00428772 276.91372681]
[114.75740814 261.96563721]
[113.51053619 247.01756287]
[111.79784393 232.11566162]
[109.62100983 217.27445984]
[107.44417572 202.43325806]
[105.26733398 187.59204102]
[103.09049988 172.75083923]
[100.91365814 157.90963745]
[98.73682404 143.06843567]
[96.55998993 128.22721863]
[94.38314819 113.38601685]
[88.98320770 127.38032532]
[75.00910187 132.83233643]
[61.55873871 126.19248199]
[57.38903427 111.78367615]
[65.21469879 98.98683929]
[79.94036102 96.13331604]
[65.71358490 91.37950134]
[53.16325760 100.50468445]
[37.64620590 100.47654724]
[25.12905502 91.30591583]
[20.42490005 76.51907349]
[25.34258652 61.80187607]
[37.99116516 52.81337738]
[53.50699615 53.00984192]
[65.92392731 62.31572342]
[70.46739960 77.15271759]
[84.69417572 81.90653229]
[90.30207062 87.07688904]
[95.23944092 92.81919098]
[98.64241791 78.21029663]
[102.04539490 63.60140228]
[105.44837189 48.99251175]
[91.34987640 43.81447983]
[77.99458313 36.94311523]
[65.58494568 28.48258018]
[54.30910492 18.56114197]
[44.33798981 7.32920074]
[35.82276154 -5.04296684]
[28.89251328 -18.36780357]
[23.65230179 -32.44330597]
[20.18156815 -47.05609512]
[18.53292847 -61.98464584]
[18.73137474 -77.00264740]
[20.77389908 -91.88241577]
[24.62953949 -106.39839935]
[30.23984146 -120.33052063]
[37.51975632 -133.46759033]
[46.35892105 -145.61044312]
[56.62334061 -156.57498169]
[68.15740204 -166.19502258]
[80.78626251 -174.32469177]
[94.31845856 -180.84077454]
[108.54885101 -185.64447021]
[123.26171112 -188.66294861]
[138.23400879 -189.85047913]
[153.23873901 -189.18904114]
[168.04846191 -186.68865967]
[182.43864441 -182.38725281]
[196.19114685 -176.35002136]
[209.09748840 -168.66847229]
[220.96199036 -159.45907593]
[231.60482788 -148.86145020]
[240.86462402 -137.03622437]
[248.60101318 -124.16269684]
[254.69671631 -110.43601227]
[259.05932617 -96.06425476]
[261.62271118 -81.26531219]
[262.34799194 -66.26352692]
[261.22418213 -51.28632355]
[258.26834106 -36.56074905]
[253.52523804 -22.31004143]
[247.06681824 -8.75023651]
[238.99095154 3.91309953]
[229.42008972 15.48799610]
[218.49931335 25.79897881]
[206.39419556 34.68973923]
[193.28822327 42.02549362]
[179.38009644 47.69503021]
[164.88066101 51.61240768]
[150.00971985 53.71823120]
[134.99269104 53.98058701]
[120.05726624 52.39548874]
[116.65428925 67.00437927]
[113.25131226 81.61327362]
[109.84833527 96.22216797]
[109.22435760 111.20918274]
[111.40119171 126.05038452]
[113.57803345 140.89158630]
[115.75486755 155.73280334]
[117.93170166 170.57400513]
[120.10854340 185.41520691]
[122.28537750 200.25640869]
[124.46221161 215.09762573]
[126.63905334 229.93882751]
[129.96476746 234.12919617]
[131.18298340 238.71922302]
[130.50233459 242.82267761]
[128.45861816 245.77069092]
[129.70549011 260.71878052]
[130.95237732 275.66687012]
[140.30171204 284.61358643]
[140.99954224 297.13284302]
[133.21673584 306.44601440]
[134.15235901 321.41680908]
[135.08799744 336.38760376]
[136.02362061 351.35839844]
[136.95924377 366.32919312]
[137.89488220 381.29998779]
[138.83050537 396.27078247]
[139.76612854 411.24157715]
[140.70176697 426.21234131]
[141.63739014 441.18313599]
[142.57301331 456.15393066]
[157.40824890 458.83337402]
[171.17088318 464.98587036]
[183.06077576 474.25375366]
[192.38667297 486.09820557]
[198.60636902 499.83062744]
[201.35824585 514.65258789]
[200.48234558 529.70239258]
[196.02957153 544.10504150]
[188.25880432 557.02319336]
[177.62182617 567.70581055]
[164.73706055 575.53179932]
[150.35360718 580.04614258]
[135.30770874 580.98651123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[23 124]
[24 123]
[25 122]
[26 118]
[27 117]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[33 111]
[34 110]
[40 51]
[41 50]
[53 109]
[54 108]
[55 107]
[56 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
