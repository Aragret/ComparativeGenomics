%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAACCUAGGGGGGGGGGUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUxxxxxxxxxxCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCCCCCCCCCCCACAACACCCUA\
) } def
/len { sequence length } bind def

/coor [
[-31.10325623 216.94030762]
[-38.77412033 207.72578430]
[-45.79862213 198.00950623]
[-52.14404297 187.83673096]
[-57.78083038 177.25483704]
[-62.68272781 166.31312561]
[-66.82690430 155.06254578]
[-70.19406128 143.55551147]
[-72.76850891 131.84559631]
[-74.53826904 119.98736572]
[-75.49507904 108.03603363]
[-75.63449860 96.04727936]
[-74.95587158 84.07692719]
[-89.82247162 82.08087158]
[-104.68907166 80.08481598]
[-119.55566406 78.08876038]
[-134.42227173 76.09270477]
[-149.28886414 74.09664917]
[-164.15545654 72.10058594]
[-179.02206421 70.10453033]
[-193.88865662 68.10847473]
[-208.75526428 66.11241913]
[-202.18618774 79.59749603]
[-208.44284058 93.23033905]
[-222.95031738 97.04254913]
[-235.10070801 88.24662781]
[-236.00958252 73.27419281]
[-225.01296997 63.07332611]
[-239.59671021 59.56415939]
[-254.18046570 56.05499268]
[-268.76422119 52.54582596]
[-275.56680298 65.99281311]
[-285.28759766 77.50815582]
[-297.40231323 86.47084808]
[-311.25769043 92.39755249]
[-326.10644531 94.96863556]
[-341.14788818 94.04544830]
[-355.57080078 89.67778015]
[-368.59735107 82.10116577]
[-379.52511597 71.72421265]
[-387.76467896 59.10652542]
[-392.87176514 44.92856979]
[-394.57092285 29.95493889]
[-392.77050781 14.99314499]
[-387.56765747 0.85005796]
[-379.24291992 -11.71160316]
[-368.24523926 -22.01440430]
[-355.16769409 -29.50272942]
[-340.71557617 -33.77273941]
[-325.66824341 -34.59416199]
[-310.83721924 -31.92269325]
[-297.02224731 -25.90240860]
[-284.96841431 -16.85797119]
[-275.32577515 -5.27713585]
[-268.61428833 8.21555710]
[-265.19592285 22.89246368]
[-265.25503540 37.96207428]
[-250.67129517 41.47124100]
[-236.08755493 44.98041153]
[-221.50379944 48.48957825]
[-206.75920105 51.24581909]
[-191.89260864 53.24187851]
[-177.02600098 55.23793411]
[-162.15940857 57.23398972]
[-147.29280090 59.23004913]
[-132.42620850 61.22610474]
[-117.55960846 63.22216034]
[-102.69300842 65.21821594]
[-87.82641602 67.21427155]
[-72.95981598 69.21033478]
[-68.42050934 50.02367783]
[-61.75988388 31.46649742]
[-53.06182861 13.77252197]
[-42.43589783 -2.83538437]
[-30.01593018 -18.14803886]
[-15.95836067 -31.97257042]
[-0.44025052 -44.13485718]
[16.34294510 -54.48170853]
[34.17983246 -62.88280106]
[52.84575272 -69.23232269]
[72.10559845 -73.45028687]
[91.71678162 -75.48358917]
[111.43230438 -75.30659485]
[131.00382996 -72.92155457]
[150.18484497 -68.35849762]
[168.73376465 -61.67489243]
[186.41694641 -52.95493317]
[203.01168823 -42.30844498]
[218.30894470 -29.86952400]
[232.11605835 -15.79484653]
[244.25912476 -0.26168737]
[256.93063354 -8.28868484]
[269.60214233 -16.31568146]
[282.27368164 -24.34267807]
[294.94519043 -32.36967468]
[307.61669922 -40.39667130]
[307.61465454 -55.82403564]
[315.97283936 -68.79109955]
[330.02413940 -75.16011047]
[345.28485107 -72.89875031]
[356.88537598 -62.72860718]
[361.12396240 -47.89493561]
[356.64816284 -33.13110733]
[344.88613892 -23.14820862]
[329.59112549 -21.13174248]
[315.64370728 -27.72515678]
[302.97219849 -19.69816017]
[290.30065918 -11.67116261]
[277.62915039 -3.64416575]
[264.95764160 4.38283157]
[252.28611755 12.40982819]
[257.90576172 23.00083351]
[262.78991699 33.95047379]
[266.91586304 45.20775223]
[270.26440430 56.72023010]
[272.81985474 68.43429565]
[274.57040405 80.29537964]
[275.50787354 92.24823761]
[275.62786865 104.23720551]
[274.92984009 116.20643616]
[273.41708374 128.10018921]
[271.09658813 139.86305237]
[267.97915649 151.44024658]
[264.07937622 162.77786255]
[259.41534424 173.82307434]
[254.00883484 184.52442932]
[247.88499451 194.83212280]
[241.07235718 204.69810486]
[233.60264587 214.07644653]
[225.51066589 222.92344666]
[216.83409119 231.19792175]
[207.61335754 238.86132812]
[197.89138794 245.87794495]
[187.71348572 252.21513367]
[177.12702942 257.84335327]
[166.18135071 262.73638916]
[154.92741394 266.87145996]
[143.41764832 270.22927856]
[131.70565796 272.79425049]
[119.84600067 274.55438232]
[107.89389801 275.50152588]
[95.90503693 275.63122559]
[83.93524170 274.94293213]
[72.04026794 273.43975830]
[60.27552795 271.12881470]
[48.69580841 268.02078247]
[37.35504913 264.13015747]
[26.30606461 259.47509766]
[15.60032272 254.07723999]
[5.28768587 247.96174622]
[-4.58381414 241.15710449]
[-13.96819878 233.69499207]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 70]
[14 69]
[15 68]
[16 67]
[17 66]
[18 65]
[19 64]
[20 63]
[21 62]
[22 61]
[28 60]
[29 59]
[30 58]
[31 57]
[91 111]
[92 110]
[93 109]
[94 108]
[95 107]
[96 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
