%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGCAAUAGGGGGGGGGGUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCUxxxxxxxxxxCCUCACACGAUUCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCCCCCCCCCCCUAGCAACA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 377.39050293]
[71.01555634 371.83749390]
[58.81560135 362.97116089]
[49.20452881 351.34884644]
[42.78650284 337.70117188]
[39.96496582 322.88595581]
[40.91728210 307.83459473]
[45.58358765 293.49316406]
[53.67055511 280.76321411]
[64.66983032 270.44494629]
[77.88998413 263.18698120]
[92.50000000 259.44552612]
[92.50000000 244.44552612]
[92.50000000 229.44552612]
[92.50000000 214.44552612]
[92.50000000 199.44552612]
[92.50000000 184.44552612]
[92.50000000 169.44552612]
[92.50000000 154.44552612]
[92.50000000 139.44552612]
[92.50000000 124.44553375]
[92.50000000 109.44553375]
[92.19202423 94.44869232]
[91.57619476 79.46134186]
[90.96037292 64.47398376]
[75.95874786 64.16605377]
[61.00452805 62.93519211]
[46.15444565 60.78606415]
[31.46483421 57.72682571]
[16.99141312 53.76908112]
[2.78908753 48.92784119]
[-11.08826923 43.22147369]
[-24.58801460 36.67162704]
[-37.65893936 29.30314255]
[-50.25146103 21.14397240]
[-62.31781006 12.22506905]
[-73.81221771 2.58026409]
[-84.69107819 -7.75385618]
[-94.91312408 -18.73809052]
[-104.43958282 -30.33077240]
[-113.23431396 -42.48792267]
[-121.26395416 -55.16343307]
[-128.49804688 -68.30921173]
[-134.90914917 -81.87539673]
[-140.47294617 -95.81052399]
[-145.16833496 -110.06173706]
[-148.97749329 -124.57497406]
[-151.88597107 -139.29518127]
[-153.88273621 -154.16650391]
[-154.96022034 -169.13255310]
[-155.11434937 -184.13655090]
[-154.34451294 -199.12158203]
[-152.65364075 -214.03079224]
[-150.04814148 -228.80763245]
[-146.53791809 -243.39605713]
[-142.13626099 -257.74072266]
[-136.85989380 -271.78717041]
[-130.72880554 -285.48220825]
[-123.76628113 -298.77380371]
[-115.99870300 -311.61157227]
[-107.45555115 -323.94683838]
[-98.16923523 -335.73275757]
[-88.17498016 -346.92465210]
[-77.51069641 -357.48004150]
[-66.21682739 -367.35891724]
[-54.33623505 -376.52380371]
[-41.91397095 -384.93994141]
[-28.99716377 -392.57534790]
[-15.63481045 -399.40112305]
[-1.87759876 -405.39135742]
[12.22228432 -410.52331543]
[26.61135292 -414.77752686]
[41.23502350 -418.13784790]
[56.03782654 -420.59158325]
[70.96360016 -422.12936401]
[85.95574188 -422.74539185]
[100.95736694 -422.43731689]
[115.91156769 -421.20629883]
[130.76162720 -419.05700684]
[145.45121765 -415.99765015]
[159.92459106 -412.03973389]
[174.12687683 -407.19836426]
[188.00416565 -401.49188232]
[201.50386047 -394.94189453]
[214.57470703 -387.57327271]
[227.16714478 -379.41397095]
[239.23341370 -370.49496460]
[250.72772217 -360.85003662]
[261.60647583 -350.51580811]
[271.82843018 -339.53149414]
[281.35476685 -327.93869019]
[290.14938354 -315.78146362]
[298.17889404 -303.10586548]
[305.41284180 -289.96002197]
[311.82382202 -276.39376831]
[317.38748169 -262.45858765]
[322.08273315 -248.20733643]
[325.89175415 -233.69406128]
[328.80007935 -218.97383118]
[330.79669189 -204.10247803]
[331.87405396 -189.13641357]
[332.02801514 -174.13241577]
[331.25802612 -159.14739990]
[329.56701660 -144.23820496]
[326.96136475 -129.46139526]
[323.45098877 -114.87300873]
[319.04922485 -100.52839661]
[313.77270508 -86.48197174]
[307.64147949 -72.78701782]
[300.67883301 -59.49547958]
[292.91113281 -46.65777969]
[284.36785889 -34.32262039]
[275.08142090 -22.53679085]
[265.08703613 -11.34499550]
[254.42265320 -0.78969294]
[243.12869263 9.08907795]
[231.24801636 18.25384331]
[218.82566833 26.66983795]
[205.90878296 34.30513763]
[192.54635620 41.13077927]
[178.78909302 47.12086487]
[164.68916321 52.25268173]
[150.30004883 56.50675583]
[135.67634583 59.86695099]
[120.87351990 62.32052231]
[105.94772339 63.85816193]
[106.56355286 78.84551239]
[107.17937469 93.83287048]
[110.17539978 98.21946716]
[110.46501160 103.97780609]
[107.50000000 109.44553375]
[107.50000000 124.44553375]
[107.50000000 139.44552612]
[107.50000000 154.44552612]
[107.50000000 169.44552612]
[107.50000000 184.44552612]
[107.50000000 199.44552612]
[107.50000000 214.44552612]
[107.50000000 229.44552612]
[107.50000000 244.44552612]
[107.50000000 259.44552612]
[122.11001587 263.18698120]
[135.33016968 270.44494629]
[146.32945251 280.76321411]
[154.41641235 293.49316406]
[159.08271790 307.83459473]
[160.03503418 322.88595581]
[157.21350098 337.70117188]
[150.79547119 351.34884644]
[141.18440247 362.97116089]
[128.98443604 371.83749390]
[114.96250153 377.39050293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 128]
[24 127]
[25 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
