%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCGAACUACUGGGGGGGGGGAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGGGAxxxxxxxxxxAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUACCCUCCCUUAGCCCCCCCCCCCAGGGAACUACU\
) } def
/len { sequence length } bind def

/coor [
[84.20237732 410.75463867]
[70.71349335 404.02310181]
[59.22799301 394.25854492]
[50.41362381 382.02862549]
[44.78284454 368.04443359]
[42.66301346 353.11895752]
[44.17738342 338.11996460]
[49.23790741 323.91946411]
[57.55037308 311.34304810]
[68.63150024 301.12188721]
[81.83705902 293.85025024]
[96.39928436 289.95086670]
[96.09130096 274.95404053]
[95.78332520 259.95718384]
[95.47534943 244.96035767]
[95.16737366 229.96351624]
[94.85939789 214.96669006]
[94.55141449 199.96984863]
[94.24343872 184.97300720]
[93.93546295 169.97616577]
[93.62748718 154.97933960]
[85.63050079 142.41360474]
[93.08282471 128.45747375]
[92.77484894 113.46063995]
[87.93503571 99.26288605]
[79.01888275 87.20045471]
[70.10272980 75.13802338]
[56.29595184 78.30654144]
[42.36845016 75.96903992]
[30.42622375 68.51259613]
[22.26221657 57.09575272]
[19.08717537 43.46863556]
[21.35017395 29.70471382]
[28.67542458 17.88529396]
[20.00881577 5.64234018]
[11.34220886 -6.60061359]
[2.67560172 -18.84356689]
[-12.58618164 -7.44597054]
[-37.61305237 -11.53845215]
[-50.75468445 -18.77015495]
[-63.89631271 -26.00185776]
[-77.03794861 -33.23355865]
[-90.17958069 -40.46526337]
[-103.32120514 -47.69696426]
[-116.46283722 -54.92866898]
[-134.82969666 -54.09834290]
[-143.37005615 -69.39888763]
[-156.65740967 -76.35924530]
[-173.49371338 -78.35298920]
[-176.23863220 -95.08325195]
[-160.92205811 -102.35230255]
[-149.69705200 -89.64658356]
[-136.40969849 -82.68622589]
[-124.73397064 -85.99370575]
[-113.58885193 -80.25282288]
[-109.23114014 -68.07029724]
[-96.08950806 -60.83859634]
[-82.94787598 -53.60689545]
[-69.80624390 -46.37519073]
[-56.66461182 -39.14348984]
[-43.52297974 -31.91178513]
[-30.38134766 -24.68008423]
[-24.04559135 -28.69358253]
[-11.37407494 -36.72057724]
[-5.03831673 -40.73407745]
[-5.96173000 -55.70562744]
[-6.88514376 -70.67717743]
[-21.35753632 -75.25039673]
[-33.19815826 -84.74587250]
[-40.80566025 -97.87943268]
[-43.15119171 -112.87486267]
[-39.91754150 -127.70415497]
[-31.54203033 -140.36177063]
[-19.15737915 -149.13586426]
[-4.43851089 -152.83982849]
[10.62397003 -150.97271729]
[23.99298668 -143.78704834]
[33.86048889 -132.25462341]
[38.89197540 -117.93511200]
[38.40698242 -102.76509857]
[32.47110367 -88.79621124]
[21.88710976 -77.91763306]
[8.08640575 -71.60059357]
[9.00981998 -56.62903976]
[9.93323326 -41.65748978]
[14.91855526 -27.51017570]
[23.58516312 -15.26722145]
[32.25177002 -3.02426744]
[40.91837692 9.21868610]
[56.59194946 6.25505018]
[72.04891968 10.42419624]
[84.19403839 20.94360542]
[90.57253265 35.75394058]
[89.86611938 51.92205429]
[82.16516113 66.22187805]
[91.08131409 78.28430939]
[99.99746704 90.34674072]
[106.81557465 86.17309570]
[116.80004883 87.10624695]
[131.76133728 86.02918243]
[146.72261047 84.95211029]
[153.13345337 72.71062469]
[164.67308044 65.30763245]
[178.25607300 64.59498596]
[190.31320190 70.65241241]
[197.72940063 81.79476166]
[212.70965576 81.02510071]
[227.68989563 80.25544739]
[241.07487488 71.82023621]
[254.18238831 78.89430237]
[269.16262817 78.12464142]
[282.62356567 68.75791168]
[297.34875488 75.97599030]
[298.19018555 92.35353851]
[284.28228760 101.04273224]
[269.93228149 93.10488129]
[254.95205688 93.87454224]
[242.63854980 102.25469971]
[228.45954895 95.23568726]
[213.47930908 96.00534821]
[198.49906921 96.77500153]
[190.01553345 110.79570007]
[174.70175171 117.08058929]
[158.49317932 112.98049927]
[147.79968262 99.91339111]
[132.83840942 100.99046326]
[117.87712097 102.06752777]
[107.77169037 113.15266418]
[108.07966614 128.14950562]
[116.09867859 141.78790283]
[108.62432098 154.67135620]
[108.93229675 169.66819763]
[109.24028015 184.66502380]
[109.54825592 199.66186523]
[109.85623169 214.65870667]
[110.16420746 229.65554810]
[110.47219086 244.65238953]
[110.78016663 259.64923096]
[111.08814240 274.64605713]
[111.39611816 289.64288330]
[126.10615540 292.94113159]
[139.59912109 299.66448975]
[151.09053040 309.42208862]
[159.91230774 321.64663696]
[165.55157471 335.62741089]
[167.68045044 350.55160522]
[166.17517090 365.55151367]
[161.12326050 379.75509644]
[152.81842041 392.33654785]
[141.74348450 402.56442261]
[128.54234314 409.84405518]
[113.98249054 413.75225830]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 129]
[24 128]
[25 97]
[26 96]
[27 95]
[34 89]
[35 88]
[36 87]
[37 86]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[47 53]
[48 52]
[65 85]
[66 84]
[67 83]
[99 127]
[100 126]
[101 125]
[106 121]
[107 120]
[108 119]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
