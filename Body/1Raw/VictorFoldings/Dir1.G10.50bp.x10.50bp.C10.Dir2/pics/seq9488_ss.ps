%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUCAUCCUAGGGGGGGGGGGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAxxxxxxxxxxGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACCCCCCCCCCCUCAUCUUCCUA\
) } def
/len { sequence length } bind def

/coor [
[89.48325348 388.72036743]
[75.46131134 383.16735840]
[63.26135254 374.30102539]
[53.65028000 362.67871094]
[47.23225784 349.03100586]
[44.41072083 334.21582031]
[45.36303711 319.16445923]
[50.02934265 304.82302856]
[58.11630630 292.09307861]
[69.11558533 281.77478027]
[82.33573914 274.51681519]
[96.94575500 270.77539062]
[96.94575500 255.77537537]
[96.94575500 240.77537537]
[96.94575500 225.77537537]
[96.94575500 210.77537537]
[96.94575500 195.77537537]
[96.94575500 180.77537537]
[96.94575500 165.77537537]
[96.94575500 150.77537537]
[96.94575500 135.77537537]
[96.94575500 120.77538300]
[90.57058716 134.35319519]
[76.24620819 138.80429077]
[63.29856873 131.23072815]
[60.15729141 116.56333923]
[68.86751556 104.35138702]
[83.75798798 102.54537964]
[69.51129913 97.85157776]
[55.26460648 93.15777588]
[41.01791382 88.46398163]
[26.77122116 83.77017975]
[12.52452946 79.07637787]
[-5.37701988 83.26746368]
[-16.58344078 69.79673004]
[-30.92350197 65.39643097]
[-45.26356506 60.99612808]
[-56.53026581 71.34062958]
[-71.36412811 74.63504791]
[-85.75963593 70.09238434]
[-95.88081360 59.02812958]
[-99.08335114 44.48133087]
[-113.42340851 40.08103180]
[-129.27615356 44.27897263]
[-140.64457703 32.45988464]
[-135.83383179 16.78223038]
[-119.79280090 13.37383938]
[-109.02310944 25.74096870]
[-94.68305206 30.14126968]
[-83.87249756 19.89444160]
[-69.28742218 16.41138458]
[-54.82160950 20.72492218]
[-44.38865662 31.77255821]
[-40.86326218 46.65606689]
[-26.52320290 51.05636978]
[-12.18314075 55.45666885]
[-1.31395674 50.06009293]
[10.69627666 53.65531540]
[17.21833038 64.82968140]
[31.46502113 69.52348328]
[45.71171570 74.21728516]
[59.95840454 78.91108704]
[74.20510101 83.60488892]
[88.45178986 88.29869080]
[102.69847870 83.60488892]
[111.36508942 71.36193085]
[120.03170013 59.11898041]
[128.69830322 46.87602615]
[114.70864105 52.28799057]
[99.71069336 52.03985977]
[85.90771484 46.16809082]
[75.32740784 35.53525925]
[69.52405548 21.70337105]
[69.35019684 6.70437860]
[74.83136749 -7.25831270]
[85.16236877 -18.13353348]
[98.82553864 -24.32367516]
[113.81370544 -24.91938591]
[127.92505646 -19.83314896]
[139.08657837 -9.81215572]
[145.65861511 3.67147684]
[146.67570496 18.63695526]
[141.98876953 32.88518143]
[153.77091980 23.60179710]
[165.55305481 14.31841183]
[177.33518982 5.03502607]
[179.30883789 0.06914746]
[182.67657471 -3.27211046]
[186.56867981 -4.72851372]
[190.14054871 -4.43027163]
[202.47183228 -12.97073078]
[214.80311584 -21.51118851]
[211.22384644 -36.26087570]
[213.21835327 -51.30701828]
[220.51690674 -64.61474609]
[232.13243103 -74.38430023]
[246.49400330 -79.29442596]
[261.65936279 -78.68107605]
[275.57751465 -72.62718964]
[286.36614990 -61.95151520]
[292.56616211 -48.09784698]
[293.33908081 -32.93977737]
[288.58038330 -18.52731514]
[278.93362427 -6.80962467]
[265.70343018 0.62857282]
[250.67910767 2.78132153]
[235.89257812 -0.64252001]
[223.34356689 -9.17990589]
[211.01228333 -0.63944656]
[198.68099976 7.90101242]
[186.61857605 16.81716347]
[174.83644104 26.10054779]
[163.05429077 35.38393402]
[151.27215576 44.66732025]
[140.94125366 55.54263306]
[132.27465820 67.78558350]
[123.60803986 80.02854156]
[114.94143677 92.27149200]
[124.88596344 81.04178619]
[138.54682922 74.84657288]
[153.54660034 74.76401520]
[167.27484131 80.80848694]
[177.34237671 91.92804718]
[181.99714661 106.18753815]
[180.42906189 121.10534668]
[172.91102600 134.08529663]
[160.75141907 142.86845398]
[146.06639099 145.92626953]
[131.41163635 142.72657776]
[119.33753967 133.82624817]
[111.94575500 120.77538300]
[111.94575500 135.77537537]
[111.94575500 150.77537537]
[111.94575500 165.77537537]
[111.94575500 180.77537537]
[111.94575500 195.77537537]
[111.94575500 210.77537537]
[111.94575500 225.77537537]
[111.94575500 240.77537537]
[111.94575500 255.77537537]
[111.94575500 270.77539062]
[126.55576324 274.51681519]
[139.77592468 281.77478027]
[150.77519226 292.09307861]
[158.86216736 304.82302856]
[163.52847290 319.16445923]
[164.48078918 334.21582031]
[161.65925598 349.03100586]
[155.24122620 362.67871094]
[145.63015747 374.30102539]
[133.43019104 383.16735840]
[119.40824890 388.72036743]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[28 64]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[35 56]
[36 55]
[37 54]
[42 49]
[43 48]
[65 118]
[66 117]
[67 116]
[68 115]
[83 114]
[84 113]
[85 112]
[86 111]
[90 110]
[91 109]
[92 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
