%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUUCUAGGGGGGGGGGGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAxxxxxxxxxxGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACAUGCUAGCUCCCCCCCCCCUUUAUUCCAG\
) } def
/len { sequence length } bind def

/coor [
[64.99247742 462.36541748]
[51.14653778 456.34939575]
[39.43787384 446.81997681]
[30.73535156 434.48431396]
[25.68474960 420.25778198]
[24.66085815 405.19610596]
[27.73965645 390.41693115]
[34.69268036 377.01699829]
[45.00396347 365.99069214]
[57.90834427 358.15615845]
[72.44823456 354.09484863]
[72.44823456 339.09484863]
[72.44823456 324.09484863]
[72.44823456 309.09484863]
[72.44823456 294.09484863]
[72.44823456 279.09484863]
[72.44823456 264.09484863]
[72.44823456 249.09486389]
[72.44823456 234.09486389]
[72.44823456 219.09486389]
[62.17591858 230.02552795]
[47.47141266 232.98822021]
[33.76773834 226.88827515]
[26.12812996 213.97950745]
[27.37526894 199.03143311]
[37.04836655 187.56709290]
[51.57339859 183.82231140]
[65.58366394 189.18072510]
[73.90239716 201.66165161]
[76.38751984 186.86894226]
[78.87263489 172.07623291]
[76.86618805 164.91246033]
[81.56639862 157.00297546]
[84.35872650 142.26516724]
[87.15104675 127.52736664]
[89.94337463 112.78955841]
[83.98388672 97.13773346]
[94.99567413 84.51887512]
[97.48078918 69.72616577]
[99.96591187 54.93346024]
[102.45102692 40.14075470]
[103.07500458 25.15373802]
[101.82813263 10.20565033]
[100.58125305 -4.74243641]
[99.33438110 -19.69052315]
[98.08750916 -34.63861084]
[83.38445282 -38.14255524]
[70.50175476 -46.00885391]
[60.69450378 -57.45639420]
[54.91359329 -71.35589600]
[53.71355057 -86.34130859]
[57.19934845 -100.94404602]
[65.01737976 -113.73696136]
[76.39125824 -123.47373962]
[90.19892883 -129.21040344]
[88.95204926 -144.15849304]
[87.70517731 -159.10658264]
[86.45830536 -174.05467224]
[85.21142578 -189.00276184]
[76.35376740 -202.11201477]
[83.00633240 -215.43840027]
[81.75946045 -230.38647461]
[80.51258850 -245.33456421]
[79.26570892 -260.28265381]
[78.01883698 -275.23074341]
[76.77196503 -290.17883301]
[62.28256226 -294.77511597]
[50.65824509 -304.57019043]
[43.67163086 -318.07040405]
[42.38812637 -333.21704102]
[47.00345993 -347.70037842]
[56.81382751 -359.31182861]
[70.32321167 -366.28067017]
[85.47154236 -367.54425049]
[99.94879913 -362.90985107]
[111.54730225 -353.08422852]
[118.49838257 -339.56567383]
[119.74202728 -324.41571045]
[115.08860779 -309.94454956]
[105.24772644 -298.35897827]
[91.72004700 -291.42568970]
[92.96692657 -276.47763062]
[94.21379852 -261.52954102]
[95.46067047 -246.58143616]
[96.70755005 -231.63336182]
[97.95442200 -216.68527222]
[106.72290039 -204.64520264]
[100.15951538 -190.24963379]
[101.40638733 -175.30154419]
[102.65326691 -160.35345459]
[103.90013885 -145.40536499]
[105.14701080 -130.45729065]
[119.71428680 -127.08747864]
[132.54411316 -119.36961365]
[142.37356567 -108.04874420]
[148.23049927 -94.22531128]
[149.52973938 -79.24817657]
[146.13151550 -64.58300781]
[138.35635376 -51.66885757]
[126.95494080 -41.77693176]
[113.03559113 -35.88548279]
[114.28247070 -20.93739700]
[115.52934265 -5.98931074]
[116.77621460 8.95877647]
[118.02309418 23.90686226]
[125.71656799 11.03012180]
[138.16847229 2.66650629]
[152.99850464 0.41480404]
[167.37174988 4.70545006]
[178.54063416 14.71824551]
[184.37010193 28.53914452]
[183.74580383 43.52614975]
[176.78707886 56.81433868]
[164.82414246 65.86355591]
[150.14384460 68.94393921]
[135.55245972 65.46665192]
[123.83927155 56.09641266]
[117.24373627 42.62587357]
[114.75861359 57.41857910]
[112.27349854 72.21128845]
[109.78837585 87.00399017]
[115.97546387 96.91892242]
[113.91944122 108.42364502]
[104.68118286 115.58188629]
[101.88885498 130.31968689]
[99.09653473 145.05749512]
[96.30420685 159.79530334]
[93.66534424 174.56135559]
[91.18022156 189.35406494]
[88.69510651 204.14677429]
[87.44823456 219.09486389]
[87.44823456 234.09486389]
[87.44823456 249.09486389]
[87.44823456 264.09484863]
[87.44823456 279.09484863]
[87.44823456 294.09484863]
[87.44823456 309.09484863]
[87.44823456 324.09484863]
[87.44823456 339.09484863]
[87.44823456 354.09484863]
[101.98812103 358.15615845]
[114.89250183 365.99069214]
[125.20378113 377.01699829]
[132.15679932 390.41693115]
[135.23561096 405.19610596]
[134.21171570 420.25778198]
[129.16111755 434.48431396]
[120.45858765 446.81997681]
[108.74992371 456.34939575]
[94.90398407 462.36541748]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 130]
[30 129]
[31 128]
[33 127]
[34 126]
[35 125]
[36 124]
[38 121]
[39 120]
[40 119]
[41 118]
[42 105]
[43 104]
[44 103]
[45 102]
[46 101]
[55 92]
[56 91]
[57 90]
[58 89]
[59 88]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
