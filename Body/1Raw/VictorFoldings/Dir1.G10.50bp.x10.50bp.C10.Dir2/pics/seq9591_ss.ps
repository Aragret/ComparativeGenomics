%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCCUCCCUGGGGGGGGGGACUAUGCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAxxxxxxxxxxAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCCCCCCCCCCCUAUACUCCCU\
) } def
/len { sequence length } bind def

/coor [
[103.03611755 376.33316040]
[90.47789001 367.98199463]
[80.39167023 356.76953125]
[73.41147614 343.40063477]
[69.97608948 328.71563721]
[70.30146790 313.63769531]
[74.36714935 299.11456299]
[81.91757202 286.05920410]
[92.47810364 275.29232788]
[105.38489532 267.49069214]
[119.82662201 263.14474487]
[119.20264435 248.15771484]
[118.57866669 233.17070007]
[117.95468903 218.18368530]
[117.33071136 203.19667053]
[116.70673370 188.20965576]
[116.08275604 173.22264099]
[115.45877838 158.23562622]
[114.83480835 143.24861145]
[114.21083069 128.26159668]
[108.12490845 123.87848663]
[95.95307159 115.11228180]
[89.86715698 110.72917938]
[75.45494080 114.88706207]
[61.04272079 119.04495239]
[49.92803955 130.30436707]
[35.55477142 126.39816284]
[21.14255524 130.55604553]
[6.73033905 134.71394348]
[-6.81212759 144.91383362]
[-20.36233902 134.72422791]
[-14.32201481 118.88279724]
[2.57245135 120.30171967]
[16.98466682 116.14382935]
[31.39688301 111.98594666]
[41.48070908 101.02393341]
[56.88483429 104.63273621]
[71.29705048 100.47484589]
[85.70926666 96.31696320]
[70.76884460 94.98139954]
[59.16035080 85.48177338]
[54.89537048 71.10088348]
[59.44775772 56.80837631]
[71.24433136 47.54334641]
[86.20852661 46.50753021]
[99.16912842 54.05888367]
[105.64730072 67.58786011]
[103.40422821 82.41954041]
[110.85913849 69.40322876]
[118.31404877 56.38692093]
[125.76895905 43.37060928]
[133.22386169 30.35429955]
[120.88867188 21.80302238]
[109.33425140 12.22299767]
[98.64615631 1.68515539]
[88.90352631 -9.73248386]
[80.17848206 -21.94538879]
[72.53562164 -34.86313248]
[66.03153992 -48.39008331]
[60.71438217 -62.42608261]
[56.62351990 -76.86721802]
[53.78924561 -91.60655975]
[52.23253632 -106.53499603]
[51.96492386 -121.54198456]
[52.98838425 -136.51643372]
[55.29534149 -151.34745789]
[58.86871338 -165.92526245]
[63.68204880 -180.14192200]
[69.69970703 -193.89216614]
[76.87713623 -207.07418823]
[85.16120148 -219.59040833]
[94.49055481 -231.34815979]
[104.79613495 -242.26037598]
[116.00164032 -252.24626160]
[128.02410889 -261.23190308]
[140.77452087 -269.15075684]
[154.15849304 -275.94421387]
[168.07690430 -281.56195068]
[182.42674255 -285.96240234]
[197.10173035 -289.11294556]
[211.99324036 -290.99029541]
[226.99101257 -291.58053589]
[241.98399353 -290.87933350]
[256.86120605 -288.89181519]
[271.51248169 -285.63272095]
[285.82934570 -281.12619019]
[299.70581055 -275.40560913]
[313.03912354 -268.51327515]
[325.73059082 -260.50027466]
[337.68621826 -251.42588806]
[348.81750488 -241.35734558]
[359.04205322 -230.36915588]
[368.28411865 -218.54267883]
[376.47531128 -205.96548462]
[383.55499268 -192.73069763]
[389.47070312 -178.93629456]
[394.17871094 -164.68440247]
[397.64407349 -150.08055115]
[399.84121704 -135.23284912]
[400.75381470 -120.25124359]
[400.37512207 -105.24664307]
[398.70797729 -90.33013916]
[395.76470947 -75.61217499]
[391.56707764 -61.20171738]
[386.14617920 -47.20545578]
[379.54214478 -33.72701263]
[371.80389404 -20.86618805]
[362.98870850 -8.71819401]
[353.16183472 2.62702584]
[342.39602661 13.08547497]
[330.77102661 22.57971954]
[318.37289429 31.03947067]
[305.29339600 38.40208817]
[291.62936401 44.61306763]
[277.48202515 49.62641525]
[262.95605469 53.40502167]
[248.15902710 55.92090988]
[233.20051575 57.15544891]
[218.19123840 57.09950256]
[203.24234009 55.75348282]
[188.46449280 53.12735367]
[173.96710205 49.24055862]
[159.85751343 44.12187958]
[146.24017334 37.80921173]
[138.78526306 50.82551956]
[131.33035278 63.84183121]
[123.87544250 76.85813904]
[116.42053223 89.87445068]
[129.19784546 127.63761139]
[129.82182312 142.62463379]
[130.44580078 157.61164856]
[131.06977844 172.59866333]
[131.69375610 187.58567810]
[132.31773376 202.57269287]
[132.94171143 217.55970764]
[133.56568909 232.54672241]
[134.18966675 247.53373718]
[134.81364441 262.52075195]
[149.56665039 265.65121460]
[163.07728577 272.35296631]
[174.49626160 282.20474243]
[183.10577393 294.58728027]
[188.36462402 308.72216797]
[189.94223022 323.72091675]
[187.73942566 338.64065552]
[181.89466858 352.54351807]
[172.77539062 364.55557251]
[160.95481873 373.92172241]
[147.17601013 380.05322266]
[132.30511475 382.56460571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 39]
[24 38]
[25 37]
[27 35]
[28 34]
[29 33]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
