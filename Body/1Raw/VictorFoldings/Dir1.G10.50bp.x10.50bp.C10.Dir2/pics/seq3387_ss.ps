%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAGGCCCCGGGGGGGGGGAACGUUGUAGGCCCCUACGGGCUACUACAACCCUUCGCUGACGCCAUAAAxxxxxxxxxxUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCCCCCCCCCCCAAAUGCCCC\
) } def
/len { sequence length } bind def

/coor [
[95.97718811 383.06002808]
[82.75699615 375.78756714]
[71.87019348 365.34057617]
[64.05905914 352.43130493]
[59.85617828 337.94000244]
[59.54810715 322.85464478]
[63.15584564 308.20382690]
[70.43341827 294.98645020]
[80.88462830 284.10366821]
[93.79689026 276.29754639]
[108.28982544 272.10025024]
[107.97776794 257.10348511]
[107.66571045 242.10673523]
[107.35366058 227.10998535]
[107.04160309 212.11323547]
[106.72954559 197.11648560]
[106.41748810 182.11972046]
[106.10543060 167.12297058]
[105.79337311 152.12622070]
[105.48132324 137.12947083]
[92.05183411 135.31332397]
[80.62345123 128.98069763]
[72.58749390 119.30229187]
[68.77425385 107.82524872]
[53.77506638 107.98128510]
[38.77587891 108.13732147]
[23.77668953 108.29335785]
[8.77750015 108.44939423]
[-6.22168779 108.60543060]
[-21.22087669 108.76146698]
[-36.21357346 109.22950745]
[-51.19328690 110.00935364]
[-66.17300415 110.78919983]
[-81.15271759 111.56904602]
[-94.60726166 120.94492340]
[-109.33736420 113.73686218]
[-110.18994904 97.35989380]
[-96.28795624 88.66123962]
[-81.93256378 96.58933258]
[-66.95284271 95.80948639]
[-51.97313309 95.02964020]
[-36.99341583 94.24979401]
[-33.15070724 91.31567383]
[-27.40844917 90.80794525]
[-21.37691307 93.76227570]
[-6.37772465 93.60623932]
[8.62146378 93.45020294]
[23.62065315 93.29416656]
[38.61984253 93.13813019]
[53.61903000 92.98209381]
[68.61821747 92.82605743]
[72.65702820 79.55287170]
[82.33718109 68.52294159]
[96.42907715 62.12254715]
[95.18219757 47.17446136]
[93.93532562 32.22637177]
[92.68845367 17.27828598]
[77.72185516 15.75658607]
[63.28976822 11.51046181]
[49.88374710 4.68453503]
[37.96039963 -4.48870659]
[27.92582130 -15.69682503]
[20.12179375 -28.55807686]
[14.81411552 -42.63441086]
[12.18356514 -57.44639587]
[12.31973839 -72.48953247]
[15.21799755 -87.25147247]
[20.77962685 -101.22941589]
[28.81520271 -113.94728088]
[39.05103302 -124.97190857]
[51.13849258 -133.92779541]
[64.66588593 -140.50991821]
[79.17247009 -144.49409485]
[94.16416168 -145.74459839]
[109.13035583 -144.21887207]
[123.56129456 -139.96885681]
[136.96546936 -133.13931274]
[148.88635254 -123.96286011]
[158.91790771 -112.75203705]
[166.71846008 -99.88867950]
[172.02235413 -85.81091309]
[174.64891052 -70.99822235]
[174.50868225 -55.95511627]
[171.60644531 -41.19396591]
[166.04104614 -27.21751976]
[158.00204468 -14.50181866]
[147.76324463 -3.47995067]
[135.67337036 5.47268200]
[122.14419556 12.05115604]
[107.63653564 16.03141212]
[108.88341522 30.97949791]
[110.13028717 45.92758560]
[111.37715912 60.87567139]
[124.76345062 67.64379120]
[137.54080200 59.78636169]
[150.31816101 51.92893600]
[152.42626953 36.43410110]
[164.03575134 25.95775795]
[179.66497803 25.44651222]
[191.93429565 35.14176178]
[195.05052185 50.46570587]
[187.54225159 64.18284607]
[172.95466614 69.81636810]
[158.17558289 64.70629120]
[145.39822388 72.56372070]
[132.62088013 80.42114258]
[137.60668945 96.29617310]
[135.33024597 112.66555023]
[149.97373962 115.91637421]
[164.61724854 119.16719818]
[179.26074219 122.41802216]
[193.90425110 125.66885376]
[203.02668762 124.47176361]
[208.81707764 129.14262390]
[223.38977051 132.69738770]
[237.96247864 136.25215149]
[252.53518677 139.80691528]
[269.35598755 137.68643188]
[276.05007935 153.26287842]
[262.93545532 164.00733948]
[248.98042297 154.37962341]
[234.40771484 150.82485962]
[219.83502197 147.27009583]
[205.26231384 143.71533203]
[190.65342712 140.31234741]
[176.00991821 137.06152344]
[161.36642456 133.81069946]
[146.72291565 130.55987549]
[132.07942200 127.30905151]
[120.47807312 136.81741333]
[120.79013062 151.81416321]
[121.10218811 166.81091309]
[121.41424561 181.80766296]
[121.72629547 196.80442810]
[122.03835297 211.80117798]
[122.35041046 226.79792786]
[122.66246796 241.79467773]
[122.97452545 256.79144287]
[123.28658295 271.78817749]
[137.94157410 275.37896729]
[151.16737366 282.64120483]
[162.06225586 293.07980347]
[169.88334656 305.98303223]
[174.09741211 320.47109985]
[174.41714478 335.55618286]
[170.82070923 350.20977783]
[163.55334473 363.43280029]
[153.11054993 374.32363892]
[140.20431519 382.13973999]
[125.71462250 386.34823608]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[30 45]
[31 42]
[32 41]
[33 40]
[34 39]
[54 93]
[55 92]
[56 91]
[57 90]
[94 106]
[95 105]
[96 104]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[114 124]
[115 123]
[116 122]
[117 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
