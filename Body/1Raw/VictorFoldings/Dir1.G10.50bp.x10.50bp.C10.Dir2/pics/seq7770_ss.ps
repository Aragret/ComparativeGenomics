%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCCAUUAUGGGGGGGGGGUCCUAGAACCAGGCGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUAxxxxxxxxxxACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCUACCCCCCCCCCUCCCCCAUUCU\
) } def
/len { sequence length } bind def

/coor [
[93.38146210 504.46157837]
[79.35951996 498.90856934]
[67.15956116 490.04223633]
[57.54849243 478.41992188]
[51.13046646 464.77221680]
[48.30892944 449.95703125]
[49.26124573 434.90567017]
[53.92755127 420.56423950]
[62.01451492 407.83428955]
[73.01379395 397.51602173]
[86.23394775 390.25802612]
[100.84396362 386.51660156]
[100.84396362 371.51660156]
[100.84396362 356.51660156]
[100.84396362 341.51660156]
[100.84396362 326.51660156]
[100.84396362 311.51660156]
[100.84396362 296.51660156]
[100.84396362 281.51660156]
[100.84396362 266.51660156]
[100.84396362 251.51660156]
[100.84396362 236.51660156]
[84.03105164 228.04776001]
[73.74222565 212.18624878]
[72.85604095 193.21974182]
[81.69607544 176.32460022]
[97.92024231 166.15304565]
[96.68962860 151.20361328]
[95.45901489 136.25418091]
[94.22840118 121.30474091]
[84.79795074 116.00315857]
[79.01946259 106.85715485]
[64.02658081 106.39523315]
[49.99468231 113.70388031]
[37.51171875 105.57831573]
[22.51883125 105.11638641]
[9.89281940 115.01403046]
[-5.68379688 111.17364502]
[-12.26197052 96.54124451]
[-4.79548979 82.34155273]
[10.98800087 79.46736145]
[22.98075676 90.12350464]
[37.97364426 90.58542633]
[50.93315125 83.24373627]
[64.48850250 91.40234375]
[79.48139191 91.86427307]
[82.57643127 86.44924927]
[87.06269836 82.11621857]
[92.58196259 79.21115875]
[98.69353485 77.96601105]
[102.94638062 63.58153152]
[107.19922638 49.19705200]
[109.80394745 34.42493439]
[110.72736359 19.45338631]
[111.65077972 4.48183584]
[112.42044067 -10.49840546]
[113.03626251 -25.48575783]
[113.65208435 -40.47311020]
[110.88607025 -46.58799362]
[111.56720734 -52.30847549]
[114.61341858 -56.05944824]
[115.84403229 -71.00888062]
[113.41880798 -79.88098145]
[117.25647736 -86.25157928]
[118.79376984 -101.17259216]
[120.33106232 -116.09360504]
[112.79711151 -126.61231995]
[114.42324066 -139.04321289]
[123.79001617 -146.75849915]
[125.63333893 -161.64480591]
[111.92160034 -168.03570557]
[100.85724640 -178.35244751]
[93.52423096 -191.58430481]
[90.64099121 -206.43496704]
[92.48997498 -221.44950867]
[98.89005280 -235.15695190]
[109.21421051 -246.21440125]
[122.45098114 -253.53854370]
[137.30357361 -256.41183472]
[152.31686401 -254.55278015]
[166.02001953 -248.14352417]
[177.07054138 -237.81196594]
[184.38581848 -224.57028198]
[187.24916077 -209.71577454]
[185.38005066 -194.70372009]
[178.96160889 -181.00486755]
[168.62265015 -169.96127319]
[155.37606812 -162.65487671]
[140.51963806 -159.80148315]
[138.67631531 -144.91517639]
[146.39208984 -129.18267822]
[135.25207520 -114.55631256]
[133.71478271 -99.63529968]
[132.17749023 -84.71428680]
[130.79347229 -69.77826691]
[129.56285095 -54.82883453]
[128.63943481 -39.85728455]
[128.02362061 -24.86993217]
[127.40779114 -9.88257980]
[130.29336548 -3.02797294]
[126.62232971 5.40524960]
[125.69891357 20.37679863]
[124.77549744 35.34835052]
[134.48837280 23.91768074]
[148.35285950 18.19264412]
[163.30088806 19.44012642]
[176.02462769 27.38407707]
[183.70845032 40.26658249]
[184.65200806 55.23687744]
[178.64648438 68.98219299]
[167.02084351 78.46083832]
[152.34773254 81.57527924]
[137.87414551 77.63633728]
[126.80294037 67.51564789]
[121.58370972 53.44989777]
[117.33086395 67.83438110]
[113.07801819 82.21886444]
[121.95645905 102.26214600]
[109.17783356 120.07412720]
[110.40844727 135.02355957]
[111.63906097 149.97299194]
[112.86967468 164.92243958]
[123.79991150 168.14860535]
[133.19007874 174.55912781]
[140.14273071 183.52146912]
[143.99952698 194.16020203]
[144.40347290 205.44248962]
[141.33195496 216.27838135]
[135.09736633 225.62605286]
[126.31530762 232.59205627]
[115.84396362 236.51660156]
[115.84396362 251.51660156]
[115.84396362 266.51660156]
[115.84396362 281.51660156]
[115.84396362 296.51660156]
[115.84396362 311.51660156]
[115.84396362 326.51660156]
[115.84396362 341.51660156]
[115.84396362 356.51660156]
[115.84396362 371.51660156]
[115.84396362 386.51660156]
[130.45397949 390.25802612]
[143.67413330 397.51602173]
[154.67341614 407.83428955]
[162.76037598 420.56423950]
[167.42668152 434.90567017]
[168.37899780 449.95703125]
[165.55746460 464.77221680]
[159.13943481 478.41992188]
[149.52836609 490.04223633]
[137.32839966 498.90856934]
[123.30646515 504.46157837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 122]
[28 121]
[29 120]
[30 119]
[32 46]
[33 45]
[35 43]
[36 42]
[50 117]
[51 116]
[52 115]
[53 103]
[54 102]
[55 101]
[56 99]
[57 98]
[58 97]
[61 96]
[62 95]
[64 94]
[65 93]
[66 92]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
