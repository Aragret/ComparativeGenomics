%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACCUCUAGGGGGGGGGGGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUxxxxxxxxxxUACAUUACUGCCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCCCCCCCCCCCACCUGUAG\
) } def
/len { sequence length } bind def

/coor [
[99.52630615 513.14880371]
[86.65303040 505.24591064]
[76.52873993 494.03540039]
[69.97415161 480.42605591]
[67.52063751 465.52111816]
[69.36707306 450.52890015]
[75.36378479 436.66467285]
[85.02464294 425.05242920]
[97.56649017 416.63348389]
[111.97261810 412.09030151]
[111.66056061 397.09356689]
[111.34850311 382.09680176]
[111.03644562 367.10006714]
[110.72438812 352.10330200]
[110.41233063 337.10653687]
[110.10028076 322.10980225]
[109.78822327 307.11303711]
[109.47616577 292.11627197]
[109.16410828 277.11953735]
[101.16370392 264.55596924]
[108.61223602 250.59782410]
[100.08221436 241.96382141]
[99.73696136 229.42988586]
[108.31024933 219.73696899]
[108.31024933 204.73696899]
[106.59755707 189.83506775]
[103.19458008 175.22616577]
[99.79160309 160.61727905]
[96.38862610 146.00839233]
[92.82423401 142.74179077]
[91.31422424 137.17840576]
[93.16139221 130.72120667]
[90.36906433 115.98339844]
[79.17330170 106.00067902]
[64.21305084 104.90936279]
[49.25279999 103.81805420]
[37.45941162 114.33905792]
[21.68572998 113.35594940]
[11.29000187 101.45198059]
[12.43982792 85.68957520]
[24.45303726 75.42028046]
[40.20240402 76.73669434]
[50.34411240 88.85780334]
[65.30435944 89.94911957]
[80.26461029 91.04042816]
[91.03541565 80.60061646]
[90.41143799 65.61360168]
[89.78746033 50.62658310]
[81.48279572 37.16021729]
[88.68395996 24.12210083]
[88.05998230 9.13508415]
[87.43600464 -5.85193205]
[86.81202698 -20.83894920]
[83.30941772 -29.34679985]
[86.33425140 -36.14356613]
[86.02219391 -51.14031982]
[71.13639069 -53.24007416]
[56.78021622 -57.70062256]
[43.32553482 -64.40641785]
[31.12085533 -73.18377686]
[20.48230743 -83.80532837]
[11.68545341 -95.99596405]
[4.95815420 -109.43991089]
[0.47466362 -123.78893280]
[-1.64888597 -138.67135620]
[-1.35748923 -153.70170593]
[1.34130585 -168.49064636]
[6.37759399 -182.65510559]
[13.62092400 -195.82820129]
[22.88367462 -207.66870117]
[33.92591858 -217.86993408]
[46.46163559 -226.16763306]
[60.16612244 -232.34689331]
[74.68439484 -236.24765015]
[89.64040375 -237.76885986]
[104.64674377 -236.87110901]
[119.31472015 -233.57766724]
[133.26438904 -227.97384644]
[146.13442993 -220.20478821]
[157.59147644 -210.47174072]
[167.33874512 -199.02679443]
[175.12379456 -186.16641235]
[180.74493408 -172.22372437]
[184.05659485 -157.55984497]
[184.97297668 -142.55464172]
[183.47035217 -127.59675598]
[179.58764648 -113.07364655]
[173.42541504 -99.36148834]
[165.14329529 -86.81547546]
[154.95579529 -75.76056671]
[143.12680054 -66.48310852]
[129.96270752 -59.22342300]
[115.80451965 -54.16954041]
[101.01894379 -51.45237732]
[101.33100128 -36.45562363]
[101.79904938 -21.46292496]
[102.42302704 -6.47590971]
[103.04699707 8.51110649]
[103.67097473 23.49812317]
[111.93101501 35.89251709]
[104.77448273 50.00260544]
[105.39846039 64.98962402]
[106.02243805 79.97663879]
[112.82705688 84.94023895]
[116.78170013 91.85314178]
[117.51422882 99.32350159]
[115.26181793 106.00279999]
[110.77032471 110.82820129]
[105.10687256 113.19107819]
[107.89919281 127.92888641]
[110.99752045 142.60540771]
[114.40049744 157.21429443]
[117.80347443 171.82319641]
[121.20645142 186.43208313]
[127.26773071 172.71127319]
[138.93072510 163.27864075]
[153.61570740 160.22062683]
[168.07447815 164.21362305]
[179.10888672 174.37440491]
[184.27824402 188.45552063]
[182.43911743 203.34234619]
[173.99830627 215.74206543]
[160.82286072 222.91195679]
[145.82704163 223.26611328]
[132.32778931 216.72619629]
[123.31024933 204.73696899]
[123.31024933 219.73696899]
[132.89297485 235.42617798]
[123.60899353 250.28576660]
[131.63171387 263.92199707]
[124.16085815 276.80746460]
[124.47291565 291.80422974]
[124.78497314 306.80099487]
[125.09703064 321.79772949]
[125.40908813 336.79449463]
[125.72114563 351.79122925]
[126.03320312 366.78799438]
[126.34525299 381.78475952]
[126.65731049 396.78149414]
[126.96936798 411.77825928]
[141.55200195 415.71820068]
[154.43321228 423.60815430]
[164.56877136 434.80847168]
[171.13702393 448.41122437]
[173.60551453 463.31369019]
[171.77413940 478.30776978]
[165.79135132 492.17800903]
[156.14216614 503.79995728]
[143.60877991 512.23150635]
[129.20722961 516.78912354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[24 127]
[25 126]
[26 114]
[27 113]
[28 112]
[29 111]
[32 110]
[33 109]
[34 45]
[35 44]
[36 43]
[46 103]
[47 102]
[48 101]
[50 99]
[51 98]
[52 97]
[53 96]
[55 95]
[56 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
