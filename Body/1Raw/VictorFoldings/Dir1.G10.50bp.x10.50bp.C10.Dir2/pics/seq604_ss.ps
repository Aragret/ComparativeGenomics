%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUACUACUAAUGGGGGGGGGGCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCUGCxxxxxxxxxxAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCCCCCCCCCCCUUACUACUAAU\
) } def
/len { sequence length } bind def

/coor [
[1.66913128 253.80513000]
[-6.17427969 248.49916077]
[-13.73199177 242.79359436]
[-20.98366928 236.70379639]
[-27.90979767 230.24615479]
[-34.49174118 223.43803406]
[-40.71178436 216.29777527]
[-46.55319595 208.84455872]
[-52.00025558 201.09846497]
[-57.03830719 193.08032227]
[-61.65378952 184.81173706]
[-65.83428955 176.31491089]
[-79.70679474 182.02047729]
[-93.57929993 187.72605896]
[-107.45181274 193.43162537]
[-121.32431793 199.13719177]
[-131.14413452 211.54209900]
[-145.85780334 209.22747803]
[-159.73030090 214.93304443]
[-173.60281372 220.63861084]
[-187.47532654 226.34419250]
[-201.34782410 232.04975891]
[-201.35086060 247.25068665]
[-207.17541504 261.29144287]
[-217.93330383 272.03091431]
[-231.98402405 277.83142090]
[-247.18495178 277.80838013]
[-261.21801758 271.96536255]
[-271.94332886 261.19335938]
[-277.72534180 247.13500977]
[-277.68231201 231.93414307]
[-271.82083130 217.90875244]
[-261.03472900 207.19761658]
[-246.96879578 201.43411255]
[-231.76799011 201.49713135]
[-217.75033569 207.37705994]
[-207.05339050 218.17724609]
[-193.18089294 212.47167969]
[-179.30838013 206.76611328]
[-165.43586731 201.06054688]
[-151.56336975 195.35496521]
[-142.73580933 183.35816956]
[-127.02989197 185.26469421]
[-113.15737915 179.55911255]
[-99.28487396 173.85354614]
[-85.41236877 168.14797974]
[-71.53985596 162.44241333]
[-79.94080353 130.76173401]
[-82.54130554 98.08944702]
[-79.25752258 65.47874451]
[-70.19532776 33.98084259]
[-55.64682388 4.61109447]
[-36.08100128 -21.68376350]
[-12.12856388 -44.05611038]
[-20.84793091 -56.26154327]
[-29.56729698 -68.46697998]
[-38.28666306 -80.67241669]
[-53.43993378 -78.51905823]
[-67.85430908 -83.66535950]
[-78.21746826 -94.92873383]
[-82.14803314 -109.72093201]
[-78.74279022 -124.64282990]
[-68.78424072 -136.26547241]
[-54.56077957 -141.91806030]
[-39.34086227 -140.30168152]
[-26.62191010 -131.78776550]
[-19.32664680 -118.33274078]
[-19.13146782 -103.02847290]
[-26.08122635 -89.39178467]
[-17.36186028 -77.18634796]
[-8.64249516 -64.98091125]
[0.07687128 -52.77547455]
[10.46269512 -59.08503342]
[21.24529457 -64.68962860]
[32.37688446 -69.56441498]
[43.80813980 -73.68779755]
[55.48840332 -77.04150391]
[67.36591339 -79.61067200]
[79.38804626 -81.38391113]
[91.50151062 -82.35337067]
[103.65263367 -82.51475525]
[115.78757477 -81.86734009]
[127.85255432 -80.41400146]
[139.79409790 -78.16117859]
[151.55931091 -75.11885834]
[163.09603882 -71.30051422]
[174.35317993 -66.72307587]
[185.28080750 -61.40681458]
[195.83053589 -55.37530136]
[205.95561218 -48.65526199]
[215.15632629 -60.50206375]
[224.35704041 -72.34886932]
[223.79057312 -88.38191986]
[236.06578064 -98.71141815]
[251.76620483 -95.41346741]
[258.84780884 -81.01795959]
[251.87818909 -66.56790924]
[236.20384216 -63.14815140]
[227.00312805 -51.30134583]
[217.80241394 -39.45454407]
[224.87545776 -33.15816498]
[231.61248779 -26.50347710]
[237.99537659 -19.50838852]
[244.00692749 -12.19172001]
[249.63098145 -4.57316208]
[254.85240173 3.32678676]
[259.65713501 11.48686886]
[264.03225708 19.88512611]
[267.96600342 28.49895859]
[271.44778442 37.30519104]
[274.46820068 46.28012466]
[277.01916504 55.39961243]
[279.09378052 64.63911438]
[280.68649292 73.97376251]
[281.79302979 83.37844086]
[282.41036987 92.82785034]
[282.53686523 102.29656219]
[282.17218018 111.75908661]
[281.31729126 121.18997192]
[279.97451782 130.56384277]
[278.14746094 139.85546875]
[275.84103394 149.03984070]
[273.06146240 158.09226990]
[269.81619263 166.98837280]
[266.11395264 175.70422363]
[261.96475220 184.21635437]
[257.37973022 192.50189209]
[252.37121582 200.53849792]
[246.95269775 208.30458069]
[241.13874817 215.77923584]
[234.94500732 222.94235229]
[228.38816833 229.77464294]
[221.48583984 236.25772095]
[214.25662231 242.37416077]
[206.71995544 248.10748291]
[198.89611816 253.44229126]
[190.80616760 258.36419678]
[182.47187805 262.85995483]
[173.91566467 266.91751099]
[165.16055298 270.52587891]
[156.23010254 273.67541504]
[147.14834595 276.35760498]
[137.93972778 278.56527710]
[128.62901306 280.29241943]
[119.24126434 281.53442383]
[109.80174255 282.28796387]
[100.33584595 282.55099487]
[90.86904144 282.32278442]
[81.42681122 281.60400391]
[72.03455353 280.39654541]
[62.71754837 278.70364380]
[53.50086594 276.52990723]
[44.40930557 273.88113403]
[35.46733093 270.76449585]
[26.69900131 267.18835449]
[18.12791634 263.16232300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 47]
[13 46]
[14 45]
[15 44]
[16 43]
[18 41]
[19 40]
[20 39]
[21 38]
[22 37]
[54 72]
[55 71]
[56 70]
[57 69]
[90 100]
[91 99]
[92 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
