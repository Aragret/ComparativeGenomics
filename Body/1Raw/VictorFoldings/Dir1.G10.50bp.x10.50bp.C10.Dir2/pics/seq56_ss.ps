%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGCAUUUGGGGGGGGGGGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACGCUGGAGxxxxxxxxxxCCAGGCAACCUUCUAGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCCCCCCCCCCCAUGCAUUUG\
) } def
/len { sequence length } bind def

/coor [
[83.42964935 479.43203735]
[70.21142578 472.15597534]
[59.32746506 461.70599365]
[51.51984787 448.79464722]
[47.32090759 434.30218506]
[47.01693726 419.21676636]
[50.62866211 404.56692505]
[57.90983200 391.35150146]
[68.36399841 380.47158813]
[81.27838135 372.66894531]
[95.77246094 368.47561646]
[95.46448517 353.47875977]
[95.15650177 338.48193359]
[94.84852600 323.48507690]
[94.54055023 308.48825073]
[94.23257446 293.49142456]
[93.92459106 278.49456787]
[93.61661530 263.49774170]
[93.30863953 248.50090027]
[93.00066376 233.50405884]
[92.69268036 218.50721741]
[84.69570160 205.94149780]
[92.14802551 191.98536682]
[79.74765778 186.18476868]
[71.02463531 175.54783630]
[67.73275757 162.12297058]
[70.57278442 148.52757263]
[79.04412079 137.43782043]
[91.53202820 131.06184387]
[91.53202820 116.06184387]
[83.08553314 104.08694458]
[86.37081146 90.44469452]
[79.27440643 77.22951508]
[72.17800903 64.01432800]
[65.08160400 50.79914856]
[57.98519897 37.58396530]
[50.88879395 24.36878204]
[43.79239273 11.15359974]
[36.69598770 -2.06158304]
[29.59958649 -15.27676582]
[22.73981857 -21.40370560]
[22.49631310 -28.83693504]
[15.67273712 -42.19503403]
[8.84916210 -55.55313492]
[-6.97620487 -44.98247528]
[-31.41167259 -49.47481918]
[-43.74295807 -58.01527786]
[-56.07424164 -66.55574036]
[-68.40552521 -75.09619904]
[-80.73680878 -83.63665771]
[-93.06809235 -92.17711639]
[-109.53178406 -96.22473907]
[-110.19994354 -113.16551208]
[-94.10618591 -118.49723816]
[-84.52763367 -104.50839996]
[-72.19635010 -95.96794128]
[-59.86506653 -87.42748260]
[-47.53378296 -78.88702393]
[-35.20249557 -70.34656525]
[-22.87121391 -61.80610275]
[-16.30039787 -65.42195892]
[-27.23912621 -75.68569183]
[-20.85796738 -89.26069641]
[-5.97548485 -87.38673401]
[-3.15876627 -72.65365601]
[3.41204953 -76.26950836]
[2.79622412 -91.25686646]
[2.18039870 -106.24421692]
[1.56457317 -121.23156738]
[-12.46765900 -127.23650360]
[-22.49835014 -138.74076843]
[-26.53590012 -153.46017456]
[-23.77864838 -168.47216797]
[-14.77405167 -180.79614258]
[-1.30997801 -187.98512268]
[13.94027138 -188.61174011]
[27.94874763 -182.55160522]
[37.93405533 -171.00793457]
[41.91361237 -156.27273560]
[39.09726334 -141.27169800]
[30.04420662 -128.98330688]
[16.55192566 -121.84739685]
[17.16775131 -106.86003876]
[17.78357697 -91.87268829]
[18.39940262 -76.88533783]
[22.20726204 -62.37670898]
[29.03083611 -49.01861191]
[35.85441208 -35.66051102]
[42.81476974 -22.37316895]
[49.91117096 -9.15798664]
[57.00757599 4.05719662]
[64.10398102 17.27237892]
[71.20037842 30.48756218]
[78.29678345 43.70274353]
[85.39318848 56.91792679]
[92.48959351 70.13311005]
[99.58599854 83.34829712]
[113.14788818 89.75727081]
[127.86341095 86.84980011]
[142.57893372 83.94232178]
[157.29446411 81.03485107]
[172.00997925 78.12738037]
[186.72550964 75.21990967]
[190.06439209 60.36151886]
[199.16326904 48.14962769]
[212.44570923 40.70001602]
[227.61044312 39.30337906]
[242.03009033 44.20169067]
[253.20637512 54.54629135]
[259.20291138 68.54490662]
[258.98080444 83.77220917]
[252.57847595 97.58995819]
[241.10520935 107.60415649]
[226.54881287 112.07978058]
[211.43127441 110.24140167]
[198.37178040 102.40753174]
[189.63298035 89.93543243]
[174.91744995 92.84290314]
[160.20193481 95.75037384]
[145.48640442 98.65784454]
[130.77088928 101.56532288]
[116.05536652 104.47279358]
[106.53202820 116.06184387]
[106.53202820 131.06184387]
[120.91519165 139.15812683]
[129.22088623 153.31288147]
[129.27273560 169.63075256]
[121.15093994 183.67579651]
[107.14486694 191.67739868]
[115.16387939 205.31579590]
[107.68952179 218.19924927]
[107.99749756 233.19609070]
[108.30547333 248.19291687]
[108.61345673 263.18975830]
[108.92143250 278.18658447]
[109.22940826 293.18344116]
[109.53738403 308.18026733]
[109.84536743 323.17712402]
[110.15334320 338.17395020]
[110.46131897 353.17077637]
[110.76929474 368.16763306]
[125.42330933 371.76239014]
[138.64714050 379.02822876]
[149.53916931 389.46978760]
[157.35676575 402.37512207]
[161.56689453 416.86434937]
[161.88250732 431.94952393]
[158.28210449 446.60214233]
[151.01113892 459.82318115]
[140.56538391 470.71118164]
[127.65702057 478.52377319]
[113.16619110 482.72830200]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 129]
[29 124]
[30 123]
[32 97]
[33 96]
[34 95]
[35 94]
[36 93]
[37 92]
[38 91]
[39 90]
[40 89]
[42 88]
[43 87]
[44 86]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[66 85]
[67 84]
[68 83]
[69 82]
[98 122]
[99 121]
[100 120]
[101 119]
[102 118]
[103 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
