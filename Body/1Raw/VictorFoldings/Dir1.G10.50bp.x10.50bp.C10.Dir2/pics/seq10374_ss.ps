%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGCCUCGCGGGGGGGGGGUAACCUCGCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCxxxxxxxxxxACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCCCCCCCCCCCAAGCCUCAC\
) } def
/len { sequence length } bind def

/coor [
[69.77474213 479.53836060]
[67.09666443 464.73974609]
[67.02922058 449.70089722]
[69.57445526 434.87887573]
[74.65501404 420.72402954]
[82.11651611 407.66659546]
[91.73220825 396.10330200]
[103.20988464 386.38558960]
[116.20074463 378.80874634]
[111.00533295 364.73721313]
[105.80991364 350.66571045]
[99.60450745 337.00946045]
[92.42199707 323.84088135]
[85.23949432 310.67230225]
[70.96403503 306.06674194]
[57.43984222 312.55490112]
[43.91565323 319.04306030]
[30.39146233 325.53121948]
[16.86727142 332.01937866]
[3.34308147 338.50753784]
[-10.18110847 344.99572754]
[-23.70529747 351.48388672]
[-37.22948837 357.97204590]
[-40.93516541 373.16421509]
[-53.56974411 382.37841797]
[-69.16756439 381.26397705]
[-80.36381531 370.34710693]
[-81.87196350 354.78240967]
[-72.97991180 341.91906738]
[-57.88621521 337.83078003]
[-43.71765518 344.44784546]
[-30.19346428 337.95968628]
[-16.66927338 331.47152710]
[-3.14508343 324.98336792]
[10.37910652 318.49520874]
[23.90329552 312.00701904]
[37.42748642 305.51885986]
[50.95167542 299.03070068]
[64.47586823 292.54254150]
[72.38751221 288.54568481]
[80.01808167 288.25692749]
[80.64205933 273.26989746]
[81.26603699 258.28286743]
[81.89001465 243.29586792]
[82.51399231 228.30885315]
[70.53414917 223.11135864]
[61.02391052 214.11558533]
[55.14014435 202.38572693]
[53.60882950 189.32028198]
[56.63554382 176.48542786]
[63.87817383 165.42716980]
[74.48543549 157.48518372]
[87.19688416 153.63053894]
[88.44376373 138.68244934]
[89.69063568 123.73435974]
[90.93750763 108.78627014]
[87.23134613 94.25133514]
[78.97905731 81.72537231]
[70.72676849 69.19940948]
[55.83180618 62.33850479]
[54.59568787 45.98600769]
[68.29003143 36.96397400]
[82.82726288 44.55349731]
[83.25273132 60.94712448]
[91.50502014 73.47308350]
[99.75730896 85.99904633]
[114.12549591 81.69145966]
[114.12549591 66.69145966]
[114.12549591 51.69146347]
[100.35162354 45.11549759]
[90.80169678 33.20912933]
[87.37186432 18.33637047]
[90.74310303 3.45021987]
[100.24607086 -8.49366570]
[113.99393463 -15.12381935]
[129.25704956 -15.12381935]
[143.00491333 -8.49366570]
[152.50788879 3.45021987]
[155.87913513 18.33637047]
[152.44929504 33.20912933]
[142.89936829 45.11549759]
[129.12548828 51.69146347]
[129.12548828 66.69145966]
[129.12548828 81.69145966]
[143.30204773 86.59301758]
[152.56700134 74.79637146]
[161.70874023 62.90399551]
[170.72627258 50.91716003]
[169.91340637 34.89471436]
[182.02839661 24.37774467]
[197.77764893 27.43397141]
[205.07968140 41.71892166]
[198.33302307 56.27439880]
[182.71310425 59.93469238]
[173.69557190 71.92152405]
[172.17796326 79.20455170]
[164.36364746 84.06132507]
[155.09869385 95.85796356]
[105.88559723 110.03314972]
[104.63872528 124.98123169]
[103.39184570 139.92932129]
[102.14497375 154.87741089]
[117.06521606 163.26516724]
[126.81355286 177.26715088]
[129.48435974 194.06227112]
[124.59210205 210.29202271]
[113.15882111 222.73207092]
[97.50100708 228.93283081]
[96.87702942 243.91984558]
[96.25305176 258.90686035]
[95.62907410 273.89385986]
[95.00509644 288.88088989]
[98.40807343 303.48977661]
[105.59058380 316.65835571]
[112.77309418 329.82693481]
[117.38423157 315.55328369]
[129.99760437 307.43524170]
[144.89923096 309.15032959]
[155.33851624 319.92163086]
[156.58638000 334.86965942]
[148.07751465 347.22274780]
[133.66653442 351.38488770]
[119.88143921 345.47027588]
[125.07685089 359.54180908]
[130.27226257 373.61331177]
[145.06997681 370.93020630]
[160.10877991 370.85763550]
[174.93168640 373.39782715]
[189.08824158 378.47357178]
[202.14823914 385.93063354]
[213.71478271 395.54238892]
[223.43641663 407.01675415]
[231.01768494 420.00506592]
[236.22819519 434.11254883]
[238.90962219 448.91055298]
[238.98048401 463.94937134]
[236.43861389 478.77200317]
[231.36126709 492.92797852]
[223.90272522 505.98712158]
[214.28965759 517.55261230]
[202.81417847 527.27288818]
[189.82504272 534.85272217]
[175.71694946 540.06164551]
[160.91864014 542.74139404]
[145.87980652 542.81054688]
[131.05747986 540.26696777]
[116.90207672 535.18804932]
[103.84378052 527.72802734]
[92.27940369 518.11364746]
[82.56037903 506.63705444]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 125]
[10 124]
[11 123]
[12 115]
[13 114]
[14 113]
[15 39]
[16 38]
[17 37]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 31]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[53 102]
[54 101]
[55 100]
[56 99]
[57 66]
[58 65]
[59 64]
[67 84]
[68 83]
[69 82]
[85 98]
[86 97]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
