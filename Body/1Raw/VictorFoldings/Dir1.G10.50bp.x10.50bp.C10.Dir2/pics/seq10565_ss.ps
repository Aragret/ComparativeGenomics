%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAACAUGGGGGGGGGGGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCxxxxxxxxxxCCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACCCCCCCCCCCUAACAACAU\
) } def
/len { sequence length } bind def

/coor [
[68.20313263 371.99819946]
[54.35719299 365.98217773]
[42.64853287 356.45275879]
[33.94600677 344.11709595]
[28.89540672 329.89056396]
[27.87151527 314.82888794]
[30.95031357 300.04971313]
[37.90333557 286.64978027]
[48.21461868 275.62344360]
[61.11899948 267.78894043]
[75.65888977 263.72763062]
[75.65888977 248.72763062]
[75.65888977 233.72763062]
[75.65888977 218.72763062]
[75.65888977 203.72763062]
[75.65888977 188.72763062]
[75.65888977 173.72763062]
[75.65888977 158.72763062]
[75.65888977 143.72763062]
[75.65888977 128.72763062]
[86.44363403 93.69564819]
[78.19134521 81.16968536]
[69.93905640 68.64372253]
[61.68676376 56.11776352]
[49.19493866 52.74017334]
[42.58766174 42.08358383]
[44.96076202 30.18082237]
[37.69300079 24.53887939]
[36.93986130 17.13763428]
[29.21577835 4.27923203]
[12.92222404 -4.23545980]
[13.22891617 -21.75418854]
[-0.67019749 -29.31231117]
[-0.90122110 -44.20512390]
[-8.89113712 -56.90005493]
[-16.88105392 -69.59498596]
[-24.87096977 -82.28991699]
[-32.86088562 -94.98484039]
[-46.06189728 -82.34933472]
[-69.22543335 -81.22354889]
[-83.12799072 -86.85550690]
[-97.03054810 -92.48746490]
[-110.93309784 -98.11942291]
[-124.83565521 -103.75138092]
[-140.11029053 -98.84577179]
[-153.38891602 -107.84899902]
[-154.48527527 -123.85454559]
[-142.55836487 -134.58433533]
[-126.75747681 -131.80738831]
[-119.20369720 -117.65393829]
[-105.30114746 -112.02198029]
[-91.39859009 -106.39002228]
[-77.49603271 -100.75806427]
[-63.59347534 -95.12610626]
[-57.79280472 -99.88028717]
[-46.19146347 -109.38864899]
[-40.39079285 -114.14282227]
[-43.18311691 -128.88063049]
[-45.97544098 -143.61843872]
[-61.02656555 -144.57475281]
[-75.36675262 -149.24485779]
[-88.09455872 -157.33520508]
[-98.40991211 -168.33721924]
[-105.66438293 -181.55929565]
[-109.40193939 -196.17030334]
[-109.38764191 -211.25177002]
[-105.62239075 -225.85566711]
[-98.34286499 -239.06396484]
[-88.00666809 -250.04640198]
[-75.26354218 -258.11260986]
[-60.91453171 -262.75552368]
[-45.86162186 -263.68328857]
[-31.05105782 -260.83761597]
[-17.41383934 -254.39733887]
[-5.80721378 -244.76731873]
[3.03921437 -232.55293274]
[8.56935215 -218.52194214]
[10.43557072 -203.55638123]
[8.52055740 -188.59698486]
[2.94469285 -174.58412170]
[-5.94152069 -162.39863586]
[-17.57948875 -152.80651855]
[-31.23763657 -146.41076660]
[-28.44531250 -131.67295837]
[-25.65298843 -116.93515015]
[-20.16595650 -102.97476196]
[-12.17604065 -90.27983093]
[-4.18612385 -77.58489990]
[3.80379224 -64.88996887]
[11.79370880 -52.19504166]
[25.12133026 -45.54494476]
[25.92384529 -29.74410629]
[37.68199539 -26.73524857]
[44.43217468 -16.16860008]
[42.07418060 -3.44485307]
[49.79826736 9.41354942]
[57.65569305 22.19090652]
[73.58345795 29.49201584]
[74.21273041 47.86547470]
[82.46501923 60.39143372]
[90.71730804 72.91739655]
[98.96959686 85.44335938]
[112.13817596 92.62586975]
[127.13736725 92.78190613]
[142.13655090 92.93794250]
[157.13574219 93.09397888]
[171.01565552 85.50064850]
[183.66175842 93.36992645]
[198.66093445 93.52596283]
[213.66012573 93.68199921]
[224.77430725 82.44586945]
[240.57859802 82.44317627]
[251.69659424 93.67552948]
[251.53218079 109.47895813]
[240.18292236 120.47758484]
[224.38211060 120.14610291]
[213.50408936 108.68119049]
[198.50489807 108.52515411]
[183.50570679 108.36911774]
[170.69863892 115.97360229]
[156.97970581 108.09316254]
[141.98051453 107.93712616]
[126.98133087 107.78108978]
[111.98213959 107.62505341]
[106.65132904 112.90070343]
[121.11979675 116.85839844]
[124.92646027 131.36734009]
[114.26460266 141.91839600]
[99.79621887 137.96038818]
[95.98970032 123.45198822]
[90.65888977 128.72763062]
[90.65888977 143.72763062]
[90.65888977 158.72763062]
[90.65888977 173.72763062]
[90.65888977 188.72763062]
[90.65888977 203.72763062]
[90.65888977 218.72763062]
[90.65888977 233.72763062]
[90.65888977 248.72763062]
[90.65888977 263.72763062]
[105.19877625 267.78894043]
[118.10315704 275.62344360]
[128.41444397 286.64978027]
[135.36746216 300.04971313]
[138.44625854 314.82888794]
[137.42236328 329.89056396]
[132.37176514 344.11709595]
[123.66924286 356.45275879]
[111.96057892 365.98217773]
[98.11463928 371.99819946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 102]
[22 101]
[23 100]
[24 99]
[27 97]
[29 96]
[30 95]
[32 92]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[40 54]
[41 53]
[42 52]
[43 51]
[44 50]
[57 85]
[58 84]
[59 83]
[103 124]
[104 123]
[105 122]
[106 121]
[108 119]
[109 118]
[110 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
