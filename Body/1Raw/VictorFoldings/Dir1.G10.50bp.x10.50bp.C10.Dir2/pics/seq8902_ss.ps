%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAGGCCUAGGGGGGGGGGCUAACCAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAxxxxxxxxxxCAUCUCACUUCUAGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCCCCCCCCCCCUACUAUGCCUA\
) } def
/len { sequence length } bind def

/coor [
[90.90154266 533.88909912]
[78.56843567 525.23797607]
[68.46998596 514.05902100]
[61.11273193 500.91296387]
[56.86571121 486.45922852]
[55.94195557 471.42279053]
[58.38779068 456.55789185]
[64.08054352 442.61010742]
[72.73466492 430.27911377]
[83.91606903 420.18334961]
[97.06389618 412.82928467]
[111.51866913 408.58578491]
[110.59525299 393.61422729]
[109.67183685 378.64266968]
[108.74842834 363.67111206]
[107.82501221 348.69958496]
[106.90159607 333.72802734]
[105.97818756 318.75646973]
[105.05477142 303.78491211]
[104.13135529 288.81338501]
[103.20794678 273.84182739]
[88.33778381 272.02014160]
[74.05178833 267.49572754]
[60.83694077 260.42135620]
[49.14398193 251.03659058]
[39.37206268 239.65995789]
[31.85509300 226.67791748]
[26.85034561 212.53189087]
[24.52964973 197.70314026]
[24.97348976 182.69647217]
[28.16821289 168.02299500]
[34.00645065 154.18276978]
[42.29072189 141.64772034]
[52.74010849 130.84556580]
[64.99979401 122.14519501]
[78.65309906 115.84412384]
[93.23564148 112.15827179]
[84.07370758 100.28144836]
[69.82701874 95.58764648]
[55.58032608 90.89384460]
[41.33363342 86.20004272]
[29.41569519 95.99628448]
[14.09079552 97.77138519]
[0.24905232 90.95891571]
[-7.69268370 77.73271942]
[-7.20023346 62.31321716]
[1.56926405 49.62071991]
[15.81749344 43.70535660]
[30.99789810 46.45470047]
[42.26646423 56.99144745]
[46.02743149 71.95335388]
[60.27412415 76.64715576]
[74.52082062 81.34095001]
[88.76750946 86.03475189]
[92.58798981 88.62480927]
[95.75638580 91.80126190]
[100.30368042 77.50712585]
[104.85096741 63.21299744]
[109.39826202 48.91886902]
[113.94554901 34.62473679]
[118.49283600 20.33060837]
[123.04013062 6.03647852]
[127.58741760 -8.25765133]
[119.98221588 -8.91087437]
[112.18337250 -12.71197414]
[105.33538818 -19.72187614]
[100.57889557 -29.61789894]
[98.92936707 -41.70569992]
[99.54519653 -56.69305420]
[100.16101837 -71.68040466]
[100.77684784 -86.66776276]
[87.28456879 -93.80366516]
[78.23150635 -106.09207153]
[75.41516113 -121.09310150]
[79.39471436 -135.82829285]
[89.38002777 -147.37196350]
[103.38850403 -153.43211365]
[118.63874817 -152.80548096]
[132.10282898 -145.61650085]
[141.10742188 -133.29254150]
[143.86466980 -118.28053284]
[139.82711792 -103.56112671]
[129.79643250 -92.05686951]
[115.76419830 -86.05193329]
[115.14837646 -71.06458282]
[114.53254700 -56.07722855]
[113.91672516 -41.08987427]
[120.63044739 -37.74683762]
[127.31674957 -51.17417526]
[140.74397278 -44.48765564]
[134.05789185 -31.06076241]
[140.77162170 -27.71772385]
[152.36067200 -37.24106216]
[163.94972229 -46.76440048]
[175.53877258 -56.28773499]
[178.52577209 -72.05027008]
[192.77848816 -79.41500092]
[207.36347961 -72.73235321]
[211.09236145 -57.12866592]
[201.10467529 -44.57376480]
[185.06210327 -44.69868851]
[173.47305298 -35.17535019]
[161.88400269 -25.65201378]
[150.29495239 -16.12867546]
[141.88154602 -3.71036148]
[137.33425903 10.58376884]
[132.78697205 24.87789917]
[128.23968506 39.17202759]
[123.69239044 53.46615982]
[119.14509583 67.76029205]
[114.59780884 82.05442047]
[110.05052185 96.34854889]
[108.20719147 111.23485565]
[123.13216400 113.10074615]
[137.45631409 117.67623138]
[150.69224548 124.80408478]
[162.38989258 134.24026489]
[172.15177917 145.66226196]
[179.64656067 158.68013000]
[184.62026978 172.84979248]
[186.90489197 187.68817139]
[186.42407227 202.68971252]
[183.19563293 217.34355164]
[177.33097839 231.15093994]
[169.03118896 243.64221191]
[158.58012390 254.39276123]
[146.33479309 263.03747559]
[132.71307373 269.28314209]
[118.17949677 272.91842651]
[119.10290527 287.88995361]
[120.02632141 302.86151123]
[120.94973755 317.83306885]
[121.87314606 332.80462646]
[122.79656219 347.77615356]
[123.71997833 362.74771118]
[124.64338684 377.71926880]
[125.56680298 392.69082642]
[126.49021912 407.66235352]
[141.35690308 410.09738159]
[155.30880737 415.77999878]
[167.64610291 424.42517090]
[177.74996948 435.59921265]
[185.11360168 448.74169922]
[189.36761475 463.19338989]
[190.29866028 478.22937012]
[187.86003113 493.09545898]
[182.17404175 507.04598999]
[173.52589417 519.38122559]
[162.34938049 529.48236084]
[149.20512390 536.84277344]
[134.75241089 541.09332275]
[119.71620178 542.02069092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[37 113]
[38 54]
[39 53]
[40 52]
[41 51]
[56 112]
[57 111]
[58 110]
[59 109]
[60 108]
[61 107]
[62 106]
[63 105]
[68 87]
[69 86]
[70 85]
[71 84]
[92 104]
[93 103]
[94 102]
[95 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
