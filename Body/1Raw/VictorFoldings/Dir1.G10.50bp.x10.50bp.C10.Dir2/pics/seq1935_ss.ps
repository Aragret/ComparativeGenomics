%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUACUACCAGGGGGGGGGGGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUxxxxxxxxxxACCACCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACACCCCCCCCCCUUACUGCCAG\
) } def
/len { sequence length } bind def

/coor [
[79.57564545 366.64379883]
[65.72970581 360.62774658]
[54.02104187 351.09832764]
[45.31851959 338.76266479]
[40.26791763 324.53616333]
[39.24402618 309.47445679]
[42.32282639 294.69531250]
[49.27584839 281.29537964]
[59.58713150 270.26904297]
[72.49150848 262.43453979]
[87.03140259 258.37322998]
[87.03140259 243.37322998]
[87.03140259 228.37322998]
[87.03140259 213.37322998]
[87.03140259 198.37322998]
[87.03140259 183.37322998]
[87.03140259 168.37322998]
[87.03140259 153.37322998]
[87.03140259 138.37322998]
[87.03140259 123.37322998]
[82.41937256 117.04563141]
[80.22459412 110.18643188]
[80.32591248 103.60793304]
[82.35353851 97.99884796]
[85.75186920 93.85453033]
[89.86004639 91.43321991]
[94.00048065 90.74229431]
[97.56501007 91.55490112]
[95.69739532 76.67162323]
[93.82978058 61.78834152]
[91.96216583 46.90505981]
[76.97388458 47.65583420]
[61.97141266 47.28442764]
[47.03864288 45.79291534]
[32.25909042 43.18964005]
[17.71540833 39.48916245]
[3.48893237 34.71217346]
[-10.34077549 28.88539124]
[-23.69637299 22.04140091]
[-36.50317001 14.21847630]
[-48.68954849 5.46036911]
[-60.18735123 -4.18394279]
[-70.93228149 -14.66052341]
[-80.86424255 -25.91078377]
[-89.92768860 -37.87180710]
[-98.07194519 -50.47669983]
[-105.25145721 -63.65496826]
[-111.42607880 -77.33291626]
[-116.56127167 -91.43405151]
[-120.62831879 -105.87951660]
[-123.60447693 -120.58851624]
[-125.47309875 -135.47879028]
[-126.22373962 -150.46708679]
[-125.85220337 -165.46955872]
[-124.36055756 -180.40231323]
[-121.75714874 -195.18183899]
[-118.05654144 -209.72549438]
[-113.27943420 -223.95191956]
[-107.45252991 -237.78158569]
[-100.60842133 -251.13711548]
[-92.78538513 -263.94384766]
[-84.02716827 -276.13015747]
[-74.38275146 -287.62786865]
[-63.90607834 -298.37271118]
[-52.65573120 -308.30456543]
[-40.69462967 -317.36791992]
[-28.08966446 -325.51205444]
[-14.91133022 -332.69143677]
[-1.23332596 -338.86593628]
[12.86785507 -344.00100708]
[27.31335068 -348.06793213]
[42.02237701 -351.04394531]
[56.91267395 -352.91244507]
[71.90097046 -353.66296387]
[86.90343475 -353.29129028]
[101.83618164 -351.79953003]
[116.61568451 -349.19598389]
[131.15930176 -345.49523926]
[145.38569641 -340.71801758]
[159.21530151 -334.89099121]
[172.57077026 -328.04675293]
[185.37744141 -320.22360229]
[197.56365967 -311.46527100]
[209.06129456 -301.82077026]
[219.80603027 -291.34399414]
[229.73779297 -280.09356689]
[238.80104065 -268.13238525]
[246.94506836 -255.52734375]
[254.12435913 -242.34895325]
[260.29873657 -228.67088318]
[265.43368530 -214.56965637]
[269.50045776 -200.12413025]
[272.47634888 -185.41506958]
[274.34472656 -170.52476501]
[275.09509277 -155.53646851]
[274.72329712 -140.53399658]
[273.23138428 -125.60126495]
[270.62771606 -110.82178497]
[266.92684937 -96.27819824]
[262.14950562 -82.05184937]
[256.32235718 -68.22229767]
[249.47801208 -54.86687851]
[241.65473938 -42.06028748]
[232.89631653 -29.87414360]
[223.25169373 -18.37659645]
[212.77482605 -7.63194656]
[201.52430725 2.29971766]
[189.56304932 11.36285305]
[176.95794678 19.50677490]
[163.77947998 26.68593788]
[150.10136414 32.86019516]
[136.00009155 37.99501419]
[121.55452728 42.06167603]
[106.84544373 45.03744507]
[108.71305847 59.92072678]
[110.58067322 74.80400848]
[112.44828796 89.68728638]
[121.21449280 101.85912323]
[134.73867798 108.34729004]
[148.26287842 114.83545685]
[161.78706360 121.32361603]
[177.33795166 117.38032532]
[190.02912903 127.19427490]
[190.12501526 143.23704529]
[177.55204773 153.20199585]
[161.95513916 149.44487000]
[155.29890442 134.84780884]
[141.77470398 128.35964966]
[128.25051880 121.87147522]
[114.72632599 115.38331604]
[102.03140259 123.37322998]
[102.03140259 138.37322998]
[102.03140259 153.37322998]
[102.03140259 168.37322998]
[102.03140259 183.37322998]
[102.03140259 198.37322998]
[102.03140259 213.37322998]
[102.03140259 228.37322998]
[102.03140259 243.37322998]
[102.03140259 258.37322998]
[116.57128906 262.43453979]
[129.47566223 270.26904297]
[139.78695679 281.29537964]
[146.73997498 294.69531250]
[149.81877136 309.47445679]
[148.79487610 324.53616333]
[143.74427795 338.76266479]
[135.04174805 351.09832764]
[123.33309174 360.62774658]
[109.48715210 366.64379883]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 117]
[29 116]
[30 115]
[31 114]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
