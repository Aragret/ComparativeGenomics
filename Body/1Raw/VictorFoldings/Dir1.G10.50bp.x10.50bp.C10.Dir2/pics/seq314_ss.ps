%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCCCUCCGGGGGGGGGGCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACxxxxxxxxxxAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACCCCCCCCCCCAACCCCCCUCC\
) } def
/len { sequence length } bind def

/coor [
[87.94477081 462.75793457]
[74.45588684 456.02639771]
[62.97038651 446.26184082]
[54.15601730 434.03195190]
[48.52523422 420.04772949]
[46.40540695 405.12225342]
[47.91977692 390.12326050]
[52.98030090 375.92276001]
[61.29276657 363.34634399]
[72.37389374 353.12518311]
[85.57945251 345.85354614]
[100.14167786 341.95416260]
[99.83369446 326.95733643]
[99.52571869 311.96051025]
[99.21774292 296.96365356]
[98.90976715 281.96682739]
[98.60178375 266.96997070]
[98.29380798 251.97314453]
[97.98583221 236.97630310]
[97.67785645 221.97946167]
[97.36987305 206.98263550]
[81.76471710 201.32791138]
[69.48378754 190.10774231]
[62.41516876 175.00918579]
[61.66006088 158.31835938]
[67.36138153 142.57437134]
[78.67770386 130.18301392]
[93.90737152 123.04914093]
[92.98395538 108.07759094]
[90.22771454 93.33299255]
[85.68042755 79.03886414]
[81.13313293 64.74473572]
[65.46984100 57.02148438]
[60.31027222 40.69021606]
[68.37014008 25.96127701]
[63.53032303 11.76352406]
[58.69050598 -2.43422866]
[53.85068893 -16.63198090]
[49.01087189 -30.82973480]
[34.37158585 -27.49672318]
[19.46409416 -25.71221733]
[4.45173788 -25.49576950]
[-10.50100231 -26.84974861]
[-25.23029518 -29.75932312]
[-39.57476044 -34.19261169]
[-53.37723160 -40.10103989]
[-66.48648071 -47.41987610]
[-78.75887299 -56.06892776]
[-90.05994415 -65.95343018]
[-100.26588440 -76.96508789]
[-109.26486206 -88.98324585]
[-116.95828247 -101.87622833]
[-123.26184845 -115.50276947]
[-128.10650635 -129.71357727]
[-131.43916321 -144.35295105]
[-133.22329712 -159.26048279]
[-133.43937683 -174.27284241]
[-132.08503723 -189.22555542]
[-129.17510986 -203.95477295]
[-124.74147034 -218.29913330]
[-118.83271027 -232.10145569]
[-111.51355743 -245.21052551]
[-102.86420441 -257.48269653]
[-92.97943115 -268.78353882]
[-81.96752167 -278.98922729]
[-69.94915009 -287.98788452]
[-57.05597687 -295.68099976]
[-43.42927933 -301.98425293]
[-29.21835518 -306.82855225]
[-14.57890511 -310.16085815]
[0.32867175 -311.94464111]
[15.34103870 -312.16033936]
[30.29371452 -310.80563354]
[45.02286530 -307.89535522]
[59.36711502 -303.46136475]
[73.16929626 -297.55227661]
[86.27819061 -290.23278809]
[98.55016327 -281.58316040]
[109.85076141 -271.69808960]
[120.05615997 -260.68594360]
[129.05455017 -248.66735840]
[136.74734497 -235.77400208]
[143.05024719 -222.14714050]
[147.89421082 -207.93609619]
[151.22616577 -193.29656982]
[153.00958252 -178.38894653]
[153.22492981 -163.37657166]
[151.86985779 -148.42393494]
[148.95921326 -133.69485474]
[144.52488708 -119.35071564]
[138.61544800 -105.54867554]
[131.29565430 -92.43995667]
[122.64571381 -80.16819763]
[112.76038361 -68.86784363]
[101.74798584 -58.66270828]
[89.72917175 -49.66460419]
[76.83563232 -41.97212601]
[63.20862579 -35.66955185]
[68.04843903 -21.47179794]
[72.88825989 -7.27404499]
[77.72807312 6.92370749]
[82.56789398 21.12145996]
[94.84449005 25.15102386]
[102.65981293 35.68428040]
[102.96653748 48.99168777]
[95.42726135 60.19744492]
[99.97455597 74.49157715]
[104.52184296 88.78570557]
[109.11945343 74.50768280]
[119.37031555 63.55688858]
[133.31402588 58.02758789]
[148.28393555 58.97721863]
[161.41716003 66.22417450]
[170.20205688 78.38251495]
[172.95860291 93.12705994]
[169.15959167 107.63800812]
[159.53158569 119.14024353]
[145.91586304 125.43404388]
[130.91632080 125.31577301]
[117.40154266 118.80803680]
[107.95550537 107.15417480]
[108.87892151 122.12572479]
[121.87467957 125.80182648]
[133.07672119 133.30522156]
[141.39389038 143.88801575]
[146.02133179 156.50320435]
[146.51832581 169.90826416]
[142.85023499 182.78750610]
[135.39053345 193.88125610]
[124.88282776 202.10899353]
[112.36671448 206.67465210]
[112.67469025 221.67149353]
[112.98266602 236.66833496]
[113.29064941 251.66516113]
[113.59862518 266.66201782]
[113.90660095 281.65884399]
[114.21457672 296.65567017]
[114.52256012 311.65252686]
[114.83053589 326.64935303]
[115.13851166 341.64620972]
[129.84854126 344.94442749]
[143.34150696 351.66778564]
[154.83293152 361.42538452]
[163.65470886 373.64993286]
[169.29396057 387.63070679]
[171.42283630 402.55490112]
[169.91757202 417.55480957]
[164.86566162 431.75839233]
[156.56082153 444.33984375]
[145.48588562 454.56771851]
[132.28474426 461.84735107]
[117.72488403 465.75555420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[28 122]
[29 121]
[30 108]
[31 107]
[32 106]
[35 102]
[36 101]
[37 100]
[38 99]
[39 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
