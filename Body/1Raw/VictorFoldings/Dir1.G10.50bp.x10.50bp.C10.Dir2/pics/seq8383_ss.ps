%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUGAUAACCAUAGGGGGGGGGGCACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUxxxxxxxxxxCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUCCCCCCCCCCAUGAUAAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[76.06343079 578.08404541]
[61.90282822 572.92901611]
[49.31308365 564.64678955]
[38.97314453 553.68402100]
[31.44063377 540.63189697]
[27.12176704 526.19433594]
[26.24945831 511.14987183]
[28.87074852 496.30987549]
[34.84427643 482.47463989]
[43.84789276 470.39028931]
[55.39604950 460.70849609]
[68.86596680 453.95141602]
[83.53122711 450.48345947]
[83.53122711 435.48345947]
[83.53122711 420.48345947]
[83.53122711 405.48345947]
[83.53122711 390.48345947]
[83.53122711 375.48345947]
[83.53122711 360.48345947]
[83.53122711 345.48345947]
[83.53122711 330.48345947]
[83.53122711 315.48345947]
[70.13114166 312.05178833]
[57.94348526 305.48864746]
[47.68827438 296.17633057]
[39.97266006 284.65963745]
[35.25499344 271.61419678]
[33.81760025 257.80661011]
[35.74989700 244.04949951]
[40.94282913 231.15370178]
[49.09502411 219.88043213]
[59.73027420 210.89640808]
[72.22535706 204.73435974]
[85.84654999 201.76144409]
[86.45442963 186.77375793]
[78.47138214 177.63652039]
[78.89151001 165.10861206]
[88.03582764 155.95785522]
[88.94734192 140.98558044]
[89.85885620 126.01330566]
[90.77036285 111.04102325]
[82.27124023 123.40083313]
[71.27693176 133.60501099]
[58.31871033 141.16043091]
[44.02276993 145.70202637]
[29.07993126 147.01031494]
[14.21228504 145.02206421]
[0.13828559 139.83337402]
[-12.46196556 131.69496155]
[-22.97958183 121.00011444]
[-30.90631866 108.26564026]
[-35.85912704 94.10691071]
[-37.59867477 79.20812225]
[-36.04090118 64.28923035]
[-31.26107597 50.07116699]
[-23.49018478 37.24099731]
[-13.10373688 26.41871834]
[-0.60364306 18.12729836]
[13.40605164 12.76740551]
[28.24835205 10.59804726]
[43.20602798 11.72405434]
[57.55627823 16.09101486]
[70.60565186 23.48790169]
[81.72354889 33.55727386]
[90.37272644 45.81254578]
[96.13523102 59.66150284]
[98.73258972 74.43491364]
[98.03964233 89.41664886]
[106.35739136 76.93405914]
[114.67514038 64.45146942]
[122.99288177 51.96887589]
[131.31063843 39.48628616]
[117.77571106 45.95203018]
[103.04180145 48.76483917]
[88.07685852 47.73991776]
[73.86401367 42.94460297]
[61.33698654 34.69392395]
[51.31875992 23.52991486]
[44.46747971 10.18600559]
[41.23324585 -4.46116972]
[41.82853317 -19.44935226]
[46.21423721 -33.79388428]
[54.10223389 -46.55239105]
[64.97431946 -56.88669586]
[78.11624146 -64.11787415]
[92.66462708 -67.77087402]
[107.66371918 -67.60570526]
[122.12813568 -63.63321686]
[135.10763550 -56.11439133]
[145.74949646 -45.54317856]
[153.35462952 -32.61406326]
[157.42338562 -18.17643166]
[157.68847656 -3.17877388]
[154.13247681 11.39362717]
[146.99028015 24.58167267]
[154.88841248 10.87291718]
[169.78240967 11.00874805]
[182.67025757 3.33390880]
[195.55812073 -4.34092999]
[208.44596863 -12.01576900]
[213.76637268 -27.15092468]
[228.96350098 -32.29160309]
[242.37944031 -23.49431801]
[243.72261047 -7.50759172]
[231.96266174 3.40492702]
[216.12080383 0.87208754]
[203.23295593 8.54692650]
[190.34509277 16.22176552]
[177.45724487 23.89660454]
[170.48092651 37.05640411]
[154.66511536 37.46952820]
[143.79322815 47.80403137]
[135.47547913 60.28662491]
[127.15773010 72.76921082]
[118.83998108 85.25180817]
[110.52223206 97.73439789]
[105.74264526 111.95253754]
[104.83113098 126.92481995]
[103.91961670 141.89709473]
[103.00810242 156.86936951]
[111.61878967 173.11549377]
[101.44210815 187.38165283]
[100.83422852 202.36932373]
[116.27799225 207.42408752]
[129.67695618 216.59339905]
[139.96340942 229.13717651]
[146.32031250 244.04679871]
[148.24617004 260.12619019]
[145.59461975 276.08789062]
[138.58551025 290.65597534]
[127.78667450 302.66815186]
[114.06798553 311.16848755]
[98.53122711 315.48345947]
[98.53122711 330.48345947]
[98.53122711 345.48345947]
[98.53122711 360.48345947]
[98.53122711 375.48345947]
[98.53122711 390.48345947]
[98.53122711 405.48345947]
[98.53122711 420.48345947]
[98.53122711 435.48345947]
[98.53122711 450.48345947]
[113.19648743 453.95141602]
[126.66640472 460.70849609]
[138.21455383 470.39028931]
[147.21818542 482.47463989]
[153.19171143 496.30987549]
[155.81300354 511.14987183]
[154.94068909 526.19433594]
[150.62182617 540.63189697]
[143.08930969 553.68402100]
[132.74937439 564.64678955]
[120.15962982 572.92901611]
[105.99902344 578.08404541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[34 123]
[35 122]
[38 120]
[39 119]
[40 118]
[41 117]
[68 116]
[69 115]
[70 114]
[71 113]
[72 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
