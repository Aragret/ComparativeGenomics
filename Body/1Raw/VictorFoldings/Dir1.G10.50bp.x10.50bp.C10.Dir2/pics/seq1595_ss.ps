%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCCAUCUUCGGGGGGGGGGAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGAxxxxxxxxxxUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCCCCCCCCCCCGCCAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.15658569 416.51654053]
[71.13464355 410.96353149]
[58.93468475 402.09719849]
[49.32361221 390.47488403]
[42.90558624 376.82717896]
[40.08404922 362.01199341]
[41.03636551 346.96063232]
[45.70267105 332.61920166]
[53.78963852 319.88925171]
[64.78890991 309.57095337]
[78.00907135 302.31298828]
[92.61908722 298.57156372]
[92.61908722 283.57156372]
[92.61908722 268.57156372]
[92.61908722 253.57154846]
[92.61908722 238.57154846]
[92.61908722 223.57154846]
[92.61908722 208.57154846]
[92.61908722 193.57154846]
[92.61908722 178.57154846]
[92.61908722 163.57154846]
[89.45452118 156.84118652]
[92.77624512 148.26435852]
[93.08422089 133.26753235]
[93.39219666 118.27069092]
[88.98897552 115.03511810]
[85.83445740 110.84937286]
[84.09465027 106.14190674]
[83.79947662 101.35470581]
[84.84925842 96.90261841]
[87.03275299 93.13755035]
[90.05439758 90.32067108]
[81.38778687 78.07771301]
[72.72117615 65.83476257]
[64.05457306 53.59180832]
[50.41255951 57.69372177]
[35.21094513 54.54658127]
[22.33550262 43.74580383]
[15.61170387 26.95170784]
[1.27164257 22.55140877]
[-13.06841850 18.15110779]
[-25.38908577 27.58407021]
[-40.90208054 27.93993187]
[-53.64233780 19.08185959]
[-58.71097183 4.41595984]
[-54.15898514 -10.41842747]
[-41.73671341 -19.71717834]
[-26.22076988 -19.90473366]
[-13.57735538 -10.90897465]
[-8.66811848 3.81104684]
[5.67194271 8.21134758]
[20.01200485 12.61164761]
[25.44966125 7.44619608]
[21.94046402 -7.13754606]
[36.32497406 -2.88470650]
[41.76263046 -8.05015755]
[38.10392761 -22.59711266]
[34.44522095 -37.14406586]
[30.78651428 -51.69102097]
[15.69965649 -51.91269302]
[1.18450963 -56.03251266]
[-11.76926041 -63.76958466]
[-22.27844238 -74.59638214]
[-29.62650490 -87.77471161]
[-33.31244278 -102.40605927]
[-33.08494568 -117.49282837]
[-28.95952034 -132.00637817]
[-21.21744728 -144.95716858]
[-10.38659573 -155.46215820]
[2.79457092 -162.80514526]
[17.42733955 -166.48542786]
[32.51401901 -166.25210571]
[47.02598190 -162.12107849]
[59.97377396 -154.37400818]
[70.47459412 -143.53909302]
[77.81247711 -130.35508728]
[81.48711395 -115.72090912]
[81.24796295 -100.63431549]
[77.11133575 -86.12395477]
[69.35926056 -73.17915344]
[58.52030182 -62.68251801]
[45.33346939 -55.34972763]
[48.99217606 -40.80277252]
[52.65087891 -26.25581741]
[56.30958557 -11.70886326]
[79.44039154 2.13681459]
[86.20017242 25.54029083]
[76.29752350 44.92519760]
[84.96413422 57.16815186]
[93.63073730 69.41110992]
[102.29734802 81.65406036]
[116.59147644 86.20134735]
[130.73880005 81.21602631]
[144.88610840 76.23070526]
[159.03343201 71.24538422]
[173.18074036 66.26006317]
[187.32806396 61.27474213]
[201.47537231 56.28941727]
[201.60617065 41.13162613]
[206.91625977 26.93377876]
[216.76440430 15.41034031]
[229.96142578 7.95281887]
[244.91369629 5.46174717]
[259.81564331 8.23793411]
[272.86782837 15.94614220]
[282.49411011 27.65556717]
[287.53207397 41.95223999]
[287.37332153 57.10976791]
[282.03710938 71.29780579]
[272.16772461 82.80307007]
[258.95700073 90.23625946]
[244.00015259 92.69977570]
[229.10333252 89.89612579]
[216.06538391 82.16387939]
[206.46069336 70.43673706]
[192.31338501 75.42205811]
[178.16606140 80.40737915]
[164.01875305 85.39270020]
[149.87142944 90.37802124]
[135.72412109 95.36334229]
[121.57679749 100.34866333]
[136.48844910 98.72301483]
[149.27507019 106.56536102]
[154.58566284 120.59381866]
[150.19783020 134.93769836]
[137.94781494 143.59432983]
[122.96204376 142.94104004]
[111.51182556 133.25122070]
[108.38903809 118.57866669]
[108.08106232 133.57550049]
[107.77307892 148.57234192]
[107.61908722 163.57154846]
[107.61908722 178.57154846]
[107.61908722 193.57154846]
[107.61908722 208.57154846]
[107.61908722 223.57154846]
[107.61908722 238.57154846]
[107.61908722 253.57154846]
[107.61908722 268.57156372]
[107.61908722 283.57156372]
[107.61908722 298.57156372]
[122.22909546 302.31298828]
[135.44924927 309.57095337]
[146.44853210 319.88925171]
[154.53549194 332.61920166]
[159.20179749 346.96063232]
[160.15411377 362.01199341]
[157.33258057 376.82717896]
[150.91455078 390.47488403]
[141.30348206 402.09719849]
[129.10353088 410.96353149]
[115.08158112 416.51654053]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[25 129]
[32 91]
[33 90]
[34 89]
[35 88]
[39 52]
[40 51]
[41 50]
[56 85]
[57 84]
[58 83]
[59 82]
[92 121]
[93 120]
[94 119]
[95 118]
[96 117]
[97 116]
[98 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
