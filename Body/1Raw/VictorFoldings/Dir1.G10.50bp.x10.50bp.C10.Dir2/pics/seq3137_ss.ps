%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUUAUACGGGGGGGGGGCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCxxxxxxxxxxACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACAUACCCCCCCCCCAAUAUUAUAC\
) } def
/len { sequence length } bind def

/coor [
[82.49165344 378.11071777]
[68.64571381 372.09469604]
[56.93705368 362.56527710]
[48.23453140 350.22961426]
[43.18392944 336.00308228]
[42.16003799 320.94140625]
[45.23883438 306.16223145]
[52.19185638 292.76232910]
[62.50314331 281.73599243]
[75.40752411 273.90148926]
[89.94741058 269.84014893]
[89.94741058 254.84016418]
[89.94741058 239.84016418]
[89.94741058 224.84016418]
[89.94741058 209.84016418]
[89.94741058 194.84016418]
[89.94741058 179.84016418]
[89.94741058 164.84016418]
[89.94741058 149.84016418]
[89.94741058 134.84016418]
[84.24690247 129.96633911]
[74.49906921 141.36720276]
[63.09835052 131.61920166]
[72.84587860 120.21868896]
[67.14537048 115.34485626]
[52.32761002 117.67596436]
[37.50984955 120.00706482]
[22.69209290 122.33817291]
[17.83225441 136.85163879]
[6.77631617 147.43580627]
[-7.93514729 151.65853882]
[-22.92154884 148.54946899]
[-34.73912430 138.82302856]
[-40.67227936 124.71430206]
[-39.35762405 109.46536255]
[-31.09724808 96.58029938]
[-17.78933144 89.02001190]
[-2.49193335 88.52179718]
[11.27971458 95.20014191]
[20.36098862 107.52041626]
[35.17874908 105.18930817]
[49.99650574 102.85820770]
[64.81426239 100.52709961]
[80.54940033 78.18402100]
[103.00435638 76.92893982]
[109.63285065 63.47297287]
[116.26135254 50.01700974]
[115.41879272 34.21825409]
[127.98382568 26.22018433]
[134.61231995 12.76421833]
[141.10049438 -0.75997174]
[147.44761658 -14.35092258]
[145.40382385 -32.62119293]
[160.10342407 -42.15648651]
[166.16642761 -55.87654114]
[172.22944641 -69.59659576]
[178.29246521 -83.31665039]
[180.00515747 -98.21855164]
[177.21282959 -112.95635986]
[174.42050171 -127.69416046]
[159.37873840 -128.97781372]
[145.24148560 -134.27316284]
[133.05783081 -143.18727112]
[123.73188019 -155.05862427]
[117.95568085 -169.00631714]
[116.15786743 -183.99533081]
[118.47185516 -198.91337585]
[124.72591400 -212.65344238]
[134.45596313 -224.19590759]
[146.93997192 -232.68426514]
[161.25152588 -237.48861694]
[176.32864380 -238.25244141]
[191.05245972 -234.91906738]
[204.33041382 -227.73583984]
[215.17716980 -217.23582458]
[222.78782654 -204.19816589]
[226.59762573 -189.59036255]
[226.32385254 -174.49639893]
[221.98683167 -160.03636169]
[213.90840149 -147.28326416]
[202.68800354 -137.18348694]
[189.15830994 -130.48648071]
[191.95063782 -115.74868011]
[194.74295044 -101.01087952]
[201.75131226 -98.34011841]
[215.76802063 -92.99860382]
[222.77638245 -90.32785034]
[234.66876221 -99.46958160]
[246.56114197 -108.61132050]
[258.45352173 -117.75305176]
[270.34591675 -126.89479065]
[275.28369141 -134.65817261]
[282.58212280 -136.09992981]
[294.66210938 -144.99227905]
[306.74209595 -153.88462830]
[318.82208252 -162.77697754]
[327.99343872 -177.03610229]
[344.23419189 -172.17047119]
[344.05462646 -155.21748352]
[327.71444702 -150.69699097]
[315.63442993 -141.80464172]
[303.55444336 -132.91229248]
[291.47445679 -124.01993561]
[279.48764038 -115.00241089]
[267.59524536 -105.86067200]
[255.70288086 -96.71894073]
[243.81050110 -87.57720184]
[231.91812134 -78.43547058]
[224.42843628 -73.54454803]
[216.65126038 -70.76221466]
[209.09834290 -69.99552917]
[202.23136902 -71.03758240]
[196.43797302 -73.58390045]
[192.01251221 -77.25363922]
[185.94950867 -63.53358078]
[179.88648987 -49.81352997]
[173.82347107 -36.09347534]
[177.89880371 -24.66110992]
[172.90798950 -13.15847015]
[161.03857422 -8.00379276]
[154.69143677 5.58715773]
[154.71090698 13.02659798]
[148.06829834 19.39271736]
[141.43978882 32.84868240]
[142.75646973 47.68497849]
[129.71731567 56.64550781]
[123.08882141 70.10147095]
[116.46031952 83.55744171]
[127.21081543 98.72941589]
[124.04391479 119.90656281]
[104.94741058 134.84016418]
[104.94741058 149.84016418]
[104.94741058 164.84016418]
[104.94741058 179.84016418]
[104.94741058 194.84016418]
[104.94741058 209.84016418]
[104.94741058 224.84016418]
[104.94741058 239.84016418]
[104.94741058 254.84016418]
[104.94741058 269.84014893]
[119.48729706 273.90148926]
[132.39167786 281.73599243]
[142.70295715 292.76232910]
[149.65599060 306.16223145]
[152.73478699 320.94140625]
[151.71089172 336.00308228]
[146.66029358 350.22961426]
[137.95776367 362.56527710]
[126.24909973 372.09469604]
[112.40316772 378.11071777]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 43]
[26 42]
[27 41]
[28 40]
[45 128]
[46 127]
[47 126]
[49 124]
[50 123]
[51 121]
[52 120]
[54 117]
[55 116]
[56 115]
[57 114]
[58 84]
[59 83]
[60 82]
[87 108]
[88 107]
[89 106]
[90 105]
[91 104]
[93 103]
[94 102]
[95 101]
[96 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
