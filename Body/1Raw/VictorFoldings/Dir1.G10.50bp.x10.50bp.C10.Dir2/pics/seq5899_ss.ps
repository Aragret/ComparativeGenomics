%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCCUACCGGGGGGGGGGUAUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGxxxxxxxxxxCUUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUCCCCCCCCCCUACCCCUACC\
) } def
/len { sequence length } bind def

/coor [
[85.57346344 355.49444580]
[71.72752380 349.47842407]
[60.01886368 339.94900513]
[51.31634140 327.61334229]
[46.26573944 313.38681030]
[45.24184799 298.32513428]
[48.32064438 283.54598999]
[55.27366638 270.14605713]
[65.58495331 259.11972046]
[78.48933411 251.28521729]
[93.02922058 247.22389221]
[93.02922058 232.22389221]
[93.02922058 217.22389221]
[93.02922058 202.22389221]
[93.02922058 187.22389221]
[93.02922058 172.22389221]
[93.02922058 157.22389221]
[93.02922058 142.22389221]
[93.02922058 127.22389984]
[93.02922058 112.22389984]
[90.74123383 110.78046417]
[88.75112915 108.90911865]
[87.13882446 106.67116547]
[72.13964081 106.82720184]
[57.14044952 106.98323822]
[51.41822433 121.03784180]
[40.77968216 131.80187988]
[26.86812210 137.65696716]
[11.81552219 137.73959351]
[-2.08416605 132.06831360]
[-12.72461033 121.53614807]
[-18.50628090 107.77019501]
[-33.50547028 107.92623138]
[-48.50465775 108.08226776]
[-63.50384521 108.23830414]
[-77.33676910 117.04637909]
[-91.75428009 109.23180389]
[-91.92486572 92.83354187]
[-77.67305756 84.72071838]
[-63.65988159 93.23911285]
[-48.66069412 93.08307648]
[-33.66150665 92.92704010]
[-18.66231728 92.77100372]
[-13.16828156 78.88774872]
[-2.74924850 68.13650513]
[11.02944756 62.17728043]
[26.08050919 61.94673920]
[40.11086655 67.51115417]
[50.97103882 78.05153656]
[56.98441315 91.98405457]
[71.98360443 91.82801819]
[86.98278809 91.67198181]
[99.67771912 83.68206024]
[106.30622101 70.22609711]
[112.93471527 56.77013016]
[119.56321716 43.31416702]
[126.19171906 29.85820007]
[132.53884888 16.26725006]
[138.60185242 2.54719591]
[144.66487122 -11.17285728]
[150.72789001 -24.89291191]
[156.79089355 -38.61296463]
[162.85391235 -52.33301926]
[168.91693115 -66.05307007]
[174.97993469 -79.77312469]
[181.04295349 -93.49317932]
[187.10595703 -107.21323395]
[174.54025269 -115.46870422]
[163.50483704 -125.67994690]
[154.30076599 -137.56837463]
[147.17912292 -150.80967712]
[142.33421326 -165.04263306]
[139.89819336 -179.87892151]
[139.93751526 -194.91381836]
[142.45112610 -209.73716736]
[147.37043762 -223.94458008]
[154.56124878 -237.14843750]
[163.82739258 -248.98855591]
[174.91607666 -259.14193726]
[187.52481079 -267.33154297]
[201.30960083 -273.33401489]
[215.89439392 -276.98553467]
[230.88130188 -278.18655396]
[245.86146545 -276.90426636]
[260.42623901 -273.17367554]
[274.17825317 -267.09652710]
[286.74237061 -258.83862305]
[297.77584839 -248.62525940]
[306.97763062 -236.73506165]
[314.09671021 -223.49238586]
[318.93887329 -209.25849915]
[321.37203979 -194.42173767]
[321.32980347 -179.38684082]
[318.81335449 -164.56398010]
[313.89129639 -150.35752869]
[306.69793701 -137.15504456]
[297.42950439 -125.31671906]
[286.33886719 -115.16548920]
[273.72857666 -106.97829437]
[259.94262695 -100.97849274]
[245.35713196 -97.32976532]
[230.36999512 -96.13163757]
[215.39006042 -97.41681671]
[200.82601929 -101.15022278]
[194.76300049 -87.43016815]
[188.69999695 -73.71011353]
[182.63697815 -59.99005890]
[176.57395935 -46.27000427]
[170.51095581 -32.54995346]
[164.44793701 -18.82989883]
[158.38491821 -5.10984468]
[152.32191467 8.61020947]
[146.25889587 22.33026314]
[147.14350891 27.08347130]
[145.00566101 32.43706131]
[139.64767456 36.48669815]
[133.01918030 49.94266510]
[126.39068604 63.39862823]
[119.76218414 76.85459900]
[113.13368988 90.31056213]
[124.51489258 80.53977966]
[139.19284058 77.44821930]
[153.54824829 81.79818726]
[164.04136658 92.51706696]
[168.08480835 106.96181488]
[164.68153381 121.57063293]
[154.67073059 132.74130249]
[140.52085876 137.71934509]
[125.72097778 135.27729797]
[113.92044830 126.01730347]
[108.02922058 112.22389984]
[108.02922058 127.22389984]
[108.02922058 142.22389221]
[108.02922058 157.22389221]
[108.02922058 172.22389221]
[108.02922058 187.22389221]
[108.02922058 202.22389221]
[108.02922058 217.22389221]
[108.02922058 232.22389221]
[108.02922058 247.22389221]
[122.56910706 251.28521729]
[135.47348022 259.11972046]
[145.78477478 270.14605713]
[152.73779297 283.54598999]
[155.81658936 298.32513428]
[154.79269409 313.38681030]
[149.74209595 327.61334229]
[141.03958130 339.94900513]
[129.33091736 349.47842407]
[115.48497772 355.49444580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 52]
[24 51]
[25 50]
[32 43]
[33 42]
[34 41]
[35 40]
[53 120]
[54 119]
[55 118]
[56 117]
[57 116]
[58 113]
[59 112]
[60 111]
[61 110]
[62 109]
[63 108]
[64 107]
[65 106]
[66 105]
[67 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
