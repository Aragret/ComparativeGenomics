%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGUAUAAUAGGGGGGGGGGAUUACAUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUxxxxxxxxxxAUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUACCCCCCCCCCUGGUAUAAUA\
) } def
/len { sequence length } bind def

/coor [
[75.57015228 374.37127686]
[62.34995651 367.09878540]
[51.46315384 356.65179443]
[43.65202332 343.74255371]
[39.44914246 329.25122070]
[39.14106750 314.16589355]
[42.74880981 299.51507568]
[50.02638245 286.29766846]
[60.47758865 275.41491699]
[73.38985443 267.60876465]
[87.88278961 263.41146851]
[87.57073212 248.41471863]
[87.25867462 233.41796875]
[86.94661713 218.42121887]
[86.63456726 203.42445374]
[86.32250977 188.42770386]
[86.01045227 173.43095398]
[85.69839478 158.43420410]
[85.38633728 143.43743896]
[72.14375305 136.39230347]
[59.53262329 144.51385498]
[46.92149734 152.63539124]
[36.87858200 166.29467773]
[20.97294617 160.42552185]
[22.20962524 143.51673889]
[38.79995346 140.02426147]
[51.41108322 131.90272522]
[64.02220917 123.78118134]
[63.32211685 117.19855499]
[63.72061157 110.93955994]
[48.78630447 112.34185791]
[33.85199738 113.74416351]
[18.91768837 115.14646912]
[5.86480808 125.07392120]
[-9.15238667 118.48484802]
[-10.68549156 102.15751648]
[2.84261894 92.88809204]
[17.51538658 100.21215820]
[32.44969177 98.80986023]
[47.38400269 97.40755463]
[62.31830978 96.00524902]
[69.25163269 77.85489655]
[84.26905060 65.52674866]
[80.86607361 50.91785431]
[77.46309662 36.30895996]
[64.32688904 27.93771553]
[61.08389282 13.07374382]
[69.14555359 0.60196555]
[65.74257660 -14.00692654]
[62.33959579 -28.61581993]
[53.17346954 -16.74222946]
[38.32193756 -14.63699818]
[26.21701622 -23.49537849]
[23.73132515 -38.28799057]
[32.27612305 -50.61626816]
[47.00006866 -53.48078156]
[59.54445648 -45.25392532]
[57.98687744 -60.17283630]
[56.42929459 -75.09175110]
[54.87171555 -90.01065826]
[44.29856110 -79.37071228]
[29.30047798 -79.13098907]
[18.39268494 -89.42759705]
[17.76812553 -104.41458893]
[27.78139687 -115.58304596]
[42.74742508 -116.59202576]
[54.16989517 -106.86731720]
[54.48195267 -121.86406708]
[40.43510056 -127.61301422]
[29.41625023 -138.05088806]
[22.91560936 -151.76606750]
[21.81233788 -166.90368652]
[26.25564194 -181.41648865]
[35.64460373 -193.34175110]
[48.70944214 -201.06666565]
[63.68324280 -203.54652405]
[78.54092407 -200.44592285]
[91.27310944 -192.18421936]
[100.15787506 -179.87870789]
[103.99362183 -165.19363403]
[102.26160431 -150.11502075]
[95.19606018 -136.68212891]
[83.75254822 -126.71165466]
[69.47870636 -121.55200958]
[69.16664886 -106.55525970]
[69.79062653 -91.56824493]
[71.34820557 -76.64933014]
[72.90579224 -61.73041534]
[74.46337128 -46.81150436]
[76.94848633 -32.01879883]
[80.35146332 -17.40990448]
[83.75444031 -2.80101252]
[96.49755096 4.82452965]
[100.15676117 19.59154701]
[92.07199097 32.90598297]
[95.47496796 47.51487732]
[98.87794495 62.12376785]
[109.93114471 63.43170547]
[120.12750244 67.89468384]
[128.58729553 75.12764740]
[134.58064270 84.50654602]
[137.59042358 95.22219086]
[152.55067444 96.31350708]
[167.51092529 97.40481567]
[182.47117615 98.49612427]
[197.43142700 99.58743286]
[212.41113281 100.36727905]
[227.40383911 100.83532715]
[242.39653015 101.30336761]
[251.05317688 88.53363037]
[265.24841309 82.49219513]
[280.45257568 85.10686493]
[291.81411743 95.54330444]
[295.70755005 110.47128296]
[290.89056396 125.12734222]
[278.90017700 134.83477783]
[263.56250000 136.49598694]
[249.77175903 129.58088684]
[241.92849731 116.29605865]
[226.93579102 115.82801819]
[211.94309998 115.35997772]
[207.86978149 117.96452332]
[202.10519409 117.99316406]
[196.34011841 114.54768372]
[181.37986755 113.45637512]
[166.41961670 112.36506653]
[151.45936584 111.27375031]
[136.49911499 110.18244171]
[130.26507568 125.59616852]
[117.58270264 137.46127319]
[100.38309479 143.12538147]
[100.69515228 158.12214661]
[101.00720215 173.11889648]
[101.31925964 188.11564636]
[101.63131714 203.11239624]
[101.94337463 218.10916138]
[102.25543213 233.10591125]
[102.56748962 248.10266113]
[102.87953949 263.09942627]
[117.53453827 266.69018555]
[130.76034546 273.95245361]
[141.65521240 284.39105225]
[149.47630310 297.29425049]
[153.69038391 311.78231812]
[154.01010132 326.86740112]
[150.41368103 341.52102661]
[143.14631653 354.74401855]
[132.70350647 365.63485718]
[119.79727936 373.45095825]
[105.30758667 377.65945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 28]
[21 27]
[22 26]
[30 41]
[31 40]
[32 39]
[33 38]
[43 97]
[44 96]
[45 95]
[48 92]
[49 91]
[50 90]
[57 89]
[58 88]
[59 87]
[60 86]
[67 85]
[68 84]
[102 128]
[103 127]
[104 126]
[105 125]
[106 124]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
