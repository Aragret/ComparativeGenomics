%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUACAGUCAGAGGGGGGGGGGGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACCUCCUACUCCUxxxxxxxxxxUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCGUACAUAGCCCCCCCCCCCACAUUACAGUCAAA\
) } def
/len { sequence length } bind def

/coor [
[75.78129578 419.99655151]
[61.41904449 415.48983765]
[48.25815582 408.18395996]
[36.83755875 398.37808228]
[27.62491798 386.47378540]
[20.99748993 372.95852661]
[17.22665977 358.38577271]
[16.46684456 343.35223389]
[18.74915314 328.47351074]
[23.98013115 314.35891724]
[31.94556999 301.58642578]
[42.31929016 290.67904663]
[54.67649841 282.08343506]
[68.51116943 276.15161133]
[83.25678253 273.12643433]
[83.25678253 258.12643433]
[83.25678253 243.12643433]
[83.25678253 228.12643433]
[83.25678253 213.12643433]
[83.25678253 198.12643433]
[83.25678253 183.12643433]
[83.25678253 168.12643433]
[83.25678253 153.12643433]
[83.25678253 138.12643433]
[83.25678253 123.12642670]
[80.88359833 92.34242249]
[71.31767273 80.78849792]
[61.75174332 69.23458099]
[49.36741257 77.71653748]
[36.26308060 85.03717804]
[22.54733467 91.13582611]
[8.33383083 95.96195984]
[-6.25965118 99.47557831]
[-21.11218262 101.64757538]
[-36.10068893 102.45993805]
[-51.10096741 101.90595245]
[-65.98871613 99.99019623]
[-80.64057159 96.72854614]
[-94.93511963 92.14803314]
[-108.75391388 86.28661346]
[-121.98243713 79.19285583]
[-134.51107788 70.92553711]
[-146.23600769 61.55318069]
[-157.06008911 51.15343475]
[-166.89360046 39.81248093]
[-175.65507507 27.62430000]
[-183.27191162 14.68988419]
[-189.68098450 1.11641693]
[-194.82919312 -12.98362637]
[-198.67385864 -27.49340630]
[-201.18315125 -42.29268646]
[-202.33625793 -57.25883484]
[-202.12362671 -72.26782990]
[-200.54702759 -87.19531250]
[-197.61952209 -101.91757202]
[-193.36535645 -116.31261444]
[-187.81979370 -130.26116943]
[-181.02879333 -143.64762878]
[-173.04861450 -156.36108398]
[-163.94538879 -168.29618835]
[-153.79455566 -179.35401917]
[-142.68022156 -189.44297791]
[-130.69448853 -198.47943115]
[-117.93669128 -206.38851929]
[-104.51252747 -213.10470581]
[-90.53324127 -218.57231140]
[-76.11466980 -222.74604797]
[-61.37630081 -225.59133911]
[-46.44025421 -227.08459473]
[-31.43030357 -227.21343994]
[-16.47082520 -225.97680664]
[-1.68578160 -223.38494873]
[12.80231094 -219.45933533]
[26.87339783 -214.23249817]
[40.41087723 -207.74775696]
[53.30257416 -200.05885315]
[65.44165802 -191.22947693]
[76.72754669 -181.33280945]
[87.06670380 -170.45085144]
[96.37347412 -158.67378235]
[104.57072449 -146.09918213]
[111.59053040 -132.83126831]
[117.37471771 -118.97998047]
[121.87536621 -104.66008759]
[125.05517578 -89.99024963]
[126.88780212 -75.09203339]
[127.35805511 -60.08890152]
[126.46202850 -45.10516357]
[124.20716095 -30.26498795]
[120.61213684 -15.69134521]
[115.70674133 -1.50500298]
[109.53162384 12.17648602]
[102.13794708 25.23974991]
[93.58699799 37.57654190]
[83.94960785 49.08462906]
[73.30566406 59.66865540]
[82.87158966 71.22257233]
[92.43751526 82.77648926]
[86.58317566 68.96611023]
[89.50027466 54.25248718]
[100.18072510 43.72025681]
[114.93367004 41.00906372]
[128.66090393 47.05582047]
[136.61865234 59.77093506]
[136.05696106 74.76041412]
[127.16991425 86.84430695]
[113.02828979 91.84677124]
[128.00999451 91.10613251]
[142.99169922 90.36548615]
[157.97340393 89.62484741]
[173.17745972 79.28019714]
[188.47529602 87.83284760]
[203.43943787 86.79635620]
[218.40357971 85.75986481]
[233.36773682 84.72337341]
[246.65959167 75.11825562]
[261.51107788 82.07277679]
[262.64425659 98.43272400]
[248.89340210 107.36838531]
[234.40422058 99.68752289]
[219.44007874 100.72401428]
[204.47593689 101.76050568]
[189.51177979 102.79699707]
[181.30645752 111.73043060]
[168.81166077 112.68733215]
[158.71405029 104.60655212]
[143.73234558 105.34719086]
[128.75064087 106.08783722]
[113.76892853 106.82847595]
[127.43272400 113.01723480]
[130.30102539 127.74044800]
[119.95961761 138.60577393]
[105.11273193 136.46801758]
[98.25678253 123.12642670]
[98.25678253 138.12643433]
[98.25678253 153.12643433]
[98.25678253 168.12643433]
[98.25678253 183.12643433]
[98.25678253 198.12643433]
[98.25678253 213.12643433]
[98.25678253 228.12643433]
[98.25678253 243.12643433]
[98.25678253 258.12643433]
[98.25678253 273.12643433]
[113.00240326 276.15161133]
[126.83707428 282.08343506]
[139.19427490 290.67904663]
[149.56799316 301.58642578]
[157.53343201 314.35891724]
[162.76441956 328.47351074]
[165.04672241 343.35223389]
[164.28691101 358.38577271]
[160.51608276 372.95852661]
[153.88865662 386.47378540]
[144.67601013 398.37808228]
[133.25541687 408.18395996]
[120.09452820 415.48983765]
[105.73227692 419.99655151]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 98]
[27 97]
[28 96]
[107 129]
[108 128]
[109 127]
[110 126]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
