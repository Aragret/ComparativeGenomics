%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCUAGCCAGGGGGGGGGGUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGxxxxxxxxxxUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUCCCCCCCCCCACCCUAGCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 343.13916016]
[71.19830322 337.12313843]
[59.48964310 327.59371948]
[50.78712082 315.25805664]
[45.73651886 301.03152466]
[44.71262741 285.96984863]
[47.79142761 271.19067383]
[54.74444962 257.79077148]
[65.05573273 246.76443481]
[77.96011353 238.92991638]
[92.50000000 234.86860657]
[92.50000000 219.86860657]
[92.50000000 204.86860657]
[92.50000000 189.86860657]
[92.50000000 174.86860657]
[92.50000000 159.86860657]
[92.50000000 144.86860657]
[92.50000000 129.86860657]
[92.50000000 114.86860657]
[80.80037689 105.48144531]
[66.15687561 108.73226929]
[51.51337433 111.98309326]
[39.71802521 122.52730560]
[25.61639595 117.73217010]
[10.97289467 120.98299408]
[8.37207603 135.95977783]
[0.23364197 148.79856873]
[-12.20135593 157.54151917]
[-27.03667068 160.85540771]
[-42.01002502 158.23489380]
[-54.83808899 150.07957458]
[-63.56467819 137.63308716]
[-66.85905457 122.79342651]
[-64.21884155 107.82353210]
[-56.04665756 95.00621033]
[-43.58869934 86.29599762]
[-28.74471855 83.02114868]
[-13.77830982 85.68105316]
[-0.97174513 93.87008667]
[7.72206879 106.33949280]
[22.36557007 103.08866882]
[33.11351776 92.77697754]
[48.26254654 97.33959198]
[62.90604782 94.08876801]
[77.54955292 90.83794403]
[84.19425964 87.45409393]
[90.68565369 86.85385132]
[96.06365967 88.61832428]
[99.60523987 92.03491974]
[108.11633301 79.68334198]
[116.62742615 67.33177185]
[118.08653259 51.57799530]
[131.67926025 45.48806381]
[140.19033813 33.13648987]
[141.64945984 17.38271141]
[155.24217224 11.29278088]
[156.70129395 -4.46099901]
[170.29400635 -10.55093002]
[178.80509949 -22.90250206]
[179.43627930 -43.00846863]
[197.14543152 -50.67758942]
[205.13536072 -63.37252045]
[213.12527466 -76.06745148]
[221.11518860 -88.76237488]
[223.05841064 -97.75547028]
[229.40570068 -101.63587952]
[237.65798950 -114.16184235]
[245.91027832 -126.68780518]
[234.66560364 -136.65464783]
[224.95387268 -148.12037659]
[216.97280884 -160.85157776]
[210.88490295 -174.58905029]
[206.81408691 -189.05311584]
[204.84323120 -203.94931030]
[205.01248169 -218.97436523]
[207.31838989 -233.82237244]
[211.71398926 -248.19107056]
[218.10980225 -261.78793335]
[226.37561035 -274.33612061]
[236.34315491 -285.58016968]
[247.80949402 -295.29119873]
[260.54119873 -303.27145386]
[274.27902222 -309.35852051]
[288.74334717 -313.42843628]
[303.63967896 -315.39837646]
[318.66470337 -315.22817993]
[333.51257324 -312.92138672]
[347.88101196 -308.52487183]
[361.47744751 -302.12823486]
[374.02514648 -293.86163330]
[385.26858521 -283.89340210]
[394.97888184 -272.42645264]
[402.95837402 -259.69427490]
[409.04458618 -245.95605469]
[413.11361694 -231.49148560]
[415.08261108 -216.59504700]
[414.91149902 -201.57002258]
[412.60375977 -186.72229004]
[408.20639038 -172.35412598]
[401.80889893 -158.75807190]
[393.54153442 -146.21090698]
[383.57260132 -134.96807861]
[372.10504150 -125.25848389]
[359.37237549 -117.27978516]
[345.63375854 -111.19442749]
[331.16894531 -107.12629700]
[316.27239990 -105.15821838]
[301.24737549 -105.33025360]
[286.39978027 -107.63890839]
[272.03189087 -112.03717804]
[258.43624878 -118.43551636]
[250.18394470 -105.90955353]
[241.93165588 -93.38359070]
[233.81011963 -80.77246094]
[225.82020569 -68.07752991]
[217.83029175 -55.38260269]
[209.84036255 -42.68767166]
[213.00762939 -32.88969803]
[210.16596985 -22.76329613]
[202.02975464 -15.75575352]
[191.15667725 -14.39141178]
[182.64558411 -2.03983951]
[181.79524231 12.83047295]
[167.59375000 19.80387115]
[166.74340820 34.67418289]
[152.54191589 41.64757919]
[144.03082275 53.99915314]
[143.18048096 68.86946869]
[128.97898865 75.84286499]
[120.46790314 88.19443512]
[111.95681763 100.54600525]
[107.50000000 114.86860657]
[107.50000000 129.86860657]
[107.50000000 144.86860657]
[107.50000000 159.86860657]
[107.50000000 174.86860657]
[107.50000000 189.86860657]
[107.50000000 204.86860657]
[107.50000000 219.86860657]
[107.50000000 234.86860657]
[122.03988647 238.92991638]
[134.94427490 246.76443481]
[145.25555420 257.79077148]
[152.20857239 271.19067383]
[155.28736877 285.96984863]
[154.26348877 301.03152466]
[149.21287537 315.25805664]
[140.51036072 327.59371948]
[128.80169678 337.12313843]
[114.95575714 343.13916016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 45]
[21 44]
[22 43]
[24 41]
[25 40]
[49 131]
[50 130]
[51 129]
[53 127]
[54 126]
[56 124]
[58 122]
[59 121]
[61 117]
[62 116]
[63 115]
[64 114]
[66 113]
[67 112]
[68 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
