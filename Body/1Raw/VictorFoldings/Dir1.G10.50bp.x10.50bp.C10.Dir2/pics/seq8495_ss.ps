%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAACUAUCGGGGGGGGGGUAUAAACCUAGCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGxxxxxxxxxxCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCCCCCCCCCCCUCAACUAUC\
) } def
/len { sequence length } bind def

/coor [
[50.40171814 384.01672363]
[37.84349442 375.66555786]
[27.75727272 364.45312500]
[20.77707863 351.08419800]
[17.34169579 336.39923096]
[17.66707230 321.32125854]
[21.73275757 306.79812622]
[29.28317642 293.74279785]
[39.84370422 282.97589111]
[52.75049973 275.17425537]
[67.19223022 270.82830811]
[66.56825256 255.84129333]
[65.94427490 240.85427856]
[65.32029724 225.86726379]
[64.69631958 210.88024902]
[64.07234192 195.89323425]
[63.44836426 180.90621948]
[62.82438660 165.91920471]
[62.20040894 150.93218994]
[61.57643127 135.94517517]
[60.95245361 120.95815277]
[49.65345001 111.09243011]
[34.71914291 112.49473572]
[19.78483391 113.89704132]
[4.85052729 115.29933929]
[1.98195755 130.12998962]
[-4.94991589 143.55108643]
[-15.38315678 154.47463989]
[-28.47198868 162.01513672]
[-43.15536118 165.56130981]
[-58.24295425 164.82566833]
[-72.51168823 159.86785889]
[-84.80486298 151.08978271]
[-94.12591553 139.20303345]
[-99.71924591 125.17124176]
[-101.13140869 110.13187408]
[-98.24794769 95.30412292]
[-91.30258942 81.88999939]
[-80.85838318 70.97692108]
[-67.76197815 63.44957733]
[-53.07505417 59.91816330]
[-37.98820496 60.66896057]
[-23.72446060 65.64110565]
[-11.44011307 74.43152618]
[-2.13100266 86.32762146]
[3.44822359 100.36503601]
[18.38253212 98.96273041]
[33.31683731 97.56042480]
[48.25114822 96.15811920]
[57.99879837 84.75710297]
[57.06317139 69.78630829]
[56.12754059 54.81551743]
[52.44868851 46.38237762]
[55.33147049 39.52415466]
[54.70749283 24.53713799]
[54.08351898 9.55012131]
[41.33983994 3.69823241]
[32.41418457 -7.03134298]
[29.01218414 -20.49876022]
[31.74520493 -34.05007935]
[40.02140427 -45.04024124]
[52.17272568 -51.34934616]
[51.86066818 -66.34609985]
[51.54861069 -81.34285736]
[51.23655701 -96.33960724]
[36.69828033 -100.47843933]
[24.02674675 -108.72002411]
[14.34870148 -120.33152008]
[8.52470970 -134.28044128]
[7.07263708 -149.32646179]
[10.12160015 -164.13171387]
[17.40048790 -177.37969971]
[28.26206589 -187.89244080]
[41.74052811 -194.73512268]
[56.63738251 -197.29933167]
[71.62801361 -195.35702515]
[85.37945557 -189.08094788]
[96.66894531 -179.02914429]
[104.49263000 -166.09541321]
[108.15483093 -151.42980957]
[107.32990265 -136.33641052]
[102.09120941 -122.15728760]
[92.90456390 -110.15324402]
[80.58683014 -101.39168549]
[66.23330688 -96.65166473]
[66.54536438 -81.65491486]
[66.85742188 -66.65815735]
[67.16947937 -51.66140366]
[81.49327850 -44.24653625]
[90.18898010 -30.55103111]
[90.81372070 -14.24643898]
[83.10350800 0.23969677]
[69.07053375 8.92614365]
[69.69451141 23.91316032]
[70.31848907 38.90017700]
[71.09833527 53.87989044]
[72.03395844 68.85068512]
[72.96958923 83.82147217]
[83.57086182 74.50777435]
[96.69800568 71.03435516]
[109.47467041 73.67430115]
[119.31103516 81.41090393]
[124.42858124 92.24546051]
[139.42776489 92.08942413]
[154.42695618 91.93338776]
[169.42614746 91.77735138]
[184.42289734 91.46530151]
[199.41558838 90.99725342]
[214.40829468 90.52921295]
[225.04544067 78.84047699]
[240.83593750 78.18035126]
[252.41156006 88.94048309]
[252.90469360 104.73708344]
[242.02278137 116.19829559]
[226.22186279 116.52439117]
[214.87632751 105.52191162]
[199.88363647 105.98995209]
[184.89094543 106.45799255]
[178.26062012 109.83209991]
[169.58218384 106.77654266]
[154.58299255 106.93257904]
[139.58380127 107.08861542]
[124.58461761 107.24465179]
[120.20026398 117.61873627]
[111.48215485 125.51415253]
[99.77280426 129.15235901]
[87.12433624 127.45883942]
[75.93946838 120.33417511]
[76.56344604 135.32119751]
[77.18742371 150.30821228]
[77.81140137 165.29522705]
[78.43537903 180.28224182]
[79.05935669 195.26925659]
[79.68333435 210.25627136]
[80.30731201 225.24328613]
[80.93128967 240.23030090]
[81.55526733 255.21731567]
[82.17924500 270.20434570]
[96.93225098 273.33477783]
[110.44288635 280.03652954]
[121.86186218 289.88833618]
[130.47137451 302.27084351]
[135.73022461 316.40576172]
[137.30783081 331.40447998]
[135.10502625 346.32421875]
[129.26028442 360.22708130]
[120.14099884 372.23913574]
[108.32042694 381.60531616]
[94.54161835 387.73678589]
[79.67071533 390.24819946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 49]
[23 48]
[24 47]
[25 46]
[50 98]
[51 97]
[52 96]
[54 95]
[55 94]
[56 93]
[62 88]
[63 87]
[64 86]
[65 85]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
