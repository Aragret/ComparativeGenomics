%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCACUCCACGGGGGGGGGGCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGxxxxxxxxxxCCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUACAUAACCCCCCCCCCAAACCCAAUCCAC\
) } def
/len { sequence length } bind def

/coor [
[69.63291168 523.47131348]
[55.36114120 518.66192627]
[42.45715714 510.89651489]
[31.52450180 500.53836060]
[23.07451439 488.07196045]
[17.50241852 474.08032227]
[15.06882954 459.21789551]
[15.88757038 444.17980957]
[19.92034721 429.66943359]
[26.97854042 416.36544800]
[36.73202515 404.89010620]
[48.72461319 395.78012085]
[62.39538956 389.46157837]
[77.10494995 386.23001099]
[77.10494995 371.23001099]
[77.10494995 356.23001099]
[77.10494995 341.23001099]
[77.10494995 326.23001099]
[77.10494995 311.23001099]
[77.10494995 296.23001099]
[77.10494995 281.23001099]
[77.10494995 266.23001099]
[77.10494995 251.23002625]
[73.94234467 244.50352478]
[77.25802612 235.93063354]
[77.55815887 220.93363953]
[77.25802612 205.93664551]
[76.35810852 190.96366882]
[75.45819092 175.99067688]
[74.55827332 161.01770020]
[73.65836334 146.04472351]
[70.09790039 139.52008057]
[72.89328766 130.76371765]
[72.29314423 115.77572632]
[68.14575958 101.36048126]
[60.68912506 88.34516144]
[53.23248672 75.32984161]
[45.77585220 62.31451797]
[31.99315643 68.27415466]
[17.62984467 72.65311432]
[2.86655283 75.39633179]
[-12.11105537 76.46929932]
[-27.11462021 75.85852814]
[-41.95545578 73.57170868]
[-56.44692612 69.63758087]
[-70.40678406 64.10562897]
[-83.65946198 57.04543304]
[-96.03830719 48.54576874]
[-107.38763428 38.71353531]
[-117.56471252 27.67238045]
[-126.44155121 15.56116009]
[-133.90652466 2.53218627]
[-139.86575317 -11.25068951]
[-144.24427795 -25.61413193]
[-146.98706055 -40.37750626]
[-148.05958557 -55.35514450]
[-147.44836426 -70.35869598]
[-145.16108704 -85.19946289]
[-141.22653198 -99.69081116]
[-135.69416809 -113.65050507]
[-128.63357544 -126.90297699]
[-120.13353729 -139.28155518]
[-110.30096436 -150.63059998]
[-99.25950623 -160.80734253]
[-87.14801788 -169.68382263]
[-74.11882019 -177.14840698]
[-60.33576965 -183.10722351]
[-45.97219467 -187.48532104]
[-31.20874023 -190.22766113]
[-16.23106766 -191.29972839]
[-1.22753835 -190.68806458]
[13.61316204 -188.40034485]
[28.10439491 -184.46534729]
[42.06391907 -178.93257141]
[55.31618118 -171.87158203]
[67.69451141 -163.37117004]
[79.04325104 -153.53826904]
[89.21966553 -142.49650574]
[98.09578705 -130.38475037]
[105.55998230 -117.35533142]
[111.51838684 -103.57209778]
[115.89605713 -89.20838928]
[118.63794708 -74.44485474]
[119.70957184 -59.46715164]
[119.09745789 -44.46363831]
[116.80929565 -29.62300873]
[112.87387085 -15.13189220]
[107.34067535 -1.17253292]
[100.27928162 12.07951546]
[91.77851105 24.45759583]
[81.94525909 35.80603790]
[70.90319061 45.98212814]
[58.79117584 54.85788345]
[66.24781036 67.87320709]
[73.70444489 80.88852692]
[81.16107941 93.90384674]
[89.51044464 84.55113220]
[101.13745880 82.49069214]
[110.90306854 87.72377777]
[124.88696289 82.29692078]
[138.87084961 76.87006378]
[139.17802429 61.67223358]
[145.28236389 47.75082779]
[156.25299072 37.22875977]
[170.41696167 31.71057129]
[185.61436462 32.03774261]
[199.52774048 38.16038513]
[210.03535461 49.14484024]
[215.53491211 63.31605530]
[215.18774414 78.51302338]
[209.04681396 92.41832733]
[198.04853821 102.91149139]
[183.87010193 108.39239502]
[168.67359924 108.02524567]
[154.77639771 101.86602020]
[144.29771423 90.85395813]
[130.31381226 96.28081512]
[116.32992554 101.70767212]
[111.89863586 112.89543152]
[100.44498444 118.66815948]
[87.28112793 115.17558289]
[87.88127136 130.16357422]
[88.63134003 145.14480591]
[89.53125763 160.11778259]
[90.43117523 175.09077454]
[91.33109283 190.06375122]
[92.23100281 205.03672791]
[94.83402252 208.67066956]
[95.99240875 212.55534363]
[95.80912018 216.19480896]
[94.54087830 219.18032837]
[92.55515289 221.23377991]
[92.25502014 236.23077393]
[92.10494995 251.23002625]
[92.10494995 266.23001099]
[92.10494995 281.23001099]
[92.10494995 296.23001099]
[92.10494995 311.23001099]
[92.10494995 326.23001099]
[92.10494995 341.23001099]
[92.10494995 356.23001099]
[92.10494995 371.23001099]
[92.10494995 386.23001099]
[106.81450653 389.46157837]
[120.48528290 395.78012085]
[132.47787476 404.89010620]
[142.23135376 416.36544800]
[149.28955078 429.66943359]
[153.32232666 444.17980957]
[154.14106750 459.21789551]
[151.70747375 474.08032227]
[146.13537598 488.07196045]
[137.68539429 500.53836060]
[126.75273895 510.89651489]
[113.84875488 518.66192627]
[99.57698822 523.47131348]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[25 133]
[26 132]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[33 122]
[34 121]
[35 96]
[36 95]
[37 94]
[38 93]
[99 118]
[100 117]
[101 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
