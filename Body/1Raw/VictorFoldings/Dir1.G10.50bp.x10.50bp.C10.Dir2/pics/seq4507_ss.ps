%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCCUUAGGGGGGGGGGUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCxxxxxxxxxxAUACUCUUCAAUCAGCCACAUAGCCCUCGUAGUAACAGCCAUUCUCAUCCCCCCCCCCCCAAACCCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[60.06229401 509.84191895]
[46.04034805 504.28890991]
[33.84039307 495.42257690]
[24.22932053 483.80026245]
[17.81129456 470.15255737]
[14.98975849 455.33737183]
[15.94207382 440.28601074]
[20.60837936 425.94458008]
[28.69534492 413.21463013]
[39.69462204 402.89636230]
[52.91477966 395.63836670]
[67.52479553 391.89694214]
[67.52479553 376.89694214]
[67.52479553 361.89694214]
[67.52479553 346.89694214]
[67.52479553 331.89694214]
[67.52479553 316.89694214]
[67.52479553 301.89694214]
[67.52479553 286.89694214]
[67.52479553 271.89694214]
[67.52479553 256.89694214]
[55.91638947 266.39666748]
[40.97299576 265.09472656]
[31.18235397 253.73060608]
[32.10547256 238.75903320]
[43.21802902 228.68376160]
[58.20817184 229.22747803]
[68.56189728 240.08206177]
[70.40522003 225.19575500]
[72.24855042 210.30944824]
[70.32692719 207.28379822]
[69.81101227 203.16027832]
[71.20806122 198.62663269]
[74.69113159 194.57405090]
[77.44737244 179.82945251]
[80.20362091 165.08485413]
[82.95986176 150.34025574]
[85.71610260 135.59565735]
[88.47234344 120.85106659]
[91.22859192 106.10646820]
[92.30565643 91.14518738]
[91.68983459 76.15783691]
[91.07400513 61.17048264]
[74.67276764 56.88381195]
[60.38964462 47.78629684]
[49.59349060 34.76276779]
[43.31500626 19.07368279]
[42.14834595 2.23314142]
[46.19489670 -14.13723183]
[55.05459213 -28.46444130]
[67.86540985 -39.37526703]
[83.38726044 -45.82787323]
[81.84996796 -60.74888992]
[80.31267548 -75.66990662]
[78.77538300 -90.59091949]
[73.64508057 -104.68630981]
[65.23166656 -117.10462952]
[56.81825638 -129.52293396]
[48.40484619 -141.94125366]
[32.98516083 -146.36988831]
[26.96691704 -161.24134827]
[34.96679688 -175.14752197]
[50.84797668 -177.42077637]
[62.42777634 -166.31727600]
[60.82316208 -150.35466003]
[69.23657227 -137.93635559]
[77.64997864 -125.51803589]
[86.06339264 -113.09972382]
[85.26069641 -128.07823181]
[87.99971008 -142.82603455]
[94.12708282 -156.51747131]
[103.29976654 -168.38598633]
[115.00421906 -177.76713562]
[128.58514404 -184.13568115]
[143.28221130 -187.13507080]
[158.27256775 -186.59739685]
[172.71697998 -182.55274963]
[185.80673218 -175.22756958]
[196.80900574 -165.03198242]
[205.10780334 -152.53678894]
[210.23851013 -138.44154358]
[211.91389465 -123.53540039]
[210.04013062 -108.65289307]
[204.72213745 -94.62723541]
[196.25765991 -82.24367523]
[185.12057495 -72.19552612]
[171.93441772 -65.04534149]
[157.43742371 -61.19342804]
[142.44123840 -60.85544968]
[127.78542328 -64.05032349]
[114.29051971 -70.59918213]
[102.71205139 -80.13537598]
[93.69639587 -92.12821198]
[95.23368835 -77.20719910]
[96.77098083 -62.28618240]
[98.30827332 -47.36516571]
[111.33046722 -45.33077621]
[123.48567963 -40.20794678]
[134.05250549 -32.29521942]
[142.40249634 -22.05687904]
[148.03750610 -10.09571075]
[150.61943054 2.88249135]
[149.99050903 16.11056709]
[146.18287659 28.80533791]
[139.41708374 40.21397781]
[130.08921814 49.65866089]
[118.74776459 56.57681656]
[106.06136322 60.55465698]
[106.67718506 75.54200745]
[107.29301453 90.52936554]
[115.78324890 78.16345215]
[128.98799133 71.04763794]
[143.98516846 70.75658417]
[157.45605469 77.35469818]
[166.41970825 89.38188171]
[168.89253235 104.17665100]
[164.32733154 118.46507263]
[153.73434448 129.08526611]
[139.45768738 133.68710327]
[124.65662384 131.25224304]
[112.60648346 122.31949615]
[105.97318268 108.86270905]
[103.21694183 123.60730743]
[100.46070099 138.35189819]
[97.70446014 153.09649658]
[94.94821167 167.84109497]
[92.19197083 182.58569336]
[89.43572998 197.33029175]
[87.13485718 212.15277100]
[85.29152679 227.03907776]
[83.44820404 241.92538452]
[82.52479553 256.89694214]
[82.52479553 271.89694214]
[82.52479553 286.89694214]
[82.52479553 301.89694214]
[82.52479553 316.89694214]
[82.52479553 331.89694214]
[82.52479553 346.89694214]
[82.52479553 361.89694214]
[82.52479553 376.89694214]
[82.52479553 391.89694214]
[97.13480377 395.63836670]
[110.35496521 402.89636230]
[121.35424042 413.21463013]
[129.44120789 425.94458008]
[134.10751343 440.28601074]
[135.05982971 455.33737183]
[132.23829651 470.15255737]
[125.82026672 483.80026245]
[116.20919037 495.42257690]
[104.00923157 504.28890991]
[89.98728943 509.84191895]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 131]
[29 130]
[30 129]
[34 128]
[35 127]
[36 126]
[37 125]
[38 124]
[39 123]
[40 122]
[41 110]
[42 109]
[43 108]
[52 96]
[53 95]
[54 94]
[55 93]
[56 68]
[57 67]
[58 66]
[59 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
