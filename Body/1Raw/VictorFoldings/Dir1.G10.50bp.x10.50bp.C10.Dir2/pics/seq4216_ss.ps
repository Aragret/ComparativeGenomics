%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCAAGACCGGGGGGGGGGCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUxxxxxxxxxxUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACCCCCCCCCCCUCACCAAGACC\
) } def
/len { sequence length } bind def

/coor [
[223.83732605 255.00526428]
[215.40924072 242.59051514]
[207.80241394 229.65625000]
[201.04879761 216.25671387]
[195.17668152 202.44812012]
[190.21072388 188.28839111]
[186.17173767 173.83689880]
[183.07666016 159.15428162]
[180.93847656 144.30210876]
[179.76617432 129.34266663]
[179.56465149 114.33872986]
[164.58441162 113.56906891]
[149.60417175 112.79940796]
[134.62393188 112.02974701]
[119.64368439 111.26009369]
[104.66344452 110.49043274]
[90.01071930 113.69942474]
[76.72337341 120.65978241]
[63.43603516 127.62014008]
[50.14869308 134.58049011]
[36.86135101 141.54084778]
[36.31097031 156.88987732]
[28.14621735 169.89881897]
[14.56336594 177.06831360]
[-0.78386086 176.46981812]
[-13.76713753 168.26432800]
[-20.89402962 154.65907288]
[-20.24743462 139.31379700]
[-12.00128841 126.35630798]
[1.62624085 119.27209473]
[16.96941376 119.96678925]
[29.90099716 128.25350952]
[43.18833923 121.29315186]
[56.47567749 114.33279419]
[69.76302338 107.37244415]
[83.05036163 100.41208649]
[82.28070068 85.43184662]
[68.34998322 79.86990356]
[54.41926956 74.30796814]
[40.48855209 68.74603271]
[26.55783653 63.18409348]
[12.62712097 57.62215805]
[0.61290568 67.19055176]
[-14.57828140 69.45404816]
[-28.86008644 63.80377579]
[-38.39077759 51.75962448]
[-40.60664368 36.56142044]
[-34.91163254 22.29739380]
[-22.83766747 12.80450344]
[-7.63258982 10.63628578]
[6.61351347 16.37598228]
[16.06851196 28.47964096]
[18.18905830 43.69144058]
[32.11977386 49.25337982]
[46.05049133 54.81531525]
[59.98120499 60.37725449]
[73.91192627 65.93919373]
[87.84263611 71.50112915]
[96.17491150 74.08419800]
[102.35327148 78.72025299]
[105.96157074 84.48345184]
[106.91035461 90.39162445]
[105.43310547 95.51019287]
[120.41334534 96.27984619]
[135.39358521 97.04950714]
[150.37382507 97.81916809]
[165.35406494 98.58882904]
[180.33430481 99.35848999]
[182.07246399 84.45420837]
[184.77174377 69.69368744]
[188.42079163 55.13885117]
[193.00433350 40.85074234]
[198.50314331 26.88929176]
[204.89413452 13.31305790]
[212.15051270 0.17898484]
[220.24183655 -12.45783710]
[229.13418579 -24.54440498]
[238.79025269 -36.03002548]
[249.16952515 -46.86651611]
[260.22848511 -57.00843430]
[271.92071533 -66.41323090]
[284.19720459 -75.04147339]
[297.00646973 -82.85695648]
[310.29476929 -89.82690430]
[324.00634766 -95.92208099]
[338.08374023 -101.11692810]
[352.46786499 -105.38964844]
[367.09838867 -108.72232819]
[381.91394043 -111.10097504]
[396.85238647 -112.51562500]
[411.85110474 -112.96034241]
[426.84713745 -112.43326569]
[441.77761841 -110.93659210]
[456.57989502 -108.47660828]
[471.19189453 -105.06362915]
[485.55230713 -100.71198273]
[499.60095215 -95.43990326]
[513.27886963 -89.26950836]
[526.52868652 -82.22668457]
[539.29479980 -74.34097290]
[551.52374268 -65.64544678]
[563.16418457 -56.17657471]
[574.16723633 -45.97407532]
[584.48687744 -35.08074188]
[594.07971191 -23.54226685]
[602.90551758 -11.40704441]
[610.92730713 1.27402437]
[618.11145020 14.44775105]
[624.42779541 28.05887794]
[629.84985352 42.05031967]
[634.35485840 56.36338425]
[637.92388916 70.93804169]
[640.54211426 85.71315765]
[642.19836426 100.62677002]
[642.88580322 115.61631012]
[642.60156250 130.61891174]
[641.34674072 145.57165527]
[639.12670898 160.41180420]
[635.95068359 175.07713318]
[631.83209229 189.50613403]
[626.78808594 203.63825989]
[620.83990479 217.41426086]
[614.01251221 230.77635193]
[606.33447266 243.66847229]
[597.83807373 256.03656006]
[588.55883789 267.82873535]
[578.53582764 278.99551392]
[567.81091309 289.49011230]
[556.42926025 299.26846313]
[544.43847656 308.28958130]
[531.88891602 316.51559448]
[518.83325195 323.91204834]
[505.32614136 330.44787598]
[491.42428589 336.09570312]
[477.18603516 340.83181763]
[462.67105103 344.63635254]
[447.94024658 347.49331665]
[433.05541992 349.39080811]
[418.07897949 350.32080078]
[403.07373047 350.27941895]
[388.10263062 349.26684570]
[373.22848511 347.28732300]
[358.51367188 344.34912109]
[344.01989746 340.46459961]
[329.80795288 335.65005493]
[315.93746948 329.92565918]
[302.46664429 323.31542969]
[289.45190430 315.84710693]
[276.94790649 307.55200195]
[265.00708008 298.46487427]
[253.67950439 288.62390137]
[243.01268005 278.07034302]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 68]
[12 67]
[13 66]
[14 65]
[15 64]
[16 63]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[37 58]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
