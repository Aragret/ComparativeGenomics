%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAGCCCAAGGGGGGGGGGUAUCUACAAUCAACCAACAAGUCAUUAUUACCCUCACUGUCAACCCAACAxxxxxxxxxxCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCCCCCCCCCCCUAACAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[57.10718918 480.13217163]
[43.61831284 473.40063477]
[32.13281250 463.63607788]
[23.31844139 451.40615845]
[17.68766022 437.42196655]
[15.56783104 422.49649048]
[17.08220100 407.49749756]
[22.14272308 393.29699707]
[30.45518875 380.72055054]
[41.53631973 370.49942017]
[54.74187469 363.22778320]
[69.30410004 359.32839966]
[68.99612427 344.33157349]
[68.68814087 329.33471680]
[68.38016510 314.33789062]
[68.07218933 299.34106445]
[67.76421356 284.34420776]
[67.45623016 269.34738159]
[67.14825439 254.35054016]
[66.84027863 239.35369873]
[66.53230286 224.35685730]
[58.94800949 237.29821777]
[47.79319382 247.32667542]
[34.12054825 253.49584961]
[19.22037697 255.22355652]
[4.49883318 252.34672546]
[-8.65479374 245.13685608]
[-18.99917603 234.27436829]
[-25.55810356 220.78436279]
[-27.71259689 205.93989563]
[-25.25933838 191.14186096]
[-18.42984200 177.78678894]
[-7.86861706 167.13500977]
[5.42765808 160.19172668]
[20.20419693 157.61221313]
[35.06651688 159.63989258]
[48.61204147 166.08338928]
[59.56245804 176.33465576]
[66.88436127 189.42623901]
[69.88668060 204.12049866]
[75.01697540 190.02511597]
[80.14727783 175.92973328]
[85.27758026 161.83433533]
[90.40788269 147.73895264]
[60.42602539 112.00356293]
[75.90187836 75.99275970]
[72.24317169 61.44580460]
[68.58446503 46.89884949]
[53.65134811 48.54681778]
[38.63292313 48.14597702]
[23.80897331 45.70378876]
[9.45566082 41.26575470]
[-4.15962219 34.91454697]
[-16.78323174 26.76848984]
[-28.17999649 16.97933578]
[-38.13759995 5.72945356]
[-46.47054291 -6.77157974]
[-53.02358246 -20.29087830]
[-57.67464447 -34.57658386]
[-60.33707809 -49.36256409]
[-60.96128845 -64.37335968]
[-59.53564072 -79.32933807]
[-56.08670044 -93.95187378]
[-50.67871475 -107.96855927]
[-43.41242981 -121.11827087]
[-34.42321777 -133.15603638]
[-23.87853813 -143.85760498]
[-11.97483349 -153.02360535]
[1.06613863 -160.48327637]
[15.00143242 -166.09767151]
[29.57144165 -169.76217651]
[44.50473404 -171.40852356]
[59.52311707 -171.00605774]
[74.34680176 -168.56227112]
[88.69963074 -164.12268066]
[102.31423187 -157.77000427]
[114.93695831 -149.62257385]
[126.33266449 -139.83218384]
[136.28904724 -128.58122253]
[144.62063599 -116.07929230]
[151.17221069 -102.55928802]
[155.82173157 -88.27307892]
[158.48255920 -73.48680878]
[159.10514832 -58.47594070]
[157.67788696 -43.52011871]
[154.22735596 -28.89795494]
[148.81785583 -14.88185596]
[141.55015564 -1.73293161]
[132.55963135 10.30386162]
[122.01379395 21.00428581]
[110.10910034 30.16899681]
[97.06732178 37.62726212]
[83.13141632 43.24014282]
[86.79012299 57.78709793]
[90.44882965 72.33405304]
[96.98217773 76.01717377]
[99.95024109 61.31375122]
[114.85122681 59.59312439]
[121.09212494 73.23318481]
[110.04887390 83.38340759]
[116.58222198 87.06652832]
[130.92228699 82.66622925]
[145.26234436 78.26593018]
[159.60240173 73.86563110]
[173.94245911 69.46533203]
[184.71215820 57.09819794]
[200.75318909 60.50659180]
[205.56393433 76.18424225]
[194.19551086 88.00333405]
[178.34275818 83.80538940]
[164.00270081 88.20568848]
[149.66264343 92.60598755]
[135.32258606 97.00629425]
[120.98252106 101.40659332]
[121.13650513 108.90501404]
[121.44448853 123.90184784]
[121.59847260 131.40026855]
[136.10710144 135.20812988]
[150.62899780 128.38948059]
[164.94992065 135.62071228]
[168.08407593 151.35464478]
[157.62721252 163.52154541]
[141.60093689 162.78800964]
[132.29924011 149.71675110]
[117.79061890 145.90888977]
[104.50327301 152.86924744]
[99.37297058 166.96464539]
[94.24266815 181.06002808]
[89.11236572 195.15541077]
[83.98206329 209.25080872]
[81.52913666 224.04888916]
[81.83711243 239.04573059]
[82.14509583 254.04255676]
[82.45307159 269.03939819]
[82.76104736 284.03622437]
[83.06902313 299.03308105]
[83.37700653 314.02990723]
[83.68498230 329.02676392]
[83.99295807 344.02359009]
[84.30093384 359.02041626]
[99.01097107 362.31866455]
[112.50392914 369.04202271]
[123.99534607 378.79962158]
[132.81712341 391.02416992]
[138.45639038 405.00494385]
[140.58526611 419.92910767]
[139.07998657 434.92904663]
[134.02807617 449.13262939]
[125.72323608 461.71408081]
[114.64830780 471.94195557]
[101.44716644 479.22158813]
[86.88730621 483.12979126]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[40 130]
[41 129]
[42 128]
[43 127]
[44 126]
[46 95]
[47 94]
[48 93]
[101 114]
[102 113]
[103 112]
[104 111]
[105 110]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
