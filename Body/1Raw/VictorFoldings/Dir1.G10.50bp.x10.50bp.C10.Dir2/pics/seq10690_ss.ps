%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAACAAGGGGGGGGGGUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCxxxxxxxxxxGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCCCCCCCCCCCACAACAA\
) } def
/len { sequence length } bind def

/coor [
[130.64468384 559.86932373]
[116.79874420 553.85327148]
[105.09008789 544.32385254]
[96.38755798 531.98822021]
[91.33695984 517.76165771]
[90.31306458 502.70001221]
[93.39186859 487.92083740]
[100.34488678 474.52090454]
[110.65617371 463.49456787]
[123.56055450 455.66006470]
[138.10043335 451.59875488]
[138.10043335 436.59875488]
[138.10043335 421.59875488]
[138.10043335 406.59875488]
[138.10043335 391.59875488]
[138.10043335 376.59875488]
[138.10043335 361.59875488]
[138.10043335 346.59875488]
[138.10043335 331.59875488]
[138.10043335 316.59875488]
[138.10043335 301.59875488]
[129.75187683 292.78915405]
[129.66744995 280.25076294]
[138.44053650 270.73828125]
[138.75259399 255.74153137]
[139.06465149 240.74478149]
[139.37670898 225.74803162]
[139.68876648 210.75128174]
[136.59043884 196.07475281]
[130.24331665 182.48379517]
[123.89617920 168.89285278]
[109.85279083 164.06390381]
[103.22229004 150.37115479]
[108.38255310 135.67390442]
[102.03542328 122.08295441]
[93.48350525 122.82814789]
[84.72619629 120.17369843]
[77.13439941 114.10668182]
[72.04328156 105.16836548]
[70.52993011 94.41877747]
[56.51322174 89.07727051]
[42.49650574 83.73575592]
[29.57745171 92.33096313]
[14.07500362 91.65737152]
[1.95017087 81.97397614]
[-2.13480163 67.00425720]
[3.39084196 52.50436401]
[16.40237808 44.04980469]
[31.89660645 44.89153290]
[43.91567993 54.70588684]
[47.83802032 69.71903992]
[61.85473251 75.06055450]
[75.87144470 80.40206909]
[87.85827637 71.38453674]
[86.61140442 56.43645096]
[85.36453247 41.48836517]
[71.81729126 30.46975708]
[70.42543030 13.40087318]
[81.56182861 0.83749115]
[80.00424957 -14.08142090]
[78.44666290 -29.00033379]
[69.31819916 -41.92247391]
[75.69209290 -55.38437271]
[74.13450623 -70.30328369]
[72.57692719 -85.22219849]
[57.92359161 -89.17747498]
[45.69088745 -98.16220093]
[37.53318787 -110.96128082]
[34.55375290 -125.84373474]
[37.15553284 -140.79682922]
[44.98664856 -153.79829407]
[56.98801422 -163.08978271]
[71.53653717 -167.41468811]
[86.66465759 -166.18811035]
[100.32641602 -159.57594299]
[110.67417145 -148.47241211]
[116.30847168 -134.37918091]
[116.46733093 -119.20224762]
[111.12926483 -104.99417114]
[101.01619720 -93.67647552]
[87.49584198 -86.77977753]
[89.05342102 -71.86087036]
[90.61100006 -56.94195557]
[99.62805939 -45.08691788]
[93.36557770 -30.55791473]
[94.92315674 -15.63900185]
[96.48073578 -0.72008979]
[107.55342865 5.94266844]
[112.82711029 17.95360565]
[110.16094208 30.99659348]
[100.31261444 40.24148941]
[101.55949402 55.18957520]
[102.80636597 70.13766479]
[124.55607605 91.20007324]
[115.62637329 115.73582458]
[121.97350311 129.32676697]
[136.55555725 134.80415344]
[142.79884338 148.67771912]
[137.48713684 162.54571533]
[143.83425903 176.13667297]
[150.18139648 189.72761536]
[151.79374695 174.81452942]
[157.14222717 160.80047607]
[165.87582397 148.60520935]
[177.42132568 139.02912903]
[191.02099609 132.70069885]
[205.78227234 130.03529358]
[220.73637390 131.20780945]
[234.90185547 136.14131165]
[247.34899902 144.51200867]
[257.26089478 155.77050781]
[263.98703003 169.17794800]
[267.08596802 183.85433960]
[266.35430908 198.83648682]
[261.84005737 213.14108276]
[253.83952332 225.82931519]
[242.87776184 236.06845093]
[229.67420959 243.18647766]
[215.09542847 246.71623230]
[200.09823608 246.42604065]
[185.66691589 242.33497620]
[172.74859619 234.71153259]
[162.19111633 224.05603027]
[154.68551636 211.06333923]
[154.37345886 226.06008911]
[154.06140137 241.05683899]
[153.74934387 256.05358887]
[153.43728638 271.05035400]
[162.69154358 286.93551636]
[153.10043335 301.59875488]
[153.10043335 316.59875488]
[153.10043335 331.59875488]
[153.10043335 346.59875488]
[153.10043335 361.59875488]
[153.10043335 376.59875488]
[153.10043335 391.59875488]
[153.10043335 406.59875488]
[153.10043335 421.59875488]
[153.10043335 436.59875488]
[153.10043335 451.59875488]
[167.64031982 455.66006470]
[180.54470825 463.49456787]
[190.85598755 474.52090454]
[197.80902100 487.92083740]
[200.88781738 502.70001221]
[199.86392212 517.76165771]
[194.81332397 531.98822021]
[186.11079407 544.32385254]
[174.40213013 553.85327148]
[160.55619812 559.86932373]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 128]
[25 127]
[26 126]
[27 125]
[28 124]
[29 101]
[30 100]
[31 99]
[34 96]
[35 95]
[40 53]
[41 52]
[42 51]
[54 93]
[55 92]
[56 91]
[59 87]
[60 86]
[61 85]
[63 83]
[64 82]
[65 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
