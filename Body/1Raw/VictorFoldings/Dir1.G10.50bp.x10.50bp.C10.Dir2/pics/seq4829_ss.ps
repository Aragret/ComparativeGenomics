%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAUCCUUGGGGGGGGGGCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACxxxxxxxxxxCAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUACCCCCCCCCCCCCCCAUACUCCUU\
) } def
/len { sequence length } bind def

/coor [
[84.34837341 440.94696045]
[72.01526642 432.29583740]
[61.91681671 421.11688232]
[54.55956268 407.97082520]
[50.31254196 393.51708984]
[49.38878632 378.48065186]
[51.83462143 363.61575317]
[57.52737427 349.66796875]
[66.18149567 337.33694458]
[77.36289978 327.24121094]
[90.51072693 319.88714600]
[104.96549988 315.64364624]
[104.04208374 300.67208862]
[103.11866760 285.70053101]
[102.19525909 270.72897339]
[101.27184296 255.75743103]
[100.34842682 240.78588867]
[99.42501831 225.81433105]
[98.50160217 210.84278870]
[97.57818604 195.87123108]
[96.65477753 180.89968872]
[93.08188629 174.37690735]
[95.86930847 165.61184692]
[95.25348663 150.62449646]
[94.63766479 135.63714600]
[94.02183533 120.64979553]
[83.25315857 110.20778656]
[68.25394440 110.05378723]
[59.57889557 113.10980988]
[52.94918060 109.73948669]
[37.95629501 109.27755737]
[22.96340942 108.81563568]
[16.38178825 122.54888153]
[4.77915621 132.41290283]
[-9.83426094 136.69868469]
[-24.92659950 134.66369629]
[-37.88302231 126.66050720]
[-46.45875168 114.07572174]
[-49.16798401 99.08972931]
[-45.54133606 84.29894257]
[-36.20714569 72.26596069]
[-22.78261375 65.07556152]
[-7.59362316 63.97352982]
[6.72824049 69.15079498]
[17.70162773 79.71037292]
[23.42533493 93.82274628]
[38.41822052 94.28467560]
[53.41110611 94.74659729]
[68.40794373 95.05458069]
[83.40715027 95.20857239]
[84.86702728 89.99466705]
[87.99284363 85.25919342]
[92.61602783 81.53907776]
[98.39477539 79.30860138]
[101.75403595 64.68959045]
[105.11328888 50.07058716]
[90.97704315 45.00079727]
[77.53964996 38.29461670]
[64.98975372 30.04618835]
[53.50354385 20.37131119]
[43.24225616 9.40580273]
[34.34995270 -2.69639921]
[26.95146370 -15.76539707]
[21.15065193 -29.61772346]
[17.02895355 -44.05891418]
[14.64422798 -58.88623428]
[14.02995586 -73.89153290]
[15.19476032 -88.86415863]
[18.12228775 -103.59392548]
[22.77144051 -117.87404633]
[29.07695389 -131.50404358]
[36.95030594 -144.29257202]
[46.28096771 -156.06011963]
[56.93795013 -166.64147949]
[68.77165222 -175.88809204]
[81.61593628 -183.67016602]
[95.29049683 -189.87844849]
[109.60336304 -194.42578125]
[124.35359955 -197.24833679]
[139.33415222 -198.30647278]
[154.33468628 -197.58534241]
[169.14465332 -195.09509277]
[183.55612183 -190.87063599]
[197.36677551 -184.97132874]
[210.38275146 -177.47994995]
[222.42132568 -168.50167847]
[233.31347656 -158.16255188]
[242.90629578 -146.60772705]
[251.06513977 -133.99940491]
[257.67544556 -120.51459503]
[262.64443970 -106.34259796]
[265.90234375 -91.68236542]
[267.40341187 -76.73970795]
[267.12661743 -61.72438812]
[265.07577515 -46.84720612]
[261.27975464 -32.31701279]
[255.79179382 -18.33779144]
[248.68896484 -5.10578346]
[240.07095337 7.19325161]
[230.05874634 18.38665581]
[218.79292297 28.31728745]
[206.43162537 36.84574127]
[193.14837646 43.85228729]
[179.12965393 49.23856735]
[164.57228088 52.92896271]
[149.68058777 54.87166977]
[134.66366577 55.03941727]
[119.73229980 53.42984390]
[116.37303925 68.04885101]
[113.01377869 82.66786194]
[121.68038940 94.91081238]
[136.58483887 96.60121155]
[151.48928833 98.29161072]
[166.39373779 99.98200226]
[181.29817200 101.67240143]
[196.10961914 94.63300323]
[209.45623779 104.16191101]
[207.60816956 120.45658875]
[192.46655273 126.75447845]
[179.60778809 116.57685089]
[164.70333862 114.88645172]
[149.79888916 113.19605255]
[134.89443970 111.50566101]
[119.98999023 109.81526184]
[109.00918579 120.03396606]
[109.62501526 135.02131653]
[110.24083710 150.00866699]
[110.85666656 164.99603271]
[111.62632751 179.97627258]
[112.54973602 194.94781494]
[113.47315216 209.91937256]
[114.39656830 224.89091492]
[115.31997681 239.86247253]
[116.24339294 254.83401489]
[117.16680908 269.80557251]
[118.09021759 284.77713013]
[119.01363373 299.74865723]
[119.93704987 314.72021484]
[134.80374146 317.15524292]
[148.75564575 322.83786011]
[161.09294128 331.48303223]
[171.19680786 342.65707397]
[178.56042480 355.79956055]
[182.81445312 370.25125122]
[183.74549866 385.28723145]
[181.30686951 400.15332031]
[175.62086487 414.10385132]
[166.97271729 426.43905640]
[155.79621887 436.54022217]
[142.65194702 443.90066528]
[128.19923401 448.15118408]
[113.16303253 449.07858276]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 128]
[24 127]
[25 126]
[26 125]
[27 50]
[28 49]
[30 48]
[31 47]
[32 46]
[54 110]
[55 109]
[56 108]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
