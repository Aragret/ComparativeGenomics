%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACGAAAAAUGGGGGGGGGGUCUAGGCUAUAUACAACUACGCAAAGGCCCCAACGUUGUAGGCCCCUACGxxxxxxxxxxAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCCCCCCCCCCCCAACUAAAAAU\
) } def
/len { sequence length } bind def

/coor [
[87.12274933 510.85690308]
[75.23847961 501.58178711]
[65.91976929 489.73168945]
[59.70840454 475.99551392]
[56.96550369 461.17187500]
[57.85053253 446.12261963]
[62.31203842 431.72268677]
[70.09063721 418.80923462]
[80.73409271 408.13308716]
[93.62359619 400.31491089]
[108.00978851 395.80923462]
[107.07415771 380.83843994]
[106.13852692 365.86764526]
[105.20290375 350.89685059]
[104.26727295 335.92605591]
[103.33164215 320.95526123]
[102.39601135 305.98449707]
[101.46038818 291.01370239]
[100.52475739 276.04290771]
[99.58912659 261.07211304]
[98.65350342 246.10131836]
[84.23290253 234.90115356]
[82.48320770 216.40693665]
[94.96706390 202.22410583]
[93.40948486 187.30519104]
[91.85190582 172.38629150]
[82.63369751 164.49122620]
[81.24775696 152.02935791]
[88.98565674 141.65733337]
[87.73877716 126.70924377]
[86.49190521 111.76116180]
[77.35016632 99.86878204]
[63.22536850 94.82002258]
[49.10056305 89.77126312]
[34.97576141 84.72251129]
[20.85095787 79.67375183]
[6.72615480 74.62500000]
[-2.70737910 86.46928406]
[-15.47695255 94.60665131]
[-30.19741821 98.15441132]
[-45.27201080 96.72773743]
[-59.06554794 90.48137665]
[-70.08181763 80.09288788]
[-77.12584686 66.68914795]
[-79.43355560 51.72407913]
[-76.75463104 36.82099152]
[-69.37964630 23.59645462]
[-58.10859299 13.48497009]
[-44.16407394 7.58335400]
[-29.05868149 6.53177071]
[-14.43093586 10.44428825]
[-1.86754692 18.89650536]
[7.26870394 30.97158813]
[11.98678398 45.35972595]
[11.77491093 60.50019455]
[25.89971352 65.54895020]
[40.02451706 70.59770966]
[54.14931870 75.64646149]
[68.27412415 80.69522095]
[82.39892578 85.74397278]
[94.29130554 76.60224152]
[93.04443359 61.65415573]
[91.79755402 46.70606613]
[90.55068207 31.75798035]
[75.82017517 28.31309128]
[62.87620163 20.48309326]
[52.98689270 9.03509235]
[47.12109756 -4.90935469]
[45.85348511 -19.98411369]
[49.30824280 -34.71231079]
[57.14691162 -47.65103149]
[68.60153961 -57.53266907]
[82.54991150 -63.38911819]
[97.62551880 -64.64662933]
[112.35139465 -61.18200302]
[125.28485870 -53.33466721]
[135.15881348 -41.87342072]
[141.00592041 -27.92112541]
[142.25332642 -12.84468269]
[138.77883911 1.87887299]
[130.92283630 14.80707550]
[119.45497894 24.67335320]
[105.49877167 30.51110649]
[106.74564362 45.45919418]
[107.99251556 60.40727997]
[109.23939514 75.35536957]
[115.78597260 79.01492310]
[118.70086670 64.30086517]
[133.59552002 62.52623367]
[139.88597107 76.14350891]
[128.87911987 86.33402252]
[135.42570496 89.99357605]
[148.81198120 83.22546387]
[162.19827271 76.45735168]
[160.67620850 61.35609818]
[164.71588135 46.72580719]
[173.77098083 34.54510498]
[186.61688232 26.46132660]
[201.51626587 23.56773949]
[216.45411682 26.25567627]
[229.41021729 34.16161728]
[238.63235474 46.21634674]
[242.87332153 60.78956223]
[241.55955505 75.91036224]
[234.86872864 89.53376770]
[223.70573425 99.81733704]
[209.58026123 105.37030792]
[194.40266418 105.44166565]
[180.22560120 100.02178192]
[168.96638489 89.84363556]
[155.58010864 96.61174774]
[142.19381714 103.37985992]
[131.42941284 113.98357391]
[119.23590088 118.18455505]
[108.47643280 116.49059296]
[101.43998718 110.51428223]
[102.68686676 125.46237183]
[103.93373871 140.41046143]
[114.78746796 155.24880981]
[106.77082062 170.82870483]
[108.32839966 185.74761963]
[109.88597870 200.66653442]
[120.46526337 206.25683594]
[126.94055939 216.17549133]
[127.78476715 227.86997986]
[122.90238190 238.39755249]
[113.62429047 245.16569519]
[114.55992126 260.13647461]
[115.49555206 275.10726929]
[116.43117523 290.07806396]
[117.36680603 305.04885864]
[118.30243683 320.01965332]
[119.23806000 334.99044800]
[120.17369080 349.96124268]
[121.10932159 364.93200684]
[122.04495239 379.90280151]
[122.98057556 394.87359619]
[137.81581116 397.55303955]
[151.57844543 403.70553589]
[163.46833801 412.97341919]
[172.79423523 424.81787109]
[179.01391602 438.55029297]
[181.76580811 453.37225342]
[180.88990784 468.42202759]
[176.43713379 482.82467651]
[168.66636658 495.74282837]
[158.02938843 506.42544556]
[145.14462280 514.25146484]
[130.76116943 518.76580811]
[115.71525574 519.70617676]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[24 122]
[25 121]
[26 120]
[29 118]
[30 117]
[31 116]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[61 86]
[62 85]
[63 84]
[64 83]
[92 112]
[93 111]
[94 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
