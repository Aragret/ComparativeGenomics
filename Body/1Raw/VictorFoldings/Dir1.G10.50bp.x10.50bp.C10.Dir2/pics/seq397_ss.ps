%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAAAAACAAAGGGGGGGGGGGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAxxxxxxxxxxGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCCCCCCCCCCCACCCCAUAAACAAA\
) } def
/len { sequence length } bind def

/coor [
[74.97627258 624.90997314]
[60.61402130 620.40325928]
[47.45312881 613.09735107]
[36.03253174 603.29150391]
[26.81989288 591.38720703]
[20.19246483 577.87194824]
[16.42163658 563.29919434]
[15.66181946 548.26562500]
[17.94412804 533.38690186]
[23.17510605 519.27233887]
[31.14054489 506.49984741]
[41.51426697 495.59246826]
[53.87147141 486.99685669]
[67.70614624 481.06503296]
[82.45175934 478.03985596]
[82.45175934 463.03985596]
[82.45175934 448.03985596]
[82.45175934 433.03985596]
[82.45175934 418.03985596]
[82.45175934 403.03985596]
[82.45175934 388.03985596]
[82.45175934 373.03985596]
[82.45175934 358.03985596]
[82.45175934 343.03985596]
[82.45175934 328.03985596]
[82.45175934 313.03985596]
[70.38053131 309.19775391]
[59.87120056 302.09243774]
[51.78532791 292.29415894]
[46.78926468 280.59442139]
[45.29922867 267.94207764]
[47.44664383 255.36634827]
[53.06663132 243.89314270]
[61.71060944 234.46128845]
[72.68209076 227.84577942]
[85.09278870 224.59410095]
[85.98139954 209.62043762]
[79.01165771 196.45715332]
[87.55289459 183.13958740]
[80.58316040 169.97630310]
[89.12439728 156.65873718]
[90.01300812 141.68507385]
[90.90161896 126.71141815]
[91.79022980 111.73776245]
[85.70121002 99.15144348]
[93.23611450 87.37362671]
[94.12472534 72.39997101]
[86.14409637 62.22302246]
[87.22438812 49.73828506]
[96.23844910 41.62161255]
[97.42272186 26.66843605]
[98.60699463 11.71525860]
[99.79126740 -3.23791838]
[100.97554016 -18.19109535]
[87.03163910 -24.02420616]
[75.58890533 -33.86830521]
[67.75974274 -46.74978638]
[64.30014038 -61.40059662]
[65.53665924 -76.38304138]
[71.33565521 -90.23087311]
[81.11761475 -101.59280396]
[93.91502380 -109.36431885]
[108.46805573 -112.79509735]
[109.65232849 -127.74827576]
[110.83660126 -142.70144653]
[112.02087402 -157.65463257]
[103.70870972 -174.05838013]
[114.15023041 -188.13482666]
[115.03883362 -203.10847473]
[108.13265228 -217.34277344]
[116.61033630 -229.58934021]
[117.49894714 -244.56298828]
[118.38755798 -259.53665161]
[119.27616882 -274.51031494]
[105.73587036 -281.48025513]
[96.20619965 -293.35903931]
[92.33822632 -308.08856201]
[94.80209351 -323.11682129]
[103.17092133 -335.84014893]
[115.99476624 -344.05407715]
[131.05181885 -346.33554077]
[145.73335266 -342.28924561]
[157.49569702 -332.61624146]
[164.30096436 -318.99243164]
[164.97009277 -303.77822876]
[159.38716125 -289.60955811]
[148.51943970 -278.94128418]
[134.24981689 -273.62170410]
[133.36122131 -258.64804077]
[132.47261047 -243.67437744]
[131.58399963 -228.70072937]
[138.55374146 -215.53744507]
[130.01249695 -202.21986389]
[129.12388611 -187.24621582]
[136.93283081 -177.96429443]
[136.28155518 -165.44984436]
[126.97405243 -156.47035217]
[125.78977966 -141.51718140]
[124.60550690 -126.56400299]
[123.42123413 -111.61082458]
[137.25279236 -105.93202209]
[148.66734314 -96.24295044]
[156.53887939 -83.48288727]
[160.08578491 -68.89486694]
[158.94850159 -53.90456390]
[153.22584534 -39.98097992]
[143.46661377 -28.49247551]
[130.61697388 -20.57230186]
[115.92871094 -17.00682259]
[114.74443817 -2.05364537]
[113.56016541 12.89953136]
[112.37589264 27.85270882]
[111.19161987 42.80588531]
[119.59272766 58.18746185]
[109.09838104 73.28858185]
[108.20977020 88.26223755]
[114.29878998 100.84855652]
[106.76388550 112.62637329]
[105.87527466 127.60002899]
[104.98666382 142.57368469]
[104.09805298 157.54733276]
[111.00423431 171.78163147]
[102.52655792 184.02819824]
[109.43273163 198.26249695]
[100.95505524 210.50904846]
[100.06644440 225.48271179]
[115.99922180 232.74879456]
[127.92179108 245.52673340]
[134.04368591 261.85836792]
[133.46058655 279.25488281]
[126.28778076 295.07611084]
[113.63861847 306.93118286]
[97.45175934 313.03985596]
[97.45175934 328.03985596]
[97.45175934 343.03985596]
[97.45175934 358.03985596]
[97.45175934 373.03985596]
[97.45175934 388.03985596]
[97.45175934 403.03985596]
[97.45175934 418.03985596]
[97.45175934 433.03985596]
[97.45175934 448.03985596]
[97.45175934 463.03985596]
[97.45175934 478.03985596]
[112.19737244 481.06503296]
[126.03204346 486.99685669]
[138.38925171 495.59246826]
[148.76296997 506.49984741]
[156.72840881 519.27233887]
[161.95939636 533.38690186]
[164.24169922 548.26562500]
[163.48188782 563.29919434]
[159.71105957 577.87194824]
[153.08363342 591.38720703]
[143.87098694 603.29150391]
[132.45039368 613.09735107]
[119.28949738 620.40325928]
[104.92724609 624.90997314]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[36 126]
[37 125]
[39 123]
[41 121]
[42 120]
[43 119]
[44 118]
[46 116]
[47 115]
[50 113]
[51 112]
[52 111]
[53 110]
[54 109]
[63 100]
[64 99]
[65 98]
[66 97]
[68 94]
[69 93]
[71 91]
[72 90]
[73 89]
[74 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
