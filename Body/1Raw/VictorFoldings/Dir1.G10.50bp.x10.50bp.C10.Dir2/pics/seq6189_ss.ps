%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCACCUCGGGGGGGGGGGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUAGAUUUACAGUCCAAUxxxxxxxxxxCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCUCCCCCCCCCCCCAAAUCACCAC\
) } def
/len { sequence length } bind def

/coor [
[52.11590576 404.50338745]
[38.26996994 398.48736572]
[26.56130791 388.95794678]
[17.85878181 376.62228394]
[12.80818081 362.39575195]
[11.78428936 347.33407593]
[14.86308861 332.55490112]
[21.81611061 319.15499878]
[32.12739563 308.12866211]
[45.03177643 300.29415894]
[59.57166290 296.23281860]
[59.57166290 281.23281860]
[59.57166290 266.23281860]
[59.57166290 251.23283386]
[59.57166290 236.23283386]
[59.57166290 221.23283386]
[59.57166290 206.23283386]
[59.57166290 191.23283386]
[59.57166290 176.23283386]
[59.57166290 161.23283386]
[59.57166290 146.23283386]
[59.57166290 131.23283386]
[59.57166290 116.23283386]
[59.57166290 101.23283386]
[50.55413437 89.24600220]
[36.14191818 85.08811188]
[21.72970009 80.93022156]
[12.55035973 81.55596924]
[7.06258821 76.53302002]
[-7.26000929 72.07620239]
[-21.58260727 67.61939240]
[-35.90520477 63.16257477]
[-50.40079880 59.30541611]
[-65.04430389 56.05458832]
[-79.68780518 52.80376434]
[-94.33130646 49.55293655]
[-109.09735870 46.91407394]
[-123.96040344 44.89173889]
[-137.54940796 53.41926575]
[-152.64080811 47.97602844]
[-157.65780640 32.73760986]
[-148.75175476 19.39362144]
[-132.75463867 18.18042946]
[-121.93807220 30.02869225]
[-107.07502747 32.05102539]
[-104.73539734 30.39770126]
[-101.57917023 29.60259438]
[-97.94155884 29.98945427]
[-94.27138519 31.75038338]
[-91.08048248 34.90943527]
[-76.43698120 38.16026306]
[-61.79347610 41.41108704]
[-47.14997482 44.66191483]
[-44.68101501 43.20878983]
[-41.46961594 42.67879868]
[-37.87674713 43.36669540]
[-34.36565399 45.42661285]
[-31.44838905 48.83997726]
[-17.12579155 53.29679108]
[-2.80319357 57.75360870]
[11.51940346 62.21042252]
[25.88758850 66.51800537]
[40.29980469 70.67589569]
[54.71202087 74.83378601]
[44.05750656 64.27530670]
[33.40299606 53.71683502]
[20.04283714 46.89729309]
[9.70300293 36.03046799]
[3.55546784 22.34807968]
[2.29702997 7.40096140]
[6.07032824 -7.11669064]
[14.44767475 -19.55936241]
[26.47953224 -28.51672745]
[40.80213928 -32.97350693]
[55.79209137 -32.42454529]
[69.75033569 -26.93206406]
[81.09477234 -17.11861038]
[88.53954315 -4.09650087]
[91.24082947 10.65826321]
[88.89244080 25.47329140]
[81.76069641 38.66918945]
[78.97830963 53.40887451]
[76.19591522 68.14855957]
[85.70427704 56.54721832]
[95.21263123 44.94587708]
[88.34127045 31.35528183]
[87.59824371 16.14450264]
[93.11228943 1.94889927]
[103.92807007 -8.77205563]
[118.17167664 -14.16089153]
[133.37532043 -13.28395939]
[146.90489197 -6.29319334]
[156.41629028 5.60021448]
[160.26161194 20.33565903]
[157.77464294 35.36013412]
[149.38627625 48.07056046]
[136.54980469 56.26478195]
[121.48926544 58.52309418]
[106.81397247 54.45423508]
[97.30561829 66.05558014]
[87.79725647 77.65692139]
[108.35295105 78.01741028]
[120.30525208 92.71083069]
[135.30444336 92.86686707]
[150.30363464 93.02290344]
[140.94050598 81.30403137]
[142.41481018 66.37666321]
[153.88952637 56.71586609]
[168.84982300 57.80659485]
[178.80192566 69.02958679]
[178.09550476 84.01294708]
[167.13017273 94.25035858]
[181.99322510 96.27268982]
[196.85626221 98.29502106]
[211.82099915 91.58766174]
[224.95181274 101.41181183]
[222.74084473 117.66123199]
[207.46255493 123.61991119]
[194.83393860 113.15807343]
[179.97088623 111.13573456]
[165.10783386 109.11340332]
[150.14759827 108.02209473]
[135.14840698 107.86605835]
[120.14921570 107.71001434]
[106.67310333 121.87343597]
[86.09579468 119.76222229]
[74.57166290 101.23283386]
[74.57166290 116.23283386]
[74.57166290 131.23283386]
[74.57166290 146.23283386]
[74.57166290 161.23283386]
[74.57166290 176.23283386]
[74.57166290 191.23283386]
[74.57166290 206.23283386]
[74.57166290 221.23283386]
[74.57166290 236.23283386]
[74.57166290 251.23283386]
[74.57166290 266.23281860]
[74.57166290 281.23281860]
[74.57166290 296.23281860]
[89.11154938 300.29415894]
[102.01593018 308.12866211]
[112.32721710 319.15499878]
[119.28023529 332.55490112]
[122.35903168 347.33407593]
[121.33514404 362.39575195]
[116.28453827 376.62228394]
[107.58201599 388.95794678]
[95.87335968 398.48736572]
[82.02742004 404.50338745]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[24 127]
[25 64]
[26 63]
[27 62]
[29 61]
[30 60]
[31 59]
[32 58]
[33 53]
[34 52]
[35 51]
[36 50]
[37 45]
[38 44]
[83 101]
[84 100]
[85 99]
[103 124]
[104 123]
[105 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
