%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCAACAAUGGGGGGGGGGUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAxxxxxxxxxxAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUCCCCCCCCCCUCACAACAAU\
) } def
/len { sequence length } bind def

/coor [
[82.20841217 426.33081055]
[68.98821259 419.05834961]
[58.10140991 408.61132812]
[50.29027939 395.70208740]
[46.08739853 381.21078491]
[45.77932739 366.12542725]
[49.38706970 351.47460938]
[56.66464233 338.25723267]
[67.11585236 327.37445068]
[80.02811432 319.56829834]
[94.52104950 315.37103271]
[94.20899200 300.37426758]
[93.89693451 285.37750244]
[93.58487701 270.38076782]
[93.27281952 255.38400269]
[92.96076965 240.38725281]
[92.64871216 225.39050293]
[92.33665466 210.39375305]
[92.02459717 195.39700317]
[91.55655670 180.40429688]
[90.93257904 165.41728210]
[90.30860138 150.43026733]
[89.68462372 135.44325256]
[89.06064606 120.45623779]
[82.92257690 96.84079742]
[71.62357330 86.97507477]
[60.32456970 77.10935211]
[49.02556610 67.24362946]
[37.72656250 57.37790298]
[25.18694878 65.75605011]
[10.91700554 70.59899902]
[-4.10860682 71.58230591]
[-18.86524963 68.64493561]
[-32.34818649 61.99300766]
[-43.64098740 52.08535004]
[-51.97782135 39.60185242]
[-56.79539108 25.39680481]
[-57.77098083 10.44044495]
[-54.84408951 -4.24731016]
[-48.22011948 -17.66641998]
[-59.51912689 -27.53214264]
[-70.81813049 -37.39786530]
[-77.32236481 -39.07192612]
[-81.35692596 -43.18939972]
[-82.37092590 -47.91669464]
[-93.24975586 -58.24390030]
[-104.12857819 -68.57110596]
[-112.56500244 -72.24242401]
[-115.12347412 -79.22811890]
[-125.78509521 -89.77940369]
[-136.44673157 -100.33069611]
[-151.24002075 -96.20107269]
[-166.11221313 -100.03690338]
[-177.06274414 -110.80637360]
[-181.14598083 -125.61254883]
[-177.26354980 -140.47264099]
[-166.45980835 -151.38935852]
[-151.64089966 -155.42616272]
[-136.79306030 -151.49717712]
[-125.91025543 -140.65925598]
[-121.91992188 -125.82778168]
[-125.89543152 -110.99232483]
[-115.23381042 -100.44103241]
[-104.57218170 -89.88973999]
[-93.80137634 -79.44992828]
[-82.92254639 -69.12272644]
[-72.04372406 -58.79552078]
[-60.95240784 -48.69686890]
[-49.65340042 -38.83114624]
[-38.35439682 -28.96542358]
[-25.95086670 -37.33811188]
[-11.79182339 -42.21851730]
[3.15951276 -43.26828384]
[17.88438225 -40.40985489]
[31.37789536 -33.83219147]
[42.71761322 -23.97827148]
[51.12660599 -11.51526451]
[56.02667999 2.71062469]
[57.07814026 17.73162079]
[54.20331955 32.52421570]
[47.59228516 46.07889938]
[58.89128876 55.94462204]
[70.19029236 65.81034088]
[81.48929596 75.67607117]
[92.78829956 85.54179382]
[107.70721436 87.09937286]
[120.80036926 79.78026581]
[133.89352417 72.46115875]
[146.98667908 65.14205170]
[160.07983398 57.82294846]
[162.81121826 53.22304535]
[166.66654968 50.45018387]
[170.74340820 49.62496948]
[174.22592163 50.48491669]
[187.75012207 43.99674988]
[193.07550049 29.35851288]
[206.88339233 22.97124863]
[220.80589294 28.13840294]
[234.33007812 21.65023804]
[247.85426331 15.16207314]
[256.66070557 1.32810640]
[273.03054810 2.30795479]
[280.12393188 17.09363365]
[270.64373779 30.47490501]
[254.34243774 28.68626213]
[240.81823730 35.17442703]
[227.29405212 41.66259384]
[222.61145020 55.75545883]
[208.98843384 62.52803802]
[194.23828125 57.52093887]
[180.71409607 64.00910187]
[167.39894104 70.91610718]
[154.30578613 78.23520660]
[141.21263123 85.55431366]
[128.11947632 92.87342072]
[115.02632141 100.19252777]
[129.32885742 95.67176056]
[143.70028687 99.96853638]
[153.17420959 111.59800720]
[154.47673035 126.54134369]
[147.15771484 139.63455200]
[133.74641418 146.35296631]
[118.87741852 144.37489319]
[107.68902588 134.38391113]
[104.04766083 119.83226013]
[104.67163849 134.81927490]
[105.29561615 149.80628967]
[105.91959381 164.79330444]
[106.54357147 179.78031921]
[110.04618835 188.28817749]
[107.02135468 195.08494568]
[107.33340454 210.08169556]
[107.64546204 225.07844543]
[107.95751953 240.07519531]
[108.26957703 255.07196045]
[108.58163452 270.06869507]
[108.89369202 285.06546021]
[109.20574188 300.06222534]
[109.51779938 315.05895996]
[124.17279053 318.64974976]
[137.39860535 325.91198730]
[148.29347229 336.35058594]
[156.11456299 349.25381470]
[160.32864380 363.74185181]
[160.64836121 378.82696533]
[157.05194092 393.48056030]
[149.78457642 406.70358276]
[139.34176636 417.59442139]
[126.43553925 425.41052246]
[111.94584656 429.61898804]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[24 125]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[40 70]
[41 69]
[42 68]
[45 67]
[46 66]
[47 65]
[49 64]
[50 63]
[51 62]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[94 111]
[95 110]
[98 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
