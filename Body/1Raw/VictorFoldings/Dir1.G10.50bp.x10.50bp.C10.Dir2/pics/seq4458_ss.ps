%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUCCCCCUCGGGGGGGGGGAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAxxxxxxxxxxAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACCCCCCCCCCCAAUCCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[146.67628479 488.87020874]
[141.16331482 474.89331055]
[137.64926147 460.28518677]
[136.20256042 445.33013916]
[136.85134888 430.31930542]
[139.58300781 415.54486084]
[144.34436035 401.29440308]
[151.04270935 387.84530640]
[159.54769897 375.45938110]
[169.69377136 364.37768555]
[181.28341675 354.81597900]
[194.09104919 346.96035767]
[188.10275269 333.20755005]
[182.11445618 319.45471191]
[176.12614441 305.70187378]
[170.13784790 291.94903564]
[163.58998108 278.45367432]
[156.49357605 265.23849487]
[149.39717102 252.02330017]
[142.30078125 238.80812073]
[135.20437622 225.59294128]
[128.10797119 212.37774658]
[121.01156616 199.16256714]
[113.91516113 185.94738770]
[111.67458344 200.77909851]
[102.90060425 212.94534302]
[89.53481293 219.75382996]
[74.53491974 219.69793701]
[61.22023773 212.79002380]
[52.53717422 200.55873108]
[50.40719604 185.71073914]
[55.30164337 171.53172302]
[66.13742828 161.15936279]
[80.51670837 156.88896179]
[95.25749969 159.66551208]
[107.09963989 168.87687683]
[103.14302826 154.40811157]
[99.18641663 139.93934631]
[94.35863495 134.28207397]
[95.30037689 125.13281250]
[91.64167023 110.58586121]
[82.60214996 98.61560059]
[69.61177063 91.11560059]
[53.79181671 90.91621399]
[46.63832474 77.85187531]
[33.64794540 70.35187531]
[20.65756416 62.85187912]
[7.66718340 55.35187912]
[-8.13899899 58.09853745]
[-20.04532623 47.34591293]
[-18.91828346 31.34249687]
[-5.62243938 22.36474037]
[9.64276981 27.29961014]
[15.16718388 42.36149597]
[28.15756416 49.86149597]
[41.14794540 57.36149597]
[54.13832474 64.86149597]
[69.02911377 64.52443695]
[77.11177063 78.12522125]
[90.10214996 85.62522125]
[96.84983826 82.35128021]
[110.34522247 75.80341339]
[117.09291840 72.52947998]
[119.24149323 57.68415451]
[121.39007568 42.83883286]
[123.53865051 27.99350929]
[125.68723297 13.14818668]
[111.66994476 7.61534166]
[99.30680084 -1.00146842]
[89.26453400 -12.23755074]
[82.08470154 -25.48695755]
[78.15451813 -40.03516388]
[77.68591309 -55.09760666]
[80.70417786 -69.86198425]
[87.04653168 -83.53207397]
[96.37093353 -95.37065887]
[108.17453766 -104.73931122]
[121.82079315 -111.13278198]
[136.57377625 -114.20627594]
[151.63786316 -113.79405975]
[166.20066833 -109.91834259]
[179.47686768 -102.78815460]
[190.75045776 -92.78800964]
[199.41346741 -80.45720673]
[204.99874878 -66.46072388]
[207.20504761 -51.55337906]
[205.91342163 -36.53910446]
[201.19349670 -22.22760391]
[193.29983521 -9.39067650]
[182.65811157 1.27939892]
[169.84222412 9.20719814]
[155.54333496 13.96518421]
[140.53256226 15.29676533]
[138.38397217 30.14208794]
[136.23539734 44.98741150]
[134.08682251 59.83273315]
[131.93823242 74.67805481]
[129.85073853 94.98777008]
[118.66202545 106.55203247]
[106.18862152 106.92715454]
[109.84732819 121.47410583]
[113.65518951 135.98272705]
[117.61179352 150.45149231]
[121.56840515 164.92027283]
[127.13034058 178.85098267]
[134.22674561 192.06616211]
[141.32315063 205.28134155]
[148.41955566 218.49653625]
[155.51596069 231.71171570]
[162.61236572 244.92689514]
[169.70877075 258.14208984]
[176.80516052 271.35726929]
[180.70426941 273.57009888]
[183.39071655 276.62075806]
[184.74929810 280.01208496]
[184.84278870 283.26177979]
[183.89068604 285.96075439]
[189.87898254 299.71359253]
[195.86727905 313.46640015]
[201.85557556 327.21923828]
[207.84387207 340.97207642]
[222.31976318 336.94781494]
[237.21485901 334.97747803]
[252.23921204 335.09936523]
[267.10037231 337.31112671]
[281.50906372 341.56973267]
[295.18484497 347.79226685]
[307.86145020 355.85760498]
[319.29217529 365.60873413]
[329.25448608 376.85586548]
[337.55450439 389.38009644]
[344.03060913 402.93759155]
[348.55682373 417.26449585]
[351.04495239 432.08187866]
[351.44662476 447.10137939]
[349.75399780 462.03057861]
[346.00003052 476.57888794]
[340.25778198 490.46316528]
[332.63906860 503.41308594]
[323.29211426 515.17663574]
[312.39892578 525.52478027]
[300.17150879 534.25616455]
[286.84786987 541.20074463]
[272.68737793 546.22332764]
[257.96569824 549.22625732]
[242.96931458 550.15100098]
[227.99020386 548.97961426]
[213.31991577 545.73480225]
[199.24400330 540.47985840]
[186.03646851 533.31695557]
[173.95439148 524.38555908]
[163.23297119 513.85949707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 121]
[13 120]
[14 119]
[15 118]
[16 117]
[17 112]
[18 111]
[19 110]
[20 109]
[21 108]
[22 107]
[23 106]
[24 105]
[36 104]
[37 103]
[38 102]
[40 101]
[41 100]
[42 60]
[43 59]
[45 57]
[46 56]
[47 55]
[48 54]
[63 97]
[64 96]
[65 95]
[66 94]
[67 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
