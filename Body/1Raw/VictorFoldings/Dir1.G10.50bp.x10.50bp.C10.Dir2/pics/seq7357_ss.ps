%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCGUAUAGGGGGGGGGGCAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUUxxxxxxxxxxAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUACCCCCCCCCCAACCCAUAUA\
) } def
/len { sequence length } bind def

/coor [
[61.30325699 355.50131226]
[47.45731735 349.48529053]
[35.74865723 339.95587158]
[27.04613304 327.62020874]
[21.99553108 313.39367676]
[20.97163963 298.33200073]
[24.05043793 283.55285645]
[31.00345993 270.15292358]
[41.31474304 259.12658691]
[54.21912384 251.29206848]
[68.75901031 247.23075867]
[68.75901031 232.23075867]
[68.75901031 217.23075867]
[68.75901031 202.23075867]
[68.75901031 187.23075867]
[68.75901031 172.23075867]
[68.75901031 157.23075867]
[68.75901031 142.23075867]
[68.75901031 127.23075867]
[68.75901031 112.23075867]
[63.82792664 126.39707184]
[55.02578354 138.54295349]
[43.09850311 147.63909912]
[29.05684280 152.91468811]
[14.09074783 153.92263794]
[-0.53150743 150.57754517]
[-13.57078075 143.16287231]
[-23.92207909 132.30697632]
[-30.70819855 118.92980957]
[-33.35405731 104.16500092]
[-31.63543892 89.26378632]
[-25.69798279 75.48892975]
[-16.04485130 64.00776672]
[-3.49408340 55.79325485]
[10.89072514 51.54151535]
[25.89055443 51.61285782]
[40.23426819 56.00123215]
[52.70633316 64.33476257]
[62.24981689 75.90721893]
[68.05694580 89.74171448]
[67.12132263 74.77092743]
[66.18569183 59.80013657]
[57.02450180 50.66085434]
[56.58727264 38.12978363]
[64.56214142 28.98052979]
[63.93816376 13.99351311]
[63.31418610 -0.99350280]
[62.69020844 -15.98051929]
[62.06623077 -30.96753502]
[58.56361771 -39.47538757]
[61.58845139 -46.27215195]
[61.27639389 -61.26890564]
[52.79471207 -48.89712143]
[39.84537125 -41.32648087]
[24.90376854 -40.00419235]
[10.82613468 -45.18301773]
[0.30355126 -55.87297821]
[-4.65248632 -70.03057861]
[-3.09458303 -84.94945526]
[4.67945290 -97.77771759]
[17.18353844 -106.06312561]
[32.02739334 -108.22182465]
[46.37346649 -103.84116364]
[57.47936630 -93.75856018]
[63.22183609 -79.90285492]
[66.62481689 -94.51174164]
[70.02779388 -109.12063599]
[73.43077087 -123.72953033]
[76.83374786 -138.33842468]
[63.45347595 -145.29681396]
[52.22460175 -155.36473083]
[43.85297775 -167.90931702]
[38.86485291 -182.14201355]
[37.57378387 -197.16812134]
[40.06093216 -212.04310608]
[46.16995239 -225.83189392]
[55.51682281 -237.66770935]
[67.51399231 -246.80656433]
[81.40731812 -252.67398071]
[96.32344055 -254.90110779]
[111.32472229 -253.34796143]
[125.46817780 -248.11216736]
[137.86473083 -239.52285767]
[147.73512268 -228.11994934]
[154.45890808 -214.62026978]
[157.61338806 -199.87239075]
[157.00032043 -184.80337524]
[152.65818787 -170.36050415]
[144.85998535 -157.45162964]
[134.09590149 -146.88824463]
[121.04255676 -139.33436584]
[106.52051544 -135.26481628]
[91.44264221 -134.93544006]
[88.03966522 -120.32655334]
[84.63668823 -105.71765900]
[81.23371124 -91.10876465]
[77.83072662 -76.49987793]
[76.27314758 -61.58096313]
[76.58520508 -46.58420944]
[77.05324554 -31.59151268]
[77.67722321 -16.60449600]
[78.30120087 -1.61748016]
[78.92517853 13.36953640]
[79.54915619 28.35655212]
[89.74192810 42.60812378]
[81.15648651 58.86450577]
[82.09210968 73.83529663]
[83.02774048 88.80609131]
[103.44140625 81.85038757]
[116.25565338 96.56451416]
[130.75125122 100.42167664]
[145.24684143 104.27883911]
[159.74244690 108.13599396]
[173.30265808 100.47061157]
[187.94830322 104.58881378]
[195.17251587 117.56365204]
[209.66812134 121.42080688]
[225.35151672 116.62886047]
[237.15696716 128.01145935]
[232.94003296 143.85914612]
[217.03872681 147.86920166]
[205.81095886 135.91641235]
[191.31535339 132.05924988]
[178.59811401 139.72782898]
[163.84255981 136.02261353]
[155.88528442 122.63159180]
[141.38967896 118.77443695]
[126.89408875 114.91727448]
[112.39849091 111.06011200]
[99.23416138 118.45711517]
[83.75901031 112.23075867]
[83.75901031 127.23075867]
[83.75901031 142.23075867]
[83.75901031 157.23075867]
[83.75901031 172.23075867]
[83.75901031 187.23075867]
[83.75901031 202.23075867]
[83.75901031 217.23075867]
[83.75901031 232.23075867]
[83.75901031 247.23075867]
[98.29889679 251.29206848]
[111.20327759 259.12658691]
[121.51456451 270.15292358]
[128.46759033 283.55285645]
[131.54638672 298.33200073]
[130.52249146 313.39367676]
[125.47189331 327.62020874]
[116.76937103 339.95587158]
[105.06070709 349.48529053]
[91.21476746 355.50131226]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[40 108]
[41 107]
[42 106]
[45 104]
[46 103]
[47 102]
[48 101]
[49 100]
[51 99]
[52 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[110 129]
[111 128]
[112 127]
[113 126]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
