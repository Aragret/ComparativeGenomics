%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCGGACUGGGGGGGGGGACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCxxxxxxxxxxCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAUUGCCACAACUAACCCCCCCCCCCCUCCUCGGACU\
) } def
/len { sequence length } bind def

/coor [
[83.81618500 369.31372070]
[71.25796509 360.96255493]
[61.17174149 349.75012207]
[54.19154739 336.38122559]
[50.75616455 321.69622803]
[51.08154297 306.61825562]
[55.14722824 292.09512329]
[62.69764709 279.03979492]
[73.25817871 268.27288818]
[86.16497040 260.47125244]
[100.60669708 256.12530518]
[99.98271942 241.13830566]
[99.35874176 226.15127563]
[98.73476410 211.16426086]
[98.11078644 196.17724609]
[97.48680878 181.19023132]
[96.86283112 166.20321655]
[96.23885345 151.21620178]
[95.61487579 136.22918701]
[94.99089813 121.24217224]
[90.03025055 135.39816284]
[76.23307037 141.28353882]
[62.58206940 135.06660461]
[57.96480179 120.79492950]
[65.38735962 107.76013947]
[80.01681519 104.44852448]
[65.19905090 102.11741638]
[50.38129425 99.78631592]
[35.56353760 97.45520782]
[26.53353500 99.21897888]
[20.46306992 94.91838837]
[5.69701481 92.27952576]
[-9.06904125 89.64066315]
[-24.00334930 88.23835754]
[-39.00253677 88.08232117]
[-51.42405319 98.23542786]
[-67.07575226 94.71353912]
[-73.95100403 80.21834564]
[-66.77568817 65.86932373]
[-51.05410385 62.67380905]
[-38.84650040 73.08312988]
[-23.84731293 73.23916626]
[-34.67053604 62.85370636]
[-37.48010254 48.11917496]
[-31.23793793 34.47969818]
[-18.25039482 26.97478485]
[-3.31611180 28.37735367]
[8.04699039 38.16918182]
[11.64047146 52.73238754]
[6.13661242 66.68614960]
[-6.43017673 74.87460327]
[8.33587933 77.51346588]
[23.10193443 80.15233612]
[37.89464188 82.63745117]
[52.71239853 84.96855927]
[67.53015900 87.29965973]
[82.34791565 89.63076019]
[96.19113159 83.85449219]
[104.95734406 71.68265533]
[113.72354889 59.51081848]
[116.22393036 50.65644455]
[122.80090332 47.17950439]
[131.81843567 35.19267273]
[140.83596802 23.20584106]
[129.94252014 12.86994171]
[120.29832458 1.35963476]
[112.02909088 -11.17502022]
[105.24263763 -24.57060814]
[100.02742767 -38.65248871]
[96.45146179 -53.23707962]
[94.56136322 -68.13423157]
[94.38175964 -83.14974213]
[95.91500092 -98.08784485]
[99.14109802 -112.75379944]
[104.01799011 -126.95639038]
[110.48210144 -140.51046753]
[118.44915771 -153.23933411]
[127.81528473 -164.97702026]
[138.45837402 -175.57051086]
[150.23970032 -184.88171387]
[163.00563049 -192.78923035]
[176.58975220 -199.18995667]
[190.81497192 -204.00045776]
[205.49583435 -207.15800476]
[220.44093323 -208.62145996]
[235.45544434 -208.37171936]
[250.34359741 -206.41204834]
[264.91131592 -202.76800537]
[278.96868896 -197.48707581]
[292.33242798 -190.63812256]
[304.82833862 -182.31042480]
[316.29345703 -172.61256409]
[326.57836914 -161.67097473]
[335.54895020 -149.62828064]
[343.08828735 -136.64151001]
[349.09805298 -122.87995148]
[353.49990845 -108.52301788]
[356.23648071 -93.75789642]
[357.27206421 -78.77706146]
[356.59320068 -63.77583313]
[354.20870972 -48.94977570]
[350.14968872 -34.49217987]
[344.46902466 -20.59152985]
[337.24084473 -7.42904997]
[328.55929565 4.82366133]
[318.53765869 16.00686455]
[307.30648804 25.97476196]
[295.01226807 34.59740448]
[281.81527710 41.76237488]
[267.88754272 47.37626648]
[253.41062927 51.36589050]
[238.57330322 53.67922974]
[223.56898499 54.28612900]
[208.59329224 53.17867661]
[193.84146118 50.37130737]
[179.50582886 45.90062332]
[165.77325439 39.82490921]
[152.82279968 32.22336960]
[143.80526733 44.21020508]
[134.78773499 56.19703674]
[125.89538574 68.27702332]
[117.12918091 80.44886017]
[108.36296844 92.62069702]
[111.99462128 94.70363617]
[114.98182678 98.36601257]
[116.69487000 103.35891724]
[116.61130524 109.19862366]
[114.39876556 115.21342468]
[109.97792053 120.61819458]
[110.60189819 135.60520935]
[111.22587585 150.59222412]
[111.84985352 165.57923889]
[112.47382355 180.56625366]
[113.09780121 195.55326843]
[113.72177887 210.54028320]
[114.34575653 225.52729797]
[114.96973419 240.51432800]
[115.59371185 255.50134277]
[130.34672546 258.63177490]
[143.85736084 265.33352661]
[155.27633667 275.18533325]
[163.88584900 287.56787109]
[169.14469910 301.70275879]
[170.72230530 316.70147705]
[168.51950073 331.62121582]
[162.67474365 345.52407837]
[153.55546570 357.53613281]
[141.73489380 366.90231323]
[127.95608521 373.03381348]
[113.08518982 375.54519653]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[26 57]
[27 56]
[28 55]
[29 54]
[31 53]
[32 52]
[33 51]
[34 42]
[35 41]
[58 123]
[59 122]
[60 121]
[62 120]
[63 119]
[64 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
