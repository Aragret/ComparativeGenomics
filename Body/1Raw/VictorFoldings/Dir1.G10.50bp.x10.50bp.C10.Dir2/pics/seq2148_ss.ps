%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACCCCCGAGGGGGGGGGGAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAxxxxxxxxxxGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCCCCCCCCCCCAUACCCCCGA\
) } def
/len { sequence length } bind def

/coor [
[97.58609009 385.02310181]
[84.36589050 377.75061035]
[73.47908783 367.30361938]
[65.66796112 354.39437866]
[61.46507645 339.90304565]
[61.15700531 324.81771851]
[64.76474762 310.16690063]
[72.04232025 296.94949341]
[82.49353027 286.06674194]
[95.40579224 278.26058960]
[109.89872742 274.06329346]
[109.58666992 259.06655884]
[109.27461243 244.06979370]
[108.96255493 229.07304382]
[108.65049744 214.07627869]
[108.33844757 199.07952881]
[108.02639008 184.08277893]
[107.71433258 169.08602905]
[107.40227509 154.08926392]
[107.09021759 139.09251404]
[92.78344727 138.05186462]
[80.14189148 132.08123779]
[70.75295258 122.21909332]
[65.69001007 109.97150421]
[65.39300537 97.08593750]
[51.07041168 92.62911987]
[36.74781418 88.17230225]
[22.42521667 83.71548462]
[8.10261822 79.25867462]
[-6.69008875 76.77355194]
[-21.68278503 76.30551147]
[-36.67547989 75.83747101]
[-51.66817856 75.36943054]
[-59.69060516 88.46661377]
[-73.19448090 95.78378296]
[-88.54731750 95.35266113]
[-101.61929321 87.28922272]
[-108.89409637 73.76248169]
[-108.41485596 58.41106796]
[-100.31047821 45.36443329]
[-86.76100159 38.13206100]
[-71.41117096 38.65941620]
[-58.39000320 46.80464935]
[-51.20013428 60.37673187]
[-36.20743942 60.84477234]
[-21.21474266 61.31281662]
[-6.22204638 61.78085709]
[-18.30353546 52.89054489]
[-25.82266808 39.91122818]
[-27.52508354 25.00815010]
[-23.12678337 10.66747570]
[-13.36150074 -0.71844834]
[0.14169553 -7.25019360]
[15.13016891 -7.83811808]
[29.10350609 -2.38414335]
[39.73064041 8.20188522]
[45.23873138 22.15398026]
[44.70889664 37.14461899]
[38.22953415 50.67303085]
[26.88154221 60.48236465]
[12.55943394 64.93607330]
[26.88203239 69.39289093]
[41.20462799 73.84970856]
[55.52722549 78.30651855]
[69.84982300 82.76333618]
[79.40424347 72.03662109]
[92.48224640 66.09396362]
[106.84641266 65.95205688]
[112.90942383 52.23200607]
[101.47422791 43.26076508]
[92.53476715 31.81272507]
[86.61098480 18.56112099]
[84.04563141 4.28386068]
[84.98445129 -10.18213177]
[89.36793518 -23.98998260]
[96.93502808 -36.33243942]
[107.23869324 -46.48907852]
[119.67232513 -53.86833191]
[133.50544739 -58.04197311]
[147.92665100 -58.76993561]
[162.09114075 -56.01413727]
[168.43827820 -69.60508728]
[174.78540039 -83.19603729]
[170.68055725 -98.70506287]
[180.36195374 -111.49764252]
[196.40286255 -111.76040649]
[206.49806213 -99.29178619]
[202.90338135 -83.65663910]
[188.37635803 -76.84890747]
[182.02922058 -63.25795746]
[175.68209839 -49.66700745]
[187.63768005 -39.78429413]
[196.64631653 -27.14337158]
[202.09379578 -12.59624863]
[203.60614014 2.87475753]
[201.07531738 18.22336578]
[194.66691589 32.41008759]
[184.80932617 44.47262192]
[172.16511536 53.59113693]
[157.58650208 59.14397812]
[142.05790710 60.75006485]
[126.62947845 58.29501724]
[120.56646729 72.01506805]
[127.91214752 77.69487762]
[133.66534424 85.31251526]
[137.31433105 94.41517639]
[138.47761536 104.41535187]
[136.93913269 114.62860107]
[151.58264160 117.87942505]
[166.22613525 121.13024902]
[180.86964417 124.38108063]
[195.51315308 127.63190460]
[210.15664673 130.88272095]
[220.47695923 119.50789642]
[235.10690308 114.83243561]
[250.11112976 118.11402130]
[261.45355225 128.46994019]
[266.08312988 143.11447144]
[262.75454712 158.10833740]
[252.36312866 169.41825867]
[237.70414734 174.00190735]
[222.72079468 170.62631226]
[211.44349670 160.19950867]
[206.90582275 145.52622986]
[192.26231384 142.27540588]
[177.61882019 139.02458191]
[162.97531128 135.77375793]
[148.33181763 132.52293396]
[133.68830872 129.27209473]
[122.08697510 138.78045654]
[122.39903259 153.77720642]
[122.71108246 168.77397156]
[123.02313995 183.77072144]
[123.33519745 198.76747131]
[123.64725494 213.76422119]
[123.95931244 228.76098633]
[124.27136993 243.75773621]
[124.58341980 258.75448608]
[124.89547729 273.75125122]
[139.55047607 277.34201050]
[152.77627563 284.60427856]
[163.67114258 295.04287720]
[171.49224854 307.94607544]
[175.70631409 322.43414307]
[176.02603149 337.51922607]
[172.42961121 352.17285156]
[165.16224670 365.39584351]
[154.71945190 376.28668213]
[141.81321716 384.10278320]
[127.32352448 388.31127930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 65]
[26 64]
[27 63]
[28 62]
[29 61]
[30 47]
[31 46]
[32 45]
[33 44]
[68 103]
[69 102]
[81 91]
[82 90]
[83 89]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[113 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
