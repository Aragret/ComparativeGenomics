%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUUCGCCUGGGGGGGGGGUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAAUAAUUAUUACAxxxxxxxxxxAACCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGCCCCCCCCCCAAACUUCGGCU\
) } def
/len { sequence length } bind def

/coor [
[84.89160156 376.95794678]
[70.86965942 371.40493774]
[58.66970062 362.53860474]
[49.05862808 350.91629028]
[42.64060211 337.26858521]
[39.81906509 322.45339966]
[40.77138138 307.40200806]
[45.43768692 293.06060791]
[53.52465439 280.33062744]
[64.52392578 270.01235962]
[77.74408722 262.75439453]
[92.35410309 259.01293945]
[92.35410309 244.01295471]
[92.35410309 229.01295471]
[92.35410309 214.01295471]
[92.35410309 199.01295471]
[92.35410309 184.01295471]
[92.35410309 169.01295471]
[92.35410309 154.01295471]
[92.35410309 139.01295471]
[92.35410309 124.01295471]
[92.35410309 109.01295471]
[83.02104187 120.75578308]
[69.11736298 126.38496399]
[54.24363708 124.44273376]
[42.25165176 115.43205261]
[36.24692154 101.68639374]
[37.78446198 86.76540375]
[46.46611023 74.53311157]
[60.04360962 68.15725708]
[75.00085449 69.28897858]
[87.46443176 77.63518524]
[94.20649719 91.03353882]
[97.26489258 76.34864044]
[100.32328796 61.66374588]
[103.38168335 46.97884750]
[88.93400574 42.92404938]
[74.79672241 37.89275360]
[61.03574371 31.90841866]
[47.71523666 24.99894905]
[34.89730072 17.19655991]
[22.64170265 8.53763008]
[11.00558376 -0.93746907]
[0.04319909 -11.18455982]
[-10.19434071 -22.15586472]
[-19.65930176 -33.80022812]
[-28.30755615 -46.06336212]
[-36.09877777 -58.88808823]
[-42.99664307 -72.21461487]
[-48.96899033 -85.98079681]
[-53.98797607 -100.12245178]
[-58.03018951 -114.57365417]
[-61.07679367 -129.26701355]
[-63.11358261 -144.13403320]
[-64.13105774 -159.10539246]
[-64.12447357 -174.11128235]
[-63.09386063 -189.08174133]
[-61.04402542 -203.94696045]
[-57.98452759 -218.63764954]
[-53.92963028 -233.08529663]
[-48.89823914 -247.22254944]
[-42.91381454 -260.98348999]
[-36.00425339 -274.30395508]
[-28.20178032 -287.12182617]
[-19.54276848 -299.37738037]
[-10.06759071 -311.01342773]
[0.17957321 -321.97573853]
[11.15094662 -332.21319580]
[22.79537582 -341.67810059]
[35.05856705 -350.32626343]
[47.88334656 -358.11740112]
[61.20991516 -365.01516724]
[74.97613525 -370.98742676]
[89.11782837 -376.00631714]
[103.56906128 -380.04843140]
[118.26244354 -383.09494019]
[133.12947083 -385.13162231]
[148.10084534 -386.14901733]
[163.10673523 -386.14233398]
[178.07717896 -385.11160278]
[192.94238281 -383.06167603]
[207.63305664 -380.00207520]
[222.08067322 -375.94708252]
[236.21789551 -370.91558838]
[249.97879028 -364.93109131]
[263.29919434 -358.02142334]
[276.11703491 -350.21887207]
[288.37252808 -341.55978394]
[300.00851440 -332.08453369]
[310.97076416 -321.83728027]
[321.20816040 -310.86584473]
[330.67294312 -299.22134399]
[339.32104492 -286.95809937]
[347.11209106 -274.13327026]
[354.00979614 -260.80667114]
[359.98193359 -247.04039001]
[365.00073242 -232.89866638]
[369.04275513 -218.44740295]
[372.08917236 -203.75399780]
[374.12576294 -188.88696289]
[375.14303589 -173.91558838]
[375.13623047 -158.90969849]
[374.10543823 -143.93925476]
[372.05538940 -129.07406616]
[368.99569702 -114.38341522]
[364.94061279 -99.93582153]
[359.90902710 -85.79863739]
[353.92440796 -72.03778076]
[347.01467896 -58.71741104]
[339.21203613 -45.89963150]
[330.55285645 -33.64421082]
[321.07751465 -22.00828171]
[310.83020020 -11.04610348]
[299.85870361 -0.80878466]
[288.21414185 8.65594292]
[275.95083618 17.30394936]
[263.12594604 25.09491539]
[249.79930115 31.99251175]
[236.03298950 37.96458435]
[221.89123535 42.98328018]
[207.43995667 47.02520752]
[192.74652100 50.07151413]
[177.87947083 52.10800552]
[162.90808105 53.12517548]
[147.90220642 53.11828995]
[132.93176270 52.08737564]
[118.06658173 50.03724289]
[115.00818634 64.72214508]
[111.94979095 79.40703583]
[108.89139557 94.09193420]
[107.35410309 109.01295471]
[107.35410309 124.01295471]
[107.35410309 139.01295471]
[107.35410309 154.01295471]
[107.35410309 169.01295471]
[107.35410309 184.01295471]
[107.35410309 199.01295471]
[107.35410309 214.01295471]
[107.35410309 229.01295471]
[107.35410309 244.01295471]
[107.35410309 259.01293945]
[121.96411133 262.75439453]
[135.18426514 270.01235962]
[146.18354797 280.33062744]
[154.27050781 293.06060791]
[158.93681335 307.40200806]
[159.88912964 322.45339966]
[157.06759644 337.26858521]
[150.64956665 350.91629028]
[141.03849792 362.53860474]
[128.83854675 371.40493774]
[114.81659698 376.95794678]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[33 130]
[34 129]
[35 128]
[36 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
