%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGGGAAAAAAGGGGGGGGGGGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUCxxxxxxxxxxUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCCCCCCCCCCCGGAAAAAAAG\
) } def
/len { sequence length } bind def

/coor [
[84.07417297 408.48776245]
[70.58708191 401.75265503]
[59.10416794 391.98504639]
[50.29303741 379.75280762]
[44.66596222 365.76712036]
[42.55008698 350.84109497]
[44.06842804 335.84249878]
[49.13271332 321.64331055]
[57.44851303 309.06909180]
[68.53234863 298.85089111]
[81.73983002 291.58273315]
[96.30308533 287.68722534]
[95.99908447 272.69030762]
[95.69508362 257.69338989]
[95.39107513 242.69647217]
[95.08707428 227.69955444]
[94.78306580 212.70263672]
[94.47906494 197.70571899]
[94.17505646 182.70880127]
[93.87105560 167.71188354]
[93.56704712 152.71496582]
[93.26304626 137.71804810]
[92.95904541 122.72112274]
[76.56507111 104.07781219]
[85.69804382 80.99266815]
[80.91845703 66.77452850]
[76.13887024 52.55638504]
[71.35928345 38.33824539]
[66.57969666 24.12010193]
[61.80011368 9.90196037]
[55.74538803 -3.82175279]
[48.46585846 -16.93695259]
[41.18632889 -30.05215073]
[33.90679932 -43.16735077]
[21.71012878 -47.47966003]
[15.92812634 -58.60141373]
[19.18996048 -70.28810120]
[12.17773056 -83.54814148]
[-1.11339462 -92.13048553]
[-0.22337072 -106.99847412]
[-7.23559999 -120.25851440]
[-14.24782944 -133.51855469]
[-24.47162628 -144.49461365]
[-37.20129013 -152.42907715]
[-49.93095398 -160.36354065]
[-62.66061783 -168.29798889]
[-75.39028168 -176.23245239]
[-88.11994934 -184.16691589]
[-100.84960938 -192.10137939]
[-116.18623352 -188.28515625]
[-129.68608093 -196.50277710]
[-133.33995056 -211.87889099]
[-124.98004913 -225.29110718]
[-109.56616974 -228.78221130]
[-96.24308014 -220.28097534]
[-92.91514587 -204.83103943]
[-80.18548584 -196.89657593]
[-67.45581818 -188.96211243]
[-54.72615814 -181.02766418]
[-41.99649429 -173.09320068]
[-29.26683044 -165.15873718]
[-16.53716660 -157.22427368]
[-23.35503387 -170.58529663]
[-27.08887100 -185.11314392]
[-27.55824661 -200.10580444]
[-24.74048042 -214.83876038]
[-18.77173615 -228.60008240]
[-9.94044113 -240.72477722]
[1.32664454 -250.62693787]
[14.48505974 -257.82806396]
[28.89894485 -261.98016357]
[43.87177277 -262.88259888]
[58.68001175 -260.49172974]
[72.60807037 -254.92315674]
[84.98290253 -246.44592285]
[95.20652008 -235.46969604]
[102.78487396 -222.52487183]
[107.35176849 -208.23698425]
[108.68649292 -193.29649353]
[106.72457123 -178.42535400]
[101.56079865 -164.34217834]
[93.44470978 -151.72755432]
[82.76849365 -141.19102478]
[70.04807281 -133.24174500]
[55.89812851 -128.26388550]
[41.00244141 -126.49797058]
[26.08081436 -128.02934265]
[11.85431385 -132.78398132]
[-0.98778969 -140.53077698]
[6.02443933 -127.27074432]
[13.03666878 -114.01070404]
[25.82623291 -106.37680817]
[25.43776894 -90.56037140]
[32.45000076 -77.30033112]
[47.78422546 -68.81803131]
[47.02199936 -50.44688034]
[54.30152893 -37.33168030]
[61.58105850 -24.21648216]
[68.86058807 -11.10128212]
[71.82641602 -25.80515480]
[82.16677856 -36.67147064]
[96.70555115 -40.36255264]
[110.97702789 -35.74465179]
[120.59759521 -24.23619270]
[122.61222839 -9.37209892]
[116.40209961 4.28199768]
[103.87471771 12.53212643]
[88.87796021 12.84419155]
[76.01825714 5.12237358]
[80.79784393 19.34051514]
[85.57743073 33.55865479]
[90.35701752 47.77679825]
[95.13660431 61.99493790]
[99.91619110 76.21308136]
[106.06372070 76.99878693]
[111.79962921 79.34586334]
[116.73455048 83.09499359]
[120.53350067 87.99166870]
[122.93858337 93.70349884]
[123.78654480 99.84275055]
[138.05239868 104.47800446]
[152.31823730 109.11325836]
[169.25057983 108.25740814]
[174.76031494 124.29109955]
[160.87847900 134.02407837]
[147.68298340 123.37910461]
[133.41714478 118.74385071]
[119.15129089 114.10859680]
[115.99696350 117.60459137]
[112.21579742 120.41075134]
[107.95596313 122.41712189]
[108.25996399 137.41403198]
[108.56397247 152.41094971]
[108.86797333 167.40788269]
[109.17197418 182.40480042]
[109.47598267 197.40171814]
[109.77998352 212.39863586]
[110.08399200 227.39555359]
[110.38799286 242.39247131]
[110.69200134 257.38940430]
[110.99600220 272.38632202]
[111.30001068 287.38323975]
[126.00917053 290.68536377]
[139.50035095 297.41229248]
[150.98918152 307.17291260]
[159.80772400 319.39981079]
[165.44328308 333.38208008]
[167.56819153 348.30682373]
[166.05894470 363.30636597]
[161.00326538 377.50860596]
[152.69509888 390.08786011]
[141.61746216 400.31277466]
[128.41438293 407.58892822]
[113.85349274 411.49325562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[25 114]
[26 113]
[27 112]
[28 111]
[29 110]
[30 109]
[31 99]
[32 98]
[33 97]
[34 96]
[37 94]
[38 93]
[40 91]
[41 90]
[42 89]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[48 57]
[49 56]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
