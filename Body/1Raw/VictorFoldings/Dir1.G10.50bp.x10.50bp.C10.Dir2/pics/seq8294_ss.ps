%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAUCAACAACCGGGGGGGGGGGACUAAUCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAxxxxxxxxxxCUGUUCUUUCAUGGGGAAGCAGAUUUGGGUACCACCCAAGUAUUGACUCACCCCCCCCCCCCCAUCAACAACCG\
) } def
/len { sequence length } bind def

/coor [
[83.65757751 399.44552612]
[69.78491211 393.59378052]
[57.43227768 384.98529053]
[47.13966751 373.99639893]
[39.35703659 361.10745239]
[34.42460251 346.88195801]
[32.55799484 331.94177246]
[33.83880997 316.94000244]
[38.21105957 302.53247070]
[45.48360825 289.34899902]
[55.33852768 277.96594238]
[67.34500122 268.88088989]
[80.97816467 262.49099731]
[95.64202881 259.07562256]
[95.34567261 244.07855225]
[95.04931641 229.08148193]
[94.75296021 214.08441162]
[94.45660400 199.08734131]
[94.16024780 184.09027100]
[93.86388397 169.09320068]
[93.56752777 154.09613037]
[93.27117157 139.09904480]
[92.97481537 124.10198212]
[78.37384796 116.47082520]
[70.73975372 100.42757416]
[74.52140808 81.74626160]
[89.71394348 68.20042419]
[111.28326416 66.33979797]
[104.96637726 52.73476410]
[98.64949799 39.12972641]
[92.33261871 25.52469063]
[74.84066010 24.39713478]
[60.38438034 14.64239693]
[52.86894608 -0.99639606]
[54.26988602 -18.20166779]
[64.11466217 -32.27328873]
[57.26522064 -45.61814499]
[50.41578293 -58.96300125]
[43.56634521 -72.30786133]
[39.72673035 -74.58421326]
[37.10560226 -77.66943359]
[35.80801392 -81.06992340]
[35.76401138 -84.30984497]
[36.75034714 -86.98786926]
[30.97588539 -100.83184814]
[25.20142365 -114.67581940]
[22.91920280 -99.85045624]
[16.02397728 -86.52919769]
[5.23720741 -76.10588074]
[-8.31246758 -69.67110443]
[-23.20732117 -67.89815521]
[-37.88887787 -70.97254181]
[-50.82098389 -78.57258606]
[-60.65052795 -89.90308380]
[-66.34902191 -103.77849579]
[-67.32023621 -118.74702454]
[-63.46253967 -133.24247742]
[-55.17957306 -145.74816895]
[-43.33799744 -154.95562744]
[-29.17681694 -159.90142822]
[-14.17774391 -160.06809998]
[0.08984564 -155.43821716]
[12.13310719 -146.49618530]
[20.69266319 -134.17611694]
[19.80405426 -149.14976501]
[18.76756287 -164.11390686]
[17.58329010 -179.06709290]
[16.39901543 -194.02026367]
[15.21474361 -208.97344971]
[0.59908485 -212.99317932]
[-11.75851154 -221.77188110]
[-20.36580658 -234.24948120]
[-24.18342590 -248.91923523]
[-22.75037384 -264.00970459]
[-16.23970032 -277.69863892]
[-5.43759775 -288.33303833]
[8.35152531 -294.62872314]
[23.46256447 -295.82550049]
[38.07078934 -291.77883911]
[50.41218948 -282.97738647]
[58.99647522 -270.48394775]
[62.78705215 -255.80718994]
[61.32619476 -240.71939087]
[54.79030228 -227.04246521]
[43.96862030 -216.42799377]
[30.16792107 -210.15771484]
[31.35219383 -195.20454407]
[32.53646469 -180.25135803]
[33.72073746 -165.29818726]
[37.40345383 -158.84414673]
[34.77770996 -150.03837585]
[35.66632080 -135.06471252]
[39.04539871 -120.45027924]
[44.81985855 -106.60630798]
[50.59431839 -92.76233673]
[56.91120148 -79.15729523]
[63.76063919 -65.81243896]
[70.61007690 -52.46758270]
[77.45951843 -39.12272644]
[90.13017273 -39.85670853]
[102.17559052 -35.71140671]
[111.78153992 -27.27356148]
[117.48696136 -15.77922726]
[118.40616608 -2.93277812]
[114.36611938 9.34578800]
[105.93765259 19.20780945]
[112.25453186 32.81284714]
[118.57141876 46.41788101]
[124.88829803 60.02291870]
[138.02432251 67.26480103]
[152.90078735 65.34364319]
[167.77725220 63.42248917]
[182.65371704 61.50133133]
[197.53018188 59.58017349]
[212.46446228 51.55500031]
[224.31022644 63.68405914]
[215.93441772 78.42455292]
[199.45132446 74.45663452]
[184.57487488 76.37779236]
[169.69841003 78.29895020]
[154.82194519 80.22010803]
[139.94548035 82.14126587]
[138.46600342 97.06812286]
[152.67590332 101.87216949]
[166.88578796 106.67622375]
[182.85090637 102.92823792]
[193.88056946 115.06407928]
[188.62841797 130.59942627]
[172.49740601 133.55284119]
[162.08174133 120.88611603]
[147.87185669 116.08206940]
[133.66195679 111.27802277]
[125.85906982 118.91008759]
[116.86116791 123.06433105]
[107.97188568 123.80562592]
[108.26824188 138.80268860]
[108.56460571 153.79977417]
[108.86096191 168.79684448]
[109.15731812 183.79391479]
[109.45367432 198.79098511]
[109.75003052 213.78805542]
[110.04638672 228.78512573]
[110.34274292 243.78219604]
[110.63910675 258.77926636]
[125.42645264 261.61264038]
[139.30140686 267.45895386]
[151.65744019 276.06256104]
[161.95436096 287.04742432]
[169.74206543 299.93328857]
[174.68009949 314.15682983]
[176.55258179 329.09628296]
[175.27766418 344.09857178]
[170.91108704 358.50781250]
[163.64373779 371.69415283]
[153.79328918 383.08108521]
[141.79039001 392.17086792]
[128.15974426 398.56610107]
[113.49722290 401.98724365]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 144]
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[28 109]
[29 108]
[30 107]
[31 106]
[36 99]
[37 98]
[38 97]
[39 96]
[44 95]
[45 94]
[46 93]
[64 92]
[65 91]
[66 89]
[67 88]
[68 87]
[69 86]
[110 122]
[111 121]
[112 120]
[113 119]
[114 118]
[123 132]
[124 131]
[125 130]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
