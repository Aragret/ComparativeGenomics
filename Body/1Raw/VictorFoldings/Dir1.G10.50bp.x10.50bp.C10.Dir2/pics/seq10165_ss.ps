%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUGCCGCAGGGGGGGGGGGUACUCUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCxxxxxxxxxxAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCCCCCCCCCCCUAGCCGCAG\
) } def
/len { sequence length } bind def

/coor [
[83.74841309 378.69668579]
[70.87513733 370.79379272]
[60.75084305 359.58331299]
[54.19625854 345.97396851]
[51.74273682 331.06903076]
[53.58917236 316.07678223]
[59.58588791 302.21258545]
[69.24674988 290.60034180]
[81.78859711 282.18139648]
[96.19471741 277.63821411]
[95.88265991 262.64147949]
[95.57060242 247.64471436]
[95.25854492 232.64796448]
[94.94649506 217.65121460]
[94.63443756 202.65444946]
[94.32238007 187.65769958]
[94.01032257 172.66094971]
[93.69826508 157.66419983]
[93.38620758 142.66743469]
[93.07415771 127.67068481]
[81.43081665 121.65223694]
[73.70812988 111.06218719]
[71.53666687 98.13648224]
[75.37488556 85.60424042]
[84.41240692 76.11148834]
[79.80683899 61.83602524]
[75.20127869 47.56056595]
[70.59571075 33.28510284]
[59.13878632 31.64757156]
[49.18088913 25.85165596]
[42.16147614 16.77998161]
[39.07834625 5.78534460]
[40.34593201 -5.51096535]
[45.74003601 -15.45822525]
[54.43632126 -22.61750221]
[50.73015976 -37.15243912]
[47.02399826 -51.68737411]
[43.31783676 -66.22231293]
[38.26908112 -80.34711456]
[31.92195320 -93.93806458]
[25.57482338 -107.52901459]
[12.72490692 -116.75887299]
[14.34994793 -131.56455994]
[8.00281906 -145.15551758]
[-6.39299631 -140.84524536]
[-21.26299286 -138.67706299]
[-36.29021835 -138.69715881]
[-51.15436172 -140.90512085]
[-65.53859711 -145.25386047]
[-79.13632202 -151.65072632]
[-91.65769958 -159.95932007]
[-102.83583832 -170.00259399]
[-112.43247223 -181.56643677]
[-120.24304962 -194.40437317]
[-126.10108948 -208.24276733]
[-129.88172913 -222.78665161]
[-131.50436401 -237.72602844]
[-130.93444824 -252.74246216]
[-128.18408203 -267.51586914]
[-123.31192780 -281.73135376]
[-116.42182159 -295.08590698]
[-107.66062164 -307.29489136]
[-97.21508026 -318.09805298]
[-85.30783844 -327.26513672]
[-72.19271088 -334.60073853]
[-58.14923096 -339.94851685]
[-43.47674942 -343.19445801]
[-28.48800850 -344.26940918]
[-13.50249290 -343.15039062]
[1.16038144 -339.86132812]
[15.18807316 -334.47229004]
[28.28158188 -327.09817505]
[40.16181564 -317.89611816]
[50.57555389 -307.06225586]
[59.30081940 -294.82757568]
[66.15163422 -281.45281982]
[70.98197937 -267.22308350]
[73.68888092 -252.44165039]
[74.21466064 -237.42361450]
[72.54809570 -222.48907471]
[68.72471619 -207.95637512]
[62.82601929 -194.13525391]
[54.97772980 -181.32032776]
[45.34713745 -169.78475952]
[34.13952255 -159.77439880]
[21.59376907 -151.50263977]
[27.94089890 -137.91169739]
[40.33682632 -129.65394592]
[39.16577530 -113.87614441]
[45.51290512 -100.28519440]
[51.86003494 -86.69424438]
[55.89537048 -101.14125061]
[67.00164032 -111.22344971]
[81.77046967 -113.84674835]
[95.66949463 -108.20607758]
[104.43328094 -96.03249359]
[105.37232971 -81.06192017]
[98.19846344 -67.88862610]
[85.11325073 -60.55532837]
[70.13237762 -61.31253052]
[57.85277557 -69.92847443]
[61.55893707 -55.39353561]
[65.26509857 -40.85860062]
[68.97126007 -26.32366371]
[86.66179657 -20.50104332]
[97.41667175 -5.11411285]
[96.79677582 13.79758644]
[84.87117004 28.67953873]
[89.47673798 42.95500183]
[94.08229828 57.23046112]
[98.68786621 71.50592041]
[119.63840485 79.31262970]
[128.52375793 99.82896423]
[143.01936340 103.68611908]
[157.51495361 107.54328156]
[172.01054382 111.40043640]
[185.55633545 103.25873566]
[200.87129211 107.16101074]
[208.86932373 120.79212189]
[204.80534363 136.06495667]
[191.09043884 143.91842651]
[175.86141968 139.69320679]
[168.15339661 125.89603424]
[153.65779114 122.03887939]
[139.16220093 118.18171692]
[124.66660309 114.32455444]
[121.52767181 118.71345520]
[117.61840057 122.43270874]
[113.07865906 125.34922028]
[108.07090759 127.35862732]
[108.38296509 142.35537720]
[108.69502258 157.35214233]
[109.00708008 172.34889221]
[109.31912994 187.34564209]
[109.63118744 202.34239197]
[109.94324493 217.33915710]
[110.25530243 232.33590698]
[110.56735992 247.33265686]
[110.87941742 262.32940674]
[111.19146729 277.32617188]
[125.77410889 281.26611328]
[138.65531921 289.15606689]
[148.79086304 300.35638428]
[155.35911560 313.95913696]
[157.82762146 328.86160278]
[155.99624634 343.85568237]
[150.01345825 357.72589111]
[140.36427307 369.34786987]
[127.83088684 377.77941895]
[113.42933655 382.33703613]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 111]
[26 110]
[27 109]
[28 108]
[35 104]
[36 103]
[37 102]
[38 101]
[39 91]
[40 90]
[41 89]
[43 87]
[44 86]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
