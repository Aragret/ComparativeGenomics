%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUACUUACGGGGGGGGGGUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAUAAUAAUAACAAUUGAxxxxxxxxxxUCUCCUACUUACAGGACUCAACAUACUAGUCACAGCCCUAUACUCCCUCUCCCCCCCCCCACAUAUUUAC\
) } def
/len { sequence length } bind def

/coor [
[72.75182343 372.80807495]
[58.90588379 366.79205322]
[47.19722366 357.26263428]
[38.49469757 344.92694092]
[33.44409561 330.70043945]
[32.42020798 315.63876343]
[35.49900436 300.85958862]
[42.45202637 287.45965576]
[52.76330948 276.43331909]
[65.66769409 268.59881592]
[80.20758057 264.53750610]
[80.20758057 249.53750610]
[80.20758057 234.53750610]
[80.20758057 219.53750610]
[80.20758057 204.53750610]
[80.20758057 189.53750610]
[80.20758057 174.53750610]
[80.20758057 159.53750610]
[80.20758057 144.53750610]
[80.20758057 129.53750610]
[74.46057892 114.30517578]
[77.02899933 100.93602753]
[84.80760956 93.04845428]
[93.51175690 91.84081268]
[87.44874573 78.12075806]
[81.38573456 64.40071106]
[75.32271576 50.68065262]
[69.25970459 36.96060181]
[63.19669342 23.24054718]
[57.13367844 9.52049351]
[51.07066727 -4.19956017]
[38.00668335 -1.35419083]
[24.64565468 -1.00477886]
[11.46000671 -3.16193390]
[-1.08436167 -7.74766731]
[-12.54454041 -14.59821129]
[-22.51624870 -23.46986580]
[-30.64809608 -34.04766846]
[-36.65396118 -45.95657730]
[-40.32306671 -58.77476120]
[-41.52736282 -72.04855347]
[-40.22601700 -85.30850220]
[-36.46676636 -98.08596802]
[-30.38419914 -109.92969513]
[-22.19491577 -120.42174530]
[-12.18982601 -129.19223022]
[-0.72381157 -135.93240356]
[-5.62536240 -150.10896301]
[-10.52691364 -164.28552246]
[-15.42846394 -178.46208191]
[-20.33001518 -192.63864136]
[-25.23156548 -206.81520081]
[-40.14034653 -204.76228333]
[-55.16314697 -205.65766907]
[-69.72252655 -209.46694946]
[-83.25886536 -216.04371643]
[-95.25186157 -225.13516235]
[-105.24053955 -236.39183044]
[-112.84095001 -249.38104248]
[-117.76096344 -263.60354614]
[-119.81147003 -278.51266479]
[-118.91364288 -293.53533936]
[-115.10200500 -308.09408569]
[-108.52304840 -321.62936401]
[-99.42967224 -333.62088013]
[-88.17138672 -343.60772705]
[-75.18093109 -351.20605469]
[-60.95762634 -356.12374878]
[-46.04818344 -358.17184448]
[-31.02567291 -357.27160645]
[-16.46752548 -353.45761108]
[-2.93331695 -346.87646484]
[9.05673504 -337.78112793]
[19.04176521 -326.52124023]
[26.63797379 -313.52954102]
[31.55338478 -299.30545044]
[33.59906006 -284.39566040]
[32.69637299 -269.37332153]
[28.88001823 -254.81578064]
[22.29668617 -241.28263855]
[13.19942474 -229.29405212]
[1.93790531 -219.31085205]
[-11.05500793 -211.71675110]
[-6.15345669 -197.54019165]
[-1.25190592 -183.36363220]
[3.64964485 -169.18707275]
[8.55119610 -155.01051331]
[13.45274639 -140.83395386]
[30.09216690 -142.67161560]
[46.70523834 -140.54673767]
[62.36109543 -134.57469177]
[76.18164825 -125.08650970]
[87.39080811 -112.61051941]
[95.35808563 -97.84296417]
[99.63404846 -81.60915375]
[99.97567749 -64.81729889]
[96.36015320 -48.40773010]
[88.98638916 -33.30023575]
[78.26402283 -20.34251022]
[64.79071808 -10.26257324]
[70.85373688 3.45748019]
[76.91674805 17.17753410]
[82.97975922 30.89758682]
[89.04277039 44.61764145]
[95.10578918 58.33769608]
[101.16880035 72.05774689]
[107.23181152 85.77780151]
[119.31179810 94.67015076]
[134.21369934 96.38284302]
[149.11560059 98.09552765]
[157.67651367 85.40815735]
[171.15843201 78.16271210]
[186.46331787 78.02414703]
[200.07420349 85.02429962]
[208.86343384 97.55458832]
[210.81127930 112.73564911]
[205.47016907 127.07897186]
[194.06742859 137.28857422]
[179.22332764 141.01837158]
[164.34893799 137.41127014]
[152.86228943 127.29617310]
[147.40290833 112.99743652]
[132.50100708 111.28474426]
[117.59911346 109.57205200]
[112.00122833 114.56341553]
[126.24436951 119.26797485]
[129.29156494 133.95520020]
[118.09558868 143.93768311]
[103.85254669 139.23281860]
[100.80546570 124.54614258]
[95.20758057 129.53750610]
[95.20758057 144.53750610]
[95.20758057 159.53750610]
[95.20758057 174.53750610]
[95.20758057 189.53750610]
[95.20758057 204.53750610]
[95.20758057 219.53750610]
[95.20758057 234.53750610]
[95.20758057 249.53750610]
[95.20758057 264.53750610]
[109.74746704 268.59881592]
[122.65184784 276.43331909]
[132.96313477 287.45965576]
[139.91615295 300.85958862]
[142.99494934 315.63876343]
[141.97105408 330.70043945]
[136.92045593 344.92694092]
[128.21794128 357.26263428]
[116.50926971 366.79205322]
[102.66333771 372.80807495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 107]
[25 106]
[26 105]
[27 104]
[28 103]
[29 102]
[30 101]
[31 100]
[47 88]
[48 87]
[49 86]
[50 85]
[51 84]
[52 83]
[108 124]
[109 123]
[110 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
