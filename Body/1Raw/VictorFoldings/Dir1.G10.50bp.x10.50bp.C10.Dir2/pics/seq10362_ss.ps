%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCACUAAUGGGGGGGGGGAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCUUACCCCCCAxxxxxxxxxxCACCUCAACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUCCCCCCCCCCUCCCACUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.42300415]
[71.19830322 382.40698242]
[59.48964310 372.87756348]
[50.78712082 360.54190063]
[45.73651886 346.31536865]
[44.71262741 331.25369263]
[47.79142761 316.47451782]
[54.74444962 303.07458496]
[65.05573273 292.04824829]
[77.96011353 284.21374512]
[92.50000000 280.15243530]
[92.50000000 265.15243530]
[92.50000000 250.15243530]
[92.50000000 235.15243530]
[92.50000000 220.15243530]
[92.50000000 205.15243530]
[92.50000000 190.15243530]
[92.50000000 175.15243530]
[92.50000000 160.15243530]
[92.50000000 145.15243530]
[92.50000000 130.15243530]
[92.50000000 115.15244293]
[87.74618530 100.92565918]
[78.72865295 88.93882751]
[69.71112823 76.95199585]
[60.69359589 64.96516418]
[51.67606735 52.97833252]
[42.65853500 40.99149704]
[33.64100647 29.00466537]
[20.80541229 36.79094696]
[7.25833082 43.26050186]
[-6.86559916 48.34904099]
[-21.42600441 52.00598145]
[-36.27817154 54.19498444]
[-51.27449036 54.89429092]
[-66.26591492 54.09695053]
[-81.10345459 51.81088638]
[-95.63964081 48.05882645]
[-109.72999573 42.87805176]
[-123.23448944 36.32005692]
[-136.01890564 28.45002174]
[-147.95616150 19.34616280]
[-158.92764282 9.09895897]
[-168.82431030 -2.18974376]
[-177.54777527 -14.40775108]
[-185.01135254 -27.43362999]
[-191.14086914 -41.13792419]
[-195.87541199 -55.38442612]
[-199.16789246 -70.03154755]
[-200.98562622 -84.93370819]
[-201.31053162 -99.94281006]
[-200.13937378 -114.90966797]
[-197.48379517 -129.68554688]
[-193.37019348 -144.12358093]
[-187.83944702 -158.08027649]
[-180.94653320 -171.41693115]
[-172.75994873 -184.00099182]
[-163.36106873 -195.70738220]
[-152.84329224 -206.41976929]
[-141.31117249 -216.03166199]
[-128.87930298 -224.44755554]
[-115.67124176 -231.58378601]
[-101.81826782 -237.36944580]
[-87.45806885 -241.74702454]
[-72.73335266 -244.67301941]
[-57.79047394 -246.11834717]
[-42.77794266 -246.06863403]
[-27.84496307 -244.52439880]
[-13.13994789 -241.50096130]
[1.19095039 -237.02838135]
[15.00530243 -231.15110779]
[28.16581154 -223.92756653]
[40.54167938 -215.42953491]
[52.00990295 -205.74147034]
[62.45650864 -194.95968628]
[71.77766418 -183.19131470]
[79.88073730 -170.55331421]
[86.68518066 -157.17131042]
[92.12338257 -143.17828369]
[96.14128113 -128.71333313]
[98.69895172 -113.92018890]
[99.77097321 -98.94589996]
[99.34668732 -83.93928528]
[97.43031311 -69.04948425]
[94.04090118 -54.42448807]
[89.21212769 -40.20965195]
[82.99199677 -26.54624939]
[75.44232178 -13.57007885]
[66.63813019 -1.41010725]
[56.66693878 9.81281090]
[45.62783813 19.98713493]
[54.64536667 31.97396851]
[63.66289902 43.96080017]
[72.68042755 55.94763184]
[81.69795990 67.93446350]
[90.71548462 79.92129517]
[99.73301697 91.90813446]
[102.08758545 89.32666016]
[105.55898285 87.52787781]
[109.88567352 86.87154388]
[114.70460510 87.63336945]
[119.57697296 89.97871399]
[134.53723145 91.07002258]
[144.82818604 83.22465515]
[157.30380249 84.48088837]
[165.29432678 93.61646271]
[180.22863770 95.01876831]
[195.16294861 96.42107391]
[202.23657227 82.96624756]
[213.92388916 73.24642181]
[228.44265747 68.74378204]
[243.57888794 70.14496613]
[257.02438354 77.23628998]
[266.72882080 88.93637848]
[271.21237183 103.46105957]
[269.79129028 118.59542084]
[262.68228149 132.03158569]
[250.96942139 141.72064209]
[236.43885803 146.18505859]
[221.30638123 144.74406433]
[207.87957764 137.61738586]
[198.20594788 125.89180756]
[193.76063538 111.35537720]
[178.82633972 109.95307159]
[163.89202881 108.55077362]
[148.39636230 116.72905731]
[133.44590759 106.03027344]
[118.48566437 104.93895721]
[107.50000000 115.15244293]
[107.50000000 130.15243530]
[107.50000000 145.15243530]
[107.50000000 160.15243530]
[107.50000000 175.15243530]
[107.50000000 190.15243530]
[107.50000000 205.15243530]
[107.50000000 220.15243530]
[107.50000000 235.15243530]
[107.50000000 250.15243530]
[107.50000000 265.15243530]
[107.50000000 280.15243530]
[122.03988647 284.21374512]
[134.94427490 292.04824829]
[145.25555420 303.07458496]
[152.20857239 316.47451782]
[155.28736877 331.25369263]
[154.26348877 346.31536865]
[149.21287537 360.54190063]
[140.51036072 372.87756348]
[128.80169678 382.40698242]
[114.95575714 388.42300415]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[29 91]
[102 128]
[103 127]
[106 125]
[107 124]
[108 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
