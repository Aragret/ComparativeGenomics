%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACGAAAGGGGGGGGGGGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAGCCACxxxxxxxxxxAUGACAAAAACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACCCCCCCCCCCUAAACGUAAG\
) } def
/len { sequence length } bind def

/coor [
[81.34394836 316.68673706]
[71.54035950 305.23452759]
[64.76296997 291.76864624]
[61.40579987 277.07192993]
[61.66403580 261.99890137]
[65.52266693 247.42582703]
[72.75734711 234.19998169]
[82.94747925 223.09031677]
[95.50060272 214.74272156]
[109.68691254 209.64250183]
[108.12932587 194.72358704]
[106.57174683 179.80468750]
[105.01416779 164.88577271]
[103.45658875 149.96685791]
[101.89900208 135.04794312]
[100.34142303 120.12902832]
[87.73029327 112.00749207]
[73.50351715 116.76130676]
[59.27673721 121.51512146]
[45.04995728 126.26893616]
[30.82317924 131.02275085]
[16.59639931 135.77656555]
[29.27490234 143.79252625]
[32.75933838 158.38220215]
[25.07140541 171.26225281]
[10.57595730 175.11996460]
[-2.49715495 167.76512146]
[-6.72562075 153.37345886]
[0.29247126 140.11489868]
[-14.41549015 143.06039429]
[-24.47196388 155.56025696]
[-40.51360321 155.34725952]
[-50.23463440 142.58477783]
[-46.17791748 127.06308746]
[-31.45541573 120.68911743]
[-17.36097336 128.35243225]
[-2.65301132 125.40694427]
[11.84258556 121.54978180]
[26.06936455 116.79596710]
[40.29614258 112.04215240]
[54.52292252 107.28833771]
[68.74970245 102.53452301]
[82.97647858 97.78070831]
[94.06779480 87.68206024]
[100.13080597 73.96200562]
[106.19382477 60.24195480]
[112.25683594 46.52190018]
[117.45224762 32.45038223]
[121.75983429 18.08219719]
[126.06742096 3.71401238]
[130.37500000 -10.65417194]
[134.68258667 -25.02235603]
[120.81163025 -30.76583862]
[107.59291077 -37.88317490]
[95.16207886 -46.30132675]
[83.64668274 -55.93391037]
[73.16489410 -66.68208313]
[63.82427597 -78.43553925]
[55.72068024 -91.07369232]
[48.93725967 -104.46682739]
[43.54362488 -118.47753143]
[39.59511948 -132.96202087]
[37.13226700 -147.77165222]
[36.18033981 -162.75447083]
[36.74910355 -177.75671387]
[38.83272171 -192.62445068]
[42.40981293 -207.20510864]
[47.44367218 -221.34906006]
[53.88264465 -234.91116333]
[61.66065216 -247.75224304]
[70.69788361 -259.74057007]
[80.90160370 -270.75305176]
[92.16709137 -280.67675781]
[104.37876892 -289.40979004]
[117.41130066 -296.86257935]
[131.13096619 -302.95864868]
[145.39697266 -307.63540649]
[160.06292725 -310.84487915]
[174.97833252 -312.55413818]
[189.99014282 -312.74563599]
[204.94430542 -311.41738892]
[219.68736267 -308.58306885]
[234.06802368 -304.27175903]
[247.93872070 -298.52767944]
[261.15713501 -291.40975952]
[273.58758545 -282.99105835]
[285.10256958 -273.35797119]
[295.58389282 -262.60931396]
[304.92398071 -250.85545349]
[313.02700806 -238.21694946]
[319.80984497 -224.82351685]
[325.20288086 -210.81257629]
[329.15072632 -196.32791138]
[331.61294556 -181.51817322]
[332.56420898 -166.53530884]
[331.99478149 -151.53308105]
[329.91052246 -136.66543579]
[326.33276367 -122.08494568]
[321.29830933 -107.94121552]
[314.85873413 -94.37939453]
[307.08013916 -81.53865051]
[298.04238892 -69.55074310]
[287.83819580 -58.53868866]
[276.57226562 -48.61549377]
[264.36019897 -39.88298416]
[251.32734680 -32.43077087]
[237.60740662 -26.33532143]
[223.34120178 -21.65919113]
[208.67510986 -18.45036125]
[193.75961304 -16.74176025]
[178.74780273 -16.55092239]
[163.79370117 -17.87980461]
[149.05078125 -20.71477127]
[144.74319458 -6.34658718]
[140.43560791 8.02159691]
[136.12802124 22.38978195]
[131.82043457 36.75796509]
[145.67547607 31.01012039]
[159.60923767 36.56441879]
[165.71076965 50.26738739]
[160.51589966 64.33911133]
[146.97404480 70.79030609]
[132.77363586 65.95829010]
[125.97689056 52.58491135]
[119.91387939 66.30496979]
[113.85086060 80.02501678]
[107.78784943 93.74507141]
[114.49150848 97.70903015]
[118.09246063 106.87379456]
[115.26033783 118.57144928]
[116.81791687 133.49035645]
[118.37549591 148.40927124]
[119.93308258 163.32818604]
[121.49066162 178.24710083]
[123.04824066 193.16601562]
[124.60581970 208.08493042]
[139.53967285 210.14489746]
[153.54632568 215.71957397]
[165.81146240 224.48484802]
[175.62199402 235.93110657]
[182.40754700 249.39289856]
[185.77362061 264.08755493]
[185.52452087 279.16076660]
[181.67472839 293.73617554]
[174.44807434 306.96636963]
[164.26467896 318.08224487]
[151.71661377 326.43743896]
[137.53340149 331.54626465]
[122.53964233 333.11163330]
[107.60704041 331.04260254]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 136]
[11 135]
[12 134]
[13 133]
[14 132]
[15 131]
[16 130]
[17 43]
[18 42]
[19 41]
[20 40]
[21 39]
[22 38]
[29 37]
[30 36]
[44 127]
[45 126]
[46 125]
[47 124]
[48 117]
[49 116]
[50 115]
[51 114]
[52 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
