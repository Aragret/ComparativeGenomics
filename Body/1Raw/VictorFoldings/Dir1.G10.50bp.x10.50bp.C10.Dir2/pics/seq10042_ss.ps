%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUAUCAUCACGGGGGGGGGGCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUxxxxxxxxxxCCCUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCCCCCCCCCCCGCUAUCACCAC\
) } def
/len { sequence length } bind def

/coor [
[105.83100128 456.07269287]
[92.34211731 449.34115601]
[80.85662079 439.57659912]
[72.04225159 427.34671021]
[66.41146851 413.36248779]
[64.29164124 398.43704224]
[65.80600739 383.43801880]
[70.86653137 369.23751831]
[79.17899323 356.66110229]
[90.26012421 346.43994141]
[103.46568298 339.16830444]
[118.02790833 335.26892090]
[117.71993256 320.27209473]
[117.41194916 305.27526855]
[117.10397339 290.27841187]
[116.79599762 275.28158569]
[116.48802185 260.28472900]
[116.18003845 245.28790283]
[115.87206268 230.29106140]
[115.56408691 215.29423523]
[115.25611115 200.29739380]
[114.94812775 185.30055237]
[114.64015198 170.30371094]
[106.64316559 157.73799133]
[114.09549713 143.78186035]
[106.09851074 131.21614075]
[113.55083466 117.26000977]
[98.90924072 128.07308960]
[76.82693481 125.21324158]
[62.05481720 127.81796265]
[47.28269958 130.42268372]
[36.93997955 142.68676758]
[20.90755081 142.10301208]
[11.48411942 129.11924744]
[15.89853573 113.69548035]
[30.76443672 107.66352081]
[44.67797852 115.65056610]
[59.45009232 113.04584503]
[74.22221375 110.44112396]
[75.60033417 103.06882477]
[60.72565842 105.00379181]
[54.28889084 91.45506287]
[65.18544769 81.14656067]
[78.35657501 88.32422638]
[79.73469543 80.95192719]
[66.90103912 73.18679810]
[54.06738663 65.42166138]
[41.23373413 57.65652466]
[28.40007973 49.89138794]
[12.00220680 50.09583664]
[3.85997605 35.86080551]
[12.34941578 21.83007431]
[28.73731995 22.43725586]
[36.16521454 37.05773544]
[48.99887085 44.82287216]
[61.83252335 52.58800507]
[74.66617584 60.35314178]
[87.49983215 68.11827850]
[112.32022858 74.75122833]
[121.03253174 93.74175262]
[129.94868469 81.67932129]
[138.86483765 69.61688995]
[147.78099060 57.55445862]
[136.72351074 47.39746857]
[126.80833435 36.12266541]
[118.14777374 23.85779953]
[110.83998108 10.74184608]
[104.96775818 -3.07658505]
[100.59762573 -17.44091797]
[97.77912140 -32.18839645]
[96.54416656 -47.15192032]
[96.90676117 -62.16193771]
[98.86278534 -77.04837036]
[102.39009857 -91.64255524]
[107.44870758 -105.77912140]
[113.98131561 -119.29789734]
[121.91389465 -132.04570007]
[131.15655518 -143.87806702]
[141.60458374 -154.66096497]
[153.13958740 -164.27220154]
[165.63087463 -172.60285950]
[178.93688965 -179.55856323]
[192.90689087 -185.06050110]
[207.38256836 -189.04631042]
[222.19992065 -191.47085571]
[237.19104004 -192.30664062]
[252.18606567 -191.54421997]
[267.01510620 -189.19221497]
[281.51010132 -185.27726746]
[295.50686646 -179.84376526]
[308.84674072 -172.95324707]
[321.37866211 -164.68380737]
[332.96054077 -155.12913513]
[343.46121216 -144.39749146]
[352.76165771 -132.61047363]
[360.75653076 -119.90164185]
[367.35519409 -106.41500092]
[372.48291016 -92.30335236]
[376.08160400 -77.72660065]
[378.11044312 -62.84991455]
[378.54647827 -47.84185028]
[377.38476562 -32.87246704]
[374.63842773 -18.11137390]
[370.33865356 -3.72582865]
[364.53408813 10.12117004]
[357.29058838 23.27272415]
[348.69012451 35.57981873]
[338.83023071 46.90300369]
[327.82260132 57.11397552]
[315.79193115 66.09704590]
[302.87460327 73.75041199]
[289.21691895 79.98737335]
[274.97363281 84.73725128]
[260.30618286 87.94622803]
[245.38070679 89.57794952]
[230.36634827 89.61391449]
[215.43322754 88.05371857]
[200.75056458 84.91505432]
[186.48469543 80.23346710]
[172.79728699 74.06200409]
[159.84341431 66.47061157]
[150.92726135 78.53304291]
[142.01112366 90.59547424]
[133.09497070 102.65790558]
[128.54768372 116.95203400]
[136.56668091 130.59043884]
[129.09233093 143.47389221]
[137.11134338 157.11228943]
[129.63699341 169.99574280]
[129.94496155 184.99256897]
[130.25294495 199.98941040]
[130.56092834 214.98625183]
[130.86889648 229.98309326]
[131.17687988 244.97993469]
[131.48486328 259.97677612]
[131.79283142 274.97360229]
[132.10081482 289.97042847]
[132.40878296 304.96728516]
[132.71676636 319.96411133]
[133.02474976 334.96096802]
[147.73478699 338.25918579]
[161.22773743 344.98254395]
[172.71916199 354.74014282]
[181.54093933 366.96469116]
[187.18019104 380.94546509]
[189.30908203 395.86965942]
[187.80380249 410.86956787]
[182.75189209 425.07315063]
[174.44705200 437.65460205]
[163.37211609 447.88247681]
[150.17097473 455.16210938]
[135.61111450 459.07031250]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[25 127]
[27 125]
[29 39]
[30 38]
[31 37]
[45 58]
[46 57]
[47 56]
[48 55]
[49 54]
[60 124]
[61 123]
[62 122]
[63 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
