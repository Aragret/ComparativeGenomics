%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUUCCUAGGGGGGGGGGGGAACAACAUAUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUxxxxxxxxxxCCCACCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGCCCCCCCCCCAAUCUUCUUA\
) } def
/len { sequence length } bind def

/coor [
[95.00752258 362.39074707]
[81.16158295 356.37472534]
[69.45291901 346.84530640]
[60.75039673 334.50964355]
[55.69979477 320.28311157]
[54.67590332 305.22143555]
[57.75470352 290.44229126]
[64.70772552 277.04235840]
[75.01901245 266.01602173]
[87.92339325 258.18151855]
[102.46327972 254.12019348]
[102.46327972 239.12019348]
[102.46327972 224.12019348]
[102.46327972 209.12019348]
[102.46327972 194.12019348]
[102.46327972 179.12019348]
[102.46327972 164.12019348]
[102.46327972 149.12019348]
[102.46327972 134.12019348]
[102.46327972 119.12020111]
[90.76365662 109.73303986]
[76.12015533 112.98386383]
[61.47665024 116.23468781]
[60.04921722 131.29515076]
[54.03584290 145.17660522]
[44.02566528 156.51905823]
[30.99937248 164.21133423]
[16.23315239 167.49978638]
[1.17364705 166.06225586]
[-12.70376682 160.03958130]
[-24.03952026 150.02180481]
[-31.72305298 136.99035645]
[-35.00160980 122.22193909]
[-33.55399323 107.16339874]
[-27.52202415 93.29002380]
[-17.49665260 81.96099091]
[-4.46006441 74.28618622]
[10.31054974 71.01752472]
[25.36811447 72.47523499]
[39.23744583 78.51650238]
[50.55976486 88.54946136]
[58.22582626 101.59118652]
[72.86932373 98.34036255]
[87.51282501 95.08953857]
[99.49966431 86.07200623]
[106.68216705 72.90342712]
[113.86467743 59.73484039]
[121.04718781 46.56625748]
[121.27185059 39.85380554]
[124.41709137 35.02278137]
[128.81227112 33.00837326]
[136.53636169 20.14997101]
[136.44212341 15.66080570]
[137.69183350 11.78662777]
[139.91569519 8.88208580]
[142.66534424 7.14043045]
[145.47521973 6.58188677]
[154.24142456 -5.58995008]
[163.00762939 -17.76178741]
[171.77383423 -29.93362427]
[180.54005432 -42.10546112]
[169.34036255 -52.10469055]
[159.24723816 -63.21984863]
[150.37129211 -75.32914734]
[142.80973816 -88.29991913]
[136.64546204 -101.99003601]
[131.94596863 -116.24950409]
[128.76277161 -130.92210388]
[127.13074493 -145.84704590]
[127.06776428 -160.86083984]
[128.57450867 -175.79895020]
[131.63449097 -190.49774170]
[136.21417236 -204.79614258]
[142.26338196 -218.53749084]
[149.71583557 -231.57124329]
[158.48988342 -243.75457764]
[168.48937988 -254.95402527]
[179.60478210 -265.04687500]
[191.71430969 -273.92254639]
[204.68525696 -281.48376465]
[218.37551880 -287.64770508]
[232.63510132 -292.34686279]
[247.30778503 -295.52969360]
[262.23275757 -297.16137695]
[277.24655151 -297.22399902]
[292.18463135 -295.71685791]
[306.88336182 -292.65652466]
[321.18164062 -288.07650757]
[334.92285156 -282.02694702]
[347.95642090 -274.57418823]
[360.13955688 -265.79983521]
[371.33874512 -255.80007935]
[381.43133545 -244.68443298]
[390.30670166 -232.57469177]
[397.86761475 -219.60356140]
[404.03121948 -205.91314697]
[408.73001099 -191.65344238]
[411.91250610 -176.98069763]
[413.54379272 -162.05566406]
[413.60604858 -147.04188538]
[412.09857178 -132.10383606]
[409.03787231 -117.40519714]
[404.45751953 -103.10701752]
[398.40762329 -89.36595917]
[390.95455933 -76.33257294]
[382.17990112 -64.14965820]
[372.17987061 -52.95069504]
[361.06396484 -42.85838699]
[348.95401001 -33.98331451]
[335.98269653 -26.42271805]
[322.29214478 -20.25943184]
[308.03231812 -15.56098557]
[293.35949707 -12.37885761]
[278.43441772 -10.74791431]
[263.42065430 -10.68602467]
[248.48263550 -12.19386578]
[233.78407288 -15.25491810]
[219.48600769 -19.83564377]
[205.74508667 -25.88585091]
[192.71188354 -33.33925247]
[183.94567871 -21.16741562]
[175.17947388 -8.99557972]
[166.41326904 3.17625713]
[157.64704895 15.34809399]
[149.39476013 27.87405586]
[141.67068481 40.73246002]
[134.21577454 53.74876785]
[127.03326416 66.91735077]
[119.85075378 80.08592987]
[112.66824341 93.25451660]
[117.46327972 119.12020111]
[117.46327972 134.12019348]
[117.46327972 149.12019348]
[117.46327972 164.12019348]
[117.46327972 179.12019348]
[117.46327972 194.12019348]
[117.46327972 209.12019348]
[117.46327972 224.12019348]
[117.46327972 239.12019348]
[117.46327972 254.12019348]
[132.00315857 258.18151855]
[144.90754700 266.01602173]
[155.21882629 277.04235840]
[162.17184448 290.44229126]
[165.25065613 305.22143555]
[164.22676086 320.28311157]
[159.17616272 334.50964355]
[150.47363281 346.84530640]
[138.76496887 356.37472534]
[124.91902924 362.39074707]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 44]
[22 43]
[23 42]
[45 130]
[46 129]
[47 128]
[48 127]
[51 126]
[52 125]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
