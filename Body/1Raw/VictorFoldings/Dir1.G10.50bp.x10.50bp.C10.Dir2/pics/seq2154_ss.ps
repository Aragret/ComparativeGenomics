%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAAACCAGACGGGGGGGGGGGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAxxxxxxxxxxUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCCCCCCCCCCCGAAACCACAC\
) } def
/len { sequence length } bind def

/coor [
[78.85555267 398.50817871]
[64.83360291 392.95516968]
[52.63364792 384.08883667]
[43.02257538 372.46652222]
[36.60455322 358.81881714]
[33.78301620 344.00363159]
[34.73532867 328.95223999]
[39.40163422 314.61083984]
[47.48860168 301.88085938]
[58.48787689 291.56259155]
[71.70803833 284.30462646]
[86.31804657 280.56317139]
[86.31804657 265.56317139]
[86.31804657 250.56318665]
[86.31804657 235.56318665]
[86.31804657 220.56318665]
[86.31804657 205.56318665]
[86.31804657 190.56318665]
[86.31804657 175.56318665]
[86.31804657 160.56318665]
[86.31804657 145.56318665]
[86.31804657 130.56318665]
[74.34779358 121.52366638]
[59.92040634 125.62860870]
[45.49301910 129.73355103]
[31.06563568 133.83850098]
[27.39725685 148.75286865]
[16.75158691 159.82379150]
[1.99225760 164.07324219]
[-12.91054535 160.35812378]
[-23.94804192 149.67781067]
[-28.15120316 134.90522766]
[-24.38939667 120.01414490]
[-13.67453289 109.01018524]
[1.11114597 104.85334778]
[15.99036598 108.66181183]
[26.96069145 119.41111755]
[41.38807678 115.30616760]
[55.81546021 111.20122528]
[70.24284363 107.09628296]
[73.78690338 89.44162750]
[85.98947906 78.18378448]
[101.08814240 76.42945862]
[106.50676727 62.44237518]
[111.92539215 48.45529175]
[117.34401703 34.46820831]
[113.83484650 19.88445854]
[102.64655304 9.89336109]
[91.35626984 0.01765534]
[79.96520233 -9.74161911]
[68.57412720 -19.50089455]
[53.51203156 -15.77088737]
[39.14679337 -21.63770676]
[31.00214005 -34.84543991]
[32.20985413 -50.31544495]
[42.30554581 -62.09918976]
[57.40721893 -65.66558075]
[71.70796967 -59.64327240]
[79.70886230 -46.34796143]
[78.33339691 -30.89196777]
[89.72447205 -21.13269234]
[101.11554718 -11.37341881]
[108.28553772 -9.39770699]
[112.63764954 -1.29493511]
[123.82594299 8.69616222]
[138.78723145 7.61909199]
[148.42904663 -3.87157464]
[158.07086182 -15.36224079]
[167.71267700 -26.85290718]
[177.35447693 -38.34357452]
[186.99629211 -49.83423996]
[176.90843201 -60.96747208]
[168.43057251 -73.37067413]
[161.72062683 -86.81278992]
[156.90361023 -101.04339600]
[154.06927490 -115.79738617]
[153.27040100 -130.79991150]
[154.52189636 -145.77146912]
[157.80041504 -160.43315125]
[163.04490662 -174.51182556]
[170.15765381 -187.74520874]
[179.00614929 -199.88677979]
[189.42556763 -210.71034241]
[201.22178650 -220.01426697]
[214.17506409 -227.62521362]
[228.04406738 -233.40141296]
[242.57043457 -237.23524475]
[257.48355103 -239.05528259]
[272.50561523 -238.82763672]
[287.35671997 -236.55653381]
[301.76025391 -232.28428650]
[315.44787598 -226.09048462]
[328.16458130 -218.09053040]
[339.67346191 -208.43342590]
[349.76010132 -197.29911804]
[358.23663330 -184.89498901]
[364.94512939 -171.45214844]
[369.76058960 -157.22102356]
[372.59332275 -142.46672058]
[373.39056396 -127.46411896]
[372.13748169 -112.49269104]
[368.85736084 -97.83135986]
[363.61135864 -83.75325775]
[356.49716187 -70.52063751]
[347.64733887 -58.38002396]
[337.22674561 -47.55758667]
[325.42953491 -38.25494385]
[312.47543335 -30.64539719]
[298.60580444 -24.87070465]
[284.07901001 -21.03844833]
[269.16571045 -19.22002029]
[254.14367676 -19.44929695]
[239.29280090 -21.72200584]
[224.88972473 -25.99580956]
[211.20278931 -32.19108582]
[198.48696899 -40.19242859]
[188.84515381 -28.70176125]
[179.20333862 -17.21109390]
[169.56152344 -5.72042704]
[159.91970825 5.77023983]
[150.27789307 17.26090622]
[149.81842041 25.21870995]
[146.08233643 32.47105408]
[139.57830811 37.69981003]
[131.33110046 39.88683319]
[125.91247559 53.87391663]
[120.49385071 67.86100006]
[115.07522583 81.84808350]
[125.85294342 98.03343201]
[121.13565063 118.75872803]
[101.31804657 130.56318665]
[101.31804657 145.56318665]
[101.31804657 160.56318665]
[101.31804657 175.56318665]
[101.31804657 190.56318665]
[101.31804657 205.56318665]
[101.31804657 220.56318665]
[101.31804657 235.56318665]
[101.31804657 250.56318665]
[101.31804657 265.56317139]
[101.31804657 280.56317139]
[115.92806244 284.30462646]
[129.14822388 291.56259155]
[140.14749146 301.88085938]
[148.23446655 314.61083984]
[152.90077209 328.95223999]
[153.85308838 344.00363159]
[151.03153992 358.81881714]
[144.61352539 372.46652222]
[135.00244141 384.08883667]
[122.80249023 392.95516968]
[108.78054810 398.50817871]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 40]
[24 39]
[25 38]
[26 37]
[43 128]
[44 127]
[45 126]
[46 125]
[47 65]
[48 64]
[49 62]
[50 61]
[51 60]
[66 121]
[67 120]
[68 119]
[69 118]
[70 117]
[71 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
