%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACAUAAUAAGGGGGGGGGGUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACAGACAUCAUAACAAAxxxxxxxxxxGUAGGACAUAAUAAUAACAAUUGAAUGUCUGCACAGCCACUUUCCACACACCCCCCCCCCGACAUCAUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.10733032]
[71.19830322 377.09130859]
[59.48964310 367.56188965]
[50.78712082 355.22622681]
[45.73651886 340.99969482]
[44.71262741 325.93801880]
[47.79142761 311.15884399]
[54.74444962 297.75891113]
[65.05573273 286.73257446]
[77.96011353 278.89807129]
[92.50000000 274.83676147]
[92.50000000 259.83676147]
[92.50000000 244.83676147]
[92.50000000 229.83676147]
[92.50000000 214.83676147]
[92.50000000 199.83676147]
[92.50000000 184.83676147]
[92.50000000 169.83676147]
[92.50000000 154.83676147]
[92.50000000 139.83676147]
[92.50000000 124.83676910]
[78.47474670 114.48372650]
[74.16755676 97.59167480]
[81.52302551 81.78691864]
[74.34051514 68.61833954]
[67.15800476 55.44975662]
[59.97549438 42.28117371]
[52.79298782 29.11258888]
[45.61047745 15.94400692]
[28.35957718 10.54143143]
[21.28381538 -5.50680351]
[7.15901279 -10.55556011]
[-6.96579027 -15.60431671]
[-21.09059334 -20.65307236]
[-35.21539688 -25.70182991]
[-49.34019852 -30.75058556]
[-63.46500397 -35.79934311]
[-72.89853668 -23.95505333]
[-85.66811371 -15.81768894]
[-100.38857269 -12.26992798]
[-115.46316528 -13.69660473]
[-129.25669861 -19.94296455]
[-140.27296448 -30.33144951]
[-147.31700134 -43.73519135]
[-149.62471008 -58.70026016]
[-146.94578552 -73.60334778]
[-139.57080078 -86.82788086]
[-128.29975891 -96.93936920]
[-114.35523224 -102.84098816]
[-99.24983978 -103.89257050]
[-84.62209320 -99.98004913]
[-72.05870056 -91.52783203]
[-62.92245483 -79.45275116]
[-58.20437241 -65.06461334]
[-58.41624451 -49.92414474]
[-44.29144287 -44.87538910]
[-30.16663933 -39.82663345]
[-16.04183769 -34.77787399]
[-1.91703403 -29.72911835]
[12.20776939 -24.68036270]
[26.33257103 -19.63160706]
[29.80638885 -22.84904289]
[33.91511917 -25.20226097]
[38.44800568 -26.57055283]
[41.24032974 -41.30836105]
[27.31561470 -47.02562714]
[14.82701015 -55.42917633]
[4.28591633 -66.17488098]
[-3.87601519 -78.82272339]
[-9.32455826 -92.85476685]
[-11.83659744 -107.69641113]
[-11.30926800 -122.73991394]
[-7.76416302 -137.36923218]
[-1.34645236 -150.98532104]
[7.68106270 -163.03060913]
[18.94871140 -173.01184082]
[31.99509048 -180.52029419]
[46.28595734 -185.24850464]
[61.23611450 -187.00285339]
[76.23336029 -185.71150208]
[90.66355896 -181.42732239]
[103.93581390 -174.32577515]
[115.50662994 -164.69763184]
[124.90219116 -152.93717957]
[131.73776245 -139.52598572]
[135.73341370 -125.01324463]
[136.72552490 -109.99324036]
[134.67349243 -95.08103180]
[129.66133118 -80.88726044]
[121.89429474 -67.99315643]
[111.69042206 -56.92672348]
[99.46756744 -48.14112473]
[85.72624969 -41.99612808]
[71.02915955 -38.74336624]
[55.97813797 -38.51603317]
[53.18581390 -23.77822876]
[63.51705170 -9.11168194]
[58.77906036 8.76149845]
[65.96157074 21.93008041]
[73.14408112 35.09866333]
[80.32658386 48.26724625]
[87.50909424 61.43582916]
[94.69160461 74.60440826]
[108.66394806 75.54492188]
[120.11206818 83.61037445]
[125.70056915 96.45092773]
[140.51832581 98.78202820]
[155.33607483 101.11313629]
[162.39984131 87.71977997]
[173.43141174 77.34753418]
[187.23413086 71.12149811]
[202.31080627 69.71702576]
[217.02603149 73.28646851]
[229.78359985 81.44263458]
[239.19967651 93.30080414]
[244.25286865 107.57469177]
[244.39505005 122.71598053]
[239.61079407 137.08224487]
[230.41906738 149.11514282]
[217.81690979 157.50944519]
[203.17131042 161.35459900]
[188.07090759 160.23348999]
[174.15370178 154.26776123]
[162.92932129 144.10449219]
[155.61528015 130.84616089]
[153.00497437 115.93089294]
[138.18722534 113.59978485]
[123.36946106 111.26868439]
[116.85984039 119.71955872]
[107.50000000 124.83676910]
[107.50000000 139.83676147]
[107.50000000 154.83676147]
[107.50000000 169.83676147]
[107.50000000 184.83676147]
[107.50000000 199.83676147]
[107.50000000 214.83676147]
[107.50000000 229.83676147]
[107.50000000 244.83676147]
[107.50000000 259.83676147]
[107.50000000 274.83676147]
[122.03988647 278.89807129]
[134.94427490 286.73257446]
[145.25555420 297.75891113]
[152.20857239 311.15884399]
[155.28736877 325.93801880]
[154.26348877 340.99969482]
[149.21287537 355.22622681]
[140.51036072 367.56188965]
[128.80169678 377.09130859]
[114.95575714 383.10733032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 103]
[25 102]
[26 101]
[27 100]
[28 99]
[29 98]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[36 56]
[37 55]
[64 96]
[65 95]
[106 128]
[107 127]
[108 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
