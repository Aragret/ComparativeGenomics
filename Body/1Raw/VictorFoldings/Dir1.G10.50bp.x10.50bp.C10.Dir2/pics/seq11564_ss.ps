%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUCAUCCUAGGGGGGGGGGGCAAUAAUCCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGxxxxxxxxxxAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGACCCCCCCCCCCCUCCUCAUUCUA\
) } def
/len { sequence length } bind def

/coor [
[63.32321167 383.24734497]
[49.83433151 376.51580811]
[38.34883118 366.75125122]
[29.53446198 354.52136230]
[23.90368080 340.53717041]
[21.78385162 325.61169434]
[23.29822159 310.61267090]
[28.35874367 296.41217041]
[36.67120743 283.83575439]
[47.75233841 273.61459351]
[60.95789337 266.34295654]
[75.52011871 262.44360352]
[75.21214294 247.44674683]
[74.90416718 232.44992065]
[74.59618378 217.45307922]
[74.28820801 202.45623779]
[73.98023224 187.45939636]
[73.67225647 172.46257019]
[73.36427307 157.46572876]
[73.05629730 142.46888733]
[72.74832153 127.47204590]
[72.44034576 112.47521210]
[69.83561707 97.70309448]
[64.99580383 83.50534058]
[60.15598679 69.30758667]
[55.31616974 55.10983658]
[50.47635651 40.91208267]
[45.63653946 26.71433067]
[31.10284042 30.45523834]
[16.32542419 33.07262039]
[1.39100659 34.55111313]
[-13.61276722 34.88204193]
[-28.59784889 34.06346512]
[-43.47629929 32.10018539]
[-58.16080475 29.00372887]
[-72.56519318 24.79226112]
[-86.60491943 19.49049950]
[-100.19760895 13.12955666]
[-113.26348114 5.74676228]
[-125.72586823 -2.61455822]
[-137.51162720 -11.90533638]
[-148.55160522 -22.07105064]
[-158.78100586 -33.05204391]
[-168.13978577 -44.78387070]
[-176.57305908 -57.19768906]
[-184.03129578 -70.22064209]
[-190.47074890 -83.77631378]
[-195.85362244 -97.78514862]
[-200.14833069 -112.16493225]
[-203.32966614 -126.83128357]
[-205.37896729 -141.69813538]
[-206.28421021 -156.67822266]
[-206.04005432 -171.68367004]
[-204.64796448 -186.62638855]
[-202.11610413 -201.41868591]
[-198.45932007 -215.97378540]
[-193.69908142 -230.20623779]
[-187.86331177 -244.03254700]
[-180.98626709 -257.37155151]
[-173.10830688 -270.14498901]
[-164.27566528 -282.27786255]
[-154.54016113 -293.69903564]
[-143.95895386 -304.34143066]
[-132.59410095 -314.14260864]
[-120.51232910 -323.04504395]
[-107.78453064 -330.99652100]
[-94.48538971 -337.95031738]
[-80.69296265 -343.86569214]
[-66.48818207 -348.70791626]
[-51.95441437 -352.44854736]
[-37.17694855 -355.06564331]
[-22.24250412 -356.54385376]
[-7.23872328 -356.87451172]
[7.74634314 -356.05563354]
[22.62475586 -354.09207153]
[37.30920410 -350.99533081]
[51.71350861 -346.78359985]
[65.75313568 -341.48156738]
[79.34570312 -335.12039185]
[92.41143799 -327.73733521]
[104.87367249 -319.37579346]
[116.65925598 -310.08477783]
[127.69903564 -299.91885376]
[137.92822266 -288.93765259]
[147.28678894 -277.20565796]
[155.71981812 -264.79168701]
[163.17781067 -251.76858521]
[169.61700439 -238.21279907]
[174.99961853 -224.20385742]
[179.29405212 -209.82398987]
[182.47511292 -195.15757751]
[184.52413940 -180.29069519]
[185.42907715 -165.31057739]
[185.18464661 -150.30514526]
[183.79228210 -135.36245728]
[181.26013184 -120.57019806]
[177.60307312 -106.01517487]
[172.84255981 -91.78280640]
[167.00653076 -77.95661926]
[160.12924194 -64.61774445]
[152.25103760 -51.84446335]
[143.41816711 -39.71173859]
[133.68244934 -28.29076576]
[123.10102844 -17.64857101]
[111.73600006 -7.84760904]
[99.65405273 1.05460525]
[86.92610168 9.00582981]
[73.62683105 15.95940208]
[59.83428955 21.87451553]
[64.67411041 36.07226944]
[69.51392365 50.27001953]
[74.35373688 64.46777344]
[79.19355774 78.66552734]
[84.03337097 92.86328125]
[101.38759613 84.07343292]
[114.04684448 96.46517181]
[128.38690186 100.86547089]
[140.10119629 90.82659912]
[155.38641357 88.73722076]
[169.36511230 95.26406097]
[177.57673645 108.32440948]
[177.40098572 123.75077057]
[168.89393616 136.62065125]
[154.77015686 142.82730103]
[139.53649902 140.39022827]
[128.05397034 130.08706665]
[123.98660278 115.20553589]
[109.64654541 110.80522919]
[99.41989136 115.97637177]
[87.43717957 112.16723633]
[87.74515533 127.16407013]
[88.05313873 142.16090393]
[88.36111450 157.15774536]
[88.66909027 172.15458679]
[88.97706604 187.15142822]
[89.28504944 202.14825439]
[89.59302521 217.14509583]
[89.90100098 232.14193726]
[90.20897675 247.13877869]
[90.51696014 262.13562012]
[105.22698975 265.43383789]
[118.71994781 272.15719604]
[130.21136475 281.91479492]
[139.03315735 294.13934326]
[144.67240906 308.12011719]
[146.80128479 323.04431152]
[145.29600525 338.04421997]
[140.24409485 352.24780273]
[131.93925476 364.82925415]
[120.86432648 375.05712891]
[107.66318512 382.33679199]
[93.10332489 386.24496460]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 114]
[24 113]
[25 112]
[26 111]
[27 110]
[28 109]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
