%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUCUAGGGGGGGGGGGGAAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGxxxxxxxxxxAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCCCCCCACUACUAGG\
) } def
/len { sequence length } bind def

/coor [
[68.15366364 141.76458740]
[57.67867661 131.10264587]
[50.63119507 117.92178345]
[47.58198166 103.28946686]
[48.77798843 88.39074707]
[54.12235260 74.43223572]
[63.18224335 62.54439926]
[75.22392273 53.69001007]
[89.27216339 48.58616257]
[88.33653259 33.61537170]
[87.40090179 18.64457893]
[86.46527863 3.67378783]
[85.52964783 -11.29700375]
[84.59401703 -26.26779556]
[83.65838623 -41.23858643]
[82.72276306 -56.20937729]
[81.78713226 -71.18016815]
[80.85150146 -86.15096283]
[79.91587830 -101.12174988]
[78.98024750 -116.09254456]
[63.97623062 -116.02082825]
[48.99300003 -116.81364441]
[34.08033371 -118.46836090]
[19.28776741 -120.97947693]
[4.66444206 -124.33865356]
[-9.74106503 -128.53472900]
[-23.88089943 -133.55377197]
[-37.70809174 -139.37910461]
[-51.17670822 -145.99137878]
[-64.24200439 -153.36862183]
[-76.86058044 -161.48632812]
[-88.99052429 -170.31753540]
[-100.59152985 -179.83291626]
[-111.62506866 -190.00083923]
[-122.05448914 -200.78753662]
[-131.84513855 -212.15719604]
[-140.96449280 -224.07202148]
[-149.38226318 -236.49243164]
[-157.07049561 -249.37719727]
[-164.00361633 -262.68347168]
[-170.15864563 -276.36709595]
[-175.51509094 -290.38259888]
[-180.05517578 -304.68341064]
[-183.76382446 -319.22204590]
[-186.62872314 -333.95019531]
[-188.64033508 -348.81890869]
[-189.79197693 -363.77883911]
[-190.07984924 -378.78027344]
[-189.50296021 -393.77337646]
[-188.06326294 -408.70831299]
[-185.76551819 -423.53552246]
[-182.61735535 -438.20571899]
[-178.62924194 -452.67019653]
[-173.81442261 -466.88085938]
[-168.18890381 -480.79055786]
[-161.77134705 -494.35302734]
[-154.58309937 -507.52325439]
[-146.64802551 -520.25744629]
[-137.99247742 -532.51336670]
[-128.64521790 -544.25024414]
[-118.63730621 -555.42913818]
[-108.00197601 -566.01287842]
[-96.77455139 -575.96630859]
[-84.99234772 -585.25634766]
[-72.69448090 -593.85217285]
[-59.92182541 -601.72521973]
[-46.71679688 -608.84936523]
[-33.12326813 -615.20086670]
[-19.18639565 -620.75866699]
[-4.95247126 -625.50433350]
[9.53121662 -629.42205811]
[24.21655655 -632.49877930]
[39.05476379 -634.72442627]
[53.99654770 -636.09149170]
[68.99227142 -636.59539795]
[83.99211884 -636.23461914]
[98.94627380 -635.01019287]
[113.80503845 -632.92626953]
[128.51907349 -629.98980713]
[143.03948975 -626.21051025]
[157.31805420 -621.60089111]
[171.30732727 -616.17633057]
[184.96086121 -609.95483398]
[198.23327637 -602.95709229]
[211.08047485 -595.20629883]
[223.45980835 -586.72821045]
[235.33013916 -577.55102539]
[246.65203857 -567.70520020]
[257.38790894 -557.22344971]
[267.50204468 -546.14056396]
[276.96087646 -534.49340820]
[285.73297119 -522.32067871]
[293.78921509 -509.66275024]
[301.10284424 -496.56173706]
[307.64953613 -483.06112671]
[313.40753174 -469.20574951]
[318.35775757 -455.04168701]
[322.48373413 -440.61593628]
[325.77172852 -425.97644043]
[328.21087646 -411.17184448]
[329.79306030 -396.25131226]
[330.51296997 -381.26440430]
[330.36828613 -366.26089478]
[329.35946655 -351.29067993]
[327.48983765 -336.40341187]
[324.76562500 -321.64862061]
[321.19589233 -307.07525635]
[316.79248047 -292.73175049]
[311.57003784 -278.66577148]
[305.54589844 -264.92404175]
[298.74005127 -251.55220032]
[291.17514038 -238.59466553]
[282.87628174 -226.09446716]
[273.87106323 -214.09315491]
[264.18936157 -202.63059998]
[253.86335754 -191.74485779]
[242.92735291 -181.47209167]
[231.41767883 -171.84645081]
[219.37257385 -162.89987183]
[206.83203125 -154.66210938]
[193.83773804 -147.16052246]
[180.43283081 -140.42001343]
[166.66186523 -134.46299744]
[152.57057190 -129.30924988]
[138.20576477 -124.97588348]
[123.61516571 -121.47730255]
[108.84723663 -118.82512665]
[93.95104218 -117.02817535]
[94.88666534 -102.05738068]
[95.82229614 -87.08658600]
[96.75792694 -72.11579895]
[97.69355011 -57.14500809]
[98.62918091 -42.17421341]
[99.56481171 -27.20342445]
[100.50043488 -12.23263168]
[101.43606567 2.73815942]
[102.37169647 17.70895004]
[103.30732727 32.67974091]
[104.24295044 47.65053558]
[118.81734467 50.96555328]
[131.86776733 58.25176620]
[142.33728027 68.91907501]
[149.37799072 82.10355377]
[152.41969299 96.73743439]
[151.21604919 111.63553619]
[145.86451721 125.59130096]
[136.79853821 137.47448730]
[124.75231171 146.32269287]
[110.70145416 151.41934204]
[95.78391266 152.35163879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 139]
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
