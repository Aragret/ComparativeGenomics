%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUGAUUUGGGGGGGGGGUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUxxxxxxxxxxACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGCCCCCCCCCCAUUCUAAUUU\
) } def
/len { sequence length } bind def

/coor [
[113.51987457 451.77352905]
[99.67393494 445.75750732]
[87.96527100 436.22808838]
[79.26274872 423.89242554]
[74.21214294 409.66592407]
[73.18825531 394.60421753]
[76.26705170 379.82507324]
[83.22007751 366.42514038]
[93.53135681 355.39880371]
[106.43573761 347.56430054]
[120.97562408 343.50299072]
[120.97562408 328.50299072]
[120.97562408 313.50299072]
[120.97562408 298.50299072]
[120.97562408 283.50299072]
[120.97562408 268.50299072]
[120.97562408 253.50299072]
[120.97562408 238.50299072]
[120.97562408 223.50299072]
[120.97562408 208.50299072]
[120.97562408 193.50299072]
[103.10967255 181.30163574]
[99.56274414 161.60005188]
[110.20538330 146.58648682]
[105.30383301 132.40992737]
[100.40228271 118.23337555]
[97.60423279 132.97009277]
[85.64654541 142.02622986]
[70.70299530 140.72608948]
[60.48897552 129.74092102]
[60.27800751 114.74240875]
[70.17900848 103.47430420]
[85.08206177 101.75487518]
[71.29968262 95.83491516]
[57.51729965 89.91494751]
[43.73492050 83.99498749]
[41.32604218 90.80079651]
[35.66799927 96.92292786]
[27.06972885 101.02172089]
[16.34443283 101.91551208]
[1.93221605 97.75762939]
[-12.48000050 93.59973907]
[-28.25970459 98.06437683]
[-39.82579803 86.43865204]
[-35.28007889 70.68211365]
[-19.29878998 67.00373840]
[-8.32211304 79.18752289]
[6.09010363 83.34541321]
[20.50231934 87.50329590]
[27.40931892 74.18814087]
[15.70969486 64.80097961]
[4.01007080 55.41381836]
[-12.12791920 50.21751404]
[-11.60212708 33.27172089]
[4.82697153 29.08590317]
[13.39723301 43.71419525]
[25.09685707 53.10135651]
[36.79647827 62.48852158]
[49.65488052 70.21260834]
[63.43726349 76.13256836]
[77.21964264 82.05252838]
[91.00202942 87.97249603]
[104.96241760 82.48546600]
[111.02542877 68.76541138]
[117.08843994 55.04535675]
[114.66500092 36.82155609]
[129.16304016 26.98251915]
[134.93931580 13.13930225]
[140.71559143 -0.70391572]
[128.58299255 8.11652756]
[114.48391724 13.23668480]
[99.51866150 14.25697327]
[84.85511780 11.09776878]
[71.63765717 4.00561905]
[60.89776230 -6.46599865]
[53.47360229 -19.49987030]
[49.94455338 -34.07882309]
[50.58603287 -49.06509781]
[55.34797287 -63.28916168]
[63.85875320 -75.64094543]
[75.45417786 -85.15651703]
[89.22933960 -91.09326172]
[104.10920715 -92.98788452]
[118.93254089 -90.69251251]
[132.54252625 -84.38629150]
[143.87701416 -74.56135559]
[152.05145264 -61.98445129]
[156.42791748 -47.63709641]
[156.66484070 -32.63896561]
[152.74269104 -18.15804100]
[163.62152100 -28.48524666]
[174.50033569 -38.81245041]
[176.35322571 -54.74814606]
[190.04318237 -63.11262894]
[205.06845093 -57.48938751]
[209.90293884 -42.19208908]
[200.83802795 -28.95551109]
[184.82754517 -27.93362617]
[173.94873047 -17.60642052]
[163.06990051 -7.27921581]
[154.55880737 5.07235670]
[148.78253174 18.91557503]
[143.00625610 32.75879288]
[147.31855774 44.10390091]
[142.56811523 55.70787811]
[130.80850220 61.10836792]
[124.74548340 74.82842255]
[118.68247223 88.54847717]
[114.57884216 113.33182526]
[119.48039246 127.50837708]
[124.38194275 141.68493652]
[144.54484558 148.13996887]
[152.90127563 170.50999451]
[167.12805176 175.26380920]
[181.35484314 180.01762390]
[195.58161926 184.77143860]
[209.80839539 189.52525330]
[223.04283142 181.19557190]
[238.52810669 183.37278748]
[248.95254517 195.02890015]
[249.39405823 210.66024780]
[239.64414978 222.88618469]
[224.30645752 225.93400574]
[210.62295532 218.36460876]
[205.05458069 203.75204468]
[190.82780457 198.99822998]
[176.60102844 194.24441528]
[162.37423706 189.49060059]
[148.14746094 184.73678589]
[135.97563171 193.50299072]
[135.97563171 208.50299072]
[135.97563171 223.50299072]
[135.97563171 238.50299072]
[135.97563171 253.50299072]
[135.97563171 268.50299072]
[135.97563171 283.50299072]
[135.97563171 298.50299072]
[135.97563171 313.50299072]
[135.97563171 328.50299072]
[135.97563171 343.50299072]
[150.51551819 347.56430054]
[163.41989136 355.39880371]
[173.73118591 366.42514038]
[180.68420410 379.82507324]
[183.76300049 394.60421753]
[182.73910522 409.66592407]
[177.68850708 423.89242554]
[168.98597717 436.22808838]
[157.27731323 445.75750732]
[143.43138123 451.77352905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 111]
[25 110]
[26 109]
[33 62]
[34 61]
[35 60]
[36 59]
[40 49]
[41 48]
[42 47]
[50 58]
[51 57]
[52 56]
[63 108]
[64 107]
[65 106]
[67 103]
[68 102]
[69 101]
[90 100]
[91 99]
[92 98]
[113 129]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
