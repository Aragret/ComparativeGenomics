%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCACAGCGGGGGGGGGGACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCUCxxxxxxxxxxACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCCCCCCCCCCCACCCAAAGC\
) } def
/len { sequence length } bind def

/coor [
[22.20898056 448.72506714]
[8.36304188 442.70904541]
[-3.34562039 433.17962646]
[-12.04814434 420.84396362]
[-17.09874725 406.61743164]
[-18.12263870 391.55575562]
[-15.04383850 376.77661133]
[-8.09081745 363.37667847]
[2.22046709 352.35034180]
[15.12484837 344.51583862]
[29.66473579 340.45452881]
[29.66473579 325.45452881]
[29.66473579 310.45452881]
[29.66473579 295.45452881]
[29.66473579 280.45452881]
[29.66473579 265.45452881]
[29.66473579 250.45451355]
[29.66473579 235.45451355]
[29.66473579 220.45451355]
[29.66473579 205.45451355]
[21.74554443 218.19369507]
[11.39374352 229.04911804]
[-0.95515186 237.56408691]
[-14.78160477 243.38037109]
[-29.50391579 246.25328064]
[-44.50269699 246.06192017]
[-59.14692307 242.81436157]
[-72.82048798 236.64723206]
[-84.94813538 227.81999207]
[-95.01962280 216.70401001]
[-102.61124420 203.76695251]
[-107.40358734 189.55310059]
[-109.19505310 174.66046143]
[-107.91025543 159.71559143]
[-103.60325623 145.34722900]
[-96.45525360 132.15988159]
[-86.76697540 120.70836639]
[-74.94602203 111.47445679]
[-61.48971939 104.84664154]
[-46.96419525 101.10375977]
[-31.98056030 100.40328217]
[-17.16919708 102.77468109]
[-3.15324306 108.11817932]
[9.47763062 116.20897675]
[20.19202423 126.70668030]
[28.53916740 139.16963196]
[34.16788101 153.07350159]
[36.84135818 167.83332825]
[36.44635773 182.83404541]
[44.69864655 170.30809021]
[52.95093536 157.78211975]
[61.20322418 145.25616455]
[50.84669113 133.72331238]
[43.81375885 119.91019440]
[40.57997131 104.75080872]
[41.36399841 89.27018738]
[46.11281586 74.51508331]
[54.50532532 61.48319244]
[65.97405243 51.05569839]
[79.74351501 43.93767166]
[94.88265991 40.61041641]
[110.36782837 41.29890823]
[125.15195465 45.95660019]
[133.14186096 33.26166916]
[141.13179016 20.56674004]
[149.12170410 7.87181044]
[157.11161804 -4.82311916]
[143.55509949 1.59723938]
[128.62951660 3.08949590]
[114.07023621 -0.51985312]
[101.57006073 -8.81115150]
[92.58237457 -20.82037735]
[88.15216827 -35.15122604]
[88.79454041 -50.13746643]
[94.43479919 -64.03665924]
[104.41716003 -75.23274994]
[117.58097839 -82.42398834]
[132.39570618 -84.77425385]
[147.13885498 -82.01027679]
[160.09625244 -74.45342255]
[169.76133728 -62.98233032]
[175.01037598 -48.93072510]
[175.23306274 -33.93237686]
[170.40211487 -19.72859192]
[182.10173035 -29.11575508]
[193.80136108 -38.50291443]
[205.50097656 -47.89007950]
[217.20060730 -57.27724075]
[228.90022278 -66.66439819]
[224.29174805 -81.12560272]
[225.22235107 -96.27481079]
[231.56620789 -110.06320953]
[242.46533203 -120.62604523]
[256.44573975 -126.53476715]
[271.61663818 -126.99028015]
[285.92636108 -121.93097687]
[297.43960571 -112.04108429]
[304.59927368 -98.65812683]
[306.43710327 -83.59204865]
[302.70455933 -68.88040161]
[293.90640259 -56.51282883]
[281.23254395 -48.16193008]
[266.39697266 -44.95709991]
[251.40614319 -47.33176804]
[238.28738403 -54.96477890]
[226.58776855 -45.57761765]
[214.88813782 -36.19045258]
[203.18852234 -26.80329323]
[191.48889160 -17.41613007]
[179.78927612 -8.02896881]
[169.80654907 3.16679692]
[161.81663513 15.86172676]
[153.82670593 28.55665588]
[145.83679199 41.25158691]
[137.84687805 53.94651413]
[147.79861450 64.38255310]
[154.95306396 76.90300751]
[158.89152527 90.77515411]
[159.38352966 105.18716431]
[156.40026855 119.29560089]
[150.11631775 132.27481079]
[140.89945984 143.36523438]
[129.28907776 151.91781616]
[115.96461487 157.43205261]
[101.70587158 159.58523560]
[87.34729767 158.25134277]
[73.72918701 153.50845337]
[65.47689819 166.03440857]
[57.22460938 178.56037903]
[48.97232056 191.08633423]
[44.66473389 205.45451355]
[44.66473389 220.45451355]
[44.66473389 235.45451355]
[44.66473389 250.45451355]
[44.66473389 265.45452881]
[44.66473389 280.45452881]
[44.66473389 295.45452881]
[44.66473389 310.45452881]
[44.66473389 325.45452881]
[44.66473389 340.45452881]
[59.20462036 344.51583862]
[72.10900116 352.35034180]
[82.42028809 363.37667847]
[89.37330627 376.77661133]
[92.45211029 391.55575562]
[91.42821503 406.61743164]
[86.37761688 420.84396362]
[77.67508698 433.17962646]
[65.96643066 442.70904541]
[52.12049103 448.72506714]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[49 130]
[50 129]
[51 128]
[52 127]
[63 115]
[64 114]
[65 113]
[66 112]
[67 111]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[89 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
