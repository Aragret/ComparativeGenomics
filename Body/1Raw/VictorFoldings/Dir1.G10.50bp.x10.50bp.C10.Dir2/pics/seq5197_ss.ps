%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCAUAGCAGGGGGGGGGGGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUAxxxxxxxxxxUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCCCCCCCCCCCAUCCUAGCA\
) } def
/len { sequence length } bind def

/coor [
[115.32927704 427.86767578]
[102.10908508 420.59521484]
[91.22228241 410.14819336]
[83.41114807 397.23895264]
[79.20826721 382.74765015]
[78.90019226 367.66229248]
[82.50793457 353.01147461]
[89.78550720 339.79409790]
[100.23671722 328.91131592]
[113.14897919 321.10516357]
[127.64191437 316.90789795]
[127.32985687 301.91113281]
[127.01779938 286.91436768]
[126.70574951 271.91763306]
[126.39369202 256.92086792]
[126.08163452 241.92411804]
[125.76957703 226.92736816]
[125.45751953 211.93061829]
[125.14546204 196.93385315]
[122.35314178 182.19606018]
[117.15772247 168.12454224]
[111.96231079 154.05300903]
[106.76689148 139.98149109]
[101.57147980 125.90997314]
[91.21718597 125.59928894]
[81.39126587 121.14923096]
[73.74208832 112.94831848]
[69.68492889 102.03559875]
[70.14899445 89.97386932]
[55.24709320 88.26118469]
[40.65373230 94.37218475]
[28.89313507 85.23229980]
[13.99123287 83.51960754]
[-0.91066980 81.80691528]
[-17.59142303 89.53559113]
[-31.29380226 78.61566162]
[-46.22810745 77.21336365]
[-59.45061111 86.29878998]
[-74.75538635 81.48804474]
[-80.40193176 66.47151184]
[-72.05868530 52.76859665]
[-56.12588501 50.89100266]
[-44.82580566 62.27905273]
[-29.89149857 63.68135834]
[-20.34000778 56.19294357]
[-7.84861279 57.28106308]
[0.80201989 66.90501404]
[15.70392227 68.61770630]
[30.60582542 70.33039093]
[44.13330078 64.09688568]
[56.95978165 73.35927582]
[71.86168671 75.07196808]
[83.84851837 66.05443573]
[86.33363342 51.26173401]
[88.81875610 36.46902466]
[91.30387115 21.67631721]
[76.94083405 17.27654266]
[63.27497864 11.03959942]
[50.54015350 3.07221293]
[38.95426559 -6.48928595]
[28.71556854 -17.48128700]
[19.99925804 -29.71570206]
[12.95448017 -42.98318481]
[7.70178127 -57.05671310]
[4.33104181 -71.69546509]
[2.89994001 -86.64896393]
[3.43296361 -101.66132355]
[5.92099142 -116.47566223]
[10.32145119 -130.83850098]
[16.55904388 -144.50405884]
[24.52703667 -157.23849487]
[34.08908844 -168.82392883]
[45.08157730 -179.06210327]
[57.31640625 -187.77783203]
[70.58422852 -194.82197571]
[84.65800476 -200.07400513]
[99.29692078 -203.44404602]
[114.25048065 -204.87443542]
[129.26281738 -204.34069824]
[144.07704163 -201.85197449]
[158.43966675 -197.45082092]
[172.10491943 -191.21258545]
[184.83898926 -183.24398804]
[196.42396545 -173.68138123]
[206.66160583 -162.68840027]
[215.37675476 -150.45315552]
[222.42027283 -137.18501282]
[227.67163086 -123.11097717]
[231.04098511 -108.47190094]
[232.47065735 -93.51827240]
[231.93620300 -78.50596619]
[229.44676208 -63.69186020]
[225.04493713 -49.32944489]
[218.80604553 -35.66448212]
[210.83683777 -22.93079567]
[201.27368164 -11.34627628]
[190.28022766 -1.10914826]
[178.04457092 7.60541582]
[164.77607727 14.64829922]
[150.70179749 19.89898872]
[136.06256104 23.26763725]
[121.10886383 24.69660378]
[106.09658051 24.16143608]
[103.61146545 38.95414352]
[101.12634277 53.74684906]
[98.64122772 68.53955841]
[116.78335571 75.00532532]
[127.03132629 90.28623199]
[126.20285034 107.80518341]
[115.64299774 120.71456146]
[120.83841705 134.78608704]
[126.03382874 148.85760498]
[131.22924805 162.92912292]
[136.42466736 177.00064087]
[139.59643555 162.33981323]
[147.50971985 149.59696960]
[159.24444580 140.25372314]
[173.43621826 135.39639282]
[188.43496704 135.58973694]
[202.49681091 140.81127930]
[213.98678589 150.45391846]
[221.56896973 163.39649963]
[224.36178589 178.13421631]
[222.04049683 192.95352173]
[214.87503052 206.13137817]
[203.69848633 216.13560486]
[189.81034851 221.80303955]
[174.82539368 222.47473145]
[160.48590088 218.07255554]
[148.45912170 209.10838318]
[140.14221191 196.62181091]
[140.45426941 211.61856079]
[140.76632690 226.61531067]
[141.07838440 241.61206055]
[141.39044189 256.60882568]
[141.70249939 271.60556030]
[142.01455688 286.60232544]
[142.32661438 301.59909058]
[142.63867188 316.59582520]
[157.29365540 320.18661499]
[170.51947021 327.44885254]
[181.41433716 337.88745117]
[189.23542786 350.79067993]
[193.44950867 365.27871704]
[193.76922607 380.36383057]
[190.17280579 395.01742554]
[182.90544128 408.24044800]
[172.46263123 419.13128662]
[159.55641174 426.94738770]
[145.06671143 431.15585327]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 114]
[21 113]
[22 112]
[23 111]
[24 110]
[29 52]
[30 51]
[32 49]
[33 48]
[34 47]
[36 44]
[37 43]
[53 106]
[54 105]
[55 104]
[56 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
