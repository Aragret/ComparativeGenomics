%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCUACGCAGGGGGGGGGGAAAUCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUxxxxxxxxxxCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACCCCCCCCCCCAGCUAAGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 385.31454468]
[71.19830322 379.29852295]
[59.48964310 369.76910400]
[50.78712082 357.43344116]
[45.73651886 343.20690918]
[44.71262741 328.14523315]
[47.79142761 313.36608887]
[54.74444962 299.96615601]
[65.05573273 288.93981934]
[77.96011353 281.10531616]
[92.50000000 277.04400635]
[92.50000000 262.04400635]
[92.50000000 247.04399109]
[92.50000000 232.04399109]
[92.50000000 217.04399109]
[92.50000000 202.04399109]
[92.50000000 187.04399109]
[92.50000000 172.04399109]
[92.50000000 157.04399109]
[92.50000000 142.04399109]
[77.18298340 136.10168457]
[65.24260712 124.81675720]
[58.44590378 109.85924530]
[57.79870224 93.44269562]
[63.39678192 77.99653625]
[52.09777832 68.13081360]
[40.79877472 58.26509476]
[29.49976921 48.39937210]
[18.20076370 38.53364563]
[4.88560772 31.62664795]
[-9.68709469 28.07188606]
[-24.25979805 24.51712418]
[-39.50046921 28.76359558]
[-50.03156662 18.23054123]
[-64.60427094 14.67577934]
[-72.99603271 27.29933739]
[-85.20105743 36.28895187]
[-99.74552917 40.55908585]
[-114.87313843 39.59409714]
[-128.75715637 33.51051331]
[-139.72100830 23.04295540]
[-146.44076538 9.45543480]
[-148.10498047 -5.61128998]
[-144.51268005 -20.33783913]
[-136.09767151 -32.94591141]
[-123.87610626 -41.91301727]
[-109.32378387 -46.15634155]
[-94.19797516 -45.16347504]
[-80.32520294 -39.05431366]
[-69.38065338 -28.56657028]
[-62.68595505 -14.96668911]
[-61.04951096 0.10307679]
[-46.47680664 3.65783882]
[-32.27847290 -0.84289169]
[-20.70503616 9.94442177]
[-6.13233280 13.49918365]
[8.44036961 17.05394554]
[-2.17977452 6.46090412]
[-9.89266777 -6.40421486]
[-14.23161221 -20.76296043]
[-14.93406487 -35.74650192]
[-11.95752239 -50.44821167]
[-5.48208904 -63.97850037]
[4.10041380 -75.51867676]
[16.21016312 -84.37045288]
[30.11441231 -89.99822998]
[44.97183609 -92.06147003]
[59.88343048 -90.43532562]
[73.94691467 -85.21820831]
[86.31133270 -76.72578430]
[96.22852325 -65.47192383]
[103.09841156 -52.13758469]
[106.50531006 -37.52960587]
[106.24307251 -22.53189659]
[102.32756805 -8.05195141]
[94.99571991 5.03407001]
[84.69116211 15.93435097]
[72.03741455 23.98932838]
[57.80013657 28.71160889]
[42.84080505 29.81545067]
[28.06648636 27.23464203]
[39.36548996 37.10036469]
[50.66449738 46.96608734]
[61.96350098 56.83181000]
[73.26250458 66.69753265]
[84.92178345 60.04258347]
[98.07096863 57.33588409]
[111.41075897 58.84489822]
[123.62303925 64.42050934]
[133.50108337 73.51178741]
[140.06883240 85.22041321]
[154.83488464 82.58155060]
[169.60095215 79.94268036]
[184.36700439 77.30381775]
[187.70068359 60.82251358]
[197.06550598 46.90067291]
[211.01347351 37.64078522]
[227.40699768 34.42834854]
[243.74653625 37.72464371]
[257.55166626 47.00072098]
[266.73770142 60.82204819]
[281.38119507 57.57122040]
[296.02468872 54.32039642]
[310.66818237 51.06956863]
[317.72381592 37.11420822]
[332.11935425 31.00660706]
[347.05764771 35.63059235]
[355.48532104 48.80285263]
[353.42306519 64.30385590]
[341.84460449 74.81449890]
[326.21694946 75.37197876]
[313.91900635 65.71307373]
[299.27551270 68.96389771]
[284.63201904 72.21472168]
[269.98852539 75.46554565]
[268.51473999 88.70973206]
[263.00588989 100.86879730]
[253.98976135 110.74352264]
[242.34078979 117.35519409]
[229.19531250 120.04260254]
[215.84069824 118.52812195]
[203.58923340 112.94634247]
[193.64924622 103.83222961]
[187.00585938 92.06987762]
[172.23980713 94.70874023]
[157.47375488 97.34760284]
[142.70770264 99.98646545]
[140.14285278 114.57733917]
[132.74771118 127.41414642]
[121.41208649 136.95227051]
[107.50000000 142.04399109]
[107.50000000 157.04399109]
[107.50000000 172.04399109]
[107.50000000 187.04399109]
[107.50000000 202.04399109]
[107.50000000 217.04399109]
[107.50000000 232.04399109]
[107.50000000 247.04399109]
[107.50000000 262.04400635]
[107.50000000 277.04400635]
[122.03988647 281.10531616]
[134.94427490 288.93981934]
[145.25555420 299.96615601]
[152.20857239 313.36608887]
[155.28736877 328.14523315]
[154.26348877 343.20690918]
[149.21287537 357.43344116]
[140.51036072 369.76910400]
[128.80169678 379.29852295]
[114.95575714 385.31454468]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 85]
[26 84]
[27 83]
[28 82]
[29 81]
[30 57]
[31 56]
[32 55]
[34 53]
[35 52]
[91 127]
[92 126]
[93 125]
[94 124]
[101 115]
[102 114]
[103 113]
[104 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
