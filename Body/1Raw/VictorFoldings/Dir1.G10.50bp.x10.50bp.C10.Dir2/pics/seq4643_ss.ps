%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUCCCGUACUGGGGGGGGGGAAUUAAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCAxxxxxxxxxxAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCCCCCCCCCCCUUCCCCUACU\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 421.82861328]
[70.75619507 417.01919556]
[57.85220718 409.25378418]
[46.91955185 398.89566040]
[38.46956635 386.42922974]
[32.89747238 372.43759155]
[30.46388245 357.57516479]
[31.28262329 342.53707886]
[35.31539917 328.02673340]
[42.37359238 314.72274780]
[52.12707901 303.24737549]
[64.11966705 294.13739014]
[77.79044342 287.81884766]
[92.50000000 284.58731079]
[92.50000000 269.58731079]
[92.50000000 254.58729553]
[92.50000000 239.58729553]
[92.50000000 224.58729553]
[92.50000000 209.58729553]
[92.50000000 194.58729553]
[92.50000000 179.58729553]
[92.50000000 164.58729553]
[92.50000000 149.58729553]
[92.50000000 134.58729553]
[84.16104889 131.64900208]
[76.81062317 126.73544312]
[70.90747070 120.15330505]
[66.82000732 112.31338501]
[64.80334473 103.70497131]
[64.98334503 94.86531830]
[67.34876251 86.34613800]
[71.75198364 78.67910004]
[77.91819000 72.34272766]
[71.25582886 58.90349197]
[64.59347534 45.46426010]
[57.93111420 32.02502441]
[53.65173340 46.40163422]
[41.83388138 55.63951492]
[26.84938240 56.32126236]
[14.24150372 48.19467545]
[8.67432308 34.26605606]
[12.20732689 19.68806076]
[23.53354073 9.85358620]
[38.46301270 8.40073109]
[51.47448349 15.86875534]
[47.03950119 1.53938293]
[42.60451508 -12.78998947]
[34.50638580 -25.41616440]
[23.33247375 -35.42334747]
[9.97920609 -28.24936104]
[-5.02285290 -26.07817841]
[-19.86213112 -29.17197990]
[-32.74671555 -37.15717316]
[-42.12072754 -49.06950378]
[-46.85221481 -63.47050858]
[-46.36981964 -78.62118530]
[-40.73179626 -92.69202423]
[-30.61896706 -103.98390198]
[-17.25250244 -111.13327026]
[-2.24646688 -113.27680206]
[12.58708572 -110.15565491]
[25.45693207 -102.14673615]
[34.80897522 -90.21714783]
[39.51391220 -75.80744934]
[39.00359726 -60.65768433]
[33.33965683 -46.59725952]
[44.51356888 -36.59007645]
[58.44246292 -42.15656662]
[59.64179230 -57.10854340]
[60.84111786 -72.06052399]
[62.04044724 -87.01249695]
[63.23977280 -101.96447754]
[49.44539261 -108.24864960]
[38.63440323 -118.87400818]
[32.11228561 -132.55749512]
[30.66661644 -147.64675903]
[34.47196960 -162.31970215]
[43.06882858 -174.80447388]
[55.41908264 -183.59350586]
[70.03137207 -187.62547302]
[85.14120483 -186.41348267]
[98.92398071 -180.10389709]
[109.71537018 -169.45863342]
[116.21225739 -155.76315308]
[117.63011932 -140.67124939]
[113.79772949 -126.00534821]
[105.17787933 -113.53643036]
[92.81144714 -104.77017212]
[78.19174957 -100.76514435]
[76.99242401 -85.81317139]
[75.79309845 -70.86119080]
[74.59376526 -55.90921783]
[73.39443970 -40.95724106]
[68.41609955 -24.42927933]
[56.93388748 -17.22497368]
[61.36887360 -2.89560080]
[65.80385590 11.43377209]
[71.37034607 25.36266899]
[78.03270721 38.80190277]
[84.69506073 52.24113464]
[91.35742188 65.68036652]
[109.93758392 66.03273010]
[125.77777100 75.75050354]
[134.51052856 92.15433502]
[148.23260498 84.27935028]
[161.03665161 91.88893127]
[176.03590393 91.73885345]
[191.03514099 91.58878326]
[206.03439331 91.43870544]
[211.05265808 77.13511658]
[220.66281128 65.41244507]
[233.70436096 57.68628311]
[248.60249329 54.88958359]
[263.55816650 57.36006927]
[276.76544189 64.79941559]
[286.62945557 76.30928802]
[291.95907593 90.49981689]
[292.11074829 105.65740967]
[287.06610107 119.95173645]
[277.43438721 131.65666199]
[264.37860107 139.35879517]
[249.47535706 142.12802124]
[234.52424622 139.62998962]
[221.33070374 132.16630554]
[211.48793030 120.63827515]
[206.18446350 106.43795776]
[191.18522644 106.58802795]
[176.18597412 106.73810577]
[161.18672180 106.88817596]
[148.53749084 114.75242615]
[134.66059875 107.15357971]
[125.15017700 124.89979553]
[107.50000000 134.58729553]
[107.50000000 149.58729553]
[107.50000000 164.58729553]
[107.50000000 179.58729553]
[107.50000000 194.58729553]
[107.50000000 209.58729553]
[107.50000000 224.58729553]
[107.50000000 239.58729553]
[107.50000000 254.58729553]
[107.50000000 269.58731079]
[107.50000000 284.58731079]
[122.20955658 287.81884766]
[135.88034058 294.13739014]
[147.87292480 303.24737549]
[157.62640381 314.72274780]
[164.68460083 328.02673340]
[168.71737671 342.53707886]
[169.53611755 357.57516479]
[167.10252380 372.43759155]
[161.53042603 386.42922974]
[153.08044434 398.89566040]
[142.14779663 409.25378418]
[129.24380493 417.01919556]
[114.97203827 421.82861328]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[33 101]
[34 100]
[35 99]
[36 98]
[45 97]
[46 96]
[47 95]
[48 67]
[49 66]
[68 93]
[69 92]
[70 91]
[71 90]
[72 89]
[104 131]
[106 129]
[107 128]
[108 127]
[109 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
