%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUGACAAAAGGGGGGGGGGACUAGCCCCCAUCUCAAUCAUAUACCAAAUCUCUCCCUCACUAAACGUAAxxxxxxxxxxUUAAAACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCCCCCCCCCCCUGACAAAA\
) } def
/len { sequence length } bind def

/coor [
[92.27059937 373.85168457]
[79.05039978 366.57922363]
[68.16359711 356.13223267]
[60.35246658 343.22296143]
[56.14958572 328.73165894]
[55.84151459 313.64633179]
[59.44925308 298.99548340]
[66.72682953 285.77810669]
[77.17803192 274.89532471]
[90.09029388 267.08920288]
[104.58323669 262.89190674]
[104.27117920 247.89515686]
[103.95912170 232.89839172]
[103.64706421 217.90164185]
[103.33500671 202.90489197]
[103.02294922 187.90814209]
[102.71089935 172.91137695]
[102.39884186 157.91462708]
[102.08678436 142.91787720]
[101.77472687 127.92111969]
[84.07691956 120.15120697]
[76.94814301 103.95394897]
[82.15414429 88.75354004]
[73.13661194 76.76670837]
[64.11907959 64.77987671]
[55.10155487 52.79304123]
[46.08402252 40.80620956]
[36.94229126 28.91382790]
[27.67733955 17.11718941]
[14.99324036 25.14866447]
[1.56167769 31.85568810]
[-12.47951698 37.16942978]
[-26.98625946 41.03536224]
[-41.80968475 43.41381836]
[-56.79768372 44.28038788]
[-71.79644775 43.62617874]
[-86.65207672 41.45790482]
[-101.21211243 37.79781723]
[-115.32716370 32.68347549]
[-128.85237122 26.16735649]
[-141.64894104 18.31632996]
[-153.58558655 9.21095943]
[-164.53977966 -1.05531991]
[-174.39913940 -12.37715816]
[-183.06248474 -24.63837433]
[-190.44091797 -37.71315002]
[-196.45872498 -51.46731567]
[-201.05413818 -65.75972748]
[-204.18002319 -80.44373322]
[-205.80430603 -95.36863708]
[-205.91027832 -110.38128662]
[-204.49690247 -125.32763672]
[-201.57865906 -140.05430603]
[-197.18548584 -154.41018677]
[-191.36247253 -168.24794006]
[-184.16937256 -181.42558289]
[-175.68000793 -193.80789185]
[-165.98149109 -205.26780701]
[-155.17332458 -215.68772888]
[-143.36643982 -224.96072388]
[-130.68199158 -232.99163818]
[-117.25012970 -239.69807434]
[-103.20870209 -245.01119995]
[-88.70178986 -248.87649536]
[-73.87825775 -251.25430298]
[-58.89022064 -252.12020874]
[-43.89148331 -251.46533203]
[-29.03595352 -249.29641724]
[-14.47607422 -245.63568115]
[-0.36125436 -240.52072144]
[13.16366577 -234.00401306]
[25.95989799 -226.15242004]
[37.89612961 -217.04652405]
[48.84988022 -206.77975464]
[58.70874405 -195.45748901]
[67.37155151 -183.19589233]
[74.74940491 -170.12078857]
[80.76660156 -156.36636353]
[85.36139679 -142.07374573]
[88.48663330 -127.38960266]
[90.11024475 -112.46463013]
[90.21557617 -97.45197296]
[88.80152893 -82.50568390]
[85.88263702 -67.77914429]
[81.48883057 -53.42346191]
[75.66521454 -39.58596039]
[68.47154236 -26.40862846]
[59.98162842 -14.02668953]
[50.28260040 -2.56720281]
[39.47397995 7.85223913]
[48.73892975 19.64888000]
[55.38681030 22.98823738]
[58.07085800 31.78867912]
[67.08838654 43.77551270]
[76.10591888 55.76234436]
[85.12344360 67.74917603]
[94.14097595 79.73600769]
[115.45856476 80.94651031]
[127.90115356 102.06507874]
[142.89384460 102.53311920]
[157.88653564 103.00116730]
[161.81042480 88.45125580]
[168.98451233 75.19873810]
[179.02191162 63.95830154]
[191.38131714 55.33613586]
[205.39620972 49.79721451]
[220.31076050 47.64025116]
[235.32067871 48.98156357]
[249.61648560 53.74881744]
[262.42721558 61.68492508]
[273.06201172 72.36190033]
[280.94735718 85.20394135]
[285.65802002 99.51850128]
[286.93991089 114.53360748]
[284.72393799 129.43951416]
[279.12957764 143.43237305]
[270.45858765 155.75756836]
[259.17849731 165.75039673]
[245.89770508 172.87197876]
[231.33236694 176.73825073]
[216.26802063 177.14070129]
[201.51704407 174.05763245]
[187.87493896 167.65531921]
[176.07740784 158.27902222]
[166.76068115 146.43438721]
[160.42718506 132.76019287]
[157.41850281 117.99385834]
[142.42579651 117.52581787]
[127.43310547 117.05777740]
[116.77148438 127.60906219]
[117.08353424 142.60581970]
[117.39559174 157.60256958]
[117.70764923 172.59931946]
[118.01970673 187.59608459]
[118.33176422 202.59283447]
[118.64382172 217.58958435]
[118.95587158 232.58633423]
[119.26792908 247.58309937]
[119.57998657 262.57983398]
[134.23498535 266.17062378]
[147.46078491 273.43286133]
[158.35565186 283.87145996]
[166.17675781 296.77468872]
[170.39082336 311.26275635]
[170.71054077 326.34783936]
[167.11412048 341.00143433]
[159.84675598 354.22445679]
[149.40396118 365.11529541]
[136.49772644 372.93139648]
[122.00803375 377.13989258]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 91]
[29 90]
[99 129]
[100 128]
[101 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
