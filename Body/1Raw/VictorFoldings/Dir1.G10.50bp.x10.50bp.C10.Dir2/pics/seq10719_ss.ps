%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAACAAGGGGGGGGGGCCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCAUAAUAUUCAUCxxxxxxxxxxCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGCCCCCCCCCCACCCAGACAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 388.20925903]
[71.19830322 382.19323730]
[59.48964310 372.66381836]
[50.78712082 360.32815552]
[45.73651886 346.10162354]
[44.71262741 331.03994751]
[47.79142761 316.26077271]
[54.74444962 302.86083984]
[65.05573273 291.83450317]
[77.96011353 284.00000000]
[92.50000000 279.93869019]
[92.50000000 264.93869019]
[92.50000000 249.93869019]
[92.50000000 234.93869019]
[92.50000000 219.93869019]
[92.50000000 204.93869019]
[92.50000000 189.93869019]
[92.50000000 174.93869019]
[92.50000000 159.93869019]
[92.50000000 144.93869019]
[92.50000000 129.93869019]
[84.88465118 126.90913391]
[78.33517456 121.98205566]
[73.31341553 115.50489044]
[58.90119934 119.66277313]
[44.48898315 123.82066345]
[30.07676697 127.97855377]
[23.90534592 142.34683228]
[9.91881180 149.34046936]
[-5.27882147 145.65727234]
[-14.51169586 133.03633118]
[-13.42033195 117.43687439]
[-2.52003622 106.22449493]
[13.04240322 104.69332123]
[25.91887856 113.56633759]
[40.33109665 109.40844727]
[54.74331284 105.25055695]
[69.15552521 101.09267426]
[70.17932129 92.04370117]
[73.79933929 83.68740845]
[79.70040894 76.75130463]
[87.36877441 71.83925629]
[96.13683319 69.37890625]
[105.24121857 69.58445740]
[111.30422974 55.86440659]
[117.36724854 42.14435196]
[123.43025970 28.42429924]
[110.23519135 21.27331352]
[97.65834045 13.08374691]
[85.78125763 3.90871382]
[74.68097687 -6.19228220]
[64.42948914 -17.15373039]
[55.09328461 -28.90454292]
[46.73290634 -41.36850739]
[39.40257645 -54.46479034]
[33.14984131 -68.10845184]
[28.01524544 -82.21101379]
[24.03209496 -96.68101501]
[21.22621727 -111.42459869]
[19.61581421 -126.34616089]
[19.21132851 -141.34892273]
[20.01538277 -156.33557129]
[22.02276230 -171.20892334]
[25.22044945 -185.87252808]
[29.58770561 -200.23126221]
[35.09620667 -214.19201660]
[41.71022415 -227.66426086]
[49.38687134 -240.56059265]
[58.07635117 -252.79739380]
[67.72231293 -264.29528809]
[78.26220703 -274.97973633]
[89.62766266 -284.78140259]
[101.74497223 -293.63671875]
[114.53555298 -301.48831177]
[127.91645813 -308.28521729]
[141.80088806 -313.98333740]
[156.09881592 -318.54574585]
[170.71749878 -321.94287109]
[185.56213379 -324.15264893]
[200.53645325 -325.16073608]
[215.54333496 -324.96063232]
[230.48544312 -323.55358887]
[245.26586914 -320.94879150]
[259.78878784 -317.16308594]
[273.95996094 -312.22103882]
[287.68753052 -306.15472412]
[300.88244629 -299.00344849]
[313.45910645 -290.81359863]
[325.33599854 -281.63830566]
[336.43603516 -271.53704834]
[346.68728638 -260.57537842]
[356.02325439 -248.82437134]
[364.38333130 -236.36021423]
[371.71337891 -223.26377869]
[377.96582031 -209.61997986]
[383.10009766 -195.51730347]
[387.08294678 -181.04721069]
[389.88848877 -166.30355835]
[391.49856567 -151.38197327]
[391.90270996 -136.37919617]
[391.09832764 -121.39256287]
[389.09063721 -106.51925659]
[385.89260864 -91.85572815]
[381.52505493 -77.49708557]
[376.01623535 -63.53644562]
[369.40191650 -50.06435776]
[361.72497559 -37.16819382]
[353.03524780 -24.93158722]
[343.38900757 -13.43389988]
[332.84890747 -2.74969983]
[321.48321533 7.05172014]
[309.36572266 15.90679359]
[296.57495117 23.75809097]
[283.19390869 30.55469322]
[269.30935669 36.25252151]
[255.01132202 40.81462479]
[240.39256287 44.21141052]
[225.54788208 46.42084885]
[210.57353210 47.42861938]
[195.56666565 47.22817612]
[180.62458801 45.82082367]
[165.84420776 43.21568680]
[151.32139587 39.42966843]
[137.15031433 34.48731232]
[131.08729553 48.20736694]
[125.02428436 61.92742157]
[118.96127319 75.64747620]
[130.44779968 94.94956207]
[125.80830383 116.92651367]
[107.50000000 129.93869019]
[107.50000000 144.93869019]
[107.50000000 159.93869019]
[107.50000000 174.93869019]
[107.50000000 189.93869019]
[107.50000000 204.93869019]
[107.50000000 219.93869019]
[107.50000000 234.93869019]
[107.50000000 249.93869019]
[107.50000000 264.93869019]
[107.50000000 279.93869019]
[122.03988647 284.00000000]
[134.94427490 291.83450317]
[145.25555420 302.86083984]
[152.20857239 316.26077271]
[155.28736877 331.03994751]
[154.26348877 346.10162354]
[149.21287537 360.32815552]
[140.51036072 372.66381836]
[128.80169678 382.19323730]
[114.95575714 388.20925903]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 38]
[25 37]
[26 36]
[27 35]
[44 127]
[45 126]
[46 125]
[47 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
