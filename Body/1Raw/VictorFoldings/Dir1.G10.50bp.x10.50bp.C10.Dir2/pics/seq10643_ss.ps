%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCACCCUCGGGGGGGGGGGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUxxxxxxxxxxAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGCCCCCCCCCCUCCCACCCUC\
) } def
/len { sequence length } bind def

/coor [
[110.79808807 410.34884644]
[96.95215607 404.33282471]
[85.24349213 394.80340576]
[76.54096985 382.46774292]
[71.49036407 368.24121094]
[70.46647644 353.17953491]
[73.54527283 338.40036011]
[80.49829102 325.00042725]
[90.80957794 313.97409058]
[103.71395874 306.13958740]
[118.25384521 302.07827759]
[118.25384521 287.07827759]
[118.25384521 272.07827759]
[118.25384521 257.07827759]
[118.25384521 242.07827759]
[118.25384521 227.07827759]
[118.25384521 212.07827759]
[118.25384521 197.07827759]
[118.25384521 182.07827759]
[118.25384521 167.07827759]
[110.51654816 154.35101318]
[118.25384521 140.55084229]
[91.95468903 139.76533508]
[73.13166046 124.95877075]
[67.48638916 104.11749268]
[74.61385345 86.24227142]
[63.73502731 75.91506195]
[52.85620117 65.58786011]
[37.52057648 61.69822693]
[33.61703873 47.32423401]
[21.63020515 38.30670547]
[8.69215012 30.71679688]
[-4.24590588 23.12688828]
[-17.18396187 15.53697968]
[-28.94013786 26.07576752]
[-43.35572433 32.46738052]
[-59.02053833 34.09964752]
[-74.40621948 30.82534599]
[-88.01535034 22.97537041]
[-98.52719116 11.32535458]
[-104.92585754 -2.98096132]
[-106.59847260 -18.54401207]
[-103.39386749 -33.84531784]
[-116.48701477 -41.16442490]
[-129.58016968 -48.48353195]
[-142.67332458 -55.80263519]
[-157.22703552 -50.08219910]
[-172.03634644 -55.10402298]
[-180.10871887 -68.49695587]
[-177.63265991 -83.93726349]
[-165.77726746 -94.13450623]
[-150.14030457 -94.27385712]
[-138.10507202 -84.28952026]
[-135.35421753 -68.89579010]
[-122.26107025 -61.57668304]
[-109.16791534 -54.25757980]
[-96.07476044 -46.93847275]
[-85.83174133 -56.89730835]
[-73.17898560 -63.56525803]
[-59.14250183 -66.39143372]
[-44.86338043 -65.13690186]
[-31.50504112 -59.89482498]
[-20.15842819 -51.08364105]
[-11.75292683 -39.41365051]
[-6.98023510 -25.82978249]
[-6.23745251 -11.43506527]
[-9.59405327 2.59892392]
[3.34400249 10.18883228]
[16.28205872 17.77873993]
[29.22011375 25.36864853]
[23.44209290 11.52616119]
[24.63078117 -3.42666507]
[32.52325439 -16.18240356]
[45.37377167 -23.91960144]
[60.33991623 -24.92686081]
[74.11131287 -18.98138809]
[83.64185333 -7.39826536]
[86.82347870 7.26042747]
[82.95243073 21.75232315]
[72.88496399 32.87194443]
[58.84789658 38.15974045]
[43.94424438 36.44540787]
[58.50173950 39.59637070]
[63.18340683 54.70903397]
[74.06223297 65.03623962]
[84.94105530 75.36344147]
[108.03356171 64.21858978]
[137.18670654 75.61307526]
[149.44908142 66.97396088]
[161.71144104 58.33484268]
[173.97381592 49.69572449]
[159.99658203 44.25173187]
[155.33506775 29.99444389]
[163.39646912 17.34478188]
[178.28852844 15.54862690]
[189.12638855 25.91882133]
[187.98875427 40.87502289]
[201.08190918 33.55591583]
[214.17506409 26.23681068]
[225.05041504 13.23054790]
[240.55899048 20.08040428]
[238.27003479 36.87912369]
[221.49417114 39.32996368]
[208.40101624 46.64907074]
[195.30786133 53.96817780]
[182.61293030 61.95809174]
[170.35055542 70.59720612]
[158.08819580 79.23632812]
[145.82582092 87.87544250]
[146.91424561 95.29604340]
[161.75547791 93.11943817]
[163.93185425 107.96070862]
[149.09107971 110.13725281]
[150.17950439 117.55785370]
[165.72041321 114.59295654]
[175.33950806 125.96495819]
[189.56628418 130.71876526]
[203.79306030 135.47257996]
[218.01983643 140.22639465]
[234.95870972 139.51148987]
[240.33482361 155.59046936]
[226.37246704 165.20759583]
[213.26602173 154.45318604]
[199.03924561 149.69937134]
[184.81246948 144.94555664]
[170.58569336 140.19174194]
[156.06236267 143.49665833]
[145.42568970 131.78463745]
[133.25384521 140.55084229]
[140.99114990 154.35101318]
[133.25384521 167.07827759]
[133.25384521 182.07827759]
[133.25384521 197.07827759]
[133.25384521 212.07827759]
[133.25384521 227.07827759]
[133.25384521 242.07827759]
[133.25384521 257.07827759]
[133.25384521 272.07827759]
[133.25384521 287.07827759]
[133.25384521 302.07827759]
[147.79373169 306.13958740]
[160.69812012 313.97409058]
[171.00939941 325.00042725]
[177.96241760 338.40036011]
[181.04121399 353.17953491]
[180.01733398 368.24121094]
[174.96672058 382.46774292]
[166.26420593 394.80340576]
[154.55554199 404.33282471]
[140.70959473 410.34884644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[26 86]
[27 85]
[28 84]
[30 82]
[31 70]
[32 69]
[33 68]
[34 67]
[43 57]
[44 56]
[45 55]
[46 54]
[88 109]
[89 108]
[90 107]
[91 106]
[97 105]
[98 104]
[99 103]
[114 128]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
