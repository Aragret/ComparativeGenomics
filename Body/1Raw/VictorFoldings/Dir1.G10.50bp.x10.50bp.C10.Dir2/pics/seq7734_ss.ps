%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCAAUUGGGGGGGGGGGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCxxxxxxxxxxUUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUACCCCCCCCCCAAAUCCAUUG\
) } def
/len { sequence length } bind def

/coor [
[131.27548218 617.58367920]
[117.42954254 611.56768799]
[105.72087860 602.03826904]
[97.01835632 589.70257568]
[91.96775055 575.47607422]
[90.94386292 560.41436768]
[94.02265930 545.63525391]
[100.97567749 532.23529053]
[111.28696442 521.20898438]
[124.19134521 513.37445068]
[138.73123169 509.31314087]
[138.73123169 494.31314087]
[138.73123169 479.31314087]
[138.73123169 464.31314087]
[138.73123169 449.31314087]
[138.73123169 434.31314087]
[138.73123169 419.31314087]
[138.73123169 404.31314087]
[138.73123169 389.31314087]
[138.73123169 374.31314087]
[128.05035400 363.99548340]
[127.83667755 348.78332520]
[138.73123169 337.65020752]
[138.73123169 322.65020752]
[130.38267517 313.84060669]
[130.29824829 301.30221558]
[139.07133484 291.78973389]
[139.38339233 276.79299927]
[139.69544983 261.79623413]
[140.00749207 246.79948425]
[140.31954956 231.80273438]
[136.76478577 217.23002625]
[129.58229065 204.06144714]
[125.79814148 218.57627869]
[114.30760956 228.21824646]
[99.35622406 229.42486572]
[86.46820831 221.75028992]
[80.40544128 208.03012085]
[83.40798187 193.33370972]
[94.36646271 183.09106445]
[109.23194122 181.08665466]
[122.51129913 188.06044006]
[117.60974121 173.88388062]
[112.70819092 159.70732117]
[107.80664062 145.53076172]
[102.90509033 131.35420227]
[89.50298309 129.68734741]
[78.03183746 122.55937958]
[70.60182190 111.28152466]
[68.57971954 97.92839813]
[72.33750153 84.95634460]
[61.24618149 74.85769653]
[50.15486908 64.75904846]
[34.02653503 61.79106522]
[28.78841019 46.25098419]
[39.82902527 34.12511063]
[55.79074478 37.88750076]
[60.25351715 53.66773224]
[71.34483337 63.76638031]
[82.43614960 73.86502838]
[86.08523560 71.75279236]
[89.98380280 70.14700317]
[88.73693085 55.19891739]
[73.93692780 52.17622757]
[60.58866882 45.10511780]
[49.77423096 34.55880737]
[42.37029648 21.39224434]
[38.97706604 6.67277956]
[39.86961365 -8.40634632]
[44.97558594 -22.62273598]
[53.88106537 -34.82392883]
[65.86412048 -44.02082825]
[79.95334625 -49.46788788]
[95.00659180 -50.72353363]
[109.80354309 -47.68597794]
[123.14469910 -40.60145950]
[133.94853210 -30.04429436]
[141.33923340 -16.87029839]
[144.71768188 -2.14743161]
[143.80998230 12.93078995]
[138.68972778 27.14204216]
[129.77200317 39.33428192]
[117.77970886 48.51914215]
[103.68502045 53.95204163]
[104.93189240 68.90013123]
[121.69329071 77.17618561]
[130.80944824 93.49590302]
[129.06761169 112.10781860]
[117.08164978 126.45265198]
[121.98320007 140.62921143]
[126.88475037 154.80577087]
[131.78630066 168.98233032]
[136.68785095 183.15888977]
[142.75086975 196.87893677]
[149.93338013 210.04751587]
[150.65710449 195.06498718]
[154.75328064 180.63511658]
[162.00929260 167.50688171]
[172.04849243 156.36172485]
[184.34979248 147.77815247]
[198.27470398 142.20169067]
[213.10043335 139.92178345]
[228.05741882 141.05677795]
[242.36933899 145.54777527]
[255.29330444 153.16163635]
[266.15850830 163.50318909]
[274.40093994 176.03562927]
[279.59283447 190.10845947]
[281.46463013 204.99121094]
[279.91921997 219.91139221]
[275.03680420 234.09454346]
[267.07083130 246.80450439]
[256.43472290 257.38153076]
[243.68061829 265.27664185]
[229.47048950 270.07998657]
[214.54193115 271.54229736]
[199.66983032 269.58764648]
[185.62612915 264.31750488]
[173.13978577 256.00540161]
[162.85890198 245.08277893]
[155.31631470 232.11479187]
[155.00425720 247.11154175]
[154.69219971 262.10830688]
[154.38014221 277.10504150]
[154.06808472 292.10180664]
[163.32234192 307.98696899]
[153.73123169 322.65020752]
[153.73123169 337.65020752]
[164.62579346 348.78332520]
[164.41210938 363.99548340]
[153.73123169 374.31314087]
[153.73123169 389.31314087]
[153.73123169 404.31314087]
[153.73123169 419.31314087]
[153.73123169 434.31314087]
[153.73123169 449.31314087]
[153.73123169 464.31314087]
[153.73123169 479.31314087]
[153.73123169 494.31314087]
[153.73123169 509.31314087]
[168.27111816 513.37445068]
[181.17550659 521.20898438]
[191.48678589 532.23529053]
[198.43980408 545.63525391]
[201.51860046 560.41436768]
[200.49472046 575.47607422]
[195.44410706 589.70257568]
[186.74159241 602.03826904]
[175.03292847 611.56768799]
[161.18698120 617.58367920]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[27 125]
[28 124]
[29 123]
[30 122]
[31 121]
[32 95]
[33 94]
[42 93]
[43 92]
[44 91]
[45 90]
[46 89]
[51 60]
[52 59]
[53 58]
[62 85]
[63 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
