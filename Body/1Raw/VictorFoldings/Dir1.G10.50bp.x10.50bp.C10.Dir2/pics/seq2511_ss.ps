%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUGAAAACGGGGGGGGGGAUUCUCCUCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUxxxxxxxxxxCAGCCACCAUGAAUAUUGUACGGUACCAUAAAUACUUGACCACCUGUAGUCCCCCCCCCCACAUAAAAAC\
) } def
/len { sequence length } bind def

/coor [
[94.65047455 402.45819092]
[80.80453491 396.44213867]
[69.09587097 386.91271973]
[60.39334869 374.57705688]
[55.34274673 360.35055542]
[54.31885529 345.28884888]
[57.39765167 330.50970459]
[64.35067749 317.10977173]
[74.66195679 306.08343506]
[87.56633759 298.24893188]
[102.10622406 294.18762207]
[102.10622406 279.18762207]
[102.10622406 264.18762207]
[102.10622406 249.18762207]
[102.10622406 234.18762207]
[102.10622406 219.18762207]
[102.10622406 204.18762207]
[102.10622406 189.18762207]
[102.10622406 174.18762207]
[102.10622406 159.18762207]
[102.10622406 144.18762207]
[102.10622406 129.18762207]
[96.66681671 124.02401733]
[95.37567139 138.96835327]
[82.88679504 147.27665710]
[68.60436249 142.69274902]
[63.28311539 128.66831970]
[70.92996979 115.76384735]
[85.78798676 113.69681549]
[80.34857941 108.53321075]
[65.36886597 109.31305695]
[50.38914871 110.09290314]
[35.40943527 110.87274933]
[25.01775742 122.78025055]
[9.24441147 123.76873016]
[-2.55255842 113.25173950]
[-3.37421823 97.46882629]
[7.26690769 85.78370667]
[23.05762863 85.12895966]
[34.62958908 95.89303589]
[49.60930252 95.11318970]
[64.58901978 94.33334351]
[79.56873322 93.55349731]
[83.57646942 79.09880829]
[71.13703156 70.71666718]
[58.69758987 62.33452225]
[46.25815201 53.95237732]
[32.12984848 60.14871597]
[16.89797974 57.70050812]
[5.42298031 47.38896179]
[1.36647928 32.50446320]
[6.02289200 17.79659653]
[17.90637398 7.95858812]
[33.22494888 6.12971306]
[47.09051895 12.89355755]
[55.07862473 26.09180260]
[54.64029312 41.51293945]
[67.07973480 49.89508057]
[79.51917267 58.27722549]
[91.95861816 66.65937042]
[106.87752533 65.10178375]
[117.31733704 54.33097839]
[121.36628723 39.03664780]
[135.78010559 35.28284454]
[143.23501587 22.26653481]
[147.24276733 7.81184578]
[151.25050354 -6.64284229]
[155.25823975 -21.09753036]
[159.26597595 -35.55221939]
[146.06044006 -42.81242371]
[134.88558960 -52.92277908]
[126.34406281 -65.33805084]
[120.89649200 -79.38870239]
[118.83666229 -94.31698608]
[120.27565765 -109.31785583]
[125.13587189 -123.58232117]
[133.15519714 -136.34112549]
[143.90118408 -146.90618896]
[156.79428101 -154.70777893]
[171.13920593 -159.32513428]
[186.16233826 -160.50926208]
[201.05349731 -158.19630432]
[215.00964355 -152.51098633]
[227.27812195 -143.75991821]
[237.19732666 -132.41503906]
[244.23229980 -119.08815765]
[248.00366211 -104.49797821]
[248.30804443 -89.43132019]
[245.12902832 -74.70072174]
[238.63804626 -61.10058212]
[229.18513489 -49.36433792]
[217.28010559 -40.12491226]
[203.56497192 -33.88057327]
[188.77937317 -30.96807480]
[173.72067261 -31.54447937]
[169.71293640 -17.08979034]
[165.70518494 -2.63510227]
[161.69744873 11.81958580]
[157.68971252 26.27427483]
[162.44389343 32.07494354]
[171.95223999 43.67628479]
[176.70642090 49.47695541]
[191.66667175 48.38564682]
[206.62692261 47.29433441]
[211.37367249 32.85353470]
[221.28915405 21.33173561]
[234.86131287 14.48593426]
[250.02049255 13.36006260]
[264.45504761 18.12580872]
[275.96377563 28.05643082]
[282.79171753 41.63758087]
[283.89764404 56.79823303]
[279.11291504 71.22649384]
[269.16717529 82.72216797]
[255.57705688 89.53224182]
[240.41496277 90.61822510]
[225.99299622 85.81451416]
[214.51042175 75.85365295]
[207.71823120 62.25458527]
[192.75798035 63.34589386]
[177.79772949 64.43720245]
[162.82365417 62.37887955]
[151.96096802 55.33817673]
[146.55091858 45.72265625]
[143.24868774 60.24658966]
[128.08815002 64.77079010]
[117.64833832 75.54160309]
[131.95991516 101.51817322]
[117.10622406 129.18762207]
[117.10622406 144.18762207]
[117.10622406 159.18762207]
[117.10622406 174.18762207]
[117.10622406 189.18762207]
[117.10622406 204.18762207]
[117.10622406 219.18762207]
[117.10622406 234.18762207]
[117.10622406 249.18762207]
[117.10622406 264.18762207]
[117.10622406 279.18762207]
[117.10622406 294.18762207]
[131.64611816 298.24893188]
[144.55049133 306.08343506]
[154.86178589 317.10977173]
[161.81480408 330.50970459]
[164.89360046 345.28884888]
[163.86970520 360.35055542]
[158.81910706 374.57705688]
[150.11657715 386.91271973]
[138.40792847 396.44213867]
[124.56198120 402.45819092]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[30 43]
[31 42]
[32 41]
[33 40]
[44 60]
[45 59]
[46 58]
[47 57]
[61 127]
[62 126]
[64 124]
[65 99]
[66 98]
[67 97]
[68 96]
[69 95]
[102 121]
[103 120]
[104 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
