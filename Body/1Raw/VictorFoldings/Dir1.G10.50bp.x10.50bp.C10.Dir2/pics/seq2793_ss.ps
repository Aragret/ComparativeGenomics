%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUUUAACCGGGGGGGGGGAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGACGAGxxxxxxxxxxUGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCCCCCCCCCCCUACUUCUAACC\
) } def
/len { sequence length } bind def

/coor [
[106.40040588 449.06152344]
[93.48124695 441.30316162]
[82.69995117 430.77413940]
[74.63793945 418.04226685]
[69.72998047 403.79415894]
[68.24075317 388.79818726]
[70.25057983 373.86309814]
[75.65106201 359.79428101]
[84.15096283 347.35046387]
[95.29190063 337.20275879]
[108.47304535 329.89834595]
[122.98356628 325.83123779]
[122.36773682 310.84387207]
[121.75191498 295.85650635]
[121.13608551 280.86917114]
[120.52026367 265.88180542]
[119.90443420 250.89445496]
[119.28861237 235.90710449]
[118.67279053 220.91975403]
[118.05696106 205.93240356]
[117.44113922 190.94505310]
[112.17494202 172.94006348]
[120.26679230 158.95170593]
[113.71892548 145.45632935]
[107.17105103 131.96093750]
[92.43430328 132.90849304]
[78.33058929 127.20245361]
[67.79569244 115.61389160]
[63.19916916 100.17505646]
[65.82009888 83.82803345]
[51.31147003 80.02017975]
[39.30683899 89.67393494]
[24.09739876 90.39942169]
[11.52585316 82.12776947]
[6.29818153 68.20622253]
[-8.21044350 64.39836121]
[-22.71906853 60.59050369]
[-37.22769547 56.78264618]
[-51.73632050 52.97478867]
[-66.24494171 49.16692734]
[-80.75357056 45.35906982]
[-94.27159882 53.54677582]
[-109.59972382 49.69658661]
[-117.64405060 36.09275055]
[-113.63201904 20.80618095]
[-99.94389343 12.90613270]
[-84.70059967 17.07956123]
[-76.94570923 30.85044479]
[-62.43708801 34.65830231]
[-47.92846298 38.46616364]
[-33.41983414 42.27402115]
[-18.91121101 46.08187866]
[-4.40258503 49.88973999]
[10.10604000 53.69759750]
[21.49656296 44.13757706]
[36.50986481 43.10569763]
[49.40272903 51.20677567]
[55.11932755 65.51155090]
[69.62795258 69.31941223]
[81.95923615 60.77894974]
[83.49652863 45.85793686]
[85.03382111 30.93691826]
[73.75612640 17.60272217]
[75.54531097 0.56950861]
[88.81512451 -9.71713829]
[90.04573822 -24.66657257]
[91.27635193 -39.61600876]
[92.04601288 -54.59624863]
[92.35398865 -69.59308624]
[78.30557251 -75.33821106]
[67.28388214 -85.77309418]
[60.77951431 -99.48650360]
[59.67212677 -114.62381744]
[64.11148834 -129.13783264]
[73.49720001 -141.06564331]
[86.55993652 -148.79411316]
[101.53306580 -151.27804565]
[116.39159393 -148.18148804]
[129.12602234 -139.92323303]
[138.01412964 -127.62014771]
[141.85386658 -112.93611908]
[140.12596130 -97.85703278]
[133.06407166 -84.42222595]
[121.62326050 -74.44863129]
[107.35083008 -69.28511047]
[107.04284668 -54.28827286]
[109.26444244 -51.47549057]
[110.20024109 -47.42655563]
[109.27517700 -42.77361298]
[106.22578430 -38.38539505]
[104.99517059 -23.43596077]
[103.76456451 -8.48652649]
[113.41174316 0.10906279]
[116.37217712 12.88656330]
[111.34082794 25.20998192]
[99.95484161 32.47421265]
[98.41754913 47.39522934]
[96.88025665 62.31624222]
[108.66015625 63.84210205]
[119.18933868 68.89447021]
[127.46204376 76.85236359]
[132.73197937 86.82479858]
[134.57879639 97.74938965]
[132.93951416 108.50512695]
[128.10253906 118.02734375]
[120.66643524 125.41307068]
[127.21430969 138.90844727]
[133.76217651 152.40383911]
[130.94694519 137.67039490]
[135.56587219 123.39924622]
[146.48002625 113.10938263]
[160.99819946 109.33806610]
[175.54049683 113.01523590]
[186.52108765 123.23416138]
[191.23239136 137.47508240]
[188.51269531 152.22645569]
[179.03260803 163.85090637]
[165.12973022 169.48208618]
[150.23338318 167.73190308]
[164.16409302 173.29383850]
[178.09481812 178.85577393]
[193.34457397 173.87338257]
[206.66831970 182.80967712]
[207.84519958 198.80950928]
[195.97242737 209.59916687]
[180.15776062 206.90174866]
[172.53288269 192.78648376]
[158.60215759 187.22454834]
[144.67144775 181.66261292]
[132.42848206 190.32922363]
[133.04431152 205.31657410]
[133.66014099 220.30392456]
[134.27597046 235.29127502]
[134.89178467 250.27864075]
[135.50761414 265.26599121]
[136.12344360 280.25332642]
[136.73927307 295.24069214]
[137.35508728 310.22805786]
[137.97091675 325.21539307]
[152.76618958 328.07836914]
[166.50216675 334.27673340]
[178.43806458 343.47625732]
[187.93022156 355.18075562]
[194.46672058 368.75909424]
[197.69505310 383.47897339]
[197.44113159 398.54653931]
[193.71864319 413.14929199]
[186.72833252 426.49966431]
[176.84719849 437.87768555]
[164.60809326 446.66979980]
[150.67106628 452.40179443]
[135.78771973 454.76461792]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 108]
[24 107]
[25 106]
[30 59]
[31 58]
[35 54]
[36 53]
[37 52]
[38 51]
[39 50]
[40 49]
[41 48]
[60 98]
[61 97]
[62 96]
[65 92]
[66 91]
[67 90]
[68 86]
[69 85]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
