%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCACACCCCGGGGGGGGGGCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUUUAACUAxxxxxxxxxxACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGCCCCCCCCCCAGCCACAACCC\
) } def
/len { sequence length } bind def

/coor [
[113.65966034 519.49029541]
[99.63771820 513.93725586]
[87.43775940 505.07095337]
[77.82669067 493.44863892]
[71.40866089 479.80093384]
[68.58712769 464.98574829]
[69.53944397 449.93438721]
[74.20574951 435.59295654]
[82.29270935 422.86300659]
[93.29198456 412.54470825]
[106.51214600 405.28674316]
[121.12216187 401.54531860]
[121.12216187 386.54531860]
[121.12216187 371.54531860]
[121.12216187 356.54531860]
[121.12216187 341.54531860]
[121.12216187 326.54531860]
[121.12216187 311.54531860]
[121.12216187 296.54531860]
[121.12216187 281.54531860]
[121.12216187 266.54531860]
[121.12216187 251.54530334]
[121.12216187 236.54530334]
[119.73813629 221.60929871]
[116.98188782 206.86470032]
[114.22564697 192.12010193]
[111.46940613 177.37550354]
[108.71316528 162.63090515]
[105.35390472 148.01190186]
[101.39729309 133.54313660]
[97.44068146 119.07436371]
[77.44735718 104.12679291]
[87.35186768 76.58934784]
[80.25546265 63.37416840]
[73.15905762 50.15898514]
[57.29354858 40.86833191]
[58.44631577 23.38360596]
[51.08007431 10.31691170]
[43.71383667 -2.74978352]
[33.83813095 -14.04006386]
[21.86787224 -23.07958412]
[9.89761257 -32.11910248]
[-2.07264543 -41.15862274]
[-17.74818611 -43.30058670]
[-23.24200249 -57.14497757]
[-35.21226120 -66.18450165]
[-47.18251801 -75.22402191]
[-59.15277863 -84.26353455]
[-74.82831573 -86.40550232]
[-80.32213593 -100.24989319]
[-95.52099609 -96.57174683]
[-109.50520325 -103.57003021]
[-115.67184448 -117.94036102]
[-111.10922241 -132.89752197]
[-97.97167206 -141.37918091]
[-82.46233368 -139.38056946]
[-71.90424347 -127.84537506]
[-71.28261566 -112.22015381]
[-56.46326828 -110.72475433]
[-50.11325836 -96.23379517]
[-38.14300156 -87.19427490]
[-26.17274094 -78.15475464]
[-14.20248318 -69.11523438]
[0.61686403 -67.61984253]
[6.96687412 -53.12887955]
[18.93713188 -44.08936310]
[30.90739059 -35.04984283]
[42.87765121 -26.01032257]
[37.30662918 -39.93740845]
[35.80650330 -54.86220932]
[38.49440384 -69.61941528]
[45.16045761 -83.05681610]
[55.28419495 -94.12523651]
[68.07517242 -101.96047974]
[82.53468323 -105.95076752]
[97.53376007 -105.78456879]
[111.90130615 -101.47483826]
[124.51551056 -93.35807800]
[134.39149475 -82.06803894]
[140.75814819 -68.48622894]
[143.11837769 -53.67308044]
[141.28788757 -38.78518677]
[135.40962219 -24.98497009]
[125.94253540 -13.34992886]
[113.62580109 -4.78850555]
[99.42108154 0.03083728]
[84.43746948 0.73181355]
[69.84485626 -2.74030781]
[56.78052902 -10.11602306]
[64.14676666 2.95067191]
[71.51300812 16.01736641]
[83.11016083 19.59063530]
[89.34170532 30.46901894]
[86.37424469 43.06258011]
[93.47064972 56.27776337]
[100.56704712 69.49295044]
[115.03582001 73.44955444]
[127.86946869 65.68442535]
[131.40177917 50.27993011]
[144.83630371 41.95593262]
[160.20259094 45.65090561]
[168.38409424 59.17269135]
[164.52685547 74.49905396]
[150.91932678 82.53713226]
[135.63461304 78.51807404]
[122.80095673 86.28321075]
[124.11108398 98.55464935]
[119.79757690 108.88475800]
[111.90945435 115.11775970]
[115.86605835 129.58651733]
[119.82266998 144.05529785]
[123.12717438 147.08512878]
[125.06217957 150.65994263]
[125.62677765 154.26937866]
[124.99012756 157.45745850]
[123.45775604 159.87466431]
[126.21400452 174.61926270]
[128.97024536 189.36386108]
[131.72648621 204.10845947]
[134.48272705 218.85305786]
[141.97105408 205.85594177]
[155.22966003 198.84098816]
[170.18771362 199.96200562]
[182.25260925 208.87481689]
[187.72003174 222.84289551]
[184.91133118 237.57759094]
[174.68882751 248.55487061]
[160.19119263 252.40435791]
[145.86965942 247.94413757]
[136.12216187 236.54530334]
[136.12216187 251.54530334]
[136.12216187 266.54531860]
[136.12216187 281.54531860]
[136.12216187 296.54531860]
[136.12216187 311.54531860]
[136.12216187 326.54531860]
[136.12216187 341.54531860]
[136.12216187 356.54531860]
[136.12216187 371.54531860]
[136.12216187 386.54531860]
[136.12216187 401.54531860]
[150.73217773 405.28674316]
[163.95233154 412.54470825]
[174.95159912 422.86300659]
[183.03857422 435.59295654]
[187.70487976 449.93438721]
[188.65719604 464.98574829]
[185.83566284 479.80093384]
[179.41763306 493.44863892]
[169.80656433 505.07095337]
[157.60659790 513.93725586]
[143.58465576 519.49029541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 111]
[30 110]
[31 109]
[33 96]
[34 95]
[35 94]
[37 91]
[38 90]
[39 89]
[40 68]
[41 67]
[42 66]
[43 65]
[45 63]
[46 62]
[47 61]
[48 60]
[50 58]
[97 106]
[98 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
