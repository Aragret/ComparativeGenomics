%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUUCAACUUUGGGGGGGGGGAAAUUUGCCCACAGAACCCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUxxxxxxxxxxCUCAACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGCCCCCCCCCCGCUCAACUUU\
) } def
/len { sequence length } bind def

/coor [
[77.79247284 388.42938232]
[63.94653702 382.41336060]
[52.23787689 372.88394165]
[43.53535080 360.54827881]
[38.48474884 346.32174683]
[37.46085739 331.26007080]
[40.53965759 316.48089600]
[47.49267960 303.08096313]
[57.80396271 292.05465698]
[70.70834351 284.22012329]
[85.24822998 280.15881348]
[85.24822998 265.15881348]
[85.24822998 250.15881348]
[85.24822998 235.15881348]
[85.24822998 220.15881348]
[85.24822998 205.15881348]
[85.24822998 190.15881348]
[85.24822998 175.15881348]
[85.24822998 160.15881348]
[85.24822998 145.15881348]
[64.74230194 91.93146515]
[49.84040070 90.21878052]
[34.93849945 88.50608826]
[20.03659630 86.79339600]
[5.13469362 85.08071136]
[-9.76720905 83.36801910]
[-13.81522942 85.31095886]
[-17.85934448 85.77591705]
[-21.42367935 84.95288086]
[-24.14682770 83.17005920]
[-25.81776047 80.84297180]
[-40.52572250 77.89749146]
[-55.23368454 74.95201111]
[-62.62677002 88.15039825]
[-73.73791504 98.41673279]
[-87.47856140 104.74522400]
[-102.50254059 106.51586914]
[-117.33795929 103.55519867]
[-130.53138733 96.15327454]
[-140.79028320 85.03525543]
[-147.10955811 71.29036713]
[-148.87014771 56.26520157]
[-145.89953613 41.43177414]
[-138.48876953 28.24330330]
[-127.36386871 17.99186707]
[-113.61475372 11.68179703]
[-98.58841705 9.93128681]
[-83.75697327 12.91183472]
[-70.57347870 20.33143806]
[-60.32949829 31.46319771]
[-54.02864075 45.21653748]
[-52.28820038 60.24404907]
[-37.58023834 63.18953323]
[-22.87227631 66.13501740]
[-8.05451870 68.46611786]
[6.84738350 70.17881012]
[21.74928474 71.89149475]
[36.65118790 73.60418701]
[51.55308914 75.31687927]
[66.45499420 77.02956390]
[77.65075684 67.04683685]
[77.65075684 52.04684067]
[69.91345978 38.24666595]
[77.65075684 25.51939583]
[77.65075684 10.51939583]
[77.65075684 -4.48060417]
[77.65075684 -19.48060417]
[63.39808655 -24.64172745]
[51.77215958 -34.36867905]
[44.17685699 -47.48687744]
[41.52935410 -62.41224289]
[44.14934540 -77.34246063]
[51.72045898 -90.47463989]
[63.32844543 -100.22299957]
[77.57157898 -105.41037750]
[92.72993469 -105.41037750]
[106.97307587 -100.22299957]
[118.58105469 -90.47463989]
[126.15216827 -77.34246063]
[128.77215576 -62.41224289]
[126.12465668 -47.48687744]
[118.52935791 -34.36867905]
[106.90342712 -24.64172745]
[92.65075684 -19.48060417]
[92.65075684 -4.48060417]
[92.65075684 10.51939583]
[92.65075684 25.51939583]
[100.38806152 38.24666595]
[92.65075684 52.04684067]
[92.65075684 67.04683685]
[98.99822235 71.04180145]
[111.69315338 79.03171539]
[118.04061890 83.02667236]
[131.56480408 76.53850555]
[145.08900452 70.05033875]
[158.40415955 63.14334488]
[171.49731445 55.82423782]
[184.59046936 48.50513077]
[197.68362427 41.18602753]
[208.55897522 28.17976379]
[224.06755066 35.02962112]
[221.77859497 51.82833862]
[205.00271606 54.27918243]
[191.90956116 61.59828568]
[178.81640625 68.91738892]
[165.72326660 76.23649597]
[164.42053223 79.57871246]
[161.39790344 82.43622589]
[156.91065979 83.99092102]
[151.57716370 83.57453156]
[138.05297852 90.06269836]
[124.52878571 96.55086517]
[126.39639282 111.43414307]
[141.10435486 114.37962341]
[155.81231689 117.32510376]
[169.90676880 109.66180420]
[184.62925720 116.03577423]
[188.68597412 131.55744934]
[178.96495056 144.31994629]
[162.92330933 144.53294373]
[152.86683655 132.03306580]
[138.15887451 129.08758545]
[123.45091248 126.14210510]
[117.65024567 130.89628601]
[132.31753540 134.03804016]
[139.00627136 147.46417236]
[132.67982483 161.06475830]
[118.10201263 164.59854126]
[106.24996948 155.40457153]
[106.04890442 140.40464783]
[100.24822998 145.15881348]
[100.24822998 160.15881348]
[100.24822998 175.15881348]
[100.24822998 190.15881348]
[100.24822998 205.15881348]
[100.24822998 220.15881348]
[100.24822998 235.15881348]
[100.24822998 250.15881348]
[100.24822998 265.15881348]
[100.24822998 280.15881348]
[114.78811646 284.22012329]
[127.69249725 292.05465698]
[138.00378418 303.08096313]
[144.95680237 316.48089600]
[148.03559875 331.26007080]
[147.01171875 346.32174683]
[141.96110535 360.54827881]
[133.25859070 372.88394165]
[121.54992676 382.41336060]
[107.70398712 388.42938232]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 60]
[22 59]
[23 58]
[24 57]
[25 56]
[26 55]
[31 54]
[32 53]
[33 52]
[61 90]
[62 89]
[64 87]
[65 86]
[66 85]
[67 84]
[93 112]
[94 111]
[95 110]
[96 106]
[97 105]
[98 104]
[99 103]
[113 123]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
