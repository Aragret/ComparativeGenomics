%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCCACAGGGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGxxxxxxxxxxUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGCCCCCCCCCCACCCCCCUCAG\
) } def
/len { sequence length } bind def

/coor [
[108.42640686 438.80383301]
[95.20819092 431.52777100]
[84.32422638 421.07781982]
[76.51660919 408.16644287]
[72.31766510 393.67398071]
[72.01369476 378.58856201]
[75.62541962 363.93872070]
[82.90659332 350.72329712]
[93.36075592 339.84338379]
[106.27513885 332.04074097]
[120.76921844 327.84741211]
[120.46124268 312.85055542]
[120.15326691 297.85372925]
[119.84528351 282.85690308]
[119.53730774 267.86004639]
[119.22933197 252.86322021]
[118.92135620 237.86637878]
[118.61337280 222.86953735]
[118.30539703 207.87269592]
[117.99742126 192.87586975]
[121.45100403 161.39241028]
[114.90313721 147.89703369]
[108.35526276 134.40164185]
[101.80739594 120.90625763]
[82.41094208 116.70927429]
[72.72312927 96.22482300]
[57.73024750 95.76290131]
[42.73736191 95.30097198]
[27.74447632 94.83905029]
[12.74526596 94.68505096]
[-2.25394344 94.83905029]
[-17.25315285 94.99304199]
[-32.25236130 95.14704132]
[-40.37208939 108.26472473]
[-54.30462265 114.88953400]
[-69.60414124 112.90751648]
[-81.38861847 102.95113373]
[-85.89767456 88.19742584]
[-81.69248962 73.35424042]
[-70.11491394 63.15800095]
[-54.85932159 60.86227798]
[-40.79370499 67.19963074]
[-32.40636063 80.14783478]
[-17.40715027 79.99383545]
[-2.40794039 79.83983612]
[12.59126949 79.68584442]
[16.55129242 76.91682434]
[22.30591774 76.64820862]
[28.20640182 79.84616089]
[43.19928741 80.30809021]
[58.19217300 80.77001190]
[73.18505859 81.23194122]
[84.37335205 71.24084473]
[85.60396576 56.29140854]
[86.83457947 41.34197235]
[79.08625031 30.98016739]
[80.45680237 18.51850891]
[89.66319275 10.61252689]
[91.20048523 -4.30848980]
[92.73777771 -19.22950554]
[94.27507019 -34.15052414]
[95.81236267 -49.07154083]
[80.53256226 -59.30656052]
[72.54731750 -75.77970886]
[73.96472931 -93.94657135]
[84.31198883 -108.84314728]
[100.68793488 -116.44219971]
[101.30376434 -131.42955017]
[101.91958618 -146.41690063]
[102.53541565 -161.40426636]
[88.72756958 -167.76130676]
[78.40719604 -178.92187500]
[73.14806366 -193.18405151]
[73.75215912 -208.37298584]
[80.12735748 -222.17245483]
[91.30149078 -232.47813416]
[105.57058716 -237.71850586]
[120.75870514 -237.09442139]
[134.54977417 -230.70108032]
[144.84075928 -219.51339722]
[150.06234741 -205.23742676]
[149.41828918 -190.05014038]
[143.00680542 -176.26748657]
[131.80560303 -165.99124146]
[117.52276611 -160.78843689]
[116.90693665 -145.80108643]
[116.29111481 -130.81372070]
[115.67529297 -115.82637024]
[126.49450684 -110.92536163]
[135.03392029 -102.61992645]
[140.26399231 -91.87851715]
[141.54296875 -79.96519470]
[138.69569397 -68.29085541]
[132.03706360 -58.24615097]
[122.33737946 -51.03582382]
[110.73338318 -47.53424835]
[109.19609070 -32.61323166]
[107.65879822 -17.69221306]
[106.12150574 -2.77119708]
[104.58421326 12.14981937]
[112.62137604 27.72057724]
[101.78401184 42.57258606]
[100.55340576 57.52201843]
[99.32279205 72.47145081]
[117.43641663 81.59541321]
[123.15842438 99.31854248]
[115.30278015 114.35839081]
[121.85064697 127.85377502]
[128.39851379 141.34915161]
[134.94639587 154.84454346]
[135.31948853 139.84918213]
[144.79362488 128.21986389]
[159.40400696 124.82328033]
[173.03642273 131.08082581]
[179.98594666 144.37384033]
[177.34429932 159.13940430]
[166.21697998 169.19836426]
[151.25935364 170.34089661]
[165.07293701 176.18768311]
[178.88652039 182.03446960]
[192.70010376 187.88125610]
[206.51368713 193.72804260]
[222.71318054 191.17689514]
[232.81047058 204.09886169]
[226.41830444 219.20092773]
[210.11242676 220.94738770]
[200.66690063 207.54162598]
[186.85331726 201.69483948]
[173.03973389 195.84805298]
[159.22615051 190.00126648]
[145.41256714 184.15447998]
[132.99426270 192.56788635]
[133.30223083 207.56472778]
[133.61021423 222.56156921]
[133.91819763 237.55839539]
[134.22616577 252.55523682]
[134.53414917 267.55206299]
[134.84211731 282.54891968]
[135.15010071 297.54574585]
[135.45808411 312.54260254]
[135.76605225 327.53942871]
[150.42007446 331.13418579]
[163.64390564 338.40002441]
[174.53593445 348.84158325]
[182.35351562 361.74691772]
[186.56364441 376.23614502]
[186.87927246 391.32131958]
[183.27885437 405.97396851]
[176.00790405 419.19497681]
[165.56213379 430.08297729]
[152.65377808 437.89556885]
[138.16294861 442.10012817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 110]
[22 109]
[23 108]
[24 107]
[26 52]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[53 104]
[54 103]
[55 102]
[58 100]
[59 99]
[60 98]
[61 97]
[62 96]
[67 88]
[68 87]
[69 86]
[70 85]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
