%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUCUUCGAGGGGGGGGGGCCCCGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUxxxxxxxxxxAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUAUCCCCCCCCCCAUCUUCUUCGA\
) } def
/len { sequence length } bind def

/coor [
[91.65608978 375.67202759]
[77.63414764 370.11901855]
[65.43418884 361.25268555]
[55.82312012 349.63037109]
[49.40509415 335.98266602]
[46.58355713 321.16748047]
[47.53587341 306.11608887]
[52.20217896 291.77468872]
[60.28914642 279.04470825]
[71.28842163 268.72644043]
[84.50857544 261.46847534]
[99.11859131 257.72702026]
[99.11859131 242.72703552]
[99.11859131 227.72703552]
[99.11859131 212.72703552]
[99.11859131 197.72703552]
[99.11859131 182.72703552]
[99.11859131 167.72703552]
[99.11859131 152.72703552]
[99.11859131 137.72703552]
[99.11859131 122.72703552]
[86.44707489 114.70003510]
[72.88517761 121.10900879]
[59.38979340 127.65688324]
[45.96234512 134.34295654]
[34.47882080 146.81552124]
[19.31472778 139.23353577]
[22.40257454 122.56315613]
[39.27627182 120.91551208]
[52.70372009 114.22943115]
[57.31792450 108.39665222]
[66.47620392 107.54711914]
[80.03810120 101.13813782]
[83.99471283 86.66937256]
[75.58129883 74.25106049]
[67.16789246 61.83274460]
[58.75447845 49.41442871]
[50.34106827 36.99611664]
[41.92765808 24.57780075]
[28.47901917 31.27239227]
[14.25805378 36.11465836]
[-0.48144948 39.01819229]
[-15.47644615 39.93116760]
[-30.45933151 38.83729172]
[-45.16271973 35.75609589]
[-59.32421494 30.74255562]
[-72.69107819 23.88615036]
[-85.02478027 15.30923939]
[-96.10519409 5.16488791]
[-105.73458099 -6.36586714]
[-113.74109650 -19.07724571]
[-119.98185730 -32.74239731]
[-124.34548187 -47.11745071]
[-126.75410461 -61.94586945]
[-127.16473389 -76.96302032]
[-125.57004547 -91.90090942]
[-121.99849701 -106.49294281]
[-116.51382446 -120.47871399]
[-109.21392059 -133.60862732]
[-100.22904205 -145.64837646]
[-89.71954346 -156.38308716]
[-77.87298584 -165.62118530]
[-64.90077972 -173.19779968]
[-51.03442383 -178.97773743]
[-36.52138138 -182.85783386]
[-21.62066269 -184.76884460]
[-6.59818125 -184.67668152]
[8.27796650 -182.58296204]
[22.74230003 -178.52505493]
[36.53668594 -172.57540894]
[49.41494370 -164.84016418]
[61.14725113 -155.45739746]
[71.52422333 -144.59452820]
[80.36067963 -132.44543457]
[87.49892426 -119.22693634]
[92.81156158 -105.17491150]
[96.20378113 -90.54014587]
[97.61504364 -75.58381653]
[97.02016449 -60.57283783]
[94.42976379 -45.77508926]
[89.89006805 -31.45466423]
[83.48209381 -17.86712265]
[75.32019806 -5.25495148]
[65.55003357 6.15677214]
[54.34597397 16.16439056]
[62.75938416 28.58270454]
[71.17279053 41.00101852]
[79.58620453 53.41933441]
[87.99961090 65.83764648]
[96.41302490 78.25595856]
[110.22660828 84.10275269]
[124.99872589 81.49802399]
[139.77084351 78.89330292]
[147.82623291 68.76837158]
[160.22760010 66.93054962]
[170.21170044 73.82836914]
[185.03419495 71.52748871]
[199.85667419 69.22661591]
[209.18690491 56.75326920]
[224.25178528 54.63100433]
[236.08572388 63.60282898]
[250.90820312 61.30195236]
[265.73068237 59.00107956]
[269.88861084 55.64446259]
[274.46313477 54.38768387]
[278.56878662 55.03033829]
[281.53384399 57.04422379]
[296.46984863 55.66019821]
[304.27728271 42.25035858]
[318.48925781 36.02147293]
[333.64102173 39.36868286]
[343.90640259 51.00490952]
[345.33813477 66.45579529]
[337.38571167 79.78015137]
[323.10696411 85.85449219]
[307.99240112 82.34311676]
[297.85388184 70.59621429]
[282.91787720 71.98023987]
[268.03155518 73.82356262]
[253.20907593 76.12443542]
[238.38659668 78.42530823]
[229.82937622 90.56242371]
[214.83004761 93.10699463]
[202.15754700 84.04910278]
[187.33506775 86.34997559]
[172.51257324 88.65084839]
[159.49218750 100.37747955]
[142.37556458 93.66542053]
[127.60344696 96.27014160]
[112.83132935 98.87487030]
[117.72505188 108.86428070]
[114.11859131 122.72703552]
[114.11859131 137.72703552]
[114.11859131 152.72703552]
[114.11859131 167.72703552]
[114.11859131 182.72703552]
[114.11859131 197.72703552]
[114.11859131 212.72703552]
[114.11859131 227.72703552]
[114.11859131 242.72703552]
[114.11859131 257.72702026]
[128.72860718 261.46847534]
[141.94876099 268.72644043]
[152.94804382 279.04470825]
[161.03500366 291.77468872]
[165.70130920 306.11608887]
[166.65362549 321.16748047]
[163.83209229 335.98266602]
[157.41406250 349.63037109]
[147.80299377 361.25268555]
[135.60302734 370.11901855]
[121.58109283 375.67202759]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 33]
[23 32]
[24 30]
[25 29]
[34 90]
[35 89]
[36 88]
[37 87]
[38 86]
[39 85]
[91 130]
[92 129]
[93 128]
[96 126]
[97 125]
[98 124]
[101 121]
[102 120]
[103 119]
[107 118]
[108 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
