%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUUCUCCUGGGGGGGGGGCCGCAUAAGCCUGCGUCAGAUUAAAACACUGAACUGACAAUUAACAGCCCxxxxxxxxxxCCUUACCCCCCACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCCCCCCCCCCCACGUUCUCCU\
) } def
/len { sequence length } bind def

/coor [
[116.07413483 349.13299561]
[103.51591492 340.78182983]
[93.42969513 329.56939697]
[86.44950104 316.20050049]
[83.01411438 301.51550293]
[83.33949280 286.43753052]
[87.40517426 271.91439819]
[94.95559692 258.85906982]
[105.51612091 248.09217834]
[118.42292023 240.29054260]
[132.86465454 235.94459534]
[132.24067688 220.95758057]
[131.61669922 205.97055054]
[130.99272156 190.98353577]
[130.36874390 175.99652100]
[129.74476624 161.00950623]
[129.12078857 146.02249146]
[128.49681091 131.03547668]
[127.87282562 116.04846191]
[127.24884796 101.06144714]
[111.20747375 127.23018646]
[78.42215729 123.11771393]
[64.51959991 128.74967957]
[50.61704636 134.38163757]
[36.71449280 140.01358032]
[30.78429222 154.66310120]
[16.19984818 160.75157166]
[1.61384892 154.66682434]
[-4.32008934 140.01882935]
[1.91853356 125.49797058]
[16.62845230 119.71923065]
[31.08253479 126.11103058]
[44.98509216 120.47907257]
[58.88764572 114.84711456]
[72.79019928 109.21516418]
[71.85457611 94.24436951]
[57.35897827 90.38720703]
[42.86338043 86.53005219]
[28.36778450 82.67288971]
[17.03984833 93.14578247]
[1.84414852 95.80928802]
[-12.37042141 89.81349182]
[-21.06804466 77.07164001]
[-21.47334290 61.64959717]
[-13.45698357 48.46849442]
[0.42304024 41.73436356]
[15.73766327 43.59604645]
[27.60004616 53.45948792]
[32.22494507 68.17729187]
[46.72053909 72.03445435]
[61.21613693 75.89161682]
[75.71173096 79.74877167]
[94.10086823 71.15055084]
[112.40811157 75.71697998]
[103.64190674 63.54513931]
[94.87570190 51.37330246]
[79.35877991 51.44340134]
[66.78382874 42.35219574]
[61.98615646 27.59543419]
[66.81056976 12.84739685]
[79.40199280 3.77900338]
[94.91875458 3.87723684]
[107.39435577 13.10432434]
[112.03166199 27.91226196]
[107.04753876 42.60709763]
[115.81374359 54.77893066]
[124.57994843 66.95076752]
[122.72236633 52.06623459]
[114.19107819 39.72860718]
[110.88491058 25.09749985]
[113.28233337 10.29032803]
[121.03639221 -2.55002165]
[133.02491760 -11.56529522]
[147.51293945 -15.45080471]
[162.40376282 -13.64423943]
[175.54235840 -6.40704584]
[185.02735901 5.21341133]
[189.48605347 19.53542137]
[188.27320862 34.48630905]
[181.56433105 47.90238190]
[170.33033752 57.84206772]
[156.19921875 62.86656952]
[145.99314880 73.85911560]
[160.21992493 69.10530090]
[174.44670105 64.35148621]
[188.67347717 59.59767151]
[191.92857361 44.41673660]
[205.55963135 33.80204010]
[224.57992554 34.43533707]
[236.84230042 25.79622078]
[249.10466003 17.15710449]
[261.36703491 8.51798820]
[258.80990601 -6.52939653]
[263.04306030 -21.19374466]
[273.22601318 -32.56344223]
[287.33694458 -38.38102341]
[302.57412720 -37.49140930]
[315.91217041 -30.07122612]
[324.70281982 -17.59376144]
[327.20068359 -2.53642392]
[322.90982056 12.11114120]
[312.68215942 23.44064903]
[298.54843140 29.20261765]
[283.31488037 28.25300407]
[270.00616455 20.78035545]
[257.74377441 29.41947174]
[245.48141479 38.05858994]
[233.21903992 46.69770432]
[236.92520142 61.23263931]
[251.82711792 62.94533157]
[266.42047119 56.83432388]
[278.18106079 65.97421265]
[293.08297729 67.68690491]
[306.49163818 58.87852097]
[321.69299316 64.00662231]
[327.02593994 79.13737488]
[318.39941406 92.66374969]
[302.43099976 94.20948029]
[291.37026978 82.58880615]
[276.46838379 80.87612152]
[262.94088745 87.10962677]
[250.11442566 77.84722900]
[235.21252441 76.13454437]
[211.68675232 85.82908630]
[193.42729187 73.82444763]
[179.20051575 78.57826233]
[164.97373962 83.33207703]
[150.74696350 88.08589172]
[142.23587036 100.43746948]
[142.85984802 115.42448425]
[143.48382568 130.41149902]
[144.10780334 145.39851379]
[144.73178101 160.38552856]
[145.35575867 175.37254333]
[145.97973633 190.35955811]
[146.60371399 205.34658813]
[147.22769165 220.33360291]
[147.85166931 235.32061768]
[162.60467529 238.45104980]
[176.11531067 245.15281677]
[187.53428650 255.00459290]
[196.14379883 267.38714600]
[201.40264893 281.52203369]
[202.98025513 296.52075195]
[200.77745056 311.44049072]
[194.93269348 325.34335327]
[185.81341553 337.35540771]
[173.99284363 346.72158813]
[160.21403503 352.85308838]
[145.34313965 355.36447144]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[22 35]
[23 34]
[24 33]
[25 32]
[36 52]
[37 51]
[38 50]
[39 49]
[54 67]
[55 66]
[56 65]
[83 128]
[84 127]
[85 126]
[86 125]
[89 108]
[90 107]
[91 106]
[92 105]
[109 123]
[110 122]
[112 120]
[113 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
