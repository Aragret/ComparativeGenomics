%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCAAACCCCGGGGGGGGGGAAAAACAAAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUxxxxxxxxxxAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUACCCCCCCCCCGCCACACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 360.49761963]
[71.19830322 354.48159790]
[59.48964310 344.95217896]
[50.78712082 332.61651611]
[45.73651886 318.38998413]
[44.71262741 303.32830811]
[47.79142761 288.54916382]
[54.74444962 275.14923096]
[65.05573273 264.12289429]
[77.96011353 256.28839111]
[92.50000000 252.22706604]
[92.50000000 237.22706604]
[92.50000000 222.22706604]
[92.50000000 207.22706604]
[92.50000000 192.22706604]
[92.50000000 177.22706604]
[92.50000000 162.22706604]
[92.50000000 147.22706604]
[92.50000000 132.22706604]
[92.50000000 117.22706604]
[78.72772217 103.40940857]
[83.82386017 81.86833191]
[69.25115967 78.31356812]
[54.67845535 74.75881195]
[40.10575104 71.20404816]
[30.25379753 80.89621735]
[17.00001717 84.41053009]
[3.84985900 80.92859650]
[-5.77341127 71.46793365]
[-9.41980171 58.58772278]
[-23.91539764 54.73056412]
[-38.41099548 50.87340546]
[-51.97121429 58.53879166]
[-66.61686707 54.42058945]
[-73.84107208 41.44575119]
[-88.33666992 37.58859253]
[-97.25073242 49.87289047]
[-110.00256348 58.10424042]
[-124.86759949 61.16942215]
[-139.83544922 58.65388870]
[-152.88183594 50.89785385]
[-162.24235535 38.95025635]
[-166.65106201 24.42690468]
[-165.51171875 9.29196644]
[-158.97842407 -4.40768194]
[-147.93472290 -14.81927586]
[-133.87420654 -20.53473282]
[-118.69844818 -20.78108406]
[-104.45983887 -15.52501297]
[-93.08402252 -5.47735929]
[-86.10949707 8.00301361]
[-84.47950745 23.09299660]
[-69.98391724 26.95015526]
[-57.26666260 19.28157616]
[-42.51111984 22.98678970]
[-34.55383682 36.37780762]
[-20.05823898 40.23497009]
[-5.56264257 44.09212875]
[6.80723667 33.34543610]
[23.30863190 32.05319214]
[37.48175812 40.91908264]
[43.66051483 56.63134384]
[58.23321533 60.18610382]
[72.80592346 63.74086761]
[87.37862396 67.29563141]
[73.47261810 61.67218781]
[62.23263550 51.73927689]
[54.94149017 38.63053131]
[52.43132019 23.84205437]
[54.98860931 9.06165218]
[62.32149506 -4.02378941]
[73.59307861 -13.92083073]
[87.51692963 -19.49992371]
[102.50392914 -20.12432671]
[116.84361267 -15.72277832]
[128.89938354 -6.79762602]
[137.29531860 5.63250446]
[141.07321167 20.14896393]
[139.80186462 35.09498978]
[133.62640381 48.76479340]
[123.25160217 59.59824371]
[109.85914612 66.35966492]
[124.08592224 61.60585022]
[138.31269836 56.85203171]
[142.92036438 44.15451050]
[153.85235596 36.55717087]
[166.96965027 36.66247559]
[177.46154785 44.20679092]
[191.78414917 39.74997330]
[206.10675049 35.29315948]
[220.42933655 30.83634377]
[223.86067200 13.65723133]
[235.43161011 0.62216717]
[251.91416931 -4.76707458]
[268.77758789 -1.12314177]
[281.43374634 10.47107887]
[295.55856323 5.42232227]
[309.68334961 0.37356576]
[315.92510986 -10.96197891]
[327.84393311 -14.85559177]
[338.84524536 -9.72932911]
[353.07202148 -14.48314476]
[367.29879761 -19.23695946]
[377.75915527 -31.86680984]
[393.87960815 -28.85641670]
[399.07684326 -13.30261326]
[388.00439453 -1.20581985]
[372.05261230 -5.01018000]
[357.82583618 -0.25636518]
[343.59906006 4.49744987]
[332.73129272 18.24124336]
[314.73211670 14.49836922]
[300.60729980 19.54712486]
[286.48251343 24.59588051]
[285.55371094 37.26620102]
[279.86093140 48.67607880]
[270.22564697 57.09937286]
[258.06863403 61.24668884]
[245.20068359 60.46268082]
[233.55270386 54.82931900]
[224.88615417 45.15893936]
[210.56355286 49.61575699]
[196.24096680 54.07257080]
[181.91836548 58.52938843]
[174.76994324 73.72010803]
[158.53730774 79.17771149]
[143.06651306 71.07881165]
[128.83973694 75.83262634]
[114.61296082 80.58644104]
[121.39569092 102.52156067]
[107.50000000 117.22706604]
[107.50000000 132.22706604]
[107.50000000 147.22706604]
[107.50000000 162.22706604]
[107.50000000 177.22706604]
[107.50000000 192.22706604]
[107.50000000 207.22706604]
[107.50000000 222.22706604]
[107.50000000 237.22706604]
[107.50000000 252.22706604]
[122.03988647 256.28839111]
[134.94427490 264.12289429]
[145.25555420 275.14923096]
[152.20857239 288.54916382]
[155.28736877 303.32830811]
[154.26348877 318.38998413]
[149.21287537 332.61651611]
[140.51036072 344.95217896]
[128.80169678 354.48159790]
[114.95575714 360.49761963]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 65]
[23 64]
[24 63]
[25 62]
[30 58]
[31 57]
[32 56]
[35 53]
[36 52]
[82 129]
[83 128]
[84 127]
[88 124]
[89 123]
[90 122]
[91 121]
[96 114]
[97 113]
[98 112]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
