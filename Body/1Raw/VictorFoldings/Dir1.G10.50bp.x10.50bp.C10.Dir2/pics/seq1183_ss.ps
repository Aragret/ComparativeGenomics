%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACACGAUUGGGGGGGGGGAACCCAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCxxxxxxxxxxAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACAGUCCCACCCCCCCCCCCCCUCACACGAUU\
) } def
/len { sequence length } bind def

/coor [
[99.20663452 617.81457520]
[87.32235718 608.53948975]
[78.00365448 596.68939209]
[71.79228973 582.95318604]
[69.04938507 568.12957764]
[69.93441010 553.08032227]
[74.39591980 538.68035889]
[82.17451477 525.76690674]
[92.81797028 515.09075928]
[105.70748138 507.27258301]
[120.09366608 502.76693726]
[119.15803528 487.79614258]
[118.22241211 472.82534790]
[117.28678131 457.85455322]
[116.35115051 442.88375854]
[115.41552734 427.91296387]
[114.47989655 412.94216919]
[113.54426575 397.97137451]
[112.60863495 383.00057983]
[111.67301178 368.02978516]
[97.32154083 363.86798096]
[85.23724365 355.03063965]
[76.89000702 342.56878662]
[73.30332184 327.97570801]
[74.92882538 313.00814819]
[81.58952332 299.47467041]
[92.49881744 289.01718140]
[106.35339355 282.91177368]
[105.41776276 267.94097900]
[104.48213959 252.97016907]
[95.96603394 240.75030518]
[102.82748413 226.49438477]
[101.89185333 211.52359009]
[100.64498138 196.57550049]
[99.08739471 181.65660095]
[90.07034302 169.80155945]
[96.33282471 155.27255249]
[94.77523804 140.35363770]
[93.21765900 125.43473053]
[91.66007996 110.51581573]
[84.34097290 97.42266083]
[72.44859314 88.28092957]
[74.85425568 103.08676910]
[68.24150848 116.55047607]
[55.05362701 123.69749451]
[40.16327667 121.88713074]
[29.07213974 111.78828430]
[25.87817383 97.13227844]
[31.76148415 83.33421326]
[44.54830551 75.49219513]
[59.51334763 76.50337982]
[49.29986954 65.51771545]
[39.08638763 54.53205109]
[23.69894218 56.53357697]
[10.08990955 49.07878876]
[3.49224329 35.03420258]
[6.44287968 19.80024719]
[17.80723953 9.23469162]
[33.21549225 7.40020657]
[46.74285507 15.00218868]
[53.18777466 29.11752129]
[50.07205200 44.31856918]
[60.28553391 55.30423737]
[70.49901581 66.28990173]
[81.59032440 76.38854980]
[93.48270416 85.53028107]
[108.01764679 81.82411957]
[114.08065796 68.10407257]
[120.14366913 54.38401413]
[126.20668030 40.66396332]
[112.90999603 47.60645294]
[97.91828156 47.10801315]
[85.11209106 39.29766464]
[77.80627441 26.19709206]
[77.89192200 11.19733715]
[85.34685516 -1.81895912]
[98.24139404 -9.48256683]
[113.23782349 -9.80978584]
[126.45436096 -2.71591449]
[134.46995544 9.96281815]
[135.20980835 24.94445801]
[143.97601318 12.77262211]
[152.74221802 0.60078496]
[137.75335693 0.02298720]
[128.68888855 -11.92838955]
[132.17420959 -26.51785469]
[145.66183472 -33.08169174]
[159.29339600 -26.82226562]
[163.10545349 -12.31535816]
[173.08818054 -23.51112366]
[183.07090759 -34.70689011]
[189.09919739 -50.55290222]
[205.99473572 -49.14681244]
[209.32075500 -32.52231216]
[194.26667786 -24.72416306]
[184.28395081 -13.52839756]
[174.30122375 -2.33263159]
[164.91406250 9.36699200]
[156.14785767 21.53882980]
[147.38165283 33.71066666]
[139.92674255 46.72697449]
[133.86372375 60.44702911]
[127.80071259 74.16708374]
[121.73769379 87.88713837]
[117.58718109 103.83115387]
[106.57899475 108.95823669]
[108.13657379 123.87715149]
[109.69415283 138.79606628]
[111.25173187 153.71498108]
[120.38020325 166.63711548]
[114.00630951 180.09901428]
[115.56388855 195.01792908]
[119.18758392 200.67269897]
[119.33882141 206.43536377]
[116.86264801 210.58796692]
[117.79827118 225.55876160]
[126.38129425 238.84944153]
[119.45292664 252.03454590]
[120.38855743 267.00534058]
[121.32418823 281.97613525]
[135.83113098 286.30905151]
[147.95756531 295.32687378]
[156.25144958 307.92575073]
[159.72789001 322.57446289]
[157.98605347 337.50051880]
[151.25537109 350.90472412]
[140.36541748 361.17788696]
[126.64379883 367.09417725]
[127.57942963 382.06497192]
[128.51506042 397.03576660]
[129.45068359 412.00656128]
[130.38632202 426.97732544]
[131.32194519 441.94812012]
[132.25756836 456.91891479]
[133.19320679 471.88970947]
[134.12882996 486.86050415]
[135.06445312 501.83129883]
[149.89968872 504.51071167]
[163.66232300 510.66320801]
[175.55221558 519.93109131]
[184.87811279 531.77557373]
[191.09779358 545.50799561]
[193.84968567 560.32995605]
[192.97378540 575.37976074]
[188.52101135 589.78234863]
[180.75024414 602.70050049]
[170.11326599 613.38311768]
[157.22850037 621.20910645]
[142.84504700 625.72351074]
[127.79914093 626.66381836]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[28 120]
[29 119]
[30 118]
[32 116]
[33 115]
[34 112]
[35 111]
[37 109]
[38 108]
[39 107]
[40 106]
[41 66]
[42 65]
[51 64]
[52 63]
[53 62]
[67 104]
[68 103]
[69 102]
[70 101]
[81 100]
[82 99]
[83 98]
[89 97]
[90 96]
[91 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
