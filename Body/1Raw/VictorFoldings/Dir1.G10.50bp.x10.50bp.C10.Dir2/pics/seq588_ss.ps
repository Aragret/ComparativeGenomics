%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCCCAUACUACUGGGGGGGGGGAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCxxxxxxxxxxUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUUCCCCCCCCCCACCCCCAUACUCCU\
) } def
/len { sequence length } bind def

/coor [
[74.95097351 445.89587402]
[60.58872604 441.38912964]
[47.42783356 434.08325195]
[36.00723648 424.27740479]
[26.79459953 412.37310791]
[20.16716957 398.85784912]
[16.39634132 384.28509521]
[15.63652420 369.25152588]
[17.91883469 354.37283325]
[23.14981079 340.25823975]
[31.11524963 327.48574829]
[41.48897171 316.57836914]
[53.84617615 307.98275757]
[67.68084717 302.05093384]
[82.42646790 299.02575684]
[82.42646790 284.02575684]
[82.42646790 269.02575684]
[82.42646790 254.02574158]
[82.42646790 239.02574158]
[82.42646790 224.02574158]
[82.42646790 209.02574158]
[82.42646790 194.02574158]
[82.42646790 179.02574158]
[82.42646790 164.02574158]
[82.42646790 149.02574158]
[82.42646790 134.02574158]
[82.42646790 119.02574158]
[86.76729584 88.75904846]
[72.08094025 91.84053040]
[57.21539688 93.89002991]
[42.24310303 94.89756775]
[27.23699951 94.85823059]
[12.27019215 93.77221680]
[-2.58439779 91.64480591]
[-17.25440216 88.48636627]
[-31.66834641 84.31229401]
[-45.75601196 79.14291382]
[-59.44875717 73.00341797]
[-72.67987823 65.92372131]
[-85.38491058 57.93830109]
[-97.50196075 49.08607483]
[-108.97198486 39.41016769]
[-119.73911285 28.95771599]
[-129.75088501 17.77964783]
[-138.95851135 5.93041897]
[-147.31715393 -6.53223991]
[-154.78607178 -19.54761314]
[-161.32888794 -33.05228806]
[-166.91372681 -46.98047256]
[-171.51338196 -61.26430893]
[-175.10542297 -75.83420563]
[-177.67237854 -90.61917877]
[-179.20172119 -105.54720306]
[-179.68600464 -120.54553986]
[-179.12287903 -135.54112244]
[-177.51507568 -150.46090698]
[-174.87043762 -165.23217773]
[-171.20184326 -179.78298950]
[-166.52716064 -194.04244995]
[-160.86918640 -207.94108582]
[-154.25546265 -221.41117859]
[-146.71821594 -234.38710022]
[-138.29417419 -246.80564880]
[-129.02438354 -258.60629272]
[-118.95397949 -269.73159790]
[-108.13205719 -280.12728882]
[-96.61132050 -289.74276733]
[-84.44790649 -298.53115845]
[-71.70106506 -306.44967651]
[-58.43291092 -313.45971680]
[-44.70807648 -319.52716064]
[-30.59343147 -324.62240601]
[-16.15774155 -328.72064209]
[-1.47133625 -331.80191040]
[13.39423275 -333.85119629]
[28.36654091 -334.85852051]
[43.37264633 -334.81896973]
[58.33943558 -333.73272705]
[73.19399261 -331.60510254]
[87.86395264 -328.44647217]
[102.27783966 -324.27218628]
[116.36543274 -319.10260010]
[130.05809021 -312.96292114]
[143.28910828 -305.88302612]
[155.99403381 -297.89743042]
[168.11094666 -289.04501343]
[179.58084106 -279.36895752]
[190.34780884 -268.91635132]
[200.35942078 -257.73812866]
[209.56687927 -245.88877869]
[217.92533875 -233.42599487]
[225.39407349 -220.41052246]
[231.93670654 -206.90574646]
[237.52134705 -192.97747803]
[242.12078857 -178.69358826]
[245.71263123 -164.12362671]
[248.27935791 -149.33862305]
[249.80848694 -134.41058350]
[250.29257202 -119.41223145]
[249.72921753 -104.41664886]
[248.12120056 -89.49690247]
[245.47634888 -74.72566223]
[241.80755615 -60.17490005]
[237.13267517 -45.91551208]
[231.47448730 -32.01696014]
[224.86058044 -18.54696274]
[217.32315063 -5.57114363]
[208.89892578 6.84728050]
[199.62895203 18.64780617]
[189.55841064 29.77294350]
[178.73632812 40.16849136]
[167.21545410 49.78380203]
[155.05191040 58.57202911]
[142.30496216 66.49036407]
[129.03671265 73.50022125]
[115.31178284 79.56745148]
[101.19706726 84.66249084]
[112.16400146 94.89608002]
[126.84234619 97.98575592]
[141.52069092 101.07543945]
[156.19905090 104.16511536]
[170.87739563 107.25479889]
[186.28715515 101.64488220]
[198.67474365 112.39102173]
[195.29687500 128.43850708]
[179.62840271 133.27906799]
[167.78771973 121.93314362]
[153.10935974 118.84346008]
[138.43101501 115.75378418]
[123.75267029 112.66410828]
[109.07432556 109.57442474]
[97.42646790 119.02574158]
[97.42646790 134.02574158]
[97.42646790 149.02574158]
[97.42646790 164.02574158]
[97.42646790 179.02574158]
[97.42646790 194.02574158]
[97.42646790 209.02574158]
[97.42646790 224.02574158]
[97.42646790 239.02574158]
[97.42646790 254.02574158]
[97.42646790 269.02575684]
[97.42646790 284.02575684]
[97.42646790 299.02575684]
[112.17208099 302.05093384]
[126.00675201 307.98275757]
[138.36395264 316.57836914]
[148.73768616 327.48574829]
[156.70312500 340.25823975]
[161.93409729 354.37283325]
[164.21640015 369.25152588]
[163.45658875 384.28509521]
[159.68576050 398.85784912]
[153.05833435 412.37310791]
[143.84568787 424.27740479]
[132.42509460 434.08325195]
[119.26420593 441.38912964]
[104.90195465 445.89587402]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[28 117]
[118 131]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
