%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUACUUUUGGGGGGGGGGAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAGCAAGAxxxxxxxxxxUUGUAGAUGUGGUUUGACUAUUUCUGUAUGUCUCCAUCUAUUGAUGAGGGCCCCCCCCCCUCUUACUCUU\
) } def
/len { sequence length } bind def

/coor [
[83.63697815 425.33901978]
[69.79103851 419.32299805]
[58.08237457 409.79357910]
[49.37985229 397.45791626]
[44.32925034 383.23138428]
[43.30535889 368.16970825]
[46.38415527 353.39053345]
[53.33717728 339.99060059]
[63.64846420 328.96429443]
[76.55284119 321.12976074]
[91.09272766 317.06845093]
[91.09272766 302.06845093]
[91.09272766 287.06845093]
[91.09272766 272.06845093]
[91.09272766 257.06845093]
[91.09272766 242.06846619]
[91.09272766 227.06846619]
[91.09272766 212.06846619]
[91.09272766 197.06846619]
[91.09272766 182.06846619]
[82.74417114 173.25886536]
[82.65974426 160.72045898]
[91.43283081 151.20799255]
[91.74488068 136.21124268]
[73.25789642 125.77326202]
[63.50890732 106.91384888]
[65.68341064 85.79533386]
[79.07087708 69.31819916]
[73.29460144 55.47498322]
[67.51833344 41.63176727]
[61.74205780 27.78854752]
[55.96578598 13.94533062]
[43.51094055 4.18892813]
[45.75046921 -10.53634834]
[33.29562378 -20.29275131]
[35.53515244 -35.01802826]
[17.56270027 -42.25717545]
[11.40054035 -60.09328842]
[-2.38184118 -66.01325226]
[-16.16422272 -71.93321228]
[-29.94660378 -77.85317993]
[-43.72898483 -83.77313995]
[-57.51136780 -89.69310760]
[-71.29374695 -95.61306763]
[-85.87767792 -89.52335358]
[-100.46418762 -95.60686493]
[-106.39937592 -110.25435638]
[-100.16198730 -124.77574158]
[-85.45256042 -130.55572510]
[-70.99793243 -124.16516113]
[-65.37378693 -109.39544678]
[-51.59140396 -103.47548676]
[-37.80902100 -97.55551910]
[-24.02663994 -91.63555908]
[-10.24425983 -85.71559906]
[3.53812194 -79.79563141]
[17.32050323 -73.87567139]
[21.65051460 -77.51064301]
[26.75114822 -79.94898987]
[19.30261803 -93.90713501]
[27.30301857 -106.47068787]
[27.61507416 -121.46744537]
[27.92713165 -136.46420288]
[28.23918724 -151.46095276]
[28.08315086 -166.46014404]
[27.45917320 -181.44715881]
[26.83519554 -196.43417358]
[26.21121788 -211.42118835]
[12.17572212 -217.41848755]
[2.13877511 -228.91729736]
[-1.90678000 -243.63450623]
[0.84230494 -258.64801025]
[9.84019756 -270.97686768]
[23.30035973 -278.17315674]
[38.55026627 -278.80807495]
[52.56203461 -272.75555420]
[62.55362320 -261.21731567]
[66.54119110 -246.48429871]
[63.73300552 -231.48173523]
[54.68663025 -219.18841553]
[41.19823456 -212.04516602]
[41.82221222 -197.05815125]
[42.44618988 -182.07113647]
[43.07016754 -167.08412170]
[45.46501923 -164.41349792]
[46.65128326 -160.42672729]
[46.01404953 -155.72073364]
[43.23594284 -151.14889526]
[42.92388535 -136.15214539]
[42.61182785 -121.15538788]
[42.29977417 -106.15863800]
[49.77062225 -93.27315521]
[41.74790192 -79.63693237]
[53.62802887 -70.02886963]
[56.75997162 -54.79443359]
[49.37837219 -40.79430008]
[61.42005920 -32.02805710]
[59.59368896 -16.31262207]
[71.63537598 -7.54637861]
[69.80900574 8.16905785]
[75.58527374 22.01227570]
[81.36154938 35.85549164]
[87.13781738 49.69871140]
[92.91409302 63.54192734]
[99.15426636 62.86934280]
[105.41858673 63.25711060]
[111.52816772 64.69416046]
[117.30853271 67.13945007]
[122.59461212 70.52315521]
[127.23545074 74.74864197]
[131.09851074 79.69523621]
[134.07348633 85.22168732]
[136.07540894 91.17016602]
[137.04710388 97.37080383]
[136.96084595 103.64652252]
[151.28344727 108.10334015]
[165.60603333 112.56015015]
[179.92863464 117.01696777]
[195.79780579 112.88157654]
[207.11953735 124.74539948]
[202.24700928 140.40396118]
[186.19265747 143.74906921]
[175.47181702 131.33956909]
[161.14921570 126.88275146]
[146.82662964 122.42593384]
[132.50402832 117.96911621]
[121.70529938 130.13769531]
[106.74163818 136.52330017]
[106.42958069 151.52005005]
[115.68383789 167.40522766]
[106.09272766 182.06846619]
[106.09272766 197.06846619]
[106.09272766 212.06846619]
[106.09272766 227.06846619]
[106.09272766 242.06846619]
[106.09272766 257.06845093]
[106.09272766 272.06845093]
[106.09272766 287.06845093]
[106.09272766 302.06845093]
[106.09272766 317.06845093]
[120.63261414 321.12976074]
[133.53700256 328.96429443]
[143.84828186 339.99060059]
[150.80130005 353.39053345]
[153.88009644 368.16970825]
[152.85621643 383.23138428]
[147.80560303 397.45791626]
[139.10308838 409.79357910]
[127.39442444 419.32299805]
[113.54848480 425.33901978]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 129]
[24 128]
[28 104]
[29 103]
[30 102]
[31 101]
[32 100]
[34 98]
[36 96]
[38 57]
[39 56]
[40 55]
[41 54]
[42 53]
[43 52]
[44 51]
[59 93]
[61 91]
[62 90]
[63 89]
[64 88]
[65 84]
[66 83]
[67 82]
[68 81]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
