%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAGCCCUAGGGGGGGGGGAACCUCAACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCAxxxxxxxxxxUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGCUCCCCCCCCCCCUGAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[45.10153961 501.45431519]
[31.25560188 495.43829346]
[19.54693985 485.90887451]
[10.84441662 473.57321167]
[5.79381418 459.34667969]
[4.76992321 444.28500366]
[7.84872198 429.50585938]
[14.80174351 416.10592651]
[25.11302757 405.07958984]
[38.01741028 397.24508667]
[52.55729675 393.18377686]
[52.55729675 378.18377686]
[52.55729675 363.18377686]
[52.55729675 348.18377686]
[52.55729675 333.18377686]
[52.55729675 318.18377686]
[52.55729675 303.18377686]
[52.55729675 288.18377686]
[52.55729675 273.18377686]
[52.55729675 258.18377686]
[52.55729675 243.18376160]
[47.06446457 238.07702637]
[39.87308121 251.24076843]
[36.29190063 265.80700684]
[23.11557007 272.97528076]
[8.94070721 268.06884766]
[3.01539254 254.28875732]
[9.20547104 240.62556458]
[23.47314835 235.99359131]
[36.07880020 227.86354065]
[30.58596611 222.75680542]
[15.62571812 223.84811401]
[0.66546917 224.93942261]
[-10.86907959 236.08993530]
[-26.75937271 233.88128662]
[-34.81573486 220.00776672]
[-28.85801888 205.11195374]
[-13.45647049 200.62063599]
[-0.42584139 209.97917175]
[14.53440762 208.88786316]
[29.49465561 207.79655457]
[34.40822601 192.07846069]
[45.06969833 180.92063904]
[58.60941696 176.02243042]
[71.88658905 177.56373596]
[78.23371887 163.97277832]
[84.58084869 150.38183594]
[90.92797852 136.79087830]
[97.27510834 123.19993591]
[79.75964355 103.48480988]
[92.16770172 84.10836029]
[91.85564423 69.11161041]
[77.69852448 65.82180786]
[64.75466156 59.23181534]
[53.78002548 49.73162460]
[45.41434479 37.88103104]
[40.14381027 24.37666893]
[38.27284241 10.01104641]
[39.90649414 -4.37395716]
[44.94456863 -17.93642807]
[53.08775711 -29.88369179]
[63.85540390 -39.51865005]
[76.61389160 -46.28044510]
[90.61391449 -49.77711105]
[90.61391449 -64.77710724]
[90.61391449 -79.77710724]
[90.61391449 -94.77710724]
[76.36124420 -99.93823242]
[64.73531342 -109.66518402]
[57.14001465 -122.78338623]
[54.49251175 -137.70875549]
[57.11250305 -152.63896179]
[64.68361664 -165.77114868]
[76.29160309 -175.51950073]
[90.53473663 -180.70687866]
[105.69309235 -180.70687866]
[119.93622589 -175.51950073]
[131.54421997 -165.77114868]
[139.11532593 -152.63896179]
[141.73532104 -137.70875549]
[139.08781433 -122.78338623]
[131.49252319 -109.66518402]
[119.86658478 -99.93823242]
[105.61391449 -94.77710724]
[105.61391449 -79.77710724]
[105.61391449 -64.77710724]
[105.61391449 -49.77711105]
[120.62821960 -45.88165283]
[134.13952637 -38.24011230]
[145.23078918 -27.36455345]
[153.14750671 -13.98677826]
[157.34906006 0.99093276]
[157.54562378 16.55666733]
[153.71818542 31.65724945]
[146.12016296 45.26949692]
[135.26066589 56.46954727]
[121.87036896 64.49555969]
[106.85239410 68.79955292]
[107.16445160 83.79630280]
[115.23456573 87.67199707]
[121.02368164 95.60292816]
[122.52565765 106.18520355]
[137.50537109 105.40535736]
[152.48507690 104.62551117]
[167.46479797 103.84567261]
[171.13497925 101.25892639]
[175.04617310 100.13038635]
[178.69761658 100.35153198]
[181.67849731 101.65855408]
[183.71186829 103.67665100]
[198.70457458 104.14469147]
[211.33462524 94.25219727]
[226.90966797 98.09893799]
[233.48187256 112.73402405]
[226.00959778 126.93067169]
[210.22492981 129.79841614]
[198.23652649 119.13739014]
[183.24383545 118.66934967]
[168.24464417 118.82538605]
[153.26492310 119.60523224]
[138.28521729 120.38507080]
[123.30550385 121.16491699]
[110.86605835 129.54705811]
[104.51892853 143.13801575]
[98.17179871 156.72895813]
[91.82466888 170.31991577]
[85.47753906 183.91087341]
[98.52259064 203.67829895]
[92.40138245 229.07655334]
[67.55729675 243.18376160]
[67.55729675 258.18377686]
[67.55729675 273.18377686]
[67.55729675 288.18377686]
[67.55729675 303.18377686]
[67.55729675 318.18377686]
[67.55729675 333.18377686]
[67.55729675 348.18377686]
[67.55729675 363.18377686]
[67.55729675 378.18377686]
[67.55729675 393.18377686]
[82.09718323 397.24508667]
[95.00156403 405.07958984]
[105.31285095 416.10592651]
[112.26586914 429.50585938]
[115.34466553 444.28500366]
[114.32077789 459.34667969]
[109.27017212 473.57321167]
[100.56764984 485.90887451]
[88.85898590 495.43829346]
[75.01305389 501.45431519]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[31 41]
[32 40]
[33 39]
[45 127]
[46 126]
[47 125]
[48 124]
[49 123]
[51 99]
[52 98]
[64 87]
[65 86]
[66 85]
[67 84]
[102 122]
[103 121]
[104 120]
[105 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
