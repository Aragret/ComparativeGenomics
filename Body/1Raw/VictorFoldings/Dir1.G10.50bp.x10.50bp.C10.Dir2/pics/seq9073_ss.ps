%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUCCCACUCGGGGGGGGGGCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCAxxxxxxxxxxACAUUGGGACAGACCUAGUUCAAUGAAUCUGAGGAGGCUACUCAGUAGACCCCCCCCCCCAGUCCCACCC\
) } def
/len { sequence length } bind def

/coor [
[85.45977783 409.01705933]
[72.23957825 401.74459839]
[61.35277557 391.29760742]
[53.54164505 378.38833618]
[49.33876419 363.89703369]
[49.03069305 348.81170654]
[52.63843536 334.16085815]
[59.91600800 320.94348145]
[70.36721802 310.06069946]
[83.27947998 302.25457764]
[97.77241516 298.05728149]
[97.46035767 283.06051636]
[97.14830017 268.06378174]
[96.83624268 253.06701660]
[96.52418518 238.07026672]
[96.21213531 223.07351685]
[95.90007782 208.07676697]
[95.58802032 193.08000183]
[95.27596283 178.08325195]
[94.96390533 163.08650208]
[94.49586487 148.09379578]
[93.87188721 133.10678101]
[93.24790955 118.11977386]
[87.11672974 113.80020905]
[73.50386047 120.10020447]
[74.85435486 105.16109467]
[68.72317505 100.84153748]
[54.40057755 105.29835510]
[43.67974472 117.70785522]
[27.62538910 114.36274719]
[22.75285721 98.70419312]
[34.07459259 86.84036255]
[49.94375992 90.97575378]
[64.26635742 86.51894379]
[72.12378693 73.74158478]
[69.63866425 58.94887543]
[67.15354919 44.15616989]
[61.95640564 44.14906693]
[56.57513046 42.75152969]
[51.38756943 39.88947678]
[46.79282379 35.59164429]
[43.18346024 29.99463272]
[31.68165779 20.36610603]
[23.03266144 17.22815895]
[20.04343987 10.41565609]
[8.74443436 0.54993308]
[-2.55456996 -9.31579018]
[-13.85357475 -19.18151283]
[-25.15258026 -29.04723549]
[-39.40085220 -23.45748138]
[-54.61348343 -25.14102745]
[-67.29473114 -33.71100616]
[-74.53053284 -47.19810486]
[-74.65815735 -62.50308228]
[-67.64826965 -76.10896301]
[-55.11169815 -84.88922882]
[-39.92925262 -86.82621765]
[-25.58974838 -81.47484589]
[-15.38829899 -70.06480408]
[-11.66912174 -55.21804428]
[-15.28685665 -40.34624100]
[-3.98785162 -30.48051834]
[7.31115294 -20.61479568]
[18.61015701 -10.74907207]
[29.90916252 -0.88334864]
[41.31018448 8.86430359]
[52.81198883 18.49283028]
[47.33436584 4.52874470]
[41.85674667 -9.43533993]
[31.62519073 -20.40417290]
[27.20909309 -34.73937607]
[29.49465370 -49.56422806]
[38.02321625 -61.90374374]
[51.08330917 -69.28167725]
[66.05409241 -70.21746826]
[79.93128967 -64.52332306]
[89.93009949 -53.34191895]
[94.04399109 -38.91708374]
[91.44742584 -24.14353180]
[82.66090393 -11.98547459]
[78.96453857 2.55195618]
[75.26817322 17.08938789]
[85.48165131 6.10372210]
[95.69513702 -4.88194227]
[105.90861511 -15.86760712]
[116.12209320 -26.85327148]
[125.75061798 -38.35507584]
[134.76814270 -50.34190750]
[133.95529175 -66.36435699]
[146.07028198 -76.88132477]
[161.81953430 -73.82509613]
[169.12156677 -59.54014969]
[162.37489319 -44.98466873]
[146.75498962 -41.32437897]
[137.73745728 -29.33754539]
[152.71105957 -28.44804764]
[161.52493286 -16.31068230]
[157.73684692 -1.79688215]
[144.11558533 4.48494053]
[130.61718750 -2.05671859]
[127.10775757 -16.63979149]
[116.89427948 -5.65412712]
[106.68080139 5.33153725]
[96.46731567 16.31720161]
[86.25383759 27.30286598]
[81.94625092 41.67105103]
[84.43137360 56.46375656]
[86.91648865 71.25646210]
[121.76179504 92.69531250]
[136.57955933 95.02641296]
[151.39730835 97.35751343]
[166.21507263 99.68862152]
[181.03282166 102.01972198]
[192.70434570 91.61253357]
[208.33633423 91.19415283]
[220.54783630 100.96212006]
[223.57296753 116.30430603]
[215.98333740 129.97659302]
[201.36254883 135.52336121]
[186.61408997 130.32557678]
[178.70172119 116.83748627]
[163.88397217 114.50637817]
[149.06620789 112.17527771]
[134.24844360 109.84416962]
[119.43069458 107.51306915]
[108.23492432 117.49579620]
[108.85890198 132.48280334]
[109.48287964 147.46981812]
[112.98549652 155.97767639]
[109.96066284 162.77444458]
[110.27272034 177.77119446]
[110.58477020 192.76794434]
[110.89682770 207.76470947]
[111.20888519 222.76145935]
[111.52094269 237.75820923]
[111.83300018 252.75495911]
[112.14505768 267.75170898]
[112.45710754 282.74847412]
[112.76916504 297.74523926]
[127.42415619 301.33599854]
[140.64996338 308.59826660]
[151.54483032 319.03683472]
[159.36593628 331.94006348]
[163.58000183 346.42813110]
[163.89971924 361.51321411]
[160.30329895 376.16683960]
[153.03593445 389.38983154]
[142.59313965 400.28067017]
[129.68690491 408.09677124]
[115.19721222 412.30526733]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 126]
[27 34]
[28 33]
[35 108]
[36 107]
[37 106]
[42 67]
[43 66]
[45 65]
[46 64]
[47 63]
[48 62]
[49 61]
[82 105]
[83 104]
[84 103]
[85 102]
[86 101]
[87 95]
[88 94]
[109 125]
[110 124]
[111 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
