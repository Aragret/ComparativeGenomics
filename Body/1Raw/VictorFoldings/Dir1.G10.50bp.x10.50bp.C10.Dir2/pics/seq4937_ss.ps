%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAUAAUCAUAGGGGGGGGGGAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCxxxxxxxxxxCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUCCCCCCCCCCACUAAUAAUCUUA\
) } def
/len { sequence length } bind def

/coor [
[78.89904785 650.93933105]
[64.62727356 646.12994385]
[51.72329330 638.36450195]
[40.79063797 628.00640869]
[32.34065247 615.53997803]
[26.76855469 601.54833984]
[24.33496475 586.68591309]
[25.15370750 571.64782715]
[29.18648338 557.13745117]
[36.24467850 543.83349609]
[45.99816132 532.35809326]
[57.99074936 523.24810791]
[71.66152954 516.92956543]
[86.37108612 513.69805908]
[86.37108612 498.69802856]
[86.37108612 483.69802856]
[86.37108612 468.69802856]
[86.37108612 453.69802856]
[86.37108612 438.69802856]
[86.37108612 423.69802856]
[86.37108612 408.69802856]
[86.37108612 393.69802856]
[86.37108612 378.69802856]
[86.37108612 363.69802856]
[86.37108612 348.69802856]
[86.37108612 333.69802856]
[72.34224701 331.15310669]
[58.97367477 326.18637085]
[46.68009949 318.95050049]
[35.84312439 309.66870117]
[26.79940224 298.62762451]
[19.83016396 286.16860962]
[15.15248299 272.67718506]
[12.91250420 258.57101440]
[13.18088818 244.28701782]
[15.95057583 230.26789856]
[21.13697052 216.94833374]
[28.58052063 204.74154663]
[38.05163193 194.02647400]
[49.25774384 185.13600159]
[61.85236359 178.34661865]
[75.44579315 173.86985779]
[89.61717224 171.84561157]
[90.21731567 156.85762024]
[90.81745911 141.86962891]
[91.41760254 126.88164520]
[92.01774597 111.89365387]
[85.68752289 99.42690277]
[92.99426270 87.50620270]
[93.59440613 72.51821136]
[94.19454956 57.53022003]
[94.79469299 42.54223251]
[80.21359253 38.80455017]
[66.73356628 32.11936951]
[54.94275284 22.78108406]
[45.35503006 11.19978619]
[38.38760757 -2.11674929]
[34.34288406 -16.58531952]
[33.39530945 -31.57283974]
[35.58388519 -46.42404175]
[40.81053162 -60.49011993]
[48.84451675 -73.15708923]
[59.33260727 -83.87256622]
[71.81462860 -92.16987610]
[85.74364471 -97.68835449]
[100.50989532 -100.18905640]
[101.11003876 -115.17704773]
[101.71018219 -130.16503906]
[102.31032562 -145.15303040]
[102.91046906 -160.14102173]
[88.71516418 -165.37059021]
[76.83190918 -174.73239136]
[68.42490387 -187.30926514]
[64.31777954 -201.86901855]
[64.91291809 -216.98527527]
[70.15200043 -231.17707825]
[79.52176666 -243.05404663]
[92.10426331 -251.45262146]
[106.66677094 -255.54998779]
[121.78262329 -254.94473267]
[135.97090149 -249.69613647]
[147.84159851 -240.31840515]
[156.23175049 -227.73030090]
[160.31935120 -213.16503906]
[159.70396423 -198.04960632]
[154.44586182 -183.86483765]
[145.06018066 -172.00042725]
[132.46644592 -163.61871338]
[117.89846039 -159.54087830]
[117.29831696 -144.55288696]
[116.69817352 -129.56489563]
[116.09803009 -114.57690430]
[115.49788666 -99.58891296]
[130.01692200 -95.91558075]
[143.46009827 -89.30107117]
[155.23875427 -80.03232574]
[164.83650208 -68.51257324]
[171.83198547 -55.24380493]
[175.91723633 -40.80485916]
[176.91137695 -25.82621765]
[174.76850891 -10.96244335]
[169.57989502 3.13640881]
[161.57005310 15.85322952]
[151.08705139 26.63086319]
[138.58734131 34.99651337]
[124.61595154 40.58249283]
[109.78268433 43.14237595]
[109.18254089 58.13036346]
[108.58239746 73.11835480]
[107.98225403 88.10634613]
[114.31247711 100.57309723]
[107.00573730 112.49379730]
[106.40559387 127.48178864]
[105.80545044 142.46977234]
[105.20530701 157.45776367]
[104.60516357 172.44575500]
[119.97156525 176.06059265]
[134.34591675 182.57440186]
[147.18725586 191.74012756]
[158.01263428 203.21095276]
[166.41537476 216.55340576]
[172.08027649 231.26377869]
[174.79550171 246.78704834]
[174.46040344 262.53796387]
[171.08935547 277.92294312]
[164.81108093 292.36260986]
[155.86378479 305.31347656]
[144.58605957 316.28851318]
[131.40411377 324.87530518]
[116.81564331 330.75177002]
[101.37108612 333.69802856]
[101.37108612 348.69802856]
[101.37108612 363.69802856]
[101.37108612 378.69802856]
[101.37108612 393.69802856]
[101.37108612 408.69802856]
[101.37108612 423.69802856]
[101.37108612 438.69802856]
[101.37108612 453.69802856]
[101.37108612 468.69802856]
[101.37108612 483.69802856]
[101.37108612 498.69802856]
[101.37108612 513.69805908]
[116.08064270 516.92956543]
[129.75141907 523.24810791]
[141.74400330 532.35809326]
[151.49749756 543.83349609]
[158.55567932 557.13745117]
[162.58845520 571.64782715]
[163.40719604 586.68591309]
[160.97361755 601.54833984]
[155.40151978 615.53997803]
[146.95152283 628.00640869]
[136.01887512 638.36450195]
[123.11489105 646.12994385]
[108.84312439 650.93933105]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[26 131]
[43 116]
[44 115]
[45 114]
[46 113]
[47 112]
[49 110]
[50 109]
[51 108]
[52 107]
[66 93]
[67 92]
[68 91]
[69 90]
[70 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
