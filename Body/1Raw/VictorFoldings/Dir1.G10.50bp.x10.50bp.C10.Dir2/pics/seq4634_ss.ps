%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCGAAAAUGGGGGGGGGGGUUGGUUAUACCCUUCCCGUACUAAUUAAUCCCCUGGCCCAACCCGUCAUxxxxxxxxxxCCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCCCCCCCCCCCAAAAU\
) } def
/len { sequence length } bind def

/coor [
[86.96470642 363.80975342]
[72.47501373 359.60128784]
[59.56878281 351.78515625]
[49.12598419 340.89431763]
[41.85861969 327.67132568]
[38.26219177 313.01773071]
[38.58191299 297.93261719]
[42.79598618 283.44454956]
[50.61708069 270.54135132]
[61.51194763 260.10275269]
[74.73775482 252.84048462]
[89.39275360 249.24972534]
[89.70480347 234.25297546]
[90.01686096 219.25621033]
[90.32891846 204.25946045]
[90.64097595 189.26271057]
[90.95303345 174.26596069]
[91.26509094 159.26919556]
[91.57714081 144.27244568]
[91.88919830 129.27569580]
[92.20125580 114.27893829]
[84.64079285 105.36685944]
[85.00545502 93.68555450]
[93.10709381 85.26241302]
[93.73107147 70.27539825]
[94.35504913 55.28838348]
[94.97902679 40.30136871]
[95.60300446 25.31435204]
[96.22698212 10.32733536]
[96.85095978 -4.65968084]
[81.93345642 -6.28371429]
[67.15774536 -8.90050411]
[52.58981323 -12.49836254]
[38.29472351 -17.06122208]
[24.33632469 -22.56870079]
[10.77695560 -28.99620438]
[-2.32282090 -36.31502151]
[-14.90449905 -44.49246979]
[-26.91188622 -53.49202347]
[-38.29135132 -63.27348709]
[-48.99207306 -73.79317474]
[-58.96625900 -85.00409698]
[-68.16935730 -96.85620117]
[-76.56027222 -109.29653168]
[-84.10152435 -122.26953125]
[-90.75942230 -135.71726990]
[-96.50424957 -149.57966614]
[-101.31033325 -163.79483032]
[-105.15621185 -178.29927063]
[-108.02470398 -193.02818298]
[-109.90301514 -207.91580200]
[-110.78273773 -222.89562988]
[-110.65995026 -237.90077209]
[-109.53519440 -252.86419678]
[-107.41350555 -267.71908569]
[-104.30435181 -282.39907837]
[-100.22162628 -296.83865356]
[-95.18355560 -310.97323608]
[-89.21263885 -324.73977661]
[-82.33555603 -338.07675171]
[-74.58301544 -350.92462158]
[-65.98963928 -363.22595215]
[-56.59381104 -374.92587280]
[-46.43749237 -385.97204590]
[-35.56604767 -396.31521606]
[-24.02803230 -405.90914917]
[-11.87497711 -414.71099854]
[0.83884048 -422.68145752]
[14.05663586 -429.78491211]
[27.71937561 -435.98965454]
[41.76603699 -441.26797485]
[56.13388062 -445.59628296]
[70.75874329 -448.95523071]
[85.57530212 -451.32986450]
[100.51737976 -452.70956421]
[115.51824188 -453.08816528]
[130.51089478 -452.46392822]
[145.42837524 -450.83972168]
[160.20405579 -448.22274780]
[174.77194214 -444.62469482]
[189.06697083 -440.06167603]
[203.02531433 -434.55401611]
[216.58459473 -428.12634277]
[229.68428040 -420.80734253]
[242.26585388 -412.62976074]
[254.27313232 -403.63003540]
[265.65246582 -393.84844971]
[276.35305786 -383.32861328]
[286.32711792 -372.11755371]
[295.53005981 -360.26535034]
[303.92080688 -347.82492065]
[311.46191406 -334.85180664]
[318.11962891 -321.40399170]
[323.86428833 -307.54150391]
[328.67019653 -293.32629395]
[332.51586914 -278.82180786]
[335.38418579 -264.09286499]
[337.26232910 -249.20521545]
[338.14184570 -234.22537231]
[338.01885986 -219.22024536]
[336.89392090 -204.25682068]
[334.77206421 -189.40196228]
[331.66271973 -174.72200012]
[327.57980347 -160.28250122]
[322.54156494 -146.14796448]
[316.57046509 -132.38150024]
[309.69323730 -119.04460907]
[301.94052124 -106.19685364]
[293.34698486 -93.89561462]
[283.95101929 -82.19583130]
[273.79455566 -71.14975739]
[262.92297363 -60.80673599]
[251.38484192 -51.21295166]
[239.23167419 -42.41125870]
[226.51776123 -34.44096756]
[213.29988098 -27.33767319]
[199.63705444 -21.13310242]
[185.59033203 -15.85496616]
[171.22242737 -11.52683830]
[156.59753418 -8.16804981]
[141.78094482 -5.79360199]
[126.83884430 -4.41409969]
[111.83797455 -4.03570366]
[111.21399689 10.95131302]
[110.59001923 25.93832970]
[109.96604156 40.92534637]
[109.34206390 55.91236115]
[108.71808624 70.89937592]
[108.09410858 85.88639069]
[116.26194000 100.50766754]
[107.19801331 114.59099579]
[106.88595581 129.58775330]
[106.57389832 144.58450317]
[106.26184082 159.58125305]
[105.94978333 174.57801819]
[105.63772583 189.57476807]
[105.32567596 204.57151794]
[105.01361847 219.56826782]
[104.70156097 234.56503296]
[104.38950348 249.56178284]
[118.88243866 253.75906372]
[131.79470825 261.56521606]
[142.24591064 272.44796753]
[149.52348328 285.66537476]
[153.13122559 300.31619263]
[152.82315063 315.40151978]
[148.62026978 329.89285278]
[140.80914307 342.80209351]
[129.92233276 353.24908447]
[116.70214081 360.52157593]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 129]
[25 128]
[26 127]
[27 126]
[28 125]
[29 124]
[30 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
