%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAAGCCCCCAGGGGGGGGGGUCGCUGGGUCAAUAGUACUUGCCGCAGUACUCUUAAAACUAGGCGGCUAUxxxxxxxxxxCAGGCAAAUCAGCCCAAUUAGGUCUCCACCCCUGACUCCCCUCAGCCAUACCCCCCCCCCGAAGGCCCCA\
) } def
/len { sequence length } bind def

/coor [
[103.93537903 553.50347900]
[90.08943939 547.48742676]
[78.38077545 537.95800781]
[69.67825317 525.62237549]
[64.62764740 511.39581299]
[63.60375595 496.33413696]
[66.68255615 481.55499268]
[73.63557434 468.15505981]
[83.94686127 457.12872314]
[96.85124207 449.29421997]
[111.39112854 445.23291016]
[111.39112854 430.23291016]
[111.39112854 415.23291016]
[111.39112854 400.23291016]
[111.39112854 385.23291016]
[111.39112854 370.23291016]
[111.39112854 355.23291016]
[111.39112854 340.23291016]
[111.39112854 325.23291016]
[111.39112854 310.23291016]
[111.39112854 295.23291016]
[100.48840332 279.30932617]
[110.66387939 261.95687866]
[110.03990173 246.96984863]
[109.41592407 231.98283386]
[108.79194641 216.99581909]
[107.38964844 202.06150818]
[105.21280670 187.22030640]
[103.03597260 172.37908936]
[100.85913849 157.53788757]
[98.68229675 142.69668579]
[86.80254364 142.30279541]
[75.07237244 138.55343628]
[64.44987488 131.51342773]
[55.86467743 121.52283478]
[50.13873291 109.18495941]
[47.91196060 95.33156586]
[49.57918930 80.96720123]
[55.24425888 67.19641876]
[64.69583130 55.13898087]
[77.40795135 45.83970642]
[65.70832825 36.45254517]
[54.00870514 27.06538200]
[42.30908203 17.67822075]
[30.60945702 8.29105949]
[18.71707726 -0.85067511]
[6.63708973 -9.74302483]
[-5.44289875 -18.63537407]
[-19.81673050 -13.03211594]
[-34.93357086 -16.11182976]
[-45.96969604 -26.89179039]
[-49.40351105 -41.93215179]
[-44.13930511 -56.43358612]
[-31.85686302 -65.76874542]
[-16.47546768 -66.95880890]
[-2.90326810 -59.62403107]
[4.52889681 -46.10491562]
[3.44945097 -30.71536255]
[15.52943897 -21.82301331]
[27.60942841 -12.93066311]
[32.44138336 -12.76412201]
[37.20441818 -9.51684666]
[39.99662018 -3.40856457]
[51.69624329 5.97859716]
[63.39586639 15.36575890]
[75.09548950 24.75292015]
[86.79511261 34.14008331]
[94.17813873 32.82065201]
[88.41120148 18.97354317]
[82.64426422 5.12643480]
[76.87731934 -8.72067261]
[67.17607880 -20.16120911]
[65.61737823 -35.08000565]
[72.74434662 -48.27872849]
[86.07364655 -55.15839767]
[100.96079254 -53.32184219]
[112.21847534 -43.40900040]
[115.92406464 -28.87391472]
[110.78582764 -14.78051376]
[110.17195129 0.20691967]
[109.55807495 15.19435310]
[108.94419861 30.18178558]
[116.32722473 28.86235428]
[124.05130768 16.00395203]
[131.77539062 3.14554930]
[127.70751953 -12.12625217]
[135.70207214 -25.75939751]
[151.01602173 -29.66558456]
[164.56388855 -21.52733994]
[168.30795288 -6.17294025]
[160.02691650 7.28812027]
[144.63380432 10.86963463]
[136.90971375 23.72803688]
[129.18562317 36.58643723]
[133.87921143 42.43625259]
[145.57882690 33.04908752]
[157.27861023 23.66212082]
[166.66539001 35.36205673]
[154.96598816 44.74871445]
[143.26637268 54.13587570]
[147.95994568 59.98568726]
[162.18673706 55.23187256]
[176.41351318 50.47805786]
[186.87385559 37.84820557]
[202.99432373 40.85860062]
[208.19155884 56.41240311]
[197.11909485 68.50919342]
[181.16732788 64.70483398]
[166.94055176 69.45864868]
[152.71376038 74.21246338]
[153.02146912 106.01224518]
[137.33003235 130.23619080]
[113.52350616 140.51985168]
[115.70034027 155.36105347]
[117.87717438 170.20225525]
[120.05401611 185.04347229]
[122.23085022 199.88467407]
[133.39581299 189.86749268]
[148.22259521 192.14047241]
[155.87402344 205.04223633]
[150.75753784 219.14263916]
[136.61285400 224.13543701]
[123.77896881 216.37184143]
[124.40294647 231.35885620]
[125.02692413 246.34587097]
[125.65090179 261.33288574]
[134.12637329 268.27923584]
[137.27963257 278.54376221]
[134.29067993 288.62768555]
[126.39112854 295.23291016]
[126.39112854 310.23291016]
[126.39112854 325.23291016]
[126.39112854 340.23291016]
[126.39112854 355.23291016]
[126.39112854 370.23291016]
[126.39112854 385.23291016]
[126.39112854 400.23291016]
[126.39112854 415.23291016]
[126.39112854 430.23291016]
[126.39112854 445.23291016]
[140.93101501 449.29421997]
[153.83540344 457.12872314]
[164.14668274 468.15505981]
[171.09970093 481.55499268]
[174.17849731 496.33413696]
[173.15461731 511.39581299]
[168.10400391 525.62237549]
[159.40148926 537.95800781]
[147.69282532 547.48742676]
[133.84687805 553.50347900]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 126]
[24 125]
[25 124]
[26 123]
[27 117]
[28 116]
[29 115]
[30 114]
[31 113]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 60]
[47 59]
[48 58]
[83 94]
[84 93]
[85 92]
[101 110]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
