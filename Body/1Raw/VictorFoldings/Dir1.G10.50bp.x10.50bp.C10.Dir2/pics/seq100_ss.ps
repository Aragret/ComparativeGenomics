%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCCCCCCCCCCCUCAACCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 404.39782715]
[71.19830322 398.38180542]
[59.48964310 388.85238647]
[50.78712082 376.51672363]
[45.73651886 362.29019165]
[44.71262741 347.22851562]
[47.79142761 332.44934082]
[54.74444962 319.04940796]
[65.05573273 308.02307129]
[77.96011353 300.18856812]
[92.50000000 296.12725830]
[92.50000000 281.12725830]
[92.50000000 266.12725830]
[92.50000000 251.12725830]
[92.50000000 236.12725830]
[92.50000000 221.12725830]
[92.50000000 206.12725830]
[92.50000000 191.12725830]
[92.50000000 176.12725830]
[92.50000000 161.12725830]
[92.50000000 146.12725830]
[92.50000000 131.12725830]
[76.13229370 121.34218597]
[68.23107910 103.98648834]
[71.59912109 85.21668243]
[85.04168701 71.69089508]
[81.33552551 57.15596008]
[77.62936401 42.62102509]
[61.94017410 42.12050629]
[47.03719330 37.23708725]
[34.11823654 28.37182999]
[24.21923447 16.24548721]
[18.13118553 1.83991420]
[16.33694267 -13.68144321]
[18.97293282 -29.06750107]
[25.81881905 -43.08038330]
[36.31589127 -54.59501266]
[49.61266327 -62.68944168]
[45.60492325 -77.14412689]
[41.59718323 -91.59881592]
[37.58944321 -106.05350494]
[33.58170319 -120.50819397]
[18.49262238 -121.75119019]
[4.76500654 -128.06977844]
[-5.95238161 -138.68382263]
[-12.37960339 -152.29853821]
[-13.75838852 -167.26251221]
[-9.94154644 -181.76789856]
[-1.40841067 -194.06890869]
[10.79526424 -202.69187927]
[6.78752375 -217.14656067]
[2.62963653 -231.55877686]
[-1.67794812 -245.92697144]
[-5.98553276 -260.29513550]
[-10.29311752 -274.66333008]
[-25.32377434 -273.64987183]
[-40.20301437 -276.00698853]
[-54.18450165 -281.61642456]
[-66.56693268 -290.19680786]
[-76.72920227 -301.31777954]
[-84.16158295 -314.42150879]
[-88.49127197 -328.85067749]
[-89.50108337 -343.88159180]
[-87.14037323 -358.76025391]
[-81.52755737 -372.74038696]
[-72.94416046 -385.12072754]
[-61.82072830 -395.28030396]
[-48.71520996 -402.70953369]
[-34.28496933 -407.03570557]
[-19.25382233 -408.04187012]
[-4.37572622 -405.67758179]
[9.60304165 -400.06137085]
[21.98131180 -391.47497559]
[32.13819504 -380.34906006]
[39.56422424 -367.24176025]
[43.88691711 -352.81045532]
[44.88944626 -337.77908325]
[42.52152634 -322.90155029]
[36.90193176 -308.92413330]
[28.31253624 -296.54797363]
[17.18418503 -286.39376831]
[4.07506657 -278.97091675]
[8.38265133 -264.60272217]
[12.69023609 -250.23454285]
[16.99781990 -235.86636353]
[21.96341133 -230.32664490]
[21.24221230 -221.15431213]
[25.24995232 -206.69961548]
[40.15157318 -205.59191895]
[53.80067444 -199.44122314]
[64.54196167 -188.97225952]
[71.06555939 -175.43473816]
[72.56673431 -160.45420837]
[68.84507751 -145.83676147]
[60.33108902 -133.35140991]
[48.03638840 -124.51593781]
[52.04412842 -110.06124878]
[56.05187225 -95.60655975]
[60.05961227 -81.15187073]
[64.06735229 -66.69718170]
[78.43218994 -66.77066803]
[92.33518982 -63.10872269]
[104.82109833 -55.95642853]
[115.03030396 -45.79890823]
[122.25807190 -33.32843399]
[126.00315857 -19.39723396]
[126.00258636 -4.95926428]
[122.25006104 8.99511623]
[114.99691010 21.50708580]
[104.73517609 31.71523094]
[92.16429901 38.91486359]
[95.87046051 53.44979858]
[99.57662201 67.98473358]
[110.47428894 69.74366760]
[120.12694550 75.09894562]
[127.38726044 83.41403198]
[131.39225769 93.70057678]
[131.66587830 104.73587799]
[145.56843567 110.36783600]
[159.47099304 115.99979401]
[175.62899780 113.19783783]
[185.92536926 125.96172333]
[179.76808167 141.16105652]
[163.49122620 143.16007996]
[153.83903503 129.90234375]
[139.93647766 124.27039337]
[126.03392029 118.63843536]
[117.89199829 126.55245209]
[107.50000000 131.12725830]
[107.50000000 146.12725830]
[107.50000000 161.12725830]
[107.50000000 176.12725830]
[107.50000000 191.12725830]
[107.50000000 206.12725830]
[107.50000000 221.12725830]
[107.50000000 236.12725830]
[107.50000000 251.12725830]
[107.50000000 266.12725830]
[107.50000000 281.12725830]
[107.50000000 296.12725830]
[122.03988647 300.18856812]
[134.94427490 308.02307129]
[145.25555420 319.04940796]
[152.20857239 332.44934082]
[155.28736877 347.22851562]
[154.26348877 362.29019165]
[149.21287537 376.51672363]
[140.51036072 388.85238647]
[128.80169678 398.38180542]
[114.95575714 404.39782715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[26 113]
[27 112]
[28 111]
[38 100]
[39 99]
[40 98]
[41 97]
[42 96]
[50 88]
[51 87]
[52 85]
[53 84]
[54 83]
[55 82]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
