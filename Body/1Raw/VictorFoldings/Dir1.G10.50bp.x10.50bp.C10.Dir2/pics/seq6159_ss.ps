%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGGGAAAAAAGGGGGGGGGGGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUCUUCGAAUUUGCAAUUxxxxxxxxxxUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCCCCCCCCCCCGGAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 395.91085815]
[71.19830322 389.89483643]
[59.48964310 380.36541748]
[50.78712082 368.02975464]
[45.73651886 353.80322266]
[44.71262741 338.74154663]
[47.79142761 323.96240234]
[54.74444962 310.56246948]
[65.05573273 299.53613281]
[77.96011353 291.70162964]
[92.50000000 287.64031982]
[92.50000000 272.64031982]
[92.50000000 257.64031982]
[92.50000000 242.64030457]
[92.50000000 227.64030457]
[92.50000000 212.64030457]
[92.50000000 197.64030457]
[92.50000000 182.64030457]
[92.50000000 167.64030457]
[92.50000000 152.64030457]
[92.50000000 137.64030457]
[92.50000000 122.64031219]
[76.43953705 103.70648956]
[85.91084290 80.75605774]
[81.30527496 66.48059845]
[76.69971466 52.20513535]
[72.09414673 37.92967606]
[67.48858643 23.65421486]
[62.88301849 9.37875462]
[56.96305847 -4.40362644]
[49.78054810 -17.57220840]
[42.59803772 -30.74079132]
[35.41553116 -43.90937424]
[23.24769783 -48.31365585]
[17.54911804 -59.48259354]
[20.90342140 -71.14689636]
[13.99642277 -84.46205139]
[0.77368057 -93.14938354]
[1.78142118 -108.00985718]
[-5.12557745 -121.32501221]
[-12.03257561 -134.64016724]
[-22.13122559 -145.73147583]
[-34.74235535 -153.85302734]
[-47.35348129 -161.97456360]
[-59.96461105 -170.09611511]
[-72.57573700 -178.21765137]
[-85.18686676 -186.33918762]
[-97.79799652 -194.46073914]
[-113.18929291 -190.87136841]
[-126.56634521 -199.28741455]
[-129.99278259 -214.71580505]
[-121.43577576 -228.00312805]
[-105.97203064 -231.26626587]
[-92.77591705 -222.56924438]
[-89.67645264 -207.07186890]
[-77.06532288 -198.95031738]
[-64.45419312 -190.82878113]
[-51.84306717 -182.70724487]
[-39.23194122 -174.58569336]
[-26.62081146 -166.46415710]
[-14.00968361 -158.34260559]
[-20.54845810 -171.84240723]
[-23.86191750 -186.47186279]
[-23.77807617 -201.47163391]
[-20.30128288 -216.06312561]
[-13.61200428 -229.48898315]
[-4.05745268 -241.05230713]
[7.86643553 -250.15290833]
[21.54074287 -256.31838989]
[36.25569153 -259.22875977]
[51.24749374 -258.73294067]
[65.73799133 -254.85667419]
[78.97503662 -247.80113220]
[90.27156067 -237.93257141]
[99.04119873 -225.76319885]
[104.82876587 -211.92469788]
[107.33383942 -197.13536072]
[106.42641449 -182.16284180]
[102.15357208 -167.78428650]
[94.73709869 -154.74603271]
[84.56196594 -143.72483826]
[72.15631104 -135.29277039]
[58.16405869 -129.88751221]
[43.31148911 -127.78961182]
[28.36953735 -129.10795593]
[14.11377335 -133.77413940]
[1.28257978 -141.54716492]
[8.18957806 -128.23200989]
[15.09657669 -114.91685486]
[27.82528305 -107.18191528]
[27.31157875 -91.36904907]
[34.21857834 -78.05389404]
[49.48431396 -69.45405579]
[48.58411407 -51.09188461]
[55.76662064 -37.92330170]
[62.94913101 -24.75471878]
[70.13163757 -11.58613586]
[73.25798798 -26.25671768]
[83.71374512 -37.01204300]
[98.29019165 -40.55143738]
[112.51399231 -35.78870392]
[122.02003479 -24.18547249]
[123.89105225 -9.30261993]
[117.55284882 4.29249430]
[104.95053101 12.42770195]
[89.95159149 12.60641289]
[77.15847778 4.77319050]
[81.76404572 19.04865074]
[86.36960602 33.32411194]
[90.97517395 47.59957123]
[95.58074188 61.87503433]
[100.18630219 76.15048981]
[106.49197388 77.05031586]
[112.33460999 79.58699036]
[117.29750061 83.57958221]
[121.02667999 88.74333954]
[123.25616455 94.70995331]
[123.82694244 101.05387878]
[137.84365845 106.39539337]
[151.86036682 111.73690033]
[168.81431580 111.72724152]
[173.51690674 128.01594543]
[159.16658020 137.04393005]
[146.51885986 125.75361633]
[132.50213623 120.41210175]
[118.48542786 115.07058716]
[115.32529449 118.27481842]
[111.61950684 120.82836151]
[107.50000000 122.64031219]
[107.50000000 137.64030457]
[107.50000000 152.64030457]
[107.50000000 167.64030457]
[107.50000000 182.64030457]
[107.50000000 197.64030457]
[107.50000000 212.64030457]
[107.50000000 227.64030457]
[107.50000000 242.64030457]
[107.50000000 257.64031982]
[107.50000000 272.64031982]
[107.50000000 287.64031982]
[122.03988647 291.70162964]
[134.94427490 299.53613281]
[145.25555420 310.56246948]
[152.20857239 323.96240234]
[155.28736877 338.74154663]
[154.26348877 353.80322266]
[149.21287537 368.02975464]
[140.51036072 380.36541748]
[128.80169678 389.89483643]
[114.95575714 395.91085815]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 112]
[25 111]
[26 110]
[27 109]
[28 108]
[29 107]
[30 97]
[31 96]
[32 95]
[33 94]
[36 92]
[37 91]
[39 89]
[40 88]
[41 87]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
