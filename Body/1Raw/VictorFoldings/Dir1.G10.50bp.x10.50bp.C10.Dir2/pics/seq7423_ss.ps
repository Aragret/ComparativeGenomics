%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGAAAAACCGGGGGGGGGGAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUxxxxxxxxxxCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGGCUACACCCCCCCCCCUAGAAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[77.03717804 373.47863770]
[63.19123840 367.46261597]
[51.48257446 357.93319702]
[42.78005219 345.59753418]
[37.72945023 331.37100220]
[36.70555878 316.30932617]
[39.78435898 301.53015137]
[46.73738098 288.13021851]
[57.04866409 277.10391235]
[69.95304108 269.26937866]
[84.49292755 265.20806885]
[84.49292755 250.20806885]
[84.49292755 235.20806885]
[84.49292755 220.20806885]
[84.49292755 205.20806885]
[84.49292755 190.20806885]
[84.49292755 175.20806885]
[84.49292755 160.20806885]
[84.49292755 145.20806885]
[84.49292755 130.20806885]
[72.99112701 120.57955170]
[58.22507095 123.21841431]
[43.45901871 125.85727692]
[28.69296074 128.49613953]
[24.60840607 131.95098877]
[20.05862427 133.31182861]
[15.93592358 132.75955200]
[12.92558098 130.80882263]
[-1.97632110 132.52151489]
[-16.87822342 134.23420715]
[-31.78012657 135.94689941]
[-46.68202972 137.65959167]
[-61.58393097 139.37226868]
[-76.62911224 147.18757629]
[-88.30390167 134.89385986]
[-79.72253418 120.27207947]
[-63.29661942 124.47037506]
[-48.39471817 122.75768280]
[-33.49281693 121.04499054]
[-18.59091377 119.33230591]
[-3.68901086 117.61961365]
[11.21289158 115.90692139]
[26.05409622 113.73008728]
[40.82015228 111.09122467]
[55.58620834 108.45236206]
[70.35226440 105.81349182]
[75.01758575 87.41979218]
[88.94341278 76.76686859]
[105.03286743 77.05687714]
[112.75695038 64.19847870]
[120.48103333 51.34007645]
[120.95465851 35.52595901]
[134.14105225 28.60003853]
[121.99673462 19.77932739]
[110.66741180 9.93372536]
[100.23931885 -0.86183435]
[90.79180145 -12.52518940]
[82.39678192 -24.96757507]
[75.11813354 -38.09429169]
[69.01126862 -51.80543900]
[64.12265778 -65.99666595]
[60.48950577 -80.55995941]
[58.13946915 -95.38449097]
[57.09042358 -110.35742950]
[57.35036469 -125.36481476]
[58.91730499 -140.29244995]
[61.77932739 -155.02670288]
[65.91464233 -169.45544434]
[71.29177856 -183.46885681]
[77.86981201 -196.96028137]
[85.59867859 -209.82705688]
[94.41956329 -221.97125244]
[104.26532745 -233.30043030]
[115.06102753 -243.72837830]
[126.72451782 -253.17573547]
[139.16702271 -261.57058716]
[152.29383850 -268.84902954]
[166.00506592 -274.95571899]
[180.19636536 -279.84411621]
[194.75970459 -283.47708130]
[209.58427429 -285.82690430]
[224.55722046 -286.87573242]
[239.56462097 -286.61560059]
[254.49221802 -285.04843140]
[269.22644043 -282.18621826]
[283.65512085 -278.05068970]
[297.66845703 -272.67337036]
[311.15979004 -266.09512329]
[324.02645874 -258.36608887]
[336.17053223 -249.54502869]
[347.49957275 -239.69911194]
[357.92736816 -228.90325928]
[367.37457275 -217.23963928]
[375.76922607 -204.79702759]
[383.04751587 -191.67010498]
[389.15399170 -177.95878601]
[394.04220581 -163.76742554]
[397.67495728 -149.20402527]
[400.02456665 -134.37942505]
[401.07318115 -119.40646362]
[400.81283569 -104.39907837]
[399.24548340 -89.47149658]
[396.38302612 -74.73731995]
[392.24731445 -60.30869675]
[386.86978149 -46.29543304]
[380.29138184 -32.80418396]
[372.56213379 -19.93762398]
[363.74093628 -7.79367971]
[353.89483643 3.53522563]
[343.09884644 13.96287060]
[331.43508911 23.40989304]
[318.99237061 31.80439377]
[305.86532593 39.08248520]
[292.15393066 45.18877411]
[277.96249390 50.07678986]
[263.39904785 53.70932770]
[248.57441711 56.05874252]
[233.60144043 57.10715485]
[218.59405518 56.84658432]
[203.66650391 55.27901459]
[188.93235779 52.41637421]
[174.50379944 48.28045273]
[160.49061584 42.90272522]
[146.99945068 36.32412338]
[147.07830811 51.21852112]
[133.33943176 59.06415939]
[125.61534882 71.92256165]
[117.89126587 84.78096771]
[125.68467712 101.52445221]
[119.01218414 120.51631927]
[99.49292755 130.20806885]
[99.49292755 145.20806885]
[99.49292755 160.20806885]
[99.49292755 175.20806885]
[99.49292755 190.20806885]
[99.49292755 205.20806885]
[99.49292755 220.20806885]
[99.49292755 235.20806885]
[99.49292755 250.20806885]
[99.49292755 265.20806885]
[114.03282166 269.26937866]
[126.93720245 277.10391235]
[137.24848938 288.13021851]
[144.20150757 301.53015137]
[147.28030396 316.30932617]
[146.25640869 331.37100220]
[141.20581055 345.59753418]
[132.50328064 357.93319702]
[120.79462433 367.46261597]
[106.94868469 373.47863770]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 46]
[22 45]
[23 44]
[24 43]
[28 42]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[49 128]
[50 127]
[51 126]
[53 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
