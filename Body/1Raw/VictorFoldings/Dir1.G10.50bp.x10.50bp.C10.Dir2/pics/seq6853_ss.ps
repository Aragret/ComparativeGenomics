%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAUUGUAAGGGGGGGGGGCUUACUACUCCGGAAAAAAAGAACCAUUUGGAUACAUAGGUAUGGUCUGAxxxxxxxxxxAGCCUCUACCUGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCCCCCCCCCCCAUAUAGUAA\
) } def
/len { sequence length } bind def

/coor [
[74.59375763 379.60751343]
[60.74781799 373.59149170]
[49.03915405 364.06207275]
[40.33663177 351.72640991]
[35.28602982 337.49987793]
[34.26213837 322.43820190]
[37.34093857 307.65902710]
[44.29395676 294.25909424]
[54.60524368 283.23275757]
[67.50962067 275.39825439]
[82.04950714 271.33694458]
[82.04950714 256.33694458]
[82.04950714 241.33694458]
[82.04950714 226.33694458]
[82.04950714 211.33694458]
[82.04950714 196.33694458]
[82.04950714 181.33694458]
[82.04950714 166.33694458]
[82.04950714 151.33694458]
[82.04950714 136.33694458]
[70.06267548 127.31941986]
[55.65046310 131.47731018]
[41.23824692 135.63519287]
[39.92253876 150.75581360]
[33.22996521 164.37837219]
[22.06564331 174.66050720]
[7.93945694 180.21165466]
[-7.23814535 180.28106689]
[-21.41451645 174.85935974]
[-32.67242050 164.67977905]
[-39.48931503 151.11900330]
[-40.94327545 136.01104736]
[-36.83766174 121.39912415]
[-27.72772408 109.25937653]
[-14.84550953 101.23360443]
[0.06676923 98.40723419]
[14.99234867 101.16249847]
[27.91266823 109.12678528]
[37.08036041 121.22297668]
[51.49257278 117.06508636]
[65.90479279 112.90720367]
[65.39477539 94.46392059]
[73.82936859 78.87319183]
[88.31437683 69.97088623]
[104.58651733 69.53188324]
[110.36279297 55.68866348]
[116.13906097 41.84544373]
[121.33448029 27.77392387]
[125.94004059 13.49846458]
[130.54560852 -0.77699649]
[135.15116882 -15.05245686]
[131.90034485 -29.69595909]
[121.68686676 -40.68162155]
[111.47338867 -51.66728973]
[101.25990295 -62.65295410]
[85.43410492 -66.95133209]
[81.50587463 -82.87304688]
[93.51624298 -94.03920746]
[109.10997772 -88.96302032]
[112.24556732 -72.86643219]
[122.45905304 -61.88076782]
[132.67253113 -50.89510345]
[142.88601685 -39.90943909]
[157.78791809 -41.62212753]
[165.24282837 -54.63843918]
[172.69773865 -67.65474701]
[180.15264893 -80.67105865]
[168.49894714 -90.77552032]
[159.03128052 -102.94634247]
[152.10839844 -116.71937561]
[147.99208069 -131.56982422]
[146.83718872 -146.93223572]
[148.68588257 -162.22198486]
[153.46603394 -176.85762024]
[160.99407959 -190.28288269]
[170.98204041 -201.98788452]
[183.04855347 -211.52847290]
[196.73344421 -218.54310608]
[211.51524353 -222.76651001]
[226.83108521 -224.03971863]
[242.09812927 -222.31611633]
[256.73577881 -217.66304016]
[263.91827393 -230.83161926]
[257.14331055 -244.79154968]
[259.90084839 -260.06164551]
[271.13052368 -270.77023315]
[286.51431274 -272.79965210]
[300.13684082 -265.36953735]
[306.75994873 -251.33694458]
[303.83694458 -236.09767151]
[292.49176025 -225.51152039]
[277.08685303 -223.64910889]
[269.90435791 -210.48052979]
[281.20547485 -201.22743225]
[290.60592651 -190.04319763]
[297.78115845 -177.31161499]
[302.48294067 -163.46998596]
[304.54806519 -148.99401855]
[303.90399170 -134.38154602]
[300.57131958 -120.13537598]
[294.66326904 -106.74598694]
[286.38168335 -94.67465210]
[276.01022339 -84.33753967]
[263.90463257 -76.09138489]
[250.48059082 -70.22116089]
[236.19927979 -66.93021393]
[221.55172729 -66.33326721]
[207.04180908 -68.45237732]
[193.16896057 -73.21614838]
[185.71405029 -60.19983673]
[178.25914001 -47.18352890]
[170.80422974 -34.16721725]
[168.38868713 -21.84937859]
[160.24815369 -13.22181797]
[149.42663574 -10.44689274]
[144.82106018 3.82856798]
[140.21549988 18.10402870]
[135.60993958 32.37948990]
[136.82588196 34.97348404]
[137.05332947 38.22036743]
[136.03256226 41.73318863]
[133.65342712 45.03633118]
[129.98228455 47.62171555]
[124.20600891 61.46493530]
[118.42973328 75.30815125]
[127.87477875 84.79465485]
[132.61502075 97.74157715]
[131.46482849 111.88310242]
[124.30236816 124.59295654]
[112.15213776 133.37197876]
[97.04950714 136.33694458]
[97.04950714 151.33694458]
[97.04950714 166.33694458]
[97.04950714 181.33694458]
[97.04950714 196.33694458]
[97.04950714 211.33694458]
[97.04950714 226.33694458]
[97.04950714 241.33694458]
[97.04950714 256.33694458]
[97.04950714 271.33694458]
[111.58940125 275.39825439]
[124.49378204 283.23275757]
[134.80506897 294.25909424]
[141.75808716 307.65902710]
[144.83688354 322.43820190]
[143.81298828 337.49987793]
[138.76239014 351.72640991]
[130.05986023 364.06207275]
[118.35120392 373.59149170]
[104.50526428 379.60751343]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 41]
[22 40]
[23 39]
[45 125]
[46 124]
[47 123]
[48 118]
[49 117]
[50 116]
[51 115]
[52 63]
[53 62]
[54 61]
[55 60]
[64 112]
[65 111]
[66 110]
[67 109]
[82 93]
[83 92]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
