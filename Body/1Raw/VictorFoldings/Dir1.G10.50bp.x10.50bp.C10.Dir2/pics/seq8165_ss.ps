%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUUAUAACAAACGGGGGGGGGGCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCAxxxxxxxxxxCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCCCCCCCCCCCAUAAUUAUAACAAGC\
) } def
/len { sequence length } bind def

/coor [
[101.87714386 464.76574707]
[87.74605560 459.60562134]
[74.80387115 451.93655396]
[63.49139404 442.01977539]
[54.19392776 430.19302368]
[47.22813416 416.85913086]
[42.83126831 402.47225952]
[41.15309143 387.52239990]
[42.25075150 372.51873779]
[46.08686829 357.97232056]
[52.53078461 344.37854004]
[61.36302567 332.20043945]
[72.28276062 321.85278320]
[84.91807556 313.68801880]
[98.83861542 307.98422241]
[113.57024384 304.93566895]
[113.27757263 289.93850708]
[112.98489380 274.94137573]
[112.69221497 259.94424438]
[112.39954376 244.94708252]
[112.10686493 229.94993591]
[111.81418610 214.95280457]
[111.52151489 199.95565796]
[111.22883606 184.95851135]
[110.93615723 169.96136475]
[110.64347839 154.96421814]
[110.35080719 139.96707153]
[110.05812836 124.96993256]
[103.12496185 138.27148438]
[97.18997955 152.04739380]
[85.74337006 161.74147034]
[71.17821503 165.32702637]
[56.53955841 162.05444336]
[44.88782501 152.60791016]
[38.65896988 138.96234131]
[39.15522385 123.97055817]
[46.27314758 110.76643372]
[61.22460938 109.56068420]
[47.52539825 103.45072174]
[33.82618713 97.34075928]
[20.12697792 91.23079681]
[6.42776680 85.12083435]
[-7.27144384 79.01087189]
[-21.02961349 73.03485870]
[-34.84543228 67.19335175]
[-48.66125107 61.35185242]
[-62.47706985 55.51034927]
[-77.02613831 61.68288803]
[-91.64700317 55.68241501]
[-97.66537476 41.06890106]
[-91.51065826 26.51228905]
[-76.83433533 20.64875603]
[-62.34360504 26.95703316]
[-56.63556671 41.69453049]
[-42.81974792 47.53603363]
[-29.00392914 53.37753677]
[-15.18811131 59.21903992]
[-7.76511145 58.92591476]
[-1.16148269 65.31166077]
[12.53772831 71.42162323]
[26.23693848 77.53158569]
[39.93614960 83.64154816]
[53.63536072 89.75151062]
[67.33457184 95.86147308]
[73.62593079 91.77872467]
[86.20864105 83.61322784]
[92.50000000 79.53047943]
[92.50000000 64.53047943]
[92.50000000 49.53048325]
[77.92288208 45.63561249]
[64.85101318 38.09978104]
[54.17566681 27.43679047]
[46.62469864 14.37366390]
[42.71294785 -0.19893405]
[42.70711899 -15.28741932]
[46.60762024 -29.86303329]
[54.14849854 -42.93198776]
[64.81560516 -53.60321808]
[77.88165283 -61.14914322]
[92.45575714 -65.05526733]
[107.54424286 -65.05526733]
[122.11834717 -61.14914322]
[135.18438721 -53.60321808]
[145.85150146 -42.93198776]
[153.39237976 -29.86303329]
[157.29287720 -15.28741932]
[157.28704834 -0.19893405]
[153.37530518 14.37366390]
[145.82432556 27.43679047]
[135.14898682 38.09978104]
[122.07711792 45.63561249]
[107.50000000 49.53048325]
[107.50000000 64.53047943]
[107.50000000 79.53047943]
[113.36373901 84.20665741]
[122.71627808 72.47933960]
[134.44343567 81.83207703]
[125.09120941 93.55900574]
[130.95494080 98.23517609]
[145.57885742 94.89736176]
[160.20278931 91.55954742]
[174.82670593 88.22173309]
[189.45062256 84.88391876]
[189.84721375 69.80766296]
[193.98146057 55.30390930]
[201.59346008 42.28437805]
[212.20472717 31.56748772]
[225.14823914 23.82691002]
[239.61033630 19.54922295]
[254.68191528 19.00333023]
[269.41558838 22.22354126]
[282.88516235 29.00743675]
[294.24395752 38.92856979]
[302.77792358 51.36329269]
[307.95059204 65.52995300]
[309.43685913 80.53800964]
[307.14324951 95.44405365]
[301.21395874 109.31108093]
[292.02169800 121.26738739]
[280.14431763 130.56140137]
[266.32843018 136.60888672]
[251.44252014 139.02969360]
[236.42231750 137.67164612]
[222.21200562 132.62011719]
[209.70486450 124.19264984]
[199.68710327 112.91899872]
[192.78843689 99.50784302]
[178.16452026 102.84564972]
[163.54058838 106.18346405]
[148.91667175 109.52127838]
[134.29275513 112.85909271]
[125.05527496 124.67725372]
[125.34795380 139.67439270]
[125.64062500 154.67153931]
[125.93330383 169.66868591]
[126.22598267 184.66583252]
[126.51865387 199.66297913]
[126.81133270 214.66012573]
[127.10401154 229.65727234]
[127.39668274 244.65440369]
[127.68936157 259.65155029]
[127.98204041 274.64871216]
[128.27471924 289.64584351]
[128.56739807 304.64297485]
[143.40675354 307.11444092]
[157.53923035 312.27078247]
[170.48347473 319.93634033]
[181.79862976 329.85006714]
[191.09927368 341.67431641]
[198.06866455 355.00631714]
[202.46940613 369.39199829]
[204.15162659 384.34140015]
[203.05799866 399.34536743]
[199.22579956 413.89285278]
[192.78555298 427.48834229]
[183.95660400 439.66882324]
[173.03964233 450.01943970]
[160.40653992 458.18759155]
[146.48753357 463.89514160]
[131.75672913 466.94766235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[27 133]
[28 132]
[38 64]
[39 63]
[40 62]
[41 61]
[42 60]
[43 59]
[44 57]
[45 56]
[46 55]
[47 54]
[67 94]
[68 93]
[69 92]
[99 131]
[100 130]
[101 129]
[102 128]
[103 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
