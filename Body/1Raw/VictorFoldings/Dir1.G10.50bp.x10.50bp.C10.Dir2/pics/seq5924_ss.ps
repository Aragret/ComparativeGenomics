%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUUAUACUAAGGGGGGGGGGUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCxxxxxxxxxxACUAUCAAACUCCUGAGCCAACAACUUAAUAUGACUAGCUUACACAAUAGCCCCCCCCCCCUUUUAUAGUAA\
) } def
/len { sequence length } bind def

/coor [
[84.49540710 431.47308350]
[70.79325867 425.21218872]
[58.82814026 416.05886841]
[49.20022583 404.47216797]
[42.39244843 391.03335571]
[38.74628067 376.41647339]
[38.44461441 361.35470581]
[41.50257874 346.60357666]
[47.76678848 332.90292358]
[56.92303085 320.94003296]
[68.51203918 311.31491089]
[81.95250702 304.51040649]
[96.57027435 300.86776733]
[96.26626587 285.87084961]
[95.96226501 270.87393188]
[95.65825653 255.87701416]
[95.35425568 240.88009644]
[95.05025482 225.88317871]
[94.74624634 210.88626099]
[94.44224548 195.88934326]
[94.13823700 180.89242554]
[86.14458466 168.32456970]
[93.60060883 154.37042236]
[93.29660797 139.37350464]
[69.96035004 126.32163239]
[60.08710861 101.47306824]
[45.26008606 99.20165253]
[30.43305969 96.93023682]
[15.60603619 94.65881348]
[7.38309765 108.44315338]
[-5.46187782 118.00338745]
[-20.95188332 121.90480804]
[-36.71682358 119.58084106]
[-50.35615540 111.41515350]
[-59.80442429 98.67863464]
[-63.64401245 83.33171082]
[-78.51402283 81.36125946]
[-93.38404083 79.39080811]
[-108.25405121 77.42035675]
[-123.12406921 75.44990540]
[-139.62020874 79.36316681]
[-147.94712830 64.59500122]
[-136.06121826 52.50526428]
[-121.15361786 60.57989120]
[-106.28359985 62.55034256]
[-91.41358948 64.52079773]
[-76.54357147 66.49124908]
[-61.67356110 68.46170044]
[-55.09618759 56.03116608]
[-44.64218140 46.57938385]
[-31.55842972 41.26128769]
[-17.41495132 40.73712921]
[-3.91650200 45.09055710]
[7.30291033 53.81608963]
[14.87781525 65.87769318]
[17.87745285 79.83179474]
[32.70447540 82.10321045]
[47.53150177 84.37462616]
[62.35852814 86.64604187]
[66.15445709 78.79415131]
[71.56418610 71.95337677]
[78.32976532 66.44989014]
[86.12860870 62.54611969]
[94.58885193 60.42818832]
[103.30710602 60.19709015]
[111.86766815 61.86383438]
[119.86237335 65.34895325]
[129.63296509 53.96758270]
[139.40354919 42.58621216]
[149.17413330 31.20483971]
[139.06587219 20.09616089]
[130.39939880 7.82946491]
[123.30609131 -5.40928555]
[117.89347076 -19.41939545]
[114.24359894 -33.98847580]
[112.41181183 -48.89566040]
[112.42586517 -63.91495895]
[114.28556061 -78.81868744]
[117.96269989 -93.38091278]
[123.40153503 -107.38086700]
[130.51962280 -120.60631561]
[139.20904541 -132.85676575]
[149.33807373 -143.94650269]
[160.75317383 -153.70741272]
[173.28126526 -161.99151611]
[186.73245239 -168.67323303]
[200.90280151 -173.65126038]
[215.57749939 -176.85015869]
[230.53407288 -178.22140503]
[245.54579163 -177.74423218]
[260.38510132 -175.42585754]
[274.82699585 -171.30143738]
[288.65258789 -165.43348694]
[301.65225220 -157.91098022]
[313.62893677 -148.84793091]
[324.40106201 -138.38175964]
[333.80535889 -126.67111206]
[341.69921875 -113.89353180]
[347.96298218 -100.24271393]
[352.50170898 -85.92560577]
[355.24655151 -71.15924835]
[356.15597534 -56.16749573]
[355.21612549 -41.17761993]
[352.44128418 -26.41686821]
[347.87350464 -12.10900402]
[341.58203125 1.52906692]
[333.66223145 14.29059505]
[324.23419189 25.98211861]
[313.44082642 36.42639923]
[301.44577026 45.46509933]
[288.43084717 52.96120071]
[274.59338379 58.80105972]
[260.14312744 62.89614487]
[245.29914856 65.18437958]
[230.28648376 65.63108063]
[215.33271790 64.22946167]
[200.66455078 61.00077438]
[186.50433350 55.99397278]
[173.06675720 49.28495407]
[160.55551147 40.97542953]
[150.78491211 52.35680008]
[141.01432800 63.73817062]
[131.24374390 75.11954498]
[137.06253052 85.11451721]
[139.77363586 96.35764313]
[139.14973450 107.90617371]
[135.24313354 118.79177094]
[128.38139343 128.10168457]
[119.13990021 135.05528259]
[108.29352570 139.06950378]
[108.59752655 154.06642151]
[116.61292267 167.70695496]
[109.13515472 180.58842468]
[109.43916321 195.58534241]
[109.74316406 210.58226013]
[110.04717255 225.57917786]
[110.35117340 240.57609558]
[110.65518188 255.57301331]
[110.95918274 270.56994629]
[111.26319122 285.56686401]
[111.56719208 300.56378174]
[126.32056427 303.61102295]
[140.02575684 309.86526489]
[151.99530029 319.01281738]
[161.62882996 330.59481812]
[168.44311523 344.03033447]
[172.09637451 358.64544678]
[172.40533447 373.70706177]
[169.35452271 388.45968628]
[163.09695435 402.16336060]
[153.94650269 414.13070679]
[142.36216736 423.76141357]
[128.92498779 430.57244873]
[114.30899811 434.22216797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[23 131]
[24 130]
[26 59]
[27 58]
[28 57]
[29 56]
[36 48]
[37 47]
[38 46]
[39 45]
[40 44]
[67 123]
[68 122]
[69 121]
[70 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
