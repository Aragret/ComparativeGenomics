%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUCCCUCAGGGGGGGGGGCCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAAUGxxxxxxxxxxUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGCCCCCCCCCCACCCCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[79.50814819 380.55456543]
[65.66220856 374.53854370]
[53.95354843 365.00912476]
[45.25102615 352.67346191]
[40.20042419 338.44692993]
[39.17653275 323.38525391]
[42.25533295 308.60610962]
[49.20835114 295.20617676]
[59.51963806 284.17984009]
[72.42401886 276.34533691]
[86.96390533 272.28402710]
[86.96390533 257.28402710]
[86.96390533 242.28401184]
[86.96390533 227.28401184]
[86.96390533 212.28401184]
[86.96390533 197.28401184]
[86.96390533 182.28401184]
[86.96390533 167.28401184]
[86.96390533 152.28401184]
[86.96390533 137.28401184]
[86.96390533 122.28401947]
[84.24923706 116.07540131]
[83.63349915 110.02796936]
[84.84448242 104.75186157]
[87.44942474 100.72810364]
[72.58638000 98.70577240]
[66.55786896 111.81594849]
[57.08262634 122.67778015]
[44.93892288 130.41279602]
[31.12035179 134.39880371]
[16.75454712 134.31991577]
[3.01113963 130.19154358]
[-8.99345016 122.35847473]
[-18.28671455 111.46602631]
[-24.11883163 98.40692902]
[-26.02317047 84.24813843]
[-40.84092712 81.91703796]
[-55.65868759 79.58592987]
[-70.47644806 77.25482941]
[-85.57748413 83.64941406]
[-98.50106812 73.55422211]
[-95.95252228 57.35431290]
[-80.55358124 51.71477127]
[-68.14533997 62.43706894]
[-53.32758331 64.76817322]
[-38.50982666 67.09927368]
[-23.69206619 69.43038177]
[-16.76124954 55.41741180]
[-5.83311129 44.21107864]
[8.03555679 36.91220093]
[23.49830437 34.24290848]
[39.04975128 36.47521591]
[53.17212296 43.40333557]
[64.48340607 54.36260223]
[71.87257385 68.29321289]
[74.60871124 83.84272766]
[89.47175598 85.86505890]
[102.85803986 79.09694672]
[110.04055023 65.92835999]
[117.22306061 52.75978088]
[124.40557098 39.59119797]
[131.58807373 26.42261505]
[119.36553192 17.69526672]
[108.28408813 7.55825138]
[98.50536346 -3.84060073]
[90.17194366 -16.33506203]
[83.40537262 -29.74292564]
[78.30431366 -43.86866760]
[74.94316101 -58.50629044]
[73.37092590 -73.44233704]
[73.61053467 -88.45899200]
[75.65850067 -103.33727264]
[79.48495483 -117.86020660]
[85.03410339 -131.81600952]
[92.22500610 -145.00115967]
[100.95281219 -157.22337341]
[111.09024048 -168.30444336]
[122.48945618 -178.08274841]
[134.98423767 -186.41569519]
[148.39234924 -193.18176270]
[162.51828003 -198.28228760]
[177.15603638 -201.64289856]
[192.09213257 -203.21458435]
[207.10877991 -202.97439575]
[221.98698425 -200.92587280]
[236.50976562 -197.09887695]
[250.46536255 -191.54922485]
[263.65023804 -184.35781860]
[275.87213135 -175.62956238]
[286.95281982 -165.49171448]
[296.73071289 -154.09213257]
[305.06317139 -141.59704590]
[311.82876587 -128.18867493]
[316.92877197 -114.06255341]
[320.28881836 -99.42467499]
[321.85992432 -84.48851776]
[321.61920166 -69.47187805]
[319.57012939 -54.59375000]
[315.74258423 -40.07110214]
[310.19238281 -26.11571884]
[303.00048828 -12.93110371]
[294.27178955 -0.70953280]
[284.13351440 10.37076950]
[272.73358154 20.14821815]
[260.23818970 28.48023224]
[246.82955933 35.24530411]
[232.70324707 40.34477615]
[218.06524658 43.70428848]
[203.12902832 45.27484894]
[188.11239624 45.03355026]
[173.23434448 42.98391724]
[158.71183777 39.15583038]
[144.75666809 33.60512543]
[137.57415771 46.77370834]
[130.39164734 59.94228745]
[123.20913696 73.11087036]
[116.02662659 86.27945709]
[120.78044128 100.50623322]
[134.43667603 106.71163940]
[148.09292603 112.91704559]
[161.74916077 119.12245178]
[178.00973511 116.99507141]
[187.76623535 130.17622375]
[180.98200989 145.10627747]
[164.63609314 146.42646790]
[155.54376221 132.77870178]
[141.88751221 126.57328796]
[128.23127747 120.36788177]
[114.57503510 114.16247559]
[101.96390533 122.28401947]
[101.96390533 137.28401184]
[101.96390533 152.28401184]
[101.96390533 167.28401184]
[101.96390533 182.28401184]
[101.96390533 197.28401184]
[101.96390533 212.28401184]
[101.96390533 227.28401184]
[101.96390533 242.28401184]
[101.96390533 257.28402710]
[101.96390533 272.28402710]
[116.50379181 276.34533691]
[129.40817261 284.17984009]
[139.71945190 295.20617676]
[146.67248535 308.60610962]
[149.75128174 323.38525391]
[148.72738647 338.44692993]
[143.67678833 352.67346191]
[134.97425842 365.00912476]
[123.26560211 374.53854370]
[109.41966248 380.55456543]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 57]
[26 56]
[36 47]
[37 46]
[38 45]
[39 44]
[58 117]
[59 116]
[60 115]
[61 114]
[62 113]
[118 129]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
