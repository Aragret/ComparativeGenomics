%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACUUCUAGGAAGGGGGGGGGGUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAxxxxxxxxxxUAAUCCUCUCUCAAGGACUUCAAACUCUACUCCCACUAAUAGCUUUUUGACCCCCCCCCCUGACUUCUAGCAA\
) } def
/len { sequence length } bind def

/coor [
[100.56877899 421.17388916]
[86.29700470 416.36444092]
[73.39302063 408.59906006]
[62.46036911 398.24090576]
[54.01037979 385.77447510]
[48.43828583 371.78286743]
[46.00469589 356.92044067]
[46.82343674 341.88235474]
[50.85621262 327.37197876]
[57.91440582 314.06799316]
[67.66789246 302.59265137]
[79.66047668 293.48266602]
[93.33125305 287.16412354]
[108.04081726 283.93255615]
[108.04081726 268.93255615]
[108.04081726 253.93255615]
[108.04081726 238.93255615]
[108.04081726 223.93255615]
[108.04081726 208.93255615]
[108.04081726 193.93255615]
[108.04081726 178.93255615]
[108.04081726 163.93255615]
[108.04081726 148.93255615]
[108.04081726 133.93255615]
[88.72026062 131.19511414]
[74.83621216 118.90049744]
[70.29116821 101.92101288]
[55.56137848 99.08671570]
[40.83158875 96.25241089]
[26.10179710 93.41810608]
[11.37200642 90.58380127]
[5.19545126 104.32959747]
[-3.98509121 116.28009796]
[-15.67452621 125.79081726]
[-29.24245644 132.34886169]
[-43.95718384 135.60057068]
[-59.02515411 135.37057495]
[-73.63378143 131.67126465]
[-86.99523163 124.70217133]
[-98.38893890 114.83910370]
[-107.20046234 102.61397552]
[-112.95460510 88.68606567]
[-115.34104919 73.80649567]
[-114.23109436 58.77770233]
[-109.68460846 44.41016006]
[-101.94677734 31.47870255]
[-91.43488312 20.68070221]
[-78.71582794 12.59848213]
[-64.47552490 7.66790724]
[-49.48194504 6.15487576]
[-34.54366684 8.14098454]
[-20.46629906 13.51912594]
[-8.00901127 21.99926186]
[2.15638852 33.12406921]
[9.48169422 46.29360580]
[13.57186031 60.79764557]
[14.20630932 75.85401154]
[28.93610001 78.68831635]
[43.66588974 81.52262115]
[58.39567947 84.35692596]
[73.12547302 87.19122314]
[78.73604584 79.16374969]
[86.64788055 73.39124298]
[96.00472260 70.49842834]
[97.80130768 55.60640717]
[99.59790039 40.71438599]
[101.09616089 25.78940201]
[102.29548645 10.83742428]
[103.49481201 -4.11455250]
[104.54448700 -19.07777977]
[105.44440460 -34.05076218]
[106.34431458 -49.02374268]
[107.24423218 -63.99672318]
[93.70920563 -70.97690582]
[84.18850708 -82.86286926]
[80.33164978 -97.59529877]
[82.80686188 -112.62171936]
[91.18530273 -125.33869934]
[104.01535034 -133.54295349]
[119.07411957 -135.81304932]
[133.75259399 -131.75567627]
[145.50762939 -122.07378387]
[152.30261230 -108.44483948]
[152.96025085 -93.23013306]
[147.36662292 -79.06569672]
[136.49084473 -68.40561676]
[122.21721649 -63.09680557]
[121.31729889 -48.12382507]
[120.41738129 -33.15084457]
[119.51746368 -18.17786407]
[122.27082062 -11.27374172]
[118.44679260 -2.91522551]
[117.24745941 12.03675175]
[116.04813385 26.98872757]
[118.44487000 31.17852020]
[118.19595337 36.92678452]
[114.48992157 42.51097870]
[112.69332886 57.40299606]
[110.89674377 72.29502106]
[118.93878937 75.72208405]
[125.88010406 81.50170898]
[131.03004456 89.27355957]
[133.81759644 98.47476959]
[133.85041809 108.37990570]
[148.84967041 108.52997589]
[163.84890747 108.68005371]
[178.84815979 108.83012390]
[191.08471680 96.36618042]
[208.21301270 96.57604980]
[219.67996216 108.84385681]
[234.67921448 108.69377899]
[249.67846680 108.54370880]
[257.15444946 95.12711334]
[270.34539795 87.25977325]
[285.70294189 87.05796814]
[299.09603882 94.57598877]
[306.92199707 107.79151154]
[307.07565308 123.14963531]
[299.51571655 136.51910400]
[286.27572632 144.30358887]
[270.91720581 144.40910339]
[257.57150269 136.80728149]
[249.82853699 123.54296112]
[234.82928467 123.69303131]
[219.83003235 123.84310913]
[212.16113281 134.23803711]
[199.71420288 138.36296082]
[186.98207092 134.49206543]
[178.69808960 123.82937622]
[163.69883728 123.67929840]
[148.69958496 123.52922821]
[133.70034790 123.37915039]
[123.04081726 133.93255615]
[123.04081726 148.93255615]
[123.04081726 163.93255615]
[123.04081726 178.93255615]
[123.04081726 193.93255615]
[123.04081726 208.93255615]
[123.04081726 223.93255615]
[123.04081726 238.93255615]
[123.04081726 253.93255615]
[123.04081726 268.93255615]
[123.04081726 283.93255615]
[137.75036621 287.16412354]
[151.42114258 293.48266602]
[163.41374207 302.59265137]
[173.16722107 314.06799316]
[180.22541809 327.37197876]
[184.25819397 341.88235474]
[185.07693481 356.92044067]
[182.64334106 371.78286743]
[177.07124329 385.77447510]
[168.62126160 398.24090576]
[157.68859863 408.59906006]
[144.78462219 416.36444092]
[130.51284790 421.17388916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[27 61]
[28 60]
[29 59]
[30 58]
[31 57]
[64 99]
[65 98]
[66 97]
[67 94]
[68 93]
[69 92]
[70 90]
[71 89]
[72 88]
[73 87]
[104 132]
[105 131]
[106 130]
[107 129]
[110 125]
[111 124]
[112 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
