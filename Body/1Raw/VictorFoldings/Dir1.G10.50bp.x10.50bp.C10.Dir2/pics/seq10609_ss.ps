%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAACCCUGGGGGGGGGGGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCUAACAAAAxxxxxxxxxxACCCAAAAAGGCAUAAUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCCCCCCCCCCCAUCCUAACCCU\
) } def
/len { sequence length } bind def

/coor [
[1.43242061 304.42016602]
[-9.78501320 298.62130737]
[-20.66254425 292.20748901]
[-31.16649437 285.19860840]
[-41.26434326 277.61630249]
[-50.92482758 269.48410034]
[-60.11803818 260.82717896]
[-68.81551361 251.67231750]
[-76.99031830 242.04786682]
[-84.61715698 231.98361206]
[-91.67240143 221.51074219]
[-98.13420868 210.66165161]
[-111.46463013 217.53915405]
[-124.79505157 224.41664124]
[-138.12547302 231.29412842]
[-151.45588684 238.17163086]
[-164.78631592 245.04911804]
[-178.11672974 251.92660522]
[-191.15748596 259.33868408]
[-203.88714600 267.27313232]
[-216.61682129 275.20758057]
[-229.34648132 283.14205933]
[-234.35903931 298.38192749]
[-249.44886780 303.82955933]
[-263.04034424 295.30596924]
[-264.70724487 279.34976196]
[-253.17086792 268.20114136]
[-237.28094482 270.41238403]
[-224.55126953 262.47793579]
[-211.82160950 254.54347229]
[-199.09194946 246.60900879]
[-198.34526062 243.84899902]
[-196.42787170 241.22817993]
[-193.39070129 239.20623779]
[-189.45448303 238.21449280]
[-184.99423218 238.59619141]
[-171.66380310 231.71870422]
[-158.33338928 224.84120178]
[-145.00296021 217.96371460]
[-131.67254639 211.08622742]
[-118.34212494 204.20872498]
[-105.01170349 197.33123779]
[-113.04979706 178.18536377]
[-119.30428314 158.38493347]
[-123.72278595 138.09571838]
[-126.26831818 117.48757935]
[-126.91957855 96.73303223]
[-125.67110443 76.00583649]
[-122.53335571 55.47951126]
[-117.53259277 35.32590485]
[-110.71069336 15.71373940]
[-102.12474823 -3.19279647]
[-91.84666443 -21.23542023]
[-79.96246338 -38.26308441]
[-66.57165527 -54.13323212]
[-51.78633499 -68.71300507]
[-35.73028564 -81.88034058]
[-44.29930878 -94.19178772]
[-52.86833191 -106.50324249]
[-61.43735504 -118.81469727]
[-76.50243378 -125.29354858]
[-78.15514374 -141.60919189]
[-64.69532776 -150.97750854]
[-49.96928024 -143.76116943]
[-49.12590408 -127.38372040]
[-40.55688095 -115.07226562]
[-31.98785782 -102.76081085]
[-23.41883469 -90.44936371]
[-10.71277618 -98.10565186]
[2.46633601 -104.91547394]
[16.06218910 -110.84973907]
[30.01669312 -115.88307953]
[44.27022171 -119.99400330]
[58.76187134 -123.16492462]
[73.42972565 -125.38231659]
[88.21110535 -126.63669586]
[103.04285431 -126.92269135]
[117.86161041 -126.23910522]
[132.60404968 -124.58883667]
[147.20716858 -121.97894287]
[161.60858154 -118.42058563]
[175.74674988 -113.92895508]
[189.56127930 -108.52324677]
[202.99311829 -102.22657013]
[215.98490906 -95.06581116]
[228.48109436 -87.07157898]
[240.42832947 -78.27803040]
[251.77552795 -68.72272491]
[262.47421265 -58.44651031]
[273.55331421 -68.55855560]
[284.63244629 -78.67059326]
[295.71154785 -88.78263092]
[291.76733398 -103.57120514]
[295.15881348 -118.49623108]
[305.10662842 -130.12805176]
[319.32485962 -135.79377747]
[334.54626465 -134.19143677]
[347.27307129 -125.68924713]
[354.58074951 -112.24095917]
[354.79003906 -96.93688202]
[347.85287476 -83.29377747]
[335.36334229 -74.44674683]
[320.19143677 -72.42874908]
[305.82357788 -77.70352936]
[294.74447632 -67.59148407]
[283.66537476 -57.47944641]
[272.58627319 -47.36740494]
[280.51577759 -37.53988266]
[287.88641357 -27.28652573]
[294.67535400 -16.63908195]
[300.86154175 -5.63051558]
[306.42587280 5.70509148]
[311.35107422 17.33264160]
[315.62191772 29.21613693]
[319.22518921 41.31878281]
[322.14971924 53.60311127]
[324.38644409 66.03108978]
[325.92846680 78.56423950]
[326.77099609 91.16374969]
[326.91143799 103.79061890]
[326.34933472 116.40575409]
[325.08642578 128.97009277]
[323.12664795 141.44474792]
[320.47604370 153.79107666]
[317.14285278 165.97087097]
[313.13732910 177.94641113]
[308.47195435 189.68061829]
[303.16110229 201.13717651]
[297.22128296 212.28060913]
[290.67083740 223.07640076]
[283.53005981 233.49114990]
[275.82104492 243.49259949]
[267.56768799 253.04977417]
[258.79553223 262.13311768]
[249.53173828 270.71444702]
[239.80497742 278.76727295]
[229.64537048 286.26660156]
[219.08438110 293.18923950]
[208.15467834 299.51373291]
[196.89013672 305.22055054]
[185.32560730 310.29196167]
[173.49690247 314.71231079]
[161.44065857 318.46786499]
[149.19418335 321.54705811]
[136.79539490 323.94030762]
[124.28268433 325.64025879]
[111.69479370 326.64157104]
[99.07069397 326.94119263]
[86.44947815 326.53817749]
[73.87020874 325.43380737]
[61.37184143 323.63146973]
[48.99307251 321.13674927]
[36.77222061 317.95736694]
[24.74712944 314.10317993]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 42]
[13 41]
[14 40]
[15 39]
[16 38]
[17 37]
[18 36]
[19 31]
[20 30]
[21 29]
[22 28]
[57 68]
[58 67]
[59 66]
[60 65]
[89 107]
[90 106]
[91 105]
[92 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
