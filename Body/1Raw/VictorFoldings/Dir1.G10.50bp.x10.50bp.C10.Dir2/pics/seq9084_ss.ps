%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAACACAUGGGGGGGGGGCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAxxxxxxxxxxACUAGGCGGCUAUGGUAUAAUACGCCUCACACUCAUUCUCAACCCCCUGACCCCCCCCCCCAAAACACAU\
) } def
/len { sequence length } bind def

/coor [
[90.51964569 371.42681885]
[76.67370605 365.41079712]
[64.96504211 355.88137817]
[56.26251984 343.54568481]
[51.21191788 329.31918335]
[50.18802643 314.25750732]
[53.26682663 299.47833252]
[60.21984863 286.07839966]
[70.53113556 275.05206299]
[83.43551636 267.21755981]
[97.97540283 263.15625000]
[97.97540283 248.15625000]
[97.97540283 233.15625000]
[97.97540283 218.15625000]
[97.97540283 203.15625000]
[97.97540283 188.15625000]
[97.97540283 173.15625000]
[97.97540283 158.15625000]
[97.97540283 143.15625000]
[97.97540283 128.15625000]
[77.56196594 109.74177551]
[83.90619659 86.99086761]
[76.45128632 73.97455597]
[68.99637604 60.95824814]
[61.54146576 47.94194031]
[54.08655548 34.92562866]
[46.63164520 21.90932083]
[39.17673492 8.89301109]
[27.91786575 8.66930485]
[17.94780731 3.70179558]
[11.13948822 -4.95965910]
[8.72161579 -15.58291245]
[-5.69060040 -19.74080086]
[-14.86994076 -19.11505508]
[-20.35771370 -24.13800430]
[-34.68030930 -28.59482002]
[-49.00290680 -33.05163574]
[-63.32550430 -37.50844955]
[-77.64810181 -41.96526718]
[-88.42118835 -31.09332085]
[-103.01622009 -26.48424911]
[-118.07937622 -29.19718361]
[-130.14924622 -38.60871506]
[-136.45225525 -52.55613327]
[-135.54003906 -67.83443451]
[-127.62220001 -80.93276978]
[-114.51820374 -88.84123993]
[-99.23925018 -89.74253845]
[-85.29634094 -83.42955017]
[-75.89344788 -71.35295105]
[-73.19128418 -56.28786469]
[-58.86869049 -51.83104706]
[-44.54609299 -47.37423325]
[-30.22349358 -42.91741562]
[-15.90089703 -38.46060181]
[-1.53271306 -34.15301514]
[12.87950325 -29.99512863]
[17.07963753 -34.79470062]
[22.36876678 -38.35870743]
[28.39418602 -40.44948196]
[29.95176697 -55.36839294]
[31.50934792 -70.28730774]
[33.06692886 -85.20621490]
[34.62451172 -100.12512970]
[36.18209076 -115.04404449]
[37.73967361 -129.96295166]
[39.29725266 -144.88186646]
[25.25768852 -150.43103027]
[13.23659134 -159.56315613]
[4.12600899 -171.60060120]
[-1.39799440 -185.65008545]
[-2.92550063 -200.66903687]
[-0.34315854 -215.54298401]
[6.15740490 -229.16815186]
[16.09380531 -240.53347778]
[28.72869301 -248.79556274]
[43.12448120 -253.34132385]
[58.21289825 -253.83341980]
[72.87429047 -250.23535156]
[86.02068329 -242.81410217]
[96.67652893 -232.12039185]
[104.05108643 -218.94775391]
[107.59712219 -204.27368164]
[107.05149078 -189.18710327]
[102.45468903 -174.80754089]
[94.14782715 -162.20204163]
[82.74732208 -152.30603027]
[69.09917450 -145.85383606]
[54.21616364 -143.32427979]
[52.65858459 -128.40538025]
[51.10100174 -113.48646545]
[49.54342270 -98.56755066]
[47.98583984 -83.64863586]
[46.42826080 -68.72972870]
[44.87067795 -53.81081390]
[43.31309891 -38.89189911]
[58.15553665 -21.31306076]
[52.19304657 1.43810117]
[59.64795685 14.45441055]
[67.10286713 27.47072029]
[74.55777740 40.48703003]
[82.01268768 53.50333786]
[89.46759796 66.51964569]
[96.92250824 79.53595734]
[110.57114410 79.34188080]
[122.86351776 88.22537231]
[127.92584991 104.12558746]
[142.56935120 107.37641144]
[157.21284485 110.62724304]
[164.87890625 97.58551025]
[176.20123291 87.55255127]
[190.07055664 81.51128387]
[205.12812805 80.05358124]
[219.89874268 83.32224274]
[232.93533325 90.99703979]
[242.96070862 102.32608032]
[248.99267578 116.19945526]
[250.44029236 131.25799561]
[247.16172791 146.02641296]
[239.47819519 159.05786133]
[228.14244080 169.07563782]
[214.26502991 175.09831238]
[199.20552063 176.53582764]
[184.43930054 173.24737549]
[171.41300964 165.55511475]
[161.40283203 154.21264648]
[155.38946533 140.33120728]
[153.96202087 125.27074432]
[139.31852722 122.01991272]
[124.67502594 118.76908875]
[112.97540283 128.15625000]
[112.97540283 143.15625000]
[112.97540283 158.15625000]
[112.97540283 173.15625000]
[112.97540283 188.15625000]
[112.97540283 203.15625000]
[112.97540283 218.15625000]
[112.97540283 233.15625000]
[112.97540283 248.15625000]
[112.97540283 263.15625000]
[127.51528931 267.21755981]
[140.41966248 275.05206299]
[150.73095703 286.07839966]
[157.68397522 299.47833252]
[160.76277161 314.25750732]
[159.73887634 329.31918335]
[154.68827820 343.54568481]
[145.98574829 355.88137817]
[134.27709961 365.41079712]
[120.43115234 371.42681885]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 104]
[23 103]
[24 102]
[25 101]
[26 100]
[27 99]
[28 98]
[32 57]
[33 56]
[35 55]
[36 54]
[37 53]
[38 52]
[39 51]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
[66 90]
[67 89]
[107 130]
[108 129]
[109 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
