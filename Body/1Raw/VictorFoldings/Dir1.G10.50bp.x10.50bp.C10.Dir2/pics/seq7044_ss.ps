%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAUCAAUAGGGGGGGGGGGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUUCACUGAUUUCCCCUAUUxxxxxxxxxxCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCACCCCCCCCCCUCCUAGCAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 449.21710205]
[71.01555634 443.66409302]
[58.81560135 434.79776001]
[49.20452881 423.17544556]
[42.78650284 409.52774048]
[39.96496582 394.71255493]
[40.91728210 379.66116333]
[45.58358765 365.31976318]
[53.67055511 352.58978271]
[64.66983032 342.27151489]
[77.88998413 335.01354980]
[92.50000000 331.27209473]
[92.50000000 316.27209473]
[92.50000000 301.27209473]
[92.50000000 286.27209473]
[92.50000000 271.27209473]
[92.50000000 256.27209473]
[92.50000000 241.27210999]
[92.50000000 226.27210999]
[92.50000000 211.27210999]
[92.50000000 196.27210999]
[84.76270294 183.54483032]
[92.50000000 169.74465942]
[92.50000000 154.74465942]
[92.50000000 139.74465942]
[78.78636169 134.43646240]
[67.87685394 124.57624817]
[61.21357346 111.46740723]
[59.67729950 96.84274292]
[63.47111130 82.63542175]
[72.09352112 70.72344971]
[63.93685150 58.13500595]
[55.78018570 45.54656601]
[47.62351990 32.95812988]
[24.92960167 38.06453705]
[2.19146323 33.33359528]
[-16.52392960 19.64210320]
[-27.88179779 -0.53318858]
[-29.87373161 -23.56358337]
[-22.17278862 -45.32107162]
[-33.76183701 -54.84440994]
[-45.35088348 -64.36774445]
[-56.93993378 -73.89108276]
[-68.52898407 -83.41442108]
[-77.20343781 -86.47212982]
[-80.25558472 -93.25421143]
[-91.64665985 -103.01348114]
[-109.02962494 -101.33426666]
[-122.01368713 -112.50322723]
[-122.91483307 -129.26899719]
[-134.50389099 -138.79232788]
[-146.09292603 -148.31567383]
[-162.13549805 -148.19075012]
[-172.12318420 -160.74565125]
[-168.39430237 -176.34933472]
[-153.80932617 -183.03198242]
[-139.55659485 -175.66725159]
[-136.56959534 -159.90472412]
[-124.98054504 -150.38137817]
[-113.39150238 -140.85804749]
[-100.83242798 -143.89483643]
[-88.64266968 -139.05351257]
[-81.37643433 -127.90080261]
[-81.88738251 -114.40455627]
[-70.49630737 -104.64528656]
[-59.00564575 -95.00347137]
[-47.41659546 -85.48013306]
[-35.82754898 -75.95679474]
[-24.23849869 -66.43345642]
[-12.64945030 -56.91011810]
[-6.20865870 -62.03625488]
[0.93389124 -66.13575745]
[8.61581993 -69.11413574]
[16.66229248 -70.90242004]
[24.88999748 -71.45872498]
[33.11132050 -70.76925659]
[41.13863373 -68.84862518]
[48.78855515 -65.73956299]
[55.88615799 -61.51196671]
[62.26897049 -56.26131439]
[67.79067993 -50.10652542]
[72.32450104 -43.18725204]
[75.76607513 -35.66073227]
[78.03588867 -27.69818687]
[79.08108521 -19.48095512]
[78.87672424 -11.19634151]
[77.42635345 -3.03336167]
[74.76196289 4.82158089]
[70.94327545 12.18894386]
[66.05641174 18.90015411]
[60.21195984 24.80146217]
[68.36862183 37.38990021]
[76.52529144 49.97834015]
[84.68195343 62.56678009]
[100.65745544 59.55922699]
[116.52674866 63.08449173]
[129.72630310 72.57309723]
[138.12387085 86.49225616]
[152.94635010 84.19138336]
[167.76882935 81.89051056]
[182.31578064 78.23180389]
[196.46310425 73.24648285]
[210.61041260 68.26116180]
[224.75773621 63.27583694]
[235.01060486 50.47698593]
[251.17805481 53.22393799]
[256.62838745 68.69086456]
[245.75477600 80.96672058]
[229.74305725 77.42315674]
[215.59574890 82.40847778]
[201.44842529 87.39379883]
[187.30110168 92.37911987]
[201.29306030 97.78517914]
[210.25874329 109.81082916]
[211.44543457 124.76381683]
[204.48875427 138.05308533]
[191.52464294 145.59840393]
[176.53349304 145.08309937]
[164.11807251 136.66542053]
[158.09033203 122.92983246]
[160.30096436 108.09362030]
[170.06970215 96.71298981]
[155.24722290 99.01386261]
[140.42474365 101.31474304]
[137.70236206 114.64309692]
[130.71498108 126.31498718]
[120.25302887 135.01004028]
[107.50000000 139.74465942]
[107.50000000 154.74465942]
[107.50000000 169.74465942]
[115.23729706 183.54483032]
[107.50000000 196.27210999]
[107.50000000 211.27210999]
[107.50000000 226.27210999]
[107.50000000 241.27210999]
[107.50000000 256.27209473]
[107.50000000 271.27209473]
[107.50000000 286.27209473]
[107.50000000 301.27209473]
[107.50000000 316.27209473]
[107.50000000 331.27209473]
[122.11001587 335.01354980]
[135.33016968 342.27151489]
[146.32945251 352.58978271]
[154.41641235 365.31976318]
[159.08271790 379.66116333]
[160.03503418 394.71255493]
[157.21350098 409.52774048]
[150.79547119 423.17544556]
[141.18440247 434.79776001]
[128.98443604 443.66409302]
[114.96250153 449.21710205]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[25 128]
[31 94]
[32 93]
[33 92]
[34 91]
[40 70]
[41 69]
[42 68]
[43 67]
[44 66]
[46 65]
[47 64]
[50 60]
[51 59]
[52 58]
[98 124]
[99 123]
[100 122]
[101 112]
[102 111]
[103 110]
[104 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
