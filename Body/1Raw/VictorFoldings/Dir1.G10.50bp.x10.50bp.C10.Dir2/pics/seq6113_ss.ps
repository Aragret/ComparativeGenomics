%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCACAAACACGGGGGGGGGGUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCUCCCxxxxxxxxxxUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCCCCCCCCCCCACAACCAC\
) } def
/len { sequence length } bind def

/coor [
[110.68542480 556.72924805]
[96.83948517 550.71319580]
[85.13082123 541.18377686]
[76.42829895 528.84808350]
[71.37769318 514.62158203]
[70.35380554 499.55990601]
[73.43260193 484.78073120]
[80.38562775 471.38082886]
[90.69690704 460.35449219]
[103.60128784 452.51998901]
[118.14117432 448.45864868]
[118.14117432 433.45864868]
[118.14117432 418.45864868]
[118.14117432 403.45864868]
[118.14117432 388.45864868]
[118.14117432 373.45864868]
[118.14117432 358.45864868]
[118.14117432 343.45864868]
[118.14117432 328.45864868]
[118.14117432 313.45864868]
[118.14117432 298.45864868]
[116.73887634 283.52435303]
[113.94654846 268.78656006]
[111.15422821 254.04873657]
[108.36190033 239.31094360]
[105.41641998 224.60298157]
[102.31809235 209.92645264]
[87.86218262 201.38920593]
[83.94602966 184.71743774]
[93.45577240 170.07154846]
[90.05279541 155.46266174]
[86.64981079 140.85375977]
[83.24683380 126.24487305]
[72.91963196 115.36604309]
[58.50741577 111.20816040]
[44.09519958 107.05027008]
[29.68298340 102.89237976]
[20.22831535 114.79522705]
[6.93589497 122.16950989]
[-8.16728115 123.89069366]
[-22.77808952 119.69632721]
[-34.66848755 110.22601318]
[-42.02527237 96.92390442]
[-43.72659302 81.81847382]
[-39.51300812 67.21319580]
[-30.02705956 55.33526611]
[-16.71528244 47.99598312]
[-1.60763061 46.31453705]
[12.99209213 50.54732895]
[24.85753250 60.04889679]
[32.17929840 73.37031555]
[33.84086990 88.48016357]
[48.25308609 92.63805389]
[62.66530228 96.79594421]
[77.07752228 100.95382690]
[84.04512024 87.75550842]
[96.22762299 83.13542938]
[99.63059998 68.52653503]
[103.03357697 53.91764450]
[89.01668549 48.50721359]
[75.88922119 41.19860077]
[63.90672302 32.13405991]
[53.30243301 21.49003792]
[44.28276825 9.47372627]
[37.02329636 -3.68097591]
[31.66532326 -17.71800804]
[28.31314850 -32.36413574]
[27.03202057 -47.33426666]
[27.84687805 -62.33700562]
[30.74185753 -77.08031464]
[35.66061020 -91.27722168]
[42.50738907 -104.65136719]
[51.14891815 -116.94242096]
[61.41699219 -127.91114044]
[73.11173248 -137.34400940]
[86.00550842 -145.05743408]
[99.84732819 -150.90124512]
[114.36776733 -154.76168823]
[129.28416443 -156.56364441]
[144.30618286 -156.27201843]
[159.14141846 -153.89250183]
[173.50108337 -149.47140503]
[187.10566711 -143.09477234]
[199.69035339 -134.88674927]
[211.01019287 -125.00709534]
[220.84481812 -113.64812469]
[229.00280762 -101.03093719]
[235.32534790 -87.40113831]
[239.68939209 -73.02402496]
[242.00999451 -58.17946625]
[242.24195862 -43.15640640]
[240.38078308 -28.24727631]
[236.46270752 -13.74228477]
[230.56396484 0.07622156]
[222.79942322 12.93926334]
[213.32017517 24.59645653]
[202.31077576 34.82089233]
[189.98548889 43.41354752]
[176.58427429 50.20716095]
[162.36795044 55.06949997]
[147.61325073 57.90591049]
[132.60740662 58.66118622]
[117.64247131 57.32062149]
[114.23949432 71.92951202]
[110.83651733 86.53840637]
[118.63439941 107.56603241]
[97.85572815 122.84189606]
[101.25870514 137.45079041]
[104.66168213 152.05967712]
[108.06465912 166.66856384]
[120.27581787 172.44309998]
[126.81789398 184.03747559]
[125.48675537 197.08746338]
[116.99462128 206.82812500]
[120.09294128 221.50465393]
[124.95668793 229.31463623]
[123.09970856 236.51861572]
[125.89202881 251.25642395]
[128.68435669 265.99423218]
[131.47668457 280.73202515]
[138.95643616 267.72998047]
[152.20944214 260.70446777]
[167.16853333 261.81155396]
[179.24295044 270.71148682]
[184.72720337 284.67297363]
[181.93824768 299.41140747]
[171.73197937 310.40377808]
[157.24057007 314.27664185]
[142.91125488 309.84149170]
[133.14117432 298.45864868]
[133.14117432 313.45864868]
[133.14117432 328.45864868]
[133.14117432 343.45864868]
[133.14117432 358.45864868]
[133.14117432 373.45864868]
[133.14117432 388.45864868]
[133.14117432 403.45864868]
[133.14117432 418.45864868]
[133.14117432 433.45864868]
[133.14117432 448.45864868]
[147.68106079 452.51998901]
[160.58544922 460.35449219]
[170.89672852 471.38082886]
[177.84974670 484.78073120]
[180.92854309 499.55990601]
[179.90466309 514.62158203]
[174.85404968 528.84808350]
[166.15153503 541.18377686]
[154.44287109 550.71319580]
[140.59693909 556.72924805]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 120]
[23 119]
[24 118]
[25 117]
[26 115]
[27 114]
[30 110]
[31 109]
[32 108]
[33 107]
[34 55]
[35 54]
[36 53]
[37 52]
[57 105]
[58 104]
[59 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
