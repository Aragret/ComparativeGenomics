%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUAACUAGGGGGGGGGGAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGxxxxxxxxxxUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUCCCCCCCCCCAAUACUAACUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 424.24563599]
[71.01555634 418.69262695]
[58.81560135 409.82629395]
[49.20452881 398.20397949]
[42.78650284 384.55627441]
[39.96496582 369.74108887]
[40.91728210 354.68972778]
[45.58358765 340.34829712]
[53.67055511 327.61834717]
[64.66983032 317.30007935]
[77.88998413 310.04208374]
[92.50000000 306.30065918]
[92.50000000 291.30065918]
[92.50000000 276.30065918]
[92.50000000 261.30065918]
[92.50000000 246.30065918]
[92.50000000 231.30065918]
[92.50000000 216.30065918]
[92.50000000 201.30065918]
[92.50000000 186.30065918]
[92.50000000 171.30065918]
[92.50000000 156.30065918]
[83.99333191 154.49588013]
[75.86187744 151.41366577]
[68.29624176 147.12626648]
[61.47376633 141.73420715]
[55.55438232 135.36384583]
[50.67684174 128.16452026]
[46.95548248 120.30500031]
[44.47752762 111.96951294]
[43.30107117 103.35344696]
[43.45368958 94.65877533]
[44.93180084 86.08930969]
[31.00108337 80.52737427]
[17.07036781 74.96543884]
[3.13965106 69.40349579]
[-10.79106522 63.84156036]
[-24.72178078 58.27962494]
[-38.65249634 52.71768570]
[-48.73053741 64.04062653]
[-62.07494354 71.23107910]
[-77.07431030 73.42076874]
[-91.91739655 70.34528351]
[-104.81182098 62.37599564]
[-114.20053101 50.47523499]
[-118.94977570 36.08008194]
[-118.48607635 20.92881966]
[-112.86542511 6.85103416]
[-102.76653290 -4.45331144]
[-89.40889740 -11.61916351]
[-74.40551758 -13.78120899]
[-59.56812668 -10.67837238]
[-46.68840790 -2.68533444]
[-37.32165146 9.23270512]
[-32.59893799 23.63658714]
[-33.09056091 38.78696823]
[-19.15984344 44.34890747]
[-5.22912788 49.91084290]
[8.70158863 55.47278214]
[22.63230515 61.03471756]
[36.56301880 66.59665680]
[50.49373627 72.15859222]
[66.70938873 53.98099136]
[89.04830933 44.26783371]
[88.12489319 29.29628372]
[87.20147705 14.32473373]
[72.59883118 10.31956387]
[60.08927536 1.78787196]
[51.02975845 -10.34488773]
[46.40298462 -24.76264381]
[46.71083450 -39.90146637]
[51.91991425 -54.11920929]
[61.46518326 -65.87363434]
[74.31124115 -73.88971710]
[89.06463623 -77.29792786]
[104.12504578 -75.72856903]
[117.85881805 -69.35187531]
[128.77621460 -58.85954285]
[135.69300842 -45.38969803]
[137.85890198 -30.40345192]
[135.03897095 -15.52639866]
[127.53910065 -2.37229085]
[116.17280579 7.63201284]
[102.17302704 13.40131950]
[103.09644318 28.37286949]
[104.01985168 43.34442139]
[128.90249634 51.10562897]
[147.69842529 69.16374969]
[161.26031494 62.75477219]
[174.82221985 56.34579849]
[188.38410950 49.93682098]
[185.25364685 35.19582748]
[185.60766602 20.13025856]
[189.42709351 5.55258083]
[196.50595093 -7.75104952]
[206.46247864 -19.06318474]
[218.75971985 -27.77377510]
[232.73452759 -33.41307068]
[247.63323975 -35.67694855]
[262.65237427 -34.44332504]
[276.98202515 -29.77872276]
[289.84933472 -21.93470192]
[300.56045532 -11.33427811]
[308.53768921 1.45087945]
[313.35086060 15.73128414]
[314.74041748 30.73681068]
[312.63140869 45.65823364]
[307.13757324 59.69085312]
[298.55517578 72.07791138]
[287.34707642 82.15139008]
[274.11770630 89.36804199]
[259.58047485 93.33867645]
[244.51939392 93.84916687]
[229.74667358 90.87197876]
[216.05900574 84.56767273]
[204.19453430 75.27622223]
[194.79309082 63.49871826]
[181.23118591 69.90769196]
[167.66929626 76.31667328]
[154.10740662 82.72564697]
[156.15872192 91.50222015]
[156.79586792 100.49278259]
[156.00282288 109.47093201]
[153.79951477 118.21059418]
[150.24147034 126.49168396]
[145.41824341 134.10566711]
[139.45133972 140.86080933]
[132.49096680 146.58702087]
[124.71242523 151.14010620]
[116.31159210 154.40538025]
[107.50000000 156.30065918]
[107.50000000 171.30065918]
[107.50000000 186.30065918]
[107.50000000 201.30065918]
[107.50000000 216.30065918]
[107.50000000 231.30065918]
[107.50000000 246.30065918]
[107.50000000 261.30065918]
[107.50000000 276.30065918]
[107.50000000 291.30065918]
[107.50000000 306.30065918]
[122.11001587 310.04208374]
[135.33016968 317.30007935]
[146.32945251 327.61834717]
[154.41641235 340.34829712]
[159.08271790 354.68972778]
[160.03503418 369.74108887]
[157.21350098 384.55627441]
[150.79547119 398.20397949]
[141.18440247 409.82629395]
[128.98443604 418.69262695]
[114.96250153 424.24563599]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[33 62]
[34 61]
[35 60]
[36 59]
[37 58]
[38 57]
[39 56]
[64 86]
[65 85]
[66 84]
[88 120]
[89 119]
[90 118]
[91 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
