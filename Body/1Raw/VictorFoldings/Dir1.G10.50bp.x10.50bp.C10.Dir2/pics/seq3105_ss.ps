%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCCCCGUAGGGGGGGGGGAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCACCCAAGAACAGGxxxxxxxxxxCGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUCCCCCCCCCCUUCCCCCGCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.18798828]
[71.19830322 384.17196655]
[59.48964310 374.64254761]
[50.78712082 362.30688477]
[45.73651886 348.08035278]
[44.71262741 333.01867676]
[47.79142761 318.23950195]
[54.74444962 304.83959961]
[65.05573273 293.81326294]
[77.96011353 285.97875977]
[92.50000000 281.91741943]
[92.50000000 266.91741943]
[92.50000000 251.91743469]
[92.50000000 236.91743469]
[92.50000000 221.91743469]
[92.50000000 206.91743469]
[92.50000000 191.91743469]
[92.50000000 176.91743469]
[92.50000000 161.91743469]
[92.50000000 146.91743469]
[92.50000000 131.91743469]
[81.39658356 126.99787903]
[72.84558868 118.37418365]
[58.82887650 123.71569061]
[44.81216431 129.05720520]
[39.85646439 143.88876343]
[26.49968147 152.02081299]
[11.04847908 149.61367798]
[0.79844284 137.80389404]
[0.58932644 122.16770935]
[10.51986790 110.08804321]
[25.90116882 107.26854706]
[39.47064972 115.04049683]
[53.48736191 109.69898224]
[67.50407410 104.35746765]
[70.25407410 86.21042633]
[82.32591248 72.38479614]
[99.93650818 67.21328735]
[103.33948517 52.60439301]
[106.74246216 37.99550247]
[110.14543915 23.38661003]
[113.54842377 8.77771759]
[116.95140076 -5.83117533]
[106.37448883 4.80503273]
[93.06851959 11.72972107]
[78.28858948 14.28971863]
[63.42880249 12.24355507]
[49.89081192 5.78423405]
[38.95158768 -4.47897005]
[31.64296913 -17.57798195]
[28.65434265 -32.27723694]
[30.26760674 -47.19023132]
[36.33059311 -60.91029358]
[46.27141190 -72.14328766]
[59.15239334 -79.82965851]
[73.75854492 -83.24439240]
[88.71213531 -82.06538391]
[102.60267639 -76.40386200]
[114.11994171 -66.79383087]
[122.17756653 -54.14176941]
[126.01551056 -39.64107513]
[125.27172852 -24.65934181]
[133.52401733 -37.18530273]
[141.51393127 -49.88023376]
[149.50386047 -62.57516098]
[157.49377441 -75.27009583]
[161.95059204 -89.59268951]
[162.57456970 -104.57970428]
[163.19854736 -119.56671906]
[163.82250977 -134.55374146]
[150.33412170 -141.69697571]
[141.28775024 -153.99031067]
[138.47956848 -168.99287415]
[142.46713257 -183.72589111]
[152.45870972 -195.26412964]
[166.47048950 -201.31665039]
[181.72039795 -200.68173218]
[195.18055725 -193.48542786]
[204.17845154 -181.15657043]
[206.92753601 -166.14306641]
[202.88197327 -151.42585754]
[192.84503174 -139.92706299]
[178.80953979 -133.92976379]
[178.18556213 -118.94274139]
[177.56158447 -103.95572662]
[176.93760681 -88.96871185]
[183.40663147 -85.17375946]
[196.34468079 -77.58384705]
[202.81372070 -73.78889465]
[210.51600647 -87.60863495]
[225.41041565 -87.68472290]
[238.18777466 -95.54215240]
[250.88270569 -103.53206635]
[263.40866089 -111.78435516]
[275.84811401 -120.16649628]
[288.28753662 -128.54864502]
[292.75497437 -143.95713806]
[307.64151001 -149.93795776]
[321.52752686 -141.90310669]
[323.76080322 -126.01626587]
[312.62820435 -114.46443939]
[296.66970825 -116.10919952]
[284.23025513 -107.72705841]
[271.79080200 -99.34491730]
[267.97665405 -92.95760345]
[259.00424194 -90.92093658]
[255.05802917 -84.61435699]
[246.04521179 -82.76479340]
[233.26785278 -74.90736389]
[226.47947693 -61.64964294]
[210.67114258 -61.01153946]
[170.18870544 -67.28017426]
[162.19877625 -54.58524704]
[154.20886230 -41.89031601]
[146.21894836 -29.19538689]
[146.40438843 -24.36412048]
[143.51225281 -19.37745667]
[137.62330627 -16.14825058]
[131.56028748 -2.42819738]
[128.15731812 12.18069553]
[124.75433350 26.78958702]
[121.35135651 41.39847946]
[117.94837952 56.00737381]
[114.54540253 70.61626434]
[125.02128601 78.81255341]
[131.37905884 90.49595642]
[132.57235718 103.74356842]
[128.40475464 116.37505341]
[119.56218719 126.31147003]
[107.50000000 131.91743469]
[107.50000000 146.91743469]
[107.50000000 161.91743469]
[107.50000000 176.91743469]
[107.50000000 191.91743469]
[107.50000000 206.91743469]
[107.50000000 221.91743469]
[107.50000000 236.91743469]
[107.50000000 251.91743469]
[107.50000000 266.91741943]
[107.50000000 281.91741943]
[122.03988647 285.97875977]
[134.94427490 293.81326294]
[145.25555420 304.83959961]
[152.20857239 318.23950195]
[155.28736877 333.01867676]
[154.26348877 348.08035278]
[149.21287537 362.30688477]
[140.51036072 374.64254761]
[128.80169678 384.17196655]
[114.95575714 390.18798828]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 35]
[24 34]
[25 33]
[38 124]
[39 123]
[40 122]
[41 121]
[42 120]
[43 119]
[62 118]
[63 115]
[64 114]
[65 113]
[66 112]
[67 86]
[68 85]
[69 84]
[70 83]
[89 111]
[91 109]
[92 108]
[93 106]
[94 104]
[95 103]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
