%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUCAACUUGGGGGGGGGGAAACUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAAxxxxxxxxxxAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUCCCCCCCCCCUUCUCAACUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.02862549]
[71.19830322 387.01260376]
[59.48964310 377.48318481]
[50.78712082 365.14752197]
[45.73651886 350.92098999]
[44.71262741 335.85931396]
[47.79142761 321.08016968]
[54.74444962 307.68023682]
[65.05573273 296.65390015]
[77.96011353 288.81939697]
[92.50000000 284.75808716]
[92.50000000 269.75808716]
[92.50000000 254.75808716]
[92.50000000 239.75808716]
[92.50000000 224.75808716]
[92.50000000 209.75808716]
[92.50000000 194.75808716]
[92.50000000 179.75808716]
[92.50000000 164.75808716]
[92.50000000 149.75808716]
[92.50000000 134.75808716]
[82.46541595 130.93400574]
[74.03006744 124.28861237]
[67.96327972 115.42799377]
[64.81838989 105.16027069]
[64.88220978 94.42191315]
[68.14892578 84.19229889]
[74.32060242 75.40441895]
[82.83435059 68.85975647]
[78.52676392 54.49157333]
[74.21917725 40.12339020]
[68.87850189 44.66156387]
[61.73708344 47.60572433]
[53.25203323 48.44376373]
[44.00709915 46.78830338]
[29.51150513 42.93114471]
[15.01590729 39.07398605]
[5.48545218 50.95212936]
[-8.05530071 57.92119598]
[-23.26033401 58.77375412]
[-37.49528503 53.36209106]
[-48.29385757 42.62380981]
[-53.78514099 28.41938210]
[-53.01773071 13.20981503]
[-46.12458801 -0.36974663]
[-34.29999161 -9.96655941]
[-19.59262466 -13.91791821]
[-4.55062675 -11.53922653]
[8.21988583 -3.24260592]
[16.50634384 9.53450298]
[18.87306786 24.57838821]
[33.36866379 28.43554878]
[47.86426163 32.29270935]
[54.33329010 28.49775314]
[46.74357986 15.55958080]
[59.68186951 7.97007179]
[67.27134705 20.90784454]
[73.74037170 17.11289215]
[77.44653320 2.57795501]
[81.15269470 -11.95698071]
[66.86759186 -24.10429382]
[60.15247345 -41.53346634]
[62.57521057 -59.97953796]
[73.47676849 -74.96460724]
[90.14846802 -82.88487244]
[90.14846802 -97.88487244]
[90.14846802 -112.88487244]
[90.14846802 -127.88487244]
[76.09128571 -133.66967773]
[65.32141113 -144.39712524]
[59.48118210 -158.43138123]
[59.46118546 -173.63229370]
[65.26447296 -187.68186951]
[76.00608826 -198.43762207]
[90.04800415 -204.25938416]
[105.24893951 -204.25938416]
[119.29085541 -198.43762207]
[130.03247070 -187.68186951]
[135.83575439 -173.63229370]
[135.81576538 -158.43138123]
[129.97552490 -144.39712524]
[119.20565796 -133.66967773]
[105.14846802 -127.88487244]
[105.14846802 -112.88487244]
[105.14846802 -97.88487244]
[105.14846802 -82.88487244]
[109.04666901 -81.86392212]
[112.81218719 -80.42895508]
[116.40119171 -78.59666443]
[126.38391876 -89.79243469]
[126.90573120 -105.82699585]
[139.85301208 -115.30050659]
[155.29371643 -110.94570160]
[161.38305664 -96.10321045]
[153.44979858 -82.15892792]
[137.57968140 -79.80970764]
[127.59695435 -68.61393738]
[133.83097839 -56.04957199]
[135.00363159 -42.02601624]
[130.91590881 -28.51161385]
[122.10955048 -17.41593361]
[109.79553986 -10.31994820]
[95.68762970 -8.25082016]
[91.98146820 6.28411627]
[88.27530670 20.81905174]
[88.58736420 35.81580734]
[92.89495087 50.18399048]
[97.20253754 64.55217743]
[116.63859558 68.57498932]
[130.89053345 82.38895416]
[135.51785278 101.69003296]
[150.01344299 105.54719543]
[164.50904846 109.40435028]
[179.00463867 113.26151276]
[193.50024414 117.11866760]
[207.99583435 120.97583008]
[221.54162598 112.83412933]
[236.85656738 116.73640442]
[244.85459900 130.36750793]
[240.79063416 145.64035034]
[227.07572937 153.49382019]
[211.84671021 149.26860046]
[204.13867188 135.47142029]
[189.64308167 131.61427307]
[175.14749146 127.75711060]
[160.65188599 123.89994812]
[146.15629578 120.04278564]
[131.66069031 116.18563080]
[121.67080688 128.19131470]
[107.50000000 134.75808716]
[107.50000000 149.75808716]
[107.50000000 164.75808716]
[107.50000000 179.75808716]
[107.50000000 194.75808716]
[107.50000000 209.75808716]
[107.50000000 224.75808716]
[107.50000000 239.75808716]
[107.50000000 254.75808716]
[107.50000000 269.75808716]
[107.50000000 284.75808716]
[122.03988647 288.81939697]
[134.94427490 296.65390015]
[145.25555420 307.68023682]
[152.20857239 321.08016968]
[155.28736877 335.85931396]
[154.26348877 350.92098999]
[149.21287537 365.14752197]
[140.51036072 377.48318481]
[128.80169678 387.01260376]
[114.95575714 393.02862549]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[29 108]
[30 107]
[31 106]
[35 53]
[36 52]
[37 51]
[58 105]
[59 104]
[60 103]
[65 86]
[66 85]
[67 84]
[68 83]
[89 97]
[90 96]
[111 128]
[112 127]
[113 126]
[114 125]
[115 124]
[116 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
