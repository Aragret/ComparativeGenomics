%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAUUAAAGUGGGGGGGGGGCCUACGUGAUCUGAGUUCAGACCGGAGUAAUCCAGGUCGGUUUCUAUCUAxxxxxxxxxxUCCCGAAUCAACCCUGACCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACCCCCCCCCCCACUAUUAAAGU\
) } def
/len { sequence length } bind def

/coor [
[81.06982422 564.07135010]
[67.58094025 557.33978271]
[56.09544373 547.57525635]
[47.28107452 535.34533691]
[41.65029144 521.36114502]
[39.53046417 506.43566895]
[41.04483414 491.43667603]
[46.10535431 477.23617554]
[54.41781998 464.65975952]
[65.49895477 454.43859863]
[78.70450592 447.16696167]
[93.26673126 443.26757812]
[92.95875549 428.27075195]
[92.65077972 413.27389526]
[92.34279633 398.27706909]
[92.03482056 383.28024292]
[91.72684479 368.28338623]
[91.41886902 353.28656006]
[91.11088562 338.28973389]
[90.80290985 323.29287720]
[90.49493408 308.29605103]
[77.97390747 304.96371460]
[66.74178314 298.47744751]
[57.57793427 289.27920532]
[51.12033844 277.99932861]
[47.82117844 265.41342163]
[47.91516876 252.38911438]
[51.40288544 239.82601929]
[58.05022812 228.59384155]
[67.40412140 219.47200012]
[78.82340240 213.09565735]
[91.52272797 209.91139221]
[92.13855743 194.92402649]
[92.75437927 179.93667603]
[93.37020874 164.94932556]
[93.52420044 149.95011902]
[93.21622467 134.95327759]
[92.90824890 119.95644379]
[80.75177002 108.83504486]
[80.24438477 92.36665344]
[91.69316101 80.51798248]
[91.07733917 65.53063202]
[82.11438751 56.19954300]
[81.94316101 43.66390991]
[90.10822296 34.68649292]
[89.80024719 19.68965721]
[89.49227142 4.69281816]
[89.18428802 -10.30401993]
[74.35249329 -16.92274094]
[63.91775131 -29.29298782]
[59.92207336 -44.91559219]
[63.11323166 -60.66292572]
[72.80538177 -73.40505219]
[87.02570343 -80.63183594]
[86.40988159 -95.61918640]
[85.79405212 -110.60653687]
[85.17823029 -125.59389496]
[83.64093781 -140.51490784]
[81.18801117 -155.31298828]
[78.73508453 -170.11106873]
[76.28215027 -184.90914917]
[61.26433945 -186.36781311]
[47.13611984 -191.66458130]
[34.86077118 -200.43830872]
[25.27525520 -212.09078979]
[19.03312492 -225.82752991]
[16.55998039 -240.71195984]
[18.02444267 -255.72920227]
[23.32666397 -269.85537720]
[32.10512924 -282.12734985]
[43.76131058 -291.70834351]
[57.50046539 -297.94519043]
[72.38584137 -300.41256714]
[87.40251923 -298.94232178]
[101.52664948 -293.63464355]
[113.79521942 -284.85144043]
[123.37173462 -273.19155884]
[129.60325623 -259.44998169]
[132.06491089 -244.56367493]
[130.58885193 -229.54756165]
[125.27571869 -215.42547607]
[116.48777771 -203.16030884]
[104.82420349 -193.58828735]
[91.08023071 -187.36207581]
[93.53315735 -172.56399536]
[95.98609161 -157.76591492]
[98.43901825 -142.96783447]
[108.33767700 -154.23799133]
[123.29281616 -155.39724731]
[134.81001282 -145.78715515]
[136.34761047 -130.86616516]
[127.03223419 -119.10930634]
[112.15496826 -117.19437408]
[100.16558075 -126.20971680]
[100.78141022 -111.22236633]
[101.39723206 -96.23500824]
[102.01306152 -81.24765778]
[115.03235626 -76.36341095]
[125.23111725 -66.84752655]
[131.04054260 -54.11843872]
[131.54972839 -40.09217453]
[126.64838409 -26.89398766]
[117.04849243 -16.53632736]
[104.18112946 -10.61199760]
[104.48910522 4.38484097]
[104.79708099 19.38167953]
[105.10506439 34.37851715]
[114.99477386 48.84358215]
[106.06468964 64.91480255]
[106.68051147 79.90216064]
[116.98329163 87.34613800]
[121.16901398 99.34778595]
[117.73006439 111.58435822]
[107.90508270 119.64846039]
[108.21306610 134.64529419]
[108.52104187 149.64213562]
[111.29450989 154.20976257]
[111.93138123 158.91082764]
[110.74809265 162.89447021]
[108.35755920 165.56515503]
[107.74173737 180.55250549]
[107.12590790 195.53985596]
[106.51008606 210.52720642]
[122.54547882 216.74099731]
[135.49322510 228.02192688]
[143.82058716 243.01251221]
[146.54936218 259.91744995]
[143.37065125 276.71865845]
[134.67980957 291.41616821]
[121.52729034 302.26620483]
[105.49176788 307.98806763]
[105.79975128 322.98489380]
[106.10772705 337.98175049]
[106.41570282 352.97857666]
[106.72367859 367.97543335]
[107.03166199 382.97225952]
[107.33963776 397.96908569]
[107.64761353 412.96594238]
[107.95558929 427.96276855]
[108.26357269 442.95959473]
[122.97360229 446.25784302]
[136.46656799 452.98120117]
[147.95797729 462.73880005]
[156.77976990 474.96334839]
[162.41902161 488.94412231]
[164.54789734 503.86831665]
[163.04261780 518.86822510]
[157.99070740 533.07177734]
[149.68586731 545.65325928]
[138.61094666 555.88110352]
[125.40979767 563.16076660]
[110.84993744 567.06896973]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[32 123]
[33 122]
[34 121]
[35 120]
[36 116]
[37 115]
[38 114]
[41 110]
[42 109]
[45 107]
[46 106]
[47 105]
[48 104]
[54 97]
[55 96]
[56 95]
[57 94]
[58 87]
[59 86]
[60 85]
[61 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
