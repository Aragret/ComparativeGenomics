%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAUAGAAAACAAGGGGGGGGGGCCGAAACCAAAUAAUUCAAGCACUGCUUAUUACAAUUUUACUGGGUCUCUxxxxxxxxxxCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCCCCCCCCCCCUAAUUGAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[83.92160034 473.21939087]
[70.28610229 466.85781860]
[58.10109711 458.03045654]
[47.80708313 447.05642700]
[39.77617264 434.33239746]
[34.29867935 420.31832886]
[31.57261276 405.52087402]
[31.69651985 390.47491455]
[34.66591644 375.72433472]
[40.37346649 361.80239868]
[48.61284256 349.21237183]
[59.08619690 338.40933228]
[71.41492462 329.78384399]
[85.15335083 323.64770508]
[99.80483246 320.22274780]
[99.21223450 305.23443604]
[98.61963654 290.24615479]
[98.02703857 275.25787354]
[97.43444061 260.26956177]
[96.84183502 245.28128052]
[96.24923706 230.29299927]
[95.65663910 215.30470276]
[95.06404114 200.31642151]
[94.47144318 185.32812500]
[85.78507996 176.86167908]
[85.19886780 164.34400940]
[93.57531738 154.49029541]
[93.27896118 139.49322510]
[81.76413727 135.66987610]
[71.92200470 128.57469177]
[64.65534973 118.85848236]
[60.63069534 107.41246033]
[60.21721649 95.28652954]
[45.91518021 90.76416779]
[31.61314392 86.24180603]
[17.31110954 81.71944427]
[2.88134098 77.62288666]
[-11.66348457 73.95572662]
[-26.20830917 70.28856659]
[-32.74613190 71.74285126]
[-38.19812393 69.91522217]
[-41.24959564 66.17852783]
[-55.63819122 61.93961334]
[-70.02678680 57.70070267]
[-84.41537476 53.46178818]
[-101.31755829 54.78562927]
[-107.26865387 38.91046524]
[-93.66132355 28.79726028]
[-80.17646790 39.07319641]
[-65.78787231 43.31210709]
[-51.39927673 47.55102158]
[-37.01068497 51.78993225]
[-22.54115105 55.74374008]
[-7.99632549 59.41090012]
[6.54850006 63.07805634]
[9.78257561 61.55150604]
[13.92726707 61.54780960]
[18.24360085 63.48225403]
[21.83347130 67.41740417]
[36.13550949 71.93977356]
[50.43754196 76.46213531]
[64.73957825 80.98449707]
[74.30935669 69.26113892]
[87.54520416 61.92422485]
[102.55834961 60.02073669]
[117.20642090 63.82230377]
[126.07108307 51.72198486]
[134.93574524 39.62166595]
[123.89169312 29.44773483]
[114.05622101 18.10121346]
[105.55303192 5.72479439]
[98.48905182 -7.52587414]
[92.95312500 -21.48415184]
[89.01486969 -35.97449875]
[86.72380829 -50.81468201]
[86.10876465 -65.81806946]
[87.17745972 -80.79598999]
[89.91646576 -95.56005859]
[94.29132843 -109.92462158]
[100.24703979 -123.70901489]
[107.70868683 -136.73989868]
[116.58244324 -148.85337830]
[126.75669861 -159.89712524]
[138.10351562 -169.73225403]
[150.48019409 -178.23507690]
[163.73106384 -185.29866028]
[177.68951416 -190.83418274]
[192.17997742 -194.77200317]
[207.02023315 -197.06260681]
[222.02363586 -197.67721558]
[237.00152588 -196.60806274]
[251.76551819 -193.86862183]
[266.12994385 -189.49331665]
[279.91415405 -183.53720093]
[292.94482422 -176.07516479]
[305.05804443 -167.20104980]
[316.10147095 -157.02645874]
[325.93627930 -145.67935181]
[334.43872070 -133.30242920]
[341.50192261 -120.05133057]
[347.03698730 -106.09272003]
[350.97439575 -91.60214233]
[353.26455688 -76.76181793]
[353.87872314 -61.75839233]
[352.80911255 -46.78054428]
[350.06921387 -32.01663208]
[345.69351196 -17.65233612]
[339.73696899 -3.86829615]
[332.27453613 9.16213608]
[323.40005493 21.27509117]
[313.22515869 32.31823349]
[301.87774658 42.15268326]
[289.50054932 50.65476608]
[276.24926758 57.71755600]
[262.29049683 63.25223160]
[247.79978943 67.18918610]
[232.95939636 69.47891235]
[217.95594788 70.09261322]
[202.97813416 69.02257538]
[188.21430969 66.28224182]
[173.85014343 61.90608978]
[160.06626892 55.94914627]
[147.03607178 48.48632812]
[138.17140198 60.58664703]
[129.30673218 72.68696594]
[137.93025208 87.10881805]
[139.88052368 103.79866791]
[134.81445312 119.82019806]
[123.62332153 132.35467529]
[108.27603149 139.19685364]
[108.57238770 154.19393921]
[118.46195221 169.69786072]
[109.45973206 184.73553467]
[110.05233002 199.72381592]
[110.64492798 214.71211243]
[111.23752594 229.70039368]
[111.83013153 244.68869019]
[112.42272949 259.67697144]
[113.01532745 274.66525269]
[113.60792542 289.65356445]
[114.20052338 304.64184570]
[114.79312134 319.63012695]
[129.66928101 321.88766479]
[143.84927368 326.91998291]
[156.82051086 334.54516602]
[168.11408997 344.48757935]
[177.32174683 356.38781738]
[184.11064148 369.81567383]
[188.23535156 384.28576660]
[189.54676819 399.27496338]
[187.99749756 414.24148560]
[183.64353943 428.64422607]
[176.64227295 441.96261597]
[167.24681091 453.71511841]
[155.79678345 463.47695923]
[142.70610046 470.89520264]
[128.44798279 475.70172119]
[113.53784180 477.72274780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[27 131]
[28 130]
[33 62]
[34 61]
[35 60]
[36 59]
[37 55]
[38 54]
[39 53]
[42 52]
[43 51]
[44 50]
[45 49]
[66 125]
[67 124]
[68 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
