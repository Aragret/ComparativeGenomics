%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAACAGGGGGGGGGGGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCAxxxxxxxxxxAAACCCAUAUAACCUCCCCCAAAAUUCAGAAUAAUAACACACCCGACCACCCCCCCCCCCACCGCUAACA\
) } def
/len { sequence length } bind def

/coor [
[44.99332428 407.90359497]
[31.14738464 401.88757324]
[19.43872261 392.35815430]
[10.73619747 380.02249146]
[5.68559599 365.79595947]
[4.66170454 350.73428345]
[7.74050379 335.95513916]
[14.69352531 322.55520630]
[25.00481033 311.52886963]
[37.90919113 303.69436646]
[52.44907761 299.63305664]
[52.44907761 284.63305664]
[52.44907761 269.63305664]
[52.44907761 254.63304138]
[52.44907761 239.63304138]
[52.44907761 224.63304138]
[52.44907761 209.63304138]
[52.44907761 194.63304138]
[52.44907761 179.63304138]
[52.44907761 164.63304138]
[52.44907761 149.63304138]
[40.09750366 141.12194824]
[26.08079147 146.46347046]
[12.06407928 151.80497742]
[-1.95263398 157.14648438]
[-6.90833330 171.97804260]
[-20.26511574 180.11010742]
[-35.71632004 177.70295715]
[-45.96635437 165.89318848]
[-46.17547226 150.25700378]
[-36.24493027 138.17732239]
[-20.86362839 135.35783386]
[-7.29414654 143.12977600]
[6.72256660 137.78826904]
[20.73927879 132.44674683]
[34.75599289 127.10523987]
[33.04330444 112.20333862]
[18.18025589 110.18100739]
[4.59125900 118.70853424]
[-10.50015259 113.26528931]
[-15.51713943 98.02687073]
[-6.61109877 84.68288422]
[9.38601685 83.46969604]
[20.20259094 95.31795502]
[35.06563568 97.34029388]
[38.16834259 90.51216888]
[24.51210022 84.30676270]
[15.78789806 72.10478210]
[30.71750641 70.65052032]
[44.37374878 76.85592651]
[47.47645187 70.02780914]
[36.17744827 60.16208649]
[24.87844276 50.29636383]
[8.97057915 44.43323898]
[10.20083618 27.52398682]
[26.78983688 24.02521706]
[34.74416351 38.99736023]
[46.04317093 48.86308289]
[57.34217453 58.72880554]
[91.38364410 52.17449188]
[116.30110168 65.85555267]
[125.31863403 53.86872101]
[134.33616638 41.88188934]
[143.35368347 29.89505577]
[132.46025085 19.55915642]
[122.81605530 8.04885006]
[114.54682159 -4.48580503]
[107.76036835 -17.88139343]
[102.54515839 -31.96327400]
[98.96919250 -46.54786301]
[97.07908630 -61.44501877]
[96.89949036 -76.46052551]
[98.43273163 -91.39863586]
[101.65882874 -106.06458282]
[106.53572083 -120.26717377]
[112.99983215 -133.82125854]
[120.96688080 -146.55010986]
[130.33300781 -158.28781128]
[140.97610474 -168.88130188]
[152.75741577 -178.19250488]
[165.52336121 -186.10000610]
[179.10748291 -192.50073242]
[193.33270264 -197.31123352]
[208.01356506 -200.46879578]
[222.95866394 -201.93225098]
[237.97317505 -201.68251038]
[252.86132812 -199.72283936]
[267.42904663 -196.07878113]
[281.48641968 -190.79785156]
[294.85015869 -183.94889832]
[307.34606934 -175.62121582]
[318.81118774 -165.92335510]
[329.09609985 -154.98175049]
[338.06668091 -142.93907166]
[345.60601807 -129.95228577]
[351.61578369 -116.19073486]
[356.01763916 -101.83380127]
[358.75421143 -87.06867981]
[359.78979492 -72.08784485]
[359.11093140 -57.08661652]
[356.72644043 -42.26055908]
[352.66738892 -27.80296516]
[346.98675537 -13.90231514]
[339.75854492 -0.73983502]
[331.07702637 11.51287651]
[321.05535889 22.69607925]
[309.82421875 32.66397858]
[297.52999878 41.28662109]
[284.33300781 48.45159149]
[270.40524292 54.06548309]
[255.92835999 58.05510712]
[241.09103394 60.36844635]
[226.08671570 60.97534561]
[211.11102295 59.86789322]
[196.35919189 57.06052399]
[182.02354431 52.58983994]
[168.29098511 46.51412201]
[155.34051514 38.91258621]
[146.32299805 50.89941788]
[137.30546570 62.88624954]
[128.28793335 74.87308502]
[136.94799805 84.09209442]
[142.45747375 96.30398560]
[143.79388428 110.38784790]
[140.34455872 124.88124084]
[132.01702881 138.13201904]
[119.29325867 148.48428345]
[103.21746826 154.47799683]
[85.31516266 155.03854370]
[67.44907379 149.63304138]
[67.44907379 164.63304138]
[67.44907379 179.63304138]
[67.44907379 194.63304138]
[67.44907379 209.63304138]
[67.44907379 224.63304138]
[67.44907379 239.63304138]
[67.44907379 254.63304138]
[67.44907379 269.63305664]
[67.44907379 284.63305664]
[67.44907379 299.63305664]
[81.98896790 303.69436646]
[94.89334869 311.52886963]
[105.20462799 322.55520630]
[112.15765381 335.95513916]
[115.23645020 350.73428345]
[114.21256256 365.79595947]
[109.16195679 380.02249146]
[100.45943451 392.35815430]
[88.75077057 401.88757324]
[74.90483093 407.90359497]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 36]
[23 35]
[24 34]
[25 33]
[37 45]
[38 44]
[51 59]
[52 58]
[53 57]
[61 121]
[62 120]
[63 119]
[64 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
