%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAGUGAUUAGGGGGGGGGGUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCUAGCCCACUUCUUACCACAAxxxxxxxxxxGCCUUCAUAGGCUAUGUCCUCCCGUGAGGCCAAAUAUCAUUCUGAGGGGCCCCCCCCCCCCACAGUAAUUA\
) } def
/len { sequence length } bind def

/coor [
[95.34124756 373.27276611]
[81.31930542 367.71975708]
[69.11934662 358.85342407]
[59.50827789 347.23110962]
[53.09025192 333.58340454]
[50.26871490 318.76821899]
[51.22103119 303.71682739]
[55.88733673 289.37542725]
[63.97430038 276.64544678]
[74.97357941 266.32717896]
[88.19373322 259.06921387]
[102.80374908 255.32777405]
[102.80374908 240.32777405]
[102.80374908 225.32777405]
[102.80374908 210.32777405]
[102.80374908 195.32777405]
[102.80374908 180.32777405]
[102.80374908 165.32777405]
[102.80374908 150.32777405]
[102.80374908 135.32777405]
[102.80374908 120.32777405]
[90.38543701 111.91436005]
[76.45471954 117.47630310]
[62.52400208 123.03823853]
[48.65111923 128.74290466]
[34.83753586 134.58969116]
[25.39201927 147.99543762]
[9.08613396 146.24897766]
[2.69397759 131.14691162]
[12.79125309 118.22496033]
[28.99074936 120.77610779]
[42.80433273 114.92932129]
[47.76885605 109.39165497]
[56.96206284 109.10752106]
[70.89277649 103.54558563]
[84.82349396 97.98365021]
[84.13148499 90.51564026]
[82.74745941 75.57962799]
[82.05544281 68.11162567]
[67.33992004 65.20414734]
[52.62440109 62.29667664]
[35.91368866 65.15822601]
[28.53798676 49.89273071]
[41.16510391 38.57936096]
[55.53187180 47.58115387]
[70.24739838 50.48862839]
[84.96292114 53.39609909]
[98.65354156 47.26692581]
[106.28651428 34.35422897]
[113.91948700 21.44153023]
[121.55245209 8.52883148]
[124.61084747 -6.15606594]
[122.76752472 -21.04237366]
[120.92420197 -35.92868042]
[119.08087921 -50.81498718]
[117.23754883 -65.70129395]
[102.21820831 -66.46974182]
[87.56052399 -69.83477783]
[73.70993042 -75.69413757]
[61.08733368 -83.86978149]
[50.07631302 -94.11324310]
[41.01148224 -106.11324310]
[34.16831589 -119.50511169]
[29.75476646 -133.88189697]
[27.90495872 -148.80668640]
[28.67510605 -163.82592773]
[32.04180145 -178.48323059]
[37.90274048 -192.33316040]
[46.07981110 -204.95483398]
[56.32452393 -215.96469116]
[68.32555389 -225.02816772]
[81.71819305 -231.86981201]
[96.09547424 -236.28173828]
[111.02046967 -238.12985229]
[126.03964233 -237.35800171]
[140.69656372 -233.98963928]
[154.54582214 -228.12713623]
[167.16656494 -219.94862366]
[178.17526245 -209.70266724]
[187.23736572 -197.70060730]
[194.07749939 -184.30718994]
[198.48779297 -169.92941284]
[200.33421326 -155.00419617]
[199.56065369 -139.98512268]
[196.19064331 -125.32859039]
[190.32655334 -111.47998810]
[182.14662170 -98.86016846]
[171.89941406 -87.85263062]
[159.89633179 -78.79188538]
[146.50213623 -71.95327759]
[132.12385559 -67.54462433]
[133.96717834 -52.65831375]
[135.81050110 -37.77200699]
[137.65383911 -22.88569832]
[139.49716187 -7.99939013]
[152.56385803 -0.63315088]
[166.25447083 -6.76232481]
[175.68846130 -19.46313477]
[190.46629333 -17.60174561]
[204.15692139 -23.73092079]
[217.84754944 -29.86009407]
[231.53817749 -35.98926926]
[240.70645142 -49.58612823]
[257.04476929 -48.17482758]
[263.74563599 -33.20718765]
[253.91580200 -20.08063507]
[237.66734314 -22.29864311]
[223.97671509 -16.16946793]
[210.28610229 -10.04029465]
[196.59547424 -3.91112041]
[188.14073181 8.35128880]
[172.38365173 6.92830086]
[158.69302368 13.05747509]
[159.15473938 20.54324913]
[174.12629700 19.62006760]
[175.04924011 34.59164429]
[160.07814026 35.51480103]
[160.53985596 43.00057602]
[174.87991333 47.40087509]
[189.21997070 51.80117416]
[206.13597107 50.66731262]
[211.90832520 66.60833740]
[198.18823242 76.56802368]
[184.81967163 66.14123535]
[170.47961426 61.74093628]
[156.13955688 57.34063721]
[140.61972046 38.16356277]
[134.46514893 16.16180229]
[126.83218384 29.07449913]
[119.19921112 41.98719788]
[111.56623840 54.89989471]
[117.80374908 120.32777405]
[117.80374908 135.32777405]
[117.80374908 150.32777405]
[117.80374908 165.32777405]
[117.80374908 180.32777405]
[117.80374908 195.32777405]
[117.80374908 210.32777405]
[117.80374908 225.32777405]
[117.80374908 240.32777405]
[117.80374908 255.32777405]
[132.41375732 259.06921387]
[145.63392639 266.32717896]
[156.63319397 276.64544678]
[164.72015381 289.37542725]
[169.38645935 303.71682739]
[170.33877563 318.76821899]
[167.51724243 333.58340454]
[161.09921265 347.23110962]
[151.48814392 358.85342407]
[139.28819275 367.71975708]
[125.26624298 373.27276611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 36]
[23 35]
[24 34]
[25 32]
[26 31]
[39 47]
[40 46]
[41 45]
[48 131]
[49 130]
[50 129]
[51 128]
[52 95]
[53 94]
[54 93]
[55 92]
[56 91]
[96 113]
[97 112]
[99 110]
[100 109]
[101 108]
[102 107]
[118 126]
[119 125]
[120 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
