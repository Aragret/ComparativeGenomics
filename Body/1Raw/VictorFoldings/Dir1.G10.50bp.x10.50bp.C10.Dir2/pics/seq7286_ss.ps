%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCUUCGCUGGGGGGGGGGUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACCCUCCAUAAACCUGGAGUGxxxxxxxxxxCUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUCAAUCCCCCCCCCCAGCCAUCGCU\
) } def
/len { sequence length } bind def

/coor [
[72.57627106 391.10589600]
[58.73033524 385.08987427]
[47.02167511 375.56045532]
[38.31914902 363.22476196]
[33.26854706 348.99826050]
[32.24465561 333.93658447]
[35.32345581 319.15740967]
[42.27647781 305.75747681]
[52.58776093 294.73114014]
[65.49214172 286.89663696]
[80.03202820 282.83532715]
[80.03202820 267.83532715]
[80.03202820 252.83532715]
[80.03202820 237.83532715]
[80.03202820 222.83532715]
[80.03202820 207.83532715]
[80.03202820 192.83532715]
[80.03202820 177.83532715]
[80.03202820 162.83532715]
[80.03202820 147.83532715]
[67.01571655 140.38041687]
[54.07766342 147.97032166]
[41.13960648 155.56024170]
[30.53717995 168.78993225]
[14.88946152 162.26419067]
[16.82845116 145.42149353]
[33.54970169 142.62217712]
[46.48775482 135.03227234]
[59.42581177 127.44235992]
[57.87665176 120.10410309]
[43.20012665 123.20242310]
[28.52355194 126.30051422]
[25.42568398 111.62389374]
[40.10180283 108.52589417]
[54.77832794 105.42757416]
[53.22916794 98.08930969]
[38.32726669 96.37662506]
[23.42536354 94.66393280]
[8.60340405 101.68116760]
[-4.72894001 92.13230896]
[-2.85649681 75.84040833]
[12.29452515 69.56517792]
[25.13805389 79.76203156]
[40.03995514 81.47471619]
[54.94185638 83.18740845]
[68.15203094 73.82820129]
[81.98130798 70.75363922]
[70.88999939 60.65498734]
[57.14868546 67.15458679]
[41.96583557 67.89587402]
[27.65672112 62.76579666]
[16.40337563 52.54666519]
[9.92185688 38.79681396]
[9.20054626 23.61300278]
[14.34943962 9.31064796]
[24.58336830 -1.92924297]
[38.34173203 -8.39266968]
[53.52647781 -9.09400558]
[67.82204437 -3.92630267]
[79.04846954 6.32240200]
[85.49378967 20.08925629]
[86.17514801 35.27491379]
[80.98864746 49.56367111]
[92.07996368 59.66231918]
[107.07914734 59.50628281]
[117.95797729 49.17908096]
[128.83680725 38.85187531]
[139.71562195 28.52466965]
[150.59445190 18.19746399]
[135.92231750 21.31652641]
[120.92317963 21.15603447]
[106.32114410 17.72373962]
[92.82116699 11.18534184]
[81.07498932 1.85649812]
[71.64968872 -9.81241989]
[65.00028229 -23.25806808]
[61.44779968 -37.83132553]
[61.16373444 -52.82863617]
[64.16180420 -67.52597046]
[70.29727173 -81.21377563]
[79.27393341 -93.23124695]
[90.65841675 -102.99820709]
[103.90110779 -110.04313660]
[118.36269379 -114.02592468]
[133.34500122 -114.75429535]
[148.12472534 -112.19308472]
[161.98834229 -106.46593475]
[174.26654053 -97.84934235]
[184.36657715 -86.75929260]
[191.80085754 -73.73118591]
[196.21044922 -59.39397812]
[197.38247681 -44.43983841]
[195.26037598 -29.59070778]
[189.94657898 -15.56346416]
[181.69763184 -3.03530622]
[170.91342163 7.38765383]
[178.51794434 -3.08254147]
[190.82882690 -5.46187210]
[201.10626221 0.99424708]
[215.81422424 -1.95123541]
[230.52218628 -4.89671803]
[245.23014832 -7.84220028]
[259.93811035 -10.78768253]
[264.78005981 -25.36338234]
[276.27182007 -35.55332565]
[291.32217407 -38.61647415]
[305.88262939 -33.72885132]
[316.03649902 -22.20520592]
[319.05245972 -7.14533997]
[314.11920166 7.39971876]
[302.56381226 17.51742172]
[287.49456787 20.48615837]
[272.96502686 15.50735283]
[262.88360596 3.92027879]
[248.17562866 6.86576128]
[233.46766663 9.81124401]
[218.75970459 12.75672626]
[204.05175781 15.70220852]
[191.55735779 27.98593903]
[174.16424561 22.03115463]
[160.92166138 29.07629013]
[150.04283142 39.40349579]
[139.16400146 49.73070145]
[128.28518677 60.05790329]
[117.40635681 70.38510895]
[130.50515747 79.70108032]
[138.57835388 94.76562500]
[139.16265869 112.86633301]
[131.24662781 130.28137207]
[115.65391541 143.04435730]
[95.03202820 147.83532715]
[95.03202820 162.83532715]
[95.03202820 177.83532715]
[95.03202820 192.83532715]
[95.03202820 207.83532715]
[95.03202820 222.83532715]
[95.03202820 237.83532715]
[95.03202820 252.83532715]
[95.03202820 267.83532715]
[95.03202820 282.83532715]
[109.57191467 286.89663696]
[122.47629547 294.73114014]
[132.78758240 305.75747681]
[139.74060059 319.15740967]
[142.81939697 333.93658447]
[141.79551697 348.99826050]
[136.74490356 363.22476196]
[128.04238892 375.56045532]
[116.33372498 385.08987427]
[102.48778534 391.10589600]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 29]
[22 28]
[23 27]
[36 45]
[37 44]
[38 43]
[47 64]
[48 63]
[65 125]
[66 124]
[67 123]
[68 122]
[69 121]
[96 120]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
