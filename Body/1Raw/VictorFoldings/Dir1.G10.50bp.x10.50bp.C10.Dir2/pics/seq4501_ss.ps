%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAAACCCCCUGGGGGGGGGGUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUxxxxxxxxxxUGUCUCCUCUAUCUUAGGGGCCAUCAAUUUCAUCACAACAAUUAUCAAUACCCCCCCCCCUAAAACCCCCU\
) } def
/len { sequence length } bind def

/coor [
[87.04753876 569.95849609]
[73.02559662 564.40551758]
[60.82563782 555.53918457]
[51.21456528 543.91687012]
[44.79654312 530.26916504]
[41.97500610 515.45397949]
[42.92732239 500.40261841]
[47.59362411 486.06118774]
[55.68059158 473.33123779]
[66.67987061 463.01293945]
[79.90002441 455.75497437]
[94.51004028 452.01354980]
[94.51004028 437.01354980]
[94.51004028 422.01354980]
[94.51004028 407.01354980]
[94.51004028 392.01354980]
[94.51004028 377.01354980]
[94.51004028 362.01354980]
[94.51004028 347.01354980]
[94.51004028 332.01354980]
[94.51004028 317.01354980]
[94.51004028 302.01354980]
[94.51004028 287.01354980]
[94.51004028 272.01354980]
[94.51004028 257.01354980]
[79.49447632 253.11753845]
[65.98226929 245.47482300]
[54.89071655 234.59761047]
[46.97447205 221.21797180]
[42.77422333 206.23847961]
[42.57975769 190.67135620]
[46.40995789 175.57006836]
[54.01117706 161.95803833]
[64.87397766 150.75929260]
[78.26732635 142.73570251]
[93.28773499 138.43524170]
[92.97975159 123.43839264]
[92.67177582 108.44155884]
[92.20984650 93.44866943]
[91.59402466 78.46131897]
[90.97820282 63.47396469]
[76.87246704 60.18041229]
[64.11622620 53.34334183]
[53.58133698 43.43720627]
[45.98596191 31.14597511]
[41.84563446 17.31591606]
[41.43824768 2.89731407]
[44.78543854 -11.12081051]
[51.65151215 -23.77854729]
[61.56003571 -34.21082687]
[73.82689667 -41.70654297]
[87.60753632 -45.75701141]
[87.29956055 -60.75384903]
[86.99157715 -75.75068665]
[86.68360138 -90.74752808]
[86.37562561 -105.74436188]
[82.41901398 -120.21313477]
[75.05277252 -133.27983093]
[67.68653107 -146.34652710]
[60.32029724 -159.41322327]
[52.95405579 -172.47990417]
[37.94968033 -178.15866089]
[33.17179108 -193.47373962]
[42.28557587 -206.67671204]
[58.29971695 -207.63938904]
[68.92954254 -195.62330627]
[66.02075195 -179.84614563]
[73.38699341 -166.77944946]
[80.75322723 -153.71276855]
[88.11946869 -140.64607239]
[95.48571014 -127.57936859]
[95.91456604 -142.57324219]
[99.85427094 -157.04661560]
[107.08424377 -170.18920898]
[117.19970703 -181.26518250]
[129.63433838 -189.65446472]
[143.69197083 -194.88734436]
[158.58555603 -196.67086792]
[173.48127747 -194.90518188]
[187.54516602 -189.68913269]
[199.98983765 -181.31475830]
[210.11856079 -170.25090027]
[217.36425781 -157.11698914]
[221.32128906 -142.64833069]
[221.76811218 -127.65499115]
[218.67970276 -112.97637939]
[212.22895813 -99.43429565]
[202.77705383 -87.78691101]
[190.85314941 -78.68633270]
[177.12483215 -72.64205170]
[162.36070251 -69.99246979]
[147.38732910 -70.88593292]
[133.04304504 -75.27240753]
[120.13090515 -82.90632629]
[109.37382507 -93.36028290]
[101.37245941 -106.05234528]
[101.68044281 -91.05550385]
[101.98841858 -76.05866241]
[102.29639435 -61.06182861]
[102.60437012 -46.06499100]
[117.66575623 -42.12530899]
[131.02601624 -34.10526276]
[141.60467529 -22.64396095]
[148.54354858 -8.65918827]
[151.27635193 6.72607660]
[149.57492065 22.27383614]
[143.56820679 36.73069382]
[133.73260498 48.92889404]
[120.85411072 57.88065338]
[105.96555328 62.85813904]
[106.58137512 77.84549713]
[107.19720459 92.83284760]
[110.66659546 100.16805267]
[107.66861725 108.13358307]
[107.97659302 123.13041687]
[108.28456879 138.12725830]
[122.43942261 141.42044067]
[135.38041687 148.01286316]
[146.35191345 157.51448059]
[154.71447754 169.36550903]
[159.98217773 182.86941528]
[161.85084534 197.23388672]
[160.21556091 211.61726379]
[155.17658997 225.17785645]
[147.03326416 237.12329102]
[136.26614380 246.75668335]
[123.50870514 253.51737976]
[109.51004028 257.01354980]
[109.51004028 272.01354980]
[109.51004028 287.01354980]
[109.51004028 302.01354980]
[109.51004028 317.01354980]
[109.51004028 332.01354980]
[109.51004028 347.01354980]
[109.51004028 362.01354980]
[109.51004028 377.01354980]
[109.51004028 392.01354980]
[109.51004028 407.01354980]
[109.51004028 422.01354980]
[109.51004028 437.01354980]
[109.51004028 452.01354980]
[124.12004852 455.75497437]
[137.34020996 463.01293945]
[148.33947754 473.33123779]
[156.42645264 486.06118774]
[161.09275818 500.40261841]
[162.04507446 515.45397949]
[159.22354126 530.26916504]
[152.80551147 543.91687012]
[143.19444275 555.53918457]
[130.99447632 564.40551758]
[116.97253418 569.95849609]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[36 116]
[37 115]
[38 114]
[39 112]
[40 111]
[41 110]
[52 100]
[53 99]
[54 98]
[55 97]
[56 96]
[57 71]
[58 70]
[59 69]
[60 68]
[61 67]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
