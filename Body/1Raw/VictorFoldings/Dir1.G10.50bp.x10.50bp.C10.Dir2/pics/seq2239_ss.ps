%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUAAAUCGGGGGGGGGGCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUxxxxxxxxxxAACAUCUCCGCAUGAUGAAACUUCGGCUCACUCCUUGGCGCCUGCCUGAUCCCCCCCCCCCCUCCAAAUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.40966797]
[71.19830322 376.39361572]
[59.48964310 366.86422729]
[50.78712082 354.52853394]
[45.73651886 340.30203247]
[44.71262741 325.24035645]
[47.79142761 310.46118164]
[54.74444962 297.06124878]
[65.05573273 286.03491211]
[77.96011353 278.20040894]
[92.50000000 274.13909912]
[92.50000000 259.13909912]
[92.50000000 244.13909912]
[92.50000000 229.13909912]
[92.50000000 214.13909912]
[92.50000000 199.13909912]
[92.50000000 184.13909912]
[92.50000000 169.13909912]
[92.50000000 154.13909912]
[92.50000000 139.13909912]
[78.59065247 133.61189270]
[67.70130920 123.34338379]
[61.36801147 109.78205872]
[60.48414612 94.84088135]
[65.17438507 80.62744904]
[53.67258453 70.99891663]
[42.17078018 61.37039185]
[30.43492508 70.78642273]
[17.09177780 77.72960663]
[2.65502906 81.93476105]
[-12.31993961 83.24207306]
[-27.25742149 81.60314941]
[-41.58351898 77.08284760]
[-54.74819183 69.85668182]
[-66.24637604 60.20403290]
[-75.63735199 48.49731064]
[-82.56165314 35.18762589]
[-86.75482178 20.78738403]
[-88.05748749 5.85055685]
[-86.42146301 -9.04861164]
[-81.91146851 -23.33769608]
[-74.70264435 -36.46807861]
[-86.20445251 -46.09660339]
[-97.70625305 -55.72513199]
[-109.20805359 -65.35366058]
[-120.70986176 -74.98218536]
[-132.21166992 -84.61071014]
[-143.71347046 -94.23923492]
[-155.21527100 -103.86775970]
[-166.71707153 -113.49629211]
[-178.21887207 -123.12481689]
[-193.93731689 -121.47970581]
[-206.16241455 -131.49581909]
[-207.64125061 -147.23075867]
[-197.49644470 -159.34928894]
[-181.74673462 -160.66168213]
[-169.73616028 -150.38931274]
[-168.59034729 -134.62661743]
[-157.08854675 -124.99809265]
[-145.58674622 -115.36956787]
[-134.08494568 -105.74104309]
[-122.58313751 -96.11251068]
[-111.08133698 -86.48398590]
[-99.57952881 -76.85546112]
[-88.07772827 -67.22693634]
[-76.57592010 -57.59840775]
[-65.07411957 -47.96988297]
[-53.41672897 -57.37622833]
[-40.14391708 -64.32967377]
[-25.76494026 -68.56131744]
[-10.83190155 -69.90671539]
[4.08143187 -68.31230164]
[18.40168762 -63.83748245]
[31.57792854 -56.65246964]
[43.10284424 -47.03174973]
[52.53228760 -35.34365463]
[59.50239944 -22.03622437]
[63.74362564 -7.62003708]
[65.09117126 7.35136414]
[63.49137115 22.30274200]
[59.00385666 36.65925980]
[51.79930878 49.86858749]
[63.30110931 59.49711609]
[74.80291748 69.12564087]
[86.82123566 62.39096832]
[100.41455078 60.15094376]
[113.95832062 62.67327499]
[125.83393097 69.65651703]
[137.53355408 60.26935577]
[149.23318481 50.88219452]
[145.31719971 36.16536713]
[147.73205566 21.12913322]
[156.05937195 8.37860870]
[168.85636902 0.12290073]
[183.90589905 -2.20763969]
[198.60054016 1.79076743]
[210.39436340 11.42537403]
[217.24401855 25.02692604]
[217.96273804 40.23887253]
[212.42602539 54.42565155]
[201.59313965 65.12931824]
[187.34095764 70.49539948]
[172.13871765 69.59418488]
[158.62034607 62.58181763]
[146.92071533 71.96897888]
[135.22109985 81.35614014]
[138.81213379 90.95914459]
[139.83430481 101.16054535]
[154.47781372 104.41136932]
[169.12130737 107.66219330]
[162.38069153 94.26204681]
[166.90653992 79.96110535]
[180.12927246 72.87879944]
[194.54165649 77.03613281]
[201.96098328 90.07275391]
[198.17489624 104.58708191]
[185.33146667 112.33878326]
[199.45626831 117.38753510]
[213.58106995 122.43629456]
[229.60852051 118.96461487]
[240.42694092 131.28913879]
[234.90725708 146.73144531]
[218.72764587 149.40582275]
[208.53230286 136.56109619]
[194.40750122 131.51234436]
[180.28269958 126.46358490]
[165.87048340 122.30569458]
[151.22698975 119.05487061]
[136.58348083 115.80404663]
[124.93931580 131.08294678]
[107.50000000 139.13909912]
[107.50000000 154.13909912]
[107.50000000 169.13909912]
[107.50000000 184.13909912]
[107.50000000 199.13909912]
[107.50000000 214.13909912]
[107.50000000 229.13909912]
[107.50000000 244.13909912]
[107.50000000 259.13909912]
[107.50000000 274.13909912]
[122.03988647 278.20040894]
[134.94427490 286.03491211]
[145.25555420 297.06124878]
[152.20857239 310.46118164]
[155.28736877 325.24035645]
[154.26348877 340.30203247]
[149.21287537 354.52853394]
[140.51036072 366.86422729]
[128.80169678 376.39361572]
[114.95575714 382.40966797]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 84]
[26 83]
[27 82]
[42 67]
[43 66]
[44 65]
[45 64]
[46 63]
[47 62]
[48 61]
[49 60]
[50 59]
[51 58]
[88 106]
[89 105]
[90 104]
[108 129]
[109 128]
[110 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
