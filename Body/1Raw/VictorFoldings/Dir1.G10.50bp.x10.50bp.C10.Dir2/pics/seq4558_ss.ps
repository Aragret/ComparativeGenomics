%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCCCUGAGGGGGGGGGGGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUxxxxxxxxxxCUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCCCCCCCCCCCACCCCUGA\
) } def
/len { sequence length } bind def

/coor [
[61.90977097 391.93869019]
[48.06383133 385.92266846]
[36.35517120 376.39324951]
[27.65264511 364.05758667]
[22.60204315 349.83105469]
[21.57815361 334.76937866]
[24.65695190 319.99023438]
[31.60997391 306.59030151]
[41.92125702 295.56396484]
[54.82563782 287.72946167]
[69.36552429 283.66815186]
[69.36552429 268.66815186]
[69.36552429 253.66813660]
[69.36552429 238.66813660]
[69.36552429 223.66813660]
[69.36552429 208.66813660]
[69.36552429 193.66813660]
[69.36552429 178.66813660]
[69.36552429 163.66813660]
[69.36552429 148.66813660]
[56.67059708 140.67822266]
[43.14640427 147.16639709]
[29.62221527 153.65455627]
[16.09802628 160.14271545]
[9.44178391 174.73977661]
[-6.15512466 178.49690247]
[-18.72808647 168.53195190]
[-18.63220024 152.48918152]
[-5.94102335 142.67523193]
[9.60986137 146.61853027]
[23.13405037 140.13037109]
[36.65824127 133.64219666]
[50.18243027 127.15403748]
[49.55899429 119.67999268]
[35.99000168 113.28605652]
[48.31211853 104.73190308]
[47.68868256 97.25785828]
[33.27646637 93.09997559]
[18.86425018 88.94208527]
[7.85453224 99.65103912]
[-7.03857040 103.40484619]
[-21.80888748 99.19375610]
[-32.48328018 88.15052795]
[-36.19038773 73.24572754]
[-31.93301582 58.48868561]
[-20.85638046 47.84896088]
[-5.94003820 44.18859100]
[8.80358887 48.49219513]
[19.40854073 59.60212708]
[23.02213669 74.52986908]
[37.43435287 78.68775940]
[51.84656906 82.84564209]
[60.77391052 71.43087769]
[72.05157471 63.54392242]
[84.45458984 59.53764725]
[96.76123047 59.37369537]
[107.86997223 62.65569305]
[116.89736176 68.69532013]
[126.64501190 57.29429626]
[136.39266968 45.89327621]
[146.14031982 34.49225616]
[155.88796997 23.09123421]
[160.64178467 8.86445427]
[159.70616150 -6.10633707]
[158.77052307 -21.07712936]
[157.83489990 -36.04792023]
[143.35877991 -40.60932541]
[131.51042175 -50.09514236]
[123.89219666 -63.22248840]
[121.53443146 -78.21599579]
[124.75598145 -93.04792786]
[133.12117004 -105.71237183]
[145.49865723 -114.49657440]
[160.21449280 -118.21253967]
[175.27848816 -116.35771942]
[188.65336609 -109.18296051]
[198.53027344 -97.65859222]
[203.57344055 -83.34318542]
[203.10083008 -68.17278290]
[197.17634583 -54.19906235]
[186.60124207 -43.31184769]
[172.80569458 -36.98354721]
[173.74131775 -22.01275635]
[174.67694092 -7.04196548]
[175.61257935 7.92882633]
[189.70222473 5.84671211]
[200.73081970 12.46182251]
[214.38705444 6.25641537]
[228.04330444 0.05100812]
[228.08459473 -17.06525421]
[235.54998779 -32.40649033]
[248.90687561 -42.93278885]
[265.46057129 -46.58160400]
[281.89797974 -42.67176056]
[294.95053101 -32.03000641]
[308.33682251 -38.79812241]
[321.72311401 -45.56623840]
[328.01977539 -52.27471924]
[335.45901489 -52.33264160]
[348.98321533 -58.82080460]
[357.78967285 -72.65476990]
[374.15951538 -71.67492676]
[381.25286865 -56.88924408]
[371.77270508 -43.50797272]
[355.47137451 -45.29661560]
[341.94720459 -38.80844879]
[328.49124146 -32.17995071]
[315.10494995 -25.41183662]
[301.71865845 -18.64372253]
[303.02734375 -5.65072918]
[299.81558228 7.03993702]
[292.44775391 17.89921570]
[281.79043579 25.61101913]
[269.11032104 29.23171806]
[255.92385864 28.30556679]
[243.81576538 22.92194557]
[234.24870300 13.70724964]
[220.59246826 19.91265678]
[206.93621826 26.11806297]
[203.36096191 38.69301224]
[191.80580139 46.25326538]
[177.39318848 44.30108643]
[167.28898621 32.83888626]
[157.54133606 44.23990631]
[147.79368591 55.64092636]
[138.04603577 67.04194641]
[128.29838562 78.44297028]
[139.45359802 99.29611206]
[135.39579773 125.01998138]
[114.96164703 144.79945374]
[84.36552429 148.66813660]
[84.36552429 163.66813660]
[84.36552429 178.66813660]
[84.36552429 193.66813660]
[84.36552429 208.66813660]
[84.36552429 223.66813660]
[84.36552429 238.66813660]
[84.36552429 253.66813660]
[84.36552429 268.66815186]
[84.36552429 283.66815186]
[98.90541077 287.72946167]
[111.80979156 295.56396484]
[122.12107849 306.59030151]
[129.07409668 319.99023438]
[132.15289307 334.76937866]
[131.12901306 349.83105469]
[126.07840729 364.05758667]
[117.37587738 376.39324951]
[105.66722107 385.92266846]
[91.82128143 391.93869019]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 33]
[22 32]
[23 31]
[24 30]
[37 52]
[38 51]
[39 50]
[58 127]
[59 126]
[60 125]
[61 124]
[62 123]
[63 85]
[64 84]
[65 83]
[66 82]
[87 119]
[88 118]
[89 117]
[95 109]
[96 108]
[97 107]
[99 106]
[100 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
