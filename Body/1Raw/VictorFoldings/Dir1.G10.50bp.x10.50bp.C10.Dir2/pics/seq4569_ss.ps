%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUUCUCCGGGGGGGGGGGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUxxxxxxxxxxUACGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUCCCCCCCCCCAAAAUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[68.16395569 345.26873779]
[56.27968597 335.99365234]
[46.96097565 324.14352417]
[40.74961090 310.40734863]
[38.00671005 295.58374023]
[38.89173889 280.53448486]
[43.35324478 266.13452148]
[51.13184357 253.22109985]
[61.77529526 242.54493713]
[74.66480255 234.72674561]
[89.05098724 230.22108459]
[88.11536407 215.25028992]
[87.17973328 200.27949524]
[86.24410248 185.30871582]
[85.30847931 170.33792114]
[84.37284851 155.36712646]
[83.43721771 140.39633179]
[70.74228668 132.40641785]
[56.83973312 138.03837585]
[42.93717957 143.67033386]
[29.03462219 149.30229187]
[15.13206673 154.93424988]
[1.22951031 160.56620789]
[-0.81447369 175.78848267]
[-10.20845509 187.93955994]
[-24.42550087 193.75085449]
[-39.64129639 191.65916443]
[-51.76286697 182.22714233]
[-57.52957535 167.99195862]
[-55.39020157 152.78279114]
[-45.92023087 140.69084167]
[-31.66703415 134.96878052]
[-16.46465111 137.15582275]
[-4.40244627 146.66365051]
[9.50010967 141.03169250]
[23.40266609 135.39973450]
[37.30522156 129.76777649]
[51.20777893 124.13581848]
[65.11033630 118.50386047]
[61.94289398 107.74295044]
[61.96098328 96.71282959]
[65.05712891 86.32138824]
[70.87481689 77.39404297]
[78.84608459 70.60824585]
[88.24550629 66.44238281]
[98.25553894 65.14289856]
[108.03736115 66.71184540]
[114.66586304 53.25587845]
[113.82330322 37.45712280]
[126.38833618 29.45905304]
[133.01683044 16.00308800]
[139.64533997 2.54712272]
[146.27383423 -10.90884304]
[137.51541138 -22.31180000]
[136.83848572 -38.18740082]
[146.18452454 -52.87066650]
[138.19461060 -65.56559753]
[130.20469666 -78.26052094]
[122.21478271 -90.95545197]
[106.95318604 -95.90148163]
[101.43978119 -110.96740723]
[109.90399170 -124.59593201]
[125.85279083 -126.33242798]
[137.05162048 -114.84479523]
[134.90971375 -98.94537354]
[142.89962769 -86.25044250]
[150.88954163 -73.55551147]
[158.87945557 -60.86058044]
[157.95391846 -75.83200073]
[157.02838135 -90.80342102]
[151.16250610 -104.60890961]
[152.47221375 -119.55162048]
[160.65025330 -132.12617493]
[173.77816772 -139.38275146]
[188.77630615 -139.61903381]
[202.12629700 -132.77958679]
[210.69638062 -120.46887970]
[212.47613525 -105.57483673]
[207.04803467 -91.59142303]
[195.68507385 -81.79877472]
[188.23893738 -68.77744293]
[180.79280090 -55.75611496]
[193.57015991 -63.61354065]
[206.34751892 -71.47096252]
[214.04980469 -85.29070282]
[228.94421387 -85.36679077]
[236.64651489 -99.18653107]
[251.54092407 -99.26261902]
[264.31829834 -107.12004852]
[277.09564209 -114.97747040]
[289.87301636 -122.83489990]
[286.53836060 -137.60510254]
[288.18276978 -152.65750122]
[294.62780762 -166.35932922]
[305.17443848 -177.22428894]
[318.67858887 -184.07386780]
[333.67544556 -186.16505432]
[348.53823853 -183.27101135]
[361.65481567 -175.70567322]
[371.60235596 -164.28965759]
[377.30181885 -150.26130676]
[378.13497925 -135.14228821]
[374.01144409 -120.57261658]
[365.37854004 -108.13269806]
[353.17266846 -99.17192078]
[338.71786499 -94.66227722]
[323.58203125 -95.09294891]
[309.40701294 -100.41722107]
[297.73043823 -110.05754089]
[284.95306396 -102.20011902]
[272.17572021 -94.34268951]
[259.39834595 -86.48526764]
[252.60998535 -73.22753906]
[236.80165100 -72.58943939]
[230.01327515 -59.33171463]
[214.20494080 -58.69360733]
[201.42758179 -50.83618164]
[188.65022278 -42.97875595]
[185.01994324 -12.46959114]
[159.72979736 -4.28034401]
[153.10130310 9.17562103]
[146.47280884 22.63158607]
[139.84429932 36.08755112]
[141.16098022 50.92384720]
[128.12182617 59.88437653]
[121.49333191 73.34033966]
[132.62254333 86.52929688]
[136.12794495 103.95653534]
[130.65472412 121.41417694]
[117.07910156 134.44100952]
[98.40801239 139.46070862]
[99.34364319 154.43150330]
[100.27926636 169.40228271]
[101.21489716 184.37307739]
[102.15052795 199.34387207]
[103.08615112 214.31466675]
[104.02178192 229.28546143]
[118.85701752 231.96487427]
[132.61964417 238.11738586]
[144.50953674 247.38526917]
[153.83543396 259.22973633]
[160.05513000 272.96212769]
[162.80700684 287.78408813]
[161.93110657 302.83389282]
[157.47833252 317.23654175]
[149.70756531 330.15469360]
[139.07058716 340.83731079]
[126.18582153 348.66329956]
[111.80236816 353.17767334]
[96.75646210 354.11801147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 39]
[19 38]
[20 37]
[21 36]
[22 35]
[23 34]
[47 126]
[48 125]
[50 123]
[51 122]
[52 121]
[53 120]
[56 68]
[57 67]
[58 66]
[59 65]
[82 118]
[83 117]
[84 116]
[86 114]
[88 112]
[89 111]
[90 110]
[91 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
