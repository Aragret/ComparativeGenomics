%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAUCCCCAUACUGGGGGGGGGGAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCAACCAAUAGCCCUGGCCGxxxxxxxxxxCAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCUCAUCCUAGCAACCCCCCCCCCUAAUCCCCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[84.74900818 428.18963623]
[70.08734894 424.76480103]
[56.45830917 418.36611938]
[44.45769501 409.27334595]
[34.61012268 397.88391113]
[27.34608078 384.69573975]
[22.98312759 370.28540039]
[21.71198845 355.28280640]
[23.58823586 340.34381104]
[28.52984428 326.12149048]
[36.32078934 313.23760986]
[46.62048721 302.25534058]
[58.97867584 293.65481567]
[72.85511017 287.81204224]
[87.64316559 284.98236084]
[87.94329834 269.98538208]
[88.24343109 254.98837280]
[88.54356384 239.99137878]
[88.84369659 224.99438477]
[89.14382935 209.99739075]
[89.44396210 195.00039673]
[89.74409485 180.00338745]
[90.04422760 165.00639343]
[87.01683807 158.21795654]
[90.50339508 149.71313477]
[91.10353851 134.72515869]
[91.70368195 119.73715973]
[80.28185272 108.34141541]
[80.05815887 92.20849609]
[68.88424683 82.20130920]
[56.71706009 91.06349182]
[42.97845459 97.19973755]
[28.26994896 100.34404755]
[13.23497009 100.36135101]
[-1.46929169 97.25332642]
[-15.20060444 91.15821838]
[-27.35974884 82.34465790]
[-37.41667175 71.19986725]
[-44.93357849 58.21261978]
[-49.58400726 43.95182037]
[-51.16699982 29.04156303]
[-49.61577606 14.13385010]
[-45.00056076 -0.11994704]
[-37.52540588 -13.09753418]
[-48.69931793 -23.10471725]
[-59.87322998 -33.11190033]
[-72.49967957 -24.85144806]
[-86.83416748 -20.14135361]
[-101.89933014 -19.30276108]
[-116.66800690 -22.39284325]
[-130.13323975 -29.20091438]
[-141.37695312 -39.26279068]
[-149.63253784 -51.89243317]
[-154.33709717 -66.22873688]
[-155.16986084 -81.29421997]
[-152.07408142 -96.06170654]
[-145.26081848 -109.52430725]
[-135.19459534 -120.76413727]
[-122.56176758 -129.01483154]
[-108.22364807 -133.71385193]
[-93.15784454 -134.54081726]
[-78.39155579 -131.43933105]
[-64.93157959 -124.62086487]
[-53.69564438 -114.55030823]
[-45.44982529 -101.91429138]
[-40.75633621 -87.57436371]
[-39.93519592 -72.50823975]
[-43.04238129 -57.74315262]
[-49.86604691 -44.28581238]
[-38.69213486 -34.27862930]
[-27.51822281 -24.27144623]
[-15.44017506 -33.12675476]
[-1.77951980 -39.27959442]
[12.86762524 -42.45880127]
[27.86153793 -42.52303696]
[42.54683685 -39.46706009]
[56.28112030 -33.42206955]
[68.46307373 -24.65006638]
[78.55879211 -13.53251076]
[86.12519073 -0.55372238]
[90.82943726 13.72021198]
[92.46358490 28.66613007]
[90.95378876 43.63100052]
[86.36363220 57.96045303]
[78.89143372 71.02739716]
[90.06534576 81.03458405]
[104.04547882 78.97576141]
[116.26330566 86.07558441]
[130.35298157 80.92961884]
[144.44265747 75.78365326]
[158.53234863 70.63768005]
[172.62202454 65.49171448]
[186.71170044 60.34574509]
[199.57521057 52.63018036]
[210.74913025 42.62300110]
[221.92303467 32.61581802]
[233.09695435 22.60863495]
[237.68922424 6.86560202]
[253.68130493 3.23447943]
[264.62191772 15.45065403]
[259.25631714 30.94717216]
[243.10412598 33.78254700]
[231.93022156 43.78973007]
[220.75630188 53.79690933]
[209.58239746 63.80409241]
[224.31179810 60.96776962]
[239.23135376 62.51924133]
[253.06201172 68.32550049]
[264.61813354 77.88878632]
[272.90896606 90.38925171]
[277.22381592 104.75525665]
[277.19274902 119.75522614]
[272.81845093 134.10322571]
[264.47586060 146.56924438]
[252.88024902 156.08457947]
[239.02565002 161.83349609]
[224.09980774 163.32315063]
[209.38227844 160.42584229]
[196.13478088 153.38993835]
[185.49299622 142.81863403]
[178.36924744 129.61817932]
[175.37422180 114.92021942]
[176.76467896 99.98480225]
[182.42141724 86.09231567]
[191.85766602 74.43542480]
[177.76799011 79.58139038]
[163.67831421 84.72735596]
[149.58863831 89.87332916]
[135.49896240 95.01929474]
[121.40927887 100.16526794]
[117.29576874 112.61906433]
[106.69167328 120.33730316]
[106.09152985 135.32530212]
[105.49137878 150.31327820]
[105.04122162 165.30653381]
[104.74108887 180.30352783]
[104.44095612 195.30052185]
[104.14082336 210.29751587]
[103.84069061 225.29450989]
[103.54055786 240.29151917]
[103.24042511 255.28851318]
[102.94029999 270.28552246]
[102.64016724 285.28250122]
[117.30316925 288.70156860]
[130.93472290 295.09487915]
[142.93891907 304.18295288]
[152.79096985 315.56851196]
[160.06019592 328.75378418]
[164.42881775 343.16244507]
[165.70585632 358.16452026]
[163.83549500 373.10424805]
[158.89947510 387.32852173]
[151.11360168 400.21548462]
[140.81822205 411.20178223]
[128.46342468 419.80715942]
[114.58928680 425.65539551]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[25 134]
[26 133]
[27 132]
[29 86]
[30 85]
[44 71]
[45 70]
[46 69]
[88 130]
[89 129]
[90 128]
[91 127]
[92 126]
[93 125]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
