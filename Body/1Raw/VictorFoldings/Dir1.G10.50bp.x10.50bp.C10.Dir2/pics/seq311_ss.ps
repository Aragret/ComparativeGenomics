%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCCCCCGGGGGGGGGGUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAxxxxxxxxxxUACUCCCCAUAUCUAACAACGUAAAAAUAAAAUGACAGUUUGAACAUACACCCCCCCCCCAAACCCACCC\
) } def
/len { sequence length } bind def

/coor [
[91.98885345 391.18804932]
[78.14292145 385.17202759]
[66.43425751 375.64260864]
[57.73173141 363.30694580]
[52.68112946 349.08044434]
[51.65723801 334.01873779]
[54.73603821 319.23959351]
[61.68906021 305.83966064]
[72.00034332 294.81332397]
[84.90472412 286.97882080]
[99.44461060 282.91751099]
[99.44461060 267.91751099]
[99.44461060 252.91751099]
[99.44461060 237.91751099]
[99.44461060 222.91751099]
[99.44461060 207.91751099]
[99.44461060 192.91751099]
[99.44461060 177.91751099]
[99.44461060 162.91751099]
[99.44461060 147.91751099]
[99.44461060 132.91751099]
[93.45119476 128.40873718]
[88.57897186 142.59541321]
[73.58105469 142.34538269]
[69.18441010 128.00419617]
[81.46436310 119.39121246]
[75.47094727 114.88244629]
[61.05873108 119.04033661]
[52.07611465 132.33290100]
[36.07228851 133.45408630]
[25.32401657 121.54383087]
[28.07645416 105.73865509]
[42.21816635 98.16293335]
[56.90084457 104.62812042]
[71.31305695 100.47023010]
[72.09185028 93.01077271]
[57.17296219 91.45296478]
[58.73100281 76.53409576]
[73.64942932 78.09186554]
[74.42822266 70.63240814]
[61.18563461 63.58727264]
[47.94305038 56.54213715]
[36.23368454 66.23538971]
[21.70471954 70.70503235]
[6.57172346 69.26947021]
[-6.85763597 62.14761734]
[-16.53547859 50.42551041]
[-20.98600197 35.89068222]
[-19.53053474 20.75958633]
[-12.39102554 7.33960629]
[-0.65619701 -2.32280731]
[13.88447475 -6.75420713]
[29.01364326 -5.27883720]
[42.42421722 1.87831950]
[52.07118607 13.62584877]
[56.48345566 28.17233658]
[54.98818588 43.29954910]
[68.23077393 50.34468460]
[81.47335815 57.38982010]
[96.11685944 54.13899612]
[105.13438416 42.15216064]
[114.15191650 30.16532898]
[123.16944885 18.17849731]
[132.18698120 6.19166470]
[121.29354095 -4.14423418]
[111.64933777 -15.65454197]
[103.38011169 -28.18919754]
[96.59365082 -41.58478546]
[91.37844849 -55.66666412]
[87.80248260 -70.25125122]
[85.91237640 -85.14841461]
[85.73277283 -100.16391754]
[87.26601410 -115.10202026]
[90.49211121 -129.76797485]
[95.36901093 -143.97056580]
[101.83311462 -157.52464294]
[109.80017090 -170.25350952]
[119.16629791 -181.99119568]
[129.80940247 -192.58470154]
[141.59071350 -201.89588928]
[154.35664368 -209.80340576]
[167.94076538 -216.20413208]
[182.16598511 -221.01463318]
[196.84684753 -224.17218018]
[211.79194641 -225.63563538]
[226.80645752 -225.38589478]
[241.69462585 -223.42622375]
[256.26235962 -219.78218079]
[270.31970215 -214.50125122]
[283.68344116 -207.65229797]
[296.17935181 -199.32460022]
[307.64447021 -189.62673950]
[317.92938232 -178.68515015]
[326.89996338 -166.64245605]
[334.43930054 -153.65568542]
[340.44906616 -139.89411926]
[344.85092163 -125.53719330]
[347.58749390 -110.77207184]
[348.62307739 -95.79123688]
[347.94421387 -80.79000854]
[345.55972290 -65.96395111]
[341.50070190 -51.50635529]
[335.82003784 -37.60570526]
[328.59185791 -24.44322586]
[319.91033936 -12.19051552]
[309.88867188 -1.00731230]
[298.65750122 8.96058655]
[286.36328125 17.58322906]
[273.16629028 24.74819946]
[259.23855591 30.36209106]
[244.76164246 34.35171509]
[229.92431641 36.66505432]
[214.91999817 37.27195358]
[199.94430542 36.16450119]
[185.19248962 33.35713196]
[170.85684204 28.88644600]
[157.12426758 22.81073189]
[144.17381287 15.20919418]
[135.15628052 27.19602776]
[126.13874817 39.18286133]
[117.12122345 51.16969299]
[108.10369110 63.15652466]
[118.97306824 67.65148926]
[127.86938477 75.23931885]
[133.95018005 85.14510345]
[136.65716553 96.37736511]
[135.76718140 107.82725525]
[131.41007996 118.37796783]
[124.05171967 127.01372528]
[114.44461060 132.91751099]
[114.44461060 147.91751099]
[114.44461060 162.91751099]
[114.44461060 177.91751099]
[114.44461060 192.91751099]
[114.44461060 207.91751099]
[114.44461060 222.91751099]
[114.44461060 237.91751099]
[114.44461060 252.91751099]
[114.44461060 267.91751099]
[114.44461060 282.91751099]
[128.98449707 286.97882080]
[141.88888550 294.81332397]
[152.20016479 305.83966064]
[159.15318298 319.23959351]
[162.23197937 334.01873779]
[161.20809937 349.08044434]
[156.15748596 363.30694580]
[147.45497131 375.64260864]
[135.74630737 385.17202759]
[121.90036774 391.18804932]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 35]
[28 34]
[40 59]
[41 58]
[42 57]
[60 122]
[61 121]
[62 120]
[63 119]
[64 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
