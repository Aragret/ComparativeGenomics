%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACAAAACUAGGGGGGGGGGACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUxxxxxxxxxxUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACCUA\
) } def
/len { sequence length } bind def

/coor [
[83.47923279 375.54159546]
[69.99035645 368.81005859]
[58.50485229 359.04550171]
[49.69048309 346.81561279]
[44.05970383 332.83142090]
[41.93987274 317.90594482]
[43.45424271 302.90692139]
[48.51476669 288.70642090]
[56.82723236 276.13000488]
[67.90836334 265.90884399]
[81.11391449 258.63720703]
[95.67613983 254.73783875]
[95.36816406 239.74099731]
[95.06018829 224.74417114]
[94.75220490 209.74732971]
[94.44422913 194.75048828]
[94.13625336 179.75364685]
[93.82827759 164.75682068]
[93.52030182 149.75997925]
[93.21231842 134.76313782]
[92.90434265 119.76629639]
[90.21862793 118.58439636]
[87.72386169 117.03970337]
[85.46874237 115.16236877]
[71.90684509 121.57134247]
[63.01966476 135.35357666]
[46.65582275 134.27803040]
[39.64904022 119.45113373]
[49.20729446 106.12551880]
[65.49787140 108.00945282]
[79.05976868 101.60047150]
[80.81932068 91.44684601]
[87.19698334 83.35254669]
[96.65721130 79.26643372]
[99.71560669 64.58153534]
[102.77400208 49.89664078]
[96.78570557 36.14381027]
[83.95204926 28.37867546]
[71.11839294 20.61354065]
[58.28474045 12.84840488]
[45.45108795 5.08326960]
[32.61743164 -2.68186593]
[19.78377914 -10.44700146]
[7.98977995 -0.92453343]
[-6.35083532 3.98693776]
[-21.50636864 3.69432831]
[-35.64671326 -1.76702774]
[-47.06435776 -11.73764515]
[-54.38056564 -25.01352310]
[-56.71186447 -39.99153519]
[-53.77674103 -54.86301422]
[-45.92963028 -67.83215332]
[-34.11810303 -77.33287048]
[-19.76845932 -82.21790314]
[-4.61349058 -81.89736938]
[9.51676750 -76.40996552]
[20.91601753 -66.41831970]
[28.20774460 -53.12898254]
[30.51143837 -38.14669800]
[27.54891396 -23.28065491]
[40.38256836 -15.51552010]
[53.21622086 -7.75038433]
[66.04987335 0.01475118]
[78.88352966 7.77988672]
[91.71718597 15.54502201]
[104.55083466 23.31015778]
[111.07360840 24.86614037]
[114.96779633 28.77635765]
[126.15609741 18.78526115]
[137.34439087 8.79416466]
[128.68348694 -3.47312379]
[121.47741699 -16.64773750]
[115.82015228 -30.55791664]
[111.78543091 -45.02231598]
[109.42586517 -59.85235977]
[108.77220917 -74.85470581]
[109.83299255 -89.83377838]
[112.59437561 -104.59428406]
[117.02036285 -118.94379425]
[123.05325317 -132.69522095]
[130.61439514 -145.66931152]
[139.60520935 -157.69689941]
[149.90849304 -168.62120056]
[161.38992310 -178.29977417]
[173.89979553 -186.60644531]
[187.27502441 -193.43292236]
[201.34124756 -198.69021606]
[215.91508484 -202.30976868]
[230.80651855 -204.24440002]
[245.82142639 -204.46890259]
[260.76403809 -202.98033142]
[275.43957520 -199.79809570]
[289.65667725 -194.96369934]
[303.23004150 -188.54014587]
[315.98266602 -180.61117554]
[327.74829102 -171.28019714]
[338.37356567 -160.66880798]
[347.71997070 -148.91539001]
[355.66561890 -136.17315674]
[362.10693359 -122.60823822]
[366.95993042 -108.39746094]
[370.16137695 -93.72611237]
[371.66949463 -78.78545380]
[371.46466064 -63.77026749]
[369.54949951 -48.87630844]
[365.94903564 -34.29775238]
[360.71017456 -20.22465706]
[353.90118408 -6.84049702]
[345.61090088 5.68023920]
[335.94735718 17.17431831]
[325.03656006 27.49188995]
[313.02075195 36.49844360]
[300.05657959 44.07656479]
[286.31304932 50.12744904]
[271.96936035 54.57221603]
[257.21246338 57.35292053]
[242.23480225 58.43330383]
[227.23161316 57.79928970]
[212.39849854 55.45913696]
[197.92883301 51.44335556]
[184.01126099 45.80430222]
[170.82722473 38.61548996]
[158.54861450 29.97064209]
[147.33549500 19.98246002]
[136.14718628 29.97355843]
[124.95889282 39.96465302]
[117.45889282 52.95503616]
[114.40049744 67.63993073]
[111.34210205 82.32482910]
[120.91172028 101.93775940]
[107.90118408 119.45832062]
[108.20915985 134.45515442]
[108.51713562 149.45199585]
[108.82511139 164.44883728]
[109.13309479 179.44567871]
[109.44107056 194.44250488]
[109.74904633 209.43934631]
[110.05702209 224.43618774]
[110.36500549 239.43302917]
[110.67298126 254.42987061]
[125.38301849 257.72808838]
[138.87597656 264.45144653]
[150.36738586 274.20904541]
[159.18917847 286.43359375]
[164.82843018 300.41436768]
[166.95730591 315.33856201]
[165.45202637 330.33847046]
[160.40011597 344.54205322]
[152.09527588 357.12350464]
[141.02035522 367.35137939]
[127.81920624 374.63104248]
[113.25934601 378.53921509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 31]
[25 30]
[34 129]
[35 128]
[36 127]
[37 66]
[38 65]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[68 126]
[69 125]
[70 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
