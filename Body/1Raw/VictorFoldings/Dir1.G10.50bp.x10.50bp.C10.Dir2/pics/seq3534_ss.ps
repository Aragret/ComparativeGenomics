%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCCGACCUUAGGGGGGGGGGGCUCUCACCAUCGCUCUUCUACUAUGAACCCCCCUCCCCAUACCCAACCCxxxxxxxxxxGGCGUAAAUCUAACUUUCUUCCCACAACACUUUCUCGGCCUAUCCGGAAUCCCCCCCCCCGCCCCGACGUUA\
) } def
/len { sequence length } bind def

/coor [
[-18.62823105 283.42776489]
[-31.91481972 274.11743164]
[-44.47376633 263.84667969]
[-56.23579025 252.67213440]
[-67.13601685 240.65545654]
[-77.11431885 227.86289978]
[-86.11564636 214.36506653]
[-94.09036255 200.23638916]
[-100.99447632 185.55480957]
[-106.78989410 170.40130615]
[-111.44465637 154.85945129]
[-114.93309021 139.01501465]
[-117.23594666 122.95535278]
[-132.19821167 124.01855469]
[-147.16049194 125.08174896]
[-162.12275696 126.14494324]
[-177.08503723 127.20813751]
[-192.04730225 128.27133179]
[-207.00958252 129.33453369]
[-221.97186279 130.39772034]
[-236.93412781 131.46092224]
[-251.89640808 132.52410889]
[-266.85867310 133.58731079]
[-280.07571411 142.28330994]
[-293.31939697 135.46757507]
[-308.28167725 136.53076172]
[-311.30218506 151.32194519]
[-318.20233154 164.74917603]
[-328.47006226 175.81607056]
[-341.34347534 183.70138550]
[-355.86721802 187.81999207]
[-370.96359253 187.86624146]
[-385.51232910 183.83671570]
[-398.43380737 176.03042603]
[-408.76916504 165.02665710]
[-415.75146484 151.64195251]
[-418.86254883 136.86955261]
[-417.87158203 121.80567169]
[-412.85208130 107.56814575]
[-404.17654419 95.21349335]
[-392.48870850 85.65850830]
[-378.65597534 79.61223602]
[-363.70474243 77.52335358]
[-348.74453735 79.54685974]
[-334.88546753 85.53261566]
[-323.15600586 95.03642273]
[-314.42654419 107.35303497]
[-309.34487915 121.56848907]
[-294.38259888 120.50529480]
[-282.23574829 111.88535309]
[-267.92187500 118.62503815]
[-252.95959473 117.56184387]
[-237.99732971 116.49864960]
[-223.03504944 115.43544769]
[-208.07278442 114.37225342]
[-193.11050415 113.30905914]
[-178.14823914 112.24586487]
[-163.18595886 111.18267059]
[-148.22367859 110.11947632]
[-133.26141357 109.05627441]
[-118.29914093 107.99308014]
[-118.36283112 93.99365997]
[-117.52967834 80.01891327]
[-115.80308533 66.12622070]
[-113.19015503 52.37266541]
[-109.70160675 38.81471634]
[-105.35178375 25.50806999]
[-100.15854645 12.50737381]
[-94.14321899 -0.13397546]
[-87.33051300 -12.36405659]
[-79.74841309 -24.13263893]
[-71.42804718 -35.39138794]
[-62.40360260 -46.09405899]
[-52.71213531 -56.19669724]
[-42.39345169 -65.65780640]
[-31.48993301 -74.43852997]
[-20.04636192 -82.50280762]
[-8.10974121 -89.81751251]
[4.27090645 -96.35260010]
[17.04472923 -102.08123779]
[30.15926552 -106.97988892]
[43.56064987 -111.02844238]
[57.19383621 -114.21025848]
[71.00283813 -116.51228333]
[84.93093872 -117.92504883]
[98.92092896 -118.44275665]
[112.91535187 -118.06328583]
[126.85672760 -116.78819275]
[140.68778992 -114.62271118]
[154.35176086 -111.57572937]
[167.79248047 -107.65977478]
[180.95477295 -102.89093018]
[193.78457642 -97.28877258]
[206.22917175 -90.87631226]
[218.23747253 -83.67989349]
[229.76016235 -75.72906494]
[240.74989319 -67.05648804]
[251.16154480 -57.69778442]
[260.95236206 -47.69138336]
[270.08209229 -37.07839203]
[278.51327515 -25.90239334]
[286.21127319 -14.20929241]
[293.14447021 -2.04711413]
[299.28439331 10.53419018]
[304.60583496 23.48294449]
[309.08691406 36.74597168]
[312.70922852 50.26879120]
[315.45788574 63.99586487]
[317.32165527 77.87081146]
[318.29284668 91.83665466]
[318.36746216 105.83602142]
[317.54519653 119.81141663]
[315.82943726 133.70544434]
[313.22723389 147.46104431]
[327.74838257 151.22082520]
[342.26956177 154.98062134]
[351.42214966 154.10250854]
[357.04537964 158.96655273]
[371.48736572 163.01986694]
[385.92932129 167.07318115]
[400.56475830 160.50173950]
[414.76101685 167.97476196]
[417.62792969 183.75956726]
[406.96627808 195.74742126]
[390.95474243 194.74226379]
[381.87600708 181.51515198]
[367.43405151 177.46183777]
[352.99206543 173.40852356]
[338.50976562 169.50177002]
[323.98861694 165.74198914]
[309.46743774 161.98219299]
[304.28948975 177.35765076]
[297.98468018 192.30639648]
[290.58776855 206.74597168]
[282.13958740 220.59674072]
[272.68670654 233.78228760]
[262.28131104 246.22990417]
[250.98072815 257.87091064]
[238.84735107 268.64108276]
[225.94808960 278.48104858]
[212.35409546 287.33648682]
[198.14036560 295.15859985]
[183.38526917 301.90417480]
[168.17022705 307.53607178]
[152.57916260 312.02319336]
[136.69807434 315.34078979]
[120.61454773 317.47055054]
[104.41731262 318.40075684]
[88.19570923 318.12625122]
[72.03922272 316.64855957]
[56.03696823 313.97583008]
[40.27721405 310.12280273]
[24.84689331 305.11074829]
[9.83111763 298.96728516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 61]
[14 60]
[15 59]
[16 58]
[17 57]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[25 49]
[26 48]
[114 131]
[115 130]
[116 129]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
