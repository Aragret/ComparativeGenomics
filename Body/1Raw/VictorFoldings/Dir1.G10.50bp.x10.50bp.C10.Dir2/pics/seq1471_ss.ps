%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGAGCCACAGGGGGGGGGGGCUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCxxxxxxxxxxGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUCCCCCCCCCCUACGAGCCAAA\
) } def
/len { sequence length } bind def

/coor [
[57.63740540 497.71121216]
[44.14852524 490.97967529]
[32.66302490 481.21511841]
[23.84865379 468.98522949]
[18.21787262 455.00100708]
[16.09804344 440.07553101]
[17.61241341 425.07653809]
[22.67293739 410.87603760]
[30.98540115 398.29962158]
[42.06653214 388.07846069]
[55.27208710 380.80682373]
[69.83431244 376.90744019]
[69.52633667 361.91061401]
[69.21835327 346.91378784]
[68.91037750 331.91693115]
[68.60240173 316.92010498]
[68.29442596 301.92324829]
[67.98644257 286.92642212]
[67.67846680 271.92959595]
[67.37049103 256.93273926]
[67.06251526 241.93591309]
[66.75453186 226.93907166]
[58.01219177 239.12805176]
[44.66413116 245.97125244]
[29.66414070 245.95431519]
[16.33156013 239.08100891]
[7.61675119 226.87232971]
[5.44820833 212.02990723]
[10.30580807 197.83822632]
[21.11461449 187.43775940]
[35.48274994 183.13002014]
[50.23070145 185.86825562]
[62.09489822 195.04653931]
[68.45050049 208.63668823]
[71.50889587 193.95178223]
[74.56729126 179.26689148]
[77.62568665 164.58198547]
[75.89987946 157.34777832]
[80.90057373 149.62840271]
[84.25983429 135.00939941]
[87.61909485 120.39038849]
[90.97834778 105.77137756]
[92.36237335 90.83536530]
[91.74655151 75.84801483]
[91.13072205 60.86066055]
[90.51490021 45.87331009]
[89.89907074 30.88595581]
[89.28324890 15.89860153]
[74.44731140 13.35424042]
[60.47008896 7.78288174]
[47.96163559 -0.56968635]
[37.46735001 -11.33634472]
[29.44421005 -24.04477882]
[24.24085045 -38.13819504]
[22.08243179 -52.99971771]
[23.06089783 -67.97939301]
[27.13104820 -82.42259979]
[34.11263275 -95.69868469]
[43.69833374 -107.22846985]
[55.46727753 -116.50953674]
[68.90353394 -123.13810730]
[83.41871643 -126.82662964]
[82.80288696 -141.81398010]
[82.18706512 -156.80133057]
[81.57123566 -171.78869629]
[78.31288147 -177.65603638]
[78.52239990 -183.41311646]
[81.25061798 -187.40135193]
[73.51331329 -201.20152283]
[81.25061798 -213.92880249]
[81.25061798 -228.92880249]
[67.90948486 -236.53865051]
[60.17451859 -249.80763245]
[60.12637329 -265.16644287]
[67.77800751 -278.48364258]
[81.07116699 -286.17700195]
[96.43006134 -286.17700195]
[109.72322083 -278.48364258]
[117.37485504 -265.16644287]
[117.32671356 -249.80763245]
[109.59174347 -236.53865051]
[96.25061798 -228.92880249]
[96.25061798 -213.92880249]
[103.98791504 -201.20152283]
[96.25061798 -187.40135193]
[96.55859375 -172.40451050]
[97.17441559 -157.41716003]
[97.79024506 -142.42980957]
[98.40606689 -127.44245911]
[113.17492676 -124.95720673]
[127.10970306 -119.45330048]
[139.60040283 -111.16905975]
[150.09970093 -100.46456146]
[158.14692688 -87.80599976]
[163.38829041 -73.74539948]
[165.59240723 -58.89649582]
[164.66052246 -43.90799332]
[160.63093567 -29.43519783]
[153.67744446 -16.11137962]
[144.10185242 -4.52005625]
[132.32081604 4.83055878]
[118.84778595 11.52983952]
[104.27059937 15.28277588]
[104.88642883 30.27013016]
[105.50225067 45.25748444]
[106.11808014 60.24483490]
[106.73390198 75.23219299]
[107.34973145 90.21954346]
[115.31399536 77.50850677]
[127.69705963 69.04330444]
[142.43217468 66.23680115]
[157.06001282 69.55741119]
[169.13914490 78.45092010]
[176.65354919 91.43296814]
[178.34906006 106.33683777]
[173.94268799 120.67503357]
[164.16984558 132.05447388]
[150.66168213 138.57591248]
[135.67269897 139.15090942]
[121.70462036 133.68348694]
[111.08872986 123.08618164]
[105.59735870 109.13063812]
[102.23809814 123.74964905]
[98.87883759 138.36865234]
[95.51958466 152.98765564]
[92.31058502 167.64038086]
[89.25218964 182.32528687]
[86.19379425 197.01017761]
[83.13539886 211.69508362]
[81.75137329 226.63108826]
[82.05934906 241.62792969]
[82.36733246 256.62475586]
[82.67530823 271.62161255]
[82.98328400 286.61843872]
[83.29125977 301.61529541]
[83.59924316 316.61212158]
[83.90721893 331.60894775]
[84.21519470 346.60580444]
[84.52317047 361.60263062]
[84.83114624 376.59948730]
[99.54118347 379.89770508]
[113.03414154 386.62106323]
[124.52555847 396.37866211]
[133.34735107 408.60321045]
[138.98660278 422.58398438]
[141.11547852 437.50817871]
[139.61019897 452.50808716]
[134.55828857 466.71166992]
[126.25345612 479.29312134]
[115.17852020 489.52099609]
[101.97737885 496.80062866]
[87.41751862 500.70883179]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[34 129]
[35 128]
[36 127]
[37 126]
[39 125]
[40 124]
[41 123]
[42 122]
[43 108]
[44 107]
[45 106]
[46 105]
[47 104]
[48 103]
[62 89]
[63 88]
[64 87]
[65 86]
[68 85]
[70 83]
[71 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
