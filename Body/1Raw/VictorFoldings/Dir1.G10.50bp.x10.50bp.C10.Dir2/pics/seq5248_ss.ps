%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUCCUCGGGGGGGGGGAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAxxxxxxxxxxUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCCCCCCCCCCCAUAAUCCUC\
) } def
/len { sequence length } bind def

/coor [
[70.53504181 389.50283813]
[56.68910599 383.48681641]
[44.98044205 373.95739746]
[36.27791977 361.62173462]
[31.22731781 347.39520264]
[30.20342636 332.33352661]
[33.28222275 317.55435181]
[40.23524475 304.15441895]
[50.54653168 293.12808228]
[63.45091248 285.29357910]
[77.99079895 281.23226929]
[77.99079895 266.23226929]
[77.99079895 251.23226929]
[77.99079895 236.23226929]
[77.99079895 221.23226929]
[77.99079895 206.23226929]
[77.99079895 191.23226929]
[77.99079895 176.23226929]
[77.99079895 161.23226929]
[77.99079895 146.23226929]
[77.99079895 131.23226929]
[66.38945770 121.72391510]
[51.68149567 124.66939545]
[36.97353363 127.61488342]
[22.26557350 130.56036377]
[13.48851585 143.42897034]
[-1.46940851 146.20658875]
[-13.68356800 137.75970459]
[-28.39152908 140.70518494]
[-35.73595428 154.51074219]
[-50.25542831 160.31753540]
[-65.09429932 155.38377380]
[-73.24610138 142.03904724]
[-70.86181641 126.58429718]
[-59.06721497 116.31680298]
[-43.43135452 116.08455658]
[-31.33701134 125.99722290]
[-16.62904930 123.05173492]
[-8.60960102 110.55278015]
[6.26440430 107.35611725]
[19.32008934 115.85240173]
[34.02805328 112.90692139]
[48.73601151 109.96143341]
[63.44397354 107.01595306]
[79.17285919 82.62431335]
[100.16028595 82.97694397]
[103.56327057 68.36805725]
[102.46113586 59.23366165]
[107.19198608 53.49216843]
[110.89814758 38.95723343]
[114.60430908 24.42229652]
[113.22486877 20.14928436]
[113.30939484 16.07940483]
[114.60546875 12.65857697]
[116.73915100 10.20065689]
[119.27027130 8.85872269]
[124.17182159 -5.31783485]
[129.07336426 -19.49439240]
[133.97492981 -33.67095184]
[120.50592041 -40.31845093]
[107.97631073 -48.60169220]
[96.58369446 -58.39002991]
[86.50775909 -69.52909088]
[77.90740204 -81.84319305]
[70.91828156 -95.13813782]
[65.65061188 -109.20422363]
[62.18748093 -123.81962585]
[60.58350372 -138.75382996]
[60.86397552 -153.77130127]
[63.02447510 -168.63520813]
[67.03092957 -183.11109924]
[72.82014465 -196.97068787]
[80.30082703 -209.99539185]
[89.35498810 -221.97976685]
[99.83982849 -232.73483276]
[111.58998871 -242.09094238]
[124.42015839 -249.90055847]
[138.12799072 -256.04049683]
[152.49726868 -260.41390991]
[167.30139160 -262.95184326]
[182.30686951 -263.61428833]
[197.27705383 -262.39074707]
[211.97583008 -259.30056763]
[226.17137146 -254.39245605]
[239.63981628 -247.74382019]
[252.16873169 -239.45951843]
[263.56051636 -229.67022705]
[273.63552856 -218.53031921]
[282.23483276 -206.21548462]
[289.22283936 -192.91995239]
[294.48931885 -178.85342407]
[297.95123291 -164.23773193]
[299.55395508 -149.30339050]
[299.27221680 -134.28593445]
[297.11047363 -119.42222595]
[293.10278320 -104.94666290]
[287.31240845 -91.08756256]
[279.83062744 -78.06349945]
[270.77545166 -66.07987976]
[260.28970337 -55.32569885]
[248.53875732 -45.97057343]
[235.70793152 -38.16204453]
[221.99960327 -32.02326202]
[207.62994385 -27.65104485]
[192.82560730 -25.11434937]
[177.82006836 -24.45318222]
[162.84999084 -25.67797089]
[148.15147400 -28.76939964]
[143.24992371 -14.59284210]
[138.34837341 -0.41628426]
[133.44682312 13.76027393]
[129.13923645 28.12845802]
[125.43308258 42.66339493]
[121.72692108 57.19832993]
[118.17215729 71.77103424]
[114.76918030 86.37992859]
[122.08828735 99.47308350]
[136.31506348 104.22689819]
[150.54183960 108.98071289]
[167.48071289 108.26580048]
[172.85682678 124.34478760]
[158.89447021 133.96189880]
[145.78802490 123.20748901]
[131.56124878 118.45367432]
[117.33447266 113.69985962]
[111.24855042 118.08296204]
[120.01457214 130.25492859]
[107.84246826 139.02076721]
[99.07671356 126.84916687]
[92.99079895 131.23226929]
[92.99079895 146.23226929]
[92.99079895 161.23226929]
[92.99079895 176.23226929]
[92.99079895 191.23226929]
[92.99079895 206.23226929]
[92.99079895 221.23226929]
[92.99079895 236.23226929]
[92.99079895 251.23226929]
[92.99079895 266.23226929]
[92.99079895 281.23226929]
[107.53068542 285.29357910]
[120.43506622 293.12808228]
[130.74635315 304.15441895]
[137.69937134 317.55435181]
[140.77816772 332.33352661]
[139.75427246 347.39520264]
[134.70367432 361.62173462]
[126.00115204 373.95739746]
[114.29249573 383.48681641]
[100.44655609 389.50283813]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 44]
[23 43]
[24 42]
[25 41]
[28 38]
[29 37]
[46 116]
[47 115]
[49 114]
[50 113]
[51 112]
[56 111]
[57 110]
[58 109]
[59 108]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
