%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGUAUUUAGGGGGGGGGGGCUGACUCGCCACACUCCACGGAAGCAAUAUGAAAUGAUCUGCUGCAGUGxxxxxxxxxxAGUCUUGUAAACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAACCCCCCCCCCAAAGUCUUUA\
) } def
/len { sequence length } bind def

/coor [
[98.25084686 517.60693359]
[83.76115417 513.39849854]
[70.85492706 505.58236694]
[60.41212463 494.69152832]
[53.14476013 481.46853638]
[49.54833603 466.81491089]
[49.86805725 451.72982788]
[54.08212662 437.24176025]
[61.90322495 424.33853149]
[72.79809570 413.89996338]
[86.02390289 406.63769531]
[100.67889404 403.04693604]
[100.99095154 388.05017090]
[101.30300903 373.05340576]
[101.61505890 358.05667114]
[101.92711639 343.05990601]
[102.23917389 328.06314087]
[102.55123138 313.06640625]
[102.86328888 298.06964111]
[103.17534637 283.07290649]
[103.48739624 268.07614136]
[103.17534637 253.07939148]
[102.23971558 238.10859680]
[101.30408478 223.13780212]
[100.36846161 208.16700745]
[87.71784210 200.35037231]
[82.02845764 186.41857910]
[85.67619324 171.63522339]
[97.46565247 161.71984863]
[96.37434387 146.75959778]
[95.12746429 131.81150818]
[78.25788879 123.72750092]
[68.73426056 107.62673950]
[69.77430725 88.94915771]
[81.02662659 74.00529480]
[75.25035858 60.16207504]
[69.47408295 46.31885529]
[63.69781113 32.47563934]
[54.68028259 20.48880577]
[42.98065948 11.10164452]
[27.37478447 8.50024796]
[22.28991699 -5.49951601]
[6.68404245 -8.10091209]
[1.59917593 -22.10067749]
[-10.10044765 -31.48783875]
[-21.80007172 -40.87500000]
[-33.49969482 -50.26216125]
[-37.96057892 -50.77402115]
[-41.63089371 -52.53465271]
[-44.20909500 -55.12979889]
[-45.56413269 -58.08916473]
[-45.73874283 -60.94868469]
[-56.61756897 -71.27588654]
[-72.62804413 -72.29777527]
[-81.69295502 -85.53435516]
[-76.85847473 -100.83164978]
[-61.83320618 -106.45489502]
[-48.14324570 -98.09040833]
[-46.29036331 -82.15471649]
[-35.41153717 -71.82750702]
[-24.11253357 -61.96178436]
[-12.41290951 -52.57462311]
[-0.71328592 -43.18746185]
[10.98633766 -33.80030060]
[25.75537682 -31.87033653]
[31.67707825 -17.19913864]
[46.44611740 -15.26917553]
[52.36782074 -0.59797883]
[64.06744385 8.78918266]
[58.94168472 -5.30785894]
[57.27072906 -20.21449852]
[59.14808655 -35.09655380]
[64.46870422 -49.12121201]
[72.93482208 -61.50365067]
[84.07269287 -71.55093384]
[97.25901031 -78.70082092]
[111.75588226 -82.55319214]
[126.75204468 -82.89246368]
[141.40830994 -79.69966125]
[154.90449524 -73.15345001]
[166.48535156 -63.62015152]
[175.50280762 -51.63326645]
[181.45225525 -37.86358261]
[184.00073242 -23.08166122]
[183.00564575 -8.11470413]
[178.52267456 6.19972754]
[170.80268860 19.06059074]
[160.27769470 29.74818230]
[147.53669739 37.66442108]
[133.29266357 42.36630630]
[118.34272003 43.59072495]
[103.52346802 41.26914978]
[89.66419983 35.53149796]
[77.54103088 26.69936752]
[83.31729889 40.54258347]
[89.09357452 54.38580322]
[94.86984253 68.22901917]
[107.58451080 68.72399139]
[119.11352539 74.10816956]
[127.65462494 83.53988647]
[141.97721863 79.08306885]
[156.29981995 74.62625885]
[170.62242126 70.16944122]
[184.94502258 65.71262360]
[198.27235413 55.23320007]
[212.03161621 65.13871002]
[206.32215881 81.10237122]
[189.40182495 80.03522491]
[175.07923889 84.49203491]
[160.75663757 88.94885254]
[146.43403625 93.40567017]
[132.11143494 97.86248779]
[131.07386780 108.37425232]
[126.68881989 117.98389435]
[119.42868042 125.65618896]
[110.07555389 130.56463623]
[111.32242584 145.51272583]
[115.17592621 153.86750793]
[112.43644714 160.78421021]
[125.36870575 169.15457153]
[130.82870483 183.36871338]
[126.91819763 197.90046692]
[115.33924866 207.23138428]
[116.27487946 222.20217896]
[117.21050262 237.17297363]
[118.14613342 252.14375305]
[120.77091980 255.78683472]
[121.94008636 259.68606567]
[121.75693512 263.33963013]
[120.48098755 266.33392334]
[118.48415375 268.38818359]
[118.17209625 283.38494873]
[117.86003876 298.38171387]
[117.54798126 313.37844849]
[117.23593140 328.37521362]
[116.92387390 343.37197876]
[116.61181641 358.36871338]
[116.29975891 373.36547852]
[115.98770142 388.36221313]
[115.67564392 403.35897827]
[130.16857910 407.55627441]
[143.08084106 415.36239624]
[153.53205872 426.24517822]
[160.80963135 439.46255493]
[164.41737366 454.11340332]
[164.10929871 469.19873047]
[159.90641785 483.69003296]
[152.09527588 496.59930420]
[141.20848083 507.04629517]
[127.98828125 514.31878662]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 126]
[23 125]
[24 124]
[25 123]
[29 119]
[30 117]
[31 116]
[35 97]
[36 96]
[37 95]
[38 94]
[39 69]
[40 68]
[42 66]
[44 64]
[45 63]
[46 62]
[47 61]
[52 60]
[53 59]
[100 112]
[101 111]
[102 110]
[103 109]
[104 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
