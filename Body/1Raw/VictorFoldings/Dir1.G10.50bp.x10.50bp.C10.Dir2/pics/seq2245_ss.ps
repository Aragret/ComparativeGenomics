%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAUCCCCGGGGGGGGGGUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUUUGGACACUAGGxxxxxxxxxxCCCAAAAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACCCCCCCCCCCUAAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[133.24603271 584.06848145]
[119.40010071 578.05242920]
[107.69143677 568.52301025]
[98.98891449 556.18737793]
[93.93830872 541.96081543]
[92.91442108 526.89916992]
[95.99321747 512.11999512]
[102.94624329 498.72006226]
[113.25752258 487.69372559]
[126.16190338 479.85922241]
[140.70179749 475.79791260]
[140.70179749 460.79791260]
[140.70179749 445.79791260]
[140.70179749 430.79791260]
[140.70179749 415.79791260]
[140.70179749 400.79791260]
[140.70179749 385.79791260]
[140.70179749 370.79791260]
[140.70179749 355.79791260]
[140.70179749 340.79791260]
[140.70179749 325.79791260]
[138.37068176 310.98016357]
[133.76512146 296.70468140]
[129.15956116 282.42922974]
[114.20687866 282.87033081]
[99.72113037 279.07635498]
[86.87844086 271.34646606]
[76.72402191 260.29980469]
[70.08711243 246.82585144]
[67.51324463 232.01277161]
[69.21942902 217.05960083]
[75.07589722 203.17915344]
[84.61589813 191.49966431]
[97.07289886 182.97305298]
[92.46733093 168.69758606]
[87.86177063 154.42211914]
[83.25620270 140.14666748]
[78.65064240 125.87120056]
[69.50890350 113.97882080]
[56.89777756 105.85728455]
[44.28664780 97.73574066]
[31.67551994 89.61419678]
[19.06439209 81.49265289]
[6.45326424 73.37111664]
[-6.15786362 65.24957275]
[-18.76899147 57.12802887]
[-31.38011932 49.00648499]
[-43.99124908 40.88494492]
[-59.38254166 44.47431564]
[-72.75959778 36.05826187]
[-76.18604279 20.62987900]
[-67.62902832 7.34255266]
[-52.16528320 4.07941675]
[-38.96916580 12.77643299]
[-35.86970520 28.27381706]
[-23.25857735 36.39535904]
[-10.64744949 44.51689911]
[1.96367848 52.63844299]
[14.57480621 60.75998688]
[27.18593407 68.88153076]
[39.79706192 77.00306702]
[52.40819168 85.12461090]
[65.01931763 93.24615479]
[77.63044739 101.36769867]
[83.32115936 88.09803772]
[95.04454041 82.10475922]
[97.22138214 67.26355743]
[83.30899811 61.44148636]
[71.28208923 52.34180069]
[61.89666748 40.53651810]
[55.74271393 26.76772499]
[53.20706940 11.90093899]
[54.44913101 -3.12930059]
[59.39081192 -17.37818146]
[67.72148132 -29.95000458]
[78.91746521 -40.05449677]
[92.27497864 -47.05648041]
[106.95434570 -50.51580429]
[122.03282166 -50.21501160]
[136.56254578 -46.17301559]
[149.63018799 -38.64389038]
[160.41429138 -28.10093307]
[168.23695374 -15.20687580]
[172.60644531 -0.77225322]
[173.24809265 14.29556370]
[170.12156677 29.04939842]
[163.42340088 42.56181335]
[153.57464600 53.98340607]
[141.19439697 62.59620667]
[127.06089783 67.85880280]
[112.06258392 69.44039154]
[109.88574982 84.28159332]
[116.61415100 90.35839844]
[119.83183289 99.16109467]
[118.52722931 108.75112915]
[112.71997833 116.87299347]
[103.52050018 121.48435211]
[92.92610168 121.26564026]
[97.53166199 135.54110718]
[102.13722992 149.81655884]
[106.74279022 164.09202576]
[111.34835815 178.36747742]
[126.43973541 178.00640869]
[141.00668335 181.90849304]
[153.87086487 189.74926758]
[163.99420166 200.88598633]
[170.56259155 214.41033936]
[173.05139160 229.22256470]
[171.26734924 244.12081909]
[165.36352539 257.89871216]
[155.82624817 269.44305420]
[143.43501282 277.82366943]
[148.04058838 292.09912109]
[152.64614868 306.37460327]
[156.56269836 291.89492798]
[165.36370850 279.74822998]
[177.90307617 271.51632690]
[192.54783630 268.27117920]
[207.39088440 270.43539429]
[220.49928284 277.72717285]
[230.16598511 289.19689941]
[235.13215637 303.35095215]
[234.75105286 318.34609985]
[229.07232666 332.22961426]
[218.83546448 343.19351196]
[205.37359619 349.80999756]
[190.43977356 351.21746826]
[175.97875977 347.23260498]
[163.87374878 338.37435913]
[155.70179749 325.79791260]
[155.70179749 340.79791260]
[155.70179749 355.79791260]
[155.70179749 370.79791260]
[155.70179749 385.79791260]
[155.70179749 400.79791260]
[155.70179749 415.79791260]
[155.70179749 430.79791260]
[155.70179749 445.79791260]
[155.70179749 460.79791260]
[155.70179749 475.79791260]
[170.24168396 479.85922241]
[183.14605713 487.69372559]
[193.45735168 498.72006226]
[200.41036987 512.11999512]
[203.48916626 526.89916992]
[202.46527100 541.96081543]
[197.41467285 556.18737793]
[188.71214294 568.52301025]
[177.00347900 578.05242920]
[163.15754700 584.06848145]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 114]
[23 113]
[24 112]
[34 102]
[35 101]
[36 100]
[37 99]
[38 98]
[39 64]
[40 63]
[41 62]
[42 61]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[66 92]
[67 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
