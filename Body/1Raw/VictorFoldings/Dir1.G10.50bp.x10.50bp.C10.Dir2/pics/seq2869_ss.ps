%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUACCAAGGGGGGGGGGACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCGGAGCAGAACCCAACCUxxxxxxxxxxAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCACCCCCCCCCCAUACUACCAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 385.22253418]
[71.19830322 379.20648193]
[59.48964310 369.67706299]
[50.78712082 357.34140015]
[45.73651886 343.11489868]
[44.71262741 328.05319214]
[47.79142761 313.27404785]
[54.74444962 299.87411499]
[65.05573273 288.84777832]
[77.96011353 281.01327515]
[92.50000000 276.95196533]
[92.50000000 261.95196533]
[92.50000000 246.95196533]
[92.50000000 231.95196533]
[92.50000000 216.95196533]
[92.50000000 201.95196533]
[92.50000000 186.95196533]
[92.50000000 171.95196533]
[92.50000000 156.95196533]
[92.50000000 141.95196533]
[77.07350922 135.92483521]
[65.10959625 124.47196960]
[58.41518402 109.32311249]
[58.00131989 92.76618195]
[63.93051147 77.30178070]
[52.83919525 67.20312500]
[41.64342880 57.22040176]
[30.34442329 47.35467911]
[19.04541969 37.48895645]
[5.43332577 46.35471344]
[-10.10301876 51.05167770]
[-26.31915092 51.21175003]
[-41.91843033 46.82990646]
[-55.65571594 38.26398849]
[-66.43675995 26.20549011]
[-73.40534973 11.62373638]
[-76.01134491 -4.31203127]
[-74.05404663 -20.32640839]
[-67.69767761 -35.13990784]
[-79.39730072 -44.52706909]
[-91.09692383 -53.91423035]
[-102.79655457 -63.30139160]
[-114.49617767 -72.68855286]
[-126.19580078 -82.07571411]
[-137.89541626 -91.46287537]
[-149.97540283 -100.35522461]
[-162.41485596 -108.73737335]
[-176.54315186 -102.54103088]
[-191.77502441 -104.98924255]
[-203.25001526 -115.30078888]
[-207.30651855 -130.18528748]
[-202.65011597 -144.89315796]
[-190.76663208 -154.73115540]
[-175.44804382 -156.56004333]
[-161.58248901 -149.79618835]
[-153.59437561 -136.59794617]
[-154.03269958 -121.17681122]
[-141.59326172 -112.79467010]
[-138.76387024 -113.24392700]
[-135.58116150 -112.56245422]
[-132.48895264 -110.60795593]
[-129.97471619 -107.40643311]
[-128.50825500 -103.16249847]
[-116.80863953 -93.77533722]
[-105.10901642 -84.38817596]
[-93.40938568 -75.00101471]
[-81.70976257 -65.61385345]
[-70.01013947 -56.22669220]
[-58.31051636 -46.83953094]
[-47.24300385 -55.14675140]
[-34.49068069 -60.54614258]
[-20.80323029 -62.71507645]
[-6.98655891 -61.52099991]
[6.14464855 -57.02951050]
[17.81496620 -49.50077820]
[27.33401680 -39.37446976]
[34.13731384 -27.24409676]
[37.81972885 -13.82220078]
[38.15962601 0.10147592]
[35.13218307 13.70647240]
[28.91114235 26.18995094]
[40.21014786 36.05567551]
[51.50915146 45.92139816]
[58.66246796 47.96484756]
[62.93784332 56.11181259]
[74.02915955 66.21046448]
[94.25514221 57.77188110]
[116.00035858 60.50055695]
[133.51426697 73.67488861]
[146.75685120 66.62975311]
[159.99943542 59.58462143]
[156.93572998 44.79305649]
[158.16476440 29.73761940]
[163.58691406 15.63878918]
[172.76261902 3.63949275]
[184.94804382 -5.28753996]
[199.15539551 -10.41863441]
[214.23291016 -11.33783627]
[228.95835876 -7.97062969]
[242.13798523 -0.58997899]
[252.70339966 10.20580006]
[259.79809570 23.54154015]
[262.84692383 38.33617401]
[261.60278320 53.39036942]
[256.16647339 67.48374939]
[246.97871399 79.47381592]
[234.78431702 88.38860321]
[220.57182312 93.50542450]
[205.49339294 94.40947723]
[190.77133179 91.02748108]
[177.59912109 83.63359070]
[167.04457092 72.82720947]
[153.80198669 79.87233734]
[140.55940247 86.91747284]
[142.07624817 93.23194122]
[142.61607361 99.70355988]
[142.16633606 106.18206787]
[156.39311218 110.93588257]
[170.61988831 115.68969727]
[187.55876160 114.97479248]
[192.93487549 131.05377197]
[178.97251892 140.67089844]
[165.86607361 129.91647339]
[151.63929749 125.16266632]
[137.41252136 120.40885162]
[133.96615601 125.73941803]
[129.76626587 130.49896240]
[124.90602112 134.58189392]
[119.49324036 137.89764404]
[113.64801025 140.37263489]
[107.50000000 141.95196533]
[107.50000000 156.95196533]
[107.50000000 171.95196533]
[107.50000000 186.95196533]
[107.50000000 201.95196533]
[107.50000000 216.95196533]
[107.50000000 231.95196533]
[107.50000000 246.95196533]
[107.50000000 261.95196533]
[107.50000000 276.95196533]
[122.03988647 281.01327515]
[134.94427490 288.84777832]
[145.25555420 299.87411499]
[152.20857239 313.27404785]
[155.28736877 328.05319214]
[154.26348877 343.11489868]
[149.21287537 357.34140015]
[140.51036072 369.67706299]
[128.80169678 379.20648193]
[114.95575714 385.22253418]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 86]
[26 85]
[27 83]
[28 82]
[29 81]
[39 69]
[40 68]
[41 67]
[42 66]
[43 65]
[44 64]
[45 63]
[46 58]
[47 57]
[89 114]
[90 113]
[91 112]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
