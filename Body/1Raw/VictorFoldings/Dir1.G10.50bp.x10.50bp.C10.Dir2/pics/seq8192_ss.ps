%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUGCCCCGGGGGGGGGGCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUUUCCCCCUCxxxxxxxxxxCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAAAGACAACCACCCCCCCCCCUCAUUCCCCC\
) } def
/len { sequence length } bind def

/coor [
[18.42511368 288.40829468]
[4.88988066 281.95111084]
[-8.13790417 274.52316284]
[-20.58873367 266.16409302]
[-32.39617538 256.91845703]
[-43.49723434 246.83558655]
[-53.83267975 235.96929932]
[-63.34737396 224.37757874]
[-71.99054718 212.12223816]
[-79.71608734 199.26869202]
[-93.10237122 206.03681946]
[-106.48865509 212.80493164]
[-115.31305695 225.93658447]
[-130.16224670 224.77430725]
[-143.54853821 231.54243469]
[-156.93481445 238.31054688]
[-165.75923157 251.44219971]
[-180.60841370 250.27992249]
[-193.99470520 257.04803467]
[-207.38098145 263.81616211]
[-220.76727295 270.58425903]
[-221.53883362 285.92376709]
[-229.89024353 298.81365967]
[-243.57501221 305.78665161]
[-258.91201782 304.96701050]
[-271.77569580 296.57522583]
[-278.70571899 282.86868286]
[-277.83801270 267.53430176]
[-269.40597534 254.69702148]
[-255.67774963 247.80996704]
[-240.34617615 248.72573853]
[-227.53538513 257.19799805]
[-214.14909363 250.42987061]
[-200.76281738 243.66175842]
[-187.37652588 236.89364624]
[-179.50959778 224.24609375]
[-163.70292664 224.92425537]
[-150.31665039 218.15614319]
[-136.93035889 211.38803101]
[-129.06343079 198.74047852]
[-113.25676727 199.41864014]
[-99.87048340 192.65052795]
[-86.48419952 185.88241577]
[-92.25569916 172.04090881]
[-97.00144196 157.81503296]
[-100.69610596 143.28070068]
[-103.31998444 128.51544189]
[-104.85906982 113.59803772]
[-105.30516052 98.60809326]
[-104.65586853 83.62556458]
[-102.91465759 68.73040771]
[-100.09082031 54.00208664]
[-96.19942474 39.51918030]
[-91.26123810 25.35895920]
[-85.30259705 11.59697819]
[-78.35529327 -1.69333971]
[-70.45639801 -14.44108582]
[-61.64805222 -26.57824516]
[-51.97725677 -38.04006195]
[-41.49560547 -48.76538467]
[-30.25901985 -58.69698334]
[-18.32745552 -67.78187561]
[-5.76456785 -75.97159576]
[7.36261272 -83.22243500]
[20.98404884 -89.49571228]
[35.02706528 -94.75795746]
[49.41673660 -98.98110199]
[64.07628632 -102.14260101]
[78.92750549 -104.22560120]
[93.89115143 -105.21897125]
[108.88739777 -105.11743164]
[123.83621979 -103.92150116]
[138.65786743 -101.63758087]
[153.27325439 -98.27784729]
[167.60441589 -93.86022949]
[181.57489014 -88.40828705]
[195.11012268 -81.95111847]
[208.13790894 -74.52317810]
[220.58872986 -66.16408539]
[232.39617920 -56.91844559]
[243.49723816 -46.83558655]
[253.83268738 -35.96930313]
[263.34738159 -24.37757492]
[271.99053955 -12.12224388]
[279.71609497 0.73130101]
[293.10235596 -6.03681374]
[306.48864746 -12.80492878]
[319.87493896 -19.57304382]
[333.11752319 -26.61817741]
[346.21069336 -33.93728256]
[359.30383301 -41.25638962]
[345.96746826 -48.12232971]
[342.81161499 -62.78659058]
[352.14294434 -74.53078461]
[367.14102173 -74.77085876]
[376.84344482 -63.33133316]
[374.15893555 -48.57411575]
[387.94131470 -54.49407959]
[401.72369385 -60.41403961]
[415.50607300 -66.33400726]
[429.28845215 -72.25396729]
[438.66275024 -85.70962524]
[454.97766113 -84.04965973]
[461.44982910 -68.98171234]
[451.42123413 -56.00638199]
[435.20843506 -58.47158432]
[421.42605591 -52.55162430]
[407.64367676 -46.63166046]
[393.86129761 -40.71169662]
[380.07891846 -34.79173279]
[366.62292480 -28.16323471]
[353.52978516 -20.84412956]
[340.43661499 -13.52502346]
[338.28607178 -9.19483185]
[333.35925293 -6.20186615]
[326.64306641 -6.18675852]
[313.25677490 0.58135635]
[299.87048340 7.34947109]
[286.48419189 14.11758614]
[292.25570679 27.95909500]
[297.00143433 42.18496704]
[300.69610596 56.71930695]
[303.31997681 71.48456573]
[304.85906982 86.40196228]
[305.30514526 101.39190674]
[304.65585327 116.37443542]
[302.91464233 131.26959229]
[300.09082031 145.99790955]
[296.19943237 160.48081970]
[291.26123047 174.64103699]
[285.30258179 188.40301514]
[278.35528564 201.69334412]
[270.45639038 214.44108582]
[261.64804077 226.57824707]
[251.97726440 238.04005432]
[241.49560547 248.76538086]
[230.25901794 258.69699097]
[218.32745361 267.78189087]
[205.76457214 275.97158813]
[192.63739014 283.22244263]
[179.01594543 289.49569702]
[164.97293091 294.75796509]
[150.58326721 298.98110962]
[135.92370605 302.14260864]
[121.07249451 304.22558594]
[106.10884857 305.21896362]
[91.11260223 305.11743164]
[76.16378021 303.92150879]
[61.34213257 301.63757324]
[46.72674179 298.27786255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 43]
[11 42]
[12 41]
[14 39]
[15 38]
[16 37]
[18 35]
[19 34]
[20 33]
[21 32]
[85 119]
[86 118]
[87 117]
[88 116]
[89 113]
[90 112]
[91 111]
[97 110]
[98 109]
[99 108]
[100 107]
[101 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
