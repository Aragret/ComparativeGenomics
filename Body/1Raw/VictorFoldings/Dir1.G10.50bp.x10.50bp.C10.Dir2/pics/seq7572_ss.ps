%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCACAACAAGGGGGGGGGGAACUAACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAxxxxxxxxxxGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCUUAUUUACCGAGAAAGCCCCCCCCCCCUCACAAGAA\
) } def
/len { sequence length } bind def

/coor [
[87.26609802 523.35681152]
[73.42015839 517.34082031]
[61.71149445 507.81137085]
[53.00897217 495.47570801]
[47.95837021 481.24917603]
[46.93447876 466.18750000]
[50.01327515 451.40835571]
[56.96629715 438.00842285]
[67.27758026 426.98208618]
[80.18196106 419.14758301]
[94.72184753 415.08627319]
[94.72184753 400.08627319]
[94.72184753 385.08627319]
[94.72184753 370.08627319]
[94.72184753 355.08627319]
[94.72184753 340.08627319]
[94.72184753 325.08627319]
[94.72184753 310.08627319]
[94.72184753 295.08627319]
[94.72184753 280.08627319]
[91.99147797 276.09619141]
[91.78297424 270.33532715]
[95.04689026 264.46554565]
[95.67086792 249.47851562]
[85.42844391 238.72546387]
[85.84774780 223.51760864]
[97.19599152 212.84732056]
[97.81996918 197.86029053]
[97.66393280 182.86111450]
[96.72830200 167.89031982]
[95.79267120 152.91952515]
[94.85704803 137.94873047]
[75.73262024 129.62516785]
[63.80663681 112.51387024]
[62.61671829 91.69057465]
[72.51582336 73.33210754]
[64.00473022 60.98053741]
[55.49364090 48.62896347]
[46.85452652 36.36659622]
[38.08831787 24.19475937]
[28.10559273 12.99899387]
[17.01427650 2.90034485]
[5.92296124 -7.19830465]
[-5.16835403 -17.29695511]
[-16.25967026 -27.39560318]
[-27.35098457 -37.49425507]
[-38.44229889 -47.59290314]
[-51.85405731 -40.52886963]
[-66.87345123 -38.48101807]
[-81.68680573 -41.69663239]
[-94.50534821 -49.78741455]
[-103.78117371 -61.77636337]
[-108.39418030 -76.21575165]
[-107.78732300 -91.36196136]
[-102.03388977 -105.38600159]
[-91.82862854 -116.59441376]
[-78.40386963 -123.63371277]
[-63.38073349 -125.65388489]
[-48.57332611 -122.41097260]
[-35.76971436 -114.29658508]
[-26.51599884 -102.29056549]
[-21.92961121 -87.84269714]
[-22.56437874 -72.69763184]
[-28.34365082 -58.68421936]
[-17.25233459 -48.58556747]
[-6.16101980 -38.48691940]
[4.93029547 -28.38826942]
[16.02161026 -18.28961945]
[27.11292648 -8.19097042]
[38.20424271 1.90767896]
[35.83362198 -12.90380859]
[41.05755615 -26.96476555]
[52.52384567 -36.63555527]
[67.26448059 -39.41292572]
[81.46388245 -34.57796097]
[91.44658661 -23.38217735]
[94.62860107 -8.72356892]
[90.18627167 5.60352755]
[79.26947784 15.89058590]
[64.70399475 19.47483444]
[50.26015472 15.42855263]
[59.02636337 27.60038948]
[65.52957916 31.21339989]
[67.84521484 40.11787415]
[76.35630798 52.46944809]
[84.86739349 64.82102203]
[93.36832428 60.78471375]
[102.93376923 58.85596085]
[113.02927399 59.31022263]
[123.05079651 62.28499985]
[134.14212036 52.18634796]
[145.23342896 42.08769989]
[156.32473755 31.98904991]
[160.78752136 16.20881844]
[176.74923706 12.44642830]
[187.78985596 24.57230186]
[182.55172729 40.11238098]
[166.42340088 43.08036423]
[155.33207703 53.17901611]
[144.24076843 63.27766418]
[133.14944458 73.37631226]
[140.33195496 86.54489899]
[154.82756042 82.68773651]
[161.29655457 68.45095062]
[175.42555237 61.74980545]
[190.54327393 65.74837494]
[199.51158142 78.55866241]
[198.09593201 94.13203430]
[186.96473694 105.11522675]
[171.37380981 106.32230377]
[158.68470764 97.18333435]
[144.18911743 101.04049683]
[140.20056152 114.46840668]
[132.39791870 125.53065491]
[121.84474182 133.23590088]
[109.82783508 137.01310730]
[110.76346588 151.98390198]
[111.69909668 166.95468140]
[112.63471985 181.92547607]
[124.59371185 172.87106323]
[139.18025208 176.36865234]
[145.73274231 189.86178589]
[139.46186829 203.48808289]
[124.95110321 207.28782654]
[112.80698395 198.48426819]
[112.18300629 213.47128296]
[122.60501099 225.04797363]
[121.75871277 240.23805237]
[110.65788269 250.10249329]
[110.03390503 265.08950806]
[109.72184753 280.08627319]
[109.72184753 295.08627319]
[109.72184753 310.08627319]
[109.72184753 325.08627319]
[109.72184753 340.08627319]
[109.72184753 355.08627319]
[109.72184753 370.08627319]
[109.72184753 385.08627319]
[109.72184753 400.08627319]
[109.72184753 415.08627319]
[124.26173401 419.14758301]
[137.16612244 426.98208618]
[147.47740173 438.00842285]
[154.43041992 451.40835571]
[157.50921631 466.18750000]
[156.48533630 481.24917603]
[151.43472290 495.47570801]
[142.73220825 507.81137085]
[131.02354431 517.34082031]
[117.17760468 523.35681152]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[27 126]
[28 125]
[29 119]
[30 118]
[31 117]
[32 116]
[36 86]
[37 85]
[38 84]
[39 82]
[40 81]
[41 70]
[42 69]
[43 68]
[44 67]
[45 66]
[46 65]
[47 64]
[90 101]
[91 100]
[92 99]
[93 98]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
