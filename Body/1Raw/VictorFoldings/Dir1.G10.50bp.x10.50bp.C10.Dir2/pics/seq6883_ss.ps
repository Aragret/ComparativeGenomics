%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAGCACACCAUAGGGGGGGGGGUAUUUACAGUAGGAAUAGACGUAGACACACGAGCAUAUUUCACCUCCGCUxxxxxxxxxxUCCCACUCCUAAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCCCCCCCCCCCUGAGCUCACCAUA\
) } def
/len { sequence length } bind def

/coor [
[83.31238556 416.51126099]
[69.86972809 409.73779297]
[58.06594849 400.39669800]
[48.38440323 388.87054443]
[41.22153854 375.63125610]
[36.87067795 361.22103882]
[35.50998306 346.22991943]
[37.19517517 331.27182007]
[41.85724258 316.95922852]
[49.30528259 303.87826538]
[59.23429871 292.56457520]
[71.23770142 283.48144531]
[84.82396698 277.00085449]
[99.43673706 273.38812256]
[98.83659363 258.40014648]
[98.23645020 243.41213989]
[97.63630676 228.42414856]
[97.03616333 213.43617249]
[96.43601990 198.44818115]
[95.83587646 183.46018982]
[95.23573303 168.47219849]
[94.63558960 153.48420715]
[94.03544617 138.49621582]
[93.43529510 123.50823212]
[77.24575806 108.83044434]
[79.29600525 87.07418060]
[69.62866974 75.60498047]
[59.96133041 64.13578033]
[50.29399109 52.66657639]
[32.85273361 46.84156036]
[30.38376427 29.49121666]
[20.48887634 18.21774292]
[10.59398937 6.94426966]
[-1.25281501 -2.25644946]
[-14.62471962 -9.05293179]
[-27.99662399 -15.84941387]
[-41.56647110 -22.24153519]
[-55.32204056 -28.22353554]
[-69.07760620 -34.20553589]
[-82.83317566 -40.18753815]
[-96.64791107 -46.03161621]
[-114.80738068 -43.13994598]
[-125.01284790 -57.38700867]
[-138.99673462 -62.81386566]
[-152.98062134 -68.24072266]
[-167.33912659 -61.63701248]
[-182.13246155 -67.19876099]
[-188.58398438 -81.62627411]
[-182.86614990 -96.35997009]
[-168.37123108 -102.65860748]
[-153.69880676 -96.78531647]
[-147.55377197 -82.22460938]
[-133.56988525 -76.79776001]
[-119.58599091 -71.37090302]
[-108.35834503 -75.96605682]
[-96.64208984 -71.51531982]
[-90.94233704 -59.90412140]
[-83.51847839 -60.27043915]
[-76.85118103 -53.94310379]
[-63.09560776 -47.96110535]
[-49.34004211 -41.97910309]
[-35.58447266 -35.99710464]
[-32.14313507 -36.97969437]
[-28.04945946 -36.30896378]
[-24.10222435 -33.69454193]
[-21.20014191 -29.22131920]
[-7.82823706 -22.42483711]
[5.54366732 -15.62835407]
[-2.42947817 -28.33382416]
[-6.38085556 -42.80401993]
[-5.97171926 -57.79843903]
[-1.23714387 -72.03163147]
[7.41698265 -84.28340912]
[19.24875641 -93.50345612]
[33.24385834 -98.90133667]
[48.20251083 -100.01430511]
[62.84233475 -96.74694824]
[75.90827942 -89.37937927]
[86.28022003 -78.54319763]
[93.06899261 -65.16738129]
[95.69260406 -50.39860916]
[93.92613983 -35.50298309]
[87.92102814 -21.75748825]
[78.19208527 -10.34049988]
[65.57334900 -2.23077774]
[51.14661407 1.87644422]
[36.14865494 1.62906075]
[21.86746216 -2.95061803]
[31.76235008 8.32285500]
[41.65723801 19.59632874]
[53.73777771 20.70808029]
[62.07250595 30.06821251]
[61.76319504 42.99924088]
[71.43053436 54.46844101]
[81.09786987 65.93764496]
[90.76520538 77.40684509]
[101.78301239 71.50978088]
[116.04190826 71.52334595]
[127.98017120 62.44161606]
[133.81648254 47.11616135]
[150.04769897 44.77531433]
[159.97654724 57.82713699]
[153.38906860 72.84503174]
[137.06190491 74.37987518]
[125.12364197 83.46160889]
[129.98666382 97.65143585]
[144.98591614 97.50135803]
[159.98515320 97.35128784]
[174.97314453 96.75114441]
[189.93637085 95.70146942]
[204.89961243 94.65179443]
[219.86283875 93.60211945]
[228.90454102 80.84353638]
[244.04496765 76.93182373]
[258.13525391 83.71398163]
[264.52243042 97.98767090]
[260.19061279 113.01329803]
[247.18521118 121.69622040]
[231.64694214 119.93663025]
[220.91250610 108.56534576]
[205.94927979 109.61502075]
[190.98605347 110.66469574]
[176.02282715 111.71437073]
[173.42471313 114.17568970]
[169.48423767 115.47209167]
[164.77565002 114.97701263]
[160.13523865 112.35053253]
[145.13598633 112.50061035]
[130.13673401 112.65068054]
[119.72495270 120.63487244]
[108.42328644 122.90808105]
[109.02342987 137.89607239]
[109.62357330 152.88406372]
[110.22371674 167.87205505]
[110.82386780 182.86004639]
[111.42401123 197.84803772]
[112.02415466 212.83601379]
[112.62429810 227.82400513]
[113.22444153 242.81199646]
[113.82458496 257.79998779]
[114.42472839 272.78796387]
[129.27957153 275.22076416]
[143.34049988 280.59432983]
[156.03172302 288.68865967]
[166.83352661 299.17224121]
[175.30361938 311.61581421]
[181.09512329 325.50982666]
[183.97090149 340.28530884]
[183.81317139 355.33721924]
[180.62841797 370.04919434]
[174.54702759 383.81878662]
[165.81805420 396.08212280]
[154.79893494 406.33706665]
[141.94088745 414.16366577]
[127.77044678 419.24142456]
[112.86788940 421.36239624]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[26 96]
[27 95]
[28 94]
[29 93]
[31 90]
[32 89]
[33 88]
[34 68]
[35 67]
[36 66]
[37 62]
[38 61]
[39 60]
[40 59]
[41 57]
[43 54]
[44 53]
[45 52]
[98 105]
[99 104]
[106 129]
[107 128]
[108 127]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
