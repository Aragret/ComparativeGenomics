%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAUAUUGGGGGGGGGGCAUCCCUGUAGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUxxxxxxxxxxCCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCUUCAAAGCCCCCCCCCCCCAUACUAUU\
) } def
/len { sequence length } bind def

/coor [
[62.62582016 632.65234375]
[48.77988434 626.63635254]
[37.07122040 617.10693359]
[28.36869621 604.77124023]
[23.31809425 590.54473877]
[22.29420471 575.48303223]
[25.37300301 560.70385742]
[32.32602310 547.30395508]
[42.63731003 536.27764893]
[55.54169083 528.44311523]
[70.08157349 524.38177490]
[70.08157349 509.38180542]
[70.08157349 494.38180542]
[70.08157349 479.38180542]
[70.08157349 464.38180542]
[70.08157349 449.38180542]
[70.08157349 434.38180542]
[70.08157349 419.38180542]
[70.08157349 404.38180542]
[70.08157349 389.38180542]
[70.08157349 374.38180542]
[62.34427643 361.65454102]
[70.08157349 347.85437012]
[67.79988861 345.08642578]
[66.78049469 341.05374146]
[67.61294556 336.37835693]
[70.57882690 331.92602539]
[71.51445770 316.95523071]
[64.58609009 303.77014160]
[73.16911316 290.47946167]
[74.10473633 275.50866699]
[63.38841248 270.37533569]
[55.02603149 261.88482666]
[50.02714157 251.02853394]
[49.00661850 239.08538818]
[52.10912704 227.47120667]
[58.98914337 217.57086182]
[68.84929657 210.57310486]
[80.53269196 207.32792664]
[82.40030670 192.44464111]
[84.26791382 177.56135559]
[85.67021942 162.62705994]
[86.60585022 147.65626526]
[87.54148102 132.68547058]
[88.47710419 117.71467590]
[63.09068298 83.62007141]
[57.60364914 69.65968323]
[52.11661911 55.69929123]
[46.62958527 41.73889923]
[31.89090347 44.72927475]
[16.85685730 45.11468506]
[1.98431265 42.88341904]
[-12.27476883 38.10328293]
[-25.48707008 30.91953468]
[-37.25108337 21.55048370]
[-47.20931244 10.28084469]
[-55.05914307 -2.54691029]
[-60.56202316 -16.54296112]
[-63.55072784 -31.28198242]
[-63.93443298 -46.31607437]
[-61.70148087 -61.18836594]
[-56.91972351 -75.44690704]
[-49.73447800 -88.65838623]
[-40.36409378 -100.42134094]
[-29.09332657 -110.37829590]
[-16.26468086 -118.22666931]
[-2.26800704 -123.72795868]
[12.47135353 -126.71499634]
[27.50548744 -127.09699249]
[42.37752533 -124.86235809]
[56.63552094 -120.07897949]
[69.84619141 -112.89223480]
[81.60807800 -103.52052307]
[91.56375885 -92.24861908]
[99.41067505 -79.41909027]
[104.91038513 -65.42179108]
[107.89574432 -50.68209076]
[108.27603912 -35.64791107]
[106.03971100 -20.77612877]
[101.25472260 -6.51867390]
[94.06648254 6.69118214]
[84.69342804 18.45200729]
[73.42040253 28.40640450]
[60.58997726 36.25186920]
[66.07701111 50.21225739]
[71.56404114 64.17264557]
[77.05107117 78.13304138]
[84.23516083 80.28682709]
[80.78165436 65.68980408]
[91.69637299 55.40053940]
[106.06446075 59.70843506]
[109.51765442 74.30554199]
[98.60334778 84.59441376]
[105.78743744 86.74820709]
[118.04980469 78.10909271]
[130.31217957 69.46997833]
[136.70498657 54.36818314]
[153.01094055 52.62242508]
[162.45588684 66.02857971]
[155.32365417 80.79555511]
[138.95129395 81.73234558]
[126.68892670 90.37145996]
[114.42655945 99.01057434]
[129.42642212 99.07315063]
[139.49722290 110.18975830]
[138.08232117 125.12287903]
[126.10289001 134.15023804]
[111.35819244 131.39451599]
[103.44789886 118.65030670]
[102.51226807 133.62109375]
[101.57663727 148.59188843]
[100.64101410 163.56268311]
[103.02947235 168.34962463]
[103.27331543 173.09230042]
[101.75975800 176.96667480]
[99.15119934 179.42897034]
[97.28358459 194.31225586]
[95.41596985 209.19552612]
[110.46339417 219.76324463]
[118.08435822 236.40431213]
[116.27235413 254.53268433]
[105.60767365 269.19955444]
[89.07553101 276.44430542]
[88.13990021 291.41506958]
[95.00135040 305.67098999]
[86.48524475 317.89086914]
[85.54962158 332.86166382]
[85.08157349 347.85437012]
[92.81887817 361.65454102]
[85.08157349 374.38180542]
[85.08157349 389.38180542]
[85.08157349 404.38180542]
[85.08157349 419.38180542]
[85.08157349 434.38180542]
[85.08157349 449.38180542]
[85.08157349 464.38180542]
[85.08157349 479.38180542]
[85.08157349 494.38180542]
[85.08157349 509.38180542]
[85.08157349 524.38177490]
[99.62145996 528.44311523]
[112.52584839 536.27764893]
[122.83712769 547.30395508]
[129.79014587 560.70385742]
[132.86894226 575.48303223]
[131.84506226 590.54473877]
[126.79445648 604.77124023]
[118.09193420 617.10693359]
[106.38327026 626.63635254]
[92.53733063 632.65234375]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[27 127]
[28 126]
[30 124]
[31 123]
[39 118]
[40 117]
[41 116]
[42 112]
[43 111]
[44 110]
[45 109]
[46 87]
[47 86]
[48 85]
[49 84]
[94 103]
[95 102]
[96 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
