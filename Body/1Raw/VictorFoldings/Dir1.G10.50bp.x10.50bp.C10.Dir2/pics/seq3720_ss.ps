%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUAGCCUAGCCGGGGGGGGGGGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUxxxxxxxxxxAUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACCCCCCCCCCCUCCAGCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[109.56343842 591.76965332]
[94.90177917 588.34478760]
[81.27274323 581.94616699]
[69.27213287 572.85333252]
[59.42455673 561.46392822]
[52.16051483 548.27575684]
[47.79756165 533.86541748]
[46.52642441 518.86279297]
[48.40266800 503.92382812]
[53.34427643 489.70150757]
[61.13522339 476.81762695]
[71.43492126 465.83535767]
[83.79310608 457.23483276]
[97.66954041 451.39202881]
[112.45760345 448.56237793]
[112.75773621 433.56539917]
[113.05786896 418.56838989]
[113.35800171 403.57138062]
[113.65812683 388.57440186]
[113.95825958 373.57739258]
[114.25839233 358.58041382]
[114.55852509 343.58340454]
[114.85865784 328.58639526]
[115.15879059 313.58941650]
[115.45892334 298.59240723]
[106.16461945 283.73489380]
[115.74627686 268.04028320]
[115.74627686 253.04029846]
[114.99621582 238.05906677]
[113.49795532 223.13407898]
[111.99969482 208.20909119]
[110.50143433 193.28410339]
[108.25873566 178.45269775]
[105.27720642 163.75201416]
[102.29567719 149.05131531]
[99.31414032 134.35061646]
[96.33261108 119.64991760]
[76.68524170 104.81293488]
[84.59328461 77.07207489]
[77.13665009 64.05675507]
[69.68001556 51.04143524]
[65.73380280 48.94176102]
[62.97054291 45.97579956]
[61.51826096 42.63360977]
[61.32850266 39.39543533]
[62.19556046 36.67368317]
[55.80344009 23.10383415]
[46.25133514 11.53848553]
[34.13374710 2.69744134]
[22.01615715 -6.14360237]
[9.89856911 -14.98464680]
[-5.23761463 -11.05654907]
[-19.33524323 -17.82344437]
[-25.73784828 -32.09021378]
[-21.42231369 -47.12052155]
[-8.42630386 -55.81752014]
[7.11386204 -54.07474899]
[17.86059380 -42.71509171]
[18.73961258 -27.10223389]
[30.85720062 -18.26119041]
[42.97478867 -9.42014694]
[55.09237671 -0.57910275]
[49.18424225 -14.36655903]
[46.55254364 -29.13389206]
[47.33406830 -44.11351776]
[51.48820114 -58.52681732]
[58.79900742 -71.62461090]
[68.88648987 -82.72608185]
[81.22631073 -91.25420380]
[95.17706299 -96.76568604]
[110.01361084 -98.97406006]
[124.96476746 -97.76453400]
[139.25338745 -93.19997406]
[152.13677979 -85.51763916]
[162.94528198 -75.11685181]
[171.11706543 -62.53822327]
[176.22740173 -48.43558121]
[178.01063538 -33.54195786]
[176.37409973 -18.63150024]
[171.40283203 -4.47923565]
[163.35527039 8.17922211]
[152.64967346 18.68590355]
[139.84252930 26.49468613]
[125.59953308 31.19968033]
[110.66101074 32.55632782]
[95.80344391 30.49411201]
[81.79911041 25.12022209]
[69.37329102 16.71171188]
[75.76541138 30.28156090]
[82.69533539 43.58479691]
[90.15196991 56.60012054]
[97.60860443 69.61544037]
[112.39215851 72.15444946]
[123.76406097 62.37284851]
[135.13597107 52.59124756]
[146.50787354 42.80964279]
[146.13575745 27.17648888]
[155.93981934 14.99394512]
[171.29089355 12.01423836]
[184.94065857 19.64429283]
[190.44412231 34.28143311]
[185.20272827 49.01444626]
[171.69126892 56.88685608]
[156.28947449 54.18154907]
[144.91757202 63.96315384]
[133.54566956 73.74475861]
[122.17375946 83.52635956]
[124.96015167 97.56412506]
[120.34523773 109.68769836]
[111.03330994 116.66838837]
[114.01483917 131.36907959]
[116.99636841 146.06977844]
[119.97790527 160.77047729]
[122.95943451 175.47117615]
[133.52700806 164.82569885]
[148.45959473 166.24629211]
[156.83026123 178.69345093]
[152.51380920 193.05897522]
[138.66877747 198.83090210]
[125.42642212 191.78584290]
[126.92468262 206.71083069]
[128.42294312 221.63581848]
[129.92120361 236.56080627]
[141.49923706 227.02409363]
[156.21525574 229.92910767]
[163.30079651 243.15011597]
[157.57104492 257.01266479]
[143.21871948 261.37280273]
[130.74627686 253.04029846]
[130.74627686 268.04028320]
[139.31669617 277.72817993]
[138.97634888 290.25671387]
[130.45591736 298.89254761]
[130.15579224 313.88955688]
[129.85565186 328.88653564]
[129.55552673 343.88354492]
[129.25538635 358.88052368]
[128.95526123 373.87753296]
[128.65512085 388.87454224]
[128.35499573 403.87152100]
[128.05487061 418.86853027]
[127.75473022 433.86550903]
[127.45459747 448.86251831]
[142.11759949 452.28158569]
[155.74916077 458.67489624]
[167.75334167 467.76296997]
[177.60540771 479.14849854]
[184.87463379 492.33380127]
[189.24325562 506.74243164]
[190.52029419 521.74450684]
[188.64991760 536.68426514]
[183.71391296 550.90850830]
[175.92803955 563.79547119]
[165.63265991 574.78179932]
[153.27786255 583.38714600]
[139.40371704 589.23541260]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[27 130]
[28 129]
[29 123]
[30 122]
[31 121]
[32 120]
[33 114]
[34 113]
[35 112]
[36 111]
[37 110]
[39 92]
[40 91]
[41 90]
[46 89]
[47 88]
[48 62]
[49 61]
[50 60]
[51 59]
[93 107]
[94 106]
[95 105]
[96 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
