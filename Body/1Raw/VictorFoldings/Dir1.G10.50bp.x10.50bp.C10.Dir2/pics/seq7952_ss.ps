%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCUUUUAGGGGGGGGGGAGUUAAAGAUUAAGAGAACCAACACCUCUUUACAGUGAAAUGCCCCAACUxxxxxxxxxxUAGCCGCAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCCCCCCCCCCCUACCCUUUUA\
) } def
/len { sequence length } bind def

/coor [
[83.37834167 364.38919067]
[70.15814209 357.11672974]
[59.27133942 346.66970825]
[51.46020889 333.76046753]
[47.25732803 319.26913452]
[46.94925308 304.18380737]
[50.55699539 289.53298950]
[57.83456802 276.31561279]
[68.28577423 265.43283081]
[81.19803619 257.62667847]
[95.69097137 253.42939758]
[95.37892151 238.43264771]
[95.06686401 223.43588257]
[94.75480652 208.43913269]
[94.44274902 193.44238281]
[94.13069153 178.44563293]
[93.81863403 163.44886780]
[93.50658417 148.45211792]
[93.19452667 133.45536804]
[92.88246918 118.45861053]
[86.81320190 121.39833832]
[79.52079773 122.58472443]
[71.46893311 121.68914795]
[57.68655396 127.60910797]
[43.90417099 133.52906799]
[30.12178993 139.44903564]
[17.95466614 151.25570679]
[3.24121189 142.83248901]
[7.26215601 126.36225891]
[24.20182800 125.66665649]
[37.98420715 119.74668884]
[51.76659012 113.82672882]
[65.54897308 107.90676117]
[63.83619690 93.00419617]
[62.12359238 78.10295868]
[47.35753632 75.46409607]
[32.59148026 72.82523346]
[22.17330742 84.20350647]
[7.25160313 88.12094116]
[-7.41217279 83.32748413]
[-17.13886070 71.35271454]
[-18.82471275 56.01773834]
[-11.93177605 42.21589279]
[1.34043658 34.35129166]
[16.75681114 34.93350601]
[29.39803696 43.77674866]
[35.23034668 58.05917358]
[49.99640274 60.69804001]
[64.76245880 63.33690262]
[78.48251343 57.27389145]
[86.47242737 44.57896042]
[94.46234131 31.88403130]
[102.45225525 19.18910217]
[102.69915771 0.80653054]
[118.47158051 -6.82435656]
[126.19567108 -19.68275833]
[119.93614960 -28.58796120]
[117.94871521 -39.81470108]
[121.03353882 -51.32634354]
[129.02963257 -60.84894562]
[140.76953125 -66.31839752]
[140.14555359 -81.30541229]
[139.52157593 -96.29243469]
[124.79505920 -99.57754517]
[111.42102814 -106.56307983]
[100.31135559 -116.77276611]
[92.22351837 -129.51046753]
[87.70895386 -143.90773010]
[87.07546997 -158.98292542]
[90.36627197 -173.70817566]
[97.35697174 -187.07949829]
[107.57094574 -198.18522644]
[120.31177521 -206.26815796]
[134.71078491 -210.77716064]
[149.78620911 -211.40481567]
[164.51019287 -208.10833740]
[177.87881470 -201.11247253]
[188.98060608 -190.89421082]
[197.05859375 -178.15025330]
[201.56204224 -163.74951172]
[202.18388367 -148.67384338]
[198.88171387 -133.95114136]
[191.88069153 -120.58521271]
[181.65814209 -109.48737335]
[168.91107178 -101.41429138]
[154.50859070 -96.91640472]
[155.13256836 -81.92938995]
[155.75654602 -66.94237518]
[168.36767578 -58.82083511]
[178.25311279 -71.17351532]
[192.95429993 -68.78092957]
[206.85685730 -74.41288757]
[220.75941467 -80.04484558]
[234.66195679 -85.67679596]
[248.56451416 -91.30875397]
[254.32931519 -102.89413452]
[266.07586670 -107.28018188]
[277.28088379 -102.61599731]
[291.29760742 -107.95751190]
[305.31433105 -113.29901886]
[319.33102417 -118.64053345]
[325.56472778 -133.16351318]
[340.27267456 -138.94725037]
[354.72891235 -132.56037903]
[360.35684204 -117.79209900]
[353.81747437 -103.40417480]
[338.99053955 -97.93270874]
[324.67254639 -104.62381744]
[310.65582275 -99.28231049]
[296.63912964 -93.94079590]
[282.62240601 -88.59928131]
[272.33578491 -74.41530609]
[254.19647217 -77.40619659]
[240.29391479 -71.77424622]
[226.39135742 -66.14228821]
[212.48881531 -60.51033020]
[198.58625793 -54.87837219]
[189.69522095 -42.92852783]
[173.99963379 -44.91827774]
[164.87655640 -17.03725433]
[139.05407715 -11.95867443]
[131.32998657 0.89972830]
[133.95019531 12.75054359]
[127.56604767 23.54228401]
[115.14718628 27.17901802]
[107.15727234 39.87394714]
[99.16735840 52.56887817]
[91.17743683 65.26380920]
[126.31793976 91.00949097]
[107.87921906 118.14656067]
[108.19127655 133.14331055]
[108.50333405 148.14006042]
[108.81539154 163.13682556]
[109.12744904 178.13357544]
[109.43950653 193.13032532]
[109.75155640 208.12707520]
[110.06361389 223.12384033]
[110.37567139 238.12059021]
[110.68772888 253.11734009]
[125.34272003 256.70809937]
[138.56852722 263.97036743]
[149.46339417 274.40896606]
[157.28450012 287.31216431]
[161.49856567 301.80023193]
[161.81828308 316.88534546]
[158.22186279 331.53894043]
[150.95449829 344.76193237]
[140.51168823 355.65277100]
[127.60546875 363.46890259]
[113.11577606 367.67736816]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 33]
[24 32]
[25 31]
[26 30]
[35 49]
[36 48]
[37 47]
[50 128]
[51 127]
[52 126]
[53 125]
[55 122]
[56 121]
[61 88]
[62 87]
[63 86]
[89 119]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[98 111]
[99 110]
[100 109]
[101 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
