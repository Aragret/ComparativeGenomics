%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAGCAUCAUGGGGGGGGGGCCCUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCxxxxxxxxxxAGACCUCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUCCCCCCCCCCUUACCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[77.20333099 387.89971924]
[63.35739136 381.88369751]
[51.64872742 372.35427856]
[42.94620514 360.01861572]
[37.89560318 345.79208374]
[36.87171173 330.73040771]
[39.95050812 315.95123291]
[46.90353012 302.55133057]
[57.21481705 291.52499390]
[70.11919403 283.69049072]
[84.65908051 279.62915039]
[84.65908051 264.62915039]
[84.65908051 249.62916565]
[84.65908051 234.62916565]
[84.65908051 219.62916565]
[84.65908051 204.62916565]
[84.65908051 189.62916565]
[84.65908051 174.62916565]
[84.65908051 159.62916565]
[84.65908051 144.62916565]
[67.99216461 126.12399292]
[64.85739899 104.57103729]
[73.07822418 87.78852081]
[86.82691956 80.31622314]
[74.93453979 71.17449188]
[63.04216003 62.03275681]
[52.61590195 72.83892059]
[41.04527283 82.40973663]
[28.47579193 90.62485504]
[15.06552792 97.38095093]
[0.98313099 102.59306335]
[-13.59429741 106.19564056]
[-28.48343277 108.14337921]
[-43.49702454 108.41178894]
[-58.44626617 106.99748993]
[-73.14315033 103.91826630]
[-87.40284729 99.21284485]
[-101.04603577 92.94040680]
[-113.90112305 85.17982483]
[-125.80645752 76.02870178]
[-136.61230469 65.60211945]
[-146.18278503 54.03120422]
[-154.39752197 41.46147537]
[-161.15321350 28.05101013]
[-166.36489868 13.96845627]
[-169.96705627 -0.60907978]
[-171.91435242 -15.49827194]
[-172.18231201 -30.51187325]
[-170.76756287 -45.46107101]
[-167.68789673 -60.15786362]
[-162.98205566 -74.41741943]
[-156.70919800 -88.06041718]
[-148.94822693 -100.91527557]
[-139.79675293 -112.82033539]
[-129.36984253 -123.62587738]
[-117.79864502 -133.19599915]
[-105.22867584 -141.41036987]
[-91.81800842 -148.16566467]
[-77.73529816 -153.37692261]
[-63.15765381 -156.97863770]
[-48.26840210 -158.92549133]
[-33.25479507 -159.19299316]
[-18.30563927 -157.77780151]
[-3.60893846 -154.69770813]
[10.65047932 -149.99142456]
[24.29328918 -143.71817017]
[37.14791489 -135.95681763]
[49.05270004 -126.80498505]
[59.85792923 -116.37775421]
[69.42771149 -104.80626678]
[77.64170074 -92.23605347]
[84.39659119 -78.82518005]
[89.60743713 -64.74231720]
[93.20870972 -50.16456604]
[95.15511322 -35.27525711]
[95.42218018 -20.26163864]
[94.00653839 -5.31252623]
[90.92599487 9.38408184]
[86.21929932 23.64335823]
[79.94563293 37.28598022]
[72.18389130 50.14037704]
[84.07627106 59.28210831]
[95.96865082 68.42384338]
[110.96784210 68.26780701]
[122.66746521 58.88064575]
[134.36709595 49.49348450]
[146.06671143 40.10632324]
[157.76634216 30.71916008]
[159.96130371 17.96627998]
[169.95353699 10.39169025]
[182.02601624 11.64164352]
[193.91839600 2.49990964]
[205.81077576 -6.64182425]
[217.70315552 -15.78355885]
[219.50367737 -31.48495102]
[231.93118286 -41.24879456]
[247.61265564 -39.28237534]
[257.24456787 -26.75233459]
[255.11245728 -11.09252357]
[242.48129272 -1.59363008]
[226.84489441 -3.89117885]
[214.95251465 5.25055552]
[203.06013489 14.39228916]
[191.16775513 23.53402328]
[185.38766479 40.07459259]
[167.15350342 42.41878510]
[155.45387268 51.80594635]
[143.75425720 61.19310760]
[132.05462646 70.58026886]
[120.35500336 79.96743011]
[124.81182098 94.29003143]
[139.77206421 95.38134003]
[152.80270386 86.02279663]
[168.20423889 90.51410675]
[174.16195679 105.40991974]
[166.10560608 119.28343964]
[150.21530151 121.49208832]
[138.68075562 110.34159088]
[123.72051239 109.25027466]
[119.56262207 123.66249084]
[132.80520630 130.70762634]
[146.04779053 137.75276184]
[161.74925232 134.45977783]
[174.02119446 144.79316711]
[173.44964600 160.82603455]
[160.47303772 170.25933838]
[145.04592896 165.85665894]
[139.00265503 150.99534607]
[125.76007080 143.95021057]
[112.51748657 136.90507507]
[99.65908051 144.62916565]
[99.65908051 159.62916565]
[99.65908051 174.62916565]
[99.65908051 189.62916565]
[99.65908051 204.62916565]
[99.65908051 219.62916565]
[99.65908051 234.62916565]
[99.65908051 249.62916565]
[99.65908051 264.62915039]
[99.65908051 279.62915039]
[114.19897461 283.69049072]
[127.10335541 291.52499390]
[137.41464233 302.55133057]
[144.36766052 315.95123291]
[147.44645691 330.73040771]
[146.42256165 345.79208374]
[141.37196350 360.01861572]
[132.66943359 372.35427856]
[120.96077728 381.88369751]
[107.11483765 387.89971924]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 83]
[25 82]
[26 81]
[84 110]
[85 109]
[86 108]
[87 107]
[88 106]
[91 104]
[92 103]
[93 102]
[94 101]
[111 119]
[112 118]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
