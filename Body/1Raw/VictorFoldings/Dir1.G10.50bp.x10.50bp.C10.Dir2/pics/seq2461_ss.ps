%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCACACCCAGGGGGGGGGGAUUGGACCAAUCUAUCACCCUAUAGAAGAACUAAUGUUAGUAUAAGUAACxxxxxxxxxxCUAACCCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCCCCCCCCCCCUCACCCCCA\
) } def
/len { sequence length } bind def

/coor [
[64.85461426 381.62106323]
[50.83266830 376.06805420]
[38.63270950 367.20172119]
[29.02164078 355.57940674]
[22.60361481 341.93170166]
[19.78207779 327.11651611]
[20.73439407 312.06512451]
[25.40069962 297.72369385]
[33.48766708 284.99374390]
[44.48693848 274.67547607]
[57.70709991 267.41751099]
[72.31710815 263.67605591]
[72.31710815 248.67607117]
[72.31710815 233.67607117]
[72.31710815 218.67607117]
[72.31710815 203.67607117]
[72.31710815 188.67607117]
[72.31710815 173.67607117]
[72.31710815 158.67607117]
[72.31710815 143.67607117]
[72.31710815 128.67607117]
[86.74511719 90.75630951]
[81.04045105 76.88343048]
[75.33579254 63.01055145]
[69.63112640 49.13767242]
[63.92646408 35.26478958]
[58.22179794 21.39191055]
[52.51713562 7.51902914]
[34.76094437 -4.40579700]
[38.13076019 -24.73399162]
[31.58288956 -38.22937393]
[25.03501892 -51.72475815]
[18.48714828 -65.22014618]
[11.93927860 -78.71553040]
[5.39140797 -92.21091461]
[2.54380465 -77.48368835]
[-6.72226191 -65.68792725]
[-20.35630798 -59.43390274]
[-35.34126282 -60.10557175]
[-48.36111069 -67.55429840]
[-56.53469849 -80.13175201]
[-58.05329895 -95.05468750]
[-52.58085632 -109.02080536]
[-41.32836914 -118.93954468]
[-26.78589058 -122.61600494]
[-12.17152214 -119.23661804]
[-0.71753752 -109.54683685]
[-4.07679605 -124.16584778]
[-7.43605518 -138.78485107]
[-10.79531384 -153.40386963]
[-18.29531288 -166.39424133]
[-29.27611542 -176.61294556]
[-40.25691986 -186.83166504]
[-51.23772049 -197.05036926]
[-67.33280945 -200.19361877]
[-72.40158081 -215.78976440]
[-61.22970581 -227.79481506]
[-45.30986023 -223.85900879]
[-41.01901245 -208.03117371]
[-30.03821182 -197.81245422]
[-19.05740929 -187.59375000]
[-8.07660675 -177.37504578]
[-12.01909924 -191.84767151]
[-13.02426434 -206.81394958]
[-11.05246735 -221.68379211]
[-6.18145657 -235.87086487]
[1.39670789 -248.81581116]
[11.38322449 -260.00817871]
[23.38433075 -269.00671387]
[36.92683029 -275.45657349]
[51.47675705 -279.10345459]
[66.46041107 -279.80355835]
[81.28699493 -277.52926636]
[95.37191010 -272.37030029]
[108.15980530 -264.53002930]
[119.14644623 -254.31759644]
[127.89865112 -242.13569641]
[134.07131958 -228.46461487]
[137.42106628 -213.84342957]
[137.81582642 -198.84861755]
[135.24000549 -184.07144165]
[129.79519653 -170.09452820]
[121.69607544 -157.46899414]
[111.26197815 -146.69264221]
[98.90431976 -138.19039917]
[85.11035156 -132.29748535]
[70.42396545 -129.24624634]
[55.42422867 -129.15701294]
[40.70257568 -132.03329468]
[26.83947182 -137.76167297]
[14.38152981 -146.11628723]
[3.82369375 -156.76312256]
[7.18295240 -142.14411926]
[10.54221153 -127.52510834]
[13.90147018 -112.90609741]
[18.88679123 -98.75878143]
[25.43466187 -85.26339722]
[31.98253250 -71.76801300]
[38.53040314 -58.27262878]
[45.07827377 -44.77724457]
[51.62614441 -31.28186226]
[60.48133087 -29.75401115]
[67.72834778 -24.21035385]
[71.63713074 -15.81310940]
[71.20047760 -6.42264557]
[66.39001465 1.81436574]
[72.09468079 15.68724632]
[77.79934692 29.56012726]
[83.50400543 43.43300629]
[89.20867157 57.30588913]
[94.91333008 71.17877197]
[100.61799622 85.05165100]
[112.40013123 94.33503723]
[127.22261810 96.63591003]
[142.04510498 98.93678284]
[154.65281677 89.40678406]
[170.29483032 91.66577911]
[179.69099426 104.37355042]
[177.26675415 119.99079895]
[164.46035767 129.25209045]
[148.86959839 126.66287231]
[139.74421692 113.75926971]
[124.92173767 111.45838928]
[110.09925842 109.15751648]
[104.40372467 114.03715515]
[119.13607788 116.85809326]
[126.11618805 130.13507080]
[120.08798981 143.87046814]
[105.59075165 147.72145081]
[93.54096222 138.78823853]
[93.01264954 123.79643250]
[87.31710815 128.67607117]
[87.31710815 143.67607117]
[87.31710815 158.67607117]
[87.31710815 173.67607117]
[87.31710815 188.67607117]
[87.31710815 203.67607117]
[87.31710815 218.67607117]
[87.31710815 233.67607117]
[87.31710815 248.67607117]
[87.31710815 263.67605591]
[101.92712402 267.41751099]
[115.14728546 274.67547607]
[126.14656067 284.99374390]
[134.23352051 297.72369385]
[138.89982605 312.06512451]
[139.85214233 327.11651611]
[137.03060913 341.93170166]
[130.61257935 355.57940674]
[121.00151062 367.20172119]
[108.80155182 376.06805420]
[94.77960968 381.62106323]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 112]
[23 111]
[24 110]
[25 109]
[26 108]
[27 107]
[28 106]
[30 101]
[31 100]
[32 99]
[33 98]
[34 97]
[35 96]
[47 95]
[48 94]
[49 93]
[50 92]
[51 62]
[52 61]
[53 60]
[54 59]
[113 124]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
