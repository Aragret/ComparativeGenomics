%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCACACCCGGGGGGGGGGACCCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAAxxxxxxxxxxUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCCCCCCCCCCCACCCACAGCC\
) } def
/len { sequence length } bind def

/coor [
[78.13430786 379.13836670]
[65.57608795 370.78720093]
[55.48986435 359.57476807]
[48.50967026 346.20584106]
[45.07428360 331.52087402]
[45.39966202 316.44290161]
[49.46534729 301.91976929]
[57.01576614 288.86444092]
[67.57629395 278.09753418]
[80.48309326 270.29589844]
[94.92481995 265.94995117]
[94.30084229 250.96293640]
[93.67686462 235.97592163]
[93.05288696 220.98890686]
[92.42890930 206.00189209]
[91.80493164 191.01487732]
[91.18095398 176.02786255]
[90.55697632 161.04084778]
[89.93299866 146.05383301]
[89.30902100 131.06681824]
[76.61408997 123.07689667]
[62.83171082 128.99685669]
[49.04932785 134.91682434]
[35.26694870 140.83677673]
[30.93250847 155.86164856]
[17.92556763 164.54229736]
[2.38760710 162.77996826]
[-8.34482574 151.40679932]
[-9.20420265 135.79286194]
[0.21524741 123.31054688]
[15.46594810 119.85365295]
[29.34698486 127.05440521]
[43.12936783 121.13443756]
[56.91174698 115.21447754]
[70.69412994 109.29450989]
[77.37802124 85.05947876]
[97.74240875 76.63249207]
[101.14538574 62.02360153]
[104.54836273 47.41470718]
[107.95134735 32.80581665]
[107.63928986 17.80906105]
[103.63154602 3.35437298]
[99.62380981 -11.10031509]
[95.31622314 -25.46850014]
[90.71065521 -39.74396133]
[86.10509491 -54.01942062]
[74.50435638 -64.77736664]
[77.96016693 -79.26551819]
[73.35460663 -93.54097748]
[68.74903870 -107.81644440]
[53.86448288 -105.68151855]
[38.83322525 -106.09297943]
[24.08774757 -109.03897858]
[10.05230808 -114.43476105]
[-2.86926603 -122.12507629]
[-14.30519485 -131.88865662]
[-23.92644501 -143.44458008]
[-31.45619202 -156.46038818]
[-36.67779160 -170.56155396]
[-39.44100952 -185.34236145]
[-39.66633987 -200.37756348]
[-37.34730148 -215.23455811]
[-32.55061340 -229.48587036]
[-25.41429138 -242.72145081]
[-16.14365768 -254.56051636]
[-5.00544882 -264.66241455]
[7.67986631 -272.73648071]
[21.54730797 -278.55044556]
[36.19787979 -281.93701172]
[51.21005630 -282.79873657]
[66.15190887 -281.11080933]
[80.59352875 -276.92181396]
[94.11940002 -270.35229492]
[106.34036255 -261.59121704]
[116.90478516 -250.89071655]
[125.50872040 -238.55862427]
[131.90460205 -224.94978333]
[135.90843201 -210.45573425]
[137.40498352 -195.49349976]
[136.35121155 -180.49359131]
[132.77743530 -165.88755798]
[126.78646851 -152.09565735]
[118.55069733 -139.51470947]
[108.30708313 -128.50671387]
[96.35034180 -119.38835144]
[83.02450562 -112.42200470]
[87.63006592 -98.14654541]
[92.23563385 -83.87108612]
[103.50695038 -74.13421631]
[100.38055420 -58.62498474]
[104.98612213 -44.34952545]
[109.59168243 -30.07406425]
[113.41526794 -27.11506271]
[115.38251495 -21.69645882]
[114.07849884 -15.10805607]
[118.08623505 -0.65336728]
[122.09397888 13.80132103]
[125.83440399 10.21496773]
[130.44857788 7.51055574]
[135.77096558 5.84111309]
[150.47892761 2.89563036]
[165.18688965 -0.04985212]
[179.89485168 -2.99533463]
[184.73681641 -17.57103348]
[196.22857666 -27.76097870]
[211.27891541 -30.82412720]
[225.83935547 -25.93650436]
[235.99324036 -14.41285801]
[239.00918579 0.64700818]
[234.07595825 15.19206715]
[222.52053833 25.30977058]
[207.45129395 28.27850723]
[192.92176819 23.29970169]
[182.84033203 11.71262741]
[168.13237000 14.65810966]
[153.42440796 17.60359192]
[138.71644592 20.54907417]
[152.11979675 27.28334236]
[154.39254761 42.11016083]
[143.62176514 52.55000305]
[128.87306213 49.81578827]
[122.56023407 36.20879364]
[119.15725708 50.81768417]
[115.75428009 65.42657471]
[112.35130310 80.03546906]
[123.24792480 90.03569794]
[126.53208923 105.56968689]
[119.76109314 121.12570190]
[104.29603577 130.44284058]
[104.92001343 145.42985535]
[105.54399109 160.41687012]
[106.16796875 175.40388489]
[106.79194641 190.39089966]
[107.41592407 205.37791443]
[108.03990173 220.36492920]
[108.66387939 235.35194397]
[109.28785706 250.33895874]
[109.91183472 265.32598877]
[124.66484070 268.45642090]
[138.17547607 275.15817261]
[149.59445190 285.00997925]
[158.20396423 297.39248657]
[163.46281433 311.52740479]
[165.04042053 326.52612305]
[162.83761597 341.44586182]
[156.99287415 355.34872437]
[147.87358093 367.36077881]
[136.05302429 376.72695923]
[122.27420807 382.85842896]
[107.40330505 385.36984253]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 35]
[22 34]
[23 33]
[24 32]
[37 125]
[38 124]
[39 123]
[40 122]
[41 97]
[42 96]
[43 95]
[44 92]
[45 91]
[46 90]
[48 88]
[49 87]
[50 86]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
