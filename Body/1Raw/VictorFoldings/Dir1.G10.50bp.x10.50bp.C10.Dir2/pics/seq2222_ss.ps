%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAGAACCGGGGGGGGGGCUCUAAAUCCCCUUGUAAAUUUAACUGUUAGUCCAAAGAGGAACAGCUCUxxxxxxxxxxUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACUCUUUCACCCCCCCCCCCCCACAGCACC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 384.71496582]
[71.01555634 379.16195679]
[58.81560135 370.29562378]
[49.20452881 358.67330933]
[42.78650284 345.02563477]
[39.96496582 330.21041870]
[40.91728210 315.15905762]
[45.58358765 300.81762695]
[53.67055511 288.08767700]
[64.66983032 277.76940918]
[77.88998413 270.51141357]
[92.50000000 266.76998901]
[92.50000000 251.76998901]
[92.50000000 236.76998901]
[92.50000000 221.76998901]
[92.50000000 206.76998901]
[92.50000000 191.76998901]
[92.50000000 176.76998901]
[92.50000000 161.76998901]
[92.50000000 146.76998901]
[92.50000000 131.76998901]
[84.92308807 130.81019592]
[77.43508148 127.99828339]
[70.49549103 123.33580780]
[64.56501007 116.93907166]
[49.74253082 119.23995209]
[34.92004776 121.54082489]
[20.09756470 123.84169769]
[5.27508307 126.14257812]
[-0.19829397 140.49310303]
[-12.12376213 150.17189026]
[-27.29343033 152.57537842]
[-41.62673187 147.05703735]
[-51.26808548 135.10128784]
[-53.62401199 119.92416382]
[-48.06077957 105.60823059]
[-36.07486725 96.00440216]
[-20.89043236 93.69606018]
[-6.59200430 99.30413818]
[2.97420812 111.32009125]
[17.79668999 109.01921844]
[32.61917114 106.71834564]
[47.44165421 104.41746521]
[62.26413727 102.11659241]
[64.41271210 87.27127075]
[50.85081863 80.86229706]
[37.28892136 74.45331573]
[20.38495445 73.15246582]
[16.95548630 56.54899979]
[31.96071053 48.65726089]
[43.69789886 60.89142227]
[57.25979614 67.30039978]
[70.82169342 73.70937347]
[85.00403595 66.10426331]
[100.15178680 65.14630127]
[113.46656036 70.26392365]
[122.62850189 58.38710022]
[131.79043579 46.51027679]
[140.95236206 34.63345337]
[150.11430359 22.75663185]
[159.27624512 10.87980747]
[148.34533691 0.58990300]
[138.47566223 -10.72188091]
[129.76228333 -22.94660187]
[122.28911591 -35.96652985]
[116.12812042 -49.65626907]
[111.33864594 -63.88397598]
[107.96680450 -78.51262665]
[106.04507446 -93.40134430]
[105.59197235 -108.40672302]
[106.61184692 -123.38426208]
[109.09489441 -138.18971252]
[113.01718140 -152.68048096]
[118.34095001 -166.71701050]
[125.01492310 -180.16412354]
[132.97482300 -192.89231873]
[142.14398193 -204.77900696]
[152.43409729 -215.70970154]
[163.74607849 -225.57914734]
[175.97097778 -234.29228210]
[188.99105835 -241.76518250]
[202.68092346 -247.92590332]
[216.90872192 -252.71510315]
[231.53744507 -256.08663940]
[246.42619324 -258.00808716]
[261.43157959 -258.46087646]
[276.40908813 -257.44070435]
[291.21450806 -254.95736694]
[305.70520020 -251.03479004]
[319.74160767 -245.71073914]
[333.18859863 -239.03649902]
[345.91662598 -231.07635498]
[357.80313110 -221.90695190]
[368.73361206 -211.61660767]
[378.60284424 -200.30442810]
[387.31573486 -188.07936096]
[394.78839111 -175.05914307]
[400.94882202 -161.36915588]
[405.73773193 -147.14125061]
[409.10900879 -132.51246643]
[411.03012085 -117.62367249]
[411.48263550 -102.61827850]
[410.46215820 -87.64077759]
[407.97851562 -72.83542633]
[404.05563354 -58.34481812]
[398.73132324 -44.30849457]
[392.05682373 -30.86164665]
[384.09640503 -18.13377380]
[374.92675781 -6.24745607]
[364.63619995 4.68283081]
[353.32382202 14.55181980]
[341.09860229 23.26446533]
[328.07821655 30.73685646]
[314.38809204 36.89702988]
[300.16009521 41.68565750]
[285.53125000 45.05661774]
[270.64242554 46.97745132]
[255.63702393 47.42965698]
[240.65954590 46.40887833]
[225.85424805 43.92494583]
[211.36370850 40.00178528]
[197.32749939 34.67717743]
[183.88078308 28.00240135]
[171.15306091 20.04174232]
[161.99113464 31.91856575]
[152.82919312 43.79539108]
[143.66725159 55.67221451]
[134.50532532 67.54903412]
[125.34338379 79.42585754]
[132.64213562 99.72972870]
[125.68058777 120.15167236]
[107.50000000 131.76998901]
[107.50000000 146.76998901]
[107.50000000 161.76998901]
[107.50000000 176.76998901]
[107.50000000 191.76998901]
[107.50000000 206.76998901]
[107.50000000 221.76998901]
[107.50000000 236.76998901]
[107.50000000 251.76998901]
[107.50000000 266.76998901]
[122.11001587 270.51141357]
[135.33016968 277.76940918]
[146.32945251 288.08767700]
[154.41641235 300.81762695]
[159.08271790 315.15905762]
[160.03503418 330.21041870]
[157.21350098 345.02563477]
[150.79547119 358.67330933]
[141.18440247 370.29562378]
[128.98443604 379.16195679]
[114.96250153 384.71496582]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 44]
[26 43]
[27 42]
[28 41]
[29 40]
[45 53]
[46 52]
[47 51]
[56 129]
[57 128]
[58 127]
[59 126]
[60 125]
[61 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
