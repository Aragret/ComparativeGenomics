%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACCAAACGCCCCUCGGGGGGGGGGUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCUCCCxxxxxxxxxxGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUGAUAAUCAUAUUCCCCCCCCCCUACCAAAUGCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[63.67504501 409.35781860]
[49.23817062 405.11834717]
[35.86463547 398.22308350]
[24.03788757 388.92120361]
[14.18545437 377.54904175]
[6.66349602 364.51766968]
[1.74392772 350.29818726]
[-0.39541242 335.40457153]
[0.32281169 320.37524414]
[3.87263680 305.75350952]
[10.12573910 292.06790161]
[18.85607147 279.81320190]
[29.74804115 269.43237305]
[42.40790558 261.30068970]
[56.37802124 255.71211243]
[71.15338135 252.86863708]
[71.15338135 237.86863708]
[71.15338135 222.86863708]
[71.15338135 207.86863708]
[71.15338135 192.86863708]
[71.15338135 177.86863708]
[71.15338135 162.86863708]
[71.15338135 147.86863708]
[71.15338135 132.86863708]
[71.15338135 117.86863708]
[66.26831818 103.68638611]
[57.03083420 91.86823273]
[47.79335022 80.05007172]
[38.55586624 68.23191071]
[29.31838036 56.41375351]
[12.10243225 49.94597626]
[10.28133488 32.51338577]
[0.81501585 20.87771416]
[-11.74321175 29.10540771]
[-25.08086967 35.99822235]
[-39.05657196 41.48309326]
[-53.52216721 45.50187683]
[-68.32431030 48.01197052]
[-83.30609131 48.98676682]
[-98.30870056 48.41593170]
[-113.17308807 46.30551529]
[-127.74169922 42.67789459]
[-141.86009216 37.57151794]
[-155.37860107 31.04051590]
[-168.15391541 23.15412521]
[-180.05062866 13.99594402]
[-190.94262695 3.66305423]
[-200.71443176 -7.73501015]
[-209.26245117 -20.07742310]
[-216.49610901 -33.23334885]
[-222.33868408 -47.06332397]
[-226.72827148 -61.42074585]
[-229.61831665 -76.15341949]
[-230.97821045 -91.10516357]
[-230.79350281 -106.11749268]
[-229.06617737 -121.03125763]
[-225.81452942 -135.68836975]
[-221.07304382 -149.93344116]
[-214.89196777 -163.61549377]
[-207.33683777 -176.58946228]
[-198.48773193 -188.71783447]
[-188.43846130 -199.87203979]
[-177.29554749 -209.93382263]
[-165.17712402 -218.79653931]
[-152.21163940 -226.36622620]
[-138.53654480 -232.56266785]
[-124.29679108 -237.32014465]
[-109.64334106 -240.58822632]
[-94.73152924 -242.33230591]
[-79.71942139 -242.53385925]
[-64.76615143 -241.19076538]
[-50.03024673 -238.31724548]
[-35.66790771 -233.94378662]
[-21.83137894 -228.11672974]
[-8.66734219 -220.89785767]
[3.68465948 -212.36369324]
[15.09368706 -202.60469055]
[25.43879890 -191.72430420]
[34.61032867 -179.83787537]
[42.51105881 -167.07142639]
[49.05722809 -153.56025696]
[54.17945099 -139.44760132]
[57.82342911 -124.88307953]
[59.95053101 -110.02106476]
[60.53820801 -95.01910400]
[59.58023071 -80.03623962]
[57.08675766 -65.23128510]
[53.08421707 -50.76118851]
[47.61503601 -36.77933884]
[40.73719788 -23.43395233]
[32.52360916 -10.86649609]
[23.06133652 0.78980803]
[12.45068550 11.41139507]
[21.91700363 23.04706573]
[33.94426346 24.60848427]
[41.92337418 34.26905060]
[41.13653946 47.17626953]
[50.37402344 58.99442673]
[59.61151123 70.81258392]
[68.84899139 82.63074493]
[78.08647919 94.44890594]
[84.84570312 80.48772430]
[100.05390930 73.19393158]
[117.82247925 77.24179840]
[131.95639038 72.21860504]
[146.09030151 67.19541168]
[160.22422791 62.17221832]
[163.63691711 47.12705231]
[174.65789795 36.33160782]
[189.77040100 33.23067474]
[204.15208435 38.81375122]
[213.21380615 51.29929352]
[214.06399536 66.70320892]
[206.43138123 80.11016846]
[192.75148010 87.24206543]
[177.38951111 85.82312012]
[165.24742126 76.30612946]
[151.11349487 81.32932281]
[136.97958374 86.35251617]
[122.84567261 91.37570953]
[123.57711792 106.35787201]
[138.13313293 109.98038483]
[152.68913269 113.60290527]
[167.24514771 117.22541809]
[181.80114746 120.84793854]
[198.63165283 118.80573273]
[205.25318909 134.41314697]
[192.08874512 145.09648132]
[178.17863464 135.40394592]
[163.62263489 131.78143311]
[149.06661987 128.15890503]
[134.51060486 124.53639221]
[119.95460510 120.91387939]
[107.61907196 125.70054626]
[95.44264984 124.28192902]
[86.15338135 117.86863708]
[86.15338135 132.86863708]
[86.15338135 147.86863708]
[86.15338135 162.86863708]
[86.15338135 177.86863708]
[86.15338135 192.86863708]
[86.15338135 207.86863708]
[86.15338135 222.86863708]
[86.15338135 237.86863708]
[86.15338135 252.86863708]
[100.92873383 255.71211243]
[114.89885712 261.30068970]
[127.55871582 269.43237305]
[138.45068359 279.81320190]
[147.18101501 292.06790161]
[153.43412781 305.75350952]
[156.98394775 320.37524414]
[157.70217896 335.40457153]
[155.56283569 350.29818726]
[150.64326477 364.51766968]
[143.12130737 377.54904175]
[133.26887512 388.92120361]
[121.44212341 398.22308350]
[108.06858826 405.11834717]
[93.63171387 409.35781860]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 145]
[17 144]
[18 143]
[19 142]
[20 141]
[21 140]
[22 139]
[23 138]
[24 137]
[25 136]
[26 101]
[27 100]
[28 99]
[29 98]
[30 97]
[32 94]
[33 93]
[104 120]
[105 119]
[106 118]
[107 117]
[121 133]
[122 132]
[123 131]
[124 130]
[125 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
