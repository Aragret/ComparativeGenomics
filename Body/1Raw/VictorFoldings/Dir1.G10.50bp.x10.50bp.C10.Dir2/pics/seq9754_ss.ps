%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUACUACCAGGGGGGGGGGCUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCAxxxxxxxxxxUACCACCCAAGUAUUGACUCACCCAUCAACAACCGCUAUGUAUUUCGUACCCCCCCCCCCAUUACUGCCA\
) } def
/len { sequence length } bind def

/coor [
[97.43786621 442.09851074]
[84.21766663 434.82604980]
[73.33086395 424.37905884]
[65.51972961 411.46978760]
[61.31685257 396.97848511]
[61.00877762 381.89312744]
[64.61651611 367.24230957]
[71.89408875 354.02493286]
[82.34529877 343.14215088]
[95.25756073 335.33602905]
[109.75049591 331.13873291]
[109.43844604 316.14196777]
[109.12638855 301.14523315]
[108.81433105 286.14846802]
[108.50227356 271.15170288]
[108.19021606 256.15496826]
[107.87815857 241.15820312]
[107.56610870 226.16145325]
[107.25405121 211.16470337]
[106.94199371 196.16795349]
[105.28263092 171.27159119]
[118.84518433 158.07727051]
[112.49805450 144.48632812]
[106.15092468 130.89537048]
[84.06032562 127.17139435]
[70.03086090 109.70610046]
[55.07061005 110.79740906]
[40.11036301 111.88871765]
[29.79936218 123.56437683]
[14.61199760 124.45800781]
[3.54458189 114.55609894]
[-11.41566658 115.64740753]
[-26.37591553 116.73871613]
[-37.91046524 127.88922119]
[-53.80075836 125.68056488]
[-61.85712051 111.80704498]
[-55.89940262 96.91123962]
[-40.49785614 92.41992950]
[-27.46722603 101.77846527]
[-12.50697708 100.68715668]
[2.45327139 99.59584808]
[11.96653366 88.19262695]
[27.12280655 86.87277222]
[39.01905060 96.92846680]
[53.97929764 95.83715820]
[68.93954468 94.74584961]
[71.03802490 87.60800171]
[74.75196075 81.16136169]
[79.87419891 75.76551819]
[86.11903381 71.72144318]
[93.13813019 69.25471497]
[93.45018768 54.25796127]
[93.76224518 39.26120758]
[86.31371307 25.30305672]
[94.31411743 12.73950481]
[94.62616730 -2.25724888]
[94.93822479 -17.25400352]
[95.25028229 -32.25075531]
[87.80175018 -46.20890808]
[95.80215454 -58.77246094]
[96.11421204 -73.76921082]
[81.43472290 -77.10050201]
[67.72644806 -83.31887054]
[55.55073547 -92.16968536]
[45.40617371 -103.29051208]
[37.70817566 -116.22595978]
[32.77196503 -130.44631958]
[30.79968262 -145.36929321]
[31.87208939 -160.38377380]
[35.94527054 -174.87495422]
[42.85243225 -188.24940491]
[52.31073380 -199.95945740]
[63.93285751 -209.52560425]
[77.24288940 -216.55610657]
[91.69578552 -220.76307678]
[106.69972229 -221.97422791]
[121.64028168 -220.13998413]
[135.90567017 -215.33543396]
[148.91172791 -207.75733948]
[160.12585449 -197.71601868]
[169.08883667 -185.62263489]
[175.43367004 -171.97244263]
[178.90051270 -157.32437134]
[179.34741211 -142.27827454]
[176.75605774 -127.45026398]
[171.23257446 -113.44754791]
[163.00314331 -100.84352875]
[152.40475464 -90.15432739]
[139.87139893 -81.81766510]
[125.91632080 -76.17491913]
[111.11096191 -73.45715332]
[110.79890442 -58.46040344]
[118.26976013 -45.57492065]
[110.24703979 -31.93869972]
[109.93498230 -16.94194603]
[109.62292480 -1.94519269]
[109.31086731 13.05156136]
[116.78172302 25.93704414]
[108.75899506 39.57326508]
[108.44694519 54.57001877]
[108.13488770 69.56677246]
[120.33766174 75.94303894]
[128.65544128 86.91477966]
[131.49934387 100.38610840]
[128.32609558 113.78368378]
[119.74187469 124.54824066]
[126.08900452 138.13919067]
[132.43614197 151.73014832]
[144.78770447 160.24122620]
[159.74795532 161.33255005]
[174.70820618 162.42385864]
[185.47424316 151.08248901]
[201.01734924 149.36614990]
[213.99855042 158.08522034]
[218.28851318 173.12284851]
[211.86166382 187.37870789]
[197.75254822 194.12162781]
[182.62306213 190.16780090]
[173.61689758 177.38410950]
[158.65664673 176.29278564]
[143.69639587 175.20147705]
[138.25698853 180.36508179]
[150.86264038 188.49511719]
[164.26394653 195.23342896]
[166.45697021 210.07225037]
[155.57771301 220.39900208]
[140.87322998 217.43620300]
[134.84184265 203.70356750]
[127.37815857 190.69229126]
[121.93874359 195.85589600]
[122.25080109 210.85264587]
[122.56285858 225.84939575]
[122.87491608 240.84614563]
[123.18697357 255.84291077]
[123.49903107 270.83966064]
[123.81108093 285.83642578]
[124.12313843 300.83316040]
[124.43519592 315.82992554]
[124.74725342 330.82666016]
[139.40223694 334.41744995]
[152.62805176 341.67968750]
[163.52291870 352.11828613]
[171.34402466 365.02151489]
[175.55809021 379.50958252]
[175.87780762 394.59466553]
[172.28138733 409.24826050]
[165.01402283 422.47128296]
[154.57121277 433.36212158]
[141.66499329 441.17822266]
[127.17530060 445.38671875]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 108]
[23 107]
[24 106]
[26 46]
[27 45]
[28 44]
[31 41]
[32 40]
[33 39]
[51 101]
[52 100]
[53 99]
[55 97]
[56 96]
[57 95]
[58 94]
[60 92]
[61 91]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
