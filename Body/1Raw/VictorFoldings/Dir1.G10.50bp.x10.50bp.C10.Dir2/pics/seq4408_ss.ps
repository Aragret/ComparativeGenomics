%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAUUAGGGGGGGGGGCUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAxxxxxxxxxxUUACCCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACCCCCCCCCCCUUAGCAUUA\
) } def
/len { sequence length } bind def

/coor [
[89.03164673 398.48278809]
[75.81144714 391.21032715]
[64.92464447 380.76330566]
[57.11351395 367.85406494]
[52.91063309 353.36276245]
[52.60256195 338.27740479]
[56.21030045 323.62658691]
[63.48787308 310.40921021]
[73.93907928 299.52642822]
[86.85134125 291.72027588]
[101.34428406 287.52301025]
[101.03222656 272.52624512]
[100.72016907 257.52947998]
[100.40811157 242.53273010]
[100.09605408 227.53598022]
[99.78399658 212.53923035]
[99.47194672 197.54248047]
[99.15988922 182.54571533]
[98.84783173 167.54896545]
[98.06798553 152.56925964]
[96.82111359 137.62117004]
[95.57423401 122.67308044]
[94.32736206 107.72499084]
[92.02251434 108.78101349]
[89.45339203 109.42341614]
[86.68280792 109.61054230]
[71.72255707 110.70185089]
[56.76231003 111.79315948]
[41.81186295 122.49194336]
[26.31619835 114.31366730]
[11.38189030 115.71596527]
[-3.55241752 117.11827087]
[-18.48672485 118.52057648]
[-31.53960609 128.44802856]
[-46.55680084 121.85895538]
[-48.08990479 105.53162384]
[-34.56179428 96.26219940]
[-19.88902855 103.58626556]
[-4.95472097 102.18395996]
[9.97958660 100.78166199]
[24.91389465 99.37935638]
[32.90442276 90.24377441]
[45.38003159 88.98754883]
[55.67100143 96.83291626]
[70.63124847 95.74160004]
[85.59149933 94.65029144]
[97.76333618 85.88408661]
[103.53960419 72.04087067]
[109.31587982 58.19765091]
[115.09215546 44.35443115]
[101.80463409 37.37306213]
[89.18613434 29.24465179]
[77.33541107 20.03281212]
[66.34521484 9.80964470]
[56.30155563 -1.34484172]
[47.28304672 -13.34334564]
[39.36026764 -26.09196091]
[32.59522247 -39.49090958]
[27.04086685 -53.43532562]
[22.74066544 -67.81607056]
[19.72827721 -82.52059937]
[18.02727509 -97.43382263]
[17.65097427 -112.43902588]
[18.60231972 -127.41876221]
[20.87386703 -142.25579834]
[24.44783401 -156.83401489]
[29.29625320 -171.03930664]
[35.38117599 -184.76051331]
[42.65497971 -197.89022827]
[51.06073380 -210.32569885]
[60.53265381 -221.96958923]
[70.99660492 -232.73078918]
[82.37069702 -242.52505493]
[94.56589508 -251.27575684]
[107.48677826 -258.91436768]
[121.03219604 -265.38113403]
[135.09616089 -270.62545776]
[149.56857300 -274.60626221]
[164.33618164 -277.29238892]
[179.28340149 -278.66284180]
[194.29325867 -278.70687866]
[209.24826050 -277.42416382]
[224.03138733 -274.82473755]
[238.52690125 -270.92892456]
[252.62139893 -265.76724243]
[266.20452881 -259.38006592]
[279.17001343 -251.81738281]
[291.41635132 -243.13841248]
[302.84771729 -233.41105652]
[313.37463379 -222.71144104]
[322.91473389 -211.12332153]
[331.39331055 -198.73739624]
[338.74401855 -185.65058899]
[344.90936279 -171.96533203]
[349.84106445 -157.78872681]
[353.50051880 -143.23173523]
[355.85906982 -128.40827942]
[356.89831543 -113.43438721]
[356.61007690 -98.42723846]
[354.99661255 -83.50428772]
[352.07055664 -68.78234100]
[347.85479736 -54.37660599]
[342.38238525 -40.39983368]
[335.69607544 -26.96142006]
[327.84823608 -14.16653347]
[318.90029907 -2.11531520]
[308.92227173 9.09791565]
[297.99224854 19.38539886]
[286.19577026 28.66661835]
[273.62518311 36.86893463]
[260.37887573 43.92815781]
[246.56048584 49.78903198]
[232.27818298 54.40568924]
[217.64375305 57.74199677]
[202.77171326 59.77184296]
[187.77848816 60.47934341]
[172.78138733 59.85895920]
[157.89782715 57.91554260]
[143.24424744 54.66431046]
[128.93536377 50.13070679]
[123.15909576 63.97392273]
[117.38282776 77.81713867]
[111.60655212 91.66036224]
[109.27545166 106.47811890]
[110.52232361 121.42620087]
[111.76919556 136.37429810]
[113.01607513 151.32237244]
[116.07393646 155.71202087]
[117.00347137 160.36911011]
[116.06819153 164.42211914]
[113.84458160 167.23690796]
[114.15663910 182.23365784]
[114.46869659 197.23042297]
[114.78075409 212.22717285]
[115.09281158 227.22392273]
[115.40486908 242.22067261]
[115.71691895 257.21743774]
[116.02897644 272.21417236]
[116.34103394 287.21093750]
[130.99603271 290.80169678]
[144.22183228 298.06396484]
[155.11669922 308.50256348]
[162.93780518 321.40576172]
[167.15187073 335.89382935]
[167.47158813 350.97894287]
[163.87516785 365.63253784]
[156.60780334 378.85552979]
[146.16500854 389.74636841]
[133.25877380 397.56250000]
[118.76908112 401.77096558]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 127]
[21 126]
[22 125]
[23 124]
[26 46]
[27 45]
[28 44]
[30 41]
[31 40]
[32 39]
[33 38]
[47 123]
[48 122]
[49 121]
[50 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
