%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCUAACAAGGGGGGGGGGAAAAAACUCAUACCCCCAUUAUGUAAAAUCCAUUGUCGCAUCCACCUUUAxxxxxxxxxxUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACCCCCCCCCCCAACCCAAACAA\
) } def
/len { sequence length } bind def

/coor [
[64.28075409 579.03741455]
[50.25880814 573.48443604]
[38.05884933 564.61810303]
[28.44777870 552.99578857]
[22.02975273 539.34808350]
[19.20821571 524.53289795]
[20.16053200 509.48150635]
[24.82683754 495.14007568]
[32.91380310 482.41012573]
[43.91307831 472.09185791]
[57.13323593 464.83389282]
[71.74324799 461.09243774]
[71.74324799 446.09243774]
[71.74324799 431.09243774]
[71.74324799 416.09243774]
[71.74324799 401.09243774]
[71.74324799 386.09243774]
[71.74324799 371.09243774]
[71.74324799 356.09243774]
[71.74324799 341.09243774]
[71.74324799 326.09243774]
[60.12760925 320.95486450]
[51.30075455 311.75720215]
[46.61089325 299.85287476]
[46.79383469 287.01248169]
[51.85775757 275.16040039]
[61.07666779 266.08639526]
[73.09426880 261.17544556]
[73.71009064 246.18807983]
[74.32592010 231.20072937]
[74.94174194 216.21337891]
[64.72303772 205.23257446]
[49.73015213 204.77064514]
[34.73726654 204.30871582]
[26.08583641 217.08198547]
[11.89307022 223.12921143]
[-3.31217432 220.52073669]
[-14.67795753 210.08894348]
[-18.57749939 195.16255188]
[-13.76647186 180.50453186]
[-1.78005421 170.79220581]
[13.55693054 169.12472534]
[27.35050583 176.03421021]
[35.19919205 189.31582642]
[50.19207764 189.77775574]
[65.18496704 190.23968506]
[50.58451080 186.80067444]
[40.43914795 175.75207520]
[38.25483704 160.91197205]
[44.78641129 147.40869141]
[57.77673721 139.90859985]
[72.73672485 141.00352478]
[84.49660492 150.31507874]
[88.99249268 164.62547302]
[84.67053223 178.98968506]
[91.76693726 165.77450562]
[98.86334229 152.55931091]
[105.95974731 139.34413147]
[74.43135071 81.92679596]
[73.20073700 66.97736359]
[71.97012329 52.02792740]
[57.05657578 49.89864731]
[42.99093628 44.50368881]
[30.47873497 36.11366272]
[20.14757538 25.14941025]
[12.51566601 12.16088772]
[7.96581888 -2.20040178]
[6.72625351 -17.21410179]
[8.85914612 -32.12713242]
[14.25751019 -46.19146347]
[22.65056801 -58.70163345]
[33.61732483 -69.03013611]
[46.60769653 -76.65889740]
[60.97008896 -81.20526886]
[75.98408508 -82.44119263]
[90.89660645 -80.30468750]
[104.95962524 -74.90291595]
[117.46775818 -66.50682831]
[127.79360199 -55.53756714]
[135.41921997 -42.54534912]
[139.96211243 -28.18185425]
[141.19439697 -13.16755486]
[139.05427551 1.74444103]
[133.64909363 15.80615425]
[125.24997711 28.31225395]
[114.27821350 38.63544083]
[101.28414917 46.25790787]
[86.91955566 50.79731369]
[88.15016937 65.74674988]
[89.38078308 80.69618225]
[103.47617340 85.82648468]
[114.02819061 75.16557312]
[113.69644165 59.36476898]
[124.69487000 48.01531219]
[140.49829102 47.85063934]
[151.73083496 58.96844864]
[151.72842407 74.77273560]
[140.49247742 85.88710022]
[124.68909454 85.71759033]
[114.13707733 96.37850189]
[117.68527985 102.98609161]
[128.32987976 122.80886841]
[143.04541016 119.90139008]
[157.76092529 116.99391937]
[172.47645569 114.08644867]
[178.04756165 99.70012665]
[190.52555847 90.62802124]
[205.92877197 89.76500702]
[219.34207153 97.38647461]
[226.48533630 111.06044006]
[225.07917786 126.42358398]
[215.57229614 138.57359314]
[200.99829102 143.63343811]
[186.00769043 139.98854065]
[175.38392639 128.80197144]
[160.66841125 131.70944214]
[145.95288086 134.61691284]
[131.23736572 137.52438354]
[119.17492676 146.44053650]
[112.07852173 159.65571594]
[104.98212433 172.87091064]
[97.88571930 186.08609009]
[101.75758362 203.39848328]
[89.92910004 216.82919312]
[89.31327057 231.81655884]
[88.69744873 246.80390930]
[88.08161926 261.79125977]
[103.11000061 270.79864502]
[111.49691772 286.08090210]
[111.02862549 303.41833496]
[101.92250824 318.07501221]
[86.74324799 326.09243774]
[86.74324799 341.09243774]
[86.74324799 356.09243774]
[86.74324799 371.09243774]
[86.74324799 386.09243774]
[86.74324799 401.09243774]
[86.74324799 416.09243774]
[86.74324799 431.09243774]
[86.74324799 446.09243774]
[86.74324799 461.09243774]
[101.35326385 464.83389282]
[114.57342529 472.09185791]
[125.57269287 482.41012573]
[133.65966797 495.14007568]
[138.32597351 509.48150635]
[139.27828979 524.53289795]
[136.45674133 539.34808350]
[130.03872681 552.99578857]
[120.42765045 564.61810303]
[108.22769165 573.48443604]
[94.20574951 579.03741455]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 127]
[29 126]
[30 125]
[31 124]
[32 46]
[33 45]
[34 44]
[55 122]
[56 121]
[57 120]
[58 119]
[59 90]
[60 89]
[61 88]
[91 100]
[92 99]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
