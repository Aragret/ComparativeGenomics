%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAAACUAGGGGGGGGGGACUAAUACUAACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUxxxxxxxxxxCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUCCCCCCCCCCAAAAAAACUA\
) } def
/len { sequence length } bind def

/coor [
[109.38926697 400.01354980]
[95.54333496 393.99752808]
[83.83467102 384.46810913]
[75.13214874 372.13244629]
[70.08154297 357.90591431]
[69.05765533 342.84423828]
[72.13645172 328.06509399]
[79.08946991 314.66516113]
[89.40075684 303.63882446]
[102.30513763 295.80432129]
[116.84502411 291.74301147]
[116.84502411 276.74301147]
[116.84502411 261.74301147]
[116.84502411 246.74299622]
[116.84502411 231.74299622]
[116.84502411 216.74299622]
[116.84502411 201.74299622]
[116.84502411 186.74299622]
[116.84502411 171.74299622]
[116.84502411 156.74299622]
[116.84502411 141.74299622]
[89.04203796 139.48002625]
[70.50495148 122.22541046]
[67.11097717 99.71908569]
[77.25976562 82.24752808]
[68.24223328 70.26069641]
[59.22470093 58.27386475]
[50.20717239 46.28703308]
[41.18964386 34.30020142]
[32.17211151 22.31336784]
[24.46051979 17.29508209]
[23.09475899 9.98205662]
[14.32855225 -2.18977976]
[-0.01493621 -8.86622429]
[-1.17445266 -23.71562767]
[-12.26576805 -33.81427765]
[-25.20382309 -41.40418625]
[-38.14188004 -48.99409485]
[-51.07993698 -56.58400345]
[-64.01799011 -64.17391205]
[-76.95604706 -71.76381683]
[-89.89410400 -79.35372925]
[-101.55752563 -69.67176819]
[-115.83003235 -64.56575012]
[-130.98814392 -64.65225220]
[-145.20144653 -69.92082214]
[-156.75361633 -79.73526764]
[-164.24966431 -92.91043091]
[-166.78440857 -107.85536194]
[-164.05178833 -122.76537323]
[-156.38174438 -135.84001160]
[-144.70050049 -145.50047302]
[-130.41860962 -150.58016968]
[-115.26068115 -150.46574402]
[-101.05711365 -145.17097473]
[-89.52305603 -135.33526611]
[-82.05130005 -122.14630890]
[-79.54409027 -107.19673920]
[-82.30419922 -92.29178619]
[-69.36614227 -84.70187378]
[-56.42808533 -77.11196899]
[-43.49002838 -69.52205658]
[-30.55197144 -61.93215179]
[-17.61391640 -54.34224319]
[-4.67585993 -46.75233459]
[-11.78002739 -59.96334457]
[-14.95256519 -74.62400818]
[-13.94588757 -89.59018707]
[-8.83855534 -103.69391632]
[-0.02914954 -115.83452606]
[11.79483700 -125.06455231]
[25.71064949 -130.66366577]
[40.63228607 -132.19493103]
[55.39524841 -129.53881836]
[68.84742737 -122.90264130]
[79.93899536 -112.80426788]
[87.80436707 -100.03179932]
[91.82971191 -85.58200073]
[91.70088959 -70.58255768]
[87.42796326 -56.20402908]
[79.34439087 -43.56853104]
[68.08101654 -33.66215134]
[54.51684570 -27.25798607]
[39.71043777 -24.85582924]
[24.81730270 -26.64314079]
[10.99738407 -32.48183441]
[24.71385574 -26.67600250]
[26.50038910 -10.95598698]
[35.26659775 1.21584976]
[44.15894699 13.29583836]
[53.17647552 25.28267097]
[62.19400406 37.26950455]
[71.21153259 49.25633621]
[80.22906494 61.24316788]
[89.24659729 73.23000336]
[111.36827087 64.86185455]
[138.06561279 75.97412872]
[151.00366211 68.38422394]
[158.62968445 53.86610031]
[175.02432251 53.48181534]
[183.32218933 67.62668610]
[174.98715210 81.74968719]
[158.59356689 81.32228088]
[145.65551758 88.91218567]
[146.43431091 96.37164307]
[161.35321045 94.81406403]
[176.27212524 93.25648499]
[191.19107056 91.69913483]
[192.74818420 106.61809540]
[177.82971191 108.17539215]
[162.91079712 109.73297119]
[147.99188232 111.29055786]
[148.77067566 118.75001526]
[162.99745178 123.50382996]
[177.22422791 128.25764465]
[188.22116089 117.61216736]
[202.90893555 113.30772400]
[217.91238403 116.33344269]
[229.78384399 125.99403381]
[235.79533386 140.06956482]
[234.56546021 155.32557678]
[226.37684631 168.25636292]
[213.11116028 175.89050293]
[197.81677246 176.47375488]
[184.00820923 169.87205505]
[174.85858154 157.60246277]
[172.47041321 142.48442078]
[158.24363708 137.73060608]
[144.01686096 132.97679138]
[131.84503174 141.74299622]
[131.84503174 156.74299622]
[131.84503174 171.74299622]
[131.84503174 186.74299622]
[131.84503174 201.74299622]
[131.84503174 216.74299622]
[131.84503174 231.74299622]
[131.84503174 246.74299622]
[131.84503174 261.74301147]
[131.84503174 276.74301147]
[131.84503174 291.74301147]
[146.38491821 295.80432129]
[159.28929138 303.63882446]
[169.60057068 314.66516113]
[176.55360413 328.06509399]
[179.63240051 342.84423828]
[178.60850525 357.90591431]
[173.55790710 372.13244629]
[164.85537720 384.46810913]
[153.14671326 393.99752808]
[139.30078125 400.01354980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 95]
[26 94]
[27 93]
[28 92]
[29 91]
[30 90]
[32 89]
[33 88]
[35 86]
[36 65]
[37 64]
[38 63]
[39 62]
[40 61]
[41 60]
[42 59]
[97 104]
[98 103]
[113 129]
[114 128]
[115 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
