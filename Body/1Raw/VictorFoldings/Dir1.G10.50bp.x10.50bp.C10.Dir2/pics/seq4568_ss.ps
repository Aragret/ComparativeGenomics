%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAUUCUCGGGGGGGGGGCGUGCCACCUAUCACACCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAxxxxxxxxxxUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAAAACCCCCCCCCCCAAAAUACUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.28198242]
[71.19830322 362.26596069]
[59.48964310 352.73654175]
[50.78712082 340.40084839]
[45.73651886 326.17434692]
[44.71262741 311.11267090]
[47.79142761 296.33349609]
[54.74444962 282.93356323]
[65.05573273 271.90722656]
[77.96011353 264.07272339]
[92.50000000 260.01141357]
[92.50000000 245.01141357]
[92.50000000 230.01141357]
[92.50000000 215.01141357]
[92.50000000 200.01141357]
[92.50000000 185.01141357]
[92.50000000 170.01141357]
[92.50000000 155.01141357]
[92.50000000 140.01141357]
[92.50000000 125.01141357]
[76.22748566 110.80224609]
[76.22686768 89.19911957]
[64.92785645 79.33339691]
[53.62885666 69.46767426]
[43.67591095 87.18779755]
[24.85619354 88.92887878]
[13.65846920 75.51066589]
[-1.20457757 73.48833466]
[-16.06762505 71.46599579]
[-30.93067169 69.44366455]
[-36.91520691 83.30324554]
[-46.41798019 95.03353882]
[-58.73383331 103.76408386]
[-72.94883728 108.84701538]
[-88.00814819 109.90514374]
[-102.79427338 106.85994720]
[-116.20997620 99.93740845]
[-127.25971985 89.65121460]
[-135.12353516 76.76467896]
[-139.21789551 62.23406219]
[-139.23895264 47.13763428]
[-135.18516541 32.59564972]
[-127.35732269 19.68722153]
[-116.33631897 9.37024021]
[-102.93998718 2.41029429]
[-88.16242218 -0.67614192]
[-73.10021210 0.33996555]
[-58.87107849 5.38321495]
[-46.53091812 14.07936287]
[-36.99544907 25.78309822]
[-30.97226906 39.62592697]
[-28.90833664 54.58061600]
[-14.04528999 56.60295105]
[0.81775689 58.62528610]
[15.68080425 60.64762115]
[23.26798248 51.42136765]
[36.21573257 48.22156906]
[28.76082039 35.20526123]
[21.30591011 22.18895149]
[13.85099983 9.17264175]
[-1.19163918 3.59603357]
[-6.07354641 -11.68619633]
[2.95025992 -24.95082855]
[18.95748711 -26.02237320]
[29.66876221 -14.07883263]
[26.86730957 1.71773112]
[34.32221985 14.73404026]
[41.77713013 27.75035095]
[49.23204041 40.76665878]
[45.36600494 26.27342796]
[46.54648972 11.31995201]
[52.63877106 -2.38713098]
[62.94753265 -13.28343296]
[76.29624176 -20.12536049]
[91.16140747 -22.13204575]
[105.84647369 -19.07446480]
[118.67543793 -11.30157948]
[128.18412781 0.29949141]
[133.28732300 14.40471935]
[133.40258789 29.40427589]
[128.51676941 43.58626556]
[119.18749237 55.33209610]
[106.47949982 63.30122375]
[91.84315491 66.58412933]
[76.94890594 64.80612946]
[63.49457932 58.16867065]
[74.79358673 68.03439331]
[86.09259033 77.90011597]
[99.63833618 73.89080048]
[113.28994751 77.52338409]
[123.05171967 87.73464203]
[137.75968933 84.78915405]
[152.46765137 81.84367371]
[167.17561340 78.89819336]
[167.34757996 63.84282303]
[170.64637756 49.15229416]
[176.92776489 35.46881104]
[185.91717529 23.39055443]
[197.22161865 13.44553661]
[210.34689331 6.06850958]
[224.71925354 1.58196616]
[239.71038818 0.18203859]
[254.66493225 1.92992556]
[268.92916870 6.74921703]
[281.87948608 14.42923450]
[292.94979858 24.63423920]
[301.65612793 36.91811371]
[307.61785889 50.74386215]
[310.57440186 65.50707245]
[310.39651489 80.56237793]
[307.09194946 95.25160217]
[300.80517578 108.93261719]
[291.81100464 121.00733948]
[280.50265503 130.94790649]
[267.37448120 138.31976318]
[253.00035095 142.80065918]
[238.00866699 144.19468689]
[223.05480957 142.44091797]
[208.79248047 137.61601257]
[195.84516907 129.93090820]
[184.77888489 119.72154236]
[176.07739258 107.43424225]
[170.12109375 93.60615540]
[155.41313171 96.55163574]
[140.70516968 99.49711609]
[125.99720764 102.44260406]
[124.69567108 108.48201752]
[122.01167297 114.04660034]
[118.09545898 118.82485962]
[113.16625214 122.54929352]
[107.50000000 125.01141357]
[107.50000000 140.01141357]
[107.50000000 155.01141357]
[107.50000000 170.01141357]
[107.50000000 185.01141357]
[107.50000000 200.01141357]
[107.50000000 215.01141357]
[107.50000000 230.01141357]
[107.50000000 245.01141357]
[107.50000000 260.01141357]
[122.03988647 264.07272339]
[134.94427490 271.90722656]
[145.25555420 282.93356323]
[152.20857239 296.33349609]
[155.28736877 311.11267090]
[154.26348877 326.17434692]
[149.21287537 340.40084839]
[140.51036072 352.73654175]
[128.80169678 362.26596069]
[114.95575714 368.28198242]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 88]
[23 87]
[24 86]
[27 55]
[28 54]
[29 53]
[30 52]
[57 69]
[58 68]
[59 67]
[60 66]
[91 126]
[92 125]
[93 124]
[94 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
