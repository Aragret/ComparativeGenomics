%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAUUCCUGGGGGGGGGGCCCCACACUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAxxxxxxxxxxGACCUGCGACUCCUUGACGUUGACAAUCGAGUAGUACUCCCGAUUGAAGCCCCCCCCCCCCCCCAUUCGU\
) } def
/len { sequence length } bind def

/coor [
[83.79025269 384.18496704]
[70.57006073 376.91250610]
[59.68325424 366.46548462]
[51.87212372 353.55624390]
[47.66924286 339.06494141]
[47.36116791 323.97958374]
[50.96891022 309.32876587]
[58.24648285 296.11138916]
[68.69769287 285.22860718]
[81.60995483 277.42245483]
[96.10289001 273.22518921]
[95.79083252 258.22842407]
[95.47877502 243.23167419]
[95.16671753 228.23492432]
[94.85466766 213.23815918]
[94.54261017 198.24140930]
[94.23055267 183.24465942]
[93.91849518 168.24790955]
[93.60643768 153.25114441]
[93.29438019 138.25439453]
[92.98233032 123.25764465]
[80.03567505 113.84164429]
[75.75843811 98.41497803]
[82.00799561 83.67659760]
[74.55308533 70.66028595]
[67.52631378 64.72090149]
[67.08171082 57.29473495]
[59.89919662 44.12615204]
[52.58009338 31.03299713]
[45.12518311 18.01668739]
[37.67027283 5.00037766]
[29.54872894 -7.61075020]
[20.78252220 -19.78258705]
[12.01631546 -31.95442390]
[3.25010824 -44.12626266]
[-9.90537548 -36.88122177]
[-23.83824921 -31.27476311]
[-38.34533310 -27.38864708]
[-53.21506882 -25.27954292]
[-68.23061371 -24.97820854]
[-83.17299652 -26.48903847]
[-97.82431030 -29.78999901]
[-111.97089386 -34.83295441]
[-125.40646362 -41.54436111]
[-137.93507385 -49.82635117]
[-149.37402344 -59.55814362]
[-159.55648804 -70.59782410]
[-168.33401489 -82.78440094]
[-175.57855225 -95.94015503]
[-181.18449402 -109.87323761]
[-185.07006836 -124.38046265]
[-187.17861938 -139.25027466]
[-187.47938538 -154.26583862]
[-185.96800232 -169.20816040]
[-182.66648865 -183.85934448]
[-177.62300110 -198.00575256]
[-170.91110229 -211.44107056]
[-162.62864685 -223.96936035]
[-152.89642334 -235.40794373]
[-141.85635376 -245.59001160]
[-129.66944885 -254.36706543]
[-116.51342773 -261.61111450]
[-102.58013916 -267.21655273]
[-88.07276154 -271.10156250]
[-73.20286560 -273.20956421]
[-58.18730164 -273.50976562]
[-43.24503326 -271.99783325]
[-28.59396744 -268.69577026]
[-14.44775581 -263.65176392]
[-1.01269448 -256.93936157]
[11.51529503 -248.65641785]
[22.95351601 -238.92376709]
[33.13516617 -227.88333130]
[41.91176987 -215.69610596]
[49.15533447 -202.53981018]
[54.76023102 -188.60630798]
[58.64471817 -174.09878540]
[60.75215530 -159.22880554]
[61.05180359 -144.21322632]
[59.53929901 -129.27102661]
[56.23669434 -114.62007904]
[51.19215012 -100.47405243]
[44.47923660 -87.03924561]
[36.19584274 -74.51156616]
[26.46276665 -63.07370758]
[15.42194462 -52.89246750]
[24.18815231 -40.72063065]
[32.95436096 -28.54879379]
[41.72056580 -16.37695694]
[47.01886749 -30.41006279]
[61.22689438 -35.21963120]
[73.95973206 -27.29026413]
[75.91069794 -12.41768169]
[65.65380859 -1.47254002]
[50.68658066 -2.45453262]
[58.14149094 10.56177711]
[65.59640503 23.57808685]
[71.68929291 27.84685135]
[73.06777954 36.94364166]
[80.25028992 50.11222458]
[87.56939697 63.20537949]
[95.02430725 76.22168732]
[112.94010925 79.43986511]
[123.59103394 94.20097351]
[138.55128479 95.29228210]
[153.51153564 96.38359833]
[168.47178650 97.47490692]
[183.43203735 98.56621552]
[198.39227295 99.65752411]
[213.37199402 100.43737030]
[228.36468506 100.90541840]
[243.35739136 101.37345886]
[259.37747192 95.82428741]
[269.14456177 109.68213654]
[258.53210449 122.90377045]
[242.88934326 116.36614990]
[227.89665222 115.89810944]
[212.90394592 115.43006897]
[208.83064270 118.03461456]
[203.06605530 118.06325531]
[197.30096436 114.61777496]
[182.34071350 113.52646637]
[167.38047791 112.43515778]
[152.42022705 111.34384155]
[137.45997620 110.25253296]
[122.49972534 109.16122437]
[119.04423523 115.08252716]
[114.07202148 119.80261993]
[107.97908020 122.94558716]
[108.29113770 137.94233704]
[108.60319519 152.93908691]
[108.91525269 167.93585205]
[109.22730255 182.93260193]
[109.53936005 197.92935181]
[109.85141754 212.92610168]
[110.16347504 227.92286682]
[110.47553253 242.91961670]
[110.78759003 257.91638184]
[111.09963989 272.91311646]
[125.75463867 276.50387573]
[138.98043823 283.76614380]
[149.87530518 294.20474243]
[157.69641113 307.10794067]
[161.91047668 321.59600830]
[162.23020935 336.68112183]
[158.63377380 351.33471680]
[151.36640930 364.55773926]
[140.92361450 375.44857788]
[128.01737976 383.26467896]
[113.52768707 387.47314453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 102]
[25 101]
[27 100]
[28 99]
[29 97]
[30 96]
[31 95]
[32 89]
[33 88]
[34 87]
[35 86]
[104 126]
[105 125]
[106 124]
[107 123]
[108 122]
[109 121]
[110 118]
[111 117]
[112 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
