%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACUACCGGGGGGGGGGGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUCACCxxxxxxxxxxCUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGAAUCCCCCCCCCCAAUACUAUCG\
) } def
/len { sequence length } bind def

/coor [
[87.94918823 355.66094971]
[75.07591248 347.75808716]
[64.95161438 336.54757690]
[58.39703369 322.93823242]
[55.94351196 308.03329468]
[57.78995132 293.04107666]
[63.78666306 279.17684937]
[73.44752502 267.56460571]
[85.98937225 259.14566040]
[100.39549255 254.60249329]
[100.08343506 239.60574341]
[99.77137756 224.60899353]
[99.45932770 209.61222839]
[99.14727020 194.61547852]
[98.83521271 179.61872864]
[98.52315521 164.62197876]
[98.21109772 149.62521362]
[97.89904022 134.62846375]
[97.58699036 119.63171387]
[85.98564911 110.12335205]
[71.21958923 112.76221466]
[56.45353317 115.40107727]
[41.68748093 118.03994751]
[26.92142296 120.67881012]
[12.15536785 123.31767273]
[9.58213043 138.25602722]
[2.05216765 151.41183472]
[-9.52523994 161.19648743]
[-23.75206566 166.42843628]
[-38.91034698 166.47589111]
[-53.16965485 161.33312988]
[-64.80809784 151.62115479]
[-72.42028809 138.51275635]
[-75.08701324 123.59080505]
[-72.48625183 108.65722656]
[-64.93205261 95.51531219]
[-53.33663559 85.75201416]
[-39.10019302 80.54629517]
[-23.94184875 80.52677155]
[-9.69204521 85.69580078]
[1.92848444 95.42920685]
[9.51650429 108.55162048]
[24.28256035 105.91275024]
[39.04861450 103.27388763]
[53.81467056 100.63502502]
[68.58072662 97.99616241]
[83.34677887 95.35729980]
[95.60914612 86.71817780]
[103.06405640 73.70187378]
[110.51896667 60.68556213]
[117.97387695 47.66925049]
[125.42878723 34.65294266]
[113.09359741 26.10166359]
[101.53917694 16.52163887]
[90.85108185 5.98379755]
[81.10844421 -5.43384218]
[72.38339996 -17.64674568]
[64.74054718 -30.56449127]
[58.23646164 -44.09143829]
[52.91930389 -58.12744141]
[48.82844543 -72.56857300]
[45.99416733 -87.30792236]
[44.43746185 -102.23635101]
[44.16984558 -117.24334717]
[45.19330597 -132.21778870]
[47.50026321 -147.04881287]
[51.07363892 -161.62661743]
[55.88697433 -175.84327698]
[61.90463257 -189.59352112]
[69.08206177 -202.77555847]
[77.36611938 -215.29177856]
[86.69548035 -227.04951477]
[97.00106049 -237.96173096]
[108.20656586 -247.94763184]
[120.22903442 -256.93325806]
[132.97944641 -264.85211182]
[146.36341858 -271.64556885]
[160.28182983 -277.26330566]
[174.63166809 -281.66375732]
[189.30665588 -284.81430054]
[204.19816589 -286.69165039]
[219.19593811 -287.28192139]
[234.18891907 -286.58068848]
[249.06613159 -284.59317017]
[263.71740723 -281.33407593]
[278.03427124 -276.82754517]
[291.91073608 -271.10696411]
[305.24404907 -264.21463013]
[317.93551636 -256.20162964]
[329.89114380 -247.12725830]
[341.02243042 -237.05870056]
[351.24697876 -226.07051086]
[360.48904419 -214.24403381]
[368.68023682 -201.66685486]
[375.75991821 -188.43205261]
[381.67562866 -174.63764954]
[386.38363647 -160.38575745]
[389.84899902 -145.78190613]
[392.04614258 -130.93420410]
[392.95874023 -115.95260620]
[392.58004761 -100.94799805]
[390.91290283 -86.03150177]
[387.96963501 -71.31353760]
[383.77200317 -56.90307236]
[378.35110474 -42.90681076]
[371.74707031 -29.42837143]
[364.00881958 -16.56754494]
[355.19363403 -4.41955185]
[345.36676025 6.92566824]
[334.60095215 17.38411713]
[322.97595215 26.87836266]
[310.57781982 35.33811188]
[297.49832153 42.70072937]
[283.83428955 48.91170883]
[269.68695068 53.92506027]
[255.16098022 57.70366669]
[240.36395264 60.21955109]
[225.40544128 61.45409393]
[210.39616394 61.39814377]
[195.44726562 60.05212402]
[180.66940308 57.42599487]
[166.17202759 53.53920364]
[152.06242371 48.42052078]
[138.44509888 42.10785294]
[130.99018860 55.12416077]
[123.53527832 68.14047241]
[116.08036804 81.15678406]
[108.62545776 94.17308807]
[114.59413147 99.05113983]
[116.84632874 108.43640137]
[112.58374023 119.31965637]
[112.89579773 134.31640625]
[113.20785522 149.31315613]
[113.51991272 164.30992126]
[113.83196259 179.30667114]
[114.14402008 194.30342102]
[114.45607758 209.30017090]
[114.76813507 224.29693604]
[115.08019257 239.29368591]
[115.39225006 254.29043579]
[129.97488403 258.23040771]
[142.85609436 266.12033081]
[152.99165344 277.32064819]
[159.55989075 290.92340088]
[162.02839661 305.82586670]
[160.19702148 320.81994629]
[154.21423340 334.69018555]
[144.56504822 346.31213379]
[132.03166199 354.74368286]
[117.63011169 359.30130005]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 47]
[21 46]
[22 45]
[23 44]
[24 43]
[25 42]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
