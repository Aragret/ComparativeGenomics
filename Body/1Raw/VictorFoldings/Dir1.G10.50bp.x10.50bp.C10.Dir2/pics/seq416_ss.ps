%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAAAACAAGGGGGGGGGGAGAACCCUAACACCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUxxxxxxxxxxGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUCACCCCCCCCCCCAAAAAACAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 504.91180420]
[71.19830322 498.89578247]
[59.48964310 489.36636353]
[50.78712082 477.03070068]
[45.73651886 462.80416870]
[44.71262741 447.74249268]
[47.79142761 432.96334839]
[54.74444962 419.56341553]
[65.05573273 408.53707886]
[77.96011353 400.70257568]
[92.50000000 396.64126587]
[92.50000000 381.64126587]
[92.50000000 366.64126587]
[92.50000000 351.64126587]
[92.50000000 336.64126587]
[92.50000000 321.64126587]
[92.50000000 306.64126587]
[92.50000000 291.64126587]
[92.50000000 276.64126587]
[92.50000000 261.64126587]
[84.76270294 248.91398621]
[92.50000000 235.11381531]
[92.50000000 220.11381531]
[92.50000000 205.11381531]
[81.81912994 194.79612732]
[81.60544586 179.58399963]
[92.50000000 168.45086670]
[92.50000000 153.45086670]
[74.50762177 147.57504272]
[59.65012741 135.84875488]
[49.75457764 119.71404266]
[46.03786850 101.15502930]
[48.95704651 82.45397949]
[58.15314102 65.91061401]
[72.49526978 53.55932999]
[66.71900177 39.71611404]
[60.94272614 25.87289619]
[55.16645432 12.02967834]
[44.43147278 11.64487171]
[34.51894760 7.64522457]
[26.60166359 0.54277515]
[21.60304832 -8.78570652]
[20.08956337 -19.20684814]
[22.20669937 -29.46834373]
[9.94433117 -38.10746002]
[-2.31803727 -46.74657440]
[-14.58040524 -55.38569260]
[-28.48509789 -48.86226273]
[-43.78725815 -50.18114471]
[-56.37068176 -58.98756027]
[-62.85049438 -72.91263580]
[-61.48365402 -88.21058655]
[-52.63784027 -100.76634216]
[-38.69252396 -107.20247650]
[-23.39893150 -105.78768921]
[-10.87096214 -96.90256500]
[-4.47857428 -82.93714142]
[-5.94128942 -67.64805603]
[6.32107878 -59.00894165]
[18.58344650 -50.36982727]
[30.84581566 -41.73071289]
[37.38405609 -45.98407364]
[44.79327011 -48.42193604]
[45.72889709 -63.39272690]
[46.66452789 -78.36351776]
[47.60015488 -93.33431244]
[48.53578568 -108.30509949]
[49.47141266 -123.27589417]
[50.40703964 -138.24668884]
[36.61149597 -144.57498169]
[26.03638268 -155.46220398]
[20.11190033 -169.43592834]
[19.63928604 -184.60632324]
[24.68245506 -198.92172241]
[34.55936432 -210.44610596]
[47.93423843 -217.62086487]
[62.99823761 -219.47567749]
[77.71408081 -215.75970459]
[90.09156799 -206.97550964]
[98.45674896 -194.31106567]
[101.67829895 -179.47914124]
[99.32053375 -164.48562622]
[91.70231628 -151.35827637]
[79.85395050 -141.87246704]
[65.37783051 -137.31105042]
[64.44220734 -122.34026337]
[63.50657654 -107.36947632]
[62.57094574 -92.39868164]
[61.63531876 -77.42788696]
[60.69969177 -62.45709991]
[59.76406097 -47.48630905]
[76.82234192 -34.10877609]
[80.65001678 -12.54959583]
[69.00967407 6.25340605]
[74.78594208 20.09662437]
[80.56221771 33.93984222]
[86.33848572 47.78305817]
[101.81917572 46.05617523]
[117.14835358 48.82207870]
[131.04930115 55.85040665]
[142.36427307 66.55580139]
[150.15086365 80.04663849]
[164.72357178 76.49187469]
[179.29626465 72.93711853]
[193.86897278 69.38235474]
[205.34297180 57.66572952]
[221.15740967 62.00571823]
[225.04376221 77.93771362]
[213.00405884 89.07224274]
[197.42373657 83.95505524]
[182.85102844 87.50981903]
[168.27833557 91.06458282]
[153.70562744 94.61934662]
[153.89793396 102.87384796]
[152.82894897 111.06110382]
[150.52369690 118.98951721]
[147.03611755 126.47354889]
[142.44784546 133.33805847]
[136.86622620 139.42242432]
[130.42189026 144.58424377]
[123.26564026 148.70272827]
[115.56494141 151.68150330]
[107.50000000 153.45086670]
[107.50000000 168.45086670]
[118.39455414 179.58399963]
[118.18087006 194.79612732]
[107.50000000 205.11381531]
[107.50000000 220.11381531]
[107.50000000 235.11381531]
[115.23729706 248.91398621]
[107.50000000 261.64126587]
[107.50000000 276.64126587]
[107.50000000 291.64126587]
[107.50000000 306.64126587]
[107.50000000 321.64126587]
[107.50000000 336.64126587]
[107.50000000 351.64126587]
[107.50000000 366.64126587]
[107.50000000 381.64126587]
[107.50000000 396.64126587]
[122.03988647 400.70257568]
[134.94427490 408.53707886]
[145.25555420 419.56341553]
[152.20857239 432.96334839]
[155.28736877 447.74249268]
[154.26348877 462.80416870]
[149.21287537 477.03070068]
[140.51036072 489.36636353]
[128.80169678 498.89578247]
[114.95575714 504.91180420]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[27 124]
[28 123]
[35 97]
[36 96]
[37 95]
[38 94]
[44 61]
[45 60]
[46 59]
[47 58]
[63 91]
[64 90]
[65 89]
[66 88]
[67 87]
[68 86]
[69 85]
[102 113]
[103 112]
[104 111]
[105 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
