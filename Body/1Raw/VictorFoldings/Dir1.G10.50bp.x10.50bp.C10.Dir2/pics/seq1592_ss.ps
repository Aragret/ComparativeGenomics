%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUAUACCGGGGGGGGGGGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUACCCxxxxxxxxxxAACUCAACGGCUACAUAGAAAAAUCCACCCCUUACGAGUGCGGCUUCGACCCCCCCCCCCCCUAUAUCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 384.84088135]
[71.19830322 378.82485962]
[59.48964310 369.29544067]
[50.78712082 356.95977783]
[45.73651886 342.73324585]
[44.71262741 327.67156982]
[47.79142761 312.89239502]
[54.74444962 299.49249268]
[65.05573273 288.46615601]
[77.96011353 280.63165283]
[92.50000000 276.57031250]
[92.50000000 261.57031250]
[92.50000000 246.57032776]
[92.50000000 231.57032776]
[92.50000000 216.57032776]
[92.50000000 201.57032776]
[92.50000000 186.57032776]
[92.50000000 171.57032776]
[92.50000000 156.57032776]
[92.50000000 141.57032776]
[92.50000000 126.57032776]
[84.59049988 125.30792999]
[76.88533783 121.62271118]
[70.13589478 115.55707550]
[65.07779694 107.38642883]
[62.35933304 97.61141968]
[47.39908600 98.70272827]
[32.43883514 99.79404449]
[17.47858810 100.88535309]
[2.51833892 101.97666168]
[-10.68234158 110.69747925]
[-23.93880463 103.90663910]
[-38.89905548 104.99795532]
[-50.43360138 116.14845276]
[-66.32389832 113.93980408]
[-74.38025665 100.06628418]
[-68.42253876 85.17047119]
[-53.02099228 80.67916107]
[-39.99036407 90.03770447]
[-25.03011513 88.94639587]
[-12.89949226 80.30363464]
[1.42702842 87.01641083]
[16.38727760 85.92510223]
[31.34752655 84.83379364]
[46.30777359 83.74248505]
[61.26802444 82.65116882]
[64.97418213 68.11623383]
[52.36305618 59.99469376]
[39.75192642 51.87314987]
[23.35476112 51.61824036]
[15.61442947 37.16073990]
[24.49352074 23.37328911]
[40.85798645 24.43923569]
[47.87347031 39.26202393]
[60.48460007 47.38356400]
[73.09572601 55.50510788]
[87.88843536 53.01998901]
[97.15338135 41.22335052]
[106.41833496 29.42670822]
[115.68328094 17.63006973]
[124.82501221 5.73768902]
[133.84254456 -6.24914360]
[142.86007690 -18.23597527]
[131.92619324 -28.52740479]
[122.19084930 -39.95920563]
[113.77219391 -52.39261246]
[106.77244568 -65.67668915]
[101.27656555 -79.65018463]
[97.35127258 -94.14346313]
[95.04421234 -108.98059845]
[94.38338470 -123.98148346]
[95.37682343 -138.96401978]
[98.01246643 -153.74632263]
[102.25830841 -168.14895630]
[108.06282806 -181.99710083]
[115.35554504 -195.12261963]
[124.04794312 -207.36621094]
[134.03450012 -218.57922363]
[145.19398499 -228.62556458]
[157.39094543 -237.38327026]
[170.47731018 -244.74603271]
[184.29421997 -250.62448120]
[198.67396545 -254.94723511]
[213.44198608 -257.66183472]
[228.41899109 -258.73532104]
[243.42318726 -258.15469360]
[258.27243042 -255.92695618]
[272.78649902 -252.07916260]
[286.78915405 -246.65805054]
[300.11044312 -239.72938538]
[312.58868408 -231.37730408]
[324.07235718 -221.70318604]
[334.42205811 -210.82446289]
[343.51217651 -198.87319946]
[351.23239136 -185.99446106]
[357.48892212 -172.34460449]
[362.20587158 -158.08929443]
[365.32595825 -143.40161133]
[366.81130981 -128.45982361]
[366.64389038 -113.44532776]
[364.82574463 -98.54037476]
[361.37893677 -83.92590332]
[356.34530640 -69.77931976]
[349.78598022 -56.27235031]
[341.78054810 -43.56895828]
[332.42620850 -31.82334709]
[321.83648682 -21.17810059]
[310.13998413 -11.76244068]
[297.47863770 -3.69066691]
[284.00616455 2.93923807]
[269.88607788 8.04679298]
[255.28985596 11.56999683]
[240.39462280 13.46608162]
[225.38119507 13.71202946]
[210.43185425 12.30485630]
[195.72804260 9.26164246]
[181.44825745 4.61933088]
[167.76585388 -1.56572568]
[154.84690857 -9.21844578]
[145.82937622 2.76838636]
[136.81184387 14.75521946]
[135.29425049 22.03824997]
[127.47991943 26.89501762]
[118.21497345 38.69165802]
[108.95001984 50.48829651]
[99.68507385 62.28493881]
[122.94719696 73.32189178]
[132.33496094 95.38619995]
[125.25704956 116.43869019]
[107.50000000 126.57032776]
[107.50000000 141.57032776]
[107.50000000 156.57032776]
[107.50000000 171.57032776]
[107.50000000 186.57032776]
[107.50000000 201.57032776]
[107.50000000 216.57032776]
[107.50000000 231.57032776]
[107.50000000 246.57032776]
[107.50000000 261.57031250]
[107.50000000 276.57031250]
[122.03988647 280.63165283]
[134.94427490 288.46615601]
[145.25555420 299.49249268]
[152.20857239 312.89239502]
[155.28736877 327.67156982]
[154.26348877 342.73324585]
[149.21287537 356.95977783]
[140.51036072 369.29544067]
[128.80169678 378.82485962]
[114.95575714 384.84088135]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 46]
[27 45]
[28 44]
[29 43]
[30 42]
[32 40]
[33 39]
[47 56]
[48 55]
[49 54]
[57 126]
[58 125]
[59 124]
[60 123]
[61 121]
[62 120]
[63 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
