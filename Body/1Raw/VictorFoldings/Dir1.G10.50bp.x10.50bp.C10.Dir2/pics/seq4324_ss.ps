%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACCUCCUAUGGGGGGGGGGGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCCxxxxxxxxxxCUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACCCCCCCCCCCUCCACCUCCUAU\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 390.36337280]
[70.87159729 385.20837402]
[58.28185654 376.92617798]
[47.94191742 365.96340942]
[40.40940475 352.91128540]
[36.09054184 338.47369385]
[35.21823120 323.42922974]
[37.83952332 308.58923340]
[43.81304932 294.75399780]
[52.81666565 282.66964722]
[64.36482239 272.98785400]
[77.83473969 266.23077393]
[92.50000000 262.76281738]
[92.50000000 247.76280212]
[92.50000000 232.76280212]
[92.50000000 217.76280212]
[92.50000000 202.76280212]
[92.50000000 187.76280212]
[92.50000000 172.76280212]
[92.50000000 157.76280212]
[92.50000000 142.76280212]
[92.50000000 127.76280975]
[92.50000000 112.76280975]
[89.77892303 98.01168060]
[84.42706299 83.99891663]
[70.06210327 88.33955383]
[55.42408371 91.64434814]
[40.58760071 93.89645386]
[25.62825203 95.08438873]
[10.62227345 95.20210266]
[-4.35386992 94.24900055]
[-19.22386169 92.22994232]
[-33.91192627 89.15519714]
[-48.34321594 85.04045868]
[-62.44419479 79.90667725]
[-76.14299774 73.78001404]
[-89.36983490 66.69170380]
[-102.05728149 58.67785263]
[-114.14070892 49.77930450]
[-125.55852509 40.04140472]
[-136.25254822 29.51377106]
[-146.16828918 18.25005531]
[-155.25523376 6.30765486]
[-163.46704102 -6.25257492]
[-170.76188660 -19.36663055]
[-177.10260010 -32.96768188]
[-182.45686340 -46.98642349]
[-186.79739380 -61.35141754]
[-190.10208130 -75.98946381]
[-192.35406494 -90.82596588]
[-193.54188538 -105.78532410]
[-193.65950012 -120.79129791]
[-192.70628357 -135.76744080]
[-190.68710327 -150.63740540]
[-187.61224365 -165.32545471]
[-183.49739075 -179.75671387]
[-178.36351013 -193.85765076]
[-172.23674011 -207.55641174]
[-165.14833069 -220.78318787]
[-157.13438416 -233.47058105]
[-148.23573303 -245.55393982]
[-138.49774170 -256.97167969]
[-127.97003174 -267.66561890]
[-116.70624542 -277.58126831]
[-104.76377106 -286.66812134]
[-92.20347595 -294.87985229]
[-79.08937073 -302.17459106]
[-65.48826599 -308.51519775]
[-51.46948624 -313.86935425]
[-37.10445786 -318.20977783]
[-22.46638870 -321.51434326]
[-7.62986851 -323.76620483]
[7.32949686 -324.95391846]
[22.33547783 -325.07141113]
[37.31160736 -324.11807251]
[52.18156815 -322.09878540]
[66.86958313 -319.02383423]
[81.30081177 -314.90887451]
[95.40171051 -309.77487183]
[109.10042572 -303.64801025]
[122.32714844 -296.55947876]
[135.01448059 -288.54544067]
[147.09776306 -279.64669800]
[158.51542664 -269.90863037]
[169.20928955 -259.38082886]
[179.12486267 -248.11695862]
[188.21162415 -236.17442322]
[196.42323303 -223.61405945]
[203.71788025 -210.49989319]
[210.05839539 -196.89874268]
[215.41244507 -182.87992859]
[219.75274658 -168.51486206]
[223.05720520 -153.87677002]
[225.30897522 -139.04023743]
[226.49656677 -124.08085632]
[226.61393738 -109.07487488]
[225.66049194 -94.09875488]
[223.64108276 -79.22881317]
[220.56600952 -64.54081726]
[216.45092773 -50.10961914]
[211.31681824 -36.00876236]
[205.18984985 -22.31009483]
[198.10122681 -9.08342552]
[190.08709717 3.60384297]
[181.18826294 15.68706131]
[171.45010376 27.10465431]
[160.92222595 37.79843903]
[149.65827942 47.71392441]
[137.71566772 56.80058289]
[125.15525055 65.01210785]
[112.04103088 72.30665588]
[98.43982697 78.64705658]
[103.79168701 92.65982056]
[116.59554291 82.41439056]
[134.50067139 79.56578827]
[149.09504700 83.03050232]
[163.68942261 86.49521637]
[178.28379822 89.95993042]
[190.72174072 80.48197937]
[206.33955383 81.26803589]
[217.76298523 91.94695282]
[219.59823608 107.47646332]
[210.97877502 120.52401733]
[195.97441101 124.92895508]
[181.66978455 118.61140442]
[174.81907654 104.55430603]
[160.22471619 101.08959198]
[145.63034058 97.62487793]
[131.03596497 94.16015625]
[125.15196991 98.81082153]
[113.38398743 108.11214447]
[107.50000000 112.76280975]
[107.50000000 127.76280975]
[107.50000000 142.76280212]
[107.50000000 157.76280212]
[107.50000000 172.76280212]
[107.50000000 187.76280212]
[107.50000000 202.76280212]
[107.50000000 217.76280212]
[107.50000000 232.76280212]
[107.50000000 247.76280212]
[107.50000000 262.76281738]
[122.16526031 266.23077393]
[135.63517761 272.98785400]
[147.18333435 282.66964722]
[156.18695068 294.75399780]
[162.16047668 308.58923340]
[164.78176880 323.42922974]
[163.90945435 338.47369385]
[159.59059143 352.91128540]
[152.05809021 365.96340942]
[141.71813965 376.92617798]
[129.12840271 385.20837402]
[114.96779633 390.36337280]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 113]
[25 112]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
