%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGAAACCGGGGGGGGGGGUCUGAACUAUCCUGCCCGCCAUCAUCCUAGUCCUCAUCGCCCUCCCAUCxxxxxxxxxxUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUCCCCCCCCCCAAUAGAAAAC\
) } def
/len { sequence length } bind def

/coor [
[77.76972198 474.89135742]
[63.28002930 470.68286133]
[50.37379837 462.86676025]
[39.93099976 451.97592163]
[32.66363525 438.75289917]
[29.06720734 424.09930420]
[29.38693047 409.01422119]
[33.60100174 394.52615356]
[41.42209625 381.62292480]
[52.31696701 371.18432617]
[65.54277802 363.92208862]
[80.19776917 360.33132935]
[80.50982666 345.33456421]
[80.82187653 330.33779907]
[81.13393402 315.34106445]
[81.44599152 300.34429932]
[81.75804901 285.34753418]
[82.07010651 270.35079956]
[82.38216400 255.35403442]
[82.69421387 240.35728455]
[83.00627136 225.36053467]
[74.07652283 220.07669067]
[68.12758636 211.47671509]
[66.30494690 201.09738159]
[69.00926208 190.82824707]
[75.81072998 182.56761169]
[85.51585388 177.87173462]
[86.76272583 162.92364502]
[88.00959778 147.97555542]
[89.25647736 133.02746582]
[90.50334930 118.07938385]
[82.79578400 108.68468475]
[82.08729553 97.25292969]
[87.83701324 88.16275787]
[81.20851898 74.70679474]
[74.58001709 61.25082779]
[60.47253418 66.39145660]
[45.89193726 69.97663879]
[31.00918770 71.96433258]
[15.99876976 72.33124542]
[1.03667736 71.07305908]
[-13.70166779 68.20454407]
[-28.04346657 63.75931549]
[-41.82056808 57.78950119]
[-54.87144470 50.36508942]
[-67.04308319 41.57313156]
[-78.19276428 31.51670456]
[-88.18978119 20.31371689]
[-96.91691589 8.09551907]
[-104.27185059 -4.99463797]
[-110.16834259 -18.80327988]
[-114.53726959 -33.16850662]
[-117.32740784 -47.92189026]
[-118.50603485 -62.89046097]
[-118.05934143 -77.89871216]
[-115.99256134 -92.77069092]
[-112.32992554 -107.33202362]
[-107.11437225 -121.41197968]
[-100.40706635 -134.84548950]
[-92.28662872 -147.47505188]
[-82.84828186 -159.15258789]
[-72.20267487 -169.74118042]
[-60.47463226 -179.11669922]
[-47.80165100 -187.16918945]
[-34.33231735 -193.80427551]
[-20.22455597 -198.94415283]
[-5.64376926 -202.52854919]
[9.23908997 -204.51544189]
[24.24952698 -204.88154602]
[39.21155167 -203.62255859]
[53.94974136 -200.75325012]
[68.29130554 -196.30725098]
[82.06808472 -190.33668518]
[95.11856079 -182.91157532]
[107.28971863 -174.11895752]
[118.43886566 -164.06193542]
[128.43528748 -152.85841370]
[137.16175842 -140.63973999]
[144.51599121 -127.54918671]
[150.41174316 -113.74022675]
[154.77989197 -99.37477112]
[157.56922913 -84.62123108]
[158.74705505 -69.65260315]
[158.29956055 -54.64437103]
[156.23197937 -39.77250671]
[152.56855774 -25.21137238]
[147.35224915 -11.13169289]
[140.64421082 2.30145693]
[132.52310181 14.93058014]
[123.08412170 26.60760689]
[112.43795013 37.19562912]
[100.70939636 46.57050705]
[88.03598785 54.62232971]
[94.66448212 68.07829285]
[101.29298401 81.53426361]
[115.07536316 87.45422363]
[129.39796448 82.99740601]
[143.72055054 78.54058838]
[158.04315186 74.08377838]
[172.36575317 69.62696075]
[175.06791687 54.56187057]
[184.47080994 42.48527527]
[198.41372681 36.17228699]
[213.69267273 37.07358170]
[226.79666138 44.98205185]
[234.71450806 58.08039093]
[235.62672424 73.35868835]
[229.32371521 87.30611420]
[217.25384521 96.71763611]
[202.19068909 99.43057251]
[187.59565735 94.82150269]
[176.82257080 83.94955444]
[162.49996948 88.40637207]
[148.17736816 92.86318970]
[133.85478210 97.32000732]
[119.53218079 101.77681732]
[134.50636292 100.89705658]
[146.88583374 109.36750031]
[151.49002075 123.64340210]
[146.39210510 137.75054932]
[133.72550964 145.78530884]
[118.79099274 144.38526917]
[107.83840179 134.13632202]
[105.45143890 119.32625580]
[104.20455933 134.27433777]
[102.95768738 149.22242737]
[101.71081543 164.17051697]
[100.46393585 179.11860657]
[114.24542236 193.65536499]
[113.01693726 213.34565735]
[98.00302887 225.67259216]
[97.69097137 240.66934204]
[97.37891388 255.66609192]
[97.06685638 270.66284180]
[96.75479889 285.65960693]
[96.44274902 300.65634155]
[96.13069153 315.65310669]
[95.81863403 330.64987183]
[95.50657654 345.64660645]
[95.19451904 360.64337158]
[109.68745422 364.84066772]
[122.59971619 372.64678955]
[133.05093384 383.52957153]
[140.32850647 396.74694824]
[143.93623352 411.39779663]
[143.62817383 426.48312378]
[139.42529297 440.97442627]
[131.61415100 453.88369751]
[120.72735596 464.33068848]
[107.50715637 471.60314941]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[27 128]
[28 127]
[29 126]
[30 125]
[31 124]
[34 95]
[35 94]
[36 93]
[96 116]
[97 115]
[98 114]
[99 113]
[100 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
