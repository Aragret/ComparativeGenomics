%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAACCCAGGGGGGGGGGCAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUxxxxxxxxxxCGCAUAAAACUUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACCCCCCCCCCCAACAUACCCA\
) } def
/len { sequence length } bind def

/coor [
[70.97588348 368.45767212]
[58.41766357 360.10650635]
[48.33143997 348.89407349]
[41.35124588 335.52514648]
[37.91586304 320.84017944]
[38.24124146 305.76220703]
[42.30692673 291.23907471]
[49.85734558 278.18374634]
[60.41787338 267.41683960]
[73.32466888 259.61520386]
[87.76639557 255.26925659]
[87.14241791 240.28224182]
[86.51844025 225.29522705]
[85.89446259 210.30821228]
[85.27048492 195.32119751]
[84.64650726 180.33418274]
[84.02252960 165.34716797]
[83.39855194 150.36015320]
[82.77457428 135.37312317]
[70.78774261 126.35559845]
[56.21504211 129.91035461]
[41.64233780 133.46511841]
[27.06963730 137.01988220]
[12.49693394 140.57464600]
[-2.07576895 144.12940979]
[-4.75495005 159.12080383]
[-13.30542564 171.72276306]
[-26.24577522 179.75190735]
[-41.33400345 181.81715393]
[-55.95598602 177.56068420]
[-67.57836914 167.71995544]
[-74.18751526 153.99992371]
[-74.63834381 138.77767944]
[-68.85274506 124.69057465]
[-57.83311081 114.17926788]
[-43.48865891 109.06491089]
[-28.30465317 110.23360443]
[-14.91181374 117.48286438]
[-5.63053083 129.55670166]
[8.94217205 126.00194550]
[23.51487541 122.44718170]
[38.08757782 118.89241791]
[52.66028214 115.33766174]
[67.23298645 111.78289795]
[67.64772034 93.91832733]
[76.61667633 79.62215424]
[90.75987244 72.39070892]
[89.82424164 57.41991806]
[88.88861847 42.44912720]
[87.95298767 27.47833633]
[76.38521576 17.04644012]
[75.64962006 1.85060060]
[85.66613007 -9.11321163]
[84.73049927 -24.08400345]
[83.79486847 -39.05479431]
[75.21184540 -52.34547806]
[82.14021301 -65.53058624]
[81.20458984 -80.50137329]
[80.26895905 -95.47216797]
[79.33332825 -110.44296265]
[68.79064941 -125.50389099]
[77.12967682 -140.91365051]
[68.27201843 -154.02288818]
[74.92458344 -167.34927368]
[73.67771149 -182.29736328]
[72.43083954 -197.24545288]
[57.94143677 -201.84173584]
[46.31711960 -211.63681030]
[39.33050537 -225.13702393]
[38.04700089 -240.28367615]
[42.66233444 -254.76701355]
[52.47269821 -266.37844849]
[65.98208618 -273.34729004]
[81.13041687 -274.61087036]
[95.60767365 -269.97647095]
[107.20617676 -260.15084839]
[114.15724945 -246.63230896]
[115.40090179 -231.48233032]
[110.74748230 -217.01118469]
[100.90660095 -205.42561340]
[87.37892151 -198.49232483]
[88.62580109 -183.54423523]
[89.87267303 -168.59616089]
[98.64115143 -156.55609131]
[92.07776642 -142.16052246]
[101.12973022 -134.07539368]
[102.25611877 -121.58738708]
[94.30412292 -111.37858582]
[95.23974609 -96.40779877]
[96.17537689 -81.43700409]
[97.11100769 -66.46620941]
[105.62710571 -54.24633789]
[98.76566315 -39.99042511]
[99.70128632 -25.01963234]
[100.63691711 -10.04884052]
[111.94055939 -0.41747159]
[113.10268402 14.75171185]
[102.92377472 26.54270744]
[103.85940552 41.51350021]
[104.79503632 56.48429108]
[105.73065948 71.45508575]
[120.47969055 79.30615234]
[128.48376465 93.97270966]
[143.46347046 94.75255585]
[153.58900452 86.69479370]
[166.08804321 87.69121552]
[174.26690674 96.65858459]
[189.22714233 97.74989319]
[204.18739319 98.84120178]
[219.14764404 99.93251801]
[234.10789490 101.02382660]
[244.87393188 89.68245697]
[260.41702271 87.96611786]
[273.39822388 96.68519592]
[277.68820190 111.72282410]
[271.26135254 125.97868347]
[257.15225220 132.72160339]
[242.02275085 128.76777649]
[233.01658630 115.98406982]
[218.05633545 114.89276123]
[203.09608459 113.80145264]
[188.13583374 112.71014404]
[173.17558289 111.61882782]
[157.85342407 120.11771393]
[142.68362427 109.73226929]
[127.70391846 108.95242310]
[124.43849182 118.31725311]
[117.97002411 126.43898773]
[108.78870392 132.21725464]
[97.76159668 134.74914551]
[98.38557434 149.73617554]
[99.00955200 164.72319031]
[99.63352966 179.71020508]
[100.25749969 194.69721985]
[100.88147736 209.68423462]
[101.50545502 224.67124939]
[102.12943268 239.65826416]
[102.75341034 254.64527893]
[117.50641632 257.77572632]
[131.01705933 264.47747803]
[142.43603516 274.32925415]
[151.04554749 286.71179199]
[156.30439758 300.84671021]
[157.88200378 315.84542847]
[155.67919922 330.76516724]
[149.83444214 344.66802979]
[140.71516418 356.68008423]
[128.89459229 366.04623413]
[115.11578369 372.17773438]
[100.24488831 374.68914795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[47 101]
[48 100]
[49 99]
[50 98]
[53 95]
[54 94]
[55 93]
[57 91]
[58 90]
[59 89]
[60 88]
[62 85]
[64 83]
[65 82]
[66 81]
[103 126]
[104 125]
[107 123]
[108 122]
[109 121]
[110 120]
[111 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
