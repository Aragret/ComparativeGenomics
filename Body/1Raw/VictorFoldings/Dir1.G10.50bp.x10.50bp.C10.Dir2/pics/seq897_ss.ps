%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCCCAGGGGGGGGGGUAAACAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUAxxxxxxxxxxUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCCCCCCCCCCCUCACCCCA\
) } def
/len { sequence length } bind def

/coor [
[69.23516846 427.75241089]
[55.38922882 421.73638916]
[43.68056870 412.20697021]
[34.97804260 399.87130737]
[29.92744064 385.64477539]
[28.90354919 370.58309937]
[31.98234940 355.80392456]
[38.93537140 342.40399170]
[49.24665451 331.37765503]
[62.15103531 323.54315186]
[76.69092560 319.48184204]
[76.69092560 304.48184204]
[76.69092560 289.48184204]
[76.69092560 274.48184204]
[76.69092560 259.48184204]
[76.69092560 244.48184204]
[76.69092560 229.48184204]
[76.69092560 214.48184204]
[76.69092560 199.48184204]
[76.69092560 184.48184204]
[76.69092560 169.48184204]
[67.95369720 181.67449951]
[54.84965897 188.97410583]
[39.88378143 189.98527527]
[25.91693306 184.51469421]
[15.61901855 173.60813904]
[10.95858479 159.35050964]
[12.82651997 144.46726990]
[20.86574936 131.80349731]
[33.53949356 123.78002930]
[48.42504501 121.93060303]
[62.67687988 126.60876465]
[73.57062531 136.92022705]
[79.02359772 150.89241028]
[82.72975922 136.35746765]
[86.43592072 121.82253265]
[90.14208221 107.28759766]
[78.84474182 117.15522766]
[64.54434204 121.68275452]
[49.62650681 120.11489105]
[36.57986832 112.71318817]
[27.58089638 100.71241760]
[24.13082504 86.11457062]
[26.80520058 71.35490417]
[35.15787888 58.89566422]
[47.79544449 50.81531906]
[62.60966873 48.46186447]
[77.12920380 52.22790146]
[88.93186951 61.48517227]
[96.04872131 74.68935394]
[97.29266357 89.63629150]
[104.74757385 76.61997986]
[112.20248413 63.60367203]
[119.65739441 50.58736420]
[127.11230469 37.57105637]
[134.56721497 24.55474472]
[130.64653015 9.47940445]
[138.39228821 -3.61478662]
[152.78848267 -7.25966597]
[160.24339294 -20.27597618]
[167.69830322 -33.29228592]
[175.15321350 -46.30859375]
[176.72064209 -55.37474060]
[182.90103149 -59.51582336]
[190.62510681 -72.37422943]
[198.34919739 -85.23262787]
[186.64282227 -94.64934540]
[176.32777405 -105.57242584]
[167.59622192 -117.79837036]
[160.61082458 -131.09942627]
[155.50170898 -145.22778320]
[152.36407471 -159.92027283]
[151.25634766 -174.90315247]
[152.19918823 -189.89730835]
[155.17501831 -204.62341309]
[160.12838745 -218.80712891]
[166.96705627 -232.18421936]
[175.56358337 -244.50547791]
[185.75784302 -255.54136658]
[197.35992432 -265.08630371]
[210.15367126 -272.96243286]
[223.90075684 -279.02307129]
[238.34507751 -283.15530396]
[253.21754456 -285.28213501]
[268.24108887 -285.36398315]
[283.13583374 -283.39926147]
[297.62432861 -279.42459106]
[311.43661499 -273.51406860]
[324.31539917 -265.77774048]
[336.02075195 -256.35974121]
[346.33459473 -245.43554688]
[355.06484985 -233.20866394]
[362.04879761 -219.90686035]
[367.15637207 -205.77793884]
[370.29241943 -191.08511353]
[371.39852905 -176.10211182]
[370.45407104 -161.10806274]
[367.47665405 -146.38227844]
[362.52172852 -132.19909668]
[355.68164062 -118.82274628]
[347.08377075 -106.50241852]
[336.88830566 -95.46763611]
[325.28518677 -85.92396545]
[312.49060059 -78.04920197]
[298.74285889 -71.99005127]
[284.29809570 -67.85938263]
[269.42538452 -65.73415375]
[254.40182495 -65.65395355]
[239.50729370 -67.62028503]
[225.01924133 -71.59650421]
[211.20759583 -77.50854492]
[203.48352051 -64.65013885]
[195.75942993 -51.79174042]
[188.16952515 -38.85368347]
[180.71461487 -25.83737373]
[173.25970459 -12.82106495]
[165.80479431 0.19524437]
[169.94532776 14.45678329]
[162.57041931 27.76337051]
[147.58352661 32.00965500]
[140.12861633 45.02596664]
[132.67370605 58.04227448]
[125.21879578 71.05858612]
[117.76388550 84.07489014]
[110.30897522 97.09120178]
[104.67701721 110.99375916]
[100.97085571 125.52869415]
[97.26469421 140.06362915]
[93.55853271 154.59857178]
[91.69092560 169.48184204]
[91.69092560 184.48184204]
[91.69092560 199.48184204]
[91.69092560 214.48184204]
[91.69092560 229.48184204]
[91.69092560 244.48184204]
[91.69092560 259.48184204]
[91.69092560 274.48184204]
[91.69092560 289.48184204]
[91.69092560 304.48184204]
[91.69092560 319.48184204]
[106.23081207 323.54315186]
[119.13519287 331.37765503]
[129.44647217 342.40399170]
[136.39949036 355.80392456]
[139.47830200 370.58309937]
[138.45440674 385.64477539]
[133.40380859 399.87130737]
[124.70127869 412.20697021]
[112.99261475 421.73638916]
[99.14667511 427.75241089]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[34 129]
[35 128]
[36 127]
[37 126]
[51 125]
[52 124]
[53 123]
[54 122]
[55 121]
[56 120]
[59 117]
[60 116]
[61 115]
[62 114]
[64 113]
[65 112]
[66 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
