%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACACACCGGGGGGGGGGGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCUACUCxxxxxxxxxxAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACUCCCCCCCCCCAUCACACAUC\
) } def
/len { sequence length } bind def

/coor [
[87.25958252 497.42730713]
[73.41364288 491.41128540]
[61.70497894 481.88186646]
[53.00245667 469.54620361]
[47.95185471 455.31967163]
[46.92796326 440.25799561]
[50.00675964 425.47882080]
[56.95978165 412.07891846]
[67.27106476 401.05258179]
[80.17544556 393.21807861]
[94.71533203 389.15673828]
[94.71533203 374.15673828]
[94.71533203 359.15673828]
[94.71533203 344.15673828]
[94.71533203 329.15673828]
[94.71533203 314.15673828]
[94.71533203 299.15673828]
[94.71533203 284.15673828]
[94.71533203 269.15673828]
[94.71533203 254.15675354]
[80.11108398 250.85253906]
[66.60186005 244.37805176]
[54.86656189 235.05508423]
[45.49575424 223.34869385]
[38.96191406 209.84397888]
[35.59562683 195.21684265]
[35.56885147 180.20014954]
[38.88615036 165.54699707]
[45.38428497 151.99301147]
[54.74025726 140.21934509]
[66.48736572 130.81846619]
[80.03845978 124.26438141]
[94.71533203 120.88867950]
[94.71533203 105.88867950]
[90.41313171 107.90591431]
[85.46843719 108.70654297]
[80.15674591 108.15634155]
[74.77729797 106.17722321]
[60.55052185 101.42340851]
[46.32374191 96.66959381]
[34.87807846 106.91128540]
[19.84171486 110.04232025]
[5.25935745 105.22044373]
[-4.94641209 93.74273682]
[-8.03029346 78.69663239]
[-3.16273808 64.12946320]
[8.34690571 53.95971680]
[23.40260315 50.92301559]
[37.95444489 55.83620834]
[48.08805847 67.37767029]
[51.07755661 82.44281006]
[65.30433655 87.19662476]
[79.53111267 91.95043945]
[66.92314148 83.82400513]
[63.01925659 69.34091949]
[69.83503723 55.97884369]
[83.85149384 50.63664246]
[97.83188629 56.07250595]
[104.55811310 69.47988892]
[100.55618286 83.93817139]
[108.01109314 70.92186737]
[115.46600342 57.90555573]
[110.45470428 45.36185074]
[113.55802155 32.41591263]
[123.41864014 23.76475716]
[136.27049255 22.41319466]
[143.99458313 9.55479240]
[151.71865845 -3.30360985]
[159.44274902 -16.16201210]
[146.13735962 -9.23620224]
[131.64062500 -5.38334799]
[116.65238953 -4.78945494]
[101.89624023 -7.48319530]
[88.08457947 -13.33452225]
[75.88419342 -22.06094933]
[65.88407898 -33.24118805]
[58.56702042 -46.33548355]
[54.28626251 -60.71168518]
[53.24846649 -75.67574310]
[55.50374222 -90.50522614]
[60.94320297 -104.48422241]
[69.30425262 -116.93785095]
[80.18323517 -127.26488495]
[93.05494690 -134.96676636]
[107.29797363 -139.67167664]
[122.22470856 -141.15246582]
[137.11451721 -139.33763123]
[151.24856567 -134.31481934]
[163.94448853 -126.32649231]
[174.58938599 -115.75831604]
[182.66932678 -103.12049103]
[187.79423523 -89.02313995]
[189.71670532 -74.14685059]
[188.34393311 -59.20980072]
[183.74215698 -44.93311310]
[176.13484192 -32.00771713]
[189.37742615 -39.05285263]
[202.62001038 -46.09798813]
[215.86259460 -53.14312363]
[224.08593750 -67.33145142]
[240.48237610 -67.03340912]
[248.18466187 -52.55560303]
[239.26933289 -38.79155350]
[222.90773010 -39.90053558]
[209.66514587 -32.85540009]
[196.42256165 -25.81026649]
[183.17997742 -18.76513290]
[172.30114746 -8.43792725]
[164.57705688 4.42047501]
[156.85298157 17.27887726]
[149.12889099 30.13727951]
[153.90307617 46.23277664]
[145.41940308 61.10931396]
[128.48231506 65.36046600]
[121.02740479 78.37677765]
[113.57249451 91.39308167]
[109.71533203 105.88867950]
[109.71533203 120.88867950]
[124.39220428 124.26438141]
[137.94331360 130.81846619]
[149.69041443 140.21934509]
[159.04638672 151.99301147]
[165.54452515 165.54699707]
[168.86181641 180.20014954]
[168.83503723 195.21684265]
[165.46875000 209.84397888]
[158.93492126 223.34869385]
[149.56410217 235.05508423]
[137.82881165 244.37805176]
[124.31958008 250.85253906]
[109.71533203 254.15675354]
[109.71533203 269.15673828]
[109.71533203 284.15673828]
[109.71533203 299.15673828]
[109.71533203 314.15673828]
[109.71533203 329.15673828]
[109.71533203 344.15673828]
[109.71533203 359.15673828]
[109.71533203 374.15673828]
[109.71533203 389.15673828]
[124.25521851 393.21807861]
[137.15960693 401.05258179]
[147.47088623 412.07891846]
[154.42390442 425.47882080]
[157.50270081 440.25799561]
[156.47882080 455.31967163]
[151.42820740 469.54620361]
[142.72569275 481.88186646]
[131.01702881 491.41128540]
[117.17108917 497.42730713]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 118]
[34 117]
[38 53]
[39 52]
[40 51]
[60 116]
[61 115]
[62 114]
[66 111]
[67 110]
[68 109]
[69 108]
[96 107]
[97 106]
[98 105]
[99 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
