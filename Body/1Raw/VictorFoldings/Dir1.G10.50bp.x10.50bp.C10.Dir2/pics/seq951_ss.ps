%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCCUUUGGGGGGGGGGCUAUUAGCUCUUAGUAAGAUUACACAUGCAAGCAUCCCCGUUCCAGUGAGxxxxxxxxxxCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCUAGCCCCCCCCCCCCUAGCCGUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 424.57470703]
[71.19830322 418.55868530]
[59.48964310 409.02926636]
[50.78712082 396.69360352]
[45.73651886 382.46707153]
[44.71262741 367.40539551]
[47.79142761 352.62625122]
[54.74444962 339.22631836]
[65.05573273 328.19998169]
[77.96011353 320.36547852]
[92.50000000 316.30416870]
[92.50000000 301.30416870]
[92.50000000 286.30416870]
[92.50000000 271.30416870]
[92.50000000 256.30416870]
[92.50000000 241.30415344]
[92.50000000 226.30415344]
[92.50000000 211.30415344]
[92.50000000 196.30415344]
[92.50000000 181.30415344]
[92.50000000 166.30415344]
[92.50000000 151.30415344]
[92.50000000 136.30415344]
[82.31977081 132.58299255]
[73.65102386 126.07629395]
[67.23485565 117.34033203]
[63.61978912 107.12194061]
[48.62060165 106.96590424]
[33.66035461 108.05721283]
[18.84259415 110.38832092]
[4.02483702 112.71942139]
[-10.79292107 115.05052948]
[-25.49997330 123.48491669]
[-37.67606354 111.68749237]
[-29.71036339 96.72139740]
[-13.12402534 100.23277283]
[1.69373310 97.90166473]
[16.51149178 95.57056427]
[31.32924843 93.23945618]
[18.93499184 84.79064941]
[13.72311306 70.72521973]
[17.61929893 56.24006271]
[29.18398857 46.68716049]
[44.14425659 45.59611511]
[56.97258377 53.37004852]
[62.92915726 67.13665009]
[59.81314087 81.80942535]
[48.77663803 91.96672058]
[63.77582550 92.12275696]
[73.92370605 73.65102386]
[92.50000000 63.69584274]
[92.50000000 48.69584274]
[79.15837097 43.61629868]
[68.38153076 34.29926300]
[61.45613861 21.88417244]
[59.19973755 7.87866116]
[61.86431885 -6.02448797]
[69.10834503 -18.15195084]
[80.04035950 -27.05125046]
[93.32869720 -31.66471672]
[93.64075470 -46.66147232]
[93.95280457 -61.65822601]
[93.95280457 -76.65822601]
[93.64075470 -91.65497589]
[93.32869720 -106.65173340]
[93.01663971 -121.64848328]
[78.58948517 -126.24586487]
[66.43828583 -135.28063965]
[57.88112259 -147.77278137]
[53.84620285 -162.36723328]
[54.77120590 -177.48091125]
[60.55579758 -191.47438049]
[70.57250977 -202.82974243]
[83.73480225 -210.31524658]
[98.61492157 -213.11894226]
[113.59879303 -210.93667603]
[127.06108093 -204.00517273]
[137.54148865 -193.07632446]
[143.90318298 -179.33558655]
[145.45608521 -164.27348328]
[142.03176880 -149.52381897]
[134.00166321 -136.68652344]
[122.23681641 -127.15409088]
[108.01338959 -121.96054077]
[108.32544708 -106.96379089]
[108.63750458 -91.96703339]
[108.94956207 -76.97028351]
[111.76235199 -73.03788757]
[112.09066010 -67.28258514]
[108.94956207 -61.34616852]
[108.63750458 -46.34941483]
[108.32544708 -31.35266113]
[122.90845490 -25.22723389]
[134.06074524 -13.95651340]
[140.06082153 0.76158875]
[139.96649170 16.69389343]
[133.76268005 31.41077995]
[122.36825562 42.65669632]
[107.50000000 48.69584274]
[107.50000000 63.69584274]
[125.52249146 73.11424255]
[135.86514282 90.62270355]
[150.84484863 89.84285736]
[165.82456970 89.06301117]
[170.53631592 74.63512421]
[180.14486694 62.88607788]
[193.35075378 55.40483093]
[208.36798096 53.20315933]
[223.16558838 56.57882690]
[235.74232483 65.07529449]
[244.39730835 77.54348755]
[247.95999146 92.29718781]
[245.94856262 107.34107971]
[238.63507080 120.64059448]
[227.00857544 130.39709473]
[212.64147949 135.29107666]
[197.47682190 134.66067505]
[183.56547546 128.59115601]
[172.78886414 117.90335083]
[166.60441589 104.04272461]
[151.62469482 104.82257080]
[136.64498901 105.60241699]
[134.76867676 112.86005402]
[131.47064209 119.59183502]
[126.88575745 125.52249146]
[121.20149231 130.40951538]
[114.65027618 134.05307007]
[107.50000000 136.30415344]
[107.50000000 151.30415344]
[107.50000000 166.30415344]
[107.50000000 181.30415344]
[107.50000000 196.30415344]
[107.50000000 211.30415344]
[107.50000000 226.30415344]
[107.50000000 241.30415344]
[107.50000000 256.30416870]
[107.50000000 271.30416870]
[107.50000000 286.30416870]
[107.50000000 301.30416870]
[107.50000000 316.30416870]
[122.03988647 320.36547852]
[134.94427490 328.19998169]
[145.25555420 339.22631836]
[152.20857239 352.62625122]
[155.28736877 367.40539551]
[154.26348877 382.46707153]
[149.21287537 396.69360352]
[140.51036072 409.02926636]
[128.80169678 418.55868530]
[114.95575714 424.57470703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 128]
[27 49]
[28 48]
[29 39]
[30 38]
[31 37]
[32 36]
[51 100]
[52 99]
[60 92]
[61 91]
[62 90]
[63 87]
[64 86]
[65 85]
[66 84]
[102 122]
[103 121]
[104 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
