%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAUCCCCGGGGGGGGGGCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAACxxxxxxxxxxUUGCAGCCCUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCACCCCCCCCCCAACAACCCCC\
) } def
/len { sequence length } bind def

/coor [
[74.06849670 461.02407837]
[60.22256088 455.00805664]
[48.51389694 445.47863770]
[39.81137466 433.14297485]
[34.76077271 418.91644287]
[33.73688126 403.85476685]
[36.81567764 389.07562256]
[43.76869965 375.67568970]
[54.07998657 364.64935303]
[66.98436737 356.81484985]
[81.52425385 352.75354004]
[81.52425385 337.75354004]
[81.52425385 322.75354004]
[81.52425385 307.75354004]
[81.52425385 292.75354004]
[81.52425385 277.75354004]
[81.52425385 262.75354004]
[81.52425385 247.75352478]
[81.52425385 232.75352478]
[81.52425385 217.75352478]
[69.38583374 209.16302490]
[64.57652283 194.90347290]
[69.13927460 180.37644958]
[81.52425385 171.21574402]
[73.78694916 158.48846436]
[81.52425385 144.68829346]
[81.52425385 129.68829346]
[80.49979401 144.65327454]
[71.24372101 156.45687866]
[56.95467758 161.02011108]
[42.57055664 156.76605225]
[33.06211853 145.16476440]
[31.71521568 130.22535706]
[38.99530411 117.11047363]
[52.38658142 110.35224915]
[67.26171112 112.28628540]
[52.55375290 109.34079742]
[37.84579086 106.39531708]
[23.13783073 103.44983673]
[8.42986870 100.50434875]
[-6.92410088 106.26522827]
[-19.41655540 95.64116669]
[-16.19632912 79.56129456]
[-0.57611394 74.56720734]
[11.37535095 85.79639435]
[26.08331299 88.74187469]
[40.79127502 91.68735504]
[55.49923706 94.63283539]
[70.20719910 97.57832336]
[75.46640778 86.93583679]
[83.97509003 79.90892029]
[93.81625366 77.22114563]
[103.06770325 78.71255493]
[110.25021362 65.54396820]
[117.43271637 52.37538910]
[124.61522675 39.20680618]
[117.08071899 16.15766525]
[135.94984436 -3.89203095]
[135.32586670 -18.87904739]
[134.70188904 -33.86606216]
[134.07791138 -48.85308075]
[125.77324677 -62.31944656]
[132.97441101 -75.35755920]
[132.35043335 -90.34457397]
[117.68898773 -93.98030853]
[104.64642334 -101.60056305]
[94.28005981 -112.58760834]
[87.43023682 -126.05076599]
[84.65225220 -140.89865112]
[86.17130280 -155.92759705]
[91.86423492 -169.91928101]
[101.26955414 -181.73945618]
[113.62481689 -190.42991638]
[127.92843628 -195.28616333]
[143.02087402 -195.91453552]
[157.67866516 -192.26408386]
[170.71356201 -184.63072205]
[181.06889343 -173.63327026]
[187.90518188 -160.16323853]
[190.66824341 -145.31257629]
[189.13410950 -130.28515625]
[183.42712402 -116.29920197]
[174.00993347 -104.48847961]
[161.64593506 -95.81043243]
[147.33744812 -90.96855164]
[147.96142578 -75.98153687]
[156.22146606 -63.58714294]
[149.06492615 -49.47705841]
[149.68890381 -34.49003983]
[150.31288147 -19.50302505]
[150.93685913 -4.51600838]
[163.54798889 3.60553384]
[177.45054626 -2.02642298]
[191.35310364 -7.65837955]
[205.25566101 -13.29033661]
[204.41415405 -28.40888786]
[208.52961731 -42.98083496]
[217.15565491 -55.42551804]
[229.35656738 -64.39303589]
[243.80889893 -68.91065979]
[258.94497681 -68.48834991]
[273.12292480 -63.17191315]
[284.80484009 -53.53804016]
[292.72354126 -40.63173676]
[296.02011108 -25.85298920]
[294.33691406 -10.80487919]
[287.85656738 2.88028383]
[277.28198242 13.71803570]
[263.76022339 20.53277969]
[248.75801086 22.58530235]
[233.90270996 19.65296173]
[220.80569458 12.05383492]
[210.88761902 0.61221975]
[196.98506165 6.24417639]
[183.08250427 11.87613297]
[169.17994690 17.50808907]
[165.58961487 35.11696243]
[152.95315552 45.84198761]
[137.78381348 46.38931274]
[130.60130310 59.55789566]
[123.41879272 72.72647858]
[116.23628235 85.89506531]
[122.72301483 112.00474548]
[96.52425385 129.68829346]
[96.52425385 144.68829346]
[104.26155090 158.48846436]
[96.52425385 171.21574402]
[108.90923309 180.37644958]
[113.47197723 194.90347290]
[108.66267395 209.16302490]
[96.52425385 217.75352478]
[96.52425385 232.75352478]
[96.52425385 247.75352478]
[96.52425385 262.75354004]
[96.52425385 277.75354004]
[96.52425385 292.75354004]
[96.52425385 307.75354004]
[96.52425385 322.75354004]
[96.52425385 337.75354004]
[96.52425385 352.75354004]
[111.06414032 356.81484985]
[123.96852112 364.64935303]
[134.27980042 375.67568970]
[141.23283386 389.07562256]
[144.31163025 403.85476685]
[143.28773499 418.91644287]
[138.23713684 433.14297485]
[129.53460693 445.47863770]
[117.82594299 455.00805664]
[103.98001099 461.02407837]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 127]
[26 125]
[27 124]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[53 122]
[54 121]
[55 120]
[56 119]
[58 91]
[59 90]
[60 89]
[61 88]
[63 86]
[64 85]
[92 116]
[93 115]
[94 114]
[95 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
