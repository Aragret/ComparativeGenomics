%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCCCCUAUGGGGGGGGGGUCUCAGGCUACACCCUAGACCAAACCUACGCCAAAAUCCAUUUCACUAUCxxxxxxxxxxCCCAUCGUCCUAGAAUUAAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUCCCCCCCCCCAUUUACCCUAU\
) } def
/len { sequence length } bind def

/coor [
[90.25257874 347.63552856]
[77.33341980 339.87716675]
[66.55212402 329.34814453]
[58.49010468 316.61627197]
[53.58214569 302.36816406]
[52.09292221 287.37219238]
[54.10274506 272.43710327]
[59.50323105 258.36828613]
[68.00313568 245.92448425]
[79.14406586 235.77676392]
[92.32521820 228.47236633]
[106.83573151 224.40524292]
[106.21990967 209.41789246]
[105.60408020 194.43052673]
[104.98825836 179.44317627]
[104.37243652 164.45582581]
[103.75660706 149.46847534]
[103.14078522 134.48112488]
[102.52495575 119.49376678]
[90.28200531 110.82715607]
[75.94194031 115.22745514]
[61.60187912 119.62776184]
[47.26181793 124.02806091]
[32.92175674 128.42835999]
[25.47439957 142.10954285]
[10.86885357 146.36778259]
[-2.12816191 139.18354797]
[-16.46822357 143.58386230]
[-25.22543716 157.02598572]
[-41.20808411 158.41685486]
[-52.15564728 146.68951416]
[-49.67008972 130.84017944]
[-35.65811920 123.02709198]
[-20.86852455 129.24378967]
[-6.52846241 124.84349060]
[0.20201369 111.60581207]
[14.68219090 106.93900299]
[28.52145767 114.08829498]
[42.86151886 109.68799591]
[57.20158005 105.28769684]
[71.54164124 100.88739777]
[85.88170624 96.48709869]
[71.46405029 92.34811401]
[63.54379272 79.60960388]
[66.21018219 64.84849548]
[78.08655548 55.68597794]
[93.04111481 56.85267639]
[103.35278320 67.74622345]
[103.69693756 82.74419403]
[111.59342194 69.99093628]
[119.48990631 57.23767853]
[113.46225739 48.34037018]
[110.77957916 37.97341537]
[111.72805786 27.34563828]
[116.17200470 17.68735886]
[123.57258606 10.10797596]
[133.05303955 5.46854115]
[143.50247192 4.28398609]
[153.70605469 6.66608238]
[162.62220764 -5.39634943]
[171.41404724 -17.54968262]
[180.08065796 -29.79263687]
[188.74726868 -42.03559113]
[197.41387939 -54.27854156]
[206.08047485 -66.52149963]
[214.74708557 -78.76445007]
[203.62356567 -88.85527039]
[193.79750061 -100.21333313]
[185.41217041 -112.67301941]
[178.58985901 -126.05261230]
[173.43006897 -140.15699768]
[170.00804138 -154.78051758]
[168.37367249 -169.70988464]
[168.55081177 -184.72741699]
[170.53684998 -199.61408997]
[174.30284119 -214.15281677]
[179.79386902 -228.13157654]
[186.92985535 -241.34654236]
[195.60673523 -253.60496521]
[205.69796753 -264.72811890]
[217.05641174 -274.55377197]
[229.51640320 -282.93862915]
[242.89624023 -289.76043701]
[257.00082397 -294.91967773]
[271.62448120 -298.34118652]
[286.55389404 -299.97497559]
[301.57141113 -299.79730225]
[316.45800781 -297.81069946]
[330.99661255 -294.04415894]
[344.97515869 -288.55261230]
[358.18984985 -281.41613770]
[370.44796753 -272.73880005]
[381.57073975 -262.64712524]
[391.39596558 -251.28833008]
[399.78036499 -238.82803345]
[406.60165405 -225.44792175]
[411.76040649 -211.34313965]
[415.18133545 -196.71937561]
[416.81457520 -181.78988647]
[416.63632202 -166.77236938]
[414.64916992 -151.88584900]
[410.88208008 -137.34739685]
[405.39001465 -123.36904144]
[398.25305176 -110.15461731]
[389.57525635 -97.89683533]
[379.48318481 -86.77444458]
[368.12402344 -76.94964600]
[355.66339111 -68.56571960]
[342.28302002 -61.74491501]
[328.17807007 -56.58670807]
[313.55416870 -53.16632080]
[298.62460327 -51.53362656]
[283.60711670 -51.71244049]
[268.72067261 -53.70015717]
[254.18235779 -57.46778107]
[240.20419312 -62.96037674]
[226.99003601 -70.09784698]
[218.32344055 -57.85488892]
[209.65682983 -45.61193466]
[200.99021912 -33.36898041]
[192.32360840 -21.12602806]
[183.65701294 -8.88307476]
[182.35128784 -1.56137514]
[174.68464661 3.51980162]
[165.76849365 15.58223343]
[172.94184875 33.70524216]
[167.77122498 52.64583588]
[152.15908813 64.78521729]
[132.24316406 65.13416290]
[124.34667969 77.88742065]
[116.45019531 90.64067841]
[117.51230621 118.87793732]
[118.12813568 133.86529541]
[118.74395752 148.85264587]
[119.35978699 163.83999634]
[119.97560883 178.82734680]
[120.59143829 193.81471252]
[121.20726013 208.80206299]
[121.82308960 223.78941345]
[136.61836243 226.65237427]
[150.35433960 232.85075378]
[162.29023743 242.05026245]
[171.78239441 253.75477600]
[178.31887817 267.33309937]
[181.54722595 282.05297852]
[181.29330444 297.12057495]
[177.57081604 311.72329712]
[170.58050537 325.07366943]
[160.69937134 336.45169067]
[148.46026611 345.24380493]
[134.52323914 350.97583008]
[119.63989258 353.33862305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 42]
[21 41]
[22 40]
[23 39]
[24 38]
[27 35]
[28 34]
[49 131]
[50 130]
[51 129]
[59 125]
[60 124]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
