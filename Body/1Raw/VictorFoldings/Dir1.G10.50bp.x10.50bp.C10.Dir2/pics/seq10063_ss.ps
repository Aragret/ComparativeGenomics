%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUCCUAUUCUGGGGGGGGGGACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCACxxxxxxxxxxUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCCCCCCCCCCCACCUCCUAUUCU\
) } def
/len { sequence length } bind def

/coor [
[84.18363190 431.65313721]
[70.97555542 424.41705322]
[59.63211060 414.51046753]
[50.68385696 402.39672852]
[44.54932022 388.64239502]
[41.51541901 373.89080811]
[41.72406387 358.83190918]
[45.16548538 344.17004395]
[51.67873001 330.59094238]
[60.95915604 318.72976685]
[72.57270813 309.14123535]
[85.97618866 302.27386475]
[100.54270172 298.44885254]
[99.93481445 283.46118164]
[99.32693481 268.47351074]
[98.71904755 253.48582458]
[98.11116791 238.49815369]
[97.50328064 223.51046753]
[96.89540100 208.52279663]
[96.28751373 193.53511047]
[95.67963409 178.54743958]
[95.07174683 163.55975342]
[94.46386719 148.57208252]
[85.23065948 146.60217285]
[76.54828644 142.89421082]
[68.74055481 137.58647156]
[62.09867096 130.87693787]
[56.87033463 123.01582336]
[53.25054932 114.29631805]
[51.37430954 105.04362488]
[36.39356232 104.28388214]
[21.41281509 103.52414703]
[6.43206644 102.76441193]
[-8.54868126 102.00466919]
[-23.52942848 101.24493408]
[-32.43294907 113.84378052]
[-46.74307251 119.60780334]
[-61.89348221 116.69773102]
[-73.04975128 106.04215240]
[-76.65193939 91.04122925]
[-71.55061340 76.48169708]
[-59.37358093 67.00944519]
[-44.00649261 65.64704895]
[-30.35292816 72.82923126]
[-22.76969147 86.26419067]
[-7.78894329 87.02392578]
[7.19180393 87.78366089]
[22.17255211 88.54340363]
[37.15330124 89.30313873]
[52.13404846 90.06287384]
[57.28487396 76.22367096]
[66.33303833 64.55381775]
[78.45298004 56.11809158]
[92.53887939 51.68615341]
[107.30553436 51.66238403]
[111.79598236 37.35029602]
[116.28643036 23.03820801]
[113.03523254 7.55465841]
[124.22776794 -2.27266884]
[128.71821594 -16.58475685]
[133.20866394 -30.89684677]
[137.69911194 -45.20893478]
[124.09200287 -51.57526016]
[111.45488739 -59.69848251]
[100.01329041 -69.43363953]
[89.97139740 -80.60699463]
[81.50841522 -93.01914215]
[74.77538300 -106.44857788]
[69.89245605 -120.65563202]
[66.94677734 -135.38676453]
[65.99091339 -150.37908936]
[67.04192352 -165.36505127]
[70.08105469 -180.07719421]
[75.05406952 -194.25296021]
[81.87220764 -207.63938904]
[90.41380310 -219.99757385]
[100.52642059 -231.10694885]
[112.02958679 -240.76928711]
[124.71800995 -248.81213379]
[138.36524963 -255.09194946]
[152.72776794 -259.49667358]
[167.54924011 -261.94769287]
[182.56515503 -262.40127563]
[197.50753784 -260.84933472]
[212.10972595 -257.31954956]
[226.11112976 -251.87489319]
[239.26187134 -244.61257935]
[251.32727051 -235.66217041]
[262.09201050 -225.18342590]
[271.36395264 -213.36334229]
[278.97763062 -200.41285706]
[284.79721069 -186.56309509]
[288.71881104 -172.06121826]
[290.67242432 -157.16601562]
[290.62322998 -142.14334106]
[288.57208252 -127.26126099]
[284.55557251 -112.78537750]
[278.64538574 -98.97402954]
[270.94702148 -86.07369995]
[261.59786987 -74.31459808]
[250.76472473 -63.90659332]
[238.64094543 -55.03542328]
[225.44291687 -47.85940170]
[211.40614319 -42.50659180]
[196.78114319 -39.07252884]
[181.82891846 -37.61848831]
[166.81629944 -38.17042542]
[152.01119995 -40.71848679]
[147.52075195 -26.40639877]
[143.03030396 -12.09431076]
[138.53985596 2.21777797]
[142.11224365 16.67762947]
[130.59852600 27.52865410]
[126.10807037 41.84074402]
[121.61762238 56.15283203]
[141.74722290 74.56253052]
[148.87841797 100.89243317]
[163.65635681 103.46388245]
[178.85925293 97.31539154]
[191.61718750 107.61914062]
[188.80587769 123.77552032]
[173.31736755 129.16423035]
[161.08491516 118.24182892]
[146.30696106 115.67037964]
[142.87162781 123.49295044]
[138.12687683 130.59799194]
[132.21762085 136.76846313]
[125.32435608 141.81594849]
[117.65760803 145.58624268]
[109.45153809 147.96420288]
[110.05942535 162.95187378]
[110.66730499 177.93955994]
[111.27519226 192.92723083]
[111.88307953 207.91490173]
[112.49095917 222.90258789]
[113.09884644 237.89025879]
[113.70672607 252.87794495]
[114.31461334 267.86563110]
[114.92249298 282.85330200]
[115.53038025 297.84097290]
[130.35881042 300.47375488]
[144.27441406 306.23309326]
[156.62634277 314.84960938]
[166.83686829 325.92025757]
[174.42840576 338.92727661]
[179.04591370 353.26229858]
[180.47340393 368.25482178]
[178.64413452 383.20367432]
[173.64363098 397.40960693]
[165.70579529 410.20825195]
[155.20188904 421.00094604]
[142.62319946 429.28289795]
[128.55805969 434.66674805]
[113.66432190 436.90069580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[35 45]
[55 115]
[56 114]
[57 113]
[59 111]
[60 110]
[61 109]
[62 108]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
