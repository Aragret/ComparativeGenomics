%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCACCAUCGGGGGGGGGGAUAGCCACCAUCACCCUCCUUAACCUCUACUUCUACCUACGCCUAAUCUAxxxxxxxxxxCAAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCCCCCCCCCCCACAAUC\
) } def
/len { sequence length } bind def

/coor [
[96.32131958 375.84185791]
[83.10112000 368.56936646]
[72.21431732 358.12237549]
[64.40318298 345.21313477]
[60.20030594 330.72180176]
[59.89223480 315.63647461]
[63.49997330 300.98565674]
[70.77754974 287.76824951]
[81.22875214 276.88549805]
[94.14101410 269.07934570]
[108.63395691 264.88204956]
[108.32189941 249.88531494]
[108.00984192 234.88854980]
[107.69778442 219.89179993]
[107.38572693 204.89505005]
[107.07366943 189.89830017]
[106.76161957 174.90153503]
[106.44956207 159.90478516]
[106.13750458 144.90803528]
[105.82544708 129.91128540]
[87.08823395 124.34052277]
[77.34046173 109.66068268]
[62.40615082 111.06298065]
[47.47184372 112.46528625]
[44.95680237 127.34268188]
[38.67602158 141.06179810]
[29.05773354 152.68725586]
[16.75773430 161.42637634]
[2.61465406 166.68334961]
[-12.40720654 168.09971619]
[-27.28363228 165.57893372]
[-41.00032425 159.29286194]
[-52.62205505 149.67008972]
[-61.35643768 137.36671448]
[-66.60794067 123.22160339]
[-68.01851654 108.19919586]
[-65.49198914 93.32374573]
[-59.20061493 79.60948181]
[-49.57335281 67.99147034]
[-37.26660919 59.26183701]
[-23.11947441 54.01579285]
[-8.09652519 52.61101532]
[6.77794981 55.14329147]
[20.48978424 61.43996048]
[32.10408020 71.07170105]
[40.82895660 83.38182068]
[46.06953812 97.53097534]
[61.00384903 96.12867737]
[75.93815613 94.72637177]
[80.62757874 84.78511810]
[89.17432404 77.87335968]
[86.99748993 63.03215408]
[84.82064819 48.19094849]
[82.64381409 33.34974289]
[67.61124420 32.98917007]
[52.85588455 30.09309959]
[38.80225754 24.74485970]
[25.85472679 17.09833145]
[14.38581276 7.37351608]
[4.72549963 -4.14978075]
[-2.84826469 -17.14001083]
[-8.11756897 -31.22342110]
[-10.93080425 -45.99480438]
[-11.20702934 -61.02915573]
[-8.93829536 -75.89390564]
[-4.18987799 -90.16136932]
[2.90160012 -103.42104340]
[12.13210392 -115.29141998]
[23.23605156 -125.43096161]
[35.89396286 -133.54794312]
[49.74164200 -139.40879822]
[64.38066864 -142.84494019]
[79.38983917 -143.75746155]
[94.33731842 -142.12013245]
[108.79303741 -137.98005676]
[122.34107208 -131.45634460]
[134.59162903 -122.73670959]
[145.19221497 -112.07202148]
[153.83784485 -99.76912689]
[160.27975464 -86.18201447]
[164.33261108 -71.70159912]
[165.87980652 -56.74452591]
[164.87681580 -41.74112320]
[161.35250854 -27.12307930]
[155.40826416 -13.31098175]
[147.21513367 -0.70223254]
[137.00883484 10.34039021]
[125.08303070 19.49916649]
[111.78084564 26.51058388]
[97.48501587 31.17290497]
[99.66185760 46.01411057]
[101.83869171 60.85531616]
[104.01552582 75.69651794]
[122.03822327 83.46241760]
[130.25582886 103.63384247]
[145.23554993 102.85399628]
[160.21527100 102.07415009]
[175.17550659 100.98284149]
[190.10981750 99.58053589]
[205.04412842 98.17823792]
[219.97843933 96.77593231]
[234.91275024 95.37362671]
[249.84704590 93.97132111]
[264.76596069 92.41374207]
[279.66787720 90.70104980]
[294.56976318 88.98836517]
[309.47167969 87.27567291]
[319.10037231 74.74317932]
[334.78134155 72.77275085]
[347.21136475 82.53342438]
[349.01586914 98.23435974]
[339.12432861 110.56046295]
[323.40521240 112.19888306]
[311.18435669 102.17757416]
[296.28247070 103.89026642]
[281.38055420 105.60295868]
[266.47866821 107.31564331]
[260.15176392 111.22921753]
[251.24935913 108.90563202]
[236.31504822 110.30793762]
[221.38073730 111.71023560]
[206.44642639 113.11254120]
[191.51213074 114.51484680]
[176.57781982 115.91715240]
[172.86048889 119.00858307]
[167.14431763 119.75473785]
[160.99510193 117.05386353]
[146.01539612 117.83370972]
[131.03567505 118.61355591]
[120.82220459 129.59922791]
[121.13425446 144.59597778]
[121.44631195 159.59272766]
[121.75836945 174.58947754]
[122.07042694 189.58624268]
[122.38248444 204.58299255]
[122.69454193 219.57974243]
[123.00659180 234.57649231]
[123.31864929 249.57325745]
[123.63070679 264.57000732]
[138.28570557 268.16076660]
[151.51150513 275.42303467]
[162.40637207 285.86163330]
[170.22747803 298.76483154]
[174.44154358 313.25289917]
[174.76126099 328.33801270]
[171.16484070 342.99160767]
[163.89747620 356.21459961]
[153.45468140 367.10543823]
[140.54844666 374.92156982]
[126.05875397 379.13003540]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 49]
[23 48]
[24 47]
[51 93]
[52 92]
[53 91]
[54 90]
[95 129]
[96 128]
[97 127]
[98 124]
[99 123]
[100 122]
[101 121]
[102 120]
[103 119]
[104 117]
[105 116]
[106 115]
[107 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
