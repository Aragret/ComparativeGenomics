%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUACUUCUACCGGGGGGGGGGUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACxxxxxxxxxxACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAACCCCCCCCCCUCUACUUCUCCC\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 387.04406738]
[70.87159729 381.88906860]
[58.28185654 373.60684204]
[47.94191742 362.64407349]
[40.40940475 349.59194946]
[36.09054184 335.15435791]
[35.21823120 320.10989380]
[37.83952332 305.26989746]
[43.81304932 291.43466187]
[52.81666565 279.35031128]
[64.36482239 269.66854858]
[77.83473969 262.91146851]
[92.50000000 259.44348145]
[92.50000000 244.44348145]
[92.50000000 229.44348145]
[92.50000000 214.44348145]
[92.50000000 199.44348145]
[92.50000000 184.44348145]
[92.50000000 169.44348145]
[92.50000000 154.44348145]
[92.50000000 139.44348145]
[92.50000000 124.44348907]
[92.50000000 109.44348907]
[92.19599915 94.44657135]
[83.90579224 80.97129059]
[91.12095642 67.94091797]
[90.51306915 52.95323944]
[89.90518951 37.96556091]
[74.90416718 37.61197281]
[59.95662308 36.29798889]
[45.12397385 34.02901077]
[30.46717834 30.81435585]
[16.04646111 26.66724205]
[1.92107975 21.60470581]
[-11.85091972 15.64755058]
[-25.21294594 8.82025814]
[-38.11009216 1.15088224]
[-50.48935699 -7.32906199]
[-62.29987335 -16.58472824]
[-73.49311066 -26.57808304]
[-84.02307129 -37.26805878]
[-93.84648132 -48.61073303]
[-102.92298126 -60.55949020]
[-111.21527100 -73.06523132]
[-118.68927002 -86.07657623]
[-125.31427765 -99.54004669]
[-131.06306458 -113.40031433]
[-135.91198730 -127.60044098]
[-139.84115601 -142.08206177]
[-142.83441162 -156.78567505]
[-144.87944031 -171.65084839]
[-145.96784973 -186.61651611]
[-146.09516907 -201.62115479]
[-145.26086426 -216.60313416]
[-143.46838379 -231.50086975]
[-140.72508240 -246.25315857]
[-137.04222107 -260.79937744]
[-132.43495178 -275.07974243]
[-126.92219543 -289.03555298]
[-120.52660370 -302.60952759]
[-113.27447510 -315.74581909]
[-105.19559479 -328.39047241]
[-96.32316589 -340.49151611]
[-86.69364166 -351.99926758]
[-76.34659576 -362.86639404]
[-65.32455444 -373.04824829]
[-53.67279816 -382.50299072]
[-41.43921661 -391.19177246]
[-28.67407036 -399.07891846]
[-15.42982292 -406.13195801]
[-1.76089454 -412.32196045]
[12.27654552 -417.62347412]
[26.62481308 -422.01467896]
[41.22494888 -425.47760010]
[56.01695633 -427.99795532]
[70.94005585 -429.56539917]
[85.93291473 -430.17349243]
[100.93392944 -429.81973267]
[115.88146210 -428.50558472]
[130.71408081 -426.23645020]
[145.37084961 -423.02160645]
[159.79151917 -418.87435913]
[173.91683960 -413.81164551]
[187.68878174 -407.85433960]
[201.05072021 -401.02691650]
[213.94778442 -393.35739136]
[226.32695007 -384.87728882]
[238.13737488 -375.62152100]
[249.33049011 -365.62802124]
[259.86035156 -354.93792725]
[269.68362427 -343.59515381]
[278.75997925 -331.64630127]
[287.05215454 -319.14047241]
[294.52600098 -306.12902832]
[301.15084839 -292.66549683]
[306.89947510 -278.80514526]
[311.74826050 -264.60498047]
[315.67727661 -250.12332153]
[318.67034912 -235.41967773]
[320.71520996 -220.55447388]
[321.80346680 -205.58879089]
[321.93060303 -190.58415222]
[321.09616089 -175.60218811]
[319.30349731 -160.70446777]
[316.56002808 -145.95220947]
[312.87701416 -131.40603638]
[308.26959229 -117.12572479]
[302.75668335 -103.16996002]
[296.36093140 -89.59607697]
[289.10864258 -76.45986176]
[281.02963257 -63.81529617]
[272.15707397 -51.71433258]
[262.52740479 -40.20670319]
[252.18025208 -29.33969498]
[241.15809631 -19.15796089]
[229.50624084 -9.70334148]
[217.27255249 -1.01468635]
[204.50732422 6.87229919]
[191.26300049 13.92520523]
[177.59400940 20.11505127]
[163.55650330 25.41640091]
[149.20819092 29.80746841]
[134.60801697 33.27021027]
[119.81597900 35.79040146]
[104.89286804 37.35767746]
[105.50074768 52.34535599]
[106.10863495 67.33303070]
[114.35535431 79.73628998]
[107.18367004 93.83868408]
[110.17536926 98.22443390]
[110.46311951 103.97929382]
[107.50000000 109.44348907]
[107.50000000 124.44348907]
[107.50000000 139.44348145]
[107.50000000 154.44348145]
[107.50000000 169.44348145]
[107.50000000 184.44348145]
[107.50000000 199.44348145]
[107.50000000 214.44348145]
[107.50000000 229.44348145]
[107.50000000 244.44348145]
[107.50000000 259.44348145]
[122.16526031 262.91146851]
[135.63517761 269.66854858]
[147.18333435 279.35031128]
[156.18695068 291.43466187]
[162.16047668 305.26989746]
[164.78176880 320.10989380]
[163.90945435 335.15435791]
[159.59059143 349.59194946]
[152.05809021 362.64407349]
[141.71813965 373.60684204]
[129.12840271 381.88906860]
[114.96779633 387.04406738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 129]
[26 127]
[27 126]
[28 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
