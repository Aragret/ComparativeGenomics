%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUGCAAGGAGGGGGGGGGGGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAxxxxxxxxxxUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCUUCCCCCCCCCCUUUCCAAGGA\
) } def
/len { sequence length } bind def

/coor [
[57.87820816 686.71197510]
[43.38851929 682.50354004]
[30.48228836 674.68743896]
[20.03948784 663.79656982]
[12.77212429 650.57354736]
[9.17569828 635.91998291]
[9.49541950 620.83483887]
[13.70948982 606.34680176]
[21.53058815 593.44360352]
[32.42545700 583.00500488]
[45.65126419 575.74273682]
[60.30625534 572.15197754]
[60.61831284 557.15521240]
[60.93037033 542.15844727]
[61.24242401 527.16168213]
[61.55448151 512.16497803]
[61.86653900 497.16821289]
[62.17859268 482.17144775]
[62.49065018 467.17468262]
[62.80270767 452.17794800]
[63.11476135 437.18118286]
[63.42681885 422.18444824]
[50.75656891 430.21343994]
[36.51125336 425.51544189]
[31.10305214 411.52432251]
[38.48491669 398.46646118]
[53.26130295 395.88607788]
[64.63159943 405.66864014]
[66.49921417 390.78533936]
[52.16852570 384.70626831]
[40.11154556 374.83691406]
[31.30454826 361.96585083]
[26.46360207 347.12521362]
[25.98635292 331.50778198]
[29.91938019 316.37121582]
[37.95378113 302.93667603]
[49.44942856 292.29043579]
[63.48594666 285.29595947]
[78.93640900 282.52386475]
[80.49399567 267.60498047]
[82.05157471 252.68605042]
[69.68584442 239.25154114]
[71.02435303 220.72302246]
[85.68542480 208.80445862]
[86.62104797 193.83366394]
[79.69268036 180.64855957]
[88.27570343 167.35787964]
[89.21133423 152.38708496]
[90.14696503 137.41629028]
[91.08259583 122.44550323]
[70.55611420 106.79965973]
[73.17271423 75.56757355]
[64.40650940 63.39573669]
[55.64030075 51.22389984]
[46.87409592 39.05206299]
[31.60105705 40.67374039]
[17.56989479 34.42697525]
[8.55492496 21.99210930]
[6.98112679 6.71406174]
[13.27184391 -7.29744959]
[25.73490715 -16.27339935]
[41.01781082 -17.79929924]
[55.00953674 -11.46469402]
[63.94637299 1.02644217]
[65.42436218 16.31405640]
[59.04593277 30.28585434]
[67.81214142 42.45769119]
[76.57834625 54.62952805]
[85.34455109 66.80136871]
[92.84414673 66.87938690]
[90.98656464 51.99484634]
[89.12898254 37.11031342]
[80.49976349 24.84098053]
[82.27217865 9.94606304]
[93.53963470 0.04432743]
[108.53882599 0.20052090]
[119.59764099 10.33475018]
[121.05948639 25.26334763]
[112.17700195 37.35008240]
[110.01016998 52.19274902]
[107.84333801 67.03542328]
[115.34293365 67.11344147]
[124.36045837 55.12660599]
[133.37799072 43.13977432]
[142.39552307 31.15294075]
[144.50869751 15.47349453]
[158.34298706 9.95427132]
[167.36051941 -2.03256083]
[166.54765320 -18.05500793]
[178.66264343 -28.57197762]
[194.41189575 -25.51575089]
[201.71394348 -11.23080254]
[194.96726990 3.32467651]
[179.34735107 6.98496914]
[170.32981873 18.97180176]
[168.86163330 33.79386902]
[154.38235474 40.17047119]
[145.36482239 52.15730286]
[136.34729004 64.14413452]
[127.32976532 76.13096619]
[132.52816772 93.09864044]
[128.87115479 108.92380524]
[118.77152252 119.66412354]
[106.05338287 123.38113403]
[105.11775208 138.35192871]
[104.18212891 153.32272339]
[103.24649811 168.29350281]
[110.10794067 182.54942322]
[101.59184265 194.76930237]
[100.65621185 209.74008179]
[110.16313171 217.00585938]
[114.90567017 227.86022949]
[113.80072784 239.53297424]
[107.24166107 249.10618591]
[96.97048950 254.24363708]
[95.41290283 269.16253662]
[93.85532379 284.08145142]
[107.33794403 289.38055420]
[118.97248077 297.99142456]
[127.96461487 309.31835938]
[133.70249939 322.58041382]
[135.79835510 336.86547852]
[134.11463928 351.19268799]
[128.77313232 364.58004761]
[120.14608765 376.11163330]
[108.83032227 385.00018311]
[95.60592651 390.64102173]
[81.38249969 392.65295410]
[79.51488495 407.53625488]
[78.42356873 422.49649048]
[78.11151886 437.49325562]
[77.79946136 452.48999023]
[77.48740387 467.48675537]
[77.17534637 482.48352051]
[76.86328888 497.48025513]
[76.55123138 512.47698975]
[76.23918152 527.47375488]
[75.92712402 542.47052002]
[75.61506653 557.46728516]
[75.30300903 572.46405029]
[89.79594421 576.66131592]
[102.70820618 584.46746826]
[113.15941620 595.35021973]
[120.43698883 608.56762695]
[124.04473114 623.21844482]
[123.73665619 638.30377197]
[119.53377533 652.79510498]
[111.72264862 665.70434570]
[100.83584595 676.15136719]
[87.61564636 683.42382812]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[28 129]
[29 128]
[39 117]
[40 116]
[41 115]
[44 110]
[45 109]
[47 107]
[48 106]
[49 105]
[50 104]
[52 69]
[53 68]
[54 67]
[55 66]
[82 100]
[83 99]
[84 98]
[85 97]
[87 95]
[88 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
