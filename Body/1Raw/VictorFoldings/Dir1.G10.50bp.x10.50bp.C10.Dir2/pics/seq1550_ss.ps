%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCACCACGGGGGGGGGGCUCUUGCUCAGCCUAUAUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUxxxxxxxxxxCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACCCCCCCCCCCACCCUCACCAC\
) } def
/len { sequence length } bind def

/coor [
[107.88146973 476.89422607]
[93.72086334 471.73922729]
[81.13111877 463.45700073]
[70.79118347 452.49423218]
[63.25867462 439.44210815]
[58.93980789 425.00451660]
[58.06749725 409.96005249]
[60.68878937 395.12005615]
[66.66231537 381.28482056]
[75.66593170 369.20046997]
[87.21408844 359.51867676]
[100.68400574 352.76159668]
[115.34926605 349.29364014]
[115.34926605 334.29364014]
[115.34926605 319.29364014]
[115.34926605 304.29364014]
[115.34926605 289.29364014]
[115.34926605 274.29364014]
[115.34926605 259.29364014]
[115.34926605 244.29364014]
[115.34926605 229.29364014]
[115.34926605 214.29364014]
[99.83655548 205.10385132]
[92.12198639 188.65956116]
[95.01323700 170.59194946]
[107.65730286 157.18188477]
[103.75055695 142.69958496]
[99.84380341 128.21726990]
[83.00212860 124.54385376]
[70.58109283 111.23870087]
[67.78263092 92.27754211]
[76.67607880 74.21693420]
[63.78821945 66.54209900]
[50.90036392 58.86725616]
[38.01250458 51.19241714]
[25.12464905 43.51757812]
[30.86892128 57.37410736]
[29.64040947 72.32371521]
[21.71110153 85.05658722]
[8.83653355 92.75369263]
[-6.13289261 93.71091461]
[-19.88297653 87.71631622]
[-29.36947632 76.09709167]
[-32.49209976 61.42572021]
[-28.55950356 46.95040894]
[-18.44235802 35.87596130]
[-4.38057947 30.65423965]
[10.51091099 32.44070053]
[-0.36098063 22.10619736]
[-15.69398975 18.20627594]
[-19.58788109 3.82966638]
[-30.45977211 -6.50483751]
[-41.33166504 -16.83934212]
[-52.20355606 -27.17384529]
[-67.99443817 -26.52297783]
[-79.56375122 -37.28989410]
[-80.04763031 -53.08677292]
[-69.15900421 -64.54161072]
[-53.35788727 -64.85844421]
[-42.01881409 -53.84931564]
[-41.86905289 -38.04573822]
[-30.99715996 -27.71123314]
[-20.12526894 -17.37672997]
[-9.25337696 -7.04222536]
[5.30200195 -3.88149571]
[9.97352314 11.23430634]
[20.84541512 21.56880951]
[32.79948807 30.62972260]
[45.68734360 38.30456161]
[58.57520294 45.97940063]
[71.46305847 53.65423965]
[84.35091400 61.32907867]
[76.72026825 48.41500473]
[64.61817932 39.55276108]
[57.39109039 26.40859222]
[56.39128876 11.44194984]
[61.80585861 -2.54670501]
[72.62165070 -12.93990421]
[86.81488800 -17.79294014]
[101.72982788 -16.19774246]
[114.57567596 -8.45279598]
[122.94879913 3.99271536]
[125.28247833 18.81006813]
[121.14005280 33.22673416]
[111.29761505 44.54441833]
[106.71125793 58.82606125]
[117.58314514 48.49155807]
[128.45504761 38.15705490]
[139.32693481 27.82255173]
[140.44445801 14.93434238]
[149.76190186 6.54922295]
[161.89309692 6.77763081]
[172.97221375 -3.33441043]
[184.05131531 -13.44645119]
[195.13041687 -23.55849266]
[197.29522705 -39.45481873]
[211.14646912 -47.54943085]
[226.05865479 -41.63283157]
[230.59243774 -26.24373436]
[221.26988220 -13.18733406]
[205.24246216 -12.47938442]
[194.16336060 -2.36734366]
[183.08424377 7.74469709]
[172.00514221 17.85673904]
[167.63717651 34.82756424]
[149.66143799 38.69444275]
[138.78955078 49.02894592]
[127.91765594 59.36344910]
[117.04576111 69.69795227]
[126.85502625 80.04482269]
[131.37466431 92.99331665]
[130.22523499 106.11488342]
[124.04991150 117.13135529]
[114.32611084 124.31051636]
[118.23286438 138.79283142]
[122.13961792 153.27513123]
[135.21609497 156.04896545]
[145.86692810 163.96531677]
[152.19976807 175.51708984]
[153.13159180 188.56079102]
[167.08940125 194.05436707]
[181.04721069 199.54795837]
[195.00502014 205.04154968]
[211.13439941 202.07923889]
[221.55703735 214.74023438]
[215.55102539 229.99996948]
[199.29483032 232.16056824]
[189.51142883 218.99935913]
[175.55361938 213.50576782]
[161.59580994 208.01217651]
[147.63800049 202.51860046]
[140.03366089 209.93313599]
[130.34927368 214.29364014]
[130.34927368 229.29364014]
[130.34927368 244.29364014]
[130.34927368 259.29364014]
[130.34927368 274.29364014]
[130.34927368 289.29364014]
[130.34927368 304.29364014]
[130.34927368 319.29364014]
[130.34927368 334.29364014]
[130.34927368 349.29364014]
[145.01452637 352.76159668]
[158.48445129 359.51867676]
[170.03260803 369.20046997]
[179.03622437 381.28482056]
[185.00975037 395.12005615]
[187.63104248 409.96005249]
[186.75872803 425.00451660]
[182.43986511 439.44210815]
[174.90734863 452.49423218]
[164.56741333 463.45700073]
[151.97766113 471.73922729]
[137.81706238 476.89422607]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[26 116]
[27 115]
[28 114]
[32 72]
[33 71]
[34 70]
[35 69]
[36 68]
[48 67]
[49 66]
[51 64]
[52 63]
[53 62]
[54 61]
[86 109]
[87 108]
[88 107]
[89 106]
[92 104]
[93 103]
[94 102]
[95 101]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
