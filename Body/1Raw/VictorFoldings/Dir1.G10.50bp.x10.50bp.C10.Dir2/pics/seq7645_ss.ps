%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUCAUCCUAGGGGGGGGGGGUCCUCAUCGCCCUCCCAUCCCUACGCAUCCUUUACAUAACAGACGAGGUCxxxxxxxxxxAUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCCCCCCCCCCCAUCGUCCUAG\
) } def
/len { sequence length } bind def

/coor [
[84.21881866 415.62319946]
[70.73171997 408.88809204]
[59.24880981 399.12048340]
[50.43767929 386.88824463]
[44.81060410 372.90255737]
[42.69472885 357.97653198]
[44.21307373 342.97793579]
[49.27735901 328.77874756]
[57.59315491 316.20452881]
[68.67699432 305.98632812]
[81.88447571 298.71817017]
[96.44773102 294.82266235]
[96.14373016 279.82574463]
[95.83972168 264.82882690]
[95.53572083 249.83192444]
[95.23171234 234.83499146]
[94.92771149 219.83807373]
[94.62370300 204.84115601]
[94.31970215 189.84423828]
[94.01570129 174.84732056]
[93.71169281 159.85040283]
[93.40769196 144.85348511]
[93.10368347 129.85656738]
[79.41162872 122.69564819]
[70.95453644 109.76395416]
[69.88278961 94.34959412]
[76.46887970 80.37195587]
[67.65209961 68.23670197]
[58.83532333 56.10144806]
[41.85929871 49.03783417]
[40.64240265 31.55620956]
[31.58148956 19.60213661]
[22.52057648 7.64806366]
[9.64454556 15.37173080]
[-3.99109387 21.65795326]
[-18.22646904 26.43302536]
[-32.89468002 29.64096642]
[-47.82374573 31.24415970]
[-62.83863068 31.22381210]
[-77.76329803 29.58016205]
[-92.42276001 26.33247948]
[-106.64514160 21.51884270]
[-120.26368713 15.19568634]
[-133.11874390 7.43715000]
[-145.05957031 -1.66580379]
[-155.94618225 -12.00644684]
[-165.65093994 -23.46354103]
[-174.06005859 -35.90275574]
[-181.07493591 -49.17824936]
[-186.61332703 -63.13437653]
[-190.61030579 -77.60749817]
[-193.01901245 -92.42794037]
[-193.81118774 -107.42192841]
[-192.97756958 -122.41367340]
[-190.52790833 -137.22738647]
[-186.49093628 -151.68942261]
[-180.91398621 -165.63017273]
[-173.86244202 -178.88623047]
[-165.41897583 -191.30215454]
[-155.68260193 -202.73237610]
[-144.76744080 -213.04289246]
[-132.80149841 -222.11280823]
[-119.92504883 -229.83578491]
[-106.28907013 -236.12127686]
[-92.05343628 -240.89558411]
[-77.38505554 -244.10272217]
[-62.45590210 -245.70512390]
[-47.44101715 -245.68395996]
[-32.51643753 -244.03950500]
[-17.85715294 -240.79104614]
[-3.63503075 -235.97663879]
[9.98318100 -229.65275574]
[22.83781433 -221.89352417]
[34.77815628 -212.78991699]
[45.66421509 -202.44869995]
[55.36835098 -190.99107361]
[63.77679443 -178.55140686]
[70.79095459 -165.27554321]
[76.32859802 -151.31912231]
[80.32479858 -136.84577942]
[82.73270416 -122.02520752]
[83.52407837 -107.03117371]
[82.68965149 -92.03948212]
[80.23919678 -77.22589111]
[76.20144653 -62.76408386]
[70.62374878 -48.82361984]
[63.57149124 -35.56794357]
[55.12735748 -23.15247536]
[45.39035797 -11.72277355]
[34.47465134 -1.41284907]
[43.53556442 10.54122448]
[52.59647369 22.49529648]
[64.56784058 24.47134018]
[72.20958710 34.40756989]
[70.97058105 47.28466797]
[79.78736115 59.41992188]
[88.60413361 71.55517578]
[100.99346924 69.37343597]
[113.21536255 72.35352325]
[123.20993042 79.99317932]
[129.29266357 91.00480652]
[144.27340698 90.24507141]
[159.25416565 89.48532867]
[174.23490906 88.72559357]
[189.21565247 87.96585846]
[197.68563843 84.38806915]
[204.50709534 87.34564972]
[219.50016785 86.88968658]
[234.49324036 86.43371582]
[249.48631287 85.97775269]
[264.47937012 85.52178192]
[279.47244263 85.06581116]
[290.11898804 73.38564301]
[305.91003418 72.73824310]
[317.47698975 83.50769806]
[317.95739746 99.30467987]
[307.06625366 110.75712585]
[291.26507568 111.07050323]
[279.92840576 100.05888367]
[264.93533325 100.51484680]
[249.94227600 100.97081757]
[234.94920349 101.42678833]
[219.95613098 101.88275146]
[204.96307373 102.33872223]
[189.97538757 102.94660187]
[174.99464417 103.70633698]
[160.01390076 104.46607971]
[145.03314209 105.22581482]
[130.05239868 105.98554993]
[122.42239380 120.88563538]
[108.10060120 129.55256653]
[108.40460968 144.54948425]
[108.70861053 159.54640198]
[109.01261902 174.54331970]
[109.31661987 189.54023743]
[109.62062836 204.53715515]
[109.92462921 219.53407288]
[110.22863770 234.53099060]
[110.53263855 249.52790833]
[110.83663940 264.52484131]
[111.14064789 279.52175903]
[111.44464874 294.51867676]
[126.15381622 297.82080078]
[139.64498901 304.54772949]
[151.13381958 314.30838013]
[159.95236206 326.53524780]
[165.58792114 340.51751709]
[167.71284485 355.44226074]
[166.20359802 370.44180298]
[161.14791870 384.64404297]
[152.83973694 397.22329712]
[141.76210022 407.44821167]
[128.55903625 414.72436523]
[113.99813843 418.62869263]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 142]
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[27 97]
[28 96]
[29 95]
[31 92]
[32 91]
[33 90]
[101 129]
[102 128]
[103 127]
[104 126]
[105 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
[112 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
