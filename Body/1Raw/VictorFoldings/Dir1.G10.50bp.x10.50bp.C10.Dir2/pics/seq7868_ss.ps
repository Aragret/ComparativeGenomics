%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGAAUUAGGGGGGGGGGAUUCCCCUAAAAAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCxxxxxxxxxxGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCCCCCCCCCCCUAGCAUUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.63970947]
[71.19830322 364.62368774]
[59.48964310 355.09426880]
[50.78712082 342.75860596]
[45.73651886 328.53210449]
[44.71262741 313.47039795]
[47.79142761 298.69125366]
[54.74444962 285.29132080]
[65.05573273 274.26498413]
[77.96011353 266.43048096]
[92.50000000 262.36917114]
[92.50000000 247.36917114]
[92.50000000 232.36917114]
[92.50000000 217.36917114]
[92.50000000 202.36917114]
[92.50000000 187.36917114]
[92.50000000 172.36917114]
[92.50000000 157.36917114]
[92.50000000 142.36917114]
[92.50000000 127.36917114]
[79.76457977 124.61880493]
[68.35399628 115.76959991]
[53.85840225 119.62675476]
[39.36280823 123.48391724]
[36.30607605 126.77297211]
[32.71232986 128.68505859]
[29.09395981 129.22290039]
[25.90738678 128.55976868]
[23.50101089 127.00520325]
[8.73495483 129.64407349]
[-6.03110075 132.28292847]
[-18.21358871 143.26104736]
[-33.72652817 137.94308472]
[-36.61153412 121.79969788]
[-23.90076447 111.43782806]
[-8.66996479 117.51687622]
[6.09609032 114.87801361]
[20.86214638 112.23914337]
[35.50564575 108.98831940]
[50.00124359 105.13116455]
[64.49684143 101.27400208]
[67.13570404 86.50794983]
[54.87333679 77.86882782]
[42.61096954 69.22971344]
[30.34860039 60.59059906]
[18.08623314 51.95148087]
[5.82386398 43.31236649]
[-8.08082771 49.83579254]
[-23.38298798 48.51691055]
[-35.96641541 39.71049500]
[-42.44622421 25.78542328]
[-41.07938766 10.48747158]
[-32.23357010 -2.06828761]
[-18.28825378 -8.50441837]
[-2.99466252 -7.08963442]
[9.53330803 1.79549527]
[15.92569542 15.76091480]
[14.46298027 31.04999733]
[26.72534752 39.68911362]
[38.98771667 48.32822800]
[51.25008392 56.96734619]
[63.51245117 65.60646057]
[75.77481842 74.24557495]
[97.63670349 68.21993256]
[116.17205811 76.68077850]
[127.67385864 67.05225372]
[119.25051117 54.62493515]
[112.12765503 41.40919113]
[106.37837982 27.54063797]
[102.06167603 13.16158772]
[99.22184753 -1.58040643]
[97.88803101 -16.53406715]
[98.07391357 -31.54594421]
[99.77759552 -46.46199036]
[102.98158264 -61.12914658]
[107.65300751 -75.39690399]
[113.74393463 -89.11884308]
[121.19184875 -102.15416718]
[129.92033386 -114.36909485]
[139.83979797 -125.63830566]
[150.84849548 -135.84613037]
[162.83341980 -144.88784790]
[175.67160034 -152.67065430]
[189.23129272 -159.11470032]
[203.37335205 -164.15385437]
[217.95266724 -167.73638916]
[232.81962585 -169.82556152]
[247.82167053 -170.39994812]
[262.80484009 -169.45361328]
[277.61538696 -166.99629211]
[292.10134888 -163.05320740]
[306.11407471 -157.66481018]
[319.50973511 -150.88639832]
[332.15090942 -142.78753662]
[343.90786743 -133.45130920]
[354.65997314 -122.97354126]
[364.29684448 -111.46175385]
[372.71966553 -99.03405762]
[379.84191895 -85.81800079]
[385.59060669 -71.94919586]
[389.90667725 -57.56995392]
[392.74584961 -42.82783508]
[394.07901001 -27.87411690]
[393.89245605 -12.86224842]
[392.18811035 2.05372453]
[388.98348999 16.72073936]
[384.31143188 30.98828697]
[378.21990967 44.70996094]
[370.77142334 57.74495316]
[362.04238892 69.95950317]
[352.12243652 81.22827148]
[341.11328125 91.43562317]
[329.12796021 100.47680664]
[316.28945923 108.25904846]
[302.72946167 114.70249176]
[288.58718872 119.74102020]
[274.00772095 123.32292175]
[259.14065552 125.41144562]
[244.13859558 125.98516083]
[229.15547180 125.03816986]
[214.34501648 122.58020782]
[199.85923767 118.63648224]
[185.84675598 113.24746704]
[172.45137024 106.46846771]
[159.81056213 98.36903381]
[148.05401611 89.03229523]
[137.30238342 78.55406189]
[125.80058289 88.18258667]
[128.06752014 104.18755341]
[121.22755432 118.83380890]
[107.50000000 127.36917114]
[107.50000000 142.36917114]
[107.50000000 157.36917114]
[107.50000000 172.36917114]
[107.50000000 187.36917114]
[107.50000000 202.36917114]
[107.50000000 217.36917114]
[107.50000000 232.36917114]
[107.50000000 247.36917114]
[107.50000000 262.36917114]
[122.03988647 266.43048096]
[134.94427490 274.26498413]
[145.25555420 285.29132080]
[152.20857239 298.69125366]
[155.28736877 313.47039795]
[154.26348877 328.53210449]
[149.21287537 342.75860596]
[140.51036072 355.09426880]
[128.80169678 364.62368774]
[114.95575714 370.63970947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 41]
[23 40]
[24 39]
[29 38]
[30 37]
[31 36]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[65 128]
[66 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
