%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCACCCCUUACGGGGGGGGGGGAGUGCGGCUUCGACCCUAUAUCCCCCGCCCGCGUCCCUUUCUCCAUAAAxxxxxxxxxxACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCCCCCCCCCCCUCCACCCCUGAC\
) } def
/len { sequence length } bind def

/coor [
[-28.53671074 255.72326660]
[-38.39554596 247.03092957]
[-47.66798782 237.71560669]
[-56.31473923 227.81677246]
[-64.29916382 217.37634277]
[-71.58744049 206.43859863]
[-78.14867401 195.04985046]
[-83.95507050 183.25836182]
[-88.98203278 171.11408997]
[-93.20825195 158.66851807]
[-96.61582184 145.97434998]
[-111.33861542 148.84477234]
[-126.06140900 151.71519470]
[-138.12593079 161.95033264]
[-152.09861755 156.79153442]
[-166.82141113 159.66195679]
[-181.54420471 162.53237915]
[-193.60871887 172.76751709]
[-207.58140564 167.60871887]
[-222.30421448 170.47914124]
[-237.02700806 173.34956360]
[-251.74980164 176.21998596]
[-266.47259521 179.09040833]
[-281.19537354 181.96084595]
[-295.71655273 185.72062683]
[-309.98239136 190.35588074]
[-317.22821045 196.01618958]
[-324.58456421 194.93734741]
[-338.94140625 199.28251648]
[-349.75854492 211.60818481]
[-365.78634644 208.13819885]
[-370.53683472 192.44216919]
[-359.12307739 180.66685486]
[-343.28659058 184.92565918]
[-328.92971802 180.58047485]
[-314.61764526 176.09002686]
[-300.35180664 171.45477295]
[-312.98410034 163.36622620]
[-316.37985229 148.75564575]
[-308.60952759 135.92515564]
[-294.08837891 132.16534424]
[-281.06768799 139.61262512]
[-276.94616699 154.03527832]
[-284.06579590 167.23805237]
[-269.34301758 164.36761475]
[-254.62022400 161.49719238]
[-239.89743042 158.62677002]
[-225.17463684 155.75634766]
[-210.45184326 152.88592529]
[-199.44039917 142.85609436]
[-184.41462708 147.80958557]
[-169.69183350 144.93916321]
[-154.96903992 142.06874084]
[-143.95759583 132.03890991]
[-128.93183899 136.99240112]
[-114.20904541 134.12197876]
[-99.48625183 131.25155640]
[-101.33456421 115.35626221]
[-101.91835022 99.36452484]
[-101.23392487 83.37677002]
[-99.28559113 67.49343109]
[-96.08558655 51.81425476]
[-91.65401459 36.43772125]
[-86.01869965 21.46041107]
[-79.21504211 6.97639179]
[-71.28577423 -6.92336702]
[-62.28069687 -20.15156364]
[-52.25637054 -32.62511444]
[-41.27575302 -44.26567459]
[-29.40781403 -55.00012970]
[-16.72709274 -64.76107025]
[-3.31323195 -73.48717499]
[10.74951649 -81.12364197]
[25.37282753 -87.62251282]
[40.46485901 -92.94297028]
[55.93081284 -97.05158997]
[71.67356110 -99.92257690]
[87.59421539 -101.53788757]
[103.59279633 -101.88738251]
[119.56880188 -100.96886444]
[135.42190552 -98.78810883]
[151.05253601 -95.35880280]
[166.36250305 -90.70249176]
[181.25567627 -84.84841919]
[195.63848877 -77.83335114]
[209.42062378 -69.70135498]
[222.51550293 -60.50349808]
[232.05342102 -72.08055115]
[241.59133911 -83.65760803]
[251.12925720 -95.23466492]
[260.66717529 -106.81171417]
[258.89868164 -122.51674652]
[268.81848145 -134.82011414]
[284.54135132 -136.42245483]
[296.73913574 -126.37313080]
[298.17517090 -110.63421631]
[287.99743652 -98.54334259]
[272.24423218 -97.27380371]
[262.70629883 -85.69674683]
[253.16839600 -74.11968994]
[243.63047791 -62.54263687]
[234.09255981 -50.96558380]
[247.23367310 -38.17984772]
[259.16082764 -24.25481033]
[269.77566528 -9.30528069]
[278.99072266 6.54547930]
[286.72994995 23.16677856]
[292.92959595 40.42157364]
[297.53854370 58.16759872]
[300.51873779 76.25853729]
[301.84564209 94.54521942]
[316.84487915 94.69723511]
[331.84411621 94.84924316]
[342.95526123 83.61013031]
[358.75955200 83.60319519]
[369.88058472 94.83255768]
[369.72039795 110.63603973]
[358.37408447 121.63770294]
[342.57321167 121.31047058]
[331.69210815 109.84847260]
[316.69287109 109.69646454]
[301.69363403 109.54445648]
[300.64538574 122.64615631]
[298.74697876 135.65190125]
[296.00646973 148.50659180]
[292.43542480 161.15574646]
[288.04904175 173.54577637]
[282.86584473 185.62419128]
[276.90783691 197.33979797]
[270.20025635 208.64297485]
[262.77151489 219.48580933]
[254.65307617 229.82237244]
[245.87936401 239.60885620]
[236.48754883 248.80380249]
[226.51741028 257.36825562]
[216.01119995 265.26593018]
[205.01344299 272.46331787]
[193.57073975 278.92999268]
[181.73155212 284.63848877]
[169.54605103 289.56469727]
[157.06588745 293.68765259]
[144.34393311 296.98995972]
[131.43408203 299.45758057]
[118.39104462 301.08007812]
[105.27007294 301.85055542]
[92.12677765 301.76580811]
[79.01684570 300.82611084]
[65.99581909 299.03552246]
[53.11886978 296.40158081]
[40.44055939 292.93548584]
[28.01461411 288.65185547]
[15.89367867 283.56890869]
[4.12911129 277.70819092]
[-7.22923946 271.09445190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 57]
[12 56]
[13 55]
[15 53]
[16 52]
[17 51]
[19 49]
[20 48]
[21 47]
[22 46]
[23 45]
[24 44]
[25 37]
[26 36]
[28 35]
[29 34]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
