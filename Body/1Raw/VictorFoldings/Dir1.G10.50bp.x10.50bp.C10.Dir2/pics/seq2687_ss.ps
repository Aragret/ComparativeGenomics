%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCUUACCGGGGGGGGGGCCGCCUGUUUACCAAAAACAUCACCUCUAGCAUCACCAGUAUUAGAGGCAxxxxxxxxxxAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCACCCCCCCCCCAAAUCUUAGC\
) } def
/len { sequence length } bind def

/coor [
[85.08795166 402.24230957]
[71.24201202 396.22628784]
[59.53335190 386.69686890]
[50.83082962 374.36120605]
[45.78022766 360.13467407]
[44.75633621 345.07299805]
[47.83513260 330.29385376]
[54.78815460 316.89392090]
[65.09944153 305.86758423]
[78.00382233 298.03308105]
[92.54370880 293.97177124]
[92.54370880 278.97177124]
[92.54370880 263.97177124]
[92.54370880 248.97177124]
[92.54370880 233.97177124]
[92.54370880 218.97177124]
[92.54370880 203.97177124]
[92.54370880 188.97177124]
[92.54370880 173.97177124]
[92.54370880 158.97177124]
[82.95259857 144.30853271]
[92.20685577 128.42335510]
[91.89479828 113.42660522]
[86.64002991 120.96524048]
[81.01790619 128.25245667]
[75.03763580 135.27494812]
[60.32967377 138.22042847]
[45.62171173 141.16590881]
[30.91374969 144.11138916]
[16.20578766 147.05686951]
[6.14931488 159.55674744]
[-9.89232349 159.34375000]
[-19.61335754 146.58125305]
[-15.55663872 131.05957031]
[-0.83413684 124.68560791]
[13.26030540 132.34890747]
[27.96826744 129.40342712]
[42.67622757 126.45794678]
[57.38418961 123.51246643]
[72.09214783 120.56697845]
[74.17109680 113.36087036]
[63.76847076 102.55414581]
[78.32897949 98.94865417]
[80.40792847 91.74254608]
[69.52909851 81.41534424]
[58.65027618 71.08814240]
[47.77145004 60.76093674]
[36.89262390 50.43373108]
[26.01379967 40.10652542]
[11.95930290 45.97090912]
[-3.26522493 45.60531616]
[-17.02204132 39.07309723]
[-26.92769241 27.50599098]
[-31.26596832 12.90807056]
[-29.28523254 -2.19148493]
[-21.32866287 -15.17658710]
[-8.77478027 -23.79748917]
[6.20137691 -26.56056595]
[21.00510025 -22.98709869]
[33.07155609 -13.69621277]
[40.31015396 -0.29760948]
[41.46676636 14.88732147]
[36.34100342 29.22769928]
[47.21982956 39.55490494]
[58.09865570 49.88211060]
[68.97747803 60.20931625]
[79.85630798 70.53652191]
[90.73513031 80.86372375]
[86.13919067 66.58515930]
[75.56124878 55.94998169]
[68.47139740 42.73127747]
[65.46335602 28.03598404]
[66.78900146 13.09467697]
[72.33732605 -0.84146470]
[81.64372253 -12.60543442]
[93.92887878 -21.21212196]
[108.16402435 -25.94080734]
[123.15713501 -26.39551163]
[137.65267944 -22.53815842]
[150.43681335 -14.69176006]
[160.43899536 -3.51337194]
[166.82164001 10.06093216]
[169.05029297 24.89444733]
[166.93829346 39.74501801]
[160.66252136 53.36906815]
[150.74850464 64.62571716]
[138.02644348 72.57234955]
[123.56303406 76.54334259]
[112.47852325 86.64945984]
[127.05123138 83.09470367]
[141.62393188 79.53993988]
[156.19664001 75.98517609]
[167.77006531 65.19786072]
[181.96839905 69.69859314]
[196.54110718 66.14382935]
[201.65568542 61.79084015]
[207.34536743 60.86404419]
[211.79388428 62.75774765]
[226.50184631 59.81226730]
[241.20980835 56.86678314]
[249.03051758 46.55705643]
[261.38824463 44.43435287]
[271.52914429 51.10288620]
[286.29519653 48.46401978]
[301.06124878 45.82515717]
[308.69128418 32.17537689]
[323.32843018 26.67189598]
[338.06143188 31.91328812]
[345.93386841 45.42472839]
[343.22857666 60.82652664]
[331.22293091 70.84642792]
[315.58563232 70.75333405]
[303.70010376 60.59121323]
[288.93405151 63.23007584]
[274.16799927 65.86894226]
[261.42077637 77.89008331]
[244.15528870 71.57474518]
[229.44732666 74.52022552]
[214.73936462 77.46571350]
[200.09587097 80.71653748]
[185.52316284 84.27129364]
[174.99206543 94.80435181]
[159.75140381 90.55788422]
[145.17869568 94.11264038]
[130.60598755 97.66740417]
[116.03328705 101.22216797]
[106.89155579 113.11454773]
[107.20361328 128.11129761]
[115.97669220 137.62376404]
[115.89226532 150.16217041]
[107.54370880 158.97177124]
[107.54370880 173.97177124]
[107.54370880 188.97177124]
[107.54370880 203.97177124]
[107.54370880 218.97177124]
[107.54370880 233.97177124]
[107.54370880 248.97177124]
[107.54370880 263.97177124]
[107.54370880 278.97177124]
[107.54370880 293.97177124]
[122.08359528 298.03308105]
[134.98797607 305.86758423]
[145.29925537 316.89392090]
[152.25228882 330.29385376]
[155.33108521 345.07299805]
[154.30718994 360.13467407]
[149.25659180 374.36120605]
[140.55406189 386.69686890]
[128.84539795 396.22628784]
[114.99946594 402.24230957]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[44 68]
[45 67]
[46 66]
[47 65]
[48 64]
[49 63]
[89 126]
[90 125]
[91 124]
[92 123]
[94 121]
[95 120]
[98 119]
[99 118]
[100 117]
[103 115]
[104 114]
[105 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
