%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGAACGCAAAUCGGGGGGGGGGAGCCACUUUAAUUAAGCUAAGCCCUUACUAGACCAAUGGGACUUAAACCCxxxxxxxxxxCACCAAAGCCCAUAAAAAUAAAAAAUUAUAACAAACCCUGAGAACCAAAACCCCCCCCCCUGAACGAAAAUC\
) } def
/len { sequence length } bind def

/coor [
[115.83417511 435.29888916]
[101.67356873 430.14389038]
[89.08382416 421.86166382]
[78.74388885 410.89889526]
[71.21137238 397.84677124]
[66.89250946 383.40917969]
[66.02020264 368.36471558]
[68.64149475 353.52471924]
[74.61502075 339.68948364]
[83.61863708 327.60513306]
[95.16679382 317.92333984]
[108.63671112 311.16625977]
[123.30197144 307.69830322]
[123.30197144 292.69830322]
[123.30197144 277.69830322]
[123.30197144 262.69830322]
[123.30197144 247.69830322]
[123.30197144 232.69830322]
[123.30197144 217.69830322]
[123.30197144 202.69830322]
[123.30197144 187.69830322]
[123.30197144 172.69830322]
[111.25669098 163.75898743]
[96.89982605 168.10417175]
[82.54296875 172.44935608]
[80.23894501 187.53756714]
[71.60948181 200.12704468]
[58.36796188 207.71815491]
[43.14348984 208.80364990]
[28.95890808 203.16801453]
[18.63056755 191.93022156]
[14.20916939 177.32151794]
[16.57258797 162.24249268]
[25.25156212 149.68708801]
[38.52287674 142.14819336]
[53.75150299 141.12266541]
[67.91378021 146.81410217]
[78.19779205 158.09248352]
[92.55464935 153.74731445]
[106.91150665 149.40213013]
[64.38136292 131.27600098]
[56.69211197 88.07692719]
[42.42626190 83.44167328]
[28.46009445 90.83908844]
[13.37852859 86.11447906]
[6.12919044 72.07087708]
[11.01298428 57.04010773]
[25.13244247 49.93965149]
[40.11074066 54.98209000]
[47.06151962 69.17582703]
[61.32736588 73.81108093]
[67.30440521 69.28062439]
[53.48035049 63.45863724]
[51.61022186 48.57567215]
[63.56412888 39.51453781]
[77.38829041 45.33627319]
[79.25847626 60.21971130]
[85.23551178 55.68925858]
[84.62763214 40.70158005]
[84.01974487 25.71390152]
[83.41185760 10.72622395]
[82.80397797 -4.26145315]
[79.31221008 -12.76726151]
[82.33876801 -19.55840111]
[82.03476715 -34.55532074]
[81.73075867 -49.55223846]
[67.11154938 -53.31803894]
[54.05103683 -60.88940430]
[43.51840210 -71.70449829]
[36.29523087 -84.96075439]
[32.91753769 -99.67448425]
[33.63596344 -114.75382233]
[38.39719772 -129.07978821]
[46.84793091 -141.58929443]
[58.36105347 -151.35404968]
[72.08222198 -157.64944458]
[86.99323273 -160.00834656]
[101.98758698 -158.25566101]
[115.95260620 -152.52149963]
[127.85199738 -143.23132324]
[136.80274963 -131.07456970]
[142.14064026 -116.95333099]
[143.46957397 -101.91549683]
[140.69093323 -87.07697296]
[134.01091003 -73.53887939]
[123.92521667 -62.30583191]
[111.18226624 -54.21140289]
[96.72767639 -49.85624313]
[97.03168488 -34.85932541]
[97.33568573 -19.86240578]
[97.79165649 -4.86933708]
[98.39953613 10.11834049]
[99.00742340 25.10601807]
[99.61530304 40.09369659]
[100.22319031 55.08137131]
[113.33872986 56.06835175]
[125.88472748 60.88424301]
[136.74505615 69.27567291]
[144.90469360 80.66493988]
[149.54351807 94.18799591]
[163.14170837 87.85637665]
[176.73988342 81.52475739]
[190.33807373 75.19313812]
[199.30361938 61.46174622]
[215.66105652 62.63049316]
[222.58326721 77.49707031]
[212.94926453 90.76801300]
[196.66969299 88.79132080]
[183.07150269 95.12294006]
[169.47332764 101.45455933]
[155.87513733 107.78617859]
[157.23567200 115.16174316]
[159.95675659 129.91287231]
[161.31729126 137.28843689]
[176.27957153 138.35162354]
[189.29258728 128.96861267]
[204.70254517 133.43096924]
[210.68824768 148.31556702]
[202.65797424 162.20419312]
[186.77185059 164.44270325]
[175.21636963 153.31390381]
[160.25410461 152.25070190]
[154.76606750 157.36260986]
[167.38697815 165.46894836]
[182.13066101 168.23004150]
[191.21040344 180.16981506]
[189.93185425 195.11521912]
[178.95602417 205.33927917]
[163.95759583 205.55598450]
[152.69096375 195.65330505]
[150.98138428 180.75013733]
[143.79000854 167.58639526]
[138.30197144 172.69830322]
[138.30197144 187.69830322]
[138.30197144 202.69830322]
[138.30197144 217.69830322]
[138.30197144 232.69830322]
[138.30197144 247.69830322]
[138.30197144 262.69830322]
[138.30197144 277.69830322]
[138.30197144 292.69830322]
[138.30197144 307.69830322]
[152.96722412 311.16625977]
[166.43714905 317.92333984]
[177.98530579 327.60513306]
[186.98892212 339.68948364]
[192.96244812 353.52471924]
[195.58374023 368.36471558]
[194.71142578 383.40917969]
[190.39256287 397.84677124]
[182.86004639 410.89889526]
[172.52011108 421.86166382]
[159.93037415 430.14389038]
[145.76976013 435.29888916]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 40]
[24 39]
[25 38]
[42 51]
[43 50]
[58 95]
[59 94]
[60 93]
[61 92]
[62 91]
[64 90]
[65 89]
[66 88]
[100 111]
[101 110]
[102 109]
[103 108]
[114 122]
[115 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
