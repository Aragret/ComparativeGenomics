%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAUAUUCGGGGGGGGGGAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCACAACxxxxxxxxxxAUCAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUCCCCCCCCCCAACACUAUUC\
) } def
/len { sequence length } bind def

/coor [
[67.68583679 701.57574463]
[53.83989716 695.55975342]
[42.13123322 686.03033447]
[33.42871094 673.69464111]
[28.37810898 659.46813965]
[27.35421753 644.40643311]
[30.43301582 629.62725830]
[37.38603592 616.22735596]
[47.69732285 605.20104980]
[60.60170364 597.36651611]
[75.14158630 593.30517578]
[75.14158630 578.30517578]
[75.14158630 563.30517578]
[75.14158630 548.30517578]
[75.14158630 533.30517578]
[75.14158630 518.30517578]
[75.14158630 503.30520630]
[75.14158630 488.30520630]
[75.14158630 473.30520630]
[75.14158630 458.30520630]
[75.14158630 443.30520630]
[74.98554993 428.30599976]
[74.67350006 413.30926514]
[74.36144257 398.31250000]
[59.81990433 394.77792358]
[46.67874908 387.59414673]
[35.83664322 377.24554443]
[28.03680611 364.43325806]
[23.81605148 350.02749634]
[23.46785927 335.00857544]
[27.02197075 320.40017700]
[34.24194717 307.19946289]
[44.64089966 296.30920410]
[57.51431274 288.47589111]
[71.98776245 284.23864746]
[71.67570496 269.24188232]
[71.36364746 254.24513245]
[71.05159760 239.24836731]
[70.73954010 224.25161743]
[61.62955856 236.16833496]
[47.83520126 242.06034851]
[32.92709732 240.40251160]
[20.76416206 231.62396240]
[14.49473381 217.99699402]
[15.74163532 203.04890442]
[24.18210983 190.64897156]
[37.63136673 184.00686646]
[52.60810852 184.84190369]
[65.23564911 192.93789673]
[72.24536133 206.19915771]
[75.03768158 191.46134949]
[77.83000946 176.72354126]
[69.25652313 164.59791565]
[71.87838745 149.61190796]
[84.65499878 140.70146179]
[87.44731903 125.96364594]
[73.71110535 115.60359192]
[67.73613739 98.41319275]
[72.57818604 79.84025574]
[87.66670227 66.42684174]
[85.48986053 51.58563614]
[83.31302643 36.74443054]
[68.37255859 34.44792938]
[54.77349091 27.84818077]
[43.72503281 17.53202820]
[36.20961380 4.41677380]
[32.89549637 -10.33137989]
[34.07736969 -25.40103722]
[39.65014267 -39.45221710]
[49.11828995 -51.23549271]
[61.63990784 -59.70310974]
[76.10157776 -64.10212708]
[91.21739197 -64.04138947]
[105.64324951 -59.52630234]
[118.09642029 -50.95833969]
[127.46956635 -39.09935760]
[132.92924500 -25.00385094]
[133.98999023 -9.92518330]
[130.55746460 4.79586267]
[122.93689728 17.85029984]
[111.80589294 28.07733727]
[98.15422821 34.56759262]
[100.33106995 49.40879822]
[102.50790405 64.25000763]
[116.92012024 68.40789032]
[126.66777039 57.00687027]
[136.41542053 45.60585022]
[139.50250244 30.08874512]
[153.65411377 25.44318771]
[163.40176392 14.04216576]
[165.86505127 -2.17092276]
[181.23411560 -7.89139175]
[193.69859314 2.76548719]
[190.43608093 18.83683014]
[174.80278015 23.78981781]
[165.05513000 35.19083786]
[162.66526794 49.89246750]
[147.81645203 55.35350037]
[138.06878662 66.75452423]
[128.32113647 78.15554047]
[133.79409790 95.95895386]
[129.50886536 113.14160919]
[117.60894012 124.99005890]
[102.18512726 128.75596619]
[99.39280701 143.49377441]
[108.02443695 156.46037292]
[104.98268127 171.36683655]
[92.56781769 179.51586914]
[89.77548981 194.25367737]
[86.98316956 208.99147034]
[85.73628998 223.93955994]
[86.04834747 238.93630981]
[86.36040497 253.93307495]
[86.67246246 268.92980957]
[86.98451996 283.92657471]
[101.62170410 287.55810547]
[114.80982208 294.84912109]
[125.65279388 305.29736328]
[133.41564941 318.18630981]
[137.57437134 332.63424683]
[137.85125732 347.65463257]
[134.23341370 362.22348022]
[126.97328949 375.34915161]
[116.57105255 386.13980103]
[103.74011230 393.86401367]
[89.35819244 398.00045776]
[89.67024994 412.99719238]
[89.98230743 427.99395752]
[93.30716705 436.57284546]
[90.14158630 443.30520630]
[90.14158630 458.30520630]
[90.14158630 473.30520630]
[90.14158630 488.30520630]
[90.14158630 503.30520630]
[90.14158630 518.30517578]
[90.14158630 533.30517578]
[90.14158630 548.30517578]
[90.14158630 563.30517578]
[90.14158630 578.30517578]
[90.14158630 593.30517578]
[104.68148041 597.36651611]
[117.58586121 605.20104980]
[127.89714050 616.22735596]
[134.85015869 629.62725830]
[137.92897034 644.40643311]
[136.90507507 659.46813965]
[131.85447693 673.69464111]
[123.15194702 686.03033447]
[111.44328308 695.55975342]
[97.59734344 701.57574463]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 128]
[23 127]
[24 126]
[35 115]
[36 114]
[37 113]
[38 112]
[39 111]
[50 110]
[51 109]
[52 108]
[55 105]
[56 104]
[60 84]
[61 83]
[62 82]
[85 100]
[86 99]
[87 98]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
