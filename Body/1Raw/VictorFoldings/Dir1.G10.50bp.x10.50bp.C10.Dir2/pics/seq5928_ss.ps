%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUAUACUAAUGGGGGGGGGGAAUCUUAUAGAAAUUUAGGUUAAAUACAGACCAAGAGCCUUCAAAGCCCUxxxxxxxxxxGCCAACGCCACUUAUCCAGUGAACCACUAUCACGAAAAAAACUCUACCUCCCCCCCCCCCUCUAUACUAAU\
) } def
/len { sequence length } bind def

/coor [
[73.64653778 560.99664307]
[60.15765381 554.26507568]
[48.67215347 544.50054932]
[39.85778427 532.27062988]
[34.22700500 518.28643799]
[32.10717392 503.36096191]
[33.62154388 488.36196899]
[38.68206787 474.16143799]
[46.99453354 461.58502197]
[58.07566452 451.36386108]
[71.28121948 444.09222412]
[85.84344482 440.19287109]
[85.53546143 425.19601440]
[85.22748566 410.19918823]
[84.91950989 395.20236206]
[84.61153412 380.20550537]
[84.30355072 365.20867920]
[83.99557495 350.21182251]
[83.68759918 335.21499634]
[83.37962341 320.21817017]
[83.07164001 305.22131348]
[82.76366425 290.22448730]
[74.22776794 286.07348633]
[67.77615356 279.03240967]
[64.34381104 270.05834961]
[64.45131683 260.39270020]
[68.12638855 251.38948059]
[74.89398193 244.32557678]
[83.83728790 240.21975708]
[84.76070404 225.24819946]
[85.68412018 210.27665710]
[86.60752869 195.30509949]
[76.58208466 184.34947205]
[77.30528259 169.15303040]
[88.86453247 158.71170044]
[89.78794861 143.74014282]
[90.71136475 128.76860046]
[64.04663086 107.16185760]
[72.05889130 67.19885254]
[57.81219864 62.50505447]
[43.56550980 57.81125259]
[31.64757156 67.60749054]
[16.32266998 69.38259125]
[2.48092771 62.57012558]
[-5.46080780 49.34392548]
[-4.96835756 33.92442322]
[3.80113959 21.23192787]
[18.04936981 15.31656742]
[33.22977448 18.06591034]
[44.49834061 28.60265541]
[48.25930786 43.56455994]
[62.50600052 48.25836182]
[76.75269318 52.95216370]
[88.43890381 43.54830551]
[86.90161133 28.62728882]
[85.36431885 13.70627213]
[74.22429657 -0.92009479]
[81.94007111 -16.65258789]
[80.09674835 -31.53889465]
[65.09587860 -32.83023453]
[50.69141388 -37.21258926]
[37.51305389 -44.49438095]
[26.13689995 -54.35728455]
[17.06027031 -66.37013245]
[10.67995548 -80.00777435]
[7.27487659 -94.67403412]
[6.99388838 -109.72776031]
[9.84927368 -124.51087189]
[15.71620846 -138.37712097]
[24.33821487 -150.72032166]
[35.33837509 -161.00090027]
[48.23580933 -168.76940918]
[62.46670151 -173.68626404]
[77.40892792 -175.53651428]
[92.40929413 -174.23927307]
[106.81203461 -169.85125732]
[119.98752594 -162.56427002]
[131.35980225 -152.69689941]
[140.43170166 -140.68048096]
[146.80665588 -127.04032898]
[150.20596313 -112.37273407]
[150.48103333 -97.31890106]
[147.61982727 -82.53691101]
[141.74743652 -68.67297363]
[133.12057495 -56.33316040]
[122.11637115 -46.05691528]
[109.21588135 -38.29347610]
[94.98305511 -33.38222122]
[96.82638550 -18.49591255]
[106.19315338 -10.78061962]
[107.81928253 1.65027142]
[100.28533173 12.16897964]
[101.82262421 27.08999634]
[103.35991669 42.01101303]
[109.65413666 46.08934402]
[113.52156830 31.59648705]
[128.50019836 30.79611778]
[133.89002991 44.79432297]
[122.24257660 54.24600983]
[128.53680420 58.32434464]
[142.78349304 53.63054276]
[157.03018188 48.93674469]
[171.27687073 44.24294281]
[176.90679932 29.65397644]
[190.62208557 22.14233017]
[205.94680786 25.25477028]
[215.64506531 37.52169800]
[215.13768005 53.15105057]
[204.66418457 64.76311493]
[189.16987610 66.87503815]
[175.97067261 58.48963547]
[161.72398376 63.18343353]
[147.47729492 67.87723541]
[133.23059082 72.57103729]
[138.98689270 88.97048187]
[137.58135986 105.24422455]
[130.10168457 118.57975769]
[118.61509705 127.00889587]
[105.68291473 129.69201660]
[104.75949860 144.66355896]
[103.83608246 159.63511658]
[114.02461243 171.41780090]
[112.87486267 186.58792114]
[101.57907867 196.22851562]
[100.65567017 211.20007324]
[99.73225403 226.17161560]
[98.80883789 241.14317322]
[113.75305939 255.85136414]
[113.12823486 276.51962280]
[97.76050568 289.91650391]
[98.06848145 304.91333008]
[98.37645721 319.91018677]
[98.68444061 334.90701294]
[98.99241638 349.90386963]
[99.30039215 364.90069580]
[99.60836792 379.89752197]
[99.91634369 394.89437866]
[100.22432709 409.89120483]
[100.53230286 424.88806152]
[100.84027863 439.88488770]
[115.55031586 443.18310547]
[129.04327393 449.90646362]
[140.53469849 459.66406250]
[149.35647583 471.88861084]
[154.99572754 485.86938477]
[157.12460327 500.79357910]
[155.61933899 515.79351807]
[150.56742859 529.99707031]
[142.26258850 542.57855225]
[131.18765259 552.80639648]
[117.98650360 560.08605957]
[103.42665100 563.99426270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[29 127]
[30 126]
[31 125]
[32 124]
[35 121]
[36 120]
[37 119]
[39 53]
[40 52]
[41 51]
[54 94]
[55 93]
[56 92]
[58 89]
[59 88]
[100 114]
[101 113]
[102 112]
[103 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
