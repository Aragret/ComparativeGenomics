%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUUACCAUAGGGGGGGGGGCUAAUCUUAGUUACCGCUAACAACCUAUUCCAACUGUUCAUCGGCUGAGAxxxxxxxxxxUCAUCCUAACCCUACUCCUAAUCACAUAACCUAUUCCCCCGAGCAAUCUCCCCCCCCCCCAAUUACAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.46817017]
[71.19830322 356.45214844]
[59.48964310 346.92272949]
[50.78712082 334.58706665]
[45.73651886 320.36053467]
[44.71262741 305.29885864]
[47.79142761 290.51971436]
[54.74444962 277.11978149]
[65.05573273 266.09344482]
[77.96011353 258.25894165]
[92.50000000 254.19761658]
[92.50000000 239.19761658]
[92.50000000 224.19761658]
[92.50000000 209.19761658]
[92.50000000 194.19761658]
[92.50000000 179.19761658]
[92.50000000 164.19761658]
[92.50000000 149.19761658]
[92.50000000 134.19761658]
[92.50000000 119.19761658]
[79.56194305 111.60771179]
[66.46878815 118.92681885]
[53.37563705 126.24592590]
[45.44923782 140.60224915]
[29.05014801 140.64538574]
[21.04834175 126.33094788]
[29.67539215 112.38440704]
[46.05653000 113.15277100]
[59.14968491 105.83366394]
[72.24283600 98.51455688]
[72.08680725 91.01618195]
[58.94319916 83.78807831]
[71.77475739 76.01942444]
[71.61872864 68.52104950]
[58.23244095 61.75293350]
[44.84615707 54.98482132]
[28.36381531 60.75281906]
[13.09503746 52.99727631]
[8.22681141 36.92996979]
[-5.29737854 30.44180489]
[-18.82156944 23.95363998]
[-32.34576035 17.46547508]
[-44.23254013 27.03977394]
[-59.09823990 30.50007629]
[-73.99126434 27.15933418]
[-85.95459747 17.68085861]
[-92.61289978 3.94660378]
[-92.64416504 -11.31648159]
[-86.04219055 -25.07790184]
[-74.11779785 -34.60531616]
[-59.23859024 -38.00704956]
[-44.35883331 -34.60768890]
[-32.43292618 -25.08217239]
[-25.82875633 -11.32180500]
[-25.85759354 3.94128561]
[-12.33340359 10.42945099]
[1.19078636 16.91761589]
[14.71497631 23.40578079]
[26.19066048 17.46394157]
[39.18436813 19.26336670]
[48.89808273 28.36675644]
[51.61426926 41.59853363]
[65.00055695 48.36664963]
[78.38684082 55.13476562]
[98.04374695 63.98634720]
[107.45635223 78.94774628]
[105.76788330 93.62009430]
[118.03025055 84.98097992]
[130.29261780 76.34186554]
[142.55499268 67.70274353]
[135.28440857 54.56554794]
[129.47686768 40.71926498]
[125.20043182 26.32623100]
[122.50525665 11.55520248]
[121.42294312 -3.42063904]
[121.96617126 -18.42570877]
[124.12857819 -33.28408051]
[127.88480377 -47.82155228]
[133.19081116 -61.86767197]
[139.98440552 -75.25775909]
[148.18591309 -87.83482361]
[157.69917297 -99.45140076]
[168.41267395 -109.97129822]
[180.20079041 -119.27117157]
[192.92530823 -127.24198914]
[206.43704224 -133.79028320]
[220.57757568 -138.83930969]
[235.18112183 -142.32983398]
[250.07644653 -144.22094727]
[265.08892822 -144.49049377]
[280.04254150 -143.13528442]
[294.76196289 -140.17121887]
[309.07464600 -135.63305664]
[322.81271362 -129.57400513]
[335.81515503 -122.06510162]
[347.92953491 -113.19437408]
[359.01373291 -103.06584167]
[368.93786621 -91.79824066]
[377.58557129 -79.52369690]
[384.85543823 -66.38610077]
[390.66226196 -52.53950500]
[394.93789673 -38.14624405]
[397.63229370 -23.37507057]
[398.71380615 -8.39917088]
[398.16976929 6.60587025]
[396.00656128 21.46412659]
[392.24954224 36.00139236]
[386.94277954 50.04722595]
[380.14846802 63.43695068]
[371.94628906 76.01357269]
[362.43240356 87.62963867]
[351.71832275 98.14895630]
[339.92971802 107.44819641]
[327.20477295 115.41832733]
[313.69268799 121.96590424]
[299.55187988 127.01416016]
[284.94815063 130.50390625]
[270.05270386 132.39422607]
[255.04022217 132.66294861]
[240.08666992 131.30693054]
[225.36740112 128.34208679]
[211.05499268 123.80315399]
[197.31723022 117.74336243]
[184.31518555 110.23375702]
[172.20130920 101.36238098]
[161.11763000 91.23324585]
[151.19410706 79.96511841]
[138.93173218 88.60423279]
[126.66936493 97.24334717]
[114.40699768 105.88246155]
[107.50000000 119.19761658]
[107.50000000 134.19761658]
[107.50000000 149.19761658]
[107.50000000 164.19761658]
[107.50000000 179.19761658]
[107.50000000 194.19761658]
[107.50000000 209.19761658]
[107.50000000 224.19761658]
[107.50000000 239.19761658]
[107.50000000 254.19761658]
[122.03988647 258.25894165]
[134.94427490 266.09344482]
[145.25555420 277.11978149]
[152.20857239 290.51971436]
[155.28736877 305.29885864]
[154.26348877 320.36053467]
[149.21287537 334.58706665]
[140.51036072 346.92272949]
[128.80169678 356.45214844]
[114.95575714 362.46817017]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 30]
[22 29]
[23 28]
[34 64]
[35 63]
[36 62]
[39 58]
[40 57]
[41 56]
[42 55]
[67 130]
[68 129]
[69 128]
[70 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
