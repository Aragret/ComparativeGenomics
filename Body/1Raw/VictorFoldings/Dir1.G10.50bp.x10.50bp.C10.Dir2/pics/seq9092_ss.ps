%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUACUCGCAUCGGGGGGGGGGAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAACCGAAxxxxxxxxxxCACAUCAUCGAAACCGCAAACAUAUCAUACACAAACGCCUGAGCCCUAUCCCCCCCCCCCUAUUACUCUCAUC\
) } def
/len { sequence length } bind def

/coor [
[104.86603546 448.35821533]
[90.99190521 442.50994873]
[78.63710022 433.90457153]
[68.34172821 422.91827393]
[60.55585098 410.03131104]
[55.61983490 395.80706787]
[53.74946976 380.86734009]
[55.02650833 365.86523438]
[59.39513016 351.45660400]
[66.66436005 338.27130127]
[76.51641083 326.88574219]
[88.52059937 317.79766846]
[102.15215302 311.40435791]
[116.81516266 307.98532104]
[116.51502991 292.98831177]
[116.21489716 277.99133301]
[115.91476440 262.99432373]
[115.61463165 247.99732971]
[115.31449890 233.00032043]
[115.01436615 218.00332642]
[114.71424103 203.00633240]
[114.41410828 188.00933838]
[114.11397552 173.01234436]
[113.81384277 158.01535034]
[113.21369934 143.02735901]
[112.31378174 128.05436707]
[106.57917786 123.22070312]
[96.91166687 134.68975830]
[85.44276428 125.02206421]
[95.10997772 113.55336761]
[89.37538147 108.71969604]
[74.46613312 110.36720276]
[59.55688095 112.01470947]
[49.87345886 124.50498199]
[34.18401718 126.40680695]
[21.79682159 116.59187317]
[20.06097603 100.88320160]
[30.00632858 88.60047150]
[45.73247528 87.03079987]
[57.90937424 97.10546112]
[72.81862640 95.45795441]
[87.72787476 93.81044769]
[99.09977722 84.02884674]
[102.95790100 69.53350067]
[106.81601715 55.03816223]
[110.67414093 40.54281998]
[114.53225708 26.04747963]
[100.39157104 21.01818657]
[86.70787811 14.85302067]
[73.57223511 7.59301281]
[61.07206345 -0.71352178]
[49.29055023 -10.01130390]
[38.30610275 -20.23845863]
[28.19181633 -31.32692337]
[19.01500702 -43.20290375]
[10.83674145 -55.78736877]
[3.71144772 -68.99657440]
[-2.31345654 -82.74259949]
[-7.19787598 -96.93398285]
[-10.90930557 -111.47626495]
[-13.42304516 -126.27268219]
[-14.72236633 -141.22476196]
[-14.79862213 -156.23298645]
[-13.65130520 -171.19749451]
[-11.28805065 -186.01869202]
[-7.72458649 -200.59794617]
[-2.98462653 -214.83822632]
[2.90028501 -228.64476013]
[9.89098454 -241.92568970]
[17.94094849 -254.59260559]
[26.99660492 -266.56121826]
[36.99769211 -277.75189209]
[47.87764740 -288.09014893]
[59.56407166 -297.50717163]
[71.97919464 -305.94027710]
[85.04038239 -313.33340454]
[98.66072083 -319.63729858]
[112.74957275 -324.81002808]
[127.21317291 -328.81716919]
[141.95526123 -331.63204956]
[156.87774658 -333.23593140]
[171.88130188 -333.61813354]
[186.86608887 -332.77615356]
[201.73237610 -330.71554565]
[216.38125610 -327.45004272]
[230.71520996 -323.00140381]
[244.63885498 -317.39916992]
[258.05953979 -310.68069458]
[270.88793945 -302.89065552]
[283.03869629 -294.08087158]
[294.43093872 -284.31002808]
[304.98883057 -273.64309692]
[314.64215088 -262.15109253]
[323.32662964 -249.91047668]
[330.98449707 -237.00271606]
[337.56475830 -223.51373291]
[343.02365112 -209.53326416]
[347.32482910 -195.15437317]
[350.43966675 -180.47273254]
[352.34744263 -165.58604431]
[353.03546143 -150.59339905]
[352.49914551 -135.59457397]
[350.74206543 -120.68935394]
[347.77587891 -105.97695160]
[343.62039185 -91.55528259]
[338.30319214 -77.52030945]
[331.85974121 -63.96544647]
[324.33282471 -50.98089218]
[315.77261353 -38.65305710]
[306.23605347 -27.06398582]
[295.78659058 -16.29080200]
[284.49377441 -6.40520048]
[272.43273926 2.52703142]
[259.68380737 10.44645023]
[246.33177185 17.30035210]
[232.46549988 23.04312515]
[218.17729187 27.63655090]
[203.56219482 31.05006218]
[188.71751404 33.26094055]
[173.74200439 34.25447464]
[158.73535156 34.02405167]
[143.79740906 32.57120514]
[129.02760315 29.90559959]
[125.16947937 44.40093994]
[121.31136322 58.89628220]
[117.45323944 73.39162445]
[113.59512329 87.88696289]
[127.28675842 127.15445709]
[128.18667603 142.12744141]
[131.55102539 147.92391968]
[131.45462036 153.67675781]
[128.81083679 157.71520996]
[129.11097717 172.71220398]
[129.41110229 187.70919800]
[129.71122742 202.70620728]
[130.01136780 217.70320129]
[130.31149292 232.70019531]
[130.61163330 247.69718933]
[130.91175842 262.69418335]
[131.21189880 277.69119263]
[131.51202393 292.68817139]
[131.81216431 307.68518066]
[146.60021973 310.51483154]
[160.47665405 316.35763550]
[172.83483887 324.95816040]
[183.13453674 335.94039917]
[190.92547607 348.82431030]
[195.86709595 363.04663086]
[197.74333191 377.98559570]
[196.47219849 392.98822021]
[192.10923767 407.39855957]
[184.84519958 420.58670044]
[174.99763489 431.97613525]
[162.99702454 441.06893921]
[149.36798096 447.46762085]
[134.70631409 450.89242554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 129]
[26 128]
[31 42]
[32 41]
[33 40]
[43 127]
[44 126]
[45 125]
[46 124]
[47 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
