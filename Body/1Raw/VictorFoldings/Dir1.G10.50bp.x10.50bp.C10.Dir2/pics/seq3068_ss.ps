%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACGAAAGGACGGGGGGGGGGAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCGUAAAUGAUAUCxxxxxxxxxxAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACCCCCCCCCCCACUAAAGGAC\
) } def
/len { sequence length } bind def

/coor [
[68.59197998 379.99087524]
[55.37178802 372.71841431]
[44.48498154 362.27142334]
[36.67385101 349.36215210]
[32.47097015 334.87084961]
[32.16289902 319.78552246]
[35.77064133 305.13467407]
[43.04821396 291.91729736]
[53.49942017 281.03454590]
[66.41168213 273.22839355]
[80.90461731 269.03109741]
[80.59255981 254.03434753]
[80.28050995 239.03759766]
[79.96845245 224.04083252]
[79.65639496 209.04408264]
[79.34433746 194.04733276]
[79.03227997 179.05058289]
[78.72022247 164.05381775]
[78.40817261 149.05706787]
[78.09611511 134.06031799]
[71.18013763 147.37081909]
[66.60950470 161.65750122]
[54.73312378 170.82000732]
[39.75423813 171.61558533]
[26.97410965 163.76266479]
[20.91582870 150.04052734]
[23.72351646 135.30563354]
[34.40348816 124.77291870]
[49.17613220 122.17008209]
[63.29752731 117.11180878]
[48.47977066 114.78070831]
[33.66201019 112.44960022]
[18.84425354 110.11849976]
[4.02649593 107.78739166]
[-10.81470966 105.61055756]
[-25.67775726 103.58822632]
[-35.61359406 115.39002991]
[-50.35942078 119.92478943]
[-65.20990753 115.74547577]
[-75.42630768 104.18568420]
[-77.74861145 88.93411255]
[-71.43577576 74.85748291]
[-58.50220871 66.44758606]
[-43.07495880 66.38799286]
[-30.07681084 74.69773102]
[-23.65542221 88.72517395]
[-8.79237556 90.74751282]
[-1.69468582 88.51850891]
[6.35759974 92.96963501]
[21.17535782 95.30074310]
[35.99311447 97.63184357]
[50.81087494 99.96295166]
[65.62863159 102.29405212]
[68.03571320 90.75952148]
[74.05365753 81.10297394]
[82.71153259 74.36044312]
[92.77838135 71.14079285]
[102.93394470 71.57667542]
[111.94056702 75.33902740]
[121.92329407 64.14325714]
[121.20102692 48.58317947]
[131.48442078 37.37128830]
[146.32302856 36.77861404]
[156.30575562 25.58284760]
[166.28848267 14.38708210]
[169.57749939 -3.70054603]
[186.39619446 -8.61288738]
[196.14384460 -20.01390839]
[205.89149475 -31.41493034]
[215.63916016 -42.81595230]
[205.65466309 -54.04198456]
[197.29185486 -66.52304840]
[190.70648193 -80.02663422]
[186.02127075 -94.30117035]
[183.32347107 -109.08074188]
[182.66336060 -124.09000397]
[184.05323792 -139.04934692]
[187.46719360 -153.68009949]
[192.84162903 -167.70967102]
[200.07644653 -180.87672424]
[209.03683472 -192.93595886]
[219.55589294 -203.66271973]
[231.43763733 -212.85716248]
[244.46072388 -220.34802246]
[258.38253784 -225.99572754]
[272.94375610 -229.69506836]
[287.87307739 -231.37713623]
[302.89236450 -231.01058960]
[317.72186279 -228.60226440]
[332.08526611 -224.19702148]
[345.71502686 -217.87692261]
[358.35720825 -209.75970459]
[369.77627563 -199.99661255]
[379.75955200 -188.76950073]
[388.12103271 -176.28752136]
[394.70492554 -162.78323364]
[399.38861084 -148.50817871]
[402.08477783 -133.72831726]
[402.74328613 -118.71898651]
[401.35177612 -103.75978851]
[397.93624878 -89.12941742]
[392.56030273 -75.10041809]
[385.32406616 -61.93414688]
[376.36236572 -49.87588501]
[365.84213257 -39.15026474]
[353.95941162 -29.95710564]
[340.93548584 -22.46766472]
[327.01306152 -16.82146835]
[312.45144653 -13.12369919]
[297.52197266 -11.44324684]
[282.50271606 -11.81141663]
[267.67346191 -14.22134972]
[253.31054688 -18.62815094]
[239.68147278 -24.94972229]
[227.04017639 -33.06829834]
[217.29252625 -21.66727829]
[207.54487610 -10.26625633]
[197.79722595 1.13476443]
[198.41783142 13.25590897]
[190.33399963 22.84082031]
[177.48425293 24.36980820]
[167.50152588 35.56557465]
[157.51879883 46.76134109]
[158.62426758 61.57057953]
[148.65985107 73.06688690]
[133.11906433 74.12598419]
[123.13632965 85.32175446]
[129.07049561 106.31761932]
[117.52252197 126.89369965]
[93.09286499 133.74826050]
[93.40492249 148.74501038]
[93.71697998 163.74177551]
[94.02903748 178.73852539]
[94.34109497 193.73527527]
[94.65314484 208.73202515]
[94.96520233 223.72879028]
[95.27725983 238.72554016]
[95.58931732 253.72229004]
[95.90137482 268.71905518]
[110.55636597 272.30981445]
[123.78217316 279.57208252]
[134.67704773 290.01065063]
[142.49813843 302.91387939]
[146.71220398 317.40194702]
[147.03193665 332.48703003]
[143.43550110 347.14065552]
[136.16813660 360.36364746]
[125.72534180 371.25448608]
[112.81910706 379.07058716]
[98.32942200 383.27908325]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[30 53]
[31 52]
[32 51]
[33 50]
[34 49]
[35 47]
[36 46]
[59 127]
[60 126]
[63 123]
[64 122]
[65 121]
[67 118]
[68 117]
[69 116]
[70 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
