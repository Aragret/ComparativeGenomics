%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUUUUCAUGGGGGGGGGGGAUUUGAGAAGCCUUCGCUUCGAAGCGAAAAGUCCUAAUAGUAGAAGAACxxxxxxxxxxCAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACUUCUCCCCCCCCCCCCAUAAUAUUCAU\
) } def
/len { sequence length } bind def

/coor [
[76.61632538 478.05960083]
[62.59438324 472.50659180]
[50.39442444 463.64025879]
[40.78335190 452.01794434]
[34.36532593 438.37026978]
[31.54379082 423.55508423]
[32.49610519 408.50369263]
[37.16241074 394.16226196]
[45.24937820 381.43231201]
[56.24865341 371.11404419]
[69.46881104 363.85607910]
[84.07882690 360.11462402]
[84.07882690 345.11462402]
[84.07882690 330.11462402]
[84.07882690 315.11462402]
[84.07882690 300.11462402]
[84.07882690 285.11462402]
[84.07882690 270.11462402]
[84.07882690 255.11462402]
[84.07882690 240.11462402]
[84.07882690 225.11462402]
[84.07882690 210.11462402]
[82.12838745 208.02015686]
[80.91676331 205.00334167]
[80.80852509 201.35162354]
[82.05370331 197.48211670]
[84.74521637 193.89666748]
[85.97583008 178.94723511]
[87.20644379 163.99780273]
[88.43704987 149.04835510]
[89.66766357 134.09892273]
[90.89827728 119.14949036]
[85.43854523 115.41130829]
[81.39701080 110.17217255]
[79.16727448 103.94232941]
[64.39515686 101.33760834]
[49.62304306 98.73287964]
[34.85092545 96.12815857]
[20.07880974 93.52343750]
[5.30669308 90.91871643]
[-9.91001225 97.03295135]
[-22.64470291 86.70049286]
[-19.79701996 70.55049133]
[-4.29641724 65.19667053]
[7.91141605 76.14659882]
[22.68353271 78.75131989]
[37.45565033 81.35604095]
[52.22776413 83.96076965]
[66.99987793 86.56549072]
[81.77199554 89.17021179]
[90.35489655 81.11836243]
[101.90931702 78.88368225]
[108.45718384 65.38829803]
[115.00505829 51.89291382]
[121.55292511 38.39752960]
[121.06045532 33.94139481]
[121.95760345 29.97671318]
[123.90901184 26.88822937]
[126.48718262 24.90776062]
[129.23200989 24.09724617]
[136.86499023 11.18454838]
[144.49795532 -1.72814918]
[152.13092041 -14.64084721]
[151.86660767 -33.02455521]
[167.42289734 -41.08969498]
[174.78912354 -54.15639114]
[182.15536499 -67.22308350]
[189.52160645 -80.28977966]
[177.64399719 -89.49523163]
[167.23336792 -100.33203888]
[158.51159668 -112.56922150]
[151.66459656 -125.94593811]
[146.83833313 -140.17706299]
[144.13565063 -154.95925903]
[143.61416626 -169.97744751]
[145.28498840 -184.91151428]
[149.11251831 -199.44313049]
[155.01516724 -213.26255798]
[162.86712646 -226.07522583]
[172.50100708 -237.60806274]
[183.71148682 -247.61520386]
[196.25959778 -255.88337708]
[209.87788391 -262.23632812]
[224.27607727 -266.53866577]
[239.14726257 -268.69866943]
[254.17448425 -268.67028809]
[269.03741455 -266.45413208]
[283.41925049 -262.09744263]
[297.01342773 -255.69311523]
[309.53024292 -247.37760925]
[320.70281982 -237.32818604]
[330.29309082 -225.75904846]
[338.09658813 -212.91680908]
[343.94702148 -199.07518005]
[347.71963501 -184.52922058]
[349.33404541 -169.58894348]
[348.75582886 -154.57284546]
[345.99734497 -139.80096436]
[341.11734009 -125.58816528]
[334.21987915 -112.23740387]
[325.45196533 -100.03324890]
[315.00045776 -89.23583984]
[303.08816528 -80.07530975]
[289.96899414 -72.74693298]
[275.92257690 -67.40689850]
[261.24832153 -64.16904449]
[246.25898743 -63.10237122]
[231.27407837 -64.22962189]
[216.61302185 -67.52677155]
[202.58830261 -72.92353821]
[195.22206116 -59.85684586]
[187.85581970 -46.79014969]
[180.48957825 -33.72345734]
[183.43594360 -21.95140648]
[177.35456848 -10.98836708]
[165.04362488 -7.00787735]
[157.41065979 5.90482092]
[149.77767944 18.81751823]
[142.14471436 31.73021698]
[135.04830933 44.94540024]
[128.50044250 58.44078445]
[121.95256805 71.93616486]
[115.40470123 85.43154907]
[120.45156860 105.59265900]
[105.84770966 120.38010406]
[104.61709595 135.32954407]
[103.38648987 150.27897644]
[102.15587616 165.22840881]
[100.92526245 180.17784119]
[99.69464874 195.12727356]
[99.07882690 210.11462402]
[99.07882690 225.11462402]
[99.07882690 240.11462402]
[99.07882690 255.11462402]
[99.07882690 270.11462402]
[99.07882690 285.11462402]
[99.07882690 300.11462402]
[99.07882690 315.11462402]
[99.07882690 330.11462402]
[99.07882690 345.11462402]
[99.07882690 360.11462402]
[113.68883514 363.85607910]
[126.90899658 371.11404419]
[137.90826416 381.43231201]
[145.99523926 394.16226196]
[150.66154480 408.50369263]
[151.61386108 423.55508423]
[148.79232788 438.37026978]
[142.37429810 452.01794434]
[132.76322937 463.64025879]
[120.56327057 472.50659180]
[106.54132080 478.05960083]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[27 130]
[28 129]
[29 128]
[30 127]
[31 126]
[32 125]
[35 50]
[36 49]
[37 48]
[38 47]
[39 46]
[40 45]
[52 123]
[53 122]
[54 121]
[55 120]
[60 119]
[61 118]
[62 117]
[63 116]
[65 113]
[66 112]
[67 111]
[68 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
