%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUUAACCCGGGGGGGGGGAAGUCAAUAGAAGCCGGCGUAAAGAGUGUUUUAGAUCACCCCCUCCCCAAxxxxxxxxxxAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCCCCCCCCCCCGAUAAACCC\
) } def
/len { sequence length } bind def

/coor [
[55.74859238 576.24908447]
[41.90265274 570.23309326]
[30.19399261 560.70367432]
[21.49146843 548.36798096]
[16.44086647 534.14147949]
[15.41697502 519.07977295]
[18.49577332 504.30062866]
[25.44879532 490.90069580]
[35.76007843 479.87438965]
[48.66446304 472.03985596]
[63.20434952 467.97854614]
[63.20434952 452.97854614]
[63.20434952 437.97854614]
[63.20434952 422.97854614]
[63.20434952 407.97854614]
[63.20434952 392.97854614]
[63.20434952 377.97854614]
[63.20434952 362.97854614]
[63.20434952 347.97854614]
[63.20434952 332.97854614]
[63.20434952 317.97854614]
[54.16660690 312.88162231]
[48.04004288 304.40728760]
[46.00186920 294.06811523]
[48.49196243 283.74493408]
[55.12010956 275.34457397]
[64.72544098 270.44781494]
[65.66106415 255.47703552]
[66.59669495 240.50624084]
[67.53232574 225.53544617]
[68.46794891 210.56465149]
[69.40357971 195.59385681]
[66.66410065 188.67715454]
[70.51759338 180.32237244]
[63.86502838 166.99598694]
[72.72268677 153.88673401]
[73.96956635 138.93864441]
[75.21643829 123.99055481]
[69.38855743 137.81213379]
[56.31953049 145.17422485]
[41.47853851 142.99595642]
[31.07629013 132.18885803]
[29.46596146 117.27555084]
[37.32144547 104.49699402]
[51.35535431 99.20082092]
[65.69573975 103.60413361]
[53.43337631 94.96501160]
[41.17100525 86.32589722]
[26.52881432 91.46261597]
[11.67343903 86.97959900]
[2.31707430 74.60066223]
[2.05743408 59.08575821]
[10.99435520 46.40068436]
[25.69140816 41.42311096]
[40.49728012 46.06701660]
[49.71880341 58.54672241]
[49.81012344 74.06352997]
[62.07249069 82.70264435]
[74.33486176 91.34175873]
[82.69172668 82.53637695]
[93.12640381 79.00753784]
[102.89021301 80.62378693]
[110.61429596 67.76538849]
[118.33837891 54.90698624]
[126.06246948 42.04858017]
[116.00471497 33.03931046]
[107.70379639 22.39434624]
[101.42102814 10.45104313]
[97.35379791 -2.41241598]
[95.62937164 -15.78898335]
[96.30088806 -29.25562859]
[99.34575653 -42.38672256]
[104.66638184 -54.76747894]
[112.09329987 -66.00707245]
[121.39060211 -75.75095367]
[132.26338196 -83.69205475]
[144.36712646 -89.58045959]
[157.31860352 -93.23126984]
[170.70805359 -94.53038788]
[184.11206055 -93.43811798]
[197.10702515 -89.99036407]
[209.28251648 -84.29743958]
[218.04872131 -96.46927643]
[226.81492615 -108.64111328]
[228.60147095 -124.36112976]
[242.31793213 -130.16696167]
[251.08413696 -142.33880615]
[259.85034180 -154.51063538]
[260.95739746 -170.87237549]
[275.79776001 -177.85060120]
[289.10494995 -168.26670837]
[287.18966675 -151.97979736]
[272.02218628 -145.74443054]
[263.25598145 -133.57258606]
[254.48977661 -121.40075684]
[253.33026123 -106.55135345]
[238.98677063 -99.87490845]
[230.22056580 -87.70307159]
[221.45434570 -75.53123474]
[232.63395691 -63.26183319]
[240.86955261 -48.84293747]
[245.76176453 -32.96829605]
[247.07212830 -16.40238762]
[244.73475647 0.05639049]
[238.85958862 15.61420822]
[229.72732544 29.52008629]
[217.77590942 41.10214996]
[203.57960510 49.80007935]
[187.82135010 55.19223404]
[171.25994873 57.01608276]
[154.69346619 55.18097687]
[138.92086792 49.77266693]
[131.19677734 62.63106918]
[123.47270203 75.48947144]
[115.74861145 88.34787750]
[118.54103851 114.17432404]
[90.16452789 125.23743439]
[88.91764832 140.18551636]
[87.67077637 155.13360596]
[94.23416138 169.52917480]
[85.46568298 181.56924438]
[84.37437439 196.52949524]
[83.43874359 211.50027466]
[82.50311279 226.47106934]
[81.56748962 241.44186401]
[80.63185883 256.41265869]
[79.69622803 271.38345337]
[93.77714539 285.63034058]
[92.95856476 305.34194946]
[78.20434570 317.97854614]
[78.20434570 332.97854614]
[78.20434570 347.97854614]
[78.20434570 362.97854614]
[78.20434570 377.97854614]
[78.20434570 392.97854614]
[78.20434570 407.97854614]
[78.20434570 422.97854614]
[78.20434570 437.97854614]
[78.20434570 452.97854614]
[78.20434570 467.97854614]
[92.74423218 472.03985596]
[105.64861298 479.87438965]
[115.95989990 490.90069580]
[122.91292572 504.30062866]
[125.99172211 519.07977295]
[124.96782684 534.14147949]
[119.91722870 548.36798096]
[111.21470642 560.70367432]
[99.50604248 570.23309326]
[85.66010284 576.24908447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[27 127]
[28 126]
[29 125]
[30 124]
[31 123]
[32 122]
[34 121]
[36 119]
[37 118]
[38 117]
[46 59]
[47 58]
[48 57]
[62 115]
[63 114]
[64 113]
[65 112]
[82 99]
[83 98]
[84 97]
[86 95]
[87 94]
[88 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
