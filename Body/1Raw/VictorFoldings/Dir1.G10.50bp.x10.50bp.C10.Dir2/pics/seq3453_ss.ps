%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCACCAGGGGGGGGGGAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCGCCxxxxxxxxxxUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUCAGAGUACUUCGAGUCUCCCCCCCCCCCCCUUCACCA\
) } def
/len { sequence length } bind def

/coor [
[57.67242813 422.47552490]
[43.82648849 416.45950317]
[32.11782837 406.93008423]
[23.41530228 394.59442139]
[18.36470032 380.36788940]
[17.34080887 365.30621338]
[20.41960907 350.52703857]
[27.37262917 337.12713623]
[37.68391418 326.10079956]
[50.58829498 318.26626587]
[65.12818146 314.20495605]
[65.12818146 299.20495605]
[65.12818146 284.20495605]
[65.12818146 269.20495605]
[65.12818146 254.20497131]
[65.12818146 239.20497131]
[65.12818146 224.20497131]
[65.12818146 209.20497131]
[65.12818146 194.20497131]
[65.12818146 179.20497131]
[65.12818146 164.20497131]
[81.91780090 93.50986481]
[71.47798920 82.73905945]
[61.03817368 71.96824646]
[50.59836197 61.19744110]
[40.04707336 50.53581238]
[29.38544464 39.98452377]
[18.72381973 29.43323326]
[7.07058334 38.90156555]
[-5.53806257 47.05443573]
[-18.95428848 53.79625320]
[-33.02079773 59.04797745]
[-47.57266617 62.74802780]
[-62.43927765 64.85302734]
[-77.44633484 65.33829498]
[-92.41788483 64.19815063]
[-107.17839050 61.44594193]
[-121.55480194 57.11395264]
[-135.37855530 51.25297165]
[-148.48757935 43.93170929]
[-160.72816467 35.23600769]
[-171.95680237 25.26782227]
[-182.04185486 14.14402008]
[-190.86508179 1.99502361]
[-198.32301331 -11.03672600]
[-204.32821655 -24.79843712]
[-208.81028748 -39.12876511]
[-211.71669006 -53.85968781]
[-213.01332092 -68.81849670]
[-212.68499756 -83.82981110]
[-210.73554993 -98.71762085]
[-207.18786621 -113.30738068]
[-202.08351135 -127.42803192]
[-195.48234558 -140.91401672]
[-187.46176147 -153.60722351]
[-178.11579895 -165.35882568]
[-167.55401611 -176.03103638]
[-155.90028381 -185.49874878]
[-143.29119873 -193.65093994]
[-129.87460327 -200.39204407]
[-115.80781555 -205.64300537]
[-101.25574493 -209.34226990]
[-86.38901520 -211.44647217]
[-71.38193512 -211.93093872]
[-56.41044617 -210.78997803]
[-41.65008926 -208.03697205]
[-27.27391243 -203.70422363]
[-13.45047569 -197.84248352]
[-0.34185117 -190.52052307]
[11.89827061 -181.82415771]
[23.12637901 -171.85537720]
[33.21083450 -160.73103333]
[42.03339386 -148.58155823]
[49.49062347 -135.54940796]
[55.49509048 -121.78736877]
[59.97639847 -107.45680237]
[62.88199615 -92.72572327]
[64.17782593 -77.76684570]
[63.84869385 -62.75555038]
[61.89845657 -47.86784363]
[58.34997940 -33.27827454]
[53.24486923 -19.15789795]
[46.64297485 -5.67226505]
[38.62170792 7.02050829]
[29.27511024 18.77160645]
[39.93673706 29.32289696]
[50.59836197 39.87418747]
[57.61029053 42.35985184]
[61.36917114 50.75762939]
[71.80898285 61.52843475]
[82.24879456 72.29924774]
[92.68860626 83.07005310]
[85.58437347 69.85907745]
[87.13072968 54.93899918]
[96.79330444 43.46578217]
[111.23297119 39.40425873]
[125.45978546 44.15797424]
[134.55734253 56.08417892]
[135.38179016 71.06150818]
[127.64821625 83.91419983]
[114.02877808 90.20077515]
[128.84652710 87.86967468]
[143.66429138 85.53856659]
[148.01980591 70.91009521]
[158.29739380 59.62586212]
[172.45643616 53.92636108]
[187.68563843 54.94323730]
[200.96124268 62.47458649]
[209.64735413 75.02504730]
[212.01934814 90.10272980]
[207.60626221 104.71393585]
[197.28431702 115.95761108]
[183.10293579 121.60130310]
[167.87785339 120.52446747]
[154.63201904 112.94090271]
[145.99539185 100.35632324]
[131.17764282 102.68743134]
[116.35987854 105.01853180]
[115.27146149 112.43914032]
[112.00620270 134.70094299]
[125.53039551 141.18911743]
[139.05458069 147.67727661]
[155.95065308 149.07695007]
[159.28298950 165.70018005]
[144.23187256 173.50404358]
[132.56642151 161.20146179]
[119.04222870 154.71330261]
[105.51804352 148.22512817]
[99.17057800 152.22009277]
[80.12818146 164.20497131]
[80.12818146 179.20497131]
[80.12818146 194.20497131]
[80.12818146 209.20497131]
[80.12818146 224.20497131]
[80.12818146 239.20497131]
[80.12818146 254.20497131]
[80.12818146 269.20495605]
[80.12818146 284.20495605]
[80.12818146 299.20495605]
[80.12818146 314.20495605]
[94.66806793 318.26626587]
[107.57244873 326.10079956]
[117.88373566 337.12713623]
[124.83675385 350.52703857]
[127.91555786 365.30621338]
[126.89166260 380.36788940]
[121.84106445 394.59442139]
[113.13853455 406.93008423]
[101.42987823 416.45950317]
[87.58393860 422.47552490]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 92]
[23 91]
[24 90]
[25 89]
[26 87]
[27 86]
[28 85]
[101 118]
[102 117]
[103 116]
[120 128]
[121 127]
[122 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
