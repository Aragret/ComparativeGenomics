%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCACCCUCGGGGGGGGGGUACAUCACCGCCCCGACCUUAGCUCUCACCAUCGCUCUUCUACUAUGAACxxxxxxxxxxUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCGCCUUAAUUUUAAUAAUCCCCCCCCCCCAACACCCUC\
) } def
/len { sequence length } bind def

/coor [
[28.24492073 249.60505676]
[20.06022263 245.39634705]
[12.12147236 240.74029541]
[4.45309734 235.65122986]
[-2.92131042 230.14480591]
[-9.97906113 224.23796082]
[-16.69844055 217.94888306]
[-23.05877686 211.29692078]
[-29.04049873 204.30252075]
[-41.12048721 213.19487000]
[-53.20047760 222.08721924]
[-65.28046417 230.97956848]
[-77.36045074 239.87191772]
[-89.44043732 248.76426697]
[-95.96731567 263.17642212]
[-110.80385590 264.49035645]
[-122.88384247 273.38272095]
[-129.41072083 287.79486084]
[-144.24725342 289.10879517]
[-156.32723999 298.00112915]
[-162.40449524 313.23266602]
[-178.67060852 315.31726074]
[-188.39241028 302.11050415]
[-181.56893921 287.19833374]
[-165.21958923 285.92114258]
[-153.13960266 277.02880859]
[-147.47677612 263.25268555]
[-131.77619934 261.30270386]
[-119.69620514 252.41036987]
[-114.03337097 238.63424683]
[-98.33279419 236.68428040]
[-86.25279999 227.79193115]
[-74.17281342 218.89958191]
[-62.09282684 210.00723267]
[-50.01283646 201.11488342]
[-37.93284988 192.22253418]
[-53.39710236 163.24394226]
[-62.84981537 131.78684998]
[-65.92054749 99.08406830]
[-62.48895264 66.41716766]
[-52.68952179 35.06636429]
[-66.21370697 28.57819939]
[-79.73789978 22.09003448]
[-92.36966705 30.82696533]
[-107.67886353 32.06148911]
[-121.54739380 25.46152687]
[-130.24468994 12.80243301]
[-131.43121338 -2.51055908]
[-124.78781891 -16.35833168]
[-112.10152435 -25.01590157]
[-96.78488922 -26.15442848]
[-82.95800781 -19.46765327]
[-74.34024811 -6.75428438]
[-73.24973297 8.56584454]
[-59.72554398 15.05400944]
[-46.20135498 21.54217529]
[-40.97528839 12.49894810]
[-35.19060135 3.80245161]
[-28.87020493 -4.51285458]
[-22.03915215 -12.41401958]
[-14.72450924 -19.86973572]
[-6.95526123 -26.85045815]
[1.23780596 -33.32852554]
[9.82222652 -39.27826691]
[18.76398277 -44.67610931]
[28.02764511 -49.50065613]
[37.57649994 -53.73279953]
[47.37271881 -57.35576248]
[57.37747192 -60.35519028]
[67.55112457 -62.71919632]
[77.85335541 -64.43841553]
[88.24334717 -65.50603485]
[98.67992401 -65.91782379]
[109.12172699 -65.67214966]
[119.52738953 -64.76998138]
[129.85566711 -63.21490479]
[140.06565857 -61.01307297]
[150.11686707 -58.17321777]
[159.96948242 -54.70658493]
[169.58447266 -50.62691498]
[178.92373657 -45.95037460]
[186.64781189 -58.80877686]
[194.37190247 -71.66717529]
[202.09597778 -84.52558136]
[209.82006836 -97.38397980]
[205.75219727 -112.65578461]
[213.74674988 -126.28893280]
[229.06069946 -130.19511414]
[242.60856628 -122.05686951]
[246.35263062 -106.70246887]
[238.07159424 -93.24140930]
[222.67846680 -89.65989685]
[214.95439148 -76.80149841]
[207.23030090 -63.94309235]
[199.50621033 -51.08469009]
[191.78213501 -38.22628784]
[208.61952209 -25.42832565]
[223.69218445 -10.59253597]
[236.75523376 6.04004240]
[247.59642029 24.19918251]
[256.03961182 43.58985519]
[270.36221313 39.13303757]
[284.68481445 34.67622375]
[293.38894653 21.19966698]
[309.36599731 19.74577713]
[320.35971069 31.42985344]
[317.93667603 47.28887177]
[303.95562744 55.15715027]
[289.14163208 48.99882126]
[274.81903076 53.45563507]
[260.49642944 57.91245270]
[262.58312988 66.87616730]
[264.16964722 75.94179535]
[265.25103760 85.08144379]
[265.82400513 94.26699066]
[265.88677979 103.47017670]
[265.43917847 112.66268921]
[264.48257446 121.81623840]
[263.01989746 130.90266418]
[261.05569458 139.89401245]
[258.59594727 148.76263428]
[255.64823914 157.48121643]
[252.22166443 166.02294922]
[248.32675171 174.36154175]
[243.97549438 182.47135925]
[239.18125916 190.32742310]
[233.95880127 197.90559387]
[228.32420349 205.18252563]
[222.29478455 212.13586426]
[215.88911438 218.74418640]
[209.12687683 224.98716736]
[202.02890015 230.84559631]
[194.61700439 236.30145264]
[186.91401672 241.33796692]
[178.94360352 245.93962097]
[170.73031616 250.09226990]
[162.29940796 253.78312683]
[153.67683411 257.00085449]
[144.88909912 259.73550415]
[135.96327209 261.97872925]
[126.92678833 263.72360229]
[117.80745697 264.96472168]
[108.63333893 265.69830322]
[99.43266296 265.92211914]
[90.23372650 265.63540649]
[81.06484222 264.83908081]
[71.95420837 263.53561401]
[62.92987061 261.72900391]
[54.01958466 259.42480469]
[45.25076294 256.63009644]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[16 29]
[17 28]
[19 26]
[20 25]
[41 56]
[42 55]
[43 54]
[81 96]
[82 95]
[83 94]
[84 93]
[85 92]
[101 111]
[102 110]
[103 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
