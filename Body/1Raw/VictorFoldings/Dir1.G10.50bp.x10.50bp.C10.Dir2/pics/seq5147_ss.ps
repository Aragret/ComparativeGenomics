%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGCCUUCUGGGGGGGGGGCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAxxxxxxxxxxCAACAUACUCGGAUUCUACCCUAGCAUCACACACCGCACAAUCCCCUAUCCCCCCCCCCCUAGGCCUUCU\
) } def
/len { sequence length } bind def

/coor [
[69.86501312 373.90103149]
[56.64481735 366.62857056]
[45.75801468 356.18154907]
[37.94688416 343.27230835]
[33.74400330 328.78100586]
[33.43592834 313.69564819]
[37.04367065 299.04483032]
[44.32124329 285.82745361]
[54.77245331 274.94467163]
[67.68471527 267.13851929]
[82.17765045 262.94125366]
[81.86559296 247.94448853]
[81.55353546 232.94773865]
[81.24147797 217.95097351]
[80.92942810 202.95422363]
[80.61737061 187.95747375]
[80.30531311 172.96072388]
[79.99325562 157.96395874]
[79.68119812 142.96720886]
[79.36914062 127.97045898]
[69.50341797 116.67144775]
[54.68566132 114.34034729]
[39.86790466 112.00924683]
[25.05014610 109.67813873]
[10.23238850 107.34703827]
[-4.60881710 105.17019653]
[-19.47186470 103.14786530]
[-34.37376785 101.43517303]
[-49.30807495 100.03286743]
[-64.25616455 98.78599548]
[-79.21640778 97.69468689]
[-85.40079498 111.53409576]
[-95.94779968 122.42153931]
[-109.58382416 129.04231262]
[-124.66225433 130.59690857]
[-139.36228943 126.89762878]
[-151.90884399 118.39116669]
[-160.78683472 106.10470581]
[-164.92422485 91.52191925]
[-163.82139587 76.40373230]
[-157.61151123 62.57574463]
[-147.04446411 51.70775223]
[-133.39625549 45.11212158]
[-118.31498718 43.58530807]
[-103.62179565 47.31167603]
[-91.09094238 55.84125137]
[-82.23560333 68.14404297]
[-78.12509918 82.73443604]
[-63.16485214 83.82574463]
[-56.22001648 81.15836334]
[-47.90576935 85.09856415]
[-32.97146225 86.50086975]
[-28.74362373 84.15547180]
[-22.98847389 84.48645020]
[-17.44952965 88.28482056]
[-2.58648252 90.30715179]
[4.51120663 88.07814789]
[12.56349277 92.52927399]
[27.38125038 94.86038208]
[42.19900894 97.19148254]
[57.01676559 99.52259064]
[71.83452606 101.85369110]
[85.61800385 79.14788055]
[109.33097076 79.59713745]
[119.77078247 68.82633209]
[130.21058655 58.05551910]
[140.65040588 47.28470993]
[151.09020996 36.51390457]
[141.61769104 24.86024666]
[133.59001160 12.16801929]
[127.11985779 -1.38459921]
[122.29806519 -15.60735130]
[119.19232941 -30.30057335]
[117.84624481 -45.25799179]
[118.27870941 -60.26963425]
[120.48365021 -75.12475586]
[124.43011475 -89.61480713]
[130.06269836 -103.53638458]
[137.30233765 -116.69404602]
[146.04739380 -128.90307617]
[156.17509460 -139.99208069]
[167.54327393 -149.80537415]
[179.99234009 -158.20521545]
[193.34750366 -165.07368469]
[207.42131042 -170.31433105]
[222.01617432 -173.85360718]
[236.92718506 -175.64183044]
[251.94505310 -175.65388489]
[266.85891724 -173.88958740]
[281.45944214 -170.37374878]
[295.54165649 -165.15568542]
[308.90783691 -158.30867004]
[321.37033081 -149.92881775]
[332.75424194 -140.13377380]
[342.89974976 -129.06103516]
[351.66436768 -116.86605835]
[358.92510986 -103.72003174]
[364.58004761 -89.80751038]
[368.54977417 -75.32380676]
[370.77853394 -60.47224426]
[371.23510742 -45.46131897]
[369.91302490 -30.50175667]
[366.83087158 -15.80357075]
[362.03189087 -1.57309806]
[355.58349609 11.98988628]
[347.57620239 24.69498062]
[338.12240601 36.36382294]
[327.35479736 46.83260345]
[315.42459106 55.95435715]
[302.49923706 63.60102844]
[288.76019287 69.66526794]
[274.40032959 74.06194305]
[259.62124634 76.72933197]
[244.63041687 77.62998962]
[229.63827515 76.75127411]
[214.85530090 74.10551453]
[200.48901367 69.72986603]
[186.74110413 63.68574142]
[173.80458069 56.05799866]
[161.86102295 46.95371628]
[151.42121887 57.72452545]
[140.98139954 68.49533081]
[130.54159546 79.26614380]
[120.10177612 90.03694916]
[123.30962372 97.93960571]
[123.39088440 106.82298279]
[120.07621002 115.44664001]
[113.58760834 122.51352692]
[104.63976288 126.86349487]
[94.36589813 127.65840149]
[94.67795563 142.65515137]
[94.99001312 157.65190125]
[95.30206299 172.64866638]
[95.61412048 187.64541626]
[95.92617798 202.64216614]
[96.23823547 217.63891602]
[96.55029297 232.63568115]
[96.86235046 247.63243103]
[97.17440033 262.62918091]
[111.82939911 266.21994019]
[125.05520630 273.48220825]
[135.95007324 283.92080688]
[143.77116394 296.82400513]
[147.98524475 311.31207275]
[148.30496216 326.39718628]
[144.70854187 341.05078125]
[137.44117737 354.27377319]
[126.99836731 365.16461182]
[114.09214020 372.98074341]
[99.60244751 377.18920898]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 56]
[27 55]
[28 52]
[29 51]
[30 49]
[31 48]
[64 124]
[65 123]
[66 122]
[67 121]
[68 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
