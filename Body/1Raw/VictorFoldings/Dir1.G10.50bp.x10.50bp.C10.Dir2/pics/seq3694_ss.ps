%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUCCUAGGGGGGGGGGUUUAUUCUAGCCACCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGxxxxxxxxxxCUCAUUCAACCAAUAGCCCUGGCCGUACGCCUAACCGCUAACAUUACUGCCCCCCCCCCCAGGCCACCUA\
) } def
/len { sequence length } bind def

/coor [
[80.07611084 401.12985229]
[66.85591125 393.85739136]
[55.96911240 383.41036987]
[48.15798187 370.50112915]
[43.95509720 356.00979614]
[43.64702606 340.92446899]
[47.25476837 326.27365112]
[54.53234100 313.05627441]
[64.98355103 302.17349243]
[77.89581299 294.36734009]
[92.38874817 290.17004395]
[92.07669067 275.17330933]
[91.76463318 260.17654419]
[91.45257568 245.17979431]
[91.14051819 230.18304443]
[90.82846832 215.18629456]
[90.51641083 200.18952942]
[90.20435333 185.19277954]
[89.89229584 170.19602966]
[89.58023834 155.19927979]
[83.77957153 150.44509888]
[81.34584808 165.24635315]
[67.31076813 170.53939819]
[55.70924759 161.03125000]
[58.14269257 146.22994995]
[72.17823029 140.93673706]
[66.37755585 136.18255615]
[51.61150360 138.82142639]
[36.84544754 141.46028137]
[22.07939148 144.09915161]
[13.25115013 157.20783997]
[-2.27638531 160.15252686]
[-15.29100323 151.18618774]
[-18.07136154 135.62838745]
[-8.96792316 122.70929718]
[6.61840391 120.09357452]
[19.44052696 129.33309937]
[34.20658112 126.69422913]
[48.97263718 124.05536652]
[63.73869324 121.41650391]
[62.97022629 93.95345306]
[78.44777679 75.10662842]
[99.48339844 71.67118073]
[103.18955994 57.13624191]
[106.89572144 42.60130310]
[110.60187531 28.06636810]
[106.51417542 12.78234768]
[117.15621185 2.36138797]
[120.86237335 -12.17354774]
[124.56853485 -26.70848465]
[127.51401520 -41.41644669]
[129.69085693 -56.25765228]
[131.86769104 -71.09885406]
[119.10829926 -79.04394531]
[111.40852356 -92.78224945]
[111.27365112 -109.24890900]
[119.42424774 -124.37894440]
[111.17195892 -136.90490723]
[102.91967010 -149.43086243]
[88.02470398 -156.29177856]
[86.78858948 -172.64427185]
[100.48292542 -181.66630554]
[115.02016449 -174.07678223]
[115.44563293 -157.68315125]
[123.69792175 -145.15719604]
[131.95021057 -132.63122559]
[146.85211182 -134.34391785]
[152.04753113 -148.41543579]
[157.24295044 -162.48695374]
[162.43835449 -176.55848694]
[149.75859070 -184.68482971]
[139.12251282 -195.34729004]
[131.02760315 -208.04713440]
[125.85245514 -222.19041443]
[123.83913422 -237.11557007]
[125.08181000 -252.12457275]
[129.52235413 -266.51538086]
[136.95306396 -279.61495972]
[147.02641296 -290.81054688]
[159.27124023 -299.57858276]
[173.11483765 -305.50891113]
[187.90971375 -308.32421875]
[202.96388245 -307.89276123]
[217.57322693 -304.23477173]
[231.05445862 -297.52130127]
[242.77702332 -288.06637573]
[252.19262695 -276.31222534]
[258.86090088 -262.80859375]
[262.46997070 -248.18707275]
[262.85101318 -233.13154602]
[259.98620605 -218.34617615]
[254.00952148 -204.52252197]
[245.20054626 -192.30712891]
[233.97126770 -182.27131653]
[220.84689331 -174.88450623]
[206.44128418 -170.49218750]
[191.42822266 -169.29977417]
[176.50987244 -171.36306763]
[171.31446838 -157.29154968]
[166.11904907 -143.22003174]
[160.92362976 -129.14851379]
[174.37590027 -112.36948395]
[175.28669739 -91.78542328]
[164.36386108 -75.38749695]
[146.70889282 -68.92201996]
[144.53205872 -54.08081436]
[142.35522461 -39.23960876]
[155.92655945 -45.62858200]
[169.47608948 -39.19350433]
[173.10020447 -24.63789749]
[164.14997864 -12.60072899]
[149.16729736 -11.88019753]
[139.10346985 -23.00232315]
[135.39730835 -8.46738720]
[131.69114685 6.06754923]
[136.04393005 20.31193352]
[125.13681793 31.77252960]
[121.43065643 46.30746460]
[117.72449493 60.84240341]
[114.01833344 75.37733459]
[135.16950989 98.04993439]
[124.75450134 134.06997681]
[137.84765625 141.38908386]
[154.22879028 140.62072754]
[162.85585022 154.56726074]
[154.85403442 168.88169861]
[138.45494080 168.83857727]
[130.52854919 154.48223877]
[117.43539429 147.16313171]
[104.57699585 154.88722229]
[104.88905334 169.88397217]
[105.20110321 184.88072205]
[105.51316071 199.87748718]
[105.82521820 214.87423706]
[106.13727570 229.87098694]
[106.44933319 244.86773682]
[106.76139069 259.86450195]
[107.07344055 274.86123657]
[107.38549805 289.85800171]
[122.04048920 293.44876099]
[135.26629639 300.71102905]
[146.16116333 311.14962769]
[153.98226929 324.05282593]
[158.19633484 338.54089355]
[158.51605225 353.62600708]
[154.91963196 368.27960205]
[147.65226746 381.50259399]
[137.20947266 392.39343262]
[124.30323792 400.20956421]
[109.81354523 404.41802979]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[27 40]
[28 39]
[29 38]
[30 37]
[43 120]
[44 119]
[45 118]
[46 117]
[48 115]
[49 114]
[50 113]
[51 107]
[52 106]
[53 105]
[57 66]
[58 65]
[59 64]
[67 101]
[68 100]
[69 99]
[70 98]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
