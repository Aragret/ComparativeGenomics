%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUAUCCCUGGGGGGGGGGAUGAGGCAUAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAxxxxxxxxxxCACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUCCCCCCCCCCUACUAUCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 400.93414307]
[71.19830322 394.91812134]
[59.48964310 385.38870239]
[50.78712082 373.05303955]
[45.73651886 358.82650757]
[44.71262741 343.76483154]
[47.79142761 328.98568726]
[54.74444962 315.58575439]
[65.05573273 304.55941772]
[77.96011353 296.72491455]
[92.50000000 292.66360474]
[92.50000000 277.66360474]
[92.50000000 262.66360474]
[92.50000000 247.66358948]
[92.50000000 232.66358948]
[92.50000000 217.66358948]
[92.50000000 202.66358948]
[92.50000000 187.66358948]
[92.50000000 172.66358948]
[92.50000000 157.66358948]
[92.50000000 142.66358948]
[92.50000000 127.66359711]
[72.99219513 115.81401825]
[67.09479523 91.71648407]
[52.10210037 91.24844360]
[37.10940170 90.78039551]
[22.11670685 90.31235504]
[7.12401104 89.84431458]
[2.43123603 104.20240021]
[-6.11772585 116.65599060]
[-17.82984734 126.19553375]
[-31.75568008 132.04769897]
[-46.76631927 133.73808289]
[-61.64492035 131.12963867]
[-75.18534088 124.43384552]
[-86.28991699 114.19348145]
[-94.05845642 101.23869324]
[-97.86119080 86.61966705]
[-97.38985443 71.52150726]
[-92.68266296 57.16814804]
[-84.12119293 44.72314835]
[-72.39949036 35.19537735]
[-58.46778870 29.35720444]
[-43.45545578 27.68190384]
[-28.57948494 30.30528641]
[-15.04579926 37.01468277]
[-3.95151472 47.26619720]
[3.80400467 60.22878265]
[7.59205341 74.85161591]
[22.58474922 75.31966400]
[37.57744598 75.78770447]
[52.57014084 76.25574493]
[67.56283569 76.72378540]
[78.44166565 66.39658356]
[78.75371552 51.39982986]
[79.06577301 36.40307617]
[64.26250458 33.80239487]
[50.02974319 28.97238159]
[36.70113754 22.02625275]
[24.58912659 13.12683582]
[13.97763252 2.48274779]
[5.11540270 -9.65649891]
[-1.78981817 -23.00634384]
[-6.57616234 -37.25384903]
[-9.13143063 -52.06502533]
[-9.39572334 -67.09268951]
[-7.36284685 -81.98455811]
[-3.08045292 -96.39155579]
[3.35107231 -109.97595215]
[11.78096485 -122.41931915]
[22.01161575 -133.42996216]
[33.80320358 -142.74977112]
[46.87931824 -150.16029358]
[60.93343353 -155.48779297]
[75.63610077 -158.60739136]
[90.64267731 -159.44596863]
[105.60137177 -157.98387146]
[120.16154480 -154.25535583]
[133.98188782 -148.34783936]
[146.73841858 -140.39979553]
[158.13209534 -130.59753418]
[167.89587402 -119.17084503]
[175.80084229 -106.38758087]
[181.66171265 -92.54739380]
[185.34107971 -77.97472382]
[186.75273132 -63.01118088]
[185.86352539 -48.00752258]
[182.69435120 -33.31546021]
[177.31947327 -19.27939224]
[169.86489868 -6.22835016]
[160.50537109 5.53173399]
[149.46028137 15.72518635]
[136.98855591 24.11305809]
[123.38253021 30.49872398]
[108.96117401 34.73249817]
[94.06253052 36.71512985]
[93.75047302 51.71188354]
[93.43841553 66.70864105]
[112.62686920 71.36318970]
[124.50063324 85.12574768]
[138.91285706 80.96786499]
[153.32507324 76.80997467]
[167.73728943 72.65209198]
[175.15661621 58.69755173]
[190.29443359 54.15642166]
[204.16975403 61.72286987]
[208.55058289 76.90785980]
[200.83786011 90.70240021]
[185.60740662 94.92243958]
[171.89517212 87.06430817]
[157.48295593 91.22219086]
[143.07073975 95.38008118]
[128.65852356 99.53796387]
[128.66069031 100.29815674]
[128.64271545 101.05813599]
[142.96530151 105.51495361]
[157.28790283 109.97177124]
[171.61050415 114.42858124]
[187.47967529 110.29319000]
[198.80140686 122.15702057]
[193.92887878 137.81558228]
[177.87451172 141.16069031]
[167.15368652 128.75117493]
[152.83108521 124.29436493]
[138.50848389 119.83754730]
[124.18589020 115.38073730]
[119.70091248 120.81822968]
[114.02452087 124.99674988]
[107.50000000 127.66359711]
[107.50000000 142.66358948]
[107.50000000 157.66358948]
[107.50000000 172.66358948]
[107.50000000 187.66358948]
[107.50000000 202.66358948]
[107.50000000 217.66358948]
[107.50000000 232.66358948]
[107.50000000 247.66358948]
[107.50000000 262.66360474]
[107.50000000 277.66360474]
[107.50000000 292.66360474]
[122.03988647 296.72491455]
[134.94427490 304.55941772]
[145.25555420 315.58575439]
[152.20857239 328.98568726]
[155.28736877 343.76483154]
[154.26348877 358.82650757]
[149.21287537 373.05303955]
[140.51036072 385.38870239]
[128.80169678 394.91812134]
[114.95575714 400.93414307]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[54 98]
[55 97]
[56 96]
[100 113]
[101 112]
[102 111]
[103 110]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
