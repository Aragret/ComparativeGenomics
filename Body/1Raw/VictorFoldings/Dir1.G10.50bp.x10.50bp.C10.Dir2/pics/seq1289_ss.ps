%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAAAAAACUCCAGGGGGGGGGGGUUGACACAAAAUAGACUACGAAAGUGGCUUUAACAUAUCUGAACACACAxxxxxxxxxxCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUCACCCCCCCCCCCGAAAAAAACUCUA\
) } def
/len { sequence length } bind def

/coor [
[83.48959351 486.68569946]
[69.21782684 481.87625122]
[56.31384277 474.11087036]
[45.38119125 463.75271606]
[36.93120193 451.28628540]
[31.35910606 437.29467773]
[28.92551804 422.43225098]
[29.74425888 407.39416504]
[33.77703476 392.88378906]
[40.83522797 379.57980347]
[50.58871460 368.10446167]
[62.58130264 358.99447632]
[76.25207520 352.67593384]
[90.96163940 349.44436646]
[90.96163940 334.44436646]
[90.96163940 319.44436646]
[90.96163940 304.44436646]
[90.96163940 289.44436646]
[90.96163940 274.44436646]
[90.96163940 259.44436646]
[90.96163940 244.44436646]
[90.96163940 229.44436646]
[90.96163940 214.44436646]
[90.96163940 199.44436646]
[90.96163940 184.44436646]
[87.79902649 177.71786499]
[91.11471558 169.14498901]
[91.41484070 154.14799500]
[77.65939331 150.06604004]
[65.43415833 142.55482483]
[55.57648849 132.12882996]
[48.76159286 119.50219727]
[45.45624542 105.53976440]
[45.88684845 91.19789124]
[50.02391052 77.45891571]
[57.58406067 65.26387787]
[68.04946899 55.44807816]
[80.70331573 48.68383789]
[94.67888641 45.43447876]
[95.27902985 30.44649124]
[95.87917328 15.45850086]
[87.70323181 5.43547058]
[88.54456329 -7.06940556]
[97.40368652 -15.35742950]
[98.30360413 -30.33041000]
[99.05367279 -45.31164551]
[99.65381622 -60.29963303]
[100.25395966 -75.28762054]
[100.85410309 -90.27561188]
[101.45424652 -105.26360321]
[102.05438995 -120.25159454]
[102.65453339 -135.23957825]
[87.81204224 -137.51564026]
[73.31772614 -141.43925476]
[59.35385895 -146.96107483]
[46.09606171 -154.01165771]
[33.71105576 -162.50234985]
[22.35460281 -172.32633972]
[12.16951752 -183.36010742]
[3.28389120 -195.46488953]
[-4.19053173 -208.48844910]
[-10.15975189 -222.26699829]
[-14.54870033 -236.62725830]
[-17.30218124 -251.38864136]
[-18.38556480 -266.36550903]
[-17.78523064 -281.36947632]
[-15.50872421 -296.21191406]
[-11.58467770 -310.70611572]
[-6.06243944 -324.66979980]
[0.98854280 -337.92739868]
[9.47959518 -350.31216431]
[19.30393410 -361.66830444]
[30.33800888 -371.85305786]
[42.44305038 -380.73834229]
[55.46683121 -388.21237183]
[69.24555969 -394.18118286]
[83.60595703 -398.56970215]
[98.36741638 -401.32272339]
[113.34430695 -402.40567017]
[128.34828186 -401.80487061]
[143.19062805 -399.52792358]
[157.68472290 -395.60345459]
[171.64825439 -390.08081055]
[184.90562439 -383.02941895]
[197.29013062 -374.53799438]
[208.64599609 -364.71331787]
[218.83041382 -353.67892456]
[227.71531677 -341.57363892]
[235.18896484 -328.54962158]
[241.15736389 -314.77072144]
[245.54544067 -300.41018677]
[248.29804993 -285.64865112]
[249.38053894 -270.67172241]
[248.77929688 -255.66777039]
[246.50190735 -240.82548523]
[242.57699585 -226.33151245]
[237.05392456 -212.36814880]
[230.00215149 -199.11097717]
[221.51034546 -186.72674561]
[211.68533325 -175.37117004]
[200.65065002 -165.18707275]
[188.54507446 -156.30253601]
[175.52084351 -148.82928467]
[161.74176025 -142.86129761]
[147.38110352 -138.47363281]
[132.61947632 -135.72148132]
[117.64252472 -134.63943481]
[117.04238129 -119.65145111]
[116.44223785 -104.66345978]
[115.84209442 -89.67546844]
[115.24195099 -74.68747711]
[114.64179993 -59.69948959]
[114.04165649 -44.71150208]
[116.93260956 -37.86385345]
[113.27658081 -29.43049431]
[112.37667084 -14.45751381]
[121.06908417 0.75998187]
[110.86716461 16.05864525]
[110.26702118 31.04663467]
[109.66687012 46.03462601]
[124.43556976 50.92237473]
[137.23683167 59.76160431]
[147.03997803 71.84062195]
[153.05570984 86.18688965]
[154.79966736 101.64531708]
[152.13142395 116.97127533]
[145.26583862 130.93078613]
[134.75567627 142.39991760]
[121.44716644 150.45521545]
[106.41184235 154.44812012]
[106.11170959 169.44512939]
[105.96163940 184.44436646]
[105.96163940 199.44436646]
[105.96163940 214.44436646]
[105.96163940 229.44436646]
[105.96163940 244.44436646]
[105.96163940 259.44436646]
[105.96163940 274.44436646]
[105.96163940 289.44436646]
[105.96163940 304.44436646]
[105.96163940 319.44436646]
[105.96163940 334.44436646]
[105.96163940 349.44436646]
[120.67119598 352.67593384]
[134.34196472 358.99447632]
[146.33456421 368.10446167]
[156.08804321 379.57980347]
[163.14624023 392.88378906]
[167.17901611 407.39416504]
[167.99775696 422.43225098]
[165.56416321 437.29467773]
[159.99206543 451.28628540]
[151.54208374 463.75271606]
[140.60942078 474.11087036]
[127.70544434 481.87625122]
[113.43367767 486.68569946]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[25 132]
[27 131]
[28 130]
[39 120]
[40 119]
[41 118]
[44 116]
[45 115]
[46 113]
[47 112]
[48 111]
[49 110]
[50 109]
[51 108]
[52 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
