%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCACACUUAGGGGGGGGGGUCCCCACCUUGGCUAUCAUCACCCGAUGAGGCAACCAGCCAGAACGCCUGxxxxxxxxxxCUCCACUUCAAGUCAACUAGGACUCAUAAUAGUUACAAUCGGCAUCAACCCCCCCCCCCCAACCACACCUA\
) } def
/len { sequence length } bind def

/coor [
[85.60877228 393.03894043]
[72.68961334 385.28057861]
[61.90831757 374.75155640]
[53.84630203 362.01968384]
[48.93833923 347.77157593]
[47.44911575 332.77560425]
[49.45893860 317.84051514]
[54.85942459 303.77169800]
[63.35932922 291.32788086]
[74.50025940 281.18017578]
[87.68141174 273.87576294]
[102.19192505 269.80865479]
[101.57610321 254.82128906]
[100.96028137 239.83393860]
[100.34445190 224.84658813]
[99.72863007 209.85923767]
[99.11280060 194.87187195]
[98.49697876 179.88452148]
[97.88114929 164.89717102]
[97.26532745 149.90982056]
[96.64949799 134.92247009]
[96.03367615 119.93511200]
[94.26194763 134.83010864]
[84.42704010 146.15594482]
[69.92761993 149.99871826]
[55.77429581 145.03048706]
[46.85806274 132.96810913]
[46.26012421 117.98003387]
[54.18711090 105.24571991]
[67.89967346 99.16578674]
[82.65944672 101.84146118]
[68.51213074 96.85614014]
[54.36481476 91.87081909]
[40.21749878 86.88549805]
[26.07018089 81.90017700]
[18.78294754 95.29760742]
[-0.67760015 100.90641785]
[-15.33032513 97.69741821]
[-29.98304939 94.48842621]
[-44.63577271 91.27942657]
[-59.28849792 88.07043457]
[-74.74339294 93.55479431]
[-87.04315186 82.70822144]
[-83.53482819 66.68874359]
[-67.82749176 61.97582245]
[-56.07950211 73.41770935]
[-41.42677689 76.62670135]
[-26.77405357 79.83570099]
[-12.12132835 83.04469299]
[2.53139615 86.25369263]
[8.80080128 72.62671661]
[-3.16945720 63.58719254]
[-19.45309067 58.86706924]
[-19.42518806 41.91314316]
[-3.12610435 37.24664307]
[5.87006235 51.61693573]
[17.84032059 60.65645599]
[31.05550385 67.75286102]
[45.20281982 72.73818207]
[59.35013580 77.72350311]
[73.49745178 82.70882416]
[87.64476776 87.69414520]
[102.22851562 84.18498230]
[112.55942535 73.30966949]
[113.01890564 60.37937164]
[121.89919281 51.52996826]
[134.02816772 51.14227676]
[144.58018494 40.48136902]
[155.13218689 29.82045937]
[164.04833984 17.75802803]
[171.14474487 4.54284573]
[158.23703003 12.18423462]
[143.71896362 15.95594501]
[128.72410583 15.56348991]
[114.42321014 11.03750992]
[101.93287659 2.73138571]
[92.22834015 -8.70635319]
[86.06729889 -22.38266754]
[83.93080139 -37.22973633]
[85.98566437 -52.08831787]
[92.07144928 -65.79828644]
[101.71298218 -77.28919220]
[114.15747070 -85.66383362]
[128.43327332 -90.26834106]
[143.42575073 -90.74320221]
[157.96432495 -87.05133820]
[170.91384888 -79.48101044]
[181.26324463 -68.62328339]
[188.20443726 -55.32592010]
[191.19546509 -40.62715530]
[190.00282288 -25.67464447]
[184.71835327 -11.63355446]
[196.50048828 -20.91694069]
[208.28263855 -30.20032501]
[220.06477356 -39.48371124]
[221.67727661 -55.20552444]
[233.98704529 -65.11737823]
[249.69093323 -63.33874512]
[259.47207642 -50.92485809]
[257.52752686 -35.24065781]
[245.01092529 -25.59129715]
[229.34815979 -27.70157433]
[217.56602478 -18.41818810]
[205.78387451 -9.13480282]
[194.00173950 0.14858222]
[184.35992432 11.63924885]
[177.26351929 24.85443115]
[190.48208618 17.76432228]
[205.39685059 16.16749763]
[219.81678772 20.29854012]
[231.62355042 29.55058289]
[239.08268738 42.56446838]
[241.09843445 57.42840958]
[237.37464905 71.95884705]
[228.45838928 84.02119446]
[215.65948486 91.84346008]
[200.85812378 94.27652740]
[186.22869873 90.96295929]
[173.92030334 82.38954163]
[165.74110413 69.81573486]
[162.89263916 55.08867645]
[165.79310608 40.37247467]
[155.24108887 51.03338242]
[144.68907166 61.69429398]
[141.18899536 78.86386108]
[123.43473816 83.64057159]
[113.10383606 94.51588440]
[117.25191498 105.87080383]
[111.02102661 119.31928253]
[111.63685608 134.30664062]
[112.25267792 149.29399109]
[112.86850739 164.28134155]
[113.48432922 179.26869202]
[114.10015106 194.25605774]
[114.71598053 209.24340820]
[115.33180237 224.23075867]
[115.94763184 239.21810913]
[116.56345367 254.20545959]
[117.17928314 269.19281006]
[131.97456360 272.05578613]
[145.71052551 278.25415039]
[157.64643860 287.45367432]
[167.13858032 299.15817261]
[173.67507935 312.73651123]
[176.90341187 327.45639038]
[176.64949036 342.52395630]
[172.92700195 357.12670898]
[165.93670654 370.47708130]
[156.05555725 381.85510254]
[143.81645203 390.64721680]
[129.87942505 396.37921143]
[114.99608612 398.74203491]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[31 62]
[32 61]
[33 60]
[34 59]
[35 58]
[37 50]
[38 49]
[39 48]
[40 47]
[41 46]
[51 57]
[52 56]
[63 127]
[64 126]
[67 124]
[68 123]
[69 122]
[70 107]
[71 106]
[92 105]
[93 104]
[94 103]
[95 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
