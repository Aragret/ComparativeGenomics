%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAAAAAUGGGGGGGGGGUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCAxxxxxxxxxxAUUCAGAAUAAUAACACACCCGACCACACCGCUAACAAUCAAUACUAAACCCCCCCCCCCCCCCAUAAAU\
) } def
/len { sequence length } bind def

/coor [
[79.18245697 153.38011169]
[66.07752228 146.17436218]
[55.28377151 135.82269287]
[47.53659821 123.03036499]
[43.36383057 108.66895294]
[43.04976654 93.71691132]
[46.61579895 79.19294739]
[53.81896973 66.08659363]
[64.16851807 55.29081345]
[76.95932007 47.54112625]
[91.31991577 43.36553574]
[91.00785828 28.36878395]
[90.69580078 13.37202930]
[90.38374329 -1.62472427]
[90.07168579 -16.62147713]
[89.75962830 -31.61823082]
[89.44757843 -46.61498642]
[89.13552094 -61.61174011]
[88.82346344 -76.60848999]
[88.51140594 -91.60524750]
[88.19934845 -106.60199738]
[87.88729095 -121.59875488]
[87.57524109 -136.59550476]
[87.26318359 -151.59225464]
[86.95112610 -166.58901978]
[86.63906860 -181.58576965]
[71.64762878 -182.22555542]
[56.72695541 -183.81486511]
[41.93711853 -186.34730530]
[27.33767700 -189.81269836]
[12.98741913 -194.19705200]
[-1.05587280 -199.48274231]
[-14.73565102 -205.64846802]
[-27.99683189 -212.66940308]
[-40.78601456 -220.51728821]
[-53.05170441 -229.16052246]
[-64.74451447 -238.56428528]
[-75.81735229 -248.69071960]
[-86.22563171 -259.49905396]
[-95.92745209 -270.94577026]
[-104.88374329 -282.98477173]
[-113.05843353 -295.56756592]
[-120.41861725 -308.64352417]
[-126.93464661 -322.15994263]
[-132.58029175 -336.06243896]
[-137.33282471 -350.29501343]
[-141.17309570 -364.80035400]
[-144.08563232 -379.52005005]
[-146.05874634 -394.39483643]
[-147.08444214 -409.36480713]
[-147.15863037 -424.36972046]
[-146.28099060 -439.34912109]
[-144.45506287 -454.24267578]
[-141.68820190 -468.99044800]
[-137.99154663 -483.53305054]
[-133.37997437 -497.81192017]
[-127.87207794 -511.76956177]
[-121.49000549 -525.34973145]
[-114.25947571 -538.49786377]
[-106.20960236 -551.16082764]
[-97.37278748 -563.28784180]
[-87.78462219 -574.82989502]
[-77.48371887 -585.74060059]
[-66.51155090 -595.97607422]
[-54.91229630 -605.49499512]
[-42.73266983 -614.25903320]
[-30.02170753 -622.23303223]
[-16.83059502 -629.38476562]
[-3.21245122 -635.68542480]
[10.77789116 -641.10968018]
[25.08409691 -645.63574219]
[39.64855957 -649.24530029]
[54.41263199 -651.92388916]
[69.31686401 -653.66064453]
[84.30124664 -654.44860840]
[99.30542755 -654.28466797]
[114.26901245 -653.16937256]
[129.13172913 -651.10729980]
[143.83374023 -648.10668945]
[158.31582642 -644.17968750]
[172.51971436 -639.34210205]
[186.38816833 -633.61334229]
[199.86535645 -627.01654053]
[212.89701843 -619.57824707]
[225.43067932 -611.32843018]
[237.41586304 -602.30023193]
[248.80430603 -592.53009033]
[259.55017090 -582.05731201]
[269.61016846 -570.92407227]
[278.94378662 -559.17523193]
[287.51345825 -546.85803223]
[295.28466797 -534.02209473]
[302.22613525 -520.71917725]
[308.30990601 -507.00271606]
[313.51144409 -492.92803955]
[317.80984497 -478.55181885]
[321.18780518 -463.93188477]
[323.63171387 -449.12716675]
[325.13171387 -434.19726562]
[325.68176270 -419.20223999]
[325.27966309 -404.20254517]
[323.92706299 -389.25857544]
[321.62933350 -374.43045044]
[318.39578247 -359.77792358]
[314.23944092 -345.35995483]
[309.17700195 -331.23464966]
[303.22888184 -317.45886230]
[296.41900635 -304.08807373]
[288.77481079 -291.17611694]
[280.32708740 -278.77496338]
[271.10983276 -266.93460083]
[261.16015625 -255.70263672]
[250.51814270 -245.12434387]
[239.22663879 -235.24232483]
[227.33111572 -226.09634399]
[214.87945557 -217.72323608]
[201.92181396 -210.15672302]
[188.51037598 -203.42727661]
[174.69911194 -197.56199646]
[160.54365540 -192.58447266]
[146.10101318 -188.51478577]
[131.42932129 -185.36929321]
[116.58766937 -183.16067505]
[101.63582611 -181.89782715]
[101.94787598 -166.90107727]
[102.25993347 -151.90431213]
[102.57199097 -136.90756226]
[102.88404846 -121.91081238]
[103.19610596 -106.91405487]
[103.50816345 -91.91730499]
[103.82021332 -76.92054749]
[104.13227081 -61.92379379]
[104.44432831 -46.92704010]
[104.75638580 -31.93028831]
[105.06844330 -16.93353462]
[105.38050079 -1.93678057]
[105.69255066 13.05997276]
[106.00460815 28.05672646]
[106.31666565 43.05348206]
[120.83852386 46.62807846]
[133.94062805 53.83897781]
[144.73031616 64.19489288]
[152.47245789 76.99025726]
[156.63957214 91.35330963]
[156.94775391 106.30547333]
[153.37602234 120.82803345]
[146.16769409 133.93154907]
[135.81390381 144.72326660]
[123.02005768 152.46792603]
[108.65782166 156.63787842]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 126]
[25 125]
[26 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
