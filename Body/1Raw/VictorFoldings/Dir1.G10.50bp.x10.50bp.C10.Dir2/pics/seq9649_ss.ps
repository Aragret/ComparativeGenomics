%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAACACCCGGGGGGGGGGACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCxxxxxxxxxxUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUAAUUUACACUCCCCCCCCCCCACAACACCC\
) } def
/len { sequence length } bind def

/coor [
[61.24005508 424.46978760]
[47.39411545 418.45373535]
[35.68545151 408.92431641]
[26.98292923 396.58865356]
[21.93232727 382.36215210]
[20.90843582 367.30044556]
[23.98723412 352.52130127]
[30.94025612 339.12136841]
[41.25154114 328.09503174]
[54.15592194 320.26052856]
[68.69580841 316.19921875]
[68.69580841 301.19921875]
[68.69580841 286.19921875]
[68.69580841 271.19921875]
[68.69580841 256.19921875]
[68.69580841 241.19921875]
[68.69580841 226.19921875]
[68.69580841 211.19921875]
[68.69580841 196.19921875]
[68.69580841 181.19921875]
[68.69580841 166.19921875]
[60.85996628 178.98982239]
[49.65745544 188.96498108]
[36.04727173 195.27076721]
[21.19451904 197.36735535]
[6.37067223 195.07528687]
[-7.15526772 188.59077454]
[-18.22540665 178.46891785]
[-25.89208412 165.57620239]
[-29.49898911 151.01632690]
[-28.73735046 136.03567505]
[-23.67237091 121.91667938]
[-14.73763943 109.86800385]
[-2.69801545 100.92107391]
[11.41584396 95.84180450]
[26.39571571 95.06500244]
[40.95924377 98.65716553]
[53.85971451 106.31079102]
[63.99277115 117.37068176]
[70.49097443 130.89004517]
[72.79807281 145.71498108]
[78.57434845 131.87176514]
[84.35061646 118.02854919]
[76.75713348 105.44983673]
[77.96783447 90.80677795]
[87.52412415 79.64602661]
[101.80616760 76.19518280]
[107.58243561 62.35196304]
[113.35871124 48.50874329]
[115.68981171 33.69098663]
[114.44293976 18.74290085]
[113.19606018 3.79481316]
[109.34256744 -4.55997086]
[112.08204651 -11.47668171]
[111.14642334 -26.44747353]
[110.21079254 -41.41826630]
[109.27516174 -56.38905716]
[108.33953857 -71.35984802]
[107.40390778 -86.33064270]
[92.49830627 -88.43016815]
[78.32057190 -93.48751831]
[65.45127869 -101.29559326]
[54.41740799 -111.53466797]
[45.67079163 -123.78544617]
[39.56959915 -137.54626465]
[36.36367035 -152.25364685]
[36.18428802 -167.30531311]
[39.03879166 -182.08491516]
[44.81029892 -195.98724365]
[53.26246643 -208.44299316]
[64.04918671 -218.94212341]
[76.72873688 -227.05468750]
[90.78191376 -232.44848633]
[105.63324738 -234.90264893]
[120.67457581 -234.31669617]
[135.28996277 -230.71458435]
[148.88093567 -224.24385071]
[160.89093018 -215.16944885]
[170.82817078 -203.86297607]
[178.28570557 -190.78742981]
[182.95817566 -176.47822571]
[184.65423584 -161.52134705]
[183.30442810 -146.52925110]
[178.96403503 -132.11585999]
[171.81080627 -118.87139130]
[162.13763428 -107.33819580]
[150.34063721 -97.98854828]
[136.90290833 -91.20531464]
[122.37469482 -87.26626587]
[123.31032562 -72.29547882]
[124.24595642 -57.32468414]
[125.18157959 -42.35389328]
[126.11721039 -27.38310242]
[127.05284119 -12.41231060]
[128.14414978 2.54793859]
[129.39102173 17.49602509]
[130.63789368 32.44411087]
[137.31913757 19.01425934]
[147.07670593 7.62172413]
[159.32019043 -1.04414415]
[173.30873108 -6.45898628]
[188.19592285 -8.29515743]
[203.08096313 -6.44155407]
[217.06315613 -1.01033413]
[229.29647827 7.66986609]
[239.04069519 19.07382011]
[245.70620728 32.51148987]
[248.88969421 47.16977692]
[248.39852905 62.16173172]
[244.26240540 76.58021545]
[236.73162842 89.55277252]
[226.26185608 100.29446411]
[213.48661804 108.15531921]
[199.17889404 112.65969086]
[184.20446777 113.53501892]
[169.46937561 110.72834778]
[155.86526489 104.40950012]
[144.21525574 94.96082306]
[135.22431946 82.95403290]
[129.43644714 69.11566162]
[127.20192719 54.28501892]
[121.42565155 68.12823486]
[115.64938354 81.97145081]
[123.24286652 94.55016327]
[122.03216553 109.19322205]
[112.47587585 120.35397339]
[98.19383240 123.80481720]
[92.41756439 137.64804077]
[86.64128876 151.49125671]
[83.69580841 166.19921875]
[83.69580841 181.19921875]
[83.69580841 196.19921875]
[83.69580841 211.19921875]
[83.69580841 226.19921875]
[83.69580841 241.19921875]
[83.69580841 256.19921875]
[83.69580841 271.19921875]
[83.69580841 286.19921875]
[83.69580841 301.19921875]
[83.69580841 316.19921875]
[98.23569489 320.26052856]
[111.14007568 328.09503174]
[121.45136261 339.12136841]
[128.40438843 352.52130127]
[131.48318481 367.30044556]
[130.45928955 382.36215210]
[125.40869141 396.58865356]
[116.70616150 408.92431641]
[104.99750519 418.45373535]
[91.15156555 424.46978760]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[41 129]
[42 128]
[43 127]
[47 123]
[48 122]
[49 121]
[50 97]
[51 96]
[52 95]
[54 94]
[55 93]
[56 92]
[57 91]
[58 90]
[59 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
