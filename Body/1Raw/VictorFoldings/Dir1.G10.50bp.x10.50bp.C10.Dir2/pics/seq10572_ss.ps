%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUUUAAAGGGGGGGGGGGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCAAAAAUUUUGGUGCAACUCxxxxxxxxxxGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAACCCCCCCCCCAACUAUUAAA\
) } def
/len { sequence length } bind def

/coor [
[77.21874237 380.16537476]
[63.37280655 374.14935303]
[51.66414261 364.61993408]
[42.96162033 352.28427124]
[37.91101837 338.05773926]
[36.88712692 322.99606323]
[39.96592331 308.21688843]
[46.91894531 294.81695557]
[57.23023224 283.79061890]
[70.13461304 275.95611572]
[84.67449951 271.89480591]
[84.67449951 256.89480591]
[84.67449951 241.89480591]
[84.67449951 226.89480591]
[84.67449951 211.89480591]
[84.67449951 196.89480591]
[84.67449951 181.89480591]
[84.67449951 166.89480591]
[84.67449951 151.89480591]
[84.67449951 136.89480591]
[72.14853668 128.64251709]
[58.36615753 134.56248474]
[44.58377457 140.48245239]
[30.80139351 146.40240479]
[17.01901054 152.32237244]
[9.76131535 166.62989807]
[-5.97838354 169.73497009]
[-18.12593460 159.25563049]
[-17.36277771 143.23074341]
[-4.27434015 133.95321655]
[11.09904861 138.53999329]
[24.88142967 132.62002563]
[38.66381073 126.70006561]
[52.44619370 120.78010559]
[66.22857666 114.86013794]
[66.59778595 106.03161621]
[69.06211853 98.22766113]
[54.73952103 93.77085114]
[40.41692352 89.31403351]
[26.09432411 84.85721588]
[14.34053707 94.84981537]
[-0.95280665 96.87889862]
[-14.90565681 90.29698944]
[-23.06571007 77.20435333]
[-22.82912254 61.77880859]
[-14.27138805 48.94258118]
[-0.12324969 42.79166794]
[15.10067368 45.28880310]
[26.54248428 55.63716507]
[30.55113983 70.53462219]
[44.87373734 74.99143982]
[59.19633484 79.44824982]
[73.51892853 83.90506744]
[89.87384796 70.71254730]
[110.88459015 70.98587799]
[119.39568329 58.63430405]
[127.90677643 46.28273010]
[136.41786194 33.93115616]
[144.92895508 21.57958412]
[151.41711426 8.05539513]
[155.72470093 -6.31278944]
[160.03228760 -20.68097305]
[164.33987427 -35.04915619]
[153.16098022 -25.04754257]
[139.56573486 -18.70960045]
[124.71798706 -16.57789230]
[109.88876343 -18.83490562]
[96.34752655 -25.28742409]
[85.25348663 -35.38307953]
[77.55635071 -48.25763321]
[73.91503143 -62.80894852]
[74.64125061 -77.79135895]
[79.67283630 -91.92228699]
[88.57905579 -103.99205017]
[100.59749603 -112.96741486]
[114.69930267 -118.08003998]
[129.67729187 -118.89225769]
[144.24928284 -115.33453369]
[157.16780090 -107.71143341]
[167.32698059 -96.67553711]
[173.85713196 -83.17156982]
[176.19924927 -68.35554504]
[174.15185547 -53.49251556]
[183.66020203 -65.09385681]
[193.16856384 -76.69519806]
[186.29721069 -90.28579712]
[185.55418396 -105.49657440]
[191.06822205 -119.69217682]
[201.88400269 -130.41313171]
[216.12760925 -135.80197144]
[231.33125305 -134.92503357]
[244.86082458 -127.93427277]
[254.37222290 -116.04086304]
[258.21755981 -101.30541992]
[255.73059082 -86.28094482]
[247.34220886 -73.57051849]
[234.50573730 -65.37629700]
[219.44520569 -63.11798096]
[204.76991272 -67.18684387]
[195.26155090 -55.58549881]
[185.75318909 -43.98415756]
[178.70805359 -30.74157333]
[174.40046692 -16.37338829]
[170.09288025 -2.00520468]
[165.78530884 12.36297989]
[177.22619629 2.66214991]
[191.36538696 -2.34615493]
[206.36161804 -2.00972748]
[220.26197815 3.62762070]
[231.25631714 13.83176517]
[237.91288757 27.27386856]
[239.36482239 42.20343399]
[235.42304993 56.67625046]
[226.60090637 68.80760193]
[214.04722595 77.01766968]
[199.39683533 80.23730469]
[184.55758667 78.04722595]
[171.46189880 70.73264313]
[161.81518555 59.24608994]
[156.87367249 45.08340836]
[157.28053284 30.09067535]
[148.76943970 42.44224930]
[140.25834656 54.79381943]
[131.74725342 67.14539337]
[123.23616791 79.49696350]
[130.15116882 89.36074066]
[132.92512512 101.46760559]
[130.87632751 114.09754181]
[124.02942657 125.34727478]
[113.15164948 133.41676331]
[99.67449951 136.89480591]
[99.67449951 151.89480591]
[99.67449951 166.89480591]
[99.67449951 181.89480591]
[99.67449951 196.89480591]
[99.67449951 211.89480591]
[99.67449951 226.89480591]
[99.67449951 241.89480591]
[99.67449951 256.89480591]
[99.67449951 271.89480591]
[114.21438599 275.95611572]
[127.11876678 283.79061890]
[137.43005371 294.81695557]
[144.38307190 308.21688843]
[147.46186829 322.99606323]
[146.43797302 338.05773926]
[141.38737488 352.28427124]
[132.68486023 364.61993408]
[120.97619629 374.14935303]
[107.13025665 380.16537476]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 35]
[22 34]
[23 33]
[24 32]
[25 31]
[37 53]
[38 52]
[39 51]
[40 50]
[55 125]
[56 124]
[57 123]
[58 122]
[59 121]
[60 105]
[61 104]
[62 103]
[63 102]
[83 101]
[84 100]
[85 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
