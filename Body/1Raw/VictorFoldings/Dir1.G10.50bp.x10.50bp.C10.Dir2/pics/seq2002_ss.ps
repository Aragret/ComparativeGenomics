%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAGAAAUUGAGGGGGGGGGGAACCUGGCGCAAUAGAUAUAGUACCGCAAGGGAAAGAUGAAAAAUUAUAAxxxxxxxxxxGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUAAUCUUCCCCCCCCCCAUAGAAAUUUA\
) } def
/len { sequence length } bind def

/coor [
[93.93910217 411.75393677]
[79.91715240 406.20092773]
[67.71720123 397.33459473]
[58.10612869 385.71228027]
[51.68810272 372.06457520]
[48.86656570 357.24938965]
[49.81888199 342.19799805]
[54.48518753 327.85659790]
[62.57215118 315.12661743]
[73.57142639 304.80834961]
[86.79158783 297.55038452]
[101.40159607 293.80895996]
[101.40159607 278.80895996]
[101.40159607 263.80895996]
[101.40159607 248.80894470]
[101.40159607 233.80894470]
[101.40159607 218.80894470]
[101.40159607 203.80894470]
[101.40159607 188.80894470]
[101.40159607 173.80894470]
[101.40159607 158.80894470]
[101.40159607 143.80894470]
[101.40159607 128.80894470]
[96.07114410 123.53293610]
[85.51896667 134.19367981]
[74.85838318 123.64134216]
[85.41023254 112.98092651]
[80.07978058 107.70491791]
[65.08057404 107.85890961]
[50.08136368 108.01290894]
[44.77158356 122.23158264]
[34.68106079 133.56938171]
[21.17445755 140.49298096]
[6.07843018 142.06599426]
[-8.56540871 138.07569885]
[-20.77659798 129.06175232]
[-28.90367699 116.24320984]
[-31.84752464 101.35367584]
[-29.21000671 86.40684509]
[-21.34782982 73.42414093]
[-9.32428741 64.16136932]
[5.23453617 59.87125397]
[20.35967827 61.13399124]
[34.00558853 67.77880859]
[44.32677078 78.90704346]
[49.92736435 93.01370239]
[64.92657471 92.85970306]
[79.92578125 92.70570374]
[91.61199188 83.30184937]
[94.97125244 68.68283844]
[98.33051300 54.06383514]
[101.68976593 39.44482803]
[105.04902649 24.82581902]
[98.86480713 13.46100330]
[102.00621796 1.32416379]
[112.25012207 -5.18158340]
[115.90882111 -19.72853661]
[119.56752777 -34.27548981]
[123.22623444 -48.82244492]
[109.26050568 -54.35537338]
[96.13646698 -61.66390991]
[84.07870483 -70.62300110]
[73.29353333 -81.07934570]
[63.96549988 -92.85401154]
[56.25422668 -105.74553680]
[50.29166031 -119.53330994]
[46.17982864 -133.98141479]
[43.98908997 -148.84263611]
[43.75692749 -163.86265564]
[45.48731995 -178.78448486]
[49.15065384 -193.35276794]
[54.68424606 -207.31823730]
[61.99340820 -220.44192505]
[70.95307159 -232.49926758]
[81.40992737 -243.28393555]
[93.18504333 -252.61140442]
[106.07692719 -260.32208252]
[119.86499023 -266.28396606]
[134.31329346 -270.39511108]
[149.17462158 -272.58514404]
[164.19465637 -272.81658936]
[179.11639404 -271.08551025]
[193.68450928 -267.42147827]
[207.64970398 -261.88720703]
[220.77304077 -254.57742310]
[232.82995605 -245.61718750]
[243.61413574 -235.15982056]
[252.94104004 -223.38426208]
[260.65109253 -210.49200439]
[266.61233521 -196.70365906]
[270.72280884 -182.25515747]
[272.91213989 -167.39373779]
[273.14285278 -152.37368774]
[271.41104126 -137.45204163]
[267.74633789 -122.88409424]
[262.21139526 -108.91915131]
[254.90098572 -95.79616547]
[245.94018555 -83.73967743]
[235.48229980 -72.95600128]
[223.70629883 -63.62965012]
[210.81367493 -55.92021561]
[197.02503967 -49.95962143]
[182.57635498 -45.84984970]
[167.71482849 -43.66123199]
[152.69476318 -43.43121719]
[137.77319336 -45.16373825]
[134.11448669 -30.61678505]
[130.45578003 -16.06983185]
[126.79707336 -1.52287745]
[132.52102661 15.03854942]
[119.66803741 28.18507767]
[116.30877686 42.80408478]
[112.94951630 57.42309189]
[109.59025574 72.04209900]
[106.23100281 86.66110992]
[113.86396790 99.57380676]
[128.29135132 103.67874908]
[142.71873474 107.78369904]
[157.14611816 111.88864136]
[172.90933228 107.36609650]
[184.51803589 118.94927979]
[180.03019714 134.72239685]
[164.06251526 138.45942688]
[153.04118347 126.31602478]
[138.61380005 122.21108246]
[124.18640900 118.10613251]
[109.75902557 114.00119019]
[112.25978088 118.78067780]
[114.47641754 123.72090912]
[116.40159607 128.80894470]
[116.40159607 143.80894470]
[116.40159607 158.80894470]
[116.40159607 173.80894470]
[116.40159607 188.80894470]
[116.40159607 203.80894470]
[116.40159607 218.80894470]
[116.40159607 233.80894470]
[116.40159607 248.80894470]
[116.40159607 263.80895996]
[116.40159607 278.80895996]
[116.40159607 293.80895996]
[131.01161194 297.55038452]
[144.23176575 304.80834961]
[155.23104858 315.12661743]
[163.31800842 327.85659790]
[167.98431396 342.19799805]
[168.93663025 357.24938965]
[166.11509705 372.06457520]
[159.69706726 385.71228027]
[150.08599854 397.33459473]
[137.88604736 406.20092773]
[123.86409760 411.75393677]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[28 48]
[29 47]
[30 46]
[49 115]
[50 114]
[51 113]
[52 112]
[53 111]
[56 109]
[57 108]
[58 107]
[59 106]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
