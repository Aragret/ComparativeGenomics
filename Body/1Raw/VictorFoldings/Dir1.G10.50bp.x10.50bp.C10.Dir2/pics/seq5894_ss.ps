%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUCCUACCUAGGGGGGGGGGUCUCCCCUUUUAUACUAAUAAUCUUAUAGAAAUUUAGGUUAAAUACAGACxxxxxxxxxxCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCCCCCCCCCCCAACUCCUACAUA\
) } def
/len { sequence length } bind def

/coor [
[39.75146866 456.04675293]
[25.47970009 451.23733521]
[12.57571602 443.47192383]
[1.64306152 433.11380005]
[-6.80692482 420.64736938]
[-12.37902069 406.65573120]
[-14.81261063 391.79330444]
[-13.99386978 376.75521851]
[-9.96109200 362.24487305]
[-2.90289879 348.94088745]
[6.85058594 337.46551514]
[18.84317398 328.35552979]
[32.51395035 322.03698730]
[47.22350693 318.80545044]
[47.22350693 303.80545044]
[47.22350693 288.80545044]
[47.22350693 273.80545044]
[47.22350693 258.80545044]
[47.22350693 243.80543518]
[47.22350693 228.80543518]
[47.22350693 213.80543518]
[47.22350693 198.80543518]
[47.22350693 183.80543518]
[36.45892715 173.35920715]
[21.46568298 173.80937195]
[6.47243929 174.25952148]
[1.02694285 188.42364502]
[-9.39845467 199.39424133]
[-23.19251442 205.52104187]
[-38.24060059 205.89884949]
[-52.24883652 200.50123596]
[-63.09378433 190.17977905]
[-69.14431000 176.52986145]
[-84.13755798 176.98002625]
[-99.13079834 177.43017578]
[-114.12403870 177.88034058]
[-127.78157043 186.95800781]
[-142.34956360 179.42767334]
[-142.84170532 163.03591919]
[-128.75173950 154.64515686]
[-114.57420349 162.88710022]
[-99.58095551 162.43693542]
[-84.58771515 161.98677063]
[-69.59447479 161.53662109]
[-64.37376404 147.54827881]
[-54.16757965 136.59478760]
[-40.50839996 130.36648560]
[-25.46475601 129.84080505]
[-11.32796955 135.12899780]
[-0.26317653 145.45437622]
[6.02227879 159.26628113]
[21.01552200 158.81611633]
[36.00876617 158.36596680]
[47.30371094 135.26214600]
[70.35290527 131.93968201]
[78.32430267 119.23311615]
[86.29570770 106.52655029]
[75.34782410 69.20175171]
[76.54714966 54.24977493]
[77.74648285 39.29779816]
[78.94580841 24.34582138]
[80.14513397 9.39384365]
[81.34445953 -5.55813313]
[68.24545288 1.75049400]
[54.28779221 -3.74346638]
[49.68497467 -18.01981354]
[57.80511856 -30.63184357]
[72.70630646 -32.35071564]
[83.48451996 -21.91889763]
[86.17131042 -36.67630768]
[88.85810089 -51.43371582]
[75.15453339 -57.73158264]
[63.44822693 -67.24016571]
[54.47504425 -79.36174774]
[48.79904556 -93.33435822]
[46.77703476 -108.27967072]
[48.53611374 -123.25820160]
[53.96570587 -137.32839966]
[62.72450256 -149.60578918]
[74.26191711 -159.31860352]
[87.85270691 -165.85629272]
[102.64252472 -168.80789185]
[117.70169067 -167.98786926]
[132.08355713 -163.44775391]
[144.88407898 -155.47294617]
[155.29859924 -144.56475830]
[162.67245483 -131.40887451]
[166.54211426 -116.83229828]
[166.66432190 -101.75131989]
[163.03141785 -87.11394501]
[155.87174988 -73.84028625]
[145.63539124 -62.76473999]
[132.96580505 -54.58352661]
[118.65940857 -49.81091690]
[103.61551666 -48.74692535]
[100.92872620 -33.98951721]
[98.24192810 -19.23210526]
[96.29644012 -4.35880613]
[95.09711456 10.59317112]
[93.89778137 25.54514885]
[92.69845581 40.49712372]
[91.49913025 55.44910049]
[90.29980469 70.40107727]
[95.52291870 75.78337097]
[105.96915436 86.54795074]
[111.19226837 91.93024445]
[126.17350769 91.18017578]
[141.15473938 90.43010712]
[154.55075073 82.01241302]
[167.64900208 89.10361481]
[181.04501343 80.68592072]
[194.14324951 87.77712250]
[209.12449646 87.02705383]
[224.10572815 86.27698517]
[237.57888794 76.92787170]
[252.29463196 84.16519928]
[253.11465454 100.54383087]
[239.19540405 109.21483612]
[224.85578918 101.25822449]
[209.87455750 102.00829315]
[194.89332581 102.75835419]
[182.56887817 111.12239838]
[168.39906311 104.08484650]
[156.07461548 112.44889069]
[141.90480042 105.41133881]
[126.92356873 106.16140747]
[111.94233704 106.91147614]
[99.00227356 114.49795532]
[91.03086853 127.20452118]
[83.05946350 139.91108704]
[89.64185333 152.42370605]
[88.05027008 167.23567200]
[77.98910522 179.23129272]
[62.22350693 183.80543518]
[62.22350693 198.80543518]
[62.22350693 213.80543518]
[62.22350693 228.80543518]
[62.22350693 243.80543518]
[62.22350693 258.80545044]
[62.22350693 273.80545044]
[62.22350693 288.80545044]
[62.22350693 303.80545044]
[62.22350693 318.80545044]
[76.93306732 322.03698730]
[90.60384369 328.35552979]
[102.59642792 337.46551514]
[112.34991455 348.94088745]
[119.40811157 362.24487305]
[123.44088745 376.75521851]
[124.25962830 391.79330444]
[121.82603455 406.65573120]
[116.25393677 420.64736938]
[107.80395508 433.11380005]
[96.87129974 443.47192383]
[83.96731567 451.23733521]
[69.69554901 456.04675293]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 53]
[25 52]
[26 51]
[33 44]
[34 43]
[35 42]
[36 41]
[55 130]
[56 129]
[57 128]
[58 103]
[59 102]
[60 101]
[61 100]
[62 99]
[63 98]
[69 97]
[70 96]
[71 95]
[106 127]
[107 126]
[108 125]
[110 123]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
