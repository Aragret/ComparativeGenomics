%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUUCUAGGGGGGGGGGGGUAACGACCACAUCUACAACGUUAUCGUCACAGCCCAUGCAUUUGUAAUAAxxxxxxxxxxCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACACUAUUCUCACCAGCCCCCCCCCCACCUCCUAGG\
) } def
/len { sequence length } bind def

/coor [
[73.89665222 351.12832642]
[62.40049362 341.31356812]
[54.30943298 328.54541016]
[50.34292603 313.95916748]
[50.85367203 298.85186768]
[55.79625702 284.56683350]
[64.73118591 272.37426758]
[76.86397552 263.35833740]
[91.11578369 258.32073975]
[90.49180603 243.33372498]
[89.86782837 228.34671021]
[89.24385071 213.35969543]
[88.61987305 198.37268066]
[87.99589539 183.38566589]
[87.37191772 168.39865112]
[86.74794006 153.41163635]
[86.12396240 138.42462158]
[85.49998474 123.43759918]
[73.51315308 114.42007446]
[58.94044876 117.97483063]
[44.36774445 121.52959442]
[29.79504395 125.08435822]
[15.22234058 128.63911438]
[0.64963740 132.19387817]
[-13.92306519 135.74864197]
[-16.60224724 150.74003601]
[-25.15272331 163.34199524]
[-38.09307098 171.37113953]
[-53.18130112 173.43638611]
[-67.80328369 169.17991638]
[-79.42566681 159.33918762]
[-86.03481293 145.61915588]
[-86.48564148 130.39691162]
[-80.70004272 116.30980682]
[-69.68040466 105.79850006]
[-55.33595657 100.68414307]
[-40.15195084 101.85283661]
[-26.75911140 109.10209656]
[-17.47782707 121.17594147]
[-2.90512443 117.62117767]
[11.66757870 114.06641388]
[26.24028206 110.51165009]
[40.81298447 106.95689392]
[55.38568497 103.40213013]
[69.95838928 99.84736633]
[93.60355377 79.83982849]
[95.16114044 64.92092133]
[96.71871948 50.00200653]
[98.27629852 35.08309555]
[83.59323120 31.94627190]
[69.32678223 27.26647949]
[55.63859558 21.09674454]
[42.68376923 13.50697613]
[30.60909462 4.58316946]
[19.55138397 -5.57355976]
[9.63593197 -16.84812927]
[0.97508806 -29.11278915]
[-6.33301449 -42.22856903]
[-12.20556927 -56.04686356]
[-16.57603645 -70.41109467]
[-19.39489174 -85.15850830]
[-20.63020134 -100.12199402]
[-20.26796150 -115.13202667]
[-18.31228256 -130.01850891]
[-14.78532028 -144.61277771]
[-9.72703934 -158.74946594]
[-3.19475341 -172.26838684]
[4.73752165 -185.01637268]
[13.97990704 -196.84896851]
[24.42767906 -207.63211060]
[35.96245575 -217.24362183]
[48.45354462 -225.57456970]
[61.75940323 -232.53059387]
[75.72927094 -238.03285217]
[90.20485687 -242.01901245]
[105.02214813 -244.44389343]
[120.01324463 -245.28004456]
[135.00828552 -244.51797485]
[149.83737183 -242.16630554]
[164.33247375 -238.25170898]
[178.32936096 -232.81854248]
[191.66941833 -225.92834473]
[204.20150757 -217.65919495]
[215.78363037 -208.10479736]
[226.28454590 -197.37339783]
[235.58528137 -185.58659363]
[243.58042908 -172.87796021]
[250.17942810 -159.39146423]
[255.30747986 -145.27995300]
[258.90649414 -130.70327759]
[260.93569946 -115.82663727]
[261.37210083 -100.81858826]
[260.21072388 -85.84917450]
[257.46475220 -71.08802032]
[253.16531372 -56.70236969]
[247.36108398 -42.85523605]
[240.11787415 -29.70350838]
[231.51773071 -17.39621162]
[221.65809631 -6.07279539]
[210.65069580 4.13843870]
[198.62025452 13.12178802]
[185.70307922 20.77546501]
[172.04554749 27.01274872]
[157.80238342 31.76296234]
[143.13499451 34.97228622]
[128.20956421 36.60435486]
[113.19521332 36.64067459]
[111.63763428 51.55958939]
[110.08004761 66.47850037]
[108.52246857 81.39741516]
[113.32933044 67.18846893]
[125.82810211 58.89505005]
[140.78823853 59.98781586]
[151.94918823 70.00946045]
[154.64024353 84.76609802]
[147.73527527 98.08229828]
[134.12387085 104.38545990]
[119.50112915 101.03714752]
[133.02531433 107.52530670]
[146.10482788 99.34423065]
[161.53073120 99.55603790]
[174.38069153 108.09313965]
[180.55432129 122.23138428]
[178.08164978 137.45928955]
[167.75167847 148.91770935]
[152.86068726 152.95030212]
[138.16032410 148.27026367]
[128.34141541 136.37098694]
[126.53715515 121.04949951]
[113.01296234 114.56133270]
[100.48699951 122.81362152]
[101.11097717 137.80064392]
[101.73495483 152.78765869]
[102.35893250 167.77467346]
[102.98291016 182.76168823]
[103.60688782 197.74870300]
[104.23086548 212.73571777]
[104.85484314 227.72273254]
[105.47882080 242.70974731]
[106.10279846 257.69677734]
[120.72402954 261.53225708]
[133.56427002 269.50842285]
[143.48179626 280.91607666]
[149.59471130 294.74081421]
[151.35948181 309.75338745]
[148.61918640 324.61886597]
[141.61747742 338.01541138]
[130.97695923 348.75183105]
[117.64376068 355.87344360]
[102.80347443 358.74697876]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 45]
[20 44]
[21 43]
[22 42]
[23 41]
[24 40]
[25 39]
[46 110]
[47 109]
[48 108]
[49 107]
[118 130]
[119 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
