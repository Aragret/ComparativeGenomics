%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUAUUAAACACAGGGGGGGGGGAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUAAxxxxxxxxxxUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAACCCCCCCCCCAAAACUAUUAAACCCA\
) } def
/len { sequence length } bind def

/coor [
[85.08102417 182.21366882]
[70.64151764 178.22877502]
[57.14554214 171.72975159]
[45.02683640 162.92546082]
[34.67487335 152.09884644]
[26.42234612 139.59786987]
[20.53447914 125.82428741]
[17.20049858 111.22075653]
[16.52754974 96.25660706]
[18.53726387 81.41275787]
[23.16505051 67.16628265]
[30.26217842 53.97501755]
[39.60056305 42.26291656]
[50.88007736 32.40639114]
[63.73822403 24.72220421]
[77.76176453 19.45731735]
[92.50000000 16.78093529]
[92.50000000 1.78093481]
[92.50000000 -13.21906471]
[92.50000000 -28.21906471]
[92.50000000 -43.21906662]
[92.50000000 -58.21906662]
[92.50000000 -73.21906281]
[92.50000000 -88.21906281]
[92.50000000 -103.21906281]
[92.50000000 -118.21906281]
[77.51963043 -119.06023407]
[62.60999298 -120.74004364]
[47.81799698 -123.25319672]
[33.19018936 -126.59178925]
[18.77258873 -130.74533081]
[4.61056042 -135.70072937]
[-9.25133514 -141.44241333]
[-22.76948547 -147.95230103]
[-35.90135193 -155.20991516]
[-48.60562515 -163.19242859]
[-60.84232712 -171.87472534]
[-72.57295227 -181.22947693]
[-83.76060486 -191.22724915]
[-94.37007141 -201.83660889]
[-104.36797333 -213.02413940]
[-113.72285461 -224.75466919]
[-122.40528107 -236.99127197]
[-130.38793945 -249.69544983]
[-137.64570618 -262.82723999]
[-144.15574646 -276.34530640]
[-149.89758301 -290.20715332]
[-154.85314941 -304.36911011]
[-159.00683594 -318.78668213]
[-162.34559631 -333.41445923]
[-164.85891724 -348.20642090]
[-166.53887939 -363.11602783]
[-167.38021851 -378.09640503]
[-167.38027954 -393.10037231]
[-166.53904724 -408.08071899]
[-164.85919189 -422.99035645]
[-162.34597778 -437.78234863]
[-159.00732422 -452.41015625]
[-154.85374451 -466.82772827]
[-149.89828491 -480.98974609]
[-144.15655518 -494.85162354]
[-137.64662170 -508.36975098]
[-130.38894653 -521.50158691]
[-122.40638733 -534.20581055]
[-113.72404480 -546.44250488]
[-104.36925507 -558.17309570]
[-94.37142944 -569.36071777]
[-83.76204681 -579.97009277]
[-72.57447052 -589.96795654]
[-60.84391022 -599.32281494]
[-48.60727310 -608.00518799]
[-35.90306473 -615.98779297]
[-22.77124786 -623.24554443]
[-9.25314713 -629.75549316]
[4.60870600 -635.49731445]
[18.77069664 -640.45281982]
[33.18826675 -644.60644531]
[47.81605148 -647.94512939]
[62.60802841 -650.45843506]
[77.51765442 -652.13836670]
[92.49801636 -652.97961426]
[107.50198364 -652.97961426]
[122.48234558 -652.13836670]
[137.39196777 -650.45843506]
[152.18394470 -647.94512939]
[166.81173706 -644.60644531]
[181.22930908 -640.45281982]
[195.39129639 -635.49731445]
[209.25314331 -629.75549316]
[222.77124023 -623.24554443]
[235.90306091 -615.98779297]
[248.60726929 -608.00518799]
[260.84390259 -599.32281494]
[272.57446289 -589.96795654]
[283.76205444 -579.97009277]
[294.37142944 -569.36071777]
[304.36926270 -558.17309570]
[313.72406006 -546.44250488]
[322.40637207 -534.20581055]
[330.38894653 -521.50158691]
[337.64660645 -508.36975098]
[344.15655518 -494.85162354]
[349.89828491 -480.98974609]
[354.85375977 -466.82772827]
[359.00732422 -452.41015625]
[362.34597778 -437.78234863]
[364.85919189 -422.99035645]
[366.53906250 -408.08071899]
[367.38027954 -393.10037231]
[367.38021851 -378.09640503]
[366.53887939 -363.11602783]
[364.85891724 -348.20642090]
[362.34558105 -333.41445923]
[359.00683594 -318.78668213]
[354.85314941 -304.36911011]
[349.89758301 -290.20715332]
[344.15576172 -276.34530640]
[337.64569092 -262.82723999]
[330.38793945 -249.69544983]
[322.40527344 -236.99127197]
[313.72283936 -224.75466919]
[304.36798096 -213.02413940]
[294.37005615 -201.83660889]
[283.76058960 -191.22724915]
[272.57296753 -181.22947693]
[260.84231567 -171.87472534]
[248.60562134 -163.19242859]
[235.90135193 -155.20991516]
[222.76948547 -147.95230103]
[209.25134277 -141.44241333]
[195.38943481 -135.70072937]
[181.22741699 -130.74533081]
[166.80981445 -126.59178925]
[152.18200684 -123.25319672]
[137.39001465 -120.74004364]
[122.48036957 -119.06023407]
[107.50000000 -118.21906281]
[107.50000000 -103.21906281]
[107.50000000 -88.21906281]
[107.50000000 -73.21906281]
[107.50000000 -58.21906662]
[107.50000000 -43.21906662]
[107.50000000 -28.21906471]
[107.50000000 -13.21906471]
[107.50000000 1.78093481]
[107.50000000 16.78093529]
[122.23823547 19.45731735]
[136.26177979 24.72220421]
[149.11991882 32.40639114]
[160.39944458 42.26291656]
[169.73782349 53.97501755]
[176.83494568 67.16628265]
[181.46273804 81.41275787]
[183.47244263 96.25660706]
[182.79949951 111.22075653]
[179.46551514 125.82428741]
[173.57765198 139.59786987]
[165.32513428 152.09884644]
[154.97315979 162.92546082]
[142.85446167 171.72975159]
[129.35848999 178.22877502]
[114.91897583 182.21366882]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[17 146]
[18 145]
[19 144]
[20 143]
[21 142]
[22 141]
[23 140]
[24 139]
[25 138]
[26 137]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
