%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAUAAACGGGGGGGGGGGAAAGUUUAACUAAGCUAUACUAACCCCAGGGUUGGUCAAUUUCGUGCCAxxxxxxxxxxAAAAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACCCCCCCCCCCAGCAAUCAAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.88842773]
[71.19830322 364.87240601]
[59.48964310 355.34298706]
[50.78712082 343.00732422]
[45.73651886 328.78079224]
[44.71262741 313.71911621]
[47.79142761 298.93994141]
[54.74444962 285.54000854]
[65.05573273 274.51367188]
[77.96011353 266.67916870]
[92.50000000 262.61785889]
[92.50000000 247.61785889]
[92.50000000 232.61785889]
[92.50000000 217.61785889]
[92.50000000 202.61785889]
[92.50000000 187.61785889]
[92.50000000 172.61785889]
[92.50000000 157.61785889]
[92.50000000 142.61785889]
[92.50000000 127.61785889]
[92.50000000 112.61785889]
[86.46000671 108.17168427]
[74.38002014 99.27933502]
[68.34002686 94.83316040]
[54.01742554 99.28997803]
[39.69482803 103.74679565]
[25.37223053 108.20361328]
[11.04963398 112.66042328]
[0.32880083 125.06993103]
[-15.72555351 121.72482300]
[-20.59808540 106.06626129]
[-9.27635193 94.20243835]
[6.59281826 98.33782959]
[20.91541481 93.88101196]
[35.23801422 89.42419434]
[49.56061172 84.96738434]
[63.88320923 80.51056671]
[82.57283783 82.51729584]
[96.06734467 92.65639496]
[101.26276398 78.58486938]
[106.45817566 64.51335144]
[111.65359497 50.44183350]
[108.02049255 45.95788193]
[105.58625793 40.90371704]
[104.41570282 35.58229065]
[104.50046539 30.29540634]
[105.76300812 25.32674217]
[108.06446838 20.92662048]
[111.21568298 17.29942131]
[114.99066162 14.59422684]
[116.23754120 -0.35386020]
[117.48441315 -15.30194759]
[118.73128510 -30.25003433]
[119.97816467 -45.19812012]
[119.19831848 -60.17783356]
[116.40599060 -74.91564178]
[113.61367035 -89.65345001]
[110.11651611 -93.70184326]
[108.70842743 -98.23722076]
[109.21778870 -102.36544800]
[111.13709259 -105.39591980]
[109.26947784 -120.27919769]
[107.40186310 -135.16247559]
[92.54080200 -137.99162292]
[79.28232574 -145.27638245]
[68.92535400 -156.30310059]
[62.48456573 -169.99147034]
[60.59096527 -185.00044250]
[63.43006134 -199.85960388]
[70.72371674 -213.11320496]
[81.75736237 -223.46278381]
[95.45004272 -229.89439392]
[110.46028900 -231.77793884]
[125.31754303 -228.92889404]
[138.56625366 -221.62635803]
[148.90843201 -210.58576965]
[155.33087158 -196.88879395]
[157.20436096 -181.87728882]
[154.34535217 -167.02194214]
[147.03393555 -153.77813721]
[135.98643494 -143.44334412]
[122.28514862 -137.03009033]
[124.15275574 -122.14681244]
[126.02037048 -107.26352692]
[128.35147095 -92.44577026]
[131.14379883 -77.70796204]
[133.93612671 -62.97016144]
[139.99682617 -76.69123840]
[151.03810120 -86.84456635]
[165.21803284 -91.73634338]
[180.17109680 -90.55050659]
[193.40275574 -83.48489380]
[202.70570374 -71.71819305]
[206.52798462 -57.21335602]
[204.23196411 -42.39012146]
[196.20065308 -29.72133636]
[183.77388000 -21.32043457]
[169.02468872 -18.58887672]
[154.41357422 -21.98234940]
[142.37802124 -30.93474197]
[134.92625427 -43.95124817]
[133.67938232 -29.00316048]
[132.43249512 -14.05507278]
[131.18562317 0.89301431]
[129.93875122 15.84110165]
[132.04925537 0.99031752]
[142.13955688 -10.10859108]
[156.72273254 -13.62014675]
[170.75923157 -8.33085346]
[179.39843750 3.93145490]
[179.65486145 18.92926216]
[171.43991089 31.47974014]
[157.59243774 37.24578857]
[142.89743042 34.23465347]
[157.39302063 38.09181213]
[171.88862610 41.94897079]
[186.38421631 45.80613327]
[202.06762695 41.01418304]
[213.87307739 52.39677429]
[209.65612793 68.24446869]
[193.75482178 72.25451660]
[182.52705383 60.30172729]
[168.03146362 56.44456863]
[153.53585815 52.58740997]
[139.04026794 48.73025131]
[125.72511292 55.63724899]
[120.52969360 69.70877075]
[115.33428192 83.78028870]
[110.13886261 97.85180664]
[107.50000000 112.61785889]
[107.50000000 127.61785889]
[107.50000000 142.61785889]
[107.50000000 157.61785889]
[107.50000000 172.61785889]
[107.50000000 187.61785889]
[107.50000000 202.61785889]
[107.50000000 217.61785889]
[107.50000000 232.61785889]
[107.50000000 247.61785889]
[107.50000000 262.61785889]
[122.03988647 266.67916870]
[134.94427490 274.51367188]
[145.25555420 285.54000854]
[152.20857239 298.93994141]
[155.28736877 313.71911621]
[154.26348877 328.78079224]
[149.21287537 343.00732422]
[140.51036072 355.34298706]
[128.80169678 364.87240601]
[114.95575714 370.88842773]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 37]
[25 36]
[26 35]
[27 34]
[28 33]
[39 129]
[40 128]
[41 127]
[42 126]
[50 105]
[51 104]
[52 103]
[53 102]
[54 101]
[55 87]
[56 86]
[57 85]
[61 84]
[62 83]
[63 82]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
