%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUCUACCAUGGGGGGGGGGCUUUGCAGGCACACUCAUCACAGCGCUAAGCUCGCACUGAUUUUUUACCUxxxxxxxxxxACCGGAGAUGAAAACCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUACCCCCCCCCCACUCCACCAU\
) } def
/len { sequence length } bind def

/coor [
[71.09169006 363.61535645]
[57.87149429 356.34289551]
[46.98469162 345.89587402]
[39.17356110 332.98663330]
[34.97068024 318.49533081]
[34.66260910 303.40997314]
[38.27034760 288.75915527]
[45.54792023 275.54177856]
[55.99913025 264.65899658]
[68.91139221 256.85287476]
[83.40432739 252.65557861]
[83.09226990 237.65882874]
[82.78021240 222.66206360]
[82.46816254 207.66531372]
[82.15610504 192.66856384]
[81.84404755 177.67181396]
[81.53199005 162.67504883]
[81.21993256 147.67829895]
[80.90787506 132.68154907]
[69.71211243 122.69882202]
[54.77780533 124.10112000]
[39.84349823 125.50342560]
[24.90918922 126.90573120]
[11.89279079 135.89927673]
[-1.50207865 129.38569641]
[-16.43638611 130.78800964]
[-22.12854195 134.35267639]
[-27.89247894 134.44395447]
[-32.01909256 131.92471313]
[-46.99880600 132.70455933]
[-52.84978104 146.80168152]
[-64.24355316 156.95770264]
[-78.91787720 161.15614319]
[-93.95916748 158.56338501]
[-106.38095856 149.69422913]
[-113.71688843 136.30964661]
[-114.51041412 121.06717682]
[-108.60397339 106.99320221]
[-97.17029572 96.88212585]
[-82.47955322 92.74151611]
[-67.44858551 95.39348602]
[-55.06182098 104.31149292]
[-47.77865219 117.72485352]
[-32.79893875 116.94500732]
[-17.83868980 115.85369110]
[-2.90438223 114.45139313]
[9.04381466 105.55814362]
[23.50688553 111.97142029]
[38.44119263 110.56912231]
[53.37549973 109.16681671]
[68.30980682 107.76451111]
[67.77995300 94.79647064]
[72.34813690 82.64386749]
[81.29463959 73.23017883]
[93.20648193 68.04667664]
[106.20059204 67.91616821]
[118.22149658 72.86238861]
[124.84999847 59.40642166]
[131.47850037 45.95045471]
[138.10699463 32.49449158]
[144.73548889 19.03852463]
[151.36399841 5.58255911]
[157.99249268 -7.87340641]
[162.44931030 -22.19600296]
[164.62614441 -37.03720856]
[166.80297852 -51.87841415]
[152.79624939 -57.43793488]
[140.44953918 -66.07826233]
[130.42868042 -77.33344269]
[123.27408600 -90.59649658]
[119.37159729 -105.15216064]
[118.93167114 -120.21546936]
[121.97803497 -134.97407532]
[128.34640503 -148.63206482]
[137.69332886 -160.45288086]
[149.51473999 -169.79904175]
[163.17314148 -176.16651917]
[177.93194580 -179.21192932]
[192.99522400 -178.77102661]
[207.55064392 -174.86759949]
[220.81323242 -167.71214294]
[232.06774902 -157.69055176]
[240.70729065 -145.34327698]
[246.26589966 -131.33619690]
[248.44383240 -116.42467499]
[247.12361145 -101.41288757]
[242.37644958 -87.11039734]
[234.45835876 -74.28852081]
[223.79634094 -63.63872147]
[210.96539307 -55.73533630]
[196.65747070 -51.00458145]
[181.64418030 -49.70157623]
[179.46734619 -34.86037064]
[177.29051208 -20.01916695]
[189.64208984 -11.50807667]
[202.73524475 -18.82718277]
[215.82839966 -26.14628792]
[228.92155457 -33.46539307]
[234.65432739 -48.44920731]
[249.98652649 -53.17187881]
[263.15655518 -44.01057816]
[264.06152344 -27.99306870]
[252.00721741 -17.40661621]
[236.24064636 -20.37224007]
[223.14749146 -13.05313396]
[210.05433655 -5.73402786]
[196.96119690 1.58507764]
[186.94412231 4.14713240]
[178.02580261 2.88447309]
[171.44845581 -1.24490798]
[164.81996155 12.21105766]
[158.19145203 25.66702271]
[151.56295776 39.12298965]
[144.93446350 52.57895279]
[138.30596924 66.03491974]
[131.67745972 79.49088287]
[137.16448975 93.45127106]
[151.18121338 98.79278564]
[165.19792175 104.13430023]
[180.36720276 98.91198730]
[193.83024597 107.63701630]
[195.25935364 123.61629486]
[183.55824280 134.59187317]
[167.70298767 132.14424133]
[159.85641479 118.15101624]
[145.83969116 112.80950165]
[131.82298279 107.46798706]
[127.02030945 118.36833954]
[118.63399506 126.81954193]
[107.78095245 131.70159912]
[95.90463257 132.36949158]
[96.21669006 147.36624146]
[96.52874756 162.36299133]
[96.84079742 177.35975647]
[97.15285492 192.35650635]
[97.46491241 207.35325623]
[97.77696991 222.35000610]
[98.08902740 237.34677124]
[98.40108490 252.34352112]
[113.05607605 255.93428040]
[126.28188324 263.19653320]
[137.17675781 273.63513184]
[144.99784851 286.53836060]
[149.21191406 301.02642822]
[149.53164673 316.11151123]
[145.93521118 330.76510620]
[138.66784668 343.98812866]
[128.22505188 354.87896729]
[115.31881714 362.69506836]
[100.82912445 366.90356445]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 51]
[21 50]
[22 49]
[23 48]
[25 46]
[26 45]
[29 44]
[30 43]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
[62 111]
[63 110]
[64 94]
[65 93]
[66 92]
[95 107]
[96 106]
[97 105]
[98 104]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
