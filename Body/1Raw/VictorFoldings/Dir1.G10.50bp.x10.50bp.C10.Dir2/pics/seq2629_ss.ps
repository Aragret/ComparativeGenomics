%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUUAUUACCCGGGGGGGGGGUCACUGUCAACCCAACACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUxxxxxxxxxxACACCUCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCCCCCCCCCCCAUAAUUACCC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 368.52026367]
[71.01555634 362.96725464]
[58.81560135 354.10092163]
[49.20452881 342.47860718]
[42.78650284 328.83090210]
[39.96496582 314.01571655]
[40.91728210 298.96435547]
[45.58358765 284.62292480]
[53.67055511 271.89297485]
[64.66983032 261.57470703]
[77.88998413 254.31672668]
[92.50000000 250.57528687]
[92.50000000 235.57528687]
[92.50000000 220.57528687]
[92.50000000 205.57528687]
[92.50000000 190.57528687]
[92.50000000 175.57528687]
[92.50000000 160.57528687]
[92.50000000 145.57528687]
[92.50000000 130.57528687]
[92.50000000 115.57528687]
[87.51467896 101.42797089]
[78.11082458 89.74176788]
[68.70696259 78.05555725]
[59.30310822 66.36934662]
[49.89925003 54.68313980]
[40.49539185 42.99692917]
[31.09153557 31.31072235]
[16.47479248 41.01670837]
[-6.26679850 36.54511261]
[-20.51349068 31.85131454]
[-34.76018143 27.15751266]
[-49.00687408 22.46371269]
[-56.88973999 35.30727768]
[-67.52247620 45.98630142]
[-80.33168030 53.92488098]
[-94.62656403 58.69489670]
[-109.63622284 60.03910828]
[-124.55120087 57.88502502]
[-138.56715393 52.34880829]
[-150.92822266 43.72902679]
[-160.96780396 32.49053192]
[-168.14443970 19.23939896]
[-172.07113647 4.69024754]
[-172.53611755 -10.37230587]
[-169.51429749 -25.13595581]
[-163.16865540 -38.80451965]
[-153.84141541 -50.64086533]
[-142.03555298 -60.00667572]
[-128.38775635 -66.39686584]
[-113.63404846 -69.46681976]
[-98.57005310 -69.05097961]
[-84.00817108 -65.17176056]
[-70.73370361 -58.03838348]
[-59.46251678 -48.03552628]
[-50.80245972 -35.70264053]
[-45.22055435 -21.70481682]
[-43.01782990 -6.79694176]
[-44.31307220 8.21702003]
[-30.06638145 12.91082096]
[-15.81968975 17.60462189]
[-1.57299769 22.29842186]
[4.72122192 18.22008896]
[-3.43524933 5.63152409]
[9.15344238 -2.52475262]
[17.30966187 10.06342411]
[23.60388184 5.98509073]
[25.14117432 -8.93592548]
[26.67846680 -23.85694122]
[28.21575737 -38.77795792]
[14.46464157 -45.11716461]
[3.51865816 -55.57967377]
[-3.43485379 -69.03060150]
[-5.64162922 -84.01087952]
[-2.86229396 -98.89557648]
[4.60167074 -112.07009125]
[15.94062996 -122.10536957]
[29.92461777 -127.91284180]
[45.03675842 -128.86257935]
[59.63779449 -124.85153198]
[72.14392090 -116.31481934]
[81.19856262 -104.17841339]
[85.81954193 -89.75880432]
[85.50560760 -74.62010193]
[80.29080963 -60.40445709]
[70.74082184 -48.65386581]
[57.89154434 -40.64294815]
[43.13677597 -37.24066544]
[41.59948349 -22.31964874]
[40.06219101 -7.39863300]
[38.52489853 7.52238321]
[42.77774429 21.90686417]
[52.18160248 33.59307480]
[61.58545685 45.27928162]
[70.98931885 56.96548843]
[80.39317322 68.65169525]
[89.79702759 80.33790588]
[99.20088959 92.02411652]
[102.20784760 87.21923065]
[107.66672516 83.79806519]
[114.96318817 82.69300079]
[123.17402649 84.58471680]
[138.17323303 84.43071747]
[153.17243958 84.27672577]
[142.12023926 74.13528442]
[138.98471069 59.46666336]
[144.92489624 45.69298172]
[157.74504089 37.90556717]
[172.70629883 38.98296738]
[184.27836609 48.52692795]
[188.18373108 63.00960922]
[182.97882080 77.07761383]
[170.58859253 85.53051758]
[185.41107178 87.83139801]
[200.23356628 90.13227081]
[215.05604553 92.43314362]
[230.14399719 86.00776672]
[243.08815002 96.07658386]
[240.57266235 112.28165436]
[225.18525696 117.95259094]
[212.75517273 107.25563049]
[197.93269348 104.95475006]
[183.11019897 102.65387726]
[168.28771973 100.35300446]
[153.32644653 99.27593231]
[138.32722473 99.42993164]
[123.32802582 99.58392334]
[136.86811829 106.03881836]
[139.44783020 120.81532288]
[128.89584351 131.47625732]
[114.09362793 129.04846191]
[107.50000000 115.57528687]
[107.50000000 130.57528687]
[107.50000000 145.57528687]
[107.50000000 160.57528687]
[107.50000000 175.57528687]
[107.50000000 190.57528687]
[107.50000000 205.57528687]
[107.50000000 220.57528687]
[107.50000000 235.57528687]
[107.50000000 250.57528687]
[122.11001587 254.31672668]
[135.33016968 261.57470703]
[146.32945251 271.89297485]
[154.41641235 284.62292480]
[159.08271790 298.96435547]
[160.03503418 314.01571655]
[157.21350098 328.83090210]
[150.79547119 342.47860718]
[141.18440247 354.10092163]
[128.98443604 362.96725464]
[114.96250153 368.52026367]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 98]
[23 97]
[24 96]
[25 95]
[26 94]
[27 93]
[28 92]
[30 62]
[31 61]
[32 60]
[33 59]
[67 91]
[68 90]
[69 89]
[70 88]
[102 127]
[103 126]
[104 125]
[113 124]
[114 123]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
