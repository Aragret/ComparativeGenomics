%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCGACCCCGGGGGGGGGGGCCGGAGGAGGAGACCCCAUUCUAUACCAACACCUAUUCUGAUUUUUCGGxxxxxxxxxxUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCUUUUCCCCCCCCCCCCUCCGACCCC\
) } def
/len { sequence length } bind def

/coor [
[71.92947388 519.74554443]
[58.08353806 513.72949219]
[46.37487793 504.20007324]
[37.67235184 491.86441040]
[32.62174988 477.63787842]
[31.59785843 462.57620239]
[34.67665863 447.79705811]
[41.62968063 434.39712524]
[51.94096375 423.37078857]
[64.84534454 415.53628540]
[79.38523102 411.47497559]
[79.38523102 396.47497559]
[79.38523102 381.47497559]
[79.38523102 366.47497559]
[79.38523102 351.47497559]
[79.38523102 336.47497559]
[79.38523102 321.47497559]
[79.38523102 306.47497559]
[79.38523102 291.47497559]
[79.38523102 276.47497559]
[79.38523102 261.47497559]
[69.06425476 253.69845581]
[65.06628418 241.20483398]
[69.07240295 228.50920105]
[79.82746887 220.33692932]
[80.13952637 205.34016418]
[80.45158386 190.34341431]
[80.76363373 175.34666443]
[71.47965240 160.48706055]
[81.06237793 144.79785156]
[81.06237793 129.79785156]
[70.40075684 119.24656677]
[55.40156555 119.40260315]
[40.40237808 119.55863953]
[29.52436066 131.02355957]
[13.72354889 131.35502625]
[2.37428141 120.35641479]
[2.20987844 104.55297852]
[13.32787704 93.32062531]
[29.13216591 93.32331848]
[40.24634171 104.55944824]
[55.24552917 104.40341187]
[70.24472046 104.24737549]
[71.25565338 95.87389374]
[74.49405670 88.39714050]
[79.54448700 82.37214661]
[85.86496735 78.19558716]
[92.84146881 76.08094788]
[99.84575653 76.05112457]
[104.45131683 61.77566528]
[109.05688477 47.50020218]
[113.66244507 33.22474289]
[110.53604889 17.71551323]
[121.80737305 7.97864389]
[126.41293335 -6.29681683]
[131.01850891 -20.57227707]
[134.26933289 -35.21577835]
[136.13694763 -50.09906006]
[128.58219910 -66.85930634]
[139.64407349 -80.44734955]
[141.20166016 -95.36626434]
[142.75924683 -110.28517151]
[144.31681824 -125.20408630]
[145.87440491 -140.12300110]
[147.43197632 -155.04191589]
[133.20611572 -160.01396179]
[120.51065826 -168.13320923]
[110.03027344 -178.96179199]
[102.33014679 -191.91574097]
[97.82554626 -206.29646301]
[96.75939178 -221.32843018]
[99.18918610 -236.20098877]
[104.98388672 -250.11207581]
[113.83099365 -262.31146240]
[125.25339508 -272.14129639]
[138.63510132 -279.07144165]
[153.25444031 -282.72814941]
[168.32301331 -282.91424561]
[183.02819824 -279.61965942]
[196.57696533 -273.02212524]
[208.23864746 -263.47738647]
[217.38432312 -251.50018311]
[223.52079773 -237.73645020]
[226.31713867 -222.92843628]
[225.62252808 -207.87472534]
[221.47444153 -193.38713074]
[214.09657288 -180.24697876]
[203.88681030 -169.16287231]
[191.39573669 -160.73258972]
[177.29698181 -155.41073608]
[162.35089111 -153.48432922]
[160.79331970 -138.56541443]
[159.23573303 -123.64650726]
[157.67814636 -108.72759247]
[156.12057495 -93.80867767]
[154.56298828 -78.88977051]
[161.95164490 -69.26089478]
[160.73364258 -56.78149796]
[151.02021790 -48.23144531]
[149.15260315 -33.34816742]
[160.26318359 -43.42561340]
[175.03314209 -46.04259109]
[188.92974854 -40.39598083]
[197.68832397 -28.21865082]
[198.62097168 -13.24767303]
[191.44148254 -0.07744905]
[178.35313416 7.25024843]
[163.37257385 6.48664188]
[151.09716797 -2.13392735]
[145.29396057 -15.96671295]
[140.68840027 -1.69125235]
[136.08283997 12.58420849]
[139.53865051 27.07236099]
[127.93791199 37.83030701]
[123.33234406 52.10576630]
[118.72678375 66.38122559]
[114.12121582 80.65669250]
[125.93937683 98.45723724]
[119.08812714 120.51396942]
[96.06237793 129.79785156]
[96.06237793 144.79785156]
[104.63566589 154.49076843]
[104.29041290 167.02471924]
[95.76039124 175.65872192]
[95.44833374 190.65547180]
[95.13627625 205.65222168]
[94.82421875 220.64897156]
[107.15406799 233.01475525]
[106.76599121 250.13589478]
[94.38523102 261.47497559]
[94.38523102 276.47497559]
[94.38523102 291.47497559]
[94.38523102 306.47497559]
[94.38523102 321.47497559]
[94.38523102 336.47497559]
[94.38523102 351.47497559]
[94.38523102 366.47497559]
[94.38523102 381.47497559]
[94.38523102 396.47497559]
[94.38523102 411.47497559]
[108.92511749 415.53628540]
[121.82949829 423.37078857]
[132.14077759 434.39712524]
[139.09381104 447.79705811]
[142.17260742 462.57620239]
[141.14871216 477.63787842]
[136.09811401 491.86441040]
[127.39558411 504.20007324]
[115.68692780 513.72949219]
[101.84098816 519.74554443]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 127]
[26 126]
[27 125]
[28 124]
[30 121]
[31 120]
[32 43]
[33 42]
[34 41]
[49 117]
[50 116]
[51 115]
[52 114]
[54 112]
[55 111]
[56 110]
[57 100]
[58 99]
[60 96]
[61 95]
[62 94]
[63 93]
[64 92]
[65 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
