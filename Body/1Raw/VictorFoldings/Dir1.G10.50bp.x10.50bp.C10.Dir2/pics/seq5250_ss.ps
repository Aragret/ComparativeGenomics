%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUCCUCGGGGGGGGGGAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAxxxxxxxxxxACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUC\
) } def
/len { sequence length } bind def

/coor [
[102.82555389 360.62835693]
[89.60536194 353.35589600]
[78.71855164 342.90887451]
[70.90742493 329.99963379]
[66.70454407 315.50833130]
[66.39646912 300.42297363]
[70.00421143 285.77215576]
[77.28178406 272.55477905]
[87.73299408 261.67199707]
[100.64525604 253.86585999]
[115.13819122 249.66856384]
[114.82613373 234.67181396]
[114.51407623 219.67506409]
[114.20201874 204.67831421]
[113.88996887 189.68154907]
[113.57791138 174.68479919]
[113.26585388 159.68804932]
[112.95379639 144.69129944]
[112.64173889 129.69453430]
[112.32968140 114.69778442]
[98.54055786 117.26147461]
[88.21521759 110.00899506]
[73.50725555 112.95447540]
[58.79929352 115.89995575]
[44.09133530 118.84543610]
[35.31427765 131.71405029]
[20.35635185 134.49166870]
[8.14219379 126.04477692]
[-6.56576824 128.99026489]
[-13.91019344 142.79582214]
[-28.42966843 148.60261536]
[-43.26853943 143.66885376]
[-51.42034531 130.32411194]
[-49.03605270 114.86936951]
[-37.24145126 104.60188293]
[-21.60559273 104.36963654]
[-9.51125050 114.28229523]
[5.19671106 111.33681488]
[13.21616077 98.83785248]
[28.09016609 95.64119720]
[41.14585114 104.13747406]
[55.85381317 101.19199371]
[70.56177521 98.24651337]
[85.26973724 95.30103302]
[99.25987244 82.69275665]
[117.71261597 92.63051605]
[124.89512634 79.46193695]
[132.07763672 66.29335785]
[139.26014709 53.12477112]
[146.30528259 39.88218689]
[153.21228027 26.56702995]
[159.55940247 12.97607899]
[165.33567810 -0.86713833]
[164.86212158 -7.56663465]
[167.48870850 -12.69813824]
[171.65095520 -15.15804863]
[177.99809265 -28.74900055]
[184.34521484 -42.33995056]
[190.69235229 -55.93090057]
[188.64855957 -74.20117188]
[203.34814453 -83.73646545]
[209.41116333 -97.45652008]
[206.98771667 -115.68032074]
[221.48576355 -125.51935577]
[227.26203918 -139.36257935]
[233.03831482 -153.20579529]
[238.81457520 -167.04901123]
[226.11393738 -175.09895325]
[214.95654297 -185.17965698]
[205.66342163 -197.00106812]
[198.50193787 -210.22306824]
[193.67816162 -224.46524048]
[191.33088684 -239.31777954]
[191.52761841 -254.35337830]
[194.26272583 -269.13943481]
[199.45750427 -283.25048828]
[206.96249390 -296.28057861]
[216.56175232 -307.85479736]
[227.97909546 -317.64010620]
[240.88603210 -325.35498047]
[254.91117859 -330.77743530]
[269.65103149 -333.75146484]
[284.68148804 -334.19149780]
[299.57006836 -332.08486938]
[313.88842773 -327.49221802]
[327.22460938 -320.54565430]
[339.19485474 -311.44503784]
[349.45480347 -300.45223999]
[357.70922852 -287.88354492]
[363.72064209 -274.10055542]
[367.31607056 -259.49984741]
[368.39212036 -244.50149536]
[366.91775513 -229.53706360]
[362.93545532 -215.03709412]
[356.55975342 -201.41877747]
[347.97415161 -189.07392883]
[337.42559814 -178.35775757]
[325.21765137 -169.57858276]
[311.70153809 -162.98898315]
[297.26614380 -158.77857971]
[282.32681274 -157.06848145]
[267.31338501 -157.90792847]
[252.65780640 -161.27273560]
[246.88153076 -147.42951965]
[241.10525513 -133.58630371]
[235.32897949 -119.74308777]
[239.64126587 -108.39797211]
[234.89083862 -96.79399872]
[223.13121033 -91.39350891]
[217.06820679 -77.67345428]
[221.14353943 -66.24108887]
[216.15272522 -54.73844910]
[204.28329468 -49.58377075]
[197.93617249 -35.99282074]
[191.58903503 -22.40187073]
[185.24191284 -8.81091976]
[179.17889404 4.90913391]
[173.40261841 18.75235176]
[174.39872742 21.43844604]
[174.35549927 24.69299889]
[173.04626465 28.10881042]
[170.40077209 31.20275497]
[166.52743530 33.47402954]
[159.62043762 46.78918457]
[159.33041382 54.22299576]
[152.42872620 60.30728149]
[145.24621582 73.47586060]
[138.06370544 86.64444733]
[130.88119507 99.81302643]
[127.32643890 114.38573456]
[127.63849640 129.38249207]
[127.95055389 144.37924194]
[128.26260376 159.37599182]
[128.57466125 174.37274170]
[128.88671875 189.36950684]
[129.19877625 204.36625671]
[129.51083374 219.36300659]
[129.82289124 234.35975647]
[130.13494873 249.35652161]
[144.78993225 252.94728088]
[158.01574707 260.20953369]
[168.91061401 270.64813232]
[176.73170471 283.55136108]
[180.94578552 298.03939819]
[181.26550293 313.12451172]
[177.66908264 327.77810669]
[170.40171814 341.00112915]
[159.95890808 351.89196777]
[147.05268860 359.70806885]
[132.56298828 363.91653442]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 44]
[23 43]
[24 42]
[25 41]
[28 38]
[29 37]
[46 129]
[47 128]
[48 127]
[49 126]
[50 124]
[51 123]
[52 118]
[53 117]
[56 116]
[57 115]
[58 114]
[59 113]
[61 110]
[62 109]
[64 106]
[65 105]
[66 104]
[67 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
