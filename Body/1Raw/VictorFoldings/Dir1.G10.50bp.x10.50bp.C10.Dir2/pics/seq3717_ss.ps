%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCACCUCUGGGGGGGGGGAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAAxxxxxxxxxxGCAAGUACAGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAACCCCCCCCCCAGCCACCCCU\
) } def
/len { sequence length } bind def

/coor [
[88.65078735 449.97509766]
[76.09256744 441.62396240]
[66.00634766 430.41149902]
[59.02614975 417.04260254]
[55.59076691 402.35760498]
[55.91614532 387.27963257]
[59.98182678 372.75653076]
[67.53224945 359.70117188]
[78.09277344 348.93429565]
[90.99957275 341.13265991]
[105.44129944 336.78671265]
[104.81732178 321.79968262]
[104.19334412 306.81265259]
[103.56936646 291.82565308]
[102.94538879 276.83862305]
[102.32141113 261.85162354]
[101.69743347 246.86459351]
[101.07345581 231.87757874]
[100.13783264 216.90679932]
[98.89095306 201.95870972]
[97.64408112 187.01062012]
[96.39720917 172.06253052]
[86.23513031 166.71250916]
[79.87664032 157.00492859]
[79.01477814 145.31172180]
[83.98210144 134.55836487]
[93.63811493 127.49194336]
[93.01413727 112.50492859]
[85.68845367 100.59585571]
[91.99884796 88.11904907]
[91.37487030 73.13203430]
[90.75089264 58.14501953]
[75.49372101 55.36731339]
[61.23746490 49.28123474]
[48.68943024 40.19208527]
[38.47143555 28.55408669]
[31.08899498 14.94766808]
[26.90629768 0.05052168]
[26.12825394 -15.39614391]
[28.79045677 -30.62448883]
[34.75756454 -44.87821198]
[43.73017120 -57.45010376]
[55.25984192 -67.71714020]
[68.77151489 -75.17136383]
[83.59219360 -79.44500732]
[82.65656281 -94.41580200]
[81.72093201 -109.38658905]
[78.75505066 -113.83890533]
[77.92259979 -118.51431274]
[78.94199371 -122.54698944]
[81.22368622 -125.31491089]
[81.22368622 -140.31491089]
[81.22368622 -155.31491089]
[76.76686859 -169.63751221]
[68.25577545 -181.98908997]
[59.74468613 -194.34065247]
[51.23359680 -206.69223022]
[35.65011597 -207.99191284]
[24.58436775 -219.04104614]
[23.26125526 -234.62254333]
[32.30551529 -247.37933350]
[47.44672394 -251.28800964]
[61.53566360 -244.50305176]
[67.91996765 -230.22808838]
[63.58517075 -215.20332336]
[72.09626007 -202.85174561]
[80.60734558 -190.50016785]
[89.11843872 -178.14860535]
[88.46852112 -193.13452148]
[90.79170990 -207.95352173]
[95.99643707 -222.02159119]
[103.87760162 -234.78433228]
[114.12459564 -245.73873901]
[126.33358765 -254.45310974]
[140.02343750 -260.58404541]
[154.65461731 -263.88986206]
[169.65052795 -264.24032593]
[184.42016602 -261.62164307]
[198.38148499 -256.13696289]
[210.98425293 -248.00245667]
[221.73181152 -237.53871155]
[230.20060730 -225.15809631]
[236.05686951 -211.34852600]
[239.06980896 -196.65423584]
[239.12069702 -181.65432739]
[236.20751953 -166.93992615]
[230.44508362 -153.09094238]
[222.06050110 -140.65316772]
[211.38417053 -130.11672974]
[198.83688354 -121.89691925]
[184.91310120 -116.31764221]
[170.16156006 -113.59878540]
[155.16363525 -113.84751129]
[140.51036072 -117.05399323]
[126.77922821 -123.09188843]
[114.51138306 -131.72323608]
[104.19030762 -142.60786438]
[96.22368622 -155.31491089]
[96.22368622 -140.31491089]
[96.22368622 -125.31491089]
[96.69172668 -110.32221985]
[97.62734985 -95.35142517]
[98.56298065 -80.38063812]
[112.93219757 -78.21710205]
[126.53829956 -73.09795380]
[138.78024292 -65.24660492]
[149.11665344 -55.00724792]
[157.08979797 -42.82973862]
[162.34584045 -29.24983978]
[164.65060425 -14.86564636]
[163.89988708 -0.31124490]
[160.12426758 13.77123451]
[153.48785400 26.75995255]
[144.28109741 38.08081818]
[132.90815735 47.23286057]
[119.86908722 53.81040573]
[105.73790741 57.52104187]
[106.36188507 72.50805664]
[106.98586273 87.49507141]
[114.31154633 99.40414429]
[108.00115204 111.88095093]
[108.62512970 126.86796570]
[123.03507996 139.08895874]
[123.98783875 157.64131165]
[111.34529114 170.81565857]
[112.59217072 185.76374817]
[113.83904266 200.71183777]
[115.08591461 215.65991211]
[118.59117889 221.38885498]
[118.62250519 227.15342712]
[116.06047821 231.25360107]
[116.68444824 246.24061584]
[117.30842590 261.22763062]
[117.93240356 276.21466064]
[118.55638123 291.20166016]
[119.18035889 306.18869019]
[119.80433655 321.17568970]
[120.42831421 336.16271973]
[135.18132019 339.29315186]
[148.69195557 345.99490356]
[160.11093140 355.84671021]
[168.72044373 368.22924805]
[173.97929382 382.36413574]
[175.55690002 397.36285400]
[173.35409546 412.28259277]
[167.50935364 426.18548584]
[158.39007568 438.19754028]
[146.56950378 447.56369019]
[132.79069519 453.69519043]
[117.91978455 456.20657349]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 128]
[20 127]
[21 126]
[22 125]
[27 122]
[28 121]
[30 119]
[31 118]
[32 117]
[45 103]
[46 102]
[47 101]
[51 100]
[52 99]
[53 98]
[54 68]
[55 67]
[56 66]
[57 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
