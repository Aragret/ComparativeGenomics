%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCAACCCUGAGGGGGGGGGGCCCCUCUCCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCAxxxxxxxxxxAACCCAAUCCACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCCCCCCCCCCCAAUCAACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[79.20739746 163.52899170]
[65.59318542 157.30999756]
[53.70401001 148.21769714]
[44.13594818 136.70793152]
[37.36870193 123.35775757]
[33.74156570 108.83651733]
[33.43638611 93.87224579]
[36.46846390 79.21519470]
[42.68578339 65.60022736]
[51.77662659 53.70993042]
[63.28521729 44.14045334]
[76.63455200 37.37157059]
[91.15534973 33.74264908]
[90.85134125 18.74573135]
[90.54734039 3.74881244]
[90.24333954 -11.24810696]
[89.93933105 -26.24502563]
[89.63533020 -41.24194336]
[89.33132172 -56.23886490]
[89.02732086 -71.23578644]
[88.72331238 -86.23270416]
[88.41931152 -101.22962189]
[88.11530304 -116.22653961]
[73.12158966 -116.78707886]
[58.18507385 -118.21051025]
[43.35536957 -120.49210358]
[28.68174744 -123.62427521]
[14.21294785 -127.59661865]
[-0.00296465 -132.39595032]
[-13.91876507 -138.00631714]
[-27.48822784 -144.40907288]
[-40.66627502 -151.58297729]
[-53.40913010 -159.50418091]
[-65.67446136 -168.14636230]
[-77.42153168 -177.48081970]
[-88.61130524 -187.47654724]
[-99.20661926 -198.10034180]
[-109.17227936 -209.31690979]
[-118.47517395 -221.08898926]
[-127.08440399 -233.37747192]
[-134.97135925 -246.14154053]
[-142.10986328 -259.33880615]
[-148.47618103 -272.92541504]
[-154.04916382 -286.85620117]
[-158.81031799 -301.08496094]
[-162.74382019 -315.56436157]
[-165.83659363 -330.24633789]
[-168.07836914 -345.08212280]
[-169.46170044 -360.02239990]
[-169.98197937 -375.01757812]
[-169.63751221 -390.01779175]
[-168.42941284 -404.97326660]
[-166.36170959 -419.83432007]
[-163.44125366 -434.55154419]
[-159.67776489 -449.07604980]
[-155.08372498 -463.35964966]
[-149.67442322 -477.35482788]
[-143.46781921 -491.01510620]
[-136.48451233 -504.29513550]
[-128.74771118 -517.15081787]
[-120.28312683 -529.53936768]
[-111.11887360 -541.41967773]
[-101.28538513 -552.75231934]
[-90.81533051 -563.49957275]
[-79.74349976 -573.62579346]
[-68.10666656 -583.09729004]
[-55.94348145 -591.88269043]
[-43.29435730 -599.95269775]
[-30.20131111 -607.28057861]
[-16.70783806 -613.84197998]
[-2.85876060 -619.61511230]
[11.29991531 -624.58074951]
[25.72115517 -628.72241211]
[40.35705185 -632.02636719]
[55.15898895 -634.48162842]
[70.07779694 -636.08007812]
[85.06391144 -636.81634521]
[100.06755066 -636.68798828]
[115.03887939 -635.69549561]
[129.92816162 -633.84210205]
[144.68592834 -631.13397217]
[159.26316833 -627.58013916]
[173.61145020 -623.19232178]
[187.68310547 -617.98522949]
[201.43139648 -611.97601318]
[214.81065369 -605.18475342]
[227.77642822 -597.63397217]
[240.28564453 -589.34875488]
[252.29676819 -580.35662842]
[263.76986694 -570.68737793]
[274.66687012 -560.37329102]
[284.95153809 -549.44848633]
[294.58972168 -537.94927979]
[303.54940796 -525.91394043]
[311.80084229 -513.38238525]
[319.31658936 -500.39627075]
[326.07168579 -486.99871826]
[332.04370117 -473.23425293]
[337.21279907 -459.14859009]
[341.56182861 -444.78851318]
[345.07629395 -430.20172119]
[347.74456787 -415.43670654]
[349.55773926 -400.54248047]
[350.50982666 -385.56851196]
[350.59765625 -370.56457520]
[349.82092285 -355.58050537]
[348.18222046 -340.66607666]
[345.68698120 -325.87081909]
[342.34350586 -311.24389648]
[338.16290283 -296.83389282]
[333.15902710 -282.68869019]
[327.34854126 -268.85525513]
[320.75076294 -255.37954712]
[313.38754272 -242.30633545]
[305.28338623 -229.67904663]
[296.46520996 -217.53962708]
[286.96228027 -205.92842102]
[276.80621338 -194.88397217]
[266.03070068 -184.44297791]
[254.67156982 -174.64012146]
[242.76654053 -165.50798035]
[230.35517883 -157.07688904]
[217.47868347 -149.37483215]
[204.17984009 -142.42741394]
[190.50283813 -136.25770569]
[176.49308777 -130.88621521]
[162.19715881 -126.33078003]
[147.66252136 -122.60652161]
[132.93746948 -119.72582245]
[118.07090759 -117.69825745]
[103.11222839 -116.53054047]
[103.41622925 -101.53362274]
[103.72023010 -86.53670502]
[104.02423859 -71.53978729]
[104.32823944 -56.54286957]
[104.63224792 -41.54594803]
[104.93624878 -26.54903030]
[105.24025726 -11.55211067]
[105.54425812 3.44480824]
[105.84826660 18.44172668]
[106.15226746 33.43864822]
[120.80819702 36.47612381]
[134.42088318 42.69845581]
[146.30783081 51.79367828]
[155.87306213 63.30579376]
[162.63702393 76.65762329]
[166.26060486 91.17974854]
[166.56210327 106.14409637]
[163.52642822 120.80039978]
[157.30577087 134.41384888]
[148.21200562 146.30191040]
[136.70106506 155.86856079]
[123.35006714 162.63417053]
[108.82838440 166.25952148]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
