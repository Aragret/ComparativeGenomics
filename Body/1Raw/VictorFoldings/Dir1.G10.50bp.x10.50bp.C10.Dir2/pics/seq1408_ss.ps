%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAACCUCAGGGGGGGGGGACAGUUAAAUCAACAAAACUGCUCGCCAGAACACUACGAGCCACAGCUUAxxxxxxxxxxAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACCCCCCCCCCCUAAACCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.62326050]
[71.19830322 365.60723877]
[59.48964310 356.07781982]
[50.78712082 343.74215698]
[45.73651886 329.51562500]
[44.71262741 314.45394897]
[47.79142761 299.67477417]
[54.74444962 286.27484131]
[65.05573273 275.24853516]
[77.96011353 267.41400146]
[92.50000000 263.35269165]
[92.50000000 248.35269165]
[92.50000000 233.35269165]
[92.50000000 218.35269165]
[92.50000000 203.35269165]
[92.50000000 188.35269165]
[92.50000000 173.35269165]
[92.50000000 158.35269165]
[92.50000000 143.35269165]
[92.50000000 128.35269165]
[83.86531067 127.20610046]
[75.37589264 123.34808350]
[67.89402771 116.80094147]
[53.39842987 120.65810394]
[38.90283203 124.51525879]
[24.40723610 128.37242126]
[20.48386765 143.22175598]
[9.65008450 154.10865784]
[-5.17988396 158.10461426]
[-20.01684761 154.13471985]
[-30.86974144 143.26686096]
[-34.81918716 128.42443848]
[-30.80280685 113.59999084]
[-19.90098572 102.78121948]
[-5.04625797 98.87831879]
[9.76552773 102.94114685]
[20.55007553 113.87682343]
[35.04567337 110.01966858]
[49.54127121 106.16250610]
[64.03686523 102.30534363]
[66.21369934 87.46414185]
[53.43634415 79.60671234]
[40.65898895 71.74929047]
[27.88163185 63.89186478]
[15.10427380 56.03443909]
[2.35668659 58.25994492]
[-8.13917255 51.40021515]
[-11.02555275 39.61140060]
[-23.63668060 31.48985863]
[-40.03384781 31.23494530]
[-47.77418137 16.77744675]
[-38.89508820 2.98999691]
[-22.53062057 4.05594254]
[-15.51513863 18.87873077]
[-2.90401077 27.00027275]
[14.61696148 26.87583542]
[22.96169853 43.25708008]
[35.73905563 51.11450577]
[48.51641464 58.97193146]
[61.29376984 66.82936096]
[74.07112885 74.68678284]
[85.33075714 68.76387787]
[97.35754395 67.32460022]
[108.51250458 70.13448334]
[117.42081451 76.40676117]
[129.12043762 67.01959991]
[120.93743896 54.43321228]
[114.04832458 41.09459686]
[108.52156067 27.13631821]
[104.41207123 12.69711113]
[101.76071167 -2.07952189]
[100.59381866 -17.04671860]
[100.92299652 -32.05572510]
[102.74497223 -46.95737076]
[106.04163361 -61.60354996]
[110.78022766 -75.84870148]
[116.91365051 -89.55124664]
[124.38094330 -102.57499695]
[133.10789490 -114.79051971]
[143.00776672 -126.07640076]
[153.98216248 -136.32048035]
[165.92202759 -145.42092896]
[178.70867920 -153.28732300]
[192.21504211 -159.84147644]
[206.30688477 -165.01823425]
[220.84413147 -168.76614380]
[235.68232727 -171.04798889]
[250.67396545 -171.84104919]
[265.67010498 -171.13746643]
[280.52163696 -168.94424438]
[295.08099365 -165.28314209]
[309.20349121 -160.19058228]
[322.74871826 -153.71716309]
[335.58209229 -145.92723083]
[347.57604980 -136.89819336]
[358.61138916 -126.71980286]
[368.57846069 -115.49320221]
[377.37814331 -103.32998657]
[384.92303467 -90.35102844]
[391.13812256 -76.68533325]
[395.96166992 -62.46871948]
[399.34567261 -47.84247589]
[401.25656128 -32.95196915]
[401.67532349 -17.94519615]
[400.59777832 -2.97130251]
[398.03463745 11.82089138]
[394.01141357 26.28436852]
[388.56805420 40.27538300]
[381.75866699 53.65487671]
[373.65093994 66.28987885]
[364.32543945 78.05481720]
[353.87484741 88.83275604]
[342.40304565 98.51657867]
[330.02404785 107.01004791]
[316.86087036 114.22873688]
[303.04437256 120.10090637]
[288.71182251 124.56819916]
[274.00567627 127.58621216]
[259.07214355 129.12495422]
[244.05958557 129.16912842]
[229.11724854 127.71828461]
[214.39361572 124.78686523]
[200.03501892 120.40398407]
[186.18418884 114.61322021]
[172.97877502 107.47210693]
[160.55000305 99.05163574]
[149.02142334 89.43548584]
[138.50759888 78.71922302]
[126.80797577 88.10638428]
[126.44240570 112.68561554]
[107.50000000 128.35269165]
[107.50000000 143.35269165]
[107.50000000 158.35269165]
[107.50000000 173.35269165]
[107.50000000 188.35269165]
[107.50000000 203.35269165]
[107.50000000 218.35269165]
[107.50000000 233.35269165]
[107.50000000 248.35269165]
[107.50000000 263.35269165]
[122.03988647 267.41400146]
[134.94427490 275.24853516]
[145.25555420 286.27484131]
[152.20857239 299.67477417]
[155.28736877 314.45394897]
[154.26348877 329.51562500]
[149.21287537 343.74215698]
[140.51036072 356.07781982]
[128.80169678 365.60723877]
[114.95575714 371.62326050]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 40]
[24 39]
[25 38]
[26 37]
[41 61]
[42 60]
[43 59]
[44 58]
[45 57]
[48 55]
[49 54]
[65 129]
[66 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
