%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAGACCCAAACGGGGGGGGGGUGGGAUUAGAUACCCCACUAUGCUUAGCCCUAAACCUCAACAGUUAAAUCxxxxxxxxxxGCAUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACCCCCCCCCCCUCAGACCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[78.51230621 409.92239380]
[64.24053955 405.11297607]
[51.33655548 397.34759521]
[40.40390015 386.98944092]
[31.95391464 374.52301025]
[26.38181686 360.53137207]
[23.94822884 345.66894531]
[24.76696968 330.63088989]
[28.79974747 316.12051392]
[35.85794067 302.81652832]
[45.61142349 291.34118652]
[57.60401154 282.23120117]
[71.27478790 275.91265869]
[85.98434448 272.68109131]
[85.98434448 257.68109131]
[85.98434448 242.68109131]
[85.98434448 227.68109131]
[85.98434448 212.68109131]
[85.98434448 197.68109131]
[85.98434448 182.68109131]
[85.98434448 167.68109131]
[85.98434448 152.68109131]
[85.98434448 137.68109131]
[85.98434448 122.68108368]
[80.13437653 104.12329102]
[88.57777405 92.05109406]
[80.86221313 79.18757629]
[73.14665222 66.32405853]
[70.70129395 81.12339020]
[60.74934006 92.34651184]
[46.34883118 96.54476929]
[31.92478371 92.42811584]
[21.90944290 81.26151276]
[19.38033676 66.47626495]
[25.11461449 52.61560059]
[37.35023880 43.93864441]
[52.32742310 43.11167145]
[65.44511414 50.38995361]
[60.15843964 36.35246658]
[54.87176132 22.31497765]
[44.07879257 21.04610634]
[34.67805481 13.61111164]
[30.15172005 1.31043339]
[22.43615723 -11.55308437]
[14.72059345 -24.41660118]
[7.00502968 -37.28011703]
[-2.31375504 -49.03427887]
[-13.07833576 -59.48051071]
[-23.84291649 -69.92674255]
[-34.60749817 -80.37297821]
[-45.37207794 -90.81921387]
[-59.31312180 -84.75985718]
[-74.51186371 -84.50174713]
[-88.65061188 -90.08423615]
[-99.57331085 -100.65604401]
[-105.61431885 -114.60504913]
[-105.85243988 -129.80412292]
[-100.25135040 -143.93551636]
[-89.66518402 -154.84428406]
[-75.70825195 -160.86694336]
[-60.50888062 -161.08506775]
[-46.38486481 -155.46539307]
[-35.49002075 -144.86488342]
[-29.48572922 -130.90003967]
[-29.28759956 -115.70040131]
[-34.92584610 -101.58379364]
[-24.16126442 -91.13755798]
[-13.39668369 -80.69132233]
[-2.63210249 -70.24509430]
[8.13247871 -59.79885864]
[5.09020948 -74.48710632]
[8.17866611 -89.16571045]
[16.88192749 -101.38263702]
[29.74612427 -109.09706116]
[44.62231827 -111.02030945]
[59.02546310 -106.83110046]
[70.54953003 -97.22924042]
[77.26945496 -83.81869507]
[78.06267548 -68.83968353]
[72.79669189 -54.79442215]
[62.35116959 -44.02915192]
[48.47102356 -38.34218597]
[33.47490692 -38.68353271]
[19.86854744 -44.99568176]
[27.58411026 -32.13216400]
[35.29967499 -19.26864815]
[43.01523590 -6.40512991]
[58.01223373 -6.10499811]
[66.23628235 -18.64951897]
[74.46033478 -31.19404030]
[72.61374664 -47.13046646]
[84.02376556 -58.40836334]
[99.93760681 -56.37629700]
[108.14752197 -42.59309387]
[102.35558319 -27.63204384]
[87.00485229 -22.96998978]
[78.78080750 -10.42546940]
[70.55675507 2.11905193]
[68.90924835 17.02830124]
[74.19592285 31.06578827]
[79.48260498 45.10327530]
[86.01016998 58.60849380]
[93.72573090 71.47200775]
[101.44129181 84.33552551]
[114.81320190 91.13201141]
[129.75242615 89.78314972]
[144.69166565 88.43428802]
[159.63088989 87.08542633]
[174.57011414 85.73657227]
[189.50935364 84.38771057]
[204.44857788 83.03884888]
[212.28753662 69.64742279]
[226.51416016 63.45201492]
[241.65798950 66.83488464]
[251.89593506 78.49524689]
[253.29130554 93.94945526]
[245.30752563 107.25505066]
[231.01454163 113.29576874]
[215.90829468 109.74881744]
[205.79743958 97.97808075]
[190.85820007 99.32693481]
[175.91897583 100.67579651]
[160.97975159 102.02465820]
[146.04051208 103.37351990]
[131.10128784 104.72238159]
[116.16206360 106.07124329]
[131.07754517 107.66130066]
[141.07633972 118.84272003]
[140.99603271 133.84249878]
[130.87811279 144.91622925]
[115.94645691 146.34651184]
[103.91032410 137.39489746]
[100.98434448 122.68108368]
[100.98434448 137.68109131]
[100.98434448 152.68109131]
[100.98434448 167.68109131]
[100.98434448 182.68109131]
[100.98434448 197.68109131]
[100.98434448 212.68109131]
[100.98434448 227.68109131]
[100.98434448 242.68109131]
[100.98434448 257.68109131]
[100.98434448 272.68109131]
[115.69390106 275.91265869]
[129.36468506 282.23120117]
[141.35726929 291.34118652]
[151.11074829 302.81652832]
[158.16894531 316.12051392]
[162.20172119 330.63088989]
[163.02046204 345.66894531]
[160.58686829 360.53137207]
[155.01478577 374.52301025]
[146.56478882 386.98944092]
[135.63214111 397.34759521]
[122.72815704 405.11297607]
[108.45638275 409.92239380]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[26 104]
[27 103]
[28 102]
[38 101]
[39 100]
[40 99]
[43 87]
[44 86]
[45 85]
[46 84]
[47 70]
[48 69]
[49 68]
[50 67]
[51 66]
[88 98]
[89 97]
[90 96]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
[111 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
