%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCACAAAGGGGGGGGGGGACAUUGGAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGxxxxxxxxxxAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGCCCCCCCCCCAAACCGCAAA\
) } def
/len { sequence length } bind def

/coor [
[88.33461761 452.07055664]
[75.11442566 444.79809570]
[64.22761536 434.35107422]
[56.41648865 421.44183350]
[52.21360779 406.95053101]
[51.90553665 391.86517334]
[55.51327515 377.21435547]
[62.79084778 363.99697876]
[73.24205780 353.11419678]
[86.15431976 345.30804443]
[100.64725494 341.11077881]
[100.33519745 326.11401367]
[100.02313995 311.11724854]
[99.71109009 296.12051392]
[99.39903259 281.12374878]
[99.08697510 266.12698364]
[98.77491760 251.13024902]
[98.46286011 236.13348389]
[98.15080261 221.13673401]
[90.15040588 208.57318115]
[97.59893799 194.61503601]
[97.28688049 179.61828613]
[84.97237396 171.28215027]
[79.86745453 157.12574768]
[84.12699890 142.50694275]
[96.31871796 133.09056091]
[96.00666046 118.09381104]
[85.23585510 107.65399933]
[70.23666382 107.81003571]
[55.23747635 107.96607208]
[49.59921646 122.08267212]
[38.98437500 132.96356201]
[25.01164055 138.94946289]
[9.81174850 139.12757874]
[-4.29742575 133.47076416]
[-15.16433430 122.84161377]
[-21.13185310 108.86101532]
[-21.28997993 93.66090393]
[-15.61460209 79.55918121]
[-4.97117043 68.70626068]
[9.01726627 62.75714111]
[24.21757507 62.61900711]
[38.31181717 68.31293488]
[49.15072250 78.97063446]
[55.08143997 92.96688080]
[70.08062744 92.81084442]
[85.07981873 92.65480804]
[97.43138885 84.14371490]
[102.91841888 70.18332672]
[90.24552155 52.13400269]
[95.34541321 28.50236893]
[83.84361267 18.87384415]
[67.60577393 16.57934380]
[61.72574234 1.27061331]
[72.25238037 -11.30403805]
[88.35679626 -8.20888710]
[93.47213745 7.37204027]
[104.97393799 17.00056648]
[119.68190002 14.05508423]
[126.58889771 0.73992813]
[133.49589539 -12.57522774]
[140.40289307 -25.89038277]
[147.30989075 -39.20553970]
[154.21688843 -52.52069473]
[141.39309692 -44.73929977]
[126.91719818 -40.80884933]
[111.91892242 -41.03607559]
[97.56873322 -45.40325546]
[84.98654938 -53.56956100]
[75.15428162 -64.89768982]
[68.83925629 -78.50358582]
[66.53429413 -93.32543182]
[68.41928864 -108.20652008]
[74.34712219 -121.98551941]
[83.85518646 -133.58709717]
[96.20146942 -142.10586548]
[110.42244720 -146.87701416]
[125.40830231 -147.52818298]
[139.98953247 -144.00857544]
[153.02821350 -136.59283447]
[163.50677490 -125.85972595]
[170.60746765 -112.64685059]
[173.77615356 -97.98535919]
[172.76554871 -83.01943970]
[167.65324402 -68.91465759]
[179.35287476 -78.30182648]
[191.05249023 -87.68898773]
[202.75212097 -97.07614899]
[207.52734375 -104.94056702]
[214.79418945 -106.53385162]
[226.68656921 -115.67558289]
[238.57894897 -124.81732178]
[250.47132874 -133.95906067]
[249.91708374 -149.46623230]
[258.61151123 -162.31874084]
[273.21136475 -167.57452393]
[288.10275269 -163.21263123]
[297.55963135 -150.91030884]
[297.94561768 -135.39802551]
[289.11227417 -122.64059448]
[274.45626831 -117.54349518]
[259.61306763 -122.06667328]
[247.72067261 -112.92494202]
[235.82829285 -103.78320312]
[223.93591309 -94.64147186]
[212.13928223 -85.37652588]
[200.43965149 -75.98936462]
[188.74003601 -66.60219574]
[177.04040527 -57.21503830]
[167.53205872 -45.61369705]
[160.62504578 -32.29854202]
[153.71804810 -18.98338509]
[146.81105042 -5.66822910]
[139.90405273 7.64692688]
[132.99705505 20.96208191]
[145.01559448 33.11907578]
[148.66162109 49.21751404]
[143.43777466 64.25334930]
[131.51016235 73.88165283]
[116.87881470 75.67035675]
[111.39177704 89.63075256]
[117.98221588 102.51778412]
[111.00341797 117.78175354]
[111.31547546 132.77850342]
[123.88834381 141.67958069]
[128.75231934 156.10853577]
[124.24070740 170.46505737]
[112.28363037 179.30622864]
[112.59568787 194.30297852]
[120.61840820 207.93919373]
[113.14756012 220.82467651]
[113.45961761 235.82142639]
[113.77167511 250.81819153]
[114.08372498 265.81494141]
[114.39578247 280.81170654]
[114.70783997 295.80844116]
[115.01989746 310.80520630]
[115.33195496 325.80194092]
[115.64401245 340.79870605]
[130.29899597 344.38946533]
[143.52481079 351.65173340]
[154.41967773 362.09033203]
[162.24076843 374.99353027]
[166.45484924 389.48159790]
[166.77456665 404.56671143]
[163.17814636 419.22030640]
[155.91078186 432.44329834]
[145.46797180 443.33413696]
[132.56175232 451.15026855]
[118.07205200 455.35873413]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[21 129]
[22 128]
[26 124]
[27 123]
[28 47]
[29 46]
[30 45]
[48 121]
[49 120]
[51 58]
[52 57]
[59 115]
[60 114]
[61 113]
[62 112]
[63 111]
[64 110]
[85 109]
[86 108]
[87 107]
[88 106]
[90 105]
[91 104]
[92 103]
[93 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
