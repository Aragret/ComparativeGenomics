%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAUCCUCAUUGGGGGGGGGGACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCAUCAxxxxxxxxxxCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUAGCCGCAGCCCCCCCCCCACCUCCUCAUU\
) } def
/len { sequence length } bind def

/coor [
[58.43177795 602.32604980]
[44.40983582 596.77307129]
[32.20987701 587.90673828]
[22.59880638 576.28442383]
[16.18078232 562.63671875]
[13.35924435 547.82153320]
[14.31156063 532.77014160]
[18.97786522 518.42871094]
[27.06483269 505.69876099]
[38.06410599 495.38049316]
[51.28426743 488.12252808]
[65.89427948 484.38107300]
[65.89427948 469.38107300]
[65.89427948 454.38107300]
[65.89427948 439.38107300]
[65.89427948 424.38107300]
[65.89427948 409.38107300]
[65.89427948 394.38107300]
[65.89427948 379.38107300]
[65.89427948 364.38107300]
[65.89427948 349.38107300]
[54.28587341 358.88082886]
[39.34248352 357.57888794]
[29.55183983 346.21475220]
[30.47496033 331.24319458]
[41.58751678 321.16790771]
[56.57765961 321.71160889]
[66.93138123 332.56619263]
[68.77471161 317.67990112]
[70.61803436 302.79357910]
[72.46135712 287.90728760]
[73.99864960 272.98626709]
[75.22926331 258.03683472]
[76.45987701 243.08740234]
[77.69049072 228.13796997]
[67.36189270 221.62800598]
[60.76277542 211.27018738]
[59.20880890 199.01451111]
[63.05886841 187.19976807]
[71.63456726 178.10726929]
[83.33892059 173.52038574]
[85.18224335 158.63407898]
[87.02557373 143.74777222]
[88.86889648 128.86146545]
[74.65900421 120.92883301]
[65.75086975 106.15999603]
[65.30359650 87.94412994]
[74.38941956 71.03471375]
[91.47241211 60.30938721]
[88.11315918 45.69037628]
[84.75389862 31.07137108]
[81.39463806 16.45236206]
[74.70856476 3.02491355]
[65.06674957 -8.46575260]
[57.10184479 -13.06532669]
[55.34786987 -20.29275894]
[45.94401169 -31.97896767]
[36.54015732 -43.66517639]
[21.89964104 -52.21454239]
[26.06199646 -68.64959717]
[43.00701904 -69.19958496]
[48.22636414 -53.06903458]
[57.63022232 -41.38282394]
[67.03408051 -29.69661522]
[76.55741882 -18.10756683]
[86.19922638 -6.61690044]
[83.85259247 -21.43220520]
[85.19448090 -36.37206268]
[90.14366150 -50.53206253]
[98.40053558 -63.05500031]
[109.46525574 -73.18278503]
[122.66799927 -80.30230713]
[137.20950317 -83.98258209]
[152.20950317 -84.00080872]
[166.75991821 -80.35588837]
[179.97991943 -73.26847076]
[191.06921387 -63.16761017]
[199.35650635 -50.66477585]
[204.34008789 -36.51684570]
[205.71827698 -21.58029556]
[203.40765381 -6.75933027]
[197.54808044 7.04883480]
[188.49429321 19.00829887]
[176.79435730 28.39507484]
[163.15655518 34.64091873]
[148.40649414 37.36772537]
[133.43707275 36.41042709]
[119.15449524 31.82696915]
[106.42339325 23.89482498]
[96.01364899 13.09310436]
[99.37290192 27.71211243]
[102.73216248 42.33111954]
[106.09142303 56.95012665]
[112.69901276 60.49832916]
[112.23719788 45.50543976]
[124.99057007 37.60914230]
[138.20559692 44.70583344]
[138.66708374 59.69873047]
[125.91419983 67.59473419]
[132.52178955 71.14293671]
[146.56376648 65.86819458]
[160.60574341 60.59344864]
[165.63197327 45.78564835]
[179.02731323 37.71725082]
[194.46687317 40.19791031]
[204.66059875 52.05633545]
[204.79528809 67.69333649]
[194.80737305 79.72560883]
[179.41282654 82.47187042]
[165.88047791 74.63542938]
[151.83850098 79.91017151]
[137.79652405 85.18491364]
[136.35690308 108.66590881]
[122.75753021 125.46811676]
[103.75520325 130.70478821]
[101.91188049 145.59109497]
[100.06855774 160.47740173]
[98.22522736 175.36370850]
[111.81722260 187.28683472]
[115.54551697 204.81880188]
[108.11221313 220.95671082]
[92.63992310 229.36857605]
[91.40930939 244.31800842]
[90.17869568 259.26745605]
[88.94808197 274.21688843]
[91.46072388 280.44015503]
[90.54530334 286.12786865]
[87.34766388 289.75061035]
[85.50434113 304.63690186]
[83.66101837 319.52322388]
[81.81769562 334.40951538]
[80.89427948 349.38107300]
[80.89427948 364.38107300]
[80.89427948 379.38107300]
[80.89427948 394.38107300]
[80.89427948 409.38107300]
[80.89427948 424.38107300]
[80.89427948 439.38107300]
[80.89427948 454.38107300]
[80.89427948 469.38107300]
[80.89427948 484.38107300]
[95.50428772 488.12252808]
[108.72444916 495.38049316]
[119.72372437 505.69876099]
[127.81069183 518.42871094]
[132.47698975 532.77014160]
[133.42930603 547.82153320]
[130.60777283 562.63671875]
[124.18975067 576.28442383]
[114.57868195 587.90673828]
[102.37872314 596.77307129]
[88.35678101 602.32604980]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 131]
[29 130]
[30 129]
[31 128]
[32 125]
[33 124]
[34 123]
[35 122]
[41 118]
[42 117]
[43 116]
[44 115]
[49 93]
[50 92]
[51 91]
[52 90]
[53 66]
[54 65]
[56 64]
[57 63]
[58 62]
[100 112]
[101 111]
[102 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
