%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACCACACAUGGGGGGGGGGUCGAAGAACCCGUAUACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACxxxxxxxxxxUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCAACCCCCCCCCCCUAUCACACAU\
) } def
/len { sequence length } bind def

/coor [
[-47.96030426 126.98770142]
[-49.91215515 112.12159729]
[-50.37413025 97.13503265]
[-49.34164429 82.17694092]
[-46.82494736 67.39598083]
[-42.84906387 52.93905258]
[-37.45349503 38.94982529]
[-30.69187355 25.56733513]
[-22.63139534 12.92458153]
[-34.41353226 3.64119649]
[-46.19567108 -5.64218903]
[-57.97780609 -14.92557430]
[-69.75994110 -24.20895958]
[-81.54208374 -33.49234390]
[-93.32421875 -42.77573013]
[-105.10635376 -52.05911636]
[-116.88848877 -61.34250259]
[-128.67062378 -70.62588501]
[-140.45275879 -79.90927124]
[-152.23490906 -89.19265747]
[-164.01704407 -98.47604370]
[-175.79917908 -107.75942993]
[-186.16804504 -96.90441132]
[-197.52180481 -87.08418274]
[-209.75762939 -78.38767242]
[-222.76472473 -70.89365387]
[-236.42527771 -64.66998291]
[-250.61557007 -59.77302170]
[-265.20709229 -56.24712753]
[-280.06771851 -54.12422943]
[-295.06283569 -53.42355347]
[-310.05667114 -54.15143967]
[-324.91342163 -56.30130386]
[-339.49853516 -59.85367203]
[-353.67993164 -64.77637482]
[-367.32916260 -71.02482605]
[-380.32263184 -78.54244232]
[-392.54266357 -87.26113892]
[-403.87857056 -97.10195923]
[-414.22772217 -107.97576904]
[-423.49636841 -119.78411102]
[-431.60058594 -132.42002869]
[-438.46697998 -145.76908875]
[-444.03332520 -159.71041870]
[-448.24926758 -174.11772156]
[-451.07659912 -188.86054993]
[-452.48971558 -203.80537415]
[-452.47583008 -218.81686401]
[-451.03503418 -233.75904846]
[-448.18041992 -248.49661255]
[-443.93783569 -262.89608765]
[-438.34567261 -276.82708740]
[-431.45458984 -290.16342163]
[-423.32699585 -302.78430176]
[-414.03649902 -314.57546997]
[-403.66723633 -325.43011475]
[-392.31311035 -335.24993896]
[-380.07696533 -343.94598389]
[-367.06961060 -351.43954468]
[-353.40881348 -357.66271973]
[-339.21835327 -362.55914307]
[-324.62667847 -366.08450317]
[-309.76599121 -368.20687866]
[-294.77084351 -368.90701294]
[-279.77703857 -368.17855835]
[-264.92037964 -366.02816772]
[-250.33538818 -362.47525024]
[-236.15417480 -357.55203247]
[-222.50517273 -351.30310059]
[-209.51197815 -343.78500366]
[-197.29226685 -335.06585693]
[-185.95671082 -325.22463989]
[-175.60795593 -314.35043335]
[-166.33973694 -302.54174805]
[-158.23597717 -289.90554810]
[-151.37008667 -276.55624390]
[-145.80422974 -262.61471558]
[-141.58882141 -248.20724487]
[-138.76202393 -233.46430969]
[-137.34945679 -218.51943970]
[-137.36389160 -203.50794983]
[-138.80522156 -188.56582642]
[-141.66036987 -173.82835388]
[-145.90350342 -159.42903137]
[-151.49617004 -145.49824524]
[-158.38774109 -132.16217041]
[-166.51579285 -119.54156494]
[-154.73365784 -110.25817871]
[-142.95152283 -100.97479248]
[-131.16938782 -91.69140625]
[-119.38724518 -82.40802765]
[-107.60510254 -73.12464142]
[-95.82296753 -63.84125519]
[-84.04083252 -54.55786896]
[-72.25869751 -45.27448273]
[-60.47655869 -35.99109650]
[-48.69441986 -26.70771217]
[-36.91228485 -17.42432594]
[-25.13014603 -8.14094067]
[-13.34801006 1.14244485]
[-2.94179726 -9.65205860]
[8.48748302 -19.35680389]
[20.82624435 -27.87534523]
[33.95185852 -35.12302017]
[47.73388290 -41.02780151]
[62.03533936 -45.53100204]
[76.71410370 -48.58786774]
[91.62429047 -50.16802216]
[106.61772156 -50.25576019]
[121.54537964 -48.85020828]
[136.25891113 -45.96533585]
[150.61209106 -41.62981415]
[164.46226501 -35.88672638]
[177.67181396 -28.79315948]
[190.10942078 -20.41960144]
[201.65148926 -10.84927750]
[212.18331909 -0.17729741]
[221.60023499 11.49027634]
[229.80863953 24.03748703]
[236.72697449 37.33963776]
[242.28646851 51.26452637]
[246.43188477 65.67376709]
[249.12200928 80.42414856]
[250.33010864 95.36907959]
[250.04418945 110.36003876]
[248.26707458 125.24803162]
[245.01643372 139.88510132]
[240.32456970 154.12579346]
[234.23812866 167.82855225]
[226.81758118 180.85720825]
[218.13667297 193.08229065]
[208.28169250 204.38229370]
[197.35057068 214.64489746]
[185.45195007 223.76812744]
[172.70408630 231.66131592]
[159.23365784 238.24601746]
[145.17456055 243.45677185]
[130.66648865 247.24182129]
[115.85365295 249.56352234]
[100.88325500 250.39883423]
[85.90407562 249.73941040]
[71.06498718 247.59184265]
[56.51346588 243.97746277]
[42.39412689 238.93217468]
[28.84729385 232.50614929]
[16.00759888 224.76322937]
[4.00264788 215.78038025]
[-7.04825211 205.64686584]
[-17.03527260 194.46339417]
[-25.85915947 182.34111023]
[-33.43222046 169.40051270]
[-39.67918777 155.77017212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 100]
[10 99]
[11 98]
[12 97]
[13 96]
[14 95]
[15 94]
[16 93]
[17 92]
[18 91]
[19 90]
[20 89]
[21 88]
[22 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
