%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCAUUUACCGGGGGGGGGGCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUxxxxxxxxxxGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCCCCCCCCCCCAACCAUUAACC\
) } def
/len { sequence length } bind def

/coor [
[32.89505386 481.91918945]
[18.87311172 476.36618042]
[6.67315435 467.49984741]
[-2.93791699 455.87753296]
[-9.35594273 442.22982788]
[-12.17747879 427.41464233]
[-11.22516346 412.36328125]
[-6.55885792 398.02185059]
[1.52810848 385.29190063]
[12.52738285 374.97363281]
[25.74754143 367.71563721]
[40.35755539 363.97421265]
[40.35755539 348.97421265]
[40.35755539 333.97421265]
[40.35755539 318.97421265]
[40.35755539 303.97421265]
[40.35755539 288.97421265]
[40.35755539 273.97421265]
[40.35755539 258.97421265]
[40.35755539 243.97421265]
[40.35755539 228.97421265]
[32.60078812 241.81292725]
[21.59457016 252.00425720]
[8.19824314 258.75247192]
[-6.54222918 261.53070068]
[-21.47593498 260.12197876]
[-35.43687439 254.63635254]
[-47.33500290 245.50210571]
[-56.24133301 233.43241882]
[-61.46047211 219.36967468]
[-62.58492279 204.41188049]
[-59.52688599 189.72691345]
[-52.52512741 176.46133423]
[-42.12633514 165.65092468]
[-29.14242935 158.13972473]
[-14.58717155 154.51419067]
[0.40298852 155.05741882]
[14.65764427 159.72697449]
[27.06381607 168.15827942]
[36.65285110 179.69302368]
[42.67605209 193.43060303]
[44.66312027 208.30102539]
[50.65141678 194.54818726]
[48.63841248 179.79023743]
[61.24169922 170.22636414]
[67.22999573 156.47354126]
[73.21829224 142.72070312]
[79.20658875 128.96788025]
[68.68446350 117.05406952]
[64.38488770 101.75152588]
[67.16220856 86.10095215]
[76.46455383 73.21218872]
[90.44351196 65.64628601]
[106.32138824 64.90663910]
[112.02604675 51.03375626]
[117.73071289 37.16087723]
[123.43537140 23.28799629]
[129.14004517 9.41511631]
[134.84469604 -4.45776415]
[122.87678528 -13.63405323]
[113.69915771 -25.58631325]
[107.93265533 -39.49614334]
[105.96481323 -54.41305542]
[107.92382050 -69.31942749]
[113.67018127 -83.19992828]
[122.80664062 -95.11067200]
[134.70562744 -104.24338531]
[148.55236816 -109.98030090]
[163.40068054 -111.93589783]
[178.23762512 -109.98281860]
[183.94229126 -123.85569763]
[170.84460449 -116.54470062]
[155.84483337 -116.62622070]
[142.82739258 -124.07915497]
[135.16334534 -136.97343445]
[134.83744812 -151.96989441]
[141.93406677 -165.18496704]
[154.61544800 -173.19638062]
[169.59751892 -173.92947388]
[183.00045776 -167.19439697]
[191.35334778 -154.73529053]
[192.49325562 -139.77963257]
[200.90667725 -152.19793701]
[209.32008362 -164.61625671]
[210.65490723 -180.38105774]
[224.19917297 -186.57800293]
[218.03839111 -200.72184753]
[220.52490234 -215.94750977]
[230.86528015 -227.39653015]
[245.75994873 -231.41557312]
[260.45605469 -226.72216797]
[270.26412964 -214.81398010]
[272.05447388 -199.49084473]
[265.25576782 -185.64234924]
[252.03746033 -177.68746948]
[236.61747742 -178.16458130]
[235.88444519 -163.28802490]
[221.73838806 -156.20285034]
[213.32498169 -143.78453064]
[204.91157532 -131.36621094]
[197.81517029 -118.15103149]
[192.11050415 -104.27815247]
[204.02946472 -95.22894287]
[213.20686340 -83.39374542]
[219.01239014 -69.57562256]
[221.04475403 -54.71420288]
[219.15945435 -39.82171249]
[213.47906494 -25.91408348]
[204.38523865 -13.94161987]
[192.49307251 -4.72407722]
[178.60954285 1.10546875]
[163.67872620 3.14410019]
[148.71757507 1.24689901]
[143.01292419 15.11977959]
[137.30825806 28.99266052]
[131.60359192 42.86553955]
[125.89892578 56.73842239]
[120.19426727 70.61130524]
[129.87420654 80.53115845]
[135.04060364 93.39246368]
[134.91291809 107.25206757]
[129.51040649 120.01599121]
[119.64933014 129.75579834]
[106.81953430 134.99996948]
[92.95941925 134.95617676]
[86.97112274 148.70899963]
[80.98282623 162.46183777]
[74.99452972 176.21466064]
[76.57920837 191.95629883]
[64.40424347 200.53648376]
[58.41595078 214.28932190]
[55.35755539 228.97421265]
[55.35755539 243.97421265]
[55.35755539 258.97421265]
[55.35755539 273.97421265]
[55.35755539 288.97421265]
[55.35755539 303.97421265]
[55.35755539 318.97421265]
[55.35755539 333.97421265]
[55.35755539 348.97421265]
[55.35755539 363.97421265]
[69.96756744 367.71563721]
[83.18772888 374.97363281]
[94.18700409 385.29190063]
[102.27396393 398.02185059]
[106.94026947 412.36328125]
[107.89258575 427.41464233]
[105.07105255 442.22982788]
[98.65302277 455.87753296]
[89.04195404 467.49984741]
[76.84199524 476.36618042]
[62.82005310 481.91918945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[42 131]
[43 130]
[45 128]
[46 127]
[47 126]
[48 125]
[54 118]
[55 117]
[56 116]
[57 115]
[58 114]
[59 113]
[70 102]
[71 101]
[82 100]
[83 99]
[84 98]
[86 96]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
