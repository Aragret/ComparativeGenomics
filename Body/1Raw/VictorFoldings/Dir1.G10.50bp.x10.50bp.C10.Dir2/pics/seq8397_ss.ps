%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAUACACAAGGGGGGGGGGCACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUUUUAxxxxxxxxxxUUCCUCACAGGUUUCUACUCCAAAGACCACAUCAUCGAAACCGCAAACAUCCCCCCCCCCAUCAUACACAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 406.10070801]
[71.01555634 400.54769897]
[58.81560135 391.68136597]
[49.20452881 380.05905151]
[42.78650284 366.41134644]
[39.96496582 351.59616089]
[40.91728210 336.54479980]
[45.58358765 322.20336914]
[53.67055511 309.47341919]
[64.66983032 299.15515137]
[77.88998413 291.89715576]
[92.50000000 288.15573120]
[92.50000000 273.15573120]
[92.50000000 258.15573120]
[92.50000000 243.15573120]
[92.50000000 228.15573120]
[92.50000000 213.15573120]
[92.50000000 198.15573120]
[92.50000000 183.15573120]
[92.50000000 168.15573120]
[92.50000000 153.15573120]
[77.40110016 148.69364929]
[64.24613190 140.04301453]
[54.16665649 127.94792938]
[48.02970505 113.44879913]
[46.36316299 97.79283142]
[49.31038666 82.32671356]
[56.61785889 68.38082886]
[45.84918213 57.93881989]
[35.08050156 47.49681091]
[24.31182480 37.05480194]
[12.65623569 46.52494431]
[-0.03762862 54.55004120]
[-13.59156704 61.01742935]
[-27.81530190 65.83631897]
[-42.50915527 68.93906403]
[-57.46685028 70.28209686]
[-72.47840118 69.84657288]
[-87.33306885 67.63859558]
[-101.82232666 63.68917465]
[-115.74275208 58.05374527]
[-128.89894104 50.81142426]
[-141.10618591 42.06388092]
[-152.19311523 31.93391418]
[-162.00410461 20.56373596]
[-170.40139771 8.11296654]
[-177.26713562 -5.24360704]
[-182.50491333 -19.31847763]
[-186.04121399 -33.91405869]
[-187.82640076 -48.82544708]
[-187.83538818 -63.84331131]
[-186.06805420 -78.75682831]
[-182.54922485 -93.35662842]
[-177.32829285 -107.43775940]
[-170.47854614 -120.80253601]
[-162.09616089 -133.26335144]
[-152.29878235 -144.64526367]
[-141.22398376 -154.78849792]
[-129.02722168 -163.55064392]
[-115.87971497 -170.80870056]
[-101.96604156 -176.46078491]
[-87.48152924 -180.42755127]
[-72.62950897 -182.65330505]
[-57.61849213 -183.10679626]
[-42.65919876 -181.78166199]
[-27.96164322 -178.69651794]
[-13.73215008 -173.89465332]
[-0.17048064 -167.44348145]
[12.53297997 -159.43359375]
[24.19989395 -149.97740173]
[34.66647720 -139.20768738]
[43.78579712 -127.27560425]
[51.42982864 -114.34869385]
[57.49126816 -100.60841370]
[61.88501358 -86.24765015]
[64.54938507 -71.46802521]
[65.44699097 -56.47700119]
[64.56521606 -41.48504257]
[61.91644287 -26.70261002]
[57.53786087 -12.33722210]
[51.49093246 1.40945137]
[43.86054993 14.34442902]
[34.75383377 26.28612328]
[45.52251053 36.72813034]
[56.29119110 47.17013931]
[67.05986786 57.61215210]
[83.82682800 48.81200790]
[102.60617065 46.38106918]
[121.06123352 50.62180328]
[136.89570618 61.00654984]
[148.13932800 76.24315643]
[162.38601685 71.54936218]
[176.63270569 66.85556030]
[190.87939453 62.16175842]
[205.12609863 57.46795654]
[219.37278748 52.77415848]
[218.68031311 37.69360352]
[222.08332825 22.98571396]
[229.32929993 9.74190712]
[239.88053894 -1.05503643]
[252.95407104 -8.60391235]
[267.57974243 -12.34454250]
[282.67224121 -11.99934959]
[297.11160278 -7.59394741]
[309.82632446 0.54475319]
[319.87289429 11.81280708]
[326.50576782 25.37404823]
[329.23278809 40.22214508]
[327.85156250 55.25526810]
[322.46459961 69.35786438]
[313.47161865 81.48341370]
[301.54000854 90.73213959]
[287.55511475 96.41770935]
[272.55474854 98.11822510]
[257.65203857 95.70749664]
[243.95285034 89.36441040]
[232.47375488 79.55966949]
[224.06658936 67.02085114]
[209.81990051 71.71465302]
[195.57319641 76.40844727]
[181.32650757 81.10224915]
[167.07981873 85.79605103]
[152.83312988 90.48985291]
[153.68222046 100.03492737]
[152.82070923 109.57889557]
[150.27603149 118.81761932]
[146.12928772 127.45671844]
[140.51260376 135.22088623]
[133.60496521 141.86273193]
[125.62649536 147.17059326]
[116.83142090 150.97534180]
[107.50000000 153.15573120]
[107.50000000 168.15573120]
[107.50000000 183.15573120]
[107.50000000 198.15573120]
[107.50000000 213.15573120]
[107.50000000 228.15573120]
[107.50000000 243.15573120]
[107.50000000 258.15573120]
[107.50000000 273.15573120]
[107.50000000 288.15573120]
[122.11001587 291.89715576]
[135.33016968 299.15515137]
[146.32945251 309.47341919]
[154.41641235 322.20336914]
[159.08271790 336.54479980]
[160.03503418 351.59616089]
[157.21350098 366.41134644]
[150.79547119 380.05905151]
[141.18440247 391.68136597]
[128.98443604 400.54769897]
[114.96250153 406.10070801]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[28 86]
[29 85]
[30 84]
[31 83]
[91 123]
[92 122]
[93 121]
[94 120]
[95 119]
[96 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
