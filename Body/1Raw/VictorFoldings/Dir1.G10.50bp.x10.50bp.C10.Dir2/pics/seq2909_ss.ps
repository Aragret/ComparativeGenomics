%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAACCCAACCGGGGGGGGGGUCCGAGCAGUACAUGCUAAGACUUCACCAGUCAAAGCGAACUACUAUACUxxxxxxxxxxGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCCCCCCCCCCCGAACCCAUCC\
) } def
/len { sequence length } bind def

/coor [
[136.32678223 440.51910400]
[123.10659027 433.24664307]
[112.21978760 422.79962158]
[104.40865326 409.89038086]
[100.20577240 395.39904785]
[99.89770508 380.31372070]
[103.50544739 365.66290283]
[110.78302002 352.44549561]
[121.23422241 341.56274414]
[134.14648438 333.75659180]
[148.63941956 329.55929565]
[148.32736206 314.56256104]
[148.01530457 299.56579590]
[147.70324707 284.56906128]
[147.39120483 269.57229614]
[147.07914734 254.57554626]
[146.76708984 239.57878113]
[146.45503235 224.58203125]
[146.14297485 209.58528137]
[145.83091736 194.58853149]
[143.96330261 179.70524597]
[140.56033325 165.09635925]
[137.15734863 150.48745728]
[126.73441315 139.84736633]
[131.13919067 124.65168762]
[127.73621368 110.04280090]
[95.54956818 125.01851654]
[78.67610168 99.89998627]
[64.65939331 94.55847168]
[50.64267731 89.21696472]
[36.62596512 83.87545013]
[20.83166885 91.32377625]
[4.84010410 85.19564819]
[-1.67021346 69.72071075]
[-15.79501629 64.67195129]
[-29.91981888 59.62319565]
[-44.04462433 54.57444000]
[-58.19509888 61.08610535]
[-72.44773865 55.76473618]
[-78.56840515 42.23429108]
[-92.69321442 37.18553162]
[-106.81801605 32.13677597]
[-120.94281769 27.08802032]
[-136.00016785 32.62477875]
[-149.64181519 24.18172073]
[-151.40303040 8.23563576]
[-139.93278503 -2.98100376]
[-124.03005981 -0.86375147]
[-115.89405823 12.96321774]
[-101.76925659 18.01197433]
[-87.64445496 23.06072998]
[-73.51965332 28.10948753]
[-60.20896149 21.52456856]
[-45.81248093 26.44351387]
[-38.99586487 40.44963837]
[-24.87106323 45.49839401]
[-10.74625969 50.54714966]
[3.37854290 55.59590530]
[14.17519855 48.49456787]
[27.28551292 48.93501282]
[37.89199829 56.98053360]
[41.96747971 69.85873413]
[55.98419189 75.20024872]
[70.00090027 80.54176331]
[84.01761627 85.88327026]
[89.88700867 78.18082428]
[99.44502258 73.23210907]
[111.28466034 72.74542236]
[111.59671783 57.74867249]
[111.90877533 42.75191879]
[98.47663116 35.41460419]
[90.00253296 22.66908264]
[88.43376923 7.44418383]
[94.13082886 -6.76152420]
[105.78456116 -16.68367386]
[120.71703339 -20.04222679]
[135.49687195 -16.06541252]
[146.72776794 -5.66707420]
[151.82896423 8.76332664]
[149.62821960 23.90979004]
[140.63125610 36.29176712]
[126.90552521 43.06397247]
[126.59346771 58.06072617]
[126.28141785 73.05747986]
[139.44999695 80.23999023]
[151.88943481 71.85784912]
[164.32887268 63.47570419]
[176.76831055 55.09355927]
[189.20776367 46.71141815]
[201.64720154 38.32927322]
[204.79187012 23.07316780]
[217.52664185 14.74968719]
[232.05163574 17.84167290]
[244.49107361 9.45952988]
[244.05273438 -5.96160555]
[252.04084778 -19.15985107]
[265.90640259 -25.92369652]
[281.22497559 -24.09482002]
[293.10845947 -14.25681305]
[297.76489258 0.45105433]
[293.70837402 15.33555412]
[282.23336792 25.64709854]
[267.00152588 28.09530830]
[252.87321472 21.89896965]
[240.43377686 30.28111267]
[237.84593201 44.90433884]
[225.34997559 53.58222580]
[210.02934265 50.76871490]
[197.58990479 59.15085602]
[185.15046692 67.53299713]
[172.71101379 75.91514587]
[160.27157593 84.29728699]
[147.83213806 92.67942810]
[142.34510803 106.63981628]
[145.74809265 121.24871063]
[156.41442871 132.93373108]
[151.76623535 147.08448792]
[155.16921997 161.69337463]
[158.57218933 176.30227661]
[165.02426147 162.76081848]
[177.30412292 154.14659119]
[192.23316956 152.68933105]
[205.94706726 158.76626587]
[214.89601135 170.80438232]
[216.76359558 185.68766785]
[211.06640625 199.56361389]
[199.27912903 208.84048462]
[184.45289612 211.11698914]
[170.42539978 205.80384827]
[160.82766724 194.27647400]
[161.13972473 209.27322388]
[161.45178223 224.26997375]
[161.76383972 239.26673889]
[162.07589722 254.26348877]
[162.38795471 269.26025391]
[162.70001221 284.25698853]
[163.01206970 299.25375366]
[163.32412720 314.25048828]
[163.63616943 329.24725342]
[178.29116821 332.83801270]
[191.51698303 340.10028076]
[202.41184998 350.53887939]
[210.23294067 363.44207764]
[214.44700623 377.93014526]
[214.76673889 393.01525879]
[211.17030334 407.66885376]
[203.90293884 420.89184570]
[193.46014404 431.78268433]
[180.55390930 439.59881592]
[166.06422424 443.80728149]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 119]
[22 118]
[23 117]
[25 115]
[26 114]
[28 65]
[29 64]
[30 63]
[31 62]
[34 58]
[35 57]
[36 56]
[37 55]
[40 52]
[41 51]
[42 50]
[43 49]
[68 84]
[69 83]
[70 82]
[85 113]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[93 105]
[94 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
