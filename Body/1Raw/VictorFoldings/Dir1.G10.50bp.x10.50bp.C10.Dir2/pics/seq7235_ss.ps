%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACAUCCUAGGGGGGGGGGUCAUCUGUAGGCUCAUUCAUUUCUCUAACAGCAGUAAUAUUAAUAAUUUUxxxxxxxxxxCUUCCCCUACUCAUCGCACUAAUUUACACUCACAACACCCUAGGCUCACUCCCCCCCCCCAAACAUUCUA\
) } def
/len { sequence length } bind def

/coor [
[82.18857574 412.15884399]
[68.34263611 406.14282227]
[56.63397217 396.61340332]
[47.93144989 384.27774048]
[42.88084793 370.05120850]
[41.85695648 354.98953247]
[44.93575287 340.21035767]
[51.88877487 326.81042480]
[62.20006180 315.78411865]
[75.10443878 307.94958496]
[89.64432526 303.88827515]
[89.64432526 288.88827515]
[89.64432526 273.88827515]
[89.64432526 258.88827515]
[89.64432526 243.88829041]
[89.64432526 228.88829041]
[89.64432526 213.88829041]
[89.64432526 198.88829041]
[89.64432526 183.88829041]
[89.64432526 168.88829041]
[80.60659027 163.79135132]
[74.48002625 155.31700134]
[72.44184875 144.97784424]
[74.93194580 134.65466309]
[81.56008911 126.25431824]
[91.16542053 121.35755157]
[92.10104370 106.38676453]
[89.40731049 98.72988129]
[93.21506500 91.11526489]
[94.46193695 76.16718292]
[87.89855194 61.77160645]
[96.66703033 49.73154449]
[97.91390228 34.78345490]
[83.08309174 32.49616241]
[68.44795990 29.17988968]
[54.07981110 24.85079765]
[40.04864883 19.52997398]
[26.42282677 13.24334240]
[13.26873302 6.02153158]
[0.65045279 -2.10027456]
[-11.37053871 -11.08250713]
[-22.73567581 -20.88140488]
[-33.38958740 -31.44922829]
[-43.28036880 -42.73448944]
[-52.35983276 -54.68221283]
[-60.58374405 -67.23418427]
[-67.91204071 -80.32925415]
[-74.30901337 -93.90361786]
[-79.74349976 -107.89115143]
[-84.18901825 -122.22370911]
[-87.62391663 -136.83145142]
[-90.03146362 -151.64321899]
[-91.39991760 -166.58685303]
[-91.72261810 -181.58953857]
[-90.99800110 -196.57818604]
[-89.22958374 -211.47978210]
[-86.42598724 -226.22171021]
[-82.60086823 -240.73216248]
[-77.77286530 -254.94044495]
[-71.96550751 -268.77731323]
[-65.20706940 -282.17538452]
[-57.53049469 -295.06936646]
[-48.97317123 -307.39645386]
[-39.57680130 -319.09658813]
[-29.38715363 -330.11273193]
[-18.45387650 -340.39126587]
[-6.83023500 -349.88211060]
[5.42714071 -358.53897095]
[18.25853348 -366.31973267]
[31.60142899 -373.18643188]
[45.39082336 -379.10568237]
[59.55953217 -384.04858398]
[74.03852844 -387.99108887]
[88.75727081 -390.91400146]
[103.64405060 -392.80303955]
[118.62634277 -393.64901733]
[133.63114929 -393.44784546]
[148.58537292 -392.20043945]
[163.41615295 -389.91293335]
[178.05123901 -386.59646606]
[192.41932678 -382.26718140]
[206.45040894 -376.94613647]
[220.07614136 -370.65930176]
[233.23013306 -363.43731689]
[245.84829712 -355.31533813]
[257.86917114 -346.33291626]
[269.23416138 -336.53387451]
[279.88790894 -325.96588135]
[289.77853394 -314.68048096]
[298.85781860 -302.73263550]
[307.08157349 -290.18054199]
[314.40966797 -277.08535767]
[320.80645752 -263.51089478]
[326.24072266 -249.52330017]
[330.68603516 -235.19067383]
[334.12072754 -220.58288574]
[336.52807617 -205.77108765]
[337.89630127 -190.82743835]
[338.21881104 -175.82475281]
[337.49395752 -160.83610535]
[335.72534180 -145.93453979]
[332.92153931 -131.19264221]
[329.09619141 -116.68225098]
[324.26800537 -102.47404480]
[318.46041870 -88.63724518]
[311.70181274 -75.23927307]
[304.02505493 -62.34539413]
[295.46755981 -50.01843262]
[286.07101440 -38.31844330]
[275.88119507 -27.30242920]
[264.94778442 -17.02405548]
[253.32400513 -7.53339958]
[241.06649780 1.12329888]
[228.23500061 8.90386581]
[214.89199829 15.77039623]
[201.10252380 21.68943405]
[186.93374634 26.63214493]
[172.45469666 30.57444572]
[157.73590088 33.49713135]
[142.84909058 35.38595963]
[127.86679840 36.23173523]
[112.86199188 36.03033066]
[111.61511230 50.97841644]
[118.26768494 64.30480194]
[109.41002655 77.41405487]
[108.16314697 92.36214447]
[107.07183838 107.32238770]
[106.13620758 122.29318237]
[120.21713257 136.54008484]
[119.39854431 156.25167847]
[104.64432526 168.88829041]
[104.64432526 183.88829041]
[104.64432526 198.88829041]
[104.64432526 213.88829041]
[104.64432526 228.88829041]
[104.64432526 243.88829041]
[104.64432526 258.88827515]
[104.64432526 273.88827515]
[104.64432526 288.88827515]
[104.64432526 303.88827515]
[119.18421173 307.94958496]
[132.08859253 315.78411865]
[142.39988708 326.81042480]
[149.35290527 340.21035767]
[152.43170166 354.98953247]
[151.40780640 370.05120850]
[146.35720825 384.27774048]
[137.65467834 396.61340332]
[125.94602203 406.14282227]
[112.10008240 412.15884399]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 128]
[27 127]
[29 126]
[30 125]
[32 123]
[33 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
