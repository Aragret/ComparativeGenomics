%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAGACCAGGGGGGGGGGAACCUACGCCAAAAUCCAUUUCACUAUCAUAUUCAUCGGCGUAAAUCUAAxxxxxxxxxxCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCCCCCCCCCCCUAGCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.71142578]
[71.19830322 384.69540405]
[59.48964310 375.16598511]
[50.78712082 362.83032227]
[45.73651886 348.60379028]
[44.71262741 333.54211426]
[47.79142761 318.76293945]
[54.74444962 305.36300659]
[65.05573273 294.33670044]
[77.96011353 286.50216675]
[92.50000000 282.44085693]
[92.50000000 267.44085693]
[92.50000000 252.44087219]
[92.50000000 237.44087219]
[92.50000000 222.44087219]
[92.50000000 207.44087219]
[92.50000000 192.44087219]
[92.50000000 177.44087219]
[92.50000000 162.44087219]
[92.50000000 147.44087219]
[84.76270294 134.71359253]
[92.50000000 120.91342163]
[80.20481110 113.19423676]
[74.67121887 98.71637726]
[79.21392822 82.87302399]
[64.71833801 79.01586151]
[50.22273636 75.15870667]
[35.72714233 71.30154419]
[21.23154449 67.44438171]
[6.73594809 63.58722687]
[-8.19835949 62.18492126]
[-23.15860939 63.27623367]
[-38.11885834 64.36754608]
[-49.65340424 75.51804352]
[-65.54370117 73.30939484]
[-73.60005951 59.43587494]
[-67.64234161 44.54006577]
[-52.24079514 40.04875565]
[-39.21016693 49.40729523]
[-24.24991989 48.31598282]
[-9.28966999 47.22467422]
[-22.49681091 40.11331177]
[-32.54681015 28.97789383]
[-38.27116394 15.11312675]
[-39.00430679 0.13105395]
[-34.66099548 -14.22637081]
[-25.74622345 -26.28982162]
[-13.29650497 -34.65669250]
[1.24064147 -38.35417175]
[16.17499542 -36.95236206]
[29.77015114 -30.61424255]
[40.44541168 -20.07674789]
[46.95957184 -6.56506062]
[48.55524063 8.34982586]
[45.04688644 22.93377113]
[36.84242249 35.49111176]
[24.89577675 44.56181335]
[10.59310722 49.09162903]
[25.08870316 52.94878769]
[39.58430099 56.80594635]
[54.07989883 60.66310501]
[68.57549286 64.52026367]
[83.07109070 68.37742615]
[97.48330688 64.21953583]
[107.69678497 53.23387527]
[117.91026306 42.24820709]
[128.12374878 31.26254463]
[138.33721924 20.27688026]
[123.74459839 23.74893951]
[108.91751099 21.47793198]
[96.03309631 13.79731560]
[86.98323059 1.83487439]
[83.09675598 -12.65289021]
[84.94434357 -27.53866959]
[92.25469208 -40.63671494]
[103.95439148 -50.02377701]
[118.32553101 -54.32151031]
[133.25790405 -52.89885712]
[146.55894470 -45.96471024]
[156.27558899 -34.53724670]
[160.98109436 -20.29441452]
[159.98451233 -5.32755709]
[153.43260193 8.16514111]
[166.37066650 0.57523322]
[172.23663330 -6.51294279]
[179.65777588 -7.03477573]
[192.75093079 -14.35388088]
[205.84408569 -21.67298698]
[218.93724060 -28.99209213]
[232.03039551 -36.31119919]
[244.96844482 -43.90110779]
[257.74581909 -51.75853348]
[270.52316284 -59.61595917]
[268.47000122 -74.70583344]
[272.73818970 -89.32440186]
[282.58825684 -100.93889618]
[296.31356812 -107.53704071]
[311.53616333 -107.97566986]
[325.61862183 -102.17877960]
[336.12109375 -91.15071869]
[341.22396851 -76.80217743]
[340.04309082 -61.61911011]
[332.78311157 -48.23208618]
[320.70181274 -38.96048355]
[305.89239502 -35.41066742]
[290.92068481 -38.19765854]
[278.38058472 -46.83860016]
[265.60324097 -38.98117447]
[252.82586670 -31.12374878]
[250.85729980 -26.70784569]
[246.05924988 -23.51252174]
[239.34950256 -23.21804428]
[226.25634766 -15.89893818]
[213.16319275 -8.57983208]
[200.07003784 -1.26072669]
[186.97688293 6.05837870]
[173.96057129 13.51328945]
[161.02250671 21.10319710]
[149.32289124 30.49035835]
[139.10940552 41.47602463]
[128.89593506 52.46168900]
[118.68244934 63.44735336]
[108.46897125 74.43302155]
[117.49066925 80.56412506]
[123.10375977 89.54002380]
[124.57352448 99.69940948]
[121.90534973 109.27864075]
[115.80140686 116.71757507]
[107.50000000 120.91342163]
[115.23729706 134.71359253]
[107.50000000 147.44087219]
[107.50000000 162.44087219]
[107.50000000 177.44087219]
[107.50000000 192.44087219]
[107.50000000 207.44087219]
[107.50000000 222.44087219]
[107.50000000 237.44087219]
[107.50000000 252.44087219]
[107.50000000 267.44085693]
[107.50000000 282.44085693]
[122.03988647 286.50216675]
[134.94427490 294.33670044]
[145.25555420 305.36300659]
[152.20857239 318.76293945]
[155.28736877 333.54211426]
[154.26348877 348.60379028]
[149.21287537 362.83032227]
[140.51036072 375.16598511]
[128.80169678 384.69540405]
[114.95575714 390.71142578]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[25 63]
[26 62]
[27 61]
[28 60]
[29 59]
[30 58]
[31 41]
[32 40]
[33 39]
[64 123]
[65 122]
[66 121]
[67 120]
[68 119]
[83 118]
[84 117]
[86 116]
[87 115]
[88 114]
[89 113]
[90 112]
[91 109]
[92 108]
[93 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
