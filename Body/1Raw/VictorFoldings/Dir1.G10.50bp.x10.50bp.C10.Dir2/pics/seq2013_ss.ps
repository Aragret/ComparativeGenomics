%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAGAUAUAGGGGGGGGGGGUACCGCAAGGGAAAGAUGAAAAAUUAUAACCAAGCAUAAUAUAGCAAGGAxxxxxxxxxxCAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUCCCCCCCCCCAAUAGCUAUAG\
) } def
/len { sequence length } bind def

/coor [
[87.18947601 356.68389893]
[72.62961578 352.77569580]
[59.42847443 345.49606323]
[48.35354233 335.26818848]
[40.04870224 322.68673706]
[34.99679184 308.48315430]
[33.49151611 293.48324585]
[35.62039185 278.55905151]
[41.25965118 264.57827759]
[50.08143234 252.35371399]
[61.57285309 242.59611511]
[75.06581116 235.87275696]
[89.77584839 232.57453918]
[90.08382416 217.57769775]
[90.39179993 202.58085632]
[90.69977570 187.58403015]
[91.00775909 172.58718872]
[91.31573486 157.59034729]
[91.62371063 142.59350586]
[91.93168640 127.59667206]
[92.23966980 112.59983063]
[79.65122986 104.44316864]
[70.48000336 117.33499908]
[55.66706467 115.77742004]
[42.10516739 122.18639374]
[33.21798706 135.96862793]
[16.85414696 134.89308167]
[9.84736538 120.06617737]
[19.40561676 106.74057007]
[35.69619370 108.62449646]
[49.25808716 102.21552277]
[57.45927429 89.78210449]
[73.24224854 90.88127136]
[81.52429962 89.03554535]
[89.17202759 90.05859375]
[95.39530182 93.56243896]
[99.94258881 79.26831055]
[104.48988342 64.97418213]
[109.03717041 50.68005371]
[113.58446503 36.38592148]
[112.45878601 32.04627991]
[112.77877808 27.99397659]
[114.26767731 24.65782166]
[116.53558350 22.32848167]
[119.13601685 21.13315964]
[124.84067535 7.26027918]
[130.54533386 -6.61260128]
[136.25000000 -20.48548126]
[126.74438477 -31.90679359]
[125.72955322 -48.18832016]
[135.27845764 -63.17406082]
[126.11651611 -75.05088043]
[110.69026947 -77.21161652]
[101.56795502 -89.38691711]
[103.72295380 -104.08016968]
[94.56101227 -115.95699310]
[79.05480194 -115.37639618]
[66.18753815 -124.04894257]
[60.90694427 -138.63986206]
[65.24351501 -153.53865051]
[77.52975464 -163.01641846]
[93.04135132 -163.42875671]
[105.81377411 -154.61714172]
[110.93577576 -139.96978760]
[106.43783569 -125.11892700]
[115.59977722 -113.24210358]
[130.35876465 -111.59651947]
[139.81945801 -99.68224335]
[137.99334717 -84.21282196]
[147.15527344 -72.33599854]
[144.80897522 -87.15135193]
[136.51409912 -99.64915466]
[134.81488037 -114.55260468]
[140.08355713 -128.59684753]
[151.16595459 -138.70529175]
[165.63427734 -142.66351318]
[180.31903076 -139.60440063]
[192.00326538 -130.19808960]
[198.12738037 -116.50520325]
[197.34979248 -101.52536774]
[189.84082031 -88.54016876]
[177.24842834 -80.39525604]
[169.18261719 -67.74840546]
[182.32424927 -74.98010254]
[195.46588135 -82.21180725]
[208.60751343 -89.44351196]
[221.74914551 -96.67520905]
[217.20091248 -111.02093506]
[215.53909302 -125.97836304]
[216.82756042 -140.97256470]
[221.01678467 -155.42720032]
[227.94573975 -168.78669739]
[237.34809875 -180.53750610]
[248.86247253 -190.22799683]
[262.04626465 -197.48568726]
[276.39273071 -202.03158569]
[291.35040283 -203.69099426]
[306.34439087 -202.40010071]
[320.79837036 -198.20854187]
[334.15673828 -191.27742004]
[345.90603638 -181.87315369]
[355.59466553 -170.35722351]
[362.85018921 -157.17225647]
[367.39379883 -142.82505798]
[369.05078125 -127.86710358]
[367.75744629 -112.87331390]
[363.56353760 -98.42002869]
[356.63027954 -85.06278992]
[347.22409058 -73.31501770]
[335.70660400 -63.62825394]
[322.52047729 -56.37483978]
[308.17251587 -51.83357620]
[293.21429443 -50.17901611]
[278.22073364 -51.47476196]
[263.76812744 -55.67100143]
[250.41200256 -62.60644150]
[238.66574097 -72.01451111]
[228.98085022 -83.53358459]
[215.83921814 -76.30187988]
[202.69758606 -69.07017517]
[189.55595398 -61.83847427]
[176.41432190 -54.60676956]
[174.52613831 -24.56968498]
[150.12287903 -14.78081894]
[144.41822815 -0.90793788]
[138.71356201 12.96494293]
[133.00889587 26.83782387]
[127.87859344 40.93321228]
[123.33130646 55.22734451]
[118.78401184 69.52146912]
[114.23672485 83.81560516]
[109.68943024 98.10973358]
[107.23650360 112.90781403]
[106.92852783 127.90464783]
[106.62055206 142.90148926]
[106.31256866 157.89833069]
[106.00459290 172.89515686]
[105.69661713 187.89199829]
[105.38864136 202.88883972]
[105.08065796 217.88568115]
[104.77268219 232.88252258]
[119.33490753 236.78187561]
[132.54046631 244.05352783]
[143.62159729 254.27467346]
[151.93405151 266.85110474]
[156.99458313 281.05160522]
[158.50895691 296.05059814]
[156.38912964 310.97607422]
[150.75834656 324.96026611]
[141.94396973 337.19018555]
[130.45846558 346.95474243]
[116.96958923 353.68627930]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 33]
[24 31]
[25 30]
[36 132]
[37 131]
[38 130]
[39 129]
[40 128]
[45 127]
[46 126]
[47 125]
[48 124]
[51 70]
[52 69]
[55 66]
[56 65]
[83 122]
[84 121]
[85 120]
[86 119]
[87 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
