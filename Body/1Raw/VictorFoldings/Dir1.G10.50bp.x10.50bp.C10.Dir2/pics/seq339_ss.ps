%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCGCUUCGGGGGGGGGGUGGCCACAGCACUUAAACACAUCUCUGCCAAACCCCAAAAACAAAGAACCxxxxxxxxxxACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCCCCCCCCCCCGAUUC\
) } def
/len { sequence length } bind def

/coor [
[66.34890747 387.03253174]
[52.50296783 381.01651001]
[40.79430771 371.48709106]
[32.09178162 359.15142822]
[27.04117966 344.92489624]
[26.01728821 329.86322021]
[29.09608841 315.08404541]
[36.04911041 301.68414307]
[46.36039352 290.65780640]
[59.26477432 282.82330322]
[73.80466461 278.76196289]
[73.80466461 263.76196289]
[73.80466461 248.76197815]
[73.80466461 233.76197815]
[73.80466461 218.76197815]
[73.80466461 203.76197815]
[73.80466461 188.76197815]
[73.80466461 173.76197815]
[73.80466461 158.76197815]
[73.80466461 143.76197815]
[73.80466461 128.76197815]
[86.76216125 92.96373749]
[79.30725098 79.94742584]
[65.74562836 86.37477112]
[51.72671509 91.73186493]
[37.33482361 95.98648071]
[22.65650558 99.11302948]
[7.78004169 101.09271240]
[-7.20509815 101.91362000]
[-22.20879173 101.57081604]
[-37.14080048 100.06636810]
[-51.91132736 97.40931702]
[-66.43153381 93.61564636]
[-80.61408997 88.70816803]
[-94.37371063 82.71640015]
[-107.62762451 75.67637634]
[-120.29614258 67.63043976]
[-132.30305481 58.62697983]
[-143.57615662 48.72014236]
[-154.04765320 37.96950912]
[-163.65455627 26.43973732]
[-172.33911133 14.20017052]
[-180.04905701 1.32441819]
[-186.73803711 -12.11008167]
[-192.36582947 -26.02253151]
[-196.89859009 -40.32926178]
[-200.30903625 -54.94422150]
[-202.57667542 -69.77952576]
[-203.68786621 -84.74593353]
[-203.63592529 -99.75345612]
[-202.42117310 -114.71182251]
[-200.05088806 -129.53106689]
[-196.53935242 -144.12207031]
[-191.90768433 -158.39707947]
[-186.18373108 -172.27024841]
[-179.40191650 -185.65812683]
[-171.60302734 -198.48019409]
[-162.83396912 -210.65936279]
[-153.14747620 -222.12236023]
[-142.60182190 -232.80024719]
[-131.26040649 -242.62881470]
[-119.19145966 -251.54895020]
[-106.46755981 -259.50701904]
[-93.16522217 -266.45510864]
[-79.36446381 -272.35150146]
[-65.14827728 -277.16067505]
[-50.60215759 -280.85375977]
[-35.81359482 -283.40850830]
[-20.87153053 -284.80957031]
[-5.86582327 -285.04849243]
[9.11327553 -284.12390137]
[23.97567940 -282.04129028]
[38.63200378 -278.81320190]
[52.99410248 -274.45907593]
[66.97559357 -269.00506592]
[80.49240112 -262.48400879]
[93.46322632 -254.93508911]
[105.81005859 -246.40373230]
[117.45864105 -236.94123840]
[128.33891296 -226.60452271]
[138.38545227 -215.45573425]
[147.53782654 -203.56193542]
[155.74099731 -190.99467468]
[162.94563293 -177.82949829]
[169.10838318 -164.14561462]
[174.19219971 -150.02529907]
[178.16650391 -135.55349731]
[181.00740051 -120.81723022]
[182.69779968 -105.90512085]
[183.22752380 -90.90686798]
[182.59339905 -75.91265869]
[180.79924011 -61.01268387]
[177.85583496 -46.29654694]
[173.78088379 -31.85275650]
[168.59889221 -17.76818085]
[162.34103394 -4.12752533]
[155.04493713 8.98717117]
[146.75447083 21.49703407]
[137.51953125 33.32682800]
[127.39562225 44.40540695]
[116.44364929 54.66613770]
[104.72947693 64.04731750]
[92.32355499 72.49251556]
[99.77846527 85.50882721]
[112.38959503 93.63037109]
[127.32390594 95.03266907]
[142.25820923 96.43497467]
[157.19252014 97.83728027]
[172.12683105 99.23958588]
[187.06112671 100.64188385]
[195.88488770 88.07061005]
[209.81886292 81.60999298]
[225.11491394 82.99790955]
[237.65847778 91.86101532]
[244.07539368 105.81518555]
[242.63954163 121.10681152]
[233.73715210 133.62252808]
[219.76293945 139.99566650]
[204.47589111 138.51188660]
[191.98812866 129.57031250]
[185.65882874 115.57619476]
[170.72451782 114.17388916]
[155.79022217 112.77159119]
[140.85591125 111.36928558]
[125.92160034 109.96697998]
[110.98728943 108.56467438]
[105.44163513 113.61399841]
[108.64196777 128.26861572]
[94.35031891 123.71265411]
[88.80466461 128.76197815]
[88.80466461 143.76197815]
[88.80466461 158.76197815]
[88.80466461 173.76197815]
[88.80466461 188.76197815]
[88.80466461 203.76197815]
[88.80466461 218.76197815]
[88.80466461 233.76197815]
[88.80466461 248.76197815]
[88.80466461 263.76196289]
[88.80466461 278.76196289]
[103.34455109 282.82330322]
[116.24893188 290.65780640]
[126.56021118 301.68414307]
[133.51322937 315.08404541]
[136.59204102 329.86322021]
[135.56814575 344.92489624]
[130.51754761 359.15142822]
[121.81501770 371.48709106]
[110.10635376 381.01651001]
[96.26041412 387.03253174]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 104]
[23 103]
[105 126]
[106 125]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
