%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGAUCCCUCCCUGGGGGGGGGGUACCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGxxxxxxxxxxCUCCCCACAUCAAGCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCCCCCCCCCCCGAUCCGUCCCU\
) } def
/len { sequence length } bind def

/coor [
[81.16354370 371.66149902]
[67.95546722 364.42544556]
[56.61202240 354.51885986]
[47.66376877 342.40512085]
[41.52923203 328.65078735]
[38.49533081 313.89920044]
[38.70397568 298.84030151]
[42.14539719 284.17840576]
[48.65864182 270.59930420]
[57.93906784 258.73812866]
[69.55261993 249.14961243]
[82.95610046 242.28225708]
[97.52261353 238.45722961]
[96.91472626 223.46955872]
[96.30684662 208.48187256]
[95.69895935 193.49420166]
[95.09107971 178.50653076]
[94.48319244 163.51884460]
[93.87531281 148.53117371]
[93.26742554 133.54348755]
[92.65954590 118.55581665]
[81.58043671 108.44377136]
[66.59968567 109.20351410]
[51.61894226 109.96324921]
[36.63819122 110.72298431]
[21.65744591 111.48272705]
[6.67669773 112.24246216]
[18.57176781 121.38069153]
[23.77376175 135.44978333]
[20.68483925 150.12829590]
[10.25379181 160.90759277]
[-4.31539679 164.47671509]
[-18.54767799 159.73941040]
[-28.07148552 148.15074158]
[-29.96150208 133.27029419]
[-23.63719368 119.66870880]
[-11.04116917 111.52384186]
[-25.91118240 109.55339050]
[-40.78119659 107.58293915]
[-55.65121078 105.61248779]
[-72.14735413 109.52574921]
[-80.47427368 94.75758362]
[-68.58836365 82.66784668]
[-53.68075943 90.74247742]
[-38.81074524 92.71292877]
[-23.94073105 94.68338013]
[-9.07071781 96.65383148]
[5.91696024 97.26171112]
[20.89770699 96.50197601]
[35.87845612 95.74224091]
[50.85920334 94.98249817]
[65.83995056 94.22276306]
[80.82070160 93.46302795]
[90.35861206 81.88597107]
[88.23757172 67.03668976]
[86.11652374 52.18740845]
[71.08542633 51.77033997]
[56.34104919 48.81883240]
[42.30762482 43.41781235]
[29.38891983 35.72267532]
[17.95663643 25.95482635]
[8.33970070 14.39530468]
[0.81481183 1.37670052]
[-4.40152454 -12.72641373]
[-7.15922451 -27.50826454]
[-7.37894249 -42.54354858]
[-5.05435705 -57.39966965]
[-0.25235146 -71.64918518]
[6.88891125 -84.88211060]
[16.16396332 -96.71771240]
[27.30594063 -106.81545258]
[39.99427032 -114.88479614]
[53.86388016 -120.69358063]
[68.51571655 -124.07466125]
[83.52821350 -124.93077850]
[98.46942902 -123.23728180]
[112.90948486 -119.04290009]
[126.43290710 -112.46831512]
[138.65060425 -103.70269775]
[149.21102905 -92.99824524]
[157.81036377 -80.66294861]
[164.20117188 -67.05171967]
[168.19956970 -52.55617905]
[169.69053650 -37.59339142]
[168.63116455 -22.59386635]
[165.05194092 -7.98917150]
[159.05583191 5.80048800]
[150.81536865 18.37835503]
[140.56764221 29.38254166]
[128.60749817 38.49643326]
[115.27906036 45.45780563]
[100.96580505 50.06636429]
[103.08685303 64.91564941]
[105.20789337 79.76493073]
[118.01731110 87.56997681]
[132.18629456 82.64655304]
[138.52563477 71.36969757]
[150.47395325 67.57988739]
[161.42846680 72.79688263]
[175.69430542 68.16162872]
[189.96015930 63.52637482]
[204.22599792 58.89111710]
[218.49185181 54.25586319]
[221.60661316 39.21612167]
[231.83592224 27.75938988]
[246.42816162 22.96746635]
[261.45806885 26.12936020]
[272.88265991 36.39453506]
[277.62884521 51.00170898]
[274.41983032 66.02162933]
[264.11889648 77.41400909]
[249.49693298 82.11435699]
[234.48713684 78.85830688]
[223.12710571 68.52171326]
[208.86125183 73.15696716]
[194.59541321 77.79222107]
[180.32955933 82.42747498]
[166.06372070 87.06272888]
[155.07823181 100.71583557]
[137.10971069 96.81552887]
[122.94074249 101.73895264]
[137.73561096 104.21120453]
[152.68832397 105.40117645]
[164.83450317 114.20291138]
[170.62120056 128.04176331]
[168.35574341 142.86970520]
[158.70080566 154.34934998]
[144.48057556 159.12272644]
[129.85469055 155.79357910]
[119.10139465 145.33572388]
[115.36616516 130.80941772]
[107.64722443 117.94792938]
[108.25510406 132.93560791]
[108.86299133 147.92327881]
[109.47087097 162.91096497]
[110.07875824 177.89863586]
[110.68663788 192.88632202]
[111.29452515 207.87399292]
[111.90240479 222.86167908]
[112.51029205 237.84934998]
[127.33872223 240.48214722]
[141.25433350 246.24147034]
[153.60626221 254.85797119]
[163.81677246 265.92861938]
[171.40832520 278.93563843]
[176.02583313 293.27066040]
[177.45332336 308.26321411]
[175.62403870 323.21203613]
[170.62353516 337.41799927]
[162.68569946 350.21661377]
[152.18179321 361.00930786]
[139.60311890 369.29125977]
[125.53797150 374.67510986]
[110.64423370 376.90905762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 53]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[37 47]
[38 46]
[39 45]
[40 44]
[54 94]
[55 93]
[56 92]
[95 121]
[96 120]
[99 118]
[100 117]
[101 116]
[102 115]
[103 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
