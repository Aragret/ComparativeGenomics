%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUUUAUUACGGGGGGGGGGCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCAxxxxxxxxxxAAACUUCGCCUUAAUUUUAAUAAUCAACACCCUCCUAGCCUUACUACUAACCCCCCCCCCUAAUUAUUAC\
) } def
/len { sequence length } bind def

/coor [
[80.71413422 333.54861450]
[68.15590668 325.19744873]
[58.06968689 313.98498535]
[51.08949280 300.61608887]
[47.65410995 285.93109131]
[47.97948456 270.85314941]
[52.04516983 256.33001709]
[59.59558868 243.27467346]
[70.15612030 232.50778198]
[83.06291199 224.70614624]
[97.50464630 220.36019897]
[96.88066864 205.37316895]
[96.25669098 190.38615417]
[95.63271332 175.39913940]
[95.00873566 160.41212463]
[94.38475800 145.42510986]
[93.76078033 130.43809509]
[93.13680267 115.45108032]
[82.36598969 105.01126862]
[67.36680603 104.85523224]
[52.36761475 104.69919586]
[37.36842728 104.54315948]
[22.36923790 104.38712311]
[7.37005043 104.23108673]
[-7.62913799 104.07505035]
[-22.62832642 103.91901398]
[-37.62751389 103.76297760]
[-41.83985901 118.25982666]
[-49.80818176 131.08201599]
[-60.94117737 141.27803040]
[-74.41271210 148.09129333]
[-89.22309875 151.01618958]
[-104.27331543 149.83566284]
[-118.44652557 144.63734436]
[-130.69099426 135.80697632]
[-140.09809875 123.99981689]
[-145.96977234 110.09204865]
[-147.87028503 95.11571503]
[-145.65861511 80.18215942]
[-139.49888611 66.39955139]
[-129.84819031 54.79064941]
[-117.42266083 46.21691895]
[-103.14436340 41.31457901]
[-88.07285309 40.44742203]
[-73.32651520 43.67979431]
[-59.99964142 50.77183151]
[-49.08116913 61.19725800]
[-41.38132095 74.18244171]
[-37.47147751 88.76378632]
[-22.47229004 88.91982269]
[-7.47310162 89.07585907]
[7.52608681 89.23189545]
[22.52527618 89.38793182]
[37.52446365 89.54396820]
[52.52365112 89.70000458]
[67.52284241 89.85604095]
[82.52202606 90.01207733]
[90.57367706 85.93725586]
[98.22834778 86.38582611]
[103.42856598 90.04572296]
[114.30739594 79.71851349]
[125.18621826 69.39131165]
[115.91581726 57.58478165]
[107.79174805 44.96202469]
[100.88540649 31.63397789]
[95.25747681 17.71776581]
[90.95742798 3.33569193]
[88.02304840 -11.38585281]
[86.48012543 -26.31749344]
[86.34222412 -41.32800293]
[87.61054230 -56.28547287]
[90.27394867 -71.05844879]
[94.30902863 -85.51709747]
[99.68032074 -99.53436279]
[106.34062195 -112.98705292]
[114.23140717 -125.75693512]
[123.28331757 -137.73179626]
[133.41680908 -148.80639648]
[144.54283142 -158.88340759]
[156.56359863 -167.87428284]
[169.37347412 -175.69998169]
[182.85987854 -182.29174805]
[196.90428162 -187.59164429]
[211.38328552 -191.55310059]
[226.16961670 -194.14129639]
[241.13334656 -195.33349609]
[256.14297485 -195.11921692]
[271.06655884 -193.50033569]
[285.77297974 -190.49108887]
[300.13299561 -186.11791992]
[314.02038574 -180.41925049]
[327.31311035 -173.44517517]
[339.89437866 -165.25698853]
[351.65356445 -155.92663574]
[362.48739624 -145.53611755]
[372.30062866 -134.17674255]
[381.00698853 -121.94836426]
[388.53002930 -108.95841980]
[394.80358887 -95.32108307]
[399.77252197 -81.15619659]
[403.39321899 -66.58824921]
[405.63381958 -51.74526596]
[406.47463989 -36.75768661]
[405.90829468 -21.75723076]
[403.93972778 -6.87572193]
[400.58630371 7.75605631]
[395.87744141 22.00951576]
[389.85455322 35.75939560]
[382.57052612 48.88485718]
[374.08944702 61.27055359]
[364.48577881 72.80763245]
[353.84396362 83.39470673]
[342.25750732 92.93872833]
[329.82821655 101.35582733]
[316.66537476 108.57203674]
[302.88461304 114.52393341]
[288.60705566 119.15921021]
[273.95816040 122.43712616]
[259.06671143 124.32888794]
[244.06352234 124.81786346]
[229.08047485 123.89974976]
[214.24925232 121.58262634]
[199.70016479 117.88684845]
[185.56109619 112.84489441]
[171.95629883 106.50107574]
[159.00534058 98.91115570]
[146.82202148 90.14181519]
[135.51342773 80.27013397]
[124.63459778 90.59734344]
[113.75577545 100.92454529]
[108.12381744 114.82710266]
[108.74779510 129.81411743]
[109.37177277 144.80113220]
[109.99575043 159.78814697]
[110.61972809 174.77516174]
[111.24370575 189.76217651]
[111.86768341 204.74919128]
[112.49166107 219.73622131]
[127.24466705 222.86665344]
[140.75529480 229.56842041]
[152.17427063 239.42019653]
[160.78379822 251.80273438]
[166.04263306 265.93762207]
[167.62023926 280.93637085]
[165.41743469 295.85610962]
[159.57269287 309.75897217]
[150.45341492 321.77102661]
[138.63284302 331.13717651]
[124.85403442 337.26867676]
[109.98313141 339.78009033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 57]
[20 56]
[21 55]
[22 54]
[23 53]
[24 52]
[25 51]
[26 50]
[27 49]
[60 130]
[61 129]
[62 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
