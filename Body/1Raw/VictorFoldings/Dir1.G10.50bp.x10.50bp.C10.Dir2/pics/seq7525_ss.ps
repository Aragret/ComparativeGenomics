%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCUGCUUCGGGGGGGGGGCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACxxxxxxxxxxCAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUUACCCCCCCCCCUAUCUUCUUC\
) } def
/len { sequence length } bind def

/coor [
[64.64853668 373.15921021]
[50.80259705 367.14318848]
[39.09393311 357.61376953]
[30.39141083 345.27810669]
[25.34080887 331.05157471]
[24.31691742 315.98989868]
[27.39571571 301.21072388]
[34.34873581 287.81079102]
[44.66002274 276.78445435]
[57.56440353 268.94995117]
[72.10428619 264.88864136]
[72.10428619 249.88864136]
[72.10428619 234.88864136]
[72.10428619 219.88864136]
[72.10428619 204.88864136]
[72.10428619 189.88864136]
[72.10428619 174.88864136]
[72.10428619 159.88864136]
[72.10428619 144.88864136]
[72.10428619 129.88864136]
[69.91259003 106.83775330]
[80.60629272 92.41224670]
[93.89129639 91.09867096]
[90.79296875 76.42214203]
[87.69464874 61.74561691]
[77.27371216 49.84122086]
[82.21527863 35.79023743]
[79.11695862 21.11371040]
[76.01863861 6.43718433]
[72.92031097 -8.23934078]
[62.52978897 -15.95237446]
[60.27865219 -28.28733826]
[66.84133148 -38.49706650]
[64.04900360 -53.23487473]
[49.12043762 -51.68429184]
[34.11447144 -51.38834763]
[19.13637161 -52.34912109]
[4.29120016 -54.55986786]
[-10.31691551 -58.00508499]
[-24.58550644 -62.66060257]
[-38.41448975 -68.49376678]
[-51.70685959 -75.46366119]
[-64.36937714 -83.52139282]
[-76.31323242 -92.61045074]
[-87.45463562 -102.66707611]
[-97.71543884 -113.62071991]
[-107.02367401 -125.39456177]
[-115.31404877 -137.90600586]
[-122.52840424 -151.06730652]
[-128.61613464 -164.78611755]
[-133.53456116 -178.96623230]
[-137.24914551 -193.50819397]
[-139.73387146 -208.30996704]
[-140.97128296 -223.26776123]
[-140.95271301 -238.27662659]
[-139.67828369 -253.23130798]
[-137.15693665 -268.02688599]
[-133.40637207 -282.55960083]
[-128.45288086 -296.72750854]
[-122.33120728 -310.43121338]
[-115.08429718 -323.57461548]
[-106.76299286 -336.06549072]
[-97.42565155 -347.81628418]
[-87.13776398 -358.74450684]
[-75.97150421 -368.77352905]
[-64.00519562 -377.83297729]
[-51.32277298 -385.85934448]
[-38.01319504 -392.79632568]
[-24.16982079 -398.59524536]
[-9.88975143 -403.21545410]
[4.72684574 -406.62451172]
[19.57744408 -408.79849243]
[34.55787659 -409.72219849]
[49.56306076 -409.38912964]
[64.48774719 -407.80160522]
[79.22724915 -404.97076416]
[93.67818451 -400.91650391]
[107.73917389 -395.66720581]
[121.31159210 -389.25970459]
[134.30024719 -381.73898315]
[146.61402893 -373.15774536]
[158.16654968 -363.57623291]
[168.87678528 -353.06158447]
[178.66961670 -341.68762207]
[187.47633362 -329.53411865]
[195.23519897 -316.68627930]
[201.89173889 -303.23425293]
[207.39930725 -289.27239990]
[211.71923828 -274.89865112]
[214.82125854 -260.21383667]
[216.68359375 -245.32093811]
[217.29316711 -230.32444763]
[216.64573669 -215.32952881]
[214.74581909 -200.44139099]
[211.60673523 -185.76443481]
[207.25053406 -171.40164185]
[201.70773315 -157.45373535]
[195.01725769 -144.01855469]
[187.22599792 -131.19035339]
[178.38861084 -119.05910492]
[168.56710815 -107.70989990]
[157.83035278 -97.22234344]
[146.25367737 -87.67000580]
[133.91827393 -79.11988831]
[120.91068268 -71.63197327]
[107.32212830 -65.25876617]
[93.24793243 -60.04498672]
[78.78681183 -56.02719879]
[81.57913971 -41.28939056]
[93.73223114 -28.66789246]
[87.59683990 -11.33766270]
[90.69515991 3.33886266]
[93.79347992 18.01538849]
[96.89180756 32.69191360]
[107.09112549 43.54654694]
[102.37117767 58.64729309]
[105.46949768 73.32382202]
[108.56781769 88.00034332]
[118.07617950 99.60168457]
[131.85855103 105.52165222]
[145.64094543 111.44161224]
[162.58061218 112.13722229]
[166.60156250 128.60745239]
[151.88810730 137.03067017]
[139.72097778 125.22399139]
[125.93859863 119.30403137]
[112.15621185 113.38407135]
[105.89323425 117.51021576]
[106.77697754 132.48416138]
[93.36727142 125.76250458]
[87.10428619 129.88864136]
[87.10428619 144.88864136]
[87.10428619 159.88864136]
[87.10428619 174.88864136]
[87.10428619 189.88864136]
[87.10428619 204.88864136]
[87.10428619 219.88864136]
[87.10428619 234.88864136]
[87.10428619 249.88864136]
[87.10428619 264.88864136]
[101.64418030 268.94995117]
[114.54856110 276.78445435]
[124.85984039 287.81079102]
[131.81286621 301.21072388]
[134.89166260 315.98989868]
[133.86776733 331.05157471]
[128.81716919 345.27810669]
[120.11464691 357.61376953]
[108.40598297 367.14318848]
[94.56004333 373.15921021]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 118]
[24 117]
[25 116]
[27 114]
[28 113]
[29 112]
[30 111]
[33 109]
[34 108]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
