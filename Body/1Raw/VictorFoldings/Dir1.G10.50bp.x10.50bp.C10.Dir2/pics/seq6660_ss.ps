%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAAUACCAAGGGGGGGGGGACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUxxxxxxxxxxACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCCCCCCCCCCCUAAUACCAA\
) } def
/len { sequence length } bind def

/coor [
[69.72576141 532.81921387]
[55.70381546 527.26623535]
[43.50385666 518.39990234]
[33.89278793 506.77755737]
[27.47476196 493.12985229]
[24.65322495 478.31466675]
[25.60553932 463.26330566]
[30.27184486 448.92187500]
[38.35881042 436.19192505]
[49.35808563 425.87365723]
[62.57824707 418.61566162]
[77.18825531 414.87423706]
[77.18825531 399.87423706]
[77.18825531 384.87423706]
[77.18825531 369.87423706]
[77.18825531 354.87423706]
[77.18825531 339.87423706]
[77.18825531 324.87423706]
[77.18825531 309.87423706]
[77.18825531 294.87423706]
[77.18825531 279.87423706]
[77.18825531 264.87423706]
[62.64586639 261.32357788]
[49.36791229 254.39134216]
[38.12823486 244.47662354]
[29.58305168 232.15251160]
[24.23265076 218.13291931]
[22.39209938 203.23121643]
[24.17269707 188.31309509]
[29.47524834 174.24624634]
[37.99559021 161.84986877]
[49.24201965 151.84703064]
[62.56369019 144.82240295]
[77.18825531 141.18817139]
[77.18825531 126.18816376]
[68.27210999 114.12573242]
[53.93204498 109.72543335]
[39.59198380 105.32513428]
[29.93796730 117.06687164]
[16.52309990 124.21598053]
[1.39304888 125.68226624]
[-13.14496136 121.24214172]
[-24.87398911 111.57269287]
[-32.00544357 98.14842987]
[-33.45183182 83.01646423]
[-28.99258423 68.48430634]
[-19.30771065 56.76800537]
[-5.87407923 49.65421677]
[9.25977707 48.22773743]
[23.78605461 52.70609665]
[35.48960114 62.40637589]
[42.58571625 75.84934998]
[43.99228668 90.98506927]
[58.33234787 95.38536835]
[72.67240906 99.78567505]
[75.09274292 87.08951569]
[83.22576141 76.61324310]
[95.53689575 70.83300018]
[95.22891235 55.83616638]
[94.92093658 40.83932495]
[94.61296082 25.84248924]
[79.80834198 23.12070274]
[65.85479736 17.47416115]
[53.32370758 9.13409042]
[42.72822571 -1.55799198]
[34.50222397 -14.16425133]
[28.98254967 -28.16846848]
[26.39523506 -42.99718094]
[26.84622383 -58.04315948]
[30.31705284 -72.69028473]
[36.66559219 -86.33876038]
[45.63187027 -98.42969513]
[56.84872818 -108.46797180]
[69.85684204 -116.04252625]
[84.12353516 -120.84319305]
[99.06459808 -122.67337799]
[114.06819916 -121.45813751]
[128.51995850 -117.24724579]
[141.82806396 -110.21311951]
[153.44760132 -100.64381409]
[162.90270996 -88.93119049]
[169.80622864 -75.55485535]
[173.87547302 -61.06257629]
[174.94380188 -46.04779816]
[172.96745300 -31.12536621]
[168.02737427 -16.90634727]
[160.32586670 -3.97299719]
[150.17826843 7.14506817]
[138.00015259 15.99257183]
[124.29019165 22.20721436]
[109.60980225 25.53451157]
[109.91777802 40.53134918]
[110.22575378 55.52818680]
[110.53372955 70.52502441]
[123.03776550 78.81050110]
[136.96849060 73.24856567]
[150.89920044 67.68662262]
[164.82991028 62.12468719]
[178.76063538 56.56275177]
[179.76052856 41.33242035]
[187.27706909 28.04843330]
[199.81785583 19.34833527]
[214.89288330 16.95953560]
[229.50900269 21.35633469]
[240.76416016 31.66574287]
[246.42366028 45.84082031]
[245.36380005 61.06709290]
[237.79499817 74.32138062]
[225.22006226 82.97202301]
[210.13574219 85.30143738]
[195.53704834 80.84711456]
[184.32257080 70.49346924]
[170.39184570 76.05540466]
[156.46113586 81.61734009]
[142.53042603 87.17927551]
[128.59970093 92.74121857]
[119.67465210 120.50512695]
[92.18825531 126.18816376]
[92.18825531 141.18817139]
[106.81282043 144.82240295]
[120.13449860 151.84703064]
[131.38092041 161.84986877]
[139.90126038 174.24624634]
[145.20382690 188.31309509]
[146.98442078 203.23121643]
[145.14385986 218.13291931]
[139.79347229 232.15251160]
[131.24827576 244.47662354]
[120.00860596 254.39134216]
[106.73065186 261.32357788]
[92.18825531 264.87423706]
[92.18825531 279.87423706]
[92.18825531 294.87423706]
[92.18825531 309.87423706]
[92.18825531 324.87423706]
[92.18825531 339.87423706]
[92.18825531 354.87423706]
[92.18825531 369.87423706]
[92.18825531 384.87423706]
[92.18825531 399.87423706]
[92.18825531 414.87423706]
[106.79827118 418.61566162]
[120.01843262 425.87365723]
[131.01770020 436.19192505]
[139.10467529 448.92187500]
[143.77098083 463.26330566]
[144.72329712 478.31466675]
[141.90174866 493.12985229]
[135.48373413 506.77755737]
[125.87265778 518.39990234]
[113.67269897 527.26623535]
[99.65075684 532.81921387]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[34 119]
[35 118]
[36 55]
[37 54]
[38 53]
[58 94]
[59 93]
[60 92]
[61 91]
[95 116]
[96 115]
[97 114]
[98 113]
[99 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
