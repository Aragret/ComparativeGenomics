%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUAUUACGGGGGGGGGGAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAxxxxxxxxxxGACUCCACUUAUGACUCCCUAAAGCCCAUGUCGAAGCCCCCAUCGCUGGGCCCCCCCCCCUCAAUAGUAC\
) } def
/len { sequence length } bind def

/coor [
[89.15486145 437.22967529]
[75.30892181 431.21365356]
[63.60025787 421.68423462]
[54.89773560 409.34857178]
[49.84713364 395.12203979]
[48.82324219 380.06036377]
[51.90203857 365.28121948]
[58.85506058 351.88128662]
[69.16634369 340.85494995]
[82.07072449 333.02044678]
[96.61061096 328.95913696]
[96.61061096 313.95913696]
[96.61061096 298.95913696]
[96.61061096 283.95913696]
[96.61061096 268.95913696]
[96.61061096 253.95912170]
[96.61061096 238.95912170]
[96.61061096 223.95912170]
[96.61061096 208.95912170]
[96.61061096 193.95912170]
[96.20126343 175.09310913]
[107.28224182 164.32176208]
[103.87926483 149.71286011]
[100.47628784 135.10397339]
[78.89465332 128.05494690]
[66.13957977 109.27293396]
[51.15986252 110.05278015]
[36.18014908 110.83262634]
[21.20043373 111.61246490]
[6.22071886 112.39231110]
[-8.75899601 113.17215729]
[-23.73871040 113.95200348]
[-38.71842575 114.73184967]
[-53.69813919 115.51169586]
[-67.15268707 124.88757324]
[-81.88278961 117.67951202]
[-82.73537445 101.30254364]
[-68.83338165 92.60388947]
[-54.47798538 100.53198242]
[-39.49826813 99.75213623]
[-24.51855469 98.97229004]
[-9.53884125 98.19244385]
[5.44087362 97.41259766]
[20.42058754 96.63275146]
[35.40030289 95.85290527]
[50.38001633 95.07306671]
[65.35973358 94.29322052]
[65.97598267 83.66792297]
[69.96218872 73.02173615]
[58.06980896 63.88000107]
[46.17742920 54.73826599]
[29.85820198 53.12121964]
[23.34643745 38.07034302]
[33.34088135 25.06868362]
[49.56010437 27.49123573]
[55.31916428 42.84588623]
[67.21154785 51.98762131]
[79.10392761 61.12935257]
[93.33070374 56.37553787]
[97.33843994 41.92084885]
[101.34618378 27.46616173]
[105.35392761 13.01147366]
[104.63272858 3.83913922]
[109.59831238 -1.70058656]
[113.90589905 -16.06877136]
[118.21348572 -30.43695450]
[122.52107239 -44.80513763]
[109.22350311 -51.85218430]
[97.55644226 -61.35828781]
[87.96834564 -72.95806122]
[80.82775879 -86.20563507]
[76.40913391 -100.59180450]
[74.88231659 -115.56361389]
[76.30599976 -130.54557800]
[80.62545776 -144.96183777]
[87.67465210 -158.25827026]
[97.18264771 -169.92379761]
[108.78396606 -179.51000977]
[122.03269958 -186.64845276]
[136.41958618 -191.06474304]
[151.39164734 -192.58914185]
[166.37338257 -191.16304016]
[180.78894043 -186.84124756]
[194.08422852 -179.78988647]
[205.74821472 -170.28001404]
[215.33255005 -158.67713928]
[222.46885681 -145.42726135]
[226.88281250 -131.03965759]
[228.40478516 -116.06735229]
[226.97625732 -101.08584595]
[222.65213013 -86.67098236]
[215.59863281 -73.37683868]
[206.08685303 -61.71439743]
[194.48243713 -52.13193512]
[181.23139954 -44.99777985]
[166.84307861 -40.58614349]
[151.87052917 -39.06659698]
[136.88925171 -40.49755478]
[132.58166504 -26.12936974]
[128.27407837 -11.76118565]
[123.96649933 2.60699797]
[119.80860901 17.01921463]
[115.80087280 31.47390175]
[111.79312897 45.92859268]
[107.78539276 60.38327789]
[116.32709503 63.59826660]
[123.82965851 68.60207367]
[129.93119812 75.09445190]
[134.35096741 82.70512390]
[136.90208435 91.01470184]
[137.49903870 99.57771301]
[136.15971375 107.94644165]
[133.00199890 115.69432831]
[128.23516846 122.43772888]
[122.14665985 127.85483551]
[115.08518219 131.70098877]
[118.48815918 146.30989075]
[121.89113617 160.91877747]
[131.15608215 172.71542358]
[144.54237366 179.48353577]
[157.92864990 186.25164795]
[171.31494141 193.01976013]
[187.64993286 191.57063293]
[196.84967041 205.14624023]
[189.45025635 219.78114319]
[173.06356812 220.42022705]
[164.54682922 206.40605164]
[151.16053772 199.63793945]
[137.77426147 192.86981201]
[124.38796997 186.10169983]
[111.61061096 193.95912170]
[111.61061096 208.95912170]
[111.61061096 223.95912170]
[111.61061096 238.95912170]
[111.61061096 253.95912170]
[111.61061096 268.95913696]
[111.61061096 283.95913696]
[111.61061096 298.95913696]
[111.61061096 313.95913696]
[111.61061096 328.95913696]
[126.15049744 333.02044678]
[139.05488586 340.85494995]
[149.36616516 351.88128662]
[156.31918335 365.28121948]
[159.39797974 380.06036377]
[158.37409973 395.12203979]
[153.32348633 409.34857178]
[144.62097168 421.68423462]
[132.91230774 431.21365356]
[119.06636810 437.22967529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 118]
[23 117]
[24 116]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[49 58]
[50 57]
[51 56]
[59 105]
[60 104]
[61 103]
[62 102]
[64 101]
[65 100]
[66 99]
[67 98]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
