%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGCACACACGGGGGGGGGGACACCGCUGCUAACCCCAUACCCCGAACCAACCAAACCCCAAAGACACCCxxxxxxxxxxUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUACCCUAGCCCCCCCCCCCAUCACACAC\
) } def
/len { sequence length } bind def

/coor [
[88.81479645 378.03970337]
[74.96885681 372.02368164]
[63.26019287 362.49426270]
[54.55767059 350.15859985]
[49.50706863 335.93206787]
[48.48317719 320.87039185]
[51.56197357 306.09124756]
[58.51499557 292.69131470]
[68.82627869 281.66497803]
[81.73065948 273.83047485]
[96.27054596 269.76916504]
[96.27054596 254.76916504]
[96.27054596 239.76916504]
[96.27054596 224.76916504]
[96.27054596 209.76916504]
[96.27054596 194.76916504]
[96.27054596 179.76916504]
[96.27054596 164.76916504]
[96.27054596 149.76916504]
[96.27054596 134.76916504]
[77.25569916 124.33055878]
[68.83594513 105.48507690]
[73.27915955 86.40528870]
[87.54788971 74.56716156]
[84.75556946 59.82935715]
[81.96324158 45.09154892]
[67.06195068 46.86135483]
[52.07406616 47.59888077]
[37.07101059 47.30061340]
[22.12428093 45.96797562]
[7.30510569 43.60731506]
[-7.31589365 40.22988510]
[-21.66904068 35.85177612]
[-35.68593597 30.49385643]
[-49.29978180 24.18165779]
[-62.44570160 16.94525909]
[-75.06105042 8.81914711]
[-87.08570099 -0.15795332]
[-98.46236420 -9.94326210]
[-109.13681793 -20.49014664]
[-119.05818939 -31.74834633]
[-128.17919922 -43.66421127]
[-136.45637512 -56.18095398]
[-143.85029602 -69.23892975]
[-150.32569885 -82.77590942]
[-155.85174561 -96.72737885]
[-160.40209961 -111.02685547]
[-163.95504761 -125.60619354]
[-166.49369812 -140.39591980]
[-168.00593567 -155.32554626]
[-168.48454285 -170.32392883]
[-167.92724609 -185.31961060]
[-166.33671570 -200.24108887]
[-163.72052002 -215.01728821]
[-160.09111023 -229.57778931]
[-155.46582031 -243.85321045]
[-149.86665344 -257.77548218]
[-143.32031250 -271.27832031]
[-135.85800171 -284.29730225]
[-127.51525879 -296.77044678]
[-118.33186340 -308.63830566]
[-108.35156250 -319.84429932]
[-97.62193298 -330.33505249]
[-86.19409180 -340.06054688]
[-74.12250519 -348.97442627]
[-61.46469879 -357.03424072]
[-48.28099442 -364.20156860]
[-34.63422012 -370.44226074]
[-20.58940887 -375.72656250]
[-6.21349096 -380.02932739]
[8.42502594 -383.32998657]
[23.25638199 -385.61288452]
[38.20989990 -386.86709595]
[53.21431351 -387.08663940]
[68.19812012 -386.27050781]
[83.08992767 -384.42254639]
[97.81874847 -381.55157471]
[112.31440735 -377.67129517]
[126.50781250 -372.80017090]
[140.33134460 -366.96145630]
[153.71911621 -360.18292236]
[166.60731506 -352.49691772]
[178.93453979 -343.94003296]
[190.64204407 -334.55307007]
[201.67404175 -324.38076782]
[211.97793579 -313.47158813]
[221.50463867 -301.87750244]
[230.20875549 -289.65380859]
[238.04879761 -276.85870361]
[244.98741150 -263.55322266]
[250.99153137 -249.80070496]
[256.03253174 -235.66674805]
[260.08639526 -221.21867371]
[263.13381958 -206.52534485]
[265.16024780 -191.65676880]
[266.15606689 -176.68383789]
[266.11648560 -161.67785645]
[265.04171753 -146.71037292]
[262.93688965 -131.85270691]
[259.81204224 -117.17565918]
[255.68202209 -102.74916077]
[250.56654358 -88.64198303]
[244.48999023 -74.92133331]
[237.48130798 -61.65261459]
[229.57388306 -48.89905167]
[220.80541992 -36.72141647]
[211.21769714 -25.17774963]
[200.85641479 -14.32305813]
[189.77093506 -4.20907068]
[178.01408386 5.11601353]
[165.64189148 13.60775661]
[152.71333313 21.22569084]
[139.29000854 27.93351364]
[125.43587494 33.69925690]
[111.21697235 38.49544907]
[96.70104980 42.29922485]
[99.49337769 57.03703308]
[102.28569794 71.77484131]
[115.90537262 74.58664703]
[127.25125122 83.91727448]
[133.25595093 98.17779541]
[131.87677002 114.37619019]
[144.81481934 121.96610260]
[157.75288391 129.55601501]
[174.47412109 132.35531616]
[176.41311646 149.19802856]
[160.76539612 155.72375488]
[150.16296387 142.49406433]
[137.22491455 134.90415955]
[124.28685760 127.31424713]
[111.27054596 134.76916504]
[111.27054596 149.76916504]
[111.27054596 164.76916504]
[111.27054596 179.76916504]
[111.27054596 194.76916504]
[111.27054596 209.76916504]
[111.27054596 224.76916504]
[111.27054596 239.76916504]
[111.27054596 254.76916504]
[111.27054596 269.76916504]
[125.81043243 273.83047485]
[138.71481323 281.66497803]
[149.02610779 292.69131470]
[155.97912598 306.09124756]
[159.05792236 320.87039185]
[158.03402710 335.93206787]
[152.98342896 350.15859985]
[144.28089905 362.49426270]
[132.57223511 372.02368164]
[118.72630310 378.03970337]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 118]
[25 117]
[26 116]
[122 130]
[123 129]
[124 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
