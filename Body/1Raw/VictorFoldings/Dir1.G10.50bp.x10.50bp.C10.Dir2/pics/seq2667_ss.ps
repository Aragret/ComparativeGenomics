%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGGUUAAAAAGGGGGGGGGGAAGUAAAAGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCxxxxxxxxxxCCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUCCCCCCCCCCAAGAUUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[98.29438782 399.57754517]
[84.27243805 394.02453613]
[72.07248688 385.15820312]
[62.46141434 373.53588867]
[56.04338837 359.88818359]
[53.22185135 345.07299805]
[54.17416763 330.02163696]
[58.84047318 315.68020630]
[66.92743683 302.95025635]
[77.92671204 292.63195801]
[91.14687347 285.37399292]
[105.75688171 281.63256836]
[105.75688171 266.63256836]
[105.75688171 251.63255310]
[105.75688171 236.63255310]
[105.75688171 221.63255310]
[105.75688171 206.63255310]
[105.75688171 191.63255310]
[105.75688171 176.63255310]
[105.75688171 161.63255310]
[105.75688171 146.63255310]
[105.75688171 131.63255310]
[92.88375854 130.39346313]
[81.91742706 124.28625488]
[74.54766083 114.59906769]
[71.76871490 103.13956451]
[73.75225830 91.90181732]
[79.86675262 82.72012329]
[71.71008301 70.13168335]
[63.55341721 57.54324341]
[55.39675140 44.95480347]
[40.28393555 46.78897476]
[25.93192673 41.89951706]
[15.17008495 31.30692863]
[10.09538555 17.15036011]
[11.66394806 2.25576162]
[19.51138878 -10.42821026]
[5.51379347 -17.80234718]
[5.08635569 -32.69081879]
[-3.07031035 -45.27925873]
[-17.39133644 -39.54700089]
[-32.54819107 -36.70492172]
[-47.96379089 -36.85940552]
[-63.05157089 -40.00277328]
[-77.23777008 -46.01364899]
[-89.98328400 -54.66165161]
[-100.80413818 -65.61621857]
[-109.28984833 -78.45924377]
[-115.11902618 -92.70104218]
[-118.07152557 -107.79898834]
[-118.03676605 -123.17824554]
[-115.01786041 -138.25360107]
[-109.13145447 -152.45178223]
[-100.60320282 -165.23316956]
[-89.75911713 -176.11245728]
[-98.17253113 -188.53076172]
[-106.58593750 -200.94908142]
[-114.99935150 -213.36740112]
[-123.41275787 -225.78570557]
[-138.83244324 -230.21435547]
[-144.85069275 -245.08581543]
[-136.85081482 -258.99197388]
[-120.96962738 -261.26522827]
[-109.38983154 -250.16172791]
[-110.99444580 -234.19911194]
[-102.58103180 -221.78080750]
[-94.16762543 -209.36248779]
[-85.75421143 -196.94418335]
[-77.34080505 -184.52586365]
[-63.93914413 -190.33016968]
[-49.69208145 -193.56068420]
[-35.08935165 -194.10479736]
[-20.63320923 -191.94227600]
[-6.82114792 -187.14599609]
[5.87121820 -179.87950134]
[17.00653458 -170.39140320]
[26.20077324 -159.00695801]
[33.13648224 -146.11676025]
[37.57373810 -132.16354370]
[39.35845566 -117.62677002]
[38.42772293 -103.00631714]
[34.81203842 -88.80519867]
[28.63429642 -75.51229095]
[20.10561562 -63.58547974]
[9.51812935 -53.43592453]
[17.67479515 -40.84748459]
[31.08897018 -34.37375641]
[32.09982681 -18.58487701]
[46.88315201 -20.56448364]
[61.11850739 -15.91001797]
[71.96574402 -5.49375916]
[77.23627472 8.65691948]
[75.83452606 23.75400734]
[67.98519135 36.79813766]
[76.14186096 49.38657761]
[84.29852295 61.97501755]
[92.45519257 74.56345367]
[110.92528534 73.77976990]
[126.67512512 85.67382812]
[131.57179260 106.08133698]
[146.57099915 106.23532867]
[161.57020569 106.38932800]
[176.56941223 106.54332733]
[191.56863403 106.69732666]
[206.56784058 106.54332733]
[221.56072998 106.08139801]
[236.55360413 105.61947632]
[242.27731323 91.50710297]
[253.25070190 80.94752502]
[267.57257080 75.77025604]
[282.76156616 76.87229156]
[296.18609619 84.06268311]
[305.52029419 96.09567261]
[309.14694214 110.88645935]
[306.43768311 125.87244415]
[297.86196899 138.45722961]
[284.90554810 146.46041870]
[269.81320190 148.49540710]
[255.19978333 144.20962524]
[243.59715271 134.34561157]
[237.01553345 120.61235809]
[222.02264404 121.07428741]
[207.02976990 121.53620911]
[203.12742615 124.38594818]
[197.37953186 124.77265930]
[191.41462708 121.69653320]
[176.41542053 121.54253387]
[161.41621399 121.38854218]
[146.41700745 121.23454285]
[131.41778564 121.08054352]
[120.75688171 131.63255310]
[120.75688171 146.63255310]
[120.75688171 161.63255310]
[120.75688171 176.63255310]
[120.75688171 191.63255310]
[120.75688171 206.63255310]
[120.75688171 221.63255310]
[120.75688171 236.63255310]
[120.75688171 251.63255310]
[120.75688171 266.63256836]
[120.75688171 281.63256836]
[135.36689758 285.37399292]
[148.58705139 292.63195801]
[159.58633423 302.95025635]
[167.67329407 315.68020630]
[172.33959961 330.02163696]
[173.29191589 345.07299805]
[170.47038269 359.88818359]
[164.05235291 373.53588867]
[154.44128418 385.15820312]
[142.24133301 394.02453613]
[128.21937561 399.57754517]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[28 97]
[29 96]
[30 95]
[31 94]
[37 88]
[39 86]
[40 85]
[55 69]
[56 68]
[57 67]
[58 66]
[59 65]
[100 130]
[101 129]
[102 128]
[103 127]
[104 126]
[105 123]
[106 122]
[107 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
