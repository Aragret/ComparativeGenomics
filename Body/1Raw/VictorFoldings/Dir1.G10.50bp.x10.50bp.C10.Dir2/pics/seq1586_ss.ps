%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAGCCUAUAGGGGGGGGGGUACCGCCAUCUUCAGCAAACCCUGAUGAAGGCUACAAAGUAAGCGCAAGUxxxxxxxxxxAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAUCUACCCCCCCCCCUCACCCUAUA\
) } def
/len { sequence length } bind def

/coor [
[78.74341583 400.38775635]
[64.89747620 394.37173462]
[53.18881607 384.84231567]
[44.48628998 372.50665283]
[39.43568802 358.28012085]
[38.41179657 343.21844482]
[41.49059677 328.43930054]
[48.44361877 315.03936768]
[58.75490189 304.01303101]
[71.65928650 296.17852783]
[86.19917297 292.11721802]
[86.19917297 277.11721802]
[86.19917297 262.11721802]
[86.19917297 247.11720276]
[86.19917297 232.11720276]
[86.19917297 217.11720276]
[86.19917297 202.11720276]
[86.19917297 187.11720276]
[86.19917297 172.11720276]
[86.19917297 157.11720276]
[86.19917297 142.11720276]
[86.19917297 127.11721039]
[81.86505127 110.82864380]
[88.18644714 99.72306824]
[73.77423096 95.56518555]
[59.36201477 91.40729523]
[48.71445465 102.93180847]
[32.55906296 106.99002075]
[15.89688587 101.24474335]
[4.48003006 86.56984711]
[-10.45427799 85.16754150]
[-25.38858604 83.76524353]
[-40.32289124 82.36293793]
[-55.25720215 80.96063232]
[-69.72026825 87.37391663]
[-81.66846466 78.48066711]
[-96.60277557 77.07836151]
[-109.82527924 86.16378784]
[-125.13005829 81.35304260]
[-130.77659607 66.33650970]
[-122.43335724 52.63359833]
[-106.50054932 50.75600052]
[-95.20046997 62.14405441]
[-80.26616669 63.54635620]
[-66.87129211 57.03277588]
[-53.85489655 66.02632904]
[-38.92058945 67.42862701]
[-23.98628235 68.83093262]
[-9.05197430 70.23323822]
[5.88233376 71.63554382]
[11.94534683 57.91548920]
[0.85403138 47.81683731]
[-10.23728371 37.71818924]
[-26.36561584 34.75020599]
[-31.60374260 19.21012497]
[-20.56312561 7.08425093]
[-4.60140753 10.84664154]
[-0.13863447 26.62687302]
[10.95268059 36.72552109]
[22.04399681 46.82417297]
[43.62368011 46.49106216]
[59.41351700 58.88705444]
[63.51990509 76.99507904]
[77.93212128 81.15296936]
[92.34433746 85.31085205]
[106.75655365 81.15296936]
[116.73928070 69.95719910]
[126.72200775 58.76143646]
[116.82427216 47.46477509]
[108.38983154 35.03739548]
[101.54653168 21.66769409]
[96.39813232 7.55835104]
[93.02266693 -7.07673931]
[91.47131348 -22.01571274]
[91.76759338 -37.03209686]
[93.90701294 -51.89825058]
[97.85713959 -66.38880157]
[103.55808258 -80.28408813]
[110.92343140 -93.37344360]
[119.84151459 -105.45845032]
[130.17713928 -116.35589600]
[141.77363586 -125.90058899]
[154.45518494 -133.94781494]
[168.02954102 -140.37559509]
[182.29092407 -145.08648682]
[197.02314758 -148.00906372]
[212.00285339 -149.09902954]
[227.00296021 -148.33984375]
[241.79608154 -145.74304199]
[256.15792847 -141.34797668]
[269.87081909 -135.22126770]
[282.72683716 -127.45581055]
[294.53109741 -118.16932678]
[305.10467529 -107.50257874]
[314.28723145 -95.61728668]
[321.93960571 -82.69363403]
[327.94573975 -68.92752075]
[332.21463013 -54.52765274]
[334.68154907 -39.71232605]
[335.30908203 -24.70613289]
[334.08773804 -9.73656654]
[331.03601074 4.96943903]
[326.20016479 19.18894386]
[319.65353394 32.70638657]
[311.49536133 45.31684113]
[301.84930420 56.82914352]
[290.86157227 67.06876373]
[278.69879150 75.88047028]
[265.54531860 83.13069153]
[251.60055542 88.70950317]
[237.07589722 92.53233337]
[222.19154358 94.54123688]
[207.17314148 94.70575714]
[192.24835205 93.02339172]
[177.64344788 89.51965332]
[163.57981873 84.24765015]
[150.27067566 77.28731537]
[137.91777039 68.74416351]
[127.93504333 79.93992615]
[117.95231628 91.13569641]
[120.74464417 105.87349701]
[134.13092041 112.64161682]
[150.46592712 111.19248962]
[159.66566467 124.76808167]
[152.26623535 139.40299988]
[135.87954712 140.04208374]
[127.36281586 126.02790070]
[113.97652435 119.25978088]
[101.19917297 127.11721039]
[101.19917297 142.11720276]
[101.19917297 157.11720276]
[101.19917297 172.11720276]
[101.19917297 187.11720276]
[101.19917297 202.11720276]
[101.19917297 217.11720276]
[101.19917297 232.11720276]
[101.19917297 247.11720276]
[101.19917297 262.11721802]
[101.19917297 277.11721802]
[101.19917297 292.11721802]
[115.73905945 296.17852783]
[128.64343262 304.01303101]
[138.95472717 315.03936768]
[145.90774536 328.43930054]
[148.98654175 343.21844482]
[147.96264648 358.28012085]
[142.91204834 372.50665283]
[134.20951843 384.84231567]
[122.50086212 394.37173462]
[108.65492249 400.38775635]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 65]
[25 64]
[26 63]
[30 50]
[31 49]
[32 48]
[33 47]
[34 46]
[36 44]
[37 43]
[51 60]
[52 59]
[53 58]
[66 120]
[67 119]
[68 118]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
