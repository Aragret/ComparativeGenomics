%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAAACCGGGGGGGGGGCACAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACxxxxxxxxxxUCCUACUUCUCCUAUCUCUCCCAGUCCUAGCUGCUGGCAUCACUAUACUACCCCCCCCCCCUAACAGACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.69924927]
[71.19830322 364.68322754]
[59.48964310 355.15380859]
[50.78712082 342.81814575]
[45.73651886 328.59161377]
[44.71262741 313.52993774]
[47.79142761 298.75079346]
[54.74444962 285.35086060]
[65.05573273 274.32452393]
[77.96011353 266.49002075]
[92.50000000 262.42871094]
[92.50000000 247.42869568]
[92.50000000 232.42869568]
[92.50000000 217.42869568]
[92.50000000 202.42869568]
[92.50000000 187.42869568]
[92.50000000 172.42869568]
[92.50000000 157.42869568]
[92.50000000 142.42869568]
[92.50000000 127.42869568]
[75.39976501 119.47401428]
[65.70645142 101.21225739]
[69.23012543 78.99703979]
[54.41236877 81.32814789]
[39.59460831 83.65924835]
[24.77685165 85.99035645]
[9.95909309 88.32145691]
[6.04302549 103.03826141]
[-3.52539539 114.88584137]
[-17.08838272 121.81153870]
[-32.29606628 122.61543274]
[-46.51362228 117.15824127]
[-57.27777863 106.38545227]
[-62.72357178 92.16352844]
[-61.90748978 76.95648956]
[-54.97092438 63.39906311]
[-43.11567688 53.84014130]
[-28.39573860 49.93587112]
[-13.36142921 52.36268997]
[-0.61753434 60.70013809]
[7.62798977 73.50370026]
[22.44574738 71.17259979]
[37.26350403 68.84149170]
[52.08126450 66.51039124]
[66.89902496 64.17928314]
[70.90676117 49.72459793]
[59.40496063 40.09606934]
[45.94591522 47.16166306]
[30.80704498 48.53388977]
[16.29691124 44.00349426]
[4.62820816 34.26132584]
[-2.41967416 20.79300117]
[-3.77198386 5.65233755]
[0.77749610 -8.85182285]
[10.53500366 -20.50770187]
[24.01258850 -27.53786087]
[39.15501785 -28.87025261]
[53.65318298 -24.30169678]
[65.29621124 -14.52886486]
[72.30863953 -1.04204321]
[73.62110901 14.10212612]
[69.03348541 28.59426689]
[80.53528595 38.22279358]
[94.94750214 34.06490707]
[99.55307007 19.78944588]
[104.15863037 5.51398468]
[101.03223419 -9.99524593]
[112.30355835 -19.73211479]
[116.90911865 -34.00757599]
[103.90228271 -41.59943008]
[92.83187103 -51.81021118]
[84.21566772 -64.16233826]
[78.45666504 -78.07808685]
[75.82422638 -92.90658569]
[76.44146729 -107.95427704]
[80.27953339 -122.51735687]
[87.15889740 -135.91468811]
[96.75780487 -147.51963806]
[108.62729645 -156.78944397]
[122.21221161 -163.29052734]
[136.87716675 -166.71882629]
[151.93624878 -166.91397095]
[166.68511963 -163.86686707]
[180.43394470 -157.72001648]
[192.53967285 -148.76092529]
[202.43609619 -137.40861511]
[209.66033936 -124.19405365]
[213.87451172 -109.73532867]
[214.88150024 -94.70868683]
[212.63421631 -79.81694794]
[207.23776245 -65.75663757]
[198.94454956 -53.18537140]
[188.14247131 -42.69113541]
[175.33673096 -34.76476288]
[161.12631226 -29.77698517]
[146.17584229 -27.96109009]
[131.18458557 -29.40200996]
[126.57901764 -15.12654972]
[130.03483582 -0.63839644]
[118.43409729 10.11954880]
[113.82852936 24.39500999]
[109.22296906 38.67047119]
[117.34450531 51.28159714]
[132.24641418 52.99428940]
[147.14831543 54.70697784]
[157.75672913 47.29648972]
[170.16928101 49.07059860]
[177.77287292 58.53066254]
[192.63591003 60.55299759]
[207.49896240 62.57533264]
[216.49031067 60.62408447]
[222.64894104 64.79746246]
[237.46669006 67.12856293]
[249.13821411 56.72137451]
[264.77020264 56.30298996]
[276.98171997 66.07096100]
[280.00683594 81.41314697]
[272.41720581 95.08543396]
[257.79641724 100.63219452]
[243.04794312 95.43441010]
[235.13558960 81.94631958]
[220.31782532 79.61521912]
[205.47662354 77.43837738]
[190.61358643 75.41604614]
[175.75053406 73.39371490]
[159.92807007 80.92031860]
[145.43562317 69.60887909]
[130.53372192 67.89618683]
[115.63182068 66.18350220]
[132.73193359 102.72441864]
[107.50000000 127.42869568]
[107.50000000 142.42869568]
[107.50000000 157.42869568]
[107.50000000 172.42869568]
[107.50000000 187.42869568]
[107.50000000 202.42869568]
[107.50000000 217.42869568]
[107.50000000 232.42869568]
[107.50000000 247.42869568]
[107.50000000 262.42871094]
[122.03988647 266.49002075]
[134.94427490 274.32452393]
[145.25555420 285.35086060]
[152.20857239 298.75079346]
[155.28736877 313.52993774]
[154.26348877 328.59161377]
[149.21287537 342.81814575]
[140.51036072 355.15380859]
[128.80169678 364.68322754]
[114.95575714 370.69924927]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 45]
[24 44]
[25 43]
[26 42]
[27 41]
[46 63]
[47 62]
[64 102]
[65 101]
[66 100]
[68 98]
[69 97]
[103 129]
[104 128]
[105 127]
[108 125]
[109 124]
[110 123]
[112 122]
[113 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
