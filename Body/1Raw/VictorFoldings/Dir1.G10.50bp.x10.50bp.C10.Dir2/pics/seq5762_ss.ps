%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUAAAAUGGGGGGGGGGGACAGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCxxxxxxxxxxACUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGCCCCCCCCCCAAAACAAAAU\
) } def
/len { sequence length } bind def

/coor [
[87.13700867 356.24063110]
[72.64731598 352.03216553]
[59.74108887 344.21603394]
[49.29829025 333.32519531]
[42.03092575 320.10220337]
[38.43449783 305.44860840]
[38.75421906 290.36349487]
[42.96829224 275.87542725]
[50.78938675 262.97222900]
[61.68425751 252.53363037]
[74.91006470 245.27136230]
[89.56505585 241.68060303]
[89.87711334 226.68385315]
[90.18917084 211.68708801]
[90.50122833 196.69033813]
[90.81328583 181.69358826]
[91.12533569 166.69683838]
[91.43739319 151.70007324]
[91.74945068 136.70332336]
[92.06150818 121.70657349]
[92.37356567 106.70981598]
[89.36363983 99.17162323]
[92.85134125 91.40519714]
[93.47531891 76.41818237]
[94.09929657 61.43116760]
[94.72327423 46.44415283]
[95.34725189 31.45713615]
[80.42401886 29.89298058]
[65.62844849 27.39487076]
[51.01893234 23.97266579]
[36.65312576 19.63987160]
[22.58772659 14.41358852]
[8.87824535 8.31444168]
[-4.42121363 1.36650109]
[-17.25816154 -6.40281153]
[-29.58193970 -14.96283436]
[-41.34391022 -24.27978516]
[-52.49765015 -34.31689453]
[-62.99914169 -45.03454590]
[-72.80694580 -56.39044571]
[-81.88234711 -68.33978271]
[-90.18953705 -80.83538055]
[-97.69572449 -93.82794189]
[-104.37129211 -107.26618195]
[-110.18988037 -121.09706879]
[-115.12854004 -135.26602173]
[-119.16777802 -149.71711731]
[-122.29164886 -164.39331055]
[-124.48783112 -179.23670959]
[-125.74764252 -194.18870544]
[-126.06612396 -209.19030762]
[-125.44202423 -224.18231201]
[-123.87778473 -239.10552979]
[-121.37960052 -253.90109253]
[-117.95732117 -268.51058960]
[-113.62445068 -282.87637329]
[-108.39809418 -296.94174194]
[-102.29887390 -310.65118408]
[-95.35086823 -323.95062256]
[-87.58148956 -336.78753662]
[-79.02140045 -349.11126709]
[-69.70438385 -360.87316895]
[-59.66722107 -372.02685547]
[-48.94951248 -382.52828979]
[-37.59355927 -392.33605957]
[-25.64418221 -401.41137695]
[-13.14853573 -409.71850586]
[-0.15593576 -417.22463989]
[13.28234005 -423.90011597]
[27.11325836 -429.71862793]
[41.28223419 -434.65722656]
[55.73334503 -438.69638062]
[70.40956116 -441.82019043]
[85.25296783 -444.01629639]
[100.20497131 -445.27603149]
[115.20658112 -445.59442139]
[130.19857788 -444.97024536]
[145.12178040 -443.40594482]
[159.91732788 -440.90768433]
[174.52680969 -437.48532104]
[188.89257812 -433.15237427]
[202.95791626 -427.92593384]
[216.66734314 -421.82666016]
[229.96672058 -414.87857056]
[242.80358887 -407.10913086]
[255.12727356 -398.54898071]
[266.88916016 -389.23190308]
[278.04278564 -379.19467163]
[288.54415894 -368.47689819]
[298.35186768 -357.12091064]
[307.42712402 -345.17147827]
[315.73419189 -332.67578125]
[323.24023438 -319.68316650]
[329.91564941 -306.24484253]
[335.73410034 -292.41387939]
[340.67263794 -278.24490356]
[344.71170044 -263.79376221]
[347.83541870 -249.11752319]
[350.03146362 -234.27410889]
[351.29110718 -219.32209778]
[351.60943604 -204.32049561]
[350.98516846 -189.32850647]
[349.42077637 -174.40528870]
[346.92245483 -159.60975647]
[343.50000000 -145.00028992]
[339.16699219 -130.63455200]
[333.94049072 -116.56924438]
[327.84112549 -102.85985565]
[320.89297485 -89.56050873]
[313.12347412 -76.72367859]
[304.56326294 -64.40003204]
[295.24612427 -52.63821411]
[285.20883179 -41.48462677]
[274.49102783 -30.98330116]
[263.13494873 -21.17567635]
[251.18548584 -12.10046101]
[238.68975830 -3.79346824]
[225.69708252 3.71251583]
[212.25872803 10.38786888]
[198.42774963 16.20624542]
[184.25872803 21.14468384]
[169.80757141 25.18369484]
[155.13131714 28.30733681]
[140.28790283 30.50328255]
[125.33587646 31.76286507]
[110.33426666 32.08111191]
[109.71028900 47.06813049]
[109.08631134 62.05514526]
[108.46233368 77.04216003]
[107.83835602 92.02917480]
[107.37031555 107.02187347]
[107.05825806 122.01863098]
[106.74620819 137.01538086]
[106.43415070 152.01213074]
[106.12209320 167.00889587]
[105.81003571 182.00564575]
[105.49797821 197.00239563]
[105.18592072 211.99914551]
[104.87387085 226.99591064]
[104.56181335 241.99266052]
[119.05474854 246.18994141]
[131.96701050 253.99609375]
[142.41821289 264.87884521]
[149.69578552 278.09625244]
[153.30352783 292.74707031]
[152.99545288 307.83239746]
[148.79257202 322.32373047]
[140.98144531 335.23297119]
[130.09465027 345.67996216]
[116.87444305 352.95245361]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 130]
[24 129]
[25 128]
[26 127]
[27 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
