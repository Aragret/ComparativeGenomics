%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUCAUAGGGGGGGGGGGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCCCUAAUxxxxxxxxxxUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACUACCCCCCCCCCCUUCUCCAUA\
) } def
/len { sequence length } bind def

/coor [
[87.54444885 398.90499878]
[73.05475616 394.69653320]
[60.14852524 386.88040161]
[49.70572281 375.98956299]
[42.43836212 362.76657104]
[38.84193420 348.11297607]
[39.16165543 333.02786255]
[43.37572479 318.53979492]
[51.19682312 305.63659668]
[62.09169006 295.19799805]
[75.31749725 287.93572998]
[89.97249603 284.34497070]
[90.28454590 269.34820557]
[90.59660339 254.35145569]
[90.90866089 239.35470581]
[91.22071838 224.35795593]
[91.53277588 209.36120605]
[91.84483337 194.36445618]
[92.15688324 179.36769104]
[92.46894073 164.37094116]
[92.78099823 149.37419128]
[93.09305573 134.37744141]
[93.40511322 119.38068390]
[85.94142914 132.39196777]
[83.51572418 147.19453430]
[75.09218597 159.60597229]
[62.23164368 167.32649231]
[47.31711960 168.92553711]
[33.11220551 164.10678101]
[22.24901581 153.76312256]
[16.74045372 139.81121826]
[17.60723686 124.83628082]
[24.68875122 111.61311340]
[36.67282104 102.59191132]
[51.33884811 99.44426727]
[65.97021484 102.75386810]
[80.83189392 100.72151947]
[66.81518555 95.38000488]
[52.79846954 90.03849792]
[38.78175735 84.69698334]
[20.70859909 88.06459808]
[10.12911892 74.09768677]
[-5.47011185 76.73863220]
[-14.85054302 65.16898346]
[-31.80061722 65.53134155]
[-36.84106827 49.34399414]
[-22.68166161 40.01942444]
[-9.80178642 51.04417801]
[4.78714371 48.04211426]
[15.17787457 59.97288513]
[26.28344536 55.07659912]
[38.11870575 59.21732712]
[44.12326813 70.68026733]
[58.13998413 76.02178192]
[72.15669250 81.36329651]
[86.17340851 86.70480347]
[100.62809753 82.69706726]
[109.89304352 70.90042877]
[119.15799713 59.10378647]
[128.42294312 47.30714798]
[137.68789673 35.51050568]
[146.95285034 23.71386719]
[132.86886597 28.87541008]
[117.88269043 29.51930428]
[103.40789032 25.58481407]
[90.80979919 17.44306183]
[81.27673340 5.86201572]
[75.70789337 -8.06594276]
[74.62856293 -23.02706146]
[78.14054871 -37.61013031]
[85.91258240 -50.43960953]
[97.21157074 -60.30535507]
[110.97173309 -66.27677917]
[125.89514923 -67.79063416]
[140.57415771 -64.70412445]
[153.62417603 -57.30838013]
[163.81425476 -46.30100632]
[170.18322754 -32.72027588]
[172.13032532 -17.84718513]
[169.47189331 -3.08463883]
[162.45858765 10.17503643]
[175.39663696 2.58512855]
[188.33468628 -5.00477982]
[173.33743286 -5.29151535]
[159.06509399 -9.90672779]
[146.73944092 -18.45532799]
[137.41564941 -30.20551300]
[131.89186096 -44.15140152]
[130.64096069 -59.09915161]
[133.77001953 -73.76915741]
[141.01116943 -86.90557861]
[151.74453735 -97.38388062]
[165.05128479 -104.30706024]
[179.79229736 -107.08245087]
[194.70564270 -105.47247314]
[208.51466370 -99.61493683]
[220.03724670 -90.01129150]
[228.28700256 -77.48365021]
[232.55767822 -63.10445786]
[232.48370361 -48.10464096]
[228.07141113 -33.76826477]
[219.69850159 -21.32260513]
[208.07882690 -11.83132172]
[222.94186401 -13.85365582]
[237.80491638 -15.87598991]
[252.66796875 -17.89832497]
[260.85922241 -31.21888924]
[275.71261597 -36.10872269]
[290.21484375 -30.25899887]
[297.51840210 -16.43177414]
[294.17474365 -1.15584242]
[281.76269531 8.35596752]
[266.14279175 7.61246967]
[254.69029236 -3.03527784]
[239.82725525 -1.01294351]
[224.96420288 1.00939095]
[210.10116577 3.03172541]
[195.92460632 7.93327618]
[182.98654175 15.52318478]
[170.04849243 23.11309242]
[158.74948120 32.97881699]
[149.48452759 44.77545547]
[140.21958923 56.57209396]
[130.95463562 68.36873627]
[121.68968964 80.16537476]
[112.42473602 91.96201324]
[117.00177002 100.10823059]
[115.99169922 110.63679504]
[108.40186310 119.69273376]
[108.08980560 134.68948364]
[107.77775574 149.68624878]
[107.46569824 164.68299866]
[107.15364075 179.67974854]
[106.84158325 194.67649841]
[106.52952576 209.67326355]
[106.21746826 224.67001343]
[105.90541840 239.66676331]
[105.59336090 254.66351318]
[105.28130341 269.66027832]
[104.96924591 284.65701294]
[119.46218109 288.85430908]
[132.37445068 296.66046143]
[142.82565308 307.54321289]
[150.10322571 320.76062012]
[153.71096802 335.41143799]
[153.40289307 350.49676514]
[149.20001221 364.98809814]
[141.38888550 377.89733887]
[130.50207520 388.34436035]
[117.28188324 395.61682129]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[37 56]
[38 55]
[39 54]
[40 53]
[42 50]
[44 48]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[62 121]
[81 120]
[82 119]
[83 118]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
