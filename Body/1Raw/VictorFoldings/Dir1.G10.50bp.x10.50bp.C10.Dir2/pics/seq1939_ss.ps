%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUACCAGACGGGGGGGGGGAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAxxxxxxxxxxGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUACCCCCCCCCCACUACCUGAC\
) } def
/len { sequence length } bind def

/coor [
[74.96719360 373.09988403]
[61.12125778 367.08386230]
[49.41259766 357.55444336]
[40.71007156 345.21878052]
[35.65946960 330.99227905]
[34.63557816 315.93057251]
[37.71437836 301.15142822]
[44.66740036 287.75149536]
[54.97868347 276.72515869]
[67.88306427 268.89065552]
[82.42295074 264.82934570]
[82.42295074 249.82934570]
[82.42295074 234.82934570]
[82.42295074 219.82934570]
[82.42295074 204.82934570]
[82.42295074 189.82934570]
[82.42295074 174.82934570]
[82.42295074 159.82934570]
[82.42295074 144.82934570]
[82.42295074 129.82934570]
[75.23156738 142.99308777]
[68.04018402 156.15681458]
[65.83241272 170.99345398]
[57.82088089 183.67474365]
[45.37035751 192.04042053]
[30.60182190 194.66537476]
[16.03112030 191.10241699]
[4.14039898 181.95852661]
[-3.04473186 168.79136658]
[-4.30027199 153.84400940]
[0.58766186 139.66275024]
[10.78640079 128.66340637]
[24.55857086 122.71971893]
[39.55868149 122.84436035]
[53.68007660 117.78608704]
[67.80147552 112.72781372]
[52.98371506 110.39670563]
[38.16595840 108.06560516]
[23.34819984 105.73449707]
[8.24716377 112.12908936]
[-4.67642260 102.03388977]
[-2.12788129 85.83398438]
[13.27106667 80.19444275]
[25.67930412 90.91674042]
[40.49706268 93.24784088]
[55.31481934 95.57894897]
[70.13257599 97.91004944]
[78.35918427 83.72998047]
[91.66868591 77.26983643]
[104.73015594 79.18762207]
[112.98244476 66.66165924]
[121.23473358 54.13570023]
[129.48703003 41.60973740]
[137.73931885 29.08377457]
[145.86085510 16.47264671]
[153.85076904 3.77771735]
[161.84068298 -8.91721249]
[167.18220520 -22.93392563]
[169.66731262 -37.72663116]
[158.97119141 -48.81261826]
[156.87825012 -63.89482498]
[163.98355103 -77.16053009]
[177.37744141 -83.62129211]
[179.86256409 -98.41399384]
[182.34768677 -113.20670319]
[184.83280945 -127.99941254]
[186.85513306 -142.86245728]
[188.41271973 -157.78137207]
[189.97029114 -172.70028687]
[176.22781372 -179.05818176]
[165.29606628 -189.53556824]
[158.36085510 -202.99594116]
[156.17445374 -217.97920227]
[158.97402954 -232.86010742]
[166.45590210 -246.02445984]
[177.80848694 -256.04431152]
[191.80036926 -261.83276367]
[206.91378784 -262.76193237]
[221.50935364 -258.73104858]
[234.00386047 -250.17733765]
[243.04197693 -238.02864075]
[247.64335632 -223.60275269]
[247.30883789 -208.46449280]
[242.07470703 -194.25595093]
[232.50874329 -182.51835632]
[219.64859009 -174.52491760]
[204.88920593 -171.14270020]
[203.33163452 -156.22378540]
[201.77404785 -141.30487061]
[203.75598145 -138.31498718]
[204.35112000 -134.19825745]
[203.03768921 -129.63456726]
[199.62550354 -125.51428986]
[197.14039612 -110.72158813]
[194.65527344 -95.92887878]
[192.17015076 -81.13616943]
[202.71759033 -70.65335083]
[205.09800720 -55.79409027]
[198.19154358 -42.22374725]
[184.46002197 -35.24151230]
[181.97491455 -20.44880676]
[191.82153320 -31.76445198]
[204.52186584 -39.74578476]
[218.98867798 -43.70956421]
[233.98352051 -43.31646347]
[248.22277832 -38.60013962]
[260.48745728 -29.96433258]
[269.72769165 -18.14831352]
[275.15243530 -4.16359758]
[276.29727173 10.79264832]
[273.06423950 25.44009018]
[265.73010254 38.52482986]
[254.92269897 48.92673874]
[241.56716919 55.75535965]
[226.80685425 58.42612839]
[211.90530396 56.71041489]
[198.13816833 50.75508499]
[186.68399048 41.06995392]
[178.52330017 28.48411751]
[174.35472107 14.07499313]
[174.53561401 -0.92729610]
[166.54570007 11.76763344]
[158.55578613 24.46256256]
[157.64883423 31.84653854]
[150.26527405 37.33606339]
[142.01298523 49.86202621]
[133.76069641 62.38798904]
[125.50840759 74.91394806]
[117.25611877 87.43991089]
[122.32978821 112.60484314]
[97.42295074 129.82934570]
[97.42295074 144.82934570]
[97.42295074 159.82934570]
[97.42295074 174.82934570]
[97.42295074 189.82934570]
[97.42295074 204.82934570]
[97.42295074 219.82934570]
[97.42295074 234.82934570]
[97.42295074 249.82934570]
[97.42295074 264.82934570]
[111.96283722 268.89065552]
[124.86721802 276.72515869]
[135.17849731 287.75149536]
[142.13153076 301.15142822]
[145.21032715 315.93057251]
[144.18643188 330.99227905]
[139.13583374 345.21878052]
[130.43330383 357.55444336]
[118.72464752 367.08386230]
[104.87870789 373.09988403]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[36 47]
[37 46]
[38 45]
[39 44]
[50 129]
[51 128]
[52 127]
[53 126]
[54 125]
[55 123]
[56 122]
[57 121]
[58 101]
[59 100]
[63 96]
[64 95]
[65 94]
[66 93]
[67 89]
[68 88]
[69 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
