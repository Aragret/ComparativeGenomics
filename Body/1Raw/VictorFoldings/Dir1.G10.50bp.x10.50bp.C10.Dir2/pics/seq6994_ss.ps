%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GUAUUAGCAAAGGGGGGGGGGCUCAUCACUAGACAUCGUACUACACGACACGUACUACGUUGUAGCCCACUxxxxxxxxxxCAAAGCUGGUUUCAAGCCAACCCCAUGGCCUCCAUGACUUUUUCAAAAAGCCCCCCCCCCGUAUUAGAAAA\
) } def
/len { sequence length } bind def

/coor [
[77.43457794 505.29855347]
[63.41263199 499.74554443]
[51.21267700 490.87921143]
[41.60160446 479.25689697]
[35.18357849 465.60919189]
[32.36204147 450.79400635]
[33.31435776 435.74264526]
[37.98066330 421.40121460]
[46.06763077 408.67126465]
[57.06690216 398.35299683]
[70.28706360 391.09500122]
[84.89707184 387.35357666]
[84.89707184 372.35357666]
[84.89707184 357.35357666]
[84.89707184 342.35357666]
[84.89707184 327.35357666]
[84.89707184 312.35357666]
[84.89707184 297.35357666]
[84.89707184 282.35357666]
[84.89707184 267.35357666]
[84.89707184 252.35357666]
[84.89707184 237.35357666]
[84.89707184 222.35357666]
[69.36989594 217.05781555]
[56.55993652 206.76788330]
[48.01424789 192.70413208]
[44.77249908 176.54396057]
[47.24051285 160.22183228]
[55.13957596 145.69763184]
[67.53777313 134.72138977]
[82.95991516 128.62239075]
[82.34409332 113.63504028]
[73.80363464 101.30375671]
[59.99005127 95.45696259]
[46.17646790 89.61017609]
[15.10704136 121.82424164]
[0.28455952 119.52336884]
[-14.53792286 117.22248840]
[-29.36040497 114.92161560]
[-43.10702133 123.19264984]
[-58.09363937 117.46719360]
[-62.82380295 102.13731384]
[-53.66893768 88.96279144]
[-37.65187454 88.04998779]
[-27.05953026 100.09913635]
[-12.23704815 102.40000916]
[2.58543444 104.70088196]
[17.40791702 107.00175476]
[20.47250366 100.15644836]
[29.66626358 79.62050629]
[18.07721519 70.09716797]
[6.48816729 60.57383347]
[-5.10088110 51.05049515]
[-21.17700195 45.66582108]
[-20.45307732 28.72733688]
[-3.97615266 24.73393059]
[4.42245674 39.46144485]
[16.01150513 48.98478317]
[27.60055351 58.50812149]
[39.18960190 68.03145599]
[52.02325439 75.79659271]
[65.83683777 81.64337921]
[79.65042114 87.49017334]
[92.06873322 79.07675934]
[91.76075745 64.07992554]
[91.45278168 49.08308411]
[76.91562653 44.94029999]
[64.24633789 36.69527435]
[54.57145309 25.08114433]
[48.75125504 11.13063526]
[47.30327225 -3.91578507]
[50.35626221 -18.72019958]
[57.63875198 -31.96620750]
[68.50318909 -42.47598648]
[81.98351288 -49.31501007]
[96.88106537 -51.87516022]
[111.87116241 -49.92878723]
[125.62090302 -43.64896393]
[136.90765381 -33.59408569]
[144.72781372 -20.65822983]
[148.38603210 -5.99163771]
[147.55700684 9.10154343]
[142.31445312 23.27923965]
[133.12454224 35.28077698]
[120.80442810 44.03899384]
[106.44961548 48.77510834]
[106.75759888 63.77194595]
[107.06557465 78.76878357]
[120.93845367 84.47344208]
[131.70713806 74.03143311]
[142.47581482 63.58942795]
[153.24449158 53.14741898]
[151.94125366 37.56423569]
[161.00177002 24.81900215]
[176.14794922 20.92962646]
[190.22822571 27.73255348]
[196.59432983 42.01564789]
[192.24037170 57.03487015]
[179.22215271 65.69860077]
[163.68649292 63.91609573]
[152.91781616 74.35810852]
[142.14913940 84.80011749]
[131.38046265 95.24212646]
[138.06684875 108.67016602]
[144.75260925 122.09702301]
[159.57508850 119.79615021]
[174.39758301 117.49527740]
[189.22006226 115.19439697]
[204.04254150 112.89352417]
[218.76676941 104.48915100]
[230.91876221 116.31138611]
[222.92256165 131.26119995]
[206.34341431 127.71600342]
[191.52093506 130.01687622]
[176.69845581 132.31774902]
[161.87597656 134.61863708]
[147.05348206 136.91950989]
[112.58979797 134.31250000]
[97.33144379 113.01921082]
[97.94727325 128.00656128]
[111.15761566 131.57252502]
[122.80632782 138.71923828]
[131.94779968 148.85536194]
[137.84309387 161.14733887]
[140.01971436 174.58795166]
[138.30947876 188.07882690]
[132.86140442 200.52023315]
[124.12881470 210.90069580]
[112.83164215 218.37925720]
[99.89707184 222.35357666]
[99.89707184 237.35357666]
[99.89707184 252.35357666]
[99.89707184 267.35357666]
[99.89707184 282.35357666]
[99.89707184 297.35357666]
[99.89707184 312.35357666]
[99.89707184 327.35357666]
[99.89707184 342.35357666]
[99.89707184 357.35357666]
[99.89707184 372.35357666]
[99.89707184 387.35357666]
[114.50708771 391.09500122]
[127.72724915 398.35299683]
[138.72651672 408.67126465]
[146.81349182 421.40121460]
[151.47979736 435.74264526]
[152.43211365 450.79400635]
[149.61056519 465.60919189]
[143.19255066 479.25689697]
[133.58148193 490.87921143]
[121.38151550 499.74554443]
[107.35957336 505.29855347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[31 120]
[32 119]
[33 63]
[34 62]
[35 61]
[36 48]
[37 47]
[38 46]
[39 45]
[50 60]
[51 59]
[52 58]
[53 57]
[64 88]
[65 87]
[66 86]
[89 103]
[90 102]
[91 101]
[92 100]
[105 117]
[106 116]
[107 115]
[108 114]
[109 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
