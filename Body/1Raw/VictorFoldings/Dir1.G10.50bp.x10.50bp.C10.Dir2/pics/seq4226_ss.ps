%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGACCCUACUUCGGGGGGGGGGUAACCUCCCUGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACxxxxxxxxxxUAGGCUAAAUCCUAUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACCCCCCCCCCCAAGACGCUACUUC\
) } def
/len { sequence length } bind def

/coor [
[97.61473083 502.05551147]
[83.25247955 497.54879761]
[70.09159088 490.24291992]
[58.67098999 480.43704224]
[49.45835114 468.53277588]
[42.83092499 455.01751709]
[39.06009293 440.44473267]
[38.30027771 425.41119385]
[40.58258820 410.53247070]
[45.81356430 396.41787720]
[53.77900314 383.64538574]
[64.15272522 372.73800659]
[76.50993347 364.14242554]
[90.34460449 358.21057129]
[105.09021759 355.18539429]
[105.09021759 340.18539429]
[105.09021759 325.18539429]
[105.09021759 310.18539429]
[105.09021759 295.18539429]
[105.09021759 280.18539429]
[105.09021759 265.18539429]
[105.09021759 250.18539429]
[105.09021759 235.18539429]
[105.09021759 220.18539429]
[105.09021759 205.18539429]
[105.09021759 190.18539429]
[104.94203186 175.18612671]
[104.64567566 160.18905640]
[104.34931946 145.19198608]
[104.05296326 130.19491577]
[84.71092224 126.32771301]
[71.80398560 111.42957306]
[70.73384094 91.76049805]
[55.89823532 89.54579926]
[41.06263351 87.33110046]
[26.22702980 85.11640167]
[11.39142609 82.90170288]
[-3.44417644 80.68700409]
[-12.94039917 92.75834656]
[-27.20599556 98.44942474]
[-42.40359116 96.22936249]
[-54.44510651 86.69535065]
[-60.09144211 72.41198730]
[-57.82375336 57.22142410]
[-48.25204086 45.20985031]
[-33.95104980 39.60831833]
[-18.76766968 41.92360687]
[-6.78615713 51.53292465]
[-1.22947788 65.85140228]
[13.60612488 68.06610107]
[28.44172859 70.28079987]
[43.27733231 72.49549866]
[58.11293411 74.71019745]
[72.94853973 76.92489624]
[84.87135315 67.82289124]
[86.64544678 52.92817688]
[88.41954803 38.03346252]
[73.82897949 34.47358704]
[59.77390671 29.18092728]
[46.45928955 22.23266792]
[34.07929230 13.73013306]
[22.81445885 3.79731631]
[12.82905865 -7.42093372]
[4.26870918 -19.76102257]
[-2.74175429 -33.04299164]
[-8.10009861 -47.07315826]
[-11.72818279 -61.64691544]
[-13.57309914 -76.55173492]
[-13.60794353 -91.57025909]
[-11.83220768 -106.48348236]
[-8.27178669 -121.07391357]
[-2.97860289 -135.12878418]
[3.97015452 -148.44314575]
[12.47315216 -160.82283020]
[22.40639114 -172.08729553]
[33.62501526 -182.07226562]
[45.96542358 -190.63215637]
[59.24765396 -197.64212036]
[73.27802277 -202.99993896]
[87.85191345 -206.62748718]
[102.75679779 -208.47184753]
[117.77532959 -208.50611877]
[132.68847656 -206.72982788]
[147.27877808 -203.16886902]
[161.33346558 -197.87515259]
[174.64755249 -190.92590332]
[187.02691650 -182.42243958]
[198.29101562 -172.48878479]
[208.27557373 -161.26979065]
[216.83499146 -148.92906189]
[223.84446716 -135.64656067]
[229.20176697 -121.61599731]
[232.82875061 -107.04196930]
[234.67256165 -92.13700867]
[234.70628357 -77.11848450]
[232.92942810 -62.20539474]
[229.36791992 -47.61522675]
[224.07368469 -33.56074524]
[217.12393188 -20.24690628]
[208.62001038 -7.86786604]
[198.68592834 3.39585447]
[187.46655273 13.37999630]
[175.12550354 21.93896103]
[161.84274292 28.94793510]
[147.81198120 34.30470657]
[133.23782349 37.93115616]
[118.33279419 39.77439880]
[103.31426239 39.80755997]
[101.54016876 54.70227432]
[99.76606750 69.59699249]
[116.32157898 74.32400513]
[127.66562653 87.29103851]
[130.15339661 104.35105896]
[145.14680481 104.79556274]
[159.17019653 97.47060394]
[171.66259766 105.58165741]
[186.65602112 106.02615356]
[201.64942932 106.47065735]
[217.66078186 100.89633942]
[227.44963074 114.73883057]
[216.85792542 127.97711945]
[201.20492554 121.46406555]
[186.21151733 121.01956940]
[171.21810913 120.57506561]
[158.26713562 127.93182373]
[144.70231628 119.78897095]
[129.70889282 119.34447479]
[119.05003357 129.89855957]
[119.34638977 144.89562988]
[119.64274597 159.89270020]
[119.93910217 174.88977051]
[123.25188446 183.46075439]
[120.09021759 190.18539429]
[120.09021759 205.18539429]
[120.09021759 220.18539429]
[120.09021759 235.18539429]
[120.09021759 250.18539429]
[120.09021759 265.18539429]
[120.09021759 280.18539429]
[120.09021759 295.18539429]
[120.09021759 310.18539429]
[120.09021759 325.18539429]
[120.09021759 340.18539429]
[120.09021759 355.18539429]
[134.83583069 358.21057129]
[148.67050171 364.14242554]
[161.02770996 372.73800659]
[171.40142822 383.64538574]
[179.36686707 396.41787720]
[184.59785461 410.53247070]
[186.88015747 425.41119385]
[186.12034607 440.44473267]
[182.34951782 455.01751709]
[175.72209167 468.53277588]
[166.50944519 480.43704224]
[155.08885193 490.24291992]
[141.92796326 497.54879761]
[127.56570435 502.05551147]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 131]
[28 130]
[29 129]
[30 128]
[33 54]
[34 53]
[35 52]
[36 51]
[37 50]
[38 49]
[55 110]
[56 109]
[57 108]
[113 127]
[114 126]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
