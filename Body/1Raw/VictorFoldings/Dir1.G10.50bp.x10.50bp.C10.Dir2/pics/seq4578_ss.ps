%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUAUCACACGGGGGGGGGGCCCAUCCUAAAGUAAGGUCAGCUAAAUAAGCUAUCGGGCCCAUACCCCGAxxxxxxxxxxACAUCAAAACCCCCUCCCCAUGCUUACAAGCAAGUACAGCAAUCAACCCUCCCCCCCCCCCAACUAUCACAC\
) } def
/len { sequence length } bind def

/coor [
[375.01550293 272.00396729]
[365.87460327 261.53295898]
[357.54479980 250.40551758]
[350.07305908 238.68435669]
[343.50149536 226.43550110]
[337.86721802 213.72795105]
[333.20196533 200.63330078]
[329.53207397 187.22534180]
[326.87826538 173.57960510]
[325.25555420 159.77299500]
[324.67312622 145.88328552]
[325.13424683 131.98876953]
[310.22735596 130.32008362]
[295.32046509 128.65141296]
[280.41357422 126.98273468]
[265.50668335 125.31406403]
[251.99766541 131.58749390]
[239.14389038 122.36301422]
[225.63487244 128.63644409]
[212.78109741 119.41196442]
[197.87420654 117.74328613]
[182.96731567 116.07460785]
[168.06040955 114.40592957]
[153.15351868 112.73725128]
[138.24662781 111.06858063]
[123.32358551 109.55105591]
[108.38593292 108.18483734]
[93.41365814 109.09635162]
[78.75205994 112.26457214]
[64.09046173 115.43279266]
[55.73939133 128.85050964]
[40.32780838 132.35174561]
[26.99913406 123.85927582]
[23.66103554 108.41153717]
[32.29394531 95.17339325]
[47.77611542 91.99880219]
[60.92224503 100.77119446]
[75.58383942 97.60297394]
[90.24543762 94.43475342]
[90.85282135 86.95938873]
[92.06758881 72.00865936]
[92.67497253 64.53329468]
[78.71716309 59.03970337]
[64.75935364 53.54611588]
[50.80154037 48.05252457]
[35.57638168 53.10960388]
[22.20899773 44.23871994]
[20.95370293 28.24485207]
[32.77345276 17.39712906]
[48.60114670 20.01699638]
[56.29513168 34.09471512]
[70.25293732 39.58830261]
[84.21075439 45.08189392]
[98.16856384 50.57548141]
[109.75215149 93.24718475]
[124.68980408 94.61340332]
[133.58059692 92.26924896]
[139.91529846 96.16168213]
[154.82220459 97.83036041]
[169.72909546 99.49903870]
[184.63598633 101.16771698]
[199.54287720 102.83638763]
[214.44978333 104.50506592]
[229.02502441 98.35099792]
[240.81256104 107.45611572]
[255.38781738 101.30204010]
[267.17535400 110.40716553]
[282.08224487 112.07584381]
[296.98913574 113.74452209]
[311.89602661 115.41319275]
[326.80294800 117.08187103]
[329.98193359 101.09543610]
[334.55416870 85.45083618]
[340.48416138 70.26924896]
[347.72583008 55.66823959]
[356.22308350 41.76088333]
[365.91003418 28.65487480]
[376.71154785 16.45168877]
[388.54394531 5.24580765]
[401.31549072 -4.87601900]
[414.92718506 -13.83544159]
[429.27359009 -21.56311989]
[444.24349976 -27.99925995]
[459.72097778 -33.09407043]
[475.58605957 -36.80815506]
[491.71585083 -39.11281586]
[507.98541260 -39.99027252]
[524.26867676 -39.43380356]
[540.43951416 -37.44779205]
[556.37274170 -34.04769516]
[571.94482422 -29.25992203]
[587.03527832 -23.12163162]
[601.52716064 -15.68043804]
[615.30828857 -6.99405050]
[628.27197266 2.87018204]
[640.31774902 13.83579063]
[651.35241699 25.81777763]
[661.29052734 38.72327805]
[670.05517578 52.45227814]
[677.57855225 66.89839172]
[683.80242920 81.94967651]
[688.67858887 97.48950958]
[692.16943359 113.39750671]
[707.03942871 111.42705536]
[721.90948486 109.45660400]
[736.77947998 107.48615265]
[751.62878418 105.36511230]
[766.45581055 103.09368896]
[781.28283691 100.82227325]
[790.43383789 87.93682861]
[806.02966309 85.37859344]
[818.81768799 94.66531372]
[821.21087646 110.28735352]
[811.78948975 122.97642517]
[796.14300537 125.20433807]
[783.55426025 115.64929962]
[768.72723389 117.92071533]
[753.90020752 120.19213104]
[747.72839355 124.33808899]
[738.74993896 122.35616302]
[723.87994385 124.32661438]
[709.00988770 126.29706573]
[694.13989258 128.26751709]
[694.88836670 142.13836670]
[694.59423828 156.02653503]
[693.25903320 169.85375977]
[690.89031982 183.54212952]
[687.50140381 197.01448059]
[683.11126709 210.19491577]
[677.74475098 223.00910950]
[671.43194580 235.38487244]
[664.20843506 247.25242615]
[656.11486816 258.54489136]
[647.19683838 269.19857788]
[637.50457764 279.15347290]
[627.09265137 288.35339355]
[616.01971436 296.74652100]
[604.34814453 304.28549194]
[592.14373779 310.92782593]
[579.47515869 316.63601685]
[566.41387939 321.37789917]
[553.03338623 325.12667847]
[539.40917969 327.86120605]
[525.61791992 329.56607056]
[511.73742676 330.23156738]
[497.84582520 329.85394287]
[484.02145386 328.43527222]
[470.34216309 325.98352051]
[456.88513184 322.51248169]
[443.72610474 318.04162598]
[430.93933105 312.59616089]
[418.59683228 306.20672607]
[406.76818848 298.90927124]
[395.52008057 290.74490356]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 71]
[13 70]
[14 69]
[15 68]
[16 67]
[18 65]
[20 63]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 56]
[27 55]
[28 39]
[29 38]
[30 37]
[42 54]
[43 53]
[44 52]
[45 51]
[103 123]
[104 122]
[105 121]
[106 120]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
