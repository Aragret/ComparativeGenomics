%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUUACAGGGGGGGGGGUCACAAGACGUCUUGCACUCAUGAGCUGUCCCCACAUUAGGCUUAAAAACxxxxxxxxxxAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCUCCCCCAAAAUUCAGCCCCCCCCCCAAUAAUAACA\
) } def
/len { sequence length } bind def

/coor [
[97.48518372 353.76553345]
[82.99549103 349.55706787]
[70.08926392 341.74093628]
[59.64646149 330.85009766]
[52.37909698 317.62710571]
[48.78267288 302.97351074]
[49.10239410 287.88839722]
[53.31646347 273.40032959]
[61.13756180 260.49713135]
[72.03242493 250.05853271]
[85.25823975 242.79627991]
[99.91323090 239.20550537]
[100.22528839 224.20875549]
[100.53734589 209.21200562]
[100.84939575 194.21524048]
[101.16145325 179.21849060]
[101.47351074 164.22174072]
[101.78556824 149.22499084]
[102.09762573 134.22822571]
[102.40968323 119.23147583]
[90.80834198 109.72312164]
[76.16483307 112.97394562]
[61.52133560 116.22476959]
[47.10911942 120.38265991]
[32.98431778 125.43141174]
[18.85951424 130.48016357]
[4.73471069 135.52893066]
[-5.46062613 148.37365723]
[-21.64023590 145.69927979]
[-27.15992165 130.25697327]
[-16.34150505 117.93244171]
[-0.31404585 121.40412140]
[13.81075668 116.35536957]
[27.93556023 111.30661011]
[42.06036377 106.25785065]
[29.21784210 98.50739288]
[25.43064117 83.99336243]
[32.84895706 70.95616150]
[47.26101303 66.79771423]
[60.48430252 73.87899780]
[65.01125336 88.17958069]
[58.27051163 101.58126831]
[72.91400909 98.33044434]
[87.55751038 95.07962036]
[99.63750458 86.18726349]
[107.09241486 73.17095947]
[114.54732513 60.15464783]
[122.00223541 47.13834000]
[109.59631348 38.69313812]
[97.88214111 29.31196022]
[86.93016815 19.05122757]
[76.80625916 7.97264957]
[67.57131195 -3.85714436]
[59.28086090 -16.36700821]
[51.98476028 -29.48170471]
[45.72689819 -43.12236023]
[40.54491043 -57.20693588]
[36.46995544 -71.65072632]
[33.52654648 -86.36685944]
[31.73238754 -101.26683807]
[31.09826469 -116.26104736]
[31.62799454 -131.25930786]
[33.31838989 -146.17140198]
[36.15928268 -160.90766907]
[40.13359070 -175.37948608]
[45.21740723 -189.49978638]
[51.38016129 -203.18368530]
[58.58478928 -216.34884644]
[66.78795624 -228.91612244]
[75.94033051 -240.80992126]
[85.98686981 -251.95869446]
[96.86714935 -262.29541016]
[108.51573181 -271.75790405]
[120.86256409 -280.28927612]
[133.83338928 -287.83819580]
[147.35018921 -294.35925293]
[161.33168030 -299.81326294]
[175.69378662 -304.16738892]
[190.35011292 -307.39544678]
[205.21250916 -309.47805786]
[220.19161987 -310.40267944]
[235.19731140 -310.16375732]
[250.13938904 -308.76269531]
[264.92794800 -306.20794678]
[279.47406006 -302.51486206]
[293.69024658 -297.70568848]
[307.49102783 -291.80929565]
[320.79333496 -284.86117554]
[333.51724243 -276.90313721]
[345.58621216 -267.98300171]
[356.92761230 -258.15441895]
[367.47326660 -247.47653198]
[377.15975952 -236.01353455]
[385.92880249 -223.83438110]
[393.72769165 -211.01229858]
[400.50952148 -197.62442017]
[406.23345947 -183.75126648]
[410.86514282 -169.47625732]
[414.37667847 -154.88525391]
[416.74694824 -140.06599426]
[417.96173096 -125.10763550]
[418.01367188 -110.10011292]
[416.90246582 -95.13370514]
[414.63482666 -80.29840088]
[411.22436523 -65.68344116]
[406.69161987 -51.37671280]
[401.06384277 -37.46426010]
[394.37484741 -24.02976036]
[386.66488647 -11.15400887]
[377.98034668 1.08555889]
[368.37344360 12.61532974]
[357.90194702 23.36596298]
[346.62884521 33.27280045]
[334.62191772 42.27626419]
[321.95343018 50.32220078]
[308.69949341 57.36222076]
[294.93988037 63.35398865]
[280.75732422 68.26146698]
[266.23712158 72.05513763]
[251.46659851 74.71218872]
[236.53457642 76.21663666]
[221.53088379 76.55944061]
[206.54574585 75.73853302]
[191.66928101 73.75885010]
[176.99096680 70.63230133]
[162.59907532 66.37768555]
[148.58015442 61.02059555]
[135.01853943 54.59325027]
[127.56362915 67.60955811]
[120.10871887 80.62586975]
[112.65380859 93.64217377]
[117.40643311 119.54353333]
[117.09437561 134.54028320]
[116.78231812 149.53703308]
[116.47026825 164.53379822]
[116.15821075 179.53054810]
[115.84615326 194.52729797]
[115.53409576 209.52404785]
[115.22203827 224.52081299]
[114.90998077 239.51756287]
[129.40292358 243.71484375]
[142.31518555 251.52099609]
[152.76638794 262.40374756]
[160.04396057 275.62115479]
[163.65170288 290.27197266]
[163.34362793 305.35729980]
[159.14074707 319.84863281]
[151.32962036 332.75787354]
[140.44281006 343.20489502]
[127.22261810 350.47735596]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 44]
[22 43]
[23 42]
[24 35]
[25 34]
[26 33]
[27 32]
[45 131]
[46 130]
[47 129]
[48 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
