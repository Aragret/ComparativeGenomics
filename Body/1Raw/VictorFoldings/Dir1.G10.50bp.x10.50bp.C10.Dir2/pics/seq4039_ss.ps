%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAGGCUUCAAGGGGGGGGGGCAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACAxxxxxxxxxxUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAAUCAACCCCCCCCCCCUGGCUUCAA\
) } def
/len { sequence length } bind def

/coor [
[79.62285614 430.68331909]
[66.40265656 423.41085815]
[55.51585388 412.96386719]
[47.70472336 400.05462646]
[43.50183868 385.56329346]
[43.19376755 370.47796631]
[46.80150986 355.82711792]
[54.07908249 342.60974121]
[64.53028870 331.72698975]
[77.44255066 323.92083740]
[91.93548584 319.72354126]
[91.62342834 304.72677612]
[91.31137848 289.73004150]
[90.99932098 274.73327637]
[90.68726349 259.73654175]
[90.37520599 244.73977661]
[90.06314850 229.74302673]
[89.75109100 214.74626160]
[89.43904114 199.74951172]
[76.74411011 191.75959778]
[63.08786774 197.96501160]
[57.45910263 212.48928833]
[43.52133179 218.58792114]
[29.70933723 213.13223267]
[16.05309677 219.33764648]
[6.96076298 232.98541260]
[-9.38515854 231.66522217]
[-16.16938400 216.73516846]
[-6.41288471 203.55401611]
[9.84768963 205.68139648]
[23.50393105 199.47599792]
[28.47870445 185.48359680]
[42.23967743 178.99589539]
[56.88246155 184.30876160]
[70.53870392 178.10336304]
[79.80364990 166.30671692]
[82.59597778 151.56890869]
[85.38829803 136.83110046]
[67.67697906 127.99797058]
[55.35439301 110.66660309]
[52.42047501 88.11524963]
[60.91090393 65.43320465]
[80.12861633 48.37229156]
[68.62680817 38.74376678]
[57.12500763 29.11523819]
[45.62320328 19.48671341]
[32.68759537 19.83869934]
[23.29834938 11.52840233]
[22.15334702 -0.55449021]
[10.85434246 -10.42021370]
[-0.44466215 -20.28593636]
[-11.74366665 -30.15165901]
[-27.78279305 -30.50664902]
[-37.39047623 -43.35468292]
[-33.19652557 -58.83984756]
[-18.41818237 -65.08325195]
[-4.39212418 -57.29548645]
[-1.87794387 -41.45066452]
[9.42106056 -31.58494186]
[20.72006607 -21.71921730]
[32.01906967 -11.85349464]
[49.37261963 -9.43392849]
[55.25173187 7.98490906]
[66.75353241 17.61343575]
[78.25534058 27.24196243]
[89.75714111 36.87048721]
[97.14016724 35.55105591]
[91.66254425 21.58697128]
[86.18492889 7.62288570]
[80.70730591 -6.34119940]
[72.03852844 -18.58261490]
[72.84625244 -33.56085205]
[82.78121185 -44.79902649]
[97.54733276 -47.43753433]
[110.75945282 -40.33543015]
[116.70439148 -26.56380272]
[112.81206512 -12.07869053]
[112.51011658 2.91827035]
[112.20817566 17.91523170]
[111.90622711 32.91219330]
[119.28925323 31.59276009]
[126.74416351 18.57645035]
[134.19906616 5.56014061]
[141.65397644 -7.45616913]
[136.08525085 -22.06860352]
[141.26084900 -36.82485962]
[154.73703003 -44.75748825]
[170.15075684 -42.12094116]
[180.22412109 -30.16011620]
[180.20079041 -14.52254963]
[170.09179688 -2.59182239]
[154.67028809 -0.00125865]
[147.21537781 13.01505089]
[139.76046753 26.03136063]
[132.30555725 39.04766846]
[136.49662781 45.26739120]
[148.93606567 36.88524628]
[161.37565613 28.50330925]
[169.75738525 40.94302750]
[157.31822205 49.32468796]
[144.87876892 57.70682907]
[149.06985474 63.92655182]
[163.93289185 61.90421677]
[178.79594421 59.88188171]
[193.65898132 57.85954666]
[208.52203369 55.83721161]
[223.38508606 53.81487656]
[234.20166016 41.96661758]
[250.19877625 43.17980957]
[259.10479736 56.52379608]
[254.08782959 71.76221466]
[238.99641418 77.20545197]
[225.40740967 68.67792511]
[210.54437256 70.70025635]
[195.68132019 72.72259521]
[180.81828308 74.74492645]
[165.95523071 76.76726532]
[151.09217834 78.78959656]
[151.15530396 104.96665192]
[139.52365112 126.29544067]
[120.62743378 138.35246277]
[100.12610626 139.62342834]
[97.33377838 154.36123657]
[94.54145813 169.09904480]
[98.57115936 171.74957275]
[101.97270966 175.26713562]
[104.55972290 179.50282288]
[106.18113708 184.26774597]
[106.72972107 189.34140015]
[106.14867401 194.48190308]
[104.43579102 199.43745422]
[104.74784851 214.43421936]
[105.05990601 229.43096924]
[105.37196350 244.42771912]
[105.68401337 259.42446899]
[105.99607086 274.42123413]
[106.30812836 289.41796875]
[106.62018585 304.41473389]
[106.93224335 319.41149902]
[121.58723450 323.00225830]
[134.81304932 330.26452637]
[145.70791626 340.70309448]
[153.52900696 353.60632324]
[157.74307251 368.09439087]
[158.06280518 383.17947388]
[154.46636963 397.83309937]
[147.19900513 411.05609131]
[136.75621033 421.94692993]
[123.84998322 429.76303101]
[109.36029053 433.97152710]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 35]
[21 34]
[24 31]
[25 30]
[36 124]
[37 123]
[38 122]
[43 66]
[44 65]
[45 64]
[46 63]
[49 61]
[50 60]
[51 59]
[52 58]
[81 95]
[82 94]
[83 93]
[84 92]
[102 118]
[103 117]
[104 116]
[105 115]
[106 114]
[107 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
