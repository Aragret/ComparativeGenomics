%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAACGCCGGGGGGGGGGCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGUCCUACUUCUCCUAUCUCxxxxxxxxxxUGCCUGAUCCUCCAAAUCACCACAGGACUAUUCCUAGCCAUGCACUACUCCCCCCCCCCCACCAGACGCC\
) } def
/len { sequence length } bind def

/coor [
[68.74446106 383.28466797]
[55.52426147 376.01220703]
[44.63745880 365.56518555]
[36.82632828 352.65594482]
[32.62344742 338.16464233]
[32.31537247 323.07928467]
[35.92311478 308.42846680]
[43.20068741 295.21109009]
[53.65189362 284.32830811]
[66.56415558 276.52215576]
[81.05709076 272.32489014]
[80.74504089 257.32812500]
[80.43298340 242.33137512]
[80.12092590 227.33462524]
[79.80886841 212.33787537]
[79.49681091 197.34111023]
[79.18475342 182.34436035]
[78.87270355 167.34761047]
[78.56064606 152.35086060]
[78.24858856 137.35409546]
[71.33261871 150.66459656]
[69.49625397 165.55177307]
[60.03633881 177.19264221]
[45.83949280 182.03511047]
[31.23776245 178.60153198]
[20.68674850 167.93963623]
[17.40600586 153.30281067]
[22.39662743 139.15736389]
[34.13576508 129.81965637]
[49.03993225 128.13879395]
[62.42165375 121.36166382]
[47.42895508 120.89362335]
[32.43626022 120.42557526]
[17.44356346 119.95753479]
[8.04237175 132.30245972]
[-6.82916260 136.73158264]
[-21.45263100 131.54180908]
[-30.20501137 118.72870636]
[-29.72083664 103.21918488]
[-20.18627739 90.97696686]
[-5.26757097 86.70944214]
[9.29873753 92.05754852]
[17.91160583 104.96483612]
[32.90430069 105.43288422]
[47.89699936 105.90092468]
[62.88969421 106.36896515]
[68.51526642 83.84464264]
[85.51370239 70.21343994]
[105.86992645 69.70632172]
[112.21705627 56.11537552]
[118.56418610 42.52442551]
[123.16974640 28.24896240]
[125.96207428 13.51115704]
[128.75439453 -1.22664893]
[131.54672241 -15.96445465]
[134.33905029 -30.70226097]
[120.05901337 -35.36155701]
[106.49206543 -41.80874252]
[93.86097717 -49.93794250]
[82.37316132 -59.61567307]
[72.21726227 -70.68301392]
[63.56005478 -82.95823669]
[56.54368591 -96.23976135]
[51.28337479 -110.30949402]
[47.86550522 -124.93640137]
[46.34619522 -139.88029480]
[46.75040054 -154.89579773]
[49.07147980 -169.73631287]
[53.27131653 -184.15815735]
[59.28094864 -197.92451477]
[67.00169373 -210.80932617]
[76.30676270 -222.60101318]
[87.04336548 -233.10595703]
[99.03519440 -242.15164185]
[112.08534241 -249.58952332]
[125.97949219 -255.29747009]
[140.48951721 -259.18176270]
[155.37712097 -261.17861938]
[170.39785767 -261.25524902]
[185.30505371 -259.41036987]
[199.85394287 -255.67428589]
[213.80560303 -250.10836792]
[226.93093872 -242.80398560]
[239.01443481 -233.88111877]
[249.85763550 -223.48625183]
[259.28250122 -211.79010010]
[267.13427734 -198.98471069]
[273.28405762 -185.28036499]
[277.63076782 -170.90211487]
[280.10311890 -156.08604431]
[280.66049194 -141.07546997]
[279.29370117 -126.11684418]
[276.02520752 -111.45583344]
[270.90872192 -97.33316803]
[264.02819824 -83.98075867]
[255.49665833 -71.61786652]
[245.45417786 -60.44749832]
[234.06568909 -50.65308380]
[221.51818848 -42.39545441]
[208.01770020 -35.81020737]
[193.78594971 -31.00547981]
[179.05661011 -28.06017113]
[164.07154846 -27.02264404]
[149.07685852 -27.90993690]
[146.28453064 -13.17213058]
[143.49220276 1.56567562]
[140.69987488 16.30348206]
[137.90756226 31.04128838]
[148.76177979 20.68823242]
[162.99562073 15.95560074]
[177.88813782 17.74808502]
[190.59246826 25.72303200]
[198.68008423 38.35595322]
[200.60491943 53.23194122]
[195.99903870 67.50730133]
[185.74291992 78.45316315]
[171.79708862 83.97711182]
[156.82745361 83.02318573]
[143.69560242 75.77375031]
[134.91180420 63.61459732]
[132.15513611 48.87155151]
[125.80800629 62.46250534]
[119.46087646 76.05345154]
[127.75753021 84.42636871]
[132.50378418 95.61102295]
[132.77861023 108.12085724]
[128.27577209 120.18357849]
[119.38455963 129.99218750]
[107.16918945 135.97465515]
[93.24533844 137.04203796]
[93.55739594 152.03880310]
[93.86945343 167.03555298]
[94.18151093 182.03230286]
[94.49356842 197.02905273]
[94.80562592 212.02581787]
[95.11767578 227.02256775]
[95.42973328 242.01931763]
[95.74179077 257.01608276]
[96.05384827 272.01281738]
[110.70883942 275.60360718]
[123.93464661 282.86584473]
[134.82951355 293.30444336]
[142.65061951 306.20767212]
[146.86468506 320.69573975]
[147.18440247 335.78082275]
[143.58798218 350.43441772]
[136.32061768 363.65744019]
[125.87781525 374.54827881]
[112.97158813 382.36437988]
[98.48189545 386.57284546]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[31 46]
[32 45]
[33 44]
[34 43]
[49 123]
[50 122]
[51 121]
[52 108]
[53 107]
[54 106]
[55 105]
[56 104]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
