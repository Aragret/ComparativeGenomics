%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCAUACGGGGGGGGGGUCCUUACACUAUUCCUCAUCACCCAACUAAAAAUAUUAAACACAAACUACxxxxxxxxxxCCAAUGAUAUGAAAAACCAUCGUUGUAUUUCAACUACAAGAACACCAAUGCCCCCCCCCCACCCCAAUAC\
) } def
/len { sequence length } bind def

/coor [
[70.81772614 363.30944824]
[56.97178650 357.29342651]
[45.26312637 347.76400757]
[36.56060028 335.42834473]
[31.50999832 321.20181274]
[30.48610687 306.14013672]
[33.56490707 291.36099243]
[40.51792908 277.96105957]
[50.82921219 266.93472290]
[63.73359299 259.10021973]
[78.27348328 255.03889465]
[78.27348328 240.03889465]
[78.27348328 225.03889465]
[78.27348328 210.03889465]
[78.27348328 195.03889465]
[78.27348328 180.03889465]
[78.27348328 165.03889465]
[78.27348328 150.03889465]
[78.27348328 135.03889465]
[78.27348328 120.03890228]
[64.51282501 126.00918579]
[49.51624680 125.68857574]
[36.02331543 119.13565826]
[26.49889946 107.54749298]
[22.68290710 93.04100800]
[25.27243996 78.26622009]
[33.79444504 65.92217255]
[46.69213486 58.26386642]
[61.60936737 56.69031143]
[75.82109070 61.48895645]
[86.73111725 71.78319550]
[92.34626770 85.69165039]
[93.28189850 70.72086334]
[94.21752930 55.75006866]
[78.42806244 46.02013779]
[69.80242157 29.72069740]
[70.62841797 11.40382671]
[80.57093048 -3.87607718]
[73.11602020 -16.89238739]
[65.66110992 -29.90869522]
[58.20619965 -42.92500687]
[44.25658417 -37.34339523]
[29.66589737 -33.75759125]
[14.71815109 -32.23739243]
[-0.29569256 -32.81238556]
[-15.08338547 -35.47138596]
[-29.35708046 -40.16263199]
[-42.83893585 -46.79480362]
[-55.26652145 -55.23881149]
[-66.39793396 -65.33028412]
[-76.01649475 -76.87278748]
[-83.93497467 -89.64164734]
[-89.99924469 -103.38831329]
[-94.09125519 -117.84519958]
[-96.13135529 -132.73089600]
[-96.07983398 -147.75566101]
[-93.93769836 -162.62702942]
[-89.74663544 -177.05551147]
[-83.58824158 -190.76025391]
[-75.58237457 -203.47451782]
[-65.88488770 -214.95079041]
[-54.68452835 -224.96568298]
[-42.19932556 -233.32426453]
[-28.67230415 -239.86381531]
[-14.36677265 -244.45706177]
[0.43880716 -247.01458740]
[15.45624161 -247.48661804]
[30.39321136 -245.86393738]
[44.95896530 -242.17816162]
[58.86997223 -236.50100708]
[71.85545349 -228.94300842]
[83.66264343 -219.65127563]
[94.06171417 -208.80667114]
[102.85024261 -196.62028503]
[109.85715485 -183.32933044]
[114.94606018 -169.19253540]
[118.01789856 -154.48504639]
[119.01288605 -139.49317932]
[117.91164398 -124.50874329]
[114.73561096 -109.82341003]
[109.54661560 -95.72304535]
[102.44565582 -82.48210144]
[93.57096100 -70.35832977]
[83.09527588 -59.58771515]
[71.22251129 -50.37991714]
[78.67742157 -37.36360550]
[86.13233185 -24.34729767]
[93.58724213 -11.33098793]
[113.10184479 -11.63438511]
[129.67405701 -1.32547271]
[142.76721191 -8.64457798]
[155.86036682 -15.96368408]
[168.95352173 -23.28278923]
[182.04667664 -30.60189438]
[194.90507507 -38.32598114]
[207.51620483 -46.44752121]
[220.12733459 -54.56906509]
[227.14282227 -69.39185333]
[243.50727844 -70.45780182]
[252.38638306 -56.67034912]
[244.64604187 -42.21284866]
[228.24887085 -41.95793533]
[215.63775635 -33.83639526]
[203.02662659 -25.71485138]
[201.93490601 -22.29788971]
[199.09638977 -19.25740242]
[194.71487427 -17.42584229]
[189.36578369 -17.50874138]
[176.27262878 -10.18963528]
[163.17947388 -2.87052941]
[150.08631897 4.44857597]
[136.99316406 11.76768208]
[138.44580078 19.01782990]
[138.32601929 26.43254852]
[136.63017273 33.67375183]
[133.42671204 40.40933609]
[128.85339355 46.32841110]
[123.11146545 51.15564346]
[116.45675659 54.66405487]
[109.18831635 56.68569946]
[108.25269318 71.65648651]
[107.31706238 86.62728119]
[114.22406006 99.94243622]
[127.00141907 107.79986572]
[143.40034485 107.71360016]
[151.43977356 122.00694275]
[142.84942627 135.97612000]
[126.46632385 135.25085449]
[119.14398956 120.57721710]
[106.36663818 112.71979523]
[93.27348328 120.03890228]
[93.27348328 135.03889465]
[93.27348328 150.03889465]
[93.27348328 165.03889465]
[93.27348328 180.03889465]
[93.27348328 195.03889465]
[93.27348328 210.03889465]
[93.27348328 225.03889465]
[93.27348328 240.03889465]
[93.27348328 255.03889465]
[107.81336975 259.10021973]
[120.71775055 266.93472290]
[131.02903748 277.96105957]
[137.98205566 291.36099243]
[141.06085205 306.14013672]
[140.03695679 321.20181274]
[134.98635864 335.42834473]
[126.28383636 347.76400757]
[114.57517242 357.29342651]
[100.72923279 363.30944824]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 122]
[33 121]
[34 120]
[38 88]
[39 87]
[40 86]
[41 85]
[90 112]
[91 111]
[92 110]
[93 109]
[94 108]
[95 104]
[96 103]
[97 102]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
