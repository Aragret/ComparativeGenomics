%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUAAAACUGGGGGGGGGGUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACCCAUGGCCAACxxxxxxxxxxAACUCAAACUACGAACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGCCCCCCCCCCACUUCAAACU\
) } def
/len { sequence length } bind def

/coor [
[87.92623138 347.14221191]
[74.08029938 341.12619019]
[62.37163544 331.59677124]
[53.66910934 319.26110840]
[48.61850739 305.03457642]
[47.59461594 289.97290039]
[50.67341614 275.19372559]
[57.62643814 261.79382324]
[67.93772125 250.76747131]
[80.84210205 242.93296814]
[95.38198853 238.87165833]
[95.38198853 223.87165833]
[95.38198853 208.87165833]
[95.38198853 193.87165833]
[95.38198853 178.87165833]
[95.38198853 163.87165833]
[95.38198853 148.87165833]
[95.38198853 133.87165833]
[95.38198853 118.87165833]
[84.39632416 108.65817261]
[69.43607330 109.74948883]
[54.47582626 110.84079742]
[39.51557922 111.93210602]
[31.12116241 115.69848633]
[24.23332214 112.88719940]
[9.25360775 113.66704559]
[0.01952407 122.73267365]
[-12.51541996 123.03952026]
[-21.58121872 114.96990967]
[-36.57391357 115.43795013]
[-51.56661224 115.90599823]
[-66.55931091 116.37403870]
[-81.55200195 116.84207916]
[-91.08216095 129.24006653]
[-106.36302185 132.56111145]
[-120.17942810 125.23711395]
[-126.00769806 110.72624207]
[-121.09589386 95.88008881]
[-107.76322937 87.70855713]
[-92.30497742 90.06998444]
[-82.02004242 101.84938049]
[-67.02735138 101.38134003]
[-52.03465271 100.91329956]
[-37.04195786 100.44525909]
[-22.04926109 99.97721863]
[-7.69243050 89.93324280]
[8.47376251 98.68733215]
[23.45347786 97.90748596]
[38.42426682 96.97185516]
[53.38451767 95.88054657]
[68.34476471 94.78923798]
[83.30501556 93.69792938]
[86.33652496 86.83789825]
[92.39953613 73.11784363]
[95.43103790 66.25782013]
[86.16609192 54.46117783]
[76.90114594 42.66453934]
[61.48741531 37.06551743]
[58.89627457 20.87236977]
[71.79326630 10.74321842]
[86.91106415 17.09806633]
[88.69778442 33.39958954]
[97.96273041 45.19623184]
[107.22768402 56.99287033]
[122.09072876 59.01520538]
[134.17071533 50.12285614]
[146.25070190 41.23050690]
[138.59837341 28.31460953]
[132.27008057 14.70096207]
[127.32874298 0.52486271]
[123.82346344 -14.07279491]
[121.78907776 -28.94692993]
[121.24581146 -43.94971085]
[122.19905090 -58.93203354]
[124.63933563 -73.74498749]
[128.54240417 -88.24135590]
[133.86947632 -102.27705383]
[140.56759644 -115.71260071]
[148.57019043 -128.41445923]
[157.79774475 -140.25637817]
[168.15852356 -151.12066650]
[179.54956055 -160.89935303]
[191.85765076 -169.49525452]
[204.96046448 -176.82293701]
[218.72778320 -182.80955505]
[233.02276611 -187.39562988]
[247.70333862 -190.53558350]
[262.62359619 -192.19819641]
[277.63525391 -192.36694336]
[292.58914185 -191.04016113]
[307.33657837 -188.23101807]
[321.73104858 -183.96745300]
[335.62945557 -178.29182434]
[348.89370728 -171.26055908]
[361.39190674 -162.94351196]
[372.99990845 -153.42335510]
[383.60229492 -142.79472351]
[393.09368896 -131.16322327]
[401.37982178 -118.64448547]
[408.37826538 -105.36290741]
[414.01950073 -91.45050049]
[418.24746704 -77.04553986]
[421.02014160 -62.29118729]
[422.30993652 -47.33407974]
[422.10406494 -32.32287598]
[420.40457153 -17.40676689]
[417.22833252 -2.73400021]
[412.60690308 11.54959679]
[406.58627319 25.30206490]
[399.22619629 38.38671875]
[390.59988403 50.67351532]
[380.79306030 62.04034042]
[369.90319824 72.37422180]
[358.03848267 81.57245636]
[345.31689453 89.54362488]
[331.86480713 96.20849609]
[317.81597900 101.50083923]
[303.30999756 105.36804962]
[288.49105835 107.77169800]
[273.50643921 108.68788910]
[258.50503540 108.10752869]
[243.63598633 106.03636932]
[229.04704285 102.49499512]
[214.88319397 97.51862335]
[201.28524780 91.15669250]
[188.38830566 83.47243500]
[176.32058716 74.54223633]
[165.20199585 64.45483398]
[155.14305115 53.31049347]
[143.06306458 62.20284271]
[130.98307800 71.09519196]
[110.38198853 118.87165833]
[110.38198853 133.87165833]
[110.38198853 148.87165833]
[110.38198853 163.87165833]
[110.38198853 178.87165833]
[110.38198853 193.87165833]
[110.38198853 208.87165833]
[110.38198853 223.87165833]
[110.38198853 238.87165833]
[124.92187500 242.93296814]
[137.82626343 250.76747131]
[148.13754272 261.79382324]
[155.09056091 275.19372559]
[158.16935730 289.97290039]
[157.14547729 305.03457642]
[152.09486389 319.26110840]
[143.39234924 331.59677124]
[131.68368530 341.12619019]
[117.83774567 347.14221191]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 52]
[21 51]
[22 50]
[23 49]
[25 48]
[26 47]
[29 45]
[30 44]
[31 43]
[32 42]
[33 41]
[55 64]
[56 63]
[57 62]
[65 131]
[66 130]
[67 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
