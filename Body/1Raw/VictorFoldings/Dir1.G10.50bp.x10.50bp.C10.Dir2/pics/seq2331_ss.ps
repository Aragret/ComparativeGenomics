%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGUAGGCCUAGGGGGGGGGGAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAxxxxxxxxxxAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCCCCCCCCCCCAUACUAGGCCUA\
) } def
/len { sequence length } bind def

/coor [
[32.72051620 536.35369873]
[18.44874573 531.54425049]
[5.54476213 523.77886963]
[-5.38789272 513.42071533]
[-13.83787918 500.95428467]
[-19.40997505 486.96264648]
[-21.84356499 472.10021973]
[-21.02482414 457.06216431]
[-16.99204636 442.55178833]
[-9.93385315 429.24780273]
[-0.18036821 417.77246094]
[11.81221962 408.66247559]
[25.48299599 402.34393311]
[40.19255447 399.11236572]
[40.19255447 384.11236572]
[40.19255447 369.11236572]
[40.19255447 354.11236572]
[40.19255447 339.11236572]
[40.19255447 324.11236572]
[40.19255447 309.11236572]
[40.19255447 294.11236572]
[40.19255447 279.11236572]
[40.19255447 264.11236572]
[40.19255447 249.11236572]
[32.34371567 261.89498901]
[20.82581711 271.50427246]
[6.84349298 276.93515015]
[-8.14088058 277.61965942]
[-22.56012154 273.48620605]
[-34.90615463 264.96707153]
[-43.88773346 252.95329285]
[-48.56550217 238.70132446]
[-48.45021820 223.70176697]
[-43.55393982 209.52339172]
[-34.38875580 197.64906311]
[-21.91323662 189.32072449]
[-7.43216467 185.40937805]
[7.53991699 186.32412720]
[21.43711281 191.96929932]
[32.80594635 201.75447083]
[40.45737839 214.65625000]
[43.59110641 229.32406616]
[38.66107178 218.23937988]
[42.75818634 206.39483643]
[54.19310379 200.34918213]
[59.47978210 186.31170654]
[64.76645660 172.27421570]
[70.05313110 158.23672485]
[75.33981323 144.19923401]
[80.62648773 130.16175842]
[65.82395172 110.81951904]
[66.79844666 86.48256683]
[83.10009766 68.38580322]
[78.95272064 53.97055817]
[67.70140839 42.84767151]
[71.61808777 28.47725487]
[67.47070312 14.06201267]
[63.32332611 -0.35323015]
[48.28231812 0.49285281]
[33.43023682 -2.02973032]
[19.51205444 -7.79444742]
[7.22590351 -16.51214409]
[-2.81194973 -27.74554253]
[-10.09801006 -40.93117905]
[-14.26681328 -55.40767288]
[-15.10925102 -70.44888306]
[-12.58306980 -85.30035400]
[-6.81498003 -99.21714020]
[1.90569246 -111.50117493]
[13.14152241 -121.53630829]
[26.32892609 -128.81916809]
[40.80642700 -132.98446655]
[55.84784317 -133.82325745]
[70.69869995 -131.29348755]
[84.61408234 -125.52201843]
[96.89601135 -116.79837036]
[106.92842102 -105.56011200]
[114.20809174 -92.37094116]
[118.36987305 -77.89243317]
[119.20502472 -62.85081482]
[116.67164612 -48.00056839]
[110.89681244 -34.08658218]
[102.17018890 -21.80677223]
[90.92949677 -11.77708626]
[77.73856354 -4.50061226]
[81.88594818 9.91463089]
[86.03333282 24.32987404]
[96.98799133 34.42168427]
[93.36795807 49.82317734]
[97.51534271 64.23841858]
[102.69106293 60.74534607]
[108.77487183 58.06239319]
[115.63328552 56.37157440]
[125.75175476 45.29834366]
[135.87023926 34.22511292]
[142.09126282 18.45377159]
[158.96839905 20.06573486]
[162.09149170 36.72954559]
[146.94346619 44.34358978]
[136.82499695 55.41682053]
[126.70651245 66.49005127]
[130.56430054 72.92181396]
[138.27986145 85.78532410]
[142.13763428 92.21708679]
[156.67085266 88.50418091]
[171.20407104 84.79128265]
[175.27482605 69.98167419]
[186.21627808 59.20298004]
[201.08523560 55.35461426]
[215.88200378 59.47177124]
[226.62634277 70.44695282]
[230.42808533 85.32789612]
[226.26457214 100.11169434]
[215.25576782 110.82158661]
[200.36297607 114.57666016]
[185.59230042 110.36682129]
[174.91697693 99.32450104]
[160.38375854 103.03739929]
[145.85054016 106.75030518]
[140.92565918 117.71523285]
[133.56080627 126.63518524]
[124.46357727 133.02178955]
[114.42150116 136.60861206]
[104.23686981 137.35780334]
[94.66397858 135.44842529]
[89.37729645 149.48591614]
[84.09062195 163.52340698]
[78.80394745 177.56088257]
[73.51726532 191.59837341]
[68.23059082 205.63586426]
[71.66593933 223.70037842]
[57.73156357 234.32881165]
[55.19255447 249.11236572]
[55.19255447 264.11236572]
[55.19255447 279.11236572]
[55.19255447 294.11236572]
[55.19255447 309.11236572]
[55.19255447 324.11236572]
[55.19255447 339.11236572]
[55.19255447 354.11236572]
[55.19255447 369.11236572]
[55.19255447 384.11236572]
[55.19255447 399.11236572]
[69.90211487 402.34393311]
[83.57289124 408.66247559]
[95.56547546 417.77246094]
[105.31896210 429.24780273]
[112.37715149 442.55178833]
[116.40992737 457.06216431]
[117.22866821 472.10021973]
[114.79508209 486.96264648]
[109.22298431 500.95428467]
[100.77300262 513.42071533]
[89.84034729 523.77886963]
[76.93636322 531.54425049]
[62.66459274 536.35369873]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[42 132]
[45 130]
[46 129]
[47 128]
[48 127]
[49 126]
[50 125]
[53 90]
[54 89]
[56 87]
[57 86]
[58 85]
[93 101]
[94 100]
[95 99]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
