%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAGUAGGCGGGGGGGGGGCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACCCACUACCxxxxxxxxxxGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCCCCCCCCCCCAUAGGAGGC\
) } def
/len { sequence length } bind def

/coor [
[117.45552826 550.92163086]
[107.82214355 539.25744629]
[102.26656342 525.18652344]
[101.33307648 510.08740234]
[105.11312103 495.43930054]
[113.23637390 482.67733765]
[124.90700531 473.05175781]
[138.98164368 467.50561523]
[138.04602051 452.53482056]
[134.46667480 446.01303101]
[137.24995422 437.24346924]
[136.62597656 422.25643921]
[136.00199890 407.26943970]
[135.37802124 392.28240967]
[134.75404358 377.29541016]
[134.13006592 362.30838013]
[133.50608826 347.32135010]
[132.88211060 332.33435059]
[131.94647217 317.36355591]
[130.69960022 302.41546631]
[129.45272827 287.46737671]
[125.73847961 281.02145386]
[128.33871460 272.19589233]
[127.40308380 257.22509766]
[126.46746063 242.25430298]
[117.95135498 230.03443909]
[124.81280518 215.77851868]
[123.87717438 200.80772400]
[122.94154358 185.83692932]
[122.00591278 170.86613464]
[121.07028961 155.89535522]
[121.10073853 170.89532471]
[113.91217041 184.06059265]
[101.27713013 192.14488220]
[86.31116486 193.15476990]
[72.70457458 186.84123230]
[63.81246948 174.76106262]
[61.82746124 159.89299011]
[67.23900604 145.90316772]
[78.71273804 136.24121094]
[93.41946411 133.28955078]
[107.73176575 137.77536011]
[93.71504974 132.43385315]
[79.69833374 127.09233856]
[63.60212326 130.22984314]
[53.04244232 117.68292236]
[58.88219452 102.35877991]
[75.11393738 100.02157593]
[85.03984833 113.07563019]
[99.05656433 118.41714478]
[113.07327271 123.75865173]
[86.45956421 122.36579132]
[74.83310699 99.47105408]
[88.34801483 78.79018402]
[85.55569458 64.05238342]
[82.76336670 49.31457520]
[79.81788635 34.60661316]
[76.71956635 19.93008804]
[73.62123871 5.25356293]
[70.52291870 -9.42296219]
[55.46173477 -10.57941914]
[41.33693314 -15.93354797]
[29.29355240 -25.05131340]
[20.30789185 -37.19357681]
[15.10838032 -51.37602234]
[14.11651897 -66.44894409]
[17.41271400 -81.19043732]
[24.72975540 -94.40549469]
[35.47448730 -105.02281189]
[48.77587891 -112.18169403]
[63.55564499 -115.30181122]
[78.61566162 -114.13022614]
[92.73507690 -108.76190948]
[104.76929474 -99.63204956]
[113.74275208 -87.48076630]
[118.92800903 -73.29310608]
[119.90473175 -58.21919632]
[116.59372711 -43.48101807]
[109.26341248 -30.27332306]
[98.50801849 -19.66680527]
[85.19944763 -12.52128410]
[88.29776764 2.15524125]
[91.39608765 16.83176613]
[94.49440765 31.50829315]
[98.98232269 37.44161224]
[97.50117493 46.52225113]
[100.29349518 61.26005554]
[103.08582306 75.99786377]
[120.33649445 84.35383606]
[126.88428497 103.55238342]
[138.18328857 93.68666077]
[135.82832336 78.44010162]
[142.11099243 64.34997559]
[155.02651978 55.91239166]
[170.45359802 55.81975937]
[183.46951294 64.10163116]
[189.92094421 78.11529541]
[187.74923706 93.38903809]
[177.64739990 105.04906464]
[162.83886719 109.37471008]
[148.04901123 104.98566437]
[136.75001526 114.85138702]
[143.09713745 128.44233704]
[157.91490173 126.11123657]
[172.73265076 123.78012848]
[187.55041504 121.44902802]
[202.36816406 119.11792755]
[214.77641296 108.39562225]
[230.17535400 114.03517151]
[232.72389221 130.23507690]
[219.80030823 140.33027649]
[204.69927979 133.93568420]
[189.88151550 136.26678467]
[175.06375122 138.59788513]
[160.24600220 140.92900085]
[145.42823792 143.26010132]
[136.04107666 154.95971680]
[136.97671509 169.93051147]
[137.91233826 184.90130615]
[138.84796143 199.87210083]
[139.78359985 214.84288025]
[148.36662292 228.13357544]
[141.43824768 241.31867981]
[142.37387085 256.28945923]
[143.30950928 271.26025391]
[144.40081787 286.22052002]
[145.64768982 301.16860962]
[146.89456177 316.11666870]
[150.39982605 321.84561157]
[150.43115234 327.61019897]
[147.86912537 331.71035767]
[148.49310303 346.69738770]
[149.11708069 361.68441772]
[149.74105835 376.67141724]
[150.36503601 391.65844727]
[150.98901367 406.64544678]
[151.61299133 421.63247681]
[152.23696899 436.61947632]
[153.01681519 451.59921265]
[153.95243835 466.56997681]
[168.60809326 470.32058716]
[181.38636780 478.41818237]
[191.03536987 490.06942749]
[196.60980225 504.13287354]
[197.56353760 519.23077393]
[193.80311584 533.88391113]
[185.69697571 546.65673828]
[174.03924561 556.29791260]
[159.97206116 561.86291504]
[144.87355042 562.80657959]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 140]
[9 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 128]
[20 127]
[21 126]
[23 125]
[24 124]
[25 123]
[27 121]
[28 120]
[29 119]
[30 118]
[31 117]
[42 51]
[43 50]
[44 49]
[54 88]
[55 87]
[56 86]
[57 84]
[58 83]
[59 82]
[60 81]
[90 102]
[91 101]
[103 116]
[104 115]
[105 114]
[106 113]
[107 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
