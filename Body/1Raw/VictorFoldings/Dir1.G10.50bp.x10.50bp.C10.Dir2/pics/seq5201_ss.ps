%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUAGCAGGGGGGGGGGGGCAGUUGAGGUGGAUUAAACCAAACCCAGCUACGCAAAAUCUUAGCAUACxxxxxxxxxxUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCUCCCCCCCCCCAUCAUAGAAG\
) } def
/len { sequence length } bind def

/coor [
[82.86487579 422.14538574]
[71.55291748 412.16030884]
[63.21154022 399.58715820]
[58.40948105 385.28323364]
[57.47414780 370.22375488]
[60.46931458 355.43554688]
[67.19076538 341.92684937]
[77.18021393 330.61874390]
[89.75657654 322.28222656]
[104.06237030 317.48568726]
[103.12673950 302.51489258]
[102.19110870 287.54409790]
[101.25548553 272.57333374]
[100.31985474 257.60253906]
[99.38422394 242.63174438]
[98.44860077 227.66094971]
[97.51296997 212.69015503]
[96.42166138 197.72990417]
[95.17478180 182.78181458]
[93.92790985 167.83372498]
[92.68103790 152.88565063]
[90.49843597 167.72599792]
[78.92781830 177.27172852]
[63.94311905 176.59432983]
[53.28097534 166.04356384]
[52.44627380 151.06681824]
[61.86996841 139.39659119]
[76.68859863 137.05871582]
[61.72834778 135.96739197]
[47.40182877 142.68017578]
[35.27120209 134.03741455]
[20.31095505 132.94610596]
[5.35070610 131.85479736]
[-10.99410629 140.27067566]
[-25.13887787 129.93020630]
[-40.11859131 129.15036011]
[-52.95170975 138.77795410]
[-68.44335938 134.60803223]
[-74.70967865 119.83938599]
[-66.94367981 105.80126953]
[-51.10277176 103.26251221]
[-39.33874512 114.17064667]
[-24.35903168 114.95048523]
[-15.12731647 107.07122803]
[-2.60146952 107.63878632]
[6.44201708 116.89455414]
[21.40226555 117.98586273]
[36.36251450 119.07717133]
[49.61897659 112.28633881]
[62.81966019 121.00714874]
[77.77990723 122.09846497]
[73.24581146 93.00431061]
[93.45351410 76.94200897]
[94.07749176 61.95499039]
[94.70146942 46.96797562]
[90.09590149 32.69251251]
[80.83095551 20.89587402]
[65.41722107 15.29685116]
[62.82608414 -0.89629596]
[75.72307587 -11.02544689]
[90.84087372 -4.67059994]
[92.62759399 11.63092422]
[101.89253998 23.42756462]
[116.50208282 20.02442741]
[131.11032104 16.62160873]
[134.20864868 1.94508243]
[137.30697632 -12.73144341]
[140.40528870 -27.40796852]
[126.82527161 -33.95369720]
[115.20681000 -43.55967331]
[106.22538757 -55.66741562]
[100.40316772 -69.57299805]
[98.07864380 -84.46796417]
[99.38697052 -99.48634338]
[104.25207520 -113.75498199]
[112.39111328 -126.44432831]
[123.33088684 -136.81663513]
[136.43537903 -144.26887512]
[150.94270325 -148.36778259]
[166.00941467 -148.87504578]
[180.75958252 -145.76116943]
[194.33563232 -139.20721436]
[205.94825745 -129.59419250]
[214.92234802 -117.48101044]
[220.73614502 -103.57190704]
[223.05163574 -88.67552948]
[221.73419189 -73.65795135]
[216.86044312 -59.39225769]
[208.71371460 -46.70784760]
[197.76765442 -36.34217453]
[184.65864563 -28.89788246]
[170.14884949 -24.80777550]
[155.08181763 -24.30964661]
[151.98348999 -9.63312149]
[148.88517761 5.04340410]
[145.78684998 19.71993065]
[130.76242065 45.20392609]
[109.68848419 47.59194946]
[109.06450653 62.57896805]
[108.44052887 77.56598663]
[127.43457031 96.52567291]
[117.99864197 125.65391541]
[132.99783325 125.80995178]
[147.99700928 125.96598816]
[162.99620056 126.12202454]
[177.99539185 126.27806091]
[192.99458313 126.43409729]
[207.99458313 126.43409729]
[222.99377441 126.27806091]
[237.99296570 126.12202454]
[252.99214172 125.96598816]
[268.76751709 119.75521088]
[279.10263062 133.19476318]
[269.04934692 146.84642029]
[253.14817810 140.96517944]
[238.14900208 141.12121582]
[223.14981079 141.27725220]
[208.15061951 141.43328857]
[201.45153809 144.66873169]
[192.83854675 141.43328857]
[177.83935547 141.27725220]
[162.84016418 141.12121582]
[147.84097290 140.96517944]
[132.84179688 140.80914307]
[117.84260559 140.65310669]
[107.62911987 151.63876343]
[108.87599945 166.58685303]
[110.12287140 181.53494263]
[111.36974335 196.48303223]
[115.22324371 204.83781433]
[112.48376465 211.75453186]
[113.41938782 226.72531128]
[114.35501862 241.69610596]
[115.29064941 256.66690063]
[116.22627258 271.63769531]
[117.16190338 286.60848999]
[118.09753418 301.57928467]
[119.03315735 316.55007935]
[133.82484436 319.52810669]
[147.34129333 326.23388672]
[158.66096497 336.21023560]
[167.01205444 348.77694702]
[171.82514954 363.07717896]
[172.77210999 378.13592529]
[169.78836060 392.92645264]
[163.07734680 406.44030762]
[153.09663391 417.75613403]
[140.52671814 426.10235596]
[126.22463226 430.90994263]
[111.16552734 431.85107422]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 138]
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 129]
[19 128]
[20 127]
[21 126]
[28 51]
[29 50]
[31 48]
[32 47]
[33 46]
[35 43]
[36 42]
[53 100]
[54 99]
[55 98]
[56 63]
[57 62]
[65 96]
[66 95]
[67 94]
[68 93]
[102 125]
[103 124]
[104 123]
[105 122]
[106 121]
[107 120]
[108 118]
[109 117]
[110 116]
[111 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
