%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCACCCUUAGGGGGGGGGGCUAACAUUAACGAAAAUAACCCCACCCUACUAAACCCCAUUAAACGCCUGxxxxxxxxxxUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACAAACCCCCCCCCCCCUACCCACCCUUA\
) } def
/len { sequence length } bind def

/coor [
[73.50226593 163.96089172]
[60.37293243 156.76989746]
[49.09625626 146.92477417]
[40.19944763 134.88580322]
[34.09845734 121.21584320]
[31.07851982 106.55399323]
[31.28082275 91.58573151]
[34.69590759 77.01085663]
[41.16411209 63.51077271]
[50.38303375 51.71665192]
[61.92166519 42.17988586]
[75.24054718 35.34634781]
[89.71698761 31.53552055]
[89.10910797 16.54784393]
[88.50122070 1.56016552]
[87.89334106 -13.42751217]
[87.28545380 -28.41518974]
[86.67757416 -43.40286636]
[86.06968689 -58.39054489]
[85.46180725 -73.37821960]
[84.85391998 -88.36589813]
[84.24604034 -103.35357666]
[69.24398041 -103.60226440]
[54.28059769 -104.70700073]
[39.40467834 -106.66417694]
[24.66475677 -109.46741486]
[10.10890865 -113.10756683]
[-4.21538782 -117.57276154]
[-18.26140976 -122.84842682]
[-31.98334312 -128.91735840]
[-45.33642578 -135.75978088]
[-58.27710724 -143.35334778]
[-70.76317596 -151.67329407]
[-82.75389862 -160.69248962]
[-94.21017456 -170.38151550]
[-105.09462738 -180.70877075]
[-115.37174988 -191.64056396]
[-125.00803375 -203.14123535]
[-133.97204590 -215.17327881]
[-142.23452759 -227.69743347]
[-149.76855469 -240.67286682]
[-156.54954529 -254.05725098]
[-162.55535889 -267.80691528]
[-167.76643372 -281.87704468]
[-172.16577148 -296.22171021]
[-175.73899841 -310.79412842]
[-178.47447205 -325.54678345]
[-180.36328125 -340.43151855]
[-181.39924622 -355.39984131]
[-181.57899475 -370.40286255]
[-180.90194702 -385.39169312]
[-179.37031555 -400.31744385]
[-176.98907471 -415.13137817]
[-173.76600647 -429.78521729]
[-169.71162415 -444.23117065]
[-164.83915710 -458.42211914]
[-159.16448975 -472.31173706]
[-152.70611572 -485.85473633]
[-145.48513794 -499.00695801]
[-137.52508545 -511.72546387]
[-128.85192871 -523.96881104]
[-119.49394989 -535.69708252]
[-109.48168945 -546.87194824]
[-98.84778595 -557.45703125]
[-87.62693787 -567.41772461]
[-75.85574341 -576.72161865]
[-63.57260132 -585.33837891]
[-50.81756973 -593.23980713]
[-37.63225555 -600.40014648]
[-24.05966759 -606.79614258]
[-10.14407635 -612.40679932]
[4.06912804 -617.21392822]
[18.53358459 -621.20178223]
[33.20211411 -624.35736084]
[48.02686691 -626.67034912]
[62.95949173 -628.13330078]
[77.95127869 -628.74133301]
[92.95333099 -628.49255371]
[107.91670990 -627.38769531]
[122.79261017 -625.43035889]
[137.53251648 -622.62701416]
[152.08833313 -618.98675537]
[166.41259766 -614.52148438]
[180.45857239 -609.24566650]
[194.18046570 -603.17663574]
[207.53349304 -596.33410645]
[220.47410583 -588.74047852]
[232.96011353 -580.42041016]
[244.95075989 -571.40112305]
[256.40695190 -561.71197510]
[267.29132080 -551.38464355]
[277.56838989 -540.45281982]
[287.20455933 -528.95202637]
[296.16848755 -516.91992188]
[304.43087769 -504.39569092]
[311.96481323 -491.42019653]
[318.74566650 -478.03576660]
[324.75140381 -464.28604126]
[329.96234131 -450.21591187]
[334.36157227 -435.87121582]
[337.93469238 -421.29876709]
[340.67004395 -406.54608154]
[342.55874634 -391.66131592]
[343.59457397 -376.69299316]
[343.77423096 -361.68997192]
[343.09704590 -346.70114136]
[341.56530762 -331.77542114]
[339.18395996 -316.96148682]
[335.96078491 -302.30764771]
[331.90628052 -287.86175537]
[327.03369141 -273.67086792]
[321.35891724 -259.78128052]
[314.90045166 -246.23832703]
[307.67935181 -233.08616638]
[299.71920776 -220.36770630]
[291.04595947 -208.12440491]
[281.68786621 -196.39624023]
[271.67553711 -185.22143555]
[261.04153442 -174.63645935]
[249.82061768 -164.67581177]
[238.04936218 -155.37200928]
[225.76614380 -146.75540161]
[213.01104736 -138.85406494]
[199.82568359 -131.69380188]
[186.25303650 -125.29795074]
[172.33740234 -119.68737793]
[158.12416077 -114.88037872]
[143.65968323 -110.89264679]
[128.99111938 -107.73717499]
[114.16635132 -105.42427063]
[99.23371124 -103.96146393]
[99.84159851 -88.97378540]
[100.44947815 -73.98610687]
[101.05736542 -58.99842834]
[101.66525269 -44.01074982]
[102.27313232 -29.02307320]
[102.88101959 -14.03539562]
[103.48889923 0.95228183]
[104.09678650 15.93995953]
[104.70466614 30.92763710]
[119.44217682 33.55357742]
[133.27072144 39.28604889]
[145.54379272 47.85703659]
[155.68756104 58.86582947]
[163.22782898 71.79774475]
[167.81202698 86.04817963]
[169.22587585 100.95088959]
[167.40322876 115.80915070]
[162.42933655 129.92829895]
[154.53672791 142.64822388]
[144.09439087 153.37423706]
[131.59054565 161.60488892]
[117.60976410 166.95536804]
[102.80567932 169.17552185]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
