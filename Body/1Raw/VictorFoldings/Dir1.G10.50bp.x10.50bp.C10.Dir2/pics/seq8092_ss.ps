%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAUAUUAAACGGGGGGGGGGACAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAxxxxxxxxxxUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACCCCCCCCCCCAUAAAUAUUAUAC\
) } def
/len { sequence length } bind def

/coor [
[70.48233032 436.33306885]
[56.60820007 430.48483276]
[44.25339508 421.87945557]
[33.95801926 410.89312744]
[26.17214203 398.00616455]
[21.23612976 383.78192139]
[19.36576080 368.84219360]
[20.64280128 353.84008789]
[25.01142502 339.43145752]
[32.28065109 326.24615479]
[42.13270569 314.86062622]
[54.13689423 305.77255249]
[67.76844788 299.37924194]
[82.43145752 295.96017456]
[82.13132477 280.96316528]
[81.83119202 265.96618652]
[81.53105927 250.96917725]
[81.23092651 235.97218323]
[80.93079376 220.97518921]
[80.63066101 205.97819519]
[80.33052826 190.98118591]
[80.03039551 175.98419189]
[79.73026276 160.98719788]
[83.90041351 94.89626312]
[72.70883179 104.89944458]
[60.65396881 113.84346008]
[47.83572006 121.65420532]
[34.36030197 128.26695251]
[20.33938408 133.62690735]
[5.88914585 137.68965149]
[-8.87067032 140.42150879]
[-23.81775665 141.79985046]
[-38.82825470 141.81326294]
[-53.77778244 140.46163940]
[-68.54245758 137.75614929]
[-82.99993134 133.71925354]
[-97.03041077 128.38436890]
[-110.51761627 121.79570770]
[-123.34980774 114.00788116]
[-135.42063904 105.08541870]
[-146.63008118 95.10225677]
[-156.88525391 84.14111328]
[-166.10118103 72.29282379]
[-174.20149231 59.65556717]
[-181.11904907 46.33406067]
[-186.79655457 32.43869400]
[-191.18695068 18.08461380]
[-194.25386047 3.39075947]
[-195.97186279 -11.52110577]
[-196.32672119 -26.52741432]
[-195.31550598 -41.50381851]
[-192.94657898 -56.32621765]
[-189.23957825 -70.87178040]
[-184.22523499 -85.01998138]
[-177.94508362 -98.65357971]
[-170.45118713 -111.65959930]
[-161.80560303 -123.93026733]
[-152.08001709 -135.36390686]
[-141.35498047 -145.86576843]
[-129.71940613 -155.34881592]
[-117.26967621 -163.73449707]
[-104.10897827 -170.95330811]
[-90.34635162 -176.94541931]
[-76.09585571 -181.66120911]
[-61.47557068 -185.06156921]
[-46.60664368 -187.11833191]
[-31.61228943 -187.81445312]
[-16.61675644 -187.14416504]
[-1.74430859 -185.11303711]
[12.88181686 -181.73786926]
[27.14042091 -177.04666138]
[40.91334915 -171.07827759]
[54.08647156 -163.88215637]
[66.55062866 -155.51794434]
[78.20253754 -146.05494690]
[88.94564819 -135.57159424]
[98.69093323 -124.15473175]
[107.35764313 -111.89898682]
[114.87395477 -98.90589905]
[121.17758942 -85.28314209]
[126.21630859 -71.14360809]
[129.94836426 -56.60445023]
[132.34281921 -41.78615952]
[133.37985229 -26.81151962]
[133.05085754 -11.80462074]
[131.35855103 3.11018276]
[128.31698608 17.80929947]
[123.95133209 32.17092896]
[118.29778290 46.07605743]
[111.40318298 59.40946579]
[103.32466125 72.06066132]
[94.12917328 83.92481995]
[109.06840515 85.27367401]
[121.69457245 77.17554474]
[134.32075500 69.07741547]
[146.94692993 60.97928238]
[159.57310486 52.88115311]
[165.14659119 45.57196045]
[172.53392029 44.75024414]
[185.31959534 36.90636826]
[198.10527039 29.06249237]
[210.89096069 21.21861649]
[221.23011780 7.78216648]
[237.00363159 13.99768543]
[235.39755249 30.87538910]
[218.73483276 34.00429535]
[205.94915771 41.84817123]
[193.16346741 49.69204712]
[180.37779236 57.53592300]
[167.67123413 65.50732422]
[155.04505920 73.60545349]
[142.41888428 81.70359039]
[129.79270935 89.80171967]
[117.16653442 97.89984894]
[118.36202240 105.30395508]
[120.75299835 120.11217499]
[121.94848633 127.51628113]
[136.48170471 131.22918701]
[151.01490784 134.94209290]
[165.54812622 138.65498352]
[180.08134460 142.36788940]
[194.55834961 135.45442200]
[208.92625427 142.59185791]
[212.16322327 158.30496216]
[201.78614807 170.53997803]
[185.75541687 169.91127014]
[176.36843872 156.90110779]
[161.83522034 153.18820190]
[147.30201721 149.47529602]
[132.76879883 145.76240540]
[118.23558044 142.04949951]
[106.48090363 151.36869812]
[94.72726440 160.68707275]
[95.02739716 175.68406677]
[95.32752991 190.68106079]
[95.62766266 205.67805481]
[95.92779541 220.67504883]
[96.22792053 235.67205811]
[96.52805328 250.66905212]
[96.82818604 265.66604614]
[97.12831879 280.66305542]
[97.42845154 295.66003418]
[112.21651459 298.48968506]
[126.09294891 304.33248901]
[138.45114136 312.93301392]
[148.75082397 323.91528320]
[156.54177856 336.79916382]
[161.48338318 351.02148438]
[163.35963440 365.96047974]
[162.08848572 380.96307373]
[157.72554016 395.37341309]
[150.46150208 408.56158447]
[140.61392212 419.95098877]
[128.61331177 429.04379272]
[114.98427582 435.44247437]
[100.32261658 438.86727905]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 92]
[93 114]
[94 113]
[95 112]
[96 111]
[97 110]
[99 109]
[100 108]
[101 107]
[102 106]
[117 131]
[118 130]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
