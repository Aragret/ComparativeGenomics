%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACAACACUGGGGGGGGGGUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCCGAUGCAxxxxxxxxxxCCUAGCCAUGCACUACUCACCAGACGCCUCAACCGCCUUUUCAUCAAUCGCCCCCCCCCCCCCACAUCACU\
) } def
/len { sequence length } bind def

/coor [
[95.34786987 484.83843994]
[81.32592773 479.28543091]
[69.12596893 470.41909790]
[59.51489639 458.79678345]
[53.09687042 445.14910889]
[50.27533340 430.33392334]
[51.22764969 415.28253174]
[55.89395523 400.94110107]
[63.98092270 388.21115112]
[74.98019409 377.89288330]
[88.20035553 370.63491821]
[102.81037140 366.89346313]
[102.81037140 351.89346313]
[102.81037140 336.89346313]
[102.81037140 321.89346313]
[102.81037140 306.89346313]
[102.81037140 291.89346313]
[102.81037140 276.89346313]
[102.81037140 261.89346313]
[102.81037140 246.89346313]
[102.81037140 231.89346313]
[90.65703583 223.10162354]
[76.41034698 227.79542542]
[62.16365051 232.48922729]
[54.93860626 238.18084717]
[47.57601929 237.12988281]
[33.23595810 241.53018188]
[18.89589882 245.93048096]
[10.13868427 259.37261963]
[-5.84396315 260.76348877]
[-16.79152489 249.03614807]
[-14.30596828 233.18681335]
[-0.29399902 225.37371826]
[14.49559784 231.59042358]
[28.83565903 227.19012451]
[43.17572021 222.78982544]
[57.46985245 218.24253845]
[71.71654510 213.54873657]
[85.96323395 208.85493469]
[71.90815735 203.61518860]
[66.29689789 189.70426941]
[72.78268433 176.17893982]
[87.14291382 171.84492493]
[100.02830505 179.52391052]
[103.04984283 194.21601868]
[109.87342072 180.85792542]
[116.69699860 167.49981689]
[120.50485229 152.99119568]
[121.12068176 138.00384521]
[121.73650360 123.01648712]
[103.53184509 131.44424438]
[83.92753601 127.23730469]
[70.79692841 112.09779358]
[69.40589142 92.11596680]
[60.24395370 80.23914337]
[51.08201981 68.36231995]
[41.92008209 56.48549652]
[26.21565437 54.71167374]
[16.43070030 42.30078125]
[18.37046051 26.61598396]
[30.88411140 16.96279144]
[46.54752350 19.06827354]
[56.06787491 31.68328476]
[53.79690552 47.32355881]
[62.95884323 59.20038605]
[72.12077332 71.07720947]
[81.28271484 82.95403290]
[95.82966614 79.29532623]
[98.28259277 64.49724579]
[100.73551941 49.69916916]
[103.18845367 34.90108871]
[89.75065613 27.95265007]
[79.11917877 17.19035912]
[72.33558655 3.66859603]
[70.06446838 -11.28791428]
[72.52832031 -26.21388626]
[79.48575592 -39.64702225]
[90.25517273 -50.27128601]
[103.78147888 -57.04581451]
[118.73950195 -59.30691147]
[133.66381836 -56.83306122]
[147.09230042 -49.86661911]
[157.70933533 -39.09009171]
[164.47480774 -25.55924797]
[166.72587585 -10.59970760]
[164.24201965 4.32294798]
[157.26658630 17.74674988]
[146.48294067 28.35656929]
[132.94757080 35.11296844]
[117.98652649 37.35401535]
[115.53359985 52.15209579]
[113.08067322 66.95017242]
[110.62774658 81.74825287]
[116.92196655 85.82658386]
[130.28004456 79.00298309]
[129.51040649 93.98325348]
[135.80462646 98.06158447]
[148.30865479 89.77610779]
[155.13005066 74.86300659]
[171.47920227 73.58353424]
[180.53752136 87.25389862]
[172.98657227 101.81121063]
[156.59413147 102.28014374]
[144.09010315 110.56562042]
[136.72386169 123.63231659]
[136.10803223 138.61967468]
[135.49220276 153.60702515]
[143.74742126 141.08299255]
[155.02578735 131.19367981]
[168.52120972 124.64588165]
[183.26914978 121.90759277]
[198.21554565 123.17452240]
[212.29217529 128.35610962]
[224.49291992 137.08203125]
[233.94580078 148.72863770]
[239.97518921 162.46350098]
[242.15016174 177.30497742]
[240.31526184 192.19232178]
[234.60163879 206.06152344]
[225.41766357 217.92131042]
[213.41972351 226.92404175]
[199.46531677 232.42628479]
[184.55181885 234.03480530]
[169.74508667 231.63459778]
[156.10342407 225.39723206]
[144.60177612 215.76850891]
[136.06222534 203.43659973]
[131.09509277 189.28288269]
[130.05509949 174.32339478]
[123.23152161 187.68150330]
[116.40794373 201.03959656]
[117.81037140 231.89346313]
[117.81037140 246.89346313]
[117.81037140 261.89346313]
[117.81037140 276.89346313]
[117.81037140 291.89346313]
[117.81037140 306.89346313]
[117.81037140 321.89346313]
[117.81037140 336.89346313]
[117.81037140 351.89346313]
[117.81037140 366.89346313]
[132.42037964 370.63491821]
[145.64053345 377.89288330]
[156.63981628 388.21115112]
[164.72677612 400.94110107]
[169.39308167 415.28253174]
[170.34539795 430.33392334]
[167.52386475 445.14910889]
[161.10583496 458.79678345]
[151.49476624 470.41909790]
[139.29481506 479.28543091]
[125.27286530 484.83843994]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 39]
[23 38]
[24 37]
[26 36]
[27 35]
[28 34]
[45 131]
[46 130]
[47 129]
[48 107]
[49 106]
[50 105]
[54 67]
[55 66]
[56 65]
[57 64]
[68 93]
[69 92]
[70 91]
[71 90]
[97 104]
[98 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
