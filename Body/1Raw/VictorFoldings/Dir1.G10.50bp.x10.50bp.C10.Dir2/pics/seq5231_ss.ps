%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACGCAAAAUGGGGGGGGGGCUUAGCAUACUCCUCAAUUACCCACAUAGGAUGAAUAAUAGCAGUUCUACxxxxxxxxxxACACUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUCCCCCCCCCCUACACAAAAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 372.97518921]
[71.19830322 366.95916748]
[59.48964310 357.42974854]
[50.78712082 345.09408569]
[45.73651886 330.86755371]
[44.71262741 315.80587769]
[47.79142761 301.02670288]
[54.74444962 287.62677002]
[65.05573273 276.60046387]
[77.96011353 268.76593018]
[92.50000000 264.70462036]
[92.50000000 249.70463562]
[92.50000000 234.70463562]
[92.50000000 219.70463562]
[92.50000000 204.70463562]
[92.50000000 189.70463562]
[92.50000000 174.70463562]
[92.50000000 159.70463562]
[92.50000000 144.70463562]
[92.50000000 129.70463562]
[79.87679291 123.10132599]
[71.60465240 111.50302124]
[69.47221375 97.41750336]
[73.94054413 83.89038086]
[63.50073242 73.11957550]
[53.06092072 62.34876251]
[42.62110901 51.57795715]
[32.18129349 40.80714798]
[21.74148178 30.03633881]
[2.04306817 32.07077408]
[-13.42563820 15.01477337]
[-28.28868484 12.99243832]
[-43.15173340 10.97010422]
[-58.01477814 8.94777012]
[-65.99215698 21.92009926]
[-78.55984497 30.52086449]
[-93.54041290 33.25992966]
[-108.33838654 29.66273308]
[-120.38993073 20.35251427]
[-127.60704041 6.94232368]
[-128.73930359 -8.24444199]
[-123.59056091 -22.57658386]
[-113.05285645 -33.57097244]
[-98.95190430 -39.32276154]
[-83.73078918 -38.83542252]
[-70.02665710 -32.19338608]
[-60.21382904 -20.54742622]
[-55.99244308 -5.91527700]
[-41.12939835 -3.89294267]
[-26.26635170 -1.87060833]
[-11.40330410 0.15172619]
[-1.89494550 -11.44961548]
[-6.79649639 -25.62617302]
[-21.73759270 -23.76678085]
[-36.73874664 -25.05484200]
[-51.14416885 -29.43404961]
[-64.32411957 -36.71296310]
[-75.70243073 -46.57337570]
[-84.78168488 -58.58423996]
[-91.16497803 -72.22048950]
[-94.57325745 -86.88600159]
[-94.85753632 -101.93966675]
[-92.00538635 -116.72340393]
[-86.14147949 -130.59092712]
[-77.52217102 -142.93601990]
[-66.52426147 -153.21899414]
[-53.62852097 -160.99032593]
[-39.39870453 -165.91029358]
[-24.45688057 -167.76380920]
[-9.45623493 -166.46984863]
[4.94746494 -162.08497620]
[18.12455177 -154.80087280]
[29.49897957 -144.93598938]
[38.57350922 -132.92155457]
[44.95143890 -119.28279114]
[48.35395050 -104.61594391]
[48.63230896 -89.56216431]
[45.77433777 -74.77954865]
[39.90497971 -60.91432953]
[31.28081322 -48.57263184]
[20.27885628 -38.29398346]
[7.38006163 -30.52772331]
[12.28161240 -16.35116577]
[33.73071289 -2.37010002]
[32.51229095 19.59652519]
[42.95210266 30.36733437]
[53.39191437 41.13814163]
[63.83172989 51.90895081]
[74.27153778 62.67975998]
[84.71134949 73.45056915]
[101.67495728 69.40899658]
[118.09590149 75.27848053]
[128.65402222 89.15739441]
[143.55592346 87.44470215]
[158.45782471 85.73201752]
[173.35972595 84.01932526]
[188.26162720 82.30663300]
[191.76332092 79.49600220]
[195.59651184 78.12569427]
[199.25462341 78.11865234]
[202.31123352 79.23719788]
[204.46652222 81.12453461]
[213.88720703 72.25297546]
[226.42582703 72.20696259]
[235.32177734 80.46342468]
[250.32096863 80.30738831]
[265.32015991 80.15135193]
[280.31692505 79.83930206]
[295.30960083 79.37125397]
[310.30230713 78.90321350]
[323.94900513 69.80927277]
[338.52597046 77.32221222]
[339.03765869 93.71337891]
[324.95770264 102.12093353]
[310.77035522 93.89591217]
[295.77764893 94.36395264]
[280.78494263 94.83199310]
[274.15463257 98.20610046]
[265.47619629 95.15054321]
[250.47700500 95.30657959]
[235.47782898 95.46261597]
[220.91514587 105.20574188]
[204.93457031 96.11722565]
[189.97431946 97.20854187]
[175.07241821 98.92122650]
[160.17051697 100.63391876]
[145.26861572 102.34661102]
[130.36671448 104.05929565]
[126.43751526 115.48137665]
[118.39875031 124.49696350]
[107.50000000 129.70463562]
[107.50000000 144.70463562]
[107.50000000 159.70463562]
[107.50000000 174.70463562]
[107.50000000 189.70463562]
[107.50000000 204.70463562]
[107.50000000 219.70463562]
[107.50000000 234.70463562]
[107.50000000 249.70463562]
[107.50000000 264.70462036]
[122.03988647 268.76593018]
[134.94427490 276.60046387]
[145.25555420 287.62677002]
[152.20857239 301.02670288]
[155.28736877 315.80587769]
[154.26348877 330.86755371]
[149.21287537 345.09408569]
[140.51036072 357.42974854]
[128.80169678 366.95916748]
[114.95575714 372.97518921]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 90]
[25 89]
[26 88]
[27 87]
[28 86]
[29 85]
[31 51]
[32 50]
[33 49]
[34 48]
[52 83]
[53 82]
[93 128]
[94 127]
[95 126]
[96 125]
[97 124]
[102 123]
[105 121]
[106 120]
[107 119]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
