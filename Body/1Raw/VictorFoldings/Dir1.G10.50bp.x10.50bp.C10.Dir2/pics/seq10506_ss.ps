%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:14 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAUUCUGGGGGGGGGGCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUUUCCUCUUGUAAAUxxxxxxxxxxAAUAACCAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCCCCCCCCCCCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[84.27932739 407.68890381]
[71.05913544 400.41644287]
[60.17232895 389.96945190]
[52.36119843 377.06018066]
[48.15831757 362.56887817]
[47.85024643 347.48352051]
[51.45798492 332.83270264]
[58.73556137 319.61532593]
[69.18676758 308.73254395]
[82.09902954 300.92642212]
[96.59196472 296.72912598]
[96.27990723 281.73236084]
[95.96784973 266.73562622]
[95.65579987 251.73886108]
[95.34374237 236.74211121]
[95.03168488 221.74536133]
[94.71962738 206.74859619]
[94.40756989 191.75184631]
[94.09551239 176.75509644]
[93.78346252 161.75834656]
[79.18724823 158.47706604]
[65.80010223 151.79870605]
[54.39973068 142.11120605]
[45.64839935 129.97735596]
[40.05450058 116.10202789]
[37.94300461 101.29129791]
[39.43656921 86.40554810]
[44.44843292 72.30954742]
[52.68743896 59.82215118]
[63.67496109 49.66880035]
[76.77270508 42.43933105]
[91.21978760 38.55371475]
[90.90773010 23.55696106]
[90.59567261 8.56020832]
[82.90228271 21.43700027]
[71.50392914 31.18776321]
[57.59103394 36.79413605]
[42.61666107 37.67058945]
[28.14472389 33.72558594]
[15.68666172 25.37114525]
[6.54358816 13.47979546]
[1.67039990 -0.70653743]
[1.57604980 -15.70624065]
[6.27039146 -29.95275497]
[15.26315117 -41.95818329]
[27.61512947 -50.46868134]
[42.03629303 -54.59542465]
[57.02050781 -53.90741348]
[71.00283051 -48.47650909]
[82.52294922 -38.86990356]
[90.37771606 -26.09091187]
[93.74697113 -11.47115707]
[98.64852142 -25.64771461]
[103.55007172 -39.82427216]
[108.45162964 -54.00083160]
[113.35317993 -68.17739105]
[99.79975128 -74.64149475]
[87.05531311 -82.58248138]
[75.28013611 -91.90048981]
[64.62231445 -102.47833252]
[55.21586609 -114.18298340]
[47.17910004 -126.86724091]
[40.61308289 -140.37158203]
[35.60038757 -154.52619934]
[32.20405579 -169.15304565]
[30.46679878 -184.06820679]
[30.41046524 -199.08409119]
[32.03576279 -214.01187134]
[35.32225418 -228.66380310]
[40.22860718 -242.85562134]
[46.69311905 -256.40884399]
[54.63448715 -269.15304565]
[63.95285034 -280.92794800]
[74.53100586 -291.58544922]
[86.23593903 -300.99154663]
[98.92044067 -309.02792358]
[112.42498016 -315.59356689]
[126.57974243 -320.60583496]
[141.20669556 -324.00170898]
[156.12190247 -325.73852539]
[171.13780212 -325.79440308]
[186.06552124 -324.16867065]
[200.71734619 -320.88174438]
[214.90902710 -315.97497559]
[228.46206665 -309.51004028]
[241.20602417 -301.56829834]
[252.98063660 -292.24957275]
[263.63784790 -281.67111206]
[273.04357910 -269.96588135]
[281.07958984 -257.28115845]
[287.64480591 -243.77641296]
[292.65664673 -229.62150574]
[296.05209351 -214.99444580]
[297.78848267 -200.07917786]
[297.84390259 -185.06329346]
[296.21771240 -170.13562012]
[292.93035889 -155.48388672]
[288.02313232 -141.29235840]
[281.55783081 -127.73951721]
[273.61569214 -114.99578857]
[264.29663086 -103.22145081]
[253.71783447 -92.56457520]
[242.01232910 -83.15917969]
[229.32736206 -75.12355042]
[215.82241821 -68.55874634]
[201.66735840 -63.54731750]
[187.04020691 -60.15229797]
[172.12489319 -58.41638184]
[157.10899353 -58.36139297]
[142.18136597 -59.98803329]
[127.52973175 -63.27583694]
[122.62818146 -49.09928131]
[117.72663116 -34.92272186]
[112.82508087 -20.74616432]
[107.92353058 -6.56960583]
[105.59243011 8.24815178]
[105.90448761 23.24490547]
[106.21653748 38.24166107]
[120.81275177 41.52293396]
[134.19989014 48.20130157]
[145.60026550 57.88879776]
[154.35160828 70.02265167]
[159.94549561 83.89797211]
[162.05699158 98.70870209]
[160.56343079 113.59445190]
[155.55157471 127.69045258]
[147.31256104 140.17784119]
[136.32504272 150.33119202]
[123.22729492 157.56066895]
[108.78021240 161.44628906]
[109.09226990 176.44303894]
[109.40432739 191.43978882]
[109.71638489 206.43653870]
[110.02843475 221.43330383]
[110.34049225 236.43005371]
[110.65254974 251.42680359]
[110.96460724 266.42355347]
[111.27666473 281.42031860]
[111.58872223 296.41705322]
[126.24371338 300.00784302]
[139.46951294 307.27008057]
[150.36439514 317.70867920]
[158.18548584 330.61190796]
[162.39955139 345.09997559]
[162.71928406 360.18505859]
[159.12284851 374.83865356]
[151.85548401 388.06167603]
[141.41268921 398.95251465]
[128.50645447 406.76861572]
[114.01676941 410.97711182]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[32 118]
[33 117]
[34 116]
[52 115]
[53 114]
[54 113]
[55 112]
[56 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
