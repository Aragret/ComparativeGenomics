%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAUCACCCGGGGGGGGGGUAUAGAAGAACUAAUGUUAGUAUAAGUAACAUGAAAACAUUCUCCUCCGCxxxxxxxxxxUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCAUCAUACCCCCCCCCCCUCUUUCACCC\
) } def
/len { sequence length } bind def

/coor [
[106.05296326 516.20068359]
[92.83276367 508.92819214]
[81.94596100 498.48120117]
[74.13483429 485.57196045]
[69.93195343 471.08062744]
[69.62387848 455.99530029]
[73.23162079 441.34448242]
[80.50919342 428.12707520]
[90.96040344 417.24432373]
[103.87266541 409.43817139]
[118.36560059 405.24087524]
[118.05354309 390.24414062]
[117.74148560 375.24737549]
[117.42942810 360.25061035]
[117.11737061 345.25387573]
[116.80532074 330.25711060]
[116.49326324 315.26037598]
[116.18120575 300.26361084]
[115.86914825 285.26684570]
[115.55709076 270.27011108]
[115.24503326 255.27334595]
[114.93298340 240.27659607]
[114.62092590 225.27984619]
[111.31597137 218.61479187]
[114.46163940 209.96859741]
[114.46163940 194.96859741]
[106.72434235 182.24131775]
[114.46163940 168.44114685]
[111.82277679 153.67509460]
[106.62735748 139.60357666]
[101.43194580 125.53205872]
[96.23652649 111.46054077]
[90.74949646 97.50014496]
[84.97322845 83.65692902]
[79.19695282 69.81371307]
[73.27699280 56.03133011]
[67.21397400 42.31127930]
[62.02909470 38.04225922]
[60.11580276 32.60437393]
[61.19736862 27.89207840]
[55.71033859 13.93168831]
[50.22330475 -0.02870151]
[35.56558990 -11.12515163]
[38.77045059 -28.35096931]
[32.99417877 -42.19418716]
[27.21790504 -56.03740692]
[21.44163322 -69.88062286]
[17.77049255 -72.46601105]
[15.39135361 -75.76914978]
[14.37058258 -79.28197479]
[14.59803200 -82.52885437]
[15.81397438 -85.12284851]
[11.20841026 -99.39830780]
[6.60284567 -113.67377472]
[1.99728107 -127.94923401]
[-13.02440739 -126.74691010]
[-27.91836739 -129.04182434]
[-41.88138962 -134.71023560]
[-54.16045761 -143.44642639]
[-64.09338379 -154.77928162]
[-71.14450073 -168.09764099]
[-74.93354034 -182.68324280]
[-75.25617218 -197.74951172]
[-72.09499359 -212.48396301]
[-65.62049103 -226.09194946]
[-56.18181229 -237.83963013]
[-44.28798294 -247.09347534]
[-30.58041954 -253.35441589]
[-15.79835510 -256.28482056]
[-0.73896688 -255.72666931]
[13.78561115 -251.71003723]
[26.99208641 -244.45153809]
[38.16825104 -234.34263611]
[46.71138763 -221.92846680]
[52.16077805 -207.87852478]
[54.22254181 -192.95050049]
[52.78548813 -177.94944763]
[47.92712021 -163.68434143]
[39.90943909 -150.92451477]
[29.16483307 -140.35804749]
[16.27274132 -132.55479431]
[20.87830544 -118.27933502]
[25.48387146 -104.00387573]
[30.08943558 -89.72841644]
[35.28485107 -75.65689850]
[41.06112289 -61.81367874]
[46.83739471 -47.97045898]
[52.61366653 -34.12724304]
[63.71083450 -29.21194077]
[68.61710358 -17.67298508]
[64.18369293 -5.51573324]
[69.67073059 8.44465733]
[75.15776062 22.40504646]
[80.93402863 36.24826431]
[86.99704742 49.96831894]
[92.61373138 54.84668350]
[93.04016876 64.03743744]
[98.81644440 77.88066101]
[104.59271240 91.72387695]
[108.92711639 94.80052185]
[111.19629669 100.10481262]
[110.30805206 106.26512146]
[115.50346375 120.33663940]
[120.69888306 134.40815735]
[125.89429474 148.47967529]
[128.95759583 133.79580688]
[136.54397583 120.85567474]
[147.86111450 111.01075745]
[161.72705078 105.28924561]
[176.69363403 104.28868103]
[191.19778442 108.11357880]
[203.72467041 116.36445618]
[212.96601868 128.17959595]
[217.95663452 142.32504272]
[218.17532349 157.32345581]
[213.59925842 171.60839844]
[204.70632935 183.68795776]
[192.42532349 192.30056763]
[178.03886414 196.54670715]
[163.04946899 195.98294067]
[149.02259827 190.66813660]
[137.42323303 181.15736389]
[129.46163940 168.44114685]
[137.19894409 182.24131775]
[129.46163940 194.96859741]
[129.46163940 209.96859741]
[129.61767578 224.96778870]
[129.92973328 239.96453857]
[130.24179077 254.96128845]
[130.55384827 269.95803833]
[130.86590576 284.95480347]
[131.17796326 299.95153809]
[131.49002075 314.94830322]
[131.80207825 329.94506836]
[132.11412048 344.94180298]
[132.42617798 359.93856812]
[132.73823547 374.93533325]
[133.05029297 389.93206787]
[133.36235046 404.92883301]
[148.01734924 408.51959229]
[161.24314880 415.78186035]
[172.13801575 426.22045898]
[179.95912170 439.12365723]
[184.17318726 453.61172485]
[184.49290466 468.69683838]
[180.89648438 483.35043335]
[173.62911987 496.57342529]
[163.18632507 507.46426392]
[150.28009033 515.28039551]
[135.79040527 519.48883057]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[25 126]
[26 125]
[28 123]
[29 105]
[30 104]
[31 103]
[32 102]
[33 99]
[34 98]
[35 97]
[36 95]
[37 94]
[40 93]
[41 92]
[42 91]
[44 88]
[45 87]
[46 86]
[47 85]
[52 84]
[53 83]
[54 82]
[55 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
