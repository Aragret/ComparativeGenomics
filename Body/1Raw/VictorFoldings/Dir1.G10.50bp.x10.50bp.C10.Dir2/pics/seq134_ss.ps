%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCGCACCUGGGGGGGGGGACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAxxxxxxxxxxCCGCAUUCCUACUACUCAACUUAAACUCCAGCACCACGACCCUACUACUACCCCCCCCCCUCUCGCACCU\
) } def
/len { sequence length } bind def

/coor [
[89.50827789 433.43536377]
[75.66234589 427.41934204]
[63.95368195 417.88992310]
[55.25115585 405.55426025]
[50.20055389 391.32772827]
[49.17666245 376.26605225]
[52.25546265 361.48687744]
[59.20848465 348.08697510]
[69.51976776 337.06063843]
[82.42414856 329.22613525]
[96.96403503 325.16479492]
[96.96403503 310.16479492]
[96.96403503 295.16479492]
[96.96403503 280.16479492]
[96.96403503 265.16479492]
[96.96403503 250.16481018]
[96.96403503 235.16481018]
[96.96403503 220.16481018]
[96.96403503 205.16481018]
[96.96403503 190.16481018]
[86.28316498 179.84712219]
[86.06948090 164.63499451]
[96.96403503 153.50187683]
[96.96403503 138.50187683]
[95.87272644 123.54161835]
[93.69588470 108.70041656]
[87.06739044 95.24445343]
[76.62757874 84.47364044]
[66.18776703 73.70283508]
[65.55793762 88.68960571]
[55.57211685 99.88261414]
[40.75397873 102.21131134]
[27.81628799 94.62078094]
[22.61994171 80.54960632]
[27.51893616 66.37216187]
[40.29397964 58.51097870]
[55.15821075 60.52742386]
[46.39200211 48.35558701]
[37.62579727 36.18375015]
[26.53448105 26.08510017]
[13.59642506 18.49519348]
[0.65836871 10.90528393]
[-12.27968693 3.31537604]
[-25.21774292 -4.27453232]
[-38.15579987 -11.86444092]
[-51.09385681 -19.45434952]
[-64.03191376 -27.04425621]
[-76.96997070 -34.63416672]
[-93.36354065 -34.20676041]
[-101.69858551 -48.32975769]
[-93.40071869 -62.47463226]
[-77.00607300 -62.09034348]
[-69.38005829 -47.57221985]
[-56.44200134 -39.98231125]
[-43.50394821 -32.39240646]
[-30.56589127 -24.80249596]
[-17.62783432 -17.21258736]
[-4.68977880 -9.62267971]
[8.24827671 -2.03277159]
[21.18633270 5.55713654]
[34.12438965 13.14704514]
[27.02022171 -0.06396582]
[23.84768295 -14.72462749]
[24.85436058 -29.69080925]
[29.96169281 -43.79453659]
[38.77109909 -55.93514633]
[50.59508514 -65.16516876]
[64.51089478 -70.76428986]
[79.43253326 -72.29554749]
[94.19549561 -69.63944244]
[107.64767456 -63.00326157]
[118.73924255 -52.90489197]
[126.60461426 -40.13241959]
[130.62995911 -25.68262672]
[130.50114441 -10.68317890]
[126.22821045 3.69534945]
[118.14463806 16.33084679]
[106.88126373 26.23722839]
[93.31709290 32.64139175]
[78.51068878 35.04354858]
[63.61754990 33.25623703]
[49.79763412 27.41754341]
[58.56383896 39.58937836]
[67.33004761 51.76121521]
[76.95857239 63.26301956]
[87.39838409 74.03382874]
[97.83819580 84.80463409]
[94.77662659 70.12039948]
[94.58286285 55.12165451]
[97.26406860 40.36322784]
[102.72107697 26.39107323]
[110.75199890 13.72204971]
[121.05977631 2.82481074]
[133.26309204 -5.89752960]
[146.91050720 -12.12231255]
[161.49719238 -15.61927032]
[176.48353577 -16.25904274]
[191.31518555 -14.01796246]
[205.44345093 -8.97893333]
[218.34573364 -1.32835877]
[229.54472351 8.65074921]
[238.62615967 20.58924103]
[245.25408936 34.04548645]
[249.18333435 48.52170944]
[250.26853943 63.48239899]
[248.46957397 78.37413025]
[243.85298157 92.64603424]
[236.58953857 105.77014160]
[226.94792175 117.26097870]
[215.28480530 126.69346619]
[202.03164673 133.71867371]
[187.67869568 138.07673645]
[172.75689697 139.60643005]
[157.81823730 138.25117493]
[143.41534424 134.06109619]
[130.08102417 127.19119263]
[118.30850220 117.89560699]
[108.53709412 106.52357483]
[110.71392822 121.36478424]
[119.98348236 109.57176208]
[134.62788391 106.32498169]
[148.01307678 113.09526825]
[154.07542419 126.81561279]
[150.06864929 141.27056885]
[137.80783081 149.91189575]
[122.84725952 148.82498169]
[111.96403503 138.50187683]
[111.96403503 153.50187683]
[122.85858917 164.63499451]
[122.64490509 179.84712219]
[111.96403503 190.16481018]
[111.96403503 205.16481018]
[111.96403503 220.16481018]
[111.96403503 235.16481018]
[111.96403503 250.16481018]
[111.96403503 265.16479492]
[111.96403503 280.16479492]
[111.96403503 295.16479492]
[111.96403503 310.16479492]
[111.96403503 325.16479492]
[126.50392151 329.22613525]
[139.40830994 337.06063843]
[149.71958923 348.08697510]
[156.67260742 361.48687744]
[159.75140381 376.26605225]
[158.72752380 391.32772827]
[153.67691040 405.55426025]
[144.97439575 417.88992310]
[133.26573181 427.41934204]
[119.41979218 433.43536377]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 128]
[24 127]
[25 119]
[26 118]
[27 87]
[28 86]
[29 85]
[37 84]
[38 83]
[39 82]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[45 56]
[46 55]
[47 54]
[48 53]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
