%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACGACACGGGGGGGGGGGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGAGCUGUAUxxxxxxxxxxCACCACCCAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCACCCCCCCCCCUACACAACAC\
) } def
/len { sequence length } bind def

/coor [
[86.09980011 405.37530518]
[71.61010742 401.16683960]
[58.70387650 393.35070801]
[48.26107788 382.45986938]
[40.99371338 369.23687744]
[37.39728546 354.58325195]
[37.71700668 339.49816895]
[41.93107605 325.01010132]
[49.75217438 312.10690308]
[60.64704132 301.66830444]
[73.87284851 294.40603638]
[88.52784729 290.81527710]
[88.83989716 275.81851196]
[89.15195465 260.82177734]
[89.46401215 245.82501221]
[89.77606964 230.82826233]
[90.08812714 215.83149719]
[90.40018463 200.83474731]
[90.71223450 185.83799744]
[91.02429199 170.84124756]
[91.33634949 155.84448242]
[91.64840698 140.84773254]
[75.34217834 133.61961365]
[63.54878616 120.23847198]
[58.42665100 103.15331268]
[60.91321945 85.49103546]
[70.55339813 70.48416901]
[62.04230499 58.13259888]
[53.53121567 45.78102875]
[45.02012634 33.42945480]
[36.50903320 21.07788277]
[27.99794388 8.72630978]
[16.80217934 -1.25641656]
[3.55959344 -8.30155182]
[-9.68299198 -15.34668636]
[-2.57527971 -2.13758254]
[-0.95722586 12.77489185]
[-5.06641674 27.20106888]
[-14.29948139 39.02268219]
[-27.30068398 46.50390625]
[-42.16099548 48.54624176]
[-56.69840622 44.84980011]
[-68.77832031 35.95734787]
[-76.62698364 23.17460632]
[-79.09194183 8.37852669]
[-75.81124878 -6.25831318]
[-67.26663208 -18.58671570]
[-54.71273422 -26.79644203]
[-39.99290085 -29.68202019]
[-25.26913643 -26.81999588]
[-35.93076324 -37.37128448]
[-46.59238815 -47.92257690]
[-57.25401306 -58.47386551]
[-67.91564178 -69.02515411]
[-83.90654755 -72.66148376]
[-88.49369812 -88.40601349]
[-76.95822144 -100.06211853]
[-61.16682816 -95.63899994]
[-57.36434937 -79.68678284]
[-46.70272446 -69.13549042]
[-36.04109955 -58.58420181]
[-25.37947273 -48.03291321]
[-14.71784592 -37.48162079]
[-2.63785744 -28.58927155]
[10.60472870 -21.54413795]
[23.84731483 -14.49900246]
[16.17374039 -27.38761330]
[11.87866020 -41.75954056]
[11.22196293 -56.74515915]
[14.24338436 -71.43770599]
[20.76010132 -84.94815826]
[30.37779808 -96.45902252]
[42.51451874 -105.27378082]
[56.43589020 -110.85907745]
[71.29954529 -112.87693787]
[86.20610046 -111.20526886]
[100.25359344 -105.94523621]
[112.59201813 -97.41509247]
[122.47480011 -86.13100433]
[129.30393982 -72.77574921]
[132.66621399 -58.15743637]
[132.35818481 -43.16059875]
[128.39848328 -28.69267654]
[121.02671051 -15.62910366]
[110.68891907 -4.76033926]
[98.01063538 3.25596309]
[83.75900269 7.93474722]
[68.79637146 8.99290657]
[54.02811050 6.36641312]
[40.34951782 0.21521972]
[48.86060715 12.56679249]
[57.37169647 24.91836548]
[65.88278961 37.26993561]
[74.39387512 49.62150955]
[82.90496826 61.97308350]
[97.24024963 58.39867401]
[111.92207336 60.04814529]
[125.10684204 66.71437073]
[135.13894653 77.56027985]
[140.75865173 91.22394562]
[155.75134277 90.75589752]
[170.74403381 90.28785706]
[185.73674011 89.81981659]
[189.94279480 75.28832245]
[198.43516541 62.76893997]
[210.38182068 53.48818207]
[224.61238098 48.35528564]
[239.73265076 47.87311935]
[254.26132202 52.08892059]
[266.77499390 60.58966827]
[276.04776001 72.54254913]
[281.17111206 86.77653503]
[281.64315796 101.89712524]
[277.41763306 116.42296600]
[268.90847778 128.93095398]
[256.94940186 138.19569397]
[242.71199036 143.30952454]
[227.59107971 143.77142334]
[213.06806946 139.53614807]
[200.56578064 131.01864624]
[191.30905151 119.05335236]
[186.20477295 104.81251526]
[171.21208191 105.28055573]
[156.21939087 105.74859619]
[141.22668457 106.21663666]
[138.37103271 116.30798340]
[133.08744812 125.36743927]
[125.71025848 132.82177734]
[116.70625305 138.19931030]
[106.64515686 141.15979004]
[106.33310699 156.15653992]
[106.02104950 171.15330505]
[105.70899200 186.15005493]
[105.39693451 201.14680481]
[105.08487701 216.14355469]
[104.77281952 231.14031982]
[104.46076965 246.13706970]
[104.14871216 261.13381958]
[103.83665466 276.13058472]
[103.52459717 291.12731934]
[118.01753235 295.32461548]
[130.92979431 303.13076782]
[141.38099670 314.01351929]
[148.65858459 327.23092651]
[152.26631165 341.88174438]
[151.95825195 356.96707153]
[147.75537109 371.45840454]
[139.94422913 384.36764526]
[129.05743408 394.81463623]
[115.83723450 402.08712769]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[27 95]
[28 94]
[29 93]
[30 92]
[31 91]
[32 90]
[33 66]
[34 65]
[35 64]
[50 63]
[51 62]
[52 61]
[53 60]
[54 59]
[100 125]
[101 124]
[102 123]
[103 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
