%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACAACACAAGGGGGGGGGGGAACACCUCUGAUUACUCCUGCCAUCAUGACCCUUGGCCAUAAUAUGAUUxxxxxxxxxxAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUGAGCCCCCCCCCCCCACAACCCAA\
) } def
/len { sequence length } bind def

/coor [
[110.39951324 386.09921265]
[96.55357361 380.08316040]
[84.84490967 370.55374146]
[76.14238739 358.21807861]
[71.09178162 343.99157715]
[70.06789398 328.92987061]
[73.14669037 314.15072632]
[80.09971619 300.75079346]
[90.41099548 289.72445679]
[103.31537628 281.88995361]
[117.85526276 277.82864380]
[117.85526276 262.82864380]
[117.85526276 247.82864380]
[117.85526276 232.82864380]
[117.85526276 217.82864380]
[117.85526276 202.82864380]
[117.85526276 187.82864380]
[117.85526276 172.82864380]
[117.85526276 157.82864380]
[117.85526276 142.82864380]
[117.85526276 127.82864380]
[111.54969788 123.76786804]
[98.93857574 115.64633179]
[92.63301086 111.58555603]
[78.97676849 117.79096222]
[69.88442993 131.43873596]
[53.53851318 130.11854553]
[46.75428772 115.18849182]
[56.51078796 102.00733948]
[72.77136230 104.13472748]
[86.42760468 97.92931366]
[72.51085663 92.33251190]
[69.01348877 77.74592590]
[78.87918854 66.44689178]
[93.80412292 67.94566345]
[101.22618866 80.98081207]
[105.53376770 66.61262512]
[109.84135437 52.24444199]
[105.16777039 34.46418762]
[118.32796478 22.89659309]
[122.33570862 8.44190502]
[110.87657928 -4.21943760]
[109.67986298 -22.04403496]
[120.23152161 -37.42534256]
[138.79571533 -43.19710541]
[137.86009216 -58.16789627]
[129.27706909 -71.45858002]
[136.20542908 -84.64368439]
[135.26980591 -99.61447906]
[124.18408966 -107.33229065]
[119.65332031 -119.85028076]
[123.12811279 -132.49938965]
[133.11666870 -140.69851685]
[132.49269104 -155.68553162]
[124.18802643 -169.15190125]
[131.38919067 -182.19001770]
[130.76521301 -197.17703247]
[130.14123535 -212.16404724]
[129.36138916 -227.14376831]
[128.42576599 -242.11454773]
[127.49013519 -257.08535767]
[126.39882660 -272.04559326]
[125.15194702 -286.99368286]
[123.90507507 -301.94177246]
[122.65820312 -316.88986206]
[121.41132355 -331.83795166]
[106.92192841 -336.43420410]
[95.29760742 -346.22930908]
[88.31098938 -359.72952271]
[87.02748871 -374.87615967]
[91.64282227 -389.35949707]
[101.45318604 -400.97091675]
[114.96257782 -407.93978882]
[130.11090088 -409.20336914]
[144.58816528 -404.56896973]
[156.18666077 -394.74334717]
[163.13774109 -381.22479248]
[164.38139343 -366.07482910]
[159.72796631 -351.60366821]
[149.88708496 -340.01809692]
[136.35940552 -333.08480835]
[137.60629272 -318.13671875]
[138.85316467 -303.18862915]
[140.10003662 -288.24057007]
[141.34690857 -273.29248047]
[145.06115723 -266.84652710]
[142.46092224 -258.02096558]
[143.39656067 -243.05018616]
[144.33218384 -228.07939148]
[147.91152954 -221.55758667]
[145.12825012 -212.78802490]
[145.75222778 -197.80101013]
[146.37620544 -182.81399536]
[154.63624573 -170.41960144]
[147.47970581 -156.30950928]
[148.10368347 -141.32249451]
[160.94541931 -130.50825500]
[162.04536438 -113.41807556]
[150.24060059 -100.55010986]
[151.17622375 -85.57931519]
[159.69232178 -73.35944366]
[152.83087158 -59.10352707]
[153.76651001 -44.13273239]
[164.96228027 -34.15000916]
[179.94198608 -34.92985153]
[194.92170715 -35.70969772]
[209.90141296 -36.48954391]
[217.46661377 -49.93466568]
[231.11051941 -57.13516998]
[246.47943115 -55.79339600]
[258.66915894 -46.33750534]
[263.79003906 -31.78483200]
[260.20797729 -16.77908516]
[249.06602478 -6.10854244]
[233.91952515 -3.17813587]
[219.60168457 -8.92294788]
[210.68125916 -21.50982857]
[195.70155334 -20.72998428]
[180.72183228 -19.95013809]
[165.74211121 -19.17029381]
[162.73982239 -2.42958999]
[151.59909058 9.17517281]
[136.79039001 12.44964504]
[132.78265381 26.90433311]
[138.47393799 37.62424850]
[135.20524597 49.72939682]
[124.20954132 56.55202484]
[119.90195465 70.92021179]
[115.59436798 85.28839111]
[132.85527039 127.82864380]
[132.85527039 142.82864380]
[132.85527039 157.82864380]
[132.85527039 172.82864380]
[132.85527039 187.82864380]
[132.85527039 202.82864380]
[132.85527039 217.82864380]
[132.85527039 232.82864380]
[132.85527039 247.82864380]
[132.85527039 262.82864380]
[132.85527039 277.82864380]
[147.39515686 281.88995361]
[160.29953003 289.72445679]
[170.61082458 300.75079346]
[177.56384277 314.15072632]
[180.64263916 328.92987061]
[179.61874390 343.99157715]
[174.56814575 358.21807861]
[165.86561584 370.55374146]
[154.15695190 380.08316040]
[140.31101990 386.09921265]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 31]
[25 30]
[36 129]
[37 128]
[38 127]
[40 124]
[41 123]
[45 103]
[46 102]
[48 100]
[49 99]
[53 96]
[54 95]
[56 93]
[57 92]
[58 91]
[59 89]
[60 88]
[61 87]
[62 85]
[63 84]
[64 83]
[65 82]
[66 81]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
