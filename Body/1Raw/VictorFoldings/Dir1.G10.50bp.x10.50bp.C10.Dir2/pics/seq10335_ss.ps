%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACUACGAGGGGGGGGGGACGCACUCACAGUCGCAUCAUAAUCCUCUCUCAAGGACUUCAAACUCUACxxxxxxxxxxCCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACCCCCCCCCCCAAACUAGGA\
) } def
/len { sequence length } bind def

/coor [
[91.90821838 426.09912109]
[80.02394104 416.82403564]
[70.70523834 404.97390747]
[64.49387360 391.23773193]
[61.75096893 376.41412354]
[62.63599777 361.36486816]
[67.09750366 346.96490479]
[74.87610626 334.05148315]
[85.51955414 323.37530518]
[98.40906525 315.55712891]
[112.79524994 311.05145264]
[111.85961914 296.08068848]
[110.92399597 281.10989380]
[109.98836517 266.13909912]
[109.05273438 251.16830444]
[108.11711121 236.19750977]
[107.18148041 221.22671509]
[105.77917480 206.29240417]
[103.91156006 191.40913391]
[102.04395294 176.52584839]
[100.17633820 161.64256287]
[98.30872345 146.75929260]
[96.44110870 131.87600708]
[83.23125458 129.04647827]
[71.81564331 120.75975037]
[64.42885590 108.04674530]
[62.74679184 92.83901215]
[67.53232574 77.67846680]
[78.42681885 65.29248047]
[93.93582916 58.10552216]
[84.42746735 46.50418091]
[69.69546509 40.73541641]
[67.61196899 25.98725128]
[58.10361481 14.38591003]
[48.59525299 2.78456926]
[35.85618973 10.74349880]
[22.20392418 17.00800133]
[7.86264181 21.47520638]
[-6.93216276 24.07175827]
[-21.93754387 24.75502014]
[-36.90710068 23.51377296]
[-51.59502029 20.36839867]
[-65.76010895 15.37054729]
[-79.16976929 8.60228634]
[-91.60379791 0.17475848]
[-102.85802460 -9.77364922]
[-112.74763489 -21.07957458]
[-121.11022949 -33.55736542]
[-127.80850220 -47.00212097]
[-132.73245239 -61.19306946]
[-135.80122375 -75.89718628]
[-136.96443176 -90.87300873]
[-136.20295715 -105.87462616]
[-133.52932739 -120.65569305]
[-128.98742676 -134.97349548]
[-122.65184021 -148.59292603]
[-114.62661743 -161.29032898]
[-105.04353333 -172.85720825]
[-94.05994415 -183.10363770]
[-81.85621643 -191.86132812]
[-68.63274384 -198.98651123]
[-54.60667038 -204.36215210]
[-40.00831604 -207.89999390]
[-25.07739639 -209.54194641]
[-10.05909443 -209.26103210]
[4.79997873 -207.06188965]
[19.25582123 -202.98059082]
[33.07105637 -197.08418274]
[46.01882553 -189.46949768]
[57.88651657 -180.26155090]
[68.47924805 -169.61154175]
[77.62307739 -157.69438171]
[85.16785431 -144.70574951]
[90.98969269 -130.85893250]
[94.99298096 -116.38129425]
[97.11199188 -101.51058197]
[97.31193542 -86.49098206]
[95.58950806 -71.56912994]
[91.97300720 -56.99006271]
[86.52182007 -42.99317169]
[79.32545471 -29.80830956]
[70.50208282 -17.65197563]
[60.19659424 -6.72378922]
[69.70495605 4.87755203]
[79.21331024 16.47889328]
[93.26521301 21.41785240]
[96.02880859 36.99582291]
[105.53717041 48.59716415]
[120.52418518 49.22114182]
[130.96398926 38.45033264]
[141.40380859 27.67952347]
[142.59219360 11.68054485]
[155.92234802 2.75381923]
[171.16853333 7.74716568]
[176.63516235 22.83011627]
[168.12872314 36.43232346]
[152.17462158 38.11933517]
[141.73480225 48.89014435]
[131.29499817 59.66095352]
[138.20199585 72.97611237]
[153.01974487 70.64500427]
[167.83750916 68.31390381]
[171.36744690 53.52850342]
[180.29084778 41.22235870]
[193.24697876 33.27206421]
[208.26011658 30.88998032]
[223.04084778 34.43936157]
[235.33525085 43.37895203]
[243.26849365 56.34552765]
[245.63082886 71.36177826]
[242.06199646 86.13784027]
[233.10624695 98.42046356]
[220.12924194 106.33664703]
[205.10990906 108.67922211]
[190.33854675 105.09096527]
[178.06771851 96.11906433]
[170.16860962 83.13166046]
[155.35086060 85.46276093]
[140.53309631 87.79386902]
[138.07084656 108.04742432]
[126.93671417 123.11215210]
[111.32439423 130.00839233]
[113.19200134 144.89167786]
[115.05961609 159.77496338]
[116.92723083 174.65823364]
[118.79484558 189.54151917]
[120.66245270 204.42478943]
[123.90027618 208.68344116]
[125.02273560 213.29782104]
[124.25686646 217.38623047]
[122.15227509 220.29109192]
[123.08789825 235.26188660]
[124.02352905 250.23266602]
[124.95915985 265.20346069]
[125.89478302 280.17425537]
[126.83041382 295.14505005]
[127.76604462 310.11584473]
[142.60127258 312.79525757]
[156.36390686 318.94775391]
[168.25379944 328.21566772]
[177.57969666 340.06011963]
[183.79939270 353.79251099]
[186.55126953 368.61447144]
[185.67536926 383.66427612]
[181.22259521 398.06692505]
[173.45182800 410.98507690]
[162.81484985 421.66769409]
[149.93008423 429.49368286]
[135.54663086 434.00805664]
[120.50072479 434.94839478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 127]
[19 126]
[20 125]
[21 124]
[22 123]
[23 122]
[30 88]
[31 87]
[33 85]
[34 84]
[35 83]
[89 99]
[90 98]
[91 97]
[100 119]
[101 118]
[102 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
