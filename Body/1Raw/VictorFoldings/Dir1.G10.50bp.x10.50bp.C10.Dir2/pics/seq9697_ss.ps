%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCCAACACAGGGGGGGGGGUAUGGCCUAGACUACGUACAUAACCUAAACCUACUCCAAUGCUAAAACUAxxxxxxxxxxCUACCUAACCAACAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUCCCCCCCCCCUCUCCAACAUA\
) } def
/len { sequence length } bind def

/coor [
[83.24377441 372.13848877]
[69.22183228 366.58547974]
[57.02187347 357.71914673]
[47.41080093 346.09683228]
[40.99277496 332.44915771]
[38.17123795 317.63397217]
[39.12355423 302.58258057]
[43.78985977 288.24114990]
[51.87682724 275.51119995]
[62.87610245 265.19293213]
[76.09626007 257.93496704]
[90.70627594 254.19351196]
[90.70627594 239.19351196]
[90.70627594 224.19351196]
[90.70627594 209.19351196]
[90.70627594 194.19351196]
[90.70627594 179.19351196]
[90.70627594 164.19351196]
[90.70627594 149.19351196]
[90.70627594 134.19351196]
[90.70627594 119.19351959]
[84.58894348 110.91308594]
[83.66159058 101.84534454]
[87.05704498 94.66117096]
[76.72613525 83.78585052]
[66.39523315 72.91053772]
[54.56462097 82.15132141]
[41.89736557 90.20713806]
[28.51173592 97.00275421]
[14.53271770 102.47473907]
[0.09083221 106.57198334]
[-14.67907810 109.25624847]
[-29.63910866 110.50245667]
[-44.64957428 110.29898071]
[-59.57032776 108.64772034]
[-74.26204681 105.56408691]
[-88.58757019 101.07688141]
[-102.41312408 95.22798920]
[-115.60963440 88.07202911]
[-128.05387878 79.67581940]
[-139.62965393 70.11774445]
[-150.22889709 59.48705673]
[-159.75263977 47.88301086]
[-168.11195374 35.41395187]
[-175.22879028 22.19630814]
[-181.03669739 8.35348511]
[-185.48144531 -5.98526239]
[-188.52154541 -20.68605614]
[-190.12860107 -35.61163330]
[-190.28761292 -50.62263870]
[-188.99710083 -65.57891083]
[-186.26908875 -80.34080505]
[-182.12907410 -94.77049255]
[-176.61570740 -108.73323822]
[-169.78047180 -122.09867859]
[-161.68716431 -134.74201965]
[-152.41137695 -146.54519653]
[-142.03971863 -157.39804077]
[-130.66899109 -167.19917297]
[-118.40541077 -175.85711670]
[-105.36345673 -183.29101562]
[-91.66490173 -189.43147278]
[-77.43765259 -194.22113037]
[-62.81454468 -197.61529541]
[-47.93212128 -199.58226013]
[-32.92933273 -200.10366821]
[-17.94626236 -199.17463684]
[-3.12280321 -196.80386353]
[11.40263557 -193.01345825]
[25.49443245 -187.83883667]
[39.02101135 -181.32829285]
[51.85607910 -173.54261780]
[63.87978745 -164.55451965]
[74.97988129 -154.44792175]
[85.05271149 -143.31716919]
[94.00423431 -131.26620483]
[101.75086212 -118.40753937]
[108.22027588 -104.86123657]
[113.35205841 -90.75378418]
[117.09830475 -76.21688843]
[119.42403412 -61.38629913]
[120.30752563 -46.40047073]
[119.74053955 -31.39933777]
[117.72835541 -16.52295876]
[114.28977966 -1.91023493]
[109.45690155 12.30239487]
[103.27485657 25.98222733]
[95.80136108 39.00153732]
[87.10620117 51.23875809]
[77.27055359 62.57963943]
[87.60145569 73.45494843]
[97.93235779 84.33026886]
[90.91887665 71.07088470]
[91.14810944 56.07263565]
[98.56351471 43.03378296]
[111.33661652 35.16943741]
[126.31781769 34.41878891]
[139.81306458 40.96693420]
[148.49472046 53.19922638]
[150.22203064 68.09944153]
[144.56910706 81.99348450]
[132.92982483 91.45536804]
[118.17543030 94.15206909]
[133.11145020 95.53609467]
[148.04745483 96.92012024]
[162.98347473 98.30414581]
[177.91947937 99.68817139]
[192.85549927 101.07219696]
[207.79150391 102.45622253]
[222.72752380 103.84024811]
[230.14208984 90.53821564]
[242.32995605 81.40718079]
[257.17950439 78.02913666]
[272.11791992 80.98936462]
[284.55709839 89.77498627]
[292.34182739 102.86383057]
[294.12338257 117.98818207]
[289.59307861 132.52764893]
[279.53582764 143.96319580]
[265.69409180 150.31352234]
[250.46607971 150.47842407]
[236.49009705 144.42930603]
[226.18757629 133.21421814]
[221.34349060 118.77626038]
[206.40748596 117.39223480]
[191.47146606 116.00820923]
[176.53546143 114.62418365]
[161.59944153 113.24015808]
[146.66343689 111.85613251]
[131.72741699 110.47210693]
[116.79140472 109.08808136]
[105.70627594 119.19351959]
[105.70627594 134.19351196]
[105.70627594 149.19351196]
[105.70627594 164.19351196]
[105.70627594 179.19351196]
[105.70627594 194.19351196]
[105.70627594 209.19351196]
[105.70627594 224.19351196]
[105.70627594 239.19351196]
[105.70627594 254.19351196]
[120.31628418 257.93496704]
[133.53643799 265.19293213]
[144.53572083 275.51119995]
[152.62268066 288.24114990]
[157.28898621 302.58258057]
[158.24130249 317.63397217]
[155.41976929 332.44915771]
[149.00173950 346.09683228]
[139.39067078 357.71914673]
[127.19071198 366.58547974]
[113.16876984 372.13848877]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 92]
[25 91]
[26 90]
[103 131]
[104 130]
[105 129]
[106 128]
[107 127]
[108 126]
[109 125]
[110 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
