%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUUGGACAGGGGGGGGGGCUAGGAAAAAACCUUGUAGAGAGAGUAAAAAAUUUAACACCCAUAGUAGGxxxxxxxxxxCCUCAUUCUAACCUGAAUCGGAGGACAACCAGUAAGCUACCCUUUUACCACCCCCCCCCCUCAUUGGACA\
) } def
/len { sequence length } bind def

/coor [
[77.83748627 378.51736450]
[63.99155045 372.50134277]
[52.28288651 362.97192383]
[43.58036423 350.63626099]
[38.52976227 336.40972900]
[37.50587082 321.34805298]
[40.58466721 306.56890869]
[47.53768921 293.16897583]
[57.84897614 282.14263916]
[70.75335693 274.30813599]
[85.29324341 270.24682617]
[85.29324341 255.24681091]
[85.29324341 240.24681091]
[85.29324341 225.24681091]
[85.29324341 210.24681091]
[85.29324341 195.24681091]
[85.29324341 180.24681091]
[85.29324341 165.24681091]
[85.29324341 150.24681091]
[85.29324341 135.24681091]
[72.85380554 126.86466980]
[62.96836853 139.21734619]
[48.26718521 136.82476807]
[34.36462784 142.45672607]
[20.46207237 148.08868408]
[14.53187275 162.73818970]
[-0.05257172 168.82666016]
[-14.63856983 162.74191284]
[-20.57250786 148.09391785]
[-14.33388519 133.57305908]
[0.37603360 127.79432678]
[14.83011532 134.18612671]
[28.73267174 128.55416870]
[42.63522720 122.92221069]
[51.52626038 110.97235870]
[67.22184753 112.96211243]
[65.76905060 104.76608276]
[66.29457092 96.62191772]
[68.69170380 88.99114227]
[72.74982452 82.28805542]
[78.17056274 76.85729218]
[84.58856201 72.95623779]
[91.59545898 70.74333954]
[98.76551819 70.27257538]
[105.68140411 71.49449158]
[112.30989838 58.03852463]
[118.93840027 44.58255768]
[125.56689453 31.12659264]
[132.19538879 17.67062759]
[138.82389832 4.21466160]
[132.12138367 -10.08242512]
[135.52790833 -25.11236572]
[125.54518890 -36.30813217]
[110.32394409 -33.79468918]
[96.16922760 -39.93044662]
[87.59775543 -52.75749969]
[87.34464264 -68.18278503]
[95.49066925 -81.28415680]
[109.43646240 -87.88100433]
[124.73197174 -85.86830139]
[136.49645996 -75.88829803]
[140.97590637 -61.12557220]
[136.74095154 -46.29085922]
[146.72367859 -35.09509277]
[155.91786194 -36.97199249]
[165.11204529 -35.09509277]
[175.09477234 -46.29085922]
[185.07749939 -57.48662567]
[195.06022644 -68.68238831]
[186.22273254 -81.48963165]
[180.69577026 -96.02608490]
[178.79408264 -111.45232391]
[180.62316895 -126.87855530]
[186.07345581 -141.41603088]
[194.82688904 -154.22817993]
[206.37542725 -164.57875061]
[220.05056763 -171.87420654]
[235.06205750 -175.69763184]
[250.54351807 -175.83264160]
[265.60244751 -172.27561951]
[279.37173462 -165.23565674]
[289.11938477 -176.63667297]
[298.86703491 -188.03770447]
[308.61468506 -199.43872070]
[318.12304688 -211.04005432]
[327.38800049 -222.83670044]
[336.65295410 -234.63334656]
[345.91790771 -246.42997742]
[343.78314209 -262.08941650]
[353.41290283 -274.62109375]
[369.09405518 -276.59017944]
[381.52322388 -266.82846069]
[383.32641602 -251.12738037]
[373.43380737 -238.80210876]
[357.71453857 -237.16502380]
[348.44958496 -225.36839294]
[339.18463135 -213.57174683]
[329.91970825 -201.77511597]
[329.60247803 -196.95069885]
[326.20816040 -192.29132080]
[320.01571655 -189.69107056]
[310.26806641 -178.29003906]
[300.52041626 -166.88902283]
[290.77276611 -155.48800659]
[299.37985229 -143.83792114]
[305.16897583 -130.55218506]
[307.84426880 -116.30136108]
[307.26708984 -101.80555725]
[303.46331787 -87.79801941]
[296.62203979 -74.98803711]
[287.08630371 -64.02505493]
[275.33578491 -55.46572495]
[261.96282959 -49.74564743]
[247.64242554 -47.15719986]
[233.09819031 -47.83460617]
[219.06585693 -51.74696732]
[206.25599670 -58.69966507]
[196.27326965 -47.50389862]
[186.29054260 -36.30813217]
[176.30781555 -25.11236572]
[179.14712524 -8.11843395]
[169.54635620 6.52891111]
[152.27986145 10.84316063]
[145.65136719 24.29912567]
[139.02285767 37.75509262]
[132.39436340 51.21105576]
[125.76586151 64.66702271]
[119.13736725 78.12298584]
[131.09207153 98.53015900]
[124.10980225 122.80618286]
[100.29324341 135.24681091]
[100.29324341 150.24681091]
[100.29324341 165.24681091]
[100.29324341 180.24681091]
[100.29324341 195.24681091]
[100.29324341 210.24681091]
[100.29324341 225.24681091]
[100.29324341 240.24681091]
[100.29324341 255.24681091]
[100.29324341 270.24682617]
[114.83312988 274.30813599]
[127.73751068 282.14263916]
[138.04879761 293.16897583]
[145.00181580 306.56890869]
[148.08061218 321.34805298]
[147.05671692 336.40972900]
[142.00611877 350.63626099]
[133.30360413 362.97192383]
[121.59494019 372.50134277]
[107.74900055 378.51736450]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 36]
[23 34]
[24 33]
[25 32]
[45 128]
[46 127]
[47 126]
[48 125]
[49 124]
[50 123]
[52 64]
[53 63]
[66 120]
[67 119]
[68 118]
[69 117]
[81 104]
[82 103]
[83 102]
[84 101]
[85 98]
[86 97]
[87 96]
[88 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
