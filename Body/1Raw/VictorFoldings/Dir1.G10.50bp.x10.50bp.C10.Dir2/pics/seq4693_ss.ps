%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACACUCAUCAGGGGGGGGGGCAGCGCUAAGCUCGCACUGAUUUUUUACCUGAGUAGGCCUAGAAAUAAACxxxxxxxxxxACUCUUUCACCCACAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAACCCCCCCCCCACACUCACCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.90069580]
[71.19830322 349.88467407]
[59.48964310 340.35525513]
[50.78712082 328.01956177]
[45.73651886 313.79306030]
[44.71262741 298.73138428]
[47.79142761 283.95220947]
[54.74444962 270.55227661]
[65.05573273 259.52593994]
[77.96011353 251.69143677]
[92.50000000 247.63012695]
[92.50000000 232.63012695]
[92.50000000 217.63012695]
[92.50000000 202.63012695]
[92.50000000 187.63012695]
[92.50000000 172.63012695]
[92.50000000 157.63012695]
[92.50000000 142.63012695]
[92.50000000 127.63012695]
[92.50000000 112.63012695]
[80.32816315 103.86392212]
[66.10138702 108.61773682]
[51.87460327 113.37155151]
[41.23791885 125.08357239]
[26.71459961 121.77865601]
[12.48781967 126.53247070]
[6.91943979 141.14503479]
[-6.76406288 148.71443176]
[-22.10175705 145.66662598]
[-31.85165215 133.44068909]
[-31.41014481 117.80933380]
[-20.98570442 106.15322113]
[-5.50042915 103.97599792]
[7.73400497 112.30569458]
[21.96078491 107.55187988]
[31.57987785 96.17987823]
[47.12078857 99.14477539]
[61.34756851 94.39096069]
[75.57434845 89.63714600]
[87.75903320 87.33841705]
[96.87826538 91.89059448]
[102.94128418 78.17053986]
[109.00429535 64.45048523]
[95.19033051 70.29636383]
[80.54302979 67.06267548]
[70.47428894 55.94420242]
[68.70430756 41.04899597]
[75.88704681 27.88054276]
[89.36863708 21.30431938]
[104.16790009 23.75011253]
[114.81679535 34.31425095]
[117.38089752 49.09262466]
[125.63318634 36.56666183]
[133.88546753 24.04070091]
[136.01536560 15.08997917]
[142.44200134 11.34245968]
[150.95309448 -1.00911248]
[139.44392395 -10.64619064]
[128.88775635 -21.31867027]
[119.37736511 -32.93276215]
[110.99634552 -45.38639450]
[103.81834412 -58.57012558]
[97.90644073 -72.36808777]
[93.31259155 -86.65903473]
[90.07716370 -101.31735992]
[88.22859955 -116.21424103]
[87.78313446 -131.21878052]
[88.74469757 -146.19909668]
[91.10482788 -161.02354431]
[94.84278107 -175.56184387]
[99.92572021 -189.68623352]
[106.30895996 -203.27256775]
[113.93641663 -216.20146179]
[122.74104309 -228.35929871]
[132.64547729 -239.63922119]
[143.56266785 -249.94210815]
[155.39668274 -259.17739868]
[168.04350281 -267.26394653]
[181.39201355 -274.13067627]
[195.32487488 -279.71725464]
[209.71965027 -283.97457886]
[224.44984436 -286.86523438]
[239.38600159 -288.36380005]
[254.39685059 -288.45712280]
[269.35049438 -287.14437866]
[284.11547852 -284.43713379]
[298.56210327 -280.35913086]
[312.56335449 -274.94622803]
[325.99618530 -268.24600220]
[338.74258423 -260.31732178]
[350.69052124 -251.22988892]
[361.73498535 -241.06355286]
[371.77890015 -229.90765381]
[380.73403931 -217.86024475]
[388.52166748 -205.02719116]
[395.07333374 -191.52127075]
[400.33151245 -177.46118164]
[404.24993896 -162.97047424]
[406.79421997 -148.17652893]
[407.94198608 -133.20932007]
[407.68313599 -118.20040894]
[406.01992798 -103.28168488]
[402.96701050 -88.58426666]
[398.55123901 -74.23730469]
[392.81134033 -60.36689758]
[385.79782104 -47.09493637]
[377.57229614 -34.53805161]
[368.20706177 -22.80660629]
[357.78442383 -12.00369263]
[346.39596558 -2.22425151]
[334.14178467 6.44577360]
[321.12954712 13.93018818]
[307.47363281 20.16321754]
[293.29406738 25.09008598]
[278.71542358 28.66749191]
[263.86584473 30.86399841]
[248.87585449 31.66030312]
[233.87713623 31.04940605]
[219.00154114 29.03667450]
[204.37979126 25.63980103]
[190.14038086 20.88863373]
[176.40844727 14.82493019]
[163.30467224 7.50197792]
[154.79357910 19.85354996]
[146.41143799 32.29299164]
[138.15914917 44.81895065]
[129.90686035 57.34491348]
[122.72434998 70.51349640]
[116.66133118 84.23355103]
[110.59832001 97.95360565]
[107.50000000 112.63012695]
[107.50000000 127.63012695]
[107.50000000 142.63012695]
[107.50000000 157.63012695]
[107.50000000 172.63012695]
[107.50000000 187.63012695]
[107.50000000 202.63012695]
[107.50000000 217.63012695]
[107.50000000 232.63012695]
[107.50000000 247.63012695]
[122.03988647 251.69143677]
[134.94427490 259.52593994]
[145.25555420 270.55227661]
[152.20857239 283.95220947]
[155.28736877 298.73138428]
[154.26348877 313.79306030]
[149.21287537 328.01956177]
[140.51036072 340.35525513]
[128.80169678 349.88467407]
[114.95575714 355.90069580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 39]
[22 38]
[23 37]
[25 35]
[26 34]
[41 130]
[42 129]
[43 128]
[52 127]
[53 126]
[54 125]
[56 124]
[57 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
