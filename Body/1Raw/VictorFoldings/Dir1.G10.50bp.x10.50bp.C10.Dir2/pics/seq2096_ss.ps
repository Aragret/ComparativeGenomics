%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCUAUACGGGGGGGGGGCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCxxxxxxxxxxUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACAUACUAGUCACCCCCCCCCCCAGCCCUAUAC\
) } def
/len { sequence length } bind def

/coor [
[83.59860992 374.97491455]
[70.37841034 367.70245361]
[59.49160767 357.25543213]
[51.68047714 344.34619141]
[47.47759628 329.85488892]
[47.16952515 314.76953125]
[50.77726364 300.11871338]
[58.05484009 286.90133667]
[68.50604248 276.01855469]
[81.41830444 268.21240234]
[95.91124725 264.01513672]
[95.59918976 249.01837158]
[95.28713226 234.02162170]
[94.97507477 219.02485657]
[94.66301727 204.02810669]
[94.35095978 189.03135681]
[94.03890991 174.03460693]
[93.72685242 159.03784180]
[93.41479492 144.04109192]
[93.10273743 129.04434204]
[83.08647156 125.76922607]
[74.54039764 119.04712677]
[68.64408875 109.51551819]
[66.30753326 98.21150208]
[68.03775787 86.46012115]
[53.13585281 84.74743652]
[38.23395157 83.03474426]
[23.33205032 81.32205200]
[18.08454132 95.45453644]
[9.60680962 107.92015076]
[-1.60826135 117.99415588]
[-14.90864086 125.09087372]
[-29.52106285 128.79769897]
[-44.59598160 128.89912415]
[-59.25695801 125.38925171]
[-72.65162659 118.47214508]
[-84.00123596 108.54995728]
[-92.64593506 96.19954681]
[-98.08312988 82.13895416]
[-99.99671173 67.18563843]
[-98.27542877 52.20896912]
[-93.01935577 38.07966995]
[-84.53406525 25.61919975]
[-73.31288910 15.55199337]
[-60.00820923 8.46334553]
[-45.39354324 4.76538038]
[-30.31856728 4.67309332]
[-15.65971947 8.19184971]
[-2.26924872 15.11707306]
[9.07434177 25.04614067]
[17.71155167 37.40179062]
[23.14022255 51.46567917]
[25.04473877 66.42015076]
[39.94664001 68.13284302]
[54.84854507 69.84552765]
[69.75045013 71.55821991]
[81.83043671 62.66587067]
[84.62275696 47.92806625]
[87.41508484 33.19025803]
[90.20740509 18.45245171]
[92.99973297 3.71464658]
[95.79206085 -11.02315903]
[98.58438110 -25.76096535]
[88.53533173 -14.62468910]
[75.79789734 -6.70271683]
[61.36610413 -2.61328459]
[46.36623383 -2.67553616]
[31.96888542 -6.88461304]
[19.29763794 -14.91203499]
[9.34136963 -26.13133621]
[2.87707400 -39.66695023]
[0.40923107 -54.46255112]
[2.13043308 -69.36347198]
[7.90635633 -83.20683289]
[17.28624344 -94.91229248]
[29.53807831 -103.56633759]
[43.70571899 -108.49360657]
[58.68350983 -109.30957031]
[73.30256653 -105.95054626]
[86.42201996 -98.67867279]
[97.01799774 -88.06146240]
[104.26359558 -74.92749023]
[107.59335327 -60.30173492]
[106.74688721 -45.32294846]
[115.25798035 -57.67452240]
[123.76906586 -70.02609253]
[132.28015137 -82.37766266]
[130.80148315 -98.35243225]
[142.46850586 -109.36426544]
[158.33125305 -106.96582794]
[166.22120667 -92.99699402]
[160.08586121 -78.17346191]
[144.63172913 -73.86657715]
[136.12063599 -61.51500320]
[127.60955048 -49.16342926]
[119.09845734 -36.81185913]
[113.32218933 -22.96864128]
[110.52986145 -8.23083496]
[107.73754120 6.50697136]
[104.94521332 21.24477768]
[102.15289307 35.98258209]
[99.36056519 50.72039032]
[96.56823730 65.45819855]
[115.08487701 67.41449738]
[130.52508545 78.90726471]
[145.16857910 75.65643311]
[159.32090759 66.32111359]
[172.20915222 77.33607483]
[165.19247437 92.76988983]
[148.41940308 90.29993439]
[133.77590942 93.55076599]
[133.30786133 108.54345703]
[147.72007751 112.70134735]
[162.13229370 116.85923767]
[176.54450989 121.01712036]
[188.08787537 110.78216553]
[203.33569336 108.43536377]
[217.42245483 114.72557068]
[225.85311890 127.64561462]
[225.93748474 143.07275391]
[217.64865112 156.08422852]
[203.63153076 162.52813721]
[188.35896301 160.34826660]
[176.70434570 150.24017334]
[172.38662720 135.42933655]
[157.97441101 131.27145386]
[143.56219482 127.11356354]
[129.14997864 122.95567322]
[118.60475159 127.83220673]
[108.09949493 128.73228455]
[108.41154480 143.72903442]
[108.72360229 158.72578430]
[109.03565979 173.72254944]
[109.34771729 188.71929932]
[109.65977478 203.71604919]
[109.97183228 218.71279907]
[110.28388214 233.70956421]
[110.59593964 248.70631409]
[110.90799713 263.70306396]
[125.56298828 267.29382324]
[138.78880310 274.55609131]
[149.68367004 284.99468994]
[157.50476074 297.89788818]
[161.71884155 312.38595581]
[162.03855896 327.47106934]
[158.44212341 342.12466431]
[151.17475891 355.34765625]
[140.73196411 366.23849487]
[127.82573700 374.05462646]
[113.33604431 378.26309204]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[25 56]
[26 55]
[27 54]
[28 53]
[57 103]
[58 102]
[59 101]
[60 100]
[61 99]
[62 98]
[63 97]
[84 96]
[85 95]
[86 94]
[87 93]
[105 111]
[106 110]
[112 128]
[113 127]
[114 126]
[115 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
