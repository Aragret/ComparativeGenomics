%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUCUCCAUGGGGGGGGGGGCAUUUGGUAUUUUCGUCUGGGGGGUAUGCACGCGAUAGCAUUGCGAGACxxxxxxxxxxUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACCCCCCCCCCCAGCUAUCCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.81103516]
[71.19830322 365.79498291]
[59.48964310 356.26556396]
[50.78712082 343.92990112]
[45.73651886 329.70339966]
[44.71262741 314.64169312]
[47.79142761 299.86254883]
[54.74444962 286.46261597]
[65.05573273 275.43627930]
[77.96011353 267.60177612]
[92.50000000 263.54046631]
[92.50000000 248.54046631]
[92.50000000 233.54046631]
[92.50000000 218.54046631]
[92.50000000 203.54046631]
[92.50000000 188.54046631]
[92.50000000 173.54046631]
[92.50000000 158.54046631]
[92.50000000 143.54046631]
[92.50000000 128.54046631]
[92.50000000 113.54046631]
[88.79383850 99.00553131]
[81.61132812 85.83694458]
[74.42881775 72.66836548]
[67.10971832 59.57521057]
[59.65480423 46.55889893]
[52.19989395 33.54259109]
[38.62722015 25.41282845]
[39.01591492 10.52329636]
[31.56100273 -2.49301314]
[24.83416557 10.91406155]
[10.20352554 14.22228909]
[-1.63710296 5.01362371]
[-2.03317809 -9.98114681]
[9.30479908 -19.80205727]
[24.08914375 -17.27119446]
[11.43402386 -26.76637840]
[13.36672783 -41.53506088]
[-1.09821415 -47.31460953]
[-7.05152416 -61.31506348]
[-1.45246410 -75.06955719]
[-7.51547718 -88.78961182]
[-13.57849026 -102.50966644]
[-19.64150429 -116.22972107]
[-25.70451736 -129.94976807]
[-31.76753044 -143.66983032]
[-37.83054352 -157.38987732]
[-43.89355469 -171.10993958]
[-49.95656967 -184.82998657]
[-57.81399536 -197.60734558]
[-72.54599762 -203.37611389]
[-74.62949371 -218.12426758]
[-84.13784790 -229.72561646]
[-93.64620972 -241.32695007]
[-103.15456390 -252.92829895]
[-112.66292572 -264.52963257]
[-122.17128754 -276.13098145]
[-136.88793945 -284.54861450]
[-132.87324524 -301.02035522]
[-115.93384552 -301.72241211]
[-110.56994629 -285.63934326]
[-101.06158447 -274.03799438]
[-91.55322266 -262.43664551]
[-82.04486847 -250.83531189]
[-72.53650665 -239.23397827]
[-63.02814865 -227.63262939]
[-48.97624969 -222.69367981]
[-46.21265411 -207.11570740]
[-47.46205139 -222.06358337]
[-42.63060379 -236.26419067]
[-32.52431107 -247.34854126]
[-18.82912827 -253.46751404]
[-3.82971549 -253.60034180]
[9.97168541 -247.72485352]
[20.27269173 -236.82121277]
[25.35486412 -222.70840454]
[24.37038422 -207.74075317]
[17.48348236 -194.41519165]
[5.84304953 -184.95472717]
[-8.60902786 -180.93757629]
[-23.46182060 -183.03390503]
[-36.23651505 -190.89300537]
[-30.17350197 -177.17294312]
[-24.11048889 -163.45289612]
[-18.04747581 -149.73283386]
[-11.98446274 -136.01278687]
[-5.92144966 -122.29273224]
[0.14156325 -108.57267761]
[6.20457649 -94.85262299]
[12.26758957 -81.13256836]
[26.20748138 -76.01251221]
[32.55168533 -62.18479919]
[27.08678246 -47.59807205]
[39.30823517 -39.08423996]
[37.80919647 -23.33420753]
[44.57731247 -9.94792366]
[52.03222275 3.06838608]
[65.07167053 10.26713467]
[65.21620178 26.08768082]
[72.67111206 39.10398865]
[80.12602234 52.12030029]
[86.21891785 56.38906479]
[87.59740448 65.48585510]
[94.77991486 78.65444183]
[101.96241760 91.82302094]
[113.05216980 80.90638733]
[131.08493042 78.40885925]
[146.01924133 79.81116486]
[160.95355225 81.21346283]
[175.88786316 82.61576843]
[184.71160889 70.04449463]
[198.64558411 63.58387375]
[213.94165039 64.97178650]
[226.48519897 73.83489990]
[232.90211487 87.78907013]
[231.46626282 103.08069611]
[222.56387329 115.59641266]
[208.58966064 121.96955109]
[193.30261230 120.48577118]
[180.81486511 111.54419708]
[174.48554993 97.55007935]
[159.55123901 96.14777374]
[144.61694336 94.74546814]
[129.68263245 93.34317017]
[124.13697052 98.39249420]
[137.16874695 105.82032776]
[134.13148499 120.50960541]
[119.22257233 122.16020203]
[113.04565430 108.49114227]
[107.50000000 113.54046631]
[107.50000000 128.54046631]
[107.50000000 143.54046631]
[107.50000000 158.54046631]
[107.50000000 173.54046631]
[107.50000000 188.54046631]
[107.50000000 203.54046631]
[107.50000000 218.54046631]
[107.50000000 233.54046631]
[107.50000000 248.54046631]
[107.50000000 263.54046631]
[122.03988647 267.60177612]
[134.94427490 275.43627930]
[145.25555420 286.46261597]
[152.20857239 299.86254883]
[155.28736877 314.64169312]
[154.26348877 329.70339966]
[149.21287537 343.92990112]
[140.51036072 356.26556396]
[128.80169678 365.79498291]
[114.95575714 371.81103516]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 105]
[23 104]
[24 103]
[25 101]
[26 100]
[27 99]
[29 97]
[30 96]
[36 95]
[38 93]
[41 90]
[42 89]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[50 68]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
[107 124]
[108 123]
[109 122]
[110 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
