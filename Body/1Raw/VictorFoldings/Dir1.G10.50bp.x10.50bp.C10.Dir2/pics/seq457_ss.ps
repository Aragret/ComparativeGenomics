%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAACACGGGGGGGGGGCAGCCUAACCAGAUUUCAAAUUUUAUCUUUUGGCGGUAUGCACUUUUAACxxxxxxxxxxUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUAACCCCCCCCCCCCACCCUAACCC\
) } def
/len { sequence length } bind def

/coor [
[82.52398682 377.01855469]
[69.96575928 368.66741943]
[59.87953949 357.45495605]
[52.89934540 344.08605957]
[49.46396255 329.40106201]
[49.78933716 314.32308960]
[53.85502243 299.79998779]
[61.40544128 286.74462891]
[71.96597290 275.97775269]
[84.87276459 268.17611694]
[99.31449127 263.83016968]
[98.69051361 248.84313965]
[98.06653595 233.85612488]
[97.44255829 218.86911011]
[96.81858826 203.88209534]
[96.19461060 188.89508057]
[95.57063293 173.90806580]
[94.94665527 158.92103577]
[94.32267761 143.93402100]
[93.69869995 128.94700623]
[83.47902679 124.59050751]
[75.58267975 116.77587891]
[71.12010193 106.60208130]
[56.12741089 106.13404083]
[41.13471222 105.66600037]
[27.09983444 112.96892548]
[14.62018585 104.83826447]
[-0.37251055 104.37022400]
[-6.46420193 107.19844055]
[-12.19465351 106.57136536]
[-15.97549343 103.55792999]
[-30.93574142 102.46662140]
[-45.89599228 101.37531281]
[-60.85623932 100.28399658]
[-69.41654968 113.03612518]
[-83.21311188 119.78522491]
[-98.53472900 118.71582031]
[-111.25996399 110.11558533]
[-117.96578217 96.29793549]
[-116.84835815 80.97974396]
[-108.20827484 68.28153229]
[-94.36967468 61.61905670]
[-79.05506134 62.78448868]
[-66.38399506 71.46433258]
[-59.76493073 85.32375336]
[-44.80467987 86.41506195]
[-29.84443092 87.50637054]
[-14.88418293 88.59767914]
[0.09553158 89.37752533]
[15.08822727 89.84557343]
[28.05072784 82.50916290]
[41.60275650 90.67330170]
[56.59545135 91.14134216]
[71.58815002 91.60938263]
[86.35871887 73.70263672]
[109.50429535 71.94106293]
[117.75659180 59.41510010]
[126.00888062 46.88913727]
[133.86630249 34.11177826]
[141.32121277 21.09546852]
[148.77612305 8.07915974]
[156.23103333 -4.93714952]
[162.43644714 -18.59339142]
[167.33799744 -32.76994705]
[172.23954773 -46.94650650]
[177.14109802 -61.12306595]
[182.04264832 -75.29962158]
[186.94419861 -89.47618103]
[174.86570740 -80.58179474]
[160.23844910 -77.25865173]
[145.50256348 -80.06113434]
[133.11634827 -88.52172852]
[125.14608765 -101.22900391]
[122.92140198 -116.06311035]
[126.81341553 -130.54939270]
[136.17286682 -142.27119446]
[149.43836975 -149.27307129]
[164.39695740 -150.38696289]
[178.55319214 -145.42701721]
[189.54550171 -135.22068787]
[195.54011536 -121.47061157]
[195.53729248 -106.47200775]
[204.04838562 -118.82357788]
[212.55947876 -131.17515564]
[221.07057190 -143.52671814]
[229.58164978 -155.87829590]
[225.24685669 -170.90306091]
[231.63116455 -185.17802429]
[245.72010803 -191.96299744]
[260.86129761 -188.05430603]
[269.90557861 -175.29753113]
[268.58245850 -159.71601868]
[257.51669312 -148.66688538]
[241.93322754 -147.36720276]
[233.42213440 -135.01564026]
[224.91104126 -122.66406250]
[216.39996338 -110.31248474]
[207.88887024 -97.96091461]
[201.12075806 -84.57463074]
[196.21920776 -70.39807129]
[191.31765747 -56.22151566]
[186.41610718 -42.04495621]
[181.51455688 -27.86839867]
[176.61300659 -13.69184017]
[189.56552124 -21.25702477]
[204.55751038 -20.76676369]
[216.98811340 -12.37150860]
[223.04252625 1.35234189]
[220.86273193 16.19311333]
[211.11769104 27.59636307]
[196.79801941 32.06258011]
[182.29824829 28.22113419]
[172.06817627 17.25092125]
[169.24734497 2.51776075]
[161.79243469 15.53407001]
[154.33752441 28.55037880]
[146.88261414 41.56668854]
[147.48690796 45.10255051]
[146.36727905 49.10855865]
[143.32127380 52.75193787]
[138.53483582 55.14142609]
[130.28254700 67.66738892]
[122.03025818 80.19335175]
[127.30888367 88.51693726]
[129.56466675 98.11158752]
[128.54792786 107.91526794]
[124.37120819 116.84280396]
[117.49682617 123.90599823]
[108.68571472 128.32302856]
[109.30969238 143.31004333]
[109.93367004 158.29705811]
[110.55764771 173.28408813]
[111.18162537 188.27110291]
[111.80560303 203.25811768]
[112.42958069 218.24513245]
[113.05355835 233.23214722]
[113.67753601 248.21916199]
[114.30151367 263.20617676]
[129.05451965 266.33660889]
[142.56515503 273.03836060]
[153.98413086 282.89016724]
[162.59364319 295.27270508]
[167.85249329 309.40759277]
[169.43009949 324.40634155]
[167.22729492 339.32604980]
[161.38255310 353.22894287]
[152.26325989 365.24099731]
[140.44268799 374.60714722]
[126.66387939 380.73864746]
[111.79298401 383.25003052]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[23 54]
[24 53]
[25 52]
[27 50]
[28 49]
[31 48]
[32 47]
[33 46]
[34 45]
[56 123]
[57 122]
[58 121]
[59 117]
[60 116]
[61 115]
[62 114]
[63 104]
[64 103]
[65 102]
[66 101]
[67 100]
[68 99]
[82 98]
[83 97]
[84 96]
[85 95]
[86 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
