%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACUACGAGGGGGGGGGGUAGCCCUUAUGAAACUUAAGGGUCGAAGGUGGAUUUAGCAGUAAACUAAGxxxxxxxxxxAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUCCCCCCCCCCAAAACUAGGA\
) } def
/len { sequence length } bind def

/coor [
[131.44906616 667.61364746]
[117.60312653 661.59759521]
[105.89446259 652.06817627]
[97.19194031 639.73254395]
[92.14133453 625.50598145]
[91.11744690 610.44433594]
[94.19624329 595.66516113]
[101.14926147 582.26519775]
[111.46054840 571.23889160]
[124.36492920 563.40435791]
[138.90481567 559.34307861]
[138.90481567 544.34307861]
[138.90481567 529.34307861]
[138.90481567 514.34307861]
[138.90481567 499.34307861]
[138.90481567 484.34307861]
[138.90481567 469.34307861]
[138.90481567 454.34307861]
[138.90481567 439.34307861]
[138.90481567 424.34307861]
[137.81350708 409.38281250]
[135.63667297 394.54162598]
[133.45983887 379.70040894]
[131.28298950 364.85922241]
[119.21786499 356.20077515]
[116.79882812 341.18069458]
[125.96237946 328.58438110]
[123.78554535 313.74319458]
[121.60870361 298.90197754]
[119.43186951 284.06079102]
[117.25502777 269.21957397]
[115.07819366 254.37837219]
[101.82160187 247.64036560]
[94.99382782 234.22970581]
[97.40007782 219.19430542]
[108.32451630 208.33323669]
[106.14768219 193.49203491]
[103.97084045 178.65083313]
[101.79400635 163.80963135]
[92.29160309 152.33995056]
[97.94427490 137.56300354]
[95.76744080 122.72180176]
[93.59060669 107.88059998]
[89.37339020 100.94524384]
[91.52619171 92.70832825]
[89.65858459 77.82505035]
[77.46264648 68.13500977]
[75.78063965 53.01464081]
[85.09376526 41.44739532]
[83.22615814 26.56411362]
[73.83083344 13.83467770]
[79.92328644 0.24308908]
[78.05567169 -14.64019108]
[76.18806458 -29.52346992]
[74.32044983 -44.40674973]
[64.60703278 -52.95680237]
[63.38902664 -65.43620300]
[70.77767944 -75.06507111]
[61.64921188 -87.98721313]
[68.02310181 -101.44911194]
[66.46552277 -116.36802673]
[64.90794373 -131.28694153]
[63.35036087 -146.20585632]
[48.51835632 -149.12185669]
[35.20559692 -156.28160095]
[24.59584236 -167.04843140]
[17.63250351 -180.46495056]
[14.93475533 -195.33821106]
[16.74248123 -210.34565735]
[22.89493752 -224.15284729]
[32.84505463 -235.53207397]
[45.70807266 -243.47148132]
[60.34022141 -247.26510620]
[75.44042206 -246.57562256]
[89.66596985 -241.46435547]
[101.75194550 -232.38577271]
[110.62367249 -220.14714050]
[115.49227142 -205.83673096]
[115.92484283 -190.72698975]
[111.88291931 -176.16146851]
[103.72589874 -163.43533325]
[92.17910767 -153.68017578]
[78.26927185 -147.76342773]
[79.82685089 -132.84451294]
[81.38443756 -117.92560577]
[82.94201660 -103.00669861]
[91.95907593 -91.15165710]
[85.69659424 -76.62265778]
[96.75846100 -63.03461075]
[89.20372772 -46.27436447]
[91.07134247 -31.39108467]
[92.93895721 -16.50780487]
[94.80657196 -1.62452400]
[104.06830597 10.04036045]
[98.10943604 24.69650078]
[99.97705078 39.57978058]
[111.85943604 48.48732758]
[113.96548462 63.55448532]
[104.54186249 75.95743561]
[106.40947723 90.84071350]
[108.43180847 105.70375824]
[110.60864258 120.54496765]
[112.78548431 135.38616943]
[122.44358826 147.91738892]
[116.63520813 161.63278198]
[118.81204987 176.47399902]
[120.98888397 191.31520081]
[123.16571808 206.15640259]
[136.74900818 213.42279053]
[143.37165833 227.13388062]
[140.68264771 241.94041443]
[129.91940308 252.20152283]
[132.09623718 267.04272461]
[134.27307129 281.88394165]
[136.44990540 296.72515869]
[138.62675476 311.56634521]
[140.80358887 326.40756226]
[153.19847107 335.84176636]
[155.19467163 350.92388916]
[146.12420654 362.68237305]
[148.30104065 377.52359009]
[150.47787476 392.36477661]
[152.65470886 407.20599365]
[161.92427063 395.41296387]
[176.56866455 392.16619873]
[189.95385742 398.93646240]
[196.01620483 412.65682983]
[192.00942993 427.11178589]
[179.74861145 435.75311279]
[164.78804016 434.66619873]
[153.90481567 424.34307861]
[153.90481567 439.34307861]
[153.90481567 454.34307861]
[153.90481567 469.34307861]
[153.90481567 484.34307861]
[153.90481567 499.34307861]
[153.90481567 514.34307861]
[153.90481567 529.34307861]
[153.90481567 544.34307861]
[153.90481567 559.34307861]
[168.44470215 563.40435791]
[181.34909058 571.23889160]
[191.66036987 582.26519775]
[198.61338806 595.66516113]
[201.69218445 610.44433594]
[200.66830444 625.50598145]
[195.61769104 639.73254395]
[186.91517639 652.06817627]
[175.20651245 661.59759521]
[161.36056519 667.61364746]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 123]
[22 122]
[23 121]
[24 120]
[27 117]
[28 116]
[29 115]
[30 114]
[31 113]
[32 112]
[36 108]
[37 107]
[38 106]
[39 105]
[41 103]
[42 102]
[43 101]
[45 100]
[46 99]
[49 96]
[50 95]
[52 93]
[53 92]
[54 91]
[55 90]
[58 88]
[60 86]
[61 85]
[62 84]
[63 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
