%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAUGAACCAGGGGGGGGGGUAACCAAUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAxxxxxxxxxxACUACCUGACUCCUACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCCCCCCCCCCCAGUGAACCA\
) } def
/len { sequence length } bind def

/coor [
[85.27367401 404.54705811]
[72.05347443 397.27459717]
[61.16667175 386.82757568]
[53.35554123 373.91833496]
[49.15266037 359.42703247]
[48.84458542 344.34167480]
[52.45232773 329.69085693]
[59.72990036 316.47348022]
[70.18110657 305.59069824]
[83.09336853 297.78457642]
[97.58630371 293.58728027]
[97.27425385 278.59051514]
[96.96219635 263.59378052]
[96.65013885 248.59701538]
[96.33808136 233.60026550]
[96.02602386 218.60351562]
[95.71396637 203.60675049]
[95.40191650 188.61000061]
[95.08985901 173.61325073]
[94.77780151 158.61650085]
[94.30976105 143.62379456]
[93.68578339 128.63677979]
[93.06180573 113.64976501]
[90.26947784 98.91195679]
[85.36792755 84.73540497]
[80.46637726 70.55884552]
[65.95639801 74.38932800]
[51.20073318 77.12476349]
[36.28190613 78.74984741]
[21.28335762 79.25550079]
[6.28895760 78.63889313]
[-8.61743355 76.90346527]
[-23.35245514 74.05892944]
[-37.83369827 70.12119293]
[-51.98018265 65.11227417]
[-65.71278381 59.06019211]
[-78.95471954 51.99878311]
[-91.63191986 43.96754456]
[-103.67349243 35.01139069]
[-115.01210022 25.18040848]
[-125.58432770 14.52957439]
[-135.33103943 3.11845517]
[-144.19775391 -8.98913383]
[-152.13485718 -21.72547913]
[-159.09797668 -35.01935577]
[-165.04817200 -48.79641724]
[-169.95216370 -62.97961807]
[-173.78251648 -77.48963165]
[-176.51782227 -92.24532318]
[-178.14277649 -107.16416168]
[-178.64830017 -122.16271210]
[-178.03155518 -137.15710449]
[-176.29600525 -152.06349182]
[-173.45133972 -166.79847717]
[-169.51347351 -181.27969360]
[-164.50442505 -195.42613220]
[-158.45222473 -209.15867615]
[-151.39070129 -222.40054321]
[-143.35934448 -235.07768250]
[-134.40309143 -247.11917114]
[-124.57200623 -258.45770264]
[-113.92107391 -269.02981567]
[-102.50987244 -278.77645874]
[-90.40220642 -287.64303589]
[-77.66578674 -295.58004761]
[-64.37184906 -302.54306030]
[-50.59473419 -308.49313354]
[-36.41149521 -313.39697266]
[-21.90144348 -317.22720337]
[-7.14573097 -319.96237183]
[7.77312136 -321.58721924]
[22.77168083 -322.09259033]
[37.76606750 -321.47570801]
[52.67243195 -319.74002075]
[67.40740204 -316.89523315]
[81.88857269 -312.95724487]
[96.03497314 -307.94808960]
[109.76747131 -301.89575195]
[123.00927734 -294.83410645]
[135.68634033 -286.80264282]
[147.72775269 -277.84628296]
[159.06617737 -268.01510620]
[169.63822937 -257.36407471]
[179.38473511 -245.95278931]
[188.25123596 -233.84504700]
[196.18812561 -221.10855103]
[203.15100098 -207.81455994]
[209.10095215 -194.03738403]
[214.00468445 -179.85411072]
[217.83479309 -165.34402466]
[220.56983948 -150.58828735]
[222.19453430 -135.66941833]
[222.69978333 -120.67085266]
[222.08277893 -105.67646790]
[220.34695435 -90.77012634]
[217.50202942 -76.03517914]
[213.56391907 -61.55403900]
[208.55462646 -47.40768814]
[202.50216675 -33.67524338]
[195.44041443 -20.43349838]
[187.40884399 -7.75650883]
[178.45237732 4.28482866]
[168.62109375 15.62317371]
[157.96997070 26.19511795]
[146.55859375 35.94153595]
[134.45077515 44.80792618]
[121.71421814 52.74469757]
[108.42015839 59.70746613]
[94.64293671 65.65729523]
[99.54448700 79.83384705]
[104.44603729 94.01040649]
[110.48293304 88.40205383]
[117.58975220 83.95642853]
[125.59356689 80.82223511]
[134.30325317 79.12523651]
[148.94674683 82.37606049]
[164.41725159 76.93585205]
[176.68597412 87.81750488]
[173.13192749 103.82689667]
[157.41119385 108.49494934]
[145.69592285 97.01956177]
[131.05242920 93.76873779]
[125.30152893 98.58300018]
[127.88919830 113.35810852]
[113.79972076 108.21152496]
[108.04882050 113.02578735]
[108.67279816 128.01280212]
[109.29677582 142.99981689]
[112.79939270 151.50767517]
[109.77455139 158.30444336]
[110.08660889 173.30119324]
[110.39866638 188.29794312]
[110.71072388 203.29469299]
[111.02278137 218.29145813]
[111.33483887 233.28820801]
[111.64688873 248.28495789]
[111.95894623 263.28170776]
[112.27100372 278.27847290]
[112.58306122 293.27520752]
[127.23805237 296.86599731]
[140.46386719 304.12823486]
[151.35873413 314.56683350]
[159.17982483 327.47006226]
[163.39389038 341.95812988]
[163.71362305 357.04321289]
[160.11718750 371.69680786]
[152.84982300 384.91983032]
[142.40702820 395.81066895]
[129.50079346 403.62677002]
[115.01110840 407.83526611]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 128]
[22 127]
[23 126]
[24 111]
[25 110]
[26 109]
[115 122]
[116 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
