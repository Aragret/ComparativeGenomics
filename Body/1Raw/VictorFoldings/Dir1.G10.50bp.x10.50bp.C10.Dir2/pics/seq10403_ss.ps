%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUCUGUGCUGGGGGGGGGGAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAxxxxxxxxxxUCUUUAACUCCACCAUUAGCACCCAAAGCUAAGAUUCUAAUUUAAACUAUCCCCCCCCCCUCUCUGUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 383.31240845]
[71.19830322 377.29638672]
[59.48964310 367.76696777]
[50.78712082 355.43130493]
[45.73651886 341.20477295]
[44.71262741 326.14309692]
[47.79142761 311.36392212]
[54.74444962 297.96398926]
[65.05573273 286.93768311]
[77.96011353 279.10314941]
[92.50000000 275.04183960]
[92.50000000 260.04183960]
[92.50000000 245.04183960]
[92.50000000 230.04183960]
[92.50000000 215.04183960]
[92.50000000 200.04183960]
[92.50000000 185.04183960]
[92.50000000 170.04183960]
[92.50000000 155.04183960]
[92.50000000 140.04183960]
[92.50000000 125.04184723]
[87.80451202 123.12171936]
[83.56829834 120.33084106]
[79.95089722 116.77430725]
[66.16851807 122.69427490]
[52.38613510 128.61424255]
[40.21900940 140.42091370]
[25.50555611 131.99769592]
[29.52649879 115.52746582]
[46.46617126 114.83185577]
[60.24855423 108.91189575]
[74.03093719 102.99192810]
[74.27597046 86.99093628]
[84.35135651 72.64816284]
[71.25820160 65.32905579]
[58.16504669 58.00995255]
[45.07189178 50.69084549]
[31.97873878 43.37174225]
[21.58411026 54.29888535]
[8.79814148 62.29700089]
[-5.57543230 66.86331177]
[-20.63307571 67.71077728]
[-35.42825317 64.78612518]
[-49.03092575 58.27320862]
[-60.58601761 48.58142853]
[-69.36716461 36.32001495]
[-74.82238770 22.25973892]
[-76.60874939 7.28443480]
[-74.61397552 -7.66453409]
[-68.96343994 -21.64746475]
[-60.01235962 -33.78537750]
[-48.32339096 -43.31526947]
[-34.63132477 -49.63809204]
[-19.79684448 -52.35637665]
[-4.75246716 -51.29925919]
[9.55610943 -46.53318787]
[22.22943497 -38.35775757]
[32.47085571 -27.28688812]
[39.63658142 -14.01650238]
[43.27617645 0.61921370]
[43.16084671 15.70024490]
[39.29784393 30.27858734]
[52.39099884 37.59769058]
[65.48415375 44.91679764]
[78.57730865 52.23590469]
[91.67046356 59.55500793]
[83.68910217 46.85469818]
[72.62097168 36.73064423]
[65.74012756 23.40195656]
[63.89682388 8.51564598]
[67.31884766 -6.08879805]
[75.58332825 -18.60671616]
[87.66904449 -27.49127960]
[102.08257294 -31.64463043]
[117.04283905 -30.55354309]
[130.70121765 -24.35284233]
[141.36994934 -13.80874252]
[147.73072815 -0.22417073]
[148.99752808 14.72224045]
[145.01383972 29.18357468]
[136.27189636 41.37285614]
[123.85079956 49.78438568]
[114.11083221 61.19197464]
[128.12754822 55.85046387]
[142.14425659 50.50894928]
[156.16098022 45.16743851]
[170.17768860 39.82592392]
[169.31483459 24.06111526]
[173.35096741 8.81737995]
[181.88105774 -4.42227268]
[194.06344604 -14.37362385]
[208.70297241 -20.07580757]
[224.36811829 -20.98407555]
[239.53103638 -17.02182579]
[252.71656799 -8.58689594]
[262.64572144 3.48833966]
[276.54827881 -2.14361691]
[290.45083618 -7.77557373]
[304.35339355 -13.40753078]
[318.25595093 -19.03948784]
[322.90203857 -33.97093201]
[336.08673096 -42.37910080]
[351.58468628 -40.29391479]
[362.07818604 -28.69993401]
[362.61254883 -13.07148361]
[352.93545532 -0.78783810]
[337.61614990 2.35104012]
[323.88790894 -5.13693094]
[309.98535156 0.49502566]
[296.08279419 6.12698221]
[282.18023682 11.75893879]
[268.27767944 17.39089584]
[269.63513184 31.61253738]
[266.91772461 45.65424347]
[260.33789062 58.37100220]
[250.42337036 68.72325897]
[237.97488403 75.86187744]
[224.00155640 79.19781494]
[209.63900757 78.45069122]
[196.05712891 73.67234039]
[184.36476135 65.24332428]
[175.51919556 53.84263611]
[161.50248718 59.18415070]
[147.48577881 64.52566528]
[133.46905518 69.86717224]
[119.45234680 75.20868683]
[128.24407959 89.39569855]
[128.32301331 105.36356354]
[120.41623688 118.39910126]
[107.50000000 125.04184723]
[107.50000000 140.04183960]
[107.50000000 155.04183960]
[107.50000000 170.04183960]
[107.50000000 185.04183960]
[107.50000000 200.04183960]
[107.50000000 215.04183960]
[107.50000000 230.04183960]
[107.50000000 245.04183960]
[107.50000000 260.04183960]
[107.50000000 275.04183960]
[122.03988647 279.10314941]
[134.94427490 286.93768311]
[145.25555420 297.96398926]
[152.20857239 311.36392212]
[155.28736877 326.14309692]
[154.26348877 341.20477295]
[149.21287537 355.43130493]
[140.51036072 367.76696777]
[128.80169678 377.29638672]
[114.95575714 383.31240845]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 32]
[25 31]
[26 30]
[34 66]
[35 65]
[36 64]
[37 63]
[38 62]
[83 126]
[84 125]
[85 124]
[86 123]
[87 122]
[96 112]
[97 111]
[98 110]
[99 109]
[100 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
