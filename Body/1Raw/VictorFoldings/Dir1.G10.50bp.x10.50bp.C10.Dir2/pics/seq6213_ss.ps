%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUACAGUCGGGGGGGGGGCAAUGCUUCACUCAGCCAUUUUACCUCACCCCCACUGAUGUUCGCCGACCxxxxxxxxxxACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCUACUCAUCGCACUACCCCCCCCCCAUUUACACUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 457.70968628]
[71.19830322 451.69366455]
[59.48964310 442.16424561]
[50.78712082 429.82855225]
[45.73651886 415.60205078]
[44.71262741 400.54037476]
[47.79142761 385.76119995]
[54.74444962 372.36126709]
[65.05573273 361.33493042]
[77.96011353 353.50042725]
[92.50000000 349.43911743]
[92.50000000 334.43911743]
[92.50000000 319.43911743]
[92.50000000 304.43911743]
[92.50000000 289.43911743]
[92.50000000 274.43911743]
[92.50000000 259.43911743]
[92.50000000 244.43911743]
[92.50000000 229.43911743]
[92.50000000 214.43911743]
[80.36157990 205.84861755]
[75.55226898 191.58906555]
[80.11502075 177.06204224]
[92.50000000 167.90133667]
[92.50000000 152.90133667]
[92.50000000 137.90133667]
[80.81522369 134.40768433]
[70.58966827 127.33699036]
[62.90876389 117.26278687]
[58.64122009 105.08431244]
[58.34267426 91.94692230]
[62.18796158 79.13445282]
[47.86536407 74.67763519]
[33.54276657 70.22082520]
[19.22016907 65.76400757]
[10.68720245 78.24118042]
[-1.14541578 87.64759064]
[-15.22553825 93.14682770]
[-30.30116844 94.24989319]
[-45.03179550 90.85871124]
[-58.10757446 83.27482605]
[-68.36582184 72.17258453]
[-74.89438629 58.53919601]
[-77.11273956 43.58692932]
[-74.82363129 28.64532852]
[-68.23061371 15.04299259]
[-57.91992950 3.98943281]
[-44.80839920 -3.53247714]
[-30.06188774 -6.85389376]
[-14.99164677 -5.67947912]
[-0.93771183 -0.11366116]
[10.85025024 9.34865093]
[19.32406235 21.86607552]
[23.73023796 36.32557297]
[23.67698479 51.44141006]
[37.99958420 55.89822769]
[52.32217789 60.35504150]
[66.64477539 64.81185913]
[78.99635315 56.30076599]
[79.93197632 41.32997513]
[80.86760712 26.35918427]
[66.29838562 22.59963417]
[52.70405960 16.15053749]
[40.57606125 7.24502468]
[30.35280800 -3.79497528]
[22.40386391 -16.57037354]
[17.01658058 -30.61934662]
[14.38570118 -45.43403625]
[14.60633373 -60.47889709]
[17.67049980 -75.21006775]
[23.46743393 -89.09502411]
[31.78758049 -101.63183594]
[42.33016968 -112.36730957]
[54.71409225 -120.91335297]
[68.49168396 -126.96104431]
[83.16488647 -130.29174805]
[98.20326996 -130.78507996]
[113.06321716 -128.42320251]
[127.20754242 -123.29148102]
[140.12493896 -115.57543945]
[151.34844971 -105.55400085]
[160.47236633 -93.58943176]
[167.16683960 -80.11425018]
[171.18988037 -65.61557770]
[172.39607239 -50.61752319]
[170.74177551 -35.66226196]
[166.28683472 -21.29041481]
[159.19226074 -8.02151871]
[149.71453857 3.66476655]
[138.19627380 13.34598827]
[125.05384827 20.67217636]
[110.76234436 25.37849426]
[95.83840179 27.29481316]
[94.90277100 42.26560211]
[93.96714020 57.23639679]
[105.72863770 58.11302948]
[116.56469727 62.09462357]
[125.69161224 68.74818420]
[132.48956299 77.45342255]
[136.54411316 87.45853424]
[151.40716553 85.43619537]
[166.27021790 83.41386414]
[181.13325500 81.39152527]
[195.99630737 79.36919403]
[210.85934448 77.34686279]
[217.28074646 63.31941223]
[230.27888489 55.00967789]
[245.70613098 55.06926727]
[258.63970947 63.47916412]
[264.95254517 77.55580139]
[262.63024902 92.80737305]
[252.41383362 104.36715698]
[237.56335449 108.54647827]
[222.81752014 104.01171875]
[212.88168335 92.20990753]
[198.01864624 94.23223877]
[183.15559387 96.25457764]
[168.29254150 98.27690887]
[153.42950439 100.29924774]
[138.56645203 102.32157898]
[136.63598633 112.27050018]
[132.18482971 121.37516022]
[125.51923370 129.00912476]
[117.09781647 134.64715576]
[107.50000000 137.90133667]
[107.50000000 152.90133667]
[107.50000000 167.90133667]
[119.88497925 177.06204224]
[124.44773102 191.58906555]
[119.63842010 205.84861755]
[107.50000000 214.43911743]
[107.50000000 229.43911743]
[107.50000000 244.43911743]
[107.50000000 259.43911743]
[107.50000000 274.43911743]
[107.50000000 289.43911743]
[107.50000000 304.43911743]
[107.50000000 319.43911743]
[107.50000000 334.43911743]
[107.50000000 349.43911743]
[122.03988647 353.50042725]
[134.94427490 361.33493042]
[145.25555420 372.36126709]
[152.20857239 385.76119995]
[155.28736877 400.54037476]
[154.26348877 415.60205078]
[149.21287537 429.82855225]
[140.51036072 442.16424561]
[128.80169678 451.69366455]
[114.95575714 457.70968628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 127]
[25 126]
[26 125]
[32 58]
[33 57]
[34 56]
[35 55]
[59 95]
[60 94]
[61 93]
[100 120]
[101 119]
[102 118]
[103 117]
[104 116]
[105 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
