%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUAAUUAUAACAGGGGGGGGGGUUCACAGCCACAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUxxxxxxxxxxCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCCCCCCCCCCCAUAAUUAUAACA\
) } def
/len { sequence length } bind def

/coor [
[83.19760895 372.70001221]
[69.32347870 366.85174561]
[56.96867371 358.24636841]
[46.67330170 347.26007080]
[38.88742447 334.37310791]
[33.95140839 320.14883423]
[32.08104324 305.20910645]
[33.35808182 290.20703125]
[37.72670364 275.79840088]
[44.99593353 262.61309814]
[54.84798813 251.22753906]
[66.85217285 242.13946533]
[80.48373413 235.74615479]
[95.14673615 232.32710266]
[94.84660339 217.33010864]
[94.54647064 202.33309937]
[94.24633789 187.33610535]
[93.94620514 172.33911133]
[93.64607239 157.34211731]
[93.34593964 142.34512329]
[93.04581451 127.34812164]
[92.74568176 112.35112000]
[85.67892456 100.28660583]
[92.25732422 87.94901276]
[91.95719147 72.95201111]
[91.65705872 57.95501709]
[91.35692596 42.95801926]
[76.36483002 42.34326553]
[61.43809891 40.81567383]
[46.63225937 38.38092804]
[32.00239563 35.04808426]
[17.60292244 30.82954216]
[3.48741508 25.74099731]
[-10.29161835 19.80137634]
[-23.68291855 13.03277493]
[-36.63666916 5.46037531]
[-49.10467529 -2.88765359]
[-61.04056549 -11.98025703]
[-72.39993286 -21.78360939]
[-83.14051056 -32.26123810]
[-93.22235870 -43.37417221]
[-102.60795593 -55.08106613]
[-111.26239777 -67.33837128]
[-119.15348816 -80.10048676]
[-126.25186920 -93.31993866]
[-132.53112793 -106.94754028]
[-137.96791077 -120.93261719]
[-142.54200745 -135.22311401]
[-146.23637390 -149.76589966]
[-149.03727722 -164.50685120]
[-150.93431091 -179.39114380]
[-151.92041016 -194.36340332]
[-151.99189758 -209.36793518]
[-151.14851379 -224.34890747]
[-149.39340210 -239.25059509]
[-146.73307800 -254.01756287]
[-143.17744446 -268.59487915]
[-138.73973083 -282.92834473]
[-133.43646240 -296.96456909]
[-127.28733063 -310.65139771]
[-120.31523895 -323.93789673]
[-112.54611206 -336.77462769]
[-104.00886536 -349.11383057]
[-94.73523712 -360.90963745]
[-84.75974274 -372.11813354]
[-74.11949158 -382.69763184]
[-62.85405350 -392.60876465]
[-51.00534821 -401.81469727]
[-38.61745071 -410.28112793]
[-25.73644447 -417.97662354]
[-12.41024780 -424.87252808]
[1.31156290 -430.94317627]
[15.37794209 -436.16598511]
[29.73656273 -440.52154541]
[44.33400726 -443.99365234]
[59.11597443 -446.56936646]
[74.02747345 -448.23910522]
[89.01303101 -448.99670410]
[104.01689911 -448.83929443]
[118.98326111 -447.76748657]
[133.85644531 -445.78524780]
[148.58111572 -442.89996338]
[163.10250854 -439.12237549]
[177.36659241 -434.46652222]
[191.32029724 -428.94973755]
[204.91172791 -422.59255981]
[218.09031677 -415.41857910]
[230.80702209 -407.45455933]
[243.01457214 -398.73007202]
[254.66752625 -389.27755737]
[265.72253418 -379.13226318]
[276.13848877 -368.33184814]
[285.87664795 -356.91653442]
[294.90075684 -344.92877197]
[303.17724609 -332.41317749]
[310.67535400 -319.41625977]
[317.36715698 -305.98641968]
[323.22775269 -292.17361450]
[328.23541260 -278.02920532]
[332.37139893 -263.60580444]
[335.62042236 -248.95709229]
[337.97033691 -234.13754272]
[339.41244507 -219.20231628]
[339.94134521 -204.20693970]
[339.55505371 -189.20722961]
[338.25506592 -174.25894165]
[336.04617310 -159.41773987]
[332.93661499 -144.73878479]
[328.93795776 -130.27671814]
[324.06506348 -116.08531952]
[318.33605957 -102.21739197]
[311.77224731 -88.72452545]
[304.39810181 -75.65690613]
[296.24099731 -63.06315613]
[287.33129883 -50.99012375]
[277.70214844 -39.48271561]
[267.38937378 -28.58374977]
[256.43133545 -18.33376312]
[244.86878967 -8.77089024]
[232.74476624 0.06929456]
[220.10435486 8.15390587]
[206.99459839 15.45286655]
[193.46423340 21.93902588]
[179.56361389 27.58825302]
[165.34446716 32.37953186]
[150.85964966 36.29504395]
[136.16308594 39.32021332]
[121.30941772 41.44379807]
[106.35392761 42.65788651]
[106.65406036 57.65488434]
[106.95418549 72.65187836]
[107.25431824 87.64888000]
[114.32107544 99.71339417]
[107.74267578 112.05098724]
[108.04280853 127.04798889]
[108.34294128 142.04498291]
[108.64307404 157.04197693]
[108.94320679 172.03897095]
[109.24333954 187.03598022]
[109.54347229 202.03297424]
[109.84359741 217.02996826]
[110.14373016 232.02696228]
[124.93179321 234.85662842]
[138.80822754 240.69941711]
[151.16641235 249.29994202]
[161.46611023 260.28219604]
[169.25704956 273.16610718]
[174.19866943 287.38839722]
[176.07490540 302.32739258]
[174.80377197 317.32998657]
[170.44082642 331.74035645]
[163.17677307 344.92849731]
[153.32920837 356.31793213]
[141.32859802 365.41073608]
[127.69955444 371.80938721]
[113.03789520 375.23422241]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[24 132]
[25 131]
[26 130]
[27 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
