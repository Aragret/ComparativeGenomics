%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUACCAACGGGGGGGGGGACCUAUUCUGAUUUUUCGGUCACCCUGAAGUUUAUAUUCUUAUCCUACCAxxxxxxxxxxAUCUACUCAUCUUCCUAAUUACCAUACUAAUCUUAGUUACCGCUAACAACCCCCCCCCCCCUAUUCCAAC\
) } def
/len { sequence length } bind def

/coor [
[62.72246170 375.41171265]
[49.50226593 368.13925171]
[38.61545944 357.69223022]
[30.80433083 344.78298950]
[26.60144997 330.29168701]
[26.29337692 315.20632935]
[29.90111732 300.55551147]
[37.17869186 287.33813477]
[47.62989807 276.45535278]
[60.54216003 268.64923096]
[75.03509521 264.45193481]
[74.72303772 249.45516968]
[74.41098785 234.45841980]
[74.09893036 219.46166992]
[73.78687286 204.46492004]
[73.47481537 189.46815491]
[73.16275787 174.47140503]
[72.85070038 159.47465515]
[72.53865051 144.47790527]
[72.22659302 129.48114014]
[57.40929031 131.81517029]
[43.15269852 127.15151978]
[32.57943344 116.51168823]
[28.00535583 102.22610474]
[30.43232346 87.42374420]
[39.32875824 75.34676361]
[52.74607849 68.64038849]
[67.74548340 68.77349854]
[81.04167175 75.71694946]
[89.72249603 87.95025635]
[86.93017578 73.21244812]
[84.13784790 58.47464371]
[81.34552765 43.73683929]
[65.70779419 38.46047211]
[54.91221237 26.10122681]
[51.82172012 10.08002567]
[57.18365479 -5.23113680]
[69.45180511 -15.70224380]
[66.35348511 -30.37876892]
[63.25516129 -45.05529404]
[48.35054398 -47.90627670]
[35.70703506 -56.22400665]
[27.23418617 -68.71498108]
[24.19735527 -83.45829773]
[27.02881050 -98.20101166]
[35.26649857 -110.70244598]
[47.62912369 -119.07471466]
[44.53079987 -133.75123596]
[41.43247986 -148.42776489]
[38.33415604 -163.10429382]
[23.33138275 -162.22428894]
[8.36502838 -163.59027100]
[-6.23055077 -167.17172241]
[-20.12928391 -172.88861084]
[-33.02066803 -180.61323547]
[-44.61670685 -190.17301941]
[-54.65834045 -201.35440063]
[-62.92123032 -213.90757751]
[-69.22078705 -227.55210876]
[-73.41626740 -241.98318481]
[-75.41395569 -256.87838745]
[-75.16921234 -271.90493774]
[-72.68750763 -286.72717285]
[-68.02428436 -301.01394653]
[-61.28372192 -314.44610596]
[-52.61640549 -326.72354126]
[-42.21596527 -337.57196045]
[-30.31475258 -346.74905396]
[-17.17864418 -354.04974365]
[-3.10110521 -359.31097412]
[11.60336590 -362.41522217]
[26.60626602 -363.29306030]
[41.57242584 -361.92495728]
[56.16749573 -358.34143066]
[70.06541443 -352.62255859]
[82.95569611 -344.89608765]
[94.55037689 -335.33465576]
[104.59041595 -324.15185547]
[112.85151672 -311.59750366]
[119.14913177 -297.95205688]
[123.34255981 -283.52041626]
[125.33811951 -268.62490845]
[125.09123993 -253.59838867]
[122.60742188 -238.77650452]
[117.94216156 -224.49038696]
[111.19969177 -211.05920410]
[102.53062439 -198.78300476]
[92.12863922 -187.93606567]
[80.22612000 -178.76068115]
[67.08897400 -171.46183777]
[53.01068115 -166.20260620]
[56.10900497 -151.52609253]
[59.20732498 -136.84956360]
[62.30564880 -122.17303467]
[76.99745178 -119.51215363]
[89.58531189 -111.40714264]
[98.13417816 -99.06689453]
[101.31573486 -84.35414124]
[98.61473846 -69.50428009]
[90.41213226 -56.78578186]
[77.93168640 -48.15361786]
[81.03000641 -33.47709274]
[84.12833405 -18.80056572]
[97.39413452 -15.41267395]
[107.94783020 -6.58664846]
[113.68391418 5.99130821]
[113.42590332 19.87937546]
[107.16714478 32.35410690]
[96.08332825 40.94451523]
[98.87565613 55.68231964]
[101.66797638 70.42012787]
[104.46030426 85.15792847]
[114.67378235 96.14359283]
[129.16938782 100.00075531]
[143.66497803 103.85791779]
[158.16056824 107.71507263]
[172.65617371 111.57223511]
[188.33958435 106.78028870]
[200.14503479 118.16287994]
[195.92808533 134.01057434]
[180.02677917 138.02061462]
[168.79901123 126.06783295]
[154.30342102 122.21067047]
[139.80781555 118.35350800]
[125.31221771 114.49635315]
[110.81662750 110.63919067]
[104.91830444 115.27166748]
[107.04369354 130.12033081]
[93.12166595 124.53661346]
[87.22334290 129.16909790]
[87.53540039 144.16584778]
[87.84745789 159.16259766]
[88.15951538 174.15934753]
[88.47157288 189.15611267]
[88.78362274 204.15286255]
[89.09568024 219.14961243]
[89.40773773 234.14636230]
[89.71979523 249.14312744]
[90.03185272 264.13986206]
[104.68684387 267.73065186]
[117.91265106 274.99288940]
[128.80752563 285.43148804]
[136.62861633 298.33471680]
[140.84268188 312.82278442]
[141.16241455 327.90786743]
[137.56597900 342.56146240]
[130.29861450 355.78448486]
[119.85581970 366.67532349]
[106.94958496 374.49142456]
[92.45989990 378.69992065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[30 112]
[31 111]
[32 110]
[33 109]
[38 103]
[39 102]
[40 101]
[47 94]
[48 93]
[49 92]
[50 91]
[113 126]
[114 125]
[115 124]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
