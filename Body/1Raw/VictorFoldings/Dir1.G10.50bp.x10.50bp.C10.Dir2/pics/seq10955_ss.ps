%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUACACAGGGGGGGGGGAAAUGACAUCAAAAAAAUCGUAGCCUUCUCCACUUCAAGUCAACUAGGACxxxxxxxxxxUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCCCCCCCCCCCUUAAACA\
) } def
/len { sequence length } bind def

/coor [
[83.59188080 374.65167236]
[70.37168884 367.37918091]
[59.48488235 356.93218994]
[51.67375183 344.02294922]
[47.47087097 329.53161621]
[47.16279984 314.44628906]
[50.77053833 299.79547119]
[58.04811096 286.57806396]
[68.49932098 275.69531250]
[81.41158295 267.88916016]
[95.90451813 263.69186401]
[95.59246063 248.69511414]
[95.28040314 233.69836426]
[94.96835327 218.70161438]
[94.65629578 203.70486450]
[94.34423828 188.70809937]
[94.03218079 173.71134949]
[93.72012329 158.71459961]
[93.40806580 143.71784973]
[93.09601593 128.72108459]
[84.30757141 125.02626038]
[77.15368652 118.72463989]
[72.37953186 110.47261810]
[70.48238373 101.12973785]
[55.83887863 97.87891388]
[41.19537735 94.62808990]
[26.55187798 91.37726593]
[20.57384682 105.18521881]
[12.09045029 117.61214447]
[1.40835989 128.20881653]
[-11.08627415 136.59216309]
[-24.94178009 142.45915222]
[-39.65728760 145.59767151]
[-54.70084000 145.89428711]
[-69.52862549 143.33825684]
[-83.60462952 138.02198792]
[-96.42000580 130.13766479]
[-107.51149750 119.97030640]
[-116.47814178 107.88743591]
[-122.99581146 94.32585144]
[-126.82889557 79.77580261]
[-127.83882141 64.76325226]
[-125.98908997 49.83090973]
[-121.34656525 35.51855469]
[-114.07906342 22.34358025]
[-104.44931793 10.78224850]
[-92.80541992 1.25249541]
[-79.56829834 -5.90118408]
[-65.21646881 -10.42018986]
[-50.26873016 -12.14116096]
[-35.26544571 -11.00188637]
[-20.74897003 -7.04355097]
[-7.24406481 -0.40924487]
[4.76107693 8.66120529]
[14.83247566 19.83990860]
[22.60605812 32.72276306]
[27.80081367 46.84405899]
[30.22895241 61.69332504]
[29.80270386 76.73376465]
[44.44620514 79.98458862]
[59.08970642 83.23541260]
[73.73320770 86.48623657]
[91.81195068 71.61828613]
[115.03208160 74.57161713]
[125.69371033 64.02033234]
[136.35533142 53.46903992]
[147.01696777 42.91774750]
[157.67858887 32.36645889]
[148.42501831 20.53903389]
[140.60713196 7.71728897]
[134.33065796 -5.92537689]
[129.68046570 -20.20446205]
[126.71945953 -34.92685699]
[125.48767090 -49.89346313]
[126.00177002 -64.90187073]
[128.25480652 -79.74909973]
[132.21629333 -94.23437500]
[137.83267212 -108.16178894]
[145.02796936 -121.34299469]
[153.70489502 -133.59971619]
[163.74610901 -144.76622009]
[175.01579285 -154.69148254]
[187.36155701 -163.24125671]
[200.61642456 -170.29994202]
[214.60113525 -175.77206421]
[229.12658691 -179.58363342]
[243.99630737 -181.68309021]
[259.00921631 -182.04203796]
[273.96231079 -180.65562439]
[288.65328979 -177.54261780]
[302.88357544 -172.74508667]
[316.46063232 -166.32794189]
[329.20089722 -158.37794495]
[340.93203735 -149.00262451]
[351.49542236 -138.32876587]
[360.74819946 -126.50072479]
[368.56524658 -113.67845917]
[374.84082031 -100.03536987]
[379.49005127 -85.75598145]
[382.45007324 -71.03338623]
[383.68084717 -56.06669617]
[383.16577148 -41.05832672]
[380.91174316 -26.21124268]
[376.94927979 -11.72623444]
[371.33197021 2.20080423]
[364.13580322 15.38152599]
[355.45803833 27.63767815]
[345.41610718 38.80350876]
[334.14575195 48.72800827]
[321.79940796 57.27696991]
[308.54406738 64.33477020]
[294.55899048 69.80596161]
[280.03329468 73.61655426]
[265.16342163 75.71501160]
[250.15048218 76.07295990]
[235.19750977 74.68555450]
[220.50671387 71.57155609]
[206.27676392 66.77308655]
[192.70013428 60.35503006]
[179.96040344 52.40418625]
[168.22987366 43.02808380]
[157.56825256 53.57937622]
[146.90663147 64.13066864]
[136.24499512 74.68195343]
[125.58337402 85.23324585]
[129.16130066 95.28997803]
[128.93136597 105.96173859]
[124.92357635 115.85501862]
[117.66127014 123.67795563]
[108.09276581 128.40902710]
[108.40482330 143.40579224]
[108.71688080 158.40254211]
[109.02893829 173.39929199]
[109.34098816 188.39604187]
[109.65304565 203.39280701]
[109.96510315 218.38955688]
[110.27716064 233.38630676]
[110.58921814 248.38305664]
[110.90127563 263.37982178]
[125.55626678 266.97058105]
[138.78207397 274.23284912]
[149.67694092 284.67144775]
[157.49803162 297.57464600]
[161.71211243 312.06271362]
[162.03182983 327.14782715]
[158.43540955 341.80142212]
[151.16804504 355.02441406]
[140.72523499 365.91525269]
[127.81900787 373.73138428]
[113.32931519 377.93984985]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 62]
[25 61]
[26 60]
[27 59]
[64 125]
[65 124]
[66 123]
[67 122]
[68 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
