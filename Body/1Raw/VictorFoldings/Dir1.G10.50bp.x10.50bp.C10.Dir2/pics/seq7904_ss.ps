%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUAGCACCCGGGGGGGGGGCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGCAUUAACCUUUxxxxxxxxxxAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCCCCCCCCCCCUAUAGCACUC\
) } def
/len { sequence length } bind def

/coor [
[59.42984390 414.97967529]
[45.26924133 409.82467651]
[32.67949677 401.54248047]
[22.33955765 390.57971191]
[14.80704689 377.52755737]
[10.48818111 363.08996582]
[9.61587238 348.04550171]
[12.23716259 333.20550537]
[18.21068954 319.37026978]
[27.21430779 307.28591919]
[38.76246262 297.60415649]
[52.23237991 290.84707642]
[66.89764404 287.37908936]
[66.89764404 272.37908936]
[66.89764404 257.37908936]
[66.89764404 242.37910461]
[66.89764404 227.37910461]
[66.89764404 212.37910461]
[66.89764404 197.37910461]
[66.89764404 182.37910461]
[66.89764404 167.37910461]
[66.89764404 152.37910461]
[66.89764404 137.37910461]
[54.94356918 128.31819153]
[40.50159454 132.37150574]
[26.05961800 136.42481995]
[11.61764336 140.47813416]
[-2.82433105 144.53144836]
[-9.09973431 158.85462952]
[-23.13659286 165.74670410]
[-38.30712891 161.95344543]
[-47.44828415 149.26591492]
[-46.24387741 133.67477417]
[-35.26259995 122.54169464]
[-19.68947029 121.12336731]
[-6.87764645 130.08947754]
[7.56432819 126.03616333]
[22.00630379 121.98284912]
[36.44827652 117.92953491]
[50.89025116 113.87621307]
[52.62261200 106.57903290]
[38.00532150 103.21229553]
[23.04774666 104.33964539]
[17.29939651 90.48480988]
[28.66171646 80.69207764]
[41.51652527 88.42211151]
[56.08732605 91.98465729]
[57.81968307 84.68746948]
[46.74057770 74.57543182]
[35.66146851 64.46338654]
[20.25256920 60.87501907]
[16.06810951 46.58028030]
[4.98900127 36.46823883]
[-6.09010649 26.35619736]
[-17.16921425 16.24415779]
[-32.94416809 10.03229618]
[-31.34200859 -6.84577894]
[-14.68001461 -9.97855091]
[-7.05717325 5.16504955]
[4.02193451 15.27709007]
[15.10104179 25.38913155]
[26.18014908 35.50117111]
[40.79659653 38.36626053]
[45.77350998 53.38428116]
[56.85261917 63.49631882]
[67.93172455 73.60836029]
[86.23054504 66.46930695]
[103.18015289 69.19990540]
[114.40290070 78.73945618]
[126.07601929 69.31935120]
[137.74913025 59.89925003]
[131.02124023 46.89883423]
[126.97333527 32.83668137]
[125.76060486 18.25884819]
[127.42813110 3.73102784]
[131.90928650 -10.18341637]
[139.02838135 -22.94529343]
[148.50752258 -34.06047058]
[159.97750854 -43.09902573]
[172.99215698 -49.71184540]
[187.04570007 -53.64413834]
[201.59243774 -54.74523544]
[216.06787109 -52.97437286]
[229.91072083 -48.40218353]
[242.58454895 -41.20789337]
[253.59867859 -31.67229462]
[265.46032715 -40.85388565]
[267.87597656 -53.56290817]
[277.99392700 -60.96237946]
[290.03979492 -59.50785065]
[302.08508301 -68.44715118]
[314.13034058 -77.38645935]
[326.17562866 -86.32575989]
[322.44351196 -101.06142426]
[324.63952637 -116.10289764]
[332.42877197 -129.15647888]
[344.62347412 -138.23158264]
[359.36404419 -141.94432068]
[374.40261841 -139.72853088]
[387.44592285 -131.92210388]
[396.50497437 -119.71546936]
[400.19833374 -104.97003937]
[397.96276855 -89.93439484]
[390.13919067 -76.90135956]
[377.92065430 -67.85836792]
[363.17037964 -64.18442535]
[348.13766479 -66.43976593]
[335.11492920 -74.28047943]
[323.06967163 -65.34117889]
[311.02438354 -56.40187073]
[298.97909546 -47.46256638]
[292.91662598 -31.02071381]
[274.64190674 -28.99224854]
[262.78027344 -19.81065750]
[269.53976440 -5.98179388]
[273.29211426 8.95211792]
[273.87255859 24.34492683]
[271.25360107 39.53012848]
[265.54641724 53.84972763]
[256.99594116 66.68274689]
[245.97053528 77.47215271]
[232.94602966 85.74903107]
[218.48516846 91.15298462]
[203.21340942 93.44780731]
[187.79173279 92.53181458]
[172.88812256 88.44234467]
[159.14860535 81.35423279]
[147.16923523 71.57236481]
[135.49612427 80.99246979]
[123.82300568 90.41257477]
[122.93660736 124.56143951]
[81.89764404 137.37910461]
[81.89764404 152.37910461]
[81.89764404 167.37910461]
[81.89764404 182.37910461]
[81.89764404 197.37910461]
[81.89764404 212.37910461]
[81.89764404 227.37910461]
[81.89764404 242.37910461]
[81.89764404 257.37908936]
[81.89764404 272.37908936]
[81.89764404 287.37908936]
[96.56290436 290.84707642]
[110.03282166 297.60415649]
[121.58097076 307.28591919]
[130.58459473 319.37026978]
[136.55812073 333.20550537]
[139.17941284 348.04550171]
[138.30709839 363.08996582]
[133.98823547 377.52755737]
[126.45572662 390.57971191]
[116.11578369 401.54248047]
[103.52603912 409.82467651]
[89.36544037 414.97967529]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[48 66]
[49 65]
[50 64]
[52 62]
[53 61]
[54 60]
[55 59]
[69 130]
[70 129]
[71 128]
[86 114]
[87 113]
[90 111]
[91 110]
[92 109]
[93 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
