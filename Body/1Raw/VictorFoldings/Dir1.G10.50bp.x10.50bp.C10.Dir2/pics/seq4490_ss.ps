%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAUAGGAGGGGGGGGGGGCUUAAACCCCCUUAUUUCUAGGACUAUGAGAAUCGAACCCAUCCCUGAGAxxxxxxxxxxUCGUCACAGCCCAUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCCCCCCCCCCCAUAAUCGGAG\
) } def
/len { sequence length } bind def

/coor [
[83.75486755 379.00720215]
[70.88159943 371.10430908]
[60.75730133 359.89382935]
[54.20272064 346.28448486]
[51.74919891 331.37954712]
[53.59563446 316.38729858]
[59.59234619 302.52310181]
[69.25321198 290.91085815]
[81.79505920 282.49188232]
[96.20117950 277.94873047]
[95.88912201 262.95199585]
[95.57706451 247.95523071]
[95.26500702 232.95848083]
[94.95295715 217.96171570]
[94.64089966 202.96496582]
[94.32884216 187.96821594]
[94.01678467 172.97146606]
[93.70472717 157.97470093]
[93.39266968 142.97795105]
[93.08061981 127.98120117]
[87.89794922 126.16038513]
[83.15483093 123.38943481]
[79.02352142 119.76898193]
[75.65407562 115.43053436]
[61.33147812 119.88734436]
[47.00888062 124.34416199]
[42.15773010 139.08343506]
[29.54988861 148.12898254]
[14.03332901 148.00260925]
[1.57448339 138.75291443]
[-3.03596616 123.93659973]
[1.97479177 109.25082397]
[14.68001842 100.34258270]
[30.19429588 100.63726044]
[42.55206680 110.02156830]
[56.87466431 105.56475067]
[71.19725800 101.10793304]
[73.30196381 89.13537598]
[80.15521240 79.09522247]
[90.53809357 72.77321625]
[102.60388184 71.29381561]
[107.79929352 57.22229385]
[112.25611115 42.89969635]
[115.96227264 28.36476135]
[119.66843414 13.82982540]
[123.37459564 -0.70511085]
[127.08075714 -15.24004745]
[130.78691101 -29.77498245]
[134.49307251 -44.30991745]
[138.04783630 -58.88262177]
[141.45082092 -73.49151611]
[144.85379028 -88.10041046]
[131.05679321 -111.35524750]
[143.67646790 -134.69093323]
[139.36888123 -149.05911255]
[135.06129456 -163.42729187]
[120.00501251 -162.67126465]
[105.20542908 -165.54107666]
[91.52299500 -171.86991882]
[79.75316620 -181.28982544]
[70.58024597 -193.25314331]
[64.53752136 -207.06433105]
[61.97631073 -221.92044067]
[63.04552841 -236.95773315]
[67.68300629 -251.30197144]
[75.61911774 -264.11920166]
[86.39248657 -274.66424561]
[99.37674713 -282.32403564]
[113.81702423 -286.65322876]
[128.87376404 -287.40014648]
[143.67160034 -284.52136230]
[157.35020447 -278.18420410]
[169.11431885 -268.75717163]
[178.27998352 -256.78829956]
[184.31433105 -242.97344971]
[186.86653137 -228.11579895]
[185.78820801 -213.07916260]
[181.14202881 -198.73773193]
[173.19815063 -185.92530823]
[162.41839600 -175.38679504]
[149.42948914 -167.73487854]
[153.73707581 -153.36669922]
[158.04464722 -138.99851990]
[162.38374329 -138.66908264]
[166.61135864 -137.63783264]
[170.61476135 -135.93225098]
[181.05458069 -146.70306396]
[191.49438477 -157.47386169]
[201.59303284 -168.56518555]
[211.34069824 -179.96620178]
[213.80398560 -196.17929077]
[229.17304993 -201.89976501]
[241.63751221 -191.24288940]
[238.37501526 -175.17153931]
[222.74171448 -170.21855164]
[212.99406433 -158.81753540]
[212.92958069 -155.23098755]
[211.08377075 -151.50341797]
[207.41278076 -148.49075317]
[202.26519775 -147.03405762]
[191.82537842 -136.26324463]
[181.38557434 -125.49243927]
[184.07656860 -119.25011444]
[185.10949707 -112.49808502]
[184.40098572 -105.67124939]
[181.98042297 -99.21357727]
[177.98905945 -93.54923248]
[172.67185974 -89.05472565]
[166.36256409 -86.03389740]
[159.46269226 -84.69742584]
[156.05970764 -70.08853912]
[152.65673828 -55.47964478]
[154.21243286 -48.20465469]
[149.02801514 -40.60375977]
[145.32185364 -26.06882286]
[141.61569214 -11.53388596]
[137.90953064 3.00105023]
[134.20336914 17.53598595]
[130.49720764 32.07092285]
[126.79104614 46.60585785]
[140.95243835 41.66065216]
[153.76051331 49.46790695]
[155.85360718 64.32115936]
[145.70182800 75.36386871]
[130.72532654 74.52472687]
[121.87081909 62.41770935]
[116.67539978 76.48922729]
[128.20870972 94.07599640]
[124.72437286 114.81655884]
[108.07736969 127.66914368]
[108.38942719 142.66589355]
[108.70148468 157.66264343]
[109.01354218 172.65940857]
[109.32559204 187.65615845]
[109.63764954 202.65290833]
[109.94970703 217.64965820]
[110.26176453 232.64642334]
[110.57382202 247.64317322]
[110.88587952 262.63992310]
[111.19792938 277.63668823]
[125.78057098 281.57662964]
[138.66177368 289.46658325]
[148.79733276 300.66690063]
[155.36558533 314.26965332]
[157.83407593 329.17211914]
[156.00270081 344.16619873]
[150.01991272 358.03640747]
[140.37072754 369.65838623]
[127.83734894 378.08990479]
[113.43579865 382.64755249]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 37]
[25 36]
[26 35]
[41 127]
[42 126]
[43 120]
[44 119]
[45 118]
[46 117]
[47 116]
[48 115]
[49 114]
[50 112]
[51 111]
[52 110]
[54 83]
[55 82]
[56 81]
[86 102]
[87 101]
[88 100]
[89 96]
[90 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
