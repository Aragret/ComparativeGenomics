%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCACCAAUUGGGGGGGGGGAAGAAAGCGUUCAAGCUCAACACCCACUACCUAAAAAAUCCCAAACAUAUxxxxxxxxxxACCUAACCAUCUUCUCCUUACACCUAGCAGGUGUCUCCUCUAUCUUAGGGCCCCCCCCCCGCCAUCAAUU\
) } def
/len { sequence length } bind def

/coor [
[59.24481583 394.94003296]
[46.02462006 387.66754150]
[35.13781357 377.22055054]
[27.32668495 364.31130981]
[23.12380409 349.81997681]
[22.81573105 334.73464966]
[26.42347145 320.08383179]
[33.70104599 306.86642456]
[44.15225220 295.98367310]
[57.06451416 288.17752075]
[71.55744934 283.98022461]
[71.24539185 268.98348999]
[70.93334198 253.98672485]
[70.62128448 238.98997498]
[70.30922699 223.99320984]
[69.99716949 208.99645996]
[69.68511200 193.99971008]
[69.37305450 179.00296021]
[69.06100464 164.00619507]
[80.72921753 93.15958405]
[70.28940582 82.38877869]
[59.84959412 71.61796570]
[49.40978241 60.84716034]
[38.96997070 50.07635117]
[27.26051140 59.46906662]
[14.72294998 67.72400665]
[1.46746612 74.76862335]
[-12.38944721 80.54100800]
[-26.72601318 84.99043274]
[-41.41623688 88.07778931]
[-56.33101654 89.77595520]
[-71.33927917 90.06999969]
[-86.30913544 88.95733643]
[-101.10901642 86.44775391]
[-115.60885620 82.56330109]
[-129.68124390 77.33811188]
[-143.20248413 70.81810760]
[-156.05375671 63.06059265]
[-168.12214661 54.13373566]
[-179.30155945 44.11599350]
[-189.49375916 33.09540176]
[-198.60917664 21.16881180]
[-206.56771851 8.44103718]
[-213.29940796 -4.97606707]
[-218.74511719 -18.96458817]
[-222.85697937 -33.40159225]
[-225.59886169 -48.16020203]
[-226.94665527 -63.11071777]
[-226.88851929 -78.12174988]
[-225.42497253 -93.06137848]
[-222.56886292 -107.79830933]
[-218.34530640 -122.20303345]
[-212.79141235 -136.14895630]
[-205.95599365 -149.51351929]
[-197.89912415 -162.17927551]
[-188.69158936 -174.03489685]
[-178.41433716 -184.97621155]
[-167.15766907 -194.90707397]
[-155.02050781 -203.74018860]
[-142.10952759 -211.39793396]
[-128.53819275 -217.81300354]
[-114.42575836 -222.92904663]
[-99.89626312 -226.70108032]
[-85.07739258 -229.09594727]
[-70.09937286 -230.09263611]
[-55.09383392 -229.68235779]
[-40.19265366 -227.86871338]
[-25.52678299 -224.66766357]
[-11.22511005 -220.10733032]
[2.58667874 -214.22779846]
[15.78720188 -207.08071899]
[28.26045036 -198.72892761]
[39.89680481 -189.24580383]
[50.59400558 -178.71469116]
[60.25804138 -167.22813416]
[68.80398560 -154.88708496]
[76.15672302 -141.80000305]
[82.25164795 -128.08190918]
[87.03520203 -113.85334015]
[90.46532440 -99.23934937]
[92.51189423 -84.36837006]
[93.15690613 -69.37108612]
[92.39470673 -54.37930298]
[90.23198700 -39.52477264]
[86.68775177 -24.93803596]
[81.79315186 -10.74728584]
[75.59120941 2.92276525]
[68.13641357 15.95198345]
[59.49428558 28.22586250]
[49.74077988 39.63653946]
[60.18059158 50.40734863]
[70.62039948 61.17815781]
[81.06021881 71.94896698]
[91.50003052 82.71977234]
[88.00608826 68.13237000]
[96.41940308 55.71398926]
[111.26244354 53.54967499]
[122.87157440 63.04851913]
[123.68862152 78.02625275]
[113.18206024 88.73138428]
[127.67765808 84.87422180]
[142.17324829 81.01706696]
[156.66885376 77.15990448]
[171.16444397 73.30274963]
[185.66004944 69.44558716]
[199.41177368 59.52962875]
[212.74707031 69.99893188]
[206.37849426 85.71126556]
[189.51719666 83.94118500]
[175.02160645 87.79833984]
[160.52601624 91.65550232]
[146.03041077 95.51266479]
[131.53482056 99.36981964]
[117.03922272 103.22698212]
[116.49356842 110.70710754]
[115.40225220 125.66735077]
[114.85659790 133.14747620]
[128.63897705 139.06744385]
[142.42135620 144.98741150]
[156.30239868 137.78665161]
[171.55310059 141.24354553]
[180.97254944 153.72586060]
[180.11317444 169.33981323]
[169.38073730 180.71298218]
[153.84277344 182.47529602]
[140.83583069 173.79464722]
[136.50140381 158.76979065]
[122.71901703 152.84982300]
[108.93663788 146.92985535]
[102.71691895 151.12092590]
[84.05775452 163.69415283]
[84.36981201 178.69090271]
[84.68186951 193.68765259]
[84.99392700 208.68440247]
[85.30597687 223.68116760]
[85.61803436 238.67791748]
[85.93009186 253.67466736]
[86.24214935 268.67141724]
[86.55420685 283.66818237]
[101.20919800 287.25894165]
[114.43500519 294.52120972]
[125.32987213 304.95980835]
[133.15097046 317.86300659]
[137.36503601 332.35107422]
[137.68476868 347.43615723]
[134.08833313 362.08978271]
[126.82097626 375.31277466]
[116.37817383 386.20361328]
[103.47193909 394.01974487]
[88.98225403 398.22821045]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 94]
[21 93]
[22 92]
[23 91]
[24 90]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
[117 129]
[118 128]
[119 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
