%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACAAUCCGGGGGGGGGGCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCUAGGACUUCUAxxxxxxxxxxUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUACUAUACUUCCCCCCCCCCCACAACAAUCC\
) } def
/len { sequence length } bind def

/coor [
[84.00141144 394.33255005]
[70.78121185 387.06008911]
[59.89440536 376.61309814]
[52.08327484 363.70382690]
[47.88039398 349.21252441]
[47.57232285 334.12719727]
[51.18006516 319.47634888]
[58.45763779 306.25897217]
[68.90884399 295.37619019]
[81.82110596 287.57006836]
[96.31404114 283.37277222]
[96.00198364 268.37600708]
[95.68993378 253.37927246]
[95.37787628 238.38250732]
[95.06581879 223.38575745]
[94.75376129 208.38900757]
[94.44170380 193.39225769]
[94.12964630 178.39549255]
[93.81759644 163.39874268]
[93.50553894 148.40199280]
[83.98606873 146.13549805]
[75.10957336 142.01663208]
[67.23245239 136.21075439]
[60.67097855 128.95097351]
[55.68860626 120.52878571]
[52.48537827 111.28234863]
[51.18991089 101.58290863]
[51.85421371 91.81992340]
[37.62743378 87.06610870]
[23.40065384 82.31229401]
[9.17387486 77.55847931]
[-5.14872313 73.10166168]
[-19.56093979 68.94377136]
[-33.97315598 64.78588867]
[-46.20791626 74.14627075]
[-61.43045807 74.50344849]
[-73.79812622 65.92995453]
[-78.68733215 51.88595963]
[-93.09954834 47.72807312]
[-107.51176453 43.57018661]
[-121.92398071 39.41230011]
[-136.33619690 35.25441360]
[-152.11590576 39.71904755]
[-163.68199158 28.09332466]
[-159.13627625 12.33678627]
[-143.15498352 8.65841198]
[-132.17831421 20.84219551]
[-117.76609039 25.00008392]
[-103.35387421 29.15797043]
[-88.94165802 33.31585693]
[-74.52944183 37.47374725]
[-62.91088486 28.19220352]
[-47.87700653 27.52398682]
[-35.18398285 35.93472672]
[-29.81526756 50.37367249]
[-15.40305138 54.53155899]
[-0.99083549 58.68944550]
[3.59971023 57.17207718]
[9.19264889 58.56862259]
[13.92768955 63.33169937]
[28.15446854 68.08551025]
[42.38124847 72.83932495]
[56.60802841 77.59313965]
[67.39976501 61.79449081]
[83.82983398 50.98651886]
[103.65734100 47.12625885]
[103.03336334 32.13924408]
[88.74770355 26.94420815]
[77.54090881 16.67404938]
[71.12193298 2.89489269]
[70.46961975 -12.29203987]
[75.68344116 -26.57085228]
[85.96833038 -37.76412964]
[99.75592041 -44.16497803]
[114.94369507 -44.79731369]
[129.21563721 -39.56470871]
[140.39537048 -29.26510429]
[146.77807617 -15.46910763]
[147.39044189 -0.28051084]
[142.13906860 13.98453522]
[131.82476807 25.15071487]
[118.02037811 31.51526642]
[118.64435577 46.50228119]
[132.03063965 53.27039719]
[144.47007751 44.88825226]
[156.90953064 36.50611115]
[169.34896851 28.12396622]
[181.78840637 19.74182320]
[184.12797546 14.93079376]
[187.73947144 11.84705162]
[191.73361206 10.68580532]
[195.27557373 11.25329208]
[208.21362305 3.66338372]
[212.30378723 -11.36686516]
[225.53292847 -18.87980461]
[239.83677673 -14.88783932]
[252.77482605 -22.47774696]
[265.71289062 -30.06765556]
[273.33889771 -44.58578110]
[289.73355103 -44.97006607]
[298.03140259 -30.82519341]
[289.69638062 -16.70219421]
[273.30279541 -17.12960052]
[260.36474609 -9.53969193]
[247.42668152 -1.94978356]
[243.93174744 12.48354816]
[230.91883850 20.36510277]
[215.80352783 16.60144043]
[202.86547852 24.19134712]
[190.17054749 32.18126297]
[177.73110962 40.56340790]
[165.29167175 48.94554901]
[152.85223389 57.32769394]
[140.41278076 65.70983887]
[145.46243286 74.41514587]
[148.70303345 83.77562714]
[150.07180786 93.42630005]
[149.57777405 103.00255585]
[147.29919434 112.15388489]
[161.08157349 118.07384491]
[174.86395264 123.99381256]
[191.80363464 124.68942261]
[195.82456970 141.15965271]
[181.11111450 149.58285522]
[168.94400024 137.77619934]
[155.16160583 131.85623169]
[141.37922668 125.93626404]
[132.64956665 136.31716919]
[121.40136719 143.89660645]
[108.50228882 148.08993530]
[108.81434631 163.08668518]
[109.12640381 178.08343506]
[109.43846130 193.08020020]
[109.75051880 208.07695007]
[110.06256866 223.07369995]
[110.37462616 238.07044983]
[110.68668365 253.06721497]
[110.99874115 268.06396484]
[111.31079865 283.06072998]
[125.96578979 286.65148926]
[139.19160461 293.91372681]
[150.08647156 304.35232544]
[157.90756226 317.25555420]
[162.12162781 331.74362183]
[162.44136047 346.82870483]
[158.84492493 361.48233032]
[151.57756042 374.70532227]
[141.13476562 385.59616089]
[128.22853088 393.41226196]
[113.73884583 397.62075806]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[28 63]
[29 62]
[30 61]
[31 60]
[32 57]
[33 56]
[34 55]
[38 51]
[39 50]
[40 49]
[41 48]
[42 47]
[66 83]
[67 82]
[84 114]
[85 113]
[86 112]
[87 111]
[88 110]
[92 109]
[93 108]
[96 105]
[97 104]
[98 103]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
