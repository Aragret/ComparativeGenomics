%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCAAUAAAGGGGGGGGGGGCUAAAACUCACCUGAGUUGUAAAAAACUCCAGUUGACACAAAAUAGACUxxxxxxxxxxUUGUAUUUCAACUACAAGAACACCAAUGACCCCAAUACGCAAAACUAACCCCCCCCCCCCCCCUAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[119.06486511 418.62545776]
[105.84467316 411.35299683]
[94.95787048 400.90597534]
[87.14673615 387.99673462]
[82.94385529 373.50543213]
[82.63578033 358.42007446]
[86.24352264 343.76925659]
[93.52109528 330.55187988]
[103.97230530 319.66909790]
[116.88456726 311.86297607]
[131.37750244 307.66567993]
[131.06544495 292.66891479]
[130.75338745 277.67218018]
[130.44132996 262.67541504]
[130.12927246 247.67866516]
[129.81723022 232.68191528]
[129.50517273 217.68515015]
[129.19311523 202.68840027]
[128.88105774 187.69165039]
[128.56900024 172.69490051]
[128.25694275 157.69813538]
[123.35539246 143.52157593]
[114.33786011 131.53474426]
[97.90637970 136.72645569]
[79.96358490 133.37901306]
[64.90707397 121.34725952]
[50.26357269 124.59808350]
[35.62007141 127.84890747]
[20.97657013 131.09973145]
[6.33306932 134.35055542]
[-5.38220024 145.82594299]
[-21.10293007 141.15789795]
[-24.65698242 125.14850616]
[-12.38825130 114.26685333]
[3.08224344 119.70706177]
[17.72574425 116.45623779]
[32.36924744 113.20540619]
[47.01274872 109.95458221]
[61.65625000 106.70375824]
[61.96830368 91.70700073]
[47.47270966 87.84984589]
[32.92771149 94.61907959]
[18.63145447 87.33920288]
[15.55080509 71.59471130]
[26.04897118 59.46342468]
[42.07265854 60.25143814]
[51.32986832 73.35424805]
[65.82546234 77.21141052]
[71.06911469 73.15491486]
[76.70249176 70.15888214]
[82.52652740 68.23948669]
[88.34756470 67.37738037]
[86.47994995 52.49409866]
[84.61234283 37.61081696]
[82.74472809 22.72753906]
[80.87711334 7.84425879]
[79.00949860 -7.03902102]
[67.63856506 2.74371266]
[52.86227798 0.16277629]
[45.48089981 -12.89537430]
[50.88962936 -26.88628769]
[65.13511658 -31.58373833]
[77.80471802 -23.55482674]
[77.49266052 -38.55157852]
[77.18060303 -53.54833221]
[76.86854553 -68.54508972]
[68.84582520 -82.18130493]
[76.31667328 -95.06678772]
[62.26221466 -100.93125916]
[51.81283951 -112.00963593]
[46.77896881 -126.38253021]
[48.03275299 -141.55973816]
[55.35696411 -154.91174316]
[67.48263550 -164.12519836]
[82.30892944 -167.60385132]
[97.26709747 -164.74496460]
[109.76554108 -156.04388428]
[117.63883972 -143.00813293]
[119.52288055 -127.89620209]
[115.09126282 -113.32634735]
[105.11177826 -101.82288361]
[91.31343079 -95.37884521]
[99.31383514 -82.81529236]
[91.86530304 -68.85714722]
[92.17736053 -53.86038971]
[92.48941040 -38.86363602]
[92.80146790 -23.86688232]
[93.89277649 -8.90663433]
[95.76039124 5.97664595]
[97.62800598 20.85992622]
[99.49562073 35.74320602]
[101.36323547 50.62648392]
[103.23084259 65.50976562]
[120.67787170 72.20719147]
[132.10678101 86.99347687]
[134.19126892 105.56520081]
[126.32469177 122.51721954]
[135.34222412 134.50405884]
[134.13276672 119.55288696]
[135.80796814 104.64672852]
[140.30584717 90.33697510]
[147.46003723 77.15297699]
[157.00585938 65.58245087]
[168.59020996 56.05339813]
[181.78456116 48.91833496]
[196.10081482 44.44119644]
[211.00939941 42.78760147]
[225.95878601 44.01871872]
[240.39598083 48.08901215]
[253.78692627 54.84790802]
[265.63626099 64.04537964]
[275.50561523 75.34119415]
[283.02996826 88.31749725]
[287.93090820 102.49426270]
[290.02719116 117.34706116]
[289.24124146 132.32646179]
[285.60214233 146.87832642]
[279.24450684 160.46437073]
[270.40353394 172.58200073]
[259.40625000 182.78297424]
[246.65946960 190.68991089]
[232.63473511 196.01034546]
[217.85086060 198.54743958]
[202.85470581 198.20736694]
[188.20104980 195.00267029]
[174.43193054 189.05192566]
[162.05670166 180.57525635]
[151.53317261 169.88623047]
[143.25369263 157.38607788]
[143.56575012 172.38284302]
[143.87780762 187.37959290]
[144.18986511 202.37634277]
[144.50192261 217.37309265]
[144.81398010 232.36985779]
[145.12603760 247.36660767]
[145.43809509 262.36337280]
[145.75015259 277.36010742]
[146.06219482 292.35687256]
[146.37425232 307.35360718]
[161.02925110 310.94439697]
[174.25506592 318.20663452]
[185.14993286 328.64523315]
[192.97102356 341.54846191]
[197.18508911 356.03652954]
[197.50482178 371.12161255]
[193.90838623 385.77520752]
[186.64102173 398.99822998]
[176.19822693 409.88906860]
[163.29199219 417.70516968]
[148.80230713 421.91366577]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 98]
[23 97]
[26 39]
[27 38]
[28 37]
[29 36]
[30 35]
[40 48]
[41 47]
[52 93]
[53 92]
[54 91]
[55 90]
[56 89]
[57 88]
[63 87]
[64 86]
[65 85]
[66 84]
[68 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
