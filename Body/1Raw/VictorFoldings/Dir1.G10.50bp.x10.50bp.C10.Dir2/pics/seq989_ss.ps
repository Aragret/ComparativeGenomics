%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCCUCUAGGGGGGGGGGAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCxxxxxxxxxxGCAAUCAACCCUCAACUAUCACACAUCAACUGCAACUCCAAAGCCACCCCCCCCCCCCCCUCACCCACUA\
) } def
/len { sequence length } bind def

/coor [
[82.77846527 395.41320801]
[71.56303406 385.34786987]
[62.97163391 372.96707153]
[57.46759033 358.93844604]
[55.34773254 344.01855469]
[56.72637558 329.01202393]
[61.52917480 314.72811890]
[69.49712372 301.93716431]
[80.20051575 291.32894897]
[93.06213379 283.47558594]
[107.38835907 278.80056763]
[106.14148712 263.85247803]
[104.89461517 248.90438843]
[103.64773560 233.95629883]
[102.40086365 219.00820923]
[101.15399170 204.06011963]
[99.90711212 189.11203003]
[98.66024017 174.16395569]
[97.41336823 159.21586609]
[96.16648865 144.26777649]
[77.91683960 138.55731201]
[63.75713348 125.70576477]
[50.23294449 132.19393921]
[36.70875549 138.68209839]
[30.05251312 153.27915955]
[14.45560360 157.03628540]
[1.88264203 147.07133484]
[1.97852755 131.02856445]
[14.66970539 121.21461487]
[30.22058868 125.15790558]
[43.74477768 118.66974640]
[57.26897049 112.18157959]
[55.57820892 98.98198700]
[57.87186813 85.87369537]
[63.94421768 74.03247833]
[73.25059509 64.52041626]
[84.95626068 58.19069672]
[98.01128387 55.61107254]
[99.87889099 40.72779465]
[101.74650574 25.84451294]
[93.60144806 20.89301300]
[87.40734863 13.72385597]
[83.73557281 5.05247021]
[82.90812683 -4.26997328]
[84.96967316 -13.34009171]
[72.70730591 -21.97920799]
[59.39857864 -14.50655842]
[44.16502762 -13.55694485]
[30.03129387 -19.31891441]
[19.80363464 -30.64842224]
[15.51276207 -45.29598618]
[18.01062965 -60.35332489]
[26.80128670 -72.83078766]
[40.13933945 -80.25096893]
[55.37651062 -81.14058685]
[69.48744202 -75.32300568]
[79.67041016 -63.95330811]
[83.90356445 -49.28895950]
[81.34642029 -34.24157715]
[93.60878754 -25.60245895]
[102.02718353 -30.62616539]
[111.61919403 -32.65110779]
[121.34983063 -31.45879555]
[129.07391357 -44.31719971]
[136.79800415 -57.17560196]
[144.52209473 -70.03400421]
[152.24617004 -82.89240265]
[140.59661865 -92.38285828]
[130.41633606 -103.43467712]
[121.91259003 -115.82286072]
[115.25849152 -129.29519653]
[110.58951569 -143.57739258]
[108.00071716 -158.37870789]
[107.54479980 -173.39779663]
[109.23104858 -188.32888794]
[113.02512360 -202.86799622]
[118.84979248 -216.71913147]
[126.58647156 -229.60029602]
[136.07765198 -241.24926758]
[147.13009644 -251.42886353]
[159.51879883 -259.93185425]
[172.99154663 -266.58511353]
[187.27404785 -271.25320435]
[202.07551575 -273.84109497]
[217.09463501 -274.29608154]
[232.02560425 -272.60888672]
[246.56448364 -268.81393433]
[260.41525269 -262.98840332]
[273.29595947 -255.25091553]
[284.94433594 -245.75901794]
[295.12322998 -234.70594788]
[303.62545776 -222.31671143]
[310.27789307 -208.84355164]
[314.94509888 -194.56077576]
[317.53207397 -179.75914001]
[317.98611450 -164.73999023]
[316.29803467 -149.80912781]
[312.50216675 -135.27047729]
[306.67578125 -121.42006683]
[298.93750000 -108.53984833]
[289.44488525 -96.89205933]
[278.39117432 -86.71383667]
[266.00140381 -78.21238708]
[252.52784729 -71.56079102]
[238.24476624 -66.89446259]
[223.44297791 -64.30841064]
[208.42381287 -63.85528564]
[193.49304199 -65.54430389]
[178.95463562 -69.34107971]
[165.10456848 -75.16831970]
[157.38049316 -62.30991745]
[149.65640259 -49.45151520]
[141.93232727 -36.59311295]
[134.20823669 -23.73471069]
[143.04049683 -3.86162329]
[136.05241394 16.96904564]
[116.62979126 27.71212578]
[114.76217651 42.59540558]
[112.89456177 57.47868729]
[125.77133179 63.80372620]
[135.96153259 73.90210724]
[142.40286255 86.72110748]
[144.42384338 100.92438507]
[141.81378174 115.03129578]
[134.84477234 127.57125092]
[124.24331665 137.23698425]
[111.11457825 143.02090454]
[112.36145020 157.96899414]
[113.60832977 172.91706848]
[114.85520172 187.86515808]
[116.10207367 202.81324768]
[117.34895325 217.76133728]
[118.59582520 232.70942688]
[119.84269714 247.65751648]
[121.08957672 262.60559082]
[122.33644867 277.55368042]
[137.23922729 279.79061890]
[151.22421265 285.40460205]
[163.53720093 294.09295654]
[173.51416016 305.38705444]
[180.61706543 318.67785645]
[184.46286011 333.24859619]
[184.84414673 348.31350708]
[181.74035645 363.06011963]
[175.31886292 376.69323730]
[165.92599487 388.47756958]
[154.06828308 397.77764893]
[140.38519287 404.09188843]
[125.61464691 407.07983398]
[110.55319977 406.58029175]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
[22 32]
[23 31]
[24 30]
[38 119]
[39 118]
[40 117]
[45 60]
[46 59]
[63 114]
[64 113]
[65 112]
[66 111]
[67 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
