%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACUAAGAGGGGGGGGGGGUAGAGUGCUUAGUUGAACAGGGCCCUGAAGCGCGUACACACCGCCCGUCxxxxxxxxxxUAUCUCCCUAAUUGAAAACAAAAUACUCAAAUGGGCCUGUCCUUGUAGUACCCCCCCCCCUAAACUAAUA\
) } def
/len { sequence length } bind def

/coor [
[86.21640015 399.77163696]
[71.72670746 395.56317139]
[58.82048035 387.74703979]
[48.37767792 376.85620117]
[41.11031342 363.63320923]
[37.51388931 348.97958374]
[37.83361053 333.89450073]
[42.04767990 319.40643311]
[49.86877823 306.50323486]
[60.76364517 296.06463623]
[73.98945618 288.80236816]
[88.64444733 285.21160889]
[88.95650482 270.21484375]
[89.26856232 255.21809387]
[89.58061218 240.22134399]
[89.89266968 225.22459412]
[90.20472717 210.22782898]
[90.51678467 195.23107910]
[90.82884216 180.23432922]
[91.14089966 165.23757935]
[91.45294952 150.24081421]
[91.76500702 135.24406433]
[92.07706451 120.24731445]
[86.22620392 116.82287598]
[81.71446228 111.76289368]
[78.98046875 105.55929565]
[64.04615784 104.15699005]
[49.11185074 102.75469208]
[34.17754364 101.35238647]
[19.24323654 99.95008087]
[4.30892801 98.54777527]
[13.56927013 110.34803772]
[13.25306988 125.34470367]
[3.50356913 136.74414062]
[-11.26261330 139.38229370]
[-24.35625076 132.06405640]
[-29.84580040 118.10466003]
[-25.24443817 103.82784271]
[-12.63623714 95.70105743]
[-27.20894051 92.14629364]
[-41.78164291 88.59152985]
[-57.36196518 93.70871735]
[-69.40166473 82.57418823]
[-65.51532745 66.64218903]
[-49.70088577 62.30220413]
[-38.22687912 74.01882935]
[-23.65417862 77.57359314]
[-9.08147526 81.12834930]
[5.71123171 83.61347198]
[20.64554024 85.01576996]
[35.57984543 86.41807556]
[50.51415634 87.82038116]
[65.44846344 89.22268677]
[80.38276672 90.62498474]
[91.41910553 80.02264404]
[106.70680237 79.31799316]
[115.97174835 67.52135468]
[125.23670197 55.72471619]
[134.50164795 43.92807388]
[143.26785278 31.75623703]
[151.52014160 19.23027611]
[149.69348145 6.41945362]
[156.87738037 -3.85725236]
[168.75051880 -6.37438297]
[177.26159668 -18.72595596]
[185.77268982 -31.07752800]
[194.28378296 -43.42910004]
[202.79487610 -55.78067398]
[211.30596924 -68.13224792]
[197.62702942 -61.97702789]
[182.83308411 -59.49926758]
[167.89508057 -60.86158371]
[153.79339600 -65.97456360]
[141.45355225 -74.50263977]
[131.68540955 -85.88611603]
[125.13005829 -99.37786865]
[122.21774292 -114.09243774]
[123.13960266 -129.06408691]
[127.83512115 -143.31021118]
[135.99613953 -155.89582825]
[147.08703613 -165.99493408]
[160.37991333 -172.94471741]
[175.00233459 -176.28906250]
[189.99462891 -175.80847168]
[204.37284851 -171.53448486]
[217.19332886 -163.74760437]
[227.61463928 -152.95889282]
[234.95283508 -139.87643433]
[238.72630310 -125.35882568]
[238.68739319 -110.35887909]
[234.83863831 -95.86104584]
[227.42974854 -82.81295776]
[240.52290344 -90.13206482]
[253.61605835 -97.45117188]
[266.70919800 -104.77027893]
[266.24133301 -120.06863403]
[272.94696045 -133.82701111]
[285.28521729 -142.88383484]
[300.42086792 -145.15791321]
[314.87579346 -140.12667847]
[325.32839966 -128.94627380]
[329.37677002 -114.18588257]
[326.09057617 -99.23731232]
[316.22500610 -87.53565979]
[302.04705811 -81.76985931]
[286.81472778 -83.26486206]
[274.02832031 -91.67712402]
[260.93515015 -84.35801697]
[247.84201050 -77.03890991]
[234.74885559 -69.71980286]
[223.65753174 -59.62115479]
[215.14643860 -47.26958466]
[206.63536072 -34.91801071]
[198.12426758 -22.56643867]
[189.61317444 -10.21486473]
[181.10208130 2.13670731]
[180.67976379 19.65303040]
[164.04611206 27.48256493]
[155.79382324 40.00852585]
[156.27249146 42.83309937]
[155.62416077 46.02271652]
[153.70193481 49.13509750]
[150.52673340 51.68249130]
[146.29829407 53.19302368]
[137.03334045 64.98966217]
[127.76839447 76.78630066]
[118.50344086 88.58294678]
[120.47369385 107.31809998]
[107.07382202 120.55937195]
[106.76176453 135.55612183]
[106.44970703 150.55287170]
[106.13764954 165.54963684]
[105.82559204 180.54638672]
[105.51353455 195.54313660]
[105.20148468 210.53988647]
[104.88942719 225.53665161]
[104.57736969 240.53340149]
[104.26531219 255.53015137]
[103.95325470 270.52691650]
[103.64119720 285.52365112]
[118.13414001 289.72094727]
[131.04640198 297.52709961]
[141.49760437 308.40985107]
[148.77517700 321.62725830]
[152.38291931 336.27807617]
[152.07484436 351.36340332]
[147.87196350 365.85473633]
[140.06083679 378.76397705]
[129.17402649 389.21096802]
[115.95383453 396.48345947]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[26 54]
[27 53]
[28 52]
[29 51]
[30 50]
[31 49]
[39 48]
[40 47]
[41 46]
[56 127]
[57 126]
[58 125]
[59 124]
[60 119]
[61 118]
[64 116]
[65 115]
[66 114]
[67 113]
[68 112]
[69 111]
[92 110]
[93 109]
[94 108]
[95 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
