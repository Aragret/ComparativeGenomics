%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCCCACAGGGGGGGGGGCUCAUCGCCCUUACCACGCUACUCCUACCUAUCUCCCCUUUUAUACUAAUxxxxxxxxxxACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCUUAAACACCCCCCCCCCCCCCUCCCCACA\
) } def
/len { sequence length } bind def

/coor [
[81.65181732 356.07031250]
[69.09358978 347.71917725]
[59.00737000 336.50671387]
[52.02717590 323.13781738]
[48.59178925 308.45281982]
[48.91716766 293.37484741]
[52.98285294 278.85174561]
[60.53327179 265.79638672]
[71.09380341 255.02949524]
[84.00059509 247.22787476]
[98.44232178 242.88191223]
[97.81834412 227.89489746]
[97.19436646 212.90788269]
[96.57038879 197.92086792]
[95.94641113 182.93385315]
[95.32243347 167.94683838]
[94.69846344 152.95982361]
[94.07448578 137.97280884]
[93.45050812 122.98578644]
[92.82653046 107.99877167]
[87.63111115 93.92725372]
[78.36616516 82.13061523]
[60.99143600 80.38241577]
[50.43864822 66.89453888]
[52.82647705 50.27659225]
[43.31811905 38.67525101]
[33.80976105 27.07390976]
[24.30140305 15.47256851]
[14.79304504 3.87122774]
[2.26466942 12.14430714]
[-11.04796124 19.08533669]
[-25.00372505 24.62074089]
[-39.45468140 28.69183731]
[-54.24764633 31.25547409]
[-69.22580719 32.28446960]
[-84.23037720 31.76792336]
[-99.10231018 29.71130562]
[-113.68395233 26.13641930]
[-127.82072449 21.08116150]
[-141.36277771 14.59911728]
[-154.16654968 6.75900316]
[-166.09631348 -2.35607219]
[-177.02561951 -12.64948463]
[-186.83860779 -24.01211739]
[-195.43124390 -36.32352066]
[-202.71244812 -49.45318604]
[-208.60502625 -63.26193237]
[-213.04653931 -77.60337830]
[-215.98986816 -92.32549286]
[-217.40385437 -107.27222443]
[-217.27346802 -122.28511810]
[-215.60011292 -137.20503235]
[-212.40151978 -151.87380981]
[-207.71160889 -166.13595581]
[-201.58007812 -179.84028625]
[-194.07194519 -192.84150696]
[-185.26678467 -205.00181580]
[-175.25793457 -216.19230652]
[-164.15150452 -226.29434204]
[-152.06521606 -235.20085144]
[-139.12721252 -242.81739807]
[-125.47462463 -249.06327820]
[-111.25218201 -253.87223816]
[-96.61065674 -257.19332886]
[-81.70524597 -258.99136353]
[-66.69396210 -259.24722290]
[-51.73593903 -257.95825195]
[-36.98973083 -255.13806152]
[-22.61165810 -250.81660461]
[-8.75413704 -245.03965759]
[4.43593359 -237.86845398]
[16.81873322 -229.37902832]
[28.26299667 -219.66137695]
[38.64740753 -208.81849670]
[47.86188889 -196.96533203]
[55.80875778 -184.22753906]
[62.40377426 -170.74015808]
[67.57702637 -156.64613342]
[71.27368164 -142.09487915]
[73.45454407 -127.24066162]
[74.09649658 -112.24092865]
[73.19274139 -97.25469208]
[70.75284576 -82.44081879]
[66.80268860 -67.95633698]
[61.38414001 -53.95478439]
[54.55463409 -40.58459854]
[46.38656998 -27.98750687]
[36.96653366 -16.29704094]
[26.39438629 -5.63713074]
[35.90274429 5.96421051]
[45.41110229 17.56555176]
[54.91946030 29.16689301]
[64.42781830 40.76823425]
[77.33975983 40.24039459]
[88.35147095 47.36896896]
[93.30068207 59.72749710]
[90.16280365 72.86566162]
[99.42774963 84.66230011]
[97.90752411 69.73954010]
[99.27225494 54.80175018]
[103.47146606 40.40151978]
[110.34982300 27.07154465]
[119.65287018 15.30492973]
[131.03648376 5.53694582]
[144.07952881 -1.87106633]
[158.29956055 -6.64506865]
[173.17050171 -8.60845947]
[188.14227295 -7.68861008]
[202.66102600 -3.91954637]
[216.18968201 2.55930519]
[228.22778320 11.50827789]
[238.33001709 22.59632874]
[246.12268066 35.41328812]
[251.31748962 49.48502731]
[253.72230530 64.29100037]
[253.24815369 79.28350067]
[249.91258240 93.90793610]
[243.83895874 107.62329865]
[235.25198364 119.92223358]
[224.46929932 130.34977722]
[211.88978577 138.52018738]
[197.97877502 144.13124084]
[183.25086975 146.97534180]
[168.25090027 146.94731140]
[153.53373718 144.04817200]
[139.64379883 138.38516235]
[127.09490204 130.16777039]
[116.35127258 119.69999695]
[107.81354523 107.37479401]
[108.43752289 122.36180878]
[109.06150055 137.34883118]
[109.68547821 152.33584595]
[110.30945587 167.32286072]
[110.93343353 182.30987549]
[111.55741119 197.29689026]
[112.18138885 212.28390503]
[112.80535889 227.27091980]
[113.42933655 242.25793457]
[128.18234253 245.38838196]
[141.69297791 252.09013367]
[153.11195374 261.94192505]
[161.72146606 274.32446289]
[166.98031616 288.45935059]
[168.55792236 303.45809937]
[166.35511780 318.37780762]
[160.51037598 332.28070068]
[151.39109802 344.29275513]
[139.57052612 353.65890503]
[125.79170990 359.79040527]
[110.92081451 362.30178833]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 98]
[22 97]
[25 93]
[26 92]
[27 91]
[28 90]
[29 89]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
