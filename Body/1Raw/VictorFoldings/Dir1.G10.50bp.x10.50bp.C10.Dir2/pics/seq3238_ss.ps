%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACAACAUAGGGGGGGGGGCCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCxxxxxxxxxxUUCUACCUACGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCCCCCCCCCCCUAACAACGUA\
) } def
/len { sequence length } bind def

/coor [
[83.40955353 365.88940430]
[70.18936157 358.61694336]
[59.30255508 348.16995239]
[51.49142456 335.26068115]
[47.28854370 320.76937866]
[46.98047256 305.68402100]
[50.58821106 291.03320312]
[57.86578369 277.81582642]
[68.31699371 266.93304443]
[81.22925568 259.12692261]
[95.72219086 254.92962646]
[95.41013336 239.93287659]
[95.09807587 224.93611145]
[94.78602600 209.93936157]
[94.47396851 194.94261169]
[94.16191101 179.94586182]
[93.84985352 164.94909668]
[93.53779602 149.95234680]
[93.22573853 134.95559692]
[92.91368866 119.95883942]
[82.76268005 112.30634308]
[78.82164764 100.22032166]
[82.51039124 88.05492401]
[92.50000000 80.19290161]
[92.50000000 65.19290161]
[92.50000000 50.19290161]
[92.50000000 35.19290161]
[77.52563477 34.23167801]
[62.64361572 32.31301498]
[47.91510391 29.44479752]
[33.40062714 25.63880920]
[19.15981865 20.91069412]
[5.25120354 15.27987671]
[-8.26806545 8.76949787]
[-21.34243584 1.40631020]
[-33.91817856 -6.77942991]
[-45.94361877 -15.75408459]
[-57.36934280 -25.48077583]
[-68.14839935 -35.91953278]
[-78.23648834 -47.02746201]
[-87.59216309 -58.75891495]
[-96.17697906 -71.06568909]
[-103.95565033 -83.89720917]
[-110.89622498 -97.20074463]
[-116.97016907 -110.92163849]
[-122.15253448 -125.00349426]
[-126.42201233 -139.38845825]
[-129.76107788 -154.01741028]
[-132.15599060 -168.83024597]
[-133.59692383 -183.76609802]
[-134.07794189 -198.76356506]
[-133.59709167 -213.76104736]
[-132.15632629 -228.69691467]
[-129.76156616 -243.50976562]
[-126.42267609 -258.13876343]
[-122.15335083 -272.52377319]
[-116.97113800 -286.60568237]
[-110.89734650 -300.32666016]
[-103.95692444 -313.63024902]
[-96.17839050 -326.46188354]
[-87.59371948 -338.76873779]
[-78.23817444 -350.50030518]
[-68.15019989 -361.60833740]
[-57.37126541 -372.04721069]
[-45.94564819 -381.77401733]
[-33.92030716 -390.74880981]
[-21.34465408 -398.93469238]
[-8.27036667 -406.29803467]
[5.24883032 -412.80856323]
[19.15738297 -418.43954468]
[33.39813614 -423.16781616]
[47.91257477 -426.97393799]
[62.64105225 -429.84234619]
[77.52304840 -431.76116943]
[92.49740601 -432.72256470]
[107.50259399 -432.72256470]
[122.47695160 -431.76116943]
[137.35894775 -429.84234619]
[152.08741760 -426.97393799]
[166.60186768 -423.16781616]
[180.84262085 -418.43954468]
[194.75117493 -412.80856323]
[208.27037048 -406.29803467]
[221.34465027 -398.93469238]
[233.92030334 -390.74880981]
[245.94564819 -381.77401733]
[257.37127686 -372.04721069]
[268.15020752 -361.60833740]
[278.23815918 -350.50030518]
[287.59371948 -338.76873779]
[296.17840576 -326.46188354]
[303.95693970 -313.63024902]
[310.89733887 -300.32666016]
[316.97113037 -286.60568237]
[322.15335083 -272.52377319]
[326.42266846 -258.13876343]
[329.76156616 -243.50976562]
[332.15631104 -228.69691467]
[333.59707642 -213.76104736]
[334.07794189 -198.76356506]
[333.59692383 -183.76609802]
[332.15600586 -168.83024597]
[329.76107788 -154.01741028]
[326.42202759 -139.38845825]
[322.15252686 -125.00349426]
[316.97015381 -110.92163849]
[310.89620972 -97.20074463]
[303.95565796 -83.89720917]
[296.17697144 -71.06568909]
[287.59216309 -58.75891495]
[278.23648071 -47.02746201]
[268.14840698 -35.91953278]
[257.36935425 -25.48077583]
[245.94361877 -15.75408459]
[233.91818237 -6.77942991]
[221.34243774 1.40631020]
[208.26806641 8.76949787]
[194.74879456 15.27987671]
[180.84017944 20.91069412]
[166.59938049 25.63880920]
[152.08489990 29.44479752]
[137.35638428 32.31301498]
[122.47436523 34.23167801]
[107.50000000 35.19290161]
[107.50000000 50.19290161]
[107.50000000 65.19290161]
[107.50000000 80.19290161]
[119.42519379 91.56002808]
[119.59657288 108.03402710]
[107.91043854 119.64678192]
[108.22249603 134.64353943]
[108.53455353 149.64028931]
[108.84661102 164.63703918]
[109.15866089 179.63380432]
[109.47071838 194.63055420]
[109.78277588 209.62730408]
[110.09483337 224.62405396]
[110.40689087 239.62081909]
[110.71894836 254.61756897]
[125.37393951 258.20834351]
[138.59974670 265.47058105]
[149.49461365 275.90917969]
[157.31570435 288.81240845]
[161.52978516 303.30047607]
[161.84950256 318.38555908]
[158.25308228 333.03915405]
[150.98571777 346.26217651]
[140.54290771 357.15301514]
[127.63668060 364.96911621]
[113.14698792 369.17761230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 127]
[25 126]
[26 125]
[27 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
