%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGAAAUAUGGGGGGGGGGGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGAGCUUAAACCCCxxxxxxxxxxGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACUCCACGGCCCCCCCCCCAAGCAAUAUG\
) } def
/len { sequence length } bind def

/coor [
[63.01780319 348.84353638]
[50.14452744 340.94064331]
[40.02023315 329.73016357]
[33.46565247 316.12081909]
[31.01213074 301.21588135]
[32.85856628 286.22363281]
[38.85527802 272.35943604]
[48.51613998 260.74719238]
[61.05798721 252.32823181]
[75.46411133 247.78506470]
[75.15205383 232.78831482]
[74.83999634 217.79156494]
[74.52793884 202.79479980]
[74.21588135 187.79804993]
[73.90383148 172.80130005]
[73.59177399 157.80455017]
[73.27971649 142.80778503]
[72.96765900 127.81103516]
[72.65560150 112.81428528]
[69.86328125 98.07647705]
[64.66786194 84.00495911]
[59.47244644 69.93344116]
[47.43423462 59.66737747]
[50.28437424 45.04800797]
[38.24616241 34.78194809]
[41.09630203 20.16258049]
[35.90088654 6.09106016]
[30.70547104 -7.98045921]
[25.51005554 -22.05197906]
[16.65496826 -9.94464874]
[1.67842686 -9.10606480]
[-8.47292805 -20.14916229]
[-6.37927723 -35.00233078]
[6.42908907 -42.80910492]
[20.58982277 -37.86383057]
[16.88366127 -52.39876556]
[13.17750072 -66.93370056]
[9.47133923 -81.46863556]
[5.76517820 -96.00357819]
[2.05901694 -110.53851318]
[-1.64714432 -125.07344818]
[-5.35330582 -139.60838318]
[-20.42238617 -139.51654053]
[-35.06665421 -143.03189087]
[-48.43587875 -149.94586182]
[-59.75491333 -159.85272217]
[-68.36866760 -172.17329407]
[-73.77998352 -186.18894958]
[-75.67837524 -201.08338928]
[-73.95778656 -215.99028015]
[-68.72254944 -230.04360962]
[-60.28105164 -242.42799377]
[-49.12757111 -252.42599487]
[-35.91334152 -259.45965576]
[-39.61950302 -273.99459839]
[-43.32566452 -288.52954102]
[-47.03182602 -303.06448364]
[-62.10653305 -302.93539429]
[-76.77391815 -306.41839600]
[-90.18124390 -313.31091309]
[-101.54902649 -323.21228027]
[-110.21636200 -335.54681396]
[-115.67932892 -349.59741211]
[-117.62032318 -364.54721069]
[-115.92650604 -379.52700806]
[-110.69635010 -393.66592407]
[-102.23391724 -406.14193726]
[-91.03121948 -416.22967529]
[-77.73956299 -423.34271240]
[-63.13170242 -427.06747437]
[-48.05691910 -427.18740845]
[-33.39164352 -423.69552612]
[-19.98849869 -416.79486084]
[-8.62672138 -406.88662720]
[0.03312822 -394.54681396]
[5.48757744 -380.49291992]
[7.41951227 -365.54196167]
[5.71661186 -350.56320190]
[0.47788104 -336.42745972]
[-7.99210739 -323.95657349]
[-19.20091820 -313.87561035]
[-32.49688721 -306.77062988]
[-28.79072762 -292.23568726]
[-25.08456612 -277.70077515]
[-21.37840462 -263.16583252]
[-6.40959978 -263.31835938]
[8.16948128 -259.88171387]
[21.51038170 -253.05146790]
[32.83563614 -243.22077942]
[41.48407745 -230.95780945]
[46.94943619 -216.97288513]
[48.90997696 -202.07734680]
[47.24742889 -187.13648987]
[42.05411911 -173.01927185]
[33.62784958 -160.54782104]
[22.45483589 -150.44950867]
[9.18163013 -143.31454468]
[12.88779163 -128.77960205]
[16.59395218 -114.24467468]
[20.30011368 -99.70973969]
[24.00627518 -85.17479706]
[27.71243668 -70.63986206]
[31.41859818 -56.10492706]
[35.12475967 -41.56999207]
[39.58157349 -27.24739456]
[44.77698898 -13.17587471]
[49.97240448 0.89564472]
[55.16781998 14.96716404]
[66.83442688 24.22673416]
[64.35589600 39.85259247]
[76.02249908 49.11216354]
[73.54396820 64.73802185]
[78.73937988 78.80953979]
[83.93479919 92.88106537]
[102.04986572 84.11621857]
[114.27347565 97.69017792]
[128.17602539 103.32213593]
[140.23823547 93.81430817]
[155.44061279 91.62727356]
[169.69381714 97.34933472]
[179.16378784 109.44128418]
[181.30316162 124.65044403]
[175.53645325 138.88563538]
[163.41488647 148.31765747]
[148.19908142 150.40934753]
[133.98204041 144.59805298]
[124.58805847 132.44697571]
[122.54407501 117.22469330]
[108.64151764 111.59273529]
[98.89093018 115.97705841]
[87.65235901 112.50222778]
[87.96441650 127.49897766]
[88.27646637 142.49572754]
[88.58852386 157.49249268]
[88.90058136 172.48924255]
[89.21263885 187.48599243]
[89.52469635 202.48274231]
[89.83675385 217.47950745]
[90.14880371 232.47625732]
[90.46086121 247.47300720]
[105.04350281 251.41296387]
[117.92471313 259.30291748]
[128.06025696 270.50323486]
[134.62850952 284.10598755]
[137.09700012 299.00845337]
[135.26564026 314.00253296]
[129.28285217 327.87274170]
[119.63365936 339.49468994]
[107.10028076 347.92623901]
[92.69873047 352.48388672]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 114]
[21 113]
[22 112]
[24 110]
[26 108]
[27 107]
[28 106]
[29 105]
[35 104]
[36 103]
[37 102]
[38 101]
[39 100]
[40 99]
[41 98]
[42 97]
[54 85]
[55 84]
[56 83]
[57 82]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
