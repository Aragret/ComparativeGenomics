%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUCAUCCUGGGGGGGGGGAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGxxxxxxxxxxCAUUACUAUUCUGCCUAGCAAACUCAAACUACGAACGCACUCACAGUCGCCCCCCCCCCCAUCAUAAUCCU\
) } def
/len { sequence length } bind def

/coor [
[83.44717407 373.98046875]
[69.95829773 367.24893188]
[58.47279358 357.48437500]
[49.65842438 345.25448608]
[44.02764130 331.27026367]
[41.90781403 316.34478760]
[43.42218399 301.34579468]
[48.48270798 287.14529419]
[56.79516983 274.56887817]
[67.87630463 264.34771729]
[81.08185577 257.07608032]
[95.64408112 253.17671204]
[95.33610535 238.17987061]
[95.02812958 223.18302917]
[94.72014618 208.18618774]
[94.41217041 193.18934631]
[94.10419464 178.19252014]
[93.79621887 163.19567871]
[93.48823547 148.19883728]
[93.18025970 133.20199585]
[92.87228394 118.20516205]
[81.38345337 111.67514038]
[75.67443848 98.11466217]
[61.63246536 103.38940430]
[47.59048843 108.66413879]
[43.59674072 123.65846252]
[31.53109360 133.41549683]
[16.03303337 134.18347168]
[3.06188297 125.66708374]
[-2.39468765 111.14105988]
[1.76148462 96.19094849]
[13.93226719 86.56537628]
[29.43774605 85.96556854]
[42.31574631 94.62216949]
[56.35772324 89.34742737]
[70.39969635 84.07268524]
[80.27540588 72.78240204]
[83.63466644 58.16339493]
[79.18444061 42.98096848]
[89.57550049 32.30973434]
[92.93476105 17.69072723]
[96.29402161 3.07171988]
[99.65327454 -11.54728794]
[103.01253510 -26.16629601]
[106.37179565 -40.78530121]
[92.07658386 -45.35842896]
[78.21417999 -51.11171722]
[64.88182068 -58.00481415]
[52.17302704 -65.98936462]
[40.17694092 -75.00936890]
[28.97770691 -85.00154877]
[18.65388107 -95.89582062]
[9.27787876 -107.61576843]
[0.91546845 -120.07917786]
[-6.37469387 -133.19863892]
[-12.54147243 -146.88211060]
[-17.54160881 -161.03361511]
[-21.34003448 -175.55389404]
[-23.91010094 -190.34109497]
[-25.23378372 -205.29148865]
[-25.30179596 -220.30021667]
[-24.11366272 -235.26199341]
[-21.67771721 -250.07188416]
[-18.01104546 -264.62600708]
[-13.13936806 -278.82223511]
[-7.09685659 -292.56103516]
[0.07410529 -305.74603271]
[8.32321739 -318.28469849]
[17.59261703 -330.08914185]
[27.81728363 -341.07653809]
[38.92549896 -351.16979980]
[50.83934402 -360.29815674]
[63.47525406 -368.39755249]
[76.74459076 -375.41119385]
[90.55428314 -381.28988647]
[104.80746460 -385.99240112]
[119.40415192 -389.48571777]
[134.24195862 -391.74533081]
[149.21681213 -392.75546265]
[164.22366333 -392.50894165]
[179.15727234 -391.00753784]
[193.91285706 -388.26177979]
[208.38693237 -384.29095459]
[222.47798157 -379.12286377]
[236.08714294 -372.79376221]
[249.11895752 -365.34808350]
[261.48202515 -356.83804321]
[273.08963013 -347.32333374]
[283.86035156 -336.87066650]
[293.71862793 -325.55337524]
[302.59533691 -313.45086670]
[310.42816162 -300.64801025]
[317.16223145 -287.23461914]
[322.75024414 -273.30474854]
[327.15301514 -258.95617676]
[330.33969116 -244.28948975]
[332.28790283 -229.40759277]
[332.98400879 -214.41485596]
[332.42306519 -199.41645813]
[330.60906982 -184.51759338]
[327.55471802 -169.82278442]
[323.28143311 -155.43510437]
[317.81921387 -141.45544434]
[311.20632935 -127.98190308]
[303.48922729 -115.10896301]
[294.72195435 -102.92693329]
[284.96609497 -91.52125549]
[274.29003906 -80.97193909]
[262.76864624 -71.35297394]
[250.48278809 -62.73184204]
[237.51860046 -55.16900253]
[223.96704102 -48.71751404]
[209.92315674 -43.42262650]
[195.48545837 -39.32147980]
[180.75520325 -36.44284439]
[165.83575439 -34.80690765]
[150.83172607 -34.42514420]
[135.84837341 -35.30023575]
[120.99079895 -37.42604446]
[117.63154602 -22.80703545]
[114.27228546 -8.18802929]
[110.91302490 6.43097878]
[107.55376434 21.04998589]
[104.19451141 35.66899490]
[108.88500214 49.80577087]
[98.25366974 61.52265549]
[94.89441681 76.14166260]
[111.59582520 79.92130280]
[120.91016388 93.24353027]
[118.94111633 108.50433350]
[107.86911774 117.89718628]
[108.17710114 132.89402771]
[108.48507690 147.89086914]
[108.79305267 162.88769531]
[109.10102844 177.88453674]
[109.40901184 192.88137817]
[109.71698761 207.87821960]
[110.02496338 222.87504578]
[110.33293915 237.87188721]
[110.64092255 252.86872864]
[125.35095215 256.16696167]
[138.84391785 262.89031982]
[150.33532715 272.64791870]
[159.15711975 284.87246704]
[164.79637146 298.85324097]
[166.92524719 313.77743530]
[165.41996765 328.77734375]
[160.36805725 342.98092651]
[152.06321716 355.56237793]
[140.98829651 365.79025269]
[127.78714752 373.06988525]
[113.22728729 376.97808838]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[23 36]
[24 35]
[25 34]
[37 127]
[38 126]
[40 124]
[41 123]
[42 122]
[43 121]
[44 120]
[45 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
