%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAUAAUCCUAUUUAGGGGGGGGGGUUACCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACxxxxxxxxxxAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAAAUUAUCCCCCCCCCCGAUAAUCAUAUUUA\
) } def
/len { sequence length } bind def

/coor [
[102.05864716 411.43606567]
[87.69639587 406.92935181]
[74.53550720 399.62347412]
[63.11491013 389.81759644]
[53.90227127 377.91329956]
[47.27484131 364.39807129]
[43.50401306 349.82528687]
[42.74419403 334.79174805]
[45.02650452 319.91302490]
[50.25748062 305.79843140]
[58.22291946 293.02593994]
[68.59664154 282.11856079]
[80.95384979 273.52297974]
[94.78852081 267.59112549]
[109.53413391 264.56594849]
[109.53413391 249.56594849]
[109.53413391 234.56594849]
[109.53413391 219.56594849]
[109.53413391 204.56594849]
[109.53413391 189.56594849]
[109.53413391 174.56594849]
[109.53413391 159.56594849]
[109.53413391 144.56594849]
[109.53413391 129.56594849]
[97.06708527 132.16937256]
[84.10321808 129.53390503]
[72.83015442 121.70969391]
[65.30159760 109.65131378]
[63.06871033 95.11269379]
[48.52388382 91.44553375]
[33.97906113 87.77837372]
[19.43423462 84.11121368]
[4.88940907 80.44405365]
[-9.65541649 76.77689362]
[-24.20024109 73.10974121]
[-31.69298744 86.21551514]
[-42.44458389 96.81295013]
[-55.65719604 104.11565399]
[-70.35035706 107.58171082]
[-85.43374634 106.95391083]
[-99.78806305 102.27885437]
[-112.34812164 93.90345001]
[-122.18189240 82.44921112]
[-128.55964661 68.76612091]
[-131.00808716 53.86956024]
[-129.34556580 38.86494064]
[-123.69541168 24.86571312]
[-114.47692108 12.91071033]
[-102.37417603 3.88707399]
[-88.28526306 -1.53558278]
[-73.25568390 -2.95486259]
[-58.40073395 -0.26544556]
[-44.82274246 6.33309603]
[-33.52929306 16.35110664]
[-25.35842705 29.04518127]
[-20.91648483 43.47333908]
[-20.53308296 58.56491089]
[-5.98825788 62.23207092]
[8.55656815 65.89923096]
[23.10139275 69.56639099]
[37.64621735 73.23355103]
[52.19104385 76.90070343]
[66.73587036 80.56786346]
[72.74194336 76.07598114]
[60.48592758 67.42786407]
[64.92347717 53.09928513]
[79.92205048 52.89189911]
[84.75409698 67.09220886]
[90.76017761 62.60032272]
[91.35277557 47.61203384]
[91.94537354 32.62374115]
[92.53797150 17.63545227]
[93.13057709 2.64716339]
[79.31289673 -3.68847322]
[68.97524261 -14.83303452]
[63.69401169 -29.08705330]
[64.27456665 -44.27690125]
[70.62837982 -58.08622742]
[81.78652954 -68.40921783]
[96.04748535 -73.67169189]
[111.23654938 -73.07115173]
[125.03750610 -66.69918060]
[135.34580994 -55.52746582]
[140.58952332 -41.25959778]
[139.96899414 -26.07133484]
[133.57888794 -12.27876949]
[122.39361572 -1.98517084]
[108.11886597 3.23976231]
[107.52626801 18.22805214]
[106.93366241 33.21634293]
[106.34106445 48.20463181]
[105.74846649 63.19292068]
[127.07541656 79.17276001]
[130.89576721 103.23973846]
[145.57412720 100.15006256]
[160.25247192 97.06037903]
[174.93081665 93.97070312]
[189.60916138 90.88101959]
[204.28750610 87.79134369]
[218.96586609 84.70166016]
[233.64421082 81.61198425]
[248.32255554 78.52230072]
[251.18365479 64.65311432]
[259.09906006 52.96295929]
[270.84204102 45.20455170]
[284.61505127 42.52580261]
[298.32485962 45.30007172]
[309.90075684 53.07453537]
[317.60726929 64.64371490]
[332.34378052 61.84464264]
[347.08032227 59.04556656]
[361.81683350 56.24649429]
[373.87939453 45.13671875]
[389.44915771 50.28589630]
[392.50930786 66.39699554]
[379.91183472 76.89629364]
[364.61590576 70.98301697]
[349.87939453 73.78209686]
[335.14285278 76.58116913]
[320.40634155 79.38024139]
[316.59069824 94.87248230]
[306.37359619 107.20277405]
[291.75448608 113.87886810]
[275.62896729 113.52282715]
[261.21533203 106.15512848]
[251.41223145 93.20065308]
[236.73388672 96.29032898]
[222.05554199 99.38001251]
[207.37719727 102.46968842]
[192.69883728 105.55937195]
[178.02049255 108.64904785]
[163.34214783 111.73872375]
[148.66380310 114.82840729]
[133.98545837 117.91808319]
[124.53413391 129.56594849]
[124.53413391 144.56594849]
[124.53413391 159.56594849]
[124.53413391 174.56594849]
[124.53413391 189.56594849]
[124.53413391 204.56594849]
[124.53413391 219.56594849]
[124.53413391 234.56594849]
[124.53413391 249.56594849]
[124.53413391 264.56594849]
[139.27975464 267.59112549]
[153.11442566 273.52297974]
[165.47163391 282.11856079]
[175.84535217 293.02593994]
[183.81079102 305.79843140]
[189.04176331 319.91302490]
[191.32408142 334.79174805]
[190.56425476 349.82528687]
[186.79342651 364.39807129]
[180.16600037 377.91329956]
[170.95336914 389.81759644]
[159.53276062 399.62347412]
[146.37187195 406.92935181]
[132.00962830 411.43606567]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[29 63]
[30 62]
[31 61]
[32 60]
[33 59]
[34 58]
[35 57]
[69 92]
[70 91]
[71 90]
[72 89]
[73 88]
[94 134]
[95 133]
[96 132]
[97 131]
[98 130]
[99 129]
[100 128]
[101 127]
[102 126]
[109 120]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
