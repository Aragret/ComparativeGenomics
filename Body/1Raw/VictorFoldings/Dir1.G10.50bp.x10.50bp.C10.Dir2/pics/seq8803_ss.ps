%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUCACAUGGGGGGGGGGGCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCxxxxxxxxxxUUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCCCCCCCCCCCUAAUCACAU\
) } def
/len { sequence length } bind def

/coor [
[199.02883911 176.69868469]
[194.34815979 162.44767761]
[190.57458496 147.93008423]
[187.72311401 133.20361328]
[185.80508423 118.32675171]
[184.82809448 103.35859680]
[184.79603577 88.35863495]
[185.71052551 73.37051392]
[171.80796814 79.00247192]
[157.90541077 84.63442993]
[144.00285339 90.26638031]
[130.10029602 95.89833832]
[116.19773865 101.53029633]
[106.26528168 115.01515198]
[89.69389343 112.58938599]
[75.91151428 118.50935364]
[62.12913132 124.42931366]
[61.39175415 139.63516235]
[54.15493393 152.95864868]
[41.90112305 161.78271484]
[27.09208679 164.40063477]
[12.67444229 160.34588623]
[1.49335277 150.47427368]
[-12.28902912 156.39424133]
[-26.07140923 162.31420898]
[-39.85379028 168.23416138]
[-52.02091599 180.04083252]
[-66.73436737 171.61761475]
[-62.71342468 155.14738464]
[-45.77375412 154.45178223]
[-31.99137306 148.53181458]
[-18.20899200 142.61186218]
[-4.42661047 136.69189453]
[-3.88808584 121.78633881]
[3.09745145 108.53826141]
[15.19183636 99.60031128]
[30.02804756 96.78837585]
[44.67338562 100.71279907]
[56.20916748 110.64693451]
[69.99154663 104.72697449]
[83.77393341 98.80700684]
[88.75991058 88.23696136]
[99.54562378 83.73648071]
[110.56578064 87.62773895]
[124.46833801 81.99578094]
[138.37089539 76.36383057]
[152.27345276 70.73187256]
[166.17601013 65.09991455]
[180.07856750 59.46795654]
[183.17701721 44.79077911]
[186.27520752 30.11490631]
[175.83538818 19.34409714]
[165.39558411 8.57328987]
[154.95576477 -2.19751906]
[144.51596069 -12.96832752]
[129.15051270 -20.13350105]
[131.78210449 -36.88196945]
[148.60452271 -38.98966599]
[155.28675842 -23.40814018]
[165.72657776 -12.63733101]
[176.16638184 -1.86652291]
[186.60620117 8.90428543]
[197.04602051 19.67509460]
[202.26173401 5.61109066]
[208.35313416 -8.09638405]
[215.29600525 -21.39287376]
[223.06275940 -34.22554779]
[231.62254333 -46.54342651]
[240.94134521 -58.29757309]
[250.98214722 -69.44128418]
[261.70504761 -79.93029022]
[273.06747437 -89.72291565]
[285.02423096 -98.78025818]
[297.52789307 -107.06633759]
[310.52868652 -114.54822540]
[323.97506714 -121.19619751]
[337.81350708 -126.98384857]
[351.98910522 -131.88818359]
[366.44552612 -135.88970947]
[381.12530518 -138.97253418]
[395.97015381 -141.12440491]
[410.92108154 -142.33679199]
[425.91870117 -142.60485840]
[440.90338135 -141.92753601]
[455.81564331 -140.30752563]
[470.59622192 -137.75126648]
[485.18640137 -134.26892090]
[499.52819824 -129.87429810]
[513.56463623 -124.58487701]
[527.23999023 -118.42166901]
[540.49987793 -111.40916443]
[553.29162598 -103.57521057]
[565.56445312 -94.95094299]
[577.26959229 -85.57061768]
[588.36047363 -75.47150421]
[598.79309082 -64.69373322]
[608.52600098 -53.28010941]
[617.52050781 -41.27599335]
[625.74084473 -28.72906685]
[633.15447998 -15.68918324]
[639.73181152 -2.20814586]
[645.44683838 11.66048431]
[650.27673340 25.86160851]
[654.20239258 40.33880615]
[657.20819092 55.03456116]
[659.28216553 69.89048767]
[660.41607666 84.84756470]
[660.60552979 99.84637451]
[659.84960938 114.82731628]
[658.15142822 129.73088074]
[655.51763916 144.49784851]
[651.95880127 159.06954956]
[647.48907471 173.38810730]
[642.12609863 187.39662170]
[635.89123535 201.03945923]
[628.80926514 214.26237488]
[620.90832520 227.01287842]
[612.21978760 239.24029541]
[602.77819824 250.89604187]
[592.62109375 261.93380737]
[581.78875732 272.30975342]
[570.32421875 281.98266602]
[558.27307129 290.91409302]
[545.68322754 299.06854248]
[532.60461426 306.41363525]
[519.08929443 312.92019653]
[505.19088745 318.56237793]
[490.96459961 323.31774902]
[476.46701050 327.16738892]
[461.75570679 330.09606934]
[446.88909912 332.09210205]
[431.92630005 333.14758301]
[416.92669678 333.25833130]
[401.94992065 332.42385864]
[387.05548096 330.64752197]
[372.30252075 327.93634033]
[357.74966431 324.30114746]
[343.45477295 319.75631714]
[329.47457886 314.31994629]
[315.86462402 308.01364136]
[302.67901611 300.86242676]
[289.97015381 292.89471436]
[277.78848267 284.14218140]
[266.18240356 274.63958740]
[255.19805908 264.42468262]
[244.87907410 253.53807068]
[235.26643372 242.02299500]
[226.39834595 229.92518616]
[218.31002808 217.29272461]
[211.03361511 204.17578125]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 49]
[9 48]
[10 47]
[11 46]
[12 45]
[13 44]
[15 41]
[16 40]
[17 39]
[23 33]
[24 32]
[25 31]
[26 30]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
