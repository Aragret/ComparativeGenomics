%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAAUAAGGGGGGGGGGACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAACCxxxxxxxxxxAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUUGUAACUUACUACUCCGGCCCCCCCCCCAAAAAAAGAA\
) } def
/len { sequence length } bind def

/coor [
[81.25978851 396.45904541]
[67.41384888 390.44302368]
[55.70518875 380.91360474]
[47.00266647 368.57794189]
[41.95206451 354.35140991]
[40.92817307 339.28973389]
[44.00696945 324.51055908]
[50.95999146 311.11065674]
[61.27127838 300.08432007]
[74.17565918 292.24981689]
[88.71554565 288.18847656]
[88.71554565 273.18847656]
[88.71554565 258.18847656]
[88.71554565 243.18849182]
[88.71554565 228.18849182]
[88.71554565 213.18849182]
[88.71554565 198.18849182]
[88.71554565 183.18849182]
[88.71554565 168.18849182]
[88.71554565 153.18849182]
[86.76187897 151.09312439]
[85.54850006 148.07292175]
[85.44139862 144.41635132]
[86.69142914 140.54228210]
[89.39143372 136.95460510]
[90.63831329 122.00651550]
[91.88518524 107.05842590]
[88.78686523 92.38189697]
[81.60435486 79.21331787]
[74.42184448 66.04473114]
[67.23933411 52.87615204]
[62.66809464 50.09706116]
[59.93548584 46.21309280]
[59.15272522 42.12787628]
[60.04885101 38.65448761]
[53.70172501 25.06353760]
[47.35459518 11.47258568]
[41.00746536 -2.11836505]
[34.66033554 -15.70931625]
[25.27317238 -27.40893936]
[13.38079357 -36.55067444]
[1.48841333 -45.69240952]
[-10.48354816 -36.50902176]
[-24.42477989 -30.73802376]
[-39.38475037 -28.77288437]
[-54.34345627 -30.74759483]
[-68.28099060 -36.52751160]
[-80.24707794 -45.71855545]
[-89.42584229 -57.69406128]
[-95.19145966 -71.63751984]
[-97.15081787 -86.59824371]
[-95.17033386 -101.55619049]
[-89.38503265 -115.49149323]
[-80.18936920 -127.45403290]
[-68.21031952 -136.62817383]
[-54.26463699 -142.38839722]
[-39.30315781 -144.34197998]
[-24.34597778 -142.35572815]
[-10.41290760 -136.56504822]
[1.54607451 -127.36476135]
[10.71558571 -115.38217163]
[16.47043228 -101.43426514]
[18.41824150 -86.47203064]
[16.42620659 -71.51561737]
[10.63014793 -57.58478928]
[22.52252769 -48.44305420]
[34.41490555 -39.30131912]
[28.98269463 -53.28313065]
[27.12803268 -68.16802979]
[28.96314621 -83.05535126]
[34.37699509 -97.04428864]
[43.04199219 -109.28837585]
[54.43383408 -119.04676056]
[67.86321259 -125.72895813]
[82.51753998 -128.93064880]
[97.51009369 -128.45808411]
[111.93370056 -124.33988953]
[124.91560364 -116.82522583]
[135.67028809 -106.36881256]
[143.54701233 -93.60333252]
[148.06915283 -79.30123138]
[148.96307373 -64.32788849]
[146.17471313 -49.58933640]
[139.87275696 -35.97737503]
[130.43855286 -24.31564903]
[118.44295502 -15.30979443]
[104.61177826 -9.50474358]
[89.78194427 -7.25175047]
[74.85077667 -8.68714237]
[60.72175217 -13.72406387]
[48.25128555 -22.05644608]
[54.59841537 -8.46549416]
[60.94554520 5.12545633]
[67.29267120 18.71640778]
[73.63980103 32.30735779]
[80.40792084 45.69364166]
[87.59042358 58.86222458]
[94.77293396 72.03080750]
[101.95544434 85.19939423]
[102.80780029 70.22362518]
[106.69776154 55.73679733]
[113.46166229 42.34838486]
[122.81494904 30.62166023]
[134.36410522 21.04998207]
[147.62324524 14.03604794]
[162.03453064 9.87494373]
[176.99165344 8.74173355]
[191.86537170 10.68409252]
[206.02989197 15.62030315]
[218.88931274 23.34269142]
[229.90261841 33.52636719]
[238.60644531 45.74288177]
[244.63462830 59.47827530]
[247.73355103 74.15467072]
[247.77282715 89.15462494]
[244.75080872 103.84705353]
[238.79464722 117.61382294]
[230.15490723 129.87574768]
[219.19508362 140.11695862]
[206.37628174 147.90658569]
[192.23780823 152.91691589]
[177.37446594 154.93713379]
[162.41160583 153.88227844]
[147.97872925 149.79669189]
[134.68304443 142.85229492]
[123.08391571 133.34123230]
[113.66934967 121.66365051]
[106.83327484 108.30529785]
[105.58639526 123.25338745]
[104.33952332 138.20147705]
[103.71554565 153.18849182]
[103.71554565 168.18849182]
[103.71554565 183.18849182]
[103.71554565 198.18849182]
[103.71554565 213.18849182]
[103.71554565 228.18849182]
[103.71554565 243.18849182]
[103.71554565 258.18847656]
[103.71554565 273.18847656]
[103.71554565 288.18847656]
[118.25543213 292.24981689]
[131.15980530 300.08432007]
[141.47109985 311.11065674]
[148.42411804 324.51055908]
[151.50291443 339.28973389]
[150.47901917 354.35140991]
[145.42842102 368.57794189]
[136.72590637 380.91360474]
[125.01723480 390.44302368]
[111.17130280 396.45904541]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 130]
[26 129]
[27 128]
[28 99]
[29 98]
[30 97]
[31 96]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 67]
[41 66]
[42 65]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
