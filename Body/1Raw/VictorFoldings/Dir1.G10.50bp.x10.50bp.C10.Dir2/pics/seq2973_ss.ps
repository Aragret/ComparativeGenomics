%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUUACCCUAGGGGGGGGGGGGGAUAACAGCGCAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUAxxxxxxxxxxAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUCCCCCCCCCCAGUUCCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.99293518 700.01617432]
[70.94702911 699.07580566]
[56.56357956 694.56146240]
[43.67881012 686.73541260]
[33.04183578 676.05285645]
[25.27106667 663.13470459]
[20.81829071 648.73205566]
[19.94238472 633.68225098]
[22.69427490 618.86029053]
[28.91396523 605.12786865]
[38.23985672 593.28344727]
[50.12974930 584.01550293]
[63.89238358 577.86303711]
[78.72761536 575.18359375]
[79.66324615 560.21282959]
[80.59887695 545.24200439]
[81.53450012 530.27124023]
[82.47013092 515.30041504]
[83.40576172 500.32965088]
[84.34138489 485.35885620]
[85.27701569 470.38806152]
[86.21264648 455.41726685]
[87.14826965 440.44647217]
[88.08390045 425.47567749]
[78.26808167 417.07052612]
[75.05718994 404.35186768]
[79.84739685 391.93084717]
[91.09127045 384.44534302]
[92.33815002 369.49725342]
[93.58502197 354.54916382]
[85.24598694 339.13940430]
[95.78867340 324.07846069]
[96.72429657 309.10766602]
[97.50414276 294.12796021]
[98.12812042 279.14096069]
[98.12812042 264.14096069]
[97.50414276 249.15393066]
[96.88016510 234.16691589]
[88.62013245 221.77252197]
[95.77666473 207.66242981]
[95.15268707 192.67541504]
[94.52870941 177.68840027]
[83.89317322 170.34796143]
[79.37894440 158.03146362]
[82.85348511 145.18017578]
[93.25928497 136.56756592]
[92.94722748 121.57081604]
[85.89344788 119.44087219]
[79.54138947 114.95993042]
[74.68133545 108.38112640]
[72.00600433 100.22297668]
[72.02217865 91.23059082]
[74.97787476 82.30782318]
[64.99514771 71.11206055]
[55.01242447 59.91629028]
[39.14230347 57.56707382]
[31.20905685 43.62278366]
[37.29839325 28.78029251]
[52.73908997 24.42548752]
[65.68637085 33.89900208]
[66.20819092 49.93356705]
[76.19091797 61.12932968]
[86.17364502 72.32509613]
[100.81714630 69.07427216]
[105.12472534 54.70608521]
[109.43231201 40.33790207]
[113.73989868 25.96971893]
[117.89778137 11.55750275]
[121.90552521 -2.89718580]
[125.91326904 -17.35187340]
[112.83403015 -24.86083603]
[102.03368378 -35.38715363]
[94.19114685 -48.26913071]
[89.79940033 -62.69699860]
[89.13451385 -77.76380920]
[92.23828125 -92.52244568]
[98.91560364 -106.04517365]
[108.74674225 -117.48194122]
[121.11369324 -126.11382294]
[135.23905945 -131.39820862]
[150.23490906 -133.00292969]
[165.15859985 -130.82708740]
[179.07202148 -125.00748444]
[191.10054016 -115.90992737]
[200.48805237 -104.10630035]
[206.64443970 -90.33860016]
[209.18270874 -75.47225952]
[207.94331360 -60.44180298]
[203.00415039 -46.19204712]
[194.67570496 -33.61875153]
[183.48150635 -23.51227951]
[170.12524414 -16.50793266]
[155.44647217 -13.04601097]
[140.36795044 -13.34413433]
[136.36021423 1.11055458]
[132.35247803 15.56524277]
[133.60420227 22.89864922]
[128.10807800 30.27730370]
[123.80049896 44.64548874]
[119.49291229 59.01367188]
[115.18532562 73.38185883]
[126.58361816 102.14225769]
[107.94398499 121.25875854]
[108.25603485 136.25550842]
[121.08960724 148.09767151]
[121.41408539 165.22013855]
[109.51572418 177.06442261]
[110.13970184 192.05143738]
[110.76367950 207.03845215]
[119.06835175 220.50482178]
[111.86717987 233.54293823]
[112.49115753 248.52995300]
[113.11513519 263.51696777]
[115.66356659 267.21386719]
[116.75135803 271.13659668]
[116.49224091 274.78552246]
[115.15427399 277.75265503]
[113.11513519 279.76492310]
[112.49115753 294.75195312]
[115.27443695 303.52151489]
[111.69509125 310.04330444]
[110.75946045 325.01409912]
[118.71145630 335.22290039]
[117.58506775 347.71090698]
[108.53311157 355.79602051]
[107.28623199 370.74411011]
[106.03936005 385.69219971]
[117.57387543 398.80297852]
[116.11862183 415.86657715]
[103.05469513 426.41131592]
[102.11906433 441.38211060]
[101.18343353 456.35290527]
[100.24781036 471.32369995]
[99.31217957 486.29449463]
[98.37654877 501.26525879]
[97.44092560 516.23608398]
[96.50529480 531.20684814]
[95.56966400 546.17767334]
[94.63404083 561.14843750]
[93.69841003 576.11920166]
[108.08459473 580.62487793]
[120.97410583 588.44305420]
[131.61755371 599.11926270]
[139.39614868 612.03265381]
[143.85766602 626.43261719]
[144.74269104 641.48187256]
[141.99978638 656.30548096]
[135.78842163 670.04168701]
[126.46971893 681.89178467]
[114.58544159 691.16687012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 130]
[28 127]
[29 126]
[30 125]
[32 122]
[33 121]
[34 119]
[35 118]
[36 113]
[37 112]
[38 111]
[40 109]
[41 108]
[42 107]
[46 104]
[47 103]
[53 63]
[54 62]
[55 61]
[64 101]
[65 100]
[66 99]
[67 98]
[68 96]
[69 95]
[70 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
