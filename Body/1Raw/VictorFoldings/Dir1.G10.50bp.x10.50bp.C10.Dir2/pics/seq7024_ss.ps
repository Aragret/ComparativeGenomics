%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCCACUUCGGGGGGGGGGCACUAUGUCCUAUCAAUAGGAGCUGUAUUUGCCAUCAUAGGAGGCUUCAUxxxxxxxxxxAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUAAGAUUAAAAAUGCCCCCCCCCCCCCUAGCCCACUUC\
) } def
/len { sequence length } bind def

/coor [
[118.70858765 366.90533447]
[104.68664551 361.35232544]
[92.48668671 352.48599243]
[82.87561798 340.86367798]
[76.45758820 327.21597290]
[73.63605499 312.40078735]
[74.58837128 297.34939575]
[79.25467682 283.00799561]
[87.34163666 270.27801514]
[98.34091187 259.95974731]
[111.56107330 252.70178223]
[126.17108917 248.96034241]
[126.17108917 233.96034241]
[126.17108917 218.96034241]
[126.17108917 203.96034241]
[126.17108917 188.96034241]
[126.17108917 173.96034241]
[126.17108917 158.96034241]
[126.17108917 143.96034241]
[126.17108917 128.96034241]
[126.17108917 113.96034241]
[106.74257660 126.83004761]
[85.75514221 121.35120392]
[76.58885956 103.48768616]
[61.81674194 100.88295746]
[47.04462433 98.27823639]
[32.27250671 95.67351532]
[17.50039291 93.06879425]
[2.50750613 92.60686493]
[-12.39694118 94.29726410]
[-27.30138969 95.98766327]
[-42.20583725 97.67806244]
[-57.11028290 99.36845398]
[-69.96904755 109.54608917]
[-85.11067200 103.24819946]
[-86.95874023 86.95351410]
[-73.61212921 77.42461395]
[-58.80068207 84.46401215]
[-43.89623260 82.77361298]
[-28.99178696 81.08321381]
[-14.08733845 79.39281464]
[0.81710869 77.70242310]
[2.96568775 62.85709763]
[-10.84789467 57.01030731]
[-24.69054985 64.28457642]
[-39.95936966 60.90860367]
[-49.44488144 48.47642517]
[-48.66832352 32.85813522]
[-37.99635696 21.42821312]
[-22.46795845 19.58351707]
[-9.41516590 28.19505692]
[-5.00110674 43.19672394]
[8.81247616 49.04351425]
[16.41823387 55.77649689]
[20.74620819 63.70495987]
[21.82594872 71.58203888]
[20.10511398 78.29667664]
[34.87723160 80.90139771]
[49.64934540 83.50611877]
[64.42146301 86.11084747]
[79.19358063 88.71556854]
[85.50807190 79.42356110]
[95.92642975 73.64737701]
[108.50765991 73.15206909]
[120.58697510 78.64599609]
[120.27899170 63.64915848]
[119.97101593 48.65232086]
[116.64929962 40.07549286]
[119.81385803 33.34513474]
[119.81385803 18.34513474]
[119.81385803 3.34513474]
[106.47273254 -4.26471853]
[98.73776245 -17.53369904]
[98.68962097 -32.89251709]
[106.34125519 -46.20972443]
[119.63441467 -53.90306473]
[134.99330139 -53.90306473]
[148.28646851 -46.20972443]
[155.93809509 -32.89251709]
[155.88995361 -17.53369904]
[148.15498352 -4.26471853]
[134.81385803 3.34513474]
[134.81385803 18.34513474]
[134.81385803 33.34513474]
[134.96784973 48.34434509]
[135.27583313 63.34118271]
[135.58381653 78.33802032]
[147.36595154 87.62140656]
[162.01867676 84.41240692]
[176.67140198 81.20341492]
[191.32412720 77.99441528]
[205.97685242 74.78542328]
[207.01170349 59.12101746]
[212.40092468 44.39192963]
[221.70269775 31.78191948]
[234.16111755 22.30200195]
[248.76763916 16.70938873]
[264.34265137 15.44701004]
[279.63079834 18.60844421]
[293.40209961 25.93103409]
[304.55102539 36.81768799]
[312.18508911 50.38556671]
[326.76885986 46.87639999]
[341.35260010 43.36723328]
[355.89956665 39.70852661]
[370.40817261 35.90066910]
[381.67651367 23.98611641]
[397.56408691 28.05019951]
[401.72714233 43.91213989]
[389.88305664 55.25453186]
[374.21603394 50.40929413]
[359.70739746 54.21715164]
[354.00088501 58.98659897]
[344.86175537 57.95098114]
[330.27801514 61.46015167]
[315.69427490 64.96931458]
[315.27481079 79.32676697]
[311.13867188 93.09462738]
[303.56347656 105.32687378]
[293.06338501 115.18128204]
[280.35418701 121.97743225]
[266.30450439 125.24365234]
[251.87643433 124.74981689]
[238.05969238 120.52347565]
[225.80371094 112.84843445]
[215.95234680 102.24570465]
[209.18583679 89.43814850]
[194.53311157 92.64714050]
[179.88038635 95.85614014]
[165.22766113 99.06513214]
[150.57493591 102.27413177]
[141.17108154 113.96034241]
[141.17108154 128.96034241]
[141.17108154 143.96034241]
[141.17108154 158.96034241]
[141.17108154 173.96034241]
[141.17108154 188.96034241]
[141.17108154 203.96034241]
[141.17108154 218.96034241]
[141.17108154 233.96034241]
[141.17108154 248.96034241]
[155.78109741 252.70178223]
[169.00125122 259.95974731]
[180.00053406 270.27801514]
[188.08749390 283.00799561]
[192.75379944 297.34939575]
[193.70611572 312.40078735]
[190.88458252 327.21597290]
[184.46655273 340.86367798]
[174.85548401 352.48599243]
[162.65553284 361.35232544]
[148.63359070 366.90533447]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 61]
[25 60]
[26 59]
[27 58]
[28 57]
[29 42]
[30 41]
[31 40]
[32 39]
[33 38]
[43 53]
[44 52]
[65 87]
[66 86]
[67 85]
[69 84]
[70 83]
[71 82]
[88 131]
[89 130]
[90 129]
[91 128]
[92 127]
[102 116]
[103 115]
[104 114]
[105 112]
[106 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
