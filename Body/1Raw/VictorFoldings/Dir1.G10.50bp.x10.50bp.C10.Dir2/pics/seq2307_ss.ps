%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUAAAAAGGGGGGGGGGAUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUxxxxxxxxxxCAUGGCCAUCCCCUUAUGAGCGGGCACAGUGAUUAUAGGCUUUCGCUCUACCCCCCCCCCAGAUUAAAAA\
) } def
/len { sequence length } bind def

/coor [
[35.91714859 591.05389404]
[22.07121086 585.03790283]
[10.36254978 575.50848389]
[1.66002536 563.17279053]
[-3.39057660 548.94628906]
[-4.41446781 533.88458252]
[-1.33566880 519.10546875]
[5.61735296 505.70550537]
[15.92863750 494.67916870]
[28.83301735 486.84466553]
[43.37290573 482.78335571]
[43.37290573 467.78335571]
[43.37290573 452.78335571]
[43.37290573 437.78335571]
[43.37290573 422.78335571]
[43.37290573 407.78335571]
[43.37290573 392.78335571]
[43.37290573 377.78335571]
[43.37290573 362.78335571]
[43.37290573 347.78335571]
[34.63567734 359.97601318]
[21.53164291 367.27563477]
[6.56576395 368.28677368]
[-7.40108395 362.81622314]
[-17.69899940 351.90966797]
[-22.35943222 337.65200806]
[-20.49149704 322.76876831]
[-12.45226860 310.10501099]
[0.22147764 302.08154297]
[15.10702801 300.23211670]
[29.35886383 304.91027832]
[40.25260544 315.22174072]
[45.70558167 329.19390869]
[49.41174316 314.65899658]
[53.11790466 300.12405396]
[51.71388626 292.81826782]
[57.05531311 285.32687378]
[61.06305313 270.87219238]
[64.31388092 256.22866821]
[66.79899597 241.43597412]
[69.28411102 226.64326477]
[71.76923370 211.85055542]
[74.25434875 197.05784607]
[68.73255920 183.22459412]
[78.64927673 170.89700317]
[81.13439178 156.10429382]
[75.61260223 142.27104187]
[85.52931976 129.94345093]
[88.01443481 115.15074158]
[61.79301453 82.51954651]
[57.18745041 68.24408722]
[52.58188629 53.96862793]
[47.97632217 39.69316864]
[33.01411438 41.34157181]
[18.02639389 39.94401550]
[3.62690020 35.55773544]
[-9.59471703 28.36233902]
[-21.09704208 18.65247726]
[-30.40906143 6.82576227]
[-37.14945221 -6.63351011]
[-41.04220200 -21.17419052]
[-41.92790222 -36.20084763]
[-39.77028656 -51.09814835]
[-34.65771103 -65.25605774]
[-26.79952431 -78.09481812]
[-16.51751900 -89.08869171]
[-4.23273754 -97.78749084]
[9.55176735 -103.83499146]
[24.27152824 -106.98356628]
[39.32378006 -107.10427856]
[54.09214401 -104.19217682]
[67.97186279 -98.36652374]
[80.39457703 -89.86586761]
[90.85157013 -79.03830719]
[98.91464996 -66.32721710]
[104.25363159 -52.25312424]
[106.64988708 -37.39234161]
[106.00529480 -22.35341454]
[102.34623718 -7.75217295]
[95.82257080 5.81346846]
[86.70142365 17.78800583]
[75.35630035 27.68108940]
[62.25178146 35.08760071]
[66.85734558 49.36306381]
[71.46291351 63.63852310]
[76.06847382 77.91398621]
[83.25256348 80.06777954]
[94.16711426 69.77833557]
[97.62075043 84.37535858]
[104.80484009 86.52915192]
[116.50446320 77.14199066]
[128.20408630 67.75482941]
[139.80543518 58.24647141]
[151.30723572 48.61794662]
[156.42257690 33.03701782]
[172.52699280 29.94186783]
[183.05363464 42.51651764]
[177.17359924 57.82524872]
[160.93576050 60.11974716]
[149.43395996 69.74827576]
[146.30364990 76.49711609]
[137.59124756 79.45445251]
[125.89162445 88.84161377]
[114.19200134 98.22877502]
[129.18733215 98.60339355]
[139.02468872 109.92710114]
[137.29942322 124.82755280]
[125.13477325 133.60374451]
[110.45059967 130.54188538]
[102.80714417 117.63586426]
[100.32202148 132.42857361]
[105.66606140 147.31990051]
[95.92710114 158.58941650]
[93.44197845 173.38212585]
[98.78601837 188.27345276]
[89.04705811 199.54296875]
[86.56194305 214.33567810]
[84.07682037 229.12838745]
[81.59170532 243.92109680]
[79.10658264 258.71380615]
[92.80789185 252.60853577]
[106.22061920 259.32409668]
[109.54114532 273.95196533]
[100.34243011 285.80032349]
[85.34799957 286.20901489]
[75.51773834 274.87991333]
[71.51000214 289.33462524]
[67.65283966 303.83020020]
[63.94667816 318.36514282]
[60.24051666 332.90008545]
[58.37290573 347.78335571]
[58.37290573 362.78335571]
[58.37290573 377.78335571]
[58.37290573 392.78335571]
[58.37290573 407.78335571]
[58.37290573 422.78335571]
[58.37290573 437.78335571]
[58.37290573 452.78335571]
[58.37290573 467.78335571]
[58.37290573 482.78335571]
[72.91278839 486.84466553]
[85.81716919 494.67916870]
[96.12845612 505.70550537]
[103.08148193 519.10546875]
[106.16027832 533.88458252]
[105.13638306 548.94628906]
[100.08578491 563.17279053]
[91.38326263 575.50848389]
[79.67459869 585.03790283]
[65.82865906 591.05389404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[33 130]
[34 129]
[35 128]
[37 127]
[38 126]
[39 120]
[40 119]
[41 118]
[42 117]
[43 116]
[45 114]
[46 113]
[48 111]
[49 110]
[50 86]
[51 85]
[52 84]
[53 83]
[90 104]
[91 103]
[92 102]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
