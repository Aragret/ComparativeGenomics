%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCUCCAGCGGGGGGGGGGAUUCCCCCUCAAACCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAxxxxxxxxxxGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCACCCCCCCCCCAAUCUCCACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 373.23171997]
[71.19830322 367.21569824]
[59.48964310 357.68627930]
[50.78712082 345.35061646]
[45.73651886 331.12408447]
[44.71262741 316.06240845]
[47.79142761 301.28323364]
[54.74444962 287.88330078]
[65.05573273 276.85699463]
[77.96011353 269.02246094]
[92.50000000 264.96115112]
[92.50000000 249.96115112]
[92.50000000 234.96115112]
[92.50000000 219.96115112]
[92.50000000 204.96115112]
[92.50000000 189.96115112]
[92.50000000 174.96115112]
[92.50000000 159.96115112]
[92.50000000 144.96115112]
[92.50000000 129.96115112]
[81.17679596 124.48689270]
[72.97492218 114.95213318]
[58.47932434 118.80928802]
[43.98373032 122.66645050]
[42.00817490 137.73846436]
[34.41085815 150.90467834]
[22.35031700 160.15734863]
[7.66569614 164.08549500]
[-7.40370655 162.09011841]
[-20.55991745 154.47547913]
[-29.79670715 142.40278625]
[-33.70553589 127.71300507]
[-31.69033432 112.64624023]
[-24.05840683 99.50006104]
[-11.97356415 90.27915955]
[2.72133994 86.38965607]
[17.78544044 88.42467499]
[30.92157173 96.07389069]
[40.12656784 108.17085266]
[54.62216568 104.31369019]
[69.11775970 100.45653534]
[71.91985321 87.13819122]
[80.17446899 76.31731415]
[92.27876282 70.09509277]
[105.88234711 69.67972565]
[112.22947693 56.08877563]
[113.03786469 46.92371368]
[118.85263062 42.28321457]
[125.48112488 28.82725143]
[132.10961914 15.37128544]
[127.25623322 0.56985378]
[134.17016602 -12.98198318]
[148.31097412 -17.51773071]
[154.93946838 -30.97369576]
[161.56797791 -44.42966080]
[155.78401184 -56.63635635]
[158.07377625 -69.75065613]
[167.37557983 -79.00003052]
[180.11810303 -81.15059662]
[187.02510071 -94.46575165]
[193.93209839 -107.78090668]
[181.51196289 -116.22344971]
[170.17755127 -126.07573700]
[160.08799744 -137.19946289]
[151.38491821 -149.43844604]
[144.19052124 -162.62089539]
[138.60577393 -176.56173706]
[134.70909119 -191.06526184]
[132.55517578 -205.92787170]
[132.17427063 -220.94090271]
[133.57173157 -235.89361572]
[136.72790527 -250.57608032]
[141.59851074 -264.78219604]
[148.11517334 -278.31250000]
[156.18640137 -290.97708130]
[165.69889832 -302.59814453]
[176.51910400 -313.01254272]
[188.49513245 -322.07403564]
[201.45884705 -329.65548706]
[215.22828674 -335.65042114]
[229.61010742 -339.97467041]
[244.40245056 -342.56756592]
[259.39764404 -343.39266968]
[274.38516235 -342.43841553]
[289.15460205 -339.71820068]
[303.49865723 -335.27020264]
[317.21594238 -329.15686035]
[330.11386108 -321.46401978]
[342.01138306 -312.29968262]
[352.74148560 -301.79248047]
[362.15350342 -290.08990479]
[370.11532593 -277.35626221]
[376.51519775 -263.77029419]
[381.26324463 -249.52275085]
[384.29281616 -234.81364441]
[385.56140137 -219.84945679]
[385.05117798 -204.84025574]
[382.76928711 -189.99674988]
[378.74783325 -175.52734375]
[373.04318237 -161.63513184]
[365.73547363 -148.51515198]
[356.92730713 -136.35159302]
[346.74227905 -125.31520081]
[335.32342529 -115.56092072]
[322.83102417 -107.22568512]
[309.44046021 -100.42649841]
[295.33969116 -95.25882721]
[280.72668457 -91.79520416]
[265.80661011 -90.08425903]
[250.78887939 -90.15000153]
[235.88433838 -91.99152374]
[221.30223083 -95.58296204]
[207.24725342 -100.87390900]
[200.34025574 -87.55875397]
[193.43325806 -74.24359894]
[199.20211792 -58.47723007]
[191.66288757 -43.10049057]
[175.02394104 -37.80116272]
[168.39543152 -24.34519768]
[161.76693726 -10.88923264]
[166.78898621 3.08626842]
[160.25843811 16.82695580]
[145.56559753 21.99978447]
[138.93708801 35.45574951]
[132.30859375 48.91171646]
[125.82042694 62.43590546]
[119.47329712 76.02685547]
[129.16793823 89.84361267]
[130.15156555 106.69358063]
[122.13040924 121.54450989]
[107.50000000 129.96115112]
[107.50000000 144.96115112]
[107.50000000 159.96115112]
[107.50000000 174.96115112]
[107.50000000 189.96115112]
[107.50000000 204.96115112]
[107.50000000 219.96115112]
[107.50000000 234.96115112]
[107.50000000 249.96115112]
[107.50000000 264.96115112]
[122.03988647 269.02246094]
[134.94427490 276.85699463]
[145.25555420 287.88330078]
[152.20857239 301.28323364]
[155.28736877 316.06240845]
[154.26348877 331.12408447]
[149.21287537 345.35061646]
[140.51036072 357.68627930]
[128.80169678 367.21569824]
[114.95575714 373.23171997]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 41]
[23 40]
[24 39]
[45 127]
[46 126]
[48 125]
[49 124]
[50 123]
[53 120]
[54 119]
[55 118]
[59 115]
[60 114]
[61 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
