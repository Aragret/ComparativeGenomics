%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGUAUUACUGGGGGGGGGGCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAUAGUCUAAUAGAAAACAxxxxxxxxxxCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCCCCCCCCCCCUAUUACU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 375.35430908]
[71.19830322 369.33828735]
[59.48964310 359.80886841]
[50.78712082 347.47317505]
[45.73651886 333.24667358]
[44.71262741 318.18499756]
[47.79142761 303.40582275]
[54.74444962 290.00588989]
[65.05573273 278.97955322]
[77.96011353 271.14505005]
[92.50000000 267.08374023]
[92.50000000 252.08374023]
[92.50000000 237.08374023]
[92.50000000 222.08374023]
[92.50000000 207.08374023]
[92.50000000 192.08374023]
[92.50000000 177.08374023]
[92.50000000 162.08374023]
[92.50000000 147.08374023]
[92.50000000 132.08374023]
[92.50000000 117.08374023]
[81.20099640 107.21801758]
[66.33795166 109.24035645]
[58.19480515 113.52300262]
[51.14502335 111.14682007]
[36.24312210 112.85951233]
[21.34121895 114.57220459]
[6.43931675 116.28488922]
[-8.46258545 117.99758148]
[-13.92195606 132.29631042]
[-25.40860939 142.41142273]
[-40.28299713 146.01852417]
[-55.12709427 142.28872681]
[-66.52983856 132.07911682]
[-71.87095642 117.73579407]
[-69.92310333 102.55474091]
[-61.13387680 90.02445221]
[-47.52298355 83.02429199]
[-32.21810150 83.16286469]
[-18.73618507 90.40830231]
[-10.17527580 103.09568024]
[4.72662687 101.38298798]
[19.62852859 99.67029572]
[34.53042984 97.95761108]
[49.43233490 96.24491882]
[64.31561279 94.37730408]
[79.17865753 92.35497284]
[81.10723877 85.10717010]
[84.96440125 70.61157990]
[86.89298248 63.36377716]
[75.00060272 54.22204590]
[58.68137360 52.60499954]
[52.16960526 37.55412292]
[62.16405106 24.55246162]
[78.38327789 26.97501564]
[84.14233398 42.32966614]
[96.03471375 51.47139740]
[102.20780945 64.97409821]
[104.42793274 78.96039581]
[102.72498322 92.57889557]
[113.38661194 82.02761078]
[114.24547577 69.11574554]
[123.39714813 60.54452133]
[135.53416443 60.53412628]
[146.41299438 50.20692062]
[131.66386414 52.93880081]
[116.90541840 50.25768280]
[104.05958557 42.51271057]
[94.79920959 30.71247864]
[90.33023071 16.39367294]
[91.23461914 1.42096150]
[97.39459991 -12.25583076]
[108.00798798 -22.85564232]
[121.69264984 -28.99810982]
[136.66650391 -29.88333130]
[150.97958374 -25.39602661]
[162.76795959 -16.12055588]
[170.49647522 -3.26482010]
[173.15870667 11.49704075]
[170.40794373 26.24266243]
[162.60360718 39.05046844]
[176.12779236 32.56230164]
[189.65197754 26.07413673]
[203.17617798 19.58597183]
[216.70036316 13.09780693]
[201.77464294 11.60682583]
[187.84378052 6.04528141]
[175.99491882 -3.15279794]
[167.15278625 -15.26958656]
[162.00740051 -29.35947990]
[160.96034241 -44.32289124]
[164.09329224 -58.99206161]
[171.16178894 -72.22219849]
[181.61416626 -82.98080444]
[194.63473511 -90.42828369]
[209.20735168 -93.98340607]
[224.19474792 -93.36875153]
[238.42730713 -88.63227081]
[250.79429626 -80.14360809]
[260.33059692 -68.56522369]
[266.29199219 -54.80071259]
[268.21322632 -39.92425919]
[265.94439697 -25.09683990]
[259.66253662 -11.47559834]
[249.85789490 -0.12354704]
[237.29318237 8.07453823]
[252.28588867 7.60649633]
[267.27859497 7.13845444]
[282.27127075 6.67041206]
[292.90841675 -5.01832676]
[308.69891357 -5.67844868]
[320.27453613 5.08168554]
[320.76766968 20.87827873]
[309.88577271 32.33949280]
[294.08483887 32.66559219]
[282.73931885 21.66310883]
[267.74661255 22.13115120]
[252.75392151 22.59919357]
[237.76123047 23.06723404]
[223.18852234 26.62199593]
[209.66433716 33.11016083]
[196.14015198 39.59832764]
[182.61595154 46.08649063]
[169.09176636 52.57465744]
[156.74018860 61.08574677]
[145.86137390 71.41294861]
[141.83007812 88.46430206]
[123.93789673 92.68923187]
[113.27627563 103.24052429]
[107.50000000 117.08374023]
[107.50000000 132.08374023]
[107.50000000 147.08374023]
[107.50000000 162.08374023]
[107.50000000 177.08374023]
[107.50000000 192.08374023]
[107.50000000 207.08374023]
[107.50000000 222.08374023]
[107.50000000 237.08374023]
[107.50000000 252.08374023]
[107.50000000 267.08374023]
[122.03988647 271.14505005]
[134.94427490 278.97955322]
[145.25555420 290.00588989]
[152.20857239 303.40582275]
[155.28736877 318.18499756]
[154.26348877 333.24667358]
[149.21287537 347.47317505]
[140.51036072 359.80886841]
[128.80169678 369.33828735]
[114.95575714 375.35430908]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 47]
[23 46]
[25 45]
[26 44]
[27 43]
[28 42]
[29 41]
[50 57]
[51 56]
[60 129]
[61 128]
[64 126]
[65 125]
[81 124]
[82 123]
[83 122]
[84 121]
[85 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
