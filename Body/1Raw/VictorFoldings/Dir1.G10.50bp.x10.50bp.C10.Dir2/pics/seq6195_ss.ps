%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUAACCGGGGGGGGGGCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACxxxxxxxxxxACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAAUCCUCCCCCCCCCCAGGCCUACCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 382.16467285]
[71.19830322 376.14865112]
[59.48964310 366.61923218]
[50.78712082 354.28356934]
[45.73651886 340.05703735]
[44.71262741 324.99536133]
[47.79142761 310.21618652]
[54.74444962 296.81625366]
[65.05573273 285.78991699]
[77.96011353 277.95541382]
[92.50000000 273.89410400]
[92.50000000 258.89410400]
[92.50000000 243.89410400]
[92.50000000 228.89410400]
[92.50000000 213.89410400]
[92.50000000 198.89410400]
[92.50000000 183.89410400]
[92.50000000 168.89410400]
[92.50000000 153.89410400]
[92.50000000 138.89410400]
[76.51789856 131.89971924]
[65.09076691 118.71755981]
[50.76816559 123.17436981]
[36.44556808 127.63118744]
[22.12297249 132.08799744]
[18.82071114 147.08769226]
[8.44918251 158.41584778]
[-6.20172310 163.02523804]
[-21.19098663 159.67597961]
[-32.48657227 149.26899719]
[-37.05002213 134.60371399]
[-33.65379333 119.62501526]
[-23.21145058 108.36210632]
[-8.53193760 103.84465027]
[6.43603516 107.28781128]
[17.66615677 117.76540375]
[31.98875427 113.30859375]
[46.31135178 108.85177612]
[60.63394928 104.39495850]
[58.41814804 94.10721588]
[58.99518204 83.01334381]
[62.61708069 71.89273834]
[69.31483459 61.59592438]
[56.87539673 53.21377945]
[44.43595505 44.83163834]
[31.99651718 36.44949341]
[19.47055435 28.19720459]
[6.85942602 20.07566261]
[-8.53186893 23.66503525]
[-21.90892410 15.24898148]
[-25.33536911 -0.17940198]
[-16.77835464 -13.46672916]
[-1.31460786 -16.72986603]
[11.88150692 -8.03284836]
[14.98096848 7.46453476]
[27.59209633 15.58607674]
[34.96623611 16.56978989]
[40.37865829 24.01005363]
[52.81809998 32.39219666]
[65.25753784 40.77434158]
[77.69698334 49.15648270]
[90.63503265 41.56657410]
[89.38816071 26.61848831]
[74.58815765 23.59579849]
[61.23989868 16.52468872]
[50.42546082 5.97838020]
[43.02152634 -7.18818378]
[39.62829590 -21.90764999]
[40.52084351 -36.98677444]
[45.62681580 -51.20316315]
[54.53229523 -63.40435791]
[66.51535797 -72.60125732]
[80.60457611 -78.04831696]
[95.65782166 -79.30396271]
[110.45477295 -76.26640320]
[123.79592896 -69.18189240]
[134.59976196 -58.62472153]
[141.99046326 -45.45072556]
[145.36891174 -30.72785950]
[144.46121216 -15.64963913]
[139.34095764 -1.43838632]
[130.42323303 10.75385380]
[118.43093872 19.93871307]
[104.33625031 25.37161446]
[105.58312225 40.31970215]
[119.10731506 46.80786514]
[131.54675293 38.42572403]
[143.98619080 30.04357910]
[156.42562866 21.66143608]
[168.86508179 13.27929306]
[181.30451965 4.89714956]
[193.65608215 -3.61394048]
[205.91845703 -12.25305653]
[218.18081665 -20.89217186]
[230.44319153 -29.53128815]
[232.89530945 -45.14419174]
[245.71821594 -54.38261795]
[261.30432129 -51.76557541]
[270.40664673 -38.84570694]
[267.62496948 -23.28814316]
[254.60958862 -14.32291031]
[239.08230591 -17.26892090]
[226.81994629 -8.62980461]
[214.55757141 0.00931151]
[202.29519653 8.64842796]
[198.61474609 15.11370659]
[189.68666077 17.33658981]
[177.24722290 25.71873283]
[164.80778503 34.10087585]
[152.36833191 42.48302078]
[139.92889404 50.86516190]
[127.48945618 59.24730682]
[140.28622437 81.37306976]
[139.36605835 104.39495850]
[153.68864441 108.85177612]
[168.01124573 113.30859375]
[182.33384705 117.76540375]
[196.20658875 110.19423676]
[211.34594727 114.73021698]
[218.77003479 128.68222046]
[214.07423401 143.77279663]
[200.04452515 151.04893494]
[185.00444031 146.19387817]
[177.87702942 132.08799744]
[163.55442810 127.63118744]
[149.23182678 123.17436981]
[134.90924072 118.71755981]
[129.93040466 125.94556427]
[123.48210144 131.89971924]
[115.88089752 136.28771973]
[107.50000000 138.89410400]
[107.50000000 153.89410400]
[107.50000000 168.89410400]
[107.50000000 183.89410400]
[107.50000000 198.89410400]
[107.50000000 213.89410400]
[107.50000000 228.89410400]
[107.50000000 243.89410400]
[107.50000000 258.89410400]
[107.50000000 273.89410400]
[122.03988647 277.95541382]
[134.94427490 285.78991699]
[145.25555420 296.81625366]
[152.20857239 310.21618652]
[155.28736877 324.99536133]
[154.26348877 340.05703735]
[149.21287537 354.28356934]
[140.51036072 366.61923218]
[128.80169678 376.14865112]
[114.95575714 382.16467285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 39]
[23 38]
[24 37]
[25 36]
[43 61]
[44 60]
[45 59]
[46 58]
[47 56]
[48 55]
[62 85]
[63 84]
[86 112]
[87 111]
[88 110]
[89 109]
[90 108]
[91 107]
[92 105]
[93 104]
[94 103]
[95 102]
[114 127]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
