%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUACUACUGGGGGGGGGGAAUCUCAUCAAUACAACCCCCGCCCAUCCUACCCAGCACACACACACCGCxxxxxxxxxxAAAAUGCCCUAGCCCACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCCCCCCCCCCCAUACUAGU\
) } def
/len { sequence length } bind def

/coor [
[-31.46805382 310.56204224]
[-43.90957642 302.26284790]
[-55.82874298 293.22946167]
[-67.18228149 283.49472046]
[-77.92897797 273.09390259]
[-88.02983856 262.06481934]
[-97.44818878 250.44744873]
[-106.14984131 238.28399658]
[-114.10321808 225.61860657]
[-121.27944183 212.49723816]
[-127.65247345 198.96754456]
[-141.58319092 204.52947998]
[-155.51390076 210.09141541]
[-169.44462585 215.65335083]
[-179.39207458 227.95614624]
[-194.08103943 225.48962402]
[-208.01174927 231.05155945]
[-221.94247437 236.61349487]
[-235.87318420 242.17543030]
[-249.80390930 247.73736572]
[-249.03846741 262.85995483]
[-253.22720337 277.41101074]
[-261.91574097 289.81213379]
[-274.16162109 298.71817017]
[-288.63650513 303.16302490]
[-303.77023315 302.66455078]
[-317.92126465 297.27685547]
[-329.55456543 287.58432007]
[-337.40823364 274.63833618]
[-340.63040161 259.84320068]
[-338.87152100 244.80374146]
[-332.32238770 231.15136719]
[-321.69342041 220.36695862]
[-308.13754272 213.62033081]
[-293.12521362 211.64331055]
[-278.28485107 214.65036011]
[-265.22622681 222.31527710]
[-255.36584473 233.80665588]
[-241.43511963 228.24472046]
[-227.50440979 222.68278503]
[-213.57369995 217.12084961]
[-199.64297485 211.55889893]
[-190.69194031 199.65394592]
[-175.00656128 201.72264099]
[-161.07583618 196.16070557]
[-147.14512634 190.59877014]
[-133.21440125 185.03683472]
[-138.00907898 170.51171875]
[-141.90003967 155.71890259]
[-144.87251282 140.71450806]
[-146.91523743 125.55552673]
[-148.02044678 110.29950714]
[-148.18392944 95.00439453]
[-147.40509033 79.72824097]
[-145.68685913 64.52906036]
[-143.03578186 49.46455765]
[-139.46191406 34.59193802]
[-134.97882080 19.96766472]
[-129.60353088 5.64727020]
[-123.35646057 -8.31487465]
[-116.26132202 -21.86575508]
[-108.34505463 -34.95392227]
[-99.63771057 -47.52967834]
[-90.17236328 -59.54527283]
[-79.98493958 -70.95508575]
[-69.11413574 -81.71579742]
[-57.60121155 -91.78655243]
[-45.48988724 -101.12909698]
[-32.82614899 -109.70797729]
[-19.65807915 -117.49060822]
[-6.03567791 -124.44744873]
[7.98933363 -130.55207825]
[22.36370277 -135.78131104]
[37.03285217 -140.11531067]
[51.94108200 -143.53759766]
[67.03178406 -146.03520203]
[82.24767303 -147.59861755]
[97.53096008 -148.22192383]
[112.82362366 -147.90275574]
[128.06759644 -146.64231873]
[143.20500183 -144.44538879]
[158.17834473 -141.32032776]
[172.93080139 -137.27899170]
[187.40635681 -132.33671570]
[201.55001831 -126.51228333]
[215.30810547 -119.82779694]
[228.62838745 -112.30864716]
[236.78504944 -124.89707947]
[237.08567810 -141.29347229]
[251.56469727 -148.99346924]
[265.32733154 -140.07598877]
[264.21578979 -123.71455383]
[249.37348938 -116.74041748]
[241.21682739 -104.15197754]
[252.77883911 -95.64981079]
[263.83016968 -86.49368286]
[274.33392334 -76.71418762]
[284.25494385 -66.34403229]
[293.56008911 -55.41786194]
[302.21826172 -43.97220230]
[310.20050049 -32.04531479]
[317.48016357 -19.67706299]
[324.03289795 -6.90878820]
[329.83676147 6.21683216]
[334.87240601 19.65592384]
[339.12298584 33.36356735]
[342.57431030 47.29394531]
[345.21481323 61.40049744]
[347.03567505 75.63606262]
[348.03079224 89.95307159]
[363.03002930 89.79907227]
[378.02923584 89.64508057]
[391.86334229 80.83888245]
[406.27978516 88.65541840]
[406.44815063 105.05370331]
[392.19525146 113.16458130]
[378.18322754 104.64428711]
[363.18402100 104.79828644]
[348.18481445 104.95227814]
[347.43615723 119.88907623]
[345.78933716 134.75367737]
[343.25039673 149.49212646]
[339.82849121 164.05093384]
[335.53604126 178.37725830]
[330.38867188 192.41906738]
[324.40502930 206.12544250]
[317.60684204 219.44657898]
[310.01879883 232.33416748]
[301.66839600 244.74140930]
[292.58602905 256.62326050]
[282.80459595 267.93661499]
[272.35961914 278.64038086]
[261.28900146 288.69573975]
[249.63294983 298.06616211]
[237.43376160 306.71765137]
[224.73573303 314.61877441]
[211.58491516 321.74090576]
[198.02908325 328.05816650]
[184.11743164 333.54760742]
[169.90043640 338.18933105]
[155.42971802 341.96646118]
[140.75781250 344.86532593]
[125.93796539 346.87536621]
[111.02396393 347.98928833]
[96.06994629 348.20309448]
[81.13019562 347.51596069]
[66.25893402 345.93038940]
[51.51015091 343.45217896]
[36.93737411 340.09024048]
[22.59350014 335.85684204]
[8.53059673 330.76736450]
[-5.20029259 324.84020996]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 47]
[12 46]
[13 45]
[14 44]
[16 42]
[17 41]
[18 40]
[19 39]
[20 38]
[87 94]
[88 93]
[110 119]
[111 118]
[112 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
