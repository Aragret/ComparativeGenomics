%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCGCAUCCAGGGGGGGGGGUAAUCCUUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAxxxxxxxxxxAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCAUCCA\
) } def
/len { sequence length } bind def

/coor [
[62.81846237 152.65296936]
[51.67895126 142.66003418]
[43.14398956 130.36767578]
[37.67361450 116.43848419]
[35.56269073 101.62323761]
[36.92499161 86.72049713]
[41.68709564 72.53353119]
[49.59231186 59.82703781]
[60.21455002 49.28590012]
[72.98126221 41.47829819]
[87.20429993 36.82506943]
[85.95742798 21.87698174]
[84.71055603 6.92889500]
[83.46367645 -8.01919174]
[82.21680450 -22.96727943]
[80.96993256 -37.91536713]
[79.72305298 -52.86345291]
[78.47618103 -67.81153870]
[77.22930145 -82.75962830]
[75.98242950 -97.70771027]
[60.98287201 -97.33187103]
[45.98683548 -97.82881927]
[31.04506302 -99.19686890]
[16.20811653 -101.43138885]
[1.52619946 -104.52482605]
[-12.95101070 -108.46671295]
[-27.17452812 -113.24369812]
[-41.09622192 -118.83963776]
[-54.66898727 -125.23558044]
[-67.84690094 -132.40989685]
[-80.58536530 -140.33830261]
[-92.84127808 -148.99395752]
[-104.57317352 -158.34761047]
[-115.74135590 -168.36756897]
[-126.30803680 -179.01995850]
[-136.23745728 -190.26873779]
[-145.49600220 -202.07582092]
[-154.05238342 -214.40126038]
[-161.87760925 -227.20335388]
[-168.94522095 -240.43879700]
[-175.23130798 -254.06278992]
[-180.71458435 -268.02923584]
[-185.37651062 -282.29089355]
[-189.20130920 -296.79946899]
[-192.17602539 -311.50588989]
[-194.29061890 -326.36041260]
[-195.53790283 -341.31274414]
[-195.91368103 -356.31231689]
[-195.41667175 -371.30834961]
[-194.04856873 -386.25012207]
[-191.81398010 -401.08706665]
[-188.72048950 -415.76895142]
[-184.77853394 -430.24615479]
[-180.00149536 -444.46963501]
[-174.40550232 -458.39132690]
[-168.00949097 -471.96405029]
[-160.83512878 -485.14193726]
[-152.90667725 -497.88037109]
[-144.25096130 -510.13626099]
[-134.89726257 -521.86810303]
[-124.87725067 -533.03625488]
[-114.22481537 -543.60290527]
[-102.97600555 -553.53222656]
[-91.16888428 -562.79077148]
[-78.84340668 -571.34710693]
[-66.04127502 -579.17224121]
[-52.80580139 -586.23980713]
[-39.18178177 -592.52581787]
[-25.21531105 -598.00909424]
[-10.95364571 -602.67095947]
[3.55495405 -606.49566650]
[18.26139641 -609.47033691]
[33.11592102 -611.58483887]
[48.06826019 -612.83209229]
[63.06782532 -613.20782471]
[78.06385803 -612.71075439]
[93.00561523 -611.34252930]
[107.84254456 -609.10791016]
[122.52443695 -606.01434326]
[137.00161743 -602.07232666]
[151.22508240 -597.29522705]
[165.14674377 -591.69921875]
[178.71945190 -585.30316162]
[191.89730835 -578.12872314]
[204.63569641 -570.20019531]
[216.89154053 -561.54443359]
[228.62336731 -552.19067383]
[239.79145813 -542.17065430]
[250.35804749 -531.51812744]
[260.28738403 -520.26928711]
[269.54583740 -508.46215820]
[278.10211182 -496.13662720]
[285.92721558 -483.33447266]
[292.99472046 -470.09896851]
[299.28070068 -456.47491455]
[304.76385498 -442.50842285]
[309.42568970 -428.24673462]
[313.25033569 -413.73812866]
[316.22494507 -399.03167725]
[318.33941650 -384.17712402]
[319.58657837 -369.22479248]
[319.96221924 -354.22521973]
[319.46508789 -339.22918701]
[318.09686279 -324.28744507]
[315.86215210 -309.45053101]
[312.76855469 -294.76864624]
[308.82647705 -280.29147339]
[304.04931641 -266.06802368]
[298.45321655 -252.14640808]
[292.05709839 -238.57371521]
[284.88259888 -225.39588928]
[276.95404053 -212.65753174]
[268.29824829 -200.40171814]
[258.94445801 -188.66993713]
[248.92433167 -177.50187683]
[238.27182007 -166.93533325]
[227.02291870 -157.00605774]
[215.21572876 -147.74765015]
[202.89018250 -139.19143677]
[190.08798218 -131.36636353]
[176.85244751 -124.29891205]
[163.22837830 -118.01300049]
[149.26185608 -112.52989197]
[135.00015259 -107.86814117]
[120.49152374 -104.04352570]
[105.78505707 -101.06898499]
[90.93051910 -98.95458984]
[92.17739105 -84.00650024]
[93.42426300 -69.05841064]
[94.67114258 -54.11032867]
[95.91801453 -39.16223907]
[97.16489410 -24.21415329]
[98.41176605 -9.26606655]
[99.65863800 5.68202066]
[100.90551758 20.63010788]
[102.15238953 35.57819366]
[116.94979858 37.81072235]
[130.83360291 43.39530945]
[143.05543518 52.03093719]
[152.95655823 63.25214005]
[160.00326538 76.45408630]
[163.81575012 90.92517853]
[164.18850708 105.88541412]
[161.10144043 120.52841187]
[154.72096252 134.06492615]
[145.39096069 145.76528931]
[133.61436462 154.99887085]
[120.02590942 161.26797485]
[105.35804749 164.23466492]
[90.40138245 163.73905945]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
