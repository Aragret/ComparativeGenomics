%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACAGCGCGGGGGGGGGGAAUCCUAUUCUAGAGUCCAUAUCAACAAUAGGGUUUACGACCUCGAUGUUxxxxxxxxxxAUCCCCUGGCCCAACCCGUCAUCUACUCUACCAUCUUUGCAGGCACACUCCCCCCCCCCCAUCACAGCGC\
) } def
/len { sequence length } bind def

/coor [
[101.86016083 600.46398926]
[88.63996124 593.19146729]
[77.75315857 582.74450684]
[69.94203186 569.83526611]
[65.73914337 555.34393311]
[65.43107605 540.25860596]
[69.03881836 525.60778809]
[76.31639099 512.39038086]
[86.76759338 501.50759888]
[99.67985535 493.70144653]
[114.17279816 489.50418091]
[113.86074066 474.50741577]
[113.54868317 459.51068115]
[113.23662567 444.51391602]
[112.92456818 429.51715088]
[112.61251068 414.52041626]
[112.30046082 399.52365112]
[111.98840332 384.52688599]
[111.67634583 369.53015137]
[111.36428833 354.53338623]
[111.05223083 339.53665161]
[103.05183411 326.97308350]
[110.50035858 313.01492310]
[109.72052002 298.03521729]
[108.47364044 283.08712769]
[107.22676849 268.13903809]
[105.04993439 253.29783630]
[101.95160675 238.62132263]
[89.36990356 230.73231506]
[86.01869202 215.89237976]
[94.37870026 202.74900818]
[91.28038025 188.07247925]
[88.18206024 173.39596558]
[85.08374023 158.71943665]
[81.98542023 144.04290771]
[78.88709259 129.36637878]
[68.78844452 118.27507019]
[54.46584702 113.81825256]
[38.98997879 117.10581207]
[29.13638878 105.93639374]
[14.81379032 101.47957611]
[0.49119329 97.02275848]
[-14.32280445 103.18109131]
[-28.30385399 95.31281281]
[-30.72689056 79.45379639]
[-19.73316765 67.76971436]
[-3.75612879 69.22360992]
[4.94800901 82.70016479]
[19.27060699 87.15697479]
[33.59320450 91.61379242]
[48.04462433 88.00745392]
[58.92266464 99.49565887]
[73.24526215 103.95246887]
[74.74937439 94.25995636]
[79.49005890 86.15676117]
[86.54389191 80.61901093]
[94.73712921 78.18177795]
[96.29470825 63.26286316]
[97.85228729 48.34395218]
[88.65309143 60.19193649]
[77.23003387 69.91375732]
[64.06371307 77.10041046]
[49.70804596 81.44953156]
[34.76700211 82.77815247]
[19.86917496 81.03038025]
[5.64133549 76.27974701]
[-7.31792927 68.72610474]
[-18.46340370 58.68725967]
[-27.32617950 46.58555984]
[-33.53339005 32.93013763]
[-36.82388306 18.29549789]
[-37.05922699 3.29734349]
[-34.22951889 -11.43333054]
[-28.45380783 -25.27678299]
[-19.97509003 -37.65060043]
[-9.15007496 -48.03419495]
[3.56581235 -55.99071503]
[17.63759422 -61.18541718]
[32.47325134 -63.39975357]
[47.44862366 -62.54056168]
[61.93367767 -58.64399338]
[75.31900024 -51.87397766]
[87.04145813 -42.51534271]
[96.60786438 -30.96182060]
[103.61574554 -17.69948387]
[107.77027130 -3.28629804]
[108.89665222 11.67135048]
[106.94612885 26.54995537]
[116.45449066 14.94861507]
[116.30883789 -1.09377730]
[128.85083008 -11.09767818]
[144.45932007 -7.38895130]
[151.16081238 7.18738556]
[143.81448364 21.44961357]
[128.05583191 24.45697403]
[118.54747009 36.05831528]
[112.77120209 49.90153122]
[111.21362305 64.82044220]
[109.65603638 79.73935699]
[118.66534424 86.20332336]
[123.71908569 96.48786163]
[123.30718231 108.31072998]
[117.17854309 118.86078644]
[106.48175812 125.46632385]
[93.56362152 126.26805878]
[96.66194153 140.94459534]
[99.76026154 155.62110901]
[102.85858917 170.29763794]
[105.95690918 184.97416687]
[109.05522919 199.65069580]
[122.01444244 208.29341125]
[124.94750977 223.22163391]
[116.62813568 235.52299500]
[119.72645569 250.19952393]
[129.13761902 238.51919556]
[144.02972412 236.72338867]
[155.94773865 245.83166504]
[158.12515259 260.67279053]
[149.32572937 272.82064819]
[134.54537964 275.37823486]
[122.17485809 266.89218140]
[123.42173004 281.84027100]
[124.66860199 296.78836060]
[127.72647095 301.17800903]
[128.65600586 305.83508301]
[127.72072601 309.88809204]
[125.49711609 312.70288086]
[133.51983643 326.33911133]
[126.04898834 339.22457886]
[126.36104584 354.22134399]
[126.67309570 369.21807861]
[126.98515320 384.21484375]
[127.29721069 399.21160889]
[127.60926819 414.20834351]
[127.92132568 429.20510864]
[128.23338318 444.20184326]
[128.54544067 459.19860840]
[128.85749817 474.19537354]
[129.16955566 489.19210815]
[143.82453918 492.78289795]
[157.05035400 500.04513550]
[167.94522095 510.48373413]
[175.76631165 523.38696289]
[179.98039246 537.87500000]
[180.30010986 552.96014404]
[176.70367432 567.61370850]
[169.43630981 580.83673096]
[158.99351501 591.72753906]
[146.08728027 599.54370117]
[131.59759521 603.75213623]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 127]
[24 123]
[25 122]
[26 121]
[27 114]
[28 113]
[31 110]
[32 109]
[33 108]
[34 107]
[35 106]
[36 105]
[37 53]
[38 52]
[40 50]
[41 49]
[42 48]
[57 99]
[58 98]
[59 97]
[88 96]
[89 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
