%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGAUGAGGCAGGGGGGGGGGACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAxxxxxxxxxxCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUAUCCCCCCCCCCCCCUAUGAGGCA\
) } def
/len { sequence length } bind def

/coor [
[90.20777893 446.07272339]
[76.04718018 440.91772461]
[63.45743561 432.63552856]
[53.11749649 421.67272949]
[45.58498383 408.62060547]
[41.26612091 394.18301392]
[40.39381027 379.13854980]
[43.01510239 364.29855347]
[48.98862839 350.46331787]
[57.99224854 338.37896729]
[69.54040527 328.69720459]
[83.01032257 321.94012451]
[97.67558289 318.47213745]
[97.67558289 303.47213745]
[97.67558289 288.47213745]
[97.67558289 273.47213745]
[97.67558289 258.47213745]
[97.67558289 243.47215271]
[97.67558289 228.47215271]
[97.67558289 213.47215271]
[97.67558289 198.47215271]
[97.67558289 183.47215271]
[97.67558289 168.47215271]
[89.32879639 159.66593933]
[89.24088287 147.13128662]
[98.00684357 137.61747742]
[98.31084442 122.62055969]
[96.56856537 137.51902771]
[86.07106018 148.23361206]
[71.21136475 150.28044128]
[58.20802307 142.80293274]
[52.50271988 128.93031311]
[56.48303604 114.46804810]
[68.48326874 105.46836090]
[83.48271179 105.69789886]
[68.57581329 104.02922058]
[53.66891861 102.36054230]
[38.76202393 100.69187164]
[23.85513115 99.02319336]
[9.05395794 106.08415985]
[-4.30652666 96.57472229]
[-2.48220134 80.27735901]
[12.65022373 73.95741272]
[25.52380753 84.11629486]
[40.43070221 85.78497314]
[55.33759689 87.45365143]
[70.24449158 89.12232971]
[85.15139008 90.79100037]
[98.19213867 83.37893677]
[104.38563538 69.71728516]
[110.57912445 56.05563736]
[97.47571564 48.73667908]
[85.03070068 40.34691238]
[73.33137512 30.94519043]
[62.45980453 20.59746170]
[52.49224472 9.37630653]
[43.49861526 -2.63956428]
[35.54199600 -15.36586666]
[28.67819977 -28.71333313]
[22.95537186 -42.58833694]
[18.41365623 -56.89355850]
[15.08490849 -71.52865601]
[12.99247837 -86.39096832]
[12.15104294 -101.37624359]
[12.56650352 -116.37937164]
[14.23594570 -131.29512024]
[17.14766121 -146.01885986]
[21.28122520 -160.44731140]
[26.60764313 -174.47926331]
[33.08955383 -188.01629639]
[40.68148804 -200.96347046]
[49.33019638 -213.22993469]
[58.97501373 -224.72969055]
[69.54828644 -235.38203430]
[80.97584534 -245.11225891]
[93.17753601 -253.85212708]
[106.06777954 -261.54031372]
[119.55614471 -268.12289429]
[133.54801941 -273.55374146]
[147.94528198 -277.79467773]
[162.64691162 -280.81600952]
[177.54980469 -282.59655762]
[192.54942322 -283.12377930]
[207.54055786 -282.39401245]
[222.41804504 -280.41238403]
[237.07752991 -277.19277954]
[251.41619873 -272.75778198]
[265.33346558 -267.13848877]
[278.73168945 -260.37432861]
[291.51693726 -252.51275635]
[303.59948730 -243.60890198]
[314.89459229 -233.72523499]
[325.32302856 -222.93106079]
[334.81164551 -211.30210876]
[343.29391479 -198.91995239]
[350.71029663 -185.87144470]
[357.00881958 -172.24809265]
[362.14523315 -158.14549255]
[366.08355713 -143.66252136]
[368.79617310 -128.90080261]
[370.26400757 -113.96387482]
[370.47680664 -98.95649719]
[369.43307495 -83.98395538]
[367.14010620 -69.15126038]
[363.61401367 -54.56245422]
[358.87951660 -40.31987381]
[352.96984863 -26.52342033]
[345.92642212 -13.26986885]
[337.79864502 -0.65218300]
[328.64355469 11.24113083]
[318.52536011 22.32664871]
[307.51504517 32.52661133]
[295.68981934 41.76947403]
[283.13262939 49.99040222]
[269.93154907 57.13173294]
[256.17922974 63.14337158]
[241.97207642 67.98314667]
[227.40977478 71.61711884]
[212.59445190 74.01979828]
[197.63003540 75.17432404]
[182.62150574 75.07260132]
[167.67411804 73.71533966]
[152.89273071 71.11206818]
[138.38101196 67.28103638]
[124.24076843 62.24913025]
[118.04727936 75.91078186]
[111.85379028 89.57242584]
[120.87157440 103.40424347]
[113.30776215 122.92456055]
[113.00376129 137.92147827]
[122.26575470 153.80529785]
[112.67558289 168.47215271]
[112.67558289 183.47215271]
[112.67558289 198.47215271]
[112.67558289 213.47215271]
[112.67558289 228.47215271]
[112.67558289 243.47215271]
[112.67558289 258.47213745]
[112.67558289 273.47213745]
[112.67558289 288.47213745]
[112.67558289 303.47213745]
[112.67558289 318.47213745]
[127.34084320 321.94012451]
[140.81076050 328.69720459]
[152.35891724 338.37896729]
[161.36253357 350.46331787]
[167.33605957 364.29855347]
[169.95735168 379.13854980]
[169.08503723 394.18301392]
[164.76617432 408.62060547]
[157.23365784 421.67272949]
[146.89372253 432.63552856]
[134.30398560 440.91772461]
[120.14337921 446.07272339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[26 130]
[27 129]
[35 48]
[36 47]
[37 46]
[38 45]
[39 44]
[49 127]
[50 126]
[51 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
