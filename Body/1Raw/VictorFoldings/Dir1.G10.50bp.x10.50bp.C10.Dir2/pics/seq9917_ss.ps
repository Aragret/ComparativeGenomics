%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUGACUCCUGGGGGGGGGGACCCCUCACAAUCAUGGCAAGCCAACGCCACUUAUCCAGUGAACCACUAUxxxxxxxxxxGCCCAUAAUCAUACAAAGCCCCCGCACCAAUAGGAUCCUCCCGAAUCAACCCCCCCCCCCCCUGACCCCU\
) } def
/len { sequence length } bind def

/coor [
[83.76874542 383.15130615]
[70.54854584 375.87884521]
[59.66174316 365.43182373]
[51.85061264 352.52258301]
[47.64773178 338.03128052]
[47.33966064 322.94592285]
[50.94740295 308.29510498]
[58.22497559 295.07772827]
[68.67618561 284.19494629]
[81.58844757 276.38879395]
[96.08138275 272.19152832]
[95.76932526 257.19476318]
[95.45726776 242.19801331]
[95.14521027 227.20126343]
[94.83315277 212.20451355]
[94.52110291 197.20774841]
[94.20904541 182.21099854]
[93.89698792 167.21424866]
[93.58493042 152.21749878]
[93.27287292 137.22073364]
[84.54657745 134.52288818]
[76.72144318 129.81184387]
[70.25377655 123.36235809]
[65.52073669 115.55049896]
[62.79833603 106.83183289]
[62.24532700 97.71476746]
[47.74972916 93.85761261]
[33.25413513 90.00045013]
[18.75853729 86.14328766]
[7.52161694 100.05503845]
[-8.60018158 107.67182159]
[-26.37747765 107.51847839]
[-42.27120972 99.67127228]
[-53.13718033 85.73358154]
[-56.84804153 68.50852203]
[-71.55600739 65.56304169]
[-86.26396179 62.61755753]
[-100.97192383 59.67207336]
[-112.28843689 70.28886414]
[-127.68824768 72.19293213]
[-141.24981689 64.65213776]
[-147.75843811 50.56606674]
[-144.71142578 35.35109711]
[-133.28039551 24.85769844]
[-117.86083984 23.12079430]
[-104.38187408 30.80826187]
[-98.02644348 44.96411133]
[-83.31848145 47.90959549]
[-68.61051941 50.85507584]
[-53.90256119 53.80056000]
[-47.56311035 43.21659088]
[-38.24719238 35.09076309]
[-26.85505295 30.22844315]
[-14.49381638 29.11864090]
[-2.36988688 31.88489151]
[8.32879257 38.27169800]
[16.54913330 47.66804886]
[21.47655869 59.16585541]
[22.61569595 71.64768982]
[37.11129379 75.50485229]
[51.60689163 79.36201477]
[66.10248566 83.21916962]
[73.94332123 71.28196716]
[85.90805054 62.85232162]
[100.47568512 59.31853104]
[115.67459869 61.42528152]
[129.34924316 69.13520050]
[137.86032104 56.78363037]
[146.37141418 44.43205643]
[154.88250732 32.08048248]
[143.95159912 21.76469040]
[134.72357178 9.90112972]
[127.41476440 -3.23210049]
[122.19649506 -17.32713890]
[119.19109344 -32.05357742]
[118.46900177 -47.06620407]
[120.04714966 -62.01310730]
[123.88854980 -76.54390717]
[129.90313721 -90.31797791]
[137.94995117 -103.01244354]
[147.84033203 -114.32971191]
[159.34245300 -124.00450897]
[172.18667603 -131.81002808]
[186.07192993 -137.56332397]
[200.67271423 -141.12948608]
[215.64675903 -142.42495728]
[230.64306641 -141.41935730]
[245.31010437 -138.13624573]
[259.30401611 -132.65260315]
[272.29681396 -125.09696198]
[283.98391724 -115.64644623]
[294.09133911 -104.52258301]
[302.38217163 -91.98613739]
[308.66204834 -78.33097076]
[312.78378296 -63.87718582]
[314.65072632 -48.96360397]
[314.21914673 -33.93981934]
[311.49911499 -19.15800667]
[306.55444336 -4.96467590]
[299.50103760 8.30746078]
[290.50418091 20.34728622]
[279.77484131 30.87257004]
[267.56451416 39.63658142]
[254.15939331 46.43388367]
[239.87373352 51.10513687]
[225.04243469 53.54084015]
[210.01312256 53.68389511]
[195.13813782 51.53095245]
[180.76615906 47.13247681]
[167.23408508 40.59157562]
[158.72299194 52.94314575]
[150.21189880 65.29471588]
[141.70080566 77.64629364]
[146.60235596 91.82285309]
[160.92495728 96.27966309]
[175.24755859 100.73648071]
[187.60533142 91.35218048]
[203.11959839 91.05749512]
[215.82482910 99.96573639]
[220.83558655 114.65151215]
[216.22514343 129.46783447]
[203.76629639 138.71752930]
[188.24974060 138.84388733]
[175.64189148 129.79833984]
[170.79074097 115.05908203]
[156.46813965 110.60226440]
[142.14553833 106.14544678]
[135.02674866 121.31426239]
[122.97331238 132.02508545]
[108.26963043 136.90867615]
[108.58168793 151.90544128]
[108.89373779 166.90219116]
[109.20579529 181.89894104]
[109.51785278 196.89569092]
[109.82991028 211.89245605]
[110.14196777 226.88920593]
[110.45402527 241.88595581]
[110.76607513 256.88272095]
[111.07813263 271.87945557]
[125.73312378 275.47024536]
[138.95893860 282.73248291]
[149.85380554 293.17108154]
[157.67489624 306.07431030]
[161.88897705 320.56234741]
[162.20869446 335.64746094]
[158.61227417 350.30105591]
[151.34490967 363.52407837]
[140.90209961 374.41491699]
[127.99587250 382.23101807]
[113.50617981 386.43948364]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 62]
[27 61]
[28 60]
[29 59]
[35 50]
[36 49]
[37 48]
[38 47]
[67 113]
[68 112]
[69 111]
[70 110]
[114 127]
[115 126]
[116 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
