%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAUUAAGGGGGGGGGGCCACUCACGGGAGCUCUCCAUGCAUUUGGUAUUUUCGUCUGGGGGGUAUGxxxxxxxxxxUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCUACUAACCCCCCCCCCACCCCAUUAA\
) } def
/len { sequence length } bind def

/coor [
[82.87763977 463.01745605]
[69.03170013 457.00143433]
[57.32304001 447.47201538]
[48.62051392 435.13635254]
[43.56991196 420.90985107]
[42.54602051 405.84814453]
[45.62482071 391.06900024]
[52.57784271 377.66906738]
[62.88912582 366.64273071]
[75.79351044 358.80822754]
[90.33339691 354.74691772]
[90.33339691 339.74691772]
[90.33339691 324.74691772]
[90.33339691 309.74691772]
[90.33339691 294.74691772]
[90.33339691 279.74691772]
[90.33339691 264.74691772]
[90.33339691 249.74691772]
[90.33339691 234.74691772]
[90.33339691 219.74691772]
[77.72337341 215.43788147]
[67.04718018 207.42481995]
[59.36113739 196.48289490]
[55.43118286 183.67788696]
[55.65655518 170.26242065]
[60.02927780 157.55340576]
[68.13355255 146.80282593]
[79.18526459 139.07429504]
[92.10783386 135.13795471]
[92.73181152 120.15094757]
[93.35578918 105.16392517]
[86.16019440 109.74598694]
[78.53337860 113.65035248]
[63.53418732 113.49431610]
[53.49654007 125.48513031]
[38.09075546 128.16763306]
[24.59097672 120.27523804]
[19.37138367 105.53448486]
[24.89650917 90.90550995]
[38.55755997 83.29566193]
[53.90420151 86.29808807]
[63.69022369 98.49512482]
[78.68941498 98.65116119]
[68.99681091 87.20330811]
[74.98624420 73.45097351]
[89.96986389 72.75013733]
[97.21677399 85.88452911]
[102.41218567 71.81301117]
[107.60760498 57.74148941]
[112.36141968 43.51470947]
[116.66899872 29.14652634]
[120.97658539 14.77834225]
[125.28417206 0.41015849]
[129.59175110 -13.95802593]
[133.89933777 -28.32621002]
[138.20692444 -42.69439316]
[142.51451111 -57.06257629]
[146.82209778 -71.43076324]
[146.29187012 -80.61611176]
[151.37162781 -86.05133820]
[154.16395569 -100.78914642]
[155.09957886 -115.75993347]
[155.87942505 -130.73965454]
[156.50340271 -145.72666931]
[157.12738037 -160.71368408]
[157.75135803 -175.70069885]
[143.44287109 -180.54258728]
[131.07888794 -189.22062683]
[121.66169739 -201.03135681]
[115.95470428 -215.01730347]
[114.42056274 -230.04472351]
[117.18363190 -244.89538574]
[124.01992035 -258.36541748]
[134.37524414 -269.36285400]
[147.41014099 -276.99621582]
[162.06793213 -280.64666748]
[177.16038513 -280.01831055]
[191.46398926 -275.16204834]
[203.81925964 -266.47158813]
[213.22457886 -254.65141296]
[218.91751099 -240.65972900]
[220.43655396 -225.63079834]
[217.65856934 -210.78291321]
[210.80876160 -197.31974792]
[200.44238281 -186.33270264]
[187.39982605 -178.71244812]
[172.73837280 -175.07672119]
[172.11439514 -160.08970642]
[171.49041748 -145.10269165]
[170.86643982 -130.11567688]
[173.74922180 -123.25745392]
[170.07037354 -114.82431030]
[169.13475037 -99.85351562]
[178.61547852 -111.47744751]
[192.14932251 -117.94547272]
[207.14912415 -118.02116394]
[220.74754333 -111.69005585]
[230.34510803 -100.16240692]
[234.10714722 -85.64183044]
[231.31449890 -70.90408325]
[222.50102234 -58.76643372]
[209.35148621 -51.54911041]
[194.37956238 -50.63177490]
[180.44728088 -56.18978882]
[170.21794128 -67.16067505]
[165.64709473 -81.44577789]
[161.19027710 -67.12317657]
[156.88269043 -52.75499344]
[152.57510376 -38.38681030]
[148.26751709 -24.01862526]
[143.95994568 -9.65044117]
[139.65235901 4.71774292]
[135.34477234 19.08592796]
[131.03718567 33.45411301]
[126.72959900 47.82229614]
[128.12031555 51.12886810]
[127.93869019 55.28442764]
[125.79866028 59.52384567]
[121.67912292 62.93690491]
[116.48370361 77.00842285]
[111.28829193 91.07994080]
[108.34281158 105.78790283]
[107.71883392 120.77492523]
[107.09485626 135.76193237]
[122.46197510 142.58824158]
[134.02337646 154.74766541]
[140.04035950 170.37095642]
[139.62361145 187.07106018]
[132.86453247 202.30789185]
[120.81703949 213.77461243]
[105.33339691 219.74691772]
[105.33339691 234.74691772]
[105.33339691 249.74691772]
[105.33339691 264.74691772]
[105.33339691 279.74691772]
[105.33339691 294.74691772]
[105.33339691 309.74691772]
[105.33339691 324.74691772]
[105.33339691 339.74691772]
[105.33339691 354.74691772]
[119.87328339 358.80822754]
[132.77766418 366.64273071]
[143.08894348 377.66906738]
[150.04196167 391.06900024]
[153.12077332 405.84814453]
[152.09687805 420.90985107]
[147.04627991 435.13635254]
[138.34375000 447.47201538]
[126.63508606 457.00143433]
[112.78914642 463.01745605]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 124]
[30 123]
[31 122]
[33 43]
[34 42]
[47 121]
[48 120]
[49 119]
[50 115]
[51 114]
[52 113]
[53 112]
[54 111]
[55 110]
[56 109]
[57 108]
[58 107]
[60 106]
[61 93]
[62 92]
[63 90]
[64 89]
[65 88]
[66 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
