%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAGUUCUACGGGGGGGGGGCGUACAACCCUAACAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAxxxxxxxxxxGCCAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACCCCCCCCCCCAGCAGUCCUAC\
) } def
/len { sequence length } bind def

/coor [
[62.46403503 325.06140137]
[51.29675293 314.96261597]
[42.47348404 302.76248169]
[36.37993622 288.99429321]
[33.28249741 274.26000977]
[33.31657028 259.20370483]
[36.48067093 244.48356628]
[42.63647461 230.74311829]
[51.51487732 218.58303833]
[62.72774887 208.53489685]
[75.78491974 201.03796387]
[90.11557770 196.41996765]
[88.57828522 181.49894714]
[87.04099274 166.57794189]
[85.50370026 151.65692139]
[83.96640778 136.73590088]
[82.42911530 121.81488800]
[83.35643768 91.48117828]
[74.94303131 79.06285858]
[66.52961731 66.64454651]
[58.11621094 54.22623444]
[49.70280075 41.80791855]
[41.28939056 29.38960457]
[32.87598038 16.97129059]
[19.80604362 24.34893036]
[6.17824745 30.63669205]
[-7.91671801 35.79273224]
[-22.38505173 39.78273773]
[-37.13046646 42.58015442]
[-52.05483246 44.16636276]
[-67.05883026 44.53081131]
[-82.04261017 43.67107391]
[-96.90645599 41.59287262]
[-111.55144501 38.31003571]
[-125.88012695 33.84440994]
[-139.79713440 28.22571373]
[-153.20985413 21.49134064]
[-166.02902222 13.68610668]
[-178.16932678 4.86195612]
[-189.54998779 -4.92238808]
[-200.09526062 -15.60181141]
[-209.73497009 -27.10524178]
[-218.40495300 -39.35612869]
[-226.04751587 -52.27293777]
[-232.61180115 -65.76971436]
[-238.05412292 -79.75662994]
[-242.33827209 -94.14060974]
[-245.43572998 -108.82592773]
[-247.32586670 -123.71485901]
[-247.99613953 -138.70831299]
[-247.44204712 -153.70649719]
[-245.66731262 -168.60961914]
[-242.68373108 -183.31849670]
[-238.51115417 -197.73524475]
[-233.17735291 -211.76390076]
[-226.71783447 -225.31112671]
[-219.17556763 -238.28675842]
[-210.60075378 -250.60444641]
[-201.05047607 -262.18222046]
[-190.58825684 -272.94302368]
[-179.28373718 -282.81524658]
[-167.21215820 -291.73318481]
[-154.45384216 -299.63751221]
[-141.09370422 -306.47558594]
[-127.22064209 -312.20193481]
[-112.92699432 -316.77844238]
[-98.30787659 -320.17465210]
[-83.46057892 -322.36795044]
[-68.48390961 -323.34375000]
[-53.47753906 -323.09555054]
[-38.54133224 -321.62500000]
[-23.77468491 -318.94192505]
[-9.27587414 -315.06411743]
[4.85861492 -310.01745605]
[18.53471756 -303.83544922]
[31.66141891 -296.55929565]
[44.15136337 -288.23739624]
[55.92143250 -278.92510986]
[66.89329529 -268.68447876]
[76.99393463 -257.58355713]
[86.15612793 -245.69630432]
[94.31890869 -233.10179138]
[101.42794800 -219.88383484]
[107.43594360 -206.13040161]
[112.30290222 -191.93302917]
[115.99643707 -177.38618469]
[118.49197388 -162.58670044]
[119.77290344 -147.63302612]
[119.83070374 -132.62472534]
[118.66497803 -117.66163635]
[116.28349304 -102.84336090]
[112.70210266 -88.26850128]
[107.94463348 -74.03406525]
[102.04273987 -60.23477173]
[95.03571320 -46.96245575]
[86.97017670 -34.30544662]
[77.89980316 -22.34797478]
[67.88495636 -11.16961479]
[56.99229431 -0.84475952]
[45.29429626 8.55788040]
[53.70770645 20.97619438]
[62.12111664 33.39450836]
[70.53452301 45.81282425]
[78.94793701 58.23113632]
[87.36134338 70.64945221]
[95.77475739 83.06776428]
[93.25070190 68.28165436]
[99.47090912 54.63214111]
[112.28582764 46.83613205]
[127.26699066 47.58770752]
[139.23730469 56.62714386]
[144.06018066 70.83066559]
[140.06893921 85.28991699]
[128.64286804 95.00819397]
[113.73014069 96.62704468]
[127.97683716 101.32084656]
[142.22352600 106.01464844]
[156.47021484 110.70845032]
[168.98196411 101.53044128]
[184.49899292 101.49316406]
[197.05470276 110.61094666]
[201.82113647 125.37782288]
[196.96553040 140.11563110]
[184.35496521 149.15736389]
[168.83843994 149.02630615]
[156.38238525 139.77285767]
[151.77641296 124.95513916]
[137.52972412 120.26133728]
[123.28303528 115.56753540]
[109.03633881 110.87374115]
[97.35013580 120.27759552]
[98.88742828 135.19860840]
[100.42472076 150.11962891]
[101.96201324 165.04064941]
[103.49930573 179.96165466]
[105.03659821 194.88267517]
[120.00778961 196.48173523]
[134.31924438 201.15892029]
[147.34532166 208.70976257]
[158.51657104 218.80415344]
[167.34463501 231.00082397]
[173.44360352 244.76658630]
[176.54684448 259.49966431]
[176.51869202 274.55599976]
[173.36038208 289.27737427]
[167.20997620 303.02023315]
[158.33636475 315.18380737]
[147.12744141 325.23635864]
[134.07322693 332.73843384]
[119.74438477 337.36206055]
[104.76731110 338.90512085]
[89.79674530 337.30017090]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 106]
[19 105]
[20 104]
[21 103]
[22 102]
[23 101]
[24 100]
[115 130]
[116 129]
[117 128]
[118 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
