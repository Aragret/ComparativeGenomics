%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCCAAACGGGGGGGGGGCCACUCCACCUUACUACCAGACAACCUUAGCCAAACCAUUUACCCAAAUAxxxxxxxxxxUUGUUCGUUACAUGGUCCAUCAUAGAAUUCUCACUGUGAUAUAUAAACUCCCCCCCCCCCAGACCCAAAC\
) } def
/len { sequence length } bind def

/coor [
[83.32160950 361.66293335]
[70.10140991 354.39047241]
[59.21461105 343.94345093]
[51.40348053 331.03421021]
[47.20059586 316.54290771]
[46.89252472 301.45755005]
[50.50026703 286.80673218]
[57.77783966 273.58935547]
[68.22904968 262.70657349]
[81.14131165 254.90042114]
[95.63424683 250.70314026]
[95.32218933 235.70639038]
[95.01013184 220.70964050]
[94.69807434 205.71287537]
[94.38601685 190.71612549]
[94.07396698 175.71937561]
[93.76190948 160.72262573]
[93.44985199 145.72586060]
[93.13779449 130.72911072]
[92.82573700 115.73236084]
[87.33870697 101.77196503]
[77.35597992 90.57620239]
[67.37325287 79.38043213]
[55.33132553 88.34088135]
[42.54458237 96.20198059]
[29.11310959 102.90221405]
[15.14202404 108.38913727]
[0.74067056 112.61981964]
[-13.97823811 115.56113434]
[-28.89950371 117.19007874]
[-43.90634537 117.49388123]
[-58.88131332 116.47018433]
[-73.70720673 114.12699127]
[-88.26799011 110.48263550]
[-102.44969940 105.56565094]
[-116.14134216 99.41451263]
[-129.23576355 92.07736969]
[-141.63047791 83.61163330]
[-153.22848511 74.08357239]
[-163.93901062 63.56776047]
[-173.67820740 52.14648819]
[-182.36988831 39.90915298]
[-189.94599915 26.95152473]
[-196.34725952 13.37502003]
[-201.52357483 -0.71410573]
[-205.43441772 -15.20558453]
[-208.04917908 -29.98599815]
[-209.34741211 -44.93966675]
[-209.31893921 -59.94955826]
[-207.96398926 -74.89819336]
[-205.29316711 -89.66857910]
[-201.32737732 -104.14511871]
[-196.09765625 -118.21450806]
[-189.64492798 -131.76663208]
[-182.01971436 -144.69541931]
[-173.28167725 -156.89968872]
[-163.49920654 -168.28393555]
[-152.74887085 -178.75904846]
[-141.11480713 -188.24304199]
[-128.68806458 -196.66168213]
[-115.56589508 -203.94909668]
[-101.85101318 -210.04824829]
[-87.65075684 -214.91139221]
[-73.07625580 -218.50048828]
[-58.24157715 -220.78741455]
[-43.26283264 -221.75430298]
[-28.25725174 -221.39355469]
[-13.34227276 -219.70802307]
[1.36537111 -216.71089172]
[15.75057125 -212.42561340]
[29.70074081 -206.88571167]
[43.10669708 -200.13456726]
[55.86352158 -192.22502136]
[67.87137604 -183.21896362]
[79.03627014 -173.18687439]
[89.27083588 -162.20729065]
[98.49495697 -150.36611938]
[106.63645172 -137.75605774]
[113.63159943 -124.47579193]
[119.42565155 -110.62924957]
[123.97325897 -96.32481384]
[127.23883057 -81.67443848]
[129.19680786 -66.79277039]
[129.83186340 -51.79629517]
[129.13903809 -36.80237579]
[127.12374878 -21.92836189]
[123.80176544 -7.29066992]
[119.19908905 6.99614143]
[113.35173798 20.82025528]
[106.30548859 34.07347870]
[98.11547089 46.65208435]
[88.84580231 58.45762634]
[78.56902313 69.39771271]
[88.55175018 80.59347534]
[98.53447723 91.78923798]
[101.09832764 87.29874420]
[105.86928558 83.87837219]
[112.38980103 82.34954071]
[119.93418121 83.34983826]
[134.75193787 81.01873016]
[149.56970215 78.68762970]
[164.38745117 76.35652924]
[179.20521545 74.02542114]
[194.02296448 71.69432068]
[208.84072876 69.36321259]
[215.77952576 55.48399353]
[229.56660461 48.36388397]
[244.90055847 50.74071503]
[255.88517761 61.70054626]
[258.29663086 77.02909851]
[251.20768738 90.83222961]
[237.34417725 97.80235291]
[222.03691101 95.25932312]
[211.17182922 84.18096924]
[196.35408020 86.51207733]
[181.53631592 88.84317780]
[166.71855164 91.17428589]
[151.90080261 93.50538635]
[137.08303833 95.83649445]
[122.26528168 98.16759491]
[136.38667297 103.22586823]
[151.23226929 105.37255096]
[162.20240784 115.60271454]
[165.37893677 130.26251221]
[159.62733459 144.11599731]
[147.00184631 152.21519470]
[132.01184082 151.66737366]
[120.01123047 142.66819763]
[115.28617859 128.43157959]
[107.82249451 115.42030334]
[108.13455200 130.41705322]
[108.44660187 145.41380310]
[108.75865936 160.41056824]
[109.07071686 175.40731812]
[109.38277435 190.40406799]
[109.69483185 205.40081787]
[110.00688934 220.39758301]
[110.31893921 235.39433289]
[110.63099670 250.39108276]
[125.28598785 253.98185730]
[138.51179504 261.24411011]
[149.40666199 271.68270874]
[157.22776794 284.58590698]
[161.44183350 299.07397461]
[161.76155090 314.15908813]
[158.16513062 328.81268311]
[150.89776611 342.03567505]
[140.45497131 352.92651367]
[127.54873657 360.74264526]
[113.05904388 364.95111084]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 95]
[22 94]
[23 93]
[99 120]
[100 119]
[101 118]
[102 117]
[103 116]
[104 115]
[105 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
