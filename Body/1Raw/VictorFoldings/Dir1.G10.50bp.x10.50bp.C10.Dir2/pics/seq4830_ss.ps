%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUAAUCCUGGGGGGGGGGUCUAAUAGCUAUCCUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAAxxxxxxxxxxAACCCUGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCCCCCCCCCCCACAAUCCU\
) } def
/len { sequence length } bind def

/coor [
[80.96591949 364.93640137]
[69.08164215 355.66128540]
[59.76293945 343.81118774]
[53.55157089 330.07501221]
[50.80867004 315.25137329]
[51.69369888 300.20211792]
[56.15520477 285.80218506]
[63.93380356 272.88873291]
[74.57725525 262.21258545]
[87.46676636 254.39440918]
[101.85295105 249.88873291]
[100.91732025 234.91793823]
[99.98169708 219.94714355]
[99.04606628 204.97636414]
[98.11043549 190.00556946]
[97.17481232 175.03477478]
[96.23918152 160.06398010]
[95.30355072 145.09318542]
[94.36792755 130.12240601]
[93.43229675 115.15161133]
[86.94412994 101.62741852]
[75.85281372 91.52877045]
[64.76149750 81.43012238]
[53.64613342 91.51938629]
[41.62203979 100.50637817]
[28.79811668 108.30969238]
[15.29050159 114.85867310]
[1.22152448 120.09399414]
[-13.28140068 123.96826172]
[-28.08693123 126.44637299]
[-43.06098175 127.50588989]
[-58.06793976 127.13722229]
[-72.97190094 125.34370422]
[-87.63788605 122.14158630]
[-101.93308258 117.55985260]
[-115.72801208 111.64000702]
[-128.89775085 104.43566132]
[-141.32304382 96.01206207]
[-152.89134216 86.44549561]
[-163.49787903 75.82259369]
[-173.04661560 64.23957062]
[-181.45106506 51.80132294]
[-188.63510132 38.62049484]
[-194.53369141 24.81645393]
[-199.09338379 10.51422024]
[-202.27290344 -4.15668249]
[-204.04345703 -19.06338882]
[-204.38900757 -34.07089996]
[-203.30641174 -49.04329681]
[-200.80549622 -63.84499359]
[-196.90888977 -78.34193420]
[-191.65188599 -92.40282440]
[-185.08210754 -105.90032959]
[-177.25903320 -118.71221924]
[-168.25354004 -130.72244263]
[-158.14715576 -141.82225037]
[-147.03141785 -151.91111755]
[-135.00700378 -160.89767456]
[-122.18279266 -168.70051575]
[-108.67493439 -175.24900818]
[-94.60576630 -180.48381042]
[-80.10269928 -184.35755920]
[-65.29708099 -186.83512878]
[-50.32299423 -187.89410400]
[-35.31604767 -187.52488708]
[-20.41215134 -185.73081970]
[-5.74628162 -182.52816772]
[8.54874325 -177.94590759]
[22.34346008 -172.02557373]
[35.51294327 -164.82073975]
[47.93791962 -156.39669800]
[59.50587082 -146.82969666]
[70.11203003 -136.20642090]
[79.66033936 -124.62303925]
[88.06433105 -112.18448639]
[95.24789429 -99.00339508]
[101.14597321 -85.19914246]
[105.70514679 -70.89674377]
[108.88414001 -56.22572327]
[110.65414429 -41.31895065]
[110.99913788 -26.31142807]
[109.91600800 -11.33906746]
[107.41454315 3.46253514]
[103.51741028 17.95933151]
[98.25989532 32.02003479]
[91.68962860 45.51730347]
[83.86608887 58.32889938]
[74.86015320 70.33880615]
[85.95146179 80.43745422]
[97.04277802 90.53610229]
[101.36435699 86.77270508]
[108.11979675 85.43003082]
[115.88911438 87.75159454]
[130.75215149 85.72925568]
[145.61520386 83.70692444]
[160.43296814 81.37581635]
[175.19902039 78.73695374]
[189.96507263 76.09809113]
[204.73112488 73.45922852]
[219.49719238 70.82036591]
[234.26324463 68.18149567]
[249.00105286 65.38917542]
[263.70901489 62.44369125]
[278.41696167 59.49820709]
[293.12493896 56.55272675]
[301.67855835 43.26321411]
[317.14147949 39.99613190]
[330.33981323 48.68978119]
[333.44320679 64.18637085]
[324.61050415 77.29205322]
[309.08197021 80.23146057]
[296.07040405 71.26068878]
[281.36245728 74.20616913]
[266.65447998 77.15164948]
[251.94653320 80.09713745]
[245.96684265 84.52308655]
[236.90209961 82.94755554]
[222.13604736 85.58641815]
[207.36999512 88.22528076]
[192.60394287 90.86414337]
[177.83789062 93.50301361]
[163.07182312 96.14187622]
[159.62434387 99.53161621]
[153.98997498 100.75034332]
[147.63754272 98.56996918]
[132.77449036 100.59230804]
[117.91144562 102.61463928]
[108.40309143 114.21598053]
[109.33871460 129.18676758]
[110.27434540 144.15756226]
[111.20997620 159.12835693]
[112.14559937 174.09915161]
[113.08123016 189.06993103]
[114.01686096 204.04072571]
[114.95248413 219.01152039]
[115.88811493 233.98231506]
[116.82374573 248.95310974]
[131.65898132 251.63252258]
[145.42161560 257.78503418]
[157.31150818 267.05291748]
[166.63739014 278.89736938]
[172.85708618 292.62979126]
[175.60897827 307.45175171]
[174.73307800 322.50152588]
[170.28028870 336.90417480]
[162.50952148 349.82232666]
[151.87254333 360.50494385]
[138.98777771 368.33093262]
[124.60433197 372.84533691]
[109.55842590 373.78564453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 90]
[22 89]
[23 88]
[93 127]
[94 126]
[95 125]
[96 122]
[97 121]
[98 120]
[99 119]
[100 118]
[101 117]
[102 115]
[103 114]
[104 113]
[105 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
