%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUCAAACUGGGGGGGGGGACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAAxxxxxxxxxxUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUACUACUCCCCCCCCCCCAACUUAAACU\
) } def
/len { sequence length } bind def

/coor [
[72.01184845 403.09005737]
[58.79165268 395.81756592]
[47.90484619 385.37057495]
[40.09371567 372.46133423]
[35.89083481 357.97000122]
[35.58276367 342.88467407]
[39.19050598 328.23385620]
[46.46807861 315.01644897]
[56.91928482 304.13369751]
[69.83155060 296.32754517]
[84.32448578 292.13024902]
[84.01242828 277.13351440]
[83.70037079 262.13674927]
[83.38831329 247.13999939]
[83.07625580 232.14324951]
[82.76420593 217.14648438]
[82.45214844 202.14973450]
[82.14009094 187.15298462]
[81.82803345 172.15623474]
[81.51597595 157.15946960]
[81.20391846 142.16271973]
[68.67796326 133.91043091]
[54.77540207 139.54238892]
[40.87284851 145.17434692]
[26.97029114 150.80630493]
[21.04009247 165.45581055]
[6.45564795 171.54429626]
[-8.13035107 165.45953369]
[-14.06428909 150.81153870]
[-7.82566595 136.29067993]
[6.88425350 130.51194763]
[21.33833504 136.90374756]
[35.24089050 131.27178955]
[49.14344788 125.63983154]
[63.04600143 120.00787354]
[59.22338867 99.96928406]
[65.26605988 81.12640381]
[79.14552307 67.89421844]
[97.07436371 63.07752991]
[98.94197083 48.19425201]
[100.80958557 33.31097031]
[102.67720032 18.42769241]
[100.63252258 9.45711994]
[104.74160767 3.25542116]
[99.08893585 -11.52151489]
[108.59133911 -22.99119568]
[110.76817322 -37.83240128]
[112.94500732 -52.67360687]
[115.12184906 -67.51480865]
[117.29868317 -82.35601807]
[102.75881195 -86.10092163]
[88.69938660 -91.37012482]
[75.27969360 -98.10392761]
[62.65180969 -106.22602844]
[50.95880127 -115.64439392]
[40.33316803 -126.25231934]
[30.89530373 -137.92959595]
[22.75214767 -150.54391479]
[15.99596786 -163.95234680]
[10.70331669 -178.00297546]
[6.93416405 -192.53657532]
[4.73121691 -207.38848877]
[4.11943722 -222.39041138]
[5.10575628 -237.37237549]
[7.67899847 -252.16461182]
[11.81000710 -266.59954834]
[17.45197487 -280.51358032]
[24.54097366 -293.74905396]
[32.99667740 -306.15603638]
[42.72328186 -317.59393311]
[53.61057281 -327.93313599]
[65.53519440 -337.05648804]
[78.36202240 -344.86062622]
[91.94572449 -351.25711060]
[106.13238525 -356.17349243]
[120.76126099 -359.55401611]
[135.66659546 -361.36044312]
[150.67948914 -361.57226562]
[165.62985229 -360.18707275]
[180.34828186 -357.22058105]
[194.66799927 -352.70639038]
[208.42675781 -346.69567871]
[221.46864319 -339.25650024]
[233.64590454 -330.47320557]
[244.82055664 -320.44528198]
[254.86596680 -309.28634644]
[263.66833496 -297.12286377]
[271.12789917 -284.09262085]
[277.16018677 -270.34329224]
[281.69677734 -256.03067017]
[284.68630981 -241.31690979]
[286.09490967 -226.36874390]
[285.90661621 -211.35552979]
[284.12353516 -196.44738770]
[280.76589966 -181.81323242]
[275.87176514 -167.61888123]
[269.49655151 -154.02517700]
[261.71249390 -141.18614197]
[252.60783386 -129.24725342]
[242.28570557 -118.34378815]
[230.86306763 -108.59928131]
[218.46934509 -100.12416077]
[205.24496460 -93.01444244]
[191.33978271 -87.35069275]
[176.91136169 -83.19708252]
[162.12315369 -80.60067749]
[147.14276123 -79.59089661]
[132.13989258 -80.17918396]
[129.96305847 -65.33797455]
[127.78621674 -50.49676895]
[125.60938263 -35.65556335]
[123.43254089 -20.81435776]
[129.24092102 -7.09896564]
[119.58281708 5.43225813]
[117.56047821 20.29530525]
[115.69286346 35.17858505]
[113.82525635 50.06186295]
[111.95764160 64.94514465]
[120.94213104 68.90293121]
[128.67222595 75.14667511]
[134.57124329 83.29051208]
[138.17863464 92.80458069]
[139.18544006 103.04937744]
[137.45979309 113.31868744]
[133.06033325 122.88829041]
[126.23643494 131.06697083]
[117.41466522 137.24639893]
[107.17251587 140.94616699]
[96.20067596 141.85066223]
[96.51273346 156.84741211]
[96.82479095 171.84417725]
[97.13684082 186.84092712]
[97.44889832 201.83767700]
[97.76095581 216.83442688]
[98.07301331 231.83119202]
[98.38507080 246.82794189]
[98.69712830 261.82470703]
[99.00917816 276.82144165]
[99.32123566 291.81820679]
[113.97622681 295.40896606]
[127.20204163 302.67123413]
[138.09690857 313.10983276]
[145.91799927 326.01303101]
[150.13208008 340.50109863]
[150.45179749 355.58618164]
[146.85537720 370.23980713]
[139.58801270 383.46279907]
[129.14520264 394.35363770]
[116.23897552 402.16976929]
[101.74928284 406.37823486]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 35]
[23 34]
[24 33]
[25 32]
[39 118]
[40 117]
[41 116]
[42 115]
[44 114]
[46 112]
[47 111]
[48 110]
[49 109]
[50 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
