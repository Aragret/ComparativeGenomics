%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCCCAUACCCCGGGGGGGGGGGAACCAACCAAACCCCAAAGACACCCCCCACAGUUUAUGUAGCUUACCUCxxxxxxxxxxCUUUACAGUGAAAUGCCCCAACUAAAUACUACCGUAUGGCCCACCAUAAUCCCCCCCCCCUACCCCCAUACUCC\
) } def
/len { sequence length } bind def

/coor [
[85.67929077 443.83407593]
[70.97995758 440.60671997]
[57.19281006 434.57339478]
[44.84779739 425.96603394]
[34.41942596 415.11544800]
[26.30853271 402.43869019]
[20.82688141 388.42306519]
[18.18516922 373.60729980]
[18.48493958 358.56082153]
[21.71466827 343.86199951]
[27.75021362 330.07583618]
[36.35958481 317.73220825]
[47.21186066 307.30560303]
[59.88991165 299.19674683]
[73.90642548 293.71737671]
[88.72264099 291.07806396]
[89.01899719 276.08099365]
[89.31535339 261.08392334]
[89.61170959 246.08685303]
[89.90806580 231.08978271]
[90.20442963 216.09269714]
[90.50078583 201.09562683]
[90.79714203 186.09855652]
[91.09349823 171.10148621]
[91.38985443 156.10441589]
[91.68621063 141.10734558]
[84.27651215 138.88064575]
[77.40193176 135.33071899]
[71.29643250 130.57839966]
[66.16780853 124.78538513]
[62.19058609 118.14885712]
[59.50013733 110.89466095]
[58.18801880 103.26969910]
[58.29888916 95.53344727]
[43.91029739 91.29454041]
[29.52170372 87.05562592]
[15.13311005 82.81671143]
[6.79050589 95.42196655]
[-4.89797878 105.00688934]
[-18.89301109 110.71920013]
[-33.95016098 112.05095673]
[-48.73056412 108.88375092]
[-61.91994476 101.49919891]
[-72.34552765 90.55393982]
[-79.08026123 77.02120972]
[-81.52530670 62.10433960]
[-79.46324921 47.12971497]
[-73.07744598 33.42887878]
[-62.93572617 22.22009277]
[-49.93987274 14.50004196]
[-35.24547195 10.95518398]
[-20.15914154 11.90072632]
[-6.02234650 17.25259018]
[5.90787745 26.53489494]
[14.57070351 38.92226028]
[19.19584084 53.31321335]
[19.37202263 68.42811584]
[33.76061630 72.66703033]
[48.14920807 76.90594482]
[62.53780365 81.14485931]
[74.13580322 66.98521423]
[90.65994263 59.11362076]
[108.96300507 59.02931213]
[114.73746490 45.18534088]
[120.51193237 31.34136581]
[126.28639221 17.49739265]
[113.29501343 9.95556164]
[101.39923096 0.78249031]
[90.80258179 -9.86485863]
[81.68638611 -21.80429459]
[74.20664978 -34.83151627]
[68.49135590 -48.72361374]
[64.63829041 -63.24287415]
[62.71339417 -78.14085388]
[62.74959946 -93.16262817]
[64.74629211 -108.05115509]
[68.66930389 -122.55167389]
[74.45149994 -136.41606140]
[81.99394989 -149.40707397]
[91.16758728 -161.30242920]
[101.81544495 -171.89857483]
[113.75531006 -181.01419067]
[126.78289032 -188.49330139]
[140.67526245 -194.20794678]
[155.19470215 -198.06031799]
[170.09277344 -199.98449707]
[185.11454773 -199.94758606]
[200.00297546 -197.95018005]
[214.50331116 -194.02647400]
[228.36741638 -188.24362183]
[241.35807800 -180.70054626]
[253.25299072 -171.52635193]
[263.84863281 -160.87799072]
[272.96368408 -148.93768311]
[280.44216919 -135.90975952]
[286.15615845 -122.01711273]
[290.00784302 -107.49748230]
[291.93130493 -92.59931946]
[291.89367676 -77.57755280]
[289.89556885 -62.68921280]
[285.97119141 -48.18906784]
[280.18765259 -34.32523346]
[272.64398193 -21.33493805]
[263.46920776 -9.44045925]
[252.82034302 1.15466988]
[240.87960815 10.26915359]
[227.85130310 17.74703026]
[213.95838928 23.46034431]
[199.43858337 27.31133461]
[184.54032898 29.23410416]
[169.51856995 29.19575119]
[154.63032532 27.19693375]
[140.13035583 23.27185440]
[134.35589600 37.11582565]
[128.58143616 50.95980072]
[122.80698395 64.80377197]
[133.60217285 74.90364838]
[140.22236633 88.12169647]
[141.84501648 102.81558990]
[156.38983154 106.48274994]
[170.93466187 110.14990997]
[185.47949219 113.81707001]
[200.02430725 117.48423004]
[215.64367676 112.48748016]
[227.59706116 123.71462250]
[223.58784485 139.61613464]
[207.74035645 143.83390808]
[196.35716248 132.02905273]
[181.81233215 128.36189270]
[167.26750183 124.69473267]
[152.72268677 121.02758026]
[138.17785645 117.36042023]
[125.44897461 133.33590698]
[106.68328857 141.40370178]
[106.38692474 156.40077209]
[106.09056854 171.39784241]
[105.79421234 186.39491272]
[105.49785614 201.39198303]
[105.20149994 216.38905334]
[104.90514374 231.38613892]
[104.60877991 246.38320923]
[104.31242371 261.38027954]
[104.01606750 276.37734985]
[103.71971130 291.37442017]
[118.42008972 294.59701538]
[132.20918274 300.62585449]
[144.55699158 309.22924805]
[154.98887634 320.07644653]
[163.10386658 332.75054932]
[168.59005737 346.76440430]
[171.23655701 361.57934570]
[170.94166565 376.62591553]
[167.71669006 391.32577515]
[161.68560791 405.11389160]
[153.08023071 417.46029663]
[142.23133850 427.89041138]
[129.55590820 436.00335693]
[115.54117584 441.48730469]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[34 60]
[35 59]
[36 58]
[37 57]
[63 116]
[64 115]
[65 114]
[66 113]
[119 132]
[120 131]
[121 130]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
