%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAUAGUAGGGGGGGGGGCCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAxxxxxxxxxxUCGACUCAUUAAAUUAUGAUAAUCAUAUUUACCAAAUGCCCCUCAUUUACCCCCCCCCCCAUAAAUAUUA\
) } def
/len { sequence length } bind def

/coor [
[84.07271576 397.75930786]
[70.85251617 390.48681641]
[59.96570969 380.03982544]
[52.15457916 367.13058472]
[47.95169830 352.63925171]
[47.64362717 337.55392456]
[51.25136948 322.90310669]
[58.52894211 309.68569946]
[68.98014832 298.80294800]
[81.89241028 290.99679565]
[96.38534546 286.79949951]
[96.07328796 271.80276489]
[95.76123810 256.80599976]
[95.44918060 241.80924988]
[95.13712311 226.81250000]
[94.82506561 211.81573486]
[94.51300812 196.81898499]
[94.20095062 181.82223511]
[93.88890076 166.82548523]
[93.57684326 151.82872009]
[76.62113953 146.70013428]
[62.35520172 136.19865417]
[52.42032623 121.53249359]
[38.00811005 125.69037628]
[23.59589195 129.84826660]
[9.18367672 134.00614929]
[-5.22853947 138.16404724]
[-11.39996052 152.53233337]
[-25.38649368 159.52595520]
[-40.58412933 155.84275818]
[-49.81700134 143.22181702]
[-48.72563934 127.62236786]
[-37.82534409 116.40998077]
[-22.26290321 114.87881470]
[-9.38642693 123.75182343]
[5.02578878 119.59394073]
[19.43800545 115.43605042]
[33.85021973 111.27816010]
[48.26243591 107.12027740]
[47.77529144 99.76830292]
[48.32765198 92.42094421]
[49.90851593 85.22444153]
[52.48642349 78.32204437]
[39.87529755 70.20050049]
[27.26416779 62.07895660]
[14.65303993 53.95741653]
[2.04191184 45.83587265]
[-10.56921673 37.71433258]
[-25.96051025 41.30370331]
[-39.33756638 32.88764954]
[-42.76401138 17.45926666]
[-34.20699692 4.17193890]
[-18.74324989 0.90880322]
[-5.54713535 9.60581970]
[-2.44767427 25.10320282]
[10.16345406 33.22474670]
[22.77458191 41.34628677]
[35.38571167 49.46783066]
[47.99683762 57.58937073]
[60.60796738 65.71091461]
[69.45725250 57.63711166]
[79.91343689 51.79207611]
[91.42640686 48.48332977]
[91.11434937 33.48657608]
[90.80229187 18.48982430]
[90.49023438 3.49306989]
[76.06307983 -1.10431194]
[63.91188431 -10.13908577]
[55.35471725 -22.63122749]
[51.31979752 -37.22568512]
[52.24480438 -52.33935547]
[58.02939606 -66.33282471]
[68.04610443 -77.68818665]
[81.20839691 -85.17369843]
[96.08851624 -87.97737885]
[111.07239532 -85.79511261]
[124.53467560 -78.86361694]
[135.01507568 -67.93476105]
[141.37677002 -54.19403839]
[142.92968750 -39.13192749]
[139.50537109 -24.38225555]
[131.47526550 -11.54496193]
[119.71041107 -2.01253653]
[105.48699188 3.18101358]
[105.79904938 18.17776680]
[106.11109924 33.17452240]
[106.42315674 48.17127609]
[119.41600037 51.51811981]
[131.12736511 58.06480408]
[140.78431702 67.37924194]
[153.72236633 59.78933334]
[166.66041565 52.19942856]
[179.59848022 44.60951996]
[192.53652954 37.01961136]
[198.40251160 29.93143463]
[205.82363892 29.40960121]
[218.91679382 22.09049606]
[232.00994873 14.77138996]
[245.10310364 7.45228434]
[255.97846985 -5.55397844]
[271.48703003 1.29587722]
[269.19808960 18.09459686]
[252.42221069 20.54543877]
[239.32905579 27.86454391]
[226.23590088 35.18365097]
[213.14274597 42.50275421]
[200.12644958 49.95766449]
[187.18838501 57.54757309]
[174.25033569 65.13748169]
[161.31227112 72.72739410]
[148.37422180 80.31729889]
[151.20320129 89.71865845]
[152.22267151 99.48336029]
[151.39659119 109.26631927]
[165.62336731 114.02013397]
[179.85014343 118.77394867]
[194.07691956 123.52776337]
[208.30369568 128.28157043]
[223.24261475 122.43276978]
[237.05694580 130.59019470]
[239.14953613 146.49620056]
[227.91511536 157.94903564]
[211.97178650 156.16307068]
[203.54988098 142.50836182]
[189.32310486 137.75454712]
[175.09632874 133.00073242]
[160.86955261 128.24691772]
[146.64277649 123.49309540]
[130.96032715 142.05867004]
[108.57359314 151.51666260]
[108.88565063 166.51342773]
[109.19770813 181.51017761]
[109.50976562 196.50692749]
[109.82182312 211.50367737]
[110.13387299 226.50044250]
[110.44593048 241.49719238]
[110.75798798 256.49395752]
[111.07004547 271.49069214]
[111.38210297 286.48745728]
[126.03709412 290.07821655]
[139.26290894 297.34048462]
[150.15777588 307.77908325]
[157.97886658 320.68228149]
[162.19293213 335.17034912]
[162.51266479 350.25543213]
[158.91622925 364.90905762]
[151.64886475 378.13204956]
[141.20606995 389.02288818]
[128.29983521 396.83901978]
[113.81015015 401.04748535]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[63 87]
[64 86]
[65 85]
[66 84]
[90 111]
[91 110]
[92 109]
[93 108]
[94 107]
[96 106]
[97 105]
[98 104]
[99 103]
[114 128]
[115 127]
[116 126]
[117 125]
[118 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
