%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAUGACCCCUAGGGGGGGGGGACAGGGGCCCUCUCAGCCCUCCUAAUGACCUCCGGCCUAGCCAUGUGAUUxxxxxxxxxxCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCUACCCCCCCCCCCCAUGAGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 377.03762817]
[70.87159729 371.88262939]
[58.28185654 363.60043335]
[47.94191742 352.63766479]
[40.40940475 339.58554077]
[36.09054184 325.14794922]
[35.21823120 310.10348511]
[37.83952332 295.26348877]
[43.81304932 281.42825317]
[52.81666565 269.34390259]
[64.36482239 259.66210938]
[77.83473969 252.90502930]
[92.50000000 249.43705750]
[92.50000000 234.43705750]
[92.50000000 219.43705750]
[92.50000000 204.43705750]
[92.50000000 189.43705750]
[92.50000000 174.43705750]
[92.50000000 159.43705750]
[92.50000000 144.43705750]
[92.50000000 129.43705750]
[92.50000000 114.43706512]
[84.75758362 105.68748474]
[84.87598419 94.00476074]
[92.79413605 85.41390228]
[93.09813690 70.41698456]
[93.40214539 55.42006302]
[93.70614624 40.42314529]
[94.01015472 25.42622566]
[79.05763245 24.17140198]
[64.21479797 21.97075462]
[49.54142380 18.83314323]
[35.09659195 14.77120304]
[20.93846703 9.80129051]
[7.12405920 3.94341707]
[-6.29100418 -2.77882957]
[-19.25270653 -10.33838081]
[-31.70885277 -18.70479584]
[-43.60929108 -27.84438896]
[-54.90609360 -37.72035599]
[-65.55377960 -48.29292679]
[-75.50947571 -59.51953506]
[-84.73308563 -71.35496521]
[-93.18747711 -83.75157166]
[-100.83860016 -96.65943146]
[-107.65564728 -110.02657318]
[-113.61117554 -123.79916382]
[-118.68119049 -137.92175293]
[-122.84529114 -152.33746338]
[-126.08670807 -166.98825073]
[-128.39237976 -181.81513977]
[-129.75302124 -196.75840759]
[-130.16316223 -211.75787354]
[-129.62115479 -226.75317383]
[-128.12918091 -241.68389893]
[-125.69322968 -256.48992920]
[-122.32312775 -271.11166382]
[-118.03244019 -285.49020386]
[-112.83843994 -299.56765747]
[-106.76205444 -313.28735352]
[-99.82773590 -326.59402466]
[-92.06341553 -339.43411255]
[-83.50035858 -351.75592041]
[-74.17304230 -363.50979614]
[-64.11902618 -374.64843750]
[-53.37878799 -385.12698364]
[-41.99558640 -394.90322876]
[-30.01525116 -403.93783569]
[-17.48602295 -412.19442749]
[-4.45835590 -419.63970947]
[9.01529408 -426.24374390]
[22.88067245 -431.97991943]
[37.08194733 -436.82516479]
[51.56193542 -440.75994873]
[66.26232910 -443.76840210]
[81.12393951 -445.83847046]
[96.08691406 -446.96179199]
[111.09101105 -447.13381958]
[126.07581329 -446.35388184]
[140.98097229 -444.62509155]
[155.74649048 -441.95446777]
[170.31288147 -438.35272217]
[184.62152100 -433.83438110]
[198.61476135 -428.41760254]
[212.23629761 -422.12423706]
[225.43124390 -414.97958374]
[238.14648438 -407.01245117]
[250.33081055 -398.25491333]
[261.93518066 -388.74221802]
[272.91284180 -378.51269531]
[283.21960449 -367.60748291]
[292.81396484 -356.07055664]
[301.65728760 -343.94833374]
[309.71395874 -331.28964233]
[316.95153809 -318.14544678]
[323.34091187 -304.56869507]
[328.85629272 -290.61401367]
[333.47552490 -276.33761597]
[337.17999268 -261.79702759]
[339.95477295 -247.05072021]
[341.78869629 -232.15812683]
[342.67437744 -217.17921448]
[342.60824585 -202.17427063]
[341.59057617 -187.20373535]
[339.62548828 -172.32789612]
[336.72082520 -157.60662842]
[332.88833618 -143.09922791]
[328.14346313 -128.86410522]
[322.50527954 -114.95859528]
[315.99652100 -101.43866730]
[308.64334106 -88.35877991]
[300.47540283 -75.77159119]
[291.52557373 -63.72778320]
[281.82992554 -52.27586365]
[271.42742920 -41.46194077]
[260.36004639 -31.32955742]
[248.67228699 -21.91951561]
[236.41123962 -13.26970387]
[223.62626648 -5.41495275]
[210.36885071 1.61310756]
[196.69239807 7.78617859]
[182.65194702 13.07940292]
[168.30403137 17.47146606]
[153.70646667 20.94468498]
[138.91798401 23.48507118]
[123.99816132 25.08239746]
[109.00707245 25.73023033]
[108.70306396 40.72714996]
[108.39906311 55.72406769]
[108.09506226 70.72098541]
[107.79105377 85.71790314]
[116.26811218 100.16487122]
[107.50000000 114.43706512]
[107.50000000 129.43705750]
[107.50000000 144.43705750]
[107.50000000 159.43705750]
[107.50000000 174.43705750]
[107.50000000 189.43705750]
[107.50000000 204.43705750]
[107.50000000 219.43705750]
[107.50000000 234.43705750]
[107.50000000 249.43705750]
[122.16526031 252.90502930]
[135.63517761 259.66210938]
[147.18333435 269.34390259]
[156.18695068 281.42825317]
[162.16047668 295.26348877]
[164.78176880 310.10348511]
[163.90945435 325.14794922]
[159.59059143 339.58554077]
[152.05809021 352.63766479]
[141.71813965 363.60043335]
[129.12840271 371.88262939]
[114.96779633 377.03762817]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 131]
[26 130]
[27 129]
[28 128]
[29 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
