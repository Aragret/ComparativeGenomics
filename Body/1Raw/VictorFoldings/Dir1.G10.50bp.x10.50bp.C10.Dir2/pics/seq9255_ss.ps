%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUACUCUUUGGGGGGGGGGUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCxxxxxxxxxxAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCACCCCACCCCCCCCCCUCAUACUCUUU\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 557.13928223]
[71.01555634 551.58624268]
[58.81560135 542.71990967]
[49.20452881 531.09765625]
[42.78650284 517.44995117]
[39.96496582 502.63473511]
[40.91728210 487.58337402]
[45.58358765 473.24194336]
[53.67055511 460.51199341]
[64.66983032 450.19372559]
[77.88998413 442.93572998]
[92.50000000 439.19430542]
[92.50000000 424.19430542]
[92.50000000 409.19430542]
[92.50000000 394.19430542]
[92.50000000 379.19430542]
[92.50000000 364.19430542]
[92.50000000 349.19430542]
[92.50000000 334.19430542]
[92.50000000 319.19430542]
[92.50000000 304.19430542]
[92.50000000 289.19430542]
[77.77018738 286.46063232]
[63.78981781 281.06536865]
[51.03553772 273.19088745]
[39.94248962 263.10409546]
[30.88946152 251.14746094]
[24.18593407 237.72729492]
[20.06152153 223.30000305]
[18.65810013 208.35650635]
[20.02492142 193.40562439]
[24.11689758 178.95666504]
[30.79607773 165.50209045]
[39.83630371 153.50080872]
[50.93086243 143.36241150]
[63.70289993 135.43325806]
[77.71820831 129.98464966]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[92.50000000 27.79650116]
[80.00900269 36.10161209]
[65.66482544 31.71473312]
[59.95600128 17.84356499]
[67.05683899 4.63076353]
[81.77517700 1.73758340]
[93.34864044 11.27896690]
[94.88593292 -3.64204931]
[96.42322540 -18.56306648]
[94.18067932 -27.48308563]
[98.14833832 -33.77354431]
[99.99166107 -48.65985107]
[101.83498383 -63.54616165]
[103.67830658 -78.43246460]
[89.18029785 -82.38069153]
[75.39178467 -88.35209656]
[62.59347916 -96.22509766]
[51.04594040 -105.83941650]
[40.98426437 -116.99931335]
[32.61328888 -129.47760010]
[26.10343933 -143.02021790]
[21.58724976 -157.35147095]
[19.15666008 -172.17959595]
[18.86115456 -187.20268250]
[20.70675278 -202.11491394]
[24.65587616 -216.61268616]
[30.62812805 -230.40081787]
[38.50192261 -243.19863892]
[48.11695480 -254.74559021]
[59.27748108 -264.80657959]
[71.75627899 -273.17678833]
[85.29930878 -279.68579102]
[99.63083649 -284.20108032]
[114.45910645 -286.63076782]
[129.48222351 -286.92532349]
[144.39433289 -285.07882690]
[158.89184570 -281.12878418]
[172.67962646 -275.15570068]
[185.47695923 -267.28109741]
[197.02330017 -257.66534424]
[207.08360291 -246.50421143]
[215.45303345 -234.02488708]
[221.96121216 -220.48146057]
[226.47561646 -206.14964294]
[228.90437317 -191.32122803]
[229.19802856 -176.29809570]
[227.35058594 -161.38610840]
[223.39965820 -146.88882446]
[217.42570496 -133.10142517]
[209.55032349 -120.30457306]
[199.93386841 -108.75881958]
[188.77209473 -98.69921875]
[176.29225159 -90.33055878]
[162.74842834 -83.82322693]
[148.41633606 -79.30969238]
[133.58776855 -76.88185883]
[118.56461334 -76.58914185]
[116.72129059 -61.70283508]
[114.87796783 -46.81652832]
[113.03464508 -31.93022156]
[111.34424591 -17.02577400]
[109.80695343 -2.10475683]
[108.26966095 12.81625938]
[107.50000000 27.79650116]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[122.28179169 129.98464966]
[136.29710388 135.43325806]
[149.06913757 143.36241150]
[160.16369629 153.50080872]
[169.20391846 165.50209045]
[175.88310242 178.95666504]
[179.97508240 193.40562439]
[181.34190369 208.35650635]
[179.93847656 223.30000305]
[175.81407166 237.72729492]
[169.11053467 251.14746094]
[160.05751038 263.10409546]
[148.96446228 273.19088745]
[136.21018982 281.06536865]
[122.22981262 286.46063232]
[107.50000000 289.19430542]
[107.50000000 304.19430542]
[107.50000000 319.19430542]
[107.50000000 334.19430542]
[107.50000000 349.19430542]
[107.50000000 364.19430542]
[107.50000000 379.19430542]
[107.50000000 394.19430542]
[107.50000000 409.19430542]
[107.50000000 424.19430542]
[107.50000000 439.19430542]
[122.11001587 442.93572998]
[135.33016968 450.19372559]
[146.32945251 460.51199341]
[154.41641235 473.24194336]
[159.08271790 487.58337402]
[160.03503418 502.63473511]
[157.21350098 517.44995117]
[150.79547119 531.09765625]
[141.18440247 542.71990967]
[128.98443604 551.58624268]
[114.96250153 557.13928223]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[38 115]
[39 114]
[41 112]
[42 111]
[43 110]
[44 109]
[45 108]
[51 107]
[52 106]
[53 105]
[55 104]
[56 103]
[57 102]
[58 101]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
