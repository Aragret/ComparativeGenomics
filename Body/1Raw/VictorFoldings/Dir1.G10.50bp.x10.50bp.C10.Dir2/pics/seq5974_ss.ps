%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCAAGAGCCGGGGGGGGGGUUCAAAGCCCUCAGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGAxxxxxxxxxxCCCCUUAUCCCCAUACUAGUUAUUAUCGAAACCAUCAGCCUACUCAUUCACCCCCCCCCCACCAAUAGCC\
) } def
/len { sequence length } bind def

/coor [
[74.67630768 510.12399292]
[60.83037186 504.10797119]
[49.12170792 494.57855225]
[40.41918564 482.24288940]
[35.36858368 468.01635742]
[34.34469223 452.95468140]
[37.42349243 438.17550659]
[44.37651443 424.77560425]
[54.68779755 413.74926758]
[67.59217834 405.91476440]
[82.13206482 401.85342407]
[82.13206482 386.85342407]
[82.13206482 371.85342407]
[82.13206482 356.85342407]
[82.13206482 341.85342407]
[82.13206482 326.85342407]
[82.13206482 311.85342407]
[82.13206482 296.85342407]
[82.13206482 281.85342407]
[82.13206482 266.85342407]
[82.13206482 251.85343933]
[73.78350830 243.04383850]
[73.69908142 230.50543213]
[82.47216034 220.99296570]
[82.78421783 205.99621582]
[75.31336975 193.11073303]
[83.33609009 179.47451782]
[70.66584015 187.50350952]
[56.42052460 182.80552673]
[51.01232147 168.81440735]
[58.39418793 155.75653076]
[73.17057800 153.17614746]
[84.54087067 162.95870972]
[86.40848541 148.07542419]
[88.27610016 133.19215393]
[90.14371490 118.30886841]
[81.54226685 109.57461548]
[79.35601807 97.51259613]
[66.11343384 90.46746063]
[52.87084961 83.42233276]
[39.62826157 76.37719727]
[26.38567734 69.33206177]
[13.14309216 62.28692245]
[0.86832368 71.35845947]
[-14.12845325 74.19738007]
[-28.86961746 70.24000549]
[-40.42829895 60.27207184]
[-46.50951767 46.27273178]
[-45.90583801 31.02155685]
[-38.73712158 17.54668236]
[-26.42672729 8.52355099]
[-11.41888618 5.74371386]
[3.30657983 9.75910950]
[14.82592010 19.77248001]
[20.85196114 33.79565811]
[20.18822670 49.04433823]
[33.43081284 56.08947372]
[46.67339706 63.13460922]
[59.91598511 70.17974091]
[73.15856934 77.22487640]
[86.40115356 84.27001190]
[95.49364471 79.70088959]
[105.66539764 79.99339294]
[114.68292999 68.00656128]
[123.70045471 56.01972580]
[128.60200500 41.84317017]
[128.91406250 26.84641647]
[129.22612000 11.84966183]
[129.53817749 -3.14709163]
[115.73983002 -9.59112644]
[105.76034546 -21.09459305]
[101.32872772 -35.66444778]
[103.21276855 -50.77637100]
[111.08606720 -63.81213379]
[123.58451080 -72.51321411]
[138.54267883 -75.37208557]
[153.36897278 -71.89344788]
[165.49464417 -62.67998505]
[172.81886292 -49.32798767]
[174.07263184 -34.15077209]
[169.03877258 -19.77787971]
[158.58938599 -8.69950199]
[144.53492737 -2.83503532]
[144.22286987 12.16171837]
[143.91081238 27.15847206]
[143.59875488 42.15522385]
[151.88238525 29.64995956]
[162.40681458 18.96182632]
[174.78276062 10.48620224]
[188.55238342 4.53662062]
[203.20631409 1.33316791]
[218.20248413 0.99434787]
[232.98616028 3.53269386]
[247.01043701 8.85430717]
[259.75653076 16.76232910]
[270.75296021 26.96422577]
[279.59292603 39.08260345]
[285.94940186 52.66918182]
[289.58728027 67.22135925]
[290.37197876 82.20082092]
[288.27444458 97.05344391]
[283.37228394 111.22979736]
[275.84686279 124.20545959]
[265.97653198 135.50044250]
[254.12643433 144.69691467]
[240.73492432 151.45468140]
[226.29737854 155.52375793]
[211.34788513 156.75361633]
[196.43943787 155.09875488]
[182.12356567 150.62040710]
[168.92982483 143.48423767]
[157.34626770 133.95420837]
[147.80142212 122.38287354]
[140.64834595 109.19827271]
[136.15167236 94.88814545]
[134.47773743 79.98183441]
[135.68728638 65.03725433]
[126.66976166 77.02409363]
[117.65222931 89.01092529]
[119.27199554 107.80712891]
[105.02699280 120.17648315]
[103.15937805 135.05976868]
[101.29176331 149.94303894]
[99.42415619 164.82632446]
[98.33283997 179.78657532]
[105.78137207 193.74472046]
[97.78097534 206.30827332]
[97.46891785 221.30502319]
[106.72317505 237.19020081]
[97.13206482 251.85343933]
[97.13206482 266.85342407]
[97.13206482 281.85342407]
[97.13206482 296.85342407]
[97.13206482 311.85342407]
[97.13206482 326.85342407]
[97.13206482 341.85342407]
[97.13206482 356.85342407]
[97.13206482 371.85342407]
[97.13206482 386.85342407]
[97.13206482 401.85342407]
[111.67195129 405.91476440]
[124.57633209 413.74926758]
[134.88761902 424.77560425]
[141.84063721 438.17550659]
[144.91943359 452.95468140]
[143.89555359 468.01635742]
[138.84494019 482.24288940]
[130.14242554 494.57855225]
[118.43376160 504.10797119]
[104.58782196 510.12399292]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 128]
[25 127]
[27 125]
[33 124]
[34 123]
[35 122]
[36 121]
[38 61]
[39 60]
[40 59]
[41 58]
[42 57]
[43 56]
[63 119]
[64 118]
[65 117]
[66 86]
[67 85]
[68 84]
[69 83]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
