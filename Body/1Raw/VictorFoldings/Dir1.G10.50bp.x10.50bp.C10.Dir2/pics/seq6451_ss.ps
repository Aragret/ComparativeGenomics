%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAGCUUCGGGGGGGGGGUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCUAUAGUGGAxxxxxxxxxxGUUAUUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCCCCCCCCCCCUAAGCUUC\
) } def
/len { sequence length } bind def

/coor [
[83.00090790 399.32601929]
[69.78070831 392.05355835]
[58.89390564 381.60656738]
[51.08277512 368.69729614]
[46.87989426 354.20599365]
[46.57181931 339.12066650]
[50.17956161 324.46981812]
[57.45713425 311.25244141]
[67.90834045 300.36965942]
[80.82060242 292.56353760]
[95.31353760 288.36624146]
[95.00148773 273.36947632]
[94.68943024 258.37274170]
[94.37737274 243.37597656]
[94.06531525 228.37922668]
[93.75325775 213.38247681]
[93.44120026 198.38572693]
[93.12915039 183.38896179]
[92.81709290 168.39221191]
[92.50503540 153.39546204]
[84.50463104 140.83190918]
[91.95316315 126.87375641]
[91.64110565 111.87700653]
[84.06949615 124.82577515]
[73.85275269 135.80841064]
[61.48411942 144.29467773]
[47.56072235 149.87492371]
[32.75474167 152.27970886]
[17.78097725 151.39295959]
[3.36231685 147.25747681]
[-9.80514336 140.07290649]
[-21.08571434 130.18611145]
[-29.93479919 118.07439423]
[-35.92518997 104.32247162]
[-38.76768112 89.59426117]
[-38.32505035 74.60079193]
[-34.61866760 60.06591415]
[-27.82746124 46.69132996]
[-18.27929688 35.12272644]
[-6.43513203 25.91860962]
[7.13322687 19.52332687]
[21.77073669 16.24562645]
[36.77073669 16.24374580]
[51.40906525 19.51777649]
[64.97902679 25.90965652]
[76.82550049 35.11080170]
[86.37656403 46.67700958]
[93.17112732 60.04989243]
[96.88115692 74.58383942]
[97.32771301 89.57510376]
[104.78262329 76.55879211]
[112.23753357 63.54248047]
[100.68561554 53.26336670]
[91.51416016 40.82081223]
[85.11831665 26.75483322]
[81.77284241 11.67530632]
[81.62028503 -3.76447749]
[84.66490173 -18.89611435]
[90.77261353 -33.06502533]
[99.67687988 -45.65876389]
[110.99033356 -56.13350296]
[124.22163391 -64.03750610]
[138.79681396 -69.03061676]
[154.08413696 -70.89889526]
[169.42158508 -69.56377411]
[184.14537048 -65.08538055]
[191.32788086 -78.25396729]
[198.51039124 -91.42254639]
[205.69290161 -104.59112549]
[192.68919373 -97.11425018]
[178.07800293 -93.72115326]
[163.11012268 -94.70228577]
[149.06689453 -99.97367096]
[137.15046692 -109.08405304]
[128.38098145 -121.25352478]
[123.50913239 -135.44032288]
[122.95198059 -150.42996216]
[126.75723267 -164.93927002]
[134.59912109 -177.72618103]
[145.80635071 -187.69602966]
[159.41950989 -193.99537659]
[174.27325439 -196.08494568]
[189.09600830 -193.78587341]
[202.61888123 -187.29496765]
[213.68423462 -177.16787720]
[221.34481812 -164.27153015]
[224.94483948 -149.70994568]
[224.17611694 -134.72966003]
[219.10284424 -120.61004639]
[230.80247498 -129.99720764]
[242.50209045 -139.38436890]
[239.50613403 -154.39379883]
[243.83969116 -169.07299805]
[254.50695801 -180.04879761]
[269.05664062 -184.79902649]
[284.14538574 -182.23214722]
[296.30584717 -172.93798828]
[302.74368286 -159.05227661]
[301.97952271 -143.76585388]
[294.18893433 -130.59143066]
[281.16217041 -122.55638885]
[265.89266968 -121.50712585]
[251.88925171 -127.68474579]
[240.18963623 -118.29758453]
[228.49000549 -108.91042328]
[218.86148071 -97.40862274]
[211.67897034 -84.24003601]
[204.49645996 -71.07145691]
[197.31394958 -57.90287399]
[208.47882080 -48.53988266]
[217.59463501 -37.16593552]
[224.30615234 -24.22121048]
[228.35113525 -10.20716095]
[229.57075500 4.33289957]
[227.91572571 18.83486938]
[223.44834900 32.73574066]
[216.34011841 45.49545288]
[206.86518860 56.61788177]
[195.38975525 65.67012024]
[182.35797119 72.29934692]
[168.27467346 76.24655151]
[153.68588257 77.35666656]
[139.15757751 75.58467102]
[125.25384521 70.99739075]
[117.79893494 84.01370239]
[110.34402466 97.03001404]
[106.63786316 111.56494904]
[106.94992065 126.56169891]
[114.97264099 140.19792175]
[107.50178528 153.08340454]
[107.81384277 168.08015442]
[108.12590027 183.07690430]
[108.43795776 198.07366943]
[108.75001526 213.07041931]
[109.06207275 228.06716919]
[109.37412262 243.06391907]
[109.68618011 258.06066895]
[109.99823761 273.05743408]
[110.31029510 288.05419922]
[124.96528625 291.64495850]
[138.19110107 298.90722656]
[149.08596802 309.34579468]
[156.90705872 322.24902344]
[161.12112427 336.73709106]
[161.44085693 351.82217407]
[157.84442139 366.47579956]
[150.57705688 379.69879150]
[140.13426208 390.58963013]
[127.22803497 398.40573120]
[112.73834229 402.61422729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 128]
[23 127]
[50 126]
[51 125]
[52 124]
[66 109]
[67 108]
[68 107]
[69 106]
[89 105]
[90 104]
[91 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
