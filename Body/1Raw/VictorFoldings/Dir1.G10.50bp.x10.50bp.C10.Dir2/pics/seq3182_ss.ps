%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAGAACAGGGGGGGGGGGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUAAAACUUUxxxxxxxxxxUAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACACCCCCCCCCCACACAAGAACA\
) } def
/len { sequence length } bind def

/coor [
[75.20393372 642.34106445]
[60.16771698 641.41363525]
[45.71500778 637.16314697]
[32.57074356 629.80267334]
[21.39423561 619.70153809]
[12.74609089 607.36633301]
[7.06009722 593.41577148]
[4.62146282 578.54968262]
[5.55250788 563.51373291]
[9.80653191 549.06201172]
[17.17015457 535.91955566]
[27.27401924 524.74548340]
[39.61132050 516.10034180]
[53.56322479 510.41772461]
[68.42990875 507.98269653]
[69.35332489 493.01113892]
[70.27674103 478.03958130]
[71.20014954 463.06802368]
[72.12356567 448.09649658]
[73.04698181 433.12493896]
[73.97039032 418.15338135]
[74.89380646 403.18182373]
[75.81722260 388.21029663]
[76.74063110 373.23873901]
[77.66404724 358.26718140]
[70.72492218 345.08773804]
[79.29710388 331.79003906]
[80.22051239 316.81851196]
[73.28139496 303.63906860]
[81.85356903 290.34136963]
[82.77698517 275.36981201]
[83.70039368 260.39828491]
[84.62380981 245.42672729]
[75.95416260 230.19906616]
[86.17263794 214.91464233]
[86.78846741 199.92729187]
[87.40428925 184.93994141]
[84.51871490 178.08532715]
[88.18975067 169.65211487]
[89.11316681 154.68055725]
[90.03658295 139.70901489]
[90.95999146 124.73745728]
[80.95909119 118.19635773]
[74.87812805 107.90919495]
[73.96898651 95.99376678]
[60.40708923 89.58479309]
[44.87952805 93.61894226]
[32.13118362 83.87937164]
[31.94149399 67.83744049]
[44.45597458 57.79914474]
[60.07458496 61.46500778]
[66.81606293 76.02289581]
[80.37796021 82.43186951]
[85.99178314 77.69678497]
[92.69482422 74.69589233]
[99.96588135 73.66252899]
[104.21872711 59.27804565]
[108.47157288 44.89356613]
[112.72441864 30.50908470]
[116.08367920 15.89007664]
[118.53660583 1.09199798]
[120.98954010 -13.70608139]
[123.44246674 -28.50415993]
[125.89539337 -43.30223846]
[111.75758362 -48.44392014]
[98.80538940 -56.09607697]
[87.47998047 -65.99807739]
[78.16707611 -77.81266785]
[71.18388367 -91.13744354]
[66.76823425 -105.51856232]
[65.07053375 -120.46622467]
[66.14860535 -135.47129822]
[69.96572876 -150.02273560]
[76.39189148 -163.62490845]
[85.20822144 -175.81452942]
[96.11444092 -186.17643738]
[108.73908234 -194.35769653]
[122.65216064 -200.07966614]
[137.37979126 -203.14744568]
[152.42037964 -203.45655823]
[167.26162720 -200.99647522]
[181.39805603 -195.85098267]
[194.34817505 -188.19534302]
[205.67092896 -178.29028320]
[214.98063660 -166.47319031]
[221.96025085 -153.14653015]
[226.37200928 -138.76422119]
[228.06568909 -123.81610870]
[226.98356628 -108.81131744]
[223.16252136 -94.26091003]
[216.73269653 -80.66046906]
[207.91308594 -68.47322083]
[197.00407410 -58.11426163]
[184.37722778 -49.93640137]
[170.46260071 -44.21818542]
[155.73413086 -41.15437317]
[140.69346619 -40.84931183]
[138.24053955 -26.05123138]
[135.78761292 -11.25315285]
[133.33468628 3.54492593]
[130.88175964 18.34300423]
[143.88737488 10.86945534]
[158.41670227 14.59754086]
[166.21719360 27.40973663]
[162.85821533 42.02881241]
[150.24766541 50.15123367]
[135.54821777 47.16353226]
[127.10890198 34.76193237]
[122.85605621 49.14641190]
[118.60321045 63.53089523]
[114.35036469 77.91537476]
[125.73017120 94.37664795]
[122.25514984 114.08445740]
[105.93154144 125.66087341]
[105.00813293 140.63241577]
[104.08471680 155.60397339]
[103.16130066 170.57551575]
[102.39163971 185.55577087]
[101.77581787 200.54312134]
[101.15998840 215.53047180]
[109.32719421 225.56542969]
[108.46940613 238.07284546]
[99.59535980 246.35014343]
[98.67194366 261.32168579]
[97.74853516 276.29324341]
[96.82511902 291.26480103]
[103.69819641 305.51510620]
[95.19206238 317.74191284]
[94.26865387 332.71347046]
[101.14172363 346.96377563]
[92.63559723 359.19061279]
[91.71218109 374.16213989]
[90.78877258 389.13369751]
[89.86535645 404.10525513]
[88.94194031 419.07678223]
[88.01853180 434.04833984]
[87.09511566 449.01989746]
[86.17169952 463.99145508]
[85.24829102 478.96298218]
[84.32487488 493.93453979]
[83.40145874 508.90609741]
[97.85623169 513.14959717]
[111.00405884 520.50366211]
[122.18546295 530.59942627]
[130.83958435 542.93041992]
[136.53233337 556.87823486]
[138.97817993 571.74310303]
[138.05441284 586.77954102]
[133.80740356 601.23327637]
[126.45014191 614.37933350]
[116.35169220 625.55828857]
[104.01858521 634.20941162]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 132]
[25 131]
[27 129]
[28 128]
[30 126]
[31 125]
[32 124]
[33 123]
[35 120]
[36 119]
[37 118]
[39 117]
[40 116]
[41 115]
[42 114]
[45 53]
[46 52]
[56 111]
[57 110]
[58 109]
[59 108]
[60 101]
[61 100]
[62 99]
[63 98]
[64 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
