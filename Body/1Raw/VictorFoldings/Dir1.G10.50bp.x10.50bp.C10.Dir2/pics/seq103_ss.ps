%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAUCCUAGGGGGGGGGGUUAUUUAUCGCACCUACGUUCAAUAUUACAGGCGAACAUACUUACUAAAGxxxxxxxxxxCUAAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCCCCCCCCCCCUCAUACUA\
) } def
/len { sequence length } bind def

/coor [
[93.03910065 446.93518066]
[79.19316101 440.91915894]
[67.48449707 431.38973999]
[58.78197479 419.05407715]
[53.73137283 404.82754517]
[52.70748138 389.76586914]
[55.78627777 374.98669434]
[62.73929977 361.58676147]
[73.05058289 350.56042480]
[85.95496368 342.72592163]
[100.49485016 338.66461182]
[100.49485016 323.66461182]
[100.49485016 308.66461182]
[100.49485016 293.66461182]
[100.49485016 278.66461182]
[100.49485016 263.66461182]
[100.49485016 248.66461182]
[100.49485016 233.66461182]
[100.49485016 218.66461182]
[100.49485016 203.66461182]
[99.87087250 188.67759705]
[98.62400055 173.72950745]
[97.37712860 158.78143311]
[96.13024902 143.83334351]
[80.66470337 139.52825928]
[67.77258301 129.96214294]
[59.16978073 116.40821838]
[56.00128555 100.67044067]
[41.18352509 98.33933258]
[26.36576843 96.00823212]
[11.54800987 93.67713165]
[5.10406065 107.33920288]
[-4.92894459 118.63147736]
[-17.73767662 126.63854218]
[-32.28378677 130.71130371]
[-47.38808823 130.51959229]
[-61.82614136 126.07894897]
[-74.42752075 117.74936676]
[-84.17069244 106.20608521]
[-90.26580811 92.38486481]
[-92.21877289 77.40612793]
[-89.87127686 62.48413086]
[-83.41360474 48.82854080]
[-73.36925507 37.54635239]
[-60.55249023 29.55215836]
[-46.00229645 25.49401474]
[-30.89819527 25.70089912]
[-16.46460724 30.15603828]
[-3.87160277 38.49827576]
[5.85996294 50.05133820]
[11.94119453 63.87867737]
[13.87911320 78.85936737]
[28.69687080 81.19047546]
[43.51462936 83.52157593]
[58.33238602 85.85268402]
[68.21590424 63.94597626]
[89.56314850 48.93196869]
[87.07803345 34.13926315]
[84.59291077 19.34655571]
[69.55964661 18.22209167]
[55.23254776 13.53193951]
[42.44456100 5.54877758]
[31.93917274 -5.26326323]
[24.32714653 -18.27558517]
[20.05104065 -32.73167038]
[19.35946083 -47.79105759]
[22.29261208 -62.57821655]
[28.67996788 -76.23343658]
[38.15017319 -87.96282959]
[50.15264893 -97.08445740]
[63.98957825 -103.06800079]
[78.85650635 -105.56558990]
[93.88908386 -104.43201447]
[108.21334076 -99.73317719]
[120.99648285 -91.74226379]
[131.49531555 -80.92385101]
[139.09945679 -67.90692139]
[143.36679077 -53.44824600]
[144.04924011 -38.38844299]
[141.10713196 -23.60306358]
[134.71148682 -9.95171547]
[125.23417664 1.77193189]
[113.22617340 10.88628197]
[99.38562012 16.86143684]
[101.87074280 31.65414429]
[104.35585785 46.44684982]
[111.36421204 49.11760712]
[108.98165131 34.30803680]
[120.61577606 24.83982086]
[134.63258362 30.18107414]
[137.01542664 44.99060059]
[125.38092804 54.45912170]
[132.38928223 57.12987518]
[144.08891296 47.74271393]
[155.78852844 38.35555267]
[164.35879517 23.72726059]
[180.78788757 27.91307831]
[181.31369019 44.85887146]
[165.17568970 50.05517578]
[153.47607422 59.44233704]
[141.77644348 68.82949829]
[143.15953064 75.93141174]
[143.44036865 82.83033752]
[142.69940186 89.36526489]
[157.65965271 88.27395630]
[172.61990356 87.18264008]
[179.23896790 73.32321930]
[191.91003418 64.64337921]
[207.22463989 63.47794724]
[221.06324768 70.14042664]
[229.70332336 82.83863068]
[230.82075500 98.15682220]
[224.11492920 111.97447968]
[211.38969421 120.57471466]
[196.06808472 121.64411926]
[182.27151489 114.89501953]
[173.71121216 102.14289093]
[158.75096130 103.23419952]
[143.79071045 104.32550812]
[140.48002625 117.25408936]
[133.44590759 128.59559631]
[123.33534241 137.30680847]
[111.07833862 142.58647156]
[112.32521057 157.53454590]
[113.57209015 172.48263550]
[114.81896210 187.43072510]
[117.51896667 191.01840210]
[118.76899719 194.89248657]
[118.66189575 198.54904175]
[117.44851685 201.56925964]
[115.49485016 203.66461182]
[115.49485016 218.66461182]
[115.49485016 233.66461182]
[115.49485016 248.66461182]
[115.49485016 263.66461182]
[115.49485016 278.66461182]
[115.49485016 293.66461182]
[115.49485016 308.66461182]
[115.49485016 323.66461182]
[115.49485016 338.66461182]
[130.03474426 342.72592163]
[142.93911743 350.56042480]
[153.25041199 361.58676147]
[160.20343018 374.98669434]
[163.28222656 389.76586914]
[162.25833130 404.82754517]
[157.20773315 419.05407715]
[148.50520325 431.38973999]
[136.79653931 440.91915894]
[122.95060730 446.93518066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 126]
[22 125]
[23 124]
[24 123]
[28 55]
[29 54]
[30 53]
[31 52]
[57 86]
[58 85]
[59 84]
[93 101]
[94 100]
[95 99]
[104 119]
[105 118]
[106 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
