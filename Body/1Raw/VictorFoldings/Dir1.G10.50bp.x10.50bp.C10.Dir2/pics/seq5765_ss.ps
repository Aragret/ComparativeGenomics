%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAAAAUGACAGGGGGGGGGGGUUUGAACAUACAAAACCCACCCCAUUCCUCCCCACACUCAUCGCCCUUAxxxxxxxxxxCUAUGCUUAGGCGCUAUCACCACUCUGUUCGCAGCAGUCUGCGCCCUUACCCCCCCCCCCACAAAAUGACA\
) } def
/len { sequence length } bind def

/coor [
[29.87144470 271.36614990]
[19.68965530 266.83709717]
[9.79875851 261.70376587]
[0.23457761 255.98471069]
[-8.96824360 249.70066833]
[-17.77637291 242.87440491]
[-26.15790367 235.53062439]
[-34.08248138 227.69595337]
[-41.52139664 219.39875793]
[-48.44771194 210.66908264]
[-54.83633804 201.53854370]
[-60.66413116 192.04023743]
[-65.90998077 182.20855713]
[-70.55489349 172.07910156]
[-84.59687042 177.35383606]
[-98.63884735 182.62858582]
[-112.68082428 187.90332031]
[-122.87878418 199.99928284]
[-137.51400757 197.23168945]
[-151.55598450 202.50642395]
[-165.59796143 207.78117371]
[-175.79592896 219.87712097]
[-190.43113708 217.10952759]
[-204.47311401 222.38426208]
[-218.51509094 227.65901184]
[-232.55706787 232.93374634]
[-238.85980225 247.42689514]
[-253.59510803 253.14057922]
[-268.02081299 246.68496704]
[-273.57836914 231.89007568]
[-266.97061157 217.53343201]
[-252.11778259 212.13259888]
[-237.83181763 218.89176941]
[-223.78984070 213.61703491]
[-209.74786377 208.34228516]
[-195.70588684 203.06755066]
[-186.51229858 191.34887695]
[-170.87269592 193.73919678]
[-156.83071899 188.46444702]
[-142.78874207 183.18971252]
[-133.59516907 171.47103882]
[-117.95556641 173.86134338]
[-103.91358948 168.58660889]
[-89.87161255 163.31185913]
[-75.82963562 158.03712463]
[-80.85409546 139.70094299]
[-83.97180176 120.94620514]
[-85.14989471 101.97062683]
[-84.37595367 82.97427368]
[-81.65813446 64.15741730]
[-77.02508545 45.71845245]
[-70.52566528 27.85178185]
[-62.22838974 10.74576759]
[-52.22073746 -5.41923714]
[-40.60821915 -20.47280502]
[-27.51326752 -34.25622940]
[-13.07394218 -46.62418365]
[2.55752325 -57.44628143]
[19.21632576 -66.60842133]
[36.72682953 -74.01400757]
[54.90442657 -79.58496094]
[73.55746460 -83.26254272]
[92.48928833 -85.00799561]
[111.50029755 -84.80290222]
[113.03759003 -99.72391510]
[114.57488251 -114.64492798]
[116.11217499 -129.56594849]
[101.96253967 -134.78500366]
[89.55583191 -143.35964966]
[79.67195129 -154.75086975]
[72.93221283 -168.24259949]
[69.76027679 -182.98672485]
[70.35553741 -198.05645752]
[74.68056488 -212.50445557]
[82.46349335 -225.42254639]
[93.21508789 -235.99865723]
[106.25948334 -243.56797791]
[120.77669525 -247.65467834]
[135.85417175 -248.00189209]
[150.54412842 -244.58778381]
[163.92312622 -237.62696838]
[175.15016174 -227.55699158]
[183.51950073 -215.01087952]
[188.50503540 -200.77728271]
[189.79336548 -185.75093079]
[187.30349731 -170.87640381]
[181.19197083 -157.08872986]
[171.84294128 -145.25460815]
[159.84410095 -136.11793518]
[145.94972229 -130.25306702]
[131.03318787 -128.02865601]
[129.49589539 -113.10763550]
[127.95860291 -98.18662262]
[126.42131042 -83.26560974]
[142.46836853 -80.22431946]
[158.18498230 -75.78076172]
[173.44888306 -69.96949768]
[188.14129639 -62.83574677]
[202.14790344 -54.43501663]
[215.35972595 -44.83266830]
[227.67396545 -34.10342026]
[238.99481201 -22.33074570]
[249.23417664 -9.60625076]
[258.31237793 3.97106075]
[266.15881348 18.29554749]
[272.71240234 33.25575256]
[277.92214966 48.73527908]
[281.74755859 64.61368561]
[284.15884399 80.76741791]
[285.13720703 97.07079315]
[284.67507935 113.39696503]
[299.57952881 115.08735657]
[314.48397827 116.77775574]
[329.38842773 118.46815491]
[344.29287720 120.15855408]
[359.10433960 113.11915588]
[372.45092773 122.64805603]
[370.60287476 138.94273376]
[355.46124268 145.24063110]
[342.60247803 135.06300354]
[327.69802856 133.37260437]
[312.79357910 131.68220520]
[297.88912964 129.99180603]
[282.98468018 128.30140686]
[280.95077515 139.25787354]
[278.26144409 150.07215881]
[274.92645264 160.70506287]
[270.95785522 171.11810303]
[266.37002563 181.27352905]
[261.17956543 191.13458252]
[255.40533447 200.66554260]
[249.06819153 209.83187866]
[242.19111633 218.60040283]
[234.79901123 226.93933105]
[226.91865540 234.81848145]
[218.57858276 242.20930481]
[209.80900574 249.08503723]
[200.64170837 255.42077637]
[191.10986328 261.19354248]
[181.24800110 266.38247681]
[171.09187317 270.96875000]
[160.67822266 274.93576050]
[150.04479980 278.26913452]
[139.23011780 280.95681763]
[128.27333069 282.98904419]
[117.21414185 284.35845947]
[106.09259796 285.06011963]
[94.94898987 285.09149170]
[83.82366943 284.45242310]
[72.75695038 283.14526367]
[61.78890228 281.17471313]
[50.95925903 278.54797363]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 45]
[15 44]
[16 43]
[17 42]
[19 40]
[20 39]
[21 38]
[23 36]
[24 35]
[25 34]
[26 33]
[64 94]
[65 93]
[66 92]
[67 91]
[111 124]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
