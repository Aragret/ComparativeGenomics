%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACUUCUCCGGGGGGGGGGCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAGCUGCUUxxxxxxxxxxCACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAAGCUUCAAACUAGACCCCCCCCCCCUACUUCUCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.50827026]
[71.19830322 364.49224854]
[59.48964310 354.96282959]
[50.78712082 342.62716675]
[45.73651886 328.40063477]
[44.71262741 313.33895874]
[47.79142761 298.55981445]
[54.74444962 285.15988159]
[65.05573273 274.13354492]
[77.96011353 266.29904175]
[92.50000000 262.23773193]
[92.50000000 247.23771667]
[92.50000000 232.23771667]
[92.50000000 217.23771667]
[92.50000000 202.23771667]
[92.50000000 187.23771667]
[92.50000000 172.23771667]
[92.50000000 157.23771667]
[92.50000000 142.23771667]
[92.50000000 127.23772430]
[86.70564270 124.92797089]
[81.55938721 121.40297699]
[77.31211853 116.83458710]
[74.17087555 111.44551086]
[72.28880310 105.49846649]
[57.32855606 104.40715790]
[42.36830902 103.31584930]
[27.40806007 102.22454071]
[12.44781113 101.13322449]
[-2.51243734 100.04191589]
[6.99139023 111.64697266]
[6.98724508 126.64697266]
[-2.52299476 138.24676514]
[-17.23109818 141.19154358]
[-30.47414970 134.14729309]
[-36.25291824 120.30510712]
[-31.94956398 105.93566132]
[-19.51315880 97.54833221]
[-34.15665817 94.29750824]
[-46.45460510 103.95641327]
[-62.08224869 103.39894104]
[-73.66069031 92.88829803]
[-75.72295380 77.38729095]
[-67.29528809 64.21502686]
[-52.35699081 59.59104538]
[-37.96146393 65.69864655]
[-30.90583420 79.65400696]
[-16.26233292 82.90483093]
[-1.42112684 85.08166504]
[13.53912163 86.17298126]
[28.49937057 87.26428986]
[43.45961761 88.35559845]
[58.41986847 89.44691467]
[73.38011932 90.53822327]
[88.58074951 74.15925598]
[110.92542267 73.94661713]
[120.19036865 62.14997864]
[129.45532227 50.35334015]
[138.72026062 38.55669785]
[147.98521423 26.76005936]
[157.25016785 14.96341991]
[166.51512146 3.16677976]
[175.78005981 -8.62985992]
[185.04501343 -20.42650032]
[194.30996704 -32.22314072]
[203.57492065 -44.01977921]
[209.06195068 -57.98017120]
[210.30882263 -72.92825317]
[211.55569458 -87.87634277]
[197.78137207 -94.20436096]
[187.00422668 -104.86405182]
[180.52566528 -118.56820679]
[179.12799072 -133.66198730]
[182.97999573 -148.32275391]
[191.61651611 -160.78013611]
[203.99465942 -169.52984619]
[218.61970520 -173.51530457]
[233.72560120 -172.25526428]
[247.48823547 -165.90188599]
[258.24572754 -155.22235107]
[264.69900513 -141.50627136]
[266.06887817 -126.40993500]
[262.18984985 -111.75630188]
[253.53039551 -99.31485748]
[241.13613892 -90.58797455]
[226.50378418 -86.62947083]
[225.25691223 -71.68138123]
[224.01002502 -56.73329544]
[232.96075439 -68.77009583]
[244.17909241 -78.72745514]
[257.19305420 -86.18645477]
[271.45513916 -90.83329010]
[286.36529541 -92.47245789]
[301.29626465 -91.03499603]
[315.61987305 -86.58137512]
[328.73345947 -79.29897308]
[340.08535767 -69.49417114]
[349.19799805 -57.57946396]
[355.68792725 -44.05612946]
[359.28216553 -29.49311447]
[359.82949829 -14.50310230]
[357.30685425 0.28325221]
[351.82037354 14.24386501]
[343.60092163 26.79139328]
[332.99426270 37.39794159]
[320.44665527 45.61727905]
[306.48599243 51.10360336]
[291.69961548 53.62609482]
[276.70959473 53.07863617]
[262.14660645 49.48425293]
[248.62335205 42.99416733]
[236.70874023 33.88143158]
[226.90405273 22.52942467]
[219.62178040 9.41574764]
[215.16830444 -4.90788889]
[213.73098755 -19.83886719]
[215.37155151 -34.75482941]
[206.10659790 -22.95819092]
[196.84165955 -11.16155052]
[187.57670593 0.63508910]
[178.31175232 12.43172932]
[169.04681396 24.22836876]
[159.78186035 36.02500916]
[150.51690674 47.82164764]
[141.25195312 59.61828995]
[131.98701477 71.41493225]
[122.72206116 83.21157074]
[127.92687225 95.72998047]
[126.70053864 109.23171997]
[119.32545471 120.60752869]
[107.50000000 127.23772430]
[107.50000000 142.23771667]
[107.50000000 157.23771667]
[107.50000000 172.23771667]
[107.50000000 187.23771667]
[107.50000000 202.23771667]
[107.50000000 217.23771667]
[107.50000000 232.23771667]
[107.50000000 247.23771667]
[107.50000000 262.23773193]
[122.03988647 266.29904175]
[134.94427490 274.13354492]
[145.25555420 285.15988159]
[152.20857239 298.55981445]
[155.28736877 313.33895874]
[154.26348877 328.40063477]
[149.21287537 342.62716675]
[140.51036072 354.96282959]
[128.80169678 364.49224854]
[114.95575714 370.50827026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 54]
[26 53]
[27 52]
[28 51]
[29 50]
[30 49]
[38 48]
[39 47]
[56 127]
[57 126]
[58 125]
[59 124]
[60 123]
[61 122]
[62 121]
[63 120]
[64 119]
[65 118]
[66 117]
[67 88]
[68 87]
[69 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
