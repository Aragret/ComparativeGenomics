%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAAACCCUGAGGGGGGGGGGUGAAGGCUACAAAGUAAGCGCAAGUACCCACGUAAAGACGUUAGGUCAAGxxxxxxxxxxCAAACUACCACCUACCUCCCUCACCAAAGCCCAUAAAAAUAAAAAAUUAUCCCCCCCCCCAACAAACCCUGA\
) } def
/len { sequence length } bind def

/coor [
[72.57765198 382.34707642]
[58.41704941 377.19207764]
[45.82730484 368.90985107]
[35.48736572 357.94708252]
[27.95485497 344.89495850]
[23.63599014 330.45736694]
[22.76368141 315.41290283]
[25.38497162 300.57290649]
[31.35849762 286.73767090]
[40.36211777 274.65332031]
[51.91027451 264.97152710]
[65.38018799 258.21447754]
[80.04544830 254.74649048]
[80.04544830 239.74649048]
[80.04544830 224.74649048]
[80.04544830 209.74649048]
[80.04544830 194.74649048]
[80.04544830 179.74649048]
[80.04544830 164.74649048]
[80.04544830 149.74649048]
[80.04544830 134.74649048]
[80.04544830 119.74649048]
[84.21236420 86.43462372]
[79.14560699 72.31626892]
[74.28607941 67.69409943]
[72.76459503 62.14155960]
[74.17227936 57.52181244]
[69.68183136 43.20972443]
[65.19139099 28.89763451]
[60.70093918 14.58554649]
[46.95190048 16.06159401]
[33.17304230 14.95049858]
[19.84677124 11.29283142]
[7.43932724 5.21828604]
[-3.61551046 -3.05891442]
[-12.93159962 -13.24757099]
[-20.18391800 -24.98975563]
[-25.11990738 -37.87338638]
[-27.56825829 -51.44668198]
[-27.44487000 -65.23400879]
[-24.75572395 -78.75256348]
[-19.59662628 -91.52923584]
[-12.14978886 -103.11721802]
[-2.67739916 -113.11159515]
[8.48761368 -121.16351318]
[20.95327950 -126.99234009]
[17.34084320 -141.55085754]
[9.92877769 -154.59161377]
[-0.73143220 -165.14433289]
[-11.39164162 -175.69705200]
[-29.28532410 -179.92745972]
[-33.30844116 -196.98332214]
[-44.18033218 -207.31782532]
[-55.05222321 -217.65232849]
[-65.92411804 -227.98683167]
[-81.98499298 -231.30047607]
[-86.88819122 -246.94946289]
[-75.58972168 -258.83544922]
[-59.71247864 -254.73115540]
[-55.58961105 -238.85871887]
[-44.71772003 -228.52421570]
[-33.84582901 -218.18971252]
[-22.97393608 -207.85520935]
[-10.84059620 -207.83770752]
[-1.69500852 -199.26547241]
[-0.83892083 -186.35726929]
[9.82128906 -175.80453491]
[20.48149872 -165.25181580]
[16.82453156 -179.79920959]
[16.32043076 -194.79074097]
[18.99191093 -209.55093384]
[24.71860123 -223.41473389]
[33.24247742 -235.75747681]
[44.17947388 -246.02305603]
[57.03680801 -253.74891663]
[71.23516846 -258.58697510]
[86.13480377 -260.31921387]
[101.06439972 -258.86758423]
[115.35126495 -254.29753113]
[128.35168457 -246.81494141]
[139.47987366 -236.75694275]
[148.23446655 -224.57675171]
[154.22097778 -210.82313538]
[157.16967773 -196.11582947]
[156.94772339 -181.11746216]
[153.56509399 -166.50384521]
[147.17420959 -152.93341064]
[138.06303406 -141.01760864]
[126.64207458 -131.29331970]
[113.42594147 -124.19870758]
[99.01009369 -120.05341339]
[84.04408264 -119.04422760]
[69.20222473 -121.21661377]
[55.15325165 -126.47268677]
[42.53016663 -134.57563782]
[31.89935493 -145.16329956]
[35.51179123 -130.60478210]
[51.74446869 -131.12730408]
[67.70232391 -128.07275391]
[82.60646057 -121.58733368]
[95.72878265 -111.98475647]
[106.42755890 -99.73110962]
[114.17879486 -85.42219543]
[118.60191345 -69.75460052]
[119.47843933 -53.49174500]
[116.76277924 -37.42672348]
[110.58458710 -22.34358597]
[101.24256897 -8.97911167]
[89.19006348 2.01320481]
[75.01303101 10.09509945]
[79.50347900 24.40718842]
[83.99391937 38.71927643]
[88.48436737 53.03136444]
[93.26395416 67.24950409]
[98.33071899 81.36785889]
[102.98239899 67.10736084]
[116.64835358 60.92337799]
[130.43130493 66.84202576]
[135.35778809 81.00993347]
[128.22041321 94.20302582]
[113.66641998 97.83195496]
[127.39012909 103.88668060]
[141.11384583 109.94140625]
[154.83755493 115.99613190]
[171.07373047 113.68990326]
[180.97471619 126.76287842]
[174.35522461 141.76669312]
[158.02482605 143.26670837]
[148.78283691 129.71984863]
[135.05911255 123.66512299]
[121.33540344 117.61039734]
[107.61169434 111.55567169]
[95.04544830 119.74649048]
[95.04544830 134.74649048]
[95.04544830 149.74649048]
[95.04544830 164.74649048]
[95.04544830 179.74649048]
[95.04544830 194.74649048]
[95.04544830 209.74649048]
[95.04544830 224.74649048]
[95.04544830 239.74649048]
[95.04544830 254.74649048]
[109.71070862 258.21447754]
[123.18062592 264.97152710]
[134.72879028 274.65332031]
[143.73240662 286.73767090]
[149.70593262 300.57290649]
[152.32722473 315.41290283]
[151.45491028 330.45736694]
[147.13604736 344.89495850]
[139.60353088 357.94708252]
[129.26359558 368.90985107]
[116.67385101 377.19207764]
[102.51324463 382.34707642]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 115]
[24 114]
[27 113]
[28 112]
[29 111]
[30 110]
[46 97]
[47 96]
[48 68]
[49 67]
[50 66]
[52 63]
[53 62]
[54 61]
[55 60]
[121 132]
[122 131]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
