%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCAUCUCAACGGGGGGGGGGUUAGUAUUAUACCCACACCCACCCAAGAACAGGGUUUGUUAAGAUGGCAGxxxxxxxxxxAAAAGCUAUUACCUAAAACAAUUUCACAGCACCAAAUCUCCACCUCCAUCCCCCCCCCCCAUCACCUCAAC\
) } def
/len { sequence length } bind def

/coor [
[89.08652496 369.74273682]
[75.06458282 364.18972778]
[62.86462402 355.32339478]
[53.25355148 343.70108032]
[46.83552551 330.05337524]
[44.01398849 315.23818970]
[44.96630478 300.18682861]
[49.63261032 285.84539795]
[57.71957779 273.11544800]
[68.71884918 262.79718018]
[81.93901062 255.53918457]
[96.54902649 251.79776001]
[96.54902649 236.79776001]
[96.54902649 221.79776001]
[96.54902649 206.79776001]
[96.54902649 191.79776001]
[96.54902649 176.79776001]
[96.54902649 161.79776001]
[96.54902649 146.79776001]
[96.54902649 131.79776001]
[96.54902649 116.79775238]
[86.90721130 105.30709076]
[72.13509369 102.70236206]
[57.36297607 100.09764099]
[42.44195938 101.63493347]
[28.51124382 107.19686890]
[14.58052731 112.75881195]
[2.11245465 124.24721527]
[-12.37848663 115.44670868]
[-7.93339777 99.08585358]
[9.01858997 98.82809448]
[22.94930649 93.26615906]
[36.88002396 87.70421600]
[36.80302429 80.20461273]
[36.57202911 57.70579910]
[22.53005219 52.43105698]
[6.89045572 54.82136917]
[-2.30313063 43.10269547]
[-16.34510612 37.82795715]
[-30.38708305 32.55321503]
[-44.42905807 27.27847290]
[-55.81073380 37.51155853]
[-70.64710999 41.27194214]
[-85.52890015 37.69550705]
[-97.03638458 27.60409927]
[-102.52520752 13.31664562]
[-100.73410034 -1.88370025]
[-92.07463074 -14.50401020]
[-78.53668976 -21.64422798]
[-63.23119736 -21.66358566]
[-49.67523575 -14.55763531]
[-40.98387146 -1.95927048]
[-39.15431976 13.23649597]
[-25.11234093 18.51123810]
[-11.07036495 23.78597832]
[2.97161102 29.06072044]
[17.60683250 26.29312515]
[27.80479431 38.38908005]
[41.84677124 43.66382217]
[62.37559128 64.34823608]
[59.96770096 85.32552338]
[74.73981476 87.93025208]
[89.51193237 90.53497314]
[103.98069763 86.57836151]
[115.37177277 76.81908417]
[126.76284790 67.05981445]
[138.15391541 57.30053711]
[149.54499817 47.54126358]
[141.02139282 35.18141174]
[133.83645630 21.99829865]
[128.06892395 8.13636398]
[123.78197479 -6.25251198]
[121.02257538 -21.01067734]
[119.82096863 -35.97643280]
[120.19030762 -50.98580551]
[122.12656403 -65.87434387]
[125.60851288 -80.47892761]
[130.59799194 -94.63953400]
[137.04035950 -108.20101166]
[144.86502075 -121.01477051]
[153.98622131 -132.94042969]
[164.30406189 -143.84730530]
[175.70545959 -153.61590576]
[188.06552124 -162.13920593]
[201.24880981 -169.32382202]
[215.11088562 -175.09101868]
[229.49986267 -179.37762451]
[244.25810242 -182.13667297]
[259.22387695 -183.33790588]
[274.23324585 -182.96820068]
[289.12173462 -181.03158569]
[303.72622681 -177.54928589]
[317.88671875 -172.55944824]
[331.44802856 -166.11676025]
[344.26159668 -158.29179382]
[356.18704224 -149.17028809]
[367.09365845 -138.85220337]
[376.86199951 -127.45055389]
[385.38500977 -115.09028625]
[392.56930542 -101.90682983]
[398.33615112 -88.04461670]
[402.62240601 -73.65553284]
[405.38110352 -58.89723206]
[406.58197021 -43.93141556]
[406.21191406 -28.92206001]
[404.27493286 -14.03361416]
[400.79226685 0.57079679]
[395.80209351 14.73115826]
[389.35906982 28.29232216]
[381.53378296 41.10570526]
[372.41198730 53.03091431]
[362.09362793 63.93729401]
[350.69177246 73.70534515]
[338.33129883 82.22805023]
[325.14764404 89.41201782]
[311.28530884 95.17854309]
[296.89611816 99.46445465]
[282.13775635 102.22277069]
[267.17190552 103.42329407]
[252.16255188 103.05284882]
[237.27415466 101.11551666]
[222.66983032 97.63249969]
[208.50958252 92.64198303]
[194.94857788 86.19863129]
[182.13539124 78.37304688]
[170.21040344 69.25096130]
[159.30427551 58.93233490]
[147.91319275 68.69161224]
[136.52212524 78.45088196]
[125.13105011 88.21015930]
[113.73997498 97.96943665]
[111.54902649 116.79775238]
[111.54902649 131.79776001]
[111.54902649 146.79776001]
[111.54902649 161.79776001]
[111.54902649 176.79776001]
[111.54902649 191.79776001]
[111.54902649 206.79776001]
[111.54902649 221.79776001]
[111.54902649 236.79776001]
[111.54902649 251.79776001]
[126.15903473 255.53918457]
[139.37919617 262.79718018]
[150.37846375 273.11544800]
[158.46543884 285.84539795]
[163.13174438 300.18682861]
[164.08406067 315.23818970]
[161.26252747 330.05337524]
[154.84449768 343.70108032]
[145.23342896 355.32339478]
[133.03346252 364.18972778]
[119.01152039 369.74273682]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 63]
[23 62]
[24 61]
[25 33]
[26 32]
[27 31]
[35 59]
[36 58]
[38 56]
[39 55]
[40 54]
[41 53]
[64 131]
[65 130]
[66 129]
[67 128]
[68 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
