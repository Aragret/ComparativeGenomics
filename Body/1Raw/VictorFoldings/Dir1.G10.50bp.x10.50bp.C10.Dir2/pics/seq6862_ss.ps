%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAAAAGAAGGGGGGGGGGCCAUUUGGAUACAUAGGUAUGGUCUGAGCUAUGAUAUCAAUUGGCUUCCUxxxxxxxxxxCCCCCCACCCUACCACACAUUCGAAGAACCCGUAUACAUAAAAUCUAGACCCCCCCCCCCAAAAAAGGAA\
) } def
/len { sequence length } bind def

/coor [
[274.40921021 321.68197632]
[270.46487427 307.19958496]
[267.81594849 292.42526245]
[266.48315430 277.47463989]
[266.47692871 262.46472168]
[267.79730225 247.51298523]
[270.43395996 232.73646545]
[274.36627197 218.25079346]
[279.56344604 204.16935730]
[285.98483276 190.60235596]
[273.04675293 183.01245117]
[260.10870361 175.42253113]
[247.17065430 167.83262634]
[234.15434265 160.37771606]
[221.06118774 153.05860901]
[207.96803284 145.73950195]
[194.87487793 138.42039490]
[181.78172302 131.10130310]
[168.68856812 123.78218842]
[154.61705017 118.58677673]
[139.90908813 115.64128876]
[125.20112610 112.69580841]
[110.49316406 109.75032806]
[97.18727112 114.04506683]
[86.56135559 104.95763397]
[71.85339355 102.01215363]
[57.14542770 99.06667328]
[48.04987335 100.45327759]
[42.16355896 95.90388489]
[27.52005959 92.65306091]
[12.87655735 89.40223694]
[-1.79996800 86.30391693]
[-16.50792885 83.35842896]
[-31.21589088 80.41294861]
[-45.92385101 77.46746826]
[-60.63181305 74.52198792]
[-75.68264771 79.39876556]
[-86.64279175 69.31291199]
[-97.95930481 79.92969513]
[-113.35910797 81.83377075]
[-126.92067719 74.29297638]
[-133.42930603 60.20690536]
[-130.38227844 44.99193573]
[-118.95126343 34.49853516]
[-103.53170013 32.76163101]
[-90.05274200 40.44909668]
[-83.69730377 54.60494614]
[-69.69848633 49.51748276]
[-57.68633270 59.81402206]
[-42.97837067 62.75950623]
[-28.27040863 65.70498657]
[-13.56244755 68.65046692]
[1.14551449 71.59595490]
[8.36841774 69.81401062]
[16.12738419 74.75873566]
[30.77088547 78.00955963]
[45.41438675 81.26038361]
[60.09091187 84.35871124]
[74.79887390 87.30419159]
[89.50683594 90.24967194]
[102.81272888 85.95493317]
[113.43864441 95.04236603]
[128.14660645 97.98784637]
[142.85456848 100.93332672]
[157.56253052 103.87881470]
[146.83460999 93.39492798]
[140.52641296 79.78586578]
[139.45941162 64.82386780]
[143.77256775 50.45735168]
[152.90420532 38.55721283]
[165.66513062 30.67314148]
[180.39358521 27.83184242]
[195.17152405 30.40332794]
[208.07449341 38.05272293]
[217.42221069 49.78388214]
[221.99736023 64.06912231]
[221.20416260 79.04813385]
[215.14587402 92.77027893]
[204.61148071 103.44858551]
[190.97277832 109.69247437]
[176.00767517 110.68903351]
[189.10083008 118.00814056]
[202.19398499 125.32724762]
[215.28713989 132.64634705]
[228.38029480 139.96545410]
[241.47344971 147.28456116]
[250.55540466 148.75761414]
[254.76055908 154.89457703]
[267.69860840 162.48448181]
[280.63665771 170.07438660]
[293.57473755 177.66429138]
[302.28381348 165.43934631]
[312.03927612 154.03193665]
[322.76473999 143.53138733]
[334.37628174 134.01983643]
[346.78305054 125.57175446]
[359.88787842 118.25325012]
[373.58828735 112.12160492]
[387.77697754 107.22480774]
[402.34292603 103.60118103]
[417.17211914 101.27908325]
[432.14852905 100.27669525]
[447.15493774 100.60186005]
[462.07388306 102.25202942]
[476.78857422 105.21429443]
[491.18389893 109.46546173]
[505.14715576 114.97226715]
[518.56909180 121.69161224]
[531.34460449 129.57090759]
[543.37377930 138.54847717]
[554.56243896 148.55406189]
[564.82299805 159.50935364]
[574.07519531 171.32861328]
[582.24652100 183.91934204]
[589.27313232 197.18299866]
[595.09997559 211.01576233]
[599.68151855 225.30937195]
[602.98181152 239.95196533]
[604.97503662 254.82894897]
[605.64569092 269.82388306]
[604.98840332 284.81939697]
[603.00836182 299.69815063]
[599.72106934 314.34368896]
[595.15228271 328.64135742]
[589.33770752 342.47930908]
[582.32293701 355.74917603]
[574.16271973 368.34716797]
[564.92108154 380.17465210]
[554.67028809 391.13906860]
[543.49053955 401.15460205]
[531.46936035 410.14285278]
[518.70080566 418.03350830]
[505.28485107 424.76477051]
[491.32650757 430.28399658]
[476.93496704 434.54794312]
[462.22290039 437.52328491]
[447.30545044 439.18673706]
[432.29934692 439.52523804]
[417.32205200 438.53616333]
[402.49078369 436.22726440]
[387.92160034 432.61657715]
[373.72857666 427.73239136]
[360.02273560 421.61291504]
[346.91137695 414.30609131]
[334.49713135 405.86901855]
[322.87710571 396.36779785]
[312.14230347 385.87677002]
[302.37673950 374.47805786]
[293.65676880 362.26086426]
[286.05072021 349.32077026]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 91]
[11 90]
[12 89]
[13 88]
[14 86]
[15 85]
[16 84]
[17 83]
[18 82]
[19 81]
[20 65]
[21 64]
[22 63]
[23 62]
[25 60]
[26 59]
[27 58]
[29 57]
[30 56]
[31 55]
[32 53]
[33 52]
[34 51]
[35 50]
[36 49]
[38 47]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
