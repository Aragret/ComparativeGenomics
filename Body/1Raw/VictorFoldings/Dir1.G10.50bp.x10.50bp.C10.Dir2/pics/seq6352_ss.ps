%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAUCUUCGGGGGGGGGGUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUUUGGCAACUGACUAGUUCCxxxxxxxxxxUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGCCCCCCCCCCACUAAUCUUC\
) } def
/len { sequence length } bind def

/coor [
[70.69274902 403.62158203]
[56.84681320 397.60556030]
[45.13814926 388.07614136]
[36.43562698 375.74047852]
[31.38502502 361.51394653]
[30.36113358 346.45227051]
[33.43993378 331.67309570]
[40.39295578 318.27316284]
[50.70423889 307.24685669]
[63.60861969 299.41232300]
[78.14850616 295.35101318]
[78.14850616 280.35101318]
[78.14850616 265.35101318]
[78.14850616 250.35102844]
[78.14850616 235.35102844]
[78.14850616 220.35102844]
[78.14850616 205.35102844]
[78.14850616 190.35102844]
[78.14850616 175.35102844]
[78.14850616 160.35102844]
[69.63950348 172.70402527]
[56.90112305 180.62449646]
[42.05841827 182.79109192]
[27.58748817 178.84240723]
[15.90240383 169.43714905]
[8.95250225 156.14434814]
[7.89718103 141.18151855]
[12.91249275 127.04479980]
[23.16176987 116.09252167]
[36.93520355 110.15177155]
[51.93507767 110.21360016]
[65.65907288 116.26768494]
[75.81771851 127.30406952]
[80.71614838 141.48023987]
[84.72389221 127.02555084]
[73.74819183 116.57052612]
[69.03141022 102.16477966]
[71.69812012 87.24290466]
[81.11252594 75.36256409]
[95.03005981 69.35624695]
[96.27693176 54.40816498]
[89.71355438 40.01258850]
[98.48202515 27.97252655]
[99.72890472 13.02443981]
[100.97577667 -1.92364681]
[94.41239166 -16.31922150]
[103.18087006 -28.35928345]
[104.42774200 -43.30736923]
[105.67462158 -58.25545883]
[103.25855255 -67.13320923]
[107.10609436 -73.50047302]
[108.66368103 -88.41938019]
[108.35162354 -103.41613770]
[106.17478180 -118.25733948]
[103.99794769 -133.09854126]
[101.82111359 -147.93975830]
[96.77235413 -162.06455994]
[89.04827118 -174.92295837]
[81.32418823 -187.78135681]
[73.60009766 -200.63977051]
[59.00343323 -208.11434937]
[58.44862366 -224.50410461]
[72.50640869 -232.94866943]
[86.71535492 -224.76098633]
[86.45850372 -208.36384583]
[94.18258667 -195.50544739]
[101.90666962 -182.64704895]
[109.63076019 -169.78863525]
[109.76146698 -184.78807068]
[114.22796631 -199.10765076]
[122.64788818 -211.52156067]
[134.30044556 -220.96707153]
[148.18811035 -226.63563538]
[163.12203979 -228.04196167]
[177.82380676 -225.06568909]
[191.03485107 -217.96157837]
[201.62423706 -207.33778381]
[208.68545532 -194.10377502]
[211.61404419 -179.39244080]
[210.15928650 -164.46315002]
[204.44572449 -150.59393311]
[194.96244812 -138.97207642]
[182.52131653 -130.59245300]
[168.18731689 -126.17242432]
[153.18754578 -126.09036255]
[138.80604553 -130.35328674]
[126.27395630 -138.59626770]
[116.66231537 -150.11659241]
[118.83915710 -135.27539062]
[121.01599121 -120.43418121]
[123.19282532 -105.59297180]
[130.06813049 -118.92452240]
[141.97410583 -128.04853821]
[156.63481140 -131.22088623]
[171.24769592 -127.83512878]
[183.01939392 -118.53849792]
[189.69958496 -105.10812378]
[190.01132202 -90.11135864]
[183.89498901 -76.41499329]
[172.51980591 -66.63720703]
[158.06022644 -62.64713669]
[143.28036499 -65.20751190]
[131.00552368 -73.82889557]
[123.58258820 -86.86180115]
[122.02500916 -71.94288635]
[120.62270355 -57.00858307]
[119.37583160 -42.06049728]
[118.12895966 -27.11240768]
[124.78152466 -13.78602123]
[115.92386627 -0.67677224]
[114.67698669 14.27131462]
[113.43011475 29.21940231]
[120.08267975 42.54578781]
[111.22502136 55.65503693]
[109.97814941 70.60312653]
[122.02419281 78.12136841]
[129.46238708 90.21700287]
[130.73654175 104.35940552]
[144.63909912 109.99136353]
[158.54165649 115.62332153]
[174.69966125 112.82136536]
[184.99603271 125.58525085]
[178.83874512 140.78459167]
[162.56188965 142.78359985]
[152.90969849 129.52587891]
[139.00714111 123.89392090]
[125.10459137 118.26196289]
[113.71840668 127.84860992]
[99.17858124 131.03329468]
[95.17083740 145.48797607]
[93.14850616 160.35102844]
[93.14850616 175.35102844]
[93.14850616 190.35102844]
[93.14850616 205.35102844]
[93.14850616 220.35102844]
[93.14850616 235.35102844]
[93.14850616 250.35102844]
[93.14850616 265.35101318]
[93.14850616 280.35101318]
[93.14850616 295.35101318]
[107.68839264 299.41232300]
[120.59277344 307.24685669]
[130.90405273 318.27316284]
[137.85708618 331.67309570]
[140.93588257 346.45227051]
[139.91198730 361.51394653]
[134.86138916 375.74047852]
[126.15885925 388.07614136]
[114.45020294 397.60556030]
[100.60426331 403.62158203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[34 130]
[35 129]
[40 115]
[41 114]
[43 112]
[44 111]
[45 110]
[47 108]
[48 107]
[49 106]
[51 105]
[52 104]
[53 91]
[54 90]
[55 89]
[56 88]
[57 68]
[58 67]
[59 66]
[60 65]
[118 127]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
