%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAAAUACUGGGGGGGGGGACCGUAUGGCCCACCAUAAUUACCCCCAUACUCCUUACACUAUUCCUCAUxxxxxxxxxxUAUACUUCACAACAAUCCUAAUCCUAAUACCAACUAUCUCCCUAAUUGAACCCCCCCCCCAACAAAAUACU\
) } def
/len { sequence length } bind def

/coor [
[107.18128967 418.03521729]
[93.15934753 412.48220825]
[80.95938873 403.61587524]
[71.34832001 391.99356079]
[64.93029785 378.34585571]
[62.10875702 363.53067017]
[63.06107330 348.47930908]
[67.72737885 334.13787842]
[75.81434631 321.40792847]
[86.81362152 311.08966064]
[100.03377533 303.83166504]
[114.64379120 300.09024048]
[114.64379120 285.09024048]
[114.64379120 270.09024048]
[114.64379120 255.09024048]
[114.64379120 240.09024048]
[114.64379120 225.09024048]
[114.64379120 210.09024048]
[114.64379120 195.09024048]
[114.64379120 180.09024048]
[114.64379120 165.09024048]
[103.96292114 154.77255249]
[103.74923706 139.56042480]
[114.64379120 128.42729187]
[108.75272369 123.78560638]
[96.97058868 114.50222015]
[91.07951355 109.86052704]
[76.49576569 113.36969757]
[61.91201782 116.87886047]
[47.32826996 120.38803101]
[35.81767654 132.06871033]
[20.01688766 127.67928314]
[16.18039703 111.73521423]
[28.25485992 100.63838959]
[43.81910324 105.80428314]
[58.40285110 102.29511261]
[72.98660278 98.78594208]
[87.57035065 95.27677917]
[98.44566345 84.94587708]
[102.69850922 70.56139374]
[106.95135498 56.17691422]
[111.20420074 41.79243088]
[115.45705414 27.40795135]
[101.43329620 22.06407928]
[87.85975647 15.66237068]
[74.81610107 8.24039650]
[62.37886047 -0.15828776]
[50.62103653 -9.48439503]
[39.61162186 -19.68319702]
[29.41522598 -30.69483948]
[20.09168816 -42.45470047]
[11.69572067 -54.89377213]
[4.27659702 -67.93905640]
[-2.12214494 -81.51399231]
[-7.46295404 -95.53890991]
[-11.71448803 -109.93152618]
[-14.85179615 -124.60735321]
[-16.85646820 -139.48028564]
[-17.71673965 -154.46302795]
[-17.42756271 -169.46766663]
[-15.99063301 -184.40614319]
[-13.41438389 -199.19078064]
[-9.71393394 -213.73483276]
[-4.91099882 -227.95294189]
[0.96623528 -241.76167297]
[7.88327837 -255.07997131]
[15.79953766 -267.82971191]
[24.66855621 -279.93603516]
[34.43828964 -291.32791138]
[45.05139923 -301.93850708]
[56.44560623 -311.70553589]
[68.55403900 -320.57168579]
[81.30564880 -328.48492432]
[94.62559509 -335.39880371]
[108.43571472 -341.27273560]
[122.65496826 -346.07229614]
[137.19989014 -349.76931763]
[151.98515320 -352.34204102]
[166.92396545 -353.77542114]
[181.92866516 -354.06103516]
[196.91120911 -353.19720459]
[211.78366089 -351.18899536]
[226.45875549 -348.04821777]
[240.85034180 -343.79327393]
[254.87400818 -338.44912720]
[268.44741821 -332.04714966]
[281.49093628 -324.62493896]
[293.92800903 -316.22601318]
[305.68566895 -306.89968872]
[316.69488525 -296.70068359]
[326.89108276 -285.68884277]
[336.21438599 -273.92880249]
[344.61010742 -261.48956299]
[352.02899170 -248.44415283]
[358.42749023 -234.86909485]
[363.76803589 -220.84407043]
[368.01928711 -206.45137024]
[371.15631104 -191.77548218]
[373.16070557 -176.90251160]
[374.02069092 -161.91975403]
[373.73123169 -146.91511536]
[372.29400635 -131.97666931]
[369.71749878 -117.19207764]
[366.01675415 -102.64810181]
[361.21356201 -88.43008423]
[355.33605957 -74.62146759]
[348.41876221 -61.30329514]
[340.50225830 -48.55371857]
[331.63302612 -36.44755554]
[321.86306763 -25.05585289]
[311.24975586 -14.44546223]
[299.85537720 -4.67865276]
[287.74676514 4.18726206]
[274.99499512 12.10025120]
[261.67492676 19.01387978]
[247.86468506 24.88757324]
[233.64535522 29.68686104]
[219.10035706 33.38358307]
[204.31504822 35.95603943]
[189.37620544 37.38914108]
[174.37150574 37.67446899]
[159.38897705 36.81035614]
[144.51655579 34.80186844]
[129.84153748 31.66079903]
[125.58868408 46.04528046]
[121.33583832 60.42975998]
[117.08299255 74.81423950]
[112.83014679 89.19872284]
[129.64379883 128.42729187]
[140.53834534 139.56042480]
[140.32466125 154.77255249]
[129.64379883 165.09024048]
[129.64379883 180.09024048]
[129.64379883 195.09024048]
[129.64379883 210.09024048]
[129.64379883 225.09024048]
[129.64379883 240.09024048]
[129.64379883 255.09024048]
[129.64379883 270.09024048]
[129.64379883 285.09024048]
[129.64379883 300.09024048]
[144.25379944 303.83166504]
[157.47396851 311.08966064]
[168.47323608 321.40792847]
[176.56021118 334.13787842]
[181.22651672 348.47930908]
[182.17881775 363.53067017]
[179.35728455 378.34585571]
[172.93927002 391.99356079]
[163.32818604 403.61587524]
[151.12823486 412.48220825]
[137.10629272 418.03521729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 129]
[27 38]
[28 37]
[29 36]
[30 35]
[39 128]
[40 127]
[41 126]
[42 125]
[43 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
