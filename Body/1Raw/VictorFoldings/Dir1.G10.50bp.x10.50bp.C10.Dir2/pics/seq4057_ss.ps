%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUUCUUCAGGGGGGGGGGUAGCCGAAUACACAAACAUUAUUAUAAUAAACACCCUCACCACUACAAUCxxxxxxxxxxCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUACGGCGGACCCCCCCCCCCUAAUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[75.67222595 458.05752563]
[61.82629013 452.04150391]
[50.11763000 442.51208496]
[41.41510391 430.17642212]
[36.36450195 415.94989014]
[35.34061050 400.88821411]
[38.41941071 386.10906982]
[45.37243271 372.70913696]
[55.68371582 361.68280029]
[68.58809662 353.84829712]
[83.12798309 349.78698730]
[83.12798309 334.78698730]
[83.12798309 319.78698730]
[83.12798309 304.78698730]
[83.12798309 289.78698730]
[83.12798309 274.78698730]
[83.12798309 259.78698730]
[83.12798309 244.78697205]
[83.12798309 229.78697205]
[83.12798309 214.78697205]
[83.12798309 199.78697205]
[80.39761353 195.79692078]
[80.18910980 190.03602600]
[83.45302582 184.16624451]
[84.07700348 169.17922974]
[84.70098114 154.19221497]
[70.52998352 159.10983276]
[55.54903030 158.35418701]
[41.94479752 152.03556824]
[31.70301628 141.07629395]
[26.31861877 127.07599640]
[26.57753563 112.07823181]
[32.44197464 98.27213287]
[43.05593491 87.67289734]
[56.87016296 81.82762909]
[71.86827087 81.58953857]
[85.85890961 86.99200439]
[80.37187958 73.03161621]
[74.88484955 59.07122421]
[69.39781189 45.11083221]
[54.87842178 48.94538879]
[40.01203537 51.06837845]
[24.99970627 51.45109558]
[10.04445744 50.08835983]
[-4.65145779 46.99860764]
[-18.88929558 42.22361755]
[-32.47650146 35.82797241]
[-45.22932816 27.89815712]
[-56.97530746 18.54142189]
[-67.55558777 7.88430214]
[-76.82707977 -3.92907691]
[-84.66440582 -16.73895264]
[-90.96156311 -30.37208366]
[-95.63339996 -44.64410019]
[-98.61672974 -59.36199188]
[-99.87120819 -74.32671356]
[-99.37986755 -89.33587646]
[-97.14935303 -104.18650818]
[-93.20983124 -118.67777252]
[-87.61458588 -132.61369324]
[-80.43927765 -145.80578613]
[-71.78094482 -158.07566833]
[-61.75668335 -169.25737000]
[-50.50205994 -179.19970703]
[-38.16928101 -187.76820374]
[-24.92513466 -194.84698486]
[-10.94872952 -200.34030151]
[3.57091784 -204.17388916]
[18.43744469 -206.29588318]
[33.44980240 -206.67759705]
[48.40496063 -205.31387329]
[63.10066986 -202.22314453]
[77.33818817 -197.44720459]
[90.92496490 -191.05064392]
[103.67726898 -183.11997986]
[115.42262268 -173.76246643]
[126.00218964 -163.10462952]
[135.27288818 -151.29063416]
[143.10935974 -138.48023987]
[149.40560913 -124.84668732]
[154.07649231 -110.57435608]
[157.05883789 -95.85626984]
[158.31231689 -80.89146423]
[157.81997681 -65.88233185]
[155.58847046 -51.03184509]
[151.64799500 -36.54084396]
[146.05180359 -22.60530472]
[138.87562561 -9.41368484]
[130.21646118 2.85561132]
[120.19145966 14.03665543]
[108.93617249 23.97823715]
[96.60282135 32.54590988]
[83.35820770 39.62380219]
[88.84523773 53.58419037]
[94.33226776 67.54457855]
[99.81929779 81.50497437]
[113.34349060 87.99313354]
[127.66608429 83.53632355]
[141.98867798 79.07950592]
[156.31127930 74.62268829]
[170.63388062 70.16587067]
[174.64253235 55.26841736]
[186.08435059 44.92005920]
[201.30827332 42.42292023]
[215.45640564 48.57383347]
[224.01414490 61.41006088]
[224.25073242 76.83560944]
[216.09066772 89.92824554]
[202.13781738 96.51015472]
[186.84448242 94.48107147]
[175.09069824 84.48847198]
[160.76809692 88.94528961]
[146.44549561 93.40209961]
[132.12289429 97.85891724]
[117.80030060 102.31573486]
[117.64427948 109.81410980]
[117.17619324 132.30923462]
[131.30099487 137.35800171]
[145.42579651 142.40675354]
[161.45326233 138.93507385]
[172.27166748 151.25959778]
[166.75198364 166.70191956]
[150.57237244 169.37628174]
[140.37704468 156.53155518]
[126.25223541 151.48280334]
[112.12743378 146.43405151]
[99.68799591 154.81619263]
[99.06401825 169.80320740]
[98.44004059 184.79022217]
[98.12798309 199.78697205]
[98.12798309 214.78697205]
[98.12798309 229.78697205]
[98.12798309 244.78697205]
[98.12798309 259.78698730]
[98.12798309 274.78698730]
[98.12798309 289.78698730]
[98.12798309 304.78698730]
[98.12798309 319.78698730]
[98.12798309 334.78698730]
[98.12798309 349.78698730]
[112.66786957 353.84829712]
[125.57225037 361.68280029]
[135.88352966 372.70913696]
[142.83656311 386.10906982]
[145.91535950 400.88821411]
[144.89146423 415.94989014]
[139.84086609 430.17642212]
[131.13833618 442.51208496]
[119.42967987 452.04150391]
[105.58374023 458.05752563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[26 127]
[37 96]
[38 95]
[39 94]
[40 93]
[97 115]
[98 114]
[99 113]
[100 112]
[101 111]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
