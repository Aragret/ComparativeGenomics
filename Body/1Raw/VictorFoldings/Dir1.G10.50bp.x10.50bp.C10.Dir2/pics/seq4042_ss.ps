%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCAACAUCGGGGGGGGGGGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAAxxxxxxxxxxUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCAAAACCAUACCUCUCACCCCCCCCCCCUUCAACCUC\
) } def
/len { sequence length } bind def

/coor [
[76.77677917 373.01168823]
[62.93084335 366.99566650]
[51.22217941 357.46624756]
[42.51965714 345.13058472]
[37.46905518 330.90405273]
[36.44516373 315.84237671]
[39.52396011 301.06320190]
[46.47698212 287.66329956]
[56.78826904 276.63696289]
[69.69264984 268.80245972]
[84.23253632 264.74111938]
[84.23253632 249.74113464]
[84.23253632 234.74113464]
[84.23253632 219.74113464]
[84.23253632 204.74113464]
[84.23253632 189.74113464]
[84.23253632 174.74113464]
[84.23253632 159.74113464]
[84.23253632 144.74113464]
[84.23253632 129.74113464]
[72.24570465 120.72360229]
[57.83348846 124.88149261]
[43.42127228 129.03938293]
[38.05255508 143.47831726]
[25.35953331 151.88906860]
[10.32565498 151.22084045]
[-1.29290605 141.93930054]
[-15.70512199 146.09719849]
[-30.11733818 150.25508118]
[-43.65980530 160.45497131]
[-57.21001434 150.26536560]
[-51.16969299 134.42393494]
[-34.27522659 135.84286499]
[-19.86301041 131.68498230]
[-5.45079327 127.52709198]
[-0.56158870 113.48310089]
[11.80607986 104.90960693]
[27.02862358 105.26677704]
[39.26338196 114.62715912]
[53.67559814 110.46927643]
[68.08781433 106.31138611]
[74.67604065 91.12174225]
[86.36268616 83.84683228]
[97.40686798 84.77434540]
[96.47123718 69.80355835]
[95.53560638 54.83276367]
[94.59998322 39.86197281]
[93.66435242 24.89118004]
[92.72872162 9.92038918]
[85.68358612 -3.32219625]
[73.79120636 -12.46393013]
[57.47198105 -14.08097458]
[50.96021652 -29.13185310]
[60.95465851 -42.13351440]
[77.17388153 -39.71096039]
[82.93294525 -24.35630989]
[94.82532501 -15.21457577]
[101.46733856 -24.81698227]
[111.09200287 -29.03141975]
[112.02762604 -44.00221252]
[112.96325684 -58.97300339]
[113.89888763 -73.94379425]
[114.83451080 -88.91458893]
[115.77014160 -103.88537598]
[101.34975433 -108.26134491]
[88.32754517 -115.84545135]
[77.40577698 -126.22869873]
[69.17345428 -138.85112000]
[64.07453156 -153.03201294]
[62.38399506 -168.00662231]
[64.19300842 -182.96737671]
[69.40401459 -197.10746765]
[77.73598480 -209.66433716]
[88.73959351 -219.96080017]
[101.82142639 -227.44160461]
[116.27600098 -231.70329285]
[131.32379150 -232.51605225]
[146.15330505 -229.83605957]
[159.96479797 -223.80781555]
[172.01341248 -214.75645447]
[181.64941406 -203.17005920]
[188.35313416 -189.67350769]
[191.76303101 -174.99464417]
[191.69523621 -159.92506409]
[188.15341187 -145.27746582]
[181.32853699 -131.84178162]
[171.58868408 -120.34255219]
[159.45912170 -111.39994812]
[145.59394836 -105.49622345]
[130.74093628 -102.94974518]
[129.80531311 -87.97895813]
[128.86967468 -73.00816345]
[127.93405151 -58.03737259]
[126.99842072 -43.06658173]
[126.06278992 -28.09579086]
[136.13255310 -17.80114365]
[136.05168152 -2.54472876]
[124.66822052 8.85874271]
[107.69951630 8.98476124]
[108.63514709 23.95555305]
[109.57077026 38.92634583]
[110.50640106 53.89713669]
[111.44203186 68.86792755]
[112.37765503 83.83872223]
[122.81746674 94.60952759]
[137.75177002 96.01183319]
[152.68608093 97.41413116]
[159.15704346 83.70638275]
[169.92826843 73.04071045]
[183.69908142 66.70505524]
[198.80657959 65.46446991]
[213.42648315 69.46876526]
[225.79335022 78.23441315]
[234.41381836 90.70290375]
[238.24693298 105.36861420]
[236.82981873 120.46058655]
[230.33361816 134.15638733]
[219.54275513 144.80218506]
[205.76029968 151.11245728]
[190.65052795 152.32519531]
[176.03802490 148.29396057]
[163.68734741 139.50555420]
[155.08985901 127.02118683]
[151.28378296 112.34844208]
[136.34947205 110.94613647]
[121.41516876 109.54383850]
[115.86950684 114.59316254]
[125.96798706 125.68463135]
[114.87635803 135.78294373]
[104.77819061 124.69181061]
[99.23253632 129.74113464]
[99.23253632 144.74113464]
[99.23253632 159.74113464]
[99.23253632 174.74113464]
[99.23253632 189.74113464]
[99.23253632 204.74113464]
[99.23253632 219.74113464]
[99.23253632 234.74113464]
[99.23253632 249.74113464]
[99.23253632 264.74111938]
[113.77242279 268.80245972]
[126.67680359 276.63696289]
[136.98808289 287.66329956]
[143.94111633 301.06320190]
[147.01991272 315.84237671]
[145.99601746 330.90405273]
[140.94541931 345.13058472]
[132.24288940 357.46624756]
[120.53422546 366.99566650]
[106.68829346 373.01168823]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 41]
[22 40]
[23 39]
[27 35]
[28 34]
[29 33]
[44 104]
[45 103]
[46 102]
[47 101]
[48 100]
[49 99]
[50 57]
[51 56]
[59 95]
[60 94]
[61 93]
[62 92]
[63 91]
[64 90]
[105 126]
[106 125]
[107 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
