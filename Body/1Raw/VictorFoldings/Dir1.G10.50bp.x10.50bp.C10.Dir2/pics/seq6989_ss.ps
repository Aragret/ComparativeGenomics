%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUUUUCACCGGGGGGGGGGGUAGGUGGCCUGACUGGCAUUGUAUUAGCAAACUCAUCACUAGACAUCGUxxxxxxxxxxUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACUCGAAUAACCCCCCCCCCUUCUUCUCACC\
) } def
/len { sequence length } bind def

/coor [
[102.68650818 475.56243896]
[88.12664795 471.65423584]
[74.92550659 464.37460327]
[63.85057068 454.14672852]
[55.54573441 441.56527710]
[50.49382019 427.36169434]
[48.98854446 412.36175537]
[51.11742020 397.43759155]
[56.75667953 383.45681763]
[65.57846069 371.23223877]
[77.06987762 361.47463989]
[90.56283569 354.75131226]
[105.27287292 351.45306396]
[105.58084869 336.45623779]
[105.88883209 321.45941162]
[106.19680786 306.46255493]
[106.50478363 291.46572876]
[106.81275940 276.46887207]
[107.12074280 261.47204590]
[107.42871857 246.47520447]
[107.73669434 231.47836304]
[108.04467010 216.48153687]
[108.35265350 201.48469543]
[106.50932312 186.59838867]
[102.55271912 172.12962341]
[98.59610748 157.66085815]
[94.63949585 143.19207764]
[90.68288422 128.72331238]
[78.01136780 120.69631958]
[63.23925400 123.30104065]
[48.46713638 125.90576172]
[38.12441635 138.16984558]
[22.09198761 137.58609009]
[12.66855621 124.60231781]
[17.08297157 109.17855835]
[31.94887352 103.14659882]
[45.86241531 111.13364410]
[60.63452911 108.52892303]
[75.40664673 105.92420197]
[80.28240967 90.86460114]
[91.82707977 83.77713776]
[91.21125031 68.78978729]
[90.59542847 53.80243301]
[89.97960663 38.81507874]
[74.99182129 37.95880508]
[60.16014481 35.63757324]
[45.62740707 31.87374496]
[31.53357887 26.70356560]
[18.01438904 20.17682838]
[5.20003986 12.35639095]
[-6.78605652 3.31757021]
[-17.82846451 -6.85258341]
[-27.82083702 -18.05612183]
[-36.66693878 -30.18514824]
[-44.28157806 -43.12284851]
[-50.59141541 -56.74462128]
[-55.53568268 -70.91928101]
[-59.06676483 -85.51031494]
[-61.15065384 -100.37719727]
[-61.76728058 -115.37675476]
[-60.91070938 -130.36451721]
[-58.58918381 -145.19615173]
[-54.82506180 -159.72880554]
[-49.65460205 -173.82254028]
[-43.12759399 -187.34159851]
[-35.30690002 -200.15579224]
[-26.26783943 -212.14170837]
[-16.09746552 -223.18389893]
[-4.89372635 -233.17605591]
[7.23547649 -242.02191162]
[20.17332840 -249.63629150]
[33.79523087 -255.94586182]
[47.96998978 -260.88983154]
[62.56109238 -264.42062378]
[77.42801666 -266.50421143]
[92.42758179 -267.12054443]
[107.41532898 -266.26367188]
[122.24691772 -263.94186401]
[136.77949524 -260.17745972]
[150.87312317 -255.00669861]
[164.39204407 -248.47943115]
[177.20608521 -240.65847778]
[189.19181824 -231.61917114]
[200.23382568 -221.44857788]
[210.22575378 -210.24464417]
[219.07136536 -198.11526489]
[226.68548584 -185.17726135]
[232.99478149 -171.55523682]
[237.93847656 -157.38037109]
[241.46897888 -142.78919983]
[243.55227661 -127.92223358]
[244.16830444 -112.92265320]
[243.31112671 -97.93492126]
[240.98901367 -83.10338593]
[237.22430420 -68.57087708]
[232.05328369 -54.47735596]
[225.52572632 -40.95855713]
[217.70452881 -28.14467812]
[208.66499329 -16.15912437]
[198.49417114 -5.11732721]
[187.29003906 4.87437296]
[175.16047668 13.71974754]
[162.22232056 21.33360863]
[148.60015869 27.64262962]
[134.42520142 32.58604813]
[119.83396149 36.11625290]
[104.96695709 38.19925308]
[105.58277893 53.18660736]
[106.19860840 68.17395782]
[106.81443024 83.16131592]
[121.64363098 101.94730377]
[105.15164948 124.76670837]
[109.10826111 139.23547363]
[113.06487274 153.70423889]
[117.02148438 168.17300415]
[120.97809601 182.64176941]
[125.67868042 168.39732361]
[135.39241028 156.96739197]
[148.69233704 150.03108215]
[163.62461853 148.60737610]
[177.99565125 152.90541077]
[189.69430542 162.29377747]
[197.00199890 175.39331055]
[198.84518433 190.27963257]
[194.95310974 204.76589966]
[185.89753723 216.72401428]
[173.00874329 224.39729309]
[158.18016052 226.65850830]
[143.59014893 223.17546082]
[131.38203430 214.45985413]
[123.34948730 201.79267883]
[123.04151154 216.78950500]
[122.73353577 231.78634644]
[122.42555237 246.78318787]
[122.11757660 261.78002930]
[121.80960083 276.77685547]
[121.50162506 291.77371216]
[121.19364166 306.77053833]
[120.88566589 321.76736450]
[120.57769012 336.76422119]
[120.26971436 351.76104736]
[134.83193970 355.66043091]
[148.03749084 362.93206787]
[159.11862183 373.15319824]
[167.43109131 385.72964478]
[172.49160767 399.93014526]
[174.00598145 414.92913818]
[171.88615417 429.85461426]
[166.25537109 443.83880615]
[157.44099426 456.06872559]
[145.95550537 465.83328247]
[132.46661377 472.56481934]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 131]
[24 116]
[25 115]
[26 114]
[27 113]
[28 112]
[29 39]
[30 38]
[31 37]
[41 110]
[42 109]
[43 108]
[44 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
