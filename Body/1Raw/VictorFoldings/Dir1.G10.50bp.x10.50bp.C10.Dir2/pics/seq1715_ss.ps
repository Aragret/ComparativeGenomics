%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGUAUACUUCAAAGGGGGGGGGGGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAGGAGACAAGUCGUAxxxxxxxxxxGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUCCCCCCCCCCACUAUACUUCACA\
) } def
/len { sequence length } bind def

/coor [
[107.35800171 431.17205811]
[92.45543671 429.05108643]
[78.28499603 423.97332764]
[65.42695618 416.14675903]
[54.40782928 405.89181519]
[45.67885208 393.62844849]
[39.59746933 379.85885620]
[36.41271210 365.14688110]
[36.25498962 350.09497070]
[39.13076401 335.31948853]
[44.92227173 321.42550659]
[53.39235306 308.98193359]
[64.19416809 298.49832153]
[76.88539124 290.40402222]
[90.94631195 285.03045654]
[105.80115509 282.59765625]
[106.40129852 267.60968018]
[107.00144196 252.62167358]
[107.60159302 237.63368225]
[108.20173645 222.64569092]
[108.80187988 207.65771484]
[109.40202332 192.66972351]
[110.00216675 177.68173218]
[110.60231018 162.69374084]
[111.20245361 147.70574951]
[111.80259705 132.71775818]
[112.40274048 117.72977448]
[99.18148041 127.91564178]
[78.77673340 126.84107208]
[64.10660553 129.96952820]
[49.43647385 133.09799194]
[39.53648376 145.72216797]
[23.49343491 145.70899963]
[13.61418343 133.06858826]
[17.47724342 117.49758148]
[32.11920547 110.94071960]
[46.30801392 118.42786407]
[60.97814178 115.29940796]
[75.64826965 112.17094421]
[76.54656982 104.72493744]
[64.54780579 95.72328186]
[78.34315491 89.83291626]
[79.24145508 82.38690186]
[65.73623657 75.85933685]
[52.23101807 69.33177185]
[39.57382965 78.03183746]
[24.26109886 79.22172546]
[10.41187191 72.58135986]
[1.75152159 59.89696503]
[0.60963857 44.58057785]
[7.29338360 30.75223160]
[20.00486374 22.13168335]
[35.32475281 21.03781509]
[49.13208008 27.76487350]
[57.71274185 40.50331116]
[58.75858307 55.82655334]
[72.26380157 62.35412216]
[85.76902008 68.88168335]
[112.17095947 74.86395264]
[121.01707458 94.85650635]
[130.45298767 83.19617462]
[139.88890076 71.53583527]
[134.41546631 63.79751587]
[131.76202393 54.11453629]
[132.60539246 43.54571152]
[137.21757507 33.37717056]
[145.39335632 24.96658707]
[156.43760681 19.56607437]
[155.83746338 4.57808542]
[155.23731995 -10.40990448]
[140.95994568 -15.62765121]
[129.76948547 -25.91561699]
[123.37242889 -39.70496368]
[122.74427032 -54.89291382]
[127.98078918 -69.16341400]
[138.28347778 -80.34032440]
[152.08122253 -86.71923828]
[167.26998901 -87.32742310]
[181.53358459 -82.07212830]
[192.69692993 -71.75476074]
[199.05769348 -57.94863129]
[199.64588928 -42.75907898]
[194.37184143 -28.50240326]
[184.03979492 -17.35264015]
[170.22531128 -11.01004791]
[170.82545471 3.97794104]
[171.42559814 18.96593094]
[177.39472961 23.50679588]
[184.05368042 10.06587410]
[185.62150574 -4.85196447]
[197.83404541 -13.56137371]
[212.44895935 -10.18429375]
[219.60247803 3.00005221]
[214.46665955 17.09343147]
[200.50944519 22.58418083]
[189.33299255 32.58852768]
[195.30212402 37.12939453]
[209.90672302 33.70803070]
[224.51132202 30.28666306]
[239.11592102 26.86529541]
[253.72052002 23.44392967]
[257.60314941 19.78922081]
[262.05889893 18.18854332]
[266.19464111 18.51062012]
[269.30355835 20.28344154]
[284.08712769 17.74443245]
[293.21551514 5.12261105]
[308.24429321 2.75829124]
[320.22100830 11.53859425]
[335.00457764 8.99958420]
[349.78811646 6.46057415]
[362.04452515 -4.43495798]
[377.52117920 0.98772931]
[380.29699707 17.15023994]
[367.51651001 27.42596817]
[352.32714844 21.24412727]
[337.54357910 23.78313637]
[322.76004028 26.32214737]
[314.39913940 38.59534073]
[299.44268799 41.38085556]
[286.62612915 32.52798462]
[271.84259033 35.06699371]
[257.14187622 38.04852676]
[242.53727722 41.46989059]
[227.93269348 44.89125824]
[213.32809448 48.31262589]
[198.72349548 51.73399353]
[181.21684265 81.69076538]
[151.54924011 80.97175598]
[142.11332703 92.63208771]
[132.67741394 104.29242706]
[127.39073181 118.32991791]
[126.79058838 133.31790161]
[126.19044495 148.30589294]
[125.59030151 163.29388428]
[124.99015808 178.28187561]
[124.39001465 193.26986694]
[123.78986359 208.25785828]
[123.18972015 223.24583435]
[122.58957672 238.23382568]
[121.98943329 253.22181702]
[121.38928986 268.20980835]
[120.78914642 283.19778442]
[135.40191650 286.81051636]
[148.98818970 293.29113770]
[160.99159241 302.37426758]
[170.92060852 313.68795776]
[178.36863708 326.76892090]
[183.03071594 341.08148193]
[184.71589661 356.03961182]
[183.35520935 371.03070068]
[179.00434875 385.44094849]
[171.84149170 398.68020630]
[162.15994263 410.20639038]
[150.35615540 419.54745483]
[136.91349792 426.32092285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[25 134]
[26 133]
[27 132]
[29 39]
[30 38]
[31 37]
[43 58]
[44 57]
[45 56]
[60 131]
[61 130]
[62 129]
[68 87]
[69 86]
[70 85]
[97 127]
[98 126]
[99 125]
[100 124]
[101 123]
[105 122]
[106 121]
[109 118]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
