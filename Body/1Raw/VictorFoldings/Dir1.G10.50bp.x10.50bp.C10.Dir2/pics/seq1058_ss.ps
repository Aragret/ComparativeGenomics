%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCCUAGCCGGGGGGGGGGACACCCCCACGGGAAACAGCAGUGAUUAACCUUUAGCAAUAAACGAAAGUxxxxxxxxxxAACCCCCUGGUCAACCUCAACCUAGGCCUCCUAUUUAUUCUAGCCACCUCCCCCCCCCCCUAGCCUAGCC\
) } def
/len { sequence length } bind def

/coor [
[13.74616432 596.27655029]
[0.52596778 589.00402832]
[-10.36083603 578.55706787]
[-18.17196655 565.64782715]
[-22.37484741 551.15649414]
[-22.68292046 536.07116699]
[-19.07517815 521.42034912]
[-11.79760647 508.20294189]
[-1.34639823 497.32015991]
[11.56586361 489.51400757]
[26.05879974 485.31674194]
[25.74674416 470.31997681]
[25.43468666 455.32324219]
[25.12263107 440.32647705]
[24.81057549 425.32971191]
[24.49851799 410.33297729]
[24.18646240 395.33621216]
[23.87440681 380.33944702]
[23.56234932 365.34271240]
[23.25029373 350.34594727]
[22.93823814 335.34921265]
[12.87759113 332.12854004]
[4.05632305 326.31695557]
[-2.87347627 318.34405518]
[-16.77603149 323.97601318]
[-30.67858887 329.60797119]
[-40.33078003 342.86569214]
[-56.60763168 340.86669922]
[-62.76491928 325.66735840]
[-52.46854782 312.90347290]
[-36.31054306 315.70541382]
[-22.40798950 310.07345581]
[-8.50543308 304.44149780]
[-9.08137989 292.69409180]
[-6.11182070 281.27627563]
[0.15281883 271.23672485]
[9.15847301 263.50411987]
[20.09638786 258.80136108]
[31.97573090 257.57797241]
[35.68189240 243.04302979]
[26.18075562 245.18339539]
[16.67643929 247.30964661]
[2.55163622 242.26089478]
[-12.50571537 247.79765320]
[-26.14735413 239.35459900]
[-27.90858269 223.40850830]
[-16.43833542 212.19186401]
[-0.53560644 214.30912781]
[7.60039282 228.13609314]
[21.72519493 233.18484497]
[15.16161346 219.69709778]
[24.36324120 207.85099792]
[39.05546570 210.87400818]
[42.83247375 225.39172363]
[50.28738403 212.37541199]
[57.74229431 199.35910034]
[58.34129715 191.94378662]
[65.49011230 186.15187073]
[73.21419525 173.29347229]
[80.93827820 160.43507385]
[88.66236877 147.57666016]
[96.38645172 134.71826172]
[104.11053467 121.85986328]
[91.56551361 122.86881256]
[79.36016083 116.63072205]
[71.63836670 103.96873474]
[71.66147614 88.01259613]
[80.57910156 73.44207001]
[82.13668823 58.52315903]
[68.39420319 52.16526031]
[57.46245575 41.68787384]
[50.52724075 28.22750664]
[48.34083557 13.24423695]
[51.14041138 -1.63666046]
[58.62228394 -14.80101776]
[69.97487640 -24.82086372]
[83.96675110 -30.60931969]
[99.08016968 -31.53849792]
[113.67573547 -27.50760841]
[126.17024231 -18.95389175]
[135.20837402 -6.80519152]
[139.80973816 7.62069368]
[139.47521973 22.75895119]
[134.24110413 36.96749496]
[124.67514038 48.70508957]
[111.81497955 56.69852829]
[97.05559540 60.08074188]
[95.49801636 74.99964905]
[108.88430023 81.76776886]
[119.97561646 71.66912079]
[131.06692505 61.57046890]
[129.22558594 46.16303253]
[136.82153320 32.63228607]
[150.93399048 26.18107414]
[166.13642883 29.29002190]
[176.58319092 40.76367188]
[178.25729370 56.19017792]
[170.51501465 69.63772583]
[156.33338928 75.93546295]
[141.16558838 72.66178131]
[130.07426453 82.76043701]
[118.98294830 92.85908508]
[125.88994598 106.17424011]
[140.53344727 102.92341614]
[155.17695618 99.67258453]
[169.82044983 96.42176056]
[183.97276306 87.08644104]
[196.86102295 98.10140228]
[189.84434509 113.53521729]
[173.07127380 111.06526184]
[158.42778015 114.31608582]
[143.78427124 117.56691742]
[129.14077759 120.81774139]
[116.96894073 129.58395386]
[109.24485016 142.44235229]
[101.52076721 155.30075073]
[93.79668427 168.15914917]
[86.07260132 181.01756287]
[78.34851074 193.87596130]
[70.75860596 206.81401062]
[63.30369568 219.83032227]
[55.84878540 232.84663391]
[50.21682739 246.74919128]
[46.51066589 261.28411865]
[61.42671585 273.74923706]
[68.56417847 291.75436401]
[66.25685883 310.91354370]
[55.13049316 326.59417725]
[37.93498993 335.03713989]
[38.24704742 350.03390503]
[38.55910492 365.03063965]
[38.87115860 380.02740479]
[39.18321609 395.02416992]
[39.49527359 410.02090454]
[39.80732727 425.01766968]
[40.11938477 440.01440430]
[40.43144226 455.01116943]
[40.74349594 470.00793457]
[41.05555344 485.00466919]
[55.71054459 488.59545898]
[68.93635559 495.85769653]
[79.83122253 506.29629517]
[87.65232086 519.19952393]
[91.86639404 533.68756104]
[92.18611145 548.77270508]
[88.58968353 563.42626953]
[81.32231903 576.64929199]
[70.87952423 587.54010010]
[57.97328949 595.35626221]
[43.48360062 599.56469727]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[24 33]
[25 32]
[26 31]
[39 124]
[40 123]
[42 50]
[43 49]
[54 122]
[55 121]
[56 120]
[58 119]
[59 118]
[60 117]
[61 116]
[62 115]
[63 114]
[68 88]
[69 87]
[89 102]
[90 101]
[91 100]
[103 113]
[104 112]
[105 111]
[106 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
