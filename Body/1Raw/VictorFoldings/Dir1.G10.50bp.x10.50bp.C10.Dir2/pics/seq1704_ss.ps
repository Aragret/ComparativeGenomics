%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUCCUCGGGGGGGGGGAAGUAUACUUCAAAGGACAUUUAACUAAAACCCCUACGCAUUUAUAUAGAxxxxxxxxxxAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCCCCCCCCCCCACCAUCCUC\
) } def
/len { sequence length } bind def

/coor [
[80.41355896 362.38677979]
[67.85533142 354.03561401]
[57.76911163 342.82318115]
[50.78891754 329.45428467]
[47.35353470 314.76928711]
[47.67890930 299.69131470]
[51.74459457 285.16821289]
[59.29501343 272.11285400]
[69.85554504 261.34594727]
[82.76233673 253.54432678]
[97.20407104 249.19837952]
[96.58009338 234.21136475]
[95.95611572 219.22434998]
[95.33213806 204.23731995]
[94.70816040 189.25030518]
[94.08418274 174.26329041]
[93.46020508 159.27627563]
[92.83622742 144.28926086]
[92.21224976 129.30224609]
[79.11909485 121.98313904]
[66.02593994 129.30224609]
[52.93278503 136.62135315]
[39.83963013 143.94046021]
[31.91323471 158.29678345]
[15.51414299 158.33992004]
[7.51233673 144.02548218]
[16.13938713 130.07894897]
[32.52052307 130.84730530]
[45.61367798 123.52819824]
[58.70683289 116.20909119]
[71.79998779 108.88998413]
[78.20095825 86.68478394]
[96.38594818 78.78585815]
[99.17826843 64.04804993]
[101.97059631 49.31024551]
[104.76291656 34.57243729]
[98.48071289 30.57103157]
[93.75193024 24.23954201]
[91.43882751 16.20865631]
[92.14038849 7.42375803]
[77.72817230 3.26587081]
[63.31595612 -0.89201665]
[47.53625107 3.57261992]
[35.97015762 -8.05310440]
[40.51587677 -23.80964279]
[56.49716568 -27.48801613]
[67.47384644 -15.30423260]
[81.88606262 -11.14634514]
[96.29827881 -6.98845768]
[109.95451355 -13.19386482]
[116.30164337 -26.78481674]
[122.64877319 -40.37576675]
[128.99591064 -53.96671677]
[135.34303284 -67.55767059]
[141.69017029 -81.14862061]
[148.03729248 -94.73957062]
[135.40586853 -86.64962006]
[121.45932770 -81.12749481]
[106.71357727 -78.37745667]
[91.71408844 -78.50124359]
[77.01572418 -81.49427032]
[63.16222382 -87.24583435]
[50.66604614 -95.54315186]
[39.98945236 -106.07929993]
[31.52740097 -118.46451569]
[25.59291649 -132.24064636]
[22.40552711 -146.89808655]
[22.08314514 -161.89462280]
[24.63769531 -176.67550659]
[29.97467613 -190.69393921]
[37.89666748 -203.43136597]
[48.11061096 -214.41661072]
[60.23867035 -223.24327087]
[73.83220673 -229.58486938]
[88.38836670 -233.20678711]
[103.36867523 -233.97505188]
[118.21899414 -231.86125183]
[132.38995361 -226.94355774]
[145.35737610 -219.40391541]
[156.64152527 -209.52120972]
[165.82501221 -197.66104126]
[172.56808472 -184.26213074]
[176.62133789 -169.82012939]
[177.83480835 -154.86929321]
[176.16360474 -139.96267700]
[171.66957092 -125.65171814]
[164.52261353 -112.47126007]
[177.61576843 -119.79036713]
[190.70892334 -127.10947418]
[203.06050110 -135.62055969]
[214.56230164 -145.24908447]
[226.06410217 -154.87760925]
[237.56590271 -164.50613403]
[249.06771851 -174.13467407]
[254.18305969 -189.71559143]
[270.28747559 -192.81074524]
[280.81411743 -180.23609924]
[274.93408203 -164.92736816]
[258.69622803 -162.63285828]
[247.19444275 -153.00433350]
[235.69262695 -143.37580872]
[224.19082642 -133.74728394]
[212.68902588 -124.11875916]
[227.68789673 -123.93407440]
[240.28697205 -115.79385376]
[246.61976624 -102.19622040]
[244.74282837 -87.31410980]
[235.23214722 -75.71466064]
[221.00646973 -70.95759583]
[206.43142700 -74.50279236]
[195.97994995 -85.26227570]
[192.85943604 -99.93410492]
[198.02803040 -114.01631927]
[184.93487549 -106.69721222]
[171.84172058 -99.37810516]
[161.62825012 -88.39244080]
[155.28111267 -74.80149078]
[148.93399048 -61.21054077]
[142.58685303 -47.61958694]
[136.23973083 -34.02863693]
[129.89259338 -20.43768692]
[123.54546356 -6.84673548]
[138.51512146 18.85881996]
[119.50072479 37.36476135]
[116.70840454 52.10256958]
[113.91607666 66.84037781]
[111.12374878 81.57817841]
[123.48901367 94.16647339]
[123.04998016 113.83905029]
[107.19926453 128.67826843]
[107.82324219 143.66528320]
[108.44721985 158.65229797]
[109.07119751 173.63931274]
[109.69517517 188.62632751]
[110.31915283 203.61334229]
[110.94313049 218.60037231]
[111.56710815 233.58738708]
[112.19108582 248.57440186]
[126.94408417 251.70483398]
[140.45472717 258.40658569]
[151.87370300 268.25839233]
[160.48321533 280.64093018]
[165.74206543 294.77581787]
[167.31967163 309.77453613]
[165.11686707 324.69427490]
[159.27212524 338.59713745]
[150.15283203 350.60922241]
[138.33226013 359.97537231]
[124.55345917 366.10687256]
[109.68255615 368.61825562]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 31]
[21 30]
[22 29]
[23 28]
[33 127]
[34 126]
[35 125]
[36 124]
[40 49]
[41 48]
[42 47]
[50 122]
[51 121]
[52 120]
[53 119]
[54 118]
[55 117]
[56 116]
[87 115]
[88 114]
[89 113]
[90 103]
[91 102]
[92 101]
[93 100]
[94 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
