%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAACAUAUGGGGGGGGGGGACGCACUCUCCCCUGAACUCUACACAACAUAUUUUGUCACCAAGACCCUxxxxxxxxxxCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUCCCCCCCCCCAACAACAUUU\
) } def
/len { sequence length } bind def

/coor [
[87.42453766 405.16619873]
[72.93484497 400.95770264]
[60.02861404 393.14160156]
[49.58581543 382.25076294]
[42.31845093 369.02774048]
[38.72202301 354.37414551]
[39.04174805 339.28906250]
[43.25581741 324.80099487]
[51.07691574 311.89776611]
[61.97178268 301.45916748]
[75.19759369 294.19692993]
[89.85258484 290.60614014]
[90.16464233 275.60940552]
[90.47669220 260.61264038]
[90.78874969 245.61589050]
[91.10080719 230.61914062]
[91.41286469 215.62239075]
[91.72492218 200.62562561]
[92.03697968 185.62887573]
[92.34902954 170.63212585]
[92.66108704 155.63537598]
[92.97314453 140.63861084]
[81.57061005 94.30547333]
[70.90898132 83.75418854]
[59.38353348 93.37233734]
[46.99600601 101.85136414]
[33.85857773 109.11447144]
[20.09022522 115.09587860]
[5.81564522 119.74142456]
[-8.83588982 123.00904083]
[-23.73168945 124.86911774]
[-38.73685074 125.30482483]
[-53.71548462 124.31221008]
[-68.53193665 121.90026093]
[-83.05202484 118.09082794]
[-97.14424896 112.91840363]
[-110.68099213 106.42983246]
[-123.53964233 98.68388367]
[-135.60375977 89.75070190]
[-146.76409912 79.71118927]
[-156.91955566 68.65627289]
[-165.97819519 56.68605804]
[-173.85795593 43.90896606]
[-180.48747253 30.44069862]
[-185.80671692 16.40323639]
[-189.76751709 1.92370546]
[-192.33399963 -12.86676216]
[-193.48292542 -27.83421707]
[-193.20388794 -42.84311295]
[-191.49940491 -57.75751495]
[-188.38491821 -72.44235992]
[-183.88862610 -86.76466370]
[-178.05126953 -100.59470367]
[-170.92570496 -113.80723572]
[-162.57644653 -126.28260040]
[-153.07913208 -137.90782166]
[-142.51976013 -148.57760620]
[-130.99397278 -158.19534302]
[-118.60612488 -166.67391968]
[-105.46843719 -173.93653870]
[-91.69986725 -179.91744995]
[-77.42511749 -184.56248474]
[-62.77346039 -187.82955933]
[-47.87759399 -189.68908691]
[-32.87241364 -190.12425232]
[-17.89381790 -189.13108826]
[-3.07745314 -186.71859741]
[11.44249630 -182.90863037]
[25.53453255 -177.73570251]
[39.07103348 -171.24664307]
[51.92940521 -163.50021362]
[63.99320221 -154.56660461]
[75.15316010 -144.52668762]
[85.30822754 -133.47138977]
[94.36642456 -121.50084686]
[102.24571228 -108.72346497]
[108.87474823 -95.25495911]
[114.19348145 -81.21730042]
[118.15375519 -66.73762512]
[120.71969604 -51.94706726]
[121.86807251 -36.97956848]
[121.58848572 -21.97068596]
[119.88346100 -7.05634165]
[116.76843262 7.62839174]
[112.27162933 21.95052528]
[106.43376923 35.78034973]
[99.30771637 48.99262238]
[90.95800781 61.46768570]
[81.46027374 73.09255981]
[92.12189484 83.64385223]
[107.10890961 84.26782990]
[118.61071777 74.63929749]
[123.22129059 66.67723846]
[130.45341492 64.93312073]
[142.15304565 55.54595947]
[150.72331238 40.91766739]
[167.15240479 45.10348511]
[167.67819214 62.04927826]
[151.54020691 67.24558258]
[139.84059143 76.63274384]
[128.23924255 86.14110565]
[116.73744202 95.76963043]
[122.36939240 109.67218781]
[137.32965088 108.58087921]
[150.53031921 99.86006165]
[163.78678894 106.65089417]
[178.74703979 105.55958557]
[193.70729065 104.46827698]
[203.84899902 92.34716797]
[219.59835815 91.03075409]
[231.61157227 101.30004883]
[232.76139832 117.06245422]
[222.36566162 128.96641541]
[206.59197998 129.94952393]
[194.79859924 119.42852783]
[179.83834839 120.51983643]
[164.87809753 121.61114502]
[152.74748230 130.25390625]
[138.42095947 123.54112244]
[123.46070862 124.63243866]
[137.11276245 130.84704590]
[151.82575989 133.76727295]
[162.21469116 144.58715820]
[164.53483582 159.40663147]
[157.94989014 172.88395691]
[144.83340454 180.16117859]
[129.91328430 178.61518860]
[118.56755066 168.80323792]
[114.88587189 154.26116943]
[107.96990204 140.95066833]
[107.65784454 155.94743347]
[107.34578705 170.94418335]
[107.03372955 185.94093323]
[106.72167206 200.93768311]
[106.40961456 215.93444824]
[106.09756470 230.93119812]
[105.78550720 245.92794800]
[105.47344971 260.92471313]
[105.16139221 275.92144775]
[104.84933472 290.91821289]
[119.34226990 295.11550903]
[132.25453186 302.92163086]
[142.70574951 313.80441284]
[149.98332214 327.02178955]
[153.59106445 341.67260742]
[153.28298950 356.75796509]
[149.08010864 371.24926758]
[141.26896667 384.15853882]
[130.38217163 394.60552979]
[117.16197205 401.87799072]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 90]
[24 89]
[91 102]
[92 101]
[94 100]
[95 99]
[103 120]
[104 119]
[106 117]
[107 116]
[108 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
