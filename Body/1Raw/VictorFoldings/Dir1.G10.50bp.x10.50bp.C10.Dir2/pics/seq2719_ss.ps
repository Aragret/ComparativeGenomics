%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUCACCUGGGGGGGGGGCUAGCAUCACCAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAAxxxxxxxxxxUGCACGAAACGGGAUCAAACAACCCCCUAGGAAUCACCUCCCAUUCCGAUCCCCCCCCCCAAAAUCACCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 368.86746216]
[71.19830322 362.85144043]
[59.48964310 353.32202148]
[50.78712082 340.98635864]
[45.73651886 326.75982666]
[44.71262741 311.69815063]
[47.79142761 296.91897583]
[54.74444962 283.51904297]
[65.05573273 272.49273682]
[77.96011353 264.65820312]
[92.50000000 260.59689331]
[92.50000000 245.59690857]
[92.50000000 230.59690857]
[92.50000000 215.59690857]
[92.50000000 200.59690857]
[92.50000000 185.59690857]
[92.50000000 170.59690857]
[92.50000000 155.59690857]
[92.50000000 140.59690857]
[92.50000000 125.59690094]
[82.83606720 120.41692352]
[76.07255554 111.78681946]
[73.35240173 101.16492462]
[75.13526154 90.34618378]
[63.24287796 81.20445251]
[51.35049820 72.06271362]
[37.75954819 65.71558380]
[23.11604691 62.46475983]
[8.47254658 59.21393585]
[-6.17095518 55.96310806]
[-17.49151993 62.23197174]
[-29.65275192 59.17854691]
[-36.23291397 48.98007584]
[-28.78308487 61.99929810]
[-31.27229118 76.79131317]
[-42.57289505 86.65520477]
[-57.56561279 87.12252808]
[-69.45859528 77.98158264]
[-72.86421204 63.37330246]
[-66.23967743 49.91538620]
[-52.58556747 43.70436478]
[-66.48812103 38.07241058]
[-80.39067841 32.44045258]
[-94.29323578 26.80849648]
[-109.56787109 31.71409988]
[-122.84648895 22.71087646]
[-123.94285583 6.70533037]
[-112.01594543 -4.02445507]
[-96.21505737 -1.24750590]
[-88.66127777 12.90594006]
[-74.75872040 18.53789711]
[-60.85616684 24.16985321]
[-46.95360947 29.80180931]
[-32.67815018 34.40737534]
[-16.15967369 28.56443787]
[-2.92012930 41.31960678]
[11.72337246 44.57043457]
[26.36687279 47.82125854]
[41.01037598 51.07208633]
[30.17620850 40.69803619]
[22.47691536 27.82477570]
[18.46251488 13.37193584]
[18.41978645 -1.62800372]
[22.35178566 -16.10347939]
[29.97761536 -29.02039528]
[40.75250626 -39.45599365]
[53.90671921 -46.66478348]
[68.50054932 -50.13177872]
[83.49144745 -49.60931015]
[97.80849457 -45.13469696]
[110.42891693 -37.02759933]
[120.45113373 -25.86716843]
[127.15917206 -12.45068073]
[130.07383728 2.26341772]
[128.98692322 17.22398567]
[123.97604370 31.36227226]
[115.39919281 43.66827011]
[103.86907196 53.26286697]
[90.20936584 59.46064377]
[75.39589691 61.81884384]
[60.49223328 60.17033386]
[72.38461304 69.31207275]
[84.27699280 78.45380402]
[104.96531677 73.79319000]
[122.51493073 85.69862366]
[136.92713928 81.54073334]
[151.29533386 77.23314667]
[165.61793518 72.77633667]
[172.32580566 61.71025085]
[184.39630127 58.31581116]
[195.17483521 63.89527512]
[209.58705139 59.73738861]
[223.99926758 55.57949829]
[238.41148376 51.42161179]
[239.06341553 37.07536316]
[244.11546326 23.65523529]
[253.05918884 12.47413063]
[265.00607300 4.62149811]
[278.77590942 0.85719430]
[293.01324463 1.53796649]
[306.32089233 6.58369017]
[317.39703369 15.48653889]
[325.16253662 27.36206245]
[339.65811157 23.50490379]
[348.91531372 10.40209293]
[364.93902588 9.61408138]
[375.43719482 21.74536514]
[372.35653687 37.48986053]
[358.06027222 44.76974106]
[343.51528931 38.00049973]
[329.01968384 41.85765839]
[327.82669067 57.52713394]
[321.33969116 71.86997223]
[310.32308960 83.15164948]
[296.09027100 90.00101471]
[280.34701538 91.57685852]
[264.98709106 87.67124176]
[251.86442566 78.73667908]
[242.56936646 65.83383179]
[228.15715027 69.99171448]
[213.74493408 74.14960480]
[199.33271790 78.30748749]
[187.90264893 91.58730316]
[170.07473755 87.09893036]
[155.75215149 91.55574799]
[150.26437378 96.57869720]
[141.08503723 95.95294952]
[126.67282104 100.11083984]
[124.22973633 111.15218353]
[117.43148041 120.18898010]
[107.50000000 125.59690094]
[107.50000000 140.59690857]
[107.50000000 155.59690857]
[107.50000000 170.59690857]
[107.50000000 185.59690857]
[107.50000000 200.59690857]
[107.50000000 215.59690857]
[107.50000000 230.59690857]
[107.50000000 245.59690857]
[107.50000000 260.59689331]
[122.03988647 264.65820312]
[134.94427490 272.49273682]
[145.25555420 283.51904297]
[152.20857239 296.91897583]
[155.28736877 311.69815063]
[154.26348877 326.75982666]
[149.21287537 340.98635864]
[140.51036072 353.32202148]
[128.80169678 362.85144043]
[114.95575714 368.86746216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 83]
[25 82]
[26 81]
[27 59]
[28 58]
[29 57]
[30 56]
[33 54]
[41 53]
[42 52]
[43 51]
[44 50]
[85 128]
[86 127]
[87 125]
[88 124]
[91 122]
[92 121]
[93 120]
[94 119]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
