%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUAUUUUGGGGGGGGGGGUCACCAAGACCCUACUUCUAACCUCCCUGUUCUUAUGAAUUCGAACAGCxxxxxxxxxxUAAUCUCCCUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUACCCCCCCCCCAUCAUAUUUU\
) } def
/len { sequence length } bind def

/coor [
[86.34337616 341.62896729]
[73.78514862 333.27783203]
[63.69892502 322.06536865]
[56.71873093 308.69647217]
[53.28334808 294.01147461]
[53.60872650 278.93350220]
[57.67441177 264.41040039]
[65.22483063 251.35505676]
[75.78536224 240.58815002]
[88.69215393 232.78652954]
[103.13388062 228.44056702]
[102.50990295 213.45355225]
[101.88592529 198.46653748]
[101.26194763 183.47952271]
[100.63796997 168.49250793]
[100.01399231 153.50549316]
[99.39001465 138.51847839]
[98.76603699 123.53145599]
[85.74973297 116.07654572]
[72.50714874 123.12168121]
[59.26456070 130.16682434]
[46.02197266 137.21195984]
[32.77938843 144.25709534]
[26.73612404 159.11839294]
[11.30900574 163.52107239]
[-1.66759956 154.08776855]
[-2.23915195 138.05490112]
[10.03279495 127.72151947]
[25.73425293 131.01449585]
[38.97683716 123.96936798]
[52.21942520 116.92423248]
[65.46201324 109.87909698]
[78.70459747 102.83396149]
[64.48082733 107.59677887]
[49.50554276 106.73606873]
[35.92111969 100.37496948]
[25.67097092 89.42351532]
[20.22148895 75.44842529]
[20.35228348 60.44899368]
[26.04464531 46.57106400]
[36.48421860 35.80001831]
[50.17750168 29.67678642]
[65.16551971 29.07736015]
[79.30406952 34.08749390]
[90.57047272 43.99043274]
[97.35293579 57.36944962]
[98.68116760 72.31052399]
[94.36431122 86.67774963]
[100.99281311 73.22178650]
[107.62131500 59.76581955]
[114.24980927 46.30985260]
[112.58654785 28.00101852]
[127.48133087 18.77359390]
[133.82846069 5.18264341]
[130.16200256 -7.22746992]
[135.77845764 -18.43792725]
[147.16061401 -22.65147018]
[153.78910828 -36.10743332]
[160.41760254 -49.56340027]
[167.04611206 -63.01936722]
[173.67460632 -76.47533417]
[161.09959412 -84.68668365]
[149.60606384 -94.35395813]
[139.36161804 -105.33615875]
[130.51567078 -117.47315216]
[123.19720459 -130.58792114]
[117.51294708 -144.48924255]
[113.54579926 -158.97438049]
[111.35360718 -173.83209229]
[110.96834564 -188.84571838]
[112.39562225 -203.79631042]
[115.61463928 -218.46585083]
[120.57843781 -232.64041138]
[127.21463013 -246.11328125]
[135.42645264 -258.68798828]
[145.09416199 -270.18115234]
[156.07675171 -280.42517090]
[168.21406555 -289.27069092]
[181.32911682 -296.58865356]
[195.23065186 -302.27239990]
[209.71592712 -306.23898315]
[224.57373047 -308.43063354]
[239.58737183 -308.81533813]
[254.53790283 -307.38748169]
[269.20733643 -304.16793823]
[283.38168335 -299.20361328]
[296.85430908 -292.56689453]
[309.42871094 -284.35461426]
[320.92153931 -274.68649292]
[331.16513062 -263.70352173]
[340.01019287 -251.56585693]
[347.32766724 -238.45053101]
[353.01089478 -224.54878235]
[356.97695923 -210.06335449]
[359.16802979 -195.20547485]
[359.55218506 -180.19183350]
[358.12377930 -165.24133301]
[354.90365601 -150.57203674]
[349.93881226 -136.39785767]
[343.30160522 -122.92548370]
[335.08883667 -110.35139465]
[325.42028809 -98.85894012]
[314.43692017 -88.61573792]
[302.29895020 -79.77114868]
[289.18334961 -72.45415497]
[275.28137207 -66.77146149]
[260.79580688 -62.80593491]
[245.93785095 -60.61540985]
[230.92417908 -60.23183060]
[215.97373962 -61.66078949]
[201.30456543 -64.88144684]
[187.13056946 -69.84683228]
[180.50207520 -56.39086914]
[173.87356567 -42.93490219]
[167.24507141 -29.47893715]
[160.61657715 -16.02297020]
[162.74073792 1.36920846]
[147.41941833 11.52977276]
[141.07228088 25.12072372]
[144.90890503 36.63539505]
[139.67987061 48.03171921]
[127.70577240 52.93835068]
[121.07727814 66.39431763]
[114.44877625 79.85028076]
[107.82028198 93.30625153]
[111.90798950 94.70700073]
[115.63866425 97.97785950]
[118.26678467 102.96817780]
[119.12200165 109.25480652]
[117.70256042 116.17794800]
[113.75305939 122.90747833]
[114.37703705 137.89450073]
[115.00101471 152.88151550]
[115.62498474 167.86853027]
[116.24896240 182.85554504]
[116.87294006 197.84255981]
[117.49691772 212.82957458]
[118.12089539 227.81658936]
[132.87390137 230.94703674]
[146.38453674 237.64878845]
[157.80351257 247.50057983]
[166.41302490 259.88311768]
[171.67187500 274.01800537]
[173.24948120 289.01675415]
[171.04667664 303.93646240]
[165.20193481 317.83935547]
[156.08265686 329.85140991]
[144.26208496 339.21755981]
[130.48327637 345.34906006]
[115.61237335 347.86044312]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 33]
[20 32]
[21 31]
[22 30]
[23 29]
[48 125]
[49 124]
[50 123]
[51 122]
[53 119]
[54 118]
[57 116]
[58 115]
[59 114]
[60 113]
[61 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
