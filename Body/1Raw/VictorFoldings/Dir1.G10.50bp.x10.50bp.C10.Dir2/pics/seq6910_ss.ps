%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCGCUACCAUGGGGGGGGGGAAUCAUCGCUAUCCCCACCGGCGUCAAAGUAUUUAGCUGACUCGCCACACxxxxxxxxxxUAGUAGCUAUUACCUUCUUAUUAUUUGAUCUAGAAAUUGCCCUCCUUUUACCCCCCCCCCCCCCUACCAU\
) } def
/len { sequence length } bind def

/coor [
[58.55532455 374.07113647]
[44.70938873 368.05511475]
[33.00072479 358.52569580]
[24.29820061 346.19003296]
[19.24759865 331.96350098]
[18.22370720 316.90182495]
[21.30250740 302.12268066]
[28.25552750 288.72274780]
[38.56681442 277.69641113]
[51.47119522 269.86190796]
[66.01107788 265.80059814]
[66.01107788 250.80058289]
[66.01107788 235.80058289]
[66.01107788 220.80058289]
[66.01107788 205.80058289]
[66.01107788 190.80058289]
[66.01107788 175.80058289]
[66.01107788 160.80058289]
[66.01107788 145.80058289]
[66.01107788 130.80058289]
[60.41319656 125.80922699]
[57.36568069 140.49638367]
[43.12243271 145.20062256]
[31.92688560 135.21766663]
[34.97472382 120.53057098]
[49.21743011 115.82649994]
[43.61954880 110.83513641]
[28.71764565 112.54782104]
[13.81574440 114.26051331]
[8.35637379 128.55924988]
[-3.13028026 138.67436218]
[-18.00466919 142.28144836]
[-32.84876633 138.55166626]
[-44.25150681 128.34205627]
[-49.59262466 113.99872589]
[-47.64477158 98.81767273]
[-38.85554886 86.28738403]
[-25.24465370 79.28723145]
[-9.93977356 79.42579651]
[3.54214501 86.67124176]
[12.10305405 99.35861206]
[27.00495720 97.64591980]
[41.90686035 95.93323517]
[52.00550842 84.84191895]
[52.31756592 69.84516144]
[52.62961960 54.84840775]
[52.94167709 39.85165405]
[53.25373459 24.85490227]
[52.00685883 9.90681458]
[49.21453476 -4.83099127]
[46.42221069 -19.56879807]
[36.19439697 -27.49632454]
[34.20035934 -39.87545013]
[40.97401810 -49.94644165]
[38.48889923 -64.73915100]
[36.00378036 -79.53185272]
[33.51866150 -94.32456207]
[31.03354454 -109.11727142]
[26.49889374 -117.12281799]
[28.65394211 -124.24330902]
[26.47710419 -139.08451843]
[24.30026817 -153.92572021]
[9.35980320 -156.22221375]
[-4.23926735 -162.82197571]
[-15.28772259 -173.13812256]
[-22.80314255 -186.25337219]
[-26.11725998 -201.00152588]
[-24.93538666 -216.07118225]
[-19.36261368 -230.12236023]
[-9.89446735 -241.90563965]
[2.62714982 -250.37326050]
[17.08882523 -254.77227783]
[32.20463562 -254.71154785]
[46.63049316 -250.19645691]
[59.08366013 -241.62849426]
[68.45681000 -229.76951599]
[73.91649628 -215.67399597]
[74.97723389 -200.59533691]
[71.54470825 -185.87428284]
[63.92413712 -172.81985474]
[52.79314041 -162.59281921]
[39.14147186 -156.10255432]
[41.31830978 -141.26135254]
[43.49514771 -126.42014313]
[45.82625198 -111.60238647]
[48.31137085 -96.80967712]
[50.79648972 -82.01697540]
[53.28160858 -67.22426605]
[55.76672745 -52.43156052]
[67.65461731 -39.55995941]
[61.16001511 -22.36112213]
[63.95233917 -7.62331581]
[66.74466705 7.11449003]
[73.75444794 -6.14684057]
[86.38201904 -14.24279785]
[101.35876465 -15.07776642]
[114.80799866 -8.43561840]
[123.24842834 3.96434665]
[124.49526978 18.91243553]
[118.22579956 32.53938293]
[106.06282806 41.31789017]
[91.15471649 42.97567368]
[77.36038208 37.08361435]
[68.25048828 25.16695786]
[67.93843079 40.16371155]
[67.62637329 55.16046524]
[67.31431580 70.15721893]
[67.00226593 85.15396881]
[78.07626343 73.12294006]
[92.74265289 67.61755371]
[107.63362885 69.24649048]
[119.61039734 77.04927063]
[126.42475891 88.82942200]
[127.13452911 101.73423004]
[141.25932312 106.78298187]
[155.38414001 111.83174133]
[167.04039001 101.83037567]
[182.13862610 99.01283264]
[196.61752319 104.13703156]
[206.58230591 115.82457733]
[209.35249329 130.93157959]
[204.18295288 145.39433289]
[192.46421814 155.32243347]
[177.34861755 158.04525757]
[162.90213013 152.83039856]
[153.01081848 141.08061218]
[150.33537292 125.95654297]
[136.21057129 120.90778351]
[122.08576965 115.85903168]
[106.22648621 131.06898499]
[81.01107788 130.80058289]
[81.01107788 145.80058289]
[81.01107788 160.80058289]
[81.01107788 175.80058289]
[81.01107788 190.80058289]
[81.01107788 205.80058289]
[81.01107788 220.80058289]
[81.01107788 235.80058289]
[81.01107788 250.80058289]
[81.01107788 265.80059814]
[95.55096436 269.86190796]
[108.45534515 277.69641113]
[118.76663208 288.72274780]
[125.71965790 302.12268066]
[128.79844666 316.90182495]
[127.77455902 331.96350098]
[122.72396088 346.19003296]
[114.02143860 358.52569580]
[102.31277466 368.05511475]
[88.46683502 374.07113647]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 43]
[28 42]
[29 41]
[44 108]
[45 107]
[46 106]
[47 105]
[48 104]
[49 93]
[50 92]
[51 91]
[54 89]
[55 88]
[56 87]
[57 86]
[58 85]
[60 84]
[61 83]
[62 82]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
