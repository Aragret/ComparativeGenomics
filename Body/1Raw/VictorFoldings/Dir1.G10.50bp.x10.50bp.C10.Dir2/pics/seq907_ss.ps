%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCAUAAAGGGGGGGGGGCAAAUAGGUUUGGUCCUAGCCUUUCUAUUAGCUCUUAGUAAGAUUACACAxxxxxxxxxxUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUUUCUCCCCCCCCCCACCCCAGAAA\
) } def
/len { sequence length } bind def

/coor [
[84.81669617 363.76220703]
[70.97075653 357.74618530]
[59.26209641 348.21676636]
[50.55957031 335.88110352]
[45.50896835 321.65457153]
[44.48507690 306.59289551]
[47.56387711 291.81375122]
[54.51689911 278.41381836]
[64.82817841 267.38748169]
[77.73256683 259.55297852]
[92.27245331 255.49166870]
[92.27245331 240.49166870]
[92.27245331 225.49166870]
[92.27245331 210.49166870]
[92.27245331 195.49166870]
[92.27245331 180.49166870]
[92.27245331 165.49166870]
[92.27245331 150.49166870]
[92.27245331 135.49166870]
[92.27245331 120.49166107]
[79.49509430 112.63423920]
[66.10881042 119.40235138]
[52.72252274 126.17046356]
[39.33623886 132.93858337]
[30.81949997 146.95275879]
[14.43281078 146.31367493]
[7.03339005 131.67877197]
[16.23312759 118.10317230]
[32.56812286 119.55229187]
[45.95440674 112.78417969]
[59.34069443 106.01606750]
[72.72697449 99.24794769]
[78.40642548 93.09293365]
[85.00984192 89.92856598]
[91.36600494 89.69062042]
[83.91109467 76.67430878]
[76.45618439 63.65800476]
[60.34329224 54.80618668]
[61.01437378 37.29763031]
[53.29029083 24.43922615]
[45.56620407 11.58082485]
[37.84211731 -1.27757776]
[23.73864937 3.95007157]
[8.91864777 6.49640322]
[-6.11291170 6.27614164]
[-20.84412384 3.29825401]
[-34.77357864 -2.33440590]
[-47.42742920 -10.42864799]
[-58.37551880 -20.70757294]
[-67.24598694 -32.82004166]
[-73.73792267 -46.35268021]
[-77.63154602 -60.84396744]
[-78.79566956 -75.80000305]
[-77.19210815 -90.71130371]
[-72.87693024 -105.07020569]
[-65.99849701 -118.38810730]
[-56.79238129 -130.21211243]
[-45.57326126 -140.14044189]
[-53.29734421 -152.99884033]
[-61.02143097 -165.85723877]
[-75.61809540 -173.33181763]
[-76.17290497 -189.72158813]
[-62.11511993 -198.16613770]
[-47.90617752 -189.97846985]
[-48.16302872 -173.58132935]
[-40.43894196 -160.72293091]
[-32.71485901 -147.86451721]
[-18.68040085 -153.10610962]
[-3.91781712 -155.68017578]
[11.07037640 -155.49763489]
[25.77371025 -152.56321716]
[39.69114685 -146.97541809]
[52.34815598 -138.92320251]
[63.31289291 -128.67956543]
[72.21092987 -116.59227753]
[78.73804474 -103.07214355]
[82.67063141 -88.57898712]
[83.87333679 -73.60600281]
[82.30374146 -58.66301346]
[78.01384735 -44.25908279]
[71.14834595 -30.88518333]
[61.93975067 -18.99745750]
[50.70051956 -9.00166321]
[58.42460632 3.85673952]
[66.14868927 16.71514130]
[73.87277985 29.57354355]
[85.56578827 32.82636261]
[92.09467316 43.53115463]
[89.47249603 56.20309448]
[96.92740631 69.21939850]
[104.38231659 82.23571014]
[118.10236359 88.29872131]
[132.74586487 85.04789734]
[147.38937378 81.79707336]
[162.03286743 78.54624939]
[176.67637634 75.29542542]
[191.31987000 72.04459381]
[205.96337891 68.79376984]
[220.60687256 65.54294586]
[235.25038147 62.29211807]
[249.89387512 59.04129410]
[252.88435364 44.10887909]
[261.69515991 31.68753624]
[274.79974365 23.92933083]
[289.92767334 22.17842293]
[304.45791626 26.73816490]
[315.87307739 36.81855774]
[322.19537354 50.67310715]
[322.32940674 65.90143585]
[316.25201416 79.86513519]
[305.01608276 90.14492035]
[290.56832886 94.95974731]
[275.41192627 93.47541809]
[262.17279053 85.94911194]
[253.14469910 73.68479156]
[238.50120544 76.93562317]
[223.85769653 80.18644714]
[209.21420288 83.43727112]
[194.57069397 86.68809509]
[179.92720032 89.93892670]
[165.28369141 93.18975067]
[150.64019775 96.44057465]
[135.99668884 99.69139862]
[121.35319519 102.94222260]
[136.33996582 103.57202148]
[147.03556824 114.08887482]
[147.91783142 129.06291199]
[138.53123474 140.76300049]
[123.72211456 143.14834595]
[111.13644409 134.98741150]
[107.27245331 120.49166107]
[107.27245331 135.49166870]
[107.27245331 150.49166870]
[107.27245331 165.49166870]
[107.27245331 180.49166870]
[107.27245331 195.49166870]
[107.27245331 210.49166870]
[107.27245331 225.49166870]
[107.27245331 240.49166870]
[107.27245331 255.49166870]
[121.81233978 259.55297852]
[134.71672058 267.38748169]
[145.02799988 278.41381836]
[151.98101807 291.81375122]
[155.05982971 306.59289551]
[154.03593445 321.65457153]
[148.98533630 335.88110352]
[140.28280640 348.21676636]
[128.57414246 357.74618530]
[114.72820282 363.76220703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 32]
[22 31]
[23 30]
[24 29]
[35 91]
[36 90]
[37 89]
[39 86]
[40 85]
[41 84]
[42 83]
[58 67]
[59 66]
[60 65]
[92 124]
[93 123]
[94 122]
[95 121]
[96 120]
[97 119]
[98 118]
[99 117]
[100 116]
[101 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
