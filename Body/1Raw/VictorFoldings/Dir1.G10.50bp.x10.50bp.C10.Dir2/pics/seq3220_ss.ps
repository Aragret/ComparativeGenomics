%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCCUCUUCUGGGGGGGGGGUAACAACAUACCCAUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAxxxxxxxxxxCUAUCCCCCAUUCUCCUCCUAUCCCUCAACCCCGACAUCAUUACCGGGUUCCCCCCCCCCUUCCUCUUGU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.30270386]
[71.19830322 353.28668213]
[59.48964310 343.75726318]
[50.78712082 331.42160034]
[45.73651886 317.19506836]
[44.71262741 302.13339233]
[47.79142761 287.35424805]
[54.74444962 273.95431519]
[65.05573273 262.92797852]
[77.96011353 255.09347534]
[92.50000000 251.03216553]
[92.50000000 236.03216553]
[92.50000000 221.03216553]
[92.50000000 206.03216553]
[92.50000000 191.03216553]
[92.50000000 176.03216553]
[92.50000000 161.03216553]
[92.50000000 146.03216553]
[92.50000000 131.03216553]
[92.50000000 116.03215790]
[83.64715576 110.34230804]
[79.00227356 99.88748932]
[80.99038696 87.69028473]
[66.12733459 85.66794586]
[51.26428986 83.64561462]
[36.40124512 81.62327576]
[21.43045235 82.55890656]
[6.93485546 86.41606903]
[-7.56074095 90.27322388]
[-18.78851128 102.22601318]
[-34.68981552 98.21596527]
[-38.90675735 82.36827087]
[-27.10130882 70.98567963]
[-11.41790009 75.77762604]
[3.07769608 71.92047119]
[17.57329369 68.06330872]
[3.19785643 63.77999115]
[-9.32252502 55.51923752]
[-18.91604042 43.98821640]
[-24.76143265 30.17404175]
[-26.35830498 15.25928307]
[-23.56995583 0.52072453]
[-16.63508415 -12.77993584]
[-6.14735222 -23.50408936]
[6.99543524 -30.73369217]
[21.66818428 -33.84984970]
[36.61483002 -32.58580399]
[50.55585480 -27.04976273]
[62.29784012 -17.71564102]
[70.83560181 -5.38249063]
[75.43827057 8.89390469]
[75.71182251 23.89141083]
[71.63284302 38.32616043]
[63.55052185 50.96245575]
[52.15674210 60.71857071]
[38.42357635 66.76023102]
[53.28662491 68.78256226]
[68.14967346 70.80490112]
[83.01271820 72.82723236]
[97.23949432 68.07341766]
[107.90112305 57.52212906]
[118.56275177 46.97084045]
[129.22438049 36.41954803]
[119.76075745 24.76593399]
[111.48498535 12.24082565]
[104.47674561 -1.03514624]
[98.80355072 -14.93412495]
[94.52002716 -29.32225227]
[91.66743469 -44.06095886]
[90.27323914 -59.00830078]
[90.35086823 -74.02032471]
[91.89958191 -88.95244598]
[94.90445709 -103.66085815]
[99.33656311 -118.00391388]
[105.15320587 -131.84347534]
[112.29837036 -145.04626465]
[120.70324707 -157.48510742]
[130.28688049 -169.04022217]
[140.95698547 -179.60031128]
[152.61079407 -189.06370544]
[165.13606262 -197.33923340]
[178.41217041 -204.34719849]
[192.31126404 -210.02011108]
[206.69947815 -214.30335999]
[221.43824768 -217.15565491]
[236.38562012 -218.54954529]
[251.39762878 -218.47161865]
[266.32971191 -216.92260742]
[281.03808594 -213.91743469]
[295.38104248 -209.48504639]
[309.22048950 -203.66812134]
[322.42312622 -196.52268982]
[334.86181641 -188.11756897]
[346.41671753 -178.53370667]
[356.97662354 -167.86338806]
[366.43975830 -156.20939636]
[374.71505737 -143.68395996]
[381.72274780 -130.40769958]
[387.39538574 -116.50849915]
[391.67834473 -102.12020111]
[394.53033447 -87.38137817]
[395.92395020 -72.43398285]
[395.84570312 -57.42196274]
[394.29638672 -42.48990250]
[391.29092407 -27.78160858]
[386.85824585 -13.43872929]
[381.04104614 0.40059873]
[373.89535522 13.60309315]
[365.48999023 26.04160309]
[355.90588379 37.59633255]
[345.23538208 48.15600967]
[333.58117676 57.61892700]
[321.05557251 65.89395142]
[307.77920532 72.90139008]
[293.87988281 78.57375336]
[279.49148560 82.85641479]
[264.75259399 85.70812225]
[249.80517578 87.10142517]
[234.79316711 87.02288818]
[219.86114502 85.47328186]
[205.15290833 82.46752167]
[190.81011963 78.03456116]
[176.97090149 72.21708679]
[163.76855469 65.07112885]
[151.33020020 56.66550446]
[139.77566528 47.08117676]
[129.11404419 57.63246536]
[118.45241547 68.18375397]
[107.79078674 78.73504639]
[120.15463257 99.12893677]
[107.50000000 116.03215790]
[107.50000000 131.03216553]
[107.50000000 146.03216553]
[107.50000000 161.03216553]
[107.50000000 176.03216553]
[107.50000000 191.03216553]
[107.50000000 206.03216553]
[107.50000000 221.03216553]
[107.50000000 236.03216553]
[107.50000000 251.03216553]
[122.03988647 255.09347534]
[134.94427490 262.92797852]
[145.25555420 273.95431519]
[152.20857239 287.35424805]
[155.28736877 302.13339233]
[154.26348877 317.19506836]
[149.21287537 331.42160034]
[140.51036072 343.75726318]
[128.80169678 353.28668213]
[114.95575714 359.30270386]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 59]
[24 58]
[25 57]
[26 56]
[27 36]
[28 35]
[29 34]
[60 129]
[61 128]
[62 127]
[63 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
