%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCUAGCAUUACGGGGGGGGGGUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAAxxxxxxxxxxAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACUCGGAUUCUCCCCCCCCCCACCCUAGCAUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.99602509 440.41906738]
[71.72425079 435.60961914]
[58.82027054 427.84423828]
[47.88761520 417.48608398]
[39.43762970 405.01965332]
[33.86553192 391.02804565]
[31.43194199 376.16561890]
[32.25068283 361.12753296]
[36.28345871 346.61715698]
[43.34165192 333.31317139]
[53.09513855 321.83782959]
[65.08772278 312.72784424]
[78.75849915 306.40930176]
[93.46806335 303.17773438]
[93.46806335 288.17773438]
[93.46806335 273.17773438]
[93.46806335 258.17773438]
[93.46806335 243.17773438]
[93.46806335 228.17773438]
[93.46806335 213.17773438]
[93.46806335 198.17773438]
[93.46806335 183.17773438]
[93.46806335 168.17773438]
[81.08614349 156.83410645]
[80.70491028 139.70875549]
[93.04581451 127.34812164]
[92.74568176 112.35112000]
[85.67892456 100.28660583]
[92.25732422 87.94901276]
[91.95719147 72.95201111]
[91.65705872 57.95501709]
[91.20690155 42.96177292]
[90.60675812 27.97378349]
[90.00661469 12.98579311]
[89.40646362 -2.00219631]
[88.80632019 -16.99018478]
[73.80831909 -17.51176071]
[58.89122772 -19.15268707]
[44.13847733 -21.90378571]
[29.63256836 -25.74967384]
[15.45462704 -30.66884041]
[1.68394291 -36.63377762]
[-11.60247231 -43.61112595]
[-24.33031464 -51.56186295]
[-36.42840576 -60.44152832]
[-47.82908249 -70.20045471]
[-58.46859360 -80.78408051]
[-68.28743744 -92.13320160]
[-77.23069000 -104.18435669]
[-85.24835205 -116.87014771]
[-92.29558563 -130.11962891]
[-98.33296204 -143.85870361]
[-103.32673645 -158.01054382]
[-107.24897003 -172.49600220]
[-110.07772827 -187.23405457]
[-111.79719543 -202.14228821]
[-112.39775085 -217.13734436]
[-111.87604523 -232.13534546]
[-110.23498535 -247.05241394]
[-107.48375702 -261.80514526]
[-103.63774109 -276.31103516]
[-98.71845245 -290.48892212]
[-92.75339508 -304.25955200]
[-85.77593231 -317.54589844]
[-77.82508087 -330.27368164]
[-68.94530487 -342.37170410]
[-59.18627548 -353.77227783]
[-48.60256195 -364.41171265]
[-37.25335312 -374.23043823]
[-25.20211792 -383.17358398]
[-12.51625633 -391.19113159]
[0.73328882 -398.23825073]
[14.47241974 -404.27551270]
[28.62430000 -409.26916504]
[43.10978699 -413.19125366]
[57.84786606 -416.01989746]
[72.75612640 -417.73922729]
[87.75118256 -418.33966064]
[102.74917603 -417.81781006]
[117.66623688 -416.17663574]
[132.41894531 -413.42526245]
[146.92477417 -409.57913208]
[161.10263062 -404.65969849]
[174.87321472 -398.69451904]
[188.15950012 -391.71694946]
[200.88720703 -383.76599121]
[212.98513794 -374.88610840]
[224.38565063 -365.12698364]
[235.02497864 -354.54315186]
[244.84361267 -343.19387817]
[253.78665161 -331.14254761]
[261.80410767 -318.45663452]
[268.85107422 -305.20703125]
[274.88821411 -291.46783447]
[279.88174438 -277.31591797]
[283.80374146 -262.83038330]
[286.63223267 -248.09228516]
[288.35144043 -233.18400574]
[288.95172119 -218.18894958]
[288.42974854 -203.19096375]
[286.78842163 -188.27391052]
[284.03695679 -173.52124023]
[280.19067383 -159.01542664]
[275.27111816 -144.83761597]
[269.30581665 -131.06709290]
[262.32812500 -117.78086090]
[254.37705994 -105.05322266]
[245.49707031 -92.95536804]
[235.73783875 -81.55494690]
[225.15393066 -70.91571808]
[213.80455017 -61.09717941]
[201.75315857 -52.15423965]
[189.06715393 -44.13691330]
[175.81748962 -37.09003830]
[162.07824707 -31.05302048]
[147.92628479 -26.05962372]
[133.44073486 -22.13777351]
[118.70259857 -19.30940247]
[103.79431152 -17.59033012]
[104.39445496 -2.60234046]
[104.99459839 12.38564873]
[105.59474182 27.37363815]
[106.19488525 42.36162949]
[109.62408447 48.95620728]
[106.65406036 57.65488434]
[106.95418549 72.65187836]
[107.25431824 87.64888000]
[114.32107544 99.71339417]
[107.74267578 112.05098724]
[108.04280853 127.04798889]
[118.78784943 135.22486877]
[122.78593445 147.91764832]
[118.78574371 160.40521240]
[108.46806335 168.17773438]
[108.46806335 183.17773438]
[108.46806335 198.17773438]
[108.46806335 213.17773438]
[108.46806335 228.17773438]
[108.46806335 243.17773438]
[108.46806335 258.17773438]
[108.46806335 273.17773438]
[108.46806335 288.17773438]
[108.46806335 303.17773438]
[123.17761993 306.40930176]
[136.84838867 312.72784424]
[148.84098816 321.83782959]
[158.59446716 333.31317139]
[165.65266418 346.61715698]
[169.68544006 361.12753296]
[170.50418091 376.16561890]
[168.07058716 391.02804565]
[162.49848938 405.01965332]
[154.04850769 417.48608398]
[143.11584473 427.84423828]
[130.21186829 435.60961914]
[115.94010162 440.41906738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 130]
[27 129]
[29 127]
[30 126]
[31 125]
[32 123]
[33 122]
[34 121]
[35 120]
[36 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
