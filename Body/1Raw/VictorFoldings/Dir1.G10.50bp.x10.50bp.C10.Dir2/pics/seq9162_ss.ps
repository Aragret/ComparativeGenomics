%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUACGGCUCAGGGGGGGGGGACAUUUUUUGUAGCCACAGGCUUCCACGGACUUCACGUCAUUAUUGGCUCxxxxxxxxxxCACUCAUUCAUCGACCUCCCCACCCCAUCCAACAUCUCCGCAUGAUGAAACCCCCCCCCCCUUCGGCUCA\
) } def
/len { sequence length } bind def

/coor [
[53.46858215 397.81155396]
[39.62264633 391.79553223]
[27.91398239 382.26611328]
[19.21145821 369.93041992]
[14.16085720 355.70391846]
[13.13696575 340.64224243]
[16.21576500 325.86306763]
[23.16878700 312.46313477]
[33.48007202 301.43679810]
[46.38445282 293.60229492]
[60.92433929 289.54098511]
[60.92433929 274.54098511]
[60.92433929 259.54098511]
[60.92433929 244.54098511]
[60.92433929 229.54098511]
[60.92433929 214.54098511]
[60.92433929 199.54098511]
[60.92433929 184.54098511]
[60.92433929 169.54098511]
[60.92433929 154.54098511]
[48.06593704 146.81689453]
[34.82334900 153.86203003]
[21.58076477 160.90716553]
[15.53749943 175.76847839]
[0.11038248 180.17115784]
[-12.86622334 170.73785400]
[-13.43777561 154.70498657]
[-1.16582847 144.37159729]
[14.53563023 147.66458130]
[27.77821541 140.61944580]
[41.02080154 133.57431030]
[37.16364288 119.07872009]
[22.17094612 119.54676056]
[7.17824984 120.01480103]
[-7.81444645 120.48284912]
[-23.45720291 127.02046967]
[-34.06967926 113.79882812]
[-24.30257034 99.94097900]
[-8.28248882 105.49015045]
[6.71020746 105.02210999]
[21.70290375 104.55406189]
[36.69559860 104.08602142]
[38.77454376 96.87991333]
[28.37211990 86.07299042]
[42.93243027 82.46769714]
[45.01137543 75.26158905]
[32.57193375 66.87944794]
[20.13249397 58.49730301]
[5.15363646 62.98816681]
[-9.18696976 56.75270081]
[-16.11812782 42.73509979]
[-12.36715698 27.55405235]
[0.29484776 18.37758064]
[15.88927650 19.53853416]
[27.05291557 30.48874855]
[28.51463699 46.05786514]
[40.95407867 54.44000626]
[53.39351654 62.82215118]
[66.61730957 54.35807419]
[80.88554382 50.05678558]
[94.99013519 49.84473801]
[107.84055328 53.32022858]
[118.54740906 59.81095123]
[126.48405457 68.45137024]
[133.93896484 55.43505859]
[141.39387512 42.41874695]
[148.84878540 29.40243912]
[137.03404236 20.11644363]
[126.69731903 9.20910168]
[118.05895996 -3.08709669]
[111.30307007 -16.51005745]
[106.57366180 -30.77366638]
[103.97154999 -45.57389832]
[103.55218506 -60.59528351]
[105.32451630 -75.51763916]
[109.25076294 -90.02289581]
[115.24723053 -103.80187225]
[123.18611145 -116.56086731]
[132.89819336 -128.02792358]
[144.17645264 -137.95861816]
[156.78048706 -146.14129639]
[170.44165039 -152.40150452]
[184.86875916 -156.60585022]
[199.75430298 -158.66467285]
[214.78096008 -158.53413391]
[229.62847900 -156.21697998]
[243.98036194 -151.76261902]
[257.53070068 -145.26599121]
[269.99066162 -136.86557007]
[281.09469604 -126.74042511]
[290.60607910 -115.10636139]
[298.32208252 -102.21135712]
[304.07824707 -88.33027649]
[307.75186157 -73.75899506]
[309.26467896 -58.80809402]
[308.58438110 -43.79626465]
[305.72552490 -29.04347610]
[300.74902344 -14.86418915]
[293.76092529 -1.56063390]
[284.91021729 10.58362293]
[274.38555908 21.30972481]
[262.41125488 30.38904572]
[249.24256897 37.62805939]
[235.16017151 42.87246323]
[220.46421814 46.01047897]
[205.46798706 46.97520828]
[190.49110413 45.74610138]
[175.85279846 42.34934616]
[161.86509705 36.85734940]
[154.41018677 49.87365723]
[146.95527649 62.88996887]
[139.50036621 75.90628052]
[145.13232422 89.80883026]
[159.54454041 93.96672058]
[173.95675659 98.12461090]
[188.36897278 102.28249359]
[201.24543762 93.40948486]
[216.80787659 94.94065094]
[227.70817566 106.15303802]
[228.79954529 121.75248718]
[219.56666565 134.37342834]
[204.36903381 138.05662537]
[190.38250732 131.06298828]
[184.21107483 116.69470978]
[169.79885864 112.53682709]
[155.38664246 108.37893677]
[140.97442627 104.22104645]
[138.46784973 124.85331726]
[125.31682587 143.58563232]
[103.03847504 154.92765808]
[75.92433929 154.54098511]
[75.92433929 169.54098511]
[75.92433929 184.54098511]
[75.92433929 199.54098511]
[75.92433929 214.54098511]
[75.92433929 229.54098511]
[75.92433929 244.54098511]
[75.92433929 259.54098511]
[75.92433929 274.54098511]
[75.92433929 289.54098511]
[90.46422577 293.60229492]
[103.36860657 301.43679810]
[113.67989349 312.46313477]
[120.63291168 325.86306763]
[123.71170807 340.64224243]
[122.68782043 355.70391846]
[117.63721466 369.93041992]
[108.93469238 382.26611328]
[97.22602844 391.79553223]
[83.38009644 397.81155396]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 31]
[22 30]
[23 29]
[32 42]
[33 41]
[34 40]
[35 39]
[46 58]
[47 57]
[48 56]
[64 112]
[65 111]
[66 110]
[67 109]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
