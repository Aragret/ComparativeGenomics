%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUAGCCCGGGGGGGGGGACUUCUUACCACAAGGCACACCUACACCCCUUAUCCCCAUACUAGUUAUUxxxxxxxxxxAUAUUGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGCCCCCCCCCCGGCCUAGCCC\
) } def
/len { sequence length } bind def

/coor [
[62.21290970 346.47204590]
[48.99271393 339.19955444]
[38.10591125 328.75256348]
[30.29478073 315.84332275]
[26.09189796 301.35198975]
[25.78382683 286.26666260]
[29.39156723 271.61584473]
[36.66913986 258.39843750]
[47.12034988 247.51568604]
[60.03261185 239.70953369]
[74.52554321 235.51225281]
[74.21349335 220.51548767]
[73.90143585 205.51873779]
[73.58937836 190.52198792]
[73.27732086 175.52523804]
[72.96526337 160.52847290]
[72.65320587 145.53172302]
[72.34115601 130.53497314]
[72.02909851 115.53821564]
[68.02135468 101.08353424]
[60.56644440 88.06722260]
[53.11153412 75.05091095]
[45.65662384 62.03460312]
[29.75321960 64.18354034]
[14.27650642 60.08781433]
[1.57892442 50.40043259]
[-6.42119217 36.62199402]
[-8.52941036 20.86829948]
[-4.45344734 5.54546690]
[5.15671015 -7.01756191]
[-2.56737494 -19.87596512]
[-17.63935852 -23.80954742]
[-25.28950500 -36.95982742]
[-21.44655228 -51.30442047]
[-29.17063713 -64.16281891]
[-36.89472198 -77.02122498]
[-44.61880875 -89.87962341]
[-52.34289169 -102.73802948]
[-60.06697845 -115.59642792]
[-67.79106140 -128.45483398]
[-81.60270691 -122.54279327]
[-96.09075165 -118.56657410]
[-110.98529053 -116.60024261]
[-126.00885010 -116.68044281]
[-140.88154602 -118.80567169]
[-155.32632446 -122.93634033]
[-169.07406616 -128.99549866]
[-181.86866760 -136.87025452]
[-193.47177124 -146.41392517]
[-203.66722107 -157.44871521]
[-212.26509094 -169.76902771]
[-219.10519409 -183.14538574]
[-224.06011963 -197.32856750]
[-227.03753662 -212.05435181]
[-227.98199463 -227.04840088]
[-226.87588501 -242.03140259]
[-223.73983765 -256.72421265]
[-218.63226318 -270.85314941]
[-211.64830017 -284.15493774]
[-202.91807556 -296.38183594]
[-192.60420227 -307.30603027]
[-180.89884949 -316.72402954]
[-168.02006531 -324.46035767]
[-154.20777893 -330.37088013]
[-139.71931458 -334.34555054]
[-124.82456207 -336.31027222]
[-109.80101013 -336.22842407]
[-94.92854309 -334.10159302]
[-80.48422241 -329.96936035]
[-66.73712921 -323.90872192]
[-53.94338226 -316.03259277]
[-42.34130859 -306.48764038]
[-32.14704514 -295.45175171]
[-23.55051422 -283.13049316]
[-16.71185684 -269.75341797]
[-11.75847626 -255.56970215]
[-8.78264904 -240.84359741]
[-7.83981466 -225.84944153]
[-8.94753647 -210.86656189]
[-12.08517933 -196.17407227]
[-17.19429016 -182.04571533]
[-24.17968750 -168.74465942]
[-32.91124344 -156.51870728]
[-43.22628784 -145.59564209]
[-54.93265915 -136.17892456]
[-47.20857620 -123.32051849]
[-39.48448944 -110.46211243]
[-31.76040459 -97.60371399]
[-24.03631973 -84.74530792]
[-16.31223488 -71.88690948]
[-8.58815002 -59.02850342]
[5.88075733 -55.68391037]
[13.89725018 -42.75369263]
[10.29102707 -27.60004997]
[18.01511192 -14.74164677]
[31.83898163 -17.34251595]
[45.74818420 -15.05326080]
[58.06148911 -8.12984371]
[67.28347015 2.61038804]
[72.28612518 15.88514328]
[72.44681549 30.10026932]
[67.72567749 43.54118347]
[58.67293549 54.57969284]
[66.12784576 67.59600067]
[73.58275604 80.61231232]
[81.03766632 93.62862396]
[89.27354431 84.14115906]
[101.04664612 81.74259186]
[111.35050201 86.77363586]
[116.20791626 96.55181885]
[130.70350647 100.40897369]
[145.19911194 104.26613617]
[159.69470215 108.12329102]
[174.19030762 111.98045349]
[183.35464478 111.16387939]
[188.94572449 116.07157135]
[203.35794067 120.22946167]
[217.77015686 124.38735199]
[234.66461182 122.96842957]
[240.70494080 138.80986023]
[227.15472412 148.99946594]
[213.61225891 138.79956055]
[199.20004272 134.64167786]
[184.78782654 130.48379517]
[170.33314514 126.47605133]
[155.83755493 122.61888885]
[141.34194946 118.76173401]
[126.84635162 114.90457153]
[112.35075378 111.04741669]
[101.23651123 118.24552917]
[87.02584839 115.22616577]
[87.33790588 130.22291565]
[87.64996338 145.21966553]
[87.96202087 160.21643066]
[88.27407837 175.21318054]
[88.58612823 190.20993042]
[88.89818573 205.20668030]
[89.21024323 220.20344543]
[89.52230072 235.20019531]
[104.17729187 238.79095459]
[117.40309906 246.05322266]
[128.29797363 256.49182129]
[136.11906433 269.39501953]
[140.33312988 283.88308716]
[140.65286255 298.96820068]
[137.05642700 313.62179565]
[129.78906250 326.84478760]
[119.34626770 337.73562622]
[106.44004059 345.55175781]
[91.95034790 349.76022339]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 106]
[21 105]
[22 104]
[23 103]
[30 95]
[31 94]
[34 91]
[35 90]
[36 89]
[37 88]
[38 87]
[39 86]
[40 85]
[110 129]
[111 128]
[112 127]
[113 126]
[114 125]
[116 124]
[117 123]
[118 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
