%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCCCUCAGGGGGGGGGGGUAAGUUGCAAUACUUAAUUUCUGUAACAGCUAAGGACUGCAAAACCCCAxxxxxxxxxxAUAUUUACCACAACACAAUGGGGCUCACUCACCCACCACAUUAACAACAUCCCCCCCCCCAAAACCCUCA\
) } def
/len { sequence length } bind def

/coor [
[82.97461700 344.98709106]
[69.75441742 337.71463013]
[58.86761475 327.26763916]
[51.05648422 314.35836792]
[46.85360336 299.86706543]
[46.54553223 284.78173828]
[50.15327072 270.13088989]
[57.43084335 256.91351318]
[67.88204956 246.03074646]
[80.79431152 238.22459412]
[95.28725433 234.02731323]
[94.97519684 219.03056335]
[94.66313934 204.03381348]
[94.35108185 189.03704834]
[94.03902435 174.04029846]
[93.72696686 159.04354858]
[93.41491699 144.04679871]
[93.10285950 129.05003357]
[92.79080200 114.05328369]
[86.30263519 100.52909851]
[74.80083466 90.90057373]
[63.29903030 81.27204132]
[51.79722595 71.64351654]
[40.29542160 62.01499176]
[28.79361916 52.38646698]
[15.55103302 45.34133148]
[1.13881683 41.18344498]
[-13.27339935 37.02555466]
[-27.68561554 32.86766815]
[-42.09783173 28.70978165]
[-57.50195694 32.31858444]
[-67.58578491 21.35657310]
[-82.98990631 24.96537781]
[-93.07373047 14.00336361]
[-107.48594666 9.84547615]
[-121.89816284 5.68758917]
[-136.31037903 1.52970171]
[-145.76504517 13.43254662]
[-159.05746460 20.80682564]
[-174.16064453 22.52801514]
[-188.77145386 18.33364677]
[-200.66184998 8.86332989]
[-208.01863098 -4.43878031]
[-209.71995544 -19.54420853]
[-205.50637817 -34.14948654]
[-196.02041626 -46.02741623]
[-182.70864868 -53.36669540]
[-167.60099792 -55.04814529]
[-153.00126648 -50.81534958]
[-141.13583374 -41.31378555]
[-133.81407166 -27.99236679]
[-132.15249634 -12.88251400]
[-117.74028015 -8.72462654]
[-103.32806396 -4.56673956]
[-88.91584778 -0.40885213]
[-74.54257965 -4.31505728]
[-63.42789459 6.94435644]
[-49.05462646 3.03815103]
[-37.93994522 14.29756451]
[-23.52772713 18.45545197]
[-9.11551189 22.61334038]
[5.29670429 26.77122688]
[19.70891953 30.92911530]
[9.56087017 19.88298035]
[2.86437535 6.46072435]
[0.14203636 -8.29016972]
[1.60630679 -23.21852875]
[7.14291382 -37.15933228]
[16.31977463 -49.02462769]
[28.42072296 -57.88843536]
[42.50138474 -63.05901718]
[57.46289825 -64.13285828]
[72.13764954 -61.02614975]
[85.38041687 -53.98134995]
[96.15771484 -43.54823685]
[103.62847137 -30.54101753]
[107.20967102 -15.97478962]
[106.62183380 -0.98631299]
[101.91082764 13.25469971]
[93.44431305 25.63686562]
[81.88301086 35.19387436]
[68.12918854 41.17988205]
[53.25619507 43.12774277]
[38.42214584 40.88466263]
[49.92394638 50.51318741]
[61.42575073 60.14171600]
[72.92755890 69.77024078]
[84.42935944 79.39876556]
[95.93115997 89.02729034]
[90.45354462 75.06320953]
[88.01712799 60.26240158]
[95.28569794 47.14112854]
[109.12545013 41.35655594]
[123.56944275 45.40267563]
[132.39022827 57.53502655]
[131.78546143 72.52101898]
[119.89923859 81.67076874]
[134.71699524 79.33966064]
[149.53475952 77.00856018]
[164.35250854 74.67745209]
[176.78259277 64.88951874]
[190.55766296 70.55490875]
[205.37542725 68.22380066]
[209.73094177 53.59532928]
[220.00852966 42.31109619]
[234.16757202 36.61159897]
[249.39677429 37.62847137]
[262.67236328 45.15982056]
[271.35848999 57.71028519]
[273.73046875 72.78796387]
[269.31738281 87.39916992]
[258.99545288 98.64284515]
[244.81407166 104.28654480]
[229.58898926 103.20970154]
[216.34315491 95.62613678]
[207.70652771 83.04156494]
[192.88876343 85.37266541]
[181.51855469 94.99386597]
[166.68362427 89.49521637]
[151.86585999 91.82631683]
[137.04809570 94.15742493]
[122.23034668 96.48852539]
[137.12445068 94.70926666]
[150.44479370 101.60624695]
[157.58824158 114.79605865]
[156.08621216 129.72067261]
[146.45776367 141.22253418]
[132.03022766 145.32693481]
[117.78935242 140.61550903]
[108.65640259 128.71638489]
[107.78755188 113.74123383]
[108.09960938 128.73799133]
[108.41166687 143.73474121]
[108.72372437 158.73149109]
[109.03578186 173.72824097]
[109.34783936 188.72500610]
[109.65988922 203.72175598]
[109.97194672 218.71850586]
[110.28400421 233.71525574]
[124.93899536 237.30603027]
[138.16481018 244.56828308]
[149.05967712 255.00688171]
[156.88076782 267.91009521]
[161.09484863 282.39816284]
[161.41456604 297.48324585]
[157.81813049 312.13687134]
[150.55076599 325.35986328]
[140.10797119 336.25070190]
[127.20174408 344.06680298]
[112.71205139 348.27529907]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 89]
[21 88]
[22 87]
[23 86]
[24 85]
[25 84]
[26 63]
[27 62]
[28 61]
[29 60]
[30 59]
[32 57]
[34 55]
[35 54]
[36 53]
[37 52]
[97 122]
[98 121]
[99 120]
[100 119]
[102 117]
[103 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
