%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUGACAACAGGGGGGGGGGGAGGCUUACGACCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUxxxxxxxxxxCCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGCCCCCCCCCCUCUAACAACA\
) } def
/len { sequence length } bind def

/coor [
[83.91352844 373.94482422]
[69.42383575 369.73635864]
[56.51760483 361.92022705]
[46.07480621 351.02938843]
[38.80744171 337.80639648]
[35.21101379 323.15280151]
[35.53073502 308.06768799]
[39.74480820 293.57962036]
[47.56590271 280.67642212]
[58.46077347 270.23782349]
[71.68658447 262.97555542]
[86.34157562 259.38479614]
[86.65363312 244.38804626]
[86.96568298 229.39128113]
[87.27774048 214.39453125]
[87.58979797 199.39778137]
[87.90185547 184.40103149]
[88.21391296 169.40426636]
[88.52597046 154.40751648]
[88.83802032 139.41076660]
[89.15007782 124.41400909]
[76.88771057 115.77489471]
[62.87099838 121.11640930]
[48.85428619 126.45792389]
[45.78266525 141.57641602]
[35.00861740 152.61830139]
[19.97009850 156.06018066]
[5.46584511 150.80372620]
[-3.87588787 138.52629089]
[-5.07418728 123.14553833]
[2.25332022 109.56941223]
[15.76845360 102.13000488]
[31.15858269 103.20121002]
[43.51277161 112.44120789]
[57.52948380 107.09969330]
[71.54619598 101.75817871]
[56.68053436 99.75516510]
[45.41188431 89.85478973]
[41.51183319 75.37067413]
[46.28571320 61.15061188]
[58.13572693 51.95402527]
[73.09570312 50.85897827]
[86.15858459 58.23197937]
[92.95263672 71.60746002]
[88.64505768 57.23928070]
[81.32595062 44.14612579]
[71.34322357 32.95035934]
[55.80243683 31.89125824]
[45.83802032 20.39495087]
[46.94348145 5.58571339]
[36.96075821 -5.61005259]
[26.97802925 -16.80581856]
[12.14466286 -13.03357601]
[-2.73998284 -16.59811020]
[-14.25552559 -26.68031502]
[-19.75577736 -40.96337509]
[-17.97681999 -56.16514969]
[-9.32744503 -68.79238129]
[4.20478296 -75.94342041]
[19.51025963 -75.97501373]
[33.07189560 -68.87990570]
[41.77332687 -56.28849030]
[43.61503220 -41.09419250]
[38.17379761 -26.78854561]
[48.15652084 -15.59277916]
[58.13924789 -4.39701319]
[72.97785950 -3.80433846]
[83.26125336 7.40755224]
[82.53898621 22.96763229]
[92.52171326 34.16339874]
[89.79300690 19.41368103]
[91.06867981 4.46802521]
[96.25761414 -9.60588646]
[104.98911285 -21.80264473]
[116.63941956 -31.25093842]
[130.37626648 -37.27580643]
[145.21832275 -39.44683838]
[160.10530090 -37.60894775]
[173.97370911 -31.89342308]
[185.83282471 -22.70857430]
[194.83544922 -10.71054363]
[200.33847046 3.24355459]
[201.94873047 18.15687180]
[199.55123901 32.96403122]
[193.31724548 46.60724640]
[183.69209290 58.11186981]
[171.36337280 66.65604401]
[157.21183777 71.62938690]
[142.24844360 72.67661285]
[127.54212952 69.72290802]
[114.14348602 62.97929382]
[103.01323700 52.93169403]
[107.32082367 67.29988098]
[120.56340790 74.34501648]
[134.88600159 69.88819885]
[142.27935791 56.17775726]
[156.86799622 51.86194611]
[169.89323425 58.99486542]
[184.21583557 54.53805161]
[198.53843689 50.08123398]
[201.24060059 35.01614761]
[210.64349365 22.93955040]
[224.58639526 16.62656212]
[239.86535645 17.52785873]
[252.96934509 25.43632889]
[260.88717651 38.53466415]
[261.79940796 53.81296539]
[255.49639893 67.76038361]
[243.42652893 77.17191315]
[228.36337280 79.88484955]
[213.76834106 75.27577972]
[202.99525452 64.40383148]
[188.67265320 68.86064911]
[174.35005188 73.31746674]
[167.67182922 86.58158875]
[153.21017456 91.30546570]
[139.34281921 84.21079254]
[125.02022552 88.66761017]
[123.77335358 103.61569977]
[137.15963745 110.38381195]
[150.54591370 117.15192413]
[163.93220520 123.92004395]
[180.26719666 122.47091675]
[189.46693420 136.04650879]
[182.06752014 150.68142700]
[165.68083191 151.32051086]
[157.16409302 137.30632019]
[143.77780151 130.53820801]
[130.39152527 123.77009583]
[117.00523376 117.00198364]
[104.14683533 124.72606659]
[103.83477783 139.72282410]
[103.52272034 154.71957397]
[103.21066284 169.71632385]
[102.89860535 184.71308899]
[102.58655548 199.70983887]
[102.27449799 214.70658875]
[101.96244049 229.70333862]
[101.65038300 244.70010376]
[101.33832550 259.69683838]
[115.83126068 263.89413452]
[128.74353027 271.70028687]
[139.19473267 282.58303833]
[146.47230530 295.80044556]
[150.08004761 310.45126343]
[149.77197266 325.53659058]
[145.56909180 340.02792358]
[137.75796509 352.93716431]
[126.87116241 363.38415527]
[113.65096283 370.65664673]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 36]
[23 35]
[24 34]
[44 93]
[45 92]
[46 70]
[47 69]
[50 66]
[51 65]
[52 64]
[94 118]
[95 117]
[98 114]
[99 113]
[100 112]
[119 130]
[120 129]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
