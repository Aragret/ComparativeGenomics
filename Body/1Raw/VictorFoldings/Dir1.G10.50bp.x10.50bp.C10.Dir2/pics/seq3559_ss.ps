%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUACUAUGGGGGGGGGGGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCUCxxxxxxxxxxGCCUCACACUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCCCCCCCCCCCUUGUACUAU\
) } def
/len { sequence length } bind def

/coor [
[7.02859640 263.37878418]
[-1.67603576 258.10848999]
[-10.08272457 252.37489319]
[-18.16683578 246.19477844]
[-25.90468025 239.58625793]
[-33.27358246 232.56871033]
[-40.25195312 225.16270447]
[-46.81933975 217.38992310]
[-58.89933014 226.28227234]
[-70.97931671 235.17462158]
[-83.05930328 244.06697083]
[-95.13928986 252.95932007]
[-107.21928406 261.85168457]
[-119.29927063 270.74401855]
[-131.28610229 279.76156616]
[-143.17848206 288.90328979]
[-155.07086182 298.04501343]
[-166.96324158 307.18676758]
[-178.85562134 316.32849121]
[-190.74800110 325.47021484]
[-199.62072754 339.91705322]
[-215.95919800 335.39035034]
[-216.13233948 318.43728638]
[-199.88973999 313.57785034]
[-187.99736023 304.43609619]
[-176.10498047 295.29437256]
[-164.21260071 286.15264893]
[-152.32022095 277.01089478]
[-140.42784119 267.86917114]
[-137.01950073 261.25637817]
[-128.19161987 258.66403198]
[-116.11163330 249.77168274]
[-104.03164673 240.87933350]
[-91.95165253 231.98698425]
[-79.87166595 223.09463501]
[-67.79167938 214.20228577]
[-55.71168900 205.30993652]
[-72.33361053 175.08287048]
[-83.15213776 142.32737732]
[-87.80294800 108.14648438]
[-86.12942505 73.69125366]
[-78.18791962 40.12197876]
[-92.20463562 34.78046799]
[-106.22135162 29.43895531]
[-122.31756592 32.57645416]
[-132.87724304 20.02953148]
[-127.03749084 4.70538902]
[-110.80574799 2.36818862]
[-100.87983704 15.42224216]
[-86.86312103 20.76375389]
[-72.84641266 26.10526657]
[-66.22336578 12.21557713]
[-58.48646545 -1.08587134]
[-49.68754578 -13.70994473]
[-39.88557434 -25.57204819]
[-29.14622879 -36.59269714]
[-17.54147720 -46.69803619]
[-5.14908123 -55.82035828]
[7.94791746 -63.89852524]
[21.66175461 -70.87841034]
[35.90053558 -76.71324921]
[50.56884766 -81.36392975]
[65.56839752 -84.79929352]
[80.79867554 -86.99631500]
[79.86304474 -101.96710968]
[78.92741394 -116.93789673]
[77.99179077 -131.90869141]
[63.70553589 -137.18344116]
[52.80436325 -147.81755066]
[47.17695999 -161.96859741]
[47.79830933 -177.18482971]
[54.56075668 -190.82994080]
[66.29267120 -200.53984070]
[80.96142578 -204.63221741]
[96.02556610 -202.39805603]
[108.87514496 -194.22442627]
[117.28388977 -181.52746582]
[119.79493713 -166.50700378]
[115.97323608 -151.76541138]
[106.48091888 -139.85676575]
[92.96257782 -132.84431458]
[93.89820862 -117.87352753]
[94.83383179 -102.90273285]
[95.76946259 -87.93194580]
[105.94514465 -87.88552094]
[116.10340881 -87.28852844]
[126.21448517 -86.14272308]
[136.24873352 -84.45146179]
[146.17677307 -82.21969604]
[155.96949768 -79.45397186]
[165.59820557 -76.16239166]
[175.03469849 -72.35459137]
[184.25132751 -68.04174805]
[193.22105408 -63.23648071]
[201.91761780 -57.95288086]
[210.31553650 -52.20642853]
[218.39018250 -46.01396179]
[226.11791992 -39.39362717]
[233.47608948 -32.36482620]
[240.44313049 -24.94815445]
[246.99862671 -17.16534424]
[253.12336731 -9.03920174]
[258.79940796 -0.59354001]
[264.01013184 8.14689255]
[268.74023438 17.15648460]
[272.97586060 26.40883446]
[276.70465088 35.87683105]
[279.91561890 45.53272629]
[282.59936523 55.34822845]
[284.74807739 65.29457855]
[286.35537720 75.34262085]
[287.41662598 85.46292114]
[287.92864990 95.62581635]
[287.89001465 105.80153656]
[287.30078125 115.96025085]
[286.16271973 126.07219696]
[284.47912598 136.10774231]
[282.25494385 146.03747559]
[279.49670410 155.83232117]
[276.21246338 165.46354675]
[272.41189575 174.90293884]
[268.10607910 184.12284851]
[263.30767822 193.09625244]
[258.03073120 201.79685974]
[252.29069519 210.19915771]
[246.10441589 218.27854919]
[239.48999023 226.01133728]
[232.46681213 233.37487793]
[225.05546570 240.34757996]
[217.27766418 246.90902710]
[209.15620422 253.03997803]
[200.71488953 258.72247314]
[191.97843933 263.93984985]
[182.97247314 268.67684937]
[173.72335815 272.91958618]
[164.25820923 276.65557861]
[154.60478210 279.87393188]
[144.79132080 282.56518555]
[134.84661865 284.72146606]
[124.79981232 286.33648682]
[114.68032837 287.40545654]
[104.51782227 287.92526245]
[94.34207916 287.89437866]
[84.18292236 287.31292725]
[74.07010651 286.18258667]
[64.03327179 284.50665283]
[54.10183716 282.29006958]
[44.30489731 279.53933716]
[34.67116165 276.26245117]
[25.22886276 272.46908569]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[8 37]
[9 36]
[10 35]
[11 34]
[12 33]
[13 32]
[14 31]
[15 29]
[16 28]
[17 27]
[18 26]
[19 25]
[20 24]
[42 51]
[43 50]
[44 49]
[64 84]
[65 83]
[66 82]
[67 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
