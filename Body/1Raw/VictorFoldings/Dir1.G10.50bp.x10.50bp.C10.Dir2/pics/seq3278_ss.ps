%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACCUCCUACUCGGGGGGGGGGCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGxxxxxxxxxxUUUACCUUUCACUUCAUCUUGCCCUUCAUUAUUGCAGCCCUAGCAACACUCCCCCCCCCCCCACCUCCUAUUC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 424.46762085]
[70.75619507 419.65820312]
[57.85220718 411.89279175]
[46.91955185 401.53466797]
[38.46956635 389.06823730]
[32.89747238 375.07659912]
[30.46388245 360.21417236]
[31.28262329 345.17608643]
[35.31539917 330.66574097]
[42.37359238 317.36175537]
[52.12707901 305.88641357]
[64.11966705 296.77639771]
[77.79044342 290.45785522]
[92.50000000 287.22631836]
[92.50000000 272.22631836]
[92.50000000 257.22631836]
[92.50000000 242.22630310]
[92.50000000 227.22630310]
[92.50000000 212.22630310]
[92.50000000 197.22630310]
[92.50000000 182.22630310]
[92.50000000 167.22630310]
[92.50000000 152.22630310]
[69.41402435 144.69349670]
[51.60220337 127.27140045]
[43.14041901 103.16593933]
[28.15918541 103.91600800]
[13.17794991 104.66607666]
[-1.80328465 105.41614532]
[-16.78451920 106.16621399]
[-31.76575470 106.91628265]
[-37.21710205 121.13607788]
[-47.98546219 131.90466309]
[-62.20515060 137.35629272]
[-77.41252136 136.54646301]
[-90.97280121 129.61547852]
[-100.53659058 117.76415253]
[-104.44691467 103.04582214]
[-102.02627563 88.01051331]
[-93.69406128 75.26319885]
[-80.89389038 67.01241302]
[-65.84346008 64.68766022]
[-51.15035248 68.69171906]
[-39.36023712 78.33085632]
[-32.51582336 91.93504333]
[-17.53458786 91.18497467]
[-2.55335212 90.43490601]
[12.42788315 89.68484497]
[27.40911674 88.93477631]
[42.39035416 88.18470764]
[47.25337219 73.99488831]
[35.88146591 64.21327972]
[24.50955963 54.43167877]
[13.13765430 44.65007782]
[1.76574802 34.86847687]
[-14.18518639 29.12356186]
[-13.08044529 12.20564651]
[3.48213458 8.58386898]
[11.54735088 23.49656868]
[22.91925621 33.27817154]
[34.29116440 43.05977249]
[45.66307068 52.84137726]
[57.03497696 62.62297821]
[65.38931274 55.65849304]
[74.80662537 50.48868942]
[84.91313934 47.26060867]
[95.31846619 46.04545212]
[105.63063812 46.83767319]
[115.47086334 49.55706406]
[121.86298370 35.98721695]
[128.25511169 22.41736794]
[115.89214325 13.86126232]
[105.10618591 3.38686514]
[96.19149017 -8.72007561]
[89.39125061 -22.12927437]
[84.89098358 -36.47491837]
[82.81345367 -51.36564255]
[83.21535492 -66.39522552]
[86.08570862 -81.15364838]
[91.34621429 -95.23828125]
[98.85335541 -108.26489258]
[108.40234375 -119.87810516]
[119.73266602 -129.76110840]
[132.53521729 -137.64427185]
[146.46075439 -143.31256104]
[161.12936401 -146.61131287]
[176.14088440 -147.45054626]
[191.08576965 -145.80737305]
[205.55633545 -141.72662354]
[219.15780640 -135.31959534]
[231.51911926 -126.76111603]
[242.30307007 -116.28463745]
[251.21542358 -104.17597961]
[258.01309204 -90.76547241]
[262.51058960 -76.41896057]
[264.58523560 -61.52783585]
[264.18045044 -46.49833298]
[261.30725098 -31.74046707]
[256.04403687 -17.65684509]
[248.53437805 -4.63167858]
[238.98315430 6.97969580]
[227.65093994 16.86051178]
[214.84686279 24.74121475]
[200.92022705 30.40681076]
[186.25099182 33.70273972]
[171.23931885 34.53908539]
[156.29473877 32.89303207]
[141.82495117 28.80948830]
[135.43283081 42.37933731]
[129.04071045 55.94918442]
[137.32838440 62.71154785]
[144.08187866 71.00646210]
[149.02360535 80.49299622]
[151.95048523 90.78127289]
[152.74220276 101.44843292]
[167.52575684 103.98744202]
[182.30929565 106.52645111]
[197.09284973 109.06546021]
[208.90940857 98.82324219]
[224.54573059 98.62447357]
[236.61882019 108.56300354]
[239.42814636 123.94616699]
[231.64721680 137.51049805]
[216.94996643 142.85134888]
[202.27597046 137.44691467]
[194.55384827 123.84901428]
[179.77029419 121.31000519]
[164.98674011 118.77099609]
[150.20318604 116.23198700]
[145.36785889 126.93688202]
[138.28395081 136.30670166]
[129.30258179 143.87705994]
[118.86888885 149.27273560]
[107.50000000 152.22630310]
[107.50000000 167.22630310]
[107.50000000 182.22630310]
[107.50000000 197.22630310]
[107.50000000 212.22630310]
[107.50000000 227.22630310]
[107.50000000 242.22630310]
[107.50000000 257.22631836]
[107.50000000 272.22631836]
[107.50000000 287.22631836]
[122.20955658 290.45785522]
[135.88034058 296.77639771]
[147.87292480 305.88641357]
[157.62640381 317.36175537]
[164.68460083 330.66574097]
[168.71737671 345.17608643]
[169.53611755 360.21417236]
[167.10252380 375.07659912]
[161.53042603 389.06823730]
[153.08044434 401.53466797]
[142.14779663 411.89279175]
[129.24380493 419.65820312]
[114.97203827 424.46762085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 50]
[27 49]
[28 48]
[29 47]
[30 46]
[31 45]
[51 63]
[52 62]
[53 61]
[54 60]
[55 59]
[69 110]
[70 109]
[71 108]
[115 129]
[116 128]
[117 127]
[118 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
