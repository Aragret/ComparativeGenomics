%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUACUAGUCGGGGGGGGGGUUUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCxxxxxxxxxxGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCAACCCCCCCCCCCAUACUAGUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 399.99758911]
[71.19830322 393.98156738]
[59.48964310 384.45214844]
[50.78712082 372.11648560]
[45.73651886 357.88995361]
[44.71262741 342.82827759]
[47.79142761 328.04910278]
[54.74444962 314.64916992]
[65.05573273 303.62283325]
[77.96011353 295.78833008]
[92.50000000 291.72702026]
[92.50000000 276.72702026]
[92.50000000 261.72702026]
[92.50000000 246.72702026]
[92.50000000 231.72702026]
[92.50000000 216.72702026]
[92.50000000 201.72702026]
[92.50000000 186.72702026]
[92.50000000 171.72702026]
[92.50000000 156.72702026]
[92.50000000 141.72702026]
[92.50000000 126.72702789]
[80.61003113 124.83159637]
[69.38143158 117.46826172]
[54.61537933 120.10712433]
[39.84932327 122.74598694]
[25.08326721 125.38485718]
[10.31721115 128.02371216]
[2.35926819 132.64140320]
[-4.78325653 130.56054688]
[-19.60101509 132.89164734]
[-34.41877365 135.22274780]
[-49.12582397 143.65713501]
[-61.30191422 131.85971069]
[-53.33621597 116.89362335]
[-36.74987793 120.40499115]
[-21.93211937 118.07388306]
[-7.11436033 115.74278259]
[7.67834663 113.25765991]
[22.44440269 110.61879730]
[37.21045685 107.97993469]
[51.97651291 105.34107208]
[66.74256897 102.70220947]
[68.91940308 87.86100006]
[55.53311920 81.09288788]
[42.14683533 74.32476807]
[28.76055145 67.55665588]
[11.89725399 65.80578613]
[8.91147327 49.11682510]
[24.12167740 41.62776566]
[35.52866745 54.17037201]
[48.91495132 60.93848419]
[62.30123520 67.70660400]
[75.68752289 74.47471619]
[83.28951263 70.67414093]
[91.24766541 68.95580292]
[99.02629852 69.25936127]
[106.14112854 71.39404297]
[112.18935394 75.06000519]
[122.17208099 63.86423492]
[132.15481567 52.66847229]
[142.13754272 41.47270584]
[131.98237610 30.41596794]
[122.97859955 18.40303421]
[115.21568298 5.55329990]
[108.77077484 -8.00552845]
[103.70793915 -22.13869095]
[100.07748413 -36.70572281]
[97.91550446 -51.56184769]
[97.24347687 -66.55941772]
[98.06808472 -81.54936218]
[100.38113403 -96.38272095]
[104.15962982 -110.91205597]
[109.36602783 -124.99296570]
[115.94857788 -138.48550415]
[123.84185028 -151.25558472]
[132.96740723 -163.17626953]
[143.23455811 -174.12908936]
[154.54124451 -184.00520325]
[166.77510071 -192.70643616]
[179.81452942 -200.14630127]
[193.52995300 -206.25088501]
[207.78503418 -210.95948792]
[222.43812561 -214.22534180]
[237.34356689 -216.01596069]
[252.35324097 -216.31355286]
[267.31793213 -215.11517334]
[282.08895874 -212.43272400]
[296.51950073 -208.29287720]
[310.46612549 -202.73675537]
[323.79019165 -195.81958008]
[336.35934448 -187.61012268]
[348.04861450 -178.18997192]
[358.74185181 -167.65272522]
[368.33276367 -156.10313416]
[376.72601318 -143.65597534]
[383.83822632 -130.43495178]
[389.59866333 -116.57148743]
[393.95013428 -102.20334625]
[396.84933472 -87.47333527]
[398.26745605 -72.52784729]
[398.19046021 -57.51543045]
[396.61904907 -42.58528519]
[393.56887817 -27.88579369]
[389.07022095 -13.56305504]
[383.16784668 0.24058379]
[375.92037964 13.38793182]
[367.39984131 25.74832153]
[357.69094849 37.19890594]
[346.89016724 47.62588120]
[335.10485840 56.92561340]
[322.45214844 65.00568390]
[309.05776978 71.78577423]
[295.05490112 77.19851685]
[280.58264160 81.19009399]
[265.78488159 83.72085571]
[250.80867004 84.76563263]
[235.80284119 84.31405640]
[220.91654968 82.37059784]
[206.29774475 78.95458984]
[192.09172058 74.09996796]
[178.43965149 67.85498810]
[165.47723389 60.28172302]
[153.33329773 51.45543289]
[143.35057068 62.65119553]
[133.36784363 73.84696198]
[123.38512421 85.04273224]
[125.93969727 109.88513947]
[107.50000000 126.72702789]
[107.50000000 141.72702026]
[107.50000000 156.72702026]
[107.50000000 171.72702026]
[107.50000000 186.72702026]
[107.50000000 201.72702026]
[107.50000000 216.72702026]
[107.50000000 231.72702026]
[107.50000000 246.72702026]
[107.50000000 261.72702026]
[107.50000000 276.72702026]
[107.50000000 291.72702026]
[122.03988647 295.78833008]
[134.94427490 303.62283325]
[145.25555420 314.64916992]
[152.20857239 328.04910278]
[155.28736877 342.82827759]
[154.26348877 357.88995361]
[149.21287537 372.11648560]
[140.51036072 384.45214844]
[128.80169678 393.98156738]
[114.95575714 399.99758911]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 43]
[25 42]
[26 41]
[27 40]
[28 39]
[30 38]
[31 37]
[32 36]
[44 54]
[45 53]
[46 52]
[47 51]
[59 127]
[60 126]
[61 125]
[62 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
