%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:47 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUUUCCUGGGGGGGGGGUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCACAACAAAACxxxxxxxxxxGUGAUAUAUAAACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACCCCCCCCCCCUCAUCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[83.78182983 383.78012085]
[70.56163025 376.50765991]
[59.67482758 366.06063843]
[51.86369705 353.15139771]
[47.66081619 338.66009521]
[47.35274506 323.57473755]
[50.96048737 308.92391968]
[58.23806000 295.70654297]
[68.68927002 284.82376099]
[81.60153198 277.01760864]
[96.09446716 272.82034302]
[95.78240967 257.82357788]
[95.47035217 242.82682800]
[95.15829468 227.83006287]
[94.84623718 212.83331299]
[94.53418732 197.83656311]
[94.22212982 182.83981323]
[93.91007233 167.84304810]
[93.59801483 152.84629822]
[93.28595734 137.84954834]
[92.97389984 122.85279083]
[92.66184998 107.85604095]
[87.90803528 93.62926483]
[79.14182281 81.45742798]
[70.37561798 69.28559113]
[61.60940933 57.11375046]
[48.69222260 64.75917053]
[35.14169693 71.21591949]
[21.06694221 76.43199921]
[6.58127832 80.36541748]
[-8.19866180 82.98449707]
[-23.15387726 84.26816559]
[-38.16395187 84.20606995]
[-53.10803604 82.79872894]
[-67.86579895 80.05745697]
[-82.31842804 76.00432587]
[-96.34954834 70.67198181]
[-109.84619141 64.10335541]
[-122.69968414 56.35132980]
[-134.80654907 47.47832108]
[-146.06927490 37.55577087]
[-156.39721680 26.66357613]
[-165.70719910 14.88943195]
[-173.92427063 2.32813883]
[-180.98225403 -10.91916466]
[-186.82434082 -24.74581528]
[-191.40348816 -39.04048920]
[-194.68281555 -53.68809128]
[-196.63592529 -68.57068634]
[-197.24710083 -83.56844330]
[-196.51141357 -98.56060791]
[-194.43478394 -113.42646790]
[-191.03393555 -128.04634094]
[-186.33625793 -142.30249023]
[-180.37956238 -156.08015442]
[-173.21180725 -169.26840210]
[-164.89073181 -181.76101685]
[-155.48329163 -193.45745850]
[-145.06526184 -204.26351929]
[-133.72052002 -214.09219360]
[-121.54040527 -222.86436462]
[-108.62298584 -230.50939941]
[-95.07226562 -236.96572876]
[-80.99735260 -242.18138123]
[-66.51156616 -246.11434937]
[-51.73154449 -248.73298645]
[-36.77629089 -250.01618958]
[-21.76621628 -249.95364380]
[-6.82217693 -248.54583740]
[7.93550587 -245.80412292]
[22.38801003 -241.75054932]
[36.41896820 -236.41778564]
[49.91540909 -229.84873962]
[62.76866531 -222.09632874]
[74.87525177 -213.22294617]
[86.13768768 -203.30004883]
[96.46529388 -192.40754700]
[105.77491760 -180.63311768]
[113.99160004 -168.07156372]
[121.04917908 -154.82405090]
[126.89084625 -140.99722290]
[131.46954346 -126.70240784]
[134.74842834 -112.05470276]
[136.70109558 -97.17205048]
[137.31181335 -82.17427826]
[136.57565308 -67.18212891]
[134.49858093 -52.31633377]
[131.09729004 -37.69657135]
[126.39916992 -23.44055748]
[120.44205475 -9.66307449]
[113.27390289 3.52494550]
[104.95243835 16.01731873]
[95.54464722 27.71346283]
[85.12628937 38.51920700]
[73.78125000 48.34754562]
[82.54745483 60.51938248]
[91.31365967 72.69121552]
[100.07987213 84.86305237]
[99.11833191 69.89390564]
[101.13272095 55.02977753]
[106.04365540 40.85646820]
[113.65760040 27.93254280]
[123.67448425 16.76732635]
[135.69953918 7.80084038]
[149.25888062 1.38645124]
[163.81811523 -2.22305155]
[178.80349731 -2.88541842]
[193.62442017 -0.57454544]
[207.69680786 4.61849642]
[220.46609497 12.48904991]
[231.42900085 22.72694016]
[240.15353394 34.92869186]
[246.29582214 48.61343765]
[249.61380005 63.24186707]
[249.97673035 78.23748016]
[247.37030029 93.00929260]
[241.89723206 106.97515869]
[233.77319336 119.58468628]
[223.31838989 130.34094238]
[210.94480896 138.82000732]
[197.14012146 144.68774414]
[182.44833374 147.71289062]
[167.44847107 147.77624512]
[152.73165894 144.87528992]
[138.87789917 139.12437439]
[126.43314362 130.75010681]
[115.88785553 120.08255005]
[107.65859985 107.54398346]
[107.97065735 122.54074097]
[108.28271484 137.53749084]
[108.59477234 152.53424072]
[108.90682220 167.53100586]
[109.21887970 182.52775574]
[109.53093719 197.52450562]
[109.84299469 212.52125549]
[110.15505219 227.51802063]
[110.46710968 242.51477051]
[110.77915955 257.51153564]
[111.09121704 272.50827026]
[125.74620819 276.09902954]
[138.97201538 283.36129761]
[149.86688232 293.79989624]
[157.68798828 306.70309448]
[161.90205383 321.19116211]
[162.22177124 336.27627563]
[158.62535095 350.92987061]
[151.35798645 364.15289307]
[140.91519165 375.04370117]
[128.00895691 382.85983276]
[113.51926422 387.06829834]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 98]
[24 97]
[25 96]
[26 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
