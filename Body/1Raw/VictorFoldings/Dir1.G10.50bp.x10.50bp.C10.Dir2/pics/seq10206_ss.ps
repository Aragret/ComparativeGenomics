%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUGACAAGGGGGGGGGGAACACAUAGCCUACCCCUUCCUUGUACUAUCCCUAUGAGGCAUAAUUAUAxxxxxxxxxxAACAUAUCAUACACAAACGCCUGAGCCCUAUCUAUUACUCUCAUCGCUACCCCCCCCCCCCUCCCUGACAA\
) } def
/len { sequence length } bind def

/coor [
[83.61552429 382.17813110]
[70.12664032 375.44659424]
[58.64114380 365.68203735]
[49.82677460 353.45211792]
[44.19599152 339.46792603]
[42.07616425 324.54244995]
[43.59053040 309.54345703]
[48.65105438 295.34295654]
[56.96352005 282.76651001]
[68.04464722 272.54537964]
[81.25020599 265.27374268]
[95.81243134 261.37435913]
[95.50445557 246.37753296]
[95.19647217 231.38069153]
[94.88849640 216.38385010]
[94.58052063 201.38700867]
[94.27254486 186.39018250]
[93.96456146 171.39334106]
[93.65658569 156.39649963]
[93.34860992 141.39965820]
[93.04063416 126.40282440]
[84.09322357 123.50085449]
[76.35009766 117.55209351]
[70.84883881 109.05467987]
[68.42213440 98.85827637]
[69.57989502 88.08048248]
[54.75741577 85.77960968]
[39.93493271 83.47873688]
[25.11244965 81.17785645]
[10.28996849 78.87698364]
[4.35175657 92.74018860]
[-4.84818697 104.69058228]
[-16.73154640 113.97694397]
[-30.55132294 120.01554108]
[-45.43879318 122.42676544]
[-60.45812225 121.05905914]
[-74.66517639 115.99838257]
[-87.16689301 107.56286621]
[-97.17739868 96.28277588]
[-104.06743622 82.86717987]
[-107.40387726 68.15939331]
[-106.97699738 53.08396149]
[-102.81362915 38.58854294]
[-95.17549133 25.58432579]
[-84.54271698 14.88877106]
[-71.58368683 7.17420769]
[-57.11302948 2.92558002]
[-42.04037476 2.40996075]
[-27.31320190 5.65976191]
[-13.85727501 12.47069836]
[-2.51844478 22.41462898]
[5.99052048 34.86647034]
[11.13473988 49.04348755]
[12.59084320 64.05450439]
[27.41332626 66.35537720]
[42.23580933 68.65625000]
[57.05828857 70.95712280]
[71.88076782 73.25800323]
[84.12372589 64.59139252]
[86.87996674 49.84679794]
[89.63620758 35.10219955]
[92.39245605 20.35760307]
[78.24886322 15.26299858]
[65.10572815 7.96545458]
[53.30348206 -1.34600246]
[43.14784241 -12.43018436]
[34.90185547 -24.99998474]
[28.77911377 -38.72981262]
[24.93821335 -53.26403809]
[23.47864151 -68.22618103]
[24.43820381 -83.22869873]
[27.79204750 -97.88297272]
[33.45329666 -111.80944061]
[41.27531815 -124.64736176]
[51.05549240 -136.06420898]
[62.54050064 -145.76425171]
[75.43284607 -153.49623108]
[89.39858246 -159.05989075]
[104.07597351 -162.31109619]
[119.08483887 -163.16564941]
[134.03640747 -161.60140991]
[148.54339600 -157.65888977]
[162.23004150 -151.44021606]
[174.74182129 -143.10647583]
[185.75466919 -132.87350464]
[194.98330688 -121.00639343]
[202.18869019 -107.81251526]
[207.18418884 -93.63361359]
[209.84042358 -78.83697510]
[210.08856201 -63.80585098]
[207.92219543 -48.92959595]
[203.39741516 -34.59353256]
[196.63145447 -21.16900635]
[187.79956055 -9.00374031]
[177.13049316 1.58715546]
[164.90060425 10.32935047]
[151.42668152 16.99640083]
[137.05772400 21.41561508]
[122.16593933 23.47252274]
[107.13704681 23.11384583]
[104.38080597 37.85844421]
[101.62456512 52.60303879]
[98.86832428 67.34763336]
[118.74306488 76.59070587]
[126.83438110 94.95444489]
[141.77040100 96.33846283]
[156.70640564 97.72248840]
[162.46104431 83.74481201]
[172.08128357 72.08538055]
[184.71173096 63.78096008]
[199.22926331 59.56996536]
[214.34301758 59.82683563]
[228.70907593 64.52873230]
[241.05001831 73.25756836]
[250.26849365 85.23717499]
[255.54481506 99.40233612]
[256.40979004 114.49349976]
[252.78654480 129.16876221]
[244.99722290 142.12322998]
[233.73446655 152.20497131]
[219.99972534 158.51753235]
[205.01431274 160.49961853]
[190.11070251 157.97497559]
[176.61412048 151.16807556]
[165.72467041 140.68421936]
[158.41064453 127.45560455]
[155.32238770 112.65850830]
[140.38636780 111.27448273]
[125.45036316 109.89045715]
[118.60118866 119.98843384]
[108.03746796 126.09484863]
[108.34544373 141.09169006]
[108.65342712 156.08851624]
[108.96140289 171.08535767]
[109.26937866 186.08219910]
[109.57735443 201.07904053]
[109.88533783 216.07586670]
[110.19331360 231.07270813]
[110.50128937 246.06954956]
[110.80926514 261.06637573]
[125.51930237 264.36462402]
[139.01226807 271.08798218]
[150.50367737 280.84558105]
[159.32546997 293.07012939]
[164.96472168 307.05090332]
[167.09359741 321.97506714]
[165.58831787 336.97500610]
[160.53640747 351.17858887]
[152.23156738 363.76004028]
[141.15663147 373.98791504]
[127.95549774 381.26754761]
[113.39563751 385.17575073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[26 58]
[27 57]
[28 56]
[29 55]
[30 54]
[59 103]
[60 102]
[61 101]
[62 100]
[105 129]
[106 128]
[107 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
