%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCCUCUCCGGGGGGGGGGCUAGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUxxxxxxxxxxACCUUCCACCCUUACUACACAAUCAAAGACGCCCUCGGCUUACUUCUCUUCCCCCCCCCCCCUUCUCUCC\
) } def
/len { sequence length } bind def

/coor [
[3.76785135 251.84420776]
[-6.21275425 245.03842163]
[-15.71374798 237.57768250]
[-24.69222641 229.49571228]
[-33.10764694 220.82899475]
[-40.92200851 211.61665344]
[-48.10002899 201.90031433]
[-54.60928726 191.72383118]
[-60.42039490 181.13314819]
[-74.07663727 187.33856201]
[-87.73287964 193.54396057]
[-101.38912201 199.74937439]
[-114.91330719 206.23753357]
[-128.29959106 213.00564575]
[-137.12400818 226.13731384]
[-151.97319031 224.97503662]
[-165.35946655 231.74314880]
[-178.74575806 238.51126099]
[-192.13204956 245.27938843]
[-205.51832581 252.04750061]
[-218.90461731 258.81561279]
[-225.20129395 265.52407837]
[-232.64053345 265.58200073]
[-246.16471863 272.07019043]
[-259.68890381 278.55834961]
[-271.35437012 290.86093140]
[-286.40548706 283.05706787]
[-283.07315063 266.43383789]
[-266.17706299 265.03414917]
[-252.65287781 258.54598999]
[-239.12869263 252.05783081]
[-225.67272949 245.42932129]
[-212.28643799 238.66120911]
[-198.90016174 231.89309692]
[-185.51387024 225.12498474]
[-172.12759399 218.35687256]
[-158.74130249 211.58874512]
[-150.87437439 198.94119263]
[-135.06770325 199.61936951]
[-121.68142700 192.85125732]
[-119.35258484 188.61427307]
[-114.30553436 185.82884216]
[-107.59452820 186.09312439]
[-93.93828583 179.88772583]
[-80.28204346 173.68231201]
[-66.62580109 167.47691345]
[-75.72937012 137.90092468]
[-79.62579346 107.20187378]
[-78.19960785 76.28942108]
[-71.49308014 46.07955170]
[-59.70493698 17.46743393]
[-43.18447876 -8.69911194]
[-22.42122841 -31.64472771]
[-32.16888046 -43.04574966]
[-41.91653442 -54.44676971]
[-51.66418457 -65.84779358]
[-67.29747772 -70.80078125]
[-70.55998993 -86.87212372]
[-58.09552002 -97.52899933]
[-42.72645187 -91.80853271]
[-40.26316452 -75.59544373]
[-30.51551247 -64.19441986]
[-20.76786041 -52.79339981]
[-11.02020741 -41.39237976]
[-3.44715619 -47.02373123]
[4.41098547 -52.24989700]
[12.53256035 -57.05648041]
[20.89518738 -61.43023300]
[29.47582054 -65.35910034]
[38.25080872 -68.83225250]
[47.19597244 -71.84011841]
[56.28665924 -74.37441254]
[65.49781799 -76.42814636]
[74.80405426 -77.99565887]
[84.17973328 -79.07263947]
[93.59901428 -79.65611267]
[103.03593445 -79.74446869]
[112.46448517 -79.33747101]
[121.85868073 -78.43623352]
[131.19264221 -77.04324341]
[140.44064331 -75.16234589]
[149.57717896 -72.79871368]
[158.57710266 -69.95886230]
[167.41558838 -66.65062714]
[176.06828308 -62.88311386]
[184.51133728 -58.66671371]
[192.72148132 -54.01304245]
[200.67610168 -48.93492889]
[208.35327148 -43.44636536]
[215.73182678 -37.56247711]
[222.79144287 -31.29948235]
[229.51264954 -24.67463684]
[235.87693787 -17.70620155]
[241.86676025 -10.41338062]
[247.46560669 -2.81627011]
[252.65806580 5.06419134]
[257.42980957 13.20628643]
[261.76766968 21.58757591]
[265.65975952 30.18496323]
[269.09527588 38.97475433]
[272.06478882 47.93272400]
[274.56011963 57.03418350]
[276.57434082 66.25405884]
[278.10198975 75.56692505]
[279.13879395 84.94713593]
[279.68188477 94.36882782]
[294.68109131 94.52486420]
[309.68026733 94.68090057]
[323.56018066 87.08757019]
[336.20626831 94.95684814]
[351.20547485 95.11288452]
[365.21862793 86.59449005]
[379.47045898 94.70731354]
[379.29986572 111.10557556]
[364.88235474 118.92015076]
[351.04943848 110.11207581]
[336.05023193 109.95603943]
[323.24316406 117.56052399]
[309.52423096 109.68008423]
[294.52505493 109.52404785]
[279.52584839 109.36801147]
[278.49136353 121.40383911]
[276.65087891 133.34301758]
[274.01272583 145.13163757]
[270.58877563 156.71646118]
[266.39456177 168.04516602]
[261.44894409 179.06661987]
[255.77430725 189.73103333]
[249.39624023 199.99026489]
[242.34358215 209.79797363]
[234.64814758 219.10989380]
[226.34471130 227.88395691]
[217.47074890 236.08055115]
[208.06632996 243.66265869]
[198.17393494 250.59605408]
[187.83822632 256.84939575]
[177.10588074 262.39450073]
[166.02536011 267.20629883]
[154.64668274 271.26303101]
[143.02125549 274.54644775]
[131.20156860 277.04168701]
[119.24097443 278.73745728]
[107.19349670 279.62612915]
[95.11354065 279.70367432]
[83.05564880 278.96978760]
[71.07427216 277.42770386]
[59.22351456 275.08447266]
[47.55688095 271.95059204]
[36.12706375 268.04028320]
[24.98566437 263.37118530]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 46]
[10 45]
[11 44]
[12 43]
[13 40]
[14 39]
[16 37]
[17 36]
[18 35]
[19 34]
[20 33]
[21 32]
[23 31]
[24 30]
[25 29]
[53 64]
[54 63]
[55 62]
[56 61]
[106 121]
[107 120]
[108 119]
[110 117]
[111 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
