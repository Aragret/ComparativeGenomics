%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCCCUUACGGGGGGGGGGCAUCAAAUCAAUUGGCCACCAAUGGUACUGAACCUACGAGUACACCGACUxxxxxxxxxxCCUAUAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCCCCCCCCCCCACCCUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.58015442 379.15582275]
[72.09127045 372.42428589]
[60.60577393 362.65972900]
[51.79140472 350.42984009]
[46.16062164 336.44564819]
[44.04079437 321.52017212]
[45.55516434 306.52117920]
[50.61568451 292.32064819]
[58.92815018 279.74423218]
[70.00928497 269.52307129]
[83.21483612 262.25143433]
[97.77706146 258.35208130]
[97.46908569 243.35523987]
[97.16110229 228.35839844]
[96.85312653 213.36155701]
[96.54515076 198.36471558]
[96.23717499 183.36788940]
[95.92919159 168.37104797]
[95.62121582 153.37420654]
[95.31324005 138.37736511]
[95.00526428 123.38053131]
[88.08567047 136.68914795]
[86.69744873 151.62477112]
[77.56350708 163.52313232]
[63.49389267 168.72370911]
[48.81711960 165.62655640]
[38.04849625 155.18449402]
[34.50097275 140.61001587]
[39.26595306 126.38697815]
[50.87748718 116.89106750]
[65.76303101 115.04367065]
[78.85224152 107.71752167]
[63.85303497 107.87151337]
[48.85382462 108.02551270]
[33.85461426 108.17951202]
[18.85540581 108.33350372]
[3.07918286 114.54213715]
[-7.25410748 101.10118103]
[2.80103707 87.45088959]
[18.70140839 93.33429718]
[33.70061874 93.18029785]
[48.69982910 93.02630615]
[63.69903946 92.87230682]
[78.69824982 92.71830750]
[90.85157776 83.92646790]
[95.69139862 69.72871399]
[100.53121185 55.53096390]
[99.61241150 48.88277435]
[101.88748169 43.59014511]
[105.87218475 40.85676575]
[111.29080963 26.86968040]
[116.70943451 12.88259697]
[116.89916992 3.68695760]
[122.38557434 -1.33415711]
[128.09024048 -15.20703793]
[133.79490662 -29.07991791]
[121.53282166 -50.37379074]
[137.62190247 -76.35235596]
[137.31391907 -91.34919739]
[137.00593567 -106.34603119]
[136.69796753 -121.34287262]
[136.38998413 -136.33970642]
[121.61717987 -139.26856995]
[107.81955719 -145.30509949]
[95.64244843 -154.16693115]
[85.65541077 -165.43960571]
[78.32555389 -178.59587097]
[73.99569702 -193.02037048]
[72.86837006 -208.03846741]
[74.99629211 -222.94773865]
[80.27994537 -237.05082703]
[88.47219086 -249.68811035]
[99.18986511 -260.26855469]
[111.93169403 -268.29724121]
[126.10170746 -273.39868164]
[141.03715515 -275.33428955]
[156.03947449 -274.01348877]
[170.40698242 -269.49810791]
[183.46768188 -261.99929810]
[194.61070251 -251.86779785]
[203.31486511 -239.57748413]
[209.17306519 -225.70320129]
[211.91128540 -210.89387512]
[211.40148926 -195.84216309]
[207.66748047 -181.25205994]
[200.88392639 -167.80595398]
[191.36810303 -156.13276672]
[179.56509399 -146.77847290]
[166.02693176 -140.18058777]
[151.38682556 -136.64768982]
[151.69480896 -121.65084839]
[152.00277710 -106.65400696]
[152.31076050 -91.65717316]
[152.61872864 -76.66033173]
[158.74021912 -72.32703400]
[163.19938660 -86.64889526]
[178.19825745 -86.83364105]
[183.00883484 -72.62595367]
[170.98316956 -63.66042328]
[177.10464478 -59.32711792]
[191.35133362 -64.02091980]
[193.80320740 -79.12876129]
[203.00447083 -91.35968018]
[216.84074402 -97.90309906]
[232.13253784 -97.25539398]
[245.36592102 -89.56539154]
[253.49995422 -76.60021210]
[254.66551208 -61.33914566]
[248.59474182 -47.28908157]
[236.68266296 -37.67861938]
[221.66658020 -34.71617508]
[206.99710083 -39.08249283]
[196.04513550 -49.77422714]
[181.79844666 -45.08042908]
[167.49147034 -25.08322716]
[147.66778564 -23.37525558]
[141.96311951 -9.50237465]
[136.25845337 4.37050629]
[130.69651794 18.30122185]
[125.27789307 32.28830719]
[119.85926819 46.27539062]
[114.72896576 60.37077713]
[109.88915253 74.56853485]
[105.04933167 88.76628113]
[109.66994476 89.67064667]
[114.11418152 92.50170898]
[117.59248352 97.19116974]
[119.35940552 103.35691071]
[118.83396912 110.33087921]
[115.70452118 117.23146820]
[110.00209808 123.07255554]
[110.31008148 138.06939697]
[110.61805725 153.06623840]
[110.92603302 168.06306458]
[111.23400879 183.05990601]
[111.54199219 198.05674744]
[111.84996796 213.05358887]
[112.15794373 228.05041504]
[112.46591949 243.04725647]
[112.77389526 258.04409790]
[127.48393250 261.34231567]
[140.97689819 268.06567383]
[152.46830750 277.82327271]
[161.29010010 290.04782104]
[166.92935181 304.02859497]
[169.05822754 318.95278931]
[167.55294800 333.95269775]
[162.50103760 348.15628052]
[154.19619751 360.73773193]
[143.12127686 370.96560669]
[129.92012024 378.24526978]
[115.36026764 382.15344238]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[45 124]
[46 123]
[47 122]
[50 121]
[51 120]
[52 119]
[54 118]
[55 117]
[56 116]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[100 114]
[101 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
