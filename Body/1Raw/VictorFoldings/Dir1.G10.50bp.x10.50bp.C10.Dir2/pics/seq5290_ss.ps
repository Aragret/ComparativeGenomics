%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACAACCCUAACGGGGGGGGGGAUAACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUxxxxxxxxxxAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUAUACCCCCCCCCCACCACCCUAAC\
) } def
/len { sequence length } bind def

/coor [
[86.32512665 423.22274780]
[72.30318451 417.66973877]
[60.10322571 408.80340576]
[50.49215317 397.18109131]
[44.07412720 383.53338623]
[41.25259018 368.71820068]
[42.20490646 353.66683960]
[46.87121201 339.32540894]
[54.95817947 326.59545898]
[65.95745087 316.27719116]
[79.17761230 309.01919556]
[93.78762817 305.27777100]
[93.78762817 290.27777100]
[93.78762817 275.27777100]
[93.78762817 260.27777100]
[93.78762817 245.27777100]
[93.78762817 230.27777100]
[93.78762817 215.27777100]
[93.78762817 200.27777100]
[93.78762817 185.27777100]
[93.78762817 170.27777100]
[93.63362885 155.27856445]
[93.32565308 140.28172302]
[93.01766968 125.28488159]
[83.97119904 121.59695435]
[76.69845581 114.71541595]
[72.30762482 105.44736481]
[71.55326843 94.97579956]
[74.71272278 84.70907593]
[81.52510834 76.09146881]
[91.20426178 70.40038300]
[75.73690796 68.55683899]
[66.36653137 56.57139969]
[68.21939087 41.83700180]
[58.81553650 30.15079308]
[49.41167831 18.46458435]
[40.00782013 6.77837515]
[30.60396385 -4.90783358]
[17.70223045 2.79225922]
[3.85438132 8.62176991]
[-10.67003250 12.46722507]
[-25.58828926 14.25377274]
[-40.61000061 13.94663620]
[-55.44276428 11.55179405]
[-69.79785156 7.11586332]
[-83.39585114 0.72519016]
[-95.97205353 -7.49582911]
[-107.28167725 -17.38716888]
[-117.10456848 -28.75629425]
[-125.24951935 -41.38189697]
[-131.55798340 -55.01822281]
[-135.90718079 -69.39982605]
[-138.21244812 -84.24678040]
[-138.42889404 -99.27007294]
[-136.55232239 -114.17726898]
[-132.61926270 -128.67820740]
[-126.70626068 -142.49061584]
[-118.92842865 -155.34562683]
[-109.43715668 -166.99302673]
[-98.41719055 -177.20608521]
[-86.08304596 -185.78601074]
[-72.67481232 -192.56578064]
[-58.45347214 -197.41342163]
[-43.69586182 -200.23460388]
[-28.68923378 -200.97438049]
[-13.72570038 -199.61836243]
[0.90347058 -196.19293213]
[14.91351700 -190.76480103]
[28.03173065 -183.43959045]
[40.00275803 -174.35990906]
[50.59358597 -163.70249939]
[59.59805298 -151.67478943]
[66.84088898 -138.51092529]
[72.18111420 -124.46712494]
[75.51477051 -109.81677246]
[76.77696991 -94.84503174]
[75.94315338 -79.84333801]
[73.02953339 -65.10369873]
[68.09284210 -50.91302490]
[61.22916412 -37.54754639]
[52.57210159 -25.26742172]
[42.29017258 -14.31169033]
[51.69403076 -2.62548184]
[61.09788513 9.06072712]
[70.50174713 20.74693489]
[79.90560150 32.43314362]
[94.69525909 33.77535629]
[104.39858246 45.49287033]
[102.89047241 60.99652863]
[117.35923767 64.95314026]
[131.40121460 59.67839813]
[145.44319153 54.40365601]
[159.48516846 49.12891388]
[173.52714539 43.85417175]
[187.08903503 37.44519806]
[200.07942200 29.94519615]
[213.06980896 22.44519615]
[213.70114136 7.03075647]
[222.58462524 -5.58222580]
[236.88555908 -11.36899281]
[252.04057312 -8.48300934]
[263.21377563 2.15481830]
[266.83981323 17.14999771]
[261.76162720 31.71762276]
[249.59967041 41.20921707]
[234.23477173 42.59604645]
[220.56980896 35.43557739]
[207.57942200 42.93557739]
[194.58903503 50.43557739]
[209.19703674 53.84236908]
[219.13194275 65.08059692]
[220.72138977 79.99614716]
[213.37785339 93.07561493]
[199.81582642 99.48429108]
[185.04837036 96.85326385]
[174.53416443 86.15507507]
[172.15968323 71.34420013]
[178.80187988 57.89614868]
[164.75990295 63.17089081]
[150.71792603 68.44563293]
[136.67594910 73.72037506]
[122.63397980 78.99511719]
[127.56881714 87.90764618]
[129.23902893 97.69638062]
[127.62367249 107.23345947]
[123.07094574 115.47528076]
[116.24079895 121.57665253]
[108.01451111 124.97690582]
[108.32248688 139.97373962]
[108.63047028 154.97058105]
[111.95218658 163.54740906]
[108.78762817 170.27777100]
[108.78762817 185.27777100]
[108.78762817 200.27777100]
[108.78762817 215.27777100]
[108.78762817 230.27777100]
[108.78762817 245.27777100]
[108.78762817 260.27777100]
[108.78762817 275.27777100]
[108.78762817 290.27777100]
[108.78762817 305.27777100]
[123.39763641 309.01919556]
[136.61779785 316.27719116]
[147.61706543 326.59545898]
[155.70404053 339.32540894]
[160.37034607 353.66683960]
[161.32266235 368.71820068]
[158.50112915 383.53338623]
[152.08309937 397.18109131]
[142.47203064 408.80340576]
[130.27206421 417.66973877]
[116.25012207 423.22274780]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 130]
[23 129]
[24 128]
[31 89]
[34 86]
[35 85]
[36 84]
[37 83]
[38 82]
[90 122]
[91 121]
[92 120]
[93 119]
[94 118]
[95 109]
[96 108]
[97 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
