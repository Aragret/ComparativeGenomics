%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:04 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGUCCUGGGGGGGGGGGUAUGCCCUUUUCCUAACACUCACAACAAAACUAACUAAUACUAACAUCUxxxxxxxxxxGAGAACCAAAAUGAACGAAAAUCUGUUCGCUUCAUUCAUUGCCCCCACAACCCCCCCCCCUCCUAGGCCU\
) } def
/len { sequence length } bind def

/coor [
[84.40930939 429.25762939]
[69.91961670 425.04916382]
[57.01338959 417.23303223]
[46.57058716 406.34219360]
[39.30322266 393.11920166]
[35.70679855 378.46560669]
[36.02651978 363.38049316]
[40.24058914 348.89242554]
[48.06168747 335.98922729]
[58.95655441 325.55062866]
[72.18236542 318.28836060]
[86.83735657 314.69760132]
[87.14941406 299.70083618]
[87.46146393 284.70410156]
[87.77352142 269.70733643]
[88.08557892 254.71058655]
[88.39763641 239.71383667]
[88.70969391 224.71708679]
[89.02175140 209.72032166]
[89.33380127 194.72357178]
[89.64585876 179.72682190]
[89.95791626 164.73007202]
[86.93308258 157.93330383]
[90.43569946 149.42544556]
[91.05967712 134.43843079]
[80.54595947 129.79052734]
[72.06290436 122.03301239]
[66.49598694 111.97564697]
[64.42629242 100.66822815]
[66.06987000 89.29106140]
[71.25514984 79.03172302]
[61.27242661 67.83595276]
[51.28969955 56.64019012]
[38.93680191 65.18334961]
[25.62765503 72.14368439]
[11.56402683 77.41567993]
[-3.04088426 80.91941833]
[-17.96567154 82.60178375]
[-32.98407745 82.43726349]
[-47.86843109 80.42835999]
[-62.39308548 76.60552979]
[-76.33785248 71.02671814]
[-89.49132538 63.77650070]
[-101.65411377 54.96479034]
[-112.64182281 44.72517014]
[-122.28788757 33.21287155]
[-130.44607544 20.60241508]
[-136.99270630 7.08497286]
[-141.82853699 -7.13453293]
[-144.88026428 -21.84053802]
[-146.10160828 -36.81010437]
[-145.47407532 -51.81629562]
[-143.00717163 -66.63162231]
[-138.73828125 -81.03149414]
[-132.73211670 -94.79759979]
[-125.07975769 -107.72126007]
[-115.89719391 -119.60655212]
[-105.32363129 -130.27330017]
[-93.51936340 -139.55978394]
[-80.66334534 -147.32524109]
[-66.95046234 -153.45195007]
[-52.58860397 -157.84701538]
[-37.79549026 -160.44381714]
[-22.79538155 -161.20300293]
[-7.81567478 -160.11303711]
[6.91654015 -157.19046021]
[21.17792702 -152.47956848]
[34.75228882 -146.05178833]
[47.43383789 -138.00456238]
[59.03032684 -128.45986938]
[69.36595917 -117.56242371]
[78.28404236 -105.47741699]
[85.64938354 -92.38806152]
[91.35033417 -78.49277496]
[95.30045319 -64.00222015]
[97.43987274 -49.13607025]
[97.73615265 -34.11968613]
[96.18479919 -19.18071175]
[92.80934143 -4.54562092]
[87.66093445 9.56372261]
[80.81764221 22.93342400]
[72.38319397 35.36080170]
[62.48546600 46.65746307]
[72.46819305 57.85322952]
[82.45092010 69.04899597]
[108.07186127 65.34772491]
[129.41990662 79.98989105]
[143.32246399 74.35794067]
[157.22502136 68.72598267]
[171.00740051 62.80601883]
[184.66363525 56.60060883]
[198.31988525 50.39520264]
[211.97612000 44.18979645]
[225.63235474 37.98439026]
[239.28860474 31.77898216]
[252.87954712 25.43185234]
[266.40374756 18.94368744]
[279.92791748 12.45552254]
[293.45211792 5.96735764]
[298.45700073 -9.02352905]
[312.63327026 -16.00985527]
[327.57040405 -10.84675789]
[334.40646362 3.40258908]
[329.08572388 18.28429985]
[314.76492310 24.96932220]
[299.94027710 19.49154663]
[286.41610718 25.97971344]
[272.89190674 32.46787643]
[259.36770630 38.95604324]
[254.66697693 44.72221375]
[245.49400330 45.43522263]
[231.83776855 51.64062881]
[218.18153381 57.84603882]
[204.52528381 64.05144501]
[190.86904907 70.25685120]
[177.21279907 76.46225739]
[174.70973206 80.59870148]
[169.55117798 83.17176819]
[162.85696411 82.62854004]
[148.95442200 88.26049042]
[135.05186462 93.89244843]
[135.53163147 101.85416412]
[134.22578430 109.72269440]
[131.19992065 117.10262299]
[126.60613251 123.62305450]
[120.67525482 128.95632935]
[113.70535278 132.83441162]
[106.04669189 135.06240845]
[105.42271423 150.04942322]
[104.95467377 165.04211426]
[104.64261627 180.03887939]
[104.33055878 195.03562927]
[104.01850128 210.03237915]
[103.70644379 225.02912903]
[103.39438629 240.02589417]
[103.08233643 255.02264404]
[102.77027893 270.01940918]
[102.45822144 285.01614380]
[102.14616394 300.01290894]
[101.83410645 315.00964355]
[116.32704163 319.20693970]
[129.23930359 327.01309204]
[139.69052124 337.89584351]
[146.96809387 351.11325073]
[150.57583618 365.76406860]
[150.26776123 380.84939575]
[146.06488037 395.34072876]
[138.25373840 408.24996948]
[127.36694336 418.69699097]
[114.14674377 425.96945190]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[24 129]
[25 128]
[31 85]
[32 84]
[33 83]
[87 121]
[88 120]
[89 119]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[95 111]
[96 109]
[97 108]
[98 107]
[99 106]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
