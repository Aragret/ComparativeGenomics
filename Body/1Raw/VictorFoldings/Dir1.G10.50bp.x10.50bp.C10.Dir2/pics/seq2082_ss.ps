%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GACUAACCCCGGGGGGGGGGUAUACCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCxxxxxxxxxxCUCCAGCACCACGACCCUACUACUAUCUCGCACCUGAAACAAGCUAACAUCCCCCCCCCCGACUAACACC\
) } def
/len { sequence length } bind def

/coor [
[17.25622749 424.42364502]
[3.41028953 418.40762329]
[-8.29837227 408.87820435]
[-17.00089645 396.54251099]
[-22.05149841 382.31600952]
[-23.07538986 367.25433350]
[-19.99659157 352.47515869]
[-13.04356956 339.07522583]
[-2.73228478 328.04888916]
[10.17209625 320.21438599]
[24.71198273 316.15307617]
[24.71198273 301.15307617]
[24.71198273 286.15307617]
[24.71198273 271.15307617]
[24.71198273 256.15307617]
[24.71198273 241.15307617]
[24.71198273 226.15307617]
[24.71198273 211.15307617]
[24.71198273 196.15307617]
[24.71198273 181.15307617]
[13.94117451 170.71327209]
[-1.05152154 171.18130493]
[-16.04421806 171.64935303]
[-20.58691025 174.47486877]
[-25.28601265 175.16102600]
[-29.28492165 174.01629639]
[-31.98030281 171.64935303]
[-46.97299957 171.18130493]
[-61.96569443 170.71327209]
[-76.95838928 170.24522400]
[-91.95108795 169.77717590]
[-103.41873169 180.31904602]
[-118.61679077 179.63081360]
[-128.59617615 168.63319397]
[-143.58886719 168.16514587]
[-158.58157349 167.69711304]
[-172.76892090 175.92213440]
[-186.84887695 167.51457214]
[-186.33717346 151.12341309]
[-171.76020813 143.61047363]
[-158.11352539 152.70442200]
[-143.12083435 153.17245483]
[-128.12812805 153.64050293]
[-117.48220062 143.28677368]
[-102.27080536 143.54785156]
[-91.48304749 154.78448486]
[-76.49034882 155.25253296]
[-61.49765015 155.72056580]
[-46.50495529 156.18861389]
[-31.51226044 156.65666199]
[-16.51226044 156.65666199]
[-1.51956367 156.18861389]
[13.47313213 155.72056580]
[24.85375786 129.36308289]
[50.92303085 125.38104248]
[58.91294479 112.68611145]
[66.90286255 99.99118042]
[70.30583954 85.38228607]
[68.74826050 70.46337891]
[67.19068146 55.54446411]
[57.65723801 46.79418564]
[56.69911194 34.29214859]
[64.28648376 24.81907272]
[63.03960800 9.87098694]
[61.79273224 -5.07710028]
[60.54586029 -20.02518654]
[46.05646133 -24.62146568]
[34.43214035 -34.41654587]
[27.44552612 -47.91675568]
[26.16202354 -63.06340790]
[30.77735710 -77.54674530]
[40.58772278 -89.15817261]
[54.09711075 -96.12702179]
[69.24543762 -97.39060211]
[83.72269440 -92.75621796]
[95.32120514 -82.93058777]
[102.27227783 -69.41204071]
[103.51592255 -54.26206589]
[98.86250305 -39.79092026]
[89.02162170 -28.20534515]
[75.49394226 -21.27206230]
[76.74082184 -6.32397509]
[77.98769379 8.62411213]
[79.23456573 23.57219887]
[90.01136780 37.38743210]
[82.10958862 53.98688507]
[83.66716766 68.90579224]
[85.22475433 83.82470703]
[99.75852203 80.01779175]
[111.85417938 86.37545776]
[125.51041412 80.17005157]
[138.89669800 73.40193939]
[151.98985291 66.08283234]
[165.08300781 58.76372910]
[163.65934753 43.60150146]
[168.53196716 29.17314148]
[178.85662842 17.97844696]
[192.84452820 11.95696640]
[208.07220459 12.15195751]
[221.90133667 18.52963829]
[231.93597412 29.98503494]
[236.43753052 44.53343201]
[234.62609863 59.65423203]
[226.81550598 72.72766876]
[214.35899353 81.48867798]
[199.41473389 84.41937256]
[184.57191467 81.01199341]
[172.40211487 71.85688019]
[159.30895996 79.17598724]
[146.21580505 86.49509430]
[145.34008789 89.22280884]
[143.29586792 91.75562286]
[140.15640259 93.63329315]
[136.16487122 94.43248749]
[131.71582031 93.82629395]
[118.05958557 100.03170013]
[116.00152588 109.92426300]
[108.74055481 117.54188538]
[98.14640045 120.28395844]
[87.29992676 116.89755249]
[79.59779358 107.98109436]
[71.60787201 120.67602539]
[63.61795807 133.37095642]
[68.39630127 139.77563477]
[71.09159088 147.49263000]
[71.35176849 155.84608459]
[69.04336548 164.06910706]
[64.27368927 171.37416077]
[57.39047241 177.02828979]
[48.95810318 180.42608643]
[39.71198273 181.15307617]
[39.71198273 196.15307617]
[39.71198273 211.15307617]
[39.71198273 226.15307617]
[39.71198273 241.15307617]
[39.71198273 256.15307617]
[39.71198273 271.15307617]
[39.71198273 286.15307617]
[39.71198273 301.15307617]
[39.71198273 316.15307617]
[54.25186920 320.21438599]
[67.15625000 328.04888916]
[77.46753693 339.07522583]
[84.42055511 352.47515869]
[87.49935913 367.25433350]
[86.47546387 382.31600952]
[81.42486572 396.54251099]
[72.72233582 408.87820435]
[61.01367569 418.40762329]
[47.16773987 424.42364502]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 53]
[22 52]
[23 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[34 43]
[35 42]
[36 41]
[55 123]
[56 122]
[57 121]
[58 88]
[59 87]
[60 86]
[63 84]
[64 83]
[65 82]
[66 81]
[90 116]
[91 115]
[92 110]
[93 109]
[94 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
