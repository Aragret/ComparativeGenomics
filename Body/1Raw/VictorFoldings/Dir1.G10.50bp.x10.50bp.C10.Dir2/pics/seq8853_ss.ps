%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCCUCCUAGGGGGGGGGGAUGACCUCCGGCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUxxxxxxxxxxGUGCCUAUUGCCAUACUAGUCUUUGCCGCCUGCGAAGCAGCGGUGGGCCUCCCCCCCCCCAGCCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 507.98651123]
[71.19830322 501.97048950]
[59.48964310 492.44107056]
[50.78712082 480.10540771]
[45.73651886 465.87887573]
[44.71262741 450.81719971]
[47.79142761 436.03805542]
[54.74444962 422.63812256]
[65.05573273 411.61178589]
[77.96011353 403.77728271]
[92.50000000 399.71597290]
[92.50000000 384.71597290]
[92.50000000 369.71597290]
[92.50000000 354.71597290]
[92.50000000 339.71597290]
[92.50000000 324.71597290]
[92.50000000 309.71597290]
[92.50000000 294.71597290]
[92.50000000 279.71597290]
[92.50000000 264.71597290]
[92.50000000 249.71595764]
[84.76270294 236.98869324]
[92.50000000 223.18852234]
[84.76270294 210.46124268]
[92.50000000 196.66107178]
[92.50000000 181.66107178]
[84.76270294 168.93380737]
[92.50000000 155.13363647]
[92.50000000 140.13363647]
[92.50000000 125.13362885]
[77.75944519 113.90349579]
[74.12058258 95.73322296]
[83.39981079 79.69277954]
[77.62353516 65.84956360]
[71.84726715 52.00634384]
[66.07099152 38.16312790]
[54.42627335 32.51916122]
[49.91827011 20.81886864]
[54.46564484 9.56592655]
[48.97861099 -4.39446354]
[43.49158096 -18.35485268]
[28.95388794 -14.58486271]
[14.06776237 -12.59472752]
[-0.94971079 -12.41347027]
[-15.87953377 -14.04373360]
[-30.50398445 -17.46174431]
[-44.60979462 -22.61765671]
[-57.99126434 -29.43628311]
[-70.45324707 -37.81818771]
[-81.81401825 -47.64113617]
[-91.90789032 -58.76188278]
[-100.58767700 -71.01825714]
[-107.72679901 -84.23152161]
[-113.22114563 -98.20898438]
[-116.99059296 -112.74681854]
[-118.98017120 -127.63301849]
[-119.16086578 -142.65049744]
[-117.53004456 -157.58026123]
[-114.11148834 -172.20458984]
[-108.95504761 -186.31019592]
[-102.13591766 -199.69142151]
[-93.75354767 -212.15309143]
[-83.93017578 -223.51348877]
[-72.80905151 -233.60694885]
[-60.55235291 -242.28627014]
[-47.33882523 -249.42489624]
[-33.36115646 -254.91873169]
[-18.82317924 -258.68762207]
[-3.93690562 -260.67663574]
[11.08058167 -260.85678101]
[26.01028252 -259.22540283]
[40.63447571 -255.80630493]
[54.73990250 -250.64933777]
[68.12086487 -243.82971191]
[80.58222198 -235.44686890]
[91.94225311 -225.62307739]
[102.03529358 -214.50157166]
[110.71416473 -202.24455261]
[117.85229492 -189.03074646]
[123.34559631 -175.05287170]
[127.11396027 -160.51475525]
[129.10241699 -145.62840271]
[129.28199768 -130.61091614]
[127.65006256 -115.68127441]
[124.23040771 -101.05721283]
[119.07291412 -86.95197296]
[112.25278473 -73.57127380]
[103.86948395 -61.11022949]
[94.04525757 -49.75056458]
[82.92337799 -39.65793610]
[70.66603088 -30.97952461]
[57.45196915 -23.84188461]
[62.93900299 -9.88149548]
[68.42603302 4.07889462]
[82.71624756 14.21741676]
[79.91420746 32.38685226]
[85.69048309 46.23007202]
[91.46675873 60.07328796]
[97.24302673 73.91650391]
[112.55923462 76.97360229]
[123.42221069 88.19535828]
[138.18826294 85.55648804]
[152.95431519 82.91762543]
[167.72038269 80.27876282]
[182.48643494 77.63990021]
[197.25248718 75.00103760]
[207.56683350 62.71307373]
[223.60055542 63.25976181]
[233.05398560 76.22171783]
[228.67523193 91.65564728]
[213.82331848 97.72195435]
[199.89135742 89.76708984]
[185.12528992 92.40595245]
[170.35923767 95.04481506]
[155.59318542 97.68368530]
[140.82713318 100.32254791]
[126.06107330 102.96141052]
[124.10630035 110.33612823]
[120.11189270 116.83630371]
[114.41580963 121.91195679]
[107.50000000 125.13362885]
[107.50000000 140.13363647]
[107.50000000 155.13363647]
[115.23729706 168.93380737]
[107.50000000 181.66107178]
[107.50000000 196.66107178]
[115.23729706 210.46124268]
[107.50000000 223.18852234]
[115.23729706 236.98869324]
[107.50000000 249.71595764]
[107.50000000 264.71597290]
[107.50000000 279.71597290]
[107.50000000 294.71597290]
[107.50000000 309.71597290]
[107.50000000 324.71597290]
[107.50000000 339.71597290]
[107.50000000 354.71597290]
[107.50000000 369.71597290]
[107.50000000 384.71597290]
[107.50000000 399.71597290]
[122.03988647 403.77728271]
[134.94427490 411.61178589]
[145.25555420 422.63812256]
[152.20857239 436.03805542]
[155.28736877 450.81719971]
[154.26348877 465.87887573]
[149.21287537 480.10540771]
[140.51036072 492.44107056]
[128.80169678 501.97048950]
[114.95575714 507.98651123]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[25 126]
[26 125]
[28 123]
[29 122]
[30 121]
[33 99]
[34 98]
[35 97]
[36 96]
[39 94]
[40 93]
[41 92]
[101 117]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
