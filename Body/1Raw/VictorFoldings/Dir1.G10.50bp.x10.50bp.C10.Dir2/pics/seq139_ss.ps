%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAUAUUACGGGGGGGGGGAGGCGAACAUACUUACUAAAGUGUGUUAAUUAAUUAAUGCUUGUAGGACAxxxxxxxxxxAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACCAACAAGCCCCCCCCCCUCAUUAUUAC\
) } def
/len { sequence length } bind def

/coor [
[101.32529449 363.71994019]
[86.83560944 359.51144409]
[73.92937469 351.69534302]
[63.48657608 340.80450439]
[56.21921158 327.58151245]
[52.62278366 312.92788696]
[52.94250870 297.84280396]
[57.15657806 283.35473633]
[64.97767639 270.45153809]
[75.87254333 260.01293945]
[89.09835052 252.75067139]
[103.75334167 249.15989685]
[104.06539917 234.16314697]
[104.37745667 219.16639709]
[104.68951416 204.16964722]
[105.00157166 189.17289734]
[105.31362152 174.17613220]
[105.62567902 159.17938232]
[105.93773651 144.18263245]
[106.24979401 129.18588257]
[100.86438751 123.96596527]
[94.26387787 137.43568420]
[79.41374969 135.32057190]
[76.83642578 120.54365540]
[90.09358215 113.52615356]
[84.70817566 108.30625153]
[69.72846222 109.08609772]
[54.74874878 109.86594391]
[39.76903534 110.64578247]
[24.78931999 111.42562866]
[9.80960464 112.20547485]
[-5.17010927 112.98532104]
[-20.14982414 113.76516724]
[-35.12953949 114.54501343]
[-48.58408737 123.92089081]
[-63.31418991 116.71282959]
[-64.16677094 100.33586121]
[-50.26477814 91.63720703]
[-35.90938187 99.56529999]
[-20.92966843 98.78545380]
[-5.94995451 98.00560760]
[9.02975941 97.22576141]
[24.00947380 96.44591522]
[38.98918915 95.66606903]
[53.96890259 94.88622284]
[68.94861603 94.10638428]
[83.92832947 93.32653809]
[86.15673828 86.16523743]
[92.84196472 64.68134308]
[80.94958496 55.53960800]
[69.05720520 46.39787292]
[52.73797607 44.78082657]
[46.22621155 29.72994995]
[56.22065353 16.72829056]
[72.43988037 19.15084267]
[78.19893646 34.50549316]
[90.09131622 43.64722824]
[101.98369598 52.78895950]
[116.96340942 52.00911713]
[127.84223938 41.68191147]
[138.72106934 31.35470581]
[149.59988403 21.02750206]
[160.47871399 10.70029640]
[171.35754395 0.37309164]
[176.03919983 -14.73957157]
[190.59669495 -17.89053154]
[201.47552490 -28.21773720]
[192.39778137 -40.17840958]
[184.69091797 -53.06512833]
[178.44851685 -66.72146606]
[173.74633789 -80.98164368]
[170.64144897 -95.67255402]
[169.17156982 -110.61587524]
[169.35452271 -125.63018799]
[171.18809509 -140.53324890]
[174.65003967 -155.14413452]
[179.69830322 -169.28550720]
[186.27162170 -182.78567505]
[194.29020691 -195.48077393]
[203.65670776 -207.21669006]
[214.25743103 -217.85096741]
[225.96369934 -227.25451660]
[238.63339233 -235.31317139]
[252.11271667 -241.92913818]
[266.23806763 -247.02206421]
[280.83795166 -250.53015137]
[295.73513794 -252.41081238]
[310.74880981 -252.64122009]
[325.69668579 -251.21856689]
[340.39733887 -248.16014099]
[354.67230225 -243.50303650]
[368.34829712 -237.30381775]
[381.25930786 -229.63772583]
[393.24859619 -220.59782410]
[404.17065430 -210.29383850]
[413.89288330 -198.85086060]
[422.29724121 -186.40780640]
[429.28170776 -173.11569214]
[434.76153564 -159.13589478]
[438.67019653 -144.63810730]
[440.96020508 -129.79833984]
[441.60379028 -114.79669952]
[440.59313965 -99.81532288]
[437.94052124 -85.03604889]
[433.67813110 -70.63829803]
[427.85772705 -56.79684067]
[420.54992676 -43.67970276]
[411.84347534 -31.44610786]
[401.84402466 -20.24456596]
[390.67300415 -10.21105099]
[378.46600342 -1.46736217]
[365.37118530 5.88036156]
[351.54754639 11.74292469]
[337.16284180 16.04916191]
[322.39172363 18.74679756]
[307.41348267 19.80308723]
[292.40997314 19.20520592]
[277.56326294 16.96041489]
[263.05364990 13.09595966]
[249.05722046 7.65875483]
[235.74389648 0.71480101]
[223.27528381 -7.65160799]
[211.80273438 -17.33891106]
[200.92390442 -7.01170683]
[197.02037048 7.36228561]
[181.68473816 11.25191689]
[170.80592346 21.57912254]
[159.92709351 31.90632629]
[149.04826355 42.23353195]
[138.16944885 52.56073761]
[127.29061890 62.88794327]
[121.24654388 129.49792480]
[120.93449402 144.49468994]
[120.62243652 159.49143982]
[120.31037903 174.48818970]
[119.99832153 189.48493958]
[119.68626404 204.48170471]
[119.37420654 219.47845459]
[119.06215668 234.47520447]
[118.75009918 249.47195435]
[133.24302673 253.66925049]
[146.15528870 261.47540283]
[156.60650635 272.35815430]
[163.88407898 285.57556152]
[167.49182129 300.22637939]
[167.18374634 315.31170654]
[162.98086548 329.80303955]
[155.16973877 342.71228027]
[144.28292847 353.15927124]
[131.06272888 360.43176270]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[26 47]
[27 46]
[28 45]
[29 44]
[30 43]
[31 42]
[32 41]
[33 40]
[34 39]
[49 58]
[50 57]
[51 56]
[59 131]
[60 130]
[61 129]
[62 128]
[63 127]
[64 126]
[66 124]
[67 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
