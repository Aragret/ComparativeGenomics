%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAGCAUUAGGGGGGGGGGCUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAxxxxxxxxxxGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCAUCGUCCCCCCCCCCCCUAGAAUUA\
) } def
/len { sequence length } bind def

/coor [
[71.60106659 466.22283936]
[57.75512314 460.20681763]
[46.04646301 450.67739868]
[37.34394073 438.34173584]
[32.29333878 424.11520386]
[31.26944542 409.05352783]
[34.34824371 394.27438354]
[41.30126572 380.87445068]
[51.61254883 369.84811401]
[64.51692963 362.01361084]
[79.05681610 357.95230103]
[79.05681610 342.95230103]
[79.05681610 327.95230103]
[79.05681610 312.95230103]
[79.05681610 297.95230103]
[79.05681610 282.95230103]
[79.05681610 267.95230103]
[79.05681610 252.95228577]
[79.05681610 237.95228577]
[79.05681610 222.95228577]
[71.10314178 220.74816895]
[63.71422195 217.07080078]
[57.16011047 212.05455017]
[51.68031693 205.88276672]
[47.47511292 198.78097534]
[44.69818115 191.00872803]
[29.73793221 192.10003662]
[14.77768326 193.19134521]
[-0.17276500 203.89013672]
[-15.66843033 195.71185303]
[-30.60273743 197.11415100]
[-45.53704453 198.51644897]
[-60.47135162 199.91876221]
[-73.52423096 209.84620667]
[-88.54142761 203.25714111]
[-90.07453156 186.92980957]
[-76.54642487 177.66038513]
[-61.87365723 184.98445129]
[-46.93935013 183.58215332]
[-32.00504303 182.17984009]
[-17.07073402 180.77754211]
[-9.08020592 171.64196777]
[3.39540410 170.38572693]
[13.68637276 178.23109436]
[28.64662170 177.13978577]
[43.60686874 176.04847717]
[52.62384796 153.39547729]
[72.55361176 139.14053345]
[97.14751434 137.91439819]
[103.21053314 124.19433594]
[93.66259003 122.94569397]
[85.57528687 118.17452240]
[80.14932251 110.80640411]
[78.10382080 102.13330078]
[79.58474731 93.58897400]
[84.17024994 86.51235199]
[90.96731567 81.93772125]
[89.72043610 66.98963165]
[88.47356415 52.04154968]
[87.22669220 37.09346008]
[85.97981262 22.14537430]
[84.73294067 7.19728756]
[72.95065308 -2.99169779]
[71.89908600 -18.16894531]
[81.68533325 -29.33876610]
[80.43846130 -44.28685379]
[65.94905853 -48.88312912]
[54.32474136 -58.67821503]
[47.33812714 -72.17842102]
[46.05462265 -87.32507324]
[50.66995621 -101.80841064]
[60.48032379 -113.41983795]
[73.98970795 -120.38868713]
[89.13803864 -121.65226746]
[103.61529541 -117.01788330]
[115.21380615 -107.19225311]
[122.16487885 -93.67370605]
[123.40852356 -78.52373505]
[118.75510406 -64.05258179]
[108.91422272 -52.46701050]
[95.38654327 -45.53372955]
[96.63342285 -30.58564186]
[108.13498688 -21.19151497]
[109.61243439 -6.04979086]
[99.68103027 5.95041275]
[100.92790222 20.89850044]
[102.17477417 35.84658813]
[103.42165375 50.79467392]
[104.66852570 65.74275970]
[105.91539764 80.69084930]
[119.42366028 89.04364777]
[123.66953278 105.95202637]
[137.99212646 101.49520874]
[152.31472778 97.03839874]
[166.63732910 92.58158112]
[180.95993042 88.12476349]
[188.28100586 82.55219269]
[195.62702942 83.72756195]
[210.03924561 79.56967163]
[224.45146179 75.41178894]
[238.86367798 71.25389862]
[253.27589417 67.09600830]
[267.68811035 62.93812561]
[275.10745239 48.98358536]
[290.24526978 44.44245529]
[304.12057495 52.00890732]
[308.50140381 67.19389343]
[300.78869629 80.98843384]
[285.55822754 85.20848083]
[271.84600830 77.35034180]
[257.43377686 81.50822449]
[243.02157593 85.66611481]
[228.60935974 89.82400513]
[214.19714355 93.98188782]
[199.78492737 98.13977814]
[185.41673279 102.44736481]
[171.09414673 106.90417480]
[156.77154541 111.36099243]
[142.44894409 115.81781006]
[128.12634277 120.27462769]
[116.93058777 130.25735474]
[110.86756897 143.97740173]
[119.49391937 151.64212036]
[125.80777740 161.27853394]
[129.37881470 172.21183777]
[129.96839905 183.67945862]
[127.54542542 194.88432312]
[122.28788757 205.05015564]
[114.56979370 213.47534180]
[104.93457031 219.58132935]
[94.05681610 222.95228577]
[94.05681610 237.95228577]
[94.05681610 252.95228577]
[94.05681610 267.95230103]
[94.05681610 282.95230103]
[94.05681610 297.95230103]
[94.05681610 312.95230103]
[94.05681610 327.95230103]
[94.05681610 342.95230103]
[94.05681610 357.95230103]
[108.59670258 362.01361084]
[121.50108337 369.84811401]
[131.81237793 380.87445068]
[138.76539612 394.27438354]
[141.84419250 409.05352783]
[140.82029724 424.11520386]
[135.76969910 438.34173584]
[127.06717682 450.67739868]
[115.35851288 460.20681763]
[101.51257324 466.22283936]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 46]
[27 45]
[28 44]
[30 41]
[31 40]
[32 39]
[33 38]
[49 122]
[50 121]
[57 90]
[58 89]
[59 88]
[60 87]
[61 86]
[62 85]
[65 82]
[66 81]
[92 120]
[93 119]
[94 118]
[95 117]
[96 116]
[98 115]
[99 114]
[100 113]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
