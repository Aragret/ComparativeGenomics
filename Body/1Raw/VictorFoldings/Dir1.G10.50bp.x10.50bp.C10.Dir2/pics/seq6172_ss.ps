%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUUCGAAGGGGGGGGGGUUUGCAAUUCAAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAAxxxxxxxxxxAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCCCCCCCCCCCUUCUUCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.35101318 390.47717285]
[72.13081360 383.20471191]
[61.24401093 372.75772095]
[53.43288040 359.84844971]
[49.22999954 345.35714722]
[48.92192841 330.27182007]
[52.52966690 315.62097168]
[59.80723953 302.40359497]
[70.25844574 291.52081299]
[83.17070770 283.71469116]
[97.66365051 279.51739502]
[97.35159302 264.52062988]
[97.03953552 249.52388000]
[96.72747803 234.52713013]
[96.41542053 219.53038025]
[96.10336304 204.53363037]
[95.79131317 189.53686523]
[95.47925568 174.54011536]
[95.16719818 159.54336548]
[94.85514069 144.54661560]
[94.54308319 129.54985046]
[74.53587341 105.61498260]
[87.21771240 81.96890259]
[83.20997620 67.51421356]
[79.20223236 53.05952454]
[75.19449615 38.60483551]
[69.37998962 44.24098587]
[61.36239243 47.99643707]
[46.65443039 50.94191742]
[31.94647026 53.88740158]
[17.23850822 56.83288193]
[2.89504385 65.87176514]
[-9.76126003 54.59106064]
[-2.42502356 39.30656052]
[14.29302597 42.12491989]
[29.00098801 39.17943954]
[43.70895004 36.23395538]
[58.41691208 33.28847504]
[43.51206207 34.97533417]
[29.89318085 28.68835831]
[21.50887871 16.25037384]
[20.79007530 1.26760578]
[27.94517708 -11.91588879]
[40.89965820 -19.47772980]
[55.89753723 -19.22546387]
[68.59037781 -11.23223019]
[75.29805756 2.18443871]
[74.07662964 17.13226128]
[76.56174469 2.33955407]
[79.04686737 -12.45315266]
[81.22370148 -27.29435921]
[83.09131622 -42.17763901]
[84.02694702 -57.14842987]
[84.02694702 -72.14842987]
[84.02694702 -87.14842987]
[84.02694702 -102.14842987]
[70.34644318 -108.82715607]
[60.96059799 -120.73483276]
[57.68895721 -135.47648621]
[61.12814713 -150.11660767]
[70.54388428 -161.76364136]
[84.02694702 -168.14114380]
[84.02694702 -183.14114380]
[76.28964233 -196.94131470]
[84.02694702 -209.66857910]
[84.02694702 -224.66857910]
[84.02694702 -239.66857910]
[69.77427673 -244.82971191]
[58.14834595 -254.55665588]
[50.55304337 -267.67486572]
[47.90554047 -282.60021973]
[50.52553177 -297.53045654]
[58.09664536 -310.66262817]
[69.70462799 -320.41098022]
[83.94776917 -325.59835815]
[99.10612488 -325.59835815]
[113.34925842 -320.41098022]
[124.95724487 -310.66262817]
[132.52835083 -297.53045654]
[135.14834595 -282.60021973]
[132.50083923 -267.67486572]
[124.90554810 -254.55665588]
[113.27961731 -244.82971191]
[99.02694702 -239.66857910]
[99.02694702 -224.66857910]
[99.02694702 -209.66857910]
[106.76424408 -196.94131470]
[99.02694702 -183.14114380]
[99.02694702 -168.14114380]
[112.51000977 -161.76364136]
[121.92574310 -150.11660767]
[125.36492920 -135.47648621]
[122.09329224 -120.73483276]
[112.70744324 -108.82715607]
[99.02694702 -102.14842987]
[99.02694702 -87.14842987]
[99.02694702 -72.14842987]
[99.02694702 -57.14842987]
[110.64778137 -66.63295746]
[125.58967590 -65.31399536]
[135.36932373 -53.94040680]
[134.43426514 -38.96957779]
[123.31541443 -28.90126419]
[108.32551575 -29.45178795]
[97.97459412 -40.31002426]
[96.10697937 -25.42674637]
[98.31932068 -21.12778282]
[97.80892181 -15.38576126]
[93.83957672 -9.96803474]
[91.35445404 4.82467270]
[88.86933899 19.61738014]
[89.64917755 34.59709549]
[93.65692139 49.05178452]
[97.66466522 63.50646973]
[101.67240143 77.96115875]
[108.45033264 78.15041351]
[115.22087097 80.48200989]
[121.29538727 84.95153809]
[125.99314117 91.33175659]
[128.71321106 99.17883301]
[129.00288391 107.86160278]
[142.38917542 114.62971497]
[158.72416687 113.18058777]
[167.92390442 126.75618744]
[160.52447510 141.39109802]
[144.13778687 142.03018188]
[135.62104797 128.01600647]
[122.23477173 121.24788666]
[109.53984070 129.23780823]
[109.85189819 144.23455811]
[110.16394806 159.23130798]
[110.47600555 174.22805786]
[110.78806305 189.22482300]
[111.10012054 204.22157288]
[111.41217804 219.21832275]
[111.72423553 234.21507263]
[112.03628540 249.21182251]
[112.34834290 264.20858765]
[112.66040039 279.20532227]
[127.31539154 282.79611206]
[140.54119873 290.05834961]
[151.43606567 300.49694824]
[159.25717163 313.40017700]
[163.47123718 327.88824463]
[163.79095459 342.97332764]
[160.19453430 357.62692261]
[152.92716980 370.84994507]
[142.48437500 381.74078369]
[129.57814026 389.55688477]
[115.08844757 393.76538086]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 115]
[24 114]
[25 113]
[26 112]
[28 38]
[29 37]
[30 36]
[31 35]
[48 111]
[49 110]
[50 109]
[51 106]
[52 105]
[53 98]
[54 97]
[55 96]
[56 95]
[62 89]
[63 88]
[65 86]
[66 85]
[67 84]
[121 128]
[122 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
