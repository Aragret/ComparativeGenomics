%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GGCUCACUAAGGGGGGGGGGACAUUCUACUACUCACUCUCACUGCCCAAGAACUAUCAAACUCCUGAGCCxxxxxxxxxxUACUAGUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGCCCCCCCCCCGGCUCACUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.47406006]
[71.19830322 349.45803833]
[59.48964310 339.92861938]
[50.78712082 327.59295654]
[45.73651886 313.36642456]
[44.71262741 298.30474854]
[47.79142761 283.52557373]
[54.74444962 270.12564087]
[65.05573273 259.09933472]
[77.96011353 251.26481628]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[92.50000000 72.79650116]
[92.50000000 57.79650116]
[92.50000000 42.79650116]
[77.52366638 41.87293625]
[62.63258743 40.02916336]
[47.88325882 37.27217865]
[33.33162689 33.61243820]
[19.03289604 29.06382179]
[5.04130173 23.64358902]
[-8.59008026 17.37229919]
[-21.80953979 10.27373981]
[-34.56692886 2.37484050]
[-46.81386185 -6.29443598]
[-58.50387192 -15.70120430]
[-69.59262085 -25.80978012]
[-80.03804016 -36.58182144]
[-89.80050659 -47.97645950]
[-98.84299469 -59.95047760]
[-107.13120270 -72.45845032]
[-114.63368225 -85.45292664]
[-121.32197571 -98.88462067]
[-127.17071533 -112.70257568]
[-132.15771484 -126.85437775]
[-136.26405334 -141.28634644]
[-139.47415161 -155.94372559]
[-141.77584839 -170.77091980]
[-143.16038513 -185.71170044]
[-143.62252808 -200.70936584]
[-143.16053772 -215.70703125]
[-141.77613831 -230.64782715]
[-139.47459412 -245.47505188]
[-136.26463318 -260.13247681]
[-132.15843201 -274.56445312]
[-127.17157745 -288.71630859]
[-121.32297516 -302.53433228]
[-114.63481140 -315.96609497]
[-107.13246155 -328.96063232]
[-98.84438324 -341.46868896]
[-89.80200958 -353.44281006]
[-80.03964996 -364.83752441]
[-69.59433746 -375.60968018]
[-58.50569153 -385.71835327]
[-46.81577301 -395.12524414]
[-34.56892776 -403.79464722]
[-21.81161308 -411.69366455]
[-8.59222317 -418.79235840]
[5.03909636 -425.06378174]
[19.03063774 -430.48416138]
[33.32932663 -435.03289795]
[47.88092041 -438.69277954]
[62.63021851 -441.44992065]
[77.52127838 -443.29385376]
[92.49760437 -444.21755981]
[107.50239563 -444.21755981]
[122.47872162 -443.29385376]
[137.36978149 -441.44992065]
[152.11907959 -438.69277954]
[166.67066956 -435.03289795]
[180.96936035 -430.48416138]
[194.96090698 -425.06378174]
[208.59222412 -418.79235840]
[221.81161499 -411.69366455]
[234.56892395 -403.79464722]
[246.81576538 -395.12524414]
[258.50567627 -385.71835327]
[269.59432983 -375.60968018]
[280.03964233 -364.83752441]
[289.80200195 -353.44281006]
[298.84439087 -341.46868896]
[307.13247681 -328.96063232]
[314.63482666 -315.96609497]
[321.32296753 -302.53433228]
[327.17156982 -288.71630859]
[332.15844727 -274.56445312]
[336.26464844 -260.13247681]
[339.47457886 -245.47505188]
[341.77612305 -230.64782715]
[343.16052246 -215.70703125]
[343.62252808 -200.70936584]
[343.16040039 -185.71170044]
[341.77584839 -170.77091980]
[339.47415161 -155.94372559]
[336.26403809 -141.28634644]
[332.15771484 -126.85437775]
[327.17071533 -112.70257568]
[321.32196045 -98.88462067]
[314.63366699 -85.45292664]
[307.13119507 -72.45845032]
[298.84298706 -59.95047760]
[289.80050659 -47.97645950]
[280.03802490 -36.58182144]
[269.59262085 -25.80978012]
[258.50387573 -15.70120430]
[246.81385803 -6.29443598]
[234.56692505 2.37484050]
[221.80953979 10.27373981]
[208.59007263 17.37229919]
[194.95869446 23.64358902]
[180.96710205 29.06382179]
[166.66836548 33.61243820]
[152.11674500 37.27217865]
[137.36741638 40.02916336]
[122.47633362 41.87293625]
[107.50000000 42.79650116]
[107.50000000 57.79650116]
[107.50000000 72.79650116]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.03988647 251.26481628]
[134.94427490 259.09933472]
[145.25555420 270.12564087]
[152.20857239 283.52557373]
[155.28736877 298.30474854]
[154.26348877 313.36642456]
[149.21287537 327.59295654]
[140.51036072 339.92861938]
[128.80169678 349.45803833]
[114.95575714 355.47406006]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 129]
[23 128]
[24 127]
[25 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
