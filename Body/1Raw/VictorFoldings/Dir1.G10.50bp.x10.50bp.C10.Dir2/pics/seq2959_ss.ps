%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAAUAACUUGGGGGGGGGGGACCAACGGAACAAGUUACCCUAGGGAUAACAGCGCAAUCCUAUUCUAGAxxxxxxxxxxCCCAUCCUCCAUAUAUCCAAACAACAAAGCAUAAUAUUUCGCCCACUAAGCCCCCCCCCCCCAAUCACUU\
) } def
/len { sequence length } bind def

/coor [
[83.61500549 451.71276855]
[69.76906586 445.69674683]
[58.06040192 436.16732788]
[49.35787964 423.83166504]
[44.30727768 409.60513306]
[43.28338623 394.54345703]
[46.36218643 379.76431274]
[53.31520462 366.36437988]
[63.62649155 355.33804321]
[76.53086853 347.50354004]
[91.07075500 343.44223022]
[91.07075500 328.44223022]
[91.07075500 313.44223022]
[91.07075500 298.44223022]
[91.07075500 283.44223022]
[91.07075500 268.44223022]
[91.07075500 253.44223022]
[91.07075500 238.44223022]
[91.07075500 223.44223022]
[91.07075500 208.44223022]
[77.88127899 203.55331421]
[67.13676453 194.42851257]
[60.14660263 182.15296936]
[57.77183533 168.19738770]
[60.31911469 154.24185181]
[67.50129700 141.97352600]
[78.46962738 132.88270569]
[91.91403961 128.08181763]
[92.22609711 113.08506012]
[86.39212799 126.90406036]
[72.25470734 131.91737366]
[59.01807022 124.86106873]
[55.29999161 110.32917786]
[63.52114487 97.78276062]
[78.32867432 95.39009857]
[63.68517303 92.13927460]
[49.04167175 88.88845062]
[34.39817047 85.63762665]
[19.24914169 90.20024109]
[8.50119305 79.88854980]
[-6.14230776 76.63772583]
[-22.91537094 79.10768127]
[-29.93204498 63.67386627]
[-17.04380035 52.65890121]
[-2.89148211 61.99422455]
[11.75201893 65.24504852]
[25.85364914 60.44991302]
[37.64899826 70.99412537]
[52.29249954 74.24494934]
[66.93599701 77.49577332]
[81.57949829 80.74659729]
[91.48558044 84.60443115]
[97.91143036 91.71900940]
[105.09394073 78.55043030]
[112.27645111 65.38184357]
[112.09181976 49.56171799]
[124.97869110 42.09325790]
[132.16119385 28.92467499]
[139.34370422 15.75609303]
[127.01620483 7.18404675]
[115.68778992 -2.67060757]
[105.49127197 -13.69232941]
[96.54621887 -25.75189590]
[88.95748138 -38.70791245]
[82.81405640 -52.40848160]
[78.18795776 -66.69296265]
[75.13343048 -81.39388275]
[73.68628693 -96.33888245]
[73.86348724 -111.35273743]
[75.66296387 -126.25942230]
[79.06362152 -140.88415527]
[84.02557373 -155.05546570]
[90.49065399 -168.60722351]
[98.38306427 -181.38052368]
[107.61026764 -193.22560120]
[118.06407166 -204.00358582]
[129.62193298 -213.58811951]
[142.14831543 -221.86682129]
[155.49636841 -228.74263000]
[169.50958252 -234.13493347]
[184.02368164 -237.98048401]
[198.86846924 -240.23423767]
[213.86991882 -240.86973572]
[228.85214233 -239.87953186]
[243.63946533 -237.27525330]
[258.05853271 -233.08741760]
[271.94024658 -227.36514282]
[285.12191772 -220.17549133]
[297.44897461 -211.60278320]
[308.77685547 -201.74752808]
[318.97277832 -190.72525024]
[327.91717529 -178.66520691]
[335.50521851 -165.70878601]
[341.64791870 -152.00788879]
[346.27322388 -137.72314453]
[349.32696533 -123.02206421]
[350.77331543 -108.07698822]
[350.59530640 -93.06314087]
[348.79501343 -78.15655518]
[345.39358521 -63.53200912]
[340.43087769 -49.36095810]
[333.96505737 -35.80955505]
[326.07196045 -23.03668213]
[316.84411621 -11.19209480]
[306.38973999 -0.41466618]
[294.83135986 9.16924477]
[282.30453491 17.44727325]
[268.95611572 24.32236099]
[254.94259644 29.71390152]
[240.42829895 33.55868149]
[225.58337402 35.81162643]
[210.58189392 36.44631958]
[195.59974670 35.45531845]
[180.81256104 32.85023880]
[166.39372253 28.66163254]
[152.51228333 22.93860245]
[145.32977295 36.10718536]
[138.14727783 49.27576828]
[138.84564209 64.15399170]
[125.44503021 72.56435394]
[118.26251984 85.73294067]
[111.08000946 98.90151978]
[107.22285461 113.39711761]
[106.91079712 128.39387512]
[121.65019226 134.74102783]
[132.80819702 146.22155762]
[138.70449829 161.06431580]
[138.46736145 176.99513245]
[132.16238403 191.58523560]
[120.77803802 202.62150574]
[106.07075500 208.44223022]
[106.07075500 223.44223022]
[106.07075500 238.44223022]
[106.07075500 253.44223022]
[106.07075500 268.44223022]
[106.07075500 283.44223022]
[106.07075500 298.44223022]
[106.07075500 313.44223022]
[106.07075500 328.44223022]
[106.07075500 343.44223022]
[120.61064911 347.50354004]
[133.51502991 355.33804321]
[143.82630920 366.36437988]
[150.77932739 379.76431274]
[153.85812378 394.54345703]
[152.83424377 409.60513306]
[147.78364563 423.83166504]
[139.08111572 436.16732788]
[127.37245178 445.69674683]
[113.52651215 451.71276855]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 124]
[29 123]
[35 51]
[36 50]
[37 49]
[38 48]
[40 46]
[41 45]
[53 122]
[54 121]
[55 120]
[57 118]
[58 117]
[59 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
