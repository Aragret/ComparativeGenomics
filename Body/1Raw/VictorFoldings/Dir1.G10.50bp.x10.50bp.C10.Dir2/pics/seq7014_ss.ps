%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCGUACUAGGGGGGGGGGCACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCUAUCAAUAGGxxxxxxxxxxUACUACGGUCAAUGCUCUGAAAUCUGUGGAGCAAACCACAGUUUCAUGCCCCCCCCCCCCCAUCGUCCUA\
) } def
/len { sequence length } bind def

/coor [
[81.55503845 396.40853882]
[68.99681854 388.05737305]
[58.91059494 376.84494019]
[51.93040085 363.47601318]
[48.49501801 348.79101562]
[48.82039261 333.71307373]
[52.88607788 319.18994141]
[60.43649673 306.13461304]
[70.99702454 295.36770630]
[83.90382385 287.56607056]
[98.34555054 283.22012329]
[97.72157288 268.23309326]
[97.09759521 253.24609375]
[96.47361755 238.25907898]
[95.84963989 223.27206421]
[95.22566223 208.28504944]
[94.60168457 193.29801941]
[93.97770691 178.31100464]
[93.35372925 163.32398987]
[92.72975159 148.33697510]
[92.10577393 133.34996033]
[91.48179626 118.36294556]
[82.71173859 106.99935150]
[84.07622528 93.87720490]
[73.63641357 83.10639191]
[63.19660187 72.33558655]
[48.78438568 68.17769623]
[34.21168137 71.73246002]
[19.63897896 75.28722382]
[5.06627655 78.84198761]
[-8.88876820 88.46971130]
[-22.00337791 77.72525024]
[-15.30930328 62.14880371]
[1.51151454 64.26927948]
[16.08421707 60.71451950]
[30.65691948 57.15975952]
[45.22962189 53.60499573]
[51.00589371 39.76177979]
[43.28181076 26.90337563]
[35.55772400 14.04497433]
[27.83364105 1.18657184]
[20.10955620 -11.67183018]
[4.23521662 -6.89400816]
[-12.32282066 -6.33489037]
[-28.46323967 -10.02639961]
[-43.11384964 -17.71791458]
[-55.30280685 -28.89328003]
[-64.22308350 -42.80543137]
[-69.28588867 -58.52635193]
[-70.15954590 -75.00895691]
[-66.79122162 -91.15685272]
[-59.41004944 -105.89723969]
[-48.51160812 -118.25222015]
[-57.02269745 -130.60379028]
[-65.53379059 -142.95536804]
[-74.04487610 -155.30693054]
[-89.46061707 -154.70822144]
[-102.74124908 -162.55859375]
[-109.64896393 -176.35305786]
[-107.97953796 -191.68981934]
[-98.26567841 -203.67500305]
[-83.60704803 -208.48416138]
[-68.68115234 -204.58271790]
[-58.25080109 -193.21560669]
[-55.64427185 -178.01002502]
[-61.69330597 -163.81802368]
[-53.18221664 -151.46646118]
[-44.67112732 -139.11488342]
[-36.16003799 -126.76331329]
[-23.61030579 -131.80354309]
[-10.27422428 -134.09002686]
[3.25097656 -133.51756287]
[16.35899734 -130.10899353]
[28.46164703 -124.01439667]
[39.01524734 -115.50442505]
[47.54504776 -104.95829773]
[53.66657639 -92.84693146]
[57.10298538 -79.71188354]
[57.69755554 -66.14113617]
[55.42084122 -52.74279404]
[50.37213516 -40.11782074]
[42.77511978 -28.83308411]
[32.96795654 -19.39591599]
[40.69204330 -6.53751326]
[48.41612625 6.32088947]
[56.14021301 19.17929077]
[63.86429596 32.03769302]
[73.96740723 61.89577484]
[84.40721893 72.66658020]
[94.84703064 83.43739319]
[89.55785370 69.40084839]
[93.96756744 55.06367493]
[106.23077393 46.42575455]
[121.21553040 47.10190964]
[132.65095520 56.80918503]
[135.75149536 71.48523712]
[129.21965027 84.98838043]
[115.78762054 91.66793823]
[130.76733398 90.88809204]
[145.74705505 90.10824585]
[160.72676086 89.32839966]
[175.70648193 88.54856110]
[184.17742920 84.95763397]
[191.00529480 87.91159821]
[205.99798584 87.44355774]
[220.99069214 86.97551727]
[235.98338318 86.50746918]
[250.97607422 86.03942871]
[265.96878052 85.57138824]
[276.60592651 73.88265228]
[292.39642334 73.22252655]
[303.97204590 83.98265839]
[304.46517944 99.77925873]
[293.58325195 111.24047089]
[277.78234863 111.56656647]
[266.43682861 100.56408691]
[251.44412231 101.03212738]
[236.45143127 101.50016785]
[221.45872498 101.96820831]
[206.46603394 102.43625641]
[191.47334290 102.90429688]
[176.48632812 103.52827454]
[161.50660706 104.30812073]
[146.52688599 105.08795929]
[131.54718018 105.86780548]
[116.56746674 106.64765167]
[106.46881104 117.73896790]
[107.09278870 132.72598267]
[107.71676636 147.71299744]
[108.34074402 162.70001221]
[108.96472168 177.68702698]
[109.58869934 192.67404175]
[110.21267700 207.66107178]
[110.83665466 222.64808655]
[111.46063232 237.63510132]
[112.08460999 252.62211609]
[112.70858765 267.60913086]
[113.33256531 282.59616089]
[128.08557129 285.72659302]
[141.59620667 292.42834473]
[153.01518250 302.28012085]
[161.62469482 314.66265869]
[166.88354492 328.79757690]
[168.46115112 343.79629517]
[166.25834656 358.71603394]
[160.41360474 372.61889648]
[151.29432678 384.63095093]
[139.47375488 393.99710083]
[125.69493866 400.12860107]
[110.82403564 402.64001465]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[24 90]
[25 89]
[26 88]
[27 37]
[28 36]
[29 35]
[30 34]
[38 87]
[39 86]
[40 85]
[41 84]
[42 83]
[53 69]
[54 68]
[55 67]
[56 66]
[98 126]
[99 125]
[100 124]
[101 123]
[102 122]
[104 121]
[105 120]
[106 119]
[107 118]
[108 117]
[109 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
