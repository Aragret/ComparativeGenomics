%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUAAUAUGAGGGGGGGGGGUUUAUCUCCACACUAGCAGAGACCAACCGAACCCCCUUCGACCUUGCCGAxxxxxxxxxxAUCGUCCCAACAAUUAUAUUACUACCACUGACAUGACUUUCCAAAAAACACCCCCCCCCCCAUAAUUUGA\
) } def
/len { sequence length } bind def

/coor [
[86.15861511 418.30041504]
[72.93841553 411.02795410]
[62.05161285 400.58096313]
[54.24048233 387.67169189]
[50.03760147 373.18038940]
[49.72952652 358.09503174]
[53.33726883 343.44421387]
[60.61484146 330.22683716]
[71.06604767 319.34405518]
[83.97830963 311.53793335]
[98.47124481 307.34063721]
[98.15919495 292.34387207]
[97.84713745 277.34713745]
[97.53507996 262.35037231]
[97.22302246 247.35362244]
[96.91096497 232.35687256]
[96.59890747 217.36010742]
[96.28685760 202.36335754]
[95.97480011 187.36660767]
[95.50675964 172.37391663]
[94.88278198 157.38688660]
[94.25880432 142.39987183]
[93.63482666 127.41285706]
[79.95945740 127.65528870]
[65.65007019 120.81448364]
[50.88401413 123.45335388]
[36.11795807 126.09221649]
[21.35190392 128.73107910]
[16.20776367 143.20289612]
[4.50650024 153.15156555]
[-10.60430622 155.90093994]
[-25.05992508 150.71147156]
[-34.97186661 138.97908020]
[-37.67387009 123.85972595]
[-32.43910599 109.42044067]
[-20.67570496 99.54532623]
[-5.54795885 96.89073181]
[8.87484264 102.17072296]
[18.71303940 113.96502686]
[33.47909546 111.32615662]
[48.24515152 108.68729401]
[63.01120758 106.04843140]
[64.86428833 98.78096008]
[49.89546204 99.74755096]
[44.35073471 85.80997467]
[55.89286423 76.22982025]
[68.57044983 84.24602509]
[70.42353058 76.97856140]
[58.72390366 67.59140015]
[47.02428055 58.20423508]
[35.32465744 48.81707382]
[19.28464890 49.12959290]
[9.15082169 36.69234848]
[12.69698143 21.04612541]
[27.20281792 14.19336796]
[41.54069519 21.39092636]
[44.71181870 37.11745071]
[56.41144180 46.50461197]
[68.11106873 55.89177322]
[79.81069183 65.27893829]
[90.08841705 64.18761444]
[99.54485321 65.84987640]
[107.50523376 69.77008820]
[113.49280548 75.30334473]
[123.93261719 64.53253937]
[134.37243652 53.76173019]
[124.80499268 42.18903351]
[116.56874084 29.63405991]
[109.76365662 16.24921799]
[104.47233582 2.19698811]
[100.75903320 -12.35205078]
[98.66880035 -27.22128487]
[98.22702789 -42.23021698]
[99.43907166 -57.19665146]
[102.29021454 -71.93891144]
[106.74585724 -86.27803040]
[112.75189972 -100.03995514]
[120.23544312 -113.05763245]
[129.10563660 -125.17301941]
[139.25482178 -136.23907471]
[150.55976868 -146.12142944]
[162.88327026 -154.70016479]
[176.07572937 -161.87110901]
[189.97697449 -167.54722595]
[204.41828918 -171.65960693]
[219.22434998 -174.15834045]
[234.21543884 -175.01309204]
[249.20956421 -174.21348572]
[264.02471924 -171.76922607]
[278.48104858 -167.70997620]
[292.40307617 -162.08502197]
[305.62182617 -154.96264648]
[317.97680664 -146.42930603]
[329.31802368 -136.58859253]
[339.50781250 -125.55994415]
[348.42251587 -113.47725677]
[355.95388794 -100.48719788]
[362.01052856 -86.74745178]
[366.51885986 -72.42481232]
[369.42422485 -57.69313812]
[370.69128418 -42.73126602]
[370.30471802 -27.72080994]
[368.26919556 -12.84398842]
[364.60940552 1.71860874]
[359.36981201 15.79020500]
[352.61401367 29.19998550]
[344.42398071 41.78516388]
[334.89916992 53.39297104]
[324.15521240 63.88249969]
[312.32247925 73.12641144]
[299.54464722 81.01250458]
[285.97683716 87.44503021]
[271.78372192 92.34592438]
[257.13760376 95.65568542]
[242.21627808 97.33412933]
[227.20088196 97.36089325]
[212.27366638 95.73564148]
[197.61584473 92.47811127]
[183.40534973 87.62783813]
[169.81468201 81.24371338]
[157.00883484 73.40322113]
[145.14323425 64.20154572]
[134.70343018 74.97235107]
[124.26361084 85.74316406]
[126.29735565 110.02143860]
[108.62184143 126.78888702]
[109.24581909 141.77589417]
[109.86979675 156.76290894]
[110.49377441 171.74993896]
[113.99638367 180.25778198]
[110.97154999 187.05455017]
[111.28360748 202.05130005]
[111.59566498 217.04804993]
[111.90772247 232.04481506]
[112.21977997 247.04156494]
[112.53182983 262.03833008]
[112.84388733 277.03506470]
[113.15594482 292.03182983]
[113.46800232 307.02856445]
[128.12300110 310.61935425]
[141.34880066 317.88159180]
[152.24366760 328.32019043]
[160.06477356 341.22341919]
[164.27883911 355.71148682]
[164.59855652 370.79656982]
[161.00213623 385.45016479]
[153.73477173 398.67318726]
[143.29196167 409.56402588]
[130.38574219 417.38012695]
[115.89604950 421.58862305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 129]
[21 128]
[22 127]
[23 126]
[25 42]
[26 41]
[27 40]
[28 39]
[48 60]
[49 59]
[50 58]
[51 57]
[64 124]
[65 123]
[66 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
