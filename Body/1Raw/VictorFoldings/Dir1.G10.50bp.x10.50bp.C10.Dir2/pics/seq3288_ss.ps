%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCCUACUCCUCAGGGGGGGGGGUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAxxxxxxxxxxCCUUUUCCUCCGACCCCCUAACAACCCCCCUCCUAAUACUAACUACCUGACCCCCCCCCCCUCCUACCCCUCA\
) } def
/len { sequence length } bind def

/coor [
[165.34922791 488.11428833]
[158.24713135 474.88464355]
[152.64353943 460.95397949]
[148.60647583 446.49145508]
[146.18493652 431.67254639]
[145.40832520 416.67721558]
[146.28607178 401.68746948]
[148.80751038 386.88525391]
[152.94204712 372.45025635]
[158.63948059 358.55773926]
[165.83065796 345.37631226]
[174.42828369 333.06597900]
[184.32797241 321.77618408]
[195.40957642 311.64401245]
[207.53855896 302.79238892]
[200.08192444 289.77706909]
[192.62528992 276.76174927]
[185.16865540 263.74642944]
[177.71202087 250.73110962]
[170.25538635 237.71578979]
[162.79875183 224.70046997]
[155.34211731 211.68515015]
[147.88548279 198.66983032]
[140.42884827 185.65451050]
[132.97221375 172.63917542]
[125.51557159 159.62385559]
[118.05893707 146.60853577]
[96.04795837 150.97590637]
[73.82749176 145.24887085]
[55.89432526 130.13414001]
[46.07095718 108.28063965]
[31.07771492 108.73079681]
[16.08447075 109.18096161]
[1.09122777 109.63111877]
[-7.53702831 122.52812958]
[-22.10970497 127.85886383]
[-37.02331161 123.57353973]
[-46.54326248 111.31996155]
[-47.00894165 95.80987549]
[-38.24128342 83.00723267]
[-23.61163712 77.83489990]
[-8.74539471 82.28174591]
[0.64106709 94.63787842]
[15.63431072 94.18772125]
[30.62755394 93.73755646]
[45.62079620 93.28739929]
[49.47891617 78.79205322]
[36.69323730 70.94818115]
[23.90755844 63.10430527]
[11.12187767 55.26042938]
[-1.66380262 47.41655350]
[-18.32652283 44.28764343]
[-19.93259430 27.40994263]
[-4.15908337 21.19442368]
[6.18007278 34.63087463]
[18.96575356 42.47474670]
[31.75143242 50.31862259]
[44.53711319 58.16249847]
[57.32279205 66.00637817]
[63.80116272 60.40810394]
[70.96390533 55.98389053]
[78.60588837 52.80764008]
[86.51607513 50.91843414]
[94.48323822 50.32056427]
[95.08338165 35.33257294]
[83.07483673 25.68368530]
[79.09696198 10.98572922]
[84.47293854 -3.06997633]
[96.94534302 -11.16795158]
[97.54548645 -26.15594101]
[98.14562988 -41.14393234]
[98.74577332 -56.13191986]
[99.34591675 -71.11991119]
[85.84617615 -78.24169159]
[76.78026581 -90.52062225]
[73.94822693 -105.51869965]
[77.91236115 -120.25804901]
[87.88558960 -131.81216431]
[101.88771820 -137.88696289]
[117.13861084 -137.27629089]
[130.61019897 -130.10139465]
[139.62768555 -117.78685760]
[142.40065002 -102.77774811]
[138.37849426 -88.05412292]
[128.35984802 -76.53937531]
[114.33390808 -70.51976776]
[113.73376465 -55.53177643]
[113.13362122 -40.54378510]
[112.53347015 -25.55579758]
[111.93332672 -10.56780720]
[123.71832275 -1.49852550]
[127.95326233 12.94201756]
[122.81295013 27.27486420]
[110.07137299 35.93271637]
[109.47122955 50.92070770]
[121.47018433 54.86118698]
[132.09849548 61.68331909]
[140.67764282 70.95157623]
[146.65994263 82.07427216]
[149.66348267 94.34134674]
[149.49652100 106.96967316]
[146.16970825 119.15304565]
[139.89544678 130.11370850]
[131.07426453 139.15190125]
[138.53089905 152.16722107]
[145.98753357 165.18254089]
[153.44416809 178.19787598]
[160.90080261 191.21319580]
[168.35743713 204.22851562]
[175.81407166 217.24383545]
[183.27070618 230.25915527]
[190.72734070 243.27447510]
[198.18397522 256.28979492]
[205.64060974 269.30511475]
[213.09724426 282.32043457]
[220.55387878 295.33575439]
[234.32432556 289.34927368]
[248.66976929 284.91400146]
[263.41604614 282.08380127]
[278.38418579 280.89300537]
[293.39248657 281.35610962]
[308.25872803 283.46746826]
[322.80249023 287.20144653]
[336.84719849 292.51269531]
[350.22235107 299.33679199]
[362.76559448 307.59088135]
[374.32470703 317.17474365]
[384.75930786 327.97204590]
[393.94277954 339.85174561]
[401.76361084 352.66961670]
[408.12689209 366.27005005]
[412.95535278 380.48797607]
[416.19039917 395.15075684]
[417.79275513 410.08044434]
[417.74295044 425.09579468]
[416.04162598 440.01455688]
[412.70941162 454.65557861]
[407.78677368 468.84115601]
[401.33343506 482.39907837]
[393.42773438 495.16479492]
[384.16567993 506.98330688]
[373.65969849 517.71118164]
[362.03729248 527.21820068]
[349.43957520 535.38891602]
[336.01943970 542.12414551]
[321.93981934 547.34216309]
[307.37164307 550.97955322]
[292.49169922 552.99224854]
[277.48068237 553.35583496]
[262.52075195 552.06579590]
[247.79356384 549.13787842]
[233.47785950 544.60754395]
[219.74742126 538.52984619]
[206.76892090 530.97857666]
[194.69992065 522.04534912]
[183.68692017 511.83862305]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 116]
[16 115]
[17 114]
[18 113]
[19 112]
[20 111]
[21 110]
[22 109]
[23 108]
[24 107]
[25 106]
[26 105]
[27 104]
[31 46]
[32 45]
[33 44]
[34 43]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[64 95]
[65 94]
[69 90]
[70 89]
[71 88]
[72 87]
[73 86]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
