%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUACCCCCCAAUGGGGGGGGGGUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAxxxxxxxxxxACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCUCGCCCCCCCCCCCCUUACCCCCCACU\
) } def
/len { sequence length } bind def

/coor [
[86.64510345 478.31594849]
[72.28285217 473.80920410]
[59.12196732 466.50332642]
[47.70136642 456.69747925]
[38.48872757 444.79318237]
[31.86130142 431.27792358]
[28.09047127 416.70516968]
[27.33065414 401.67160034]
[29.61296463 386.79290771]
[34.84394073 372.67831421]
[42.80937958 359.90582275]
[53.18310165 348.99844360]
[65.54030609 340.40283203]
[79.37497711 334.47100830]
[94.12059784 331.44583130]
[94.12059784 316.44583130]
[94.12059784 301.44583130]
[94.12059784 286.44583130]
[94.12059784 271.44583130]
[94.12059784 256.44583130]
[94.12059784 241.44581604]
[94.12059784 226.44581604]
[94.12059784 211.44581604]
[94.12059784 196.44581604]
[84.53131104 181.77554321]
[93.80065155 165.89300537]
[93.50428772 150.89593506]
[93.20793152 135.89886475]
[76.70011139 128.14207458]
[65.99913025 113.37166595]
[51.21017456 115.87904358]
[36.42122650 118.38642120]
[21.63227463 120.89379883]
[9.35258865 131.76307678]
[-6.11241817 126.30729675]
[-8.85367298 110.13888550]
[3.94879222 99.89051819]
[19.12489891 106.10484314]
[33.91384888 103.59746552]
[48.70280075 101.09009552]
[63.49175262 98.58271790]
[64.65847778 90.73514557]
[67.49173737 83.32446289]
[71.85792542 76.70011139]
[77.55116272 71.17447662]
[84.30297852 67.00811768]
[91.79499054 64.39749146]
[91.49863434 49.40041733]
[83.49019623 35.75580597]
[90.97453308 22.87815094]
[90.67816925 7.88107824]
[90.38181305 -7.11599398]
[90.08545685 -22.11306572]
[89.78910065 -37.11013794]
[76.44431305 -44.58435822]
[68.68364716 -57.64838791]
[68.50523376 -72.74257660]
[75.85684967 -85.81199646]
[88.67684174 -93.39575958]
[88.38048553 -108.39282990]
[88.08412170 -123.38990021]
[87.78776550 -138.38697815]
[72.93748474 -140.77632141]
[58.75255966 -145.77908325]
[45.68897629 -153.23445129]
[34.16667557 -162.90277100]
[24.55604553 -174.47323608]
[17.16603661 -187.57389832]
[12.23420238 -201.78364563]
[9.91908169 -216.64567566]
[10.29509640 -231.68223572]
[13.35015965 -246.40998840]
[18.98606300 -260.35546875]
[27.02163696 -273.07037354]
[37.19857025 -284.14602661]
[49.18971252 -293.22634888]
[62.60960388 -300.01943970]
[77.02684784 -304.30697632]
[91.97799683 -305.95108032]
[106.98242188 -304.89892578]
[121.55779266 -301.18432617]
[135.23558044 -294.92669678]
[147.57609558 -286.32720947]
[158.18264771 -275.66226196]
[166.71426392 -263.27471924]
[172.89671326 -249.56278992]
[176.53123474 -234.96723938]
[177.50099182 -219.95726013]
[175.77482605 -205.01536560]
[171.40823364 -190.62188721]
[164.54154968 -177.23948669]
[155.39553833 -165.29837036]
[144.26419067 -155.18240356]
[131.50534058 -147.21675110]
[117.52912903 -141.65748596]
[102.78483582 -138.68333435]
[103.08119965 -123.68625641]
[103.37755585 -108.68918610]
[103.67391205 -93.69211578]
[116.78350067 -86.62075043]
[124.64570618 -73.85196686]
[125.06375122 -58.76251602]
[117.82525635 -45.40208817]
[104.78617096 -37.40649414]
[105.08252716 -22.40942383]
[105.37888336 -7.41235113]
[105.67524719 7.58472109]
[105.97160339 22.58179283]
[113.95884705 35.15371323]
[106.49571228 49.10406113]
[106.79206848 64.10113525]
[120.70176697 69.89521790]
[131.09022522 80.80993652]
[136.19044495 94.98876190]
[151.15458679 96.02525330]
[166.11874390 97.06174469]
[181.08288574 98.09823608]
[191.80729675 86.71750641]
[207.34400940 84.94422150]
[220.35707092 93.61568451]
[224.70210266 108.63748932]
[218.32752991 122.91680145]
[204.24320984 129.71136475]
[189.09934998 125.81299591]
[180.04640198 113.06238556]
[165.08224487 112.02589417]
[150.11810303 110.98940277]
[135.15396118 109.95291138]
[125.18879700 126.46479797]
[108.20500946 135.60250854]
[108.50136566 150.59957886]
[108.79772186 165.59664917]
[117.55692291 175.11175537]
[117.46569824 187.64280701]
[109.12059784 196.44581604]
[109.12059784 211.44581604]
[109.12059784 226.44581604]
[109.12059784 241.44581604]
[109.12059784 256.44583130]
[109.12059784 271.44583130]
[109.12059784 286.44583130]
[109.12059784 301.44583130]
[109.12059784 316.44583130]
[109.12059784 331.44583130]
[123.86621094 334.47100830]
[137.70088196 340.40283203]
[150.05809021 348.99844360]
[160.43180847 359.90582275]
[168.39724731 372.67831421]
[173.62821960 386.79290771]
[175.91053772 401.67160034]
[175.15072632 416.70516968]
[171.37989807 431.27792358]
[164.75245667 444.79318237]
[155.53982544 456.69747925]
[144.11923218 466.50332642]
[130.95834351 473.80920410]
[116.59608459 478.31594849]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 144]
[16 143]
[17 142]
[18 141]
[19 140]
[20 139]
[21 138]
[22 137]
[23 136]
[24 135]
[26 132]
[27 131]
[28 130]
[30 41]
[31 40]
[32 39]
[33 38]
[47 111]
[48 110]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
[59 99]
[60 98]
[61 97]
[62 96]
[114 128]
[115 127]
[116 126]
[117 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
