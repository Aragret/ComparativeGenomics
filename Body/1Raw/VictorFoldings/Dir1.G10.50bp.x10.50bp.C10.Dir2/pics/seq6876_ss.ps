%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:49 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCAAUUGGGGGGGGGGGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGxxxxxxxxxxCAUCGUACUACACGACACGUACUACGUUGUAGCCCACUUCCACUAUGUCCCCCCCCCCCCUAUCAAUAGG\
) } def
/len { sequence length } bind def

/coor [
[78.69004059 381.25622559]
[67.19387817 371.44146729]
[59.10282135 358.67330933]
[55.13631439 344.08706665]
[55.64706039 328.97976685]
[60.58964157 314.69473267]
[69.52457428 302.50216675]
[81.65736389 293.48623657]
[95.90916443 288.44863892]
[95.28518677 273.46163940]
[94.66120911 258.47460938]
[94.03723145 243.48759460]
[93.41325378 228.50057983]
[92.78928375 213.51356506]
[92.16530609 198.52655029]
[91.54132843 183.53953552]
[90.91735077 168.55252075]
[90.29337311 153.56550598]
[89.66939545 138.57847595]
[89.04541779 123.59146881]
[83.94234467 117.73953247]
[81.19828796 111.12168121]
[80.77310181 104.56697083]
[82.36167908 98.80320740]
[85.45221710 94.37912750]
[89.40542603 91.61225891]
[93.54447174 90.56761169]
[97.24471283 91.06834412]
[94.75959778 76.27564240]
[92.27447510 61.48293304]
[89.78936005 46.69022369]
[72.45761108 39.74109268]
[62.10772705 24.35740852]
[62.20020676 5.94812632]
[72.55489349 -9.11367893]
[66.20776367 -22.70462990]
[59.86063385 -36.29558182]
[53.51350403 -49.88653183]
[47.16637421 -63.47748184]
[40.81924438 -77.06843567]
[39.13171768 -62.16366196]
[33.20243835 -48.38528442]
[23.53899002 -36.91280365]
[10.96861362 -28.72833061]
[-3.43260074 -24.53249550]
[-18.43183136 -24.68448639]
[-32.74506378 -29.17128944]
[-45.14700699 -37.60881424]
[-54.57598877 -49.27475739]
[-60.22483826 -63.17045975]
[-61.60998535 -78.10636902]
[-58.61285019 -92.80389404]
[-51.49000549 -106.00484467]
[-40.85120773 -116.57914734]
[-27.60719109 -123.62159729]
[-12.89171696 -126.52930450]
[2.03549385 -125.05336761]
[15.89659023 -119.32012939]
[27.50498772 -109.82038879]
[35.86841583 -97.36428833]
[35.24443817 -112.35130310]
[34.62046051 -127.33831787]
[33.99648285 -142.32533264]
[25.69181442 -155.79170227]
[32.89298248 -168.82981873]
[32.26900482 -183.81683350]
[17.81397629 -188.38059998]
[5.79348421 -197.61550903]
[-2.34094024 -210.40640259]
[-5.60702467 -225.20872498]
[-3.61037374 -240.23500061]
[3.40790749 -253.67076111]
[14.60032654 -263.89355469]
[28.61534691 -269.66894531]
[43.76058197 -270.29949951]
[58.20717621 -265.70910645]
[70.21063232 -256.45205688]
[78.32146454 -243.64619446]
[81.56026459 -228.83789062]
[79.53592682 -213.81530762]
[72.49289703 -200.39251709]
[61.28165817 -190.19035339]
[47.25601959 -184.44081116]
[47.87999725 -169.45379639]
[56.14003754 -157.05940247]
[48.98350143 -142.94931030]
[49.60747910 -127.96229553]
[50.23145676 -112.97528076]
[50.85543442 -97.98826599]
[54.41019440 -83.41556549]
[60.75732422 -69.82461548]
[67.10445404 -56.23366165]
[73.45158386 -42.64271164]
[79.79871368 -29.05175972]
[86.14584351 -15.46080780]
[102.17210388 -14.33139706]
[115.47343445 -5.32078075]
[128.85972595 -12.08889580]
[142.24600220 -18.85700989]
[155.63229370 -25.62512589]
[167.03927612 -38.16773224]
[182.24948120 -30.67867088]
[179.26370239 -13.98970985]
[162.40040588 -12.23884010]
[149.01411438 -5.47072554]
[135.62783813 1.29738939]
[122.24154663 8.06550407]
[123.14330292 16.62209892]
[121.65264130 25.14635277]
[117.85730743 32.97845459]
[112.02446747 39.50460815]
[104.58206940 44.20510864]
[107.06718445 58.99781418]
[109.55230713 73.79051971]
[112.03742218 88.58322906]
[121.54578400 100.18457031]
[135.56250000 105.52608490]
[147.91668701 96.28608704]
[163.30680847 95.21488190]
[176.82194519 102.65428162]
[184.14945984 116.23040771]
[182.95115662 131.61116028]
[173.60942078 143.88861084]
[159.10516357 149.14505005]
[144.06665039 145.70317078]
[133.29260254 134.66128540]
[130.22097778 119.54279327]
[116.20426941 114.20128632]
[104.03243256 122.96749115]
[104.65641022 137.95451355]
[105.28038788 152.94152832]
[105.90436554 167.92854309]
[106.52834320 182.91555786]
[107.15232086 197.90257263]
[107.77629852 212.88958740]
[108.40027618 227.87660217]
[109.02425385 242.86361694]
[109.64823151 257.85064697]
[110.27220917 272.83764648]
[110.89618683 287.82467651]
[125.51741791 291.66015625]
[138.35766602 299.63632202]
[148.27517700 311.04397583]
[154.38809204 324.86871338]
[156.15286255 339.88128662]
[153.41256714 354.74676514]
[146.41087341 368.14331055]
[135.77033997 378.87973022]
[122.43714905 386.00134277]
[107.59686279 388.87487793]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[28 115]
[29 114]
[30 113]
[31 112]
[35 95]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[60 89]
[61 88]
[62 87]
[63 86]
[65 84]
[66 83]
[97 107]
[98 106]
[99 105]
[100 104]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
