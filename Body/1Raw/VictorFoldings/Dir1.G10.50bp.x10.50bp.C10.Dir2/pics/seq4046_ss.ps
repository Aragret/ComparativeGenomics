%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCGCAGGCCGGGGGGGGGGCCUUCGCCCUAUUCUUCAUAGCCGAAUACACAAACAUUAUUAUAAUAAACxxxxxxxxxxAACAAAGCAUAAUAUUUCGCCCACUAAGCCAAUCACUUUAUUGACUCCUACCCCCCCCCCGCCGCAGACC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 394.27627563]
[71.19830322 388.26025391]
[59.48964310 378.73083496]
[50.78712082 366.39517212]
[45.73651886 352.16864014]
[44.71262741 337.10696411]
[47.79142761 322.32778931]
[54.74444962 308.92785645]
[65.05573273 297.90155029]
[77.96011353 290.06701660]
[92.50000000 286.00570679]
[92.50000000 271.00570679]
[92.50000000 256.00570679]
[92.50000000 241.00572205]
[92.50000000 226.00572205]
[92.50000000 211.00572205]
[92.50000000 196.00572205]
[92.50000000 181.00572205]
[92.50000000 166.00572205]
[92.50000000 151.00572205]
[74.06291199 144.55447388]
[59.34922028 131.70721436]
[50.47114563 114.30822754]
[35.60809708 116.33056641]
[20.74505043 118.35289764]
[5.88200426 120.37523651]
[-2.56654167 130.17706299]
[-15.03259659 131.52482605]
[-24.73780632 124.23673248]
[-39.63970947 125.94942474]
[-54.54161072 127.66211700]
[-69.44351196 129.37480164]
[-80.50423431 140.99546814]
[-96.47264862 139.44975281]
[-105.09915924 125.92337036]
[-99.76624298 110.79261780]
[-84.56485748 105.66452026]
[-71.15620422 114.47290039]
[-56.25429916 112.76020813]
[-41.35239792 111.04752350]
[-26.45049667 109.33483124]
[-12.97825718 98.13220978]
[3.85966992 105.51218414]
[18.72271729 103.48985291]
[33.58576202 101.46752167]
[48.44881058 99.44518280]
[49.91735077 87.77047729]
[53.99486160 76.73284912]
[60.46893311 66.90728760]
[69.00231171 58.80562973]
[79.15045929 52.84992599]
[90.38472748 49.35042572]
[89.76075745 34.36340714]
[89.13677979 19.37639236]
[86.26416016 14.86333847]
[85.52915955 10.17162704]
[86.63222504 6.16102600]
[88.97100067 3.44116974]
[89.28305817 -11.55558395]
[89.59511566 -26.55233765]
[89.90717316 -41.54909134]
[90.21923065 -56.54584503]
[90.53128052 -71.54259491]
[75.94134521 -75.31491089]
[62.61491394 -82.35075378]
[51.27067566 -92.27068329]
[42.52040482 -104.53972626]
[36.83599472 -118.49623871]
[34.52400208 -133.38755798]
[35.70910263 -148.41061401]
[40.32738876 -162.75523376]
[48.12980270 -175.64782715]
[58.69556808 -186.39312744]
[71.45488739 -194.41163635]
[85.71967316 -199.27091980]
[100.72063446 -200.70893860]
[115.64878845 -198.64814758]
[129.69908142 -193.19967651]
[142.11380005 -184.65733337]
[152.22343445 -173.48182678]
[159.48278809 -160.27581787]
[163.50036621 -145.75149536]
[164.05949402 -130.69215393]
[161.13005066 -115.90989685]
[154.86999512 -102.20192719]
[145.61691284 -90.30750275]
[133.86984253 -80.86806488]
[120.26226807 -74.39267731]
[105.52803802 -71.23054504]
[105.21598053 -56.23378754]
[104.90392303 -41.23703384]
[104.59186554 -26.24028206]
[104.27981567 -11.24352741]
[103.96775818 3.75322604]
[104.12379456 18.75241470]
[104.74777222 33.73942947]
[105.37174988 48.72644806]
[129.19364929 54.80693817]
[148.41439819 71.75667572]
[162.31695557 66.12471771]
[166.96302795 51.19327545]
[180.14773560 42.78510666]
[195.64567566 44.87029266]
[206.13919067 56.46427155]
[206.67355347 72.09272003]
[196.99645996 84.37636566]
[181.67713928 87.51524353]
[167.94891357 80.02727509]
[154.04635620 85.65923309]
[155.91397095 100.54251099]
[170.77700806 102.56484222]
[185.64006042 104.58718109]
[200.50311279 106.60951233]
[212.92977905 96.84461212]
[228.61141968 98.80970001]
[238.24440002 111.33892059]
[236.11363220 126.99890900]
[223.48326111 136.49888611]
[207.84667969 134.20266724]
[198.48077393 121.47256470]
[183.61772156 119.45022583]
[168.75468445 117.42789459]
[153.89163208 115.40555573]
[150.62651062 122.71363068]
[146.38932800 129.40965271]
[141.28717041 135.36726379]
[135.44313049 140.47798157]
[128.99331665 144.65321350]
[122.08381653 147.82571411]
[114.86736298 149.95056152]
[107.50000000 151.00572205]
[107.50000000 166.00572205]
[107.50000000 181.00572205]
[107.50000000 196.00572205]
[107.50000000 211.00572205]
[107.50000000 226.00572205]
[107.50000000 241.00572205]
[107.50000000 256.00570679]
[107.50000000 271.00570679]
[107.50000000 286.00570679]
[122.03988647 290.06701660]
[134.94427490 297.90155029]
[145.25555420 308.92785645]
[152.20857239 322.32778931]
[155.28736877 337.10696411]
[154.26348877 352.16864014]
[149.21287537 366.39517212]
[140.51036072 378.73083496]
[128.80169678 388.26025391]
[114.95575714 394.27627563]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 46]
[24 45]
[25 44]
[26 43]
[29 41]
[30 40]
[31 39]
[32 38]
[52 97]
[53 96]
[54 95]
[58 94]
[59 93]
[60 92]
[61 91]
[62 90]
[63 89]
[99 109]
[100 108]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
