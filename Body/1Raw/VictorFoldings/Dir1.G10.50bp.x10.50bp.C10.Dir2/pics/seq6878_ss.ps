%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:32 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUCAAUUGGGGGGGGGGGGCUUCCUAGGGUUUAUCGUGUGAGCACACCAUAUAUUUACAGUAGGAAUAGxxxxxxxxxxUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGAUAACAGCCCCCCCCCCCUAUCCAUUGG\
) } def
/len { sequence length } bind def

/coor [
[89.31131744 440.22357178]
[76.43804932 432.32067871]
[66.31375122 421.11016846]
[59.75917053 407.50082397]
[57.30564880 392.59591675]
[59.15208435 377.60366821]
[65.14879608 363.73947144]
[74.80966187 352.12719727]
[87.35150909 343.70825195]
[101.75762939 339.16510010]
[101.44557190 324.16833496]
[101.13351440 309.17160034]
[100.82145691 294.17483521]
[100.50940704 279.17807007]
[100.19734955 264.18133545]
[99.88529205 249.18457031]
[99.57323456 234.18782043]
[99.26117706 219.19107056]
[98.94911957 204.19430542]
[98.63706970 189.19755554]
[98.32501221 174.20080566]
[98.01295471 159.20405579]
[97.07732391 144.23326111]
[95.51974487 129.31434631]
[93.96216583 114.39543152]
[83.08333588 104.06822968]
[68.10362244 103.28838348]
[53.91985703 110.29775238]
[41.61205673 101.90923309]
[26.63234138 101.12938690]
[11.65262699 100.34954071]
[19.28236198 113.26415253]
[14.14217091 127.35593414]
[-0.01088424 132.32493591]
[-12.83206463 124.53923035]
[-14.95012474 109.68952179]
[-4.81754446 98.63000488]
[-19.63530159 96.29889679]
[-34.45306015 93.96779633]
[-49.55409622 100.36238098]
[-62.47768402 90.26718903]
[-59.92914200 74.06728363]
[-44.53019333 68.42774200]
[-32.12195587 79.15003967]
[-17.30419922 81.48114014]
[-2.48644066 83.81224823]
[12.43247128 85.36982727]
[27.41218567 86.14967346]
[42.39189911 86.92951965]
[55.50421906 79.86436462]
[68.88346863 88.30867004]
[83.86318207 89.08851624]
[89.67018127 87.73301697]
[94.82402802 88.51850891]
[98.65797424 90.94738007]
[105.84048462 77.77880096]
[113.02299500 64.61021423]
[120.20550537 51.44163513]
[119.30529785 33.07946014]
[134.57104492 24.47962189]
[141.47804260 11.16446590]
[148.38504028 -2.15068936]
[147.10302734 -20.49016380]
[162.18655396 -29.40572357]
[168.81504822 -42.86169052]
[175.44354248 -56.31765366]
[182.07205200 -69.77362061]
[183.07093811 -78.91988373]
[188.98097229 -83.43840790]
[195.88796997 -96.75356293]
[182.84120178 -89.35207367]
[168.01684570 -87.06339264]
[153.34536743 -90.18556213]
[140.73739624 -98.31199646]
[131.83477783 -110.38442993]
[127.79689026 -124.83071899]
[129.14953613 -139.76960754]
[135.71659851 -153.25566101]
[146.64285278 -163.53268433]
[160.50543213 -169.26231384]
[175.49909973 -169.69842529]
[189.67127991 -164.78422546]
[201.17640686 -155.15966797]
[208.51622009 -142.07810974]
[210.73489380 -127.24311066]
[207.54418945 -112.58818054]
[218.20581055 -123.13946533]
[228.86743164 -133.69075012]
[239.52906799 -144.24205017]
[250.19068909 -154.79333496]
[260.85232544 -165.34463501]
[260.68386841 -181.14802551]
[271.79901123 -192.38320923]
[287.60330200 -192.38455200]
[298.72033691 -181.15126038]
[298.55459595 -165.34783936]
[287.20440674 -154.35017395]
[271.40359497 -154.68299866]
[260.74197388 -144.13171387]
[250.08035278 -133.58042908]
[239.41873169 -123.02912903]
[228.75709534 -112.47784424]
[218.09547424 -101.92655182]
[209.20312500 -89.84656525]
[202.29612732 -76.53141022]
[195.52801514 -63.14512253]
[188.89952087 -49.68915558]
[182.27101135 -36.23319244]
[175.64251709 -22.77722549]
[179.23875427 -11.18522835]
[173.77375793 0.09984358]
[161.70019531 4.75630903]
[154.79319763 18.07146454]
[147.88619995 31.38661957]
[151.24049377 43.05092239]
[145.54191589 54.21986008]
[133.37408447 58.62414551]
[126.19157410 71.79272461]
[119.00906372 84.96131134]
[111.82656097 98.12989044]
[108.88107300 112.83785248]
[110.43865967 127.75676727]
[111.99623871 142.67567444]
[114.77029419 146.20640564]
[116.10065460 150.05364990]
[116.06964111 153.71163940]
[114.91935730 156.75643921]
[113.00970459 158.89199829]
[113.32176208 173.88874817]
[113.63381958 188.88549805]
[113.94587708 203.88224792]
[114.25793457 218.87901306]
[114.56999207 233.87576294]
[114.88204193 248.87251282]
[115.19409943 263.86926270]
[115.50615692 278.86602783]
[115.81821442 293.86276245]
[116.13027191 308.85952759]
[116.44232941 323.85629272]
[116.75437927 338.85302734]
[131.33702087 342.79299927]
[144.21823120 350.68292236]
[154.35377502 361.88327026]
[160.92202759 375.48602295]
[163.39053345 390.38845825]
[161.55915833 405.38256836]
[155.57637024 419.25277710]
[145.92718506 430.87472534]
[133.39379883 439.30627441]
[118.99224854 443.86392212]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 123]
[24 122]
[25 121]
[26 52]
[27 51]
[29 49]
[30 48]
[31 47]
[37 46]
[38 45]
[39 44]
[55 120]
[56 119]
[57 118]
[58 117]
[60 114]
[61 113]
[62 112]
[64 109]
[65 108]
[66 107]
[67 106]
[69 105]
[70 104]
[86 103]
[87 102]
[88 101]
[89 100]
[90 99]
[91 98]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
