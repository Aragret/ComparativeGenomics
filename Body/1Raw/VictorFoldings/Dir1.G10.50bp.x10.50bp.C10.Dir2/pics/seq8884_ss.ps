%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:00 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCCACUCCGGGGGGGGGGAUAACGCUCCUCAUACUAGGCCUACUAACCAACACACUAACCAUAUACCAxxxxxxxxxxCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUUCUUACUCAUCCGCCCCCCCCCCCUUCCACCCC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 370.34060669]
[71.19830322 364.32458496]
[59.48964310 354.79516602]
[50.78712082 342.45950317]
[45.73651886 328.23297119]
[44.71262741 313.17129517]
[47.79142761 298.39212036]
[54.74444962 284.99221802]
[65.05573273 273.96588135]
[77.96011353 266.13137817]
[92.50000000 262.07003784]
[92.50000000 247.07005310]
[92.50000000 232.07005310]
[92.50000000 217.07005310]
[92.50000000 202.07005310]
[92.50000000 187.07005310]
[92.50000000 172.07005310]
[92.50000000 157.07005310]
[92.50000000 142.07005310]
[92.50000000 127.07005310]
[83.03836823 122.39064026]
[75.97187805 114.54946136]
[72.29837036 104.65377045]
[72.53659821 94.10092163]
[76.65290833 84.38107300]
[84.06604004 76.86676788]
[79.16448975 62.69020844]
[74.26293945 48.51364899]
[71.10705566 63.17790604]
[64.46685028 76.62809753]
[54.74411011 88.05037689]
[42.52715302 96.75358582]
[28.55520439 102.21112061]
[13.67368889 104.09273529]
[-1.21693289 102.28459167]
[-15.21564960 96.89609528]
[-27.47541809 88.25328827]
[-37.25441742 76.87914276]
[-43.96092987 63.46189117]
[-47.18915558 48.81339264]
[-46.74376297 33.82000351]
[-42.65169525 19.38896179]
[-35.16056442 6.39346600]
[-24.72364235 -4.38014412]
[-11.97245693 -12.27997208]
[2.32143569 -16.82800865]
[17.29313087 -17.74905968]
[32.03671265 -14.98739433]
[45.66006470 -8.71011448]
[57.33885956 0.70294768]
[66.36643219 12.68222141]
[72.19598389 26.50095367]
[74.37282562 11.65974808]
[76.54965973 -3.18145704]
[74.69204712 -12.19262409]
[78.92926025 -18.30749702]
[81.41438293 -33.10020447]
[83.89949799 -47.89291000]
[86.38462067 -62.68561935]
[72.09973907 -67.35466003]
[58.67034531 -74.10069275]
[46.39644623 -82.77300262]
[35.55224609 -93.17786407]
[26.38001442 -105.08280945]
[19.08465767 -118.22189331]
[13.82915688 -132.30157471]
[10.73092365 -147.00730896]
[9.85917187 -162.01055908]
[11.23337841 -176.97616577]
[14.82284260 -191.56976318]
[20.54737473 -205.46536255]
[28.27908516 -218.35249329]
[37.84524536 -229.94328308]
[49.03214264 -239.97875977]
[61.58986282 -248.23475647]
[75.23785400 -254.52680969]
[89.67121887 -258.71435547]
[104.56751251 -260.70385742]
[119.59394836 -260.45086670]
[134.41482544 -257.96099854]
[148.69903564 -253.28993225]
[162.12747192 -246.54199219]
[174.40013123 -237.86791992]
[185.24284363 -227.46151733]
[194.41339111 -215.55526733]
[201.70686340 -202.41514587]
[206.96035767 -188.33471680]
[210.05650330 -173.62854004]
[210.92611694 -158.62516785]
[209.54977417 -143.65975952]
[205.95823669 -129.06666565]
[200.23171997 -115.17189026]
[192.49818420 -102.28585052]
[182.93037415 -90.69643402]
[171.74203491 -80.66254425]
[159.18315125 -72.40834045]
[145.53425598 -66.11823273]
[131.10029602 -61.93273544]
[116.20372009 -59.94535828]
[101.17732239 -60.20050049]
[98.69220734 -45.40779114]
[96.20708466 -30.61508560]
[93.72196960 -15.82237816]
[91.39086914 -1.00462008]
[89.21402740 13.83658504]
[87.03719330 28.67779160]
[88.43949890 43.61209869]
[93.34104919 57.78865814]
[98.24259949 71.96521759]
[119.33928680 79.62772369]
[128.08824158 100.29750824]
[142.50045776 104.45539093]
[156.91267395 108.61328125]
[166.68817139 96.93597412]
[180.37097168 90.25011444]
[195.59045410 89.71406555]
[209.70974731 95.42070007]
[220.28257751 106.38130951]
[225.47717285 120.69689941]
[224.39350891 135.88720703]
[217.21936035 149.32043457]
[205.19767761 158.66917419]
[190.41128540 162.31370544]
[175.42202759 159.62260437]
[162.82687378 151.06210327]
[154.80802917 138.11537170]
[152.75477600 123.02549744]
[138.34255981 118.86760712]
[123.93035126 114.70972443]
[116.88671875 122.44719696]
[107.50000000 127.07005310]
[107.50000000 142.07005310]
[107.50000000 157.07005310]
[107.50000000 172.07005310]
[107.50000000 187.07005310]
[107.50000000 202.07005310]
[107.50000000 217.07005310]
[107.50000000 232.07005310]
[107.50000000 247.07005310]
[107.50000000 262.07003784]
[122.03988647 266.13137817]
[134.94427490 273.96588135]
[145.25555420 284.99221802]
[152.20857239 298.39212036]
[155.28736877 313.17129517]
[154.26348877 328.23297119]
[149.21287537 342.45950317]
[140.51036072 354.79516602]
[128.80169678 364.32458496]
[114.95575714 370.34060669]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 109]
[27 108]
[28 107]
[52 106]
[53 105]
[54 104]
[56 103]
[57 102]
[58 101]
[59 100]
[111 129]
[112 128]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
