%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUCCGGGUCCAUGGGGGGGGGGCAUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACxxxxxxxxxxCCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCUACUCUCCUCCCCCCCCCCCGCUCCGGGCCCAU\
) } def
/len { sequence length } bind def

/coor [
[88.28638458 436.09500122]
[74.41225433 430.24673462]
[62.05744934 421.64135742]
[51.76207352 410.65505981]
[43.97619629 397.76809692]
[39.04018402 383.54382324]
[37.16981506 368.60409546]
[38.44685745 353.60202026]
[42.81547928 339.19335938]
[50.08470535 326.00808716]
[59.93675995 314.62252808]
[71.94094849 305.53445435]
[85.57250214 299.14114380]
[100.23551178 295.72207642]
[99.93537903 280.72509766]
[99.63524628 265.72808838]
[99.33511353 250.73109436]
[99.03498077 235.73410034]
[98.73484802 220.73709106]
[98.43471527 205.74009705]
[98.13458252 190.74310303]
[97.83444977 175.74610901]
[97.53431702 160.74911499]
[85.68751526 151.54838562]
[71.08291626 154.96975708]
[56.47832108 158.39112854]
[54.05233002 173.39721680]
[46.06416702 186.33003235]
[33.73196793 195.21740723]
[18.93630409 198.70407104]
[3.93341041 196.25833130]
[-8.98888397 188.25317383]
[-17.86002159 175.90928650]
[-21.32722092 161.10905457]
[-18.86175537 146.10939026]
[-10.83959389 133.19763184]
[1.51594341 124.34274292]
[16.32072639 120.89501953]
[31.31713486 123.38021088]
[44.21832275 131.41935730]
[53.05695724 143.78652954]
[67.66155243 140.36515808]
[82.26615143 136.94378662]
[70.16059875 125.70497894]
[63.88676071 111.12931824]
[64.03766632 95.91104889]
[70.06725311 82.64746857]
[80.46907806 73.39581299]
[93.11176300 69.35621643]
[93.41189575 54.35921860]
[93.71202850 39.36222076]
[94.01216125 24.36522293]
[94.31229401 9.36822605]
[94.61242676 -5.62877131]
[91.64239502 -14.32744598]
[95.07159424 -20.92202759]
[95.67173767 -35.91001511]
[81.92340851 -42.33334351]
[71.70925140 -53.50088882]
[66.56276703 -67.68987274]
[67.23892212 -82.72750854]
[73.60356903 -96.32368469]
[84.65863037 -106.41976929]
[98.69850159 -111.50026703]
[99.29864502 -126.48825836]
[99.89878845 -141.47624207]
[100.49893188 -156.46423340]
[101.09907532 -171.45222473]
[101.69921875 -186.44021606]
[87.38304901 -191.25933838]
[75.00527954 -199.91770935]
[65.56931305 -211.71343994]
[59.84009552 -225.69030762]
[58.28205872 -240.71525574]
[61.02150726 -255.57029724]
[67.83636475 -269.05117798]
[78.17418671 -280.06509399]
[91.19692993 -287.71917725]
[105.84889984 -291.39291382]
[120.94232178 -290.78857422]
[135.25364685 -285.95504761]
[147.62271118 -277.28424072]
[157.04681396 -265.47903442]
[162.76199341 -251.49642944]
[164.30493164 -236.46992493]
[161.55056763 -221.61764526]
[154.72216797 -208.14361572]
[144.37329102 -197.14010620]
[131.34286499 -189.49911499]
[116.68721008 -185.84007263]
[116.08706665 -170.85208130]
[115.48692322 -155.86408997]
[114.88677979 -140.87609863]
[114.28663635 -125.88811493]
[113.68648529 -110.90012360]
[127.27519226 -104.71333313]
[137.48764038 -93.76566315]
[142.74481201 -79.70412445]
[142.21647644 -64.66057587]
[135.95198059 -50.92850113]
[124.87762451 -40.61338425]
[110.65972900 -35.30987167]
[110.05958557 -20.32188225]
[109.60942078 -5.32863903]
[109.30929565 9.66835785]
[109.00916290 24.66535568]
[108.70903015 39.66235352]
[108.40889740 54.65934753]
[108.10876465 69.65634918]
[127.21904755 78.64108276]
[137.78089905 99.20564270]
[133.27371216 123.92056274]
[148.27296448 123.77049255]
[163.27221680 123.62042236]
[178.27145386 123.47034454]
[192.10787964 114.66777039]
[206.52227783 122.48807526]
[206.68635559 138.88639832]
[192.43132019 146.99356079]
[178.42153931 138.46958923]
[163.42228699 138.61967468]
[148.42303467 138.76974487]
[133.42378235 138.91981506]
[128.20066833 144.30210876]
[141.43569946 151.36141968]
[155.84184265 155.54028320]
[162.56738281 168.94801331]
[157.30303955 182.99389648]
[143.42184448 188.67829895]
[129.81790161 182.35908508]
[125.20777130 168.08389282]
[117.75443268 155.06668091]
[112.53131866 160.44897461]
[112.83145142 175.44596863]
[113.13158417 190.44297791]
[113.43171692 205.43997192]
[113.73184967 220.43696594]
[114.03197479 235.43395996]
[114.33210754 250.43095398]
[114.63224030 265.42794800]
[114.93237305 280.42495728]
[115.23250580 295.42193604]
[130.02056885 298.25161743]
[143.89700317 304.09442139]
[156.25518799 312.69491577]
[166.55488586 323.67718506]
[174.34582520 336.56106567]
[179.28744507 350.78338623]
[181.16368103 365.72238159]
[179.89254761 380.72497559]
[175.52958679 395.13534546]
[168.26554871 408.32348633]
[158.41798401 419.71292114]
[146.41735840 428.80569458]
[132.78833008 435.20437622]
[118.12667084 438.62921143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[24 43]
[25 42]
[26 41]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 104]
[56 103]
[57 102]
[64 95]
[65 94]
[66 93]
[67 92]
[68 91]
[69 90]
[112 123]
[113 122]
[114 121]
[115 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
