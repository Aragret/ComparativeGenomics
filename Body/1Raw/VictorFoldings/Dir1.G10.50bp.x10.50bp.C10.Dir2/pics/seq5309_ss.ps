%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUAACAUAGGGGGGGGGGACCAUUCUUAAUUUAACUAUUUAUAUUAUCCUAACUACUACCGCAUUCCUxxxxxxxxxxUAUAUCUUAAUGGCACAUGCAGCGCAAGUAGGUCUACAAGACGCUACUUCCCCCCCCCCCCCCUAUCAUA\
) } def
/len { sequence length } bind def

/coor [
[81.16030121 400.29592896]
[67.94010925 393.02346802]
[57.05330276 382.57644653]
[49.24217224 369.66720581]
[45.03929138 355.17590332]
[44.73121643 340.09054565]
[48.33895874 325.43972778]
[55.61653137 312.22235107]
[66.06774139 301.33956909]
[78.98000336 293.53341675]
[93.47293854 289.33615112]
[93.16088104 274.33938599]
[92.84882355 259.34262085]
[92.53676605 244.34588623]
[92.22471619 229.34912109]
[91.91265869 214.35237122]
[91.60060120 199.35562134]
[91.28854370 184.35887146]
[90.97648621 169.36210632]
[90.66442871 154.36535645]
[90.35237885 139.36860657]
[77.30931854 92.57053375]
[67.09583282 81.58486938]
[56.88235474 70.59920502]
[46.66887665 59.61354065]
[36.45539474 48.62787628]
[24.51216316 57.72325897]
[11.73492718 65.60418701]
[-1.75325727 72.19476318]
[-15.82248783 77.43151093]
[-30.33726692 81.26399994]
[-45.15780640 83.65531158]
[-60.14137268 84.58243561]
[-75.14366150 84.03642273]
[-90.02018738 82.02253723]
[-104.62768555 78.56018066]
[-118.82546234 73.68269348]
[-132.47679138 67.43704224]
[-145.45019531 59.88339615]
[-157.62072754 51.09448624]
[-168.87117004 41.15496445]
[-179.09320068 30.16055298]
[-188.18833923 18.21713829]
[-196.06901550 5.43974447]
[-202.65931702 -8.04857159]
[-207.89578247 -22.11790657]
[-211.72798157 -36.63276291]
[-214.11900330 -51.45335007]
[-215.04582214 -66.43693542]
[-214.49951172 -81.43921661]
[-212.48533630 -96.31569672]
[-209.02267456 -110.92312622]
[-204.14491272 -125.12080383]
[-197.89898682 -138.77200317]
[-190.34507751 -151.74525452]
[-181.55592346 -163.91561890]
[-171.61618042 -175.16586304]
[-160.62156677 -185.38766479]
[-148.67796326 -194.48257446]
[-135.90042114 -202.36299133]
[-122.41196442 -208.95303345]
[-108.34252930 -214.18920898]
[-93.82759094 -218.02111816]
[-79.00695801 -220.41184998]
[-64.02335358 -221.33836365]
[-49.02108765 -220.79174805]
[-34.14464188 -218.77726746]
[-19.53728676 -215.31433105]
[-5.33970499 -210.43627930]
[8.31137180 -204.19007874]
[21.28447151 -196.63591003]
[33.45465469 -187.84651184]
[44.70470810 -177.90653992]
[54.92628860 -166.91172791]
[64.02095795 -154.96794128]
[71.90111542 -142.19024658]
[78.49088287 -128.70166016]
[83.72678375 -114.63211823]
[87.55840302 -100.11710358]
[89.94882965 -85.29642487]
[90.87505341 -70.31279755]
[90.32814026 -55.31054306]
[88.31336212 -40.43413925]
[84.85012817 -25.82685280]
[79.97178650 -11.62936783]
[73.72532654 2.02158427]
[66.17089844 14.99453259]
[57.38125610 27.16453934]
[47.44105911 38.41439438]
[57.65454102 49.40005875]
[67.86801910 60.38572311]
[78.08149719 71.37139130]
[88.29498291 82.35705566]
[85.92643738 67.54523468]
[96.62952423 57.03599548]
[111.39558411 59.67482376]
[117.79623413 73.24065399]
[110.44406128 86.31535339]
[123.83034515 79.54723358]
[137.21662903 72.77912140]
[148.62362671 60.23651505]
[163.83383179 67.72557068]
[160.84803772 84.41453552]
[143.98474121 86.16540527]
[130.59846497 92.93351746]
[117.21218109 99.70163727]
[119.38901520 114.54283905]
[134.15507507 117.18170166]
[148.92112732 119.82057190]
[163.68717957 122.45943451]
[178.45323181 125.09829712]
[193.24594116 127.58341980]
[208.06370544 129.91452026]
[222.88145447 132.24562073]
[237.69921875 134.57672119]
[254.28555298 131.06535339]
[262.25125122 146.03144836]
[250.07516479 157.82887268]
[235.36811829 149.39448547]
[220.55035400 147.06338501]
[205.73260498 144.73228455]
[190.91484070 142.40116882]
[183.77230835 144.48204041]
[175.81437683 139.86434937]
[161.04832458 137.22549438]
[146.28225708 134.58662415]
[131.51620483 131.94775391]
[116.75015259 129.30889893]
[105.34912872 139.05654907]
[105.66118622 154.05329895]
[105.97324371 169.05004883]
[106.28530121 184.04681396]
[106.59735107 199.04356384]
[106.90940857 214.04031372]
[107.22146606 229.03706360]
[107.53352356 244.03382874]
[107.84558105 259.03057861]
[108.15763855 274.02734375]
[108.46968842 289.02407837]
[123.12468719 292.61486816]
[136.35049438 299.87710571]
[147.24536133 310.31570435]
[155.06645203 323.21890259]
[159.28053284 337.70697021]
[159.60025024 352.79208374]
[156.00382996 367.44567871]
[148.73646545 380.66870117]
[138.29365540 391.55953979]
[125.38742828 399.37564087]
[110.89773560 403.58410645]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 93]
[23 92]
[24 91]
[25 90]
[26 89]
[98 106]
[99 105]
[100 104]
[107 128]
[108 127]
[109 126]
[110 125]
[111 124]
[112 122]
[113 121]
[114 120]
[115 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
