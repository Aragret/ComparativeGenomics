%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGAAGAAUUCGGGGGGGGGGACAAAAAACAAUAGCCUCAUCAUCCCCACCAUCAUAGCCACCAUCACCCUxxxxxxxxxxGCCCUAUCUAUUACUCUCAUCGCUACCUCCCUGACAAGCGCCUAUAGCACCCCCCCCCCCUCGAAUAAUUC\
) } def
/len { sequence length } bind def

/coor [
[83.74005890 388.24249268]
[70.25118256 381.51095581]
[58.76568222 371.74639893]
[49.95131302 359.51647949]
[44.32052994 345.53228760]
[42.20070267 330.60681152]
[43.71506882 315.60781860]
[48.77559280 301.40731812]
[57.08805847 288.83090210]
[68.16918945 278.60974121]
[81.37474060 271.33810425]
[95.93696594 267.43872070]
[95.62899017 252.44189453]
[95.32101440 237.44505310]
[95.01303864 222.44821167]
[94.70505524 207.45137024]
[94.39707947 192.45454407]
[94.08910370 177.45770264]
[93.78112793 162.46086121]
[93.47314453 147.46401978]
[93.16516876 132.46719360]
[86.51500702 130.31481934]
[80.46333313 126.81700897]
[75.27874756 122.12900543]
[71.19133759 116.45886230]
[68.38252258 110.05824280]
[66.97695923 103.21121979]
[67.03703308 96.22167206]
[68.56007385 89.39981079]
[71.47848511 83.04841614]
[75.66274261 77.44937134]
[67.24932861 65.03105164]
[58.83592224 52.61273956]
[50.42251205 40.19442368]
[42.00910187 27.77611160]
[28.69840050 34.72758484]
[14.68204117 40.11640930]
[0.14275515 43.87232971]
[-14.72990704 45.94638062]
[-29.74205017 46.31152344]
[-44.69795990 44.96299362]
[-59.40265656 41.91837692]
[-73.66442871 37.21736526]
[-87.29735565 30.92124176]
[-100.12369537 23.11209297]
[-111.97622681 13.89172745]
[-122.70043945 3.38035107]
[-132.15652466 -8.28499985]
[-140.22117615 -20.95224190]
[-146.78927612 -34.45623398]
[-151.77520752 -48.62092209]
[-155.11393738 -63.26163864]
[-156.76194763 -78.18751526]
[-156.69778442 -93.20396423]
[-154.92224121 -108.11520386]
[-151.45848083 -122.72685242]
[-146.35166931 -136.84840393]
[-139.66838074 -150.29576111]
[-131.49574280 -162.89361572]
[-121.94030762 -174.47770691]
[-111.12664032 -184.89703369]
[-99.19572449 -194.01574707]
[-86.30310822 -201.71498108]
[-72.61686707 -207.89434814]
[-58.31542969 -212.47328186]
[-43.58524704 -215.39210510]
[-28.61835670 -216.61274719]
[-13.60988235 -216.11930847]
[1.24450827 -213.91819763]
[15.75115871 -210.03814697]
[29.72094536 -204.52970886]
[42.97174454 -197.46472168]
[55.33079910 -188.93527222]
[66.63699341 -179.05256653]
[76.74291992 -167.94544983]
[85.51682281 -155.75872803]
[92.84432983 -142.65127563]
[98.62990570 -128.79396057]
[102.79811859 -114.36746979]
[105.29463959 -99.55986786]
[106.08690643 -84.56420135]
[105.16459656 -69.57596588]
[102.53974152 -54.79057312]
[98.24654388 -40.40077591]
[92.34099579 -26.59417343]
[84.90007019 -13.55076790]
[76.02079010 -1.44060338]
[65.81890106 9.57843781]
[54.42741776 19.36270142]
[62.84082794 31.78101540]
[71.25423431 44.19932938]
[79.66764832 56.61764526]
[88.08105469 69.03595734]
[113.55724335 69.71743011]
[131.03454590 88.26586151]
[145.90113831 86.26980591]
[150.69999695 71.82223511]
[161.25280762 60.93529510]
[175.42799377 55.73107147]
[190.39556885 57.19150925]
[203.19197083 64.97362518]
[211.30696106 77.48812103]
[226.17355347 75.49206543]
[241.04014587 73.49600983]
[255.90675354 71.49995422]
[260.59133911 56.97351456]
[271.12100220 45.92413330]
[285.40509033 40.54567337]
[300.60745239 41.90602875]
[313.70968628 49.73510361]
[322.11032104 62.47842407]
[324.14138794 77.60580444]
[319.39962769 92.11367798]
[308.82653809 103.12150574]
[294.52136230 108.44367981]
[279.32446289 107.02346802]
[266.25317383 99.14286041]
[257.90280151 86.36655426]
[243.03620911 88.36260986]
[228.16961670 90.35866547]
[213.30300903 92.35472107]
[208.77642822 106.56653595]
[198.48593140 117.44840240]
[184.43367004 122.80517578]
[169.38775635 121.52431488]
[156.33700562 113.80649567]
[147.89720154 101.13640594]
[133.03060913 103.13246155]
[129.05676270 116.01679993]
[120.28431702 126.25604248]
[108.16201019 132.15921021]
[108.46998596 147.15605164]
[108.77796173 162.15287781]
[109.08593750 177.14971924]
[109.39392090 192.14656067]
[109.70189667 207.14340210]
[110.00987244 222.14024353]
[110.31784821 237.13706970]
[110.62583160 252.13391113]
[110.93380737 267.13073730]
[125.64384460 270.42898560]
[139.13679504 277.15234375]
[150.62821960 286.90994263]
[159.44999695 299.13449097]
[165.08926392 313.11526489]
[167.21813965 328.03945923]
[165.71286011 343.03936768]
[160.66094971 357.24295044]
[152.35610962 369.82440186]
[141.28117371 380.05227661]
[128.08003235 387.33190918]
[113.52017212 391.24011230]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[31 93]
[32 92]
[33 91]
[34 90]
[35 89]
[95 128]
[96 127]
[102 121]
[103 120]
[104 119]
[105 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
