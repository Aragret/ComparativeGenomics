%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCACAGCCAGGGGGGGGGGCAGAACUAAUCAUAUUUUAUAUCUUCUUCGAAACCACACUUAUCCCCACCxxxxxxxxxxGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCUGUACCCACGCCUUCCCCCCCCCCCUUCAAAGCCA\
) } def
/len { sequence length } bind def

/coor [
[83.15628815 353.71774292]
[69.93608856 346.44528198]
[59.04928207 335.99826050]
[51.23815155 323.08901978]
[47.03527069 308.59771729]
[46.72719955 293.51235962]
[50.33494186 278.86154175]
[57.61251450 265.64416504]
[68.06372070 254.76138306]
[80.97598267 246.95524597]
[95.46891785 242.75796509]
[95.15686035 227.76119995]
[94.84481049 212.76445007]
[94.53275299 197.76770020]
[94.22069550 182.77095032]
[93.90863800 167.77418518]
[93.59658051 152.77743530]
[93.28452301 137.78068542]
[92.97247314 122.78392792]
[92.66041565 107.78717804]
[90.48357391 92.94596863]
[86.47583771 78.49127960]
[82.46809387 64.03659058]
[78.46035767 49.58190536]
[63.75775146 52.58425522]
[48.88304520 54.56509781]
[33.90711594 55.51499176]
[18.90134048 55.42940903]
[3.93722296 54.30876541]
[-10.91392422 52.15839005]
[-25.58132744 48.98854065]
[-39.99509048 44.81431580]
[-54.08652115 39.65561295]
[-67.78846741 33.53701401]
[-81.03563690 26.48767471]
[-93.76490021 18.54119301]
[-105.91558838 9.73543453]
[-117.42980957 0.11236435]
[-128.25268555 -10.28215885]
[-138.33262634 -21.39859962]
[-147.62162781 -33.18398285]
[-156.07539368 -45.58214951]
[-163.65365601 -58.53400803]
[-170.32028198 -71.97784424]
[-176.04351807 -85.84957886]
[-180.79609680 -100.08312225]
[-184.55534363 -114.61064148]
[-187.30337524 -129.36289978]
[-189.02706909 -144.26959229]
[-189.71821594 -159.25968933]
[-189.37353516 -174.26174927]
[-187.99465942 -189.20428467]
[-185.58816528 -204.01608276]
[-182.16551208 -218.62657166]
[-177.74302673 -232.96609497]
[-172.34176636 -246.96635437]
[-165.98747253 -260.56060791]
[-158.71043396 -273.68408203]
[-150.54533386 -286.27423096]
[-141.53108215 -298.27105713]
[-131.71061707 -309.61737061]
[-121.13076019 -320.25915527]
[-109.84191895 -330.14562988]
[-97.89789581 -339.22973633]
[-85.35560608 -347.46817017]
[-72.27481842 -354.82165527]
[-58.71786880 -361.25512695]
[-44.74937057 -366.73797607]
[-30.43588448 -371.24407959]
[-15.84562206 -374.75192261]
[-1.04811418 -377.24478149]
[13.88612175 -378.71081543]
[28.88591766 -379.14303589]
[43.87979126 -378.53933716]
[58.79628754 -376.90264893]
[73.56432343 -374.24075317]
[88.11352539 -370.56631470]
[102.37455750 -365.89688110]
[116.27945709 -360.25466919]
[129.76196289 -353.66659546]
[142.75781250 -346.16403198]
[155.20509338 -337.78274536]
[167.04446411 -328.56268311]
[178.21952820 -318.54776001]
[188.67703247 -307.78570557]
[198.36711121 -296.32785034]
[207.24362183 -284.22872925]
[215.26423645 -271.54605103]
[222.39074707 -258.34024048]
[228.58918762 -244.67422485]
[233.83001709 -230.61312866]
[238.08827209 -216.22396851]
[241.34364319 -201.57531738]
[243.58062744 -186.73696899]
[244.78855896 -171.77963257]
[244.96170044 -156.77461243]
[244.09919739 -141.79339600]
[242.20518494 -126.90739441]
[239.28866577 -112.18752289]
[235.36355591 -97.70393372]
[230.44854736 -83.52566528]
[224.56707764 -69.72026825]
[217.74717712 -56.35353470]
[210.02131653 -43.48917007]
[201.42634583 -31.18847466]
[192.00321960 -19.51006699]
[181.79681396 -8.50960350]
[170.85580444 1.76049566]
[159.23231506 11.25128746]
[146.98173523 19.91754341]
[134.16244507 27.71796417]
[120.83554840 34.61537933]
[107.06453705 40.57691574]
[92.91504669 45.57416534]
[96.92278290 60.02885437]
[100.93052673 74.48354340]
[104.93826294 88.93823242]
[110.10018921 74.85439301]
[120.77751160 64.31898499]
[134.92915344 59.34595871]
[149.84989929 60.88595200]
[162.68748474 68.64458466]
[170.98788452 81.13871765]
[173.16439819 95.97996521]
[168.80096436 110.33129120]
[158.73168945 121.44928741]
[144.88142395 127.20864105]
[129.89778137 126.50839233]
[116.64502716 119.48240662]
[107.65716553 107.47512054]
[107.96922302 122.47187042]
[108.28128052 137.46862793]
[108.59333801 152.46537781]
[108.90539551 167.46212769]
[109.21744537 182.45889282]
[109.52950287 197.45564270]
[109.84156036 212.45239258]
[110.15361786 227.44914246]
[110.46567535 242.44590759]
[125.12066650 246.03666687]
[138.34648132 253.29893494]
[149.24134827 263.73751831]
[157.06243896 276.64074707]
[161.27650452 291.12881470]
[161.59623718 306.21389771]
[157.99980164 320.86749268]
[150.73243713 334.09051514]
[140.28964233 344.98135376]
[127.38340759 352.79745483]
[112.89372253 357.00592041]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 117]
[22 116]
[23 115]
[24 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
