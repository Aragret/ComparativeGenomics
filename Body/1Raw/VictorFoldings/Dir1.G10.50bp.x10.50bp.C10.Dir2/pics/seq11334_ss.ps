%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGACCCCUCUCGGGGGGGGGGCUUCAUAAAUUAUUCAGCUUCCUACACUAUUAAAGUUUACCACAACCACCxxxxxxxxxxAUUUACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGACCCCCCCCCCUGACCCCCCUC\
) } def
/len { sequence length } bind def

/coor [
[85.05211639 359.81060791]
[71.03017426 354.25759888]
[58.83021545 345.39126587]
[49.21914673 333.76895142]
[42.80112076 320.12124634]
[39.97958374 305.30606079]
[40.93190002 290.25469971]
[45.59820557 275.91326904]
[53.68516922 263.18331909]
[64.68444824 252.86503601]
[77.90460205 245.60707092]
[92.51461792 241.86563110]
[92.51461792 226.86563110]
[92.51461792 211.86563110]
[92.51461792 196.86563110]
[92.51461792 181.86563110]
[92.51461792 166.86563110]
[92.51461792 151.86563110]
[92.51461792 136.86563110]
[92.51461792 121.86563110]
[92.51461792 106.86563110]
[89.34930420 99.39417267]
[92.67177582 91.55844116]
[92.97975159 76.56160736]
[93.28773499 61.56476593]
[93.59571075 46.56792831]
[93.90368652 31.57108879]
[78.95012665 30.33110428]
[64.10258484 28.16385841]
[49.41849899 25.07773399]
[34.95468140 21.08467293]
[20.76709175 16.20012283]
[6.91061926 10.44298172]
[-6.56112909 3.83552217]
[-19.59603310 -3.59669209]
[-32.14366150 -11.82490730]
[-44.15547180 -20.81728935]
[-55.58499146 -30.53904915]
[-66.38800049 -40.95257568]
[-76.52270508 -52.01757431]
[-85.94989777 -63.69124603]
[-94.63310242 -75.92842102]
[-102.53872681 -88.68176270]
[-109.63618469 -101.90191650]
[-115.89801788 -115.53775024]
[-121.30000305 -129.53649902]
[-125.82123566 -143.84402466]
[-129.44422913 -158.40493774]
[-132.15495300 -173.16293335]
[-133.94294739 -188.06091309]
[-134.80126953 -203.04122925]
[-134.72660828 -218.04592896]
[-133.71925354 -233.01695251]
[-131.78309631 -247.89639282]
[-128.92564392 -262.62667847]
[-125.15792847 -277.15084839]
[-120.49453735 -291.41265869]
[-114.95352173 -305.35696411]
[-108.55629730 -318.92980957]
[-101.32763672 -332.07867432]
[-93.29549408 -344.75271606]
[-84.49094391 -356.90286255]
[-74.94805145 -368.48214722]
[-64.70373535 -379.44573975]
[-53.79763031 -389.75125122]
[-42.27193451 -399.35879517]
[-30.17123222 -408.23120117]
[-17.54234314 -416.33413696]
[-4.43412590 -423.63626099]
[9.10270786 -430.10934448]
[23.01578522 -435.72830200]
[37.25128174 -440.47143555]
[51.75411606 -444.32037354]
[66.46818542 -447.26019287]
[81.33656311 -449.27960205]
[96.30171967 -450.37069702]
[111.30576324 -450.52932739]
[126.29064941 -449.75485229]
[141.19839478 -448.05026245]
[155.97132874 -445.42214966]
[170.55229187 -441.88070679]
[184.88488770 -437.43960571]
[198.91365051 -432.11602783]
[212.58430481 -425.93060303]
[225.84397888 -418.90722656]
[238.64135742 -411.07312012]
[250.92692566 -402.45852661]
[262.65316772 -393.09680176]
[273.77471924 -383.02416992]
[284.24853516 -372.27960205]
[294.03408813 -360.90466309]
[303.09356689 -348.94335938]
[311.39184570 -336.44198608]
[318.89688110 -323.44888306]
[325.57965088 -310.01431274]
[331.41421509 -296.19027710]
[336.37808228 -282.03024292]
[340.45202637 -267.58898926]
[343.62026978 -252.92240906]
[345.87057495 -238.08721924]
[347.19421387 -223.14083862]
[347.58609009 -208.14106750]
[347.04467773 -193.14595032]
[345.57205200 -178.21351624]
[343.17395020 -163.40150452]
[339.85958862 -148.76724243]
[335.64187622 -134.36734009]
[330.53704834 -120.25749969]
[324.56491089 -106.49233246]
[317.74853516 -93.12507629]
[310.11428833 -80.20745087]
[301.69174194 -67.78942871]
[292.51345825 -55.91905975]
[282.61495972 -44.64226151]
[272.03451538 -34.00267029]
[260.81311035 -24.04144287]
[248.99409485 -14.79712009]
[236.62322998 -6.30546427]
[223.74836731 1.40067029]
[210.41932678 8.29146957]
[196.68766785 14.34027576]
[182.60650635 19.52368546]
[168.23034668 23.82164574]
[153.61479187 27.21752739]
[138.81639099 29.69819260]
[123.89238739 31.25404739]
[108.90052795 31.87906647]
[108.59254456 46.87590408]
[108.28456879 61.87274170]
[107.97659302 76.86958313]
[107.66861725 91.86641693]
[107.51461792 106.86563110]
[107.51461792 121.86563110]
[107.51461792 136.86563110]
[107.51461792 151.86563110]
[107.51461792 166.86563110]
[107.51461792 181.86563110]
[107.51461792 196.86563110]
[107.51461792 211.86563110]
[107.51461792 226.86563110]
[107.51461792 241.86563110]
[122.12462616 245.60707092]
[135.34478760 252.86503601]
[146.34407043 263.18331909]
[154.43103027 275.91326904]
[159.09733582 290.25469971]
[160.04965210 305.30606079]
[157.22811890 320.12124634]
[150.81008911 333.76895142]
[141.19902039 345.39126587]
[128.99905396 354.25759888]
[114.97711945 359.81060791]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 131]
[24 130]
[25 129]
[26 128]
[27 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
