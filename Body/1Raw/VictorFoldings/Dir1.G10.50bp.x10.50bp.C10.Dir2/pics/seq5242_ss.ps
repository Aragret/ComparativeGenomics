%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCAUACUCCUCAAUGGGGGGGGGGUACCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAAxxxxxxxxxxAACCCCACUAAAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCCCCCCCCCCCAGGAUACUCCUCAAU\
) } def
/len { sequence length } bind def

/coor [
[83.50582886 403.75073242]
[69.37474823 398.59057617]
[56.43255997 390.92153931]
[45.12008286 381.00473022]
[35.82261658 369.17800903]
[28.85682487 355.84411621]
[24.45996094 341.45724487]
[22.78178024 326.50738525]
[23.87944221 311.50372314]
[27.71555901 296.95727539]
[34.15947723 283.36352539]
[42.99171448 271.18542480]
[53.91145325 260.83776855]
[66.54676819 252.67298889]
[80.46730804 246.96919250]
[95.19893646 243.92063904]
[94.90625763 228.92349243]
[94.61358643 213.92636108]
[94.32090759 198.92921448]
[94.02822876 183.93206787]
[93.73555756 168.93492126]
[93.44287872 153.93777466]
[93.15019989 138.94062805]
[92.85752869 123.94348907]
[92.56484985 108.94634247]
[83.11858368 120.59829712]
[68.91651917 125.42544556]
[54.32629776 121.94327545]
[43.83493423 111.22267151]
[40.66889572 96.56060791]
[45.80184937 82.46618652]
[57.65522766 73.27394104]
[72.58370209 71.81081390]
[85.99623108 78.52677155]
[93.76802063 91.35657501]
[96.10008240 76.53896332]
[98.43214417 61.72135925]
[100.61952972 46.88170624]
[102.66202545 32.02141571]
[104.70452881 17.16112518]
[90.01912689 14.07440186]
[75.58804321 9.95946980]
[61.48316574 4.83682871]
[47.77477264 -1.26799953]
[34.53116226 -8.32460117]
[21.81830406 -16.29781914]
[9.69954109 -25.14793205]
[-1.76475346 -34.83084869]
[-12.51746464 -45.29832840]
[-22.50502205 -56.49822235]
[-31.67766762 -68.37473297]
[-39.98970413 -80.86869049]
[-47.39971924 -93.91784668]
[-53.87080002 -107.45719910]
[-59.37070465 -121.41929626]
[-63.87203217 -135.73455811]
[-67.35235596 -150.33169556]
[-69.79434204 -165.13796997]
[-71.18582153 -180.07960510]
[-71.51985931 -195.08218384]
[-70.79479218 -210.07095337]
[-69.01423645 -224.97123718]
[-66.18705750 -239.70881653]
[-62.32735062 -254.21025085]
[-57.45433426 -268.40328979]
[-51.59228516 -282.21725464]
[-44.77041626 -295.58328247]
[-37.02270889 -308.43481445]
[-28.38776016 -320.70782471]
[-18.90859413 -332.34115601]
[-8.63243389 -343.27685547]
[2.38952446 -353.46041870]
[14.10237026 -362.84115601]
[26.44775009 -371.37231445]
[39.36415863 -379.01138306]
[52.78724670 -385.72030640]
[66.65013885 -391.46566772]
[80.88377380 -396.21881104]
[95.41723633 -399.95611572]
[110.17812347 -402.65893555]
[125.09289551 -404.31378174]
[140.08724976 -404.91241455]
[155.08647156 -404.45190430]
[170.01585388 -402.93447876]
[184.80101013 -400.36773682]
[199.36827087 -396.76443481]
[213.64508057 -392.14254761]
[227.56028748 -386.52511597]
[241.04460144 -379.94009399]
[254.03080750 -372.42031860]
[266.45422363 -364.00323486]
[278.25299072 -354.73074341]
[289.36825562 -344.64910889]
[299.74468994 -333.80853271]
[309.33059692 -322.26296997]
[318.07821655 -310.07003784]
[325.94393921 -297.29037476]
[332.88861084 -283.98773193]
[338.87762451 -270.22836304]
[343.88116455 -256.08078003]
[347.87426758 -241.61552429]
[350.83703613 -226.90461731]
[352.75476074 -212.02136230]
[353.61782837 -197.03990173]
[353.42196655 -182.03488159]
[352.16815186 -167.08105469]
[349.86264038 -152.25292969]
[346.51687622 -137.62435913]
[342.14758301 -123.26824188]
[336.77648926 -109.25608826]
[330.43038940 -95.65771484]
[323.14086914 -82.54086304]
[314.94424438 -69.97088623]
[305.88137817 -58.01040649]
[295.99737549 -46.71900558]
[285.34152222 -36.15294266]
[273.96688843 -26.36485481]
[261.93014526 -17.40350723]
[249.29125977 -9.31354713]
[236.11320496 -2.13527703]
[222.46160889 4.09554100]
[208.40451050 9.34786415]
[194.01193237 13.59552670]
[179.35557556 16.81736565]
[164.50846863 18.99733162]
[149.54457092 20.12456131]
[134.53843689 20.19343948]
[119.56481934 19.20362663]
[117.52231598 34.06391525]
[115.47982025 48.92420578]
[117.69570160 56.01481247]
[113.24975586 64.05342102]
[110.91769409 78.87102509]
[108.58563232 93.68863678]
[107.56199646 108.65366364]
[107.85466766 123.65081024]
[108.14734650 138.64794922]
[108.44002533 153.64509583]
[108.73269653 168.64224243]
[109.02537537 183.63938904]
[109.31805420 198.63653564]
[109.61072540 213.63368225]
[109.90340424 228.63082886]
[110.19608307 243.62796021]
[125.03543854 246.09942627]
[139.16792297 251.25575256]
[152.11216736 258.92132568]
[163.42732239 268.83505249]
[172.72796631 280.65930176]
[179.69735718 293.99130249]
[184.09809875 308.37698364]
[185.78030396 323.32638550]
[184.68669128 338.33035278]
[180.85449219 352.87780762]
[174.41424561 366.47332764]
[165.58528137 378.65380859]
[154.66833496 389.00439453]
[142.03523254 397.17257690]
[128.11622620 402.88012695]
[113.38541412 405.93264771]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[35 134]
[36 133]
[37 132]
[38 130]
[39 129]
[40 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
