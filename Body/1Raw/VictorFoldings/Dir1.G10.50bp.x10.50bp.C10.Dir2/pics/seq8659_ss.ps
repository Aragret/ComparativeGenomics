%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCUACUCAUGGGGGGGGGGGCACCUAAUUGGAAGCGCCACCCUAGCAAUAUCAACCAUUAACCUUCCCUxxxxxxxxxxGCCUGAACGCAGGCACAUACUUCCUAUUCUACACCCUAGUAGGCUCCCUUCCCCCCCCCCCCCCUACUCAU\
) } def
/len { sequence length } bind def

/coor [
[88.50055695 404.36648560]
[74.47860718 398.81347656]
[62.27865219 389.94714355]
[52.66757965 378.32482910]
[46.24955750 364.67712402]
[43.42802048 349.86193848]
[44.38033676 334.81057739]
[49.04664230 320.46914673]
[57.13360596 307.73919678]
[68.13288116 297.42092896]
[81.35304260 290.16293335]
[95.96305084 286.42150879]
[95.96305084 271.42150879]
[95.96305084 256.42150879]
[95.96305084 241.42150879]
[95.96305084 226.42150879]
[95.96305084 211.42150879]
[95.96305084 196.42150879]
[95.96305084 181.42150879]
[95.96305084 166.42150879]
[95.96305084 151.42150879]
[95.03964233 136.44995117]
[93.19631195 121.56364441]
[85.83335114 114.89685822]
[82.65589905 106.44670105]
[83.63076782 98.37778473]
[87.75344086 92.43370056]
[93.41601562 89.56160736]
[88.57620239 75.36385345]
[83.73638916 61.16610336]
[71.96021271 50.60048294]
[75.17719269 36.05743027]
[70.33737183 21.85967827]
[65.49755859 7.66192579]
[60.65774155 -6.53582668]
[55.81792450 -20.73357964]
[35.07204056 -28.15405655]
[25.75435257 -47.70621109]
[11.03882980 -50.61368179]
[-1.02986205 -40.66980743]
[-16.66626930 -40.86165237]
[-28.48735619 -51.09864044]
[-30.91156960 -66.54717255]
[-22.79426956 -79.91292572]
[-7.96819592 -84.88500977]
[6.56623220 -79.11573792]
[13.94630241 -65.32920837]
[28.66182518 -62.42173386]
[32.34177780 -67.99498749]
[37.23084259 -72.54473877]
[43.05395126 -75.81501007]
[36.71559906 -62.21996307]
[27.89130402 -50.09017181]
[16.90764236 -39.87453461]
[4.17110062 -31.95112228]
[-9.84696579 -26.61316299]
[-24.62777138 -24.05820465]
[-39.62430191 -24.38080406]
[-54.28156281 -27.56902122]
[-68.05711365 -33.50486374]
[-80.44113922 -41.96866226]
[-90.97533417 -52.64717865]
[-99.26984406 -65.14522552]
[-105.01770020 -79.00025940]
[-108.00618744 -93.69954681]
[-108.12471008 -108.69907379]
[-105.36887360 -123.44374847]
[-99.84066772 -137.38789368]
[-91.74468994 -150.01544189]
[-81.38055420 -160.85908508]
[-69.13182068 -169.51751709]
[-55.45178604 -175.67030334]
[-40.84673691 -179.08973694]
[-25.85717773 -179.64927673]
[-11.03784466 -177.32820129]
[3.06282187 -172.21241760]
[15.92298031 -164.49125671]
[27.06669807 -154.45046997]
[36.08156586 -142.46163940]
[42.63395691 -128.96844482]
[46.48138046 -114.47026062]
[47.48131943 -99.49933624]
[54.57772064 -112.71451569]
[61.67412567 -125.92969513]
[68.77053070 -139.14488220]
[75.86692810 -152.36006165]
[74.82136536 -168.72584534]
[88.61985779 -177.58776855]
[103.06771088 -169.82943726]
[103.30220032 -153.43196106]
[89.08211517 -145.26365662]
[81.98571014 -132.04847717]
[74.88930511 -118.83329773]
[67.79290009 -105.61811066]
[60.69649887 -92.40293121]
[57.94025803 -77.65833282]
[70.48280334 -72.75166321]
[79.38984680 -62.52499771]
[82.57180023 -49.24560165]
[79.22126770 -35.91122437]
[70.01567841 -25.57339478]
[74.85549164 -11.37564278]
[79.69531250 2.82210946]
[84.53512573 17.01986122]
[89.37493896 31.21761513]
[100.80493927 40.76771927]
[97.93413544 56.32628632]
[102.77395630 70.52404022]
[107.61376953 84.72179413]
[119.49059296 93.88372803]
[134.45187378 94.96080017]
[149.41316223 96.03786469]
[164.37443542 97.11493683]
[176.15780640 86.58271027]
[191.93241882 87.55081177]
[202.33947754 99.44487000]
[201.20465088 115.20836639]
[189.20121765 125.48908997]
[173.45060730 124.18766785]
[163.29736328 112.07621765]
[148.33609009 110.99914551]
[133.37480164 109.92208099]
[118.41352844 108.84500885]
[108.08262634 119.72032166]
[109.92594910 134.60662842]
[120.27896118 123.75235748]
[135.26907349 123.20806885]
[146.38203430 133.28289795]
[147.30574036 148.25442505]
[137.51554871 159.61894226]
[122.57220459 160.92146301]
[110.96305084 151.42150879]
[110.96305084 166.42150879]
[110.96305084 181.42150879]
[110.96305084 196.42150879]
[110.96305084 211.42150879]
[110.96305084 226.42150879]
[110.96305084 241.42150879]
[110.96305084 256.42150879]
[110.96305084 271.42150879]
[110.96305084 286.42150879]
[125.57306671 290.16293335]
[138.79322815 297.42092896]
[149.79249573 307.73919678]
[157.87947083 320.46914673]
[162.54577637 334.81057739]
[163.49809265 349.86193848]
[160.67654419 364.67712402]
[154.25852966 378.32482910]
[144.64746094 389.94714355]
[132.44749451 398.81347656]
[118.42555237 404.36648560]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 125]
[23 124]
[28 109]
[29 108]
[30 107]
[32 105]
[33 104]
[34 103]
[35 102]
[36 101]
[38 48]
[39 47]
[51 96]
[82 95]
[83 94]
[84 93]
[85 92]
[86 91]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
