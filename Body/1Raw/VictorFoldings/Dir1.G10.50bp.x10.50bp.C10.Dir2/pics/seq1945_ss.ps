%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGACAACCUUGGGGGGGGGGAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUUGAAACCUGxxxxxxxxxxCCCCCAUGCCUCAGGAUACUCCUCAAUAGCCAUCGCUGUAGUAUAUCCAACCCCCCCCCCAGACAACCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 361.13394165]
[71.19830322 355.11791992]
[59.48964310 345.58850098]
[50.78712082 333.25280762]
[45.73651886 319.02630615]
[44.71262741 303.96463013]
[47.79142761 289.18545532]
[54.74444962 275.78552246]
[65.05573273 264.75918579]
[77.96011353 256.92468262]
[92.50000000 252.86337280]
[92.50000000 237.86337280]
[92.50000000 222.86337280]
[92.50000000 207.86337280]
[92.50000000 192.86337280]
[92.50000000 177.86337280]
[92.50000000 162.86337280]
[92.50000000 147.86337280]
[92.50000000 132.86337280]
[92.50000000 117.86337280]
[79.73890686 107.81893921]
[78.19703674 89.82355499]
[63.20434189 90.29159546]
[48.21164322 90.75964355]
[36.50362015 103.71570587]
[19.38545990 104.21827698]
[7.41804600 92.44377136]
[-7.56166840 93.22361755]
[-13.39718246 96.54841614]
[-19.15992737 96.39985657]
[-23.17817307 93.71113586]
[-38.17736053 93.86717224]
[-53.17655182 94.02320862]
[-68.17573547 94.17924500]
[-79.05375671 105.64416504]
[-94.85456848 105.97563934]
[-106.20383453 94.97702026]
[-106.36824036 79.17358398]
[-95.25023651 67.94123077]
[-79.44595337 67.94392395]
[-68.33177185 79.18005371]
[-53.33258820 79.02401733]
[-38.33339691 78.86798096]
[-23.33420944 78.71194458]
[-8.34151363 78.24390411]
[6.63820076 77.46405792]
[13.86761379 66.75273895]
[26.13648415 62.11063385]
[39.02322006 65.45129395]
[47.74360275 75.76694489]
[62.73629761 75.29890442]
[77.72899628 74.83085632]
[90.89757538 67.64835358]
[99.40866852 55.29677963]
[107.91975403 42.94520569]
[116.43084717 30.59363365]
[117.88996124 14.83985329]
[131.48268127 8.74992275]
[127.88600922 -18.55397415]
[155.33291626 -33.35806274]
[160.23446655 -47.53462219]
[165.13601685 -61.71117783]
[170.03756714 -75.88774109]
[174.93911743 -90.06429291]
[179.09700012 -104.47650909]
[174.69221497 -119.67218781]
[185.11515808 -130.31228638]
[188.51812744 -144.92117310]
[191.92111206 -159.53007507]
[195.32409668 -174.13896179]
[182.08468628 -181.39297485]
[171.29414368 -191.95075989]
[163.75320435 -205.02886963]
[160.02145386 -219.65679932]
[160.37580872 -234.74908447]
[164.78997803 -249.18577576]
[172.93638611 -261.89553833]
[184.21054077 -271.93527222]
[197.77580261 -278.55993652]
[212.62554932 -281.27795410]
[227.65783691 -279.88760376]
[241.75715637 -274.49206543]
[253.87725830 -265.49172974]
[263.11874390 -253.55448914]
[268.79580688 -239.56616211]
[270.48721313 -224.56477356]
[268.06744385 -209.66352844]
[261.71603394 -195.96818542]
[251.90434265 -184.49504089]
[239.36042786 -176.09548950]
[225.01512146 -171.39280701]
[209.93298340 -170.73597717]
[206.52999878 -156.12709045]
[203.12702942 -141.51820374]
[199.72404480 -126.90930939]
[204.37223816 -112.75856018]
[193.70588684 -101.07353210]
[207.76133728 -106.31227875]
[220.72906494 -98.77317047]
[223.13070679 -83.96668243]
[213.21086121 -72.71515656]
[198.22013855 -73.24255371]
[189.11567688 -85.16274261]
[184.21412659 -70.98618317]
[179.31257629 -56.80962753]
[174.41102600 -42.63307190]
[169.50947571 -28.45651245]
[178.40182495 -16.37652397]
[193.39451599 -16.84456635]
[208.38720703 -17.31260872]
[222.03390503 -26.40655327]
[236.61085510 -18.89360809]
[237.12255859 -2.50244665]
[223.04260254 5.90511036]
[208.85525513 -2.31991220]
[193.86256409 -1.85186994]
[178.86985779 -1.38382781]
[174.88351440 7.67377043]
[168.33108521 14.48776245]
[160.22952271 18.43261909]
[151.70378113 19.29327774]
[143.83424377 17.26101303]
[142.98390198 32.13132477]
[128.78242493 39.10472488]
[120.27133179 51.45629501]
[111.76023865 63.80786896]
[103.24915314 76.15943909]
[116.22089386 83.85075378]
[121.53129578 97.16259003]
[117.81837463 110.22895813]
[107.50000000 117.86337280]
[107.50000000 132.86337280]
[107.50000000 147.86337280]
[107.50000000 162.86337280]
[107.50000000 177.86337280]
[107.50000000 192.86337280]
[107.50000000 207.86337280]
[107.50000000 222.86337280]
[107.50000000 237.86337280]
[107.50000000 252.86337280]
[122.03988647 256.92468262]
[134.94427490 264.75918579]
[145.25555420 275.78552246]
[152.20857239 289.18545532]
[155.28736877 303.96463013]
[154.26348877 319.02630615]
[149.21287537 333.25280762]
[140.51036072 345.58850098]
[128.80169678 355.11791992]
[114.95575714 361.13394165]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 52]
[23 51]
[24 50]
[27 46]
[28 45]
[31 44]
[32 43]
[33 42]
[34 41]
[53 127]
[54 126]
[55 125]
[56 124]
[58 122]
[60 107]
[61 106]
[62 105]
[63 104]
[64 103]
[65 97]
[67 95]
[68 94]
[69 93]
[70 92]
[108 117]
[109 116]
[110 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
