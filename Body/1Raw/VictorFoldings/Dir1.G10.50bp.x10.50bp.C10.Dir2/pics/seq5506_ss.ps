%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCUAGGAGGCGGGGGGGGGGCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAAGAAUUxxxxxxxxxxUCAUUCUCAACCCCCUGACAAAACACAUAGCCUACCCCUUCCUUGUACUACCCCCCCCCCUCCCUAUGAGGC\
) } def
/len { sequence length } bind def

/coor [
[10.76143551 249.39282227]
[2.83107758 244.36044312]
[-4.81621170 238.90751648]
[-12.15815544 233.04994202]
[-19.17336464 226.80476379]
[-25.84140396 220.19018555]
[-32.14284515 213.22546387]
[-38.05933762 205.93090820]
[-43.57363892 198.32775879]
[-56.30330276 206.26222229]
[-63.92198563 220.12823486]
[-78.81566620 220.29428101]
[-91.54532623 228.22874451]
[-104.27499390 236.16320801]
[-116.75758362 244.48095703]
[-123.51958466 258.78430176]
[-138.37565613 259.85510254]
[-150.59962463 268.54846191]
[-162.82360840 277.24179077]
[-175.04759216 285.93515015]
[-187.27157593 294.62847900]
[-193.59742737 309.75845337]
[-209.89549255 311.57641602]
[-219.39971924 298.21221924]
[-212.33297729 283.41381836]
[-195.96492004 282.40451050]
[-183.74093628 273.71115112]
[-171.51695251 265.01782227]
[-159.29298401 256.32446289]
[-147.06900024 247.63111877]
[-141.18133545 233.94956970]
[-125.45093536 232.25697327]
[-124.51658630 228.79943848]
[-121.82640076 225.63696289]
[-117.54452515 223.60577393]
[-112.20945740 223.43353271]
[-99.47978973 215.49908447]
[-86.75012970 207.56462097]
[-80.04195404 194.26612854]
[-64.23776245 193.53256226]
[-51.50809860 185.59809875]
[-65.36412811 154.18896484]
[-72.78440857 120.67086792]
[-73.48017120 86.34829712]
[-67.42431641 52.55702972]
[-54.85254669 20.61217690]
[-67.89330292 13.20011234]
[-80.93405914 5.78804731]
[-93.97481537 -1.62401795]
[-110.36100006 -0.97221190]
[-118.88861847 -14.97977352]
[-110.78517914 -29.23692513]
[-94.38681030 -29.07712936]
[-86.56275177 -14.66477299]
[-73.52199554 -7.25270796]
[-60.48123932 0.15935704]
[-47.44048309 7.57142210]
[-37.60439682 -6.52121162]
[-26.42619133 -19.57489777]
[-14.01489830 -31.46231651]
[-0.49156901 -42.06752777]
[14.01189899 -51.28709412]
[29.35404587 -59.03108978]
[45.38523483 -65.22398376]
[61.94910049 -69.80538177]
[78.88410187 -72.73059082]
[96.02504730 -73.97108459]
[96.32904816 -88.96800232]
[96.63305664 -103.96492004]
[96.93705750 -118.96183777]
[97.24106598 -133.95875549]
[83.43926239 -140.39538574]
[73.45359802 -151.89349365]
[69.01416016 -166.46096802]
[70.89009094 -181.57389832]
[78.75638580 -194.61389160]
[91.25015259 -203.32167053]
[106.20678711 -206.18858337]
[121.03494263 -202.71789551]
[133.16555786 -193.51095581]
[140.49694824 -180.16288757]
[141.75888062 -164.98634338]
[136.73272705 -150.61074829]
[126.28929901 -139.52676392]
[112.23798370 -133.65475464]
[111.93398285 -118.65783691]
[111.62997437 -103.66091919]
[111.32597351 -88.66400146]
[111.02196503 -73.66707611]
[120.37594604 -72.81944275]
[129.67056274 -71.46835327]
[138.87875366 -69.61775208]
[147.97367859 -67.27302551]
[156.92884827 -64.44100189]
[165.71818542 -61.12994385]
[174.31605530 -57.34948730]
[182.69744873 -53.11064529]
[190.83792114 -48.42576981]
[198.71377563 -43.30850983]
[206.30206299 -37.77376556]
[213.58067322 -31.83766556]
[220.52839661 -25.51750183]
[227.12501526 -18.83168793]
[233.35128784 -11.79969692]
[239.18908691 -4.44201708]
[244.62141418 3.21991920]
[249.63243103 11.16379070]
[254.20755005 19.36645699]
[258.33343506 27.80401993]
[261.99807739 36.45190048]
[265.19079590 45.28490829]
[267.90228271 54.27730942]
[270.12463379 63.40290833]
[271.85137939 72.63511658]
[273.07751465 81.94704437]
[273.79943848 91.31156921]
[274.01507568 100.70140076]
[273.72375488 110.08918762]
[272.92636108 119.44757843]
[271.62521362 128.74932861]
[269.82409668 137.96731567]
[267.52822876 147.07470703]
[264.74435425 156.04495239]
[261.48052979 164.85192871]
[257.74630737 173.47000122]
[253.55253601 181.87402344]
[248.91145325 190.03953552]
[243.83654785 197.94276428]
[238.34263611 205.56065369]
[232.44570923 212.87103271]
[226.16294861 219.85261536]
[219.51264954 226.48503113]
[212.51420593 232.74897766]
[205.18797302 238.62620544]
[197.55532837 244.09960938]
[189.63847351 249.15321350]
[181.46049500 253.77230835]
[173.04521179 257.94345093]
[164.41714478 261.65447998]
[155.60140991 264.89459229]
[146.62368774 267.65432739]
[137.51016235 269.92565918]
[128.28735352 271.70196533]
[118.98214722 272.97808838]
[109.62164307 273.75027466]
[100.23310089 274.01632690]
[90.84388733 273.77545166]
[81.48133850 273.02832031]
[72.17274475 271.77713013]
[62.94521713 270.02554321]
[53.82563019 267.77862549]
[44.84056091 265.04293823]
[36.01617813 261.82647705]
[27.37818909 258.13858032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[9 41]
[10 40]
[12 38]
[13 37]
[14 36]
[15 32]
[17 30]
[18 29]
[19 28]
[20 27]
[21 26]
[46 57]
[47 56]
[48 55]
[49 54]
[67 89]
[68 88]
[69 87]
[70 86]
[71 85]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
