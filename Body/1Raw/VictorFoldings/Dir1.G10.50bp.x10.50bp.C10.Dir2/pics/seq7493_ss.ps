%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCCUCAUAAUGGGGGGGGGGCAUUUUCCUUAUCUGCUUCCUAGUCCUGUAUGCCCUUUUCCUAACACUCAxxxxxxxxxxCCUAUCAUAUAGUAAAACCCAGCCCAUGACCCCUAACAGGGGCCCUCUCACCCCCCCCCCGCCCUCCUAAU\
) } def
/len { sequence length } bind def

/coor [
[97.32866669 387.26220703]
[83.30672455 381.70919800]
[71.10676575 372.84286499]
[61.49569321 361.22055054]
[55.07766724 347.57284546]
[52.25613403 332.75765991]
[53.20844650 317.70629883]
[57.87475204 303.36486816]
[65.96172333 290.63491821]
[76.96099091 280.31665039]
[90.18115234 273.05865479]
[104.79116821 269.31723022]
[104.79116821 254.31723022]
[104.79116821 239.31723022]
[104.79116821 224.31723022]
[104.79116821 209.31723022]
[104.79116821 194.31723022]
[104.79116821 179.31723022]
[104.79116821 164.31723022]
[104.79116821 149.31723022]
[104.79116821 134.31723022]
[80.57449341 125.60066986]
[70.64244080 103.95386505]
[78.48395538 83.50904083]
[69.56780243 71.44660950]
[60.65164948 59.38418198]
[51.73550034 47.32175064]
[38.90351486 55.10991287]
[25.41647720 61.69891739]
[11.38614082 67.03417206]
[-3.07122898 71.07145691]
[-17.83583260 73.77732849]
[-32.78532410 75.12935638]
[-47.79582214 75.11633301]
[-62.74294281 73.73838043]
[-77.50283051 71.00690460]
[-91.95317841 66.94454193]
[-105.97423553 61.58495712]
[-119.44982910 54.97256470]
[-132.26828003 47.16215515]
[-144.32337952 38.21845245]
[-155.51522827 28.21556282]
[-165.75108337 17.23637962]
[-174.94613647 5.37187910]
[-183.02416992 -7.27962208]
[-189.91827393 -20.61328888]
[-195.57128906 -34.51863098]
[-199.93640137 -48.88042068]
[-202.97743225 -63.57965088]
[-204.66917419 -78.49452209]
[-204.99760437 -93.50142670]
[-203.96002197 -108.47602844]
[-201.56500244 -123.29423523]
[-197.83239746 -137.83325195]
[-192.79315186 -151.97259521]
[-186.48899841 -165.59510803]
[-178.97219849 -178.58792114]
[-170.30503845 -190.84333801]
[-160.55932617 -202.25984192]
[-149.81581116 -212.74279785]
[-138.16355896 -222.20535278]
[-125.69908142 -230.56909180]
[-112.52568817 -237.76470947]
[-98.75253296 -243.73258972]
[-84.49375916 -248.42326355]
[-69.86750031 -251.79786682]
[-54.99497986 -253.82844543]
[-39.99942398 -254.49816895]
[-25.00509453 -253.80148315]
[-10.13624573 -251.74415588]
[4.48391390 -248.34324646]
[18.73423386 -243.62693787]
[32.49663162 -237.63430786]
[45.65706253 -230.41500854]
[58.10647202 -222.02885437]
[69.74169922 -212.54536438]
[80.46633148 -202.04310608]
[90.19149780 -190.60910034]
[98.83660889 -178.33810425]
[106.33003235 -165.33180237]
[112.60967255 -151.69796753]
[117.62348175 -137.54957581]
[121.32993317 -123.00387573]
[123.69829559 -108.18139648]
[124.70895386 -93.20494843]
[124.35353088 -78.19865417]
[122.63497162 -63.28685379]
[119.56751251 -48.59311676]
[115.17658234 -34.23920059]
[109.49855042 -20.34404564]
[102.58049011 -7.02280045]
[94.47970581 5.61415243]
[85.26333618 17.46209717]
[75.00775146 28.42285347]
[63.79793167 38.40559769]
[72.71408081 50.46802902]
[81.63023376 62.53046036]
[90.54638672 74.59289551]
[101.33495331 71.41402435]
[113.09113312 72.86773682]
[123.81622314 79.18000793]
[131.50605774 89.71652985]
[134.51785278 103.02401733]
[149.49810791 102.25435638]
[164.47834778 101.48469543]
[179.45858765 100.71503448]
[192.84356689 92.27983093]
[205.95108032 99.35389709]
[220.93132019 98.58423615]
[229.28269958 85.50623322]
[243.73843384 79.86607361]
[258.73999023 83.83251953]
[268.51898193 95.88037872]
[269.31518555 111.37701416]
[260.82241821 124.36364746]
[246.30635071 129.84666443]
[231.34870911 125.71771240]
[221.70098877 113.56447601]
[206.72074890 114.33413696]
[194.40724182 122.71428680]
[180.22824097 115.69527435]
[165.24800110 116.46493530]
[150.26776123 117.23459625]
[135.28752136 118.00425720]
[150.28288269 118.37735748]
[161.91218567 127.85148621]
[165.30877686 142.46186829]
[159.05122375 156.09428406]
[145.75822449 163.04380798]
[130.99266052 160.40217590]
[120.93370056 149.27485657]
[119.79116821 134.31723022]
[119.79116821 149.31723022]
[119.79116821 164.31723022]
[119.79116821 179.31723022]
[119.79116821 194.31723022]
[119.79116821 209.31723022]
[119.79116821 224.31723022]
[119.79116821 239.31723022]
[119.79116821 254.31723022]
[119.79116821 269.31723022]
[134.40118408 273.05865479]
[147.62133789 280.31665039]
[158.62060547 290.63491821]
[166.70758057 303.36486816]
[171.37388611 317.70629883]
[172.32620239 332.75765991]
[169.50466919 347.57284546]
[163.08663940 361.22055054]
[153.47557068 372.84286499]
[141.27560425 381.70919800]
[127.25366211 387.26220703]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 98]
[25 97]
[26 96]
[27 95]
[103 124]
[104 123]
[105 122]
[106 121]
[108 119]
[109 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
