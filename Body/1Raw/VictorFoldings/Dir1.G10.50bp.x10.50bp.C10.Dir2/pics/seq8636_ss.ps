%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCGCUAAGGGGGGGGGGCAUUACUGCAGGCCACCUACUCAUGCACCUAAUUGGAAGCGCCACCCUAGxxxxxxxxxxCAUGAUUUAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCCCCCCCCCCCUAAACGCUAA\
) } def
/len { sequence length } bind def

/coor [
[81.47064209 371.65420532]
[67.98175812 364.92269897]
[56.49626160 355.15811157]
[47.68189240 342.92822266]
[42.05110931 328.94403076]
[39.93128204 314.01855469]
[41.44564819 299.01956177]
[46.50617218 284.81903076]
[54.81863785 272.24261475]
[65.89976501 262.02145386]
[79.10532379 254.74983215]
[93.66754913 250.85046387]
[93.35957336 235.85362244]
[93.05158997 220.85678101]
[92.74361420 205.85993958]
[92.43563843 190.86311340]
[92.12766266 175.86627197]
[91.81967926 160.86943054]
[91.51170349 145.87258911]
[91.20372772 130.87576294]
[78.13703156 123.50951385]
[65.14665222 131.00952148]
[52.15626907 138.50952148]
[44.42975235 152.97441101]
[28.03283882 153.24497986]
[19.83326530 139.04290771]
[28.26605225 124.97805023]
[44.65626907 125.51913452]
[57.64665222 118.01913452]
[70.63703156 110.51913452]
[76.28029633 86.31040955]
[95.77995300 76.79764557]
[97.92853546 61.95232773]
[100.07711792 47.10700226]
[98.25693512 43.00985718]
[97.90995789 38.95977783]
[98.83325195 35.42505264]
[100.68972015 32.75620270]
[103.05966949 31.15172768]
[106.41893005 16.53271866]
[107.95622253 1.61170304]
[107.64824677 -13.38513470]
[107.34027100 -28.38197327]
[107.03228760 -43.37881088]
[106.72431183 -58.37564850]
[106.41633606 -73.37248993]
[94.09848785 -64.81266022]
[79.66726685 -68.90410614]
[73.67484283 -82.65513611]
[80.50289917 -96.01094818]
[95.15873718 -99.20571136]
[106.92566681 -89.90396118]
[100.34662628 -104.29238892]
[109.10199738 -116.34197998]
[110.33261108 -131.29141235]
[111.56322479 -146.24084473]
[112.79383850 -161.19029236]
[114.02444458 -176.13972473]
[99.39713287 -179.58926392]
[85.44735718 -185.18045044]
[72.48677063 -192.78839111]
[60.80490494 -202.24311829]
[50.66274643 -213.33338928]
[42.28687286 -225.81147766]
[35.86440659 -239.39857483]
[31.53882027 -253.79118347]
[29.40675735 -268.66775513]
[29.51584435 -283.69589233]
[31.86364555 -298.53994751]
[36.39770889 -312.86822510]
[43.01674271 -326.36068726]
[51.57287979 -338.71585083]
[61.87496567 -349.65771484]
[73.69284821 -358.94186401]
[86.76251984 -366.36087036]
[100.79199219 -371.74896240]
[115.46784210 -374.98577881]
[130.46220398 -375.99905396]
[145.44010925 -374.76608276]
[160.06692505 -371.31445312]
[174.01589966 -365.72128296]
[186.97541809 -358.11151123]
[198.65592957 -348.65512085]
[208.79650879 -337.56338501]
[217.17060852 -325.08410645]
[223.59114075 -311.49609375]
[227.91467285 -297.10287476]
[230.04461670 -282.22601318]
[229.93339539 -267.19787598]
[227.58348083 -252.35415649]
[223.04736328 -238.02651978]
[216.42640686 -224.53501892]
[207.86851501 -212.18106079]
[197.56488037 -201.24066162]
[185.74566650 -191.95820618]
[172.67494202 -184.54107666]
[158.64469910 -179.15496826]
[143.96838379 -175.92022705]
[128.97387695 -174.90910339]
[127.74327087 -159.95967102]
[126.51265717 -145.01023865]
[125.28204346 -130.06080627]
[124.05142975 -115.11136627]
[130.71849060 -101.79222870]
[121.87509918 -88.67334747]
[121.41316986 -73.68046570]
[121.72115326 -58.68362808]
[122.02912903 -43.68678665]
[122.33710480 -28.68995094]
[122.64508057 -13.69311237]
[122.95306396 1.30372536]
[131.41015625 -11.08487606]
[144.34518433 -18.67995071]
[159.28439331 -20.02899742]
[173.37078857 -14.87401867]
[183.91041565 -4.20086670]
[188.88766479 9.94929123]
[187.35066223 24.87033844]
[179.59336853 37.70872879]
[167.09928894 46.00921249]
[152.25784302 48.18437576]
[137.90733337 43.81824112]
[126.79222107 33.74579620]
[121.03794098 19.89197922]
[117.67868042 34.51098633]
[114.92243958 49.25558090]
[112.77385712 64.10090637]
[110.62528229 78.94622803]
[122.54701996 88.12109375]
[127.14252472 103.64863586]
[121.38719177 120.01008606]
[106.20056152 130.56777954]
[106.50854492 145.56462097]
[106.81652069 160.56146240]
[107.12449646 175.55828857]
[107.43247223 190.55513000]
[107.74045563 205.55197144]
[108.04843140 220.54881287]
[108.35640717 235.54563904]
[108.66438293 250.54248047]
[123.37442017 253.84071350]
[136.86738586 260.56405640]
[148.35879517 270.32165527]
[157.18057251 282.54620361]
[162.81983948 296.52697754]
[164.94871521 311.45117188]
[163.44343567 326.45111084]
[158.39152527 340.65466309]
[150.08668518 353.23614502]
[139.01174927 363.46398926]
[125.81061554 370.74365234]
[111.25075531 374.65182495]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 30]
[22 29]
[23 28]
[32 128]
[33 127]
[34 126]
[39 125]
[40 124]
[41 111]
[42 110]
[43 109]
[44 108]
[45 107]
[46 106]
[52 105]
[54 103]
[55 102]
[56 101]
[57 100]
[58 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
