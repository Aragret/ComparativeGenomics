%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAGUAAAAGGGGGGGGGGGGAACUCGGCAAAUCUUACCCCGCCUGUUUACCAAAAACAUCACCUCUAGxxxxxxxxxxCGCCUAAUCUACUCCACCUCAAUCACACUACUCCCCAUAUCUAACAACGUCCCCCCCCCCAAAAAUAAAA\
) } def
/len { sequence length } bind def

/coor [
[99.14738464 399.48699951]
[84.27648926 396.97558594]
[70.49768066 390.84408569]
[58.67710495 381.47793579]
[49.55782318 369.46588135]
[43.71307755 355.56301880]
[41.51027298 340.64328003]
[43.08787918 325.64453125]
[48.34672546 311.50964355]
[56.95624161 299.12710571]
[68.37522125 289.27532959]
[81.88585663 282.57357788]
[96.63886261 279.44311523]
[97.26284027 264.45611572]
[97.88681793 249.46910095]
[98.51079559 234.48207092]
[99.13477325 219.49505615]
[99.75874329 204.50804138]
[100.38272095 189.52102661]
[101.00669861 174.53401184]
[101.63067627 159.54699707]
[102.25465393 144.55998230]
[102.87863159 129.57296753]
[97.54782104 124.29731750]
[86.99635315 134.95877075]
[76.33507538 124.40712738]
[86.88619232 113.74603271]
[81.55538177 108.47038269]
[66.57566833 109.25022888]
[51.59595108 110.03007507]
[45.74497986 124.12719727]
[34.35121155 134.28321838]
[19.67688179 138.48164368]
[4.63559294 135.88888550]
[-7.78619623 127.01973724]
[-15.12213039 113.63516235]
[-15.91565514 98.39268494]
[-10.00921440 84.31871033]
[1.42446196 74.20764160]
[16.11520958 70.06702423]
[31.14617157 72.71900177]
[43.53293991 81.63700104]
[50.81610870 95.05036163]
[65.79582214 94.27051544]
[80.77553558 93.49066925]
[93.21497345 85.10852814]
[99.56210327 71.51757812]
[105.90923309 57.92662430]
[112.25636292 44.33567429]
[99.23630524 36.86943817]
[86.88668060 28.33989143]
[75.29409790 18.80685997]
[64.53989410 8.33721161]
[54.69948196 -2.99561262]
[45.84189987 -15.11212158]
[38.02927399 -27.92732430]
[31.31640625 -41.35132980]
[25.75038338 -55.28997803]
[21.37024498 -69.64550018]
[18.20671654 -84.31719208]
[16.28199005 -99.20214844]
[15.60956478 -114.19596100]
[16.19415665 -129.19345093]
[18.03166771 -144.08943176]
[21.10920525 -158.77940369]
[25.40518570 -173.16033936]
[30.88947296 -187.13134766]
[37.52359772 -200.59443665]
[45.26102829 -213.45518494]
[54.04749298 -225.62336731]
[63.82135391 -237.01362610]
[74.51405334 -247.54608154]
[86.05059814 -257.14685059]
[98.35005951 -265.74859619]
[111.32615662 -273.29095459]
[124.88788605 -279.72103882]
[138.94010925 -284.99377441]
[153.38426208 -289.07211304]
[168.11903381 -291.92752075]
[183.04104614 -293.53991699]
[198.04565430 -293.89797974]
[213.02760315 -292.99923706]
[227.88180542 -290.85000610]
[242.50405884 -287.46530151]
[256.79180908 -282.86892700]
[270.64483643 -277.09307861]
[283.96594238 -270.17828369]
[296.66174316 -262.17306519]
[308.64312744 -253.13354492]
[319.82608032 -243.12313843]
[330.13217163 -232.21208191]
[339.48907471 -220.47688293]
[347.83117676 -207.99987793]
[355.09997559 -194.86857605]
[361.24447632 -181.17509460]
[366.22158813 -167.01545715]
[369.99636841 -152.48901367]
[372.54235840 -137.69764709]
[373.84170532 -122.74511719]
[373.88528442 -107.73629761]
[372.67279053 -92.77647400]
[370.21273804 -77.97057343]
[366.52239990 -63.42245102]
[361.62762451 -49.23415756]
[355.56274414 -35.50521469]
[348.37033081 -22.33191681]
[340.10083008 -9.80667305]
[330.81222534 1.98266196]
[320.56967163 12.95339394]
[309.44503784 23.02856827]
[297.51635742 32.13751602]
[284.86727905 40.21633911]
[271.58654785 47.20837402]
[257.76730347 53.06457520]
[243.50648499 57.74386597]
[228.90412903 61.21341705]
[214.06266785 63.44890213]
[199.08619690 64.43463135]
[184.07975769 64.16369629]
[169.14862061 62.63799286]
[154.39752197 59.86822510]
[139.92993164 55.87382507]
[125.84731293 50.68280411]
[119.50018311 64.27375793]
[113.15305328 77.86470795]
[106.80593109 91.45565796]
[115.52778625 93.16811371]
[122.94985199 101.59044647]
[124.71835327 115.25270844]
[117.86564636 130.19694519]
[117.24166870 145.18395996]
[116.61769867 160.17097473]
[115.99372101 175.15798950]
[115.36974335 190.14500427]
[114.74576569 205.13201904]
[114.12178802 220.11903381]
[113.49781036 235.10604858]
[112.87383270 250.09307861]
[112.24985504 265.08007812]
[111.62587738 280.06710815]
[126.06760406 284.41305542]
[138.97439575 292.21469116]
[149.53492737 302.98159790]
[157.08534241 316.03692627]
[161.15103149 330.56005859]
[161.47640991 345.63800049]
[158.04103088 360.32299805]
[151.06083679 373.69189453]
[140.97460938 384.90435791]
[128.41638184 393.25552368]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[28 45]
[29 44]
[30 43]
[46 126]
[47 125]
[48 124]
[49 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
