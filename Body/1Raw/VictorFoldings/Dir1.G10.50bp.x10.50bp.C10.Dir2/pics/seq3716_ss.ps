%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:58 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAGCCACGGGGGGGGGGCUCUAGCCUAGCCGUUUACUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUxxxxxxxxxxCUUCGAGUCUCCCUUCACCAUUUCCGACGGCAUCUACGGCUCAACAUUUUCCCCCCCCCCUUGUAGCCAC\
) } def
/len { sequence length } bind def

/coor [
[86.88436127 375.34982300]
[73.03842163 369.33380127]
[61.32976151 359.80438232]
[52.62723923 347.46871948]
[47.57663727 333.24218750]
[46.55274582 318.18051147]
[49.63154221 303.40136719]
[56.58456421 290.00143433]
[66.89585114 278.97509766]
[79.80023193 271.14059448]
[94.34011841 267.07928467]
[94.34011841 252.07926941]
[94.34011841 237.07926941]
[94.34011841 222.07926941]
[94.34011841 207.07926941]
[94.34011841 192.07926941]
[94.34011841 177.07926941]
[94.34011841 162.07926941]
[94.34011841 147.07926941]
[94.34011841 132.07926941]
[80.27371216 124.05333710]
[72.38314056 110.76469421]
[72.10426331 96.05258179]
[78.78491974 83.77769470]
[90.03807831 76.80956268]
[88.48049927 61.89065170]
[86.92292023 46.97174072]
[85.36534119 32.05282974]
[83.65264893 17.15092659]
[81.78503418 2.26764584]
[79.45393372 -12.55011177]
[76.66160583 -27.28791809]
[73.86928558 -42.02572250]
[71.07695770 -56.76353073]
[68.28463745 -71.50133514]
[51.22836685 -75.40105438]
[37.81489182 -87.48949432]
[31.80467606 -105.11014557]
[35.23387146 -123.97914886]
[21.33131409 -129.61109924]
[9.12860298 -125.30440521]
[-2.35869145 -130.33044434]
[-7.15828991 -141.47813416]
[-20.94067192 -147.39810181]
[-34.72305298 -153.31806946]
[-50.93585205 -150.85285950]
[-60.96445465 -163.82818604]
[-54.49229813 -178.89613342]
[-38.17737961 -180.55610657]
[-28.80308914 -167.10044861]
[-15.02070808 -161.18048096]
[-1.23832667 -155.26051331]
[16.01989746 -158.28601074]
[26.96327209 -143.51365662]
[40.86582565 -137.88169861]
[53.64318466 -145.73913574]
[54.89006042 -160.68722534]
[56.13693237 -175.63529968]
[57.38380814 -190.58338928]
[58.63068390 -205.53147888]
[44.08768845 -209.36193848]
[30.43086815 -215.65974426]
[18.07523537 -224.23352051]
[7.39626408 -234.82269287]
[-1.28152263 -247.10548401]
[-7.69441748 -260.70864868]
[-11.64753914 -275.21878052]
[-13.02075768 -290.19494629]
[-11.77234268 -305.18203735]
[-7.94023037 -319.72457886]
[-1.64087605 -333.38067627]
[6.93429089 -345.73535156]
[17.52468109 -356.41311646]
[29.80846405 -365.08950806]
[43.41234970 -371.50085449]
[57.92292786 -375.45233154]
[72.89924622 -376.82385254]
[87.88618469 -375.57376099]
[102.42830658 -371.73999023]
[116.08370209 -365.43908691]
[128.43739319 -356.86251831]
[139.11395264 -346.27090454]
[147.78895569 -333.98614502]
[154.19876099 -320.38153076]
[158.14860535 -305.87051392]
[159.51841736 -290.89404297]
[158.26660156 -275.90722656]
[154.43119812 -261.36553955]
[148.12873840 -247.71087646]
[139.55078125 -235.35815430]
[128.95796204 -224.68278503]
[116.67221069 -216.00918579]
[103.06687164 -209.60090637]
[88.55539703 -205.65272522]
[73.57877350 -204.28460693]
[72.33189392 -189.33651733]
[71.08502197 -174.38842773]
[69.83815002 -159.44033813]
[68.59127045 -144.49226379]
[81.54338837 -141.96884155]
[92.71395874 -135.31155396]
[100.85252380 -125.41637421]
[105.09964752 -113.53207397]
[105.07649994 -101.10343170]
[100.91528320 -89.59573364]
[93.22849274 -80.32209015]
[83.02243805 -74.29366302]
[85.81476593 -59.55585480]
[88.60708618 -44.81805038]
[91.39941406 -30.08024216]
[94.19174194 -15.34243679]
[96.94880676 -13.04764271]
[98.70108032 -9.27521706]
[98.75354004 -4.52657223]
[96.66831970 0.40003279]
[98.53592682 15.28331280]
[102.51510620 21.56915474]
[100.28424835 30.49524689]
[101.84183502 45.41415787]
[103.39941406 60.33307266]
[104.95699310 75.25198364]
[125.39324188 86.18670654]
[130.29069519 111.98281097]
[143.06805420 119.84024048]
[159.46697998 119.75397491]
[167.50640869 134.04731750]
[158.91606140 148.01649475]
[142.53295898 147.29122925]
[135.21063232 132.61759949]
[122.43327332 124.76016998]
[109.34011841 132.07926941]
[109.34011841 147.07926941]
[109.34011841 162.07926941]
[109.34011841 177.07926941]
[109.34011841 192.07926941]
[109.34011841 207.07926941]
[109.34011841 222.07926941]
[109.34011841 237.07926941]
[109.34011841 252.07926941]
[109.34011841 267.07928467]
[123.88000488 271.14059448]
[136.78437805 278.97509766]
[147.09567261 290.00143433]
[154.04869080 303.40136719]
[157.12748718 318.18051147]
[156.10359192 333.24218750]
[151.05299377 347.46871948]
[142.35047913 359.80438232]
[130.64181519 369.33380127]
[116.79587555 375.34982300]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 121]
[26 120]
[27 119]
[28 118]
[29 116]
[30 115]
[31 111]
[32 110]
[33 109]
[34 108]
[35 107]
[39 55]
[40 54]
[43 52]
[44 51]
[45 50]
[56 99]
[57 98]
[58 97]
[59 96]
[60 95]
[123 130]
[124 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
