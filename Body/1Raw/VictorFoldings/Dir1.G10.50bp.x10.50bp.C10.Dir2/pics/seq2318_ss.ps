%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUAACACCCAGGGGGGGGGGUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCAAGCUCAACACxxxxxxxxxxCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCCCCCCCCCCCUCAACACCCA\
) } def
/len { sequence length } bind def

/coor [
[95.30301666 445.73907471]
[83.41873932 436.46398926]
[74.10003662 424.61386108]
[67.88867188 410.87768555]
[65.14576721 396.05407715]
[66.03079224 381.00482178]
[70.49230194 366.60485840]
[78.27089691 353.69143677]
[88.91435242 343.01528931]
[101.80386353 335.19708252]
[116.19004822 330.69143677]
[115.25441742 315.72064209]
[114.31879425 300.74984741]
[113.38316345 285.77905273]
[112.44753265 270.80825806]
[111.51190948 255.83746338]
[110.57627869 240.86666870]
[109.64064789 225.89587402]
[108.70501709 210.92509460]
[107.76939392 195.95429993]
[106.83376312 180.98350525]
[104.96614838 166.10021973]
[102.17382812 151.36242676]
[99.38150024 136.62461853]
[96.58917999 121.88681030]
[93.79685211 107.14900208]
[90.19142151 103.24341583]
[89.06680298 97.58480072]
[91.20833588 91.74080658]
[89.03149414 76.89960480]
[86.85466003 62.05839539]
[77.19655609 49.52717209]
[83.00493622 35.81177902]
[80.82809448 20.97057533]
[78.18923187 6.20451927]
[75.09091187 -8.47200680]
[71.99258423 -23.14853287]
[68.89426422 -37.82505798]
[65.79594421 -52.50158310]
[50.87431717 -50.85481262]
[35.86313248 -50.67856598]
[20.90695381 -51.97454071]
[6.14982510 -54.73025513]
[-8.26613045 -58.91917038]
[-22.20207787 -64.50094604]
[-35.52379990 -71.42181396]
[-48.10300064 -79.61513519]
[-59.81853485 -89.00199127]
[-70.55756378 -99.49198914]
[-80.21667480 -110.98409271]
[-88.70282745 -123.36763000]
[-95.93431091 -136.52333069]
[-101.84146118 -150.32449341]
[-106.36740875 -164.63821411]
[-109.46854401 -179.32664490]
[-111.11502075 -194.24830627]
[-111.29096222 -209.25949097]
[-109.99468994 -224.21563721]
[-107.23867798 -238.97271729]
[-103.04947662 -253.38859558]
[-97.46743011 -267.32443237]
[-90.54628754 -280.64599609]
[-82.35271454 -293.22503662]
[-72.96562195 -304.94039917]
[-62.47541428 -315.67919922]
[-50.98311615 -325.33810425]
[-38.59941483 -333.82400513]
[-25.44356728 -341.05520630]
[-11.64227772 -346.96209717]
[2.67153454 -351.48776245]
[17.36001778 -354.58859253]
[32.28171158 -356.23477173]
[47.29290390 -356.41040039]
[62.24903107 -355.11383057]
[77.00605011 -352.35754395]
[91.42183685 -348.16806030]
[105.35755920 -342.58572388]
[118.67900848 -335.66430664]
[131.25787354 -327.47048950]
[142.97303772 -318.08316040]
[153.71165466 -307.59274292]
[163.37030029 -296.10025024]
[171.85595703 -283.71636963]
[179.08691406 -270.56039429]
[184.99351501 -256.75897217]
[189.51889038 -242.44506836]
[192.61943054 -227.75653076]
[194.26530457 -212.83480835]
[194.44065857 -197.82360840]
[193.14378357 -182.86750793]
[190.38719177 -168.11054993]
[186.19740295 -153.69483948]
[180.61479187 -139.75923157]
[173.69313049 -126.43791962]
[165.49905396 -113.85920715]
[156.11149597 -102.14424133]
[145.62084961 -91.40583801]
[134.12817383 -81.74742126]
[121.74412537 -73.26200867]
[108.58798981 -66.03131866]
[94.78646088 -60.12498856]
[80.47247314 -55.59990311]
[83.57079315 -40.92337799]
[86.66911316 -26.24685287]
[89.76743317 -11.57032776]
[92.86575317 3.10619736]
[95.66996765 5.34313679]
[97.50034332 9.07829189]
[97.65158081 13.82481861]
[95.66930389 18.79373741]
[97.84613800 33.63494492]
[107.34854126 45.10462570]
[101.69586945 59.88156128]
[103.87270355 74.72276306]
[106.04953766 89.56397247]
[108.53466034 104.35668182]
[111.32698059 119.09448242]
[114.11930847 133.83229065]
[116.91162872 148.57009888]
[119.70395660 163.30790710]
[129.35607910 151.82588196]
[144.28231812 150.34028625]
[156.00827026 159.69453430]
[157.87646484 174.57774353]
[148.82621765 186.53990173]
[133.99586487 188.78944397]
[121.80455780 180.04788208]
[122.74018097 195.01867676]
[123.67581177 209.98945618]
[124.61144257 224.96025085]
[125.54706573 239.93104553]
[126.48269653 254.90184021]
[127.41832733 269.87261963]
[128.35395813 284.84341431]
[129.28958130 299.81420898]
[130.22520447 314.78500366]
[131.16084290 329.75579834]
[145.99607849 332.43521118]
[159.75871277 338.58770752]
[171.64860535 347.85562134]
[180.97448730 359.70007324]
[187.19418335 373.43246460]
[189.94607544 388.25442505]
[189.07015991 403.30422974]
[184.61738586 417.70687866]
[176.84661865 430.62503052]
[166.20964050 441.30764771]
[153.32487488 449.13363647]
[138.94142151 453.64801025]
[123.89552307 454.58834839]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[21 127]
[22 120]
[23 119]
[24 118]
[25 117]
[26 116]
[29 115]
[30 114]
[31 113]
[33 111]
[34 110]
[35 106]
[36 105]
[37 104]
[38 103]
[39 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
