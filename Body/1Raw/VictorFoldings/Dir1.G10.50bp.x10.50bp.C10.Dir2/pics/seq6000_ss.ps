%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUUCUGUAACAGCGGGGGGGGGGUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACUxxxxxxxxxxACCCCGAUGCAUACACCACAUGAAACAUCCUAUCAUCUGUAGGCUCAUUCCCCCCCCCCCAUUUCUCUAACAGC\
) } def
/len { sequence length } bind def

/coor [
[81.33477020 497.88400269]
[67.32003784 492.40008545]
[54.64461517 484.28713989]
[43.79571152 473.85702515]
[35.19033813 461.51058960]
[29.15925407 447.72247314]
[25.93428421 433.02261353]
[25.63938522 417.97604370]
[28.28589249 403.16113281]
[33.77207947 389.14727783]
[41.88707733 376.47317505]
[52.31896210 365.62594604]
[64.66676331 357.02258301]
[78.45585632 350.99371338]
[93.15623474 347.77111816]
[92.85987854 332.77404785]
[92.56352234 317.77697754]
[92.26716614 302.77990723]
[91.97080994 287.78283691]
[91.67444611 272.78576660]
[91.37808990 257.78869629]
[91.08173370 242.79162598]
[90.78537750 227.79455566]
[90.48902130 212.79748535]
[87.19511414 206.13661194]
[90.33790588 197.50186157]
[90.33790588 182.50186157]
[82.60060883 169.77458191]
[90.33790588 155.97441101]
[90.33790588 140.97441101]
[87.61584473 136.99134827]
[87.40341187 131.24510193]
[90.64597321 125.38474274]
[91.23857117 110.39645386]
[85.44956207 124.23434448]
[74.38978577 134.36753845]
[60.09945679 138.92674255]
[45.21469879 137.07095337]
[32.48130798 129.14247131]
[24.24820709 116.60388947]
[22.03415680 101.76818848]
[26.24758530 87.37211609]
[36.11124039 76.07130432]
[49.80557251 69.95041656]
[64.80438995 70.13858032]
[78.34086609 76.60107422]
[87.91652679 88.14305115]
[82.97232819 73.98130798]
[78.02813721 59.81956482]
[73.08394623 45.65782166]
[68.13974762 31.49608040]
[63.19555664 17.33433723]
[57.58938599 13.44340611]
[54.71619797 7.94568682]
[54.74642563 2.36031008]
[45.18050003 -9.19360924]
[35.61457443 -20.74752808]
[26.04864883 -32.30144882]
[10.41125870 -32.22350311]
[-1.58467996 -42.25502777]
[-4.27505302 -57.65943909]
[3.61045146 -71.16324615]
[18.34853935 -76.39036560]
[32.98033524 -70.87271118]
[40.59715652 -57.21554947]
[37.60256577 -41.86737442]
[47.16849518 -30.31345558]
[56.73442078 -18.75953484]
[66.30034637 -7.20561647]
[63.85315323 -22.00464439]
[65.57884216 -36.90504837]
[71.34377289 -50.75299072]
[80.70153809 -62.47614288]
[92.92750549 -71.16670227]
[107.07493591 -76.15170288]
[122.04830170 -77.04512024]
[136.68812561 -73.77778625]
[149.86074829 -66.60269165]
[160.54614258 -56.07546997]
[167.91685486 -43.01129532]
[171.40213013 -28.42181778]
[170.73207092 -13.43679047]
[165.95858765 0.78339881]
[157.45129395 13.13759041]
[145.86898804 22.66912079]
[132.10853577 28.63990211]
[117.23552704 30.58757782]
[102.40164948 28.36133003]
[88.75559998 22.13354874]
[77.35729980 12.39014339]
[82.30149078 26.55188560]
[87.24568939 40.71362686]
[92.18988037 54.87537003]
[97.13407135 69.03711700]
[102.07826996 83.19885254]
[115.62023163 89.64983368]
[129.73243713 84.56597900]
[143.84465027 79.48211670]
[157.95686340 74.39826202]
[160.82847595 65.31777191]
[167.48136902 58.69743347]
[176.31210327 55.95250320]
[185.27397156 57.58530807]
[192.35119629 63.09865952]
[206.73979187 58.85974503]
[221.12838745 54.62083435]
[235.51698303 50.38191986]
[239.75129700 35.54702377]
[251.34884644 25.37352180]
[266.60891724 23.10774231]
[280.66207886 29.47268677]
[289.02398682 42.43732452]
[289.02642822 57.86468887]
[280.66857910 70.83196259]
[266.61743164 77.20133209]
[251.35665894 74.94036102]
[239.75588989 64.77051544]
[225.36729431 69.00942230]
[210.97869873 73.24833679]
[196.59011841 77.48725128]
[183.80754089 93.65481567]
[163.04071045 88.51046753]
[148.92851257 93.59432983]
[134.81629944 98.67818451]
[120.70409393 103.76203918]
[113.72753906 109.74859619]
[106.22686005 110.98905182]
[105.63426208 125.97734070]
[105.33790588 140.97441101]
[105.33790588 155.97441101]
[113.07520294 169.77458191]
[105.33790588 182.50186157]
[105.33790588 197.50186157]
[105.48609161 212.50112915]
[105.78244781 227.49819946]
[106.07880402 242.49526978]
[106.37516022 257.49234009]
[106.67152405 272.48941040]
[106.96788025 287.48648071]
[107.26423645 302.48355103]
[107.56059265 317.48062134]
[107.85694885 332.47769165]
[108.15330505 347.47476196]
[122.96952057 350.11407471]
[136.98603821 355.59347534]
[149.66407776 363.70230103]
[160.51635742 374.12893677]
[169.12573242 386.47253418]
[175.16128540 400.25872803]
[178.39100647 414.95751953]
[178.69078064 430.00399780]
[176.04907227 444.81979370]
[170.56741333 458.83541870]
[162.45652771 471.51214600]
[152.02815247 482.36273193]
[139.68313599 490.97012329]
[125.89598846 497.00341797]
[111.19665527 500.23077393]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[26 133]
[27 132]
[29 130]
[30 129]
[33 128]
[34 127]
[47 95]
[48 94]
[49 93]
[50 92]
[51 91]
[52 90]
[55 69]
[56 68]
[57 67]
[58 66]
[96 125]
[97 124]
[98 123]
[99 122]
[104 120]
[105 119]
[106 118]
[107 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
