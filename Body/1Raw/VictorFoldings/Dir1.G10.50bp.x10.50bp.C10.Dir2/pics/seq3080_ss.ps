%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUACUUCGGGGGGGGGGACAAAGCGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCxxxxxxxxxxAUAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCCCCCCCCCCCAGUCCUACUUC\
) } def
/len { sequence length } bind def

/coor [
[110.91133881 395.04080200]
[97.42246246 388.30926514]
[85.93695831 378.54470825]
[77.12258911 366.31478882]
[71.49180603 352.33059692]
[69.37197876 337.40512085]
[70.88635254 322.40612793]
[75.94687653 308.20562744]
[84.25933838 295.62918091]
[95.34046936 285.40805054]
[108.54602051 278.13638306]
[123.10824585 274.23703003]
[122.80027008 259.24020386]
[122.49229431 244.24336243]
[122.18431854 229.24652100]
[121.87633514 214.24967957]
[121.56835938 199.25283813]
[121.26038361 184.25601196]
[120.95240784 169.25917053]
[120.64442444 154.26232910]
[120.33644867 139.26548767]
[99.08361816 141.61001587]
[80.54628754 133.82575989]
[68.93013763 119.00524902]
[66.21830750 101.65907288]
[51.44618988 99.05435181]
[36.67407227 96.44963074]
[21.67486382 96.60363007]
[6.95934105 99.51110077]
[0.56735593 113.65048218]
[-12.93142509 121.30310059]
[-28.34644508 119.52635956]
[-39.75031281 109.00346375]
[-42.75801086 93.78067017]
[-36.21301651 79.71146393]
[-22.63201332 72.20573425]
[-7.23717546 74.14958954]
[4.05186892 84.79557800]
[18.76739120 81.88810730]
[19.84168053 74.46544647]
[4.99639130 72.31663513]
[7.14542913 57.47137833]
[21.99025917 59.62012100]
[23.06455040 52.19746017]
[9.77720833 45.23710251]
[-3.51013327 38.27674484]
[-17.90291023 44.39082718]
[-32.84328842 39.77357101]
[-41.27688217 26.60510254]
[-39.22160339 11.10317326]
[-27.64789200 0.58731753]
[-12.02050114 0.02280199]
[0.28179297 9.67617321]
[3.45022297 24.98940468]
[16.73756409 31.94976044]
[30.02490616 38.91011810]
[44.52385330 61.91014862]
[39.27879715 81.67751312]
[54.05091095 84.28223419]
[68.82302856 86.88696289]
[78.79592896 73.64962006]
[93.86033630 66.73951721]
[94.47615814 51.75216293]
[95.09198761 36.76480865]
[95.70780945 21.77745438]
[96.32363892 6.79010153]
[81.91870880 2.30005145]
[69.16725159 -5.76609325]
[58.93867111 -16.85836983]
[51.93037796 -30.22048759]
[48.62020111 -44.94139481]
[49.23383713 -60.01739883]
[53.72945023 -74.42059326]
[61.80051804 -87.16893768]
[72.89674377 -97.39322662]
[86.26156616 -104.39636230]
[100.98374939 -107.70085907]
[116.05951691 -107.08139801]
[130.46096802 -102.58022308]
[143.20619202 -94.50423431]
[153.42620850 -83.40406799]
[160.42417908 -70.03653717]
[163.72299194 -55.31307602]
[163.09770203 -40.23755264]
[158.59097290 -25.83783913]
[150.51007080 -13.09573174]
[139.40594482 -2.88000846]
[126.03572083 4.11280489]
[111.31098938 7.40592670]
[110.69515991 22.39328003]
[110.07933807 37.38063431]
[109.46351624 52.36798859]
[108.84768677 67.35533905]
[117.92179108 68.29281616]
[127.00219727 71.83069611]
[135.33425903 78.00628662]
[142.15219116 86.63800812]
[155.57963562 79.95193481]
[169.00709534 73.26586151]
[171.44309998 57.94118881]
[182.44525146 46.99896622]
[197.78298950 44.64669800]
[211.55865479 51.78887939]
[218.47521973 65.67919159]
[215.87310791 80.97653961]
[204.75289917 91.79876709]
[189.39053345 93.98451233]
[175.69316101 86.69330597]
[162.26571655 93.37938690]
[148.83827209 100.06546021]
[150.52867126 114.96990967]
[165.11241150 118.47907257]
[179.69616699 121.98824310]
[188.60903931 109.67446136]
[201.55834961 101.71308136]
[216.56944275 99.31815338]
[231.35321045 102.85488892]
[243.65525818 111.78395081]
[251.59959412 124.74372864]
[253.97477722 139.75794983]
[250.41860962 154.53706360]
[241.47335815 166.82734680]
[228.50314331 174.75463867]
[213.48580933 177.11006165]
[198.71139526 173.53445435]
[186.43287659 164.57304382]
[178.52265930 151.59240723]
[176.18699646 136.57199097]
[161.60324097 133.06282043]
[147.01950073 129.55364990]
[135.33328247 138.95751953]
[135.64126587 153.95434570]
[135.94924927 168.95118713]
[136.25721741 183.94802856]
[136.56520081 198.94487000]
[136.87316895 213.94169617]
[137.18115234 228.93853760]
[137.48913574 243.93537903]
[137.79710388 258.93222046]
[138.10508728 273.92904663]
[152.81512451 277.22729492]
[166.30807495 283.95062256]
[177.79949951 293.70822144]
[186.62127686 305.93276978]
[192.26054382 319.91357422]
[194.38941956 334.83773804]
[192.88414001 349.83767700]
[187.83222961 364.04125977]
[179.52738953 376.62271118]
[168.45245361 386.85058594]
[155.25131226 394.13021851]
[140.69145203 398.03842163]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 60]
[26 59]
[27 58]
[28 39]
[29 38]
[44 56]
[45 55]
[46 54]
[62 93]
[63 92]
[64 91]
[65 90]
[66 89]
[97 110]
[98 109]
[99 108]
[111 130]
[112 129]
[113 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
