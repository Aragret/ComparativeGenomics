%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGACUUCACGGGGGGGGGGCAGUCAAAGCGAACUACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGxxxxxxxxxxUUCCUACUUCAGGGUCAUAAAGCCUAAAUAGCCCACACGUUCCCCUUAAACCCCCCCCCCUAAGACAUCAC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 384.28076172]
[71.01555634 378.72775269]
[58.81560135 369.86141968]
[49.20452881 358.23910522]
[42.78650284 344.59140015]
[39.96496582 329.77621460]
[40.91728210 314.72482300]
[45.58358765 300.38342285]
[53.67055511 287.65344238]
[64.66983032 277.33517456]
[77.88998413 270.07720947]
[92.50000000 266.33575439]
[92.50000000 251.33576965]
[92.50000000 236.33576965]
[92.50000000 221.33576965]
[92.50000000 206.33576965]
[92.50000000 191.33576965]
[92.50000000 176.33576965]
[92.50000000 161.33576965]
[92.50000000 146.33576965]
[92.50000000 131.33576965]
[79.55339050 124.90214539]
[70.72309113 113.45522308]
[67.78681183 99.29949951]
[53.27818298 95.49163818]
[38.76955795 91.68378448]
[24.26093292 87.87592316]
[9.75230694 84.06806946]
[-5.18370581 82.68404388]
[-20.14498711 83.76110840]
[-25.71494865 97.97161102]
[-36.90485382 108.35181427]
[-51.49294662 112.84073639]
[-66.58274078 110.54708862]
[-79.17815399 101.92627716]
[-86.77835083 88.68997955]
[-87.87431335 73.46625519]
[-82.24843597 59.27780533]
[-71.01773834 48.94174194]
[-56.41208649 44.51030350]
[-41.33143997 46.86335754]
[-28.77007294 55.53369904]
[-21.22205734 68.79982758]
[-6.26077557 67.72276306]
[-4.43142271 60.44928360]
[-0.77271706 45.90232849]
[1.05663586 38.62885284]
[-11.61488056 30.60185432]
[-24.28639603 22.57485771]
[-36.95791245 14.54786015]
[-53.57389832 11.17956829]
[-54.93700027 -5.71949339]
[-39.07570648 -11.70745277]
[-28.93091583 1.87634408]
[-16.25939941 9.90334129]
[-3.58788300 17.93033791]
[9.08363342 25.95733643]
[17.57587433 37.92320633]
[20.71187210 50.39923096]
[19.00082207 61.46670151]
[13.56016541 69.55944061]
[28.06879044 73.36730194]
[42.57741547 77.17515564]
[57.08604050 80.98301697]
[71.59466553 84.79087830]
[90.86465454 69.10136414]
[115.56820679 71.78987122]
[125.67363739 60.70473480]
[135.77906799 49.61960220]
[145.88450623 38.53446960]
[137.89004517 26.39801979]
[133.04792786 12.70556068]
[131.63739014 -1.73967004]
[133.73648071 -16.09143448]
[139.21778870 -29.51006889]
[147.75616455 -41.21160507]
[158.84799194 -50.51358414]
[171.84089661 -56.87483978]
[185.97212219 -59.92700195]
[200.41328430 -59.49580765]
[214.31896973 -55.61105347]
[226.87619019 -48.50458908]
[237.20709229 -59.37990189]
[222.23262024 -58.50518799]
[209.51910400 -66.46548462]
[203.76596069 -80.31833649]
[207.09982300 -94.94316101]
[218.28834534 -104.93401337]
[233.19578552 -106.59786224]
[246.31172180 -99.31967926]
[252.78799438 -85.78978729]
[250.23118591 -71.01035309]
[262.20144653 -80.04987335]
[274.17169189 -89.08939362]
[280.52169800 -103.58035278]
[295.34106445 -105.07575226]
[298.97265625 -120.70236206]
[313.51574707 -127.47573853]
[327.81405640 -120.19993591]
[330.89920044 -104.45631409]
[320.40447998 -92.32204437]
[304.38058472 -93.10549164]
[298.88674927 -79.26110077]
[283.21121216 -77.11913300]
[271.24096680 -68.07961273]
[259.27069092 -59.04009628]
[248.08241272 -49.04899979]
[237.75151062 -38.17368317]
[245.95481873 -25.00738335]
[250.48770142 -10.16003036]
[251.03790283 5.36522102]
[247.56242371 20.51786613]
[240.29090881 34.27113724]
[229.71040344 45.69156265]
[216.53276062 54.00234985]
[201.64675903 58.63619614]
[186.05810547 59.27402115]
[170.82160950 55.86692810]
[156.96963501 48.63990402]
[146.86421204 59.72503662]
[136.75877380 70.81017303]
[126.65333557 81.89530182]
[129.63424683 87.35121918]
[131.51184082 93.27805328]
[132.21620178 99.45516205]
[131.72111511 105.65255737]
[130.04501343 111.63949585]
[127.25028992 117.19308472]
[123.44100952 122.10655212]
[118.75898743 126.19696045]
[113.37854004 129.31202698]
[107.50000000 131.33576965]
[107.50000000 146.33576965]
[107.50000000 161.33576965]
[107.50000000 176.33576965]
[107.50000000 191.33576965]
[107.50000000 206.33576965]
[107.50000000 221.33576965]
[107.50000000 236.33576965]
[107.50000000 251.33576965]
[107.50000000 266.33575439]
[122.11001587 270.07720947]
[135.33016968 277.33517456]
[146.32945251 287.65344238]
[154.41641235 300.38342285]
[159.08271790 314.72482300]
[160.03503418 329.77621460]
[157.21350098 344.59140015]
[150.79547119 358.23910522]
[141.18440247 369.86141968]
[128.98443604 378.72775269]
[114.96250153 384.28076172]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 65]
[25 64]
[26 63]
[27 62]
[28 61]
[29 44]
[30 43]
[47 57]
[48 56]
[49 55]
[50 54]
[67 122]
[68 121]
[69 120]
[70 119]
[82 108]
[83 107]
[92 106]
[93 105]
[94 104]
[96 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
