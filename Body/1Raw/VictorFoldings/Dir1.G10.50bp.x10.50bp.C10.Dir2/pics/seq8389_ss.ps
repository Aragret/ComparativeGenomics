%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUAACCAUACGGGGGGGGGGACAACACUAAAGGACGAACCUGAUCUCUUAUACUAGUAUCCUUAAUCAUUxxxxxxxxxxUCCACAACCUUAACAAUGAACAAGAUAUUCGAAAAAUAGGAGGACUACUCCCCCCCCCCCAAAACCAUAC\
) } def
/len { sequence length } bind def

/coor [
[108.34872437 383.50482178]
[93.85903931 379.29635620]
[80.95280457 371.48025513]
[70.51000977 360.58941650]
[63.24264145 347.36639404]
[59.64621735 332.71279907]
[59.96593857 317.62768555]
[64.18000793 303.13964844]
[72.00110626 290.23641968]
[82.89597321 279.79782104]
[96.12178040 272.53558350]
[110.77677155 268.94479370]
[111.08882904 253.94804382]
[111.40088654 238.95129395]
[111.71294403 223.95454407]
[112.02500153 208.95779419]
[112.33705902 193.96102905]
[112.64910889 178.96427917]
[112.96116638 163.96752930]
[113.27322388 148.97077942]
[98.25082397 148.90655518]
[84.44974518 144.49916077]
[73.04738617 136.45675659]
[64.91617584 125.78172302]
[60.55875015 113.65547943]
[60.08317947 101.31259918]
[45.26541901 98.98149109]
[30.44766235 96.65039062]
[15.62990475 94.31928253]
[0.72800195 92.60659790]
[-14.23224640 91.51528168]
[-29.19249535 90.42397308]
[-44.16328812 89.48834229]
[-59.14300156 88.70850372]
[-68.06342316 101.29537964]
[-82.38127136 107.04019165]
[-97.52776337 104.10978699]
[-108.66971588 93.43924713]
[-112.25177002 78.43349457]
[-107.13089752 63.88082504]
[-94.94116974 54.42493057]
[-79.57226562 53.08316040]
[-65.92835236 60.28366089]
[-58.36315536 73.72879028]
[-43.38344193 74.50862885]
[-36.49560165 71.69734955]
[-28.10118484 75.46372223]
[-13.14093590 76.55503845]
[1.81931245 77.64634705]
[4.05125618 75.85030365]
[7.15174437 74.85987854]
[10.80640411 75.01908875]
[14.57926941 76.54766083]
[17.96100807 79.50152588]
[32.77876663 81.83263397]
[47.59652328 84.16373444]
[62.41428375 86.49484253]
[68.86985016 74.98021698]
[78.72637177 66.19898987]
[90.90701294 61.11050034]
[104.08106232 60.27066040]
[108.38864899 45.90247726]
[112.69623566 31.53429222]
[105.45769501 17.74149132]
[110.03088379 3.23147345]
[123.22481537 -3.58436584]
[127.53240204 -17.95254898]
[131.83998108 -32.32073593]
[136.14756775 -46.68891907]
[140.45515442 -61.05710220]
[127.46624756 -68.70901489]
[116.68649292 -79.24752808]
[108.74260712 -92.05995178]
[104.09643555 -106.40137482]
[103.01810455 -121.43801880]
[105.57030487 -136.29566956]
[111.60465240 -150.11051941]
[120.77032471 -162.07939148]
[132.53443909 -171.50643921]
[146.21302795 -177.84356689]
[161.01086426 -180.72236633]
[176.06761169 -179.97544861]
[190.50788879 -175.64625549]
[203.49215698 -167.98646545]
[214.26551819 -157.44142151]
[222.20162964 -144.62419128]
[226.83911133 -130.27995300]
[227.90832520 -115.24265289]
[225.34712219 -100.38655090]
[219.30439758 -86.57536316]
[210.13146973 -74.61205292]
[198.36164856 -65.19214630]
[184.67919922 -58.86330032]
[169.87962341 -55.99347687]
[154.82333374 -56.74951935]
[150.51574707 -42.38133240]
[146.20817566 -28.01314926]
[141.90058899 -13.64496517]
[137.59300232 0.72321880]
[144.86102295 13.67355919]
[140.69720459 28.30630493]
[127.06441498 35.84187698]
[122.75683594 50.21006012]
[118.44924927 64.57824707]
[138.48820496 76.03758240]
[150.72415161 98.82711792]
[165.70385742 98.04727173]
[180.68357849 97.26742554]
[195.66329956 96.48758698]
[207.42732239 85.57945251]
[223.26821899 88.11820984]
[231.03422546 102.15632629]
[224.76789856 116.92497253]
[209.27626038 121.09489441]
[196.44313049 111.46730042]
[181.46342468 112.24713898]
[166.48370361 113.02698517]
[151.50399780 113.80683136]
[148.25317383 128.45033264]
[161.49575806 135.49546814]
[174.73834229 142.54060364]
[187.98092651 149.58573914]
[203.68238831 146.29275513]
[215.95433044 156.62614441]
[215.38278198 172.65901184]
[202.40617371 182.09231567]
[186.97904968 177.68963623]
[180.93579102 162.82832336]
[167.69320679 155.78318787]
[154.45062256 148.73805237]
[141.20803833 141.69291687]
[128.26997375 149.28282166]
[127.95792389 164.27958679]
[127.64586639 179.27633667]
[127.33380890 194.27308655]
[127.02175140 209.26983643]
[126.70969391 224.26660156]
[126.39764404 239.26335144]
[126.08558655 254.26010132]
[125.77352905 269.25686646]
[140.26646423 273.45413208]
[153.17872620 281.26028442]
[163.62992859 292.14306641]
[170.90750122 305.36044312]
[174.51524353 320.01126099]
[174.20716858 335.09661865]
[170.00428772 349.58792114]
[162.19316101 362.49716187]
[151.30636597 372.94418335]
[138.08616638 380.21664429]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[26 57]
[27 56]
[28 55]
[29 54]
[30 49]
[31 48]
[32 47]
[33 45]
[34 44]
[61 104]
[62 103]
[63 102]
[66 99]
[67 98]
[68 97]
[69 96]
[70 95]
[106 118]
[107 117]
[108 116]
[109 115]
[119 131]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
