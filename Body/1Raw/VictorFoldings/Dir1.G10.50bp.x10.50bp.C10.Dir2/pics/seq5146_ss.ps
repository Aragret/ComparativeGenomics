%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAGCCUUCUGGGGGGGGGGCCUCACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAxxxxxxxxxxAACACUAUACCUAUUAUUCGGCGCAUGAGCUGGAGUCCUAGGCACAGCUCCCCCCCCCCCUAAGCCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 361.61325073]
[71.19830322 355.59722900]
[59.48964310 346.06781006]
[50.78712082 333.73214722]
[45.73651886 319.50561523]
[44.71262741 304.44393921]
[47.79142761 289.66476440]
[54.74444962 276.26483154]
[65.05573273 265.23852539]
[77.96011353 257.40399170]
[92.50000000 253.34268188]
[92.50000000 238.34268188]
[92.50000000 223.34268188]
[92.50000000 208.34268188]
[92.50000000 193.34268188]
[92.50000000 178.34268188]
[92.50000000 163.34268188]
[92.50000000 148.34268188]
[92.50000000 133.34268188]
[92.50000000 118.34268951]
[82.75234985 106.94166565]
[67.93459320 104.61056519]
[53.11683273 102.27945709]
[38.29907227 99.94835663]
[23.48131561 97.61724854]
[8.64011002 95.44041443]
[-6.22293663 93.41808319]
[-21.12483978 91.70539093]
[-36.05914688 90.30308533]
[-51.00723267 89.05621338]
[-65.96748352 87.96490479]
[-72.15187073 101.80430603]
[-82.69887543 112.69175720]
[-96.33489990 119.31252289]
[-111.41333008 120.86713409]
[-126.11336517 117.16784668]
[-138.65991211 108.66137695]
[-147.53790283 96.37492371]
[-151.67529297 81.79213715]
[-150.57246399 66.67395020]
[-144.36257935 52.84595871]
[-133.79553223 41.97797012]
[-120.14733124 35.38233948]
[-105.06606293 33.85552216]
[-90.37286377 37.58189011]
[-77.84201813 46.11146545]
[-68.98667908 58.41426086]
[-64.87617493 73.00465393]
[-49.91592407 74.09596252]
[-42.97108841 71.42858124]
[-34.65684509 75.36878204]
[-19.72253609 76.77108002]
[-15.49469662 74.42568207]
[-9.73954582 74.75666809]
[-4.20060253 78.55503082]
[10.66244411 80.57736969]
[17.76013374 78.34836578]
[25.81241989 82.79949188]
[40.63017654 85.13059998]
[55.44793701 87.46170044]
[70.26569366 89.79280853]
[85.08345032 92.12390900]
[98.02150726 84.53400421]
[103.21692657 70.46247864]
[90.07611847 63.16730499]
[78.20298767 53.95159912]
[67.87585449 43.03139496]
[59.33681107 30.66268158]
[52.78601456 17.13539314]
[48.37702942 2.76663280]
[46.21320724 -12.10677719]
[46.34527206 -27.13618088]
[48.77013016 -41.96926880]
[53.43093491 -56.25833130]
[60.21842957 -69.66841888]
[68.97351074 -81.88516235]
[79.49094391 -92.62220764]
[91.52419281 -101.62783813]
[104.79116821 -108.69097137]
[118.98087311 -113.64602661]
[133.76069641 -116.37684631]
[148.78416443 -116.81941986]
[163.69911194 -114.96337891]
[178.15589905 -110.85222626]
[191.81565857 -104.58232880]
[204.35815430 -96.30066681]
[215.48941040 -86.20137787]
[224.94847107 -74.52120209]
[232.51361084 -61.53393173]
[238.00749207 -47.54401398]
[241.30131531 -32.87939453]
[242.31788635 -17.88382721]
[241.03337097 -2.90883303]
[237.47787476 11.69455338]
[231.73475647 25.58400726]
[223.93862915 38.43394089]
[214.27224731 49.94313431]
[202.96220398 59.84179306]
[190.27362061 67.89788055]
[176.50395203 73.92254639]
[161.97596741 77.77456665]
[147.03022766 79.36364746]
[132.01707458 78.65253448]
[117.28844452 75.65789795]
[112.09302521 89.72941589]
[117.34269714 91.05675507]
[122.45044708 94.31202698]
[137.09394836 97.56285095]
[151.73745728 100.81367493]
[166.38095093 104.06450653]
[181.02445984 107.31533051]
[195.66795349 110.56615448]
[206.98852539 104.29728699]
[219.14974976 107.35071564]
[225.72991943 117.54918671]
[240.30261230 121.10395050]
[254.70364380 114.03358459]
[269.14825439 121.01447296]
[272.55578613 136.69146729]
[262.31225586 149.03852844]
[246.27565002 148.58404541]
[236.74784851 135.67665100]
[222.17515564 132.12188721]
[205.65667725 137.96482849]
[192.41712952 125.20965576]
[177.77363586 121.95883179]
[163.13012695 118.70800781]
[148.48663330 115.45717621]
[133.84312439 112.20635223]
[119.19962311 108.95552826]
[107.50000000 118.34268951]
[107.50000000 133.34268188]
[107.50000000 148.34268188]
[107.50000000 163.34268188]
[107.50000000 178.34268188]
[107.50000000 193.34268188]
[107.50000000 208.34268188]
[107.50000000 223.34268188]
[107.50000000 238.34268188]
[107.50000000 253.34268188]
[122.03988647 257.40399170]
[134.94427490 265.23852539]
[145.25555420 276.26483154]
[152.20857239 289.66476440]
[155.28736877 304.44393921]
[154.26348877 319.50561523]
[149.21287537 333.73214722]
[140.51036072 346.06781006]
[128.80169678 355.59722900]
[114.95575714 361.61325073]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 62]
[22 61]
[23 60]
[24 59]
[25 58]
[26 56]
[27 55]
[28 52]
[29 51]
[30 49]
[31 48]
[63 105]
[64 104]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 125]
[115 123]
[116 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
