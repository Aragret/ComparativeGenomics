%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACAACAAGGGGGGGGGGCCUAUUUAGCUGUUCCCCAACCUUUUCCUCCGACCCCCUAACAACCCCCCxxxxxxxxxxUCGCACGGACUACAACCACGACCAAUGAUAUGAAAAACCAUCGUUGUAUUCCCCCCCCCCUCAACUACAA\
) } def
/len { sequence length } bind def

/coor [
[77.45298004 369.07876587]
[64.23278046 361.80627441]
[53.34597778 351.35928345]
[45.53484726 338.45004272]
[41.33196640 323.95870972]
[41.02389145 308.87338257]
[44.63163376 294.22256470]
[51.90920639 281.00515747]
[62.36041260 270.12240601]
[75.27267456 262.31625366]
[89.76560974 258.11895752]
[89.45355988 243.12220764]
[89.14150238 228.12545776]
[88.82944489 213.12870789]
[88.51738739 198.13195801]
[88.20532990 183.13519287]
[87.89327240 168.13844299]
[87.58122253 153.14169312]
[87.26916504 138.14494324]
[74.17601013 130.82583618]
[61.23795319 138.41574097]
[58.80794907 153.86335754]
[46.98302460 164.09591675]
[31.34654999 164.28190613]
[19.28158379 154.33351135]
[16.48484039 138.94805908]
[24.27685165 125.39008331]
[38.97847366 120.06125641]
[53.64804459 125.47768402]
[66.58609772 117.88777161]
[61.81351089 111.06283569]
[58.49647141 103.01235199]
[43.51675797 103.79219818]
[28.53704453 104.57204437]
[15.08249474 113.94792175]
[0.35239446 106.73986053]
[-0.50019187 90.36288452]
[13.40180302 81.66423798]
[27.75720024 89.59232330]
[42.73691177 88.81248474]
[57.71662903 88.03263855]
[62.09973145 81.94671631]
[47.11777496 82.68221283]
[37.20151138 71.42753601]
[39.81791306 56.65748215]
[52.99682236 49.49393463]
[66.81449127 55.33106232]
[70.86593628 69.77487946]
[75.24903870 63.68896103]
[71.24130249 49.23427582]
[67.23355865 34.77958679]
[63.22582245 20.32489777]
[48.24703598 21.69448280]
[33.26443481 20.36728287]
[18.75964928 16.38595963]
[5.19894457 9.87849617]
[-6.98175716 1.05408168]
[-17.39089584 -9.80361557]
[-25.69386292 -22.34556580]
[-31.62375069 -36.16859818]
[-34.98993683 -50.82835770]
[-35.68421555 -65.85359955]
[-33.68426514 -80.76131439]
[-29.05437851 -95.07228088]
[-21.94338608 -108.32647705]
[-12.57987690 -120.09781647]
[-1.26484942 -130.00790405]
[11.63796520 -137.73817444]
[25.71379471 -143.04014587]
[40.51016235 -145.74334717]
[55.55141830 -145.76091003]
[70.35405731 -143.09226990]
[84.44223022 -137.82319641]
[97.36306763 -130.12307739]
[108.70120239 -120.23943329]
[118.09217834 -108.48999786]
[125.23410797 -95.25244904]
[129.89739990 -80.95232391]
[131.93215942 -66.04932404]
[131.27297974 -51.02250290]
[127.94103241 -36.35492325]
[122.04344940 -22.51807976]
[113.76979065 -9.95677280]
[103.38603973 0.92520469]
[91.22598267 9.77804184]
[77.68051147 16.31715775]
[81.68824768 30.77184486]
[85.69599152 45.22653198]
[89.70372772 59.68122101]
[116.44583130 67.11810303]
[129.48165894 87.76975250]
[144.29942322 85.43865204]
[159.11717224 83.10754395]
[173.93493652 80.77644348]
[178.09048462 77.40731812]
[182.66758728 76.14142609]
[186.77790833 76.77935028]
[189.74700928 78.79228210]
[204.68132019 77.38997650]
[219.61563110 75.98767090]
[234.54994202 74.58537292]
[237.62008667 59.78450394]
[244.91790771 46.54694366]
[255.79452515 36.04976273]
[269.28277588 29.22636604]
[284.18325806 26.68348122]
[299.17111206 28.64722252]
[312.91354370 34.94297791]
[324.18865967 45.01092529]
[331.99380493 57.95583725]
[335.63504028 72.62665558]
[334.78851318 87.71887207]
[329.52954102 101.89048004]
[320.32571411 113.88136292]
[307.99548340 122.62528992]
[293.63519287 127.34476471]
[278.52175903 127.62014008]
[263.99908447 123.42691040]
[251.35848999 115.13795471]
[241.72396851 103.49031067]
[235.95223999 89.51967621]
[221.01792908 90.92198181]
[206.08361816 92.32428741]
[191.14932251 93.72658539]
[176.26603699 95.59420013]
[161.44827271 97.92530823]
[146.63052368 100.25640869]
[131.81275940 102.58751678]
[128.77243042 117.94932556]
[118.35062408 130.86297607]
[102.26591492 137.83288574]
[102.57797241 152.82963562]
[102.89002991 167.82638550]
[103.20208740 182.82313538]
[103.51414490 197.81990051]
[103.82619476 212.81665039]
[104.13825226 227.81340027]
[104.45030975 242.81015015]
[104.76236725 257.80691528]
[119.41735840 261.39767456]
[132.64317322 268.65994263]
[143.53804016 279.09854126]
[151.35913086 292.00173950]
[155.57319641 306.48980713]
[155.89292908 321.57489014]
[152.29649353 336.22851562]
[145.02912903 349.45150757]
[134.58633423 360.34234619]
[121.68010712 368.15847778]
[107.19041443 372.36694336]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 30]
[21 29]
[32 41]
[33 40]
[34 39]
[49 89]
[50 88]
[51 87]
[52 86]
[91 128]
[92 127]
[93 126]
[94 125]
[98 124]
[99 123]
[100 122]
[101 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
