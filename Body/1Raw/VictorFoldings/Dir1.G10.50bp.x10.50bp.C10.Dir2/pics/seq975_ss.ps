%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCAUCCCCGUUCCAGGGGGGGGGGGUGAGUUCACCCUCUAAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCAxxxxxxxxxxCAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCCCCCCCCCCCGCAUCCCCCUUCCA\
) } def
/len { sequence length } bind def

/coor [
[126.96334839 628.87280273]
[114.13506317 621.01947021]
[102.91534424 611.00158691]
[93.66486359 599.14123535]
[86.68097687 585.81964111]
[82.18818665 571.46502686]
[80.33092499 556.53887939]
[81.16889191 541.52099609]
[84.67514801 526.89410400]
[90.73698425 513.12841797]
[99.15953827 500.66644287]
[109.67205811 489.90881348]
[121.93660736 481.20132446]
[135.55892944 474.82385254]
[150.10113525 470.98144531]
[148.91687012 456.02828979]
[147.73258972 441.07510376]
[146.54832458 426.12191772]
[145.36404419 411.16876221]
[144.17977905 396.21557617]
[142.99549866 381.26239014]
[141.81123352 366.30920410]
[140.62695312 351.35604858]
[139.44268799 336.40286255]
[138.25840759 321.44967651]
[134.87933350 306.83523560]
[129.37951660 292.87988281]
[123.87969971 278.92453003]
[118.37988281 264.96917725]
[114.08227539 279.34033203]
[103.26506805 289.73205566]
[88.73309326 293.44982910]
[74.25441742 289.52963257]
[63.58326721 278.98797607]
[59.48661804 264.55822754]
[63.02670288 249.98196411]
[73.28559875 239.03869629]
[87.60323334 234.56597900]
[102.26712799 237.72352600]
[113.47522736 247.69294739]
[110.82186890 232.92948914]
[108.16851807 218.16603088]
[105.51515961 203.40257263]
[102.86180878 188.63911438]
[90.33011627 183.95040894]
[81.69275665 173.59008789]
[79.29685211 160.20588684]
[83.87625122 147.28822327]
[94.33138275 138.25988770]
[91.97023010 123.44688416]
[89.60907745 108.63388062]
[81.85388947 95.79421997]
[69.84173584 86.81044769]
[53.82164001 87.66838074]
[43.27062988 75.58303070]
[46.28253555 59.82523727]
[60.54688644 52.48303604]
[75.12128448 59.18873215]
[78.82550812 74.79829407]
[90.83766174 83.78206635]
[97.57644653 80.48983765]
[90.99221039 67.01216125]
[104.46999359 60.42813110]
[111.05402374 73.90539551]
[117.79281616 70.61317444]
[118.08917236 55.61610031]
[110.62603760 41.66575623]
[118.61328125 29.09383392]
[118.90963745 14.09676170]
[108.23716736 2.75056505]
[108.75135803 -12.45437717]
[119.63399506 -22.55902100]
[119.93035126 -37.55609131]
[106.12526703 -43.98567963]
[96.13374329 -55.47869492]
[91.68687439 -70.04389954]
[93.55509949 -85.15779114]
[101.41474152 -98.20178986]
[113.90407562 -106.91593933]
[128.85923767 -109.79047394]
[143.68916321 -106.32736206]
[155.82447815 -97.12659454]
[163.16265869 -83.78227234]
[164.43232727 -68.60637665]
[159.41351318 -54.22822189]
[148.97573853 -43.13891220]
[134.92742920 -37.25973511]
[134.63105774 -22.26266289]
[145.10600281 -11.73597240]
[145.01908875 3.47741318]
[133.90670776 14.39311981]
[133.61035156 29.39019203]
[141.09468079 42.26784515]
[133.08624268 55.91245651]
[132.78988647 70.90953064]
[133.86488342 86.11132812]
[129.32958984 98.45248413]
[121.25311279 106.19831085]
[112.12995911 108.66440582]
[104.42208099 106.27272797]
[106.78323364 121.08573151]
[109.14438629 135.89872742]
[124.30764771 143.33596802]
[131.99151611 158.18927002]
[129.35383606 174.53506470]
[117.62526703 185.98574829]
[120.27861786 200.74920654]
[122.93197632 215.51266479]
[125.58532715 230.27613831]
[128.23867798 245.03959656]
[132.33525085 259.46936035]
[137.83505249 273.42471313]
[143.33486938 287.38006592]
[148.83468628 301.33541870]
[151.67465210 286.60671997]
[159.56176758 273.84768677]
[171.46707153 264.72277832]
[185.83744812 260.42248535]
[200.79812622 261.50778198]
[214.39738464 267.83709717]
[224.86108398 278.58471680]
[230.82412720 292.34851074]
[231.50860596 307.33288574]
[226.82521057 321.58300781]
[217.38493347 333.23980713]
[204.41935730 340.78259277]
[189.61991882 343.22729492]
[174.91734314 340.25503540]
[162.22970581 332.25354004]
[153.21159363 320.26541138]
[154.39585876 335.21859741]
[155.58013916 350.17175293]
[156.76440430 365.12493896]
[157.94868469 380.07812500]
[159.13294983 395.03131104]
[160.31723022 409.98446655]
[161.50149536 424.93765259]
[162.68577576 439.89083862]
[163.87004089 454.84399414]
[165.05432129 469.79718018]
[180.02006531 471.30258179]
[194.47644043 475.45623779]
[207.95874023 482.12463379]
[220.03356934 491.09338379]
[230.31275940 502.07418823]
[238.46588135 514.71405029]
[244.23085022 528.60668945]
[247.42233276 543.30541992]
[247.93775940 558.33789062]
[245.76054382 573.22076416]
[240.96067810 587.47558594]
[233.69245911 600.64422607]
[224.18952942 612.30328369]
[212.75737000 622.07806396]
[199.76347351 629.65423584]
[185.62553406 634.78833008]
[170.79804993 637.31524658]
[155.75764465 637.15380859]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 130]
[26 114]
[27 113]
[28 112]
[29 111]
[40 110]
[41 109]
[42 108]
[43 107]
[44 106]
[49 102]
[50 101]
[51 100]
[52 60]
[53 59]
[65 95]
[66 94]
[68 92]
[69 91]
[72 88]
[73 87]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
