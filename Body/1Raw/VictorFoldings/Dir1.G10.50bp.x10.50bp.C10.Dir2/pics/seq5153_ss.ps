%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUCUCCUCGGGGGGGGGGACUCUCUCAAUCUUAUCCAUCAUAGCAGGCAGUUGAGGUGGAUUAAACCAxxxxxxxxxxUCUACUAUUUUUUAACCAAAUCAACAACAACCUAUUUAGCUGUUCCCCAACCCCCCCCCCCCUUUUCCUC\
) } def
/len { sequence length } bind def

/coor [
[76.29500580 428.28335571]
[62.44906998 422.26733398]
[50.74040604 412.73791504]
[42.03788376 400.40225220]
[36.98728180 386.17572021]
[35.96339035 371.11404419]
[39.04218674 356.33486938]
[45.99520874 342.93493652]
[56.30649567 331.90859985]
[69.21087646 324.07409668]
[83.75076294 320.01278687]
[83.75076294 305.01278687]
[83.75076294 290.01278687]
[83.75076294 275.01278687]
[83.75076294 260.01278687]
[83.75076294 245.01278687]
[83.75076294 230.01278687]
[83.75076294 215.01278687]
[83.75076294 200.01278687]
[83.75076294 185.01278687]
[82.65945435 170.05255127]
[80.48261261 155.21133423]
[74.64666748 169.02951050]
[65.35900116 180.80827332]
[53.28311539 189.70619202]
[39.28167343 195.08760071]
[24.35491371 196.56808472]
[9.56916904 194.04187012]
[-4.01929903 187.68942261]
[-15.43976021 177.96455383]
[-23.87636185 165.56199646]
[-28.72641373 151.36773682]
[-29.64343452 136.39578247]
[-26.56191826 121.71572876]
[-19.70199966 108.37625122]
[-9.55373764 97.33031464]
[3.15790009 89.36700439]
[17.52482033 85.05521393]
[32.52068329 84.70294952]
[47.07421875 88.33539581]
[60.14575195 95.69304657]
[70.80148315 106.25028992]
[78.28018188 119.25294495]
[82.04694366 133.76666260]
[86.35453033 119.39848328]
[90.66211700 105.03029633]
[94.21688080 90.45759583]
[97.00920105 75.71978760]
[99.80152893 60.98198700]
[87.60401917 45.09275818]
[90.87048340 25.63646698]
[107.08324432 14.93520355]
[108.95085144 0.05192364]
[110.81846619 -14.83135605]
[112.68608093 -29.71463585]
[114.55369568 -44.59791565]
[105.13007355 -57.00086594]
[107.23611450 -72.06802368]
[119.11850739 -80.97557068]
[120.98612213 -95.85884857]
[122.85372925 -110.74212646]
[120.80905914 -119.71269989]
[124.91814423 -125.91439819]
[127.09497833 -140.75559998]
[129.27182007 -155.59681702]
[131.44865417 -170.43801880]
[133.62548828 -185.27922058]
[119.71311188 -191.10128784]
[107.68619537 -200.20097351]
[98.30078125 -212.00625610]
[92.14682770 -225.77505493]
[89.61118317 -240.64183044]
[90.85324097 -255.67207336]
[95.79492188 -269.92095947]
[104.12559509 -282.49276733]
[115.32157898 -292.59725952]
[128.67909241 -299.59924316]
[143.35845947 -303.05859375]
[158.43693542 -302.75778198]
[172.96665955 -298.71578979]
[186.03430176 -291.18667603]
[196.81838989 -280.64370728]
[204.64106750 -267.74966431]
[209.01055908 -253.31503296]
[209.65220642 -238.24720764]
[206.52568054 -223.49337769]
[199.82751465 -209.98095703]
[189.97875977 -198.55937195]
[177.59851074 -189.94656372]
[163.46501160 -184.68397522]
[148.46669006 -183.10238647]
[146.28985596 -168.26118469]
[144.11302185 -153.41996765]
[141.93618774 -138.57876587]
[139.75935364 -123.73756409]
[137.73701477 -108.87451935]
[135.86940002 -93.99123383]
[134.00178528 -79.10795593]
[143.31491089 -67.54071045]
[141.63290405 -52.42034149]
[129.43696594 -42.73030472]
[127.56935883 -27.84702301]
[125.70174408 -12.96374321]
[123.83413696 1.91953683]
[121.96652222 16.80281639]
[130.29933167 22.98535347]
[135.32310486 32.15656281]
[136.05810547 42.66904068]
[132.30207825 52.60186386]
[124.67960358 60.11158371]
[114.53932953 63.77431107]
[111.74700928 78.51211548]
[108.95468140 93.24992371]
[122.78003693 87.43102264]
[136.05015564 94.42417145]
[139.06564331 109.11794281]
[129.62243652 120.77236938]
[114.62274170 120.86902618]
[105.03029633 109.33788300]
[100.72271729 123.70606995]
[96.41513062 138.07424927]
[95.32382202 153.03450012]
[97.50065613 167.87570190]
[106.77021027 156.08268738]
[121.41461182 152.83590698]
[134.79980469 159.60618591]
[140.86215210 173.32653809]
[136.85536194 187.78149414]
[124.59455872 196.42282104]
[109.63398743 195.33590698]
[98.75076294 185.01278687]
[98.75076294 200.01278687]
[98.75076294 215.01278687]
[98.75076294 230.01278687]
[98.75076294 245.01278687]
[98.75076294 260.01278687]
[98.75076294 275.01278687]
[98.75076294 290.01278687]
[98.75076294 305.01278687]
[98.75076294 320.01278687]
[113.29064941 324.07409668]
[126.19503021 331.90859985]
[136.50631714 342.93493652]
[143.45933533 356.33486938]
[146.53813171 371.11404419]
[145.51423645 386.17572021]
[140.46363831 400.40225220]
[131.76112366 412.73791504]
[120.05245209 422.26733398]
[106.20652008 428.28335571]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 123]
[22 122]
[44 121]
[45 120]
[46 119]
[47 113]
[48 112]
[49 111]
[52 105]
[53 104]
[54 103]
[55 102]
[56 101]
[59 98]
[60 97]
[61 96]
[63 95]
[64 94]
[65 93]
[66 92]
[67 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
