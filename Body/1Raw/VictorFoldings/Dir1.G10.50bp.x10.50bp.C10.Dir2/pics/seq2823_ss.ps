%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUUAAUUUAGGGGGGGGGGUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCUxxxxxxxxxxGCUAAGGACUGCAAAACCCCACUCUGCAUCAACUGAACGCAAAUCAGCCACCCCCCCCCCCUUUAAUUAA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 385.53314209]
[71.19830322 379.51712036]
[59.48964310 369.98770142]
[50.78712082 357.65203857]
[45.73651886 343.42550659]
[44.71262741 328.36383057]
[47.79142761 313.58465576]
[54.74444962 300.18472290]
[65.05573273 289.15841675]
[77.96011353 281.32388306]
[92.50000000 277.26257324]
[92.50000000 262.26257324]
[92.50000000 247.26258850]
[92.50000000 232.26258850]
[92.50000000 217.26258850]
[92.50000000 202.26258850]
[92.50000000 187.26258850]
[92.50000000 172.26258850]
[92.50000000 157.26258850]
[92.50000000 142.26258850]
[92.50000000 127.26258087]
[76.02766418 114.99417877]
[72.20421600 94.81416321]
[83.04709625 77.37042999]
[77.56006622 63.41004181]
[72.07302856 49.44964981]
[66.58599854 35.48926163]
[61.09896851 21.52887154]
[48.84978867 11.51547337]
[51.39517593 -3.16002607]
[44.35004044 -16.40261269]
[35.83895111 -28.75418472]
[27.32785988 -41.10575867]
[18.81676865 -53.45732880]
[11.32060432 -58.79206085]
[10.26023674 -66.15557098]
[2.00794721 -78.68153381]
[-6.24434185 -91.20749664]
[-21.66797256 -85.53289795]
[-37.98742676 -83.66234589]
[-54.27897263 -85.69787598]
[-69.62136841 -91.52051544]
[-83.14794159 -100.79728699]
[-94.09558105 -113.00018311]
[-101.84774780 -127.43625641]
[-105.96921539 -143.28695679]
[-106.23051453 -159.65454102]
[-102.62066650 -175.61293030]
[-95.34764099 -190.26011658]
[-84.82633972 -202.76908875]
[-93.84387207 -214.75592041]
[-102.86140442 -226.74275208]
[-111.87892914 -238.72958374]
[-126.71078491 -235.27471924]
[-141.66435242 -238.15757751]
[-154.14881897 -246.87867737]
[-162.00120544 -259.92706299]
[-163.86102295 -275.04196167]
[-159.40605164 -289.60470581]
[-149.40814209 -301.09216309]
[-135.59948730 -307.51406860]
[-120.37251282 -307.75778198]
[-106.36540222 -301.78109741]
[-96.00496674 -290.61950684]
[-91.08621216 -276.20681763]
[-92.46133423 -261.04010010]
[-99.89209747 -247.74711609]
[-90.87457275 -235.76028442]
[-81.85704041 -223.77345276]
[-72.83950806 -211.78662109]
[-60.47280884 -217.57890320]
[-47.19964600 -220.81260681]
[-33.54373169 -221.35792542]
[-20.04430580 -219.19117737]
[-7.23485947 -214.39584351]
[4.37796021 -207.15930176]
[14.33438206 -197.76554871]
[22.23971939 -186.58399963]
[27.78000832 -174.05505371]
[30.73448753 -160.67266846]
[30.98437881 -146.96487427]
[28.51767921 -133.47305298]
[23.42970085 -120.73040771]
[15.91940784 -109.24101257]
[6.28162003 -99.45978546]
[14.53390884 -86.93382263]
[22.78619766 -74.40785980]
[31.16834068 -61.96841812]
[39.67943192 -49.61684799]
[48.19052124 -37.26527405]
[56.70161057 -24.91370201]
[57.32369614 -39.90079498]
[64.72789001 -52.94602203]
[77.27645874 -61.16389084]
[92.19377899 -62.73669052]
[106.18026733 -57.31652832]
[116.14224243 -46.10229874]
[119.87621307 -31.57448196]
[116.55625916 -16.94649887]
[106.91671753 -5.45392323]
[93.08977509 0.36119092]
[78.13381195 -0.78740460]
[65.35556793 -8.64705753]
[77.21227264 0.36780018]
[75.05935669 16.04183960]
[80.54639435 30.00222969]
[86.03342438 43.96261978]
[91.52045441 57.92300797]
[97.00748444 71.88339996]
[108.79450226 73.12705231]
[119.03622437 79.09257507]
[125.93308258 88.73175049]
[128.27322388 100.35087585]
[142.68544006 104.50876617]
[157.09765625 108.66664886]
[171.50987244 112.82453918]
[184.38635254 103.95152283]
[199.94879150 105.48269653]
[210.84909058 116.69507599]
[211.94044495 132.29452515]
[202.70758057 144.91546631]
[187.50993347 148.59866333]
[173.52340698 141.60504150]
[167.35198975 127.23675537]
[152.93977356 123.07886505]
[138.52755737 118.92098236]
[124.11534119 114.76309204]
[119.69290161 120.29009247]
[114.03628540 124.54548645]
[107.50000000 127.26258087]
[107.50000000 142.26258850]
[107.50000000 157.26258850]
[107.50000000 172.26258850]
[107.50000000 187.26258850]
[107.50000000 202.26258850]
[107.50000000 217.26258850]
[107.50000000 232.26258850]
[107.50000000 247.26258850]
[107.50000000 262.26257324]
[107.50000000 277.26257324]
[122.03988647 281.32388306]
[134.94427490 289.15841675]
[145.25555420 300.18472290]
[152.20857239 313.58465576]
[155.28736877 328.36383057]
[154.26348877 343.42550659]
[149.21287537 357.65203857]
[140.51036072 369.98770142]
[128.80169678 379.51712036]
[114.95575714 385.53314209]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 109]
[25 108]
[26 107]
[27 106]
[28 105]
[30 103]
[31 91]
[32 90]
[33 89]
[34 88]
[36 87]
[37 86]
[38 85]
[50 70]
[51 69]
[52 68]
[53 67]
[113 127]
[114 126]
[115 125]
[116 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
