%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAUACUCCUCAAUUAGGGGGGGGGGCCCACAUAGGAUGAAUAAUAGCAGUUCUACCGUACAACCCUAACAUAACCxxxxxxxxxxAAUUAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCACCCCCCCCCCUUGCAUACUCUUCAAUCA\
) } def
/len { sequence length } bind def

/coor [
[85.01558685 444.97000122]
[70.41930389 441.37213135]
[56.58922958 435.47930908]
[43.88360214 427.44418335]
[32.63152313 417.47488403]
[23.12444878 405.82965088]
[15.60863781 392.81008911]
[10.27876568 378.75347900]
[7.27288914 364.02389526]
[6.66886806 349.00286865]
[8.48234749 334.07946777]
[12.66635418 319.64028931]
[19.11251259 306.05929565]
[27.65385246 293.68829346]
[38.06912994 282.84771729]
[50.08856583 273.81835938]
[63.40082932 266.83410645]
[77.66110229 262.07583618]
[92.50000000 259.66687012]
[92.50000000 244.66687012]
[92.50000000 229.66687012]
[92.50000000 214.66687012]
[92.50000000 199.66687012]
[92.50000000 184.66687012]
[92.50000000 169.66687012]
[92.50000000 154.66687012]
[92.50000000 139.66687012]
[92.50000000 124.66687012]
[82.86531067 120.16169739]
[75.64975739 111.97756958]
[72.21788025 101.33152771]
[73.34861755 89.92710876]
[79.07160187 79.68203735]
[88.62657928 72.40582275]
[100.55836487 69.48156738]
[95.31038666 55.42956161]
[90.06241608 41.37755966]
[84.81444550 27.32555580]
[70.71334076 20.70766068]
[65.59133148 6.38217258]
[71.98738098 -7.02029467]
[66.73941040 -21.07229805]
[54.31098557 -22.81222534]
[43.87163162 -29.64614677]
[37.38095856 -40.21751022]
[36.02580261 -52.47542572]
[40.00361633 -64.07244873]
[48.49647522 -72.81410217]
[43.78078461 -87.05356598]
[39.06509399 -101.29302979]
[25.03418159 -113.18778229]
[29.20208168 -130.21585083]
[24.21936798 -144.36408997]
[19.23665619 -158.51231384]
[16.37004852 -143.78878784]
[9.16312504 -130.63354492]
[-1.70192552 -120.29184723]
[-15.19664574 -113.74261475]
[-30.04366302 -111.60576630]
[-44.83759308 -114.08358002]
[-58.17808914 -120.94151306]
[-68.80236816 -131.53041077]
[-75.70476532 -144.84794617]
[-78.23191833 -159.63352966]
[-76.14462280 -174.48759460]
[-69.64044189 -188.00408936]
[-59.33504486 -198.90357971]
[-46.20392609 -206.15434265]
[-31.49003410 -209.07005310]
[-16.58614731 -207.37472534]
[-2.90303087 -201.22880554]
[8.26410961 -191.21406555]
[15.85739613 -178.28056335]
[15.85739613 -193.28056335]
[15.85739613 -208.28056335]
[15.85739613 -223.28056335]
[1.80020869 -229.06535339]
[-8.96966457 -239.79281616]
[-14.80989552 -253.82705688]
[-14.82989120 -269.02798462]
[-9.02660370 -283.07754517]
[1.71500885 -293.83331299]
[15.75692844 -299.65505981]
[30.95786285 -299.65505981]
[44.99978256 -293.83331299]
[55.74139404 -283.07754517]
[61.54468155 -269.02798462]
[61.52468872 -253.82705688]
[55.68445587 -239.79281616]
[44.91458511 -229.06535339]
[30.85739517 -223.28056335]
[30.85739517 -208.28056335]
[30.85739517 -193.28056335]
[30.85739517 -178.28056335]
[33.38489151 -163.49502563]
[38.36760330 -149.34680176]
[43.35031509 -135.19856262]
[54.14080811 -129.67207336]
[58.39301300 -117.89121246]
[53.30455399 -106.00872040]
[58.02024841 -91.76925659]
[62.73593903 -77.52979279]
[79.76585388 -72.98448181]
[90.78056335 -59.02373123]
[91.24682617 -41.09033966]
[80.79141235 -26.32026863]
[86.03938293 -12.26826572]
[99.65502167 -6.33951998]
[105.17738342 7.83645058]
[98.86645508 22.07758522]
[104.11442566 36.12958908]
[109.36239624 50.18159103]
[114.61036682 64.23359680]
[127.13118744 72.49368286]
[142.11459351 71.78849792]
[157.09800720 71.08331299]
[161.88159180 56.67908478]
[171.54858398 44.97806549]
[184.79158020 37.56271744]
[199.81959534 35.43590927]
[214.60020447 38.88527298]
[227.13444519 47.44430923]
[235.72717285 59.95548248]
[239.21629333 74.72675323]
[237.12992859 89.76042938]
[229.75024414 103.02333832]
[218.07528687 112.72177124]
[203.68397522 117.54409790]
[188.52264404 116.83813477]
[174.64172363 110.69936371]
[163.91850281 99.95800018]
[157.80320740 86.06672668]
[142.81977844 86.77191162]
[127.83637238 87.47709656]
[129.47320557 97.54586792]
[127.68957520 107.26531982]
[122.90212250 115.54328918]
[115.85241699 121.52217865]
[107.50000000 124.66687012]
[107.50000000 139.66687012]
[107.50000000 154.66687012]
[107.50000000 169.66687012]
[107.50000000 184.66687012]
[107.50000000 199.66687012]
[107.50000000 214.66687012]
[107.50000000 229.66687012]
[107.50000000 244.66687012]
[107.50000000 259.66687012]
[122.33889771 262.07583618]
[136.59916687 266.83410645]
[149.91143799 273.81835938]
[161.93086243 282.84771729]
[172.34614563 293.68829346]
[180.88748169 306.05929565]
[187.33364868 319.64028931]
[191.51765442 334.07946777]
[193.33113098 349.00286865]
[192.72711182 364.02389526]
[189.72123718 378.75347900]
[184.39135742 392.81008911]
[176.87554932 405.82965088]
[167.36848450 417.47488403]
[156.11639404 427.44418335]
[143.41076660 435.47930908]
[129.58070374 441.37213135]
[114.98441315 444.97000122]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[19 148]
[20 147]
[21 146]
[22 145]
[23 144]
[24 143]
[25 142]
[26 141]
[27 140]
[28 139]
[35 113]
[36 112]
[37 111]
[38 110]
[41 107]
[42 106]
[48 102]
[49 101]
[50 100]
[52 97]
[53 96]
[54 95]
[73 94]
[74 93]
[75 92]
[76 91]
[114 134]
[115 133]
[116 132]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
