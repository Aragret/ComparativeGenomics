%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCAAGCCAAGGGGGGGGGGCCCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAxxxxxxxxxxAAUCGCCCACAUCACUCGAGACGUAAAUUAUGGCUGAAUCAUCCGCUACCCCCCCCCCCCUUCACGCCAA\
) } def
/len { sequence length } bind def

/coor [
[87.69378662 389.93316650]
[75.13555908 381.58200073]
[65.04933929 370.36956787]
[58.06914520 357.00064087]
[54.63376236 342.31564331]
[54.95913696 327.23770142]
[59.02482224 312.71456909]
[66.57524109 299.65924072]
[77.13577271 288.89233398]
[90.04256439 281.09069824]
[104.48429108 276.74475098]
[103.86031342 261.75772095]
[103.23634338 246.77072144]
[102.61236572 231.78370667]
[101.98838806 216.79669189]
[101.36441040 201.80967712]
[100.74043274 186.82266235]
[100.11645508 171.83563232]
[99.49247742 156.84861755]
[98.86849976 141.86160278]
[89.37511444 137.93351746]
[81.68693542 132.04640198]
[76.15255737 124.82894135]
[72.92753601 116.95376587]
[58.70075226 121.70758057]
[44.47397614 126.46139526]
[30.24719620 131.21520996]
[16.02041626 135.96902466]
[2.91397262 146.72344971]
[-11.04838181 137.10632324]
[-5.67226601 121.02733612]
[11.26660156 121.74224854]
[25.49338150 116.98843384]
[39.72016144 112.23461914]
[53.94693756 107.48080444]
[68.17372131 102.72698975]
[67.17663574 93.08630371]
[69.16931915 83.13020325]
[74.23516846 73.80139923]
[61.29711533 66.21148682]
[48.35905838 58.62157822]
[35.42100143 51.03166962]
[22.48294640 43.44176102]
[9.54488945 35.85185623]
[-3.15363955 38.34207535]
[-13.78993511 31.70218468]
[-16.92094231 19.97596931]
[-29.69829941 12.11854362]
[-45.57458496 14.42573547]
[-57.17808914 3.34700465]
[-55.60759354 -12.61899376]
[-42.06785202 -21.22451210]
[-26.94539452 -15.86813354]
[-21.84087372 -0.65881336]
[-9.06351662 7.19861221]
[8.45107460 6.70969963]
[17.13479805 22.91379929]
[30.07285500 30.50370598]
[43.01091003 38.09361649]
[55.94896698 45.68352509]
[68.88702393 53.27342987]
[81.82508087 60.86333847]
[96.32067108 57.00617981]
[103.77558136 43.98987198]
[111.23049164 30.97356224]
[118.68540192 17.95725250]
[106.81263733 8.74945259]
[96.33695221 -2.02116013]
[87.46225739 -14.14493370]
[80.36129761 -27.38587570]
[75.17230225 -41.48624420]
[71.99626923 -56.17157745]
[70.89503479 -71.15601349]
[71.89001465 -86.14788818]
[74.96186066 -100.85536194]
[80.05076599 -114.99216461]
[87.05767059 -128.28311157]
[95.84619904 -140.46949768]
[106.24526978 -151.31410217]
[118.05245972 -160.60585022]
[131.03794861 -168.16384888]
[144.94894409 -173.84098816]
[159.51470947 -177.52676392]
[174.45167542 -179.14944458]
[189.46910095 -178.67742920]
[204.27468872 -176.11990356]
[218.58021545 -171.52665710]
[232.10723877 -164.98709106]
[244.59243774 -156.62850952]
[255.79280090 -146.61361694]
[265.49029541 -135.13734436]
[273.49615479 -122.42309570]
[279.65454102 -108.71833801]
[283.84561157 -94.28985596]
[285.98776245 -79.41849518]
[286.03927612 -64.39373016]
[283.99917603 -49.50802994]
[279.90716553 -35.05114365]
[273.84289551 -21.30447769]
[265.92440796 -8.53561878]
[256.30584717 3.00688577]
[245.17443848 13.09835720]
[232.74685669 21.54236221]
[219.26499939 28.17453575]
[204.99130249 32.86577988]
[190.20361328 35.52478027]
[175.18975830 36.09977722]
[160.24201965 34.57957840]
[145.65133667 30.99377251]
[131.70172119 25.41216278]
[124.24680328 38.42847061]
[116.79189301 51.44478226]
[109.33698273 64.46109009]
[126.45633698 72.09127808]
[138.24754333 87.73402405]
[141.11192322 107.96771240]
[155.60751343 111.82486725]
[171.29092407 107.03292084]
[183.09637451 118.41551208]
[178.87944031 134.26321411]
[162.97813416 138.27325439]
[151.75035095 126.32046509]
[137.25476074 122.46330261]
[131.40495300 127.15688324]
[143.94795227 135.38325500]
[140.00003052 149.85440063]
[125.01717377 150.57133484]
[119.70532227 136.54405212]
[113.85551453 141.23762512]
[114.47949219 156.22463989]
[115.10346985 171.21165466]
[115.72744751 186.19868469]
[116.35142517 201.18569946]
[116.97540283 216.17271423]
[117.59938049 231.15972900]
[118.22335815 246.14674377]
[118.84733582 261.13375854]
[119.47131348 276.12078857]
[134.22431946 279.25122070]
[147.73495483 285.95297241]
[159.15393066 295.80474854]
[167.76344299 308.18728638]
[173.02229309 322.32220459]
[174.59989929 337.32092285]
[172.39709473 352.24066162]
[166.55235291 366.14352417]
[157.43305969 378.15557861]
[145.61248779 387.52172852]
[131.83367920 393.65322876]
[116.96278381 396.16464233]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[24 36]
[25 35]
[26 34]
[27 33]
[28 32]
[39 62]
[40 61]
[41 60]
[42 59]
[43 58]
[44 57]
[47 55]
[48 54]
[63 113]
[64 112]
[65 111]
[66 110]
[116 123]
[117 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
