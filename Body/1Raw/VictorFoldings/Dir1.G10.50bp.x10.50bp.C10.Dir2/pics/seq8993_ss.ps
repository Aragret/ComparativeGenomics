%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUAUUUAUUAGGGGGGGGGGCCUCAGAAGUUUUUUUCUUCGCAGGAUUUUUCUGAGCCUUUUACCACUCCxxxxxxxxxxACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCCCCCCCCCCCUAAUUAUUA\
) } def
/len { sequence length } bind def

/coor [
[84.95016479 421.48187256]
[70.92822266 415.92886353]
[58.72826767 407.06253052]
[49.11719513 395.44021606]
[42.69916916 381.79251099]
[39.87763214 366.97732544]
[40.82994843 351.92596436]
[45.49625397 337.58453369]
[53.58322144 324.85458374]
[64.58249664 314.53628540]
[77.80265045 307.27832031]
[92.41266632 303.53689575]
[92.41266632 288.53689575]
[92.41266632 273.53689575]
[92.41266632 258.53689575]
[92.41266632 243.53688049]
[92.41266632 228.53688049]
[92.41266632 213.53688049]
[92.41266632 198.53688049]
[92.41266632 183.53688049]
[92.41266632 168.53688049]
[92.41266632 153.53688049]
[82.19396210 142.55609131]
[67.23268127 141.47901917]
[52.27139664 140.40194702]
[37.31011581 139.32487488]
[22.34883690 138.24780273]
[7.38755608 137.17073059]
[-7.57372475 136.09365845]
[-12.66858578 150.30439758]
[-21.40946579 162.61291504]
[-33.14773560 172.10585022]
[-47.01233292 178.07873535]
[-61.97441483 180.08837891]
[-76.92369843 177.98562622]
[-90.75083923 171.92654419]
[-102.42978668 162.36071777]
[-111.09387207 149.99801636]
[-116.10015869 135.75584412]
[-117.07716370 120.69104767]
[-113.95237732 105.92154694]
[-106.95767975 92.54332733]
[-96.61212158 81.54914093]
[-83.68341827 73.75484467]
[-69.13095856 69.73880768]
[-54.03463364 69.79905701]
[-39.51469421 73.93112183]
[-26.64861679 81.82837677]
[-16.39114380 92.90478516]
[-9.50345325 106.33840942]
[-6.49665499 121.13238525]
[8.46462536 122.20945740]
[23.42590714 123.28652191]
[38.38718796 124.36359406]
[53.34846878 125.44066620]
[68.30974579 126.51773071]
[83.27102661 127.59480286]
[71.65840912 111.32383728]
[72.23812103 92.44892120]
[83.44287109 78.64608002]
[99.64994049 74.73113251]
[103.90278625 60.34665298]
[92.84212494 70.47885895]
[79.49226379 77.31854248]
[64.80734253 80.37685394]
[49.83692932 79.43521118]
[35.65097809 74.56091309]
[23.26338196 66.10234070]
[13.55950356 54.66403961]
[7.23289680 41.06352234]
[4.73573446 26.27284431]
[6.24649334 11.34911728]
[11.65719604 -2.64103270]
[20.58113098 -14.69770622]
[32.38048935 -23.95919228]
[46.21195221 -29.76355743]
[61.08695984 -31.69595337]
[75.94236755 -29.61826706]
[89.71644592 -23.67899704]
[101.42472076 -14.30263233]
[110.23039246 -2.15931582]
[115.50410461 11.88304710]
[116.86893463 26.82082748]
[114.22869110 41.58216095]
[124.10440063 30.29188156]
[133.98010254 19.00160217]
[133.10977173 3.44910192]
[143.28596497 -7.86016464]
[158.11827087 -8.59405518]
[167.99397278 -19.88433456]
[177.86967468 -31.17461586]
[178.23884583 -47.21342087]
[191.09536743 -56.80974579]
[206.57681274 -52.60210800]
[212.80715942 -37.81825256]
[205.00700378 -23.79908371]
[189.15995789 -21.29891014]
[179.28425598 -10.00862885]
[169.40855408 1.28165114]
[170.65492249 16.07969666]
[160.80038452 27.67032814]
[145.27038574 28.87730789]
[135.39468384 40.16758728]
[125.51897430 51.45787048]
[118.28726959 64.59950256]
[114.03442383 78.98397827]
[128.61434937 97.00675201]
[123.08669281 122.54631805]
[138.08590698 122.39231873]
[153.08511353 122.23831940]
[161.96636963 109.51421356]
[176.64146423 104.47229004]
[191.46754456 109.05127716]
[200.74366760 121.49045563]
[200.90296936 137.00671387]
[191.88420105 149.63372803]
[177.15527344 154.51615906]
[162.37974548 149.77661133]
[153.23910522 137.23753357]
[138.23989868 137.39152527]
[123.24069214 137.54551697]
[136.47756958 144.60137939]
[151.18942261 147.52735901]
[161.51066589 158.41183472]
[163.65156555 173.25827026]
[156.82601929 186.61535645]
[143.54022217 193.57867432]
[128.67245483 191.59141541]
[117.68181610 181.38328552]
[114.60404968 166.70062256]
[107.41266632 153.53688049]
[107.41266632 168.53688049]
[107.41266632 183.53688049]
[107.41266632 198.53688049]
[107.41266632 213.53688049]
[107.41266632 228.53688049]
[107.41266632 243.53688049]
[107.41266632 258.53689575]
[107.41266632 273.53689575]
[107.41266632 288.53689575]
[107.41266632 303.53689575]
[122.02268219 307.27832031]
[135.24284363 314.53628540]
[146.24211121 324.85458374]
[154.32908630 337.58453369]
[158.99539185 351.92596436]
[159.94770813 366.97732544]
[157.12615967 381.79251099]
[150.70814514 395.44021606]
[141.09706116 407.06253052]
[128.89710999 415.92886353]
[114.87516785 421.48187256]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 57]
[24 56]
[25 55]
[26 54]
[27 53]
[28 52]
[29 51]
[61 106]
[62 105]
[84 104]
[85 103]
[86 102]
[89 99]
[90 98]
[91 97]
[108 121]
[109 120]
[110 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
