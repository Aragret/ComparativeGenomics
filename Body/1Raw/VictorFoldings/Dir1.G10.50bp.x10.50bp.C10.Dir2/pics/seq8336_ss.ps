%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:29 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACCACCCAGGGGGGGGGGACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACAxxxxxxxxxxCCUAGAAGGAAUAAUACUAUCGCUGUUCAUUAUAGCUACUCUCAUAACCCCCCCCCCCCCUCAACACCCA\
) } def
/len { sequence length } bind def

/coor [
[84.63146973 450.42968750]
[72.74720001 441.15457153]
[63.42848969 429.30447388]
[57.21712494 415.56829834]
[54.47422409 400.74468994]
[55.35925293 385.69540405]
[59.82075882 371.29547119]
[67.59935760 358.38204956]
[78.24280548 347.70587158]
[91.13231659 339.88769531]
[105.51850891 335.38201904]
[104.58287811 320.41122437]
[103.64724731 305.44042969]
[102.71161652 290.46966553]
[101.77599335 275.49887085]
[100.84036255 260.52807617]
[99.90473175 245.55728149]
[98.96910858 230.58648682]
[98.03347778 215.61569214]
[97.09784698 200.64489746]
[86.31190491 193.52729797]
[81.54242706 181.30738831]
[84.74885559 168.38659668]
[94.97322845 159.55937195]
[94.34925079 144.57235718]
[93.72527313 129.58534241]
[93.10129547 114.59832764]
[87.03828430 100.87828064]
[76.37665558 90.32698822]
[65.71503448 79.77569580]
[52.62187576 72.45658875]
[38.04917526 68.90183258]
[23.47647095 65.34706879]
[8.90376854 61.79230499]
[0.96804875 74.67173004]
[-10.56054306 84.46697235]
[-24.55255127 90.21839142]
[-39.63718414 91.36253357]
[-54.33660126 87.78729248]
[-67.21070099 79.84294891]
[-76.99822235 68.30779266]
[-82.74026489 54.31193161]
[-83.87429810 39.22653580]
[-80.28920746 24.52952003]
[-72.33623505 11.66074276]
[-60.79452896 1.88095987]
[-46.79482269 -3.85170674]
[-31.70867157 -4.97562838]
[-17.01405907 -1.38069463]
[-4.15061378 6.58089972]
[5.62143326 18.12915802]
[11.34471798 32.13270187]
[12.45853043 47.21960068]
[27.03123283 50.77436447]
[41.60393524 54.32912445]
[56.17663956 57.88388824]
[45.61029053 47.23718643]
[37.62414551 34.53988266]
[32.60375214 20.40497398]
[30.79148102 5.51485395]
[32.27482605 -9.41162205]
[36.98217392 -23.65384293]
[44.68626785 -36.52423477]
[55.01517105 -47.40144730]
[67.47023773 -55.76035690]
[81.45015717 -61.19741821]
[96.28003693 -63.45014954]
[111.24391174 -62.40978622]
[125.61937714 -58.12656021]
[138.71241760 -50.80725479]
[149.89094543 -40.80522156]
[158.61528015 -28.60333633]
[164.46423340 -14.79067039]
[167.15544128 -0.03406526]
[166.55897522 14.95407104]
[162.70362854 29.45015144]
[155.77554321 42.75434113]
[146.10916138 54.22435760]
[134.17117310 63.30644989]
[120.53790283 69.56215668]
[105.86753082 72.68948364]
[90.86830139 72.53743744]
[76.26631927 69.11406708]
[86.92794800 79.66535950]
[97.58957672 90.21665192]
[102.87207031 83.86250305]
[112.70506287 81.18098450]
[126.09134674 74.41287231]
[131.11105347 59.66701126]
[144.78306580 52.99387360]
[158.81004333 57.87026978]
[172.19633484 51.10215759]
[185.58262634 44.33404160]
[198.96890259 37.56592560]
[212.35519409 30.79781151]
[225.59777832 23.75267792]
[238.69093323 16.43357086]
[241.44177246 1.03984320]
[253.47702026 -8.94449520]
[269.11398315 -8.80514526]
[280.96936035 1.39209723]
[283.44543457 16.83240509]
[275.37304688 30.22533798]
[260.56375122 35.24716187]
[246.01004028 29.52672577]
[232.91688538 36.84583282]
[230.76631165 41.17602158]
[225.83949280 44.16898727]
[219.12330627 44.18409729]
[205.73701477 50.95221329]
[192.35073853 57.72032547]
[178.96444702 64.48844147]
[165.57817078 71.25655365]
[161.18975830 85.44378662]
[147.71057129 92.49830627]
[132.85946655 87.79915619]
[119.47317505 94.56726837]
[134.18853760 97.47557831]
[140.34013367 111.15614319]
[132.75025940 124.09421539]
[117.80719757 125.40000153]
[108.08831024 113.97434998]
[108.71228790 128.96136475]
[109.33626556 143.94837952]
[109.96024323 158.93539429]
[123.03739929 170.50801086]
[123.71801758 187.62002563]
[112.06864166 199.70927429]
[113.00427246 214.68006897]
[113.93989563 229.65086365]
[114.87552643 244.62164307]
[115.81115723 259.59243774]
[116.74678040 274.56323242]
[117.68241119 289.53402710]
[118.61804199 304.50482178]
[119.55366516 319.47561646]
[120.48929596 334.44641113]
[135.32452393 337.12582397]
[149.08715820 343.27832031]
[160.97705078 352.54620361]
[170.30294800 364.39068604]
[176.52264404 378.12307739]
[179.27453613 392.94503784]
[178.39862061 407.99484253]
[173.94584656 422.39749146]
[166.17507935 435.31564331]
[155.53810120 445.99822998]
[142.65333557 453.82424927]
[128.26988220 458.33862305]
[113.22397614 459.27896118]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 137]
[12 136]
[13 135]
[14 134]
[15 133]
[16 132]
[17 131]
[18 130]
[19 129]
[20 128]
[24 125]
[25 124]
[26 123]
[27 122]
[28 85]
[29 84]
[30 83]
[31 56]
[32 55]
[33 54]
[34 53]
[87 117]
[88 116]
[91 113]
[92 112]
[93 111]
[94 110]
[95 109]
[96 106]
[97 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
