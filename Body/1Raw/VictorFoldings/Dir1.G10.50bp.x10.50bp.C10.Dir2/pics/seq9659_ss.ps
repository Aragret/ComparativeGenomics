%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUGCCAUACUAGUCUUGGGGGGGGGGUGCCGCCUGCGAAGCAGCGGUGGGCCUAGCCCUACUAGUCUCAAUCUCCAxxxxxxxxxxACUCAGACCCAAACAUUAAUCAGUUCUUCAAAUAUCUACUCAUCUUCCUACCCCCCCCCCAUUACCAUACUAAUCUU\
) } def
/len { sequence length } bind def

/coor [
[52.17072296 463.75436401]
[37.61909485 459.96514893]
[23.91722679 453.77105713]
[11.45935249 445.35028076]
[0.60390812 434.94512939]
[-8.33677387 422.85494995]
[-15.10545254 409.42761230]
[-19.50737762 395.04946899]
[-21.41590118 380.13421631]
[-20.77610588 365.11093140]
[-17.60640335 350.41192627]
[-11.99799061 336.46008301]
[-4.11223459 323.65686035]
[5.82397747 312.37057495]
[17.52475929 302.92602539]
[30.65345764 295.59490967]
[44.83233261 290.58816528]
[59.65343094 288.04983521]
[59.65343094 273.04983521]
[59.65343094 258.04983521]
[59.65343094 243.04985046]
[59.65343094 228.04985046]
[59.65343094 213.04985046]
[59.65343094 198.04985046]
[59.65343094 183.04985046]
[59.65343094 168.04985046]
[59.65343094 153.04985046]
[59.65343094 138.04985046]
[48.50625992 128.01287842]
[33.58843231 129.58081055]
[18.67060280 131.14874268]
[3.75277448 132.71665955]
[-11.16505432 134.28459167]
[-19.41640472 138.30996704]
[-26.38143539 135.73757935]
[-41.32641220 137.02120972]
[-56.27138519 138.30482483]
[-71.53500366 145.68441772]
[-82.85158539 133.06019592]
[-73.85345459 118.69113159]
[-57.55501175 123.35985565]
[-42.61003494 122.07623291]
[-27.66506004 120.79260254]
[-12.73298073 119.36676025]
[2.18484735 117.79883575]
[17.10267639 116.23091125]
[32.02050400 114.66297913]
[46.93833160 113.09505463]
[49.77709961 98.36612701]
[36.51060867 91.36611938]
[23.24411392 84.36610413]
[9.97761917 77.36609650]
[-6.85265970 75.32207489]
[-9.54760265 58.58368301]
[5.79060841 51.36041641]
[16.97762871 64.09960175]
[30.24412346 71.09960938]
[43.51061630 78.09962463]
[56.77711105 85.09963226]
[64.77964783 73.94121552]
[75.35246277 66.10903931]
[87.27450562 62.07908630]
[99.28563690 61.91417694]
[110.21775055 65.28668213]
[117.34374237 52.08742523]
[124.46972656 38.88817215]
[112.07575989 30.41424942]
[100.63547516 20.69120789]
[90.27420807 9.82557774]
[81.10549164 -2.06359124]
[73.22978210 -14.84603405]
[66.73336029 -28.38170052]
[61.68741608 -42.52228546]
[58.14723206 -57.11285782]
[56.15159607 -71.99355316]
[55.72237015 -87.00133514]
[56.86426163 -101.97176361]
[59.56475830 -116.74082184]
[63.79427338 -131.14668274]
[69.50646210 -145.03152466]
[76.63874054 -158.24319458]
[85.11296082 -170.63694763]
[94.83628082 -182.07701111]
[105.70216370 -192.43800354]
[117.59155273 -201.60643005]
[130.37419128 -209.48184204]
[143.91001892 -215.97792053]
[158.05072021 -221.02352905]
[172.64137268 -224.56335449]
[187.52212524 -226.55863953]
[202.52990723 -226.98748779]
[217.50032043 -225.84523010]
[232.26930237 -223.14437866]
[246.67506409 -218.91452026]
[260.55975342 -213.20199585]
[273.77127075 -206.06939697]
[286.16482544 -197.59486389]
[297.60464478 -187.87127686]
[307.96536255 -177.00514221]
[317.13351440 -165.11552429]
[325.00860596 -152.33270264]
[331.50436401 -138.79672241]
[336.54962158 -124.65589142]
[340.08908081 -110.06514740]
[342.08401489 -95.18434906]
[342.51251221 -80.17655182]
[341.36987305 -65.20617676]
[338.66867065 -50.43724823]
[334.43844604 -36.03158951]
[328.72558594 -22.14703369]
[321.59268188 -8.93570614]
[313.11785889 3.45764136]
[303.39398193 14.89722061]
[292.52758789 25.25769234]
[280.63775635 34.42554474]
[267.85473633 42.30032349]
[254.31860352 48.79575729]
[240.17764282 53.84067154]
[225.58682251 57.37979126]
[210.70597839 59.37434387]
[195.69816589 59.80247498]
[180.72781372 58.65949249]
[165.95895386 55.95792007]
[151.55339050 51.72735977]
[137.66897583 46.01415634]
[130.54299927 59.21341324]
[123.41700745 72.41266632]
[131.37847900 80.13267517]
[136.79357910 90.13731384]
[139.01359558 101.58654022]
[137.66673279 113.45926666]
[132.70722961 124.64436340]
[124.43489075 134.04460144]
[113.48149109 140.68360901]
[100.76424408 143.80581665]
[87.40958405 142.95880127]
[74.65343475 138.04985046]
[74.65343475 153.04985046]
[74.65343475 168.04985046]
[74.65343475 183.04985046]
[74.65343475 198.04985046]
[74.65343475 213.04985046]
[74.65343475 228.04985046]
[74.65343475 243.04985046]
[74.65343475 258.04983521]
[74.65343475 273.04983521]
[74.65343475 288.04983521]
[89.47453308 290.58816528]
[103.65340424 295.59490967]
[116.78210449 302.92602539]
[128.48287964 312.37057495]
[138.41909790 323.65686035]
[146.30485535 336.46008301]
[151.91326904 350.41192627]
[155.08297729 365.11093140]
[155.72276306 380.13421631]
[153.81423950 395.04946899]
[149.41232300 409.42761230]
[142.64363098 422.85494995]
[133.70295715 434.94512939]
[122.84751129 445.35028076]
[110.38963318 453.77105713]
[96.68776703 459.96514893]
[82.13613892 463.75436401]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[18 147]
[19 146]
[20 145]
[21 144]
[22 143]
[23 142]
[24 141]
[25 140]
[26 139]
[27 138]
[28 137]
[29 48]
[30 47]
[31 46]
[32 45]
[33 44]
[35 43]
[36 42]
[37 41]
[49 59]
[50 58]
[51 57]
[52 56]
[64 127]
[65 126]
[66 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
