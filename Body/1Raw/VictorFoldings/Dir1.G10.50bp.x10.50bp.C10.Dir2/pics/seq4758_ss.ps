%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUGCUAGGGGGGGGGGGCUUUUAUUCCAGUUCUAACCAAAAAAAUAAACCCUCGUUCCACAGAAGCUxxxxxxxxxxUAGUAACCACGUUCUCCUGAUCAAAUAUCACUCUCCUACUUACAGGACUCCCCCCCCCCCAACAUACUAG\
) } def
/len { sequence length } bind def

/coor [
[84.06465149 393.89447021]
[71.19137573 385.99157715]
[61.06708145 374.78106689]
[54.51249695 361.17172241]
[52.05897522 346.26681519]
[53.90541458 331.27456665]
[59.90212631 317.41036987]
[69.56298828 305.79809570]
[82.10483551 297.37915039]
[96.51095581 292.83599854]
[96.19889832 277.83923340]
[95.88684082 262.84249878]
[95.57479095 247.84573364]
[95.26273346 232.84898376]
[94.95067596 217.85221863]
[94.63861847 202.85546875]
[94.32656097 187.85871887]
[94.01450348 172.86196899]
[93.70245361 157.86520386]
[93.39039612 142.86845398]
[77.06079865 136.81283569]
[64.42955780 124.82206726]
[57.53314972 108.82938385]
[42.54045105 109.29742432]
[27.54775620 109.76546478]
[12.55506039 110.23351288]
[-2.43763542 110.70155334]
[-17.43033218 111.16959381]
[-21.87738609 125.64379120]
[-30.78527069 137.88832092]
[-43.18772125 146.57496643]
[-57.73941422 150.76148987]
[-72.86189270 149.99375916]
[-86.91477966 144.35504150]
[-98.37372589 134.45700073]
[-105.99575043 121.37328339]
[-108.95407104 106.52313232]
[-106.92778778 91.51736450]
[-100.13671112 77.98371124]
[-89.31746674 67.39018250]
[-75.64366150 60.88589859]
[-60.59851837 59.17638779]
[-45.81402588 62.44709015]
[-32.89389420 70.34322357]
[-23.23960114 82.00827026]
[-17.89837456 96.17689514]
[-2.90567756 95.70885468]
[12.08701801 95.24081421]
[27.07971382 94.77277374]
[42.07241058 94.30473328]
[57.06510544 93.83668518]
[59.66819000 84.03952789]
[64.47417450 75.11412048]
[71.22055054 67.54795837]
[79.53884888 61.75431061]
[88.97471619 58.04961777]
[87.72784424 43.10152817]
[86.48097229 28.15344238]
[81.87540436 13.87798214]
[74.15132141 1.01958001]
[59.55465317 -6.45499897]
[58.99984360 -22.84475899]
[73.05763245 -31.28931999]
[87.26657104 -23.10164070]
[87.00971985 -6.70450497]
[94.73381042 6.15389729]
[94.78888702 -8.84600163]
[98.65325928 -23.33967781]
[106.07329559 -36.37590027]
[116.56201172 -47.09908676]
[129.43103027 -54.80546951]
[143.83573914 -58.98927307]
[158.83076477 -59.37590790]
[173.43194580 -55.94000244]
[186.68099976 -48.90705490]
[197.70840454 -38.73864365]
[205.79039001 -26.10212898]
[210.39654541 -11.82685852]
[211.22456360 3.15027022]
[208.22009277 17.84629631]
[201.58033752 31.29670715]
[191.74104309 42.61874390]
[179.34800720 51.06932449]
[165.21455383 56.09383774]
[150.26831055 57.36251831]
[135.49017334 54.79209900]
[121.85008240 48.55128479]
[110.24322510 39.04965973]
[101.42905426 26.90656853]
[102.67593384 41.85465622]
[103.92280579 56.80274200]
[116.64178467 59.94450760]
[127.84249115 66.74060822]
[136.50308228 76.57103729]
[141.83341980 88.53892517]
[156.76773071 87.13662720]
[171.70204163 85.73432159]
[186.63635254 84.33201599]
[201.57064819 82.92971802]
[203.92985535 68.03391266]
[209.92013550 54.19312286]
[219.16493225 42.27739716]
[231.08311462 33.03576279]
[244.92549133 27.04915810]
[259.82192993 24.69390678]
[274.83599854 26.11806107]
[289.02392578 31.23209763]
[301.49386597 39.71454239]
[311.46188354 51.03218460]
[318.30145264 64.47358704]
[321.58258057 79.19380951]
[321.09906006 94.26752472]
[316.88122559 108.74719238]
[309.19424438 121.72261047]
[298.52136230 132.37812805]
[285.53341675 140.04393005]
[271.04690552 144.23812866]
[255.97241211 144.69708252]
[241.25755310 141.39195251]
[227.82733154 134.53048706]
[216.52595520 124.54401398]
[208.06385803 112.06027222]
[202.97296143 97.86402130]
[188.03865051 99.26632690]
[173.10433960 100.66863251]
[158.17002869 102.07093048]
[143.23573303 103.47323608]
[137.80914307 121.25701141]
[125.43502045 135.13476562]
[108.38714600 142.55639648]
[108.69920349 157.55316162]
[109.01126099 172.54991150]
[109.32331848 187.54666138]
[109.63537598 202.54341125]
[109.94742584 217.54017639]
[110.25948334 232.53692627]
[110.57154083 247.53367615]
[110.88359833 262.53042603]
[111.19565582 277.52719116]
[111.50771332 292.52392578]
[126.09034729 296.46389771]
[138.97155762 304.35385132]
[149.10711670 315.55416870]
[155.67535400 329.15692139]
[158.14385986 344.05935669]
[156.31248474 359.05346680]
[150.32969666 372.92367554]
[140.68051147 384.54562378]
[128.14712524 392.97717285]
[113.74557495 397.53482056]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 51]
[24 50]
[25 49]
[26 48]
[27 47]
[28 46]
[56 91]
[57 90]
[58 89]
[59 66]
[60 65]
[95 127]
[96 126]
[97 125]
[98 124]
[99 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
