%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:45 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUCUACCCUAGCGGGGGGGGGGAUCACACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUxxxxxxxxxxCUUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACACCCCCCCCCCAUUAUACCCUAGC\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 424.22418213]
[70.75619507 419.41476440]
[57.85220718 411.64938354]
[46.91955185 401.29122925]
[38.46956635 388.82479858]
[32.89747238 374.83316040]
[30.46388245 359.97073364]
[31.28262329 344.93267822]
[35.31539917 330.42230225]
[42.37359238 317.11831665]
[52.12707901 305.64297485]
[64.11966705 296.53298950]
[77.79044342 290.21444702]
[92.50000000 286.98287964]
[92.50000000 271.98287964]
[92.50000000 256.98287964]
[92.50000000 241.98287964]
[92.50000000 226.98287964]
[92.50000000 211.98287964]
[92.50000000 196.98287964]
[92.50000000 181.98287964]
[92.50000000 166.98287964]
[92.50000000 151.98287964]
[78.16321564 147.76634216]
[65.59430695 139.68270874]
[55.81085205 128.38641357]
[49.60489273 114.79197693]
[47.47887039 100.00000000]
[49.60489273 85.20802307]
[55.81085205 71.61358643]
[65.59430695 60.31728745]
[78.16321564 52.23365021]
[92.50000000 48.01712418]
[92.50000000 33.01712418]
[92.50000000 18.01712608]
[83.84325409 30.26705742]
[70.78537750 37.64890671]
[55.82582092 38.74968719]
[41.82806778 33.35868835]
[31.47148323 22.50782776]
[26.73847198 8.27411366]
[28.53499603 -6.61791420]
[36.51717758 -19.31770897]
[49.15710831 -27.39434624]
[64.03533173 -29.30184364]
[78.30393219 -24.67507744]
[89.23170471 -14.39967823]
[94.72695160 -0.44220757]
[98.29426575 -15.01184273]
[101.86157990 -29.58147812]
[105.42889404 -44.15111542]
[108.99620819 -58.72074890]
[94.82061768 -63.66012192]
[81.17873383 -69.92461395]
[68.19411469 -77.45750427]
[55.98434830 -86.19055939]
[44.66000748 -96.04470062]
[34.32365036 -106.93067932]
[25.06888771 -118.74990082]
[16.97953606 -131.39533997]
[10.12885189 -144.75247192]
[4.57888031 -158.70031738]
[0.37988320 -173.11257935]
[-2.43011212 -187.85871887]
[-3.82565737 -202.80520630]
[-3.79411387 -217.81665039]
[-2.33576703 -232.75714111]
[0.53617549 -247.49133301]
[4.79570436 -261.88583374]
[10.40424442 -275.81021118]
[17.31100082 -289.13845825]
[25.45342636 -301.74978638]
[34.75777817 -313.52999878]
[45.13979340 -324.37243652]
[56.50544739 -334.17889404]
[68.75180817 -342.86056519]
[81.76797485 -350.33883667]
[95.43605804 -356.54592896]
[109.63227844 -361.42568970]
[124.22807312 -364.93389893]
[139.09126282 -367.03878784]
[154.08721924 -367.72128296]
[169.08015442 -366.97521973]
[183.93428040 -364.80734253]
[198.51507568 -361.23730469]
[212.69049072 -356.29742432]
[226.33213806 -350.03240967]
[239.31648254 -342.49905396]
[251.52593994 -333.76556396]
[262.84991455 -323.91101074]
[273.18588257 -313.02465820]
[282.44021606 -301.20507812]
[290.52911377 -288.55935669]
[297.37930298 -275.20196533]
[302.92877197 -261.25390625]
[307.12722778 -246.84150696]
[309.93670654 -232.09526062]
[311.33169556 -217.14874268]
[311.29959106 -202.13728333]
[309.84069824 -187.19685364]
[306.96823120 -172.46275330]
[302.70819092 -158.06843567]
[297.09912109 -144.14422607]
[290.19189453 -130.81625366]
[282.04901123 -118.20522308]
[272.74423218 -106.42533875]
[262.36181641 -95.58327484]
[250.99580383 -85.77722931]
[238.74911499 -77.09600830]
[225.73268127 -69.61823273]
[212.06437683 -63.41161728]
[197.86796570 -58.53238297]
[183.27204895 -55.02471161]
[168.40878296 -52.92036819]
[153.41279602 -52.23841476]
[138.41989136 -52.98502350]
[123.56584167 -55.15343475]
[119.99852753 -40.58380127]
[116.43121338 -26.01416588]
[112.86389923 -11.44453049]
[109.29659271 3.12510538]
[107.50000000 18.01712608]
[107.50000000 33.01712418]
[107.50000000 48.01712418]
[121.83678436 52.23365021]
[134.40568542 60.31728745]
[144.18914795 71.61358643]
[150.39511108 85.20802307]
[152.52113342 100.00000000]
[150.39511108 114.79197693]
[144.18914795 128.38641357]
[134.40568542 139.68270874]
[121.83678436 147.76634216]
[107.50000000 151.98287964]
[107.50000000 166.98287964]
[107.50000000 181.98287964]
[107.50000000 196.98287964]
[107.50000000 211.98287964]
[107.50000000 226.98287964]
[107.50000000 241.98287964]
[107.50000000 256.98287964]
[107.50000000 271.98287964]
[107.50000000 286.98287964]
[122.20955658 290.21444702]
[135.88034058 296.53298950]
[147.87292480 305.64297485]
[157.62640381 317.11831665]
[164.68460083 330.42230225]
[168.71737671 344.93267822]
[169.53611755 359.97073364]
[167.10252380 374.83316040]
[161.53042603 388.82479858]
[153.08044434 401.29122925]
[142.14779663 411.64938354]
[129.24380493 419.41476440]
[114.97203827 424.22418213]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[33 124]
[34 123]
[35 122]
[48 121]
[49 120]
[50 119]
[51 118]
[52 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
