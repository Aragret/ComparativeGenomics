%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUCUUCAGGGGGGGGGGCCAAAGAGCCCCUAAAACCCGCCACAUCUACCAUCACCCUCUACAUCACCxxxxxxxxxxAUAACAAGCUCCAUCUGCCUACGACAAACAGACCUAAAAUCGCUCAUUGCCCCCCCCCCCAUACUCUUCA\
) } def
/len { sequence length } bind def

/coor [
[83.46720886 367.94857788]
[70.24700928 360.67611694]
[59.36021042 350.22909546]
[51.54907990 337.31985474]
[47.34619904 322.82855225]
[47.03812408 307.74319458]
[50.64586639 293.09237671]
[57.92343903 279.87500000]
[68.37464905 268.99221802]
[81.28691101 261.18606567]
[95.77984619 256.98880005]
[95.46778870 241.99203491]
[95.15573120 226.99528503]
[94.84367371 211.99853516]
[94.53162384 197.00178528]
[94.21956635 182.00502014]
[93.90750885 167.00827026]
[93.59545135 152.01152039]
[93.28339386 137.01477051]
[92.97133636 122.01801300]
[92.65928650 107.02125549]
[89.33838654 99.61479187]
[92.50000000 91.71001434]
[92.50000000 76.71001434]
[84.76270294 62.90983963]
[92.50000000 50.18256760]
[92.50000000 35.18256760]
[92.50000000 20.18256950]
[92.50000000 5.18256903]
[77.52785492 4.18048668]
[62.65607834 2.18060946]
[47.95109177 -0.80813092]
[33.47856522 -4.77238607]
[19.30314445 -9.69445038]
[5.48813915 -15.55233955]
[-7.90475035 -22.31989288]
[-20.81570816 -29.96688271]
[-33.18706894 -38.45915604]
[-44.96357727 -47.75878525]
[-56.09263992 -57.82423019]
[-66.52455139 -68.61054230]
[-76.21271515 -80.06954956]
[-85.11386108 -92.15006256]
[-93.18824005 -104.79813385]
[-100.39978790 -117.95726776]
[-106.71629333 -131.56869507]
[-112.10954285 -145.57162476]
[-116.55545807 -159.90351868]
[-120.03417206 -174.50036621]
[-122.53015137 -189.29696655]
[-124.03225708 -204.22723389]
[-124.53376770 -219.22448730]
[-124.03244019 -234.22175598]
[-122.53053284 -249.15203857]
[-120.03473663 -263.94866943]
[-116.55620575 -278.54556274]
[-112.11047363 -292.87750244]
[-106.71739197 -306.88049316]
[-100.40106201 -320.49200439]
[-93.18968201 -333.65124512]
[-85.11546326 -346.29940796]
[-76.21446228 -358.38003540]
[-66.52644348 -369.83917236]
[-56.09466934 -380.62561035]
[-44.96573257 -390.69119263]
[-33.18933868 -399.99096680]
[-20.81808662 -408.48339844]
[-7.90722561 -416.13055420]
[5.48557901 -422.89828491]
[19.30051231 -428.75634766]
[33.47587204 -433.67858887]
[47.94834518 -437.64300537]
[62.65329742 -440.63192749]
[77.52504730 -442.63201904]
[92.49717712 -443.63427734]
[107.50282288 -443.63427734]
[122.47495270 -442.63201904]
[137.34671021 -440.63192749]
[152.05165100 -437.64300537]
[166.52412415 -433.67858887]
[180.69949341 -428.75634766]
[194.51441956 -422.89828491]
[207.90722656 -416.13055420]
[220.81808472 -408.48339844]
[233.18934631 -399.99096680]
[244.96572876 -390.69119263]
[256.09466553 -380.62561035]
[266.52642822 -369.83917236]
[276.21447754 -358.38003540]
[285.11544800 -346.29940796]
[293.18966675 -333.65124512]
[300.40106201 -320.49200439]
[306.71740723 -306.88049316]
[312.11047363 -292.87750244]
[316.55621338 -278.54556274]
[320.03472900 -263.94866943]
[322.53051758 -249.15203857]
[324.03244019 -234.22175598]
[324.53375244 -219.22448730]
[324.03225708 -204.22723389]
[322.53015137 -189.29696655]
[320.03417969 -174.50036621]
[316.55545044 -159.90351868]
[312.10955811 -145.57162476]
[306.71627808 -131.56869507]
[300.39978027 -117.95726776]
[293.18823242 -104.79813385]
[285.11386108 -92.15006256]
[276.21270752 -80.06954956]
[266.52453613 -68.61054230]
[256.09265137 -57.82423019]
[244.96357727 -47.75878525]
[233.18707275 -38.45915604]
[220.81570435 -29.96688271]
[207.90475464 -22.31989288]
[194.51185608 -15.55233955]
[180.69685364 -9.69445038]
[166.52143860 -4.77238607]
[152.04890442 -0.80813092]
[137.34391785 2.18060946]
[122.47214508 4.18048668]
[107.50000000 5.18256903]
[107.50000000 20.18256950]
[107.50000000 35.18256760]
[107.50000000 50.18256760]
[115.23729706 62.90983963]
[107.50000000 76.71001434]
[107.50000000 91.71001434]
[107.65603638 106.70919800]
[107.96809387 121.70595551]
[108.28015137 136.70271301]
[108.59220886 151.69946289]
[108.90425873 166.69621277]
[109.21631622 181.69296265]
[109.52837372 196.68972778]
[109.84043121 211.68647766]
[110.15248871 226.68322754]
[110.46454620 241.67997742]
[110.77659607 256.67672729]
[125.43159485 260.26751709]
[138.65739441 267.52975464]
[149.55226135 277.96835327]
[157.37336731 290.87158203]
[161.58743286 305.35964966]
[161.90715027 320.44473267]
[158.31072998 335.09832764]
[151.04336548 348.32135010]
[140.60057068 359.21218872]
[127.69433594 367.02828979]
[113.20464325 371.23675537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 128]
[24 127]
[26 125]
[27 124]
[28 123]
[29 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
