%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCUAAGAACAGGGGGGGGGGGCUAAAAGAGCACACCCGUCUAUGUAGCAAAAUAGUGGGAAGAUUUAUAGGxxxxxxxxxxGCCUUCCCCCGUAAAUGAUAUCAUCUCAACUUAGUAUUAUACCCACACCCCCCCCCCCCCACCCAAGAACAG\
) } def
/len { sequence length } bind def

/coor [
[86.61856079 397.44720459]
[74.29232788 388.78628540]
[64.20276642 377.59930420]
[56.85596848 364.44741821]
[52.62043762 349.99029541]
[51.70862961 334.95312500]
[54.16628265 320.09017944]
[59.87012100 306.14694214]
[68.53404236 293.82281494]
[79.72346497 283.73596191]
[92.87713623 276.39233398]
[107.33527374 272.16030884]
[106.42375946 257.18801880]
[105.51224518 242.21575928]
[104.60073090 227.24346924]
[103.68921661 212.27119446]
[102.77770233 197.29891968]
[101.86618805 182.32662964]
[100.95468140 167.35435486]
[100.04316711 152.38208008]
[99.13165283 137.40980530]
[98.22013855 122.43751526]
[98.75315094 137.42803955]
[90.77108002 150.12791443]
[77.03231049 156.14839172]
[62.28458023 153.40896606]
[51.62429810 142.85632324]
[48.73536301 128.13714600]
[54.61611557 114.33798981]
[67.23432159 106.22745514]
[82.22982025 106.60843658]
[67.24907684 105.84870148]
[52.26139832 105.24081421]
[37.26832962 104.78485107]
[22.27526093 104.32888031]
[12.88401413 116.68137360]
[-1.98394823 121.12246704]
[-16.61159134 115.94447327]
[-25.37428856 103.13842773]
[-24.90260315 87.62852478]
[-15.37790871 75.37863159]
[-0.46264315 71.09909058]
[14.10796833 76.43546295]
[22.73122787 89.33581543]
[37.72429657 89.79177856]
[52.71736526 90.24774933]
[59.53882599 87.29016876]
[68.00881195 90.86795044]
[82.98956299 91.62769318]
[69.61911011 84.82833862]
[64.25968170 70.81846619]
[69.67835236 56.83140182]
[83.07745361 50.08869553]
[97.53900146 54.07162094]
[105.59646606 66.72378540]
[103.08870697 81.51461792]
[111.40645599 69.03202820]
[119.72420502 56.54943466]
[128.04194641 44.06684494]
[136.35969543 31.58425331]
[143.50595093 18.39595795]
[149.42127991 4.61158991]
[155.33662415 -9.17277718]
[159.38993835 -23.61475182]
[161.51098633 -38.46403503]
[163.63201904 -53.31331635]
[165.75306702 -68.16259766]
[167.87411499 -83.01187897]
[169.99514771 -97.86116028]
[171.20991516 -112.81188965]
[171.51393127 -127.80881500]
[171.81793213 -142.80572510]
[158.38185120 -150.13583374]
[149.90090942 -162.87680054]
[148.32397461 -178.10086060]
[154.01339722 -192.30961609]
[165.66180420 -202.23802185]
[180.59246826 -205.60459900]
[195.37443542 -201.63571167]
[206.61091614 -191.24340820]
[211.71986389 -176.81575012]
[209.52725220 -161.66810608]
[200.53694153 -149.28129578]
[186.81484985 -142.50172424]
[186.51084900 -127.50480652]
[186.20683289 -112.50788879]
[197.99356079 -121.78545380]
[212.90927124 -120.19747925]
[222.47848511 -108.64627838]
[221.26374817 -93.69554901]
[209.95529175 -83.84066010]
[194.97886658 -84.68140411]
[184.84443665 -95.74011993]
[182.72338867 -80.89083862]
[180.60234070 -66.04155731]
[178.48130798 -51.19227219]
[176.36026001 -36.34299088]
[174.23921204 -21.49370956]
[186.72180176 -13.17596149]
[199.60966492 -20.85079956]
[212.49752808 -28.52563858]
[223.01271057 -41.82478333]
[238.70300293 -35.40210342]
[236.87483215 -18.54701233]
[220.17236328 -15.63778305]
[207.28450012 -7.96294355]
[194.39665222 -0.28810480]
[188.40478516 1.58949375]
[182.61370850 2.06883550]
[177.31320190 1.28569341]
[172.75064087 -0.56849921]
[169.12098694 -3.25743937]
[163.20565796 10.52692795]
[157.29031372 24.31129456]
[170.73318481 17.65627098]
[185.65539551 19.18184280]
[197.47348022 28.41941833]
[202.55741882 42.53160095]
[199.34561157 57.18371201]
[188.82461548 67.87522888]
[174.22602844 71.32216644]
[160.03395081 66.46577454]
[150.60757446 54.79771805]
[148.84228516 39.90200043]
[140.52453613 52.38459396]
[132.20680237 64.86717987]
[123.88904572 77.34977722]
[115.57129669 89.83236694]
[121.38754272 104.81089020]
[113.19241333 121.52600861]
[114.10392761 136.49829102]
[115.01544189 151.47056580]
[115.92695618 166.44284058]
[116.83847046 181.41511536]
[117.74998474 196.38740540]
[118.66149902 211.35968018]
[119.57301331 226.33195496]
[120.48451996 241.30424500]
[121.39603424 256.27651978]
[122.30754852 271.24880981]
[137.17230225 273.69564819]
[151.11967468 279.38934326]
[163.45010376 288.04431152]
[173.54508972 299.22637939]
[180.89825439 312.37472534]
[185.14079285 326.82977295]
[186.05989075 341.86651611]
[183.60943604 356.73065186]
[177.91235352 370.67666626]
[169.25440979 383.00497437]
[158.06988525 393.09725952]
[144.91976929 400.44723511]
[130.46368408 404.68627930]
[115.42674255 405.60171509]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[31 49]
[32 48]
[33 46]
[34 45]
[35 44]
[56 128]
[57 127]
[58 126]
[59 125]
[60 124]
[61 114]
[62 113]
[63 112]
[64 98]
[65 97]
[66 96]
[67 95]
[68 94]
[69 93]
[70 86]
[71 85]
[72 84]
[99 107]
[100 106]
[101 105]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
