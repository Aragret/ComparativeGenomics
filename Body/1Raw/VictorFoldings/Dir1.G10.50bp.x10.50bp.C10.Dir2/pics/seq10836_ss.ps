%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCCACUAGGGGGGGGGGCUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUUAGGUCUCCAxxxxxxxxxxACAGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCCCCCCCCCCCACCCUACUA\
) } def
/len { sequence length } bind def

/coor [
[55.30268478 379.14385986]
[44.08725357 369.07855225]
[35.49585342 356.69772339]
[29.99180984 342.66909790]
[27.87195015 327.74923706]
[29.25059319 312.74267578]
[34.05339432 298.45880127]
[42.02133942 285.66784668]
[52.72473145 275.05963135]
[65.58634949 267.20623779]
[79.91258240 262.53121948]
[78.66570282 247.58312988]
[77.41883087 232.63505554]
[76.17195892 217.68696594]
[74.92507935 202.73887634]
[73.67820740 187.79078674]
[72.43133545 172.84269714]
[71.18445587 157.89462280]
[69.93758392 142.94653320]
[57.16022491 135.08909607]
[43.25767136 140.72105408]
[29.35511398 146.35301208]
[15.45255756 151.98497009]
[1.55000162 157.61692810]
[-12.35255432 163.24888611]
[-18.28275299 177.89840698]
[-32.86719894 183.98687744]
[-47.45319748 177.90213013]
[-53.38713455 163.25411987]
[-47.14851379 148.73327637]
[-32.43859100 142.95452881]
[-17.98451042 149.34632874]
[-4.08195496 143.71437073]
[9.82060051 138.08241272]
[23.72315788 132.45045471]
[37.62571335 126.81850433]
[51.52827072 121.18654633]
[52.07392502 113.70642090]
[37.11367416 112.61511230]
[22.54835510 116.20000458]
[14.63814831 103.45525360]
[24.31488037 91.99398041]
[38.20498657 97.65486145]
[53.16523361 98.74617004]
[53.71089172 91.26605225]
[40.77283478 83.67613983]
[27.83477783 76.08623505]
[12.60611820 80.31275177]
[-1.10945237 72.46044922]
[-5.17472935 57.18795395]
[2.82214427 43.55617142]
[18.13676453 39.65259171]
[31.68324089 47.79314041]
[35.42468643 63.14817810]
[48.36274338 70.73808289]
[61.30080032 78.32799530]
[79.00747681 66.96651459]
[97.56229401 66.16308594]
[111.76622772 73.81208801]
[121.27458954 62.21075058]
[130.78294373 50.60940933]
[136.26997375 36.64901733]
[137.20561218 21.67822647]
[138.14123535 6.70743561]
[139.07685852 -8.26335621]
[127.27208710 -21.13132477]
[128.37203979 -38.22150421]
[141.21377563 -49.03574371]
[141.83775330 -64.02275848]
[128.03337097 -70.38731384]
[117.71906281 -81.55348969]
[112.46768951 -95.81853485]
[113.08004761 -111.00713348]
[119.46275330 -124.80313110]
[130.64248657 -135.10273743]
[144.91442871 -140.33534241]
[160.10220337 -139.70300293]
[173.88980103 -133.30215454]
[184.17468262 -122.10887909]
[189.38851929 -107.83006287]
[188.73620605 -92.64313507]
[182.31721497 -78.86397552]
[171.11042786 -68.59381866]
[156.82476807 -63.39878082]
[156.20079041 -48.41176605]
[166.18934631 -40.21264648]
[169.66413879 -27.56352997]
[165.13336182 -15.04554176]
[154.04765320 -7.32772779]
[153.11203003 7.64306402]
[152.17639160 22.61385536]
[151.24076843 37.58464813]
[160.03741455 25.43479156]
[170.99736023 15.19371033]
[183.71514893 7.24024343]
[197.72035217 1.86860681]
[212.49485779 -0.72249109]
[227.49214172 -0.43719971]
[242.15742493 2.71392751]
[255.94819641 8.61432362]
[268.35430908 17.04571915]
[278.91683960 27.69621849]
[287.24502563 40.17183685]
[293.03082275 54.01107407]
[296.06021118 68.70198822]
[296.22109985 83.70112610]
[293.50753784 98.45363617]
[288.01989746 112.41379547]
[279.96121216 125.06518555]
[269.62957764 135.93980408]
[257.40719604 144.63536072]
[243.74615479 150.83021545]
[229.15184021 154.29518127]
[214.16412354 154.90209961]
[199.33743286 152.62850952]
[185.22023010 147.55851746]
[172.33476257 139.87968445]
[161.15766907 129.87605286]
[152.10243225 117.91767120]
[145.50402832 104.44692993]
[141.60652161 89.96212769]
[140.55410767 74.99909210]
[142.38429260 60.11776733]
[132.87593079 71.71910858]
[123.36756897 83.32044983]
[133.06019592 107.60938263]
[118.71015930 134.37771606]
[84.88567352 141.69966125]
[86.13254547 156.64773560]
[87.37941742 171.59582520]
[88.62629700 186.54391479]
[89.87316895 201.49200439]
[91.12004089 216.44009399]
[92.36692047 231.38816833]
[93.61379242 246.33625793]
[94.86066437 261.28436279]
[109.76345062 263.52127075]
[123.74842834 269.13528442]
[136.06141663 277.82360840]
[146.03839111 289.11770630]
[153.14129639 302.40850830]
[156.98709106 316.97924805]
[157.36836243 332.04415894]
[154.26457214 346.79080200]
[147.84307861 360.42388916]
[138.45021057 372.20822144]
[126.59249878 381.50830078]
[112.90941620 387.82257080]
[98.13887024 390.81048584]
[83.07742310 390.31094360]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 129]
[19 128]
[20 37]
[21 36]
[22 35]
[23 34]
[24 33]
[25 32]
[45 56]
[46 55]
[47 54]
[59 125]
[60 124]
[61 123]
[62 92]
[63 91]
[64 90]
[65 89]
[68 85]
[69 84]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
