%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUACUAGUAUGGGGGGGGGGCCUUAAUCAUUUUUAUUGCCACAACUAACCUCCUCGGACUCCUGCCUCACxxxxxxxxxxUCAUAACCCUCAACACCCACUCCCUCUUAGCCAAUAUUGUGCCUAUUGCCCCCCCCCCCCAUACUAGUCU\
) } def
/len { sequence length } bind def

/coor [
[73.60156250 439.05477905]
[61.04333878 430.70361328]
[50.95711899 419.49114990]
[43.97692490 406.12225342]
[40.54154205 391.43725586]
[40.86691666 376.35931396]
[44.93260193 361.83618164]
[52.48302078 348.78085327]
[63.04354858 338.01394653]
[75.95034790 330.21231079]
[90.39207458 325.86636353]
[89.76809692 310.87933350]
[89.14411926 295.89233398]
[88.52014160 280.90530396]
[87.89616394 265.91830444]
[87.27218628 250.93127441]
[86.64820862 235.94425964]
[86.02423096 220.95724487]
[85.40025330 205.97023010]
[84.77627563 190.98321533]
[84.15229797 175.99620056]
[81.75744629 173.32559204]
[80.57118225 169.33880615]
[81.20841980 164.63281250]
[83.98652649 160.06097412]
[84.29858398 145.06422424]
[84.61064148 130.06747437]
[73.10883331 120.43894196]
[58.40087128 123.38442230]
[51.05644608 137.18998718]
[36.53697205 142.99678040]
[21.69810295 138.06301880]
[13.54629707 124.71828461]
[15.93058872 109.26354218]
[27.72518921 98.99604797]
[43.36104584 98.76380157]
[55.45539093 108.67646027]
[70.16335297 105.73097992]
[78.25118256 84.06057739]
[97.27209473 76.61190796]
[100.37041473 61.93538666]
[103.46873474 47.25886154]
[106.56706238 32.58233643]
[109.66538239 17.90580940]
[95.29563904 13.57171822]
[81.34522247 8.03459263]
[67.91464996 1.33432710]
[55.10068893 -6.48080158]
[42.99566650 -15.35448456]
[31.68680000 -25.22278595]
[21.25557137 -36.01460266]
[11.77713871 -47.65217972]
[3.31979680 -60.05166245]
[-4.05551863 -73.12371826]
[-10.29566765 -86.77414703]
[-15.35568810 -100.90461731]
[-19.19912338 -115.41329956]
[-21.79827881 -130.19566345]
[-23.13442993 -145.14518738]
[-23.19794655 -160.15419006]
[-21.98837471 -175.11448669]
[-19.51442528 -189.91831970]
[-15.79392624 -204.45901489]
[-10.85368443 -218.63180542]
[-4.72929287 -232.33456421]
[2.53511930 -245.46856689]
[10.88721180 -257.93917847]
[20.26680565 -269.65658569]
[30.60632133 -280.53628540]
[41.83126068 -290.49993896]
[53.86074448 -299.47576904]
[66.60810089 -307.39907837]
[79.98148346 -314.21276855]
[93.88453674 -319.86776733]
[108.21707916 -324.32333374]
[122.87585449 -327.54733276]
[137.75523376 -329.51657104]
[152.74801636 -330.21685791]
[167.74617004 -329.64312744]
[182.64163208 -327.79949951]
[197.32708740 -324.69927979]
[211.69671631 -320.36483765]
[225.64698792 -314.82733154]
[239.07739258 -308.12673950]
[251.89114380 -300.31127930]
[263.99594116 -291.43728638]
[275.30456543 -281.56869507]
[285.73550415 -270.77661133]
[295.21362305 -259.13876343]
[303.67065430 -246.73907471]
[311.04562378 -233.66682434]
[317.28543091 -220.01623535]
[322.34509277 -205.88563538]
[326.18814087 -191.37686157]
[328.78692627 -176.59442139]
[330.12268066 -161.64486694]
[330.18582153 -146.63586426]
[328.97586060 -131.67559814]
[326.50152588 -116.87182617]
[322.78063965 -102.33123016]
[317.84005737 -88.15856934]
[311.71530151 -74.45597076]
[304.45056152 -61.32214737]
[296.09814453 -48.85174179]
[286.71823120 -37.13460159]
[276.37844849 -26.25515175]
[265.15322876 -16.29177856]
[253.12351990 -7.31627035]
[240.37596130 0.60670412]
[227.00241089 7.42005777]
[213.09921265 13.07469940]
[198.76655579 17.52988625]
[184.10769653 20.75351906]
[169.22827148 22.72237015]
[154.23547363 23.42225456]
[139.23731995 22.84812927]
[124.34190369 21.00413132]
[121.24358368 35.68065643]
[118.14526367 50.35718155]
[115.04694366 65.03370667]
[111.94862366 79.71023560]
[123.42562866 90.56179047]
[125.96888733 107.25899506]
[117.18444061 122.95316315]
[99.60739136 130.37953186]
[99.29533386 145.37628174]
[98.98327637 160.37303162]
[99.13931274 175.37222290]
[99.76329041 190.35923767]
[100.38726807 205.34625244]
[101.01124573 220.33326721]
[101.63522339 235.32028198]
[102.25920105 250.30729675]
[102.88317871 265.29431152]
[103.50715637 280.28134155]
[104.13113403 295.26834106]
[104.75511169 310.25537109]
[105.37908936 325.24237061]
[120.13209534 328.37283325]
[133.64273071 335.07458496]
[145.06170654 344.92636108]
[153.67121887 357.30889893]
[158.93006897 371.44378662]
[160.50767517 386.44253540]
[158.30487061 401.36227417]
[152.46012878 415.26513672]
[143.34085083 427.27719116]
[131.52027893 436.64334106]
[117.74146271 442.77484131]
[102.87055969 445.28625488]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[25 127]
[26 126]
[27 125]
[28 38]
[29 37]
[40 121]
[41 120]
[42 119]
[43 118]
[44 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
