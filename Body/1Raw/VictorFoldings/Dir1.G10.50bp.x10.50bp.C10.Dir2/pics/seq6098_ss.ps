%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACCCACAAGGGGGGGGGGACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUCxxxxxxxxxxAUCGGUUUCAUCCUCGCCUUAGCAUGAUUUAUCCUACACUCCAACUCAUGCCCCCCCCCCAGACCCACAA\
) } def
/len { sequence length } bind def

/coor [
[115.17218018 362.59188843]
[101.32624054 356.57586670]
[89.61757660 347.04644775]
[80.91505432 334.71075439]
[75.86444855 320.48425293]
[74.84056091 305.42257690]
[77.91935730 290.64340210]
[84.87238312 277.24346924]
[95.18366241 266.21713257]
[108.08804321 258.38262939]
[122.62792969 254.32131958]
[122.62792969 239.32131958]
[122.62792969 224.32131958]
[122.62792969 209.32131958]
[122.62792969 194.32131958]
[122.62792969 179.32131958]
[122.62792969 164.32131958]
[122.62792969 149.32131958]
[122.62792969 134.32131958]
[122.62792969 119.32131958]
[110.88798523 126.20548248]
[97.93671417 126.92118835]
[86.67790985 121.88732910]
[79.37767792 112.75037384]
[64.80496979 116.30513763]
[50.23226929 119.85990143]
[35.65956497 123.41466522]
[21.08686256 126.96942139]
[6.51416016 130.52418518]
[-3.01363182 143.43157959]
[-19.05024529 143.88606262]
[-29.29376411 131.53900146]
[-25.88623619 115.86200714]
[-11.44162560 108.88111877]
[2.95939827 115.95148468]
[17.53210068 112.39672089]
[32.10480499 108.84195709]
[46.67750549 105.28720093]
[61.25020981 101.73243713]
[75.82291412 98.17767334]
[78.83292389 86.05551910]
[87.76329041 76.55164337]
[100.72482300 72.45850372]
[114.57395172 75.33049774]
[125.67398071 84.96060181]
[124.42710876 70.01251221]
[123.18022919 55.06442642]
[121.93335724 40.11634064]
[111.14114380 50.53401947]
[96.14131927 50.46167374]
[85.45008850 39.94037628]
[85.13745117 24.94363594]
[95.38090515 13.98591042]
[110.36468506 13.28849602]
[121.58237457 23.24873352]
[122.20635223 8.26171780]
[122.83032990 -6.72529840]
[108.09407806 -9.68999004]
[94.00307465 -14.92355537]
[80.90432739 -22.29711342]
[69.12040710 -31.62908173]
[58.94149780 -42.68965530]
[50.61826324 -55.20645523]
[44.35567474 -68.87124634]
[40.30795288 -83.34751892]
[38.57477570 -98.27877808]
[39.19882584 -113.29733276]
[42.16473389 -128.03334045]
[47.39945984 -142.12391663]
[54.77409744 -155.22204590]
[64.10704041 -167.00520325]
[75.16845703 -177.18319702]
[87.68594360 -185.50540161]
[101.35124969 -191.76686096]
[115.82785034 -195.81338501]
[130.75926208 -197.54533386]
[145.77775574 -196.92004395]
[160.51351929 -193.95292664]
[174.60365295 -188.71702576]
[187.70118713 -181.34130859]
[199.48356628 -172.00740051]
[209.66065979 -160.94514465]
[217.98182678 -148.42697144]
[224.24215698 -134.76115417]
[228.28749084 -120.28421021]
[230.01820374 -105.35266113]
[229.39167786 -90.33420563]
[226.42333984 -75.59868622]
[221.18627930 -61.50898361]
[213.80947876 -48.41206360]
[204.47459412 -36.63045120]
[193.41149902 -26.45428085]
[180.89263916 -18.13414574]
[167.22630310 -11.87494087]
[152.74903870 -7.83080196]
[137.81733704 -6.10132074]
[137.19335938 8.88569546]
[136.56938171 23.87271118]
[136.88143921 38.86946487]
[138.12831116 53.81755066]
[139.37519836 68.76564026]
[140.62207031 83.71372223]
[150.94927979 94.59255219]
[165.81231689 96.61488342]
[180.67536926 98.63722229]
[195.53840637 100.65955353]
[210.40145874 102.68189240]
[225.11878967 96.87580109]
[236.68670654 106.25837708]
[251.54974365 108.28071594]
[259.92269897 95.51918793]
[273.00790405 87.66169739]
[288.20730591 86.26835632]
[302.50302124 91.61580658]
[313.05664062 102.64231110]
[317.77273560 117.15854645]
[315.71493530 132.28230286]
[307.29177856 145.01075745]
[294.17575073 152.81666565]
[278.97097778 154.15014648]
[264.69644165 148.74642944]
[254.18630981 137.67845154]
[249.52742004 123.14376068]
[234.66436768 121.12142944]
[221.01013184 127.07216644]
[208.37911987 117.54493713]
[193.51608276 115.52259827]
[178.65303040 113.50026703]
[163.78997803 111.47793579]
[148.92694092 109.45559692]
[137.62792969 119.32131958]
[137.62792969 134.32131958]
[137.62792969 149.32131958]
[137.62792969 164.32131958]
[137.62792969 179.32131958]
[137.62792969 194.32131958]
[137.62792969 209.32131958]
[137.62792969 224.32131958]
[137.62792969 239.32131958]
[137.62792969 254.32131958]
[152.16781616 258.38262939]
[165.07220459 266.21713257]
[175.38348389 277.24346924]
[182.33650208 290.64340210]
[185.41531372 305.42257690]
[184.39141846 320.48425293]
[179.34082031 334.71075439]
[170.63829041 347.04644775]
[158.92962646 356.57586670]
[145.08369446 362.59188843]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 40]
[25 39]
[26 38]
[27 37]
[28 36]
[29 35]
[45 102]
[46 101]
[47 100]
[48 99]
[55 98]
[56 97]
[57 96]
[103 130]
[104 129]
[105 128]
[106 127]
[107 126]
[109 124]
[110 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
