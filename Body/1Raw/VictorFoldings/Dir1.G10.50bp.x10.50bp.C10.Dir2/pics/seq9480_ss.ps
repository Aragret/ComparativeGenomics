%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:38 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAUCCCUCUUGGGGGGGGGGAUUAAUCAUCAUCCUAGCCCUAAGUCUGGCCUAUGAGUGACUACAAAAAGxxxxxxxxxxAGCCGGAAGCCUAUUCGCAGGAUUUCUCAUUACUAACAACAUUUCCCCCGCCCCCCCCCCCAUCCCCCUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 362.99453735]
[71.19830322 356.97848511]
[59.48964310 347.44906616]
[50.78712082 335.11340332]
[45.73651886 320.88690186]
[44.71262741 305.82519531]
[47.79142761 291.04605103]
[54.74444962 277.64611816]
[65.05573273 266.61978149]
[77.96011353 258.78527832]
[92.50000000 254.72396851]
[92.50000000 239.72396851]
[92.50000000 224.72396851]
[92.50000000 209.72396851]
[92.50000000 194.72396851]
[92.50000000 179.72396851]
[92.50000000 164.72396851]
[92.50000000 149.72396851]
[92.50000000 134.72396851]
[92.50000000 119.72396851]
[86.81009674 133.60290527]
[72.72559357 138.76301575]
[59.41626740 131.84478760]
[55.54722595 117.35235596]
[63.63741684 104.72109222]
[78.41925812 102.17453003]
[63.77575684 98.92370605]
[49.13225555 95.67288208]
[34.45573044 92.57456207]
[19.74776840 89.62907410]
[5.03980589 86.68359375]
[-9.66815567 83.73811340]
[-18.14933968 92.17863464]
[-29.54400063 95.41446686]
[-40.96119690 92.74587250]
[-49.56269073 84.95600891]
[-53.26845551 74.08596802]
[-67.84115601 70.53120422]
[-82.41386414 66.97644043]
[-94.16222382 77.11328888]
[-109.62790680 78.37510681]
[-122.86405182 70.27669525]
[-128.78108215 55.93206787]
[-125.10377502 40.85702133]
[-113.24614716 30.84821701]
[-97.76767731 29.75424767]
[-84.62017059 37.99576569]
[-78.85910034 52.40373993]
[-64.28639984 55.95849991]
[-49.71369553 59.51326370]
[-34.73466492 49.07170486]
[-16.55578041 52.89604950]
[-6.72267294 69.03015137]
[7.98528862 71.97563171]
[22.69325066 74.92111206]
[37.40121078 77.86660004]
[44.62411499 76.08465576]
[52.38307953 81.02938080]
[67.02658081 84.28020477]
[81.67008209 87.53102875]
[92.54891205 77.20382690]
[90.06378937 62.41111755]
[75.09790039 60.20262527]
[61.54786301 53.47569275]
[50.74116516 42.88936234]
[43.73653793 29.48076820]
[41.22022247 14.56355095]
[43.43874359 -0.40085179]
[50.17475510 -13.94638062]
[60.76832581 -24.74598312]
[74.18161011 -31.74162483]
[89.10050964 -34.24794388]
[104.06342316 -32.01939392]
[117.60443115 -25.27431107]
[128.39694214 -14.67350483]
[135.38359070 -1.25553632]
[137.87991333 13.66503906]
[135.64134216 28.62645531]
[128.88717651 42.16294479]
[118.27914429 52.94834137]
[104.85649872 59.92600250]
[107.34161377 74.71870422]
[112.91143036 84.24277496]
[112.78457642 93.33599091]
[127.28017426 89.47883606]
[141.77577209 85.62167358]
[154.94435120 78.43916321]
[166.03565979 68.34051514]
[171.03071594 53.32851791]
[185.65061951 50.48109055]
[196.74192810 40.38244247]
[207.83325195 30.28379059]
[208.32235718 14.48707199]
[219.89523315 3.72398376]
[235.68589783 4.38007450]
[246.32601929 16.06609917]
[245.50302124 31.84894371]
[233.70515442 42.36492920]
[217.93190002 41.37510681]
[206.84057617 51.47375488]
[195.74926758 61.57240677]
[191.54753113 75.86207581]
[176.13430786 79.43183136]
[165.04299927 89.53047943]
[179.76240540 86.64273071]
[194.74143982 87.43560791]
[209.07373047 91.86114502]
[221.89205933 99.65155029]
[232.42080688 110.33544159]
[240.02288818 123.26634216]
[244.23831177 137.66183472]
[244.81201172 152.65086365]
[241.70927429 167.32644653]
[235.11784363 180.80061340]
[225.43655396 192.25804138]
[213.25120544 201.00544739]
[199.29911804 206.51356506]
[184.42451477 208.44908142]
[169.52745056 206.69490051]
[155.50929260 201.35714722]
[143.21829224 192.75881958]
[133.39816284 181.42018127]
[126.64308167 168.02731323]
[123.36180878 153.39059448]
[123.75287628 138.39569092]
[127.79264069 123.94992065]
[135.23664856 110.92737579]
[145.63293457 100.11727142]
[131.13732910 103.97442627]
[116.64173126 107.83158875]
[107.50000000 119.72396851]
[107.50000000 134.72396851]
[107.50000000 149.72396851]
[107.50000000 164.72396851]
[107.50000000 179.72396851]
[107.50000000 194.72396851]
[107.50000000 209.72396851]
[107.50000000 224.72396851]
[107.50000000 239.72396851]
[107.50000000 254.72396851]
[122.03988647 258.78527832]
[134.94427490 266.61978149]
[145.25555420 277.64611816]
[152.20857239 291.04605103]
[155.28736877 305.82519531]
[154.26348877 320.88690186]
[149.21287537 335.11340332]
[140.51036072 347.44906616]
[128.80169678 356.97848511]
[114.95575714 362.99453735]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 60]
[27 59]
[28 58]
[29 56]
[30 55]
[31 54]
[32 53]
[37 50]
[38 49]
[39 48]
[61 82]
[62 81]
[84 130]
[85 129]
[86 128]
[87 104]
[88 103]
[90 101]
[91 100]
[92 99]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
