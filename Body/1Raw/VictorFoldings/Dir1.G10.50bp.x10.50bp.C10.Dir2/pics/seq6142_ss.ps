%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:40 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUCAAUCUAGGGGGGGGGGCUUCUCCCGCCGCCGGGAAAAAAGGCGGGAGAAGCCCCGGCAGGUUUGAAxxxxxxxxxxUAUCUCGAACUGACACUGAGCCACAACCCAAACAACCCAGCUCUCCCUAACCCCCCCCCCGCUUCAAACUA\
) } def
/len { sequence length } bind def

/coor [
[76.04964447 322.79364014]
[64.30405426 313.36734009]
[54.85979843 301.63616943]
[48.15859985 288.14883423]
[44.51388931 273.53616333]
[44.09613419 258.48162842]
[46.92487335 243.68931580]
[52.86780167 229.85112000]
[61.64696121 217.61427307]
[72.85173035 207.55111694]
[85.95804596 200.13230896]
[100.35289764 195.70486450]
[99.12228394 180.75541687]
[97.89167023 165.80598450]
[96.66105652 150.85655212]
[95.43044281 135.90711975]
[94.19983673 120.95768738]
[83.21903229 110.73897552]
[68.21981812 110.58498383]
[53.22061157 110.43098450]
[38.22140121 110.27698517]
[23.22219276 110.12299347]
[8.22298336 109.96899414]
[-6.77622604 109.81499481]
[-21.77543449 109.66100311]
[-36.77464676 109.50700378]
[-51.77385330 109.35300446]
[-66.77306366 109.19901276]
[-81.77227020 109.04501343]
[-96.77148438 108.89101410]
[-111.77069092 108.73702240]
[-126.76990509 108.58302307]
[-133.48692322 122.28865051]
[-145.49070740 131.71583557]
[-160.39790344 134.99281311]
[-175.24865723 131.46891785]
[-187.09434509 121.84382629]
[-193.58300781 108.02861786]
[-193.42631531 92.76630402]
[-186.65536499 79.08723450]
[-174.61454773 69.70738983]
[-159.69458008 66.48915100]
[-144.85781860 70.07149506]
[-133.05010986 79.74315643]
[-126.61590576 93.58380890]
[-111.61669159 93.73780823]
[-96.61748505 93.89180756]
[-81.61827850 94.04580688]
[-66.61906433 94.19979858]
[-51.61985779 94.35379791]
[-36.62064743 94.50779724]
[-21.62143898 94.66178894]
[-6.62222910 94.81578827]
[8.37698078 94.96978760]
[23.37619019 95.12377930]
[38.37540054 95.27777863]
[53.37460709 95.43177795]
[68.37381744 95.58576965]
[83.37303162 95.73976898]
[94.24834442 85.40886688]
[87.08412933 71.30267334]
[95.33742523 58.90378952]
[95.95325470 43.91643524]
[96.56907654 28.92908096]
[93.78165436 20.16403389]
[97.35453796 13.64125252]
[98.27795410 -1.33029747]
[99.20137024 -16.30184746]
[100.12477875 -31.27339745]
[101.04819489 -46.24494553]
[87.24748993 -52.56198883]
[76.66349792 -63.44057083]
[70.72761536 -77.40945435]
[70.24262238 -92.57946777]
[75.27411652 -106.89897919]
[85.14161682 -118.43141174]
[98.51062775 -125.61708069]
[113.57311249 -127.48418427]
[128.29197693 -123.78022766]
[140.67663574 -115.00612640]
[149.05213928 -102.34851074]
[152.28579712 -87.51921844]
[149.94026184 -72.52378845]
[142.33276367 -59.39022827]
[130.49214172 -49.89474869]
[116.01974487 -45.32153320]
[115.09632874 -30.34998322]
[114.17292023 -15.37843418]
[113.24950409 -0.40688393]
[112.32608795 14.56466579]
[111.55643463 29.54490662]
[110.94060516 44.53226089]
[110.32478333 59.51961517]
[117.53303528 72.55381012]
[109.23569489 86.02468872]
[112.02651215 85.61456299]
[115.00958252 85.67333984]
[118.11289215 86.23702240]
[121.25899506 87.33116150]
[136.12559509 85.33510590]
[150.99218750 83.33905029]
[165.85879517 81.34299469]
[168.55950928 66.45805359]
[175.72952271 53.13716507]
[186.66639709 42.68537140]
[200.29862976 36.12662888]
[215.29071045 34.10349655]
[230.17382812 36.81418228]
[243.48991394 43.99312210]
[253.93437195 54.93699265]
[260.48397827 68.57363129]
[262.49707031 83.56705475]
[259.77639771 98.44835663]
[252.58854675 111.75962067]
[241.63768005 122.19675446]
[227.99665833 128.73721313]
[213.00189209 130.74026489]
[198.12240601 128.00962830]
[184.81596375 120.81285095]
[174.38616943 109.85498810]
[167.85484314 96.20958710]
[152.98825073 98.20565033]
[138.12165833 100.20170593]
[123.25505066 102.19776154]
[138.23046875 101.33937836]
[150.59785461 109.82748413]
[155.18164062 124.10995483]
[150.06359863 138.20979309]
[137.38554382 146.22647095]
[122.45303345 144.80509949]
[111.51508331 134.54054260]
[109.14926910 119.72707367]
[110.37988281 134.67651367]
[111.61049652 149.62594604]
[112.84110260 164.57537842]
[114.07171631 179.52481079]
[115.30233002 194.47424316]
[130.22741699 196.48812866]
[144.37049866 201.66380310]
[157.07003784 209.75920105]
[167.73210144 220.39569092]
[175.85797119 233.07575989]
[181.06759644 247.20635986]
[183.11730957 262.12658691]
[181.91125488 277.13854980]
[177.50581360 291.54016113]
[170.10707092 304.65780640]
[160.06106567 315.87796021]
[147.83766174 324.67581177]
[134.00857544 330.63992310]
[119.22061157 333.49127197]
[104.16543579 333.09655762]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 59]
[19 58]
[20 57]
[21 56]
[22 55]
[23 54]
[24 53]
[25 52]
[26 51]
[27 50]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[60 95]
[62 93]
[63 92]
[64 91]
[66 90]
[67 89]
[68 88]
[69 87]
[70 86]
[99 124]
[100 123]
[101 122]
[102 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
