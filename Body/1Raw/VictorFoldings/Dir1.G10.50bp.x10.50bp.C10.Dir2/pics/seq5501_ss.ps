%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUCCCUAGGGGGGGGGGGGAGGCCUGCCCCCGCUAACCGGCUUUUUGCCCAAAUGGGCCAUUAUCGAxxxxxxxxxxCUCAUUACUAACAACAUUUCCCCCGCAUCCCCCUUCCAAACAACAAUCCCCCCCCCCCCCCCUCUACCUA\
) } def
/len { sequence length } bind def

/coor [
[70.66865540 417.63546753]
[57.44845581 410.36300659]
[46.56165314 399.91601562]
[38.75052261 387.00674438]
[34.54764175 372.51544189]
[34.23956680 357.43011475]
[37.84730911 342.77926636]
[45.12488174 329.56188965]
[55.57609177 318.67910767]
[68.48834991 310.87298584]
[82.98128510 306.67568970]
[82.66923523 291.67892456]
[82.35717773 276.68218994]
[82.04512024 261.68542480]
[81.73306274 246.68867493]
[81.42100525 231.69192505]
[81.10894775 216.69517517]
[80.79689789 201.69841003]
[80.48484039 186.70166016]
[80.17278290 171.70491028]
[79.86072540 156.70816040]
[79.54866791 141.71139526]
[79.23661041 126.71464539]
[69.72825623 115.11330414]
[55.08475494 111.86248016]
[40.44125366 108.61165619]
[25.79775047 105.36082458]
[11.15425014 102.11000061]
[-3.84575009 102.11000061]
[-18.48925209 105.36082458]
[-30.20452118 116.83621216]
[-45.92525101 112.16816711]
[-49.47930145 96.15876770]
[-37.21057129 85.27712250]
[-21.74007797 90.71732330]
[-7.09657574 87.46649933]
[-6.47313833 79.99245453]
[-21.42122459 78.74558258]
[-33.74322891 70.19174194]
[-20.17435074 63.79749680]
[-5.22626400 65.04437256]
[-4.60282660 57.57032776]
[-18.50538254 51.93836975]
[-32.40793991 46.30641174]
[-47.68257904 51.21201706]
[-60.96118927 42.20879364]
[-62.05755997 26.20324707]
[-50.13064575 15.47346210]
[-34.32975769 18.25041008]
[-26.77598190 32.40385818]
[-12.87342644 38.03581238]
[1.02912998 43.66777039]
[9.46960068 50.35715866]
[15.35153198 58.25714111]
[18.58625603 66.60944366]
[19.28471565 74.68126678]
[17.74108505 81.81410980]
[14.40507603 87.46649933]
[29.04857635 90.71732330]
[43.69207764 93.96815491]
[58.33557892 97.21897888]
[72.97908020 100.46980286]
[86.37752533 80.10643005]
[108.00609589 80.37374878]
[118.21957397 69.38808441]
[108.39224243 58.03596497]
[99.84991455 45.68785095]
[92.69275665 32.48851776]
[87.00467682 18.59272766]
[82.85237122 4.16339827]
[80.28451538 -10.63029480]
[79.33121490 -25.61490250]
[80.00366211 -40.61473846]
[82.29395294 -55.45393372]
[86.17524719 -69.95851135]
[91.60203552 -83.95841217]
[98.51069641 -97.28948975]
[106.82022095 -109.79545593]
[116.43318939 -121.32966614]
[127.23689270 -131.75689697]
[139.10466003 -140.95491028]
[151.89735413 -148.81582642]
[165.46499634 -155.24751282]
[179.64848328 -160.17456055]
[194.28155518 -163.53918457]
[209.19261169 -165.30194092]
[224.20686340 -165.44216919]
[239.14825439 -163.95822144]
[253.84161377 -160.86750793]
[268.11465454 -156.20623779]
[281.80004883 -150.02908325]
[294.73733521 -142.40847778]
[306.77484131 -133.43374634]
[317.77142334 -123.21011353]
[327.59814453 -111.85746002]
[336.13980103 -99.50888824]
[343.29626465 -86.30917358]
[348.98358154 -72.41307831]
[353.13510132 -57.98352432]
[355.70217896 -43.18969345]
[356.65466309 -28.20503426]
[355.98141479 -13.20523453]
[353.69033813 1.63383949]
[349.80825806 16.13820839]
[344.38070679 30.13781738]
[337.47134399 43.46852493]
[329.16113281 55.97403717]
[319.54754639 67.50773621]
[308.74328613 77.93438721]
[296.87500000 87.13175201]
[284.08187866 94.99198914]
[270.51391602 101.42294312]
[256.33016968 106.34922028]
[241.69691467 109.71305847]
[226.78575134 111.47502136]
[211.77149963 111.61444092]
[196.83018494 110.12969208]
[182.13699341 107.03817749]
[167.86419678 102.37614441]
[154.17913818 96.19825745]
[141.24226379 88.57695007]
[129.20524597 79.60156250]
[118.99176025 90.58723450]
[122.53729248 102.29206085]
[119.00512695 114.83681488]
[108.68203735 124.04864502]
[94.23336792 126.40258789]
[94.54542542 141.39933777]
[94.85748291 156.39610291]
[95.16953278 171.39285278]
[95.48159027 186.38960266]
[95.79364777 201.38635254]
[96.10570526 216.38311768]
[96.41776276 231.37986755]
[96.72982025 246.37661743]
[97.04187012 261.37338257]
[97.35392761 276.37011719]
[97.66598511 291.36688232]
[97.97804260 306.36364746]
[112.63303375 309.95440674]
[125.85884094 317.21664429]
[136.75370789 327.65524292]
[144.57481384 340.55847168]
[148.78887939 355.04653931]
[149.10859680 370.13162231]
[145.51217651 384.78524780]
[138.24481201 398.00823975]
[127.80200958 408.89907837]
[114.89578247 416.71517944]
[100.40608978 420.92367554]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 128]
[23 127]
[24 62]
[25 61]
[26 60]
[27 59]
[28 58]
[29 36]
[30 35]
[42 52]
[43 51]
[44 50]
[64 123]
[65 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
