%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAGCUAUCCGGGGGGGGGGUCUUCAACAAUAUACUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUxxxxxxxxxxUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCUCAACUUUUAAAGGACCCCCCCCCCUAACAGCUAUCC\
) } def
/len { sequence length } bind def

/coor [
[105.14107513 451.62649536]
[90.98046875 446.47149658]
[78.39072418 438.18927002]
[68.05078888 427.22650146]
[60.51827621 414.17437744]
[56.19940948 399.73678589]
[55.32710266 384.69232178]
[57.94839096 369.85232544]
[63.92192078 356.01708984]
[72.92553711 343.93273926]
[84.47369385 334.25097656]
[97.94361115 327.49389648]
[112.60887146 324.02590942]
[112.60887146 309.02590942]
[112.60887146 294.02590942]
[112.60887146 279.02590942]
[112.60887146 264.02590942]
[112.60887146 249.02592468]
[112.60887146 234.02592468]
[112.60887146 219.02592468]
[112.60887146 204.02592468]
[112.60887146 189.02592468]
[112.60887146 174.02592468]
[112.60887146 159.02592468]
[101.94866180 148.47319031]
[86.94943237 148.62519836]
[71.95020294 148.77722168]
[56.95096970 148.92922974]
[52.85562897 163.46899414]
[44.82868195 176.26527405]
[33.52083969 186.28073120]
[19.84877777 192.70346069]
[4.92082787 195.01278687]
[-10.05286598 193.02151489]
[-23.85845566 186.89106750]
[-35.37678146 177.11840820]
[-43.67410660 164.49577332]
[-48.07780075 150.04640198]
[-48.23088074 134.94166565]
[-44.12093353 120.40601349]
[-36.08113480 107.61780548]
[-24.76323891 97.61370850]
[-11.08473015 91.20472717]
[3.84553170 88.91039276]
[18.81721878 90.91670227]
[32.61664200 97.06101990]
[44.12514496 106.84524536]
[52.40978241 119.47621155]
[56.79896164 133.92999268]
[71.79819489 133.77798462]
[86.79742432 133.62597656]
[101.79665375 133.47396851]
[71.01504517 108.04811096]
[87.50763702 76.46955872]
[84.48815918 61.77661133]
[81.46868134 47.08366394]
[66.42739868 47.35650635]
[51.59212875 44.86063766]
[37.46815109 39.68106842]
[24.53652763 31.99421310]
[13.23770237 22.06188202]
[3.95651078 10.22236633]
[-2.99093461 -3.12108350]
[-7.36800575 -17.51399422]
[-9.02562141 -32.46615219]
[-7.90732336 -47.46828461]
[-4.05120134 -62.00943375]
[2.41140747 -75.59432983]
[11.26038837 -87.76026917]
[22.19434929 -98.09289551]
[34.84088135 -106.24028015]
[48.76925278 -111.92491913]
[63.50506210 -114.95320892]
[78.54641724 -115.22199249]
[93.38101959 -112.72212982]
[107.50360107 -107.53874969]
[120.43315125 -99.84841156]
[131.72929382 -89.91303253]
[141.00729370 -78.07101440]
[147.95114136 -64.72569275]
[152.32434082 -50.33160400]
[153.97792053 -35.37900162]
[152.85557556 -20.37717056]
[148.99554443 -5.83706284]
[142.52926636 7.74608850]
[133.67700195 19.90964699]
[122.74026489 30.23932457]
[110.09152985 38.38329697]
[96.16162872 44.06418610]
[99.18110657 58.75713348]
[102.20058441 73.45008087]
[113.79319763 75.21878815]
[124.16951752 82.09094238]
[131.08650208 93.29279327]
[132.76672363 107.07643890]
[145.80747986 99.66437531]
[158.84823608 92.25231171]
[171.88899231 84.84024048]
[184.92974854 77.42817688]
[197.97050476 70.01611328]
[201.92181396 54.71374130]
[215.57847595 46.75941467]
[230.83821106 50.87229919]
[238.64772034 64.61228943]
[234.37371826 79.82769775]
[220.55194092 87.49148560]
[205.38256836 83.05686951]
[192.34181213 90.46893311]
[179.30105591 97.88099670]
[166.26029968 105.29306030]
[153.21954346 112.70513153]
[140.17878723 120.11719513]
[142.45021057 134.94421387]
[157.11180115 138.11244202]
[171.77339172 141.28065491]
[186.43499756 144.44888306]
[196.69100952 133.01605225]
[211.29437256 128.25817871]
[226.31686401 131.45513916]
[237.71749878 141.74693298]
[242.42955017 156.36514282]
[239.18553162 171.37753296]
[228.85804749 182.74584961]
[214.22514343 187.41207886]
[199.22299194 184.12100220]
[187.88710022 173.75793457]
[183.26676941 159.11047363]
[168.60517883 155.94226074]
[153.94358826 152.77403259]
[139.28198242 149.60581970]
[127.60887146 159.02592468]
[127.60887146 174.02592468]
[127.60887146 189.02592468]
[127.60887146 204.02592468]
[127.60887146 219.02592468]
[127.60887146 234.02592468]
[127.60887146 249.02592468]
[127.60887146 264.02590942]
[127.60887146 279.02590942]
[127.60887146 294.02590942]
[127.60887146 309.02590942]
[127.60887146 324.02590942]
[142.27412415 327.49389648]
[155.74404907 334.25097656]
[167.29220581 343.93273926]
[176.29582214 356.01708984]
[182.26934814 369.85232544]
[184.89064026 384.69232178]
[184.01832581 399.73678589]
[179.69946289 414.17437744]
[172.16694641 427.22650146]
[161.82701111 438.18927002]
[149.23727417 446.47149658]
[135.07667542 451.62649536]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[25 52]
[26 51]
[27 50]
[28 49]
[54 91]
[55 90]
[56 89]
[95 112]
[96 111]
[97 110]
[98 109]
[99 108]
[100 107]
[113 130]
[114 129]
[115 128]
[116 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
