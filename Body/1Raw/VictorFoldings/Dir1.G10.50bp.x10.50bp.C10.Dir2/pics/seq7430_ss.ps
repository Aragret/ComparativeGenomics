%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAACCAUUUGGGGGGGGGGCAUAACUUUGUCAAAGUUAAAUUAUAGGCUAAAUCCUAUAUAUCUUAAUGxxxxxxxxxxGCCUGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGCCCCCCCCCCAAAACCUUUU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 391.07388306]
[71.19830322 385.05786133]
[59.48964310 375.52844238]
[50.78712082 363.19274902]
[45.73651886 348.96624756]
[44.71262741 333.90457153]
[47.79142761 319.12539673]
[54.74444962 305.72546387]
[65.05573273 294.69912720]
[77.96011353 286.86462402]
[92.50000000 282.80331421]
[92.50000000 267.80331421]
[92.50000000 252.80331421]
[92.50000000 237.80331421]
[92.50000000 222.80331421]
[92.50000000 207.80331421]
[92.50000000 192.80331421]
[92.50000000 177.80331421]
[92.50000000 162.80331421]
[92.50000000 147.80331421]
[92.50000000 132.80331421]
[92.50000000 117.80331421]
[80.51316833 108.78578949]
[66.10095215 112.94367218]
[51.68873596 117.10156250]
[37.27651978 121.25944519]
[22.86430359 125.41733551]
[8.45208740 129.57522583]
[-5.96012926 133.73310852]
[-19.50259590 143.93301392]
[-33.05280685 133.74340820]
[-27.01248360 117.90196991]
[-10.11801624 119.32089233]
[4.29419947 115.16300964]
[18.70641518 111.00511932]
[33.11863327 106.84722900]
[47.53084946 102.68934631]
[61.94306564 98.53145599]
[76.35527802 94.37357330]
[77.44369507 86.95296478]
[65.67923737 77.64719391]
[79.62053680 72.11176300]
[80.70895386 64.69116211]
[68.09782410 56.56961823]
[55.48669815 48.44807434]
[42.87556839 40.32653427]
[30.26444054 32.20499039]
[17.65331268 24.08344841]
[2.26201844 27.67282104]
[-11.11503601 19.25676727]
[-14.54148197 3.82838392]
[-5.98446846 -9.45894337]
[9.47927952 -12.72207928]
[22.67539406 -4.02506256]
[25.77485466 11.47232056]
[38.38598251 19.59386253]
[50.99711227 27.71540451]
[63.60823822 35.83694839]
[76.21936798 43.95848846]
[88.83049774 52.08003235]
[100.01314545 64.59114838]
[104.92186737 78.95465851]
[103.46436310 92.99195099]
[114.55567932 82.89329529]
[125.64699554 72.79464722]
[110.86791229 75.35953522]
[96.08621979 72.80968475]
[83.02059174 65.44155884]
[73.19013977 54.11185455]
[67.73784637 40.13785934]
[67.29765320 25.14432144]
[71.92073822 10.87452412]
[81.06957245 -1.01239455]
[93.68042755 -9.13435173]
[108.28706360 -12.54701424]
[123.19116974 -10.85359478]
[136.65985107 -4.25098562]
[147.12713623 6.49313259]
[153.37597656 20.12955093]
[154.67985535 35.07277298]
[150.88713074 49.58536530]
[142.43681335 61.98204041]
[156.21919250 56.06207657]
[165.84550476 43.50641632]
[180.59327698 45.59264374]
[194.37565613 39.67267990]
[192.84373474 31.16213036]
[194.43150330 21.95936203]
[199.39225769 13.23858356]
[207.53359985 6.24988651]
[218.20123291 2.15096092]
[230.32521057 1.83855367]
[242.21759033 -7.30318069]
[254.10997009 -16.44491386]
[266.00234985 -25.58664894]
[271.76141357 -40.94129944]
[287.98062134 -43.36384964]
[297.97506714 -30.36219215]
[291.46331787 -15.31131363]
[275.14407349 -13.69426918]
[263.25170898 -4.55253506]
[251.35931396 4.58919907]
[239.46693420 13.73093319]
[242.06465149 20.76669312]
[249.85777283 41.87397385]
[264.83749390 41.09412766]
[279.81719971 40.31428146]
[294.79690552 39.53443527]
[304.06707764 26.94087029]
[319.27554321 23.30264664]
[333.24133301 30.33762550]
[339.37020874 44.72410202]
[334.76834106 59.66922760]
[321.60855103 68.11636353]
[306.10452271 66.07703400]
[295.57675171 54.51415253]
[280.59704590 55.29399490]
[265.61734009 56.07384109]
[250.63761902 56.85368729]
[221.32315063 68.19493866]
[200.29562378 53.45506287]
[186.51324463 59.37502670]
[177.87274170 71.50725555]
[162.13916016 69.84445953]
[148.35676575 75.76441956]
[135.74565125 83.88596344]
[124.65432739 93.98461151]
[113.56301117 104.08325958]
[107.50000000 117.80331421]
[107.50000000 132.80331421]
[107.50000000 147.80331421]
[107.50000000 162.80331421]
[107.50000000 177.80331421]
[107.50000000 192.80331421]
[107.50000000 207.80331421]
[107.50000000 222.80331421]
[107.50000000 237.80331421]
[107.50000000 252.80331421]
[107.50000000 267.80331421]
[107.50000000 282.80331421]
[122.03988647 286.86462402]
[134.94427490 294.69912720]
[145.25555420 305.72546387]
[152.20857239 319.12539673]
[155.28736877 333.90457153]
[154.26348877 348.96624756]
[149.21287537 363.19274902]
[140.51036072 375.52844238]
[128.80169678 385.05786133]
[114.95575714 391.07388306]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 39]
[24 38]
[25 37]
[26 36]
[27 35]
[28 34]
[29 33]
[43 60]
[44 59]
[45 58]
[46 57]
[47 56]
[48 55]
[63 128]
[64 127]
[65 126]
[82 125]
[83 124]
[85 122]
[86 121]
[92 103]
[93 102]
[94 101]
[95 100]
[105 119]
[106 118]
[107 117]
[108 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
