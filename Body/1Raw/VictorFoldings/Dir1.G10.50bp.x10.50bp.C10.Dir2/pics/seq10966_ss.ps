%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAGGACUCAGGGGGGGGGGUAAUAGUUACAAUCGGCAUCAACCAACCACACCUAGCAUUCCUGCACAUCxxxxxxxxxxUAGCAACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCCCCCCCCCCCUAGGAAUCA\
) } def
/len { sequence length } bind def

/coor [
[78.07559204 368.56268311]
[64.85539246 361.29022217]
[53.96858978 350.84320068]
[46.15745926 337.93395996]
[41.95457840 323.44265747]
[41.64650726 308.35729980]
[45.25424576 293.70648193]
[52.53181839 280.48910522]
[62.98302841 269.60632324]
[75.89528656 261.80017090]
[90.38822937 257.60290527]
[90.07617188 242.60614014]
[89.76411438 227.60939026]
[89.45205688 212.61264038]
[89.13999939 197.61589050]
[88.82794189 182.61912537]
[88.51589203 167.62237549]
[88.20383453 152.62562561]
[87.89177704 137.62887573]
[87.57971954 122.63211823]
[82.49756622 115.01570129]
[80.92031860 106.94877625]
[82.45059204 99.81499481]
[86.20798492 94.64504242]
[91.02948761 91.96958923]
[95.70574188 91.76820374]
[92.30275726 77.15930939]
[88.89978027 62.55041885]
[85.70771027 59.39254761]
[83.90869141 55.74089050]
[83.48401642 52.10749817]
[84.24624634 48.94316864]
[85.87514496 46.58647156]
[83.69831085 31.74526596]
[81.52146912 16.90406036]
[79.19036865 2.08630252]
[76.70524597 -12.70640469]
[74.22013092 -27.49911118]
[59.25047684 -26.38820839]
[44.24217987 -26.66328430]
[29.32328796 -28.32199287]
[14.62108612 -31.35018158]
[0.26101261 -35.72201538]
[-13.63441658 -41.40019226]
[-26.94664764 -48.33626938]
[-39.56210327 -56.47106934]
[-51.37314606 -65.73518372]
[-62.27901459 -76.04957581]
[-72.18665314 -87.32624817]
[-81.01154327 -99.46898651]
[-88.67837524 -112.37418365]
[-95.12174988 -125.93174744]
[-100.28669739 -140.02600098]
[-104.12913513 -154.53669739]
[-106.61629486 -169.34004211]
[-107.72694397 -184.30970764]
[-107.45162201 -199.31799316]
[-105.79266357 -214.23686218]
[-102.76422882 -228.93901062]
[-98.39215851 -243.29901123]
[-92.71375275 -257.19433594]
[-85.77745056 -270.50646973]
[-77.64244080 -283.12179565]
[-68.37812805 -294.93267822]
[-58.06355286 -305.83837891]
[-46.78672028 -315.74581909]
[-34.64383698 -324.57049561]
[-21.73850441 -332.23712158]
[-8.18083382 -338.68026733]
[5.91350746 -343.84497070]
[20.42426682 -347.68719482]
[35.22764206 -350.17410278]
[50.19733429 -351.28448486]
[65.20561981 -351.00891113]
[80.12445831 -349.34973145]
[94.82656097 -346.32104492]
[109.18648529 -341.94873047]
[123.08172607 -336.27008057]
[136.39372253 -329.33355713]
[149.00891113 -321.19836426]
[160.81964111 -311.93383789]
[171.72517395 -301.61907959]
[181.63243103 -290.34207153]
[190.45690918 -278.19906616]
[198.12332153 -265.29357910]
[204.56625366 -251.73580933]
[209.73071289 -237.64138794]
[213.57267761 -223.13056946]
[216.05934143 -208.32714844]
[217.16949463 -193.35743713]
[216.89366150 -178.34915161]
[215.23422241 -163.43034363]
[212.20529175 -148.72830200]
[207.83274841 -134.36843872]
[202.15386963 -120.47329712]
[195.21713257 -107.16141510]
[187.08169556 -94.54636383]
[177.81698608 -82.73577881]
[167.50205994 -71.83042908]
[156.22488403 -61.92335129]
[144.08171082 -53.09907532]
[131.17611694 -45.43288422]
[117.61824036 -38.99018478]
[103.52372742 -33.82594681]
[89.01284027 -29.98423004]
[91.49795532 -15.19152355]
[93.98307800 -0.39881599]
[98.22029114 5.71605682]
[96.36267853 14.72722340]
[98.53951263 29.56842995]
[100.71635437 44.40963364]
[103.50867462 59.14744186]
[106.91165161 73.75633240]
[110.31462860 88.36522675]
[120.18035126 99.66423035]
[134.19706726 105.00574493]
[148.21377563 110.34725189]
[160.56797791 101.10726166]
[175.95809937 100.03605652]
[189.47323608 107.47545624]
[196.80073547 121.05158234]
[195.60244751 136.43234253]
[186.26071167 148.70977783]
[171.75645447 153.96621704]
[156.71794128 150.52435303]
[145.94389343 139.48245239]
[142.87226868 124.36396790]
[128.85556030 119.02245331]
[114.83884430 113.68094635]
[102.57647705 122.32006073]
[102.88852692 137.31681824]
[103.20058441 152.31356812]
[103.51264191 167.31031799]
[103.82469940 182.30706787]
[104.13675690 197.30383301]
[104.44881439 212.30058289]
[104.76086426 227.29733276]
[105.07292175 242.29408264]
[105.38497925 257.29083252]
[120.03997040 260.88162231]
[133.26577759 268.14385986]
[144.16064453 278.58245850]
[151.98175049 291.48568726]
[156.19581604 305.97372437]
[156.51553345 321.05883789]
[152.91911316 335.71243286]
[145.65174866 348.93545532]
[135.20895386 359.82629395]
[122.30271912 367.64239502]
[107.81302643 371.85086060]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 114]
[27 113]
[28 112]
[33 111]
[34 110]
[35 109]
[36 107]
[37 106]
[38 105]
[115 129]
[116 128]
[117 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
