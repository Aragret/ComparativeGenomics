%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAAACCCCGGGGGGGGGGUACGCAUUUAUAUAGAGGAGACAAGUCGUAACAUGGUAAGUGUACUGGAAxxxxxxxxxxCCUUCUGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCCCCCCCCCCCUAAGACCCC\
) } def
/len { sequence length } bind def

/coor [
[98.97807312 383.98840332]
[85.13213348 377.97238159]
[73.42346954 368.44296265]
[64.72094727 356.10729980]
[59.67034531 341.88076782]
[58.64645386 326.81909180]
[61.72525024 312.03991699]
[68.67827606 298.63998413]
[78.98955536 287.61367798]
[91.89393616 279.77914429]
[106.43382263 275.71783447]
[106.43382263 260.71783447]
[106.43382263 245.71784973]
[106.43382263 230.71784973]
[106.43382263 215.71784973]
[106.43382263 200.71784973]
[106.43382263 185.71784973]
[106.43382263 170.71784973]
[106.43382263 155.71784973]
[106.43382263 140.71784973]
[49.23372650 124.11837769]
[34.29941940 125.52067566]
[19.36511040 126.92298126]
[4.43080330 128.32528687]
[1.91576064 143.20268250]
[-4.36502075 156.92179871]
[-13.98330688 168.54724121]
[-26.28330612 177.28637695]
[-40.42638779 182.54335022]
[-55.44824600 183.95971680]
[-70.32467651 181.43893433]
[-84.04136658 175.15286255]
[-95.66309357 165.53009033]
[-104.39747620 153.22671509]
[-109.64898682 139.08160400]
[-111.05956268 124.05919647]
[-108.53302765 109.18374634]
[-102.24165344 95.46948242]
[-92.61439514 83.85146332]
[-80.30764771 75.12183380]
[-66.16051483 69.87579346]
[-51.13756561 68.47101593]
[-36.26309204 71.00328827]
[-22.55125618 77.29995728]
[-10.93696022 86.93170166]
[-2.21208262 99.24182129]
[3.02849936 113.39097595]
[17.96280670 111.98867798]
[32.89711380 110.58637238]
[47.83142090 109.18406677]
[53.02683640 95.11254883]
[42.58702469 84.34174347]
[32.14721298 73.57093048]
[21.70740128 62.80012131]
[5.75329304 61.11310959]
[-2.75314784 47.51090240]
[2.71349120 32.42795181]
[17.95967293 27.43460655]
[31.28983116 36.36133194]
[32.47821045 52.36030960]
[42.91802216 63.13111877]
[53.35783386 73.90192413]
[63.79764557 84.67273712]
[70.68883514 81.71275330]
[72.45316315 66.81687927]
[84.47122192 75.79279327]
[91.36241150 72.83280945]
[90.73843384 57.84579468]
[76.70293427 51.84849548]
[66.66598511 40.34969330]
[62.62043381 25.63248253]
[65.36951447 10.61898041]
[74.36740875 -1.70987594]
[87.82757568 -8.90618134]
[103.07747650 -9.54110336]
[117.08924866 -3.48857975]
[127.08083344 8.04965782]
[131.06840515 22.78268433]
[128.26022339 37.78524399]
[119.21384430 50.07857132]
[105.72544861 57.22181702]
[106.34942627 72.20883179]
[120.30981445 77.69586182]
[130.97143555 67.14457703]
[141.63307190 56.59328461]
[152.29469299 46.04199219]
[162.95631409 35.49070358]
[163.20602417 19.91587067]
[174.16874695 9.36724091]
[189.01542664 9.70128155]
[199.67704773 -0.85000837]
[210.33868408 -11.40129852]
[214.14115906 -27.35351562]
[229.93254089 -31.77663231]
[241.46801758 -20.12052727]
[236.88087463 -4.37600088]
[220.88996887 -0.73967242]
[210.22834778 9.81161785]
[199.56671143 20.36290741]
[199.74629211 35.21226120]
[189.08419800 46.06465149]
[173.50761414 46.15232849]
[162.84597778 56.70362091]
[152.18435669 67.25491333]
[141.52273560 77.80619812]
[130.86109924 88.35749054]
[132.63848877 95.64384460]
[147.21124268 92.08932495]
[150.76553345 106.66213989]
[136.19325256 110.21654510]
[137.97062683 117.50289917]
[152.29322815 121.95970917]
[166.61582947 126.41652679]
[180.93841553 130.87333679]
[195.26101685 135.33015442]
[206.49113464 124.85256195]
[221.45910645 121.40940094]
[236.13862610 125.92686462]
[246.58096313 137.18977356]
[249.97720337 152.16845703]
[245.41374207 166.83374023]
[234.11816406 177.24072266]
[219.12889099 180.58999634]
[204.47799683 175.98059082]
[194.10646057 164.65245056]
[190.80419922 149.65275574]
[176.48161316 145.19593811]
[162.15901184 140.73912048]
[147.83641052 136.28230286]
[133.51380920 131.82550049]
[121.43382263 140.71784973]
[121.43382263 155.71784973]
[121.43382263 170.71784973]
[121.43382263 185.71784973]
[121.43382263 200.71784973]
[121.43382263 215.71784973]
[121.43382263 230.71784973]
[121.43382263 245.71784973]
[121.43382263 260.71783447]
[121.43382263 275.71783447]
[135.97370911 279.77914429]
[148.87809753 287.61367798]
[159.18937683 298.63998413]
[166.14239502 312.03991699]
[169.22119141 326.81909180]
[168.19731140 341.88076782]
[163.14669800 356.10729980]
[154.44418335 368.44296265]
[142.73551941 377.97238159]
[128.88958740 383.98840332]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 50]
[22 49]
[23 48]
[24 47]
[51 63]
[52 62]
[53 61]
[54 60]
[67 82]
[68 81]
[83 106]
[84 105]
[85 104]
[86 103]
[87 102]
[90 99]
[91 98]
[92 97]
[111 130]
[112 129]
[113 128]
[114 127]
[115 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
