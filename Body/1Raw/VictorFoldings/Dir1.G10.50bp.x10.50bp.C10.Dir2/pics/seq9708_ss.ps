%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CGUACAUAACGGGGGGGGGGCUAAACCUACUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUAxxxxxxxxxxCCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAAAGCCAUUUACCCCCCCCCCCCGUACAUAGC\
) } def
/len { sequence length } bind def

/coor [
[83.15515137 352.95184326]
[69.93495941 345.67935181]
[59.04815292 335.23236084]
[51.23702240 322.32312012]
[47.03414154 307.83178711]
[46.72607040 292.74645996]
[50.33380890 278.09564209]
[57.61138153 264.87823486]
[68.06259155 253.99546814]
[80.97485352 246.18933105]
[95.46778870 241.99203491]
[95.15573120 226.99528503]
[94.84367371 211.99853516]
[94.53162384 197.00178528]
[94.21956635 182.00502014]
[93.90750885 167.00827026]
[93.59545135 152.01152039]
[93.28339386 137.01477051]
[92.97133636 122.01801300]
[92.65928650 107.02125549]
[89.33838654 99.61479187]
[92.50000000 91.71001434]
[92.50000000 76.71001434]
[92.50000000 61.71001434]
[92.50000000 46.71001434]
[77.52366638 45.78644943]
[62.63258743 43.94267654]
[47.88325882 41.18569183]
[33.33162689 37.52594757]
[19.03289604 32.97733307]
[5.04130173 27.55710220]
[-8.59008026 21.28581047]
[-21.80953979 14.18725204]
[-34.56692886 6.28835297]
[-46.81386185 -2.38092375]
[-58.50387192 -11.78769207]
[-69.59262085 -21.89626884]
[-80.03804016 -32.66830826]
[-89.80050659 -44.06294632]
[-98.84299469 -56.03696442]
[-107.13120270 -68.54493713]
[-114.63368225 -81.53941345]
[-121.32197571 -94.97110748]
[-127.17071533 -108.78906250]
[-132.15771484 -122.94086456]
[-136.26405334 -137.37283325]
[-139.47415161 -152.03021240]
[-141.77584839 -166.85740662]
[-143.16038513 -181.79818726]
[-143.62252808 -196.79585266]
[-143.16053772 -211.79351807]
[-141.77613831 -226.73431396]
[-139.47459412 -241.56153870]
[-136.26463318 -256.21896362]
[-132.15843201 -270.65097046]
[-127.17157745 -284.80279541]
[-121.32297516 -298.62081909]
[-114.63481140 -312.05258179]
[-107.13246155 -325.04711914]
[-98.84438324 -337.55517578]
[-89.80200958 -349.52929688]
[-80.03964996 -360.92401123]
[-69.59433746 -371.69616699]
[-58.50569153 -381.80484009]
[-46.81577301 -391.21173096]
[-34.56892776 -399.88113403]
[-21.81161308 -407.78015137]
[-8.59222317 -414.87884521]
[5.03909636 -421.15026855]
[19.03063774 -426.57064819]
[33.32932663 -431.11938477]
[47.88092041 -434.77926636]
[62.63021851 -437.53640747]
[77.52127838 -439.38034058]
[92.49760437 -440.30404663]
[107.50239563 -440.30404663]
[122.47872162 -439.38034058]
[137.36978149 -437.53640747]
[152.11907959 -434.77926636]
[166.67066956 -431.11938477]
[180.96936035 -426.57064819]
[194.96090698 -421.15026855]
[208.59222412 -414.87884521]
[221.81161499 -407.78015137]
[234.56892395 -399.88113403]
[246.81576538 -391.21173096]
[258.50567627 -381.80484009]
[269.59432983 -371.69616699]
[280.03964233 -360.92401123]
[289.80200195 -349.52929688]
[298.84439087 -337.55517578]
[307.13247681 -325.04711914]
[314.63482666 -312.05258179]
[321.32296753 -298.62081909]
[327.17156982 -284.80279541]
[332.15844727 -270.65097046]
[336.26464844 -256.21896362]
[339.47457886 -241.56153870]
[341.77612305 -226.73431396]
[343.16052246 -211.79351807]
[343.62252808 -196.79585266]
[343.16040039 -181.79818726]
[341.77584839 -166.85740662]
[339.47415161 -152.03021240]
[336.26403809 -137.37283325]
[332.15771484 -122.94086456]
[327.17071533 -108.78906250]
[321.32196045 -94.97110748]
[314.63366699 -81.53941345]
[307.13119507 -68.54493713]
[298.84298706 -56.03696442]
[289.80050659 -44.06294632]
[280.03802490 -32.66830826]
[269.59262085 -21.89626884]
[258.50387573 -11.78769207]
[246.81385803 -2.38092375]
[234.56692505 6.28835297]
[221.80953979 14.18725204]
[208.59007263 21.28581047]
[194.95869446 27.55710220]
[180.96710205 32.97733307]
[166.66836548 37.52594757]
[152.11674500 41.18569183]
[137.36741638 43.94267654]
[122.47633362 45.78644943]
[107.50000000 46.71001434]
[107.50000000 61.71001434]
[107.50000000 76.71001434]
[107.50000000 91.71001434]
[107.65603638 106.70919800]
[107.96809387 121.70595551]
[108.28015137 136.70271301]
[108.59220886 151.69946289]
[108.90425873 166.69621277]
[109.21631622 181.69296265]
[109.52837372 196.68972778]
[109.84043121 211.68647766]
[110.15248871 226.68322754]
[110.46454620 241.67997742]
[125.11953735 245.27075195]
[138.34533691 252.53300476]
[149.24021912 262.97161865]
[157.06130981 275.87481689]
[161.27537537 290.36288452]
[161.59510803 305.44796753]
[157.99867249 320.10159302]
[150.73130798 333.32458496]
[140.28851318 344.21542358]
[127.38227844 352.03152466]
[112.89258575 356.24002075]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[24 127]
[25 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
