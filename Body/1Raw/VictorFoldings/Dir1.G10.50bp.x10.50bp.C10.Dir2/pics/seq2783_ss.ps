%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUGUCUCUUGGGGGGGGGGACUUUUAACCAGUGAAAUUGACCUGCCCGUGAAGAGGCGGGCAUAACACAxxxxxxxxxxCAUCCCCCUUCCAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCCCCCCCCCCCGCUGUCACUU\
) } def
/len { sequence length } bind def

/coor [
[83.93748474 391.26037598]
[70.71728516 383.98791504]
[59.83047867 373.54089355]
[52.01934814 360.63165283]
[47.81646729 346.14035034]
[47.50839615 331.05499268]
[51.11613846 316.40417480]
[58.39371109 303.18679810]
[68.84491730 292.30401611]
[81.75717926 284.49786377]
[96.25011444 280.30059814]
[95.93805695 265.30383301]
[95.62600708 250.30708313]
[95.31394958 235.31033325]
[95.00189209 220.31356812]
[94.68983459 205.31681824]
[94.37777710 190.32006836]
[94.06571960 175.32331848]
[93.75366974 160.32655334]
[93.44161224 145.32980347]
[93.12955475 130.33305359]
[82.08742523 125.42512512]
[73.74925232 116.67919159]
[59.52247620 121.43300629]
[45.29569626 126.18682098]
[41.59783173 141.16444397]
[30.37378120 151.74859619]
[15.20510197 154.56192017]
[0.93206346 148.70666504]
[-7.89086008 136.05125427]
[-8.44830608 120.63396454]
[-0.56239480 107.37439728]
[13.25050735 100.50364685]
[28.58275414 102.21412659]
[40.54188156 111.96004486]
[54.76866150 107.20623016]
[68.99543762 102.45241547]
[69.24251556 95.38757324]
[71.07860565 88.56102753]
[74.40884399 82.32543945]
[79.06118774 77.00296783]
[84.79528809 72.86858368]
[91.31489563 70.13587189]
[98.28319550 68.94602203]
[105.34019470 69.36048889]
[111.40320587 55.64043808]
[107.47936249 43.30928802]
[112.86138153 31.98441315]
[124.15341187 27.53499031]
[130.50054932 13.94404030]
[136.84767151 0.35308921]
[143.19480896 -13.23786163]
[148.24356079 -27.36266518]
[151.94972229 -41.89760208]
[155.65588379 -56.43253708]
[159.36204529 -70.96747589]
[163.06820679 -85.50241089]
[162.15634155 -94.65775299]
[167.00561523 -100.29958344]
[171.01335144 -114.75427246]
[175.02108765 -129.20896912]
[161.27828979 -135.28790283]
[148.56710815 -143.30310059]
[137.15844727 -153.08370972]
[127.29551697 -164.42127991]
[119.18852234 -177.07412720]
[113.01028442 -190.77256775]
[108.89247894 -205.22460938]
[106.92288208 -220.12220764]
[107.14347076 -235.14782715]
[109.54955292 -249.98118591]
[114.08983612 -264.30612183]
[120.66754913 -277.81729126]
[129.14248657 -290.22668457]
[139.33398438 -301.26983643]
[151.02484131 -310.71133423]
[163.96585083 -318.34991455]
[177.88117981 -324.02279663]
[192.47421265 -327.60903931]
[207.43391418 -329.03222656]
[222.44139099 -328.26199341]
[237.17678833 -325.31478882]
[251.32598877 -320.25338745]
[264.58743286 -313.18569946]
[276.67843628 -304.26239014]
[287.34127808 -293.67364502]
[296.34869385 -281.64514160]
[303.50863647 -268.43331909]
[308.66857910 -254.31973267]
[311.71847534 -239.60525513]
[312.59332275 -224.60350037]
[311.27447510 -209.63424683]
[307.79006958 -195.01657104]
[302.21435547 -181.06202698]
[294.66616821 -168.06806946]
[285.30642700 -156.31166077]
[274.33459473 -146.04341125]
[261.98458862 -137.48216248]
[248.51962280 -130.81039429]
[234.22669983 -126.17034912]
[219.41046143 -123.66089630]
[204.38674927 -123.33554840]
[189.47578430 -125.20122528]
[185.46803284 -110.74653625]
[181.46029663 -96.29184723]
[177.60313416 -81.79624939]
[173.89697266 -67.26131439]
[170.19081116 -52.72637558]
[166.48464966 -38.19144058]
[162.77848816 -23.65650368]
[175.05734253 -32.27218628]
[190.03819275 -33.02982712]
[203.12362671 -25.69692230]
[210.29788208 -12.52383995]
[209.35926819 2.44676471]
[200.59584045 14.62060547]
[186.69699097 20.26168633]
[171.92808533 17.63883018]
[160.82151794 7.55695820]
[156.78575134 -6.89073229]
[150.43862915 6.70021868]
[144.09149170 20.29117012]
[137.74436951 33.88212204]
[140.22988892 51.22634506]
[125.12326050 61.70345306]
[119.06024933 75.42350769]
[130.64276123 94.67848969]
[126.23039246 116.71118927]
[108.12630463 130.02099609]
[108.43836212 145.01774597]
[108.75041962 160.01451111]
[109.06247711 175.01126099]
[109.37453461 190.00801086]
[109.68659210 205.00476074]
[109.99864197 220.00152588]
[110.31069946 234.99827576]
[110.62275696 249.99502563]
[110.93481445 264.99179077]
[111.24687195 279.98852539]
[125.90186310 283.57931519]
[139.12767029 290.84155273]
[150.02253723 301.28015137]
[157.84364319 314.18338013]
[162.05770874 328.67141724]
[162.37742615 343.75653076]
[158.78100586 358.41012573]
[151.51364136 371.63314819]
[141.07083130 382.52398682]
[128.16461182 390.34008789]
[113.67491913 394.54855347]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 37]
[24 36]
[25 35]
[45 126]
[46 125]
[49 123]
[50 122]
[51 121]
[52 120]
[53 110]
[54 109]
[55 108]
[56 107]
[57 106]
[59 105]
[60 104]
[61 103]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
