%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACUUCCCCUAUGGGGGGGGGGCAUAGAAGAGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCxxxxxxxxxxCUGAACCUACGAGUACACCGACUACGGCGGACUAAUCUUCAACUCCUACACCCCCCCCCCUACUUCCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[95.38415527 521.93811035]
[81.22354889 516.78308105]
[68.63380432 508.50088501]
[58.29386520 497.53811646]
[50.76135635 484.48599243]
[46.44248962 470.04840088]
[45.57018280 455.00393677]
[48.19147110 440.16394043]
[54.16499710 426.32870483]
[63.16861725 414.24435425]
[74.71677399 404.56256104]
[88.18669128 397.80548096]
[102.85195160 394.33752441]
[102.85195160 379.33752441]
[102.85195160 364.33752441]
[102.85195160 349.33752441]
[102.85195160 334.33752441]
[102.85195160 319.33752441]
[102.85195160 304.33752441]
[102.85195160 289.33752441]
[102.85195160 274.33752441]
[102.85195160 259.33752441]
[92.17107391 249.01983643]
[91.95739746 233.80770874]
[102.85195160 222.67457581]
[102.85195160 207.67457581]
[102.85195160 192.67457581]
[101.94043732 177.70230103]
[100.12078094 162.81307983]
[98.30112457 147.92385864]
[96.48146057 133.03463745]
[87.43228912 130.75256348]
[79.37489319 126.04366302]
[72.94511414 119.27954102]
[68.65036011 110.99398804]
[66.82955170 101.84084320]
[52.05160522 99.26939392]
[37.27365875 96.69794464]
[22.49571419 94.12649536]
[10.65670967 104.34275818]
[-4.98000908 104.50720978]
[-17.03126144 94.54220581]
[-19.80681610 79.15291595]
[-11.99613857 65.60569000]
[2.71280622 60.29711533]
[17.37490463 65.73373413]
[25.06716347 79.34854889]
[39.84510803 81.91999817]
[54.62305069 84.49144745]
[69.40099335 87.06289673]
[74.75492859 75.76373291]
[84.31247711 66.74415588]
[97.08271027 61.56596375]
[94.36163330 46.81483841]
[79.33193207 47.13767624]
[64.44509125 45.04526520]
[50.08671951 40.59180069]
[36.62873077 33.89263916]
[24.41972351 25.12130737]
[13.77593517 14.50500202]
[4.97306776 2.31871057]
[-1.76086283 -11.12191200]
[-6.25143242 -25.46872330]
[-8.38232422 -40.35010147]
[-8.09834290 -55.38058853]
[-5.40684414 -70.17085266]
[-0.37754452 -84.33779907]
[6.85928488 -97.51446533]
[16.11619377 -109.35954285]
[27.15340424 -119.56621552]
[39.68502808 -127.87010193]
[53.38646317 -134.05612183]
[67.90280914 -137.96403503]
[82.85806274 -139.49261475]
[97.86484528 -138.60227966]
[112.53443909 -135.31608582]
[126.48687744 -129.71914673]
[139.36074829 -121.95643616]
[150.82258606 -112.22903442]
[160.57551575 -100.78890228]
[168.36689758 -87.93236542]
[173.99491882 -73.99243927]
[177.31381226 -59.33020782]
[178.23760986 -44.32544708]
[176.74235535 -29.36682510]
[172.86680603 -14.84180069]
[166.71134949 -1.12661052]
[158.43540955 11.42349052]
[148.25337219 22.48342514]
[136.42895508 31.76671410]
[123.26845551 39.03289795]
[109.11275482 44.09376144]
[111.83383179 58.84488678]
[125.30090332 65.45079803]
[138.63131714 58.57330704]
[151.96174622 51.69581604]
[160.67832947 38.49234772]
[175.53654480 39.53299713]
[184.25312805 26.32952881]
[199.11134338 27.37018013]
[212.44175720 20.49268723]
[225.77218628 13.61519527]
[234.17388916 -0.46824697]
[250.56526184 0.03664308]
[258.08425903 14.61047840]
[248.99598694 28.26094627]
[232.64967346 26.94561577]
[219.31925964 33.82310867]
[205.98883057 40.70059967]
[198.22572327 53.41214371]
[182.41403198 52.86341858]
[174.65092468 65.57496643]
[158.83923340 65.02623749]
[145.50881958 71.90373230]
[132.17839050 78.78121948]
[136.76393127 100.68070984]
[128.48258972 120.33353424]
[111.37068176 131.21498108]
[113.19033813 146.10420227]
[115.00999451 160.99342346]
[116.82965851 175.88264465]
[127.18607330 165.03161621]
[142.17645264 164.49452209]
[153.28288269 174.57653809]
[154.19442749 189.54881287]
[144.39311218 200.90373230]
[129.44828796 202.18914795]
[117.85195160 192.67457581]
[117.85195160 207.67457581]
[117.85195160 222.67457581]
[128.74650574 233.80770874]
[128.53282166 249.01983643]
[117.85195160 259.33752441]
[117.85195160 274.33752441]
[117.85195160 289.33752441]
[117.85195160 304.33752441]
[117.85195160 319.33752441]
[117.85195160 334.33752441]
[117.85195160 349.33752441]
[117.85195160 364.33752441]
[117.85195160 379.33752441]
[117.85195160 394.33752441]
[132.51721191 397.80548096]
[145.98712158 404.56256104]
[157.53527832 414.24435425]
[166.53889465 426.32870483]
[172.51242065 440.16394043]
[175.13371277 455.00393677]
[174.26141357 470.04840088]
[169.94255066 484.48599243]
[162.41003418 497.53811646]
[152.07009888 508.50088501]
[139.48034668 516.78308105]
[125.31974792 521.93811035]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[25 130]
[26 129]
[27 128]
[28 121]
[29 120]
[30 119]
[31 118]
[36 50]
[37 49]
[38 48]
[39 47]
[53 93]
[54 92]
[94 115]
[95 114]
[96 113]
[98 111]
[100 109]
[101 108]
[102 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
