%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAGCCUGCGUGGGGGGGGGGCAGAUUAAAACACUGAACUGACAAUUAACAGCCCAAUAUCUACAAUCAACxxxxxxxxxxCACAAUUCUAAUUCUACUGACUAUCCUAGAAAUCGCUGUCGCCUUAAUCCCCCCCCCCCCAAGCCUACGU\
) } def
/len { sequence length } bind def

/coor [
[81.92073822 362.52941895]
[69.36251068 354.17825317]
[59.27629089 342.96582031]
[52.29609680 329.59689331]
[48.86071014 314.91189575]
[49.18608856 299.83395386]
[53.25177383 285.31082153]
[60.80219269 272.25549316]
[71.36272430 261.48858643]
[84.26951599 253.68695068]
[98.71124268 249.34100342]
[98.08726501 234.35398865]
[97.46328735 219.36697388]
[96.83930969 204.37995911]
[96.21533203 189.39294434]
[95.59135437 174.40592957]
[94.96738434 159.41891479]
[94.34340668 144.43188477]
[93.71942902 129.44487000]
[93.09545135 114.45786285]
[80.83308411 105.81874084]
[66.51048279 110.27555847]
[52.18788528 114.73237610]
[50.84101486 129.87351990]
[43.79796982 143.34437561]
[32.13276291 153.09072876]
[17.62425995 157.62634277]
[2.48489642 156.25955200]
[-10.97668266 149.19879150]
[-20.70768547 137.52078247]
[-25.22420311 123.00632477]
[-23.83749962 107.86876678]
[-16.75903893 94.41648865]
[-5.06823349 84.70085907]
[9.45215416 80.20343781]
[24.58786964 81.61005402]
[38.03082657 88.70619965]
[47.73107147 100.40977478]
[62.05366898 95.95296478]
[76.37626648 91.49614716]
[82.49541473 88.86433411]
[88.43990326 88.38808441]
[93.59162140 89.82623291]
[97.43699646 92.77879333]
[103.78412628 79.18784332]
[110.13125610 65.59689331]
[116.47838593 52.00593948]
[122.11034393 38.10338211]
[127.01189423 23.92682457]
[131.91343689 9.75026608]
[136.81498718 -4.42629147]
[141.71653748 -18.60284996]
[128.07734680 -24.87492180]
[115.11859131 -32.45368576]
[102.96510315 -41.26614761]
[91.73392487 -51.22743988]
[81.53321075 -62.24163055]
[72.46121979 -74.20263672]
[64.60530853 -86.99526978]
[58.04113770 -100.49632263]
[52.83192825 -114.57577515]
[49.02785110 -129.09802246]
[46.66553879 -143.92321777]
[45.76774216 -158.90856934]
[46.34310532 -173.90975952]
[48.38609695 -188.78231812]
[51.87702942 -203.38301086]
[56.78229141 -217.57121277]
[63.05463409 -231.21029663]
[70.63365936 -244.16888428]
[79.44636536 -256.32220459]
[89.40788269 -267.55319214]
[100.42227173 -277.75366211]
[112.38346100 -286.82543945]
[125.17625427 -294.68109131]
[138.67744446 -301.24499512]
[152.75698853 -306.45391846]
[167.27931213 -310.25769043]
[182.10455322 -312.61972046]
[197.08992004 -313.51721191]
[212.09111023 -312.94155884]
[226.96362305 -310.89825439]
[241.56423950 -307.40704346]
[255.75234985 -302.50149536]
[269.39129639 -296.22888184]
[282.34976196 -288.64959717]
[294.50289917 -279.83663940]
[305.73367310 -269.87490845]
[315.93392944 -258.86029053]
[325.00546265 -246.89892578]
[332.86087036 -234.10598755]
[339.42449951 -220.60467529]
[344.63311768 -206.52500916]
[348.43661499 -192.00260925]
[350.79833984 -177.17732239]
[351.69555664 -162.19194031]
[351.11956787 -147.19076538]
[349.07598877 -132.31828308]
[345.58447266 -117.71773529]
[340.67864990 -103.52973175]
[334.40576172 -89.89089966]
[326.82623291 -76.93260956]
[318.01303101 -64.77964783]
[308.05105591 -53.54906464]
[297.03625488 -43.34901428]
[285.07470703 -34.27773666]
[272.28161621 -26.42259407]
[258.78015137 -19.85923386]
[244.70039368 -14.65087032]
[230.17791748 -10.84766293]
[215.35258484 -8.48623848]
[200.36717224 -7.58934116]
[185.36601257 -8.16560745]
[170.49359131 -10.20948792]
[155.89309692 -13.70129871]
[150.99154663 0.47525921]
[146.08999634 14.65181732]
[141.18844604 28.82837486]
[136.28689575 43.00493240]
[150.81034851 39.25400543]
[162.92510986 48.09891510]
[163.77629089 63.07474518]
[152.74172974 73.23537445]
[137.88681030 71.15421295]
[130.06933594 58.35306931]
[123.72220612 71.94401550]
[117.37507629 85.53497314]
[111.02794647 99.12592316]
[108.08246613 113.83388519]
[108.70644379 128.82089233]
[109.33042145 143.80792236]
[109.95439911 158.79493713]
[110.57837677 173.78195190]
[111.20235443 188.76896667]
[111.82633209 203.75598145]
[112.45030975 218.74299622]
[113.07428741 233.73001099]
[113.69825745 248.71702576]
[128.45126343 251.84747314]
[141.96189880 258.54922485]
[153.38087463 268.40100098]
[161.99038696 280.78353882]
[167.24923706 294.91845703]
[168.82684326 309.91717529]
[166.62403870 324.83691406]
[160.77929688 338.73977661]
[151.66001892 350.75183105]
[139.83944702 360.11798096]
[126.06063080 366.24948120]
[111.18973541 368.76089478]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 40]
[22 39]
[23 38]
[44 128]
[45 127]
[46 126]
[47 125]
[48 119]
[49 118]
[50 117]
[51 116]
[52 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
