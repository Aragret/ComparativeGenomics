%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUAAAACUAGGGGGGGGGGGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCxxxxxxxxxxCCAUCGCUGUAGUAUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUCCCCCCCCCCAAAAAAACUA\
) } def
/len { sequence length } bind def

/coor [
[86.78943634 417.29818726]
[71.91854095 414.78680420]
[58.13972855 408.65530396]
[46.31915665 399.28915405]
[37.19987488 387.27709961]
[31.35512924 373.37423706]
[29.15232468 358.45449829]
[30.72993088 343.45574951]
[35.98877716 329.32086182]
[44.59828949 316.93832397]
[56.01726913 307.08654785]
[69.52790833 300.38479614]
[84.28091431 297.25433350]
[84.90488434 282.26733398]
[85.52886200 267.28030396]
[86.15283966 252.29328918]
[86.77681732 237.30627441]
[87.40079498 222.31925964]
[88.02477264 207.33224487]
[88.64875031 192.34523010]
[89.27272797 177.35821533]
[89.89670563 162.37120056]
[90.52068329 147.38418579]
[91.14466095 132.39717102]
[91.76863861 117.41014862]
[78.58921051 104.61895752]
[81.29071808 84.10647583]
[67.16591644 79.05771637]
[53.04111481 74.00896454]
[43.33455658 85.62826538]
[30.26286888 93.21133423]
[15.41340160 95.85964203]
[0.58177853 93.27255249]
[-12.44523525 85.78133392]
[-22.10498428 74.30685425]
[-27.24636459 60.24643707]
[-27.26696968 45.30371475]
[-41.39177322 40.25495911]
[-55.51657486 35.20620346]
[-69.64138031 30.15744781]
[-83.76618195 25.10869026]
[-97.89098358 20.05993462]
[-112.01578522 15.01117897]
[-127.07313538 20.54793739]
[-140.71478271 12.10487843]
[-142.47599792 -3.84120631]
[-131.00575256 -15.05784607]
[-115.10302734 -12.94059372]
[-106.96703339 0.88637549]
[-92.84222412 5.93513203]
[-78.71742249 10.98388863]
[-64.59262085 16.03264427]
[-50.46781921 21.08140182]
[-36.34301376 26.13015747]
[-22.21821213 31.17891312]
[-12.73022747 19.63493538]
[0.15899821 12.01936150]
[14.90363407 9.26795959]
[29.72763634 11.73178005]
[42.83868027 19.13249588]
[52.64485931 30.59369469]
[57.94796371 44.74463654]
[58.08987045 59.88415909]
[72.21467590 64.93291473]
[86.33947754 69.98167419]
[101.04743958 67.03618622]
[92.15465546 54.93923950]
[84.57508850 41.97900009]
[78.39177704 28.29746628]
[73.67247009 14.04454136]
[70.46887970 -0.62361181]
[68.81610107 -15.54627991]
[68.73224640 -30.55996323]
[70.21823120 -45.50016403]
[73.25777435 -60.20318604]
[77.81757355 -74.50793457]
[83.84767151 -88.25769043]
[91.28199005 -101.30178833]
[100.03909302 -113.49731445]
[110.02301788 -124.71065521]
[121.12437439 -134.81893921]
[133.22154236 -143.71142578]
[146.18196106 -151.29067993]
[159.86364746 -157.47366333]
[174.11668396 -162.19262695]
[188.78492737 -165.39585876]
[203.70762634 -167.04827881]
[218.72131348 -167.13177490]
[233.66148376 -165.64541626]
[248.36442566 -162.60551453]
[262.66906738 -158.04537964]
[276.41867065 -152.01493835]
[289.46258545 -144.58030701]
[301.65789795 -135.82290649]
[312.87100220 -125.83870697]
[322.97903442 -114.73710632]
[331.87121582 -102.63972473]
[339.45016479 -89.67911530]
[345.63281250 -75.99727631]
[350.35140991 -61.74412537]
[353.55429077 -47.07581711]
[355.20635986 -32.15306854]
[355.28948975 -17.13938141]
[353.80276489 -2.19925380]
[350.76251221 12.50362110]
[346.20202637 26.80815315]
[340.17123413 40.55760956]
[332.73629761 53.60134888]
[323.97860718 65.79645538]
[313.99414062 77.00930786]
[302.89227295 87.11705780]
[290.79467773 96.00895691]
[277.83389282 103.58757782]
[264.15191650 109.76988983]
[249.89863586 114.48815918]
[235.23025513 117.69068146]
[220.30746460 119.34237671]
[205.29377747 119.42514038]
[190.35368347 117.93806458]
[175.65087891 114.89745331]
[161.34646606 110.33660889]
[147.59715271 104.30551147]
[134.55358887 96.87023163]
[122.35869598 88.11224365]
[111.14608765 78.12750244]
[121.56398773 92.64082336]
[119.00360870 108.98712921]
[106.75565338 118.03412628]
[106.13167572 133.02113342]
[105.50769806 148.00816345]
[104.88372040 162.99517822]
[104.25974274 177.98219299]
[103.63576508 192.96920776]
[103.01178741 207.95622253]
[102.38780975 222.94323730]
[101.76383972 237.93025208]
[101.13986206 252.91726685]
[100.51588440 267.90429688]
[99.89190674 282.89129639]
[99.26792908 297.87832642]
[113.70965576 302.22427368]
[126.61644745 310.02590942]
[137.17697144 320.79278564]
[144.72740173 333.84814453]
[148.79307556 348.37124634]
[149.11845398 363.44921875]
[145.68307495 378.13421631]
[138.70288086 391.50311279]
[128.61665344 402.71557617]
[116.05843353 411.06671143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 128]
[27 65]
[28 64]
[29 63]
[37 55]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[66 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
