%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCACUACGGGGGGGGGGCUAAAAAAUCCCAAACAUAUAACUGAACUCCUCACACCCAAUUGGACCAAxxxxxxxxxxACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACUCCCCCCCCCCCACCCACCAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 390.01263428]
[71.19830322 383.99661255]
[59.48964310 374.46719360]
[50.78712082 362.13153076]
[45.73651886 347.90499878]
[44.71262741 332.84332275]
[47.79142761 318.06417847]
[54.74444962 304.66424561]
[65.05573273 293.63790894]
[77.96011353 285.80340576]
[92.50000000 281.74209595]
[92.50000000 266.74209595]
[92.50000000 251.74209595]
[92.50000000 236.74209595]
[92.50000000 221.74209595]
[92.50000000 206.74209595]
[92.50000000 191.74209595]
[92.50000000 176.74209595]
[92.50000000 161.74209595]
[92.50000000 146.74209595]
[79.59652710 142.71734619]
[68.35639954 135.21015930]
[59.69594574 124.83255768]
[54.32117844 112.43054199]
[52.67027283 99.01515198]
[54.87781143 85.68004608]
[60.76382828 73.51234436]
[69.84848022 63.50398636]
[81.39116669 56.47087860]
[94.45088959 52.98638153]
[95.07486725 37.99936295]
[95.69884491 23.01234818]
[96.32282257 8.02533245]
[81.41207886 6.33328009]
[66.66004181 3.58181429]
[52.14187622 -0.21504511]
[37.93156815 -5.03794956]
[24.10153008 -10.86232185]
[10.72223854 -17.65848351]
[-2.13812900 -25.39179993]
[-14.41403866 -34.02286911]
[-26.04293442 -43.50770187]
[-36.96555710 -53.79796600]
[-47.12624741 -64.84123230]
[-56.47322845 -76.58121490]
[-64.95886993 -88.95809174]
[-72.53992462 -101.90879822]
[-79.17777252 -115.36734009]
[-84.83857727 -129.26512146]
[-89.49349976 -143.53134155]
[-93.11881256 -158.09329224]
[-95.69605255 -172.87677002]
[-97.21207428 -187.80644226]
[-97.65916443 -202.80621338]
[-97.03503418 -217.79966736]
[-95.34286499 -232.71040344]
[-92.59128571 -247.46241760]
[-88.79431915 -261.98056030]
[-83.97130585 -276.19082642]
[-78.14682770 -290.02081299]
[-71.35056305 -303.40005493]
[-63.61714554 -316.26037598]
[-54.98598480 -328.53622437]
[-45.50106049 -340.16503906]
[-35.21071243 -351.08758545]
[-24.16737175 -361.24816895]
[-12.42731667 -370.59506226]
[-0.05037045 -379.08062744]
[12.90039444 -386.66159058]
[26.35898399 -393.29931641]
[40.25681686 -398.96002197]
[54.52307129 -403.61483765]
[69.08504486 -407.24005127]
[83.86853790 -409.81716919]
[98.79821777 -411.33306885]
[113.79800415 -411.78002930]
[128.79145813 -411.15579224]
[143.70216370 -409.46350098]
[158.45416260 -406.71182251]
[172.97227478 -402.91473389]
[187.18251038 -398.09161377]
[201.01245117 -392.26702881]
[214.39164734 -385.47067261]
[227.25189209 -377.73715210]
[239.52766418 -369.10589600]
[251.15641785 -359.62088013]
[262.07888794 -349.33044434]
[272.23941040 -338.28704834]
[281.58621216 -326.54690552]
[290.07165527 -314.16989136]
[297.65252686 -301.21908569]
[304.29016113 -287.76043701]
[309.95074463 -273.86254883]
[314.60543823 -259.59628296]
[318.23056030 -245.03427124]
[320.80755615 -230.25074768]
[322.32336426 -215.32106018]
[322.77020264 -200.32127380]
[322.14584351 -185.32783508]
[320.45346069 -170.41712952]
[317.70166016 -155.66514587]
[313.90444946 -141.14706421]
[309.08123779 -126.93687439]
[303.25653076 -113.10697174]
[296.46005249 -99.72783661]
[288.72644043 -86.86764526]
[280.09509277 -74.59193420]
[270.61001587 -62.96325684]
[260.31948853 -52.04087067]
[249.27598572 -41.88043213]
[237.53578186 -32.53372192]
[225.15870667 -24.04836845]
[212.20782471 -16.46760750]
[198.74914551 -9.83007145]
[184.85122681 -4.16958427]
[170.58489990 0.48500961]
[156.02285767 4.10999107]
[141.23933411 6.68688774]
[126.30963135 8.20256901]
[111.30983734 8.64931011]
[110.68585968 23.63632584]
[110.06188965 38.62334061]
[109.43791199 53.61035919]
[124.68070221 59.60277176]
[136.96926880 70.43065643]
[144.83268738 84.79792023]
[147.32972717 100.98484802]
[144.16149902 117.05389404]
[135.70722961 131.08161926]
[122.97887421 141.38894653]
[107.50000000 146.74209595]
[107.50000000 161.74209595]
[107.50000000 176.74209595]
[107.50000000 191.74209595]
[107.50000000 206.74209595]
[107.50000000 221.74209595]
[107.50000000 236.74209595]
[107.50000000 251.74209595]
[107.50000000 266.74209595]
[107.50000000 281.74209595]
[122.03988647 285.80340576]
[134.94427490 293.63790894]
[145.25555420 304.66424561]
[152.20857239 318.06417847]
[155.28736877 332.84332275]
[154.26348877 347.90499878]
[149.21287537 362.13153076]
[140.51036072 374.46719360]
[128.80169678 383.99661255]
[114.95575714 390.01263428]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[30 123]
[31 122]
[32 121]
[33 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
