%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUCACCAUGGGGGGGGGGUGGCAGCCUAGCAUUAGCAGGAAUACCUUUCCUCACAGGUUUCUACUCCAxxxxxxxxxxUAAAUACUUGACCACCUGUAGUACAUAAAAACCCAAUCCACAUCAAAACCCCCCCCCCCCCCCUCCCCAU\
) } def
/len { sequence length } bind def

/coor [
[59.18197632 425.52694702]
[46.62375259 417.17578125]
[36.53752899 405.96334839]
[29.55733681 392.59445190]
[26.12195206 377.90945435]
[26.44733047 362.83148193]
[30.51301384 348.30838013]
[38.06343460 335.25302124]
[48.62396240 324.48614502]
[61.53075790 316.68450928]
[75.97248840 312.33853149]
[75.34851074 297.35153198]
[74.72453308 282.36450195]
[74.10055542 267.37750244]
[73.47657776 252.39048767]
[72.85260010 237.40347290]
[72.22862244 222.41644287]
[71.60464478 207.42942810]
[70.98066711 192.44241333]
[70.35668945 177.45539856]
[69.73271179 162.46838379]
[56.56412888 155.28587341]
[43.62607193 162.87577820]
[33.02364731 176.10548401]
[17.37592697 169.57974243]
[19.31491661 152.73704529]
[36.03616714 149.93772888]
[48.97422028 142.34782410]
[46.52344513 135.25953674]
[41.62189484 121.08298492]
[39.17111969 113.99470520]
[24.30807304 116.01703644]
[11.67945766 126.47888184]
[-3.59883404 120.52020264]
[-5.80980492 104.27078247]
[7.32100201 94.44663239]
[22.28573799 101.15399170]
[37.14878464 99.13166046]
[38.70636749 84.21274567]
[24.58156395 79.16398621]
[10.45676041 74.11523438]
[-3.66804266 69.06647491]
[-17.79284477 64.01772308]
[-32.85019684 69.55448151]
[-46.49183655 61.11141968]
[-48.25306320 45.16533279]
[-36.78281784 33.94869614]
[-20.88008881 36.06594849]
[-12.74408913 49.89291763]
[1.38071358 54.94167328]
[15.50551701 59.99042892]
[29.63031960 65.03918457]
[43.75512314 70.08794403]
[70.69756317 57.72860336]
[94.91230774 61.16707611]
[95.84793091 46.19628525]
[96.78356171 31.22549438]
[97.71919250 16.25470352]
[98.65481567 1.28391171]
[99.59044647 -13.68688011]
[91.00499725 -29.94326210]
[101.19777679 -44.19483566]
[101.82175446 -59.18185043]
[87.28505707 -63.13559723]
[73.99285889 -70.22539520]
[62.61189270 -80.09562683]
[53.71302795 -92.25119781]
[47.74262238 -106.08239746]
[45.00015259 -120.89544678]
[45.62318039 -135.94734192]
[49.58044815 -150.48309326]
[56.67346954 -163.77355957]
[66.54645538 -175.15213013]
[78.70418549 -184.04804993]
[92.53682709 -190.01510620]
[107.35054779 -192.75398254]
[122.40229034 -192.12731934]
[136.93707275 -188.16651917]
[150.22583008 -181.07028198]
[161.60200500 -171.19454956]
[170.49497986 -159.03465271]
[176.45867920 -145.20057678]
[179.19396973 -130.38618469]
[178.56365967 -115.33459473]
[174.59934998 -100.80077362]
[167.49987793 -87.51373291]
[157.62138367 -76.13995361]
[145.45935059 -67.24992371]
[131.62380981 -61.28957367]
[116.80876923 -58.55787277]
[116.18479156 -43.57085800]
[124.15966034 -34.42160416]
[123.72242737 -21.89053154]
[114.56124115 -12.75125122]
[113.62561035 2.21954012]
[112.68997955 17.19033241]
[111.75435638 32.16112137]
[110.81872559 47.13191605]
[109.88309479 62.10270691]
[127.25820160 71.87757111]
[137.57046509 88.93921661]
[152.50476074 87.53691101]
[156.04032898 72.81350708]
[164.16711426 60.03719711]
[176.00358582 50.59385681]
[190.26580811 45.50782394]
[205.40672302 45.33079529]
[219.78396606 50.08197784]
[231.83798218 59.24599457]
[240.26126099 71.82880402]
[244.14010620 86.46551514]
[243.05377197 101.56844330]
[237.12007141 115.49934387]
[226.98268127 126.74709320]
[213.74119568 134.09162903]
[198.83198547 136.73625183]
[183.87226868 134.39410400]
[170.48477173 127.31923676]
[160.12167358 116.27909851]
[153.90707397 102.47121429]
[138.97276306 103.87351990]
[140.17169189 114.38745117]
[138.40119934 125.64321136]
[133.39608765 136.78269958]
[125.14048004 146.87048340]
[113.88740540 154.96566772]
[100.15808105 160.19830322]
[84.71972656 161.84440613]
[85.34370422 176.83142090]
[85.96768188 191.81843567]
[86.59165955 206.80545044]
[87.21563721 221.79246521]
[87.83961487 236.77949524]
[88.46359253 251.76651001]
[89.08757019 266.75350952]
[89.71154785 281.74053955]
[90.33552551 296.72753906]
[90.95950317 311.71456909]
[105.71250916 314.84500122]
[119.22314453 321.54675293]
[130.64212036 331.39855957]
[139.25163269 343.78109741]
[144.51048279 357.91598511]
[146.08808899 372.91470337]
[143.88528442 387.83444214]
[138.04054260 401.73733521]
[128.92124939 413.74938965]
[117.10068512 423.11553955]
[103.32187653 429.24703979]
[88.45097351 431.75842285]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 28]
[23 27]
[31 38]
[32 37]
[39 53]
[40 52]
[41 51]
[42 50]
[43 49]
[55 99]
[56 98]
[57 97]
[58 96]
[59 95]
[60 94]
[62 91]
[63 90]
[101 121]
[102 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
