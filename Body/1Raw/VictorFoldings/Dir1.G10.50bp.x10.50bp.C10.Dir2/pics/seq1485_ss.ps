%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUUAAAACGGGGGGGGGGUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAxxxxxxxxxxCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGGCCCCCCCCCCAGCUUAAACC\
) } def
/len { sequence length } bind def

/coor [
[92.56069183 410.31521606]
[78.71475220 404.29919434]
[67.00608826 394.76977539]
[58.30356598 382.43411255]
[53.25296402 368.20758057]
[52.22907257 353.14590454]
[55.30787277 338.36672974]
[62.26089478 324.96679688]
[72.57218170 313.94049072]
[85.47656250 306.10595703]
[100.01644897 302.04464722]
[100.01644897 287.04464722]
[100.01644897 272.04464722]
[100.01644897 257.04464722]
[100.01644897 242.04466248]
[100.01644897 227.04466248]
[100.01644897 212.04466248]
[100.01644897 197.04466248]
[100.01644897 182.04466248]
[100.01644897 167.04466248]
[100.01644897 152.04466248]
[100.01644897 137.04466248]
[69.20858765 118.26219177]
[69.68511200 83.41571808]
[55.04161072 86.66654205]
[40.39810944 89.91737366]
[28.60276222 100.46157837]
[14.50113297 95.66644287]
[-0.14236854 98.91726685]
[-14.78586960 102.16809845]
[-26.50113869 113.64347839]
[-42.22187042 108.97543335]
[-45.77592087 92.96603394]
[-33.50719070 82.08438873]
[-18.03669548 87.52459717]
[-3.39319420 84.27376556]
[11.25030708 81.02294159]
[21.99825478 70.71125793]
[37.14728546 75.27387238]
[51.79078674 72.02304077]
[66.43428802 68.77221680]
[73.61679840 55.60363388]
[68.42137909 41.53211594]
[63.22596359 27.46059608]
[58.03054810 13.38907719]
[52.83513260 -0.68244255]
[43.25641632 6.94671202]
[29.00547600 9.18479443]
[12.83224773 4.03204012]
[1.13262391 -5.35512161]
[-10.56699944 -14.74228382]
[-26.60700798 -14.42976284]
[-36.74083710 -26.86701012]
[-33.19467545 -42.51323318]
[-18.68883896 -49.36598969]
[-4.35096264 -42.16843033]
[-1.17983794 -26.44190788]
[10.51978588 -17.05474472]
[22.21940994 -7.66758347]
[28.98150444 -10.91166592]
[22.49354744 -24.43595695]
[36.01793671 -30.92370415]
[42.50569534 -17.39983177]
[49.26778793 -20.64391327]
[49.26778793 -35.64391327]
[49.26778793 -50.64391327]
[49.26778793 -65.64391327]
[35.01511765 -70.80503845]
[23.38918877 -80.53199005]
[15.79388809 -93.65019226]
[13.14638424 -108.57555389]
[15.76637745 -123.50577545]
[23.33749199 -136.63795471]
[34.94547653 -146.38630676]
[49.18861008 -151.57368469]
[64.34696960 -151.57368469]
[78.59010315 -146.38630676]
[90.19808960 -136.63795471]
[97.76920319 -123.50577545]
[100.38919067 -108.57555389]
[97.74169159 -93.65019226]
[90.14639282 -80.53199005]
[78.52046204 -70.80503845]
[64.26779175 -65.64391327]
[64.26779175 -50.64391327]
[64.26779175 -35.64391327]
[64.26779175 -20.64391327]
[66.90665436 -5.87785816]
[72.10206604 8.19366169]
[77.29748535 22.26518059]
[82.49289703 36.33670044]
[87.68831635 50.40821838]
[102.01091003 54.86503601]
[114.27328491 46.22591782]
[126.53565216 37.58680344]
[128.98776245 21.97390175]
[141.81066895 12.73547363]
[157.39677429 15.35251617]
[166.49911499 28.27238464]
[163.71743774 43.82994843]
[150.70205688 52.79518127]
[135.17475891 49.84917068]
[122.91239929 58.48828888]
[110.65003204 67.12740326]
[129.28318787 79.40597534]
[137.02610779 101.17233276]
[152.01879883 101.64038086]
[167.01150513 102.10842133]
[182.00419617 102.57646179]
[196.99688721 103.04450226]
[211.98959351 103.51255035]
[224.61962891 93.62005615]
[240.19468689 97.46679688]
[246.76689148 112.10187531]
[239.29461670 126.29852295]
[223.50994873 129.16627502]
[211.52154541 118.50524139]
[196.52885437 118.03720093]
[181.53614807 117.56916046]
[166.54345703 117.10112000]
[151.55076599 116.63307190]
[136.55805969 116.16503143]
[131.17265320 121.38494110]
[145.59922791 125.49273682]
[149.25515747 140.04039001]
[138.48452759 150.48040771]
[124.05788422 146.37287903]
[120.40184784 131.82475281]
[115.01644897 137.04466248]
[115.01644897 152.04466248]
[115.01644897 167.04466248]
[115.01644897 182.04466248]
[115.01644897 197.04466248]
[115.01644897 212.04466248]
[115.01644897 227.04466248]
[115.01644897 242.04466248]
[115.01644897 257.04464722]
[115.01644897 272.04464722]
[115.01644897 287.04464722]
[115.01644897 302.04464722]
[129.55633545 306.10595703]
[142.46070862 313.94049072]
[152.77200317 324.96679688]
[159.72502136 338.36672974]
[162.80381775 353.14590454]
[161.77992249 368.20758057]
[156.72932434 382.43411255]
[148.02680969 394.76977539]
[136.31814575 404.29919434]
[122.47219849 410.31521606]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[24 41]
[25 40]
[26 39]
[28 37]
[29 36]
[30 35]
[42 92]
[43 91]
[44 90]
[45 89]
[46 88]
[49 59]
[50 58]
[51 57]
[64 87]
[65 86]
[66 85]
[67 84]
[93 104]
[94 103]
[95 102]
[106 122]
[107 121]
[108 120]
[109 119]
[110 118]
[111 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
