%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:26 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GAGCCACAGCGGGGGGGGGGUUAAAACUCAAAGGACCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGxxxxxxxxxxAACAAUAUUCAUGUGCCUAGACCAAGAAGUUAUUAUCUCGAACUGACACUCCCCCCCCCCGAGCCACAAC\
) } def
/len { sequence length } bind def

/coor [
[118.73079681 487.36636353]
[104.88485718 481.35034180]
[93.17619324 471.82092285]
[84.47367096 459.48526001]
[79.42306519 445.25872803]
[78.39917755 430.19705200]
[81.47797394 415.41790771]
[88.43099976 402.01797485]
[98.74227905 390.99163818]
[111.64665985 383.15713501]
[126.18654633 379.09582520]
[126.18654633 364.09582520]
[126.18654633 349.09582520]
[126.18654633 334.09582520]
[126.18654633 319.09582520]
[126.18654633 304.09582520]
[126.18654633 289.09582520]
[126.18654633 274.09582520]
[126.18654633 259.09582520]
[126.18654633 244.09582520]
[108.66207886 215.78283691]
[123.50953674 193.17846680]
[119.20195770 178.81028748]
[114.89437103 164.44209290]
[110.43755341 150.11950684]
[105.83199310 135.84403992]
[101.22642517 121.56858063]
[96.62086487 107.29312134]
[91.36792755 111.61138916]
[84.37282562 113.87666321]
[76.29300690 113.59729004]
[61.33275986 112.50598145]
[46.37250900 111.41467285]
[32.04598999 118.12744904]
[19.91536713 109.48468781]
[4.95511770 108.39337921]
[-10.00513077 107.30207062]
[-24.52235413 114.92980194]
[-38.24037552 105.94381714]
[-37.04727173 89.58812714]
[-22.17040443 82.68806458]
[-8.91382027 92.34181976]
[6.04642820 93.43312836]
[21.00667763 94.52444458]
[34.26314163 87.73360443]
[47.46382141 96.45442200]
[62.42406845 97.54573059]
[77.38431549 98.63703918]
[64.83754730 90.41642761]
[64.27256775 75.42707062]
[76.16492462 66.28530884]
[90.50498199 70.68563843]
[95.22288513 84.92443848]
[98.01521301 70.18663788]
[86.75350189 55.01517487]
[90.03447723 36.73041153]
[105.33618164 26.76771545]
[107.51301575 11.92650986]
[109.68984985 -2.91469574]
[111.86669159 -17.75590134]
[114.04352570 -32.59710693]
[112.22784424 -36.70378113]
[111.88929749 -40.76043701]
[112.82315063 -44.29735565]
[114.69007874 -46.96354675]
[117.06816101 -48.56105423]
[120.47114563 -63.16994476]
[109.53392792 -52.90460205]
[95.53898621 -47.50630569]
[80.54125977 -47.76771545]
[66.74294281 -53.65044403]
[56.17010880 -64.29070282]
[50.37521362 -78.12613678]
[50.20914841 -93.12521362]
[55.69629669 -107.08555603]
[66.03096008 -117.95729828]
[79.69564056 -124.14408875]
[94.68389893 -124.73749542]
[108.79493713 -119.65038300]
[119.95675659 -109.62971497]
[126.53041077 -96.14687347]
[127.55075836 -81.18226624]
[135.00566101 -94.19857788]
[142.46057129 -107.21488953]
[136.89184570 -121.82732391]
[142.06744385 -136.58357239]
[155.54362488 -144.51620483]
[170.95735168 -141.87965393]
[181.03071594 -129.91883850]
[181.00738525 -114.28126526]
[170.89839172 -102.35054016]
[155.47688293 -99.75997925]
[148.02197266 -86.74366760]
[140.56706238 -73.72735596]
[135.08003235 -59.76696777]
[131.67706299 -45.15807724]
[128.88473511 -30.42026901]
[126.70789337 -15.57906437]
[124.53105927 -0.73785877]
[122.35422516 14.10334682]
[120.17738342 28.94455147]
[128.86076355 36.46049881]
[132.85115051 47.35749435]
[131.03775024 58.94133759]
[123.76038361 68.28739166]
[112.75302124 72.97895813]
[109.96069336 87.71676636]
[110.89632416 102.68755341]
[115.50188446 116.96302032]
[120.10745239 131.23847961]
[124.71301270 145.51393127]
[130.36145020 152.77665710]
[129.26255798 160.13452148]
[133.57014465 174.50270081]
[137.87773132 188.87088013]
[151.12095642 189.04035950]
[163.90573120 197.38014221]
[171.23120117 213.05693054]
[185.24792480 218.39843750]
[200.41720581 213.17613220]
[213.88023376 221.90115356]
[215.30934143 237.88043213]
[203.60823059 248.85601807]
[187.75299072 246.40838623]
[179.90640259 232.41514587]
[165.88969421 227.07363892]
[159.71391296 231.32917786]
[168.22480774 243.68089294]
[155.87297058 252.19160461]
[147.36233521 239.84027100]
[141.18655396 244.09582520]
[141.18655396 259.09582520]
[141.18655396 274.09582520]
[141.18655396 289.09582520]
[141.18655396 304.09582520]
[141.18655396 319.09582520]
[141.18655396 334.09582520]
[141.18655396 349.09582520]
[141.18655396 364.09582520]
[141.18655396 379.09582520]
[155.72644043 383.15713501]
[168.63081360 390.99163818]
[178.94210815 402.01797485]
[185.89512634 415.41790771]
[188.97392273 430.19705200]
[187.95002747 445.25872803]
[182.89942932 459.48526001]
[174.19689941 471.82092285]
[162.48825073 481.35034180]
[148.64230347 487.36636353]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 115]
[23 114]
[24 113]
[25 111]
[26 110]
[27 109]
[28 108]
[31 48]
[32 47]
[33 46]
[35 44]
[36 43]
[37 42]
[53 107]
[54 106]
[57 101]
[58 100]
[59 99]
[60 98]
[61 97]
[66 96]
[67 95]
[82 94]
[83 93]
[84 92]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
