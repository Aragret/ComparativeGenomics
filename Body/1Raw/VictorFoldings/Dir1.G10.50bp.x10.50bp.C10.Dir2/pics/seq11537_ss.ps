%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUUCUCUCCUGGGGGGGGGGUAAUGACAUUAACACUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUxxxxxxxxxxGGGUCCCUUGACCACCAUCCUCCGUGAAAUCAAUAUCCCGCACAAGAGUGCCCCCCCCCCCUACUCUCCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 355.12811279]
[71.19830322 349.11209106]
[59.48964310 339.58267212]
[50.78712082 327.24697876]
[45.73651886 313.02047729]
[44.71262741 297.95880127]
[47.79142761 283.17962646]
[54.74444962 269.77969360]
[65.05573273 258.75335693]
[77.96011353 250.91885376]
[92.50000000 246.85754395]
[92.50000000 231.85754395]
[92.50000000 216.85754395]
[92.50000000 201.85754395]
[92.50000000 186.85754395]
[92.50000000 171.85754395]
[92.50000000 156.85754395]
[92.50000000 141.85754395]
[92.50000000 126.85754395]
[92.50000000 111.85754395]
[79.64159393 104.13346100]
[66.39900970 111.17859650]
[53.15642548 118.22373199]
[39.91384125 125.26886749]
[28.77025414 138.04606628]
[13.40754128 130.87506104]
[16.04548264 114.12758636]
[32.86870575 112.02627563]
[46.11128998 104.98114777]
[59.35387802 97.93601227]
[72.59646606 90.89087677]
[84.77901459 89.16745758]
[94.83267975 93.26810455]
[98.53884125 78.73316956]
[102.24500275 64.19823456]
[105.95116425 49.66329575]
[107.19803619 34.71520996]
[105.95116425 19.76712227]
[104.70428467 4.81903458]
[100.85079193 -3.53574944]
[103.59027100 -10.45246029]
[102.65464020 -25.42325211]
[101.71901703 -40.39404297]
[100.78338623 -55.36483383]
[97.83790588 -70.07279968]
[92.93635559 -84.24935150]
[86.79976654 -70.56204987]
[73.87059784 -62.95700836]
[58.92592621 -64.24414062]
[47.48750305 -73.94786835]
[43.78159714 -88.48287201]
[49.17747116 -102.47875214]
[61.68145752 -110.76430511]
[76.67357635 -110.27818298]
[88.61404419 -101.20072174]
[86.12892151 -115.99343109]
[83.64380646 -130.78613281]
[79.10915375 -138.79168701]
[81.26420593 -145.91217041]
[79.08736420 -160.75338745]
[76.91053009 -175.59458923]
[74.73368835 -190.43579102]
[72.55685425 -205.27699280]
[57.66955185 -208.04231262]
[44.48801422 -215.49386597]
[34.44206619 -226.82337952]
[28.62142372 -240.80189514]
[27.65746498 -255.91313171]
[31.65475273 -270.51794434]
[40.17969131 -283.03210449]
[52.30755997 -292.09817505]
[66.72281647 -296.73272705]
[81.86180115 -296.43304443]
[96.08235168 -291.23162842]
[107.84193420 -281.69271851]
[115.86494446 -268.85098267]
[119.28112030 -254.09942627]
[117.71989441 -239.03817749]
[111.35060883 -225.30096436]
[100.86416626 -214.37789917]
[87.39806366 -207.45384216]
[89.57489777 -192.61262512]
[91.75173187 -177.77142334]
[93.92857361 -162.93022156]
[96.10540771 -148.08901978]
[98.43651581 -133.27125549]
[100.92163086 -118.47854614]
[103.40674591 -103.68584442]
[107.11290741 -89.15090179]
[112.01445770 -74.97434998]
[116.01976013 -89.42971039]
[125.47068024 -101.07788849]
[138.79060364 -107.97570801]
[153.75744629 -108.97245789]
[167.87442017 -103.90184784]
[178.78648376 -93.60977936]
[184.67327881 -79.81319427]
[184.55274963 -64.81368256]
[178.44499207 -51.11348724]
[167.36892700 -40.99811554]
[153.17228699 -36.15503693]
[138.22338867 -37.39218521]
[125.01605225 -44.50317383]
[115.75418091 -56.30046463]
[116.68980408 -41.32967377]
[117.62543488 -26.35888100]
[118.56106567 -11.38808918]
[119.65237427 3.57215977]
[120.89924622 18.52024651]
[122.14612579 33.46833420]
[129.11970520 20.18793297]
[140.14997864 10.02264214]
[153.95445251 4.15437126]
[168.92808533 3.26541829]
[183.32991028 7.45914221]
[195.48545837 16.24794197]
[203.98136902 28.60994911]
[207.82987976 43.10784912]
[206.58349609 58.05597687]
[200.38714600 71.71632385]
[189.96127319 82.50062561]
[176.51808167 89.15499115]
[161.62059021 90.90572357]
[147.00094604 87.54926300]
[134.35893250 79.47587585]
[125.16445160 67.62422943]
[120.48609924 53.36945724]
[116.77993774 67.90439606]
[113.07377625 82.43933105]
[109.36761475 96.97426605]
[107.50000000 111.85754395]
[107.50000000 126.85754395]
[107.50000000 141.85754395]
[107.50000000 156.85754395]
[107.50000000 171.85754395]
[107.50000000 186.85754395]
[107.50000000 201.85754395]
[107.50000000 216.85754395]
[107.50000000 231.85754395]
[107.50000000 246.85754395]
[122.03988647 250.91885376]
[134.94427490 258.75335693]
[145.25555420 269.77969360]
[152.20857239 283.17962646]
[155.28736877 297.95880127]
[154.26348877 313.02047729]
[149.21287537 327.24697876]
[140.51036072 339.58267212]
[128.80169678 349.11209106]
[114.95575714 355.12811279]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 31]
[22 30]
[23 29]
[24 28]
[33 130]
[34 129]
[35 128]
[36 127]
[37 110]
[38 109]
[39 108]
[41 107]
[42 106]
[43 105]
[44 104]
[45 90]
[46 89]
[55 88]
[56 87]
[57 86]
[59 85]
[60 84]
[61 83]
[62 82]
[63 81]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
