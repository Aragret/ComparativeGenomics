%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUUUACCAGGGGGGGGGGUCAUUGGACAAGUAGCAUCCGUACUAUACUUCACAACAAUCCUAAUCCUAxxxxxxxxxxGUCCUUGUAGUAUAAACUAAUACACCAGUCUUGUAAACCGGAGAUGAAAACCCCCCCCCCCCUUUUUCCA\
) } def
/len { sequence length } bind def

/coor [
[112.59629059 538.16113281]
[98.75035095 532.14508057]
[87.04168701 522.61566162]
[78.33916473 510.28002930]
[73.28856659 496.05349731]
[72.26467133 480.99182129]
[75.34346771 466.21264648]
[82.29649353 452.81271362]
[92.60778046 441.78640747]
[105.51216125 433.95187378]
[120.05204773 429.89056396]
[120.05204773 414.89056396]
[120.05204773 399.89056396]
[120.05204773 384.89056396]
[120.05204773 369.89056396]
[120.05204773 354.89056396]
[120.05204773 339.89056396]
[120.05204773 324.89056396]
[120.05204773 309.89056396]
[120.05204773 294.89056396]
[120.05204773 279.89056396]
[119.58399963 264.89788818]
[118.64837646 249.92707825]
[117.71274567 234.95629883]
[116.31044006 220.02198792]
[114.44282532 205.13870239]
[112.57521820 190.25543213]
[110.24411011 175.43766785]
[107.45178986 160.69985962]
[104.65946198 145.96205139]
[101.86714172 131.22424316]
[99.07481384 116.48644257]
[90.94268799 114.60178375]
[84.47529602 108.81577301]
[81.47927094 100.32049561]
[82.99147797 91.10533142]
[88.95143890 83.49188995]
[84.94370270 69.03720093]
[71.47062683 61.21964645]
[67.61212158 46.50344467]
[75.14799500 33.70711136]
[71.14025879 19.25242043]
[60.28886414 12.20251751]
[57.27271271 0.03198797]
[63.18577957 -10.56720829]
[59.47961807 -25.10214424]
[55.77345657 -39.63708115]
[52.06729507 -54.17201614]
[48.36113358 -68.70695496]
[44.65497208 -83.24188995]
[40.24901199 -88.31091309]
[39.26307678 -93.99063873]
[41.11040497 -98.45861816]
[38.01208496 -113.13514709]
[34.91376114 -127.81166840]
[31.81544113 -142.48820496]
[16.75909805 -142.50355530]
[2.03504777 -145.64935303]
[-11.71303844 -151.78805542]
[-23.88415146 -160.65133667]
[-33.94622421 -171.85171509]
[-41.45938873 -184.89955139]
[-46.09519577 -199.22445679]
[-47.65099335 -214.20021057]
[-46.05876541 -229.17213440]
[-41.38811493 -243.48571777]
[-33.84323120 -256.51522827]
[-23.75393486 -267.69110107]
[-11.56129074 -276.52471924]
[2.20169020 -282.62997437]
[16.93335152 -285.73992920]
[31.98968697 -285.71865845]
[46.71249771 -282.56707764]
[60.45816803 -276.42294312]
[72.62579346 -267.55490112]
[82.68346405 -256.35055542]
[90.19149017 -243.29975891]
[94.82166290 -228.97303772]
[96.37156677 -213.99667358]
[94.77344513 -199.02537537]
[90.09716797 -184.71362305]
[82.54715729 -171.68707275]
[72.45346832 -160.51519775]
[60.25734711 -151.68635559]
[46.49196625 -145.58651733]
[49.59028625 -130.90998840]
[52.68861008 -116.23346710]
[55.78693008 -101.55694580]
[59.18991089 -86.94805145]
[62.89607239 -72.41311646]
[66.60223389 -57.87817764]
[70.30839539 -43.34324265]
[74.01455688 -28.80830574]
[77.72071838 -14.27336884]
[90.63741302 -2.43449831]
[85.59494781 15.24468136]
[89.60268402 29.69936943]
[102.65196991 36.78821564]
[106.92230225 51.39023590]
[99.39838409 65.02945709]
[103.40612793 79.48414612]
[116.64871216 86.52928162]
[130.87548828 81.77546692]
[141.33584595 69.14561462]
[157.45631409 72.15601349]
[162.65354919 87.70981598]
[151.58106995 99.80661011]
[135.62930298 96.00225067]
[121.40252686 100.75606537]
[113.81262207 113.69412231]
[116.60494232 128.43193054]
[119.39727020 143.16972351]
[122.18959045 157.90753174]
[124.98191833 172.64533997]
[128.47906494 176.69374084]
[129.88716125 181.22911072]
[129.37779236 185.35734558]
[127.45849609 188.38781738]
[129.32611084 203.27108765]
[131.19372559 218.15437317]
[134.43154907 222.41302490]
[135.55400085 227.02740479]
[134.78813171 231.11581421]
[132.68353271 234.02066040]
[133.61917114 248.99145508]
[134.55479431 263.96224976]
[137.52067566 268.41455078]
[138.35311890 273.08996582]
[137.33372498 277.12265015]
[135.05204773 279.89056396]
[135.05204773 294.89056396]
[135.05204773 309.89056396]
[135.05204773 324.89056396]
[135.05204773 339.89056396]
[135.05204773 354.89056396]
[135.05204773 369.89056396]
[135.05204773 384.89056396]
[135.05204773 399.89056396]
[135.05204773 414.89056396]
[135.05204773 429.89056396]
[149.59193420 433.95187378]
[162.49630737 441.78640747]
[172.80760193 452.81271362]
[179.76062012 466.21264648]
[182.83941650 480.99182129]
[181.81552124 496.05349731]
[176.76492310 510.28002930]
[168.06239319 522.61566162]
[156.35374451 532.14508057]
[142.50779724 538.16113281]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 126]
[23 125]
[24 124]
[25 120]
[26 119]
[27 118]
[28 114]
[29 113]
[30 112]
[31 111]
[32 110]
[37 101]
[38 100]
[41 97]
[42 96]
[45 94]
[46 93]
[47 92]
[48 91]
[49 90]
[50 89]
[53 88]
[54 87]
[55 86]
[56 85]
[102 109]
[103 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
