%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUGGGGGGGGGGGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUxxxxxxxxxxAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGAAGCCCCCCCCCCUCCCACUCCU\
) } def
/len { sequence length } bind def

/coor [
[81.28796387 427.96920776]
[66.79827118 423.76071167]
[53.89204025 415.94461060]
[43.44924164 405.05377197]
[36.18187714 391.83078003]
[32.58544922 377.17715454]
[32.90517044 362.09207153]
[37.11924362 347.60400391]
[44.94033813 334.70077515]
[55.83520889 324.26217651]
[69.06101990 316.99993896]
[83.71601105 313.40917969]
[84.02806854 298.41241455]
[84.34011841 283.41564941]
[84.65217590 268.41891479]
[84.96423340 253.42214966]
[85.27629089 238.42539978]
[85.58834839 223.42864990]
[85.90040588 208.43188477]
[86.21245575 193.43513489]
[86.52451324 178.43838501]
[86.83657074 163.44163513]
[87.14862823 148.44487000]
[76.05731201 138.34622192]
[61.15541077 140.05891418]
[46.27212906 141.92652893]
[33.64111710 151.45375061]
[19.98688698 145.50302124]
[5.12383986 147.52536011]
[-9.73920727 149.54768372]
[-24.60225487 151.57002258]
[-39.46530151 153.59236145]
[-52.09391785 164.05419922]
[-67.37220764 158.09552002]
[-69.58317566 141.84609985]
[-56.45237350 132.02194214]
[-41.48763657 138.72930908]
[-26.62458801 136.70697021]
[-11.76154137 134.68464661]
[3.10150504 132.66230774]
[17.96455193 130.63996887]
[29.53246117 121.25739288]
[44.24979401 127.06348419]
[50.49390411 123.01913452]
[59.44271851 125.15701294]
[74.34461975 123.44432068]
[72.26561737 88.23622894]
[99.28398132 74.51176453]
[103.29172516 60.05707550]
[107.29946899 45.60238647]
[106.57826996 36.43005371]
[111.54385376 30.89032745]
[115.85144043 16.52214432]
[102.80463409 14.47359085]
[92.84027100 6.42705488]
[88.37865448 -5.15172195]
[90.24478912 -17.01553345]
[97.54527283 -26.04400444]
[108.01169586 -30.06418610]
[110.80402374 -44.80199051]
[113.59634399 -59.53979874]
[103.54729462 -48.40352249]
[90.80986023 -40.48154831]
[76.37806702 -36.39211655]
[61.37819672 -36.45436859]
[46.98085022 -40.66344452]
[34.30960083 -48.69086838]
[24.35333252 -59.91016769]
[17.88903809 -73.44578552]
[15.42119408 -88.24137878]
[17.14239693 -103.14230347]
[22.91831970 -116.98566437]
[32.29820633 -128.69113159]
[44.55004120 -137.34516907]
[58.71768188 -142.27244568]
[73.69547272 -143.08839417]
[88.31452942 -139.72937012]
[101.43398285 -132.45750427]
[112.02996063 -121.84029388]
[119.27555847 -108.70632172]
[122.60531616 -94.08056641]
[121.75885010 -79.10178375]
[130.26994324 -91.45335388]
[132.58557129 -100.35782623]
[139.08879089 -103.97084045]
[147.85499573 -116.14267731]
[156.62120056 -128.31451416]
[165.38742065 -140.48634338]
[166.49446106 -156.84808350]
[181.33482361 -163.82630920]
[194.64201355 -154.24241638]
[192.72673035 -137.95550537]
[177.55924988 -131.72013855]
[168.79304504 -119.54830170]
[160.02684021 -107.37646484]
[151.26063538 -95.20462799]
[142.62152100 -82.94226074]
[134.11042786 -70.59069061]
[128.33415222 -56.74747467]
[125.54182434 -42.00966644]
[122.74950409 -27.27186203]
[133.28324890 -18.61413002]
[137.13327026 -4.10568047]
[151.62887573 -7.96284008]
[160.88607788 -21.06565094]
[176.90977478 -21.85366249]
[187.40792847 -9.72237778]
[184.32728577 6.02211761]
[170.03102112 13.30199623]
[155.48603821 6.53275633]
[140.99043274 10.38991547]
[130.21961975 20.82972908]
[125.91204071 35.19791412]
[121.75415039 49.61013031]
[117.74641418 64.06481934]
[113.73867035 78.51950836]
[124.07257080 86.07054138]
[130.09231567 98.57369232]
[129.48896790 113.51869202]
[121.41090393 127.37531281]
[134.93508911 133.86347961]
[150.48597717 129.92018127]
[163.17715454 139.73413086]
[163.27304077 155.77690125]
[150.70007324 165.74185181]
[135.10316467 161.98472595]
[128.44692993 147.38766479]
[114.92273712 140.89950562]
[102.14537811 148.75692749]
[101.83332825 163.75367737]
[101.52127075 178.75044250]
[101.20921326 193.74719238]
[100.89715576 208.74394226]
[100.58509827 223.74069214]
[100.27304077 238.73745728]
[99.96099091 253.73420715]
[99.64893341 268.73095703]
[99.33687592 283.72772217]
[99.02481842 298.72445679]
[98.71276093 313.72122192]
[113.20569611 317.91851807]
[126.11795807 325.72463989]
[136.56916809 336.60742188]
[143.84674072 349.82479858]
[147.45448303 364.47564697]
[147.14640808 379.56097412]
[142.94352722 394.05227661]
[135.13240051 406.96154785]
[124.24559784 417.40853882]
[111.02539825 424.68099976]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[23 129]
[24 46]
[25 45]
[26 43]
[28 41]
[29 40]
[30 39]
[31 38]
[32 37]
[48 116]
[49 115]
[50 114]
[52 113]
[53 112]
[59 101]
[60 100]
[61 99]
[82 98]
[83 97]
[85 96]
[86 95]
[87 94]
[88 93]
[103 111]
[104 110]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
