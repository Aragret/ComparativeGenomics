%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAAUACUAGGGGGGGGGGACAUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCxxxxxxxxxxAUACUAGUAUAUCGCUCACACCUCAUAUCCUCCCUACUAUGCCUAGAAGGCCCCCCCCCCAAUAAUACUA\
) } def
/len { sequence length } bind def

/coor [
[92.20070648 385.26266479]
[78.35476685 379.24664307]
[66.64610291 369.71722412]
[57.94358063 357.38153076]
[52.89297867 343.15502930]
[51.86908722 328.09335327]
[54.94788742 313.31417847]
[61.90090942 299.91424561]
[72.21219635 288.88790894]
[85.11657715 281.05340576]
[99.65646362 276.99209595]
[99.65646362 261.99209595]
[99.65646362 246.99209595]
[99.65646362 231.99209595]
[99.65646362 216.99209595]
[99.65646362 201.99209595]
[99.65646362 186.99209595]
[99.65646362 171.99209595]
[99.65646362 156.99209595]
[99.65646362 141.99209595]
[89.52185059 137.12911987]
[81.86217499 130.12648010]
[77.02940369 121.91968536]
[75.06614685 113.46376801]
[75.72382355 105.63912201]
[78.50771332 99.16930389]
[63.60580826 97.45661163]
[48.70390701 95.74391937]
[33.80200195 94.03123474]
[18.90010071 92.31854248]
[3.99819899 90.60585022]
[-10.90370369 88.89316559]
[-17.65843391 102.46332550]
[-28.64921188 112.90261078]
[-42.54884720 118.95040894]
[-57.67889404 119.87643433]
[-72.21232605 115.56885529]
[-84.39414978 106.54782867]
[-92.75336456 93.90270233]
[-96.28054810 79.16042328]
[-94.54978180 64.10119629]
[-87.77005005 50.54349899]
[-76.76005554 40.12449265]
[-62.84929657 34.10231400]
[-47.71757126 33.20417786]
[-33.19210434 37.53853607]
[-21.02692032 46.58199310]
[-12.69102383 59.24250412]
[-9.19101334 73.99125671]
[5.71088886 75.70394897]
[20.61279106 77.41664124]
[35.51469421 79.12932587]
[50.41659546 80.84201813]
[65.31849670 82.55471039]
[80.22039795 84.26739502]
[90.66020966 73.49658966]
[88.48337555 58.65538406]
[86.30654144 43.81417847]
[84.12969971 28.97297287]
[69.11640930 27.66997147]
[54.80848694 22.93921471]
[41.97753906 15.03582859]
[31.31552696 4.38603163]
[23.39743423 -8.43584538]
[18.65027618 -22.73833466]
[17.33006096 -37.75012207]
[19.50798607 -52.66164017]
[25.06659889 -66.66873169]
[33.70613098 -79.01600647]
[44.96066284 -89.03759003]
[58.22325134 -96.19304657]
[72.77866364 -100.09647369]
[87.84194183 -100.53736877]
[102.60073853 -97.49196625]
[116.25914001 -91.12448120]
[128.08056641 -81.77832031]
[137.42749023 -69.95750427]
[143.79585266 -56.29951859]
[146.84220886 -41.54091644]
[146.40229797 -26.47760963]
[142.49980164 -11.92194653]
[135.34521484 1.34110510]
[125.32435608 12.59628487]
[112.97763824 21.23661613]
[98.97090912 26.79613686]
[101.14774323 41.63734055]
[103.32458496 56.47854614]
[105.50141907 71.31975555]
[119.28379822 77.23971558]
[131.54617310 68.60060120]
[143.80853271 59.96148300]
[156.07090759 51.32236862]
[153.51376343 36.27498245]
[157.74691772 21.61063385]
[167.92988586 10.24093819]
[182.04081726 4.42335510]
[197.27798462 5.31297207]
[210.61604309 12.73315334]
[219.40669250 25.21061707]
[221.90457153 40.26795578]
[217.61369324 54.91551971]
[207.38603210 66.24502563]
[193.25230408 72.00699615]
[178.01875305 71.05738068]
[164.71002197 63.58473587]
[152.44764709 72.22385406]
[140.18528748 80.86296844]
[127.92291260 89.50208282]
[128.93408203 96.93360901]
[143.79716492 94.91152191]
[145.81900024 109.77463531]
[130.95642090 111.79665375]
[131.96759033 119.22817993]
[146.09239197 124.27693176]
[160.21719360 129.32568359]
[175.81642151 126.68474579]
[185.19685364 138.25439453]
[199.32165527 143.30314636]
[213.44645691 148.35191345]
[229.47392273 144.88023376]
[240.29232788 157.20475769]
[234.77264404 172.64706421]
[218.59303284 175.32144165]
[208.39770508 162.47671509]
[194.27290344 157.42796326]
[180.14810181 152.37919617]
[165.55917358 155.38125610]
[155.16844177 143.45050049]
[141.04362488 138.40173340]
[126.91883087 133.35298157]
[114.65646362 141.99209595]
[114.65646362 156.99209595]
[114.65646362 171.99209595]
[114.65646362 186.99209595]
[114.65646362 201.99209595]
[114.65646362 216.99209595]
[114.65646362 231.99209595]
[114.65646362 246.99209595]
[114.65646362 261.99209595]
[114.65646362 276.99209595]
[129.19635010 281.05340576]
[142.10072327 288.88790894]
[152.41201782 299.91424561]
[159.36503601 313.31417847]
[162.44383240 328.09335327]
[161.41993713 343.15502930]
[156.36933899 357.38153076]
[147.66680908 369.71722412]
[135.95816040 379.24664307]
[122.11221313 385.26266479]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[26 55]
[27 54]
[28 53]
[29 52]
[30 51]
[31 50]
[32 49]
[56 88]
[57 87]
[58 86]
[59 85]
[89 108]
[90 107]
[91 106]
[92 105]
[113 130]
[114 129]
[115 128]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
