%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:07 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUUCUUCCCAGGGGGGGGGGCAACACUUUCUCGGCCUAUCCGGAAUGCCCCGACGUUACUCGGACUACCCxxxxxxxxxxCAAAAAGGCCUUCGAUACGGGAUAAUCCUAUUUAUUACCUCAGAAGUUUUCCCCCCCCCCUUUCUUCGCA\
) } def
/len { sequence length } bind def

/coor [
[82.46519470 522.46838379]
[68.61925507 516.45233154]
[56.91059494 506.92291260]
[48.20806885 494.58724976]
[43.15746689 480.36071777]
[42.13357544 465.29904175]
[45.21237564 450.51989746]
[52.16539764 437.11996460]
[62.47668076 426.09362793]
[75.38106537 418.25912476]
[89.92095184 414.19781494]
[89.92095184 399.19781494]
[89.92095184 384.19781494]
[89.92095184 369.19781494]
[89.92095184 354.19781494]
[89.92095184 339.19781494]
[89.92095184 324.19781494]
[89.92095184 309.19781494]
[89.92095184 294.19781494]
[89.92095184 279.19781494]
[80.32984161 264.53457642]
[89.58409882 248.64939880]
[89.27204132 233.65264893]
[88.95998383 218.65589905]
[86.62120819 215.93603516]
[85.51814270 211.92543030]
[86.25314331 207.23371887]
[89.12576294 202.72067261]
[89.74974060 187.73365784]
[90.37371063 172.74664307]
[90.99768829 157.75962830]
[82.02485657 142.71009827]
[91.93190002 127.22364044]
[92.24395752 112.22689056]
[89.91284943 97.40913391]
[85.01129913 83.23257446]
[79.96254730 69.10777283]
[74.76712799 55.03625107]
[69.57171631 40.96473312]
[64.37629700 26.89321327]
[59.46779251 22.30909920]
[57.89741516 16.76246071]
[59.27080536 12.12680340]
[54.66524124 -2.14865685]
[50.05967712 -16.42411804]
[38.45893860 -27.18206215]
[41.91475296 -41.67021561]
[37.30918884 -55.94567871]
[32.70362473 -70.22113800]
[24.84619904 -82.99849701]
[14.18457317 -93.54978180]
[3.52294683 -104.10107422]
[-7.13867950 -114.65236664]
[-22.93946266 -114.31954193]
[-34.28966522 -125.31719971]
[-34.45541382 -141.12062073]
[-23.33837128 -152.35391235]
[-7.53408289 -152.35256958]
[3.58104801 -141.11738586]
[3.41261077 -125.31399536]
[14.07423687 -114.76270294]
[24.73586273 -104.21141052]
[35.39749146 -93.66011810]
[31.74838638 -108.20948792]
[31.76144028 -123.20948029]
[35.43585587 -137.75247192]
[42.54930496 -150.95849609]
[52.67136002 -162.02844238]
[65.18955231 -170.29252625]
[79.34641266 -175.25067139]
[94.28533936 -176.60287476]
[109.10240173 -174.26730347]
[122.90102386 -168.38529968]
[134.84628296 -159.31277466]
[144.21537781 -147.59867859]
[150.44140625 -133.95182800]
[153.14764404 -119.19796753]
[152.17031860 -104.22984314]
[147.56858826 -89.95314026]
[139.62088013 -77.23174286]
[128.80812073 -66.83538818]
[115.78456116 -59.39315796]
[101.33823395 -55.35536194]
[86.34328461 -54.96632767]
[71.70701599 -58.24959183]
[58.31507111 -65.00649261]
[46.97908401 -74.82670593]
[51.58465195 -60.55124283]
[56.19021606 -46.27577972]
[67.46153259 -36.53891373]
[64.33513641 -21.02968216]
[68.94070435 -6.75422144]
[73.54626465 7.52123928]
[78.44781494 21.69779778]
[83.64323425 35.76931763]
[88.83864594 49.84083557]
[94.03406525 63.91235733]
[99.33552551 69.13156128]
[99.18785858 78.33102417]
[104.08940887 92.50758362]
[107.18921661 89.80889130]
[110.93096924 87.76380920]
[115.20110321 86.48013306]
[130.06414795 84.45780182]
[144.92720032 82.43546295]
[159.79023743 80.41313171]
[167.98149109 67.09256744]
[182.83489990 62.20273209]
[197.33712769 68.05245972]
[204.64067078 81.87968445]
[201.29702759 97.15560913]
[188.88496399 106.66741943]
[173.26506042 105.92392731]
[161.81257629 95.27617645]
[146.94952393 97.29851532]
[132.08648682 99.32084656]
[117.22343445 101.34317780]
[107.24070740 112.53894806]
[106.92865753 127.53569794]
[115.29843903 137.40487671]
[114.69250488 149.92892456]
[105.98471069 158.38360596]
[105.36073303 173.37062073]
[104.73675537 188.35763550]
[104.11277771 203.34465027]
[103.95674133 218.34384155]
[104.26879883 233.34059143]
[104.58084869 248.33734131]
[113.35393524 257.84979248]
[113.26950836 270.38821411]
[104.92095184 279.19781494]
[104.92095184 294.19781494]
[104.92095184 309.19781494]
[104.92095184 324.19781494]
[104.92095184 339.19781494]
[104.92095184 354.19781494]
[104.92095184 369.19781494]
[104.92095184 384.19781494]
[104.92095184 399.19781494]
[104.92095184 414.19781494]
[119.46083832 418.25912476]
[132.36521912 426.09362793]
[142.67649841 437.11996460]
[149.62951660 450.51989746]
[152.70832825 465.29904175]
[151.68443298 480.36071777]
[146.63383484 494.58724976]
[137.93130493 506.92291260]
[126.22264099 516.45233154]
[112.37670135 522.46838379]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 128]
[23 127]
[24 126]
[28 125]
[29 124]
[30 123]
[31 122]
[33 119]
[34 118]
[35 100]
[36 99]
[37 97]
[38 96]
[39 95]
[40 94]
[43 93]
[44 92]
[45 91]
[47 89]
[48 88]
[49 87]
[50 63]
[51 62]
[52 61]
[53 60]
[103 117]
[104 116]
[105 115]
[106 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
