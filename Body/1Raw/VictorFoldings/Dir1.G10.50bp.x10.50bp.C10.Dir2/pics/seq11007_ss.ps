%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAAUAGGAGGGGGGGGGGGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCAGCCxxxxxxxxxxCCGAAUGAUAUUUCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACCCCCCCCCCCAAACUAGGAGG\
) } def
/len { sequence length } bind def

/coor [
[66.54797363 195.46519470]
[60.43068314 181.62924194]
[58.89035797 166.57989502]
[62.07790756 151.79156494]
[69.68104553 138.71305847]
[80.95489502 128.62565613]
[94.79496002 122.51763916]
[93.25766754 107.59662628]
[89.34329224 100.48890686]
[91.84522247 92.35393524]
[90.61460876 77.40449524]
[89.38399506 62.45506287]
[88.15338135 47.50563049]
[86.92276764 32.55619431]
[85.69216156 17.60676003]
[84.46154785 2.65732551]
[83.23093414 -12.29210854]
[82.00032043 -27.24154282]
[80.30992126 -42.14599228]
[78.16134644 -56.99131393]
[76.01276398 -71.83663940]
[73.86418915 -86.68196106]
[71.71560669 -101.52728271]
[56.76057053 -100.30524445]
[41.75848770 -100.01531982]
[26.76740074 -100.65863037]
[11.84530926 -102.23268890]
[-2.95005870 -104.73141479]
[-17.56146049 -108.14512634]
[-31.93236923 -112.46062469]
[-46.00718307 -117.66121674]
[-59.73145294 -123.72676849]
[-73.05207825 -130.63383484]
[-85.91752625 -138.35566711]
[-98.27801514 -146.86241150]
[-110.08573914 -156.12115479]
[-121.29500580 -166.09606934]
[-131.86244202 -176.74855042]
[-141.74719238 -188.03741455]
[-150.91098022 -199.91897583]
[-159.31835938 -212.34727478]
[-166.93682861 -225.27420044]
[-173.73689270 -238.64976501]
[-179.69223022 -252.42221069]
[-184.77983093 -266.53826904]
[-188.97999573 -280.94329834]
[-192.27647400 -295.58160400]
[-194.65650940 -310.39651489]
[-196.11090088 -325.33074951]
[-196.63403320 -340.32650757]
[-196.22386169 -355.32580566]
[-194.88197327 -370.27053833]
[-192.61357117 -385.10296631]
[-189.42744446 -399.76568604]
[-185.33587646 -414.20196533]
[-180.35473633 -428.35592651]
[-174.50328064 -442.17282104]
[-167.80415344 -455.59921265]
[-160.28326416 -468.58316040]
[-151.96971130 -481.07443237]
[-142.89567566 -493.02465820]
[-133.09623718 -504.38763428]
[-122.60931396 -515.11944580]
[-111.47548676 -525.17846680]
[-99.73783112 -534.52587891]
[-87.44175720 -543.12548828]
[-74.63482666 -550.94396973]
[-61.36660004 -557.95117188]
[-47.68840408 -564.11993408]
[-33.65315247 -569.42633057]
[-19.31515503 -573.84997559]
[-4.72987652 -577.37359619]
[10.04625320 -579.98370361]
[24.95606804 -581.67010498]
[39.94188309 -582.42626953]
[54.94572449 -582.24938965]
[69.90953827 -581.14001465]
[84.77544403 -579.10247803]
[99.48590851 -576.14465332]
[113.98403931 -572.27801514]
[128.21372986 -567.51751709]
[142.11994934 -561.88159180]
[155.64888000 -555.39202881]
[168.74816895 -548.07391357]
[181.36715698 -539.95556641]
[193.45703125 -531.06842041]
[204.97099304 -521.44677734]
[215.86451721 -511.12799072]
[226.09544373 -500.15188599]
[235.62420654 -488.56097412]
[244.41392517 -476.40008545]
[252.43058777 -463.71627808]
[259.64321899 -450.55856323]
[266.02386475 -436.97793579]
[271.54785156 -423.02688599]
[276.19384766 -408.75939941]
[279.94384766 -394.23065186]
[282.78332520 -379.49688721]
[284.70132446 -364.61508179]
[285.69039917 -349.64285278]
[285.74676514 -334.63806152]
[284.87014771 -319.65881348]
[283.06399536 -304.76303101]
[280.33523560 -290.00836182]
[276.69448853 -275.45187378]
[272.15579224 -261.14987183]
[266.73672485 -247.15773010]
[260.45828247 -233.52954102]
[253.34468079 -220.31805420]
[245.42350769 -207.57437134]
[236.72537231 -195.34780884]
[227.28395081 -183.68563843]
[217.13575745 -172.63301086]
[206.32003784 -162.23268127]
[194.87867737 -152.52487183]
[182.85589600 -143.54714966]
[170.29823303 -135.33425903]
[157.25427246 -127.91795349]
[143.77447510 -121.32694244]
[129.91098022 -115.58670807]
[115.71744537 -110.71947479]
[101.24877167 -106.74406433]
[86.56092834 -103.67585754]
[88.70951080 -88.83053589]
[90.85808563 -73.98521423]
[93.00666809 -59.13989258]
[95.15524292 -44.29457092]
[97.80690002 -41.88294601]
[99.39222717 -38.04154587]
[99.24050140 -33.29996490]
[96.94975281 -28.47215652]
[98.18036652 -13.52272129]
[99.41098022 1.42671311]
[100.64159393 16.37614822]
[101.87220764 31.32558250]
[103.10281372 46.27501678]
[104.33342743 61.22445297]
[105.56404114 76.17388916]
[106.79465485 91.12332153]
[108.17868042 106.05933380]
[109.71597290 120.98034668]
[124.51068115 124.13816833]
[137.60444641 131.71499634]
[147.71449280 142.96853638]
[153.85031128 156.79629517]
[155.41079712 171.84356689]
[152.24307251 186.63615417]
[144.65747070 199.72483826]
[133.39715576 209.82733154]
[119.56529236 215.95388794]
[104.51698303 217.50430298]
[89.72652435 214.32666016]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 141]
[8 140]
[10 139]
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 127]
[20 126]
[21 125]
[22 124]
[23 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
