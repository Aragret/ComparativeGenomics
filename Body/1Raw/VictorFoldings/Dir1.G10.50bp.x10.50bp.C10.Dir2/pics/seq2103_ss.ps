%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:22 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUACCUUCUGGGGGGGGGGGCAUAAUGAAUUAACUAGAAAUAACUUUGCAAGGAGAGCCAAAGCUAAGAxxxxxxxxxxUACAAAUCUCCUUAAUUAUAACAUUCACAGCCACAGAACUAAUCAUAUUUCCCCCCCCCCUAUAUCUUCU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 342.07891846]
[71.19830322 336.06289673]
[59.48964310 326.53347778]
[50.78712082 314.19781494]
[45.73651886 299.97128296]
[44.71262741 284.90960693]
[47.79142761 270.13043213]
[54.74444962 256.73049927]
[65.05573273 245.70417786]
[77.96011353 237.86967468]
[92.50000000 233.80836487]
[92.50000000 218.80836487]
[92.50000000 203.80836487]
[92.50000000 188.80836487]
[92.50000000 173.80836487]
[92.50000000 158.80836487]
[92.50000000 143.80836487]
[92.50000000 128.80836487]
[92.50000000 113.80835724]
[89.55451965 99.10039520]
[83.77824402 85.25717926]
[78.00197601 71.41396332]
[60.25110626 64.94048309]
[52.93151474 47.86649323]
[60.22841644 31.12873268]
[53.88128662 17.53778076]
[47.53415680 3.94683003]
[41.18703079 -9.64412117]
[34.28002930 -22.95927620]
[26.82512093 -35.97558594]
[19.37021065 -48.99189377]
[11.91529942 -62.00820541]
[11.41118526 -47.01667786]
[6.38120461 -32.88517761]
[-2.70018816 -20.94665718]
[-14.97639275 -12.32721329]
[-29.28945732 -7.83987665]
[-44.28930283 -7.90791416]
[-58.56106949 -12.52490807]
[-70.75857544 -21.25536156]
[-79.73129272 -33.27577591]
[-84.63287354 -47.45232391]
[-85.00096893 -62.44780731]
[-80.80086517 -76.84777832]
[-72.42873383 -89.29395294]
[-60.67427826 -98.61236572]
[-46.64622879 -103.92404175]
[-31.66778755 -104.72795868]
[-17.15179253 -100.94829559]
[-4.46746159 -92.94156647]
[5.18885279 -81.46283722]
[3.01201582 -96.30403900]
[0.83517885 -111.14524841]
[-1.34165812 -125.98645020]
[-3.51849508 -140.82765198]
[-5.69533205 -155.66886902]
[-7.87216902 -170.51007080]
[-13.21368122 -184.52677917]
[-21.46597099 -197.05274963]
[-36.36093521 -203.91365051]
[-37.59705353 -220.26614380]
[-23.90271378 -229.28817749]
[-9.36547852 -221.69865417]
[-8.94000912 -205.30503845]
[-0.68771952 -192.77906799]
[-1.24702799 -207.76864624]
[2.18409371 -222.37094116]
[9.36053371 -235.54284668]
[19.76962280 -246.34333801]
[32.66775894 -254.00088501]
[47.13352966 -257.96844482]
[62.13352585 -257.96258545]
[76.59619141 -253.98371887]
[89.48833466 -246.31608582]
[99.88897705 -235.50744629]
[107.05511475 -222.32994080]
[110.47481537 -207.72496033]
[109.90378571 -192.73582458]
[105.38281250 -178.43334961]
[97.23487091 -165.83926392]
[86.04203796 -155.85325623]
[72.60388947 -149.18870544]
[57.88042450 -146.32171631]
[42.92345428 -147.45710754]
[28.80147552 -152.51374817]
[16.52332687 -161.13043213]
[6.96903658 -172.68690491]
[9.14587307 -157.84570312]
[11.32271004 -143.00450134]
[13.49954700 -128.16328430]
[15.67638397 -113.32208252]
[17.85322189 -98.48088074]
[20.03005791 -83.63967133]
[24.93160820 -69.46311188]
[32.38652039 -56.44680405]
[39.84143066 -43.43049622]
[47.29634094 -30.41418648]
[50.03302002 -29.56688881]
[52.58696365 -27.54912758]
[54.49718857 -24.42936516]
[55.33786392 -20.44636154]
[54.77798080 -15.99125004]
[61.12511063 -2.40029955]
[67.47223663 11.19065094]
[73.81936646 24.78160286]
[85.20545959 26.28071785]
[94.53269958 33.18508530]
[99.39128876 43.85597992]
[98.45597076 55.66419983]
[91.84519196 65.63768768]
[97.62145996 79.48091125]
[103.39773560 93.32412720]
[107.77980804 90.22596741]
[113.41339111 88.76999664]
[119.78935242 89.30334473]
[126.31653595 92.03057861]
[139.97277832 98.23598480]
[153.62901306 104.44139099]
[169.39378357 103.10627747]
[177.78002930 115.41562653]
[191.43626404 121.62104034]
[207.69683838 119.49365234]
[217.45333862 132.67480469]
[210.66911316 147.60485840]
[194.32319641 148.92504883]
[185.23086548 135.27728271]
[171.57461548 129.07186890]
[156.78663635 130.85084534]
[147.42361450 118.09763336]
[133.76736450 111.89222717]
[120.11112976 105.68682098]
[107.50000000 113.80835724]
[107.50000000 128.80836487]
[107.50000000 143.80836487]
[107.50000000 158.80836487]
[107.50000000 173.80836487]
[107.50000000 188.80836487]
[107.50000000 203.80836487]
[107.50000000 218.80836487]
[107.50000000 233.80836487]
[122.03988647 237.86967468]
[134.94427490 245.70417786]
[145.25555420 256.73049927]
[152.20857239 270.13043213]
[155.28736877 284.90960693]
[154.26348877 299.97128296]
[149.21287537 314.19781494]
[140.51036072 326.53347778]
[128.80169678 336.06289673]
[114.95575714 342.07891846]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 112]
[21 111]
[22 110]
[25 105]
[26 104]
[27 103]
[28 102]
[29 97]
[30 96]
[31 95]
[32 94]
[51 93]
[52 92]
[53 91]
[54 90]
[55 89]
[56 88]
[57 87]
[58 65]
[59 64]
[116 131]
[117 130]
[118 129]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
