%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCGGUUUCUAGGGGGGGGGGUCUACXUUCAAAUUCCUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUAxxxxxxxxxxCAAACUUAAAAUAAAAUCCCCACUAUGCACAUUUUAUUUCUCCAACAUACCCCCCCCCCCUCGGAUUCUA\
) } def
/len { sequence length } bind def

/coor [
[85.64170837 379.12344360]
[72.42151642 371.85098267]
[61.53470993 361.40399170]
[53.72357941 348.49472046]
[49.52069855 334.00341797]
[49.21262741 318.91809082]
[52.82036591 304.26724243]
[60.09794235 291.04986572]
[70.54914856 280.16711426]
[83.46141052 272.36096191]
[97.95434570 268.16366577]
[97.64228821 253.16691589]
[97.33023071 238.17016602]
[97.01818085 223.17340088]
[96.70612335 208.17665100]
[96.39406586 193.17990112]
[96.08200836 178.18315125]
[95.76995087 163.18638611]
[95.45789337 148.18963623]
[95.14584351 133.19288635]
[94.83378601 118.19612885]
[87.91781616 131.50662231]
[83.80146027 145.93075562]
[73.27411652 156.61602783]
[58.91286850 160.94670105]
[44.23334503 157.86259460]
[32.82908630 148.11872864]
[27.49184990 134.10038757]
[29.52818489 119.23925781]
[38.43959808 107.17332458]
[52.04458237 100.85633087]
[67.01342773 101.83493042]
[81.87510681 99.80258179]
[67.85839844 94.46106720]
[53.84168243 89.11955261]
[44.64209747 88.98010254]
[39.59085083 83.51836395]
[25.68829346 77.88640594]
[13.48558235 82.19311523]
[1.99828792 77.16707611]
[-2.80131030 66.01937866]
[-16.58369255 60.09941483]
[-30.36607361 54.17945099]
[-46.09965897 55.84224701]
[-54.74016190 43.71001816]
[-70.95296478 46.17522430]
[-80.98156738 33.19989777]
[-74.50940704 18.13194275]
[-58.19449234 16.47198105]
[-48.82020187 29.92763901]
[-34.07242203 27.84140778]
[-24.44610977 40.39707184]
[-10.66372871 46.31703568]
[3.11865282 52.23699570]
[20.37687683 49.21149826]
[31.32025146 63.98385239]
[45.22280502 69.61580658]
[59.18319702 75.10284424]
[73.19991302 80.44435120]
[87.21662140 85.78586578]
[87.65106964 81.57505798]
[89.05429840 77.25234222]
[88.74224091 62.25558853]
[88.43018341 47.25883484]
[88.11813354 32.26208115]
[73.57985687 28.12325287]
[60.90832138 19.88167191]
[51.23027802 8.27017403]
[45.40628433 -5.67875147]
[43.95421219 -20.72477722]
[47.00317383 -35.53002167]
[54.28206253 -48.77801132]
[65.14363861 -59.29074097]
[78.62210083 -66.13343048]
[93.51895905 -68.69763184]
[108.50958252 -66.75534058]
[122.26103210 -60.47925568]
[133.55052185 -50.42744827]
[141.37420654 -37.49371719]
[145.03640747 -22.82812119]
[144.21147156 -7.73471498]
[138.97277832 6.44440603]
[129.78613281 18.44844437]
[117.46840668 27.21000862]
[103.11488342 31.95002556]
[103.42694092 46.94678116]
[103.73899841 61.94353485]
[104.05105591 76.94028473]
[116.57701874 85.19257355]
[130.47956848 79.56062317]
[144.38212585 73.92866516]
[158.28468323 68.29670715]
[172.18724060 62.66474915]
[186.08979797 57.03279495]
[199.99235535 51.40083694]
[213.89491272 45.76887894]
[227.79747009 40.13692474]
[228.27268982 24.91542435]
[234.90382385 11.20601177]
[246.54197693 1.38392484]
[261.17074585 -2.84910011]
[276.25564575 -0.75966632]
[289.18310547 7.29021931]
[297.71337891 19.90586472]
[300.36853027 34.90153503]
[296.68853760 49.67913818]
[287.31097412 61.67836380]
[273.86059570 68.82027435]
[258.66772461 69.86749268]
[244.36463928 64.63858032]
[233.42941284 54.03947830]
[219.52687073 59.67143631]
[205.62431335 65.30339050]
[191.72175598 70.93534851]
[177.81919861 76.56730652]
[163.91664124 82.19926453]
[150.01408386 87.83122253]
[136.11152649 93.46317291]
[122.20896912 99.09513092]
[136.53927612 94.66314697]
[151.09045410 98.30500793]
[161.64358521 108.96479797]
[165.13894653 123.55186462]
[160.56309509 137.83688354]
[149.24272156 147.67808533]
[134.46003723 150.22215271]
[120.50108337 144.73147583]
[111.41307068 132.79798889]
[109.83053589 117.88407898]
[110.14259338 132.88082886]
[110.45465088 147.87757874]
[110.76670837 162.87434387]
[111.07876587 177.87109375]
[111.39081573 192.86784363]
[111.70287323 207.86459351]
[112.01493073 222.86135864]
[112.32698822 237.85810852]
[112.63904572 252.85485840]
[112.95110321 267.85162354]
[127.60609436 271.44238281]
[140.83190918 278.70465088]
[151.72677612 289.14321899]
[159.54786682 302.04644775]
[163.76193237 316.53451538]
[164.08166504 331.61959839]
[160.48522949 346.27322388]
[153.21786499 359.49621582]
[142.77507019 370.38705444]
[129.86883545 378.20315552]
[115.37915039 382.41165161]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[33 60]
[34 59]
[35 58]
[37 57]
[38 56]
[41 54]
[42 53]
[43 52]
[45 50]
[62 88]
[63 87]
[64 86]
[65 85]
[89 119]
[90 118]
[91 117]
[92 116]
[93 115]
[94 114]
[95 113]
[96 112]
[97 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
