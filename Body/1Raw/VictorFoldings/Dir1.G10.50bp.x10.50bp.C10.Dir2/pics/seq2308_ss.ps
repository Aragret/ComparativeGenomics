%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAGUAAAAAAGGGGGGGGGGUUUAACACCCAUAGUAGGCCUAAAAGCAGCCACCAAUUAAGAAAGCGUUCxxxxxxxxxxUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAACCCCCCCCCCAGAGUAAUAAA\
) } def
/len { sequence length } bind def

/coor [
[73.85531616 417.14031982]
[59.83337402 411.58731079]
[47.63341904 402.72097778]
[38.02234650 391.09869385]
[31.60432053 377.45098877]
[28.78278351 362.63580322]
[29.73509979 347.58441162]
[34.40140533 333.24298096]
[42.48837280 320.51303101]
[53.48764801 310.19476318]
[66.70780182 302.93679810]
[81.31781769 299.19534302]
[81.31781769 284.19534302]
[81.31781769 269.19534302]
[81.31781769 254.19535828]
[81.31781769 239.19535828]
[81.31781769 224.19535828]
[81.31781769 209.19535828]
[81.31781769 194.19535828]
[81.31781769 179.19535828]
[81.31781769 164.19535828]
[81.31781769 149.19535828]
[81.31781769 134.19535828]
[81.31781769 119.19535065]
[87.34763336 89.42927551]
[83.09478760 75.04479980]
[78.84193420 60.66031647]
[69.21819305 72.16612244]
[54.21884537 72.02616119]
[44.81148148 60.34277344]
[47.87480164 45.65890121]
[61.16889572 38.71145248]
[74.97265625 44.57996368]
[72.21641541 29.83536720]
[69.46016693 15.09077072]
[66.70392609 0.34617412]
[54.34084702 -6.92776299]
[49.24559021 -19.88451195]
[34.81820679 -23.98945808]
[20.39082146 -28.09440231]
[8.88511753 -17.81713104]
[-6.35398579 -15.41436291]
[-20.46374512 -21.65281296]
[-28.94178581 -34.54181290]
[-29.08279991 -49.96853256]
[-20.84178734 -63.01036072]
[-6.84842539 -69.50569153]
[8.43205357 -67.38190460]
[20.12370491 -57.31667328]
[24.49576569 -42.52178574]
[38.92314911 -38.41684341]
[53.35053635 -34.31189728]
[55.99201202 -37.23220062]
[59.13129044 -39.60927200]
[62.65845490 -41.35988617]
[66.45001221 -42.42274857]
[69.20625305 -57.16734314]
[71.96249390 -71.91194153]
[74.71873474 -86.65653992]
[77.17166901 -101.45462036]
[79.32024384 -116.29994202]
[81.46882629 -131.14526367]
[72.28130341 -143.72410583]
[74.67174530 -158.74876404]
[86.72037506 -167.43014526]
[88.86894989 -182.27546692]
[91.01753235 -197.12078857]
[93.16610718 -211.96611023]
[79.24266815 -217.76168823]
[67.19845581 -226.83845520]
[57.79058075 -238.62583923]
[51.61042786 -252.38290405]
[49.04648590 -267.24484253]
[50.25992584 -282.27740479]
[55.17447662 -296.53567505]
[63.48119736 -309.12332153]
[74.65792847 -319.24911499]
[88.00208282 -326.27651978]
[102.67483521 -329.76379395]
[117.75385284 -329.49169922]
[132.29125977 -325.47735596]
[145.37319946 -317.97314453]
[156.17735291 -307.45071411]
[164.02455139 -294.57159424]
[168.42152405 -280.14529419]
[169.09185791 -265.07873535]
[165.99342346 -250.31898499]
[159.32098389 -236.79383850]
[149.49398804 -225.35351562]
[137.13015747 -216.71716309]
[123.00670624 -211.42767334]
[108.01142883 -209.81753540]
[105.86285400 -194.97221375]
[103.71427155 -180.12687683]
[101.56569672 -165.28155518]
[110.65853882 -153.54035950]
[108.69104767 -138.45448303]
[96.31414795 -128.99668884]
[94.16556549 -114.15135956]
[92.01699066 -99.30603790]
[94.14579773 -94.96813965]
[93.52852631 -89.24040985]
[89.46333313 -83.90029144]
[86.70709229 -69.15570068]
[83.95085144 -54.41110229]
[81.19460297 -39.66650391]
[91.90021515 -21.47834015]
[81.44852448 -2.41006875]
[84.20476532 12.33452797]
[86.96100616 27.07912445]
[89.71725464 41.82371902]
[93.22641754 56.40747070]
[97.47926331 70.79195404]
[101.73210907 85.17642975]
[112.39302063 95.72844696]
[126.82040405 99.83338928]
[141.24778748 103.93833923]
[155.67517090 108.04328156]
[169.35845947 100.13484955]
[184.60430908 104.29894257]
[192.36763000 118.06507874]
[188.04257202 133.26605225]
[174.19512939 140.88339233]
[159.04074097 136.39787292]
[151.57023621 122.47066498]
[137.14285278 118.36572266]
[122.71546173 114.26078033]
[108.28807831 110.15583038]
[96.31781769 119.19535065]
[96.31781769 134.19535828]
[96.31781769 149.19535828]
[96.31781769 164.19535828]
[96.31781769 179.19535828]
[96.31781769 194.19535828]
[96.31781769 209.19535828]
[96.31781769 224.19535828]
[96.31781769 239.19535828]
[96.31781769 254.19535828]
[96.31781769 269.19534302]
[96.31781769 284.19534302]
[96.31781769 299.19534302]
[110.92783356 302.93679810]
[124.14798737 310.19476318]
[135.14726257 320.51303101]
[143.23423767 333.24298096]
[147.90054321 347.58441162]
[148.85284424 362.63580322]
[146.03131104 377.45098877]
[139.61329651 391.09869385]
[130.00221252 402.72097778]
[117.80226135 411.58731079]
[103.78031921 417.14031982]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 130]
[24 129]
[25 114]
[26 113]
[27 112]
[33 111]
[34 110]
[35 109]
[36 108]
[38 52]
[39 51]
[40 50]
[56 106]
[57 105]
[58 104]
[59 103]
[60 100]
[61 99]
[62 98]
[65 95]
[66 94]
[67 93]
[68 92]
[115 128]
[116 127]
[117 126]
[118 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
