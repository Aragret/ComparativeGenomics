%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAGGACUUCAAACGGGGGGGGGGUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGCUAACCxxxxxxxxxxAAACAACAAUCCCCCUCUACCUAAAACUCACAGCCCUCGCUGUCACUUUCCCCCCCCCCCCUAGGACUUCUAAC\
) } def
/len { sequence length } bind def

/coor [
[84.15516663 426.12057495]
[70.14042664 420.63665771]
[57.46500397 412.52371216]
[46.61610413 402.09359741]
[38.01072693 389.74719238]
[31.97964478 375.95904541]
[28.75467491 361.25918579]
[28.45977592 346.21261597]
[31.10628319 331.39770508]
[36.59247208 317.38385010]
[44.70746613 304.70974731]
[55.13935089 293.86251831]
[67.48715210 285.25915527]
[81.27624512 279.23028564]
[95.97662354 276.00772095]
[95.68026733 261.01062012]
[95.38391113 246.01356506]
[95.08755493 231.01649475]
[94.79119873 216.01942444]
[94.49484253 201.02235413]
[94.19848633 186.02526855]
[93.90212250 171.02819824]
[93.60576630 156.03112793]
[93.30941010 141.03405762]
[74.77172089 133.04681396]
[62.18064117 117.27003479]
[47.63581467 120.93718719]
[33.09099197 124.60434723]
[28.97365952 139.40107727]
[17.99835014 150.14529419]
[3.11736679 153.94685364]
[-11.66638279 149.78317261]
[-22.37614250 138.77423096]
[-26.13104248 123.88140869]
[-21.92103386 109.11077881]
[-10.87858486 98.43557739]
[4.02593899 94.72737885]
[18.78329659 98.98366547]
[29.42383194 110.05952454]
[43.96865845 106.39236450]
[58.51348114 102.72520447]
[61.49058533 84.32891083]
[72.20466614 69.08111572]
[88.50314331 60.04527283]
[87.02366638 45.11841202]
[85.54419708 30.19155312]
[84.06472015 15.26469231]
[69.05139160 15.20214462]
[54.12406540 13.59622002]
[39.44098282 10.46394253]
[25.15779495 5.83851624]
[11.42591000 -0.23102754]
[-1.60910618 -7.68034792]
[-13.80907536 -16.43047714]
[-25.04467201 -26.38866043]
[-35.19678879 -37.44933701]
[-44.15781403 -49.49525070]
[-51.83275223 -62.39871597]
[-58.14023972 -76.02294159]
[-63.01342392 -90.22351074]
[-66.40063477 -104.84988403]
[-68.26597595 -119.74701691]
[-68.58967590 -134.75698853]
[-67.36828613 -149.72068787]
[-64.61476898 -164.47949219]
[-60.35831451 -178.87693787]
[-54.64403534 -192.76042175]
[-47.53250885 -205.98275757]
[-39.09912109 -218.40379333]
[-29.43327141 -229.89184570]
[-18.63742256 -240.32513428]
[-6.82601690 -249.59307861]
[5.87573767 -257.59741211]
[19.33319473 -264.25329590]
[33.40370178 -269.49020386]
[47.93809509 -273.25256348]
[62.78231049 -275.50051880]
[77.77899170 -276.21023560]
[92.76915741 -275.37417603]
[107.59390259 -273.00125122]
[122.09609222 -269.11657715]
[136.12197876 -263.76135254]
[149.52288818 -256.99234009]
[162.15675354 -248.88125610]
[173.88966370 -239.51414490]
[184.59722900 -228.99026489]
[194.16595459 -217.42118835]
[202.49440002 -204.92955017]
[209.49427795 -191.64776611]
[215.09140015 -177.71664429]
[219.22640991 -163.28384399]
[221.85549927 -148.50236511]
[222.95077515 -133.52891541]
[222.50064087 -118.52220154]
[220.50985718 -103.64131165]
[216.99954224 -89.04399872]
[212.00691223 -74.88498688]
[205.58485413 -61.31438065]
[197.80148315 -48.47603226]
[188.73930359 -36.50603485]
[178.49436951 -25.53128242]
[167.17527771 -15.66810703]
[154.90202332 -7.02106714]
[141.80470276 0.31817439]
[128.02217102 6.27181768]
[113.70053101 10.77675056]
[98.99158478 13.78521824]
[100.47105408 28.71207809]
[101.95053101 43.63893890]
[103.43000031 58.56579971]
[117.01551819 62.06544876]
[128.66363525 69.88433075]
[137.04812622 81.13217926]
[141.21429443 94.52832794]
[156.19599915 95.26896667]
[171.17770386 96.00960541]
[186.15940857 96.75024414]
[201.14111328 97.49088287]
[215.47572327 89.52525330]
[229.40042114 98.18749237]
[228.59069824 114.56664276]
[213.87951660 121.81322479]
[200.40048218 112.47258759]
[185.41877747 111.73194885]
[170.43707275 110.99131012]
[155.45536804 110.25067139]
[140.47366333 109.51002502]
[138.39875793 115.94032288]
[135.30966187 121.94960785]
[131.28800964 127.37916565]
[126.43997192 132.08560181]
[120.89362335 135.94459534]
[114.79544067 138.85424805]
[108.30648041 140.73770142]
[108.60283661 155.73477173]
[108.89920044 170.73184204]
[109.19555664 185.72891235]
[109.49191284 200.72598267]
[109.78826904 215.72306824]
[110.08462524 230.72013855]
[110.38098145 245.71720886]
[110.67734528 260.71426392]
[110.97370148 275.71136475]
[125.78991699 278.35067749]
[139.80642700 283.83004761]
[152.48448181 291.93887329]
[163.33674622 302.36550903]
[171.94612122 314.70913696]
[177.98167419 328.49530029]
[181.21139526 343.19409180]
[181.51116943 358.24057007]
[178.86946106 373.05636597]
[173.38780212 387.07199097]
[165.27691650 399.74871826]
[154.84854126 410.59930420]
[142.50352478 419.20669556]
[128.71638489 425.23999023]
[114.01704407 428.46734619]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[26 41]
[27 40]
[28 39]
[44 110]
[45 109]
[46 108]
[47 107]
[114 127]
[115 126]
[116 125]
[117 124]
[118 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
