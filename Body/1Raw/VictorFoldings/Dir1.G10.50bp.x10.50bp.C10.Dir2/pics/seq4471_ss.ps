%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCUCAAAGGGGGGGGGGCCUAAGAAAUAUGUCUGAUAAAAGAGUUACUUUGAUAGAGUAAAUAAUAGxxxxxxxxxxACCGUACAUAGCACAUUACAGUCAAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCCCCCCCCCCCUCAGA\
) } def
/len { sequence length } bind def

/coor [
[88.07714081 376.54052734]
[74.85694122 369.26806641]
[63.97013474 358.82104492]
[56.15900421 345.91180420]
[51.95612335 331.42047119]
[51.64805222 316.33514404]
[55.25579453 301.68432617]
[62.53336716 288.46691895]
[72.98457336 277.58416748]
[85.89683533 269.77801514]
[100.38977051 265.58071899]
[100.07771301 250.58398438]
[99.76566315 235.58721924]
[99.45360565 220.59046936]
[99.14154816 205.59371948]
[98.82949066 190.59696960]
[98.51743317 175.60020447]
[98.20537567 160.60345459]
[97.89332581 145.60670471]
[97.58126831 130.60995483]
[81.72412109 122.36855316]
[73.98558044 107.46835327]
[76.08951569 91.90023041]
[86.04849243 81.18272400]
[81.44293213 66.90726471]
[76.83736420 52.63180542]
[63.05075836 45.38147736]
[58.58341980 30.83852005]
[65.58045959 17.73978043]
[60.97489929 3.46431994]
[49.37415695 -7.29362535]
[52.82997513 -21.78177834]
[48.22441101 -36.05723953]
[36.62366867 -46.81518555]
[40.07948685 -61.30333710]
[35.47392273 -75.57879639]
[30.86835861 -89.85426331]
[25.21992683 -97.11698151]
[26.31881905 -104.47483826]
[22.01123428 -118.84301758]
[17.70364952 -133.21121216]
[6.70794153 -140.03382874]
[3.43924975 -152.13897705]
[9.13053417 -162.85890198]
[1.14061809 -175.55383301]
[-14.34353352 -178.80215454]
[-18.84162903 -193.00132751]
[-30.14063454 -202.86705017]
[-41.43964005 -212.73277283]
[-52.73864365 -222.59849548]
[-64.03765106 -232.46421814]
[-75.33665466 -242.32994080]
[-91.37577820 -242.68492126]
[-100.98345947 -255.53295898]
[-96.78951263 -271.01812744]
[-82.01116943 -277.26153564]
[-67.98510742 -269.47375488]
[-65.47093201 -253.62893677]
[-54.17192459 -243.76321411]
[-42.87292099 -233.89749146]
[-31.57391548 -224.03176880]
[-20.27491188 -214.16604614]
[-8.97590637 -204.30032349]
[5.70006418 -201.75765991]
[11.00634098 -186.85282898]
[6.61891556 -201.19683838]
[5.25041676 -216.13427734]
[6.95841980 -231.03672791]
[11.67106628 -245.27719116]
[19.19008827 -258.25656128]
[29.19914818 -269.42880249]
[41.27715302 -278.32385254]
[54.91595840 -284.56747437]
[69.54176331 -287.89703369]
[84.53923035 -288.17239380]
[99.27740479 -285.38201904]
[113.13623047 -279.64328003]
[125.53263092 -271.19763184]
[135.94508362 -260.40036011]
[143.93551636 -247.70574951]
[149.16775513 -233.64788818]
[151.42167664 -218.81819153]
[150.60246277 -203.84057617]
[146.74456787 -189.34518433]
[140.01031494 -175.94183350]
[130.68299866 -164.19444275]
[119.15505219 -154.59722900]
[105.91146088 -147.55397034]
[91.50942230 -143.36099243]
[76.55483246 -142.19468689]
[61.67685699 -144.10412598]
[47.50144196 -149.00898743]
[34.62496567 -156.70291138]
[23.58522224 -166.86663818]
[36.74541855 -155.29904175]
[32.07183456 -137.51878357]
[36.37941742 -123.15060425]
[40.68700409 -108.78242493]
[45.14381790 -94.45982361]
[49.74938202 -80.18436432]
[54.35494614 -65.90890503]
[65.62626648 -56.17203522]
[62.49987030 -40.66280365]
[67.10543823 -26.38734436]
[78.37675476 -16.65047455]
[75.25035858 -1.14124453]
[79.85592651 13.13421631]
[93.18879700 19.67409706]
[98.06285858 34.08583450]
[91.11282349 48.02623749]
[95.71839142 62.30170059]
[100.32395172 76.57716370]
[121.43646240 83.47715759]
[129.79861450 107.40688324]
[143.92341614 112.45564270]
[158.04821777 117.50439453]
[172.17301941 122.55315399]
[186.29782104 127.60190582]
[200.42262268 132.65066528]
[216.45008850 129.17898560]
[227.26850891 141.50350952]
[221.74882507 156.94583130]
[205.56921387 159.62019348]
[195.37387085 146.77546692]
[181.24906921 141.72671509]
[167.12426758 136.67794800]
[152.99946594 131.62919617]
[138.87466431 126.58044434]
[124.74985504 121.53168488]
[112.57801819 130.29789734]
[112.89007568 145.29464722]
[113.20213318 160.29139709]
[113.51419067 175.28814697]
[113.82624817 190.28491211]
[114.13829803 205.28166199]
[114.45035553 220.27841187]
[114.76241302 235.27516174]
[115.07447052 250.27192688]
[115.38652802 265.26867676]
[130.04151917 268.85943604]
[143.26733398 276.12170410]
[154.16220093 286.56030273]
[161.98329163 299.46350098]
[166.19735718 313.95156860]
[166.51708984 329.03668213]
[162.92065430 343.69027710]
[155.65328979 356.91326904]
[145.21049500 367.80410767]
[132.30426025 375.62023926]
[117.81457520 379.82870483]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[24 112]
[25 111]
[26 110]
[29 107]
[30 106]
[32 104]
[33 103]
[35 101]
[36 100]
[37 99]
[39 98]
[40 97]
[41 96]
[44 94]
[45 65]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[114 129]
[115 128]
[116 127]
[117 126]
[118 125]
[119 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
