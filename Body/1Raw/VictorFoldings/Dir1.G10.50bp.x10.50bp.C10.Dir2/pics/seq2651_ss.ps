%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACCCAACGGGGGGGGGGACAGGCAUGCUCAUAAGGAAAGGUUAAAAAAAGUAAAAGGAACUCGGCAAxxxxxxxxxxACAUAAAAUCUAGACAAAAAAGGAAGGAAUCGAACCCCCCAAAGCUGGUUCCCCCCCCCCUCAAGCCAAC\
) } def
/len { sequence length } bind def

/coor [
[82.72734833 421.93249512]
[68.88140869 415.91647339]
[57.17274857 406.38705444]
[48.47022629 394.05139160]
[43.41962433 379.82485962]
[42.39573288 364.76318359]
[45.47453308 349.98400879]
[52.42755127 336.58407593]
[62.73883820 325.55776978]
[75.64321899 317.72323608]
[90.18310547 313.66192627]
[90.18310547 298.66192627]
[90.18310547 283.66192627]
[90.18310547 268.66192627]
[90.18310547 253.66194153]
[90.18310547 238.66194153]
[90.18310547 223.66194153]
[90.18310547 208.66194153]
[90.18310547 193.66194153]
[90.18310547 178.66194153]
[90.18310547 163.66194153]
[87.45272827 159.67187500]
[87.24423218 153.91099548]
[90.50814819 148.04119873]
[83.30697632 135.00308228]
[91.61164856 121.53672028]
[92.23562622 106.54970551]
[89.38317871 98.95052338]
[93.03169250 91.25833893]
[93.96732330 76.28755188]
[94.90295410 61.31675720]
[82.83581543 54.17321777]
[75.07255554 42.57481384]
[73.08738708 28.82694054]
[77.21278381 15.63267136]
[86.58544922 5.56131077]
[99.32621002 0.54808843]
[100.57308960 -14.39999866]
[98.28472900 -19.23559761]
[98.13960266 -23.98231316]
[99.73343658 -27.82436562]
[102.39265442 -30.23186302]
[104.56949615 -45.07307053]
[106.74633026 -59.91427612]
[108.92316437 -74.75547791]
[94.33108521 -78.27489471]
[80.11949158 -83.10666656]
[66.40617371 -89.21076202]
[53.30474472 -96.53659821]
[40.92378235 -105.02346802]
[29.36587715 -114.60105133]
[18.72680473 -125.18997955]
[9.09472466 -136.70251465]
[0.54945362 -149.04324341]
[-6.83819866 -162.10990906]
[-13.00701427 -175.79423523]
[-17.90587616 -189.98283386]
[-21.49418831 -204.55813599]
[-23.74221802 -219.39935303]
[-24.63133621 -234.38349915]
[-24.15417480 -249.38641357]
[-22.31468964 -264.28378296]
[-19.12812042 -278.95214844]
[-14.62087631 -293.26995850]
[-8.83030319 -307.11859131]
[-1.80438626 -320.38327026]
[6.39865446 -332.95410156]
[15.71084499 -344.72686768]
[26.05501938 -355.60406494]
[37.34546280 -365.49554443]
[49.48861313 -374.31930542]
[62.38385010 -382.00228882]
[75.92431641 -388.48080444]
[89.99781036 -393.70114136]
[104.48770905 -397.62008667]
[119.27394867 -400.20513916]
[134.23399353 -401.43487549]
[149.24388123 -401.29910278]
[164.17924500 -399.79898071]
[178.91629028 -396.94689941]
[193.33294678 -392.76651001]
[207.30970764 -387.29244995]
[220.73077393 -380.57009888]
[233.48493958 -372.65512085]
[245.46649170 -363.61315918]
[256.57617188 -353.51907349]
[266.72192383 -342.45657349]
[275.81964111 -330.51727295]
[283.79397583 -317.80014038]
[290.57879639 -304.41055298]
[296.11795044 -290.45944214]
[300.36547852 -276.06243896]
[303.28619385 -261.33883667]
[304.85592651 -246.41064453]
[305.06164551 -231.40155029]
[303.90164185 -216.43592834]
[301.38552856 -201.63780212]
[297.53417969 -187.12980652]
[292.37945557 -173.03213501]
[285.96414185 -159.46162415]
[278.34133911 -146.53071594]
[269.57424927 -134.34657288]
[259.73553467 -123.01014709]
[248.90666199 -112.61538696]
[237.17741394 -103.24842834]
[224.64495850 -94.98689270]
[211.41317749 -87.89923096]
[197.59167480 -82.04417419]
[183.29502869 -77.47024536]
[168.64166260 -74.21534729]
[153.75303650 -72.30644989]
[138.75250244 -71.75936890]
[123.76437378 -72.57864380]
[121.58753967 -57.73743820]
[119.41069794 -42.89623260]
[117.23386383 -28.05502701]
[115.52117157 -13.15312386]
[114.27429962 1.79496300]
[127.75071716 10.65711308]
[134.97727966 25.18153191]
[133.90560913 41.46285629]
[124.73284149 55.07006454]
[109.87374115 62.25238800]
[108.93811035 77.22317505]
[108.00248718 92.19396973]
[107.22264099 107.17368317]
[106.59866333 122.16069794]
[113.75520325 136.27078247]
[105.49516296 148.66517639]
[105.18310547 163.66194153]
[105.18310547 178.66194153]
[105.18310547 193.66194153]
[105.18310547 208.66194153]
[105.18310547 223.66194153]
[105.18310547 238.66194153]
[105.18310547 253.66194153]
[105.18310547 268.66192627]
[105.18310547 283.66192627]
[105.18310547 298.66192627]
[105.18310547 313.66192627]
[119.72299194 317.72323608]
[132.62738037 325.55776978]
[142.93865967 336.58407593]
[149.89167786 349.98400879]
[152.97047424 364.76318359]
[151.94659424 379.82485962]
[146.89598083 394.05139160]
[138.19346619 406.38705444]
[126.48480225 415.91647339]
[112.63886261 421.93249512]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[26 127]
[27 126]
[29 125]
[30 124]
[31 123]
[37 118]
[38 117]
[42 116]
[43 115]
[44 114]
[45 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
