%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAAACCUACGGGGGGGGGGUCCAAUGCUAAAACUAAUCGUCCCAACAAUUAUAUUACUACCACUGACAUxxxxxxxxxxACCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACCCCCCCCCCCUAAACCCAC\
) } def
/len { sequence length } bind def

/coor [
[85.11870575 364.13986206]
[71.27276611 358.12384033]
[59.56410217 348.59442139]
[50.86157990 336.25872803]
[45.81097794 322.03222656]
[44.78708649 306.97055054]
[47.86588669 292.19137573]
[54.81890488 278.79144287]
[65.13018799 267.76510620]
[78.03456879 259.93060303]
[92.57445526 255.86929321]
[92.57445526 240.86929321]
[92.57445526 225.86929321]
[92.57445526 210.86929321]
[92.57445526 195.86929321]
[92.57445526 180.86929321]
[92.57445526 165.86929321]
[92.57445526 150.86929321]
[92.57445526 135.86929321]
[92.57445526 120.86929321]
[92.57445526 105.86929321]
[89.75909424 101.36080933]
[89.70751190 95.59175110]
[92.89949799 90.24856567]
[93.52347565 75.26154327]
[94.14745331 60.27453232]
[94.77143097 45.28751373]
[79.84819794 43.72335815]
[65.05262756 41.22525024]
[50.44310760 37.80304337]
[36.07730484 33.47024918]
[22.01190567 28.24396706]
[8.30242348 22.14482117]
[-4.99703503 15.19688034]
[-17.83398438 7.42756748]
[-30.15776062 -1.13245535]
[-41.91973114 -10.44940567]
[-53.07347107 -20.48651314]
[-63.57496643 -31.20416832]
[-73.38276672 -42.56007004]
[-82.45816803 -54.50939941]
[-90.76535797 -67.00500488]
[-98.27154541 -79.99756622]
[-104.94711304 -93.43580627]
[-110.76570129 -107.26669312]
[-115.70436096 -121.43563843]
[-119.74359894 -135.88673401]
[-122.86746979 -150.56292725]
[-125.06365204 -165.40632629]
[-126.32346344 -180.35832214]
[-126.64195251 -195.35992432]
[-126.01784515 -210.35192871]
[-124.45360565 -225.27514648]
[-121.95542145 -240.07070923]
[-118.53314209 -254.68020630]
[-114.20027161 -269.04598999]
[-108.97391510 -283.11135864]
[-102.87469482 -296.82080078]
[-95.92668915 -310.12023926]
[-88.15731049 -322.95715332]
[-79.59722137 -335.28088379]
[-70.28021240 -347.04278564]
[-60.24304199 -358.19647217]
[-49.52533340 -368.69793701]
[-38.16938400 -378.50567627]
[-26.22000313 -387.58099365]
[-13.72435665 -395.88812256]
[-0.73175710 -403.39425659]
[12.70651913 -410.06973267]
[26.53743744 -415.88827515]
[40.70640945 -420.82684326]
[55.15752411 -424.86599731]
[69.83374023 -427.98980713]
[84.67714691 -430.18591309]
[99.62915039 -431.44564819]
[114.63075256 -431.76403809]
[129.62275696 -431.13986206]
[144.54595947 -429.57556152]
[159.34150696 -427.07730103]
[173.95098877 -423.65493774]
[188.31675720 -419.32199097]
[202.38209534 -414.09555054]
[216.09152222 -407.99627686]
[229.39089966 -401.04818726]
[242.22776794 -393.27874756]
[254.55145264 -384.71859741]
[266.31332397 -375.40151978]
[277.46697998 -365.36428833]
[287.96835327 -354.64654541]
[297.77603149 -343.29052734]
[306.85131836 -331.34109497]
[315.15835571 -318.84539795]
[322.66442871 -305.85278320]
[329.33984375 -292.41445923]
[335.15829468 -278.58352661]
[340.09680176 -264.41452026]
[344.13589478 -249.96337891]
[347.25961304 -235.28713989]
[349.45562744 -220.44372559]
[350.71530151 -205.49171448]
[351.03363037 -190.49011230]
[350.40936279 -175.49812317]
[348.84497070 -160.57490540]
[346.34661865 -145.77938843]
[342.92419434 -131.16992188]
[338.59118652 -116.80417633]
[333.36468506 -102.73886108]
[327.26531982 -89.02947998]
[320.31716919 -75.73012543]
[312.54763794 -62.89329910]
[303.98742676 -50.56965637]
[294.67028809 -38.80783463]
[284.63302612 -27.65424919]
[273.91519165 -17.15292358]
[262.55914307 -7.34529829]
[250.60966492 1.72991836]
[238.11393738 10.03691101]
[225.12126160 17.54289436]
[211.68290710 24.21824837]
[197.85192871 30.03662491]
[183.68290710 34.97506332]
[169.23175049 39.01407242]
[154.55549622 42.13771439]
[139.71208191 44.33366013]
[124.76005554 45.59324265]
[109.75844574 45.91149139]
[109.13446808 60.89850998]
[108.51049042 75.88552094]
[107.88651276 90.87254333]
[107.57445526 105.86929321]
[107.57445526 120.86929321]
[107.57445526 135.86929321]
[107.57445526 150.86929321]
[107.57445526 165.86929321]
[107.57445526 180.86929321]
[107.57445526 195.86929321]
[107.57445526 210.86929321]
[107.57445526 225.86929321]
[107.57445526 240.86929321]
[107.57445526 255.86929321]
[122.11434937 259.93060303]
[135.01872253 267.76510620]
[145.33001709 278.79144287]
[152.28303528 292.19137573]
[155.36183167 306.97055054]
[154.33793640 322.03222656]
[149.28733826 336.25872803]
[140.58480835 348.59442139]
[128.87615967 358.12384033]
[115.03021240 364.13986206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 129]
[25 128]
[26 127]
[27 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
