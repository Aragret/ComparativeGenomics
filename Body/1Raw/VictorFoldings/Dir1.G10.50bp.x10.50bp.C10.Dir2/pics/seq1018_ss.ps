%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAUCACCACGGGGGGGGGGGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUxxxxxxxxxxAGACCUAACCUGACUAGAAAAGCUAUUACCUAAAACAAUUUCACAGCACCCCCCCCCCCCAAAUCUCCAC\
) } def
/len { sequence length } bind def

/coor [
[83.64662170 377.28219604]
[70.42642212 370.00973511]
[59.53961945 359.56271362]
[51.72848892 346.65347290]
[47.52560806 332.16217041]
[47.21753311 317.07681274]
[50.82527542 302.42599487]
[58.10284805 289.20861816]
[68.55405426 278.32583618]
[81.46631622 270.51968384]
[95.95925140 266.32241821]
[95.64720154 251.32565308]
[95.33514404 236.32890320]
[95.02308655 221.33213806]
[94.71102905 206.33538818]
[94.39897156 191.33863831]
[94.08691406 176.34188843]
[93.77486420 161.34512329]
[93.46280670 146.34837341]
[93.15074921 131.35162354]
[92.83869171 116.35486603]
[79.57608795 99.15409088]
[92.53913116 78.21324921]
[82.55640411 67.01748657]
[72.57367706 55.82172012]
[53.68192291 55.50405884]
[41.18487930 41.75918961]
[42.61181259 23.55585861]
[32.17200089 12.78504944]
[21.73218727 2.01424074]
[8.82995701 1.02110648]
[0.35439813 -8.21923256]
[0.47025773 -20.35570335]
[-10.93076324 -30.10335541]
[-23.37020302 -38.48549652]
[-35.80964279 -46.86764145]
[-48.24908447 -55.24978256]
[-63.79572296 -47.17526245]
[-81.20396423 -48.04281616]
[-95.72239685 -57.52615356]
[-103.43354034 -72.95961761]
[-102.31069946 -90.08689117]
[-115.08805847 -97.94432068]
[-127.86540985 -105.80174255]
[-140.61300659 -103.57623291]
[-151.10885620 -110.43596649]
[-153.99523926 -122.22477722]
[-166.60636902 -130.34632874]
[-179.21749878 -138.46786499]
[-195.61465454 -138.72277832]
[-203.35499573 -153.18028259]
[-194.47590637 -166.96772766]
[-178.11143494 -165.90177917]
[-171.09594727 -151.07899475]
[-158.48483276 -142.95745850]
[-145.87370300 -134.83590698]
[-128.35272217 -134.96034241]
[-120.00798798 -118.57910156]
[-107.23062897 -110.72167206]
[-94.45326996 -102.86425018]
[-83.98947906 -110.06902313]
[-71.52746582 -112.76922607]
[-58.92764282 -110.52533722]
[-48.08486176 -103.63861847]
[-40.64345932 -93.11128998]
[-37.74790955 -80.50074768]
[-39.86693954 -67.68922424]
[-27.42749977 -59.30708313]
[-14.98806000 -50.92493820]
[-2.54861999 -42.54279327]
[-7.45196247 -56.71873474]
[-5.33290148 -71.56829834]
[3.33984637 -83.80690002]
[16.64794922 -90.72747803]
[31.64777756 -90.79926300]
[45.02150726 -84.00637054]
[53.81099319 -71.85133362]
[56.07208252 -57.02273178]
[51.30463791 -42.80051422]
[40.56318283 -32.33050156]
[26.22362328 -27.92857170]
[11.45592213 -30.56918144]
[28.46441460 -26.36072540]
[32.50299454 -8.42557144]
[42.94280624 2.34523678]
[53.38262177 13.11604500]
[64.63352966 10.81223106]
[75.70487976 14.28971386]
[83.78367615 22.78717613]
[86.75827789 34.25280380]
[83.76943970 45.83899307]
[93.75216675 57.03475952]
[103.73489380 68.23052216]
[117.80641174 73.42594147]
[132.66946411 71.40360260]
[146.92346191 59.79311752]
[162.89907837 66.98892975]
[177.71682739 64.65782928]
[192.53459167 62.32672119]
[207.35234070 59.99561691]
[209.71640015 45.05351639]
[216.58392334 31.57418633]
[227.28210449 20.87819481]
[240.76283264 14.01342869]
[255.70541382 11.65242577]
[270.64593506 14.02649403]
[284.12066650 20.90304565]
[294.80947876 31.60838699]
[301.66522217 45.09371567]
[304.01620483 60.03787994]
[301.63211060 74.97679901]
[294.74655151 88.44691467]
[284.03402710 99.12856293]
[270.54412842 105.97525024]
[255.59838867 108.31623077]
[240.66105652 105.92214203]
[227.19557190 99.02753448]
[216.52110291 88.30788422]
[209.68345642 74.81337738]
[194.86569214 77.14447784]
[180.04792786 79.47558594]
[165.23017883 81.80668640]
[157.82504272 91.42288971]
[145.45208740 93.45484161]
[134.69178772 86.26665497]
[119.82875061 88.28898621]
[121.30099487 100.35146332]
[116.52061462 110.50737000]
[107.83544922 116.04281616]
[108.14749908 131.03956604]
[108.45955658 146.03631592]
[108.77161407 161.03308105]
[109.08367157 176.02983093]
[109.39572906 191.02658081]
[109.70778656 206.02333069]
[110.01983643 221.02009583]
[110.33189392 236.01684570]
[110.64395142 251.01359558]
[110.95600891 266.01034546]
[125.61100006 269.60110474]
[138.83680725 276.86337280]
[149.73167419 287.30197144]
[157.55278015 300.20516968]
[161.76684570 314.69323730]
[162.08656311 329.77835083]
[158.49014282 344.43194580]
[151.22277832 357.65496826]
[140.77998352 368.54577637]
[127.87374878 376.36190796]
[113.38405609 380.57037354]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[23 93]
[24 92]
[25 91]
[28 86]
[29 85]
[30 84]
[33 82]
[34 70]
[35 69]
[36 68]
[37 67]
[42 60]
[43 59]
[44 58]
[47 56]
[48 55]
[49 54]
[94 126]
[95 125]
[97 122]
[98 121]
[99 120]
[100 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
