%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:24 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACCCUAGCAUUAGGGGGGGGGGCUUAUAUGAUAUGUCUCCAUACCCAUUACAAUCUCCAGCAUUCCCCCUCAxxxxxxxxxxGGAGGACUACUCAAAACCAUACCUCUCACUUCAACCUCCCUCACCAUUGGCCCCCCCCCCCAGCCUAGCAUUA\
) } def
/len { sequence length } bind def

/coor [
[85.02796173 401.82974243]
[70.75619507 397.02029419]
[57.85220718 389.25491333]
[46.91955185 378.89675903]
[38.46956635 366.43032837]
[32.89747238 352.43869019]
[30.46388245 337.57626343]
[31.28262329 322.53820801]
[35.31539917 308.02783203]
[42.37359238 294.72384644]
[52.12707901 283.24850464]
[64.11966705 274.13851929]
[77.79044342 267.81997681]
[92.50000000 264.58840942]
[92.50000000 249.58840942]
[92.50000000 234.58840942]
[92.50000000 219.58840942]
[92.50000000 204.58840942]
[92.50000000 189.58840942]
[92.50000000 174.58840942]
[92.50000000 159.58840942]
[92.50000000 144.58840942]
[92.50000000 129.58840942]
[92.50000000 114.58840942]
[87.17023468 109.31170654]
[76.61666107 119.97106934]
[65.95745850 109.41733551]
[76.51070404 98.75829315]
[71.18094635 93.48159027]
[56.18169403 93.63166809]
[41.18244553 93.78173828]
[25.58450508 103.51994324]
[10.63472843 94.37474823]
[-4.35851526 94.82491302]
[-19.35175896 95.27507019]
[-34.34500122 95.72523499]
[-48.00252914 104.80289459]
[-62.57051849 97.27257538]
[-63.06266785 80.88081360]
[-48.97269821 72.49005127]
[-34.79516220 80.73198700]
[-19.80191994 80.28182983]
[-4.80867577 79.83166504]
[10.18456841 79.38150787]
[18.73472786 70.77510071]
[31.25922012 70.30943298]
[41.03237152 78.78248596]
[56.03162003 78.63241577]
[71.03086853 78.48233795]
[83.24836731 79.30444336]
[92.86007690 84.39049530]
[98.63943481 92.41683197]
[106.35499573 79.55331421]
[114.07056427 66.68979645]
[121.78612518 53.82627869]
[114.45032501 40.40490341]
[114.81498718 25.21399117]
[122.68206024 12.33084393]
[135.85328674 5.16321516]
[150.74345398 5.54811907]
[158.45903015 -7.31539822]
[145.27130127 -0.16809593]
[130.69972229 3.39127970]
[115.70201874 3.12878633]
[101.26392365 -0.93832386]
[88.33438873 -8.54273701]
[77.76321411 -19.18464851]
[70.24520111 -32.16461182]
[66.27446747 -46.62951279]
[66.11200714 -61.62863159]
[69.76847839 -76.17614746]
[77.00357819 -89.31591034]
[87.34175873 -100.18430328]
[100.10353851 -108.06700134]
[114.45015717 -112.44589233]
[129.43865967 -113.03318787]
[144.08390808 -109.79028320]
[157.42335510 -102.93031311]
[168.58024597 -92.90415955]
[176.82128906 -80.37079620]
[181.60484314 -66.15398407]
[182.61648560 -51.18813705]
[179.78974915 -36.45689392]
[173.31140137 -22.93000221]
[185.77302551 -31.27914810]
[198.23463440 -39.62829208]
[210.69624329 -47.97743607]
[223.15785217 -56.32658386]
[217.46354675 -70.26070404]
[214.69105530 -85.05590820]
[214.95391846 -100.10635376]
[218.24136353 -114.79572296]
[224.41879272 -128.52249146]
[233.23321533 -140.72457886]
[244.32369995 -150.90229797]
[257.23611450 -158.63887024]
[271.44168091 -163.61750793]
[286.35867310 -165.63433838]
[301.37631226 -164.60676575]
[315.87957764 -160.57685852]
[329.27459717 -153.70965576]
[341.01281738 -144.28636169]
[350.61361694 -132.69284058]
[357.68383789 -119.40386200]
[361.93392944 -104.96358490]
[363.18988037 -89.96333313]
[361.40023804 -75.01735687]
[356.63830566 -60.73769379]
[349.09906006 -47.70907593]
[339.09127808 -36.46502304]
[327.02468872 -27.46596909]
[313.39349365 -21.08041954]
[298.75585938 -17.56986046]
[283.71115112 -17.07804680]
[268.87545776 -19.62511826]
[254.85632324 -25.10677147]
[242.22779846 -33.29853821]
[231.50700378 -43.86497116]
[219.04539490 -35.51582718]
[206.58377075 -27.16668129]
[194.12216187 -18.81753540]
[181.66055298 -10.46839046]
[171.32254028 0.40016499]
[163.60697937 13.26368237]
[170.95751953 26.21880531]
[170.83572388 41.21350861]
[163.17417908 54.21993637]
[149.94421387 61.69421005]
[134.64964294 61.54184341]
[126.93407440 74.40535736]
[119.21851349 87.26887512]
[111.50295258 100.13239288]
[107.50000000 114.58840942]
[107.50000000 129.58840942]
[107.50000000 144.58840942]
[107.50000000 159.58840942]
[107.50000000 174.58840942]
[107.50000000 189.58840942]
[107.50000000 204.58840942]
[107.50000000 219.58840942]
[107.50000000 234.58840942]
[107.50000000 249.58840942]
[107.50000000 264.58840942]
[122.20955658 267.81997681]
[135.88034058 274.13851929]
[147.87292480 283.24850464]
[157.62640381 294.72384644]
[164.68460083 308.02783203]
[168.71737671 322.53820801]
[169.53611755 337.57626343]
[167.10252380 352.43869019]
[161.53042603 366.43032837]
[153.08044434 378.89675903]
[142.14779663 389.25491333]
[129.24380493 397.02029419]
[114.97203827 401.82974243]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[24 133]
[29 49]
[30 48]
[31 47]
[33 44]
[34 43]
[35 42]
[36 41]
[52 132]
[53 131]
[54 130]
[55 129]
[60 124]
[61 123]
[84 122]
[85 121]
[86 120]
[87 119]
[88 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
