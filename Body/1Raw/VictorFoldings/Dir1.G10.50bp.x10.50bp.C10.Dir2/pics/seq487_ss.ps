%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:18 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAAAUUUUAGGGGGGGGGGUCUUUUGGCGGUAUGCACUUUUAACAGUCACCCCCCAACUAACACAUUAUxxxxxxxxxxGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCUAACAACAUGGCUUUCCCCCCCCCCCUCAACUUUUA\
) } def
/len { sequence length } bind def

/coor [
[70.69593811 376.17034912]
[57.47574234 368.89785767]
[46.58893967 358.45086670]
[38.77780914 345.54162598]
[34.57492447 331.05029297]
[34.26685333 315.96496582]
[37.87459564 301.31414795]
[45.15216827 288.09674072]
[55.60337448 277.21398926]
[68.51564026 269.40783691]
[83.00857544 265.21054077]
[82.69651794 250.21379089]
[82.38446045 235.21704102]
[82.07240295 220.22029114]
[81.76034546 205.22354126]
[81.44829559 190.22677612]
[81.13623810 175.23002625]
[80.82418060 160.23327637]
[80.51212311 145.23652649]
[80.20006561 130.23976135]
[73.99465942 116.58352661]
[62.90334702 106.48487854]
[51.81203079 96.38623047]
[40.72071457 86.28758240]
[27.19652557 79.79941559]
[12.37876701 77.46830750]
[-2.43899131 75.13720703]
[-17.25675011 72.80609894]
[-26.28675270 74.56987762]
[-32.35721588 70.26927948]
[-47.12327194 67.63041687]
[-59.99937820 76.39646912]
[-74.93666840 73.50993347]
[-83.21440887 61.18051529]
[-97.98046112 58.54165268]
[-107.04520416 60.11718369]
[-113.02488708 55.69123077]
[-127.73284912 52.74575043]
[-142.44081116 49.80026627]
[-155.45237732 58.77103806]
[-170.98091125 55.83163452]
[-179.81361389 42.72595215]
[-176.71018982 27.22935867]
[-163.51185608 18.53571129]
[-148.04895020 21.80279541]
[-139.49533081 35.09230423]
[-124.78736115 38.03778839]
[-110.07940674 40.98327255]
[-95.34159851 43.77559662]
[-80.57553864 46.41445923]
[-68.53974915 37.71530151]
[-53.52728271 40.18113708]
[-44.48440933 52.86436081]
[-29.71835327 55.50322723]
[-14.92564583 57.98834229]
[-0.10788749 60.31944656]
[14.70987034 62.65055084]
[29.52762794 64.98165894]
[18.17393112 55.17892456]
[9.05913639 43.26588440]
[2.56671858 29.74373436]
[-1.03017747 15.18137455]
[-1.58022475 0.19146317]
[0.93971813 -14.59535122]
[6.42363358 -28.55696487]
[14.64080429 -41.10599518]
[25.24552345 -51.71447754]
[37.79162979 -59.93610764]
[51.75129700 -65.42498016]
[66.53721619 -67.95017242]
[81.52732086 -67.40544891]
[96.09095764 -63.81372452]
[109.61540985 -57.32611084]
[121.53169250 -48.21554565]
[131.33845520 -36.86532974]
[138.62312317 -23.75298309]
[143.07920837 -9.43016052]
[144.51924133 5.50055504]
[142.88265991 20.41100693]
[138.23828125 34.67388916]
[130.78152466 47.68914032]
[120.82610321 58.90918732]
[108.79084778 67.86199188]
[95.18210602 74.17089081]
[80.57241821 77.57046509]
[65.57643890 77.91767883]
[50.81936264 75.19626617]
[61.91067886 85.29491425]
[73.00199127 95.39356232]
[84.09330750 105.49221039]
[75.96401215 95.87662506]
[75.00476837 80.10556793]
[84.75495148 63.55507278]
[104.98749542 53.20108032]
[117.59862518 45.07954025]
[118.33533478 29.57996368]
[128.06802368 17.49466133]
[143.05424500 13.47067738]
[157.53152466 19.05531693]
[165.93302917 32.10117340]
[165.02821350 47.59184647]
[155.16500854 59.57085419]
[140.13600159 63.43202972]
[125.72016144 57.69066620]
[113.10903931 65.81221008]
[114.73445129 73.13396454]
[117.98527527 87.77746582]
[119.61068726 95.09921265]
[134.47373962 97.12154388]
[149.33677673 99.14388275]
[164.19982910 101.16621399]
[179.06288147 103.18855286]
[193.92591858 105.21088409]
[206.35260010 95.44598389]
[222.03424072 97.41107178]
[231.66722107 109.94029236]
[229.53643799 125.60028076]
[216.90608215 135.10025024]
[201.26948547 132.80403137]
[191.90359497 120.07392883]
[177.04054260 118.05159760]
[162.17749023 116.02926636]
[147.31445312 114.00692749]
[132.45140076 111.98459625]
[117.58835602 109.96225739]
[111.99047089 114.95362091]
[121.97302246 126.14954376]
[110.77694702 136.13192749]
[100.79470825 124.93634796]
[95.19682312 129.92771912]
[95.50888062 144.92446899]
[95.82093048 159.92121887]
[96.13298798 174.91796875]
[96.44504547 189.91473389]
[96.75710297 204.91148376]
[97.06916046 219.90823364]
[97.38121796 234.90498352]
[97.69326782 249.90174866]
[98.00532532 264.89849854]
[112.66031647 268.48925781]
[125.88613129 275.75152588]
[136.78099060 286.19012451]
[144.60209656 299.09332275]
[148.81616211 313.58139038]
[149.13587952 328.66650391]
[145.53945923 343.32009888]
[138.27209473 356.54309082]
[127.82929230 367.43392944]
[114.92306519 375.25006104]
[100.43337250 379.45852661]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 90]
[22 89]
[23 88]
[24 87]
[25 58]
[26 57]
[27 56]
[28 55]
[30 54]
[31 53]
[34 50]
[35 49]
[37 48]
[38 47]
[39 46]
[94 105]
[95 104]
[108 125]
[109 124]
[110 123]
[111 122]
[112 121]
[113 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
