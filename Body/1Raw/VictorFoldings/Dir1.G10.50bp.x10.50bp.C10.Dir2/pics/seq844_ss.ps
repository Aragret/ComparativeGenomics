%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:25 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UGUAGCUUACGGGGGGGGGGCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGCUCACAUCACCCCAxxxxxxxxxxCCUGAAGUUUAUAUUCUUAUCCUACCAGGCUUCGGAAUAAUCUCCCAUAUCCCCCCCCCCUGUAACUUAC\
) } def
/len { sequence length } bind def

/coor [
[30.97116852 450.74093628]
[17.12523079 444.72491455]
[5.41656828 435.19549561]
[-3.28595614 422.85983276]
[-8.33655834 408.63330078]
[-9.36044979 393.57162476]
[-6.28165054 378.79244995]
[0.67137134 365.39254761]
[10.98265553 354.36621094]
[23.88703728 346.53170776]
[38.42692184 342.47036743]
[38.42692184 327.47036743]
[38.42692184 312.47036743]
[38.42692184 297.47036743]
[38.42692184 282.47036743]
[38.42692184 267.47036743]
[38.42692184 252.47038269]
[38.42692184 237.47038269]
[38.42692184 222.47038269]
[38.42692184 207.47038269]
[32.30184174 205.14614868]
[26.82858849 201.54583740]
[22.26901054 196.84170532]
[18.84123802 191.25877380]
[16.70926094 185.06414795]
[1.71656430 184.59611511]
[-12.31831360 191.89904785]
[-24.79796219 183.76838684]
[-39.79066086 183.30033875]
[-54.78335571 182.83229065]
[-69.77605438 182.36425781]
[-84.76874542 181.89620972]
[-91.77129364 195.45819092]
[-103.96984863 204.63195801]
[-118.94239044 207.59605408]
[-133.71609497 203.76196289]
[-145.35765076 193.89093018]
[-151.55560303 179.94288635]
[-151.07934570 164.68719482]
[-144.02345276 151.15290833]
[-131.78886414 142.02725220]
[-116.80477142 139.12213135]
[-102.04627228 143.01437378]
[-90.44367981 152.93116760]
[-84.30070496 166.90351868]
[-69.30800629 167.37155151]
[-54.31531143 167.83959961]
[-39.32261658 168.30764771]
[-24.32992172 168.77568054]
[-11.36742115 161.43928528]
[2.18460631 169.60340881]
[17.17730331 170.07145691]
[32.30886841 151.27740479]
[56.74606323 149.55348206]
[65.25714874 137.20190430]
[73.76824188 124.85033417]
[64.93613434 108.72753143]
[65.17990875 90.34570312]
[74.43646240 74.46277618]
[90.30983734 65.18987274]
[89.37421417 50.21907806]
[80.79119110 36.92839432]
[87.71955872 23.74328995]
[86.78392792 8.77249718]
[85.84829712 -6.19829416]
[71.24238586 -10.19154835]
[58.72587967 -18.71302986]
[49.65646362 -30.83839417]
[45.01792908 -45.25237274]
[45.31342697 -60.39144135]
[50.51090622 -74.61342621]
[60.04657745 -86.37564087]
[72.88609314 -94.40219879]
[87.63670349 -97.82244873]
[102.69838715 -96.26538086]
[116.43735504 -89.89988708]
[127.36331177 -79.41646576]
[134.29109192 -65.95227051]
[136.46922302 -50.96779633]
[133.66142273 -36.08844757]
[126.17228699 -22.92822456]
[114.81415558 -12.91464996]
[100.81909180 -7.13392258]
[101.75472260 7.83686924]
[102.69034576 22.80766106]
[111.20645142 35.02753448]
[104.34500122 49.28345108]
[105.28063202 64.25424194]
[113.06004333 66.30905914]
[120.19185638 70.03446198]
[126.32244110 75.24574280]
[131.14781189 81.68447876]
[145.37458801 76.93066406]
[159.60136414 72.17684937]
[173.82814026 67.42303467]
[188.05493164 62.66921616]
[191.17480469 46.46289062]
[201.96571350 34.09957123]
[217.42398071 28.87728119]
[233.31825256 32.12597656]
[245.34777832 42.87037659]
[259.47256470 37.82162094]
[273.59738159 32.77286530]
[286.47726440 21.74811172]
[300.63665771 31.07268143]
[295.59622192 47.26002884]
[278.64614868 46.89766693]
[264.52133179 51.94642258]
[250.39653015 56.99517822]
[248.82809448 70.59662628]
[241.50552368 82.24391174]
[229.81576538 89.62341309]
[216.01971436 91.24017334]
[202.81506348 86.72043610]
[192.80874634 76.89599609]
[178.58195496 81.64981079]
[164.35517883 86.40362549]
[150.12840271 91.15744019]
[135.90162659 95.91125488]
[134.49525452 110.75740051]
[127.21342468 123.77127838]
[115.29643250 132.73626709]
[100.77404022 136.12541199]
[86.11981201 133.36141968]
[77.60872650 145.71299744]
[69.09763336 158.06457520]
[75.11678314 168.98919678]
[76.29953766 181.33081055]
[72.51084900 193.05718994]
[64.42941284 202.26107788]
[53.42692184 207.47038269]
[53.42692184 222.47038269]
[53.42692184 237.47038269]
[53.42692184 252.47038269]
[53.42692184 267.47036743]
[53.42692184 282.47036743]
[53.42692184 297.47036743]
[53.42692184 312.47036743]
[53.42692184 327.47036743]
[53.42692184 342.47036743]
[67.96681213 346.53170776]
[80.87119293 354.36621094]
[91.18247223 365.39254761]
[98.13549805 378.79244995]
[101.21429443 393.57162476]
[100.19040680 408.63330078]
[95.13980103 422.85983276]
[86.43727875 435.19549561]
[74.72861481 444.72491455]
[60.88267899 450.74093628]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[25 52]
[26 51]
[28 49]
[29 48]
[30 47]
[31 46]
[32 45]
[54 126]
[55 125]
[56 124]
[60 88]
[61 87]
[63 85]
[64 84]
[65 83]
[92 119]
[93 118]
[94 117]
[95 116]
[96 115]
[101 109]
[102 108]
[103 107]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
