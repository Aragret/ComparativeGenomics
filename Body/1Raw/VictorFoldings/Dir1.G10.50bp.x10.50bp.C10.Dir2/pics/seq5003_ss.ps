%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:41 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAACUAGGAAGGGGGGGGGGUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGCACCCCUCUGxxxxxxxxxxAUAAUCGCCCACGGGCUUACAUCCUCAUUACUAUUCUGCCUAGCAAACUCCCCCCCCCCCAAACUACGAA\
) } def
/len { sequence length } bind def

/coor [
[72.58647919 339.44573975]
[65.38009644 326.12857056]
[62.89070511 311.19265747]
[65.38834381 296.25811768]
[72.60208130 282.94494629]
[83.74943542 272.69723511]
[97.62120819 266.62661743]
[96.37433624 251.67852783]
[84.87277222 242.28440857]
[83.39532471 227.14268494]
[93.32672882 215.14247131]
[92.07985687 200.19438171]
[90.83297729 185.24630737]
[89.58610535 170.29821777]
[88.33923340 155.35012817]
[87.09235382 140.40203857]
[85.84548187 125.45394897]
[74.64971924 115.47122955]
[59.65702057 115.93927002]
[44.66432571 116.40731049]
[29.67162895 116.87535095]
[14.67893219 117.34339142]
[-0.31376347 117.81143951]
[-15.30645943 118.27947998]
[-30.29915619 118.74752045]
[-18.28831291 127.73304749]
[-12.25312805 141.46536255]
[-13.75579357 156.38990784]
[-22.40734673 168.64350891]
[-35.96836090 175.05435181]
[-50.92860794 173.96301270]
[-63.41567230 165.65197754]
[-70.19731903 152.27253723]
[-69.51813507 137.28793335]
[-61.55392838 124.57685089]
[-48.36631012 117.42957306]
[-63.13236618 114.79070282]
[-77.89842224 112.15184021]
[-92.66447449 109.51297760]
[-106.59644318 117.46784210]
[-121.44836426 111.40153503]
[-125.82711029 95.96760559]
[-116.37368774 83.00564575]
[-100.33995056 82.45896149]
[-90.02561188 94.74691772]
[-75.25955963 97.38578796]
[-60.49350357 100.02465057]
[-45.72744751 102.66351318]
[-30.76719856 103.75482178]
[-15.77450180 103.28678131]
[-0.78180557 102.81874084]
[14.21089077 102.35070038]
[29.20358658 101.88265228]
[44.19628143 101.41461182]
[59.18898010 100.94657135]
[74.18167114 100.47853088]
[85.48329163 82.03665924]
[104.64308167 80.16738892]
[112.89537048 67.64142609]
[121.14765930 55.11546326]
[129.39994812 42.58950424]
[137.65223694 30.06354141]
[142.99374390 16.04682732]
[145.17059326 1.20562267]
[147.34742737 -13.63558292]
[133.26255798 -18.96762085]
[120.65346527 -27.20320702]
[110.10990143 -37.95714951]
[102.12500000 -50.72646713]
[97.07223511 -64.91390991]
[95.18792725 -79.85591125]
[96.56021881 -94.85361481]
[101.12491608 -109.20552826]
[108.66852570 -122.24040985]
[118.83821106 -133.34857178]
[131.15832520 -142.01049805]
[145.05264282 -147.82101440]
[159.87127686 -150.50839233]
[174.92115784 -149.94689941]
[189.49836731 -146.16282654]
[202.92109680 -139.33314514]
[214.56153870 -129.77731323]
[223.87525940 -117.94224548]
[230.42663574 -104.38151550]
[233.90924072 -89.72936249]
[234.16018677 -74.67110443]
[231.16775513 -59.91104507]
[225.07188416 -46.13953400]
[216.15771484 -34.00069427]
[204.84214783 -24.06227684]
[191.65444946 -16.78912163]
[177.21144104 -12.52140903]
[162.18862915 -11.45874596]
[160.01179504 3.38245964]
[157.83496094 18.22366524]
[167.39328003 6.66345692]
[179.67227173 -1.95201480]
[193.79475403 -7.00727940]
[208.75183105 -8.14119911]
[223.47500610 -5.27277088]
[236.91250610 1.39309227]
[248.10437012 11.38019562]
[256.25106812 23.97508240]
[260.77062988 38.27799988]
[261.34020996 53.26718521]
[257.91906738 67.87183380]
[250.75164795 81.04862976]
[240.34994507 91.85625458]
[227.45704651 99.52262878]
[212.99400330 103.50008392]
[197.99400330 103.50447845]
[183.52862549 99.53549957]
[170.63124084 91.87668610]
[160.22320557 81.07516479]
[153.04804993 67.90257263]
[149.61836243 53.29993057]
[150.17819214 38.31583023]
[141.92590332 50.84179306]
[133.67361450 63.36775589]
[125.42133331 75.89371490]
[117.16904449 88.41967773]
[120.72380066 102.99237823]
[133.81695557 110.31148529]
[150.19808960 109.54312897]
[158.82514954 123.48966980]
[150.82333374 137.80410767]
[134.42425537 137.76097107]
[126.49785614 123.40464020]
[113.40470123 116.08553314]
[100.79357147 124.20707703]
[102.04044342 139.15516663]
[103.28731537 154.10325623]
[104.53419495 169.05134583]
[105.78106689 183.99942017]
[107.02793884 198.94750977]
[108.27481842 213.89559937]
[120.05710602 224.08457947]
[121.10867310 239.26182556]
[111.32242584 250.43165588]
[112.56929779 265.37973022]
[127.25511932 269.06826782]
[139.94619751 277.32751465]
[149.26591492 289.26159668]
[154.20330811 303.57592773]
[154.22282410 318.71786499]
[149.32234192 333.04492188]
[140.03341675 345.00296021]
[127.36367035 353.29489136]
[112.68740845 357.02127075]
[97.59658813 355.77786255]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 140]
[8 139]
[11 136]
[12 135]
[13 134]
[14 133]
[15 132]
[16 131]
[17 130]
[18 56]
[19 55]
[20 54]
[21 53]
[22 52]
[23 51]
[24 50]
[25 49]
[36 48]
[37 47]
[38 46]
[39 45]
[58 121]
[59 120]
[60 119]
[61 118]
[62 117]
[63 95]
[64 94]
[65 93]
[122 129]
[123 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
