%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:33 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCAAGGACUGGGGGGGGGGUCAAACUCUACUCCCACUAAUAGCUUUUUGAUGACUUCUAGCAAGCCUCGxxxxxxxxxxUGACUCCCCUCAGCCAUAGAAGGCCCCACCCCAGUCUCAGCCCUACUCCACCCCCCCCCCCUCAAGCACU\
) } def
/len { sequence length } bind def

/coor [
[149.92526245 356.38314819]
[151.59913635 341.44943237]
[155.42964172 326.91857910]
[161.33511353 313.10037231]
[169.18968201 300.28930664]
[178.82591248 288.75842285]
[190.03843689 278.75357056]
[181.78614807 266.22760010]
[173.53385925 253.70164490]
[165.28157043 241.17568970]
[157.02928162 228.64973450]
[148.77699280 216.12376404]
[140.52470398 203.59780884]
[132.27241516 191.07183838]
[118.80933380 184.70045471]
[117.67826843 168.91972351]
[109.42597961 156.39376831]
[101.17369080 143.86779785]
[92.92140198 131.34184265]
[79.46543884 124.71334076]
[64.50518799 125.80464935]
[49.54494095 126.89596558]
[34.58469391 127.98727417]
[19.62444496 129.07858276]
[4.66419554 130.16989136]
[-6.49474001 143.60177612]
[-23.57717896 144.81600952]
[-36.02403641 133.54951477]
[-50.95834351 134.95182800]
[-65.89264679 136.35412598]
[-72.22195435 150.34825134]
[-84.70970917 159.28982544]
[-99.99675751 160.77360535]
[-113.97097015 154.40046692]
[-122.87335205 141.88475037]
[-124.30921173 126.59311676]
[-117.89230347 112.63894653]
[-105.34873962 103.77584076]
[-90.05268860 102.38792419]
[-76.11869812 108.84854126]
[-67.29495239 121.41982269]
[-52.36064529 120.01751709]
[-37.42633820 118.61521149]
[-30.64875793 107.61243439]
[-18.58361244 102.46398163]
[-5.56906509 105.26567841]
[3.57288480 115.20964813]
[18.53313255 114.11833191]
[33.49338150 113.02702332]
[48.45363235 111.93571472]
[63.41387939 110.84440613]
[78.37413025 109.75308990]
[78.30324554 96.89719391]
[84.71894073 86.92468262]
[94.63747406 82.49745178]
[96.50508118 67.61417389]
[98.37269592 52.73089600]
[100.24031067 37.84761429]
[102.10792542 22.96433449]
[103.97554016 8.08105564]
[105.53311920 -6.83785725]
[106.77999115 -21.78594398]
[92.31358337 -25.93434525]
[78.93459320 -32.82556152]
[67.15727997 -42.19471741]
[57.43432236 -53.68168259]
[50.13945389 -66.84493256]
[45.55307007 -81.17850494]
[43.85145187 -96.13145447]
[45.10000992 -111.12903595]
[49.25075150 -125.59477234]
[56.14413452 -138.97264099]
[65.51519775 -150.74844360]
[77.00373840 -160.46954346]
[90.16816711 -167.76228333]
[104.50247955 -172.34634399]
[119.45570374 -174.04553223]
[134.45307922 -172.79455566]
[148.91815186 -168.64146423]
[162.29490662 -161.74592590]
[174.06918335 -152.37295532]
[183.78842163 -140.88284302]
[191.07902527 -127.71723175]
[195.66078186 -113.38217926]
[197.35755920 -98.42867279]
[196.10414124 -83.43150330]
[191.94871521 -68.96710968]
[185.05099487 -55.59146881]
[175.67613220 -43.81870270]
[164.18444824 -34.10132599]
[151.01765442 -26.81285095]
[136.68185425 -22.23342514]
[121.72808075 -20.53907013]
[120.48120117 -5.59098244]
[122.87045288 -1.38777006]
[122.59936523 4.37051201]
[118.85881805 9.94866848]
[116.99120331 24.83194733]
[115.12358856 39.71522903]
[113.25597382 54.59850693]
[111.38836670 69.48178864]
[109.52075195 84.36506653]
[120.75395203 103.29903412]
[105.44736481 123.08955383]
[113.69965363 135.61550903]
[121.95194244 148.14147949]
[130.20423889 160.66743469]
[144.25758362 167.93476868]
[144.79837036 182.81954956]
[153.05065918 195.34552002]
[161.30294800 207.87147522]
[169.55523682 220.39744568]
[177.80754089 232.92340088]
[186.05982971 245.44935608]
[194.31211853 257.97531128]
[202.56440735 270.50128174]
[216.18229675 264.14749146]
[230.58023071 259.84429932]
[245.45127869 257.68338013]
[260.47848511 257.71084595]
[275.34155273 259.92608643]
[289.72366333 264.28189087]
[303.31823730 270.68539429]
[315.83554077 279.00015259]
[327.00875854 289.04888916]
[336.59973145 300.61743164]
[344.40402222 313.45919800]
[350.25527954 327.30047607]
[354.02877808 341.84619141]
[355.64410400 356.78637695]
[355.06683350 371.80252075]
[352.30923462 386.57455444]
[347.43011475 400.78765869]
[340.53344727 414.13882446]
[331.76626587 426.34353638]
[321.31542969 437.14157104]
[309.40371704 446.30282593]
[296.28497314 453.63201904]
[282.23889160 458.97290039]
[267.56481934 462.21163940]
[252.57556152 463.27923584]
[237.59059143 462.15289307]
[222.92933655 458.85665894]
[208.90428162 453.46075439]
[195.81439209 446.08020020]
[183.93865967 436.87231445]
[173.53024292 426.03338623]
[164.81097412 413.79440308]
[157.96670532 400.41629028]
[153.14334106 386.18417358]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[7 116]
[8 115]
[9 114]
[10 113]
[11 112]
[12 111]
[13 110]
[14 109]
[16 107]
[17 106]
[18 105]
[19 104]
[20 52]
[21 51]
[22 50]
[23 49]
[24 48]
[25 47]
[28 43]
[29 42]
[30 41]
[55 102]
[56 101]
[57 100]
[58 99]
[59 98]
[60 97]
[61 94]
[62 93]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
