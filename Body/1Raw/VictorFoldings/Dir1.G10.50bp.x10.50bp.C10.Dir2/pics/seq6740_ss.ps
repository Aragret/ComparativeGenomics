%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAUACUACGGGGGGGGGGUAACAGACCGCAACCUCAACACCACCUUCUUCGACCCCGCCGGAGGAGGAxxxxxxxxxxGGACAACCAGUAAGCUACCCUUUUACCAUCAUUGGACAAGUAGCAUCCGUCCCCCCCCCCACUAUACUUC\
) } def
/len { sequence length } bind def

/coor [
[77.68453979 423.30203247]
[63.83860016 417.28601074]
[52.12994003 407.75659180]
[43.42741394 395.42092896]
[38.37681198 381.19439697]
[37.35292053 366.13272095]
[40.43172073 351.35354614]
[47.38474274 337.95364380]
[57.69602585 326.92730713]
[70.60041046 319.09280396]
[85.14029694 315.03146362]
[85.14029694 300.03146362]
[85.14029694 285.03146362]
[85.14029694 270.03146362]
[85.14029694 255.03147888]
[85.14029694 240.03147888]
[85.14029694 225.03147888]
[85.14029694 210.03147888]
[85.14029694 195.03147888]
[85.14029694 180.03147888]
[82.40991974 176.04141235]
[82.20141602 170.28053284]
[85.46533203 164.41075134]
[86.08930969 149.42372131]
[78.88814545 136.38562012]
[87.19281006 122.91924286]
[87.81678772 107.93222809]
[81.89682770 94.14984894]
[70.59782410 84.28412628]
[58.75330353 92.77764130]
[45.31727982 98.40669250]
[30.97056007 100.88969421]
[16.43929291 100.10439301]
[2.45820165 96.09385681]
[-10.26656151 89.06415558]
[-21.09308243 79.37374878]
[-29.47606277 67.51524353]
[-34.99428940 54.09029388]
[-37.37179947 39.77914810]
[-36.49166489 25.30612564]
[-32.40176773 11.40298080]
[-25.31216812 -1.22809696]
[-36.40348434 -11.32674694]
[-51.81670761 -14.89649773]
[-56.01843262 -29.18617058]
[-67.10974884 -39.28482056]
[-78.20106506 -49.38346863]
[-89.29238129 -59.48212051]
[-100.38369751 -69.58077240]
[-115.95044708 -69.02040863]
[-127.05475616 -79.41987610]
[-127.49304199 -94.26384735]
[-138.58436584 -104.36249542]
[-154.71269226 -107.33048248]
[-159.95082092 -122.87055969]
[-148.91020203 -134.99642944]
[-132.94848633 -131.23403931]
[-128.48570251 -115.45381165]
[-117.39439392 -105.35516357]
[-102.57445526 -106.30651093]
[-91.18242645 -96.22304535]
[-90.28504944 -80.67208099]
[-79.19373322 -70.57343292]
[-68.10241699 -60.47478485]
[-57.01110077 -50.37613678]
[-45.91978455 -40.27748489]
[-31.29988670 -37.43005753]
[-26.30483437 -22.41806221]
[-15.21351910 -12.31941223]
[-2.42790246 -21.01898193]
[12.07097912 -26.42327499]
[27.44877434 -28.21686745]
[42.81949615 -26.29223824]
[57.29657364 -20.75621796]
[70.04397583 -11.92405605]
[80.32450104 -0.30147839]
[87.54240417 13.44427204]
[91.27793884 28.52273941]
[91.31172943 44.06570816]
[87.63768005 59.17720032]
[80.46354675 72.98512268]
[91.76255035 82.85084534]
[106.50035858 80.05851746]
[113.40735626 66.74336243]
[109.95121765 51.07701111]
[120.15637970 38.69823456]
[136.19433594 39.10297394]
[145.76211548 51.98074722]
[141.52015686 67.45282745]
[126.72251129 73.65036011]
[119.81551361 86.96551514]
[124.26168823 93.00550842]
[133.15403748 105.08550262]
[137.60020447 111.12549591]
[152.36627197 108.48663330]
[167.13232422 105.84776306]
[181.89837646 103.20890045]
[196.66442871 100.57003784]
[200.74899292 97.11518860]
[205.29876709 95.75434875]
[209.42147827 96.30663300]
[212.43180847 98.25735474]
[227.33370972 96.54466248]
[237.15010071 84.45018768]
[252.28713989 82.92556000]
[263.75689697 92.35851288]
[278.65878296 90.64582825]
[293.56069946 88.93313599]
[306.40420532 78.73628235]
[321.55523682 85.01151276]
[323.42767334 101.30341339]
[310.09533691 110.85227203]
[295.27337646 103.83503723]
[280.37149048 105.54772949]
[265.46957397 107.26041412]
[256.43890381 119.04950714]
[241.35064697 120.99869537]
[229.04640198 111.44656372]
[214.14450073 113.15925598]
[199.30329895 115.33609009]
[184.53724670 117.97496033]
[169.77117920 120.61382294]
[155.00512695 123.25268555]
[140.23907471 125.89154816]
[117.38061523 122.49412537]
[102.80381012 108.55620575]
[102.17983246 123.54322052]
[109.33636475 137.65330505]
[101.07632446 150.04769897]
[100.45234680 165.03472900]
[100.14029694 180.03147888]
[100.14029694 195.03147888]
[100.14029694 210.03147888]
[100.14029694 225.03147888]
[100.14029694 240.03147888]
[100.14029694 255.03147888]
[100.14029694 270.03146362]
[100.14029694 285.03146362]
[100.14029694 300.03146362]
[100.14029694 315.03146362]
[114.68018341 319.09280396]
[127.58456421 326.92730713]
[137.89584351 337.95364380]
[144.84886169 351.35354614]
[147.92767334 366.13272095]
[146.90377808 381.19439697]
[141.85317993 395.42092896]
[133.15065002 407.75659180]
[121.44198608 417.28601074]
[107.59604645 423.30203247]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 130]
[24 129]
[26 127]
[27 126]
[28 82]
[29 81]
[42 69]
[43 68]
[45 66]
[46 65]
[47 64]
[48 63]
[49 62]
[52 59]
[53 58]
[83 91]
[84 90]
[94 124]
[95 123]
[96 122]
[97 121]
[98 120]
[102 119]
[103 118]
[106 115]
[107 114]
[108 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
