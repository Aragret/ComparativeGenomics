%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:48 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCGAACCCGGGGGGGGGGCCUUCGACCUUGCCGAAGGGGAGUCCGAACUAGUCUCAGGCUUCAACAUCxxxxxxxxxxGAUAGAGUAAAUAAUAGGAGCUUAAACCCCCUUAUUUCUAGGACUAUGAGCCCCCCCCCCAAUCGAACCC\
) } def
/len { sequence length } bind def

/coor [
[76.17549133 393.83184814]
[62.32955551 387.81582642]
[50.62089539 378.28640747]
[41.91836929 365.95074463]
[36.86776733 351.72421265]
[35.84387589 336.66253662]
[38.92267609 321.88339233]
[45.87569809 308.48345947]
[56.18698120 297.45712280]
[69.09136200 289.62261963]
[83.63124847 285.56130981]
[83.63124847 270.56130981]
[83.63124847 255.56130981]
[83.63124847 240.56130981]
[83.63124847 225.56130981]
[83.63124847 210.56130981]
[83.63124847 195.56130981]
[83.63124847 180.56130981]
[83.63124847 165.56130981]
[83.63124847 150.56130981]
[83.63124847 135.56130981]
[71.45941162 126.79509735]
[57.23263550 131.54890442]
[43.00585556 136.30271912]
[28.77907562 141.05653381]
[14.55229664 145.81034851]
[8.98391628 160.42292786]
[-4.69958639 167.99232483]
[-20.03728104 164.94450378]
[-29.78717422 152.71856689]
[-29.34566879 137.08721924]
[-18.92122650 125.43110657]
[-3.43595243 123.25388336]
[9.79848194 131.58357239]
[24.02526093 126.82976532]
[38.25204086 122.07595062]
[52.47882080 117.32213593]
[66.70559692 112.56831360]
[66.23502350 95.19743347]
[73.90292358 80.42612457]
[87.15984344 71.63138580]
[102.28750610 70.43201447]
[107.18905640 56.25545502]
[112.09060669 42.07889557]
[116.99216461 27.90233803]
[121.89371490 13.72577953]
[120.87424469 9.35288906]
[121.29678345 5.30412197]
[122.87272644 2.00286913]
[125.20334625 -0.26918244]
[127.83724976 -1.39607298]
[133.90025330 -15.11612701]
[139.96327209 -28.83617973]
[120.68364716 -42.21892166]
[127.57253265 -61.80971146]
[124.78020477 -76.54751587]
[121.98788452 -91.28532410]
[106.93386841 -91.72213745]
[92.32582855 -95.38535309]
[78.84699249 -102.10362244]
[67.12779999 -111.56272125]
[57.71638107 -123.32024384]
[51.05291748 -136.82624817]
[47.44907761 -151.44905090]
[47.07341385 -166.50471497]
[49.94350052 -181.28906250]
[55.92509460 -195.11058044]
[64.73843384 -207.32284546]
[75.97129059 -217.35462952]
[89.09829712 -224.73675537]
[103.50547028 -229.12394714]
[118.51896667 -230.31100464]
[133.43656921 -228.24238586]
[147.56056213 -223.01487732]
[160.23033142 -214.87295532]
[170.85330200 -204.19744873]
[178.93261719 -191.48765564]
[184.09037781 -177.33804321]
[186.08537292 -162.41041565]
[184.82426453 -147.40295410]
[180.36604309 -133.01760864]
[172.91923523 -119.92718506]
[162.83213806 -108.74395752]
[150.57655334 -99.99098206]
[136.72569275 -94.07764435]
[139.51800537 -79.33984375]
[142.31033325 -64.60203552]
[152.86547852 -59.33984756]
[158.02920532 -47.09103394]
[171.68545532 -53.29644012]
[185.34169006 -59.50185013]
[198.99794006 -65.70725250]
[212.65417480 -71.91266632]
[226.31040955 -78.11807251]
[231.93917847 -92.64234924]
[245.87695312 -98.74097443]
[259.68893433 -93.28530121]
[273.34518433 -99.49070740]
[275.46780396 -114.77134705]
[285.53213501 -126.46377563]
[300.32669067 -130.83697510]
[315.13055420 -126.49547577]
[325.21990967 -114.82463837]
[327.37524414 -99.54857635]
[320.90884399 -85.54183197]
[307.88406372 -77.27390289]
[292.45706177 -77.38305664]
[279.55059814 -85.83446503]
[265.89434814 -79.62905884]
[260.91958618 -65.63665771]
[247.15861511 -59.14895630]
[232.51582336 -64.46183014]
[218.85958862 -58.25642014]
[205.20333862 -52.05101395]
[191.54710388 -45.84560776]
[177.89085388 -39.64020157]
[164.23461914 -33.43479156]
[153.68333435 -22.77316666]
[147.62031555 -9.05311394]
[141.55729675 4.66694021]
[136.07026672 18.62733078]
[131.16871643 32.80388641]
[126.26716614 46.98044586]
[121.36561584 61.15700531]
[116.46406555 75.33356476]
[127.58245850 86.19876862]
[131.98153687 101.74034119]
[127.91597748 117.99839783]
[115.88066101 130.51654053]
[98.63124847 135.56130981]
[98.63124847 150.56130981]
[98.63124847 165.56130981]
[98.63124847 180.56130981]
[98.63124847 195.56130981]
[98.63124847 210.56130981]
[98.63124847 225.56130981]
[98.63124847 240.56130981]
[98.63124847 255.56130981]
[98.63124847 270.56130981]
[98.63124847 285.56130981]
[113.17113495 289.62261963]
[126.07551575 297.45712280]
[136.38679504 308.48345947]
[143.33982849 321.88339233]
[146.41862488 336.66253662]
[145.39472961 351.72421265]
[140.34413147 365.95074463]
[131.64160156 378.28640747]
[119.93294525 387.81582642]
[106.08700562 393.83184814]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 38]
[23 37]
[24 36]
[25 35]
[26 34]
[42 125]
[43 124]
[44 123]
[45 122]
[46 121]
[51 120]
[52 119]
[53 118]
[55 87]
[56 86]
[57 85]
[89 117]
[90 116]
[91 115]
[92 114]
[93 113]
[94 112]
[97 109]
[98 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
