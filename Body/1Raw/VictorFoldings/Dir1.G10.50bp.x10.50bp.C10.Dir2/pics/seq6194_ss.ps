%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGGCCUAACCGGGGGGGGGGCCUGUCUUUAGAUUUACAGUCCAAUGCUUCACUCAGCCAUUUUACCUCACxxxxxxxxxxACAGUCUACCCUCCCUUAGCAGGGAACUACUCCCACCCUGGAGCCUCCGUCCCCCCCCCCAGACCUAACC\
) } def
/len { sequence length } bind def

/coor [
[85.25701904 354.54318237]
[71.41107941 348.52716064]
[59.70241547 338.99774170]
[50.99988937 326.66207886]
[45.94928741 312.43554688]
[44.92539597 297.37387085]
[48.00419617 282.59469604]
[54.95721817 269.19476318]
[65.26850128 258.16845703]
[78.17288208 250.33393860]
[92.71276855 246.27262878]
[92.71276855 231.27262878]
[92.71276855 216.27262878]
[92.71276855 201.27262878]
[92.71276855 186.27262878]
[92.71276855 171.27262878]
[92.71276855 156.27262878]
[92.71276855 141.27262878]
[92.71276855 126.27262115]
[92.71276855 111.27262115]
[91.32846832 111.12899017]
[89.91624451 110.82505035]
[75.59365082 115.28186798]
[61.27105331 119.73868561]
[46.94845581 124.19550323]
[43.64619446 139.19519043]
[33.27466583 150.52333069]
[18.62376022 155.13273621]
[3.63449764 151.78347778]
[-7.66108704 141.37648010]
[-12.22453690 126.71120453]
[-8.82830715 111.73251343]
[1.61403275 100.46960449]
[16.29354668 95.95214844]
[31.26151848 99.39530945]
[42.49164200 109.87290192]
[56.81423950 105.41608429]
[71.13683319 100.95927429]
[85.45943451 96.50245667]
[95.67291260 85.51679230]
[99.07588959 70.90789795]
[102.47886658 56.29900742]
[105.88184357 41.69011307]
[93.53620911 17.32115555]
[114.90299988 -4.69877577]
[113.34542084 -19.61768723]
[111.78783417 -34.53660202]
[110.23025513 -49.45551300]
[95.21368408 -49.74232483]
[80.34619141 -51.87236786]
[65.85314941 -55.81335068]
[51.95427322 -61.50553513]
[38.86027145 -68.86262512]
[26.76964569 -77.77308655]
[15.86568260 -88.10184479]
[6.31368494 -99.69231415]
[-1.74154067 -112.36878204]
[-8.17787933 -125.93908691]
[-12.89775848 -140.19749451]
[-15.82962513 -154.92787170]
[-16.92903328 -169.90689087]
[-16.17931747 -184.90747070]
[-13.59183979 -199.70222473]
[-9.20582867 -214.06684875]
[-3.08777428 -227.78358459]
[4.66957569 -240.64450073]
[13.94862080 -252.45462036]
[24.60869408 -263.03491211]
[36.48819351 -272.22497559]
[49.40702438 -279.88546753]
[63.16934204 -285.90029907]
[77.56651306 -290.17828369]
[92.38028717 -292.65454102]
[107.38607788 -293.29153442]
[122.35641479 -292.07962036]
[137.06434631 -289.03717041]
[151.28689575 -284.21029663]
[164.80845642 -277.67221069]
[177.42405701 -269.52197266]
[188.94244385 -259.88317871]
[199.18898010 -248.90191650]
[208.00836182 -236.74468994]
[215.26687622 -223.59577942]
[220.85447693 -209.65454102]
[224.68646240 -195.13229370]
[226.70475769 -180.24922180]
[226.87873840 -165.23091125]
[225.20579529 -150.30506897]
[221.71125793 -135.69795227]
[216.44813538 -121.63100433]
[209.49618530 -108.31747437]
[200.96083069 -95.95919037]
[190.97143555 -84.74349976]
[179.67944336 -74.84043884]
[167.25604248 -66.40013123]
[153.88957214 -59.55052567]
[139.78266907 -54.39546204]
[125.14916992 -51.01309204]
[126.70674896 -36.09418106]
[128.26432800 -21.17526817]
[129.82191467 -6.25635672]
[141.99374390 2.50985050]
[156.63725281 -0.74097532]
[171.28074646 -3.99180102]
[185.92425537 -7.24262667]
[195.71850586 -19.94901085]
[211.76110840 -20.06977844]
[221.74554443 -7.51228666]
[218.01260376 8.09043026]
[203.42590332 14.76930428]
[189.17507935 7.40087461]
[174.53157043 10.65170002]
[159.88807678 13.90252590]
[145.24456787 17.15335083]
[144.52793884 26.29817390]
[140.96484375 34.33056641]
[135.19293213 40.43597794]
[128.05654907 44.08860016]
[120.49073792 45.09309006]
[117.08776093 59.70198441]
[113.68478394 74.31087494]
[110.28180695 88.91976929]
[121.74047089 79.23994446]
[136.65820312 77.67114258]
[149.87985229 84.75549316]
[156.83638000 98.04484558]
[155.12379456 112.94676208]
[145.33392334 124.31154633]
[130.84986877 128.21185303]
[116.67693329 123.29983521]
[107.71276855 111.27262115]
[107.71276855 126.27262115]
[107.71276855 141.27262878]
[107.71276855 156.27262878]
[107.71276855 171.27262878]
[107.71276855 186.27262878]
[107.71276855 201.27262878]
[107.71276855 216.27262878]
[107.71276855 231.27262878]
[107.71276855 246.27262878]
[122.25265503 250.33393860]
[135.15704346 258.16845703]
[145.46832275 269.19476318]
[152.42134094 282.59469604]
[155.50013733 297.37387085]
[154.47625732 312.43554688]
[149.42564392 326.66207886]
[140.72312927 338.99774170]
[129.01446533 348.52716064]
[115.16852570 354.54318237]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 39]
[23 38]
[24 37]
[25 36]
[40 122]
[41 121]
[42 120]
[43 119]
[45 101]
[46 100]
[47 99]
[48 98]
[102 114]
[103 113]
[104 112]
[105 111]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
