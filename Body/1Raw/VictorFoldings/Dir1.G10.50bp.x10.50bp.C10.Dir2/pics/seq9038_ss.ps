%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:05 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACCCCCCAGGGGGGGGGGAUUAGGAGGGCACUGGCCCCCAACAGGCAUCACCCCGCUAAAUCCCCUAGxxxxxxxxxxAACAACAUAAAACCCUCAUUCACACGAGAAAACACCCUCAUGUUCAUACACCCCCCCCCCCCUAUCCCCCA\
) } def
/len { sequence length } bind def

/coor [
[89.09345245 424.49884033]
[75.07150269 418.94583130]
[62.87154770 410.07949829]
[53.26047516 398.45718384]
[46.84245300 384.80947876]
[44.02091599 369.99429321]
[44.97323227 354.94290161]
[49.63953400 340.60150146]
[57.72650146 327.87152100]
[68.72577667 317.55325317]
[81.94593811 310.29528809]
[96.55594635 306.55383301]
[96.55594635 291.55383301]
[96.55594635 276.55383301]
[96.55594635 261.55383301]
[96.55594635 246.55384827]
[96.55594635 231.55384827]
[96.55594635 216.55384827]
[96.55594635 201.55384827]
[96.55594635 186.55384827]
[96.55594635 171.55384827]
[85.87507629 161.23616028]
[85.66139221 146.02403259]
[96.55594635 134.89091492]
[96.55594635 119.89090729]
[85.06528473 110.24909210]
[70.29316711 112.85381317]
[62.32736588 117.45183563]
[55.19123840 115.35710907]
[40.36875534 117.65798187]
[25.54627419 119.95886230]
[10.72379208 122.25973511]
[-1.70628941 132.95669556]
[-17.09370232 127.28575897]
[-19.60919380 111.08068848]
[-6.66504335 101.01187897]
[8.42291737 107.43725586]
[23.24539948 105.13637543]
[38.06788254 102.83550262]
[52.89036560 100.53462982]
[67.68844604 98.08170319]
[82.46055603 95.47697449]
[93.75083923 85.60127258]
[98.29812622 71.30714417]
[102.84542084 57.01301193]
[107.39270782 42.71887970]
[104.20307159 27.22253418]
[115.43457794 17.43976593]
[101.57545471 11.67727757]
[88.26301575 4.74471664]
[75.59581757 -3.30659223]
[63.66765213 -12.41703892]
[52.56682205 -22.51917076]
[42.37552643 -33.53819275]
[33.16920853 -45.39252472]
[25.01603889 -57.99440002]
[17.97637749 -71.25051880]
[12.10234547 -85.06272888]
[7.43743181 -99.32877350]
[4.01617575 -113.94302368]
[1.86390662 -128.79728699]
[0.99655998 -143.78158569]
[1.42055726 -158.78497314]
[3.13275909 -173.69638062]
[6.12048912 -188.40538025]
[10.36162663 -202.80310059]
[15.82477093 -216.78292847]
[22.46947479 -230.24134827]
[30.24654007 -243.07875061]
[39.09839249 -255.20005798]
[48.95948792 -266.51553345]
[59.75682068 -276.94143677]
[71.41045380 -286.40051270]
[83.83409882 -294.82278442]
[96.93577576 -302.14584351]
[110.61848450 -308.31552124]
[124.78092194 -313.28613281]
[139.31823730 -317.02084351]
[154.12278748 -319.49200439]
[169.08496094 -320.68136597]
[184.09399414 -320.58007812]
[199.03877258 -319.18890381]
[213.80862427 -316.51815796]
[228.29420471 -312.58758545]
[242.38825989 -307.42633057]
[255.98646545 -301.07254028]
[268.98812866 -293.57333374]
[281.29696655 -284.98416138]
[292.82186890 -275.36865234]
[303.47753906 -264.79800415]
[313.18499756 -253.35046387]
[321.87246704 -241.11079407]
[329.47558594 -228.16961670]
[335.93804932 -214.62274170]
[341.21203613 -200.57044983]
[345.25845337 -186.11682129]
[348.04742432 -171.36882019]
[349.55822754 -156.43568420]
[349.77969360 -141.42793274]
[348.71020508 -126.45670319]
[346.35766602 -111.63284302]
[342.73947144 -97.06609344]
[337.88247681 -82.86430359]
[331.82257080 -69.13262177]
[324.60464478 -55.97272110]
[316.28213501 -43.48202515]
[306.91668701 -31.75301933]
[296.57760620 -20.87253952]
[285.34143066 -10.92114162]
[273.29141235 -1.97250462]
[260.51672363 5.90711737]
[247.11192322 12.65938568]
[233.17630005 18.23430824]
[218.81300354 22.59061050]
[204.12840271 25.69603729]
[189.23118591 27.52759743]
[174.23167419 28.07173157]
[159.24092102 27.32441139]
[144.36988831 25.29116821]
[129.72869873 21.98705482]
[133.24359131 36.46099091]
[121.68683624 47.26617050]
[117.13954926 61.56030273]
[112.59226227 75.85443115]
[108.04496765 90.14855957]
[115.67488098 96.12250519]
[118.02284241 107.64105988]
[111.55594635 119.89090729]
[111.55594635 134.89091492]
[122.45050049 146.02403259]
[122.23682404 161.23616028]
[111.55594635 171.55384827]
[111.55594635 186.55384827]
[111.55594635 201.55384827]
[111.55594635 216.55384827]
[111.55594635 231.55384827]
[111.55594635 246.55384827]
[111.55594635 261.55383301]
[111.55594635 276.55383301]
[111.55594635 291.55383301]
[111.55594635 306.55383301]
[126.16596222 310.29528809]
[139.38612366 317.55325317]
[150.38539124 327.87152100]
[158.47236633 340.60150146]
[163.13867188 354.94290161]
[164.09098816 369.99429321]
[161.26943970 384.80947876]
[154.85142517 398.45718384]
[145.24034119 410.07949829]
[133.04039001 418.94583130]
[119.01844788 424.49884033]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 129]
[25 128]
[26 42]
[27 41]
[29 40]
[30 39]
[31 38]
[32 37]
[43 125]
[44 124]
[45 123]
[46 122]
[48 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
