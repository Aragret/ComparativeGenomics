%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:31 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCGUUUACGGGGGGGGGGUCAAUCCUCUGAUCAGGGUGAGCAUCAAACUCAAACUACGCCCUGAUCGGxxxxxxxxxxCACUAGGAUACCAACAAACCUACCCACCCUUAACAGUACAUAGUACAUAACCCCCCCCCCAGCCAUUUAC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 393.43643188]
[71.19830322 387.42041016]
[59.48964310 377.89099121]
[50.78712082 365.55532837]
[45.73651886 351.32879639]
[44.71262741 336.26712036]
[47.79142761 321.48794556]
[54.74444962 308.08801270]
[65.05573273 297.06167603]
[77.96011353 289.22717285]
[92.50000000 285.16586304]
[92.50000000 270.16586304]
[92.50000000 255.16586304]
[92.50000000 240.16586304]
[92.50000000 225.16586304]
[92.50000000 210.16586304]
[92.50000000 195.16586304]
[92.50000000 180.16586304]
[92.50000000 165.16586304]
[92.50000000 150.16586304]
[92.50000000 135.16586304]
[72.89862061 123.63056183]
[64.14035034 102.64079285]
[69.72933197 80.59445953]
[59.06770706 70.04316711]
[48.40607834 59.49187851]
[37.74445343 48.94058990]
[27.08282661 38.38930130]
[15.00283813 29.49695015]
[1.76025271 22.45181465]
[-11.48233318 15.40668011]
[-24.72491837 8.36154556]
[-37.96750259 1.31641030]
[-51.21009064 -5.72872448]
[-64.45267487 -12.77385998]
[-77.69525909 -19.81899452]
[-90.93784332 -26.86413002]
[-104.18043518 -33.90926361]
[-117.90048218 -39.97227859]
[-132.02528381 -45.02103424]
[-146.15008545 -50.06978989]
[-160.27490234 -55.11854553]
[-173.67974854 -47.06598282]
[-189.11637878 -49.56488419]
[-199.29608154 -61.43534470]
[-199.41229248 -77.07249451]
[-189.41017151 -89.09295654]
[-174.01239014 -91.82102203]
[-160.48931885 -83.96859741]
[-155.22613525 -69.24334717]
[-141.10133362 -64.19459534]
[-126.97653198 -59.14583588]
[-112.85173035 -54.09708023]
[-118.90938568 -67.81950378]
[-114.89765167 -82.27307892]
[-102.63388062 -90.91020966]
[-87.67368317 -89.81817627]
[-76.79417419 -79.49169159]
[-74.92388153 -64.60874939]
[-82.91005707 -51.91146851]
[-97.13529968 -47.15185165]
[-83.89271545 -40.10671616]
[-70.65012360 -33.06158066]
[-57.40753937 -26.01644516]
[-44.16495514 -18.97130966]
[-30.92236900 -11.92617512]
[-17.67978287 -4.88104057]
[-4.43719816 2.16409445]
[8.80538750 9.20922947]
[22.04797363 16.25436401]
[14.94026089 3.04526043]
[13.32220650 -11.86721420]
[17.43139839 -26.29339027]
[26.66446114 -38.11500168]
[39.66566467 -45.59622955]
[54.52597427 -47.63856506]
[69.06338501 -43.94212341]
[81.14330292 -35.04967117]
[88.99196625 -22.26692772]
[91.45692444 -7.47084856]
[88.17623138 7.16599083]
[79.63161469 19.49439240]
[67.07771301 27.70412064]
[52.35788345 30.58969879]
[37.63411713 27.72767258]
[48.29574203 38.27896500]
[58.95737076 48.83025360]
[69.61899567 59.38154221]
[80.28062439 69.93283081]
[91.22949219 62.52101517]
[104.94079590 59.27233505]
[119.77947235 61.18847656]
[133.76300049 68.61721802]
[147.14929199 61.84910583]
[145.62722778 46.74785614]
[149.66690063 32.11756516]
[158.72201538 19.93686104]
[171.56790161 11.85308266]
[186.46728516 8.95949554]
[201.40513611 11.64743233]
[214.36123657 19.55337334]
[223.58337402 31.60810280]
[227.82434082 46.18132019]
[226.51057434 61.30211639]
[219.81974792 74.92552948]
[208.65675354 85.20909882]
[194.53128052 90.76206207]
[179.35368347 90.83342743]
[165.17662048 85.41353607]
[153.91740417 75.23538971]
[140.53112793 82.00350189]
[141.07678223 89.48362732]
[156.03704834 88.39257050]
[157.12785339 103.35285187]
[142.16809082 104.44387817]
[142.71374512 111.92400360]
[156.94052124 116.67781830]
[171.16729736 121.43163300]
[185.39407349 126.18544769]
[202.33294678 125.47053528]
[207.70906067 141.54951477]
[193.74670410 151.16664124]
[180.64025879 140.41223145]
[166.41348267 135.65841675]
[152.18670654 130.90460205]
[137.95993042 126.15077972]
[130.57972717 131.02325439]
[122.78589630 134.11682129]
[114.97100067 135.46075439]
[107.50000000 135.16586304]
[107.50000000 150.16586304]
[107.50000000 165.16586304]
[107.50000000 180.16586304]
[107.50000000 195.16586304]
[107.50000000 210.16586304]
[107.50000000 225.16586304]
[107.50000000 240.16586304]
[107.50000000 255.16586304]
[107.50000000 270.16586304]
[107.50000000 285.16586304]
[122.03988647 289.22717285]
[134.94427490 297.06167603]
[145.25555420 308.08801270]
[152.20857239 321.48794556]
[155.28736877 336.26712036]
[154.26348877 351.32879639]
[149.21287537 365.55532837]
[140.51036072 377.89099121]
[128.80169678 387.42041016]
[114.95575714 393.43643188]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[24 89]
[25 88]
[26 87]
[27 86]
[28 85]
[29 70]
[30 69]
[31 68]
[32 67]
[33 66]
[34 65]
[35 64]
[36 63]
[37 62]
[38 61]
[39 53]
[40 52]
[41 51]
[42 50]
[93 111]
[94 110]
[116 126]
[117 125]
[118 124]
[119 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
