%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAUUAUAAUGGGGGGGGGGAAACACCCUCACCACUACAAUCUUCCUAGGAACAACAUAUGACGCACUCUxxxxxxxxxxAACCGAAUUGGUAUAUAGUUUAAACAAAACGAAUGAUUUCGACUCAUUAACCCCCCCCCCAUUAUGAUAAU\
) } def
/len { sequence length } bind def

/coor [
[65.64018250 369.04367065]
[51.61824036 363.49066162]
[39.41828537 354.62432861]
[29.80721283 343.00201416]
[23.38918686 329.35430908]
[20.56764984 314.53912354]
[21.51996613 299.48776245]
[26.18627167 285.14633179]
[34.27323914 272.41638184]
[45.27251053 262.09811401]
[58.49267197 254.84013367]
[73.10268402 251.09869385]
[73.10268402 236.09869385]
[73.10268402 221.09869385]
[73.10268402 206.09869385]
[73.10268402 191.09869385]
[73.10268402 176.09869385]
[73.10268402 161.09869385]
[73.10268402 146.09869385]
[73.10268402 131.09869385]
[73.10268402 116.09869385]
[68.70238495 101.75863647]
[60.28897476 89.34031677]
[51.87556458 76.92200470]
[43.46215439 64.50369263]
[29.53693008 67.10269165]
[15.71714020 64.19537354]
[4.09110594 56.25492859]
[-3.59729886 44.51253128]
[-6.21020174 30.76655579]
[-3.38403368 17.10714531]
[4.42028761 5.59842873]
[-3.73637843 -6.99001074]
[-11.89304447 -19.57844925]
[-20.04970932 -32.16688919]
[-33.48617554 -25.46305466]
[-47.58876038 -20.30581093]
[-62.18010330 -16.76001358]
[-77.07670593 -14.87025452]
[-92.09123230 -14.66030216]
[-107.03485107 -16.13279343]
[-121.71963501 -19.26921272]
[-135.96090698 -24.03011703]
[-149.57957458 -30.35562897]
[-162.40434265 -38.16620255]
[-174.27395630 -47.36360931]
[-185.03913879 -57.83218384]
[-194.56448364 -69.44026947]
[-202.73022461 -82.04188538]
[-209.43365479 -95.47855377]
[-214.59048462 -109.58129120]
[-218.13584900 -124.17273712]
[-220.02516174 -139.06939697]
[-220.23466492 -154.08392334]
[-218.76171875 -169.02751160]
[-215.62486267 -183.71218872]
[-210.86352539 -197.95332336]
[-204.53761292 -211.57179260]
[-196.72665405 -224.39634705]
[-187.52890015 -236.26568604]
[-177.05999756 -247.03054810]
[-165.45162964 -256.55554199]
[-152.84976196 -264.72091675]
[-139.41290283 -271.42395020]
[-125.31000519 -276.58035278]
[-110.71845245 -280.12527466]
[-95.82173157 -282.01412964]
[-80.80719757 -282.22317505]
[-65.86366272 -280.74978638]
[-51.17906952 -277.61251831]
[-36.93808365 -272.85073853]
[-23.31980133 -266.52441406]
[-10.49548912 -258.71307373]
[1.37357402 -249.51496887]
[12.13812256 -239.04574585]
[21.66278076 -227.43708801]
[29.82776451 -214.83499146]
[36.53039551 -201.39791870]
[41.68637466 -187.29487610]
[45.23086166 -172.70321655]
[47.11928177 -157.80644226]
[47.32788849 -142.79190063]
[45.85405731 -127.84840393]
[42.71632004 -113.16390228]
[37.95413971 -98.92305756]
[31.62740517 -85.30496979]
[23.81568146 -72.48088837]
[14.61720943 -60.61210251]
[4.14767075 -49.84786606]
[-7.46127033 -40.32355499]
[0.69539523 -27.73511505]
[8.85206127 -15.14667606]
[17.00872612 -2.55823708]
[32.79075623 -4.87589550]
[48.06352615 -0.07567811]
[59.76653671 10.93348026]
[65.53160858 25.99319649]
[64.16201019 42.11867905]
[55.88046646 56.09027863]
[64.29387665 68.50859833]
[72.70729065 80.92691040]
[81.12069702 93.34522247]
[99.33259583 81.95516968]
[114.74420929 93.54203033]
[129.70549011 94.61910248]
[137.34928894 81.45348358]
[149.90017700 72.94688416]
[164.83871460 70.74221039]
[179.19409180 75.22375488]
[190.13496399 85.45149231]
[195.52784729 99.35768890]
[210.48913574 100.43475342]
[225.45040894 101.51182556]
[240.41169739 102.58889771]
[254.92164612 94.94734955]
[268.64822388 103.92027283]
[267.47067261 120.27709198]
[252.60038757 127.19130707]
[239.33462524 117.55017853]
[224.37333679 116.47310638]
[209.41206360 115.39603424]
[194.45077515 114.31896973]
[187.12159729 127.30929565]
[174.82853699 135.86441040]
[159.97926331 138.24349976]
[145.51057434 133.92178345]
[134.30757141 123.70513153]
[128.62841797 109.58038330]
[113.66713715 108.50331116]
[107.78875732 115.56344604]
[98.38884735 118.64122772]
[88.10268402 116.09869385]
[88.10268402 131.09869385]
[88.10268402 146.09869385]
[88.10268402 161.09869385]
[88.10268402 176.09869385]
[88.10268402 191.09869385]
[88.10268402 206.09869385]
[88.10268402 221.09869385]
[88.10268402 236.09869385]
[88.10268402 251.09869385]
[102.71269989 254.84013367]
[115.93285370 262.09811401]
[126.93212891 272.41638184]
[135.01910400 285.14633179]
[139.68540955 299.48776245]
[140.63771057 314.53912354]
[137.81617737 329.35430908]
[131.39816284 343.00201416]
[121.78708649 354.62432861]
[109.58712769 363.49066162]
[95.56518555 369.04367065]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 102]
[23 101]
[24 100]
[25 99]
[32 93]
[33 92]
[34 91]
[35 90]
[104 129]
[105 128]
[111 122]
[112 121]
[113 120]
[114 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
