%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCCCCACAGGGGGGGGGGGUUUAUGUAGCUUACCUCCUCAAAGCAAUACACUGAAAAUGUUUAGACGGGxxxxxxxxxxUACUACCACUGACAUGACUUUCCAAAAAACACAUAAUUUGAAUCAACACACCCCCCCCCCACCACCCACAG\
) } def
/len { sequence length } bind def

/coor [
[88.22158051 427.30389404]
[74.19963074 421.75088501]
[61.99967575 412.88455200]
[52.38860703 401.26223755]
[45.97058105 387.61456299]
[43.14904404 372.79937744]
[44.10136032 357.74798584]
[48.76766586 343.40655518]
[56.85462952 330.67660522]
[67.85390472 320.35833740]
[81.07406616 313.10037231]
[95.68407440 309.35891724]
[95.68407440 294.35891724]
[95.68407440 279.35891724]
[95.68407440 264.35891724]
[95.68407440 249.35891724]
[95.68407440 234.35891724]
[95.68407440 219.35891724]
[95.68407440 204.35891724]
[95.68407440 189.35891724]
[95.68407440 174.35891724]
[95.68407440 159.35891724]
[95.22215271 144.36604309]
[94.29873657 129.39448547]
[79.15615845 121.49591827]
[70.79502106 106.60375977]
[55.80213928 106.14183807]
[40.80925369 105.67990875]
[25.81636620 105.21798706]
[10.81715679 105.06398773]
[-4.18205214 105.21798706]
[-19.18126106 105.37197876]
[-34.18046951 105.52597809]
[-42.30020142 118.64366150]
[-56.23273087 125.26847076]
[-71.53224945 123.28645325]
[-83.31672668 113.33007050]
[-87.82578278 98.57636261]
[-83.62059784 83.73318481]
[-72.04302216 73.53694153]
[-56.78742981 71.24121094]
[-42.72181320 77.57856750]
[-34.33446884 90.52677155]
[-19.33525848 90.37277222]
[-4.33604908 90.21877289]
[10.66316032 90.06478119]
[14.62318325 87.29576874]
[20.37780952 87.02714539]
[26.27829170 90.22509766]
[41.27117920 90.68702698]
[56.26406479 91.14894867]
[71.25695038 91.61087799]
[77.55687714 77.47396088]
[90.69018555 67.65950012]
[107.85226440 65.36946869]
[109.38955688 50.44844818]
[110.92684937 35.52743149]
[112.46414185 20.60641479]
[113.54121399 5.64513493]
[114.15704346 -9.34221840]
[114.77286530 -24.32957268]
[115.38869476 -39.31692505]
[107.22148895 -49.35188675]
[108.07927704 -61.85930634]
[116.95332336 -70.13658905]
[117.87673950 -85.10813904]
[109.91728973 -95.30867767]
[111.03170013 -107.79584503]
[120.07382202 -115.88919067]
[121.30443573 -130.83862305]
[107.52323914 -137.15164185]
[96.73450470 -147.79960632]
[90.24103546 -161.49671936]
[88.82694244 -176.58897400]
[92.66299438 -191.25390625]
[101.28595734 -203.72067261]
[113.65457916 -212.48384094]
[128.27526855 -216.48521423]
[143.38253784 -215.24162292]
[157.15208435 -208.90319824]
[167.92117310 -198.23538208]
[174.38938904 -184.52633667]
[175.77565002 -169.43148804]
[171.91258240 -154.77365112]
[163.26666260 -142.32279968]
[150.88191223 -133.58242798]
[136.25387573 -129.60800171]
[135.02325439 -114.65857697]
[143.37843323 -99.25611877]
[132.84828186 -84.18473053]
[131.92488098 -69.21318054]
[140.59452820 -53.98551559]
[130.37603760 -38.70109940]
[129.76022339 -23.71374702]
[129.14439392 -8.72639275]
[128.52856445 6.26096010]
[130.69194031 9.11876297]
[131.54441833 13.18605804]
[130.52401733 17.81902504]
[127.38516235 22.14370728]
[125.84786987 37.06472397]
[124.31057739 51.98574066]
[122.77328491 66.90676117]
[133.32530212 77.56766510]
[148.26130676 76.18363953]
[163.19732666 74.79961395]
[178.13333130 73.41558838]
[184.47976685 59.42922592]
[196.97845459 50.50294495]
[212.26730347 49.03787231]
[226.23370361 55.42811203]
[235.12077332 67.95471191]
[236.53790283 83.24808502]
[230.10392761 97.19438934]
[217.54953003 106.04214478]
[202.25178528 107.41133881]
[188.32571411 100.93367004]
[179.51736450 88.35160065]
[164.58134460 89.73562622]
[149.64533997 91.11965179]
[134.70932007 92.50367737]
[134.28326416 102.78433990]
[130.97242737 112.18381500]
[125.24430084 119.93949890]
[117.75321198 125.48103333]
[109.27028656 128.47106934]
[110.19370270 143.44262695]
[113.15235138 147.89253235]
[113.98168945 152.56347656]
[112.96295166 156.59234619]
[110.68407440 159.35891724]
[110.68407440 174.35891724]
[110.68407440 189.35891724]
[110.68407440 204.35891724]
[110.68407440 219.35891724]
[110.68407440 234.35891724]
[110.68407440 249.35891724]
[110.68407440 264.35891724]
[110.68407440 279.35891724]
[110.68407440 294.35891724]
[110.68407440 309.35891724]
[125.29409027 313.10037231]
[138.51425171 320.35833740]
[149.51351929 330.67660522]
[157.60049438 343.40655518]
[162.26679993 357.74798584]
[163.21911621 372.79937744]
[160.39756775 387.61456299]
[153.97955322 401.26223755]
[144.36848450 412.88455200]
[132.16851807 421.75088501]
[118.14657593 427.30389404]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[23 127]
[24 126]
[26 52]
[27 51]
[28 50]
[29 49]
[30 46]
[31 45]
[32 44]
[33 43]
[55 103]
[56 102]
[57 101]
[58 100]
[59 96]
[60 95]
[61 94]
[62 93]
[65 91]
[66 90]
[69 88]
[70 87]
[104 121]
[105 120]
[106 119]
[107 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
