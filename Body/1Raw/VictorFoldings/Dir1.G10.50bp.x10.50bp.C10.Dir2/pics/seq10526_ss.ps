%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:34 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCAACCCCGGGGGGGGGGGACAUCAUUACCGGGUUUUCCUCUUGUAAAUAUAGUUUAACCAAAACAUCxxxxxxxxxxCAGCACCAAUCCUACCUCCAUCGCUAACCCCACUAAAACACUCACCAAGACCCCCCCCCCCCUCAACCCC\
) } def
/len { sequence length } bind def

/coor [
[84.35475922 354.09451294]
[70.50881958 348.07849121]
[58.80015945 338.54907227]
[50.09763718 326.21340942]
[45.04703522 311.98687744]
[44.02314377 296.92520142]
[47.10194016 282.14602661]
[54.05496216 268.74609375]
[64.36624908 257.71975708]
[77.27062988 249.88526917]
[91.81051636 245.82394409]
[91.81051636 230.82394409]
[91.81051636 215.82394409]
[91.81051636 200.82394409]
[91.81051636 185.82394409]
[91.81051636 170.82394409]
[91.81051636 155.82394409]
[91.81051636 140.82394409]
[91.81051636 125.82395172]
[91.81051636 110.82395172]
[84.03102112 123.64890289]
[73.13231659 133.95512390]
[59.89298248 141.00636292]
[45.25880051 144.29888916]
[30.27520561 143.59748840]
[16.01259804 138.95227051]
[3.48986411 130.69508362]
[-6.39839983 119.41580963]
[-12.94579792 105.92019653]
[-15.68459892 91.17234802]
[-14.41914749 76.22582245]
[-9.23984623 62.14836502]
[-0.51669163 49.94563675]
[11.12715244 40.48937225]
[24.85987473 34.45511246]
[39.70044327 32.27392578]
[54.58867645 34.10163116]
[68.46099091 39.80766678]
[80.32638550 48.98439789]
[89.33721924 60.97626877]
[94.84976959 74.92659760]
[96.47039032 89.83332062]
[102.81752014 76.24237061]
[109.16464996 62.65141678]
[115.51177979 49.06046677]
[121.85890961 35.46951294]
[108.79391479 28.08478165]
[96.34047699 19.70981216]
[84.57348633 10.39497280]
[73.56371307 0.19628640]
[63.37736893 -10.82491112]
[54.07572556 -22.60233688]
[45.71472168 -35.06515503]
[38.34463501 -48.13842010]
[32.00979996 -61.74349594]
[26.74831200 -75.79856873]
[22.59181213 -90.21910095]
[19.56529999 -104.91837311]
[17.68697929 -119.80797577]
[16.96814537 -134.79835510]
[17.41312218 -149.79936218]
[19.01923180 -164.72079468]
[21.77681541 -179.47286987]
[25.66928864 -193.96690369]
[30.67324066 -208.11570740]
[36.75857925 -221.83419800]
[43.88870239 -235.03987122]
[52.02073288 -247.65328979]
[61.10575867 -259.59860229]
[71.08914185 -270.80398560]
[81.91084290 -281.20202637]
[93.50577545 -290.73019409]
[105.80420685 -299.33117676]
[118.73216248 -306.95324707]
[132.21191406 -313.55056763]
[146.16236877 -319.08349609]
[160.49963379 -323.51870728]
[175.13748169 -326.82952881]
[189.98788452 -328.99609375]
[204.96151733 -330.00534058]
[219.96833801 -329.85119629]
[234.91807556 -328.53457642]
[249.72084045 -326.06341553]
[264.28759766 -322.45260620]
[278.53073120 -317.72381592]
[292.36459351 -311.90551758]
[305.70596313 -305.03268433]
[318.47463989 -297.14663696]
[330.59378052 -288.29483032]
[341.99053955 -278.53051758]
[352.59637451 -267.91238403]
[362.34747314 -256.50430298]
[371.18521118 -244.37487793]
[379.05642700 -231.59706116]
[385.91375732 -218.24772644]
[391.71603394 -204.40711975]
[396.42828369 -190.15850830]
[400.02221680 -175.58758545]
[402.47616577 -160.78196716]
[403.77545166 -145.83070374]
[403.91217041 -130.82371521]
[402.88555908 -115.85125732]
[400.70178223 -101.00338745]
[397.37396240 -86.36938477]
[392.92211914 -72.03726959]
[387.37301636 -58.09324646]
[380.76007080 -44.62116623]
[373.12298584 -31.70205498]
[364.50775146 -19.41361427]
[354.96612549 -7.82974434]
[344.55554199 2.97988391]
[333.33859253 12.95026016]
[321.38275146 22.02142143]
[308.75988770 30.13880920]
[295.54595947 37.25360870]
[281.82043457 43.32302475]
[267.66583252 48.31055832]
[253.16728210 52.18621445]
[238.41200256 54.92668152]
[223.48873901 56.51547623]
[208.48721313 56.94304657]
[193.49768066 56.20682144]
[178.61027527 54.31122589]
[163.91452026 51.26766586]
[149.49880981 47.09443665]
[135.44985962 41.81664276]
[129.10272217 55.40759659]
[122.75559998 68.99854279]
[116.40847015 82.58950043]
[110.06134033 96.18045044]
[106.81051636 110.82395172]
[106.81051636 125.82395172]
[106.81051636 140.82394409]
[106.81051636 155.82394409]
[106.81051636 170.82394409]
[106.81051636 185.82394409]
[106.81051636 200.82394409]
[106.81051636 215.82394409]
[106.81051636 230.82394409]
[106.81051636 245.82394409]
[121.35040283 249.88526917]
[134.25477600 257.71975708]
[144.56607056 268.74609375]
[151.51908875 282.14602661]
[154.59788513 296.92520142]
[153.57398987 311.98687744]
[148.52339172 326.21340942]
[139.82087708 338.54907227]
[128.11221313 348.07849121]
[114.26627350 354.09451294]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[42 130]
[43 129]
[44 128]
[45 127]
[46 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
