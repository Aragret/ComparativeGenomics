%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:43 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAUACCCAGGGGGGGGGGUGGCCAACCUCCUACUCCUCAUUGUACCCAUUCUAAUCGCAAUGGCAUUCxxxxxxxxxxCACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCAACACCCCCCCCCCAACCUACCCA\
) } def
/len { sequence length } bind def

/coor [
[99.44554901 577.84814453]
[85.59960938 571.83215332]
[73.89095306 562.30273438]
[65.18842316 549.96704102]
[60.13782501 535.74053955]
[59.11393356 520.67883301]
[62.19272995 505.89968872]
[69.14575195 492.49975586]
[79.45703888 481.47344971]
[92.36141968 473.63891602]
[106.90130615 469.57760620]
[106.90130615 454.57760620]
[106.90130615 439.57760620]
[106.90130615 424.57760620]
[106.90130615 409.57760620]
[106.90130615 394.57760620]
[106.90130615 379.57760620]
[106.90130615 364.57760620]
[106.90130615 349.57760620]
[106.90130615 334.57760620]
[106.90130615 319.57760620]
[106.90130615 304.57760620]
[93.71182251 299.68869019]
[82.96730804 290.56390381]
[75.97714996 278.28836060]
[73.60238647 264.33279419]
[76.14966583 250.37724304]
[83.33184052 238.10891724]
[94.30017853 229.01809692]
[107.74459076 224.21720886]
[108.05664825 209.22044373]
[108.36870575 194.22369385]
[108.68075562 179.22694397]
[108.99281311 164.23019409]
[106.97048187 149.36714172]
[102.66289520 134.99896240]
[82.81398010 132.15447998]
[67.05277252 118.56598663]
[60.87910843 97.89967346]
[67.01847076 76.43290710]
[54.57902908 68.05076599]
[42.13958740 59.66862106]
[29.70014763 51.28647995]
[17.26070595 42.90433502]
[4.82126617 34.52219391]
[-8.06742573 42.63400650]
[-23.14212608 44.79578400]
[-37.79105377 40.63298798]
[-49.47618866 30.86684990]
[-56.17301559 17.18940926]
[-56.72126389 1.97036433]
[-51.02595139 -12.15349102]
[-40.07382202 -22.73511505]
[-25.76239967 -27.94117546]
[-10.57122517 -26.86969376]
[2.86774087 -19.70630836]
[12.22611427 -7.69211864]
[15.88250065 7.09134245]
[13.20340919 22.08275223]
[25.64284897 30.46489525]
[38.08229065 38.84703827]
[50.52173233 47.22918320]
[62.96117020 55.61132431]
[75.40061188 63.99346924]
[89.05685425 57.78805923]
[90.92446899 42.90478134]
[92.79207611 28.02150154]
[78.81333160 22.34197807]
[66.78144836 13.23723793]
[57.51679230 1.32805920]
[51.65103912 -12.57357121]
[49.58412170 -27.51981735]
[51.45697021 -42.49161911]
[57.14189148 -56.46817398]
[66.25127411 -68.49653625]
[78.16403198 -77.75659943]
[92.06792450 -83.61698151]
[107.01496887 -85.67812347]
[121.98604584 -83.79949951]
[135.96040344 -78.10917664]
[147.98524475 -68.99515533]
[157.24070740 -57.07882309]
[163.09573364 -43.17266464]
[165.15110779 -28.22482872]
[163.26669312 -13.25447750]
[157.57098389 0.71768367]
[148.45230103 12.73900890]
[136.53240967 21.98986435]
[122.62398529 27.83951378]
[107.67536163 29.88911438]
[105.80774689 44.77239609]
[103.94013214 59.65567398]
[114.78620148 62.90615845]
[124.15229797 68.96169281]
[131.34567261 77.26206970]
[135.86616516 87.08611298]
[137.44021606 97.61379242]
[136.03604126 107.99448395]
[131.85868835 117.41566467]
[125.32651520 125.16649628]
[117.03108215 130.69137573]
[121.33866119 145.05955505]
[125.55560303 130.66450500]
[134.60740662 118.70353699]
[147.31530762 110.73426056]
[162.02441406 107.79448700]
[176.81921387 110.26703644]
[189.77308655 117.82992554]
[199.19908142 129.49829102]
[203.86972046 143.75259399]
[203.17674255 158.73657227]
[197.21041870 172.49894714]
[186.74769592 183.24749756]
[173.15107727 189.58250427]
[158.19120789 190.67897034]
[143.81622314 186.39413452]
[131.89811707 177.28596497]
[123.98957062 164.54225159]
[123.67751312 179.53900146]
[123.36545563 194.53575134]
[123.05339813 209.53250122]
[122.74134064 224.52926636]
[137.48074341 230.87641907]
[148.63874817 242.35694885]
[154.53504944 257.19970703]
[154.29789734 273.13052368]
[147.99293518 287.72061157]
[136.60858154 298.75689697]
[121.90130615 304.57760620]
[121.90130615 319.57760620]
[121.90130615 334.57760620]
[121.90130615 349.57760620]
[121.90130615 364.57760620]
[121.90130615 379.57760620]
[121.90130615 394.57760620]
[121.90130615 409.57760620]
[121.90130615 424.57760620]
[121.90130615 439.57760620]
[121.90130615 454.57760620]
[121.90130615 469.57760620]
[136.44119263 473.63891602]
[149.34556580 481.47344971]
[159.65686035 492.49975586]
[166.60987854 505.89968872]
[169.68867493 520.67883301]
[168.66477966 535.74053955]
[163.61418152 549.96704102]
[154.91166687 562.30273438]
[143.20300293 571.83215332]
[129.35705566 577.84814453]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[30 122]
[31 121]
[32 120]
[33 119]
[34 118]
[35 102]
[36 101]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[65 92]
[66 91]
[67 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
