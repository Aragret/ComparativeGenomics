%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACUUAAACACGGGGGGGGGGAUCUCUGCCAAACCCCAAAAACAAAGAACCCUAACACCAGCCUAACCAGAxxxxxxxxxxUAUUCUCACCAGACCUCCUAGGCGACCCAGACAAUUAUACCCUAGCCAACCCCCCCCCCCCCCUUAAACAC\
) } def
/len { sequence length } bind def

/coor [
[83.84661102 393.43103027]
[70.35773468 386.69952393]
[58.87223434 376.93493652]
[50.05786514 364.70504761]
[44.42708206 350.72085571]
[42.30725479 335.79537964]
[43.82162476 320.79638672]
[48.88214493 306.59585571]
[57.19461060 294.01943970]
[68.27574158 283.79827881]
[81.48130035 276.52664185]
[96.04352570 272.62728882]
[95.73554230 257.63043213]
[95.42756653 242.63360596]
[95.11959076 227.63676453]
[94.81161499 212.63993835]
[94.50363159 197.64309692]
[94.19565582 182.64625549]
[93.88768005 167.64941406]
[93.57970428 152.65258789]
[93.27172089 137.65574646]
[75.52922821 129.40078735]
[64.19097900 113.45133972]
[62.22430801 93.98154449]
[70.14392090 76.08683777]
[60.50210571 64.59617615]
[50.86029434 53.10550690]
[41.21847916 41.61484146]
[28.82832146 50.09132385]
[15.66697598 57.31252670]
[1.86119688 63.20890427]
[-12.45605564 67.72367096]
[-27.14689445 70.81333923]
[-42.06983566 72.44815826]
[-57.08115768 72.61238098]
[-72.03629303 71.30442810]
[-86.79120636 68.53689575]
[-101.20380402 64.33643341]
[-115.13527679 58.74350357]
[-128.45144653 51.81196213]
[-141.02409363 43.60857010]
[-152.73210144 34.21233368]
[-163.46272278 23.71374130]
[-173.11262512 12.21390533]
[-181.58886719 -0.17642164]
[-188.80979919 -13.33791161]
[-194.70590210 -27.14380836]
[-199.22038269 -41.46115112]
[-202.30975342 -56.15205002]
[-203.94427490 -71.07502747]
[-204.10820007 -86.08634949]
[-202.79994202 -101.04145813]
[-200.03211975 -115.79631805]
[-195.83137512 -130.20883179]
[-190.23815918 -144.14019775]
[-183.30635071 -157.45623779]
[-175.10270691 -170.02870178]
[-165.70623779 -181.73652649]
[-155.20742798 -192.46693420]
[-143.70741272 -202.11660767]
[-131.31690979 -210.59260559]
[-118.15527344 -217.81327820]
[-104.34925842 -223.70910645]
[-90.03182983 -228.22329712]
[-75.34086609 -231.31237793]
[-60.41785812 -232.94659424]
[-45.40652847 -233.11021423]
[-30.45144653 -231.80166626]
[-15.69664097 -229.03353882]
[-1.28421259 -224.83250427]
[12.64703560 -219.23901367]
[25.96293449 -212.30694580]
[38.53524017 -204.10305786]
[50.24287415 -194.70634460]
[60.97308350 -184.20732117]
[70.62252045 -172.70710754]
[79.09826660 -160.31643677]
[86.31867981 -147.15466309]
[92.21422577 -133.34852600]
[96.72813416 -119.03100586]
[99.81691742 -104.33998108]
[101.45084381 -89.41693878]
[101.61416626 -74.40560913]
[100.30531311 -59.45055389]
[97.53689575 -44.69580078]
[93.33557129 -30.28345871]
[87.74180603 -16.35232162]
[80.80947113 -3.03656101]
[72.60532379 9.53558254]
[63.20838165 21.24302864]
[52.70914459 31.97302628]
[62.35095978 43.46369171]
[71.99277496 54.95435715]
[81.63459015 66.44502258]
[94.49487305 62.14609528]
[108.04692841 62.60385513]
[120.58780670 67.76078796]
[130.54164124 76.96887970]
[136.65763855 89.07103729]
[151.59365845 87.68701172]
[166.52966309 86.30298615]
[181.46568298 84.91896057]
[196.40168762 83.53493500]
[199.71122742 68.77342987]
[207.42208862 55.75813675]
[218.77883911 45.76416397]
[232.66885376 39.77062607]
[247.73133850 38.36470032]
[262.49063110 41.68412781]
[275.50076294 49.40370560]
[285.48712158 60.76715088]
[291.47134399 74.66117859]
[292.86718750 89.72460938]
[289.53787231 104.48166656]
[281.80957031 117.48661804]
[270.43942261 127.46535492]
[256.54138184 133.44027710]
[241.47703552 134.82601929]
[226.72221375 131.48681641]
[213.72244263 123.74980927]
[203.75132751 112.37299347]
[197.78572083 98.47094727]
[182.84970093 99.85497284]
[167.91369629 101.23899841]
[152.97767639 102.62302399]
[138.04165649 104.00704956]
[135.87307739 113.27957916]
[131.48126221 121.72911835]
[125.13842010 128.83200073]
[117.23764038 134.14804077]
[108.26856232 137.34776306]
[108.57653809 152.34460449]
[108.88451385 167.34144592]
[109.19249725 182.33827209]
[109.50047302 197.33511353]
[109.80844879 212.33195496]
[110.11642456 227.32879639]
[110.42440796 242.32563782]
[110.73238373 257.32247925]
[111.04035950 272.31930542]
[125.75039673 275.61752319]
[139.24334717 282.34088135]
[150.73477173 292.09848022]
[159.55654907 304.32302856]
[165.19581604 318.30380249]
[167.32469177 333.22799683]
[165.81941223 348.22790527]
[160.76750183 362.43148804]
[152.46266174 375.01296997]
[141.38772583 385.24081421]
[128.18658447 392.52047729]
[113.62673187 396.42864990]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 94]
[26 93]
[27 92]
[28 91]
[99 126]
[100 125]
[101 124]
[102 123]
[103 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
