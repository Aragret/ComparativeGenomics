%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACCAAAAAAAGGGGGGGGGGUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCAAGCAxxxxxxxxxxCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCUUACCACCCUCGUUAACCCCCCCCCCCCCUAACAAAAAAAA\
) } def
/len { sequence length } bind def

/coor [
[82.87135315 405.49682617]
[69.42869568 398.72335815]
[57.62491226 389.38229370]
[47.94336700 377.85610962]
[40.78050232 364.61685181]
[36.42964172 350.20660400]
[35.06894684 335.21548462]
[36.75413895 320.25738525]
[41.41620636 305.94479370]
[48.86424637 292.86383057]
[58.79326248 281.55014038]
[70.79666901 272.46704102]
[84.38293457 265.98641968]
[98.99570465 262.37368774]
[98.39556122 247.38571167]
[97.79541779 232.39772034]
[97.19527435 217.40972900]
[96.59512329 202.42173767]
[95.99497986 187.43374634]
[95.39483643 172.44575500]
[94.79469299 157.45776367]
[94.19454956 142.46977234]
[93.59440613 127.48178864]
[92.99426270 112.49379730]
[85.68752289 100.57309723]
[92.01774597 88.10634613]
[91.41760254 73.11835480]
[90.81745911 58.13036346]
[75.81637573 57.78826141]
[60.86637878 56.50490189]
[46.02646255 54.28535843]
[31.35519981 51.13838196]
[16.91048622 47.07639694]
[2.74933076 42.11543274]
[-11.07237816 36.27506638]
[-24.50009155 29.57835197]
[-37.48081589 22.05171776]
[-49.96332550 13.72486401]
[-61.89834976 4.63065720]
[-73.23879242 -5.19501352]
[-83.93990326 -15.71337032]
[-93.95943451 -26.88290215]
[-103.25785065 -38.65952682]
[-111.79846191 -50.99676514]
[-119.54755402 -63.84593201]
[-126.47454071 -77.15631104]
[-132.55209351 -90.87538147]
[-137.75622559 -104.94898987]
[-142.06639099 -119.32160187]
[-145.46559143 -133.93649292]
[-147.94039917 -148.73597717]
[-149.48106384 -163.66165161]
[-150.08148193 -178.65461731]
[-149.73930359 -193.65570068]
[-148.45585632 -208.60568237]
[-146.23623657 -223.44558716]
[-143.08918762 -238.11683655]
[-139.02713013 -252.56153870]
[-134.06608582 -266.72265625]
[-128.22564697 -280.54434204]
[-121.52886200 -293.97201538]
[-114.00215912 -306.95269775]
[-105.67523956 -319.43518066]
[-96.58097076 -331.37014771]
[-86.75524139 -342.71054077]
[-76.23683167 -353.41159058]
[-65.06724548 -363.43106079]
[-53.29057312 -372.72943115]
[-40.95328903 -381.26995850]
[-28.10408401 -389.01898193]
[-14.79366493 -395.94592285]
[-1.07456577 -402.02340698]
[12.99907112 -407.22744751]
[27.37170410 -411.53753662]
[41.98661041 -414.93667603]
[56.78610992 -417.41140747]
[71.71179199 -418.95196533]
[86.70475769 -419.55230713]
[101.70584106 -419.21005249]
[116.65582275 -417.92654419]
[131.49571228 -415.70684814]
[146.16694641 -412.55972290]
[160.61161804 -408.49758911]
[174.77272034 -403.53646851]
[188.59437561 -397.69595337]
[202.02201843 -390.99911499]
[215.00265503 -383.47232056]
[227.48507690 -375.14535522]
[239.42001343 -366.05102539]
[250.76036072 -356.22521973]
[261.46136475 -345.70675659]
[271.48077393 -334.53713989]
[280.77905273 -322.76040649]
[289.31954956 -310.42306519]
[297.06851196 -297.57382202]
[303.99536133 -284.26336670]
[310.07275391 -270.54425049]
[315.27673340 -256.47058105]
[319.58676147 -242.09793091]
[322.98580933 -227.48300171]
[325.46044922 -212.68348694]
[327.00097656 -197.75779724]
[327.60122681 -182.76483154]
[327.25888062 -167.76374817]
[325.97531128 -152.81376648]
[323.75552368 -137.97389221]
[320.60830688 -123.30267334]
[316.54611206 -108.85802460]
[311.58493042 -94.69694519]
[305.74432373 -80.87532806]
[299.04742432 -67.44772339]
[291.52056885 -54.46711349]
[283.19351196 -41.98473358]
[274.09912109 -30.04985046]
[264.27328491 -18.70956039]
[253.75476074 -8.00862026]
[242.58506775 2.01073861]
[230.80830383 11.30897331]
[218.47093201 19.84938812]
[205.62164307 27.59827805]
[192.31114197 34.52505875]
[178.59197998 40.60239792]
[164.51829529 45.80630875]
[150.14561462 50.11625290]
[135.53067017 53.51522064]
[120.73114777 55.98979950]
[105.80545044 57.53022003]
[106.40559387 72.51821136]
[107.00573730 87.50620270]
[114.31247711 99.42690277]
[107.98225403 111.89365387]
[108.58239746 126.88164520]
[109.18254089 141.86962891]
[109.78268433 156.85762024]
[110.38282776 171.84561157]
[110.98297119 186.83360291]
[111.58311462 201.82159424]
[112.18325806 216.80958557]
[112.78340149 231.79757690]
[113.38355255 246.78556824]
[113.98369598 261.77355957]
[128.83853149 264.20632935]
[142.89945984 269.57992554]
[155.59068298 277.67422485]
[166.39250183 288.15780640]
[174.86257935 300.60137939]
[180.65408325 314.49539185]
[183.52986145 329.27087402]
[183.37214661 344.32278442]
[180.18737793 359.03475952]
[174.10600281 372.80435181]
[165.37702942 385.06771851]
[154.35789490 395.32263184]
[141.49984741 403.14923096]
[127.32941437 408.22698975]
[112.42684937 410.34796143]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[26 129]
[27 128]
[28 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
