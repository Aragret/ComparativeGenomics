%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:17 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUUACUCUUGGGGGGGGGGUUAGUAUAAAUAGUACCGUUAACUUCCAAUUAACUAGUUUUGACAACAUUxxxxxxxxxxCCCAGUCUCAGCCCUACUCCACUCAAGCACUAUAGUUGUAGCAGGAAUCUCCCCCCCCCCUCUUACUCAU\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 359.90945435]
[71.19830322 353.89343262]
[59.48964310 344.36401367]
[50.78712082 332.02832031]
[45.73651886 317.80181885]
[44.71262741 302.74014282]
[47.79142761 287.96096802]
[54.74444962 274.56103516]
[65.05573273 263.53469849]
[77.96011353 255.70019531]
[92.50000000 251.63888550]
[92.50000000 236.63888550]
[92.50000000 221.63888550]
[92.50000000 206.63888550]
[92.50000000 191.63888550]
[92.50000000 176.63888550]
[92.50000000 161.63888550]
[92.50000000 146.63888550]
[92.50000000 131.63888550]
[92.50000000 116.63888550]
[86.41408539 112.25578308]
[72.73653412 118.41408539]
[74.24224854 103.48957825]
[68.15632629 99.10646820]
[53.92954636 103.86028290]
[39.70276642 108.61409760]
[25.47598839 113.36791992]
[17.05409813 127.02263641]
[1.11076355 128.80859375]
[-10.12365246 117.35575867]
[-8.03106785 101.44976044]
[5.78326607 93.29232788]
[20.72217369 99.14113617]
[34.94895172 94.38732147]
[49.17573166 89.63350677]
[63.40251160 84.87969208]
[63.55854797 69.87983704]
[63.71458435 54.88131714]
[49.58978271 49.83255768]
[35.46497726 44.78380203]
[21.34017563 39.73504639]
[7.21537256 34.68629074]
[-6.18948603 42.73885345]
[-21.62611580 40.23995209]
[-31.80580902 28.36949158]
[-31.92202950 12.73234081]
[-21.91989899 0.71188313]
[-6.52211905 -2.01618838]
[7.00095034 5.83623838]
[12.26412868 20.56148720]
[26.38893127 25.61024284]
[40.51373672 30.65900040]
[54.63853836 35.70775604]
[68.76334381 40.75651169]
[95.07321930 63.06901932]
[101.64574432 92.63945007]
[111.62847137 81.44367981]
[115.03769684 65.99415588]
[129.28288269 61.64400864]
[139.26560974 50.44824600]
[149.01325989 39.04722214]
[158.52162170 27.44588280]
[167.78657532 15.64924240]
[176.80410767 3.66240978]
[185.82164001 -8.32442284]
[194.83915710 -20.31125450]
[203.85668945 -32.29808807]
[193.10552979 -42.78812027]
[183.78411865 -54.56689453]
[176.04550171 -67.44098663]
[170.01678467 -81.19899750]
[165.79695129 -95.61500549]
[163.45529175 -110.45229340]
[163.03025818 -125.46720886]
[164.52883911 -140.41319275]
[167.92642212 -155.04483032]
[173.16720581 -169.12185669]
[180.16514587 -182.41308594]
[188.80532837 -194.70030212]
[198.94586182 -205.78172302]
[210.42024231 -215.47538757]
[223.04005432 -223.62208557]
[236.59803772 -230.08808899]
[250.87159729 -234.76718140]
[265.62631226 -237.58255005]
[280.61993408 -238.48796082]
[295.60623169 -237.46853638]
[310.33914185 -234.54101562]
[324.57669067 -229.75349426]
[338.08511353 -223.18455505]
[350.64257812 -214.94209290]
[362.04287720 -205.16145325]
[372.09884644 -194.00321960]
[380.64532471 -181.65063477]
[387.54196167 -168.30654907]
[392.67553711 -154.19007874]
[395.96173096 -139.53302002]
[397.34658813 -124.57607269]
[396.80734253 -109.56481934]
[394.35290527 -94.74578094]
[390.02352905 -80.36228180]
[383.89035034 -66.65052795]
[376.05404663 -53.83566666]
[366.64331055 -42.12813568]
[355.81265259 -31.72017860]
[343.73995972 -22.78270912]
[330.62347412 -15.46248531]
[316.67852783 -9.87971306]
[302.13418579 -6.12606573]
[287.22921753 -4.26318169]
[272.20840454 -4.32165194]
[257.31838989 -6.30051517]
[242.80368042 -10.16727734]
[228.90264893 -15.85844326]
[215.84352112 -23.28055763]
[206.82598877 -11.29372597]
[197.80847168 0.69310707]
[188.79093933 12.67993927]
[179.77340698 24.66677284]
[179.55661011 29.49673271]
[176.25996399 34.22573090]
[170.12297058 36.95424271]
[160.61460876 48.55558395]
[160.19708252 53.37234497]
[156.70657349 57.96011353]
[150.46138000 60.43096924]
[140.47865295 71.62673950]
[137.78346252 86.27546692]
[122.82424164 91.42640686]
[112.84151459 102.62216949]
[107.50000000 116.63888550]
[107.50000000 131.63888550]
[107.50000000 146.63888550]
[107.50000000 161.63888550]
[107.50000000 176.63888550]
[107.50000000 191.63888550]
[107.50000000 206.63888550]
[107.50000000 221.63888550]
[107.50000000 236.63888550]
[107.50000000 251.63888550]
[122.03988647 255.70019531]
[134.94427490 263.53469849]
[145.25555420 274.56103516]
[152.20857239 287.96096802]
[155.28736877 302.74014282]
[154.26348877 317.80181885]
[149.21287537 332.02832031]
[140.51036072 344.36401367]
[128.80169678 353.89343262]
[114.95575714 359.90945435]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 36]
[25 35]
[26 34]
[27 33]
[38 54]
[39 53]
[40 52]
[41 51]
[42 50]
[56 130]
[57 129]
[59 127]
[60 126]
[61 123]
[62 122]
[63 119]
[64 118]
[65 117]
[66 116]
[67 115]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
