%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:30 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCCAAAUAAGGGGGGGGGGAGUAUAGGCGAUAGAAAUUGAAACCUGGCGCAAUAGAUAUAGUACCGCAAxxxxxxxxxxUAUCCAAAGACAACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAACCCCCCCCCCACCCAUAUAA\
) } def
/len { sequence length } bind def

/coor [
[90.43138123 365.99728394]
[76.58544159 359.98126221]
[64.87677765 350.45184326]
[56.17425537 338.11618042]
[51.12365341 323.88964844]
[50.09976196 308.82797241]
[53.17855835 294.04879761]
[60.13158035 280.64889526]
[70.44286346 269.62255859]
[83.34724426 261.78805542]
[97.88713074 257.72671509]
[97.88713074 242.72673035]
[97.88713074 227.72673035]
[97.88713074 212.72673035]
[97.88713074 197.72673035]
[97.88713074 182.72673035]
[97.88713074 167.72673035]
[97.88713074 152.72673035]
[97.88713074 137.72673035]
[97.88713074 122.72673035]
[96.58449554 137.67005920]
[86.40718079 148.68923950]
[71.61423492 151.17291260]
[58.39625931 144.08171082]
[52.28476715 130.38319397]
[55.83731461 115.80994415]
[67.56722260 106.46065521]
[82.56691742 106.24822998]
[67.60666656 105.15692139]
[52.64641571 104.06561279]
[38.31989670 110.77838898]
[26.18927193 102.13562775]
[11.22902393 101.04431915]
[-3.73122501 99.95301056]
[-12.29153252 112.70513916]
[-26.08809853 119.45423126]
[-41.40971756 118.38483429]
[-54.13494492 109.78459930]
[-60.84076691 95.96694183]
[-59.72334671 80.64875031]
[-51.08326340 67.95054626]
[-37.24465942 61.28806686]
[-21.93004608 62.45349884]
[-9.25898075 71.13333893]
[-2.63991427 84.99275970]
[12.32033443 86.08406830]
[27.28058243 87.17538452]
[40.53704453 80.38454437]
[53.73772812 89.10536194]
[68.69797516 90.19667053]
[83.65822601 91.28797913]
[97.18241119 84.79981995]
[105.69350433 72.44824219]
[114.20459747 60.09667206]
[122.71568298 47.74509811]
[131.22677612 35.39352798]
[119.69196320 25.78814697]
[109.07841492 15.17363548]
[99.47408295 3.63795185]
[90.95854187 -8.72331429]
[83.60237122 -21.80773163]
[77.46652222 -35.50687790]
[72.60183716 -49.70722961]
[69.04862213 -64.29112244]
[66.83633423 -79.13770294]
[65.98329163 -94.12395477]
[66.49657440 -109.12567902]
[68.37191772 -124.01856995]
[71.59379578 -138.67922974]
[76.13549805 -152.98616028]
[81.95939636 -166.82080078]
[89.01722717 -180.06852722]
[97.25051117 -192.61955261]
[106.59101868 -204.36988831]
[116.96134949 -215.22213745]
[128.27557373 -225.08639526]
[140.43992615 -233.88092041]
[153.35363770 -241.53282166]
[166.90965271 -247.97869873]
[180.99568176 -253.16516113]
[195.49496460 -257.04919434]
[210.28738403 -259.59863281]
[225.25035095 -260.79235840]
[240.25987244 -260.62045288]
[255.19157410 -259.08438110]
[269.92172241 -256.19683838]
[284.32824707 -251.98175049]
[298.29180908 -246.47406006]
[311.69665527 -239.71940613]
[324.43170166 -231.77375793]
[336.39147949 -222.70295715]
[347.47680664 -212.58216858]
[357.59588623 -201.49525452]
[366.66485596 -189.53410339]
[374.60852051 -176.79780579]
[381.36111450 -163.39192200]
[386.86663818 -149.42752075]
[391.07949829 -135.02032471]
[393.96478271 -120.28973389]
[395.49856567 -105.35779572]
[395.66812134 -90.34825134]
[394.47210693 -75.38547516]
[391.92037964 -60.59344864]
[388.03408813 -46.09475708]
[382.84545898 -32.00953674]
[376.39749146 -18.45450783]
[368.74359131 -5.54199314]
[359.94717407 6.62100887]
[350.08117676 17.93371010]
[339.22732544 28.30236626]
[327.47555542 37.64105606]
[314.92324829 45.87240219]
[301.67443848 52.92818832]
[287.83889771 58.74994659]
[273.53128052 63.28944016]
[258.87011719 66.50904846]
[243.97692871 68.38209534]
[228.97512817 68.89305878]
[213.98901367 68.03770447]
[199.14277649 65.82312012]
[184.55943298 62.26765823]
[170.35983276 57.40077972]
[156.66163635 51.26280975]
[143.57835388 43.90461731]
[135.06726074 56.25619125]
[126.55616760 68.60776520]
[118.04507446 80.95933533]
[109.53398895 93.31090546]
[116.44706726 99.07444763]
[118.69863892 110.19987488]
[112.88713074 122.72673035]
[112.88713074 137.72673035]
[112.88713074 152.72673035]
[112.88713074 167.72673035]
[112.88713074 182.72673035]
[112.88713074 197.72673035]
[112.88713074 212.72673035]
[112.88713074 227.72673035]
[112.88713074 242.72673035]
[112.88713074 257.72671509]
[127.42701721 261.78805542]
[140.33140564 269.62255859]
[150.64268494 280.64889526]
[157.59570312 294.04879761]
[160.67449951 308.82797241]
[159.65061951 323.88964844]
[154.60000610 338.11618042]
[145.89749146 350.45184326]
[134.18882751 359.98126221]
[120.34288788 365.99728394]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[28 51]
[29 50]
[30 49]
[32 47]
[33 46]
[34 45]
[52 128]
[53 127]
[54 126]
[55 125]
[56 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
