%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:03 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAACAAACCCACGGGGGGGGGGAGGUCCUAAACUACCAAACCUGCAUUAAAAAUUUCGGUUGGGGCGACCUCxxxxxxxxxxCUAUCACACAUCAACUGCAACUCCAAAGCCACCCCUCACCCACUAGGAUACCCCCCCCCCCCAACAAACCUAC\
) } def
/len { sequence length } bind def

/coor [
[82.82782745 496.61413574]
[68.55606079 491.80471802]
[55.65207291 484.03930664]
[44.71942139 473.68118286]
[36.26943207 461.21475220]
[30.69733810 447.22311401]
[28.26374817 432.36068726]
[29.08248901 417.32260132]
[33.11526489 402.81225586]
[40.17345810 389.50827026]
[49.92694473 378.03289795]
[61.91953278 368.92291260]
[75.59030914 362.60437012]
[90.29986572 359.37283325]
[90.29986572 344.37283325]
[90.29986572 329.37283325]
[90.29986572 314.37283325]
[90.29986572 299.37283325]
[90.29986572 284.37283325]
[90.29986572 269.37283325]
[90.29986572 254.37281799]
[90.29986572 239.37281799]
[90.29986572 224.37281799]
[81.95393372 215.56822205]
[81.86434174 203.03540039]
[90.62688446 193.52093506]
[90.92700958 178.52394104]
[91.22714233 163.52694702]
[91.52727509 148.52993774]
[91.82740784 133.53294373]
[92.12754059 118.53594971]
[85.43465424 115.62143707]
[79.88603210 110.25695038]
[76.38098907 102.91435242]
[75.61833954 94.39319611]
[77.97891235 85.73464966]
[63.99502182 80.30779266]
[50.01112747 74.88093567]
[35.97364044 69.59426117]
[21.88396454 64.44828796]
[7.79428625 59.30232239]
[-2.76641536 70.27462769]
[-16.87937546 75.99688721]
[-32.09943771 75.47768402]
[-45.78963470 68.80697632]
[-55.57806015 57.14049911]
[-59.76880646 42.49954224]
[-57.63579941 27.42074394]
[-49.54859924 14.51659393]
[-36.90836334 6.02281332]
[-21.90508652 3.41100287]
[-7.13817692 7.13367319]
[4.83390808 16.54585075]
[11.93693256 30.01681519]
[12.94025517 45.21264648]
[27.02993202 50.35861588]
[41.11960983 55.50458145]
[48.52286911 54.84153366]
[55.43798447 60.89704514]
[69.42187500 66.32389832]
[83.40576935 71.75075531]
[97.73513794 67.31577301]
[106.20854187 54.93831635]
[114.68194580 42.56085968]
[123.15535736 30.18340492]
[111.75476837 20.41232872]
[101.47747803 9.46589184]
[92.44396973 -2.52756429]
[84.76016235 -15.42742252]
[78.51614380 -29.08243752]
[73.78511810 -43.33251190]
[70.62255859 -58.01057434]
[69.06554413 -72.94452667]
[69.13233185 -87.95928192]
[70.82212830 -102.87879181]
[74.11513519 -117.52813721]
[78.97274017 -131.73556519]
[85.33798218 -145.33448792]
[93.13623810 -158.16548157]
[102.27607727 -170.07810974]
[112.65034485 -180.93269348]
[124.13739777 -190.60195923]
[136.60255432 -198.97256470]
[149.89968872 -205.94635010]
[163.87287903 -211.44155884]
[178.35829163 -215.39375305]
[193.18611145 -217.75660706]
[208.18247986 -218.50241089]
[223.17156982 -217.62242126]
[237.97764587 -215.12696838]
[252.42710876 -211.04528809]
[266.35055542 -205.42524719]
[279.58474731 -198.33273315]
[291.97448730 -189.85092163]
[303.37454224 -180.07922363]
[313.65124512 -169.13223267]
[322.68411255 -157.13829041]
[330.36721802 -144.23802185]
[336.61050415 -130.58267212]
[341.34075928 -116.33233643]
[344.50253296 -101.65410614]
[346.05874634 -86.72006989]
[345.99114990 -71.70532227]
[344.30056763 -56.78590393]
[341.00677490 -42.13673401]
[336.14840698 -27.92957115]
[329.78240967 -14.33098221]
[321.98345947 -1.50040770]
[312.84298706 10.41172218]
[302.46813965 21.26574326]
[290.98056030 30.93439865]
[278.51495361 39.30432892]
[265.21746826 46.27739716]
[251.24397278 51.77185059]
[236.75834656 55.72327042]
[221.93040466 58.08532715]
[206.93399048 58.83032608]
[191.94494629 57.94953156]
[177.13900757 55.45327377]
[162.68975830 51.37081909]
[148.76661682 45.75003052]
[135.53280640 38.65681076]
[127.05940247 51.03426361]
[118.58599854 63.41172028]
[110.11259460 75.78917694]
[123.18482208 100.39481354]
[107.12454224 118.83608246]
[106.82440948 133.83308411]
[106.52427673 148.83007812]
[106.22414398 163.82707214]
[105.92401123 178.82406616]
[105.62387848 193.82106018]
[114.88958740 209.70423889]
[105.29986572 224.37281799]
[105.29986572 239.37281799]
[105.29986572 254.37281799]
[105.29986572 269.37283325]
[105.29986572 284.37283325]
[105.29986572 299.37283325]
[105.29986572 314.37283325]
[105.29986572 329.37283325]
[105.29986572 344.37283325]
[105.29986572 359.37283325]
[120.00942230 362.60437012]
[133.68020630 368.92291260]
[145.67279053 378.03289795]
[155.42626953 389.50827026]
[162.48446655 402.81225586]
[166.51724243 417.32260132]
[167.33598328 432.36068726]
[164.90238953 447.22311401]
[159.33029175 461.21475220]
[150.88031006 473.68118286]
[139.94766235 484.03930664]
[127.04367065 491.80471802]
[112.77190399 496.61413574]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 143]
[15 142]
[16 141]
[17 140]
[18 139]
[19 138]
[20 137]
[21 136]
[22 135]
[23 134]
[26 132]
[27 131]
[28 130]
[29 129]
[30 128]
[31 127]
[36 61]
[37 60]
[38 59]
[39 57]
[40 56]
[41 55]
[62 125]
[63 124]
[64 123]
[65 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
