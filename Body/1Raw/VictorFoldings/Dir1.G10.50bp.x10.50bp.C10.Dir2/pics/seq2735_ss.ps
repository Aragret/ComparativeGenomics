%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAGCAUCACCGGGGGGGGGGAGUAUUAGAGGCACCGCCUGCCCAGUGACACAUGUUUAACGGCCGCGGUAxxxxxxxxxxUCGCUGACGCCAUAAAACUCUUCACCAAAGAGCCCCUAAAACCCGCCACACCCCCCCCCCUCUACCAUCACC\
) } def
/len { sequence length } bind def

/coor [
[98.68791199 432.14822388]
[84.52730560 426.99322510]
[71.93756104 418.71102905]
[61.59762192 407.74826050]
[54.06511307 394.69610596]
[49.74624634 380.25851440]
[48.87393951 365.21405029]
[51.49522781 350.37405396]
[57.46875381 336.53881836]
[66.47237396 324.45446777]
[78.02053070 314.77270508]
[91.49044800 308.01562500]
[106.15570831 304.54763794]
[106.15570831 289.54763794]
[106.15570831 274.54763794]
[106.15570831 259.54763794]
[106.15570831 244.54765320]
[106.15570831 229.54765320]
[106.15570831 214.54765320]
[106.15570831 199.54765320]
[106.15570831 184.54765320]
[106.15570831 169.54765320]
[98.41840363 156.82037354]
[106.15570831 143.02020264]
[106.15570831 128.02020264]
[79.63920593 114.11460876]
[82.49050140 88.65999603]
[73.67372131 76.52474213]
[64.85694122 64.38948822]
[52.22721863 61.58861160]
[45.13873291 51.25041580]
[46.95875931 39.25434113]
[38.38973618 26.94289017]
[29.82071114 14.63143921]
[19.05410767 4.18729019]
[6.48786592 -4.00353193]
[-6.07837582 -12.19435406]
[-18.64461708 -20.38517570]
[-31.21085930 -28.57599831]
[-44.00867462 -26.68636703]
[-54.31919861 -33.81504440]
[-56.89904785 -45.67095566]
[-69.29670715 -54.11477661]
[-81.69435883 -62.55859375]
[-93.64601135 -53.28425980]
[-107.87931824 -48.15900803]
[-122.99984741 -47.68496704]
[-137.52624512 -51.90857315]
[-150.03536987 -60.41604614]
[-159.30169678 -72.37390137]
[-164.41740417 -86.61064148]
[-164.88131714 -101.73148346]
[-160.64797974 -116.25505066]
[-152.13212585 -128.75846863]
[-140.16806030 -138.01678467]
[-125.92790222 -143.12295532]
[-110.80674744 -143.57673645]
[-96.28601837 -139.33366394]
[-83.78830719 -130.80943298]
[-74.53801727 -118.83917236]
[-69.44139099 -104.59558868]
[-68.99774170 -89.47413635]
[-73.25054169 -74.95625305]
[-60.85288620 -66.51243591]
[-48.45522690 -58.06861496]
[-30.93440819 -57.73871231]
[-23.02003860 -41.14223862]
[-10.45379639 -32.95141602]
[2.11244607 -24.76059532]
[14.67868805 -16.56977463]
[27.24493027 -8.37895203]
[20.72149086 -21.88616180]
[18.38886070 -36.70368195]
[20.44692039 -51.56182098]
[26.71931648 -65.18742371]
[36.66858292 -76.41294098]
[49.44218445 -84.27646637]
[63.94557571 -88.10420990]
[78.93599701 -87.56816101]
[93.12894440 -82.71427155]
[105.30825043 -73.95844269]
[114.43029785 -62.05096054]
[119.71343994 -48.01214218]
[120.70497131 -33.04494858]
[117.31993103 -18.43188858]
[109.84837341 -5.42512703]
[98.93052673 4.86081505]
[85.50191498 11.54455471]
[70.71321106 14.05337715]
[55.83162689 12.17230606]
[42.13216400 6.06241560]
[50.70118713 18.37386703]
[59.27021027 30.68531799]
[75.52017975 37.24477386]
[76.99219513 55.57271194]
[85.80897522 67.70796967]
[94.62575531 79.84322357]
[106.86830902 77.55738068]
[119.67070007 82.87718964]
[128.32785034 95.46591187]
[142.28565979 89.97232056]
[156.24346924 84.47872925]
[170.20127869 78.98514557]
[184.15908813 73.49155426]
[191.85307312 59.41383362]
[207.68077087 56.79396820]
[219.50051880 67.64169312]
[218.24522400 83.63555908]
[204.87783813 92.50644684]
[189.65267944 87.44936371]
[175.69487000 92.94295502]
[161.73706055 98.43653870]
[147.77925110 103.93013000]
[133.82144165 109.42372131]
[148.70433044 111.29437256]
[162.99752808 106.74412537]
[177.95773315 107.83597565]
[191.43878174 114.41329193]
[201.50671387 125.53250122]
[206.71717834 139.59844971]
[206.32270813 154.59326172]
[200.37986755 168.36579895]
[189.74122620 178.94026184]
[175.93298340 184.79966736]
[160.93606567 185.10340881]
[146.90190125 179.80792236]
[135.84381104 169.67291260]
[129.34817505 156.15229797]
[128.34709167 141.18394470]
[121.15570831 128.02020264]
[121.15570831 143.02020264]
[128.89300537 156.82037354]
[121.15570831 169.54765320]
[121.15570831 184.54765320]
[121.15570831 199.54765320]
[121.15570831 214.54765320]
[121.15570831 229.54765320]
[121.15570831 244.54765320]
[121.15570831 259.54763794]
[121.15570831 274.54763794]
[121.15570831 289.54763794]
[121.15570831 304.54763794]
[135.82096863 308.01562500]
[149.29087830 314.77270508]
[160.83903503 324.45446777]
[169.84265137 336.53881836]
[175.81617737 350.37405396]
[178.43746948 365.21405029]
[177.56517029 380.25851440]
[173.24630737 394.69610596]
[165.71379089 407.74826050]
[155.37385559 418.71102905]
[142.78410339 426.99322510]
[128.62350464 432.14822388]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
[25 130]
[27 97]
[28 96]
[29 95]
[32 93]
[33 92]
[34 91]
[35 71]
[36 70]
[37 69]
[38 68]
[39 67]
[42 65]
[43 64]
[44 63]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
