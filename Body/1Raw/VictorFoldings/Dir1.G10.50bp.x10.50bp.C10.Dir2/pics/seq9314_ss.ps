%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAACACCCUGGGGGGGGGGCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACGxxxxxxxxxxCCGAUGAGGCAACCAGCCAGAACGCCUGAACGCAGGCACAUACUUCCUAUCCCCCCCCCCUCUACACCCU\
) } def
/len { sequence length } bind def

/coor [
[95.19859314 387.22485352]
[81.35265350 381.20883179]
[69.64398956 371.67941284]
[60.94146729 359.34375000]
[55.89086533 345.11721802]
[54.86697388 330.05554199]
[57.94577408 315.27636719]
[64.89879608 301.87643433]
[75.21008301 290.85012817]
[88.11446381 283.01559448]
[102.65435028 278.95428467]
[102.65435028 263.95428467]
[102.65435028 248.95429993]
[102.65435028 233.95429993]
[102.65435028 218.95429993]
[102.65435028 203.95429993]
[102.65435028 188.95429993]
[102.65435028 173.95429993]
[102.65435028 158.95429993]
[102.65435028 143.95429993]
[88.13875580 140.67739868]
[76.09025574 132.94706726]
[67.75192261 122.01415253]
[53.96954346 127.93411255]
[40.18716431 133.85408020]
[32.92946625 148.16160583]
[17.18976784 151.26667786]
[5.04221630 140.78733826]
[5.80537367 124.76244354]
[18.89381218 115.48492432]
[34.26720047 120.07169342]
[48.04957962 114.15173340]
[61.83196259 108.23176575]
[58.46736908 100.78244019]
[56.63623047 92.34433746]
[41.73432922 90.63165283]
[26.83242607 88.91896057]
[11.93052387 87.20626831]
[-2.89143586 94.22350311]
[-16.22377968 84.67465210]
[-14.35133648 68.38275146]
[0.79968512 62.10751343]
[13.64321327 72.30436707]
[28.54511642 74.01705933]
[43.44701767 75.72974396]
[58.34891891 77.44243622]
[67.49065399 65.55005646]
[62.00362396 51.58966827]
[56.51659012 37.62927628]
[42.64495850 40.49957657]
[26.81794357 31.08289909]
[17.55299568 19.28625870]
[8.28804588 7.48961878]
[-0.97690368 -4.30702114]
[-16.16926384 -2.05140948]
[-30.44813538 -7.70909452]
[-39.97257233 -19.75818825]
[-42.18055344 -34.95754242]
[-36.47813797 -49.21860886]
[-24.39925003 -58.70523453]
[-9.19304943 -60.86555862]
[5.05007410 -55.11847305]
[14.49878979 -43.00990677]
[16.61144066 -27.79700851]
[10.81973648 -13.57196999]
[20.08468628 -1.77533042]
[29.34963417 10.02130985]
[38.61458588 21.81794930]
[52.84136200 17.06413460]
[53.15341949 2.06738091]
[39.72127914 -5.26993275]
[31.24718285 -18.01545334]
[29.67841721 -33.24035263]
[35.37547302 -47.44606018]
[47.02920914 -57.36820984]
[61.96167755 -60.72676086]
[76.74151611 -56.74994659]
[87.97241974 -46.35160828]
[93.07360077 -31.92120934]
[90.87286377 -16.77474594]
[81.87590790 -4.39276886]
[68.15017700 2.37943721]
[67.83811951 17.37619019]
[70.47698212 32.14224625]
[75.96401215 46.10263443]
[81.45104218 60.06302643]
[100.42548370 53.66127014]
[121.29868317 56.26332474]
[131.28140259 45.06755829]
[141.26412964 33.87179184]
[141.78594971 17.83722687]
[154.73323059 8.36371326]
[170.17393494 12.71852016]
[176.26325989 27.56101036]
[168.33001709 41.50529861]
[152.45989990 43.85451889]
[142.47717285 55.05028534]
[132.49444580 66.24604797]
[135.94795227 72.90362549]
[146.47705078 62.22008896]
[159.89135742 68.93248749]
[157.65270996 83.76449585]
[142.85494995 86.21878052]
[146.30844116 92.87635803]
[161.21034241 91.16367340]
[176.11224365 89.45098114]
[191.01414490 87.73828888]
[205.91606140 86.02560425]
[218.75958252 75.82875061]
[233.91059875 82.10398102]
[235.78305054 98.39588165]
[222.45069885 107.94474030]
[207.62873840 100.92750549]
[192.72683716 102.64019775]
[177.82493591 104.35288239]
[162.92303467 106.06557465]
[148.02113342 107.77826691]
[145.14054871 113.47708893]
[141.61703491 118.56937408]
[137.55789185 122.98762512]
[150.80047607 130.03276062]
[164.04306030 137.07789612]
[179.74452209 133.78491211]
[192.01646423 144.11830139]
[191.44491577 160.15116882]
[178.46830750 169.58447266]
[163.04118347 165.18179321]
[156.99792480 150.32048035]
[143.75534058 143.27534485]
[130.51275635 136.23020935]
[117.65435028 143.95429993]
[117.65435028 158.95429993]
[117.65435028 173.95429993]
[117.65435028 188.95429993]
[117.65435028 203.95429993]
[117.65435028 218.95429993]
[117.65435028 233.95429993]
[117.65435028 248.95429993]
[117.65435028 263.95428467]
[117.65435028 278.95428467]
[132.19422913 283.01559448]
[145.09861755 290.85012817]
[155.40989685 301.87643433]
[162.36291504 315.27636719]
[165.44172668 330.05554199]
[164.41783142 345.11721802]
[159.36723328 359.34375000]
[150.66470337 371.67941284]
[138.95603943 381.20883179]
[125.11009979 387.22485352]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[23 33]
[24 32]
[25 31]
[35 46]
[36 45]
[37 44]
[38 43]
[47 86]
[48 85]
[49 84]
[51 68]
[52 67]
[53 66]
[54 65]
[69 83]
[70 82]
[88 98]
[89 97]
[90 96]
[104 117]
[105 116]
[106 115]
[107 114]
[108 113]
[120 130]
[121 129]
[122 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
