%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:36 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACCCCCCGGGGGGGGGGACUAUUAACCUACUGGGAGAACUCUCUGUGCUAGUAACCACGUUCUCCUGxxxxxxxxxxAUGCACACUACUAUAACCACCCUAACCCUGACUUCCCUAAUUCCCCCCAUCCCCCCCCCCCCUUACCACCC\
) } def
/len { sequence length } bind def

/coor [
[84.82880402 377.26074219]
[70.80686188 371.70773315]
[58.60689926 362.84140015]
[48.99583054 351.21908569]
[42.57780457 337.57138062]
[39.75626755 322.75619507]
[40.70858383 307.70483398]
[45.37488937 293.36340332]
[53.46185684 280.63345337]
[64.46112823 270.31518555]
[77.68128967 263.05718994]
[92.29129791 259.31576538]
[92.29129791 244.31576538]
[92.29129791 229.31576538]
[92.29129791 214.31576538]
[92.29129791 199.31576538]
[92.29129791 184.31576538]
[92.29129791 169.31576538]
[92.29129791 154.31576538]
[92.29129791 139.31576538]
[92.29129791 124.31576538]
[92.29129791 109.31576538]
[83.58161926 121.52811432]
[70.49338531 128.85600281]
[55.52962112 129.89804077]
[41.55205154 124.45492554]
[31.23377991 113.56762695]
[26.54810715 99.31826019]
[28.39113426 84.43191528]
[36.41039658 71.75550842]
[49.07226562 63.71329880]
[63.95524597 61.84331512]
[78.21308136 66.50317383]
[89.11904907 76.80171204]
[94.58766937 90.77075195]
[98.24637604 76.22380066]
[101.90508270 61.67684174]
[105.56378937 47.12989044]
[100.09810638 29.57548904]
[112.72939301 17.43073273]
[116.08865356 2.81172514]
[119.44791412 -11.80728245]
[105.12583160 -16.29129982]
[91.19430542 -21.87169456]
[77.73711395 -28.51490211]
[64.83518219 -36.18096924]
[52.56612015 -44.82379150]
[41.00370789 -54.39139175]
[30.21748543 -64.82622528]
[20.27232552 -76.06553650]
[11.22803783 -88.04172516]
[3.13901639 -100.68276978]
[-3.94608879 -113.91265106]
[-9.98466682 -127.65178680]
[-14.94040108 -141.81755066]
[-18.78348541 -156.32475281]
[-21.49080849 -171.08615112]
[-23.04608727 -186.01295471]
[-23.43996811 -201.01539612]
[-22.67008018 -216.00323486]
[-20.74105644 -230.88635254]
[-17.66449928 -245.57524109]
[-13.45890808 -259.98153687]
[-8.14957809 -274.01861572]
[-1.76844025 -287.60202026]
[5.64612770 -300.65011597]
[14.04953289 -313.08438110]
[23.39123726 -324.83004761]
[33.61505508 -335.81649780]
[44.65950012 -345.97763062]
[56.45814896 -355.25231934]
[68.94004059 -363.58483887]
[82.03011322 -370.92501831]
[95.64962769 -377.22875977]
[109.71669006 -382.45812988]
[124.14668274 -386.58166504]
[138.85282898 -389.57455444]
[153.74668884 -391.41885376]
[168.73867798 -392.10342407]
[183.73863220 -391.62417603]
[198.65634155 -389.98397827]
[213.40208435 -387.19268799]
[227.88717651 -383.26712036]
[242.02452087 -378.23083496]
[255.72906494 -372.11416626]
[268.91839600 -364.95388794]
[281.51321411 -356.79306030]
[293.43774414 -347.68075562]
[304.62026978 -337.67178345]
[314.99356079 -326.82635498]
[324.49517822 -315.20968628]
[333.06805420 -302.89163208]
[340.66058350 -289.94628906]
[347.22708130 -276.45150757]
[352.72811890 -262.48843384]
[357.13055420 -248.14108276]
[360.40792847 -233.49569702]
[362.54052734 -218.64039612]
[363.51556396 -203.66448975]
[363.32711792 -188.65806580]
[361.97634888 -173.71136475]
[359.47137451 -158.91429138]
[355.82727051 -144.35583496]
[351.06594849 -130.12353516]
[345.21606445 -116.30300903]
[338.31274414 -102.97737122]
[330.39755249 -90.22676086]
[321.51809692 -78.12786102]
[311.72775269 -66.75344086]
[301.08538818 -56.17190933]
[289.65505981 -46.44690323]
[277.50549316 -37.63690948]
[264.70971680 -29.79491425]
[251.34474182 -22.96808243]
[237.49092102 -17.19747162]
[223.23158264 -12.51778507]
[208.65248108 -8.95716858]
[193.84129333 -6.53703642]
[178.88710022 -5.27194405]
[163.87983704 -5.16949987]
[148.90975952 -6.23031950]
[134.06692505 -8.44802380]
[130.70765686 6.17098379]
[127.34840393 20.78999138]
[133.51150513 31.24361992]
[130.78794861 43.48100662]
[120.11074066 50.78859329]
[116.45203400 65.33554840]
[112.79333496 79.88249969]
[109.13462830 94.42945862]
[107.29129791 109.31576538]
[107.29129791 124.31576538]
[107.29129791 139.31576538]
[107.29129791 154.31576538]
[107.29129791 169.31576538]
[107.29129791 184.31576538]
[107.29129791 199.31576538]
[107.29129791 214.31576538]
[107.29129791 229.31576538]
[107.29129791 244.31576538]
[107.29129791 259.31576538]
[121.90131378 263.05718994]
[135.12147522 270.31518555]
[146.12074280 280.63345337]
[154.20771790 293.36340332]
[158.87402344 307.70483398]
[159.82633972 322.75619507]
[157.00479126 337.57138062]
[150.58677673 351.21908569]
[140.97570801 362.84140015]
[128.77574158 371.70773315]
[114.75379944 377.26074219]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[35 130]
[36 129]
[37 128]
[38 127]
[40 124]
[41 123]
[42 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
