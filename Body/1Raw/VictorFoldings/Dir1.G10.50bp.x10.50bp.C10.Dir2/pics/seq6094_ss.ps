%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:10 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAACCCACAGGGGGGGGGGAACACUUAGUUAACAGCUAAGCACCCUAAUCAACUGGCUUCAAUCUACUUxxxxxxxxxxCCCCCAUAAAUAGGAGAAGGCUUAGAAGAAAACCCCACAAACCCCAUUACCCCCCCCCCCUAAACCCACA\
) } def
/len { sequence length } bind def

/coor [
[78.98644257 380.37231445]
[65.76624298 373.09982300]
[54.87944412 362.65283203]
[47.06831360 349.74359131]
[42.86542892 335.25225830]
[42.55735779 320.16693115]
[46.16510010 305.51611328]
[53.44267273 292.29870605]
[63.89387894 281.41595459]
[76.80614471 273.60980225]
[91.29907990 269.41250610]
[90.98702240 254.41577148]
[90.67496490 239.41900635]
[90.36290741 224.42225647]
[90.05084991 209.42550659]
[89.73880005 194.42875671]
[89.42674255 179.43199158]
[89.11468506 164.43524170]
[88.80262756 149.43849182]
[88.49057007 134.44174194]
[75.55251312 126.85182953]
[62.30992889 133.89695740]
[49.06734467 140.94209290]
[43.02407837 155.80340576]
[27.59696198 160.20608521]
[14.62035751 150.77278137]
[14.04880524 134.73991394]
[26.32075119 124.40652466]
[42.02220917 127.69950867]
[55.26479721 120.65438080]
[68.50738525 113.60924530]
[68.05715942 96.86714172]
[75.39304352 83.04120636]
[87.67232513 75.22393036]
[74.89572144 66.31347656]
[72.27384949 51.32747269]
[80.84734344 39.20184326]
[78.05501556 24.46403503]
[75.26268768 9.72622967]
[72.47036743 -5.01157618]
[69.67803955 -19.74938202]
[66.88571930 -34.48718643]
[57.11292267 -31.63945580]
[45.22632599 -34.57326889]
[32.28827286 -42.16317749]
[18.97396088 -34.50649643]
[3.61512780 -34.54882431]
[-9.65678120 -42.27876663]
[-17.27168846 -55.61700821]
[-17.18122101 -70.97563934]
[-9.40971470 -84.22325134]
[3.95233321 -91.79631042]
[19.31060028 -91.65769958]
[32.53379059 -83.84471130]
[40.06492996 -70.45899200]
[39.87818146 -55.10123062]
[52.81623459 -47.51132202]
[66.27220154 -54.13982010]
[68.13981628 -69.02310181]
[70.00743103 -83.90637970]
[71.87503815 -98.78966522]
[64.57530975 -109.47459412]
[66.47843933 -121.86801910]
[76.01708984 -129.37278748]
[78.19392395 -144.21398926]
[80.37076569 -159.05519104]
[82.54759979 -173.89640808]
[68.63522339 -179.71847534]
[56.60831070 -188.81814575]
[47.22288895 -200.62344360]
[41.06893921 -214.39222717]
[38.53329468 -229.25901794]
[39.77535248 -244.28926086]
[44.71703720 -258.53814697]
[53.04770660 -271.10995483]
[64.24369049 -281.21444702]
[77.60119629 -288.21643066]
[92.28057098 -291.67575073]
[107.35903931 -291.37496948]
[121.88877106 -287.33297729]
[134.95640564 -279.80383301]
[145.74050903 -269.26089478]
[153.56317139 -256.36682129]
[157.93267822 -241.93220520]
[158.57432556 -226.86439514]
[155.44779968 -212.11054993]
[148.74963379 -198.59814453]
[138.90086365 -187.17654419]
[126.52062225 -178.56375122]
[112.38712311 -173.30114746]
[97.38880920 -171.71955872]
[95.21196747 -156.87835693]
[93.03513336 -142.03715515]
[90.85829926 -127.19594574]
[98.21990204 -111.29605103]
[86.75832367 -96.92205048]
[84.89070892 -82.03876495]
[83.02309418 -67.15548706]
[81.15547943 -52.27220917]
[81.62351990 -37.27951431]
[84.41584778 -22.54170609]
[87.20817566 -7.80390072]
[90.00049591 6.93390512]
[92.79282379 21.67171097]
[95.58514404 36.40951538]
[108.00000763 44.55855179]
[111.04177094 59.46500397]
[102.41013336 72.43160248]
[120.07038116 80.94730377]
[127.65641785 99.02639771]
[142.22912598 102.58116150]
[150.88569641 90.11407471]
[163.46353149 81.61921692]
[178.26156616 78.24545288]
[193.27851868 80.44905090]
[206.48342896 87.93199158]
[216.09048462 99.68227386]
[220.80036926 114.11076355]
[219.97615051 129.26612854]
[213.72926331 143.09872437]
[202.90455627 153.73782349]
[188.96598816 159.74455261]
[173.79862976 160.30656433]
[159.45375061 155.34785461]
[147.87138367 145.53903198]
[140.61791992 132.20666504]
[138.67436218 117.15386200]
[124.10165405 113.59909821]
[116.96941376 125.93160248]
[103.48732758 134.12968445]
[103.79938507 149.12643433]
[104.11143494 164.12318420]
[104.42349243 179.11993408]
[104.73554993 194.11669922]
[105.04760742 209.11344910]
[105.35966492 224.11019897]
[105.67172241 239.10694885]
[105.98377228 254.10371399]
[106.29582977 269.10046387]
[120.95082092 272.69122314]
[134.17663574 279.95349121]
[145.07150269 290.39208984]
[152.89259338 303.29528809]
[157.10667419 317.78335571]
[157.42639160 332.86846924]
[153.82997131 347.52206421]
[146.56260681 360.74505615]
[136.11979675 371.63589478]
[123.21356964 379.45202637]
[108.72387695 383.66049194]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 31]
[22 30]
[23 29]
[34 108]
[37 105]
[38 104]
[39 103]
[40 102]
[41 101]
[42 100]
[44 57]
[45 56]
[58 99]
[59 98]
[60 97]
[61 96]
[64 94]
[65 93]
[66 92]
[67 91]
[110 128]
[111 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
