%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCCCAUCCUGGGGGGGGGGUACCACCCUCGUUAACCCUAACAAAAAAAACUCAUACCCCCAUUAUGUAAxxxxxxxxxxAAUCCCUUCUCGUCCCCAUGGAUGACCCCCCUCAGAUAGGGGUCCCUUGACCCCCCCCCCCCACCAUCCU\
) } def
/len { sequence length } bind def

/coor [
[89.61968994 392.28097534]
[75.77375031 386.26495361]
[64.06509399 376.73553467]
[55.36256790 364.39987183]
[50.31196594 350.17333984]
[49.28807449 335.11166382]
[52.36687469 320.33248901]
[59.31989670 306.93255615]
[69.63117981 295.90621948]
[82.53556061 288.07171631]
[97.07544708 284.01040649]
[97.07544708 269.01040649]
[97.07544708 254.01040649]
[97.07544708 239.01040649]
[97.07544708 224.01040649]
[97.07544708 209.01040649]
[97.07544708 194.01040649]
[97.07544708 179.01040649]
[97.07544708 164.01040649]
[97.07544708 149.01040649]
[97.07544708 134.01040649]
[74.06787109 111.23398590]
[82.41759491 86.14411163]
[74.42768097 73.44918060]
[66.43775940 60.75425339]
[53.11105728 67.65827179]
[39.25337219 73.42291260]
[24.96191406 78.00775146]
[10.33692455 81.38062286]
[-4.51900816 83.51786041]
[-19.50168037 84.40448761]
[-34.50599670 84.03427887]
[-49.42670822 82.40982056]
[-64.15916443 79.54252625]
[-78.60001373 75.45249176]
[-92.64797211 70.16841888]
[-106.20449066 63.72735977]
[-119.17449188 56.17450714]
[-131.46699524 47.56282806]
[-142.99577332 37.95273972]
[-153.67996216 27.41164017]
[-163.44461060 16.01347733]
[-172.22122192 3.83819604]
[-179.94825745 -9.02879715]
[-186.57150269 -22.49725151]
[-192.04449463 -36.47269058]
[-196.32884216 -50.85708618]
[-199.39450073 -65.54954529]
[-201.21997070 -80.44699860]
[-201.79244995 -95.44496155]
[-201.10789490 -110.43822479]
[-199.17114258 -125.32161713]
[-195.99574280 -139.99075317]
[-191.60400391 -154.34272766]
[-186.02671814 -168.27687073]
[-179.30299377 -181.69544983]
[-171.48001099 -194.50433350]
[-162.61264038 -206.61367798]
[-152.76307678 -217.93853760]
[-142.00041199 -228.39949036]
[-130.40013123 -237.92314148]
[-118.04360199 -246.44270325]
[-105.01751709 -253.89842224]
[-91.41323090 -260.23797607]
[-77.32617188 -265.41690063]
[-62.85515976 -269.39889526]
[-48.10168839 -272.15600586]
[-33.16925049 -273.66888428]
[-18.16258621 -273.92694092]
[-3.18695974 -272.92837524]
[11.65258503 -270.68014526]
[26.25195694 -267.19808960]
[40.50875092 -262.50656128]
[54.32296371 -256.63848877]
[67.59769440 -249.63507080]
[80.23983765 -241.54539490]
[92.16070557 -232.42622375]
[103.27668762 -222.34150696]
[113.50981140 -211.36198425]
[122.78829193 -199.56468201]
[131.04705811 -187.03234863]
[138.22816467 -173.85289001]
[144.28125000 -160.11874390]
[149.16384888 -145.92625427]
[152.84172058 -131.37496948]
[155.28906250 -116.56697083]
[156.48870850 -101.60610962]
[156.43225098 -86.59732819]
[155.12008667 -71.64591980]
[152.56140137 -56.85674286]
[148.77415466 -42.33354568]
[143.78491211 -28.17819214]
[137.62866211 -14.48997784]
[130.34860229 -1.36491621]
[121.99578857 11.10492897]
[112.62880707 22.83208847]
[102.31336975 33.73430252]
[91.12183380 43.73510361]
[79.13269043 52.76433563]
[87.12261200 65.45926666]
[95.11252594 78.15419769]
[109.23306274 75.37126923]
[124.35825348 82.11487579]
[134.08511353 98.13809204]
[149.07780457 98.60613251]
[164.07049561 99.07417297]
[179.06320190 99.54222107]
[194.05589294 100.01026154]
[209.04858398 100.47830200]
[217.70523071 87.70856476]
[231.90045166 81.66713715]
[247.10464478 84.28179932]
[258.46615601 94.71823883]
[262.35961914 109.64621735]
[257.54260254 124.30227661]
[245.55223083 134.00971985]
[230.21456909 135.67092896]
[216.42381287 128.75582886]
[208.58055115 115.47100067]
[193.58784485 115.00295258]
[178.59515381 114.53491211]
[163.60246277 114.06687164]
[148.60975647 113.59883118]
[133.61706543 113.13079071]
[128.23165894 118.35069275]
[141.48886108 125.36828613]
[138.91142273 140.14518738]
[124.06127167 142.26017761]
[117.46085358 128.79051208]
[112.07544708 134.01040649]
[112.07544708 149.01040649]
[112.07544708 164.01040649]
[112.07544708 179.01040649]
[112.07544708 194.01040649]
[112.07544708 209.01040649]
[112.07544708 224.01040649]
[112.07544708 239.01040649]
[112.07544708 254.01040649]
[112.07544708 269.01040649]
[112.07544708 284.01040649]
[126.61533356 288.07171631]
[139.51971436 295.90621948]
[149.83099365 306.93255615]
[156.78402710 320.33248901]
[159.86282349 335.11166382]
[158.83892822 350.17333984]
[153.78833008 364.39987183]
[145.08580017 376.73553467]
[133.37713623 386.26495361]
[119.53120422 392.28097534]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 101]
[24 100]
[25 99]
[104 124]
[105 123]
[106 122]
[107 121]
[108 120]
[109 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
