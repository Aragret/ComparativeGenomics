%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:21 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAGCAUAAUCGGGGGGGGGGACUUGUUCCUUAAAUAGGGACCUGUAUGAAUGGCUCCACGAGGGUUCAGCxxxxxxxxxxUCCAAAAAACACAUAAUUUGAAUCAACACAACCACCCACAGCCUAAUUAUCCCCCCCCCCUAGCAUCAUC\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 384.48400879]
[71.19830322 378.46798706]
[59.48964310 368.93856812]
[50.78712082 356.60290527]
[45.73651886 342.37637329]
[44.71262741 327.31469727]
[47.79142761 312.53552246]
[54.74444962 299.13562012]
[65.05573273 288.10928345]
[77.96011353 280.27478027]
[92.50000000 276.21343994]
[92.50000000 261.21343994]
[92.50000000 246.21345520]
[92.50000000 231.21345520]
[92.50000000 216.21345520]
[92.50000000 201.21345520]
[92.50000000 186.21345520]
[92.50000000 171.21345520]
[92.50000000 156.21345520]
[92.50000000 141.21345520]
[92.50000000 126.21345520]
[87.34613037 124.15108490]
[82.71679688 121.08758545]
[78.80390167 117.14994812]
[75.76964569 112.50139618]
[61.06167984 115.44688416]
[46.35371780 118.39236450]
[31.64575768 121.33784485]
[16.93779564 124.28332520]
[2.22983456 127.22881317]
[-7.82663822 139.72868347]
[-23.86827660 139.51568604]
[-33.58930969 126.75319672]
[-29.53259277 111.23151398]
[-14.81009007 104.85754395]
[-0.71564806 112.52085114]
[13.99231339 109.57537079]
[28.70027542 106.62988281]
[43.40823746 103.68440247]
[58.11619949 100.73892212]
[72.82415771 97.79343414]
[73.95268250 91.94194031]
[76.32553864 86.47538757]
[79.82937622 81.65494537]
[84.29680634 77.71087646]
[89.51441956 74.83161163]
[95.23294067 73.15469360]
[101.17919922 72.76023865]
[107.06912994 73.66708374]
[114.79321289 60.80867767]
[122.51729584 47.95027542]
[129.97221375 34.93396759]
[137.15472412 21.76538467]
[144.33723450 8.59680176]
[151.51972961 -4.57178116]
[151.23883057 -9.05313969]
[152.32630920 -12.97595119]
[154.42741394 -15.97048759]
[157.10223389 -17.82501793]
[159.88644409 -18.49996376]
[161.01750183 -34.28068924]
[174.48059082 -40.65208054]
[182.73287964 -53.17804337]
[190.98516846 -65.70400238]
[199.23745728 -78.22996521]
[189.37854004 -87.62556458]
[181.24020386 -98.54132080]
[175.05291748 -110.66629028]
[170.99157715 -123.65528107]
[169.17059326 -137.13873291]
[169.64065552 -150.73320007]
[172.38726807 -164.05226135]
[177.33131409 -176.71754456]
[184.33122253 -188.36938477]
[193.18704224 -198.67710876]
[203.64620972 -207.34844971]
[215.41069031 -214.13772583]
[228.14552307 -218.85289001]
[241.48829651 -221.36094666]
[255.05952454 -221.59165955]
[268.47335815 -219.53959656]
[281.34869385 -215.26414490]
[293.31985474 -208.88789368]
[302.58480835 -220.68453979]
[311.84976196 -232.48117065]
[321.11471558 -244.27781677]
[315.32299805 -258.50283813]
[317.43566895 -273.71575928]
[326.88436890 -285.82431030]
[341.12750244 -291.57141113]
[356.33370972 -289.41107178]
[368.41259766 -279.92446899]
[374.11499023 -265.66339111]
[371.90701294 -250.46403503]
[362.38259888 -238.41493225]
[348.10372925 -232.75724792]
[332.91134644 -235.01286316]
[323.64639282 -223.21623230]
[314.38146973 -211.41958618]
[305.11651611 -199.62294006]
[315.86248779 -187.13549805]
[323.84182739 -172.71638489]
[328.71804810 -156.96928406]
[330.28466797 -140.55395508]
[328.47393799 -124.15863800]
[323.35971069 -108.47110748]
[315.15451050 -94.14990234]
[304.20062256 -81.79664612]
[290.95584106 -71.93077850]
[275.97439575 -64.96771240]
[259.88369751 -61.20133972]
[243.35803223 -60.79163742]
[227.09040833 -63.75786591]
[211.76341248 -69.97767639]
[203.51112366 -57.45171738]
[195.25883484 -44.92575455]
[187.00654602 -32.39979172]
[186.46574402 -17.51500702]
[172.41239929 -10.24767494]
[164.68832397 2.61072779]
[157.50581360 15.77931023]
[150.32330322 28.94789314]
[143.14079285 42.11647415]
[143.62722778 46.92676544]
[141.05175781 52.08411789]
[135.37570190 55.67436218]
[127.65161896 68.53276062]
[119.92752838 81.39116669]
[126.27407074 107.28481293]
[107.50000000 126.21345520]
[107.50000000 141.21345520]
[107.50000000 156.21345520]
[107.50000000 171.21345520]
[107.50000000 186.21345520]
[107.50000000 201.21345520]
[107.50000000 216.21345520]
[107.50000000 231.21345520]
[107.50000000 246.21345520]
[107.50000000 261.21343994]
[107.50000000 276.21343994]
[122.03988647 280.27478027]
[134.94427490 288.10928345]
[145.25555420 299.13562012]
[152.20857239 312.53552246]
[155.28736877 327.31469727]
[154.26348877 342.37637329]
[149.21287537 356.60290527]
[140.51036072 368.93856812]
[128.80169678 378.46798706]
[114.95575714 384.48400879]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 41]
[26 40]
[27 39]
[28 38]
[29 37]
[30 36]
[49 128]
[50 127]
[51 126]
[52 123]
[53 122]
[54 121]
[55 120]
[60 119]
[62 117]
[63 116]
[64 115]
[65 114]
[83 100]
[84 99]
[85 98]
[86 97]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
