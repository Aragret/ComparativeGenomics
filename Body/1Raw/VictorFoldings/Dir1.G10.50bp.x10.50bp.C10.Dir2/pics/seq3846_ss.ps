%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:08 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUAUCAACAUGGGGGGGGGGUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAACACAAGAAxxxxxxxxxxCCUUAUUUACCGAGAAAGCUCACAAGAACUGCUAACUCAUGCCCCCAUGUCCCCCCCCCCCUAACAACAU\
) } def
/len { sequence length } bind def

/coor [
[100.58779144 412.38562012]
[86.74185181 406.36956787]
[75.03319550 396.84014893]
[66.33066559 384.50448608]
[61.28006744 370.27798462]
[60.25617599 355.21627808]
[63.33497620 340.43713379]
[70.28799438 327.03720093]
[80.59928131 316.01086426]
[93.50366211 308.17636108]
[108.04354858 304.11505127]
[108.04354858 289.11505127]
[108.04354858 274.11505127]
[108.04354858 259.11505127]
[108.04354858 244.11505127]
[108.04354858 229.11505127]
[108.04354858 214.11505127]
[108.04354858 199.11505127]
[108.04354858 184.11505127]
[108.04354858 169.11505127]
[104.87796783 162.38269043]
[108.20283508 153.80380249]
[108.51488495 138.80705261]
[73.56467438 120.29818726]
[76.07921600 87.63333130]
[65.20038605 77.30612183]
[54.32156372 66.97891998]
[43.44273758 56.65171432]
[32.56391144 46.32450867]
[21.68508720 35.99730301]
[10.13059902 45.59053802]
[-2.47743392 53.74982071]
[-15.96201420 60.36060333]
[-30.13383865 65.33008575]
[-44.79395676 68.58850098]
[-59.73656464 70.09010315]
[-74.75189209 69.81381989]
[-89.62914276 67.76352692]
[-104.15946960 63.96800995]
[-118.13888550 58.48054123]
[-131.37113953 51.37816620]
[-143.67048645 42.76058960]
[-154.86424255 32.74878693]
[-164.79527283 21.48330688]
[-173.32415771 9.12230206]
[-180.33116150 -4.16069889]
[-185.71794128 -18.17922401]
[-189.40884399 -32.73647308]
[-191.35208130 -47.62808990]
[-191.52035522 -62.64501572]
[-189.91130066 -77.57643890]
[-186.54751587 -92.21273804]
[-181.47622681 -106.34844971]
[-174.76863098 -119.78513336]
[-166.51887512 -132.33415222]
[-156.84277344 -143.81933594]
[-145.87617493 -154.07945251]
[-133.77302551 -162.97047424]
[-120.70324707 -170.36758423]
[-106.85030365 -176.16693115]
[-92.40868378 -180.28709412]
[-77.58110809 -182.67024231]
[-62.57574081 -183.28292847]
[-47.60323715 -182.11653137]
[-32.87378311 -179.18743896]
[-18.59416008 -174.53677368]
[-4.96483040 -168.22981262]
[7.82287169 -160.35510254]
[19.58942604 -151.02319336]
[30.16964912 -140.36508179]
[39.41501236 -128.53041077]
[47.19572449 -115.68529510]
[53.40255356 -102.01007843]
[57.94836807 -87.69673157]
[60.76935196 -72.94618988]
[61.82590485 -57.96553421]
[61.10318756 -42.96506882]
[58.61135483 -28.15537071]
[54.38538361 -13.74435043]
[48.48460007 0.06568611]
[40.99184036 13.08086681]
[32.01229095 25.11847878]
[42.89111710 35.44568253]
[53.76994324 45.77288818]
[64.64876556 56.10009384]
[75.52759552 66.42729950]
[86.40641785 76.75450134]
[95.05093384 70.92950439]
[106.11260986 68.53919220]
[118.16160583 70.53862000]
[129.41313171 77.27410126]
[137.98719788 88.36112976]
[152.11199951 83.31237793]
[166.23680115 78.26361847]
[173.05342102 64.25749207]
[187.44990540 59.33855057]
[200.76058960 65.92346954]
[214.88539124 60.87471390]
[229.01019287 55.82595444]
[231.08334351 40.66150284]
[239.97572327 28.20421410]
[253.64395142 21.31668472]
[268.94717407 21.58161926]
[282.36880493 28.93813896]
[290.82464600 41.69576645]
[292.37164307 56.92289352]
[286.65426636 71.12043762]
[274.98635864 81.02590942]
[260.04910278 84.36309814]
[245.27497864 80.36515045]
[234.05895996 69.95075989]
[219.93415833 74.99951172]
[205.80934143 80.04827118]
[199.68867493 93.57872009]
[185.43603516 98.90008545]
[171.28556824 92.38842010]
[157.16075134 97.43717957]
[143.03594971 102.48593140]
[142.41197205 117.47295380]
[156.06822205 123.67835999]
[169.72445679 129.88375854]
[185.98503113 127.75637817]
[195.74153137 140.93753052]
[188.95730591 155.86758423]
[172.61138916 157.18777466]
[163.51905823 143.54000854]
[149.86280823 137.33459473]
[136.20657349 131.12919617]
[123.51164246 139.11911011]
[123.19958496 154.11585999]
[123.04354858 169.11505127]
[123.04354858 184.11505127]
[123.04354858 199.11505127]
[123.04354858 214.11505127]
[123.04354858 229.11505127]
[123.04354858 244.11505127]
[123.04354858 259.11505127]
[123.04354858 274.11505127]
[123.04354858 289.11505127]
[123.04354858 304.11505127]
[137.58343506 308.17636108]
[150.48782349 316.01086426]
[160.79910278 327.03720093]
[167.75212097 340.43713379]
[170.83091736 355.21627808]
[169.80703735 370.27798462]
[164.75642395 384.50448608]
[156.05390930 396.84014893]
[144.34524536 406.36956787]
[130.49929810 412.38562012]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[22 130]
[23 129]
[25 87]
[26 86]
[27 85]
[28 84]
[29 83]
[30 82]
[92 118]
[93 117]
[94 116]
[97 113]
[98 112]
[99 111]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
