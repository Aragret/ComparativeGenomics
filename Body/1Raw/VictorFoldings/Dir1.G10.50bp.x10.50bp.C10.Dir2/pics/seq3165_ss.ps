%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CACACCCACCGGGGGGGGGGCAAGAACAGGGUUUGUUAAGAUGGCAGAGCCCGGUAAUCGCAUAAAACUUxxxxxxxxxxUCACAGCCCUAUACUCCCUCUACAUAUUUACCACAACACAAUGGGGCUCACCCCCCCCCCCUCACCCACC\
) } def
/len { sequence length } bind def

/coor [
[79.30463409 372.27047729]
[65.45869446 366.25445557]
[53.75003433 356.72503662]
[45.04751205 344.38937378]
[39.99691010 330.16284180]
[38.97301865 315.10116577]
[42.05181503 300.32202148]
[49.00483704 286.92208862]
[59.31612396 275.89575195]
[72.22050476 268.06124878]
[86.76039124 263.99993896]
[86.76039124 248.99993896]
[86.76039124 233.99993896]
[86.76039124 218.99993896]
[86.76039124 203.99993896]
[86.76039124 188.99993896]
[86.76039124 173.99993896]
[86.76039124 158.99993896]
[86.76039124 143.99993896]
[86.76039124 128.99993896]
[74.96375275 119.73498535]
[60.39104843 123.28974915]
[51.23760605 139.81892395]
[33.23354340 144.39616394]
[17.83312607 134.58676147]
[3.42091060 138.74464417]
[-10.99130535 142.90252686]
[-25.40352249 147.06042480]
[-34.38613892 160.35298157]
[-50.38996506 161.47416687]
[-61.13823700 149.56391907]
[-58.38579559 133.75874329]
[-44.24408340 126.18302155]
[-29.56140900 132.64820862]
[-15.14919281 128.49031067]
[-0.73697680 124.33242798]
[13.67523956 120.17454529]
[16.92561913 109.15975189]
[25.19562149 101.01882172]
[36.49192810 97.87760162]
[48.01132965 100.63662720]
[56.83628464 108.71704102]
[71.40898895 105.16228485]
[74.00083923 91.93998718]
[81.95001221 82.14876556]
[92.77713776 77.58191681]
[103.62229156 78.58473206]
[111.07720184 65.56842041]
[118.53211212 52.55211258]
[125.98702240 39.53580093]
[133.44194031 26.51949310]
[140.89685059 13.50318336]
[141.33602905 -29.93211746]
[145.64361572 -44.30030060]
[149.95120239 -58.66848755]
[154.25878906 -73.03666687]
[158.56637573 -87.40485382]
[144.80473328 -93.41937256]
[131.86840820 -101.04885864]
[119.94606781 -110.18205261]
[109.21157837 -120.68576050]
[99.82146454 -132.40681458]
[91.91266632 -145.17428589]
[85.60052490 -158.80198669]
[80.97708130 -173.09118652]
[78.10977173 -187.83349609]
[77.04039001 -202.81394958]
[77.78454590 -217.81407166]
[80.33138275 -232.61511230]
[84.64376068 -247.00125122]
[90.65879822 -260.76266479]
[98.28876495 -273.69869995]
[107.42240906 -285.62069702]
[117.92652130 -296.35479736]
[129.64791870 -305.74447632]
[142.41569519 -313.65280151]
[156.04362488 -319.96441650]
[170.33299255 -324.58734131]
[185.07542419 -327.45410156]
[200.05590820 -328.52291870]
[215.05599976 -327.77819824]
[229.85694885 -325.23080444]
[244.24291992 -320.91787720]
[258.00411987 -314.90234375]
[270.93984985 -307.27188110]
[282.86151123 -298.13781738]
[293.59521484 -287.63330078]
[302.98446655 -275.91152954]
[310.89230347 -263.14346313]
[317.20343018 -249.51528931]
[321.82580566 -235.22575378]
[324.69201660 -220.48321533]
[325.76028442 -205.50270081]
[325.01498413 -190.50262451]
[322.46704102 -175.70178223]
[318.15359497 -161.31596375]
[312.13754272 -147.55499268]
[304.50659180 -134.61953735]
[295.37207031 -122.69821930]
[284.86715698 -111.96490479]
[273.14505005 -102.57610321]
[260.37667847 -94.66874695]
[246.74827576 -88.35813141]
[232.45855713 -83.73628998]
[217.71592712 -80.87062836]
[202.73535156 -79.80293274]
[187.73532104 -80.54877472]
[172.93455505 -83.09726715]
[168.62696838 -68.72908783]
[164.31938171 -54.36090088]
[160.01181030 -39.99271774]
[155.70422363 -25.62453270]
[163.29446411 -12.68590546]
[170.88403320 0.25157896]
[185.52754211 3.50240469]
[198.72291565 -5.19573450]
[214.18693542 -1.93391478]
[222.74508667 11.35268497]
[219.31994629 26.78135872]
[205.94360352 35.19855118]
[190.55200195 31.61048889]
[182.27671814 18.14590645]
[167.63320923 14.89508057]
[153.91316223 20.95809364]
[146.45825195 33.97440338]
[139.00334167 46.99071121]
[131.54843140 60.00702286]
[124.09351349 73.02333069]
[116.63860321 86.03964233]
[123.32230377 110.02690125]
[101.76039124 128.99993896]
[101.76039124 143.99993896]
[101.76039124 158.99993896]
[101.76039124 173.99993896]
[101.76039124 188.99993896]
[101.76039124 203.99993896]
[101.76039124 218.99993896]
[101.76039124 233.99993896]
[101.76039124 248.99993896]
[101.76039124 263.99993896]
[116.30027771 268.06124878]
[129.20465088 275.89575195]
[139.51594543 286.92208862]
[146.46896362 300.32202148]
[149.54776001 315.10116577]
[148.52386475 330.16284180]
[143.47326660 344.38937378]
[134.77075195 356.72503662]
[123.06208038 366.25445557]
[109.21614838 372.27047729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 43]
[22 42]
[25 37]
[26 36]
[27 35]
[28 34]
[47 129]
[48 128]
[49 127]
[50 126]
[51 125]
[52 124]
[53 112]
[54 111]
[55 110]
[56 109]
[57 108]
[114 123]
[115 122]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
