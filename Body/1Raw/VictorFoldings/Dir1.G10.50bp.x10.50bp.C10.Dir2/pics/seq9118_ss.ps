%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUUCAAGCGGGGGGGGGGACUGCUUAUUACAAUUUUACUGGGUCUCUAUUUUACCCUCCUACAAGCCUxxxxxxxxxxAUCCUACACUCCAACUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCCCCCCCCCCCUAAUCCAAGC\
) } def
/len { sequence length } bind def

/coor [
[84.52808380 419.64355469]
[71.30789185 412.37109375]
[60.42108536 401.92407227]
[52.60995483 389.01483154]
[48.40707397 374.52352905]
[48.09899902 359.43817139]
[51.70674133 344.78735352]
[58.98431396 331.56997681]
[69.43552399 320.68719482]
[82.34778595 312.88107300]
[96.84072113 308.68377686]
[96.52866364 293.68701172]
[96.21660614 278.69027710]
[95.90454865 263.69351196]
[95.59249878 248.69676208]
[95.28044128 233.69999695]
[94.96838379 218.70324707]
[94.65632629 203.70649719]
[94.34426880 188.70974731]
[94.03221130 173.71298218]
[78.91045380 170.88336182]
[64.70132446 164.98632812]
[52.01970291 156.27708435]
[41.41437531 145.13252258]
[33.34427643 132.03488159]
[28.15863037 117.55097961]
[26.08184052 102.30757904]
[27.20377541 86.96431732]
[31.47588730 72.18515778]
[38.71330643 58.60966110]
[48.60283661 46.82527924]
[60.71652222 37.34197998]
[74.53015900 30.57013321]
[89.44596863 26.80278969]
[88.82199097 11.81577301]
[88.19801331 -3.17124343]
[87.57403564 -18.15826035]
[73.38098145 -27.30206680]
[67.47080994 -42.94020844]
[71.97820282 -58.86658096]
[84.94467926 -68.88534546]
[84.00905609 -83.85614014]
[83.07342529 -98.82693481]
[82.13779449 -113.79772186]
[81.20217133 -128.76850891]
[80.26654053 -143.73930359]
[79.33090973 -158.71009827]
[78.39527893 -173.68089294]
[63.40101242 -174.52246094]
[48.61152649 -177.13157654]
[34.23444748 -181.47161865]
[20.47160912 -187.48165894]
[7.51621437 -195.07731628]
[-4.44985962 -204.15197754]
[-15.25862885 -214.57823181]
[-24.75835419 -226.20973206]
[-32.81567383 -238.88316345]
[-39.31747818 -252.42062378]
[-44.17248917 -266.63208008]
[-47.31255341 -281.31799316]
[-48.69358444 -296.27221680]
[-48.29619980 -311.28485107]
[-46.12597275 -326.14508057]
[-42.21337509 -340.64431763]
[-36.61333466 -354.57901001]
[-29.40445900 -367.75354004]
[-20.68795586 -379.98297119]
[-10.58619118 -391.09561157]
[0.75902349 -400.93545532]
[13.18841934 -409.36434937]
[26.52750587 -416.26400757]
[40.58902359 -421.53753662]
[55.17557144 -425.11090088]
[70.08237457 -426.93395996]
[85.10017395 -426.98110962]
[100.01812744 -425.25167847]
[114.62682343 -421.76995850]
[128.72117615 -416.58480835]
[142.10331726 -409.76904297]
[154.58537292 -401.41833496]
[165.99214172 -391.64990234]
[176.16348267 -380.60092163]
[184.95658875 -368.42645264]
[192.24803162 -355.29742432]
[197.93545532 -341.39816284]
[201.93899536 -326.92376709]
[204.20246887 -312.07745361]
[204.69410706 -297.06762695]
[203.40698242 -282.10504150]
[200.35917664 -267.39968872]
[195.59349060 -253.15803528]
[189.17680359 -239.58001709]
[181.19920349 -226.85624695]
[171.77268982 -215.16534424]
[161.02958679 -204.67143250]
[149.12072754 -195.52183533]
[136.21327209 -187.84497070]
[122.48843384 -181.74865723]
[108.13888550 -177.31843567]
[93.36607361 -174.61651611]
[94.30170441 -159.64572144]
[95.23732758 -144.67494202]
[96.17295837 -129.70414734]
[97.10858917 -114.73335266]
[98.04421997 -99.76255798]
[98.97984314 -84.79177094]
[99.91547394 -69.82097626]
[111.82888794 -63.71635056]
[119.21568298 -52.42268753]
[120.04758453 -38.84482193]
[113.99910736 -26.53917503]
[102.56105804 -18.78223610]
[103.18503571 -3.79522085]
[103.80901337 11.19179535]
[104.43298340 26.17881203]
[118.81626129 28.47959900]
[132.46957397 33.55493927]
[144.86326599 41.20794296]
[155.51655579 51.14171600]
[164.01612854 62.97089005]
[170.03227234 76.23656464]
[173.33158875 90.42411804]
[173.78608704 104.98316193]
[171.37814331 119.34887695]
[166.20117188 132.96398926]
[158.45599365 145.30029297]
[148.44308472 155.87921143]
[136.55087280 164.29037476]
[123.24072266 170.20745850]
[109.02896881 173.40093994]
[109.34102631 188.39768982]
[109.65308380 203.39443970]
[109.96513367 218.39118958]
[110.27719116 233.38795471]
[110.58924866 248.38470459]
[110.90130615 263.38146973]
[111.21336365 278.37820435]
[111.52542114 293.37496948]
[111.83747101 308.37170410]
[126.49246979 311.96249390]
[139.71827698 319.22473145]
[150.61314392 329.66333008]
[158.43423462 342.56655884]
[162.64831543 357.05462646]
[162.96803284 372.13970947]
[159.37161255 386.79330444]
[152.10424805 400.01632690]
[141.66143799 410.90716553]
[128.75521851 418.72326660]
[114.26551819 422.93173218]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[34 115]
[35 114]
[36 113]
[37 112]
[41 107]
[42 106]
[43 105]
[44 104]
[45 103]
[46 102]
[47 101]
[48 100]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
