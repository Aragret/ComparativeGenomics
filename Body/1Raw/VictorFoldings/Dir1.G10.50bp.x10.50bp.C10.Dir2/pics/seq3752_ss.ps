%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:37 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAACUCAAACGGGGGGGGGGUACGCCCUGAUCGGCGCACUGCGAGCAGUAGCCCAAACAAUCUCAUAUGAxxxxxxxxxxUCUUCUUACUCAUCCGCUUCCACCCCCUAGCAGAAAAUAGCCCACUAAUCCCCCCCCCCCCAAACUCUAAC\
) } def
/len { sequence length } bind def

/coor [
[83.90811920 396.42611694]
[70.41924286 389.69458008]
[58.93374252 379.93002319]
[50.11937332 367.70013428]
[44.48859024 353.71591187]
[42.36876297 338.79046631]
[43.88312912 323.79144287]
[48.94365311 309.59094238]
[57.25611877 297.01452637]
[68.33724976 286.79336548]
[81.54280853 279.52172852]
[96.10502625 275.62234497]
[95.79705048 260.62551880]
[95.48907471 245.62867737]
[95.18109894 230.63183594]
[94.87311554 215.63500977]
[94.56513977 200.63816833]
[94.25716400 185.64132690]
[93.94918823 170.64448547]
[93.64120483 155.64764404]
[93.33322906 140.65081787]
[81.53324127 136.82272339]
[71.40799713 129.65521240]
[63.87573624 119.79828644]
[49.62904739 124.49208832]
[35.38235474 129.18588257]
[21.13566208 133.87968445]
[14.24322987 148.10185242]
[-0.71423423 153.20574951]
[-14.86273193 146.16334534]
[-19.80821037 131.15275574]
[-12.61660576 117.07950592]
[2.44543123 112.29299927]
[16.44186020 119.63299561]
[30.68855286 114.93919373]
[44.93524551 110.24539185]
[59.18193817 105.55159760]
[61.73395157 84.74732971]
[74.19290924 67.89192200]
[93.33322906 59.34918594]
[93.64120483 44.35234833]
[93.94918823 29.35551071]
[94.25716400 14.35867214]
[86.80484009 0.40254813]
[94.80181885 -12.16317940]
[95.10980225 -27.16001701]
[82.77616882 -39.52403259]
[83.16190338 -56.64661407]
[95.54306030 -67.98725128]
[95.54306030 -82.98725128]
[95.08113861 -97.98013306]
[94.15772247 -112.95168304]
[93.23430634 -127.92323303]
[78.25504303 -129.09272766]
[63.58433151 -132.33561707]
[49.50774765 -137.58880615]
[36.29929352 -144.75000000]
[24.21607208 -153.67984009]
[13.49329472 -164.20448303]
[4.33967781 -176.11907959]
[-3.06659865 -189.19168091]
[-8.58137035 -203.16786194]
[-12.09729004 -217.77554321]
[-13.54591846 -232.73039246]
[-12.89905930 -247.74131775]
[-10.16930389 -262.51611328]
[-5.40978622 -276.76718140]
[1.28684747 -290.21713257]
[9.79024506 -302.60415649]
[19.93488693 -313.68713379]
[31.52330208 -323.25033569]
[44.32991791 -331.10760498]
[58.10545731 -337.10601807]
[72.58176422 -341.12875366]
[87.47705841 -343.09759521]
[102.50140381 -342.97415161]
[117.36234283 -340.76083374]
[131.77059937 -336.50076294]
[145.44570923 -330.27682495]
[158.12150574 -322.21020508]
[169.55122375 -312.45788574]
[179.51239014 -301.20971680]
[187.81111145 -288.68463135]
[194.28584290 -275.12646484]
[198.81054688 -260.79913330]
[201.29718018 -245.98146057]
[201.69729614 -230.96194458]
[200.00314331 -216.03291321]
[196.24768066 -201.48497009]
[190.50401306 -187.60130310]
[182.88394165 -174.65214539]
[173.53578186 -162.88957214]
[162.64152527 -152.54252625]
[150.41320801 -143.81243896]
[137.08886719 -136.86923218]
[122.92787170 -131.84805298]
[108.20585632 -128.84664917]
[109.12927246 -113.87509918]
[110.05268860 -98.90354919]
[112.49755096 -96.28250885]
[113.76237488 -92.32399750]
[113.22216034 -87.61084747]
[110.54306030 -82.98725128]
[110.54306030 -67.98725128]
[120.86291504 -60.21210098]
[124.86164856 -47.72055054]
[120.85827637 -35.02589798]
[110.10663605 -26.85203934]
[109.79866028 -11.85520267]
[117.27301025 1.02824783]
[109.25400543 14.66664982]
[108.94602203 29.66348839]
[108.63804626 44.66032791]
[108.33007050 59.65716553]
[120.19271088 64.09472656]
[130.14649963 71.92646790]
[137.25048828 82.41205597]
[140.83311462 94.56026459]
[140.55572510 107.22270203]
[154.59770203 112.49744415]
[168.63967896 117.77218628]
[184.72077942 114.55811310]
[195.34005737 127.05463409]
[189.57330322 142.40640259]
[173.35287476 144.82083130]
[163.36494446 131.81416321]
[149.32296753 126.53942108]
[135.28099060 121.26467896]
[128.18339539 130.04380798]
[118.96907043 136.56649780]
[108.33007050 140.34283447]
[108.63804626 155.33967590]
[108.94602203 170.33651733]
[109.25400543 185.33334351]
[109.56198120 200.33018494]
[109.86995697 215.32702637]
[110.17793274 230.32386780]
[110.48590851 245.32070923]
[110.79389191 260.31753540]
[111.10186768 275.31439209]
[125.81190491 278.61260986]
[139.30485535 285.33596802]
[150.79627991 295.09356689]
[159.61805725 307.31811523]
[165.25732422 321.29888916]
[167.38619995 336.22308350]
[165.88092041 351.22299194]
[160.82901001 365.42657471]
[152.52416992 378.00802612]
[141.44923401 388.23590088]
[128.24809265 395.51553345]
[113.68823242 399.42373657]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[24 37]
[25 36]
[26 35]
[27 34]
[40 114]
[41 113]
[42 112]
[43 111]
[45 109]
[46 108]
[49 104]
[50 103]
[51 99]
[52 98]
[53 97]
[119 128]
[120 127]
[121 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
