%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:02 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCACAGCCCAGGGGGGGGGGUGCAUUUGUAAUAAUCUUCUUCAUAGUAAUACCCAUCAUAAUCGGAGGCUxxxxxxxxxxAAUUUACACUCACAACACCCUAGGCUCACUAAACAUUCUACUACUCACUCCCCCCCCCCCUCACUGCCCA\
) } def
/len { sequence length } bind def

/coor [
[83.29129791 389.49685669]
[70.73307800 381.14569092]
[60.64685440 369.93325806]
[53.66666031 356.56436157]
[50.23127365 341.87936401]
[50.55665207 326.80139160]
[54.62233734 312.27828979]
[62.17275620 299.22293091]
[72.73328400 288.45605469]
[85.64008331 280.65441895]
[100.08181000 276.30844116]
[99.45783234 261.32144165]
[98.83385468 246.33442688]
[98.20987701 231.34741211]
[97.58589935 216.36039734]
[96.96192169 201.37338257]
[96.33794403 186.38635254]
[95.71396637 171.39933777]
[95.08998871 156.41232300]
[94.31014252 141.43261719]
[93.37451935 126.46182251]
[92.43888855 111.49102783]
[85.48303986 124.78073120]
[75.37887573 135.86701965]
[62.78953552 144.02229309]
[48.54127121 148.71131897]
[33.56920624 149.62634277]
[18.85597038 146.70732117]
[5.36720610 140.14582825]
[-6.01180840 130.37249756]
[-14.53425884 118.02876282]
[-19.64080811 103.92475128]
[-20.99631310 88.98612213]
[-18.51180649 74.19331360]
[-12.35035038 60.51718140]
[-2.91632676 48.85531235]
[9.17110252 39.97307968]
[23.11862755 34.45343018]
[38.01086426 32.65862656]
[52.87041855 34.70646286]
[66.72204590 40.46253204]
[78.65666199 49.54906464]
[87.89096832 61.36970520]
[93.81893158 75.14865112]
[96.05158234 89.98641968]
[101.82785034 76.14320374]
[107.60412598 62.29998398]
[113.38039398 48.45676804]
[101.37770081 40.64020920]
[90.93518829 30.84150505]
[82.37596130 19.36556053]
[75.96452332 6.56913519]
[71.89865875 -7.15022850]
[70.30329132 -21.36656570]
[71.22665405 -35.63871002]
[74.63885498 -49.52399063]
[80.43280029 -62.59194946]
[88.42761230 -74.43769836]
[98.37422180 -84.69445801]
[109.96315002 -93.04492188]
[122.83415985 -99.23105621]
[136.58740234 -103.06208038]
[150.79588318 -104.42037201]
[165.01870728 -103.26504517]
[178.81474304 -99.63320160]
[185.16188049 -113.22415161]
[191.50900269 -126.81510162]
[190.33795166 -142.59291077]
[202.73388672 -150.85064697]
[209.08100891 -164.44160461]
[196.89678955 -173.27003479]
[186.60374451 -184.24499512]
[178.57395935 -196.96974182]
[173.09771729 -210.98426819]
[170.37295532 -225.78198242]
[170.49819946 -240.82794189]
[173.46890259 -255.57824707]
[179.17768860 -269.49966431]
[187.41816711 -282.08898926]
[197.89248657 -292.89108276]
[210.22196960 -301.51547241]
[223.96093750 -307.65039062]
[238.61273193 -311.07406616]
[253.64768982 -311.66275024]
[268.52230835 -309.39511108]
[282.69888306 -304.35317993]
[295.66494751 -296.71920776]
[306.95178223 -286.76913452]
[316.15136719 -274.86264038]
[322.93115234 -261.43017578]
[327.04602051 -246.95730591]
[328.34729004 -231.96720886]
[326.78784180 -217.00175476]
[322.42410278 -202.60194397]
[315.41381836 -189.28834534]
[306.01037598 -177.54219055]
[294.55374146 -167.78813171]
[281.45800781 -160.37876892]
[267.19665527 -155.58193970]
[252.28514099 -153.57102966]
[237.26255798 -154.41876221]
[222.67196655 -158.09446716]
[216.32482910 -144.50350952]
[217.94987488 -129.69783020]
[205.09996033 -120.46797180]
[198.75282288 -106.87702179]
[192.40570068 -93.28607178]
[205.14701843 -84.08659363]
[215.87510681 -72.59657288]
[224.18484497 -59.24735260]
[229.76196289 -44.54053879]
[232.39486694 -29.02914619]
[231.98275757 -13.29679871]
[228.53941345 2.06422377]
[222.19274902 16.47529030]
[213.18013000 29.39320946]
[201.83938599 40.33070374]
[188.59623718 48.87479782]
[173.94827271 54.70239639]
[158.44627380 57.59251785]
[142.67346191 57.43466187]
[127.22361755 54.23303986]
[121.44734192 68.07625580]
[115.67106628 81.91947937]
[109.89479828 95.76269531]
[107.40967560 110.55539703]
[108.34530640 125.52619171]
[109.28093719 140.49697876]
[112.95978546 148.93013000]
[110.07700348 155.78834534]
[110.70098114 170.77536011]
[111.32495880 185.76237488]
[111.94893646 200.74940491]
[112.57291412 215.73641968]
[113.19689178 230.72343445]
[113.82086945 245.71044922]
[114.44484711 260.69744873]
[115.06882477 275.68447876]
[129.82182312 278.81491089]
[143.33245850 285.51666260]
[154.75144958 295.36846924]
[163.36096191 307.75100708]
[168.61981201 321.88589478]
[170.19741821 336.88461304]
[167.99461365 351.80435181]
[162.14985657 365.70724487]
[153.03057861 377.71929932]
[141.21000671 387.08544922]
[127.43119812 393.21694946]
[112.56029510 395.72833252]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 128]
[21 127]
[22 126]
[45 125]
[46 124]
[47 123]
[48 122]
[65 107]
[66 106]
[67 105]
[69 103]
[70 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
