%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACUCCUAGGGGGGGGGGAACACAUCCGUAUUACUCGCAUCAGGAGUAUCAAUCACCUGAGCUCACCAxxxxxxxxxxUCAUGAGACCCACAACAAAUAGCCCUUCUAAACGCUAAUCCAAGCCUCACCCCCCCCCCCCCCACUACUA\
) } def
/len { sequence length } bind def

/coor [
[83.73132324 589.49084473]
[69.88538361 583.47479248]
[58.17672348 573.94537354]
[49.47420120 561.60974121]
[44.42359924 547.38323975]
[43.39970779 532.32153320]
[46.47850800 517.54235840]
[53.43152618 504.14245605]
[63.74281311 493.11611938]
[76.64719391 485.28161621]
[91.18708038 481.22027588]
[91.18708038 466.22027588]
[91.18708038 451.22027588]
[91.18708038 436.22027588]
[91.18708038 421.22027588]
[91.18708038 406.22027588]
[91.18708038 391.22027588]
[91.18708038 376.22027588]
[91.18708038 361.22027588]
[91.18708038 346.22027588]
[76.64468384 342.66961670]
[63.36673355 335.73739624]
[52.12705612 325.82266235]
[43.58187103 313.49856567]
[38.23147202 299.47897339]
[36.39092255 284.57727051]
[38.17152023 269.65914917]
[43.47407150 255.59230042]
[51.99441147 243.19592285]
[63.24084473 233.19306946]
[76.56251526 226.16845703]
[91.18708038 222.53421021]
[91.18708038 207.53421021]
[91.18708038 192.53421021]
[91.18708038 177.53421021]
[82.83852386 168.72462463]
[82.75409698 156.18620300]
[91.52717590 146.67375183]
[91.83923340 131.67700195]
[76.25735474 122.50148773]
[67.93087006 106.44987488]
[69.40421295 88.42726898]
[56.96477509 80.04512787]
[44.52533340 71.66298676]
[32.08589554 63.28084183]
[19.64645386 54.89870071]
[6.20502043 62.21897507]
[-9.09885406 62.44261932]
[-22.74845123 55.51823425]
[-31.60719299 43.03699875]
[-33.63940430 27.86700439]
[-28.37810135 13.49420834]
[-17.03229141 3.22137237]
[-2.20915627 -0.59088045]
[12.68505383 2.93347740]
[24.22775841 12.98457432]
[29.76652908 27.25274277]
[28.02859688 42.45925903]
[40.46803665 50.84140396]
[52.90747833 59.22354507]
[65.34691620 67.60569000]
[77.78636169 75.98783112]
[84.86341858 65.53012085]
[96.55303955 57.55727005]
[96.55303955 42.55727005]
[96.55303955 27.55727005]
[96.55303955 12.55727100]
[82.30036926 7.39614725]
[70.67444611 -2.33080316]
[63.07914352 -15.44900417]
[60.43163681 -30.37437057]
[63.05163193 -45.30458832]
[70.62274170 -58.43676376]
[82.23072815 -68.18512726]
[96.47386169 -73.37250519]
[111.63222504 -73.37250519]
[125.87535858 -68.18512726]
[137.48333740 -58.43676376]
[145.05445862 -45.30458832]
[147.67445374 -30.37437057]
[145.02694702 -15.44900417]
[137.43164062 -2.33080316]
[125.80570984 7.39614725]
[111.55303955 12.55727100]
[111.55303955 27.55727005]
[111.55303955 42.55727005]
[111.55303955 57.55727005]
[117.68422699 61.87682724]
[124.87561035 48.71308899]
[132.06698608 35.54935074]
[139.25837708 22.38561249]
[144.33218384 8.26979160]
[158.63549805 3.75147986]
[170.89756775 12.39102745]
[171.45608521 27.38062668]
[159.87213135 36.90847015]
[149.89695740 48.11096191]
[139.92176819 59.31345367]
[129.94659424 70.51594543]
[136.07777405 74.83550262]
[150.20257568 69.78674316]
[164.32739258 64.73799133]
[172.46337891 50.91102219]
[188.36611938 48.79376984]
[199.83636475 60.01040649]
[198.07513428 75.95649719]
[184.43348694 84.39955139]
[169.37614441 78.86279297]
[155.25134277 83.91155243]
[141.12654114 88.96030426]
[137.77716064 110.80526733]
[124.57621002 126.30841064]
[106.83599091 131.98904419]
[106.52393341 146.98580933]
[115.77819061 162.87097168]
[106.18708038 177.53421021]
[106.18708038 192.53421021]
[106.18708038 207.53421021]
[106.18708038 222.53421021]
[120.81164551 226.16845703]
[134.13331604 233.19306946]
[145.37974548 243.19592285]
[153.90008545 255.59230042]
[159.20263672 269.65914917]
[160.98323059 284.57727051]
[159.14268494 299.47897339]
[153.79228210 313.49856567]
[145.24710083 325.82266235]
[134.00743103 335.73739624]
[120.72947693 342.66961670]
[106.18708038 346.22027588]
[106.18708038 361.22027588]
[106.18708038 376.22027588]
[106.18708038 391.22027588]
[106.18708038 406.22027588]
[106.18708038 421.22027588]
[106.18708038 436.22027588]
[106.18708038 451.22027588]
[106.18708038 466.22027588]
[106.18708038 481.22027588]
[120.72696686 485.28161621]
[133.63134766 493.11611938]
[143.94262695 504.14245605]
[150.89566040 517.54235840]
[153.97445679 532.32153320]
[152.95056152 547.38323975]
[147.89996338 561.60974121]
[139.19743347 573.94537354]
[127.48877716 583.47479248]
[113.64283752 589.49084473]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[32 119]
[33 118]
[34 117]
[35 116]
[38 114]
[39 113]
[42 62]
[43 61]
[44 60]
[45 59]
[46 58]
[64 87]
[65 86]
[66 85]
[67 84]
[100 110]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
