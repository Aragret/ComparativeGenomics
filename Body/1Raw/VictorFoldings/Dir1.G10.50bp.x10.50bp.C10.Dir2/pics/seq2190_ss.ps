%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGAUUUAUAGGGGGGGGGGGGUAGAGGCGACAAACCUACCGAGCCUGGUGAUAGCUGGUUGUCCAAGAUAxxxxxxxxxxAUAUGAAAAUCACCUCGGAGCUGGUAAAAAGAGGCCUAACCCCUGUCUUUCCCCCCCCCCAGAUUUACAG\
) } def
/len { sequence length } bind def

/coor [
[83.26718903 355.57025146]
[70.39391327 347.66738892]
[60.26961899 336.45687866]
[53.71503830 322.84753418]
[51.26151657 307.94259644]
[53.10795212 292.95034790]
[59.10466766 279.08615112]
[68.76552582 267.47390747]
[81.30737305 259.05496216]
[95.71349335 254.51179504]
[95.40144348 239.51504517]
[95.08938599 224.51828003]
[94.77732849 209.52153015]
[94.46527100 194.52478027]
[94.15321350 179.52803040]
[93.84115601 164.53126526]
[93.52910614 149.53451538]
[93.21704865 134.53776550]
[92.90499115 119.54100800]
[80.29386139 111.41946411]
[66.51148224 117.33943176]
[52.72909927 123.25939178]
[51.60588455 138.52363586]
[43.50783920 151.51132202]
[30.29583549 159.23800659]
[15.00589275 159.92813110]
[1.15153098 153.42311096]
[-8.08362103 141.21775818]
[-10.57739162 126.11677551]
[-5.75673103 111.59025574]
[5.27060747 100.97628021]
[19.97062302 96.71387482]
[34.96535873 99.78250122]
[46.80913544 109.47701263]
[60.59151840 103.55704498]
[74.37390137 97.63708496]
[81.55641174 84.46850586]
[79.07128906 69.67579651]
[76.58617401 54.88308716]
[74.10105133 40.09038162]
[69.56639862 32.08483505]
[71.72145081 24.96434212]
[69.54461670 10.12313557]
[67.36777496 -4.71806955]
[65.03667450 -19.53582764]
[62.55155563 -34.32853317]
[59.75923157 -49.06634140]
[56.66090775 -63.74286652]
[53.56258774 -78.41939545]
[50.46426392 -93.09591675]
[47.36594391 -107.77244568]
[44.26762009 -122.44896698]
[38.34765625 -136.23135376]
[24.14616776 -143.20474243]
[23.29582596 -158.07505798]
[14.78473663 -170.42663574]
[6.14562035 -182.68899536]
[-2.62058711 -194.86083984]
[-17.78806114 -201.09620667]
[-19.70335007 -217.38311768]
[-6.39616585 -226.96701050]
[8.44419861 -219.98878479]
[9.55124950 -203.62704468]
[18.31745720 -191.45521545]
[24.82067299 -187.84219360]
[27.13630867 -178.93772888]
[35.64739990 -166.58615112]
[49.24011612 -160.49621582]
[50.69923019 -144.74244690]
[49.89409637 -159.72080994]
[53.45870590 -174.29110718]
[61.08791351 -187.20603943]
[72.12861633 -197.36000061]
[85.63566589 -203.88375854]
[100.45279694 -206.21885681]
[115.31157684 -204.16540527]
[128.94001770 -197.89916992]
[140.17144775 -187.95658875]
[148.04438782 -175.18878174]
[151.88488770 -160.68876648]
[151.36418152 -145.69781494]
[146.52684021 -131.49920654]
[137.78695679 -119.30846405]
[125.89272308 -110.16914368]
[111.86234283 -104.86363220]
[96.89688873 -103.84611511]
[82.27749634 -107.20368958]
[69.25565338 -114.64893341]
[58.94414520 -125.54728699]
[62.04246902 -110.87076569]
[65.14079285 -96.19423676]
[68.23911285 -81.51771545]
[71.33743286 -66.84118652]
[74.43575287 -52.16466141]
[77.93141174 -48.82461929]
[79.32535553 -43.23103333]
[77.34426117 -36.81365204]
[79.82937622 -22.02094650]
[84.06659698 -15.90607357]
[82.20898438 -6.89490652]
[84.38581848 7.94629908]
[86.56265259 22.78750420]
[88.89376068 37.60526276]
[91.37887573 52.39796829]
[93.86399841 67.19067383]
[96.34911346 81.98338318]
[111.59510803 82.48097992]
[123.15612793 95.26908875]
[137.72883606 98.82385254]
[152.30152893 102.37860870]
[166.87423706 105.93337250]
[181.44694519 109.48813629]
[196.15490723 112.43361664]
[210.97265625 114.76472473]
[224.73611450 106.52174377]
[239.71102905 112.27776337]
[244.40991211 127.61725616]
[235.22819519 140.77307129]
[219.20930481 141.65319824]
[208.64155579 129.58247375]
[193.82379150 127.25137329]
[191.45028687 128.85566711]
[188.27819824 129.58494568]
[184.64941406 129.12249756]
[181.01667786 127.28559113]
[177.89218140 124.06083679]
[163.31947327 120.50607300]
[148.74678040 116.95131683]
[134.17407227 113.39655304]
[119.60137177 109.84178925]
[107.90174103 119.22895050]
[108.21379852 134.22570801]
[108.52585602 149.22245789]
[108.83791351 164.21920776]
[109.14997101 179.21597290]
[109.46202850 194.21272278]
[109.77407837 209.20947266]
[110.08613586 224.20622253]
[110.39819336 239.20298767]
[110.71025085 254.19973755]
[125.29289246 258.13967896]
[138.17410278 266.02963257]
[148.30964661 277.22994995]
[154.87789917 290.83270264]
[157.34638977 305.73516846]
[155.51501465 320.72924805]
[149.53224182 334.59948730]
[139.88304138 346.22143555]
[127.34966278 354.65298462]
[112.94811249 359.21060181]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 36]
[21 35]
[22 34]
[37 106]
[38 105]
[39 104]
[40 103]
[42 102]
[43 101]
[44 100]
[45 98]
[46 97]
[47 94]
[48 93]
[49 92]
[50 91]
[51 90]
[52 89]
[53 69]
[55 67]
[56 66]
[57 64]
[58 63]
[108 130]
[109 129]
[110 128]
[111 127]
[112 126]
[113 121]
[114 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
