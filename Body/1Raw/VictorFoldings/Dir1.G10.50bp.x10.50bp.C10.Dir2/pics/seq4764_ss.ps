%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:19 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCUAACCAAGGGGGGGGGGAAAAAUAAACCCUCGUUCCACAGAAGCUGCCAUCAAGUAUUUCCUCACGCxxxxxxxxxxCCUAGCCAUGUGAUUUCACUUCCACUCCAUAACGCUCCUCAUACUAGGCCCCCCCCCCCCUACUAACCAA\
) } def
/len { sequence length } bind def

/coor [
[94.22670746 579.25097656]
[81.66848755 570.89984131]
[71.58226013 559.68737793]
[64.60206604 546.31848145]
[61.16668320 531.63348389]
[61.49206161 516.55554199]
[65.55774689 502.03240967]
[73.10816193 488.97708130]
[83.66869354 478.21017456]
[96.57548523 470.40853882]
[111.01721954 466.06259155]
[110.39324188 451.07556152]
[109.76926422 436.08856201]
[109.14528656 421.10153198]
[108.52130890 406.11453247]
[107.89733124 391.12750244]
[107.27335358 376.14050293]
[106.64937592 361.15347290]
[106.02539825 346.16647339]
[105.40142059 331.17944336]
[90.21423340 328.69039917]
[75.86557770 323.11047363]
[62.97743988 314.67904663]
[52.10902786 303.75912476]
[43.73247910 290.82183838]
[38.21237183 276.42590332]
[35.78984070 261.19369507]
[36.57207108 245.78428650]
[40.52751923 230.86482239]
[47.48721695 217.08175659]
[57.15196228 205.03282166]
[69.10519409 195.24104309]
[82.83094788 188.13214111]
[97.73610687 184.01589966]
[96.80047607 169.04512024]
[95.86484528 154.07432556]
[94.92921448 139.10353088]
[78.44496918 133.01786804]
[66.24130249 120.37521362]
[60.74174881 103.68627930]
[63.03844833 86.26528168]
[72.67530060 71.57185364]
[87.73853302 62.52393723]
[85.87092590 47.64065552]
[84.00331116 32.75737762]
[82.13569641 17.87409592]
[77.93798828 9.68684292]
[80.38737488 2.66216135]
[78.82979584 -12.25675106]
[66.83808899 -22.19841576]
[65.47100067 -37.35050201]
[75.02275848 -48.72149658]
[73.46517944 -63.64040756]
[71.90760040 -78.55931854]
[70.35002136 -93.47823334]
[55.34546661 -94.46382904]
[40.72334290 -97.97119141]
[26.90436363 -103.89940643]
[14.28612328 -112.07791901]
[3.23167396 -122.27140045]
[-5.94092512 -134.18658447]
[-12.96776009 -147.48062134]
[-17.64665413 -161.77104187]
[-19.84298706 -176.64666748]
[-19.49356651 -191.67948914]
[-16.60844421 -206.43699646]
[-11.27063370 -220.49458313]
[-3.63371110 -233.44778442]
[6.08259201 -244.92391968]
[17.59871864 -254.59277344]
[30.58332825 -262.17617798]
[44.66282272 -267.45593262]
[59.43211365 -270.28012085]
[74.46625519 -270.56750488]
[89.33268738 -268.30978394]
[103.60366821 -263.57196045]
[116.86859894 -256.49032593]
[128.74581909 -247.26863098]
[138.89360046 -236.17219543]
[147.01995850 -223.52030945]
[152.89109802 -209.67698669]
[156.33808899 -195.04051208]
[157.26174927 -180.03202820]
[155.63551331 -165.08332825]
[151.50616455 -150.62454224]
[144.99250793 -137.07167053]
[136.28195190 -124.81465912]
[125.62513733 -114.20616150]
[113.32866669 -105.55141449]
[99.74633026 -99.09941101]
[85.26892853 -95.03581238]
[86.82651520 -80.11689758]
[88.38409424 -65.19799042]
[89.94167328 -50.27907562]
[101.63618469 -41.12625885]
[103.42831421 -26.01854897]
[93.74870300 -13.81433201]
[95.30628967 1.10458028]
[97.01897430 16.00648308]
[98.88658905 30.88976288]
[100.75420380 45.77304077]
[102.62181854 60.65632248]
[114.62626648 63.38209152]
[125.20518494 69.67678070]
[133.32749939 78.92688751]
[138.20159912 90.23085785]
[139.35243225 102.48696136]
[136.66781616 114.50068665]
[130.40942383 125.10111237]
[121.18721008 133.25509644]
[109.90000916 138.16790771]
[110.83563995 153.13868713]
[111.77126312 168.10948181]
[112.70689392 183.08027649]
[127.20656586 185.10925293]
[141.02241516 189.93971252]
[153.61895752 197.38233948]
[164.50831604 207.14665222]
[173.26921082 218.85223389]
[179.56321716 232.04367065]
[183.14784241 246.20817566]
[183.88586426 260.79559326]
[181.75059509 275.23968506]
[176.82684326 288.98025513]
[169.30751038 301.48468018]
[159.48609924 312.26870728]
[147.74516296 320.91513062]
[134.54153442 327.08999634]
[120.38843536 330.55545044]
[121.01241302 345.54248047]
[121.63639069 360.52951050]
[122.26036835 375.51651001]
[122.88434601 390.50354004]
[123.50832367 405.49053955]
[124.13230133 420.47756958]
[124.75627899 435.46456909]
[125.38025665 450.45159912]
[126.00423431 465.43859863]
[140.75723267 468.56906128]
[154.26786804 475.27081299]
[165.68685913 485.12258911]
[174.29637146 497.50512695]
[179.55520630 511.64001465]
[181.13281250 526.63873291]
[178.93000793 541.55847168]
[173.08526611 555.46136475]
[163.96598816 567.47344971]
[152.14541626 576.83959961]
[138.36660767 582.97106934]
[123.49570465 585.48248291]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[34 114]
[35 113]
[36 112]
[37 111]
[43 102]
[44 101]
[45 100]
[46 99]
[48 98]
[49 97]
[52 94]
[53 93]
[54 92]
[55 91]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
