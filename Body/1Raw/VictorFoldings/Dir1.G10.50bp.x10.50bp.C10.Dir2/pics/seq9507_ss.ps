%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUAGCCCUAGGGGGGGGGGAGUCUGGCCUAUGAGUGACUACAAAAAGGAUUAGACUGAACCGAAUUGGUxxxxxxxxxxCCUAUUCGCCUACACAAUUCUCCGAUCCGUCCCUAACAAACUAGGAGGCGCCCCCCCCCCUCCUUGCCCUA\
) } def
/len { sequence length } bind def

/coor [
[72.99197388 576.30712891]
[58.97003174 570.75415039]
[46.77007294 561.88781738]
[37.15900040 550.26550293]
[30.74097633 536.61779785]
[27.91943932 521.80261230]
[28.87175560 506.75122070]
[33.53805923 492.40979004]
[41.62502670 479.67984009]
[52.62430191 469.36157227]
[65.84445953 462.10357666]
[80.45447540 458.36215210]
[80.45447540 443.36215210]
[80.45447540 428.36215210]
[80.45447540 413.36215210]
[80.45447540 398.36215210]
[80.45447540 383.36215210]
[80.45447540 368.36215210]
[80.45447540 353.36215210]
[80.45447540 338.36215210]
[80.45447540 323.36215210]
[72.71717072 310.63488770]
[80.45447540 296.83471680]
[80.45447540 281.83471680]
[80.45447540 266.83471680]
[80.45447540 251.83471680]
[77.72626495 247.84646606]
[77.51673889 242.08938599]
[80.77510071 236.22204590]
[81.39092255 221.23469543]
[82.00675201 206.24734497]
[79.84337616 203.38954163]
[78.99090576 199.32223511]
[80.01130676 194.68927002]
[83.15015411 190.36459351]
[84.68744659 175.44357300]
[86.22473907 160.52255249]
[72.14376068 155.46862793]
[59.68103409 147.19236755]
[49.56054306 136.17456055]
[42.37022018 123.05529022]
[38.52776718 108.59666443]
[38.25640869 93.63864136]
[41.57190323 79.05016327]
[48.28165054 65.67871857]
[57.99585724 54.30109406]
[70.15019989 45.57824326]
[84.03859711 40.01690292]
[98.85424042 37.94014740]
[100.39153290 23.01913071]
[101.92882538 8.09811497]
[103.46611786 -6.82290173]
[105.00341034 -21.74391747]
[106.23402405 -36.69335175]
[107.15744019 -51.66490173]
[108.08085632 -66.63645172]
[99.48262024 -82.88764191]
[109.66724396 -97.14659882]
[110.28307343 -112.13395691]
[94.80750275 -123.28393555]
[89.15210724 -141.34419250]
[95.40514374 -159.04846191]
[110.90087128 -169.38545227]
[110.59289551 -184.38229370]
[110.28491974 -199.37911987]
[109.97693634 -214.37596130]
[109.66896057 -229.37280273]
[101.64994812 -243.01119995]
[109.12430573 -255.89465332]
[108.81632233 -270.89147949]
[95.09243011 -277.66741943]
[86.09884644 -290.05184937]
[83.90222168 -305.19891357]
[89.00733948 -319.62792969]
[100.24106598 -330.02322388]
[115.02198029 -333.99600220]
[129.95353699 -330.63339233]
[141.60456848 -320.70806885]
[147.29777527 -306.50082397]
[145.72486877 -291.27633667]
[137.24729919 -278.53314209]
[123.81316376 -271.19946289]
[124.12113953 -256.20263672]
[132.11811829 -243.63690186]
[124.66580200 -229.68078613]
[124.97377777 -214.68394470]
[125.28175354 -199.68710327]
[125.58972931 -184.69026184]
[125.89771271 -169.69342041]
[136.18505859 -165.11752319]
[144.03645325 -156.97583008]
[148.27444458 -146.43356323]
[148.24259949 -135.01986694]
[143.90689087 -124.40602112]
[135.86630249 -116.16067505]
[125.27042389 -111.51812744]
[124.65460205 -96.53077698]
[132.63360596 -87.38760376]
[132.20504761 -74.85813141]
[123.05240631 -65.71303558]
[122.12899017 -50.74148941]
[121.20557404 -35.76993942]
[123.68309021 -31.62130928]
[123.53781128 -25.86224937]
[119.92443085 -20.20662498]
[118.38713837 -5.28560925]
[116.84984589 9.63540745]
[115.31255341 24.55642319]
[113.77526093 39.47743988]
[127.85623932 44.53137589]
[140.31896973 52.80764008]
[150.43945312 63.82543564]
[157.62977600 76.94470978]
[161.47222900 91.40333557]
[161.74359131 106.36135864]
[158.42810059 120.94983673]
[151.71835327 134.32127380]
[142.00415039 145.69889832]
[129.84979248 154.42175293]
[115.96140289 159.98309326]
[101.14575958 162.05984497]
[99.60846710 176.98086548]
[98.07117462 191.90188599]
[96.99410248 206.86315918]
[96.37827301 221.85052490]
[95.76245117 236.83787537]
[95.45447540 251.83471680]
[95.45447540 266.83471680]
[95.45447540 281.83471680]
[95.45447540 296.83471680]
[103.19177246 310.63488770]
[95.45447540 323.36215210]
[95.45447540 338.36215210]
[95.45447540 353.36215210]
[95.45447540 368.36215210]
[95.45447540 383.36215210]
[95.45447540 398.36215210]
[95.45447540 413.36215210]
[95.45447540 428.36215210]
[95.45447540 443.36215210]
[95.45447540 458.36215210]
[110.06448364 462.10357666]
[123.28464508 469.36157227]
[134.28392029 479.67984009]
[142.37088013 492.40979004]
[147.03718567 506.75122070]
[147.98950195 521.80261230]
[145.16796875 536.61779785]
[138.74993896 550.26550293]
[129.13887024 561.88781738]
[116.93891907 570.75415039]
[102.91696930 576.30712891]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[23 130]
[24 129]
[25 128]
[26 127]
[29 126]
[30 125]
[31 124]
[35 123]
[36 122]
[37 121]
[49 109]
[50 108]
[51 107]
[52 106]
[53 105]
[54 102]
[55 101]
[56 100]
[58 97]
[59 96]
[63 89]
[64 88]
[65 87]
[66 86]
[67 85]
[69 83]
[70 82]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
