%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:44 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUUUUUCAAAGGGGGGGGGGAAGGUAUUAGAAAAACCAUUUCAUAACUUUGUCAAAGUUAAAUUAUAGGCxxxxxxxxxxCCAUGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUACCCCCCCCCCACUUUGUCAAA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 375.76486206]
[71.01555634 370.21185303]
[58.81560135 361.34552002]
[49.20452881 349.72320557]
[42.78650284 336.07550049]
[39.96496582 321.26031494]
[40.91728210 306.20895386]
[45.58358765 291.86752319]
[53.67055511 279.13757324]
[64.66983032 268.81930542]
[77.88998413 261.56130981]
[92.50000000 257.81988525]
[92.50000000 242.81988525]
[92.50000000 227.81988525]
[92.50000000 212.81988525]
[92.50000000 197.81988525]
[92.50000000 182.81988525]
[92.50000000 167.81988525]
[92.50000000 152.81988525]
[92.50000000 137.81988525]
[92.50000000 122.81987762]
[72.39737701 107.60634613]
[74.90933990 78.19399261]
[104.87100983 62.46181107]
[94.54010773 51.58649826]
[79.59002686 61.61997604]
[56.24621582 56.43156052]
[41.90615463 52.03126144]
[27.56609344 47.63096237]
[24.25178528 67.65644073]
[2.49032140 82.90932465]
[-12.48991966 83.67898560]
[-27.47016144 84.44864655]
[-42.45040131 85.21829987]
[-54.22183990 96.11843109]
[-70.06101990 93.56890869]
[-77.81746674 79.52551270]
[-71.54111481 64.76113129]
[-56.04663086 60.60173798]
[-43.22006226 70.23806000]
[-28.23982048 69.46839905]
[-13.25957966 68.69874573]
[1.72066140 67.92908478]
[5.82578135 53.50105286]
[9.93055153 39.07431412]
[-2.40073276 30.53385353]
[-14.73201656 21.99339485]
[-27.06330109 13.45293617]
[-39.39458466 4.91247749]
[-51.72586823 -3.62798142]
[-64.05715179 -12.16844082]
[-80.52084351 -16.21606255]
[-81.18900299 -33.15683746]
[-65.09524536 -38.48856354]
[-55.51669312 -24.49972343]
[-43.18540955 -15.95926571]
[-30.85412598 -7.41880655]
[-18.52284241 1.12165248]
[-6.19155788 9.66211128]
[6.13972616 18.20256996]
[18.47101021 26.74302864]
[31.96639442 33.29090118]
[46.30645370 37.69120026]
[60.64651489 42.09149933]
[66.89853668 37.94876480]
[65.97480774 22.97723198]
[79.40257263 29.66328812]
[85.65458679 25.52055168]
[87.19187927 10.59953499]
[88.72917175 -4.32148170]
[90.26646423 -19.24249840]
[76.73674011 -26.12080193]
[66.60829926 -37.42473602]
[61.25091171 -51.62554169]
[61.38913345 -66.80267334]
[67.00426483 -80.90354919]
[77.33691406 -92.02114105]
[90.98966217 -98.65188599]
[106.11610413 -99.89903259]
[120.67049408 -95.59391022]
[132.68447876 -86.31875610]
[140.53327942 -73.32795715]
[143.15538025 -58.37840652]
[140.19618225 -43.49191666]
[132.05590820 -30.68175888]
[119.83542633 -21.68040085]
[105.18748474 -17.70520592]
[103.65019226 -2.78418922]
[102.11289978 12.13682747]
[100.57560730 27.05784416]
[105.41542053 41.25559616]
[115.74632263 52.13090897]
[130.54440308 54.58383942]
[143.83174133 47.62348175]
[157.11907959 40.66312408]
[165.75329590 27.40564156]
[180.61770630 28.35376167]
[193.90504456 21.39340591]
[207.19238281 14.43304920]
[220.47972107 7.47269297]
[233.76705933 0.51233685]
[244.99208069 -12.19338226]
[260.30865479 -4.92433405]
[257.56372070 11.80593014]
[240.72741699 13.79967785]
[227.44007874 20.76003456]
[214.15274048 27.72039032]
[200.86540222 34.68074799]
[187.57804871 41.64110184]
[179.89424133 54.40073776]
[164.07943726 53.95046616]
[150.79209900 60.91082382]
[137.50476074 67.87117767]
[138.19677734 75.33918762]
[139.58079529 90.27519989]
[140.27281189 97.74320221]
[154.61286926 102.14350128]
[168.95292664 106.54380798]
[183.29299927 110.94410706]
[198.08259583 104.72740173]
[212.09455872 112.54048920]
[214.58012390 128.38983154]
[203.63255310 140.11717224]
[187.64990234 138.72628784]
[178.89270020 125.28416443]
[164.55262756 120.88386536]
[150.21257019 116.48356628]
[135.87251282 112.08326721]
[129.19606018 118.18231201]
[121.79496002 121.95603180]
[114.35410309 123.43168640]
[107.50000000 122.81987762]
[107.50000000 137.81988525]
[107.50000000 152.81988525]
[107.50000000 167.81988525]
[107.50000000 182.81988525]
[107.50000000 197.81988525]
[107.50000000 212.81988525]
[107.50000000 227.81988525]
[107.50000000 242.81988525]
[107.50000000 257.81988525]
[122.11001587 261.56130981]
[135.33016968 268.81930542]
[146.32945251 279.13757324]
[154.41641235 291.86752319]
[159.08271790 306.20895386]
[160.03503418 321.26031494]
[157.21350098 336.07550049]
[150.79547119 349.72320557]
[141.18440247 361.34552002]
[128.98443604 370.21185303]
[114.96250153 375.76486206]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 92]
[25 91]
[27 64]
[28 63]
[29 62]
[31 43]
[32 42]
[33 41]
[34 40]
[45 61]
[46 60]
[47 59]
[48 58]
[49 57]
[50 56]
[51 55]
[68 90]
[69 89]
[70 88]
[71 87]
[93 113]
[94 112]
[95 111]
[97 109]
[98 108]
[99 107]
[100 106]
[101 105]
[116 128]
[117 127]
[118 126]
[119 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
