%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:46 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUAGAAAUAGGGGGGGGGGACUUUGCAAGGAGAGCCAAAGCUAAGACCCCCGAAACCAGACGAGCUACCxxxxxxxxxxUACUACCAAUCAAUACUCAUCAUUAAUAAUCAUAAUAGCUAUAGCAAUAACCCCCCCCCCAACUAGGAAUA\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 473.49444580]
[71.01555634 467.94143677]
[58.81560135 459.07510376]
[49.20452881 447.45278931]
[42.78650284 433.80508423]
[39.96496582 418.98989868]
[40.91728210 403.93853760]
[45.58358765 389.59710693]
[53.67055511 376.86715698]
[64.66983032 366.54888916]
[77.88998413 359.29089355]
[92.50000000 355.54946899]
[92.50000000 340.54946899]
[92.50000000 325.54946899]
[92.50000000 310.54946899]
[92.50000000 295.54946899]
[92.50000000 280.54946899]
[92.50000000 265.54946899]
[92.50000000 250.54946899]
[92.50000000 235.54946899]
[92.50000000 220.54946899]
[80.36157990 211.95896912]
[75.55226898 197.69941711]
[80.11502075 183.17239380]
[92.50000000 174.01168823]
[92.50000000 159.01168823]
[92.50000000 144.01168823]
[92.50000000 129.01168823]
[84.16939545 125.44248199]
[77.28690338 119.54592133]
[72.48209381 111.86138916]
[57.65961075 114.16226959]
[45.22953033 124.85923004]
[29.84211731 119.18829346]
[27.32662392 102.98322296]
[40.27077484 92.91440582]
[55.35873795 99.33978271]
[70.18122101 97.03890991]
[74.72138214 83.90902710]
[84.69511414 74.23785400]
[97.95858765 70.10417175]
[100.71482849 55.35957718]
[103.47106934 40.61498260]
[106.22731018 25.87038422]
[108.98355865 11.12578773]
[94.52133942 7.11010122]
[80.45787048 1.86602771]
[66.89727783 -4.56760645]
[53.93994904 -12.14316750]
[41.68182373 -20.80456924]
[30.21366119 -30.48768234]
[19.62036705 -41.12081528]
[9.98037052 -52.62524796]
[1.36504436 -64.91579437]
[-6.16182518 -77.90146637]
[-12.54451084 -91.48612213]
[-17.73575592 -105.56917572]
[-21.69712639 -120.04636383]
[-24.39929390 -134.81050110]
[-25.82225227 -149.75227356]
[-25.95546341 -164.76106262]
[-24.79794502 -179.72573853]
[-22.35826302 -194.53550720]
[-18.65448380 -209.08073425]
[-13.71402645 -223.25370789]
[-7.57347155 -236.94950867]
[-0.27828109 -250.06674194]
[8.11753273 -262.50827026]
[17.55180931 -274.18200684]
[27.95469856 -285.00149536]
[39.24918365 -294.88662720]
[51.35163498 -303.76425171]
[64.17245483 -311.56860352]
[77.61672211 -318.24191284]
[91.58489227 -323.73480225]
[105.97355652 -328.00656128]
[120.67617035 -331.02557373]
[135.58389282 -332.76947021]
[150.58634949 -333.22540283]
[165.57244873 -332.38992310]
[180.43125916 -330.26925659]
[195.05276489 -326.87908936]
[209.32870483 -322.24453735]
[223.15338135 -316.39990234]
[236.42443848 -309.38845825]
[249.04362488 -301.26211548]
[260.91751099 -292.08105469]
[271.95819092 -281.91320801]
[282.08392334 -270.83389282]
[291.21972656 -258.92514038]
[299.29794312 -246.27510071]
[306.25881958 -232.97743225]
[312.05078125 -219.13059998]
[316.63095093 -204.83712769]
[319.96539307 -190.20281982]
[322.02947998 -175.33604431]
[322.80789185 -160.34686279]
[322.29486084 -145.34625244]
[320.49417114 -130.44528198]
[317.41921997 -115.75426483]
[313.09271240 -101.38197327]
[307.54669189 -87.43482208]
[300.82223511 -74.01605988]
[292.96911621 -61.22504807]
[284.04547119 -49.15648651]
[274.11740112 -37.89972305]
[263.25836182 -27.53810310]
[251.54881287 -18.14834404]
[239.07540894 -9.79996204]
[225.93049622 -2.55476952]
[212.21141052 3.53359342]
[198.01972961 8.42004967]
[183.46051025 12.06842041]
[168.64155579 14.45169449]
[153.67257690 15.55222702]
[138.66439819 15.36186886]
[123.72814941 13.88203049]
[120.97190857 28.62662697]
[118.21566772 43.37122345]
[115.45942688 58.11582184]
[112.70317841 72.86042023]
[125.99997711 85.10272217]
[129.83761597 102.76486206]
[122.81990814 119.42111206]
[107.50000000 129.01168823]
[107.50000000 144.01168823]
[107.50000000 159.01168823]
[107.50000000 174.01168823]
[119.88497925 183.17239380]
[124.44773102 197.69941711]
[119.63842010 211.95896912]
[107.50000000 220.54946899]
[107.50000000 235.54946899]
[107.50000000 250.54946899]
[107.50000000 265.54946899]
[107.50000000 280.54946899]
[107.50000000 295.54946899]
[107.50000000 310.54946899]
[107.50000000 325.54946899]
[107.50000000 340.54946899]
[107.50000000 355.54946899]
[122.11001587 359.29089355]
[135.33016968 366.54888916]
[146.32945251 376.86715698]
[154.41641235 389.59710693]
[159.08271790 403.93853760]
[160.03503418 418.98989868]
[157.21350098 433.80508423]
[150.79547119 447.45278931]
[141.18440247 459.07510376]
[128.98443604 467.94143677]
[114.96250153 473.49444580]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[25 128]
[26 127]
[27 126]
[28 125]
[31 38]
[32 37]
[41 121]
[42 120]
[43 119]
[44 118]
[45 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
