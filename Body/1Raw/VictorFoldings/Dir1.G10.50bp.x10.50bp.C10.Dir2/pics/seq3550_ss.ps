%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:59 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CUCUUCUACUGGGGGGGGGGAUGAACCCCCCUCCCCAUACCCAACCCCCUGGUCAACCUCAACCUAGGCCxxxxxxxxxxUAUGGCGUUUCCCCGCAUAAACAACAUAAGCUUCUGACUCUUACCUCCCUCCCCCCCCCCCUCUCCUACU\
) } def
/len { sequence length } bind def

/coor [
[8.40058804 281.57745361]
[-1.02610850 276.50650024]
[-10.17294407 270.94662476]
[-19.01458168 264.91317749]
[-27.52652550 258.42288208]
[-35.68519974 251.49372864]
[-43.46799850 244.14491272]
[-50.85336685 236.39678955]
[-57.82084274 228.27082825]
[-64.35112762 219.78952026]
[-76.79056549 228.17167664]
[-89.23000336 236.55381775]
[-101.66944885 244.93595886]
[-114.10888672 253.31809998]
[-126.46045685 261.82919312]
[-138.72282410 270.46829224]
[-150.98519897 279.10742188]
[-163.24755859 287.74655151]
[-175.50993347 296.38565063]
[-187.77229309 305.02478027]
[-191.91819763 320.52285767]
[-206.67710876 326.81207275]
[-220.72724915 319.06787109]
[-223.29057312 303.23092651]
[-212.40069580 291.44998169]
[-196.41142273 292.76239014]
[-184.14904785 284.12329102]
[-171.88667297 275.48416138]
[-159.62431335 266.84506226]
[-147.36193848 258.20593262]
[-135.09957886 249.56681824]
[-131.41911316 243.10154724]
[-122.49102783 240.87866211]
[-110.05158997 232.49652100]
[-97.61215210 224.11437988]
[-85.17270660 215.73222351]
[-72.73326874 207.35008240]
[-84.66720581 185.19886780]
[-93.77450562 161.74354553]
[-99.91576385 137.34312439]
[-102.99699402 112.37111664]
[-102.97101593 87.20974731]
[-99.83823395 62.24414825]
[-93.64659882 37.85646820]
[-84.49088287 14.41999722]
[-72.51123810 -7.70653152]
[-57.89101791 -28.18443489]
[-40.85401917 -46.70026779]
[-50.83674622 -57.89603043]
[-60.81947327 -69.09179688]
[-70.91812134 -80.18311310]
[-81.13159943 -91.16877747]
[-91.34508514 -102.15444183]
[-106.73252869 -100.15291595]
[-120.34156036 -107.60770416]
[-126.93922424 -121.65229034]
[-123.98859406 -136.88624573]
[-112.62422943 -147.45179749]
[-97.21598053 -149.28628540]
[-83.68861389 -141.68431091]
[-77.24369812 -127.56896973]
[-80.35942078 -112.36791992]
[-70.14593506 -101.38225555]
[-59.93245697 -90.39659119]
[-53.02999878 -87.62139893]
[-49.62370682 -79.07452393]
[-39.64097977 -67.87876129]
[-29.65825462 -56.68299103]
[-17.51871109 -65.98245239]
[-4.71473169 -74.34347534]
[8.68129063 -81.71878052]
[22.59361649 -88.06667328]
[36.94358826 -93.35126495]
[51.65007019 -97.54267120]
[66.62992096 -100.61720276]
[81.79843140 -102.55746460]
[97.06986237 -103.35249329]
[112.35785675 -102.99780273]
[127.57598114 -101.49538422]
[142.63818359 -98.85373688]
[157.45933533 -95.08779907]
[171.95561218 -90.21885681]
[186.04505920 -84.27444458]
[199.64801025 -77.28816986]
[212.68757629 -69.29953766]
[221.45378113 -81.47137451]
[230.21998596 -93.64321136]
[227.43566895 -109.20030212]
[236.53579712 -122.12171173]
[252.12145996 -124.74140930]
[264.94595337 -115.50516510]
[267.40069580 -99.89268494]
[258.02938843 -87.16656494]
[242.39183044 -84.87699890]
[233.62562561 -72.70516205]
[224.85942078 -60.53332901]
[233.13282776 -53.74158478]
[241.03742981 -46.52394867]
[248.55133057 -38.90041351]
[255.65371704 -30.89209938]
[262.32492065 -22.52119064]
[268.54644775 -13.81087589]
[274.30108643 -4.78528404]
[279.57287598 4.53058243]
[284.34719849 14.11091709]
[288.61083984 23.92918015]
[292.35202026 33.95817184]
[295.56033325 44.17011261]
[298.22692871 54.53671265]
[300.34439087 65.02925110]
[301.90682983 75.61866760]
[302.91000366 86.27562714]
[303.35104370 96.97060394]
[303.22875977 107.67397308]
[302.54351807 118.35608673]
[301.29718018 128.98735046]
[299.49322510 139.53829956]
[297.13662720 149.97973633]
[294.23391724 160.28271484]
[290.79315186 170.41870117]
[286.82385254 180.35960388]
[282.33703613 190.07791138]
[277.34509277 199.54667664]
[271.86187744 208.73968506]
[265.90255737 217.63146973]
[259.48367310 226.19738770]
[252.62298584 234.41371155]
[245.33950806 242.25769043]
[237.65341187 249.70758057]
[229.58599854 256.74276733]
[221.15959167 263.34371948]
[212.39756775 269.49221802]
[203.32417297 275.17117310]
[193.96453857 280.36486816]
[184.34461975 285.05892944]
[174.49105835 289.24032593]
[164.43112183 292.89752197]
[154.19271851 296.02032471]
[143.80418396 298.60012817]
[133.29429626 300.62979126]
[122.69219208 302.10366821]
[112.02722168 303.01766968]
[101.32892609 303.36926270]
[90.62695312 303.15750122]
[79.95095062 302.38296509]
[69.33048248 301.04776001]
[58.79497528 299.15563965]
[48.37361145 296.71182251]
[38.09526443 293.72305298]
[27.98840714 290.19766235]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 37]
[11 36]
[12 35]
[13 34]
[14 33]
[15 31]
[16 30]
[17 29]
[18 28]
[19 27]
[20 26]
[48 68]
[49 67]
[50 66]
[51 64]
[52 63]
[53 62]
[85 96]
[86 95]
[87 94]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
