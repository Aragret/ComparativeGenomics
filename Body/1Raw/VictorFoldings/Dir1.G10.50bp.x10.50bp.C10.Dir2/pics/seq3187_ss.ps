%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:54 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUCGCAUAAGGGGGGGGGGAACUUAAAACUUUACAGUCAGAGGUUCAAUUCCUCUUCUUAACAACAUACxxxxxxxxxxUAAACUUUACUUCCUCUCUUUCUUCUUCCCACUCAUCCUAACCCUACUCCCCCCCCCCCCUAAUCACAUAA\
) } def
/len { sequence length } bind def

/coor [
[77.94770050 402.51022339]
[65.02854919 394.75186157]
[54.24724960 384.22283936]
[46.18523407 371.49096680]
[41.27727509 357.24285889]
[39.78805161 342.24688721]
[41.79787445 327.31179810]
[47.19836044 313.24298096]
[55.69826126 300.79916382]
[66.83919525 290.65142822]
[80.02034760 283.34704590]
[94.53086090 279.27990723]
[93.91503906 264.29257202]
[93.29920959 249.30522156]
[92.68338776 234.31785583]
[92.06755829 219.33050537]
[91.45173645 204.34315491]
[90.83590698 189.35580444]
[90.22008514 174.36845398]
[89.60425568 159.38108826]
[88.98843384 144.39373779]
[88.37261200 129.40638733]
[76.12965393 120.73977661]
[61.78959274 125.14008331]
[47.44953156 129.54037476]
[33.15540314 134.08767700]
[18.90871048 138.78147888]
[4.66201782 143.47526550]
[-5.85147858 156.06091309]
[-21.95911598 152.98258972]
[-27.09073830 137.40702820]
[-15.96737099 125.35700989]
[-0.03178277 129.22857666]
[14.21490955 124.53478241]
[28.46160126 119.84098053]
[33.86370468 114.72927856]
[43.04923248 115.20031738]
[57.38929367 110.80001831]
[71.72935486 106.39971924]
[79.73195648 84.90477753]
[98.53797150 78.49216461]
[102.79082489 64.10768127]
[102.22550201 54.92747498]
[107.28147125 49.47317886]
[111.82876587 35.17904663]
[116.37605286 20.88491821]
[120.92333984 6.59078836]
[107.05150604 0.86028785]
[93.70783997 -6.01088953]
[80.98593903 -13.97454643]
[68.97504425 -22.97482300]
[57.75940323 -32.94858551]
[47.41769028 -43.82587814]
[38.02244186 -55.53040314]
[29.63956070 -67.98005676]
[22.32784843 -81.08750916]
[16.13859177 -94.76082611]
[11.11520672 -108.90409851]
[7.29292583 -123.41812134]
[4.69856215 -138.20108032]
[3.35031295 -153.14927673]
[3.25763583 -168.15788269]
[4.42118025 -183.12158203]
[6.83278513 -197.93545532]
[10.47553444 -212.49557495]
[15.32387638 -226.69979858]
[21.34380341 -240.44851685]
[28.49308777 -253.64526367]
[36.72158432 -266.19747925]
[45.97157288 -278.01715088]
[56.17816925 -289.02133179]
[67.26978302 -299.13284302]
[79.16860962 -308.28076172]
[91.79119873 -316.40090942]
[105.04898834 -323.43634033]
[118.84900665 -329.33770752]
[133.09443665 -334.06362915]
[147.68536377 -337.58093262]
[162.51943970 -339.86495972]
[177.49261475 -340.89965820]
[192.49984741 -340.67782593]
[207.43589783 -339.20095825]
[222.19598389 -336.47946167]
[236.67655945 -332.53240967]
[250.77607727 -327.38748169]
[264.39562988 -321.08078003]
[277.43966675 -313.65652466]
[289.81671143 -305.16680908]
[301.43994141 -295.67117310]
[312.22781372 -285.23620605]
[322.10467529 -273.93515015]
[331.00125122 -261.84722900]
[338.85510254 -249.05726624]
[345.61120605 -235.65495300]
[351.22207642 -221.73431396]
[355.64843750 -207.39297485]
[358.85922241 -192.73155212]
[360.83190918 -177.85285950]
[361.55261230 -162.86129761]
[361.01635742 -147.86199951]
[359.22683716 -132.96017456]
[356.19662476 -118.26036835]
[351.94699097 -103.86567688]
[346.50775146 -89.87707520]
[339.91702271 -76.39267731]
[332.22106934 -63.50707626]
[323.47384644 -51.31064987]
[313.73672485 -39.88895798]
[303.07800293 -29.32210922]
[291.57244873 -19.68422508]
[279.30078125 -11.04291248]
[266.34902954 -3.45878172]
[252.80809021 3.01496768]
[238.77293396 8.33292675]
[224.34199524 12.45779324]
[209.61650085 15.36063385]
[194.69975281 17.02108574]
[179.69636536 17.42750359]
[164.71160889 16.57703590]
[149.85055542 14.47564697]
[135.21746826 11.13807869]
[130.67018127 25.43220901]
[126.12289429 39.72633743]
[121.57559967 54.02046967]
[117.17530060 68.36052704]
[112.92245483 82.74501038]
[123.81886292 96.79415131]
[120.93579102 116.26228333]
[103.35996246 128.79055786]
[103.97578430 143.77790833]
[104.59161377 158.76527405]
[105.20743561 173.75262451]
[105.82326508 188.73997498]
[106.43908691 203.72732544]
[107.05491638 218.71467590]
[107.67073822 233.70204163]
[108.28656769 248.68939209]
[108.90238953 263.67672729]
[109.51821899 278.66409302]
[124.31349182 281.52706909]
[138.04946899 287.72543335]
[149.98536682 296.92492676]
[159.47752380 308.62945557]
[166.01400757 322.20779419]
[169.24235535 336.92764282]
[168.98843384 351.99523926]
[165.26594543 366.59796143]
[158.27563477 379.94833374]
[148.39448547 391.32638550]
[136.15538025 400.11846924]
[122.21836090 405.85049438]
[107.33502197 408.21331787]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[23 39]
[24 38]
[25 37]
[26 35]
[27 34]
[28 33]
[41 126]
[42 125]
[44 124]
[45 123]
[46 122]
[47 121]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
