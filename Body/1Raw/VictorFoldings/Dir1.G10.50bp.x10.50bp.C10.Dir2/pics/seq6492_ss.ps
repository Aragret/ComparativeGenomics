%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUGGGGGGGGGGGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGUCUAxxxxxxxxxxGCUUAUCACCUUUCAUGAUCACGCCCUCAUAAUCAUUUUCCUUAUCUGCUCCCCCCCCCCUCCUAGUCCUG\
) } def
/len { sequence length } bind def

/coor [
[92.92860413 335.05178833]
[79.71038818 327.77572632]
[68.82642365 317.32574463]
[61.01880264 304.41439819]
[56.81986237 289.92193604]
[56.51589203 274.83651733]
[60.12762070 260.18667603]
[67.40878296 246.97125244]
[77.86295319 236.09132385]
[90.77733612 228.28869629]
[105.27141571 224.09535217]
[104.96343994 209.09851074]
[104.65545654 194.10166931]
[104.34748077 179.10482788]
[104.03950500 164.10800171]
[103.73152924 149.11116028]
[103.42354584 134.11431885]
[103.11557007 119.11748505]
[91.14531708 110.07796478]
[76.63668823 113.88581848]
[65.25275421 124.87293243]
[50.97823715 120.62000275]
[36.46961212 124.42786407]
[21.96098709 128.23571777]
[14.39926529 133.47177124]
[7.11534119 131.96955872]
[-7.46840811 135.47871399]
[-15.13604164 140.55841064]
[-22.38758659 138.90695190]
[-37.04030991 142.11595154]
[-46.87080765 154.79431152]
[-62.91368484 154.86926270]
[-72.86222076 142.28332520]
[-69.08475494 126.69132233]
[-54.47902679 120.05413055]
[-40.24930573 127.46322632]
[-25.59658241 124.25422668]
[-10.97757530 120.89497375]
[3.60617423 117.38580322]
[18.15312767 113.72709656]
[32.66175461 109.91924286]
[47.17037964 106.11138153]
[57.51655579 95.39662933]
[72.82882690 99.37719727]
[87.33745575 95.56933594]
[99.30771637 86.52981567]
[106.94068146 73.61711884]
[114.57365417 60.70442200]
[122.20661926 47.79172516]
[129.83959961 34.87902832]
[137.47256470 21.96632767]
[145.10552979 9.05363083]
[142.82394409 -18.23542595]
[141.28665161 -33.15644455]
[139.74935913 -48.07746124]
[135.73519897 -56.35285568]
[138.33691406 -63.32015228]
[137.10630798 -78.26958466]
[135.87570190 -93.21902466]
[134.64508057 -108.16845703]
[130.80166626 -116.52452850]
[133.54589844 -123.43693542]
[132.62248230 -138.40849304]
[121.06323242 -148.84982300]
[120.34003448 -164.04624939]
[130.36547852 -175.00189209]
[129.44206238 -189.97343445]
[128.51864624 -204.94499207]
[114.23670959 -210.23138428]
[103.34421539 -220.87438965]
[97.72836304 -235.03002930]
[98.36212158 -250.24574280]
[105.13570404 -263.88534546]
[116.87553406 -273.58566284]
[131.54762268 -277.66607666]
[146.60993958 -275.41961670]
[159.45285034 -267.23550415]
[167.85122681 -254.53169250]
[170.35002136 -239.50917053]
[166.51629639 -224.77070618]
[157.01425171 -212.86981201]
[143.49020386 -205.86840820]
[144.41362000 -190.89685059]
[145.33703613 -175.92530823]
[156.63281250 -166.28471375]
[157.78256226 -151.11459351]
[147.59403992 -139.33189392]
[148.51744080 -124.36035156]
[149.59451294 -109.39907074]
[150.82513428 -94.44963074]
[152.05574036 -79.50019836]
[153.28636169 -64.55076599]
[154.67037964 -49.61475372]
[156.20767212 -34.69373703]
[157.74496460 -19.77271843]
[170.41648865 -11.74572182]
[184.56379700 -16.73104477]
[198.71112061 -21.71636581]
[212.85842896 -26.70168877]
[227.00575256 -31.68700981]
[228.63008118 -46.86344910]
[236.68566895 -59.82764435]
[249.57305908 -68.00554657]
[264.73342896 -69.77342224]
[279.15673828 -64.78026581]
[289.97915649 -54.01747131]
[295.05191040 -39.62199402]
[293.36782837 -24.45206833]
[285.26126099 -11.51969719]
[272.34176636 -3.39260960]
[257.17453003 -1.68444514]
[242.77102661 -6.73436165]
[231.99107361 -17.53969383]
[217.84375000 -12.55437183]
[203.69644165 -7.56904984]
[189.54911804 -2.58372760]
[175.40180969 2.40159416]
[190.40180969 2.40821362]
[203.22384644 10.19251060]
[210.15034485 23.49752998]
[209.17306519 38.46566010]
[200.57534790 50.75708771]
[186.84997559 56.80807877]
[171.97647095 54.86422729]
[160.26718140 45.48912811]
[155.11706543 31.40096474]
[158.01823425 16.68659973]
[150.38525391 29.59929848]
[142.75228882 42.51199722]
[135.11932373 55.42469406]
[127.48635101 68.33739471]
[119.85337830 81.25009155]
[112.22041321 94.16278839]
[118.11241150 118.80950165]
[118.42038727 133.80635071]
[118.72836304 148.80317688]
[119.03634644 163.80001831]
[119.34432220 178.79685974]
[119.65229797 193.79370117]
[119.96027374 208.79052734]
[120.26824951 223.78736877]
[134.92227173 227.38212585]
[148.14610291 234.64797974]
[159.03813171 245.08953857]
[166.85571289 257.99487305]
[171.06584167 272.48406982]
[171.38146973 287.56927490]
[167.78105164 302.22189331]
[160.51010132 315.44293213]
[150.06433105 326.33093262]
[137.15597534 334.14352417]
[122.66514587 338.34805298]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 141]
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 45]
[20 44]
[22 42]
[23 41]
[24 40]
[26 39]
[27 38]
[29 37]
[30 36]
[46 133]
[47 132]
[48 131]
[49 130]
[50 129]
[51 128]
[52 127]
[53 95]
[54 94]
[55 93]
[57 92]
[58 91]
[59 90]
[60 89]
[62 88]
[63 87]
[66 84]
[67 83]
[68 82]
[96 117]
[97 116]
[98 115]
[99 114]
[100 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
