%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCUUACUAGGGGGGGGGGGACCAAUGGGACUUAAACCCACAAACACUUAGUUAACAGCUAAGCACCCUAxxxxxxxxxxAUUAUUACAUUUUGACUACCACAACUCAACGGCUACAUAGAAAAAUCCACCCCCCCCCCCCCCUUACGAG\
) } def
/len { sequence length } bind def

/coor [
[83.64903259 373.92098999]
[70.77576447 366.01812744]
[60.65146637 354.80761719]
[54.09688568 341.19827271]
[51.64336395 326.29336548]
[53.48979950 311.30111694]
[59.48651123 297.43692017]
[69.14737701 285.82464600]
[81.68922424 277.40570068]
[96.09534454 272.86254883]
[95.78328705 257.86578369]
[95.47122955 242.86903381]
[95.15917206 227.87228394]
[94.84712219 212.87553406]
[94.53506470 197.87876892]
[94.22300720 182.88201904]
[93.91094971 167.88526917]
[93.59889221 152.88851929]
[93.28683472 137.89175415]
[92.97478485 122.89500427]
[87.12496948 118.20142365]
[81.81260681 132.22921753]
[66.82978058 131.51165771]
[62.88229370 117.04039764]
[75.42534637 108.81426239]
[69.57553101 104.12068176]
[54.86757278 107.06616211]
[40.15961075 110.01164246]
[25.45164871 112.95713043]
[18.10722351 126.76268768]
[3.58775020 132.56948853]
[-11.25112057 127.63572693]
[-19.40292549 114.29099274]
[-17.01863480 98.83624268]
[-5.22403479 88.56874847]
[10.41182423 88.33650208]
[22.50616646 98.24916840]
[37.21413040 95.30368805]
[51.92208862 92.35820007]
[66.63005066 89.41271973]
[74.08496094 76.39640808]
[69.18341064 62.21985245]
[64.28186035 48.04329300]
[59.38031006 33.86673737]
[53.58200836 26.72309875]
[54.52759171 19.34397125]
[46.27530289 6.81800842]
[34.97629929 -3.04771447]
[23.67729378 -12.91343784]
[12.37828922 -22.77916145]
[1.07928407 -32.64488220]
[-10.21972084 -42.51060867]
[-26.25884628 -42.86559677]
[-35.86653137 -55.71363068]
[-31.67258072 -71.19879150]
[-16.89423561 -77.44219971]
[-2.86817789 -69.65443420]
[-0.35399762 -53.80961227]
[10.94500732 -43.94388962]
[22.24401283 -34.07816696]
[33.54301834 -24.21244240]
[44.84202194 -14.34671974]
[56.14102554 -4.48099613]
[51.66397095 -18.79728127]
[50.42153931 -33.74573517]
[52.47370148 -48.60469437]
[57.72139359 -62.65680313]
[65.91127014 -75.22366333]
[76.64794159 -85.69857788]
[89.41307068 -93.57585144]
[103.59039307 -98.47518921]
[118.49546814 -100.16006470]
[133.40870667 -98.54912567]
[147.61015320 -93.72016144]
[160.41419983 -85.90628815]
[171.20268250 -75.48474884]
[179.45478821 -62.95866013]
[184.77209473 -48.93275070]
[186.89793396 -34.08415222]
[185.72964478 -19.12971687]
[181.32363892 -4.79140663]
[173.89263916 8.23856640]
[163.79537964 19.33114815]
[151.51933289 27.95081711]
[137.65715027 33.68144226]
[122.87807465 36.24636078]
[107.89559174 35.52174759]
[93.43300629 31.54258537]
[80.18854523 24.50097656]
[68.80305481 14.73840618]
[73.55686951 28.96518517]
[78.45841980 43.14174271]
[83.35997009 57.31830215]
[88.26152039 71.49485779]
[108.85874176 75.63729095]
[118.61813354 90.24448395]
[133.26162720 86.99365997]
[147.90513611 83.74283600]
[149.10856628 68.67488098]
[154.70144653 54.63169479]
[164.18643188 42.86197662]
[176.72015381 34.41228485]
[191.18811035 30.03396416]
[206.30381775 30.11632538]
[220.72320557 34.65205002]
[233.16409302 43.23782349]
[242.52027893 55.11020660]
[247.95977783 69.21350861]
[248.99894714 84.29367828]
[245.54536438 99.00979614]
[237.90611267 112.05332184]
[226.76049805 122.26441956]
[213.09956360 128.73513794]
[198.13803101 130.89009094]
[183.20626831 128.53768921]
[169.63198853 121.88707733]
[158.62223816 111.52963257]
[151.15596008 98.38633728]
[136.51246643 101.63716125]
[121.86895752 104.88798523]
[136.51806641 101.66254425]
[150.71617126 106.50136566]
[160.34667969 118.00150299]
[162.61740112 132.82862854]
[156.86993408 146.68383789]
[144.77069092 155.54997253]
[129.82769775 156.85643005]
[116.37345886 150.22442627]
[108.30886841 137.57679749]
[107.97153473 122.58294678]
[108.28359222 137.57969666]
[108.59564972 152.57646179]
[108.90770721 167.57321167]
[109.21975708 182.56996155]
[109.53181458 197.56671143]
[109.84387207 212.56347656]
[110.15592957 227.56022644]
[110.46798706 242.55697632]
[110.78004456 257.55374146]
[111.09209442 272.55047607]
[125.67473602 276.49044800]
[138.55593872 284.38037109]
[148.69149780 295.58071899]
[155.25975037 309.18347168]
[157.72824097 324.08590698]
[155.89686584 339.08001709]
[149.91409302 352.95022583]
[140.26489258 364.57217407]
[127.73151398 373.00372314]
[113.32996368 377.56137085]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[26 40]
[27 39]
[28 38]
[29 37]
[41 94]
[42 93]
[43 92]
[44 91]
[46 90]
[47 63]
[48 62]
[49 61]
[50 60]
[51 59]
[52 58]
[96 120]
[97 119]
[98 118]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
