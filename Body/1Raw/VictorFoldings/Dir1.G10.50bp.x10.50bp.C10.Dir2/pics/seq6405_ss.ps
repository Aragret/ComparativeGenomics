%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAACUGACUAGGGGGGGGGGGUUCCCCUAAUAAUCGGUGCCCCCGAUAUGGCGUUUCCCCGCAUAAACAAxxxxxxxxxxUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCUAAUUCCCCCCCCCCCUACUGACUA\
) } def
/len { sequence length } bind def

/coor [
[80.99869537 482.27200317]
[67.15275574 476.25598145]
[55.44409561 466.72656250]
[46.74157333 454.39089966]
[41.69097137 440.16436768]
[40.66707993 425.10269165]
[43.74588013 410.32354736]
[50.69890213 396.92361450]
[61.01018524 385.89727783]
[73.91456604 378.06277466]
[88.45445251 374.00146484]
[88.45445251 359.00146484]
[88.45445251 344.00146484]
[88.45445251 329.00146484]
[88.45445251 314.00146484]
[88.45445251 299.00146484]
[88.45445251 284.00146484]
[88.45445251 269.00146484]
[88.45445251 254.00144958]
[88.45445251 239.00144958]
[75.84442902 234.69241333]
[65.16823578 226.67936707]
[57.48219299 215.73744202]
[53.55224228 202.93243408]
[53.77761459 189.51695251]
[58.15033722 176.80795288]
[66.25461578 166.05735779]
[77.30632782 158.32884216]
[90.22889709 154.39250183]
[90.85287476 139.40548706]
[91.47685242 124.41847229]
[74.20529938 112.13792419]
[70.79366302 89.16191864]
[55.85935593 87.75961304]
[40.92504883 86.35730743]
[25.99074173 84.95500183]
[11.05643463 83.55270386]
[-2.16606760 92.63813019]
[-17.47084618 87.82737732]
[-23.11738586 72.81085205]
[-14.77414417 59.10793686]
[1.15865767 57.23033905]
[12.45873833 68.61839294]
[27.39304543 70.02069855]
[42.32735443 71.42299652]
[57.26166153 72.82530212]
[72.19596863 74.22760773]
[84.36780548 65.46140289]
[87.77078247 50.85250854]
[91.17375946 36.24361420]
[87.01587677 21.83139801]
[76.35424805 11.28010845]
[65.69261932 0.72881842]
[49.89183807 1.06164026]
[38.54163361 -9.93601608]
[38.37588501 -25.73943520]
[49.49292755 -36.97272873]
[65.29721832 -36.97138596]
[76.41234589 -25.73619843]
[76.24391174 -9.93280792]
[86.90554047 0.61848241]
[97.56716156 11.16977310]
[112.38492584 8.83866882]
[119.29192352 -4.47648668]
[126.19892120 -17.79164314]
[133.10591125 -31.10679817]
[120.91511536 -39.89328003]
[110.13362122 -50.36119080]
[100.99122620 -62.28739929]
[93.68281555 -75.41770935]
[88.36415863 -89.47223663]
[85.14862823 -104.15141296]
[84.10475922 -119.14234924]
[85.25480652 -134.12551880]
[88.57425690 -148.78153992]
[93.99235535 -162.79803467]
[101.39360809 -175.87623596]
[110.62026978 -187.73736572]
[121.47566223 -198.12863159]
[133.72840881 -206.82852173]
[147.11732483 -213.65161133]
[161.35705566 -218.45245361]
[176.14405823 -221.12872314]
[191.16314697 -221.62336731]
[206.09420776 -219.92585754]
[220.61895752 -216.07237244]
[234.42782593 -210.14503479]
[247.22645569 -202.27021790]
[258.74203491 -192.61573792]
[268.72915649 -181.38740540]
[276.97488403 -168.82452393]
[283.30349731 -155.19491577]
[287.58010864 -140.78906250]
[289.71353149 -125.91403961]
[289.65829468 -110.88690186]
[287.41558838 -96.02796173]
[283.03323364 -81.65393066]
[276.60461426 -68.07119751]
[268.26675415 -55.56927490]
[258.19738770 -44.41464615]
[246.61114502 -34.84507370]
[233.75497437 -27.06452751]
[219.90292358 -21.23885536]
[205.35023499 -17.49222946]
[190.40710449 -15.90451145]
[175.39205933 -16.50954056]
[160.62512207 -19.29442406]
[146.42106628 -24.19980049]
[139.51406860 -10.88464355]
[132.60707092 2.43051171]
[125.70008087 15.74566746]
[105.78265381 39.64659119]
[102.37967682 54.25548553]
[98.97669983 68.86437988]
[109.94900513 71.17752075]
[119.16243744 77.13873291]
[125.48607635 85.81235504]
[128.21794128 95.94492340]
[127.16020203 106.14494324]
[122.62379456 115.07369995]
[115.36478424 121.62094879]
[106.46386719 125.04244995]
[105.83988953 140.02946472]
[105.21591187 155.01647949]
[120.58303070 161.84278870]
[132.14443970 174.00221252]
[138.16142273 189.62548828]
[137.74467468 206.32560730]
[130.98559570 221.56242371]
[118.93810272 233.02914429]
[103.45445251 239.00144958]
[103.45445251 254.00144958]
[103.45445251 269.00146484]
[103.45445251 284.00146484]
[103.45445251 299.00146484]
[103.45445251 314.00146484]
[103.45445251 329.00146484]
[103.45445251 344.00146484]
[103.45445251 359.00146484]
[103.45445251 374.00146484]
[117.99433899 378.06277466]
[130.89872742 385.89727783]
[141.21000671 396.92361450]
[148.16302490 410.32354736]
[151.24182129 425.10269165]
[150.21794128 440.16436768]
[145.16732788 454.39089966]
[136.46481323 466.72656250]
[124.75614929 476.25598145]
[110.91020966 482.27200317]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[29 124]
[30 123]
[31 122]
[33 47]
[34 46]
[35 45]
[36 44]
[37 43]
[48 114]
[49 113]
[50 112]
[51 62]
[52 61]
[53 60]
[63 111]
[64 110]
[65 109]
[66 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
