%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UACACCUCCUAGGGGGGGGGGUGAAAAAACUUCCUACCACUCACCCUAGCAUUACUUAUAUGAUAUGUCUCxxxxxxxxxxACACCGCACAAUCCCCUAUCUAGGCCUUCUUACGAGCCAAAACCUGCCCCCCCCCCCCCCUACUCCUCCUA\
) } def
/len { sequence length } bind def

/coor [
[62.76795578 158.36865234]
[51.09162903 149.00099182]
[41.70188522 137.34240723]
[35.03771210 123.93797302]
[31.41068268 109.41439056]
[30.99036217 94.45066071]
[33.79640579 79.74637604]
[39.69762039 65.98899841]
[48.41811371 53.82171249]
[59.55018234 43.81336975]
[72.57337189 36.43188477]
[86.87882233 32.02235794]
[85.64821625 17.07292175]
[84.41760254 2.12348723]
[83.18698883 -12.82594681]
[81.95637512 -27.77538109]
[80.72576141 -42.72481537]
[79.49514771 -57.67425156]
[78.26454163 -72.62368774]
[77.03392792 -87.57312012]
[75.80331421 -102.52255249]
[74.57270050 -117.47199249]
[59.57219315 -117.12892151]
[44.57770538 -117.67510223]
[29.64190865 -119.10860443]
[14.81726456 -121.42439270]
[0.15584636 -124.61434937]
[-14.29084682 -128.66725159]
[-28.47207069 -133.56886292]
[-42.33801270 -139.30198669]
[-55.83996582 -145.84646606]
[-68.93051147 -153.17930603]
[-81.56365967 -161.27476501]
[-93.69503784 -170.10441589]
[-105.28203583 -179.63722229]
[-116.28395081 -189.83972168]
[-126.66213989 -200.67605591]
[-136.38014221 -212.10816956]
[-145.40383911 -224.09590149]
[-153.70152283 -236.59716797]
[-161.24404907 -249.56802368]
[-168.00492859 -262.96292114]
[-173.96040344 -276.73483276]
[-179.08956909 -290.83535767]
[-183.37438965 -305.21496582]
[-186.79983521 -319.82315063]
[-189.35385132 -334.60861206]
[-191.02748108 -349.51940918]
[-191.81484985 -364.50317383]
[-191.71318054 -379.50726318]
[-190.72283936 -394.47897339]
[-188.84730530 -409.36572266]
[-186.09317017 -424.11523438]
[-182.47007751 -438.67565918]
[-177.99079895 -452.99588013]
[-172.67102051 -467.02560425]
[-166.52947998 -480.71554565]
[-159.58770752 -494.01760864]
[-151.87010193 -506.88507080]
[-143.40377808 -519.27270508]
[-134.21846008 -531.13708496]
[-124.34642792 -542.43646240]
[-113.82234955 -553.13116455]
[-102.68318939 -563.18365479]
[-90.96807098 -572.55853271]
[-78.71815491 -581.22296143]
[-65.97647095 -589.14654541]
[-52.78776169 -596.30133057]
[-39.19836044 -602.66223145]
[-25.25600243 -608.20690918]
[-11.00965977 -612.91589355]
[3.49062848 -616.77264404]
[18.19392776 -619.76367188]
[33.04859161 -621.87835693]
[48.00244141 -623.10931396]
[63.00295258 -623.45227051]
[77.99743652 -622.90594482]
[92.93321991 -621.47229004]
[107.75784302 -619.15637207]
[122.41923523 -615.96630859]
[136.86589050 -611.91326904]
[151.04707336 -607.01153564]
[164.91296387 -601.27832031]
[178.41485596 -594.73370361]
[191.50534058 -587.40075684]
[204.13841248 -579.30517578]
[216.26971436 -570.47540283]
[227.85662842 -560.94250488]
[238.85845947 -550.73992920]
[249.23655701 -539.90350342]
[258.95446777 -528.47131348]
[267.97805786 -516.48345947]
[276.27563477 -503.98214722]
[283.81805420 -491.01123047]
[290.57879639 -477.61624146]
[296.53414917 -463.84429932]
[301.66317749 -449.74374390]
[305.94787598 -435.36407471]
[309.37319946 -420.75585938]
[311.92709351 -405.97036743]
[313.60058594 -391.05957031]
[314.38784790 -376.07580566]
[314.28604126 -361.07171631]
[313.29556274 -346.10000610]
[311.41989136 -331.21325684]
[308.66561890 -316.46380615]
[305.04241943 -301.90338135]
[300.56298828 -287.58322144]
[295.24310303 -273.55352783]
[289.10144043 -259.86364746]
[282.15954590 -246.56164551]
[274.44183350 -233.69425964]
[265.97540283 -221.30667114]
[256.78997803 -209.44238281]
[246.91784668 -198.14309692]
[236.39367676 -187.44848633]
[225.25442505 -177.39611816]
[213.53923035 -168.02130127]
[201.28924561 -159.35696411]
[188.54748535 -151.43354797]
[175.35871887 -144.27888489]
[161.76925659 -137.91809082]
[147.82684326 -132.37351990]
[133.58045959 -127.66464996]
[119.08014679 -123.80801392]
[104.37681580 -120.81716156]
[89.52213287 -118.70259857]
[90.75274658 -103.75316620]
[91.98336029 -88.80373383]
[93.21397400 -73.85430145]
[94.44458771 -58.90486145]
[95.67520142 -43.95542908]
[96.90580750 -29.00599480]
[98.13642120 -14.05655956]
[99.36703491 0.89287484]
[100.59764862 15.84230900]
[101.82826233 30.79174423]
[116.66222382 32.80256271]
[130.71719360 37.95502090]
[143.33605957 46.00822449]
[153.92884827 56.58567429]
[162.00035095 69.19284058]
[167.17320251 83.24031830]
[169.20553589 98.07135010]
[168.00234985 112.99254608]
[163.61988831 127.30631256]
[156.26306152 140.34344482]
[146.27578735 151.49443054]
[134.12503052 160.23793030]
[120.37882996 166.16516113]
[105.67988586 168.99900818]
[90.71538544 168.60700989]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
