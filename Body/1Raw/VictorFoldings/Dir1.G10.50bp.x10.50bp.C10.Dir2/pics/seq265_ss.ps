%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:27 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CAAAAAAUUUGGGGGGGGGGCCACCAAACCCCCCCUCCCCCGCUUCUGGCCACAGCACUUAAACACAUCUxxxxxxxxxxAUGGCUUUCUCAACUUUUAAAGGAUAACAGCUAUCCAUUGGUCUUAGGCCCCCCCCCCCCCCAAAAAUUU\
) } def
/len { sequence length } bind def

/coor [
[94.70080566 480.17221069]
[82.14258575 471.82107544]
[72.05636597 460.60861206]
[65.07617188 447.23971558]
[61.64078522 432.55471802]
[61.96616364 417.47674561]
[66.03184509 402.95364380]
[73.58226776 389.89828491]
[84.14279938 379.13140869]
[97.04959106 371.32977295]
[111.49131775 366.98382568]
[110.86734009 351.99679565]
[110.24336243 337.00976562]
[109.61938477 322.02276611]
[108.99540710 307.03573608]
[108.37142944 292.04873657]
[107.74745178 277.06170654]
[107.12347412 262.07470703]
[106.49949646 247.08767700]
[105.87551880 232.10066223]
[105.25154114 217.11364746]
[104.62757111 202.12663269]
[103.38069153 187.17854309]
[101.51307678 172.29527283]
[99.64546967 157.41198730]
[97.77785492 142.52870178]
[95.91024017 127.64543152]
[66.78903198 108.87197113]
[74.69406128 67.98992157]
[69.58978271 82.23075867]
[60.33305740 94.19605255]
[47.83076859 102.71356964]
[33.30776215 106.94883728]
[18.18685532 106.48693085]
[3.94943929 101.37310791]
[-8.00964928 92.10836792]
[-16.51877975 79.60037994]
[-20.74431610 65.07453918]
[-20.27227974 49.95394516]
[-15.14892101 35.71995544]
[-5.87617016 23.76708031]
[6.63752127 15.26633167]
[21.16618919 11.05053043]
[36.28646469 11.53269768]
[50.51701355 16.66559410]
[62.46367645 25.94635201]
[70.95603943 38.46573639]
[75.16210175 52.99722672]
[83.92830658 40.82538986]
[78.73289490 26.75387001]
[73.53747559 12.68235111]
[68.34206390 -1.38916850]
[53.46137619 0.88021404]
[38.42849350 0.10733666]
[23.85900307 -3.67615175]
[10.34951210 -10.31532001]
[-1.54677153 -19.53829765]
[-11.34270287 -30.96740913]
[-18.63714600 -44.13463974]
[-23.13139534 -58.50080490]
[-24.64141655 -73.47760773]
[-23.10537529 -88.45176697]
[-18.58617020 -102.81009674]
[-11.26885891 -115.96463776]
[-1.45308340 -127.37670898]
[10.45920753 -136.57901001]
[23.98021507 -143.19468689]
[38.55625916 -146.95285034]
[53.59046173 -147.69961548]
[68.46717834 -145.40437317]
[82.57722473 -140.16113281]
[95.34279633 -132.18460083]
[106.24114990 -121.80141449]
[114.82601166 -109.43674469]
[120.74583435 -95.59692383]
[123.75820160 -80.84868622]
[123.73976135 -65.79595947]
[120.69126892 -51.05514526]
[114.73755646 -37.22987366]
[106.12242126 -24.88627434]
[95.19866180 -14.52981472]
[82.41358185 -6.58458424]
[87.60899353 7.48693514]
[92.80441284 21.55845451]
[97.99983215 35.62997437]
[112.70778656 38.57545471]
[122.92127228 27.58979225]
[133.13475037 16.60412788]
[128.54554749 1.94688427]
[131.91545105 -13.03775024]
[142.33799744 -24.31898499]
[157.00955200 -28.86222267]
[171.98355103 -25.44535828]
[183.23205566 -14.98750973]
[187.72929382 -0.30178508]
[184.26550293 14.66142845]
[173.77244568 25.87710190]
[159.07269287 30.32827568]
[144.12040710 26.81760788]
[133.90693665 37.80327225]
[123.69345093 48.78893661]
[130.87596130 61.95751953]
[145.64201355 59.31865311]
[160.40808105 56.67979050]
[175.17413330 54.04092789]
[189.94018555 51.40206146]
[200.25453186 39.11410141]
[216.28826904 39.66078949]
[225.74168396 52.62274551]
[221.36293030 68.05667114]
[206.51101685 74.12297821]
[192.57905579 66.16811371]
[177.81298828 68.80698395]
[163.04693604 71.44584656]
[148.28088379 74.08470917]
[133.51483154 76.72357178]
[133.00227356 109.61924744]
[110.79351807 125.77781677]
[112.66113281 140.66108704]
[114.52874756 155.54437256]
[116.39636230 170.42765808]
[118.26396942 185.31092834]
[121.11088562 188.78318787]
[122.52098846 192.60191345]
[122.56608582 196.25976562]
[121.47939301 199.32783508]
[119.61458588 201.50265503]
[120.23856354 216.48966980]
[120.86254120 231.47668457]
[121.48651886 246.46369934]
[122.11049652 261.45071411]
[122.73447418 276.43774414]
[123.35844421 291.42474365]
[123.98242188 306.41177368]
[124.60639954 321.39877319]
[125.23037720 336.38580322]
[125.85435486 351.37283325]
[126.47833252 366.35983276]
[141.23133850 369.49026489]
[154.74197388 376.19204712]
[166.16094971 386.04382324]
[174.77046204 398.42636108]
[180.02931213 412.56124878]
[181.60691833 427.55999756]
[179.40411377 442.47970581]
[173.55937195 456.38259888]
[164.44009399 468.39465332]
[152.61952209 477.76080322]
[138.84071350 483.89230347]
[123.96981049 486.40368652]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 138]
[12 137]
[13 136]
[14 135]
[15 134]
[16 133]
[17 132]
[18 131]
[19 130]
[20 129]
[21 128]
[22 127]
[23 122]
[24 121]
[25 120]
[26 119]
[27 118]
[29 48]
[49 85]
[50 84]
[51 83]
[52 82]
[86 101]
[87 100]
[88 99]
[102 116]
[103 115]
[104 114]
[105 113]
[106 112]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
