%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:42 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACUUAAUAUGGGGGGGGGGGACUAGCUUACACAAUAGCUUUUAUAGUAAAGAUACCUCUUUACGGACUCxxxxxxxxxxCACUUUCCUAGGACUUCUAACAGCCCUAGACCUCAACUACCUAACCAACACCCCCCCCCCAACUUAAAAU\
) } def
/len { sequence length } bind def

/coor [
[86.46697235 387.72964478]
[71.97727966 383.52117920]
[59.07105255 375.70507812]
[48.62825012 364.81423950]
[41.36088562 351.59121704]
[37.76446152 336.93762207]
[38.08418274 321.85250854]
[42.29825211 307.36444092]
[50.11935043 294.46124268]
[61.01421738 284.02264404]
[74.24002838 276.76040649]
[88.89501953 273.16961670]
[89.20707703 258.17288208]
[89.51913452 243.17611694]
[89.83118439 228.17936707]
[90.14324188 213.18260193]
[90.45529938 198.18585205]
[90.76735687 183.18910217]
[91.07941437 168.19235229]
[91.39147186 153.19558716]
[91.70352173 138.19883728]
[75.12364960 134.37419128]
[60.54743576 123.20956421]
[51.23328781 105.83990479]
[49.78459549 84.82915497]
[35.14109421 88.07998657]
[20.49759483 91.33081055]
[5.85409307 94.58163452]
[-0.20546921 108.86663818]
[-13.52158833 116.83285522]
[-28.97394371 115.41711426]
[-40.62078857 105.16378784]
[-43.98367691 90.01550293]
[-37.76950836 75.79707336]
[-24.36775398 67.97578430]
[-8.93166447 69.55906677]
[2.60326743 79.93813324]
[17.24676895 76.68730927]
[31.89027023 73.43648529]
[46.53377151 70.18565369]
[48.46235275 62.93785858]
[33.96675491 59.08069992]
[19.47121811 55.22331619]
[23.32882500 40.72783661]
[37.82391357 44.58510208]
[52.31951141 48.44226074]
[54.24808884 41.19446182]
[43.15677643 31.09581375]
[32.06546021 20.99716377]
[20.97414398 10.89851475]
[9.88282871 0.79986489]
[-1.20848644 -9.29878426]
[-12.29980183 -19.39743423]
[-28.42813492 -22.36541748]
[-33.66625977 -37.90549850]
[-22.62564278 -50.03137207]
[-6.66392517 -46.26898193]
[-2.20115232 -30.48875046]
[8.89016342 -20.39010048]
[19.98147774 -10.29145050]
[31.07279396 -0.19280094]
[42.16410828 9.90584850]
[53.25542450 20.00449753]
[64.34674072 30.10314751]
[78.18995667 24.32687569]
[78.81393433 9.33985901]
[79.43791199 -5.64715672]
[65.25093842 -10.89929962]
[53.38258743 -20.27999115]
[44.99559021 -32.87020493]
[40.91162872 -47.43648148]
[41.53079987 -62.55176544]
[46.79244614 -76.73521423]
[56.18109131 -88.59728241]
[68.77692413 -96.97583771]
[83.34593201 -101.05004120]
[98.46080017 -100.42073822]
[112.64071655 -95.14958954]
[124.49649048 -85.75299835]
[132.86660767 -73.15155792]
[136.93104553 -58.57982254]
[136.29161072 -43.46538162]
[131.01097107 -29.28899574]
[121.60643768 -17.43952370]
[108.99938202 -9.07785416]
[94.42492676 -5.02317953]
[93.80094910 9.96383667]
[93.17697144 24.95085335]
[105.06935120 34.09258652]
[119.39195251 29.63577080]
[133.71455383 25.17895508]
[148.03713989 20.72213936]
[146.75224304 5.71670389]
[148.72357178 -9.21406937]
[153.85890198 -23.37183952]
[161.91804504 -36.09442139]
[172.52409363 -46.78675842]
[185.18093872 -54.94875336]
[199.29663086 -60.19864655]
[214.21093750 -62.29089737]
[229.22628784 -61.12764740]
[243.64039612 -56.76330185]
[256.77908325 -49.40198898]
[268.02783203 -39.38801575]
[276.86053467 -27.18974495]
[282.86401367 -13.37771797]
[285.75753784 1.40205252]
[285.40573120 16.45829010]
[281.82507324 31.08678818]
[275.18304443 44.60334396]
[265.79025269 56.37576675]
[254.08609009 65.85343170]
[240.61791992 72.59306335]
[226.01570129 76.27942657]
[210.96240234 76.74010468]
[196.16209412 73.95355225]
[182.30700684 68.05010223]
[170.04516602 59.30587387]
[159.95010376 48.12984467]
[152.49395752 35.04473877]
[138.17137146 39.50155258]
[123.84877014 43.95837021]
[109.52616882 48.41518402]
[125.71579742 56.20588303]
[137.83280945 68.67947388]
[144.67794800 84.03656006]
[145.77261353 100.23694611]
[141.37504578 115.26816559]
[132.40246582 127.39521790]
[120.27423096 135.36048889]
[106.70027924 138.51089478]
[106.38822174 153.50764465]
[106.07616425 168.50440979]
[105.76410675 183.50115967]
[105.45205688 198.49790955]
[105.13999939 213.49465942]
[104.82794189 228.49142456]
[104.51588440 243.48817444]
[104.20382690 258.48492432]
[103.89176941 273.48168945]
[118.38471222 277.67895508]
[131.29696655 285.48510742]
[141.74818420 296.36788940]
[149.02575684 309.58526611]
[152.63349915 324.23608398]
[152.32542419 339.32144165]
[148.12254333 353.81274414]
[140.31141663 366.72198486]
[129.42460632 377.16900635]
[116.20440674 384.44146729]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[25 40]
[26 39]
[27 38]
[28 37]
[47 64]
[48 63]
[49 62]
[50 61]
[51 60]
[52 59]
[53 58]
[65 88]
[66 87]
[67 86]
[89 123]
[90 122]
[91 121]
[92 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
