%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:23 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCUAACCUCCCUGGGGGGGGGGGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxCCUGCUCGCAUCUGCUAUAGUGGAGGCCGGAGCAGGAACAGGUUGAACAGCCCCCCCCCCUCUACCCUCCCU\
) } def
/len { sequence length } bind def

/coor [
[88.22464752 448.96551514]
[74.06404877 443.81051636]
[61.47430038 435.52832031]
[51.13436508 424.56555176]
[43.60185242 411.51342773]
[39.28298569 397.07580566]
[38.41067886 382.03137207]
[41.03196716 367.19134521]
[47.00549698 353.35614014]
[56.00911331 341.27175903]
[67.55726624 331.58999634]
[81.02718353 324.83291626]
[95.69244385 321.36495972]
[95.69244385 306.36495972]
[95.69244385 291.36495972]
[95.69244385 276.36495972]
[95.69244385 261.36495972]
[95.69244385 246.36494446]
[95.69244385 231.36494446]
[95.69244385 216.36494446]
[95.69244385 201.36494446]
[95.69244385 186.36494446]
[95.38844299 171.36802673]
[94.78055573 156.38035583]
[94.17267609 141.39266968]
[93.56478882 126.40499115]
[81.88279724 120.25839996]
[74.47478485 109.33269501]
[59.51251221 110.39588928]
[44.55023956 111.45908356]
[29.58796692 112.52227783]
[23.51210785 126.57014465]
[11.59655094 136.17630005]
[-3.42059541 139.13330078]
[-18.08850098 134.76167297]
[-29.03658867 124.06597137]
[-33.74906540 109.50399780]
[-31.14304352 94.42198181]
[-21.81736374 82.28565979]
[-7.91500044 75.88387299]
[7.36938524 76.68770599]
[20.52355385 84.51243591]
[28.52477264 97.56000519]
[43.48704529 96.49681091]
[58.44931793 95.43361664]
[73.41159058 94.37042236]
[77.20088959 85.20688629]
[84.02526093 78.01265717]
[92.97622681 73.74542999]
[102.86222076 72.97328186]
[108.49697876 59.07186127]
[102.58248901 44.66156769]
[108.49496460 30.64381981]
[122.26942444 25.09406471]
[127.90418243 11.19264221]
[133.53894043 -2.70877981]
[139.17369080 -16.61020088]
[144.66728210 -30.56801224]
[150.01913452 -44.58077621]
[155.37100220 -58.59354401]
[153.06671143 -74.24604797]
[164.83573914 -83.37506866]
[170.18760681 -97.38783264]
[158.37817383 -88.13917542]
[144.83332825 -81.69426727]
[130.20756531 -78.36454773]
[115.20765686 -78.31092072]
[100.55845642 -81.53597260]
[86.96785736 -87.88385773]
[75.09260559 -97.04782867]
[65.50655365 -108.58505249]
[58.67292404 -121.93801117]
[54.92194366 -136.46144104]
[54.43487549 -151.45353699]
[57.23525620 -166.18981934]
[63.18775558 -179.95817566]
[72.00473785 -192.09327698]
[83.26013184 -202.00872803]
[96.41003418 -209.22537231]
[110.81901550 -213.39447021]
[125.79076385 -214.31457520]
[140.60182190 -211.94120789]
[154.53643799 -206.38906860]
[166.92126465 -197.92643738]
[177.15782166 -186.96228027]
[184.75144958 -174.02639771]
[189.33520508 -159.74392700]
[190.68756104 -144.80500793]
[188.74317932 -129.93156433]
[183.59704590 -115.84434509]
[195.27015686 -125.26445007]
[201.15048218 -139.95228577]
[215.91401672 -141.92387390]
[227.58714294 -151.34396362]
[239.26025391 -160.76406860]
[250.93338013 -170.18417358]
[262.60647583 -179.60427856]
[268.00125122 -195.09068298]
[284.15872192 -197.89569092]
[294.45748901 -185.13374329]
[288.30307007 -169.93324280]
[272.02658081 -167.93116760]
[260.35348511 -158.51106262]
[248.68035889 -149.09095764]
[237.00724792 -139.67085266]
[225.33412170 -130.25074768]
[220.28874207 -116.23670959]
[204.69026184 -113.59133148]
[193.01715088 -104.17122650]
[184.20036316 -92.03597260]
[178.84851074 -78.02320862]
[181.53559875 -63.37299347]
[169.38375854 -53.24168396]
[164.03190613 -39.22891998]
[158.68005371 -25.21615410]
[159.23477173 -17.80184937]
[153.07511902 -10.97544575]
[147.44035339 2.92597604]
[141.80560303 16.82739830]
[136.17085266 30.72881889]
[142.19361877 44.30312347]
[136.67721558 58.48141098]
[122.39839935 64.70661926]
[116.76364136 78.60803986]
[126.70312500 94.94243622]
[123.42523956 113.78019714]
[108.55246735 125.79711151]
[109.16035461 140.78479004]
[109.76823425 155.77246094]
[110.37612152 170.76014709]
[113.62907410 176.62510681]
[113.41855621 182.37847900]
[110.69244385 186.36494446]
[110.69244385 201.36494446]
[110.69244385 216.36494446]
[110.69244385 231.36494446]
[110.69244385 246.36494446]
[110.69244385 261.36495972]
[110.69244385 276.36495972]
[110.69244385 291.36495972]
[110.69244385 306.36495972]
[110.69244385 321.36495972]
[125.35770416 324.83291626]
[138.82762146 331.58999634]
[150.37577820 341.27175903]
[159.37939453 353.35614014]
[165.35292053 367.19134521]
[167.97421265 382.03137207]
[167.10191345 397.07580566]
[162.78303528 411.51342773]
[155.25053406 424.56555176]
[144.91059875 435.52832031]
[132.32084656 443.81051636]
[118.16024017 448.96551514]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 130]
[24 129]
[25 128]
[26 127]
[28 46]
[29 45]
[30 44]
[31 43]
[50 124]
[51 123]
[54 120]
[55 119]
[56 118]
[57 117]
[58 115]
[59 114]
[60 113]
[62 111]
[63 110]
[90 109]
[91 108]
[93 106]
[94 105]
[95 104]
[96 103]
[97 102]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
