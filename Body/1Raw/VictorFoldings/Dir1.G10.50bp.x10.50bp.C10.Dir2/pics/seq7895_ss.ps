%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:52 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCGUAUUUACCGGGGGGGGGGCUAUAGCACCCCCUCUACCCCCUCUAGAGCCCACUGUAAAGCUAACUUAGxxxxxxxxxxUAGUUUAACCAAAACAUCAGAUUGUGAAUCUGACAACAGAGGCUUACGACCCCCCCCCCCCCCUUAUUUACC\
) } def
/len { sequence length } bind def

/coor [
[22.67797279 528.51892090]
[8.97581959 522.25805664]
[-2.98929644 513.10467529]
[-12.61720943 501.51803589]
[-19.42498779 488.07922363]
[-23.07115555 473.46234131]
[-23.37282372 458.40057373]
[-20.31485939 443.64941406]
[-14.05064964 429.94876099]
[-4.89440441 417.98587036]
[6.69460297 408.36077881]
[20.13507271 401.55624390]
[34.75283432 397.91363525]
[34.44883347 382.91671753]
[34.14482880 367.91979980]
[33.84082413 352.92285156]
[33.53681946 337.92593384]
[33.23281479 322.92901611]
[32.92881012 307.93209839]
[32.62480545 292.93518066]
[32.32080078 277.93826294]
[32.01679611 262.94134521]
[20.73502541 253.05592346]
[5.82813025 254.72460938]
[-9.07876492 256.39328003]
[-21.93254280 265.61776733]
[-35.44155121 259.34432983]
[-50.34844971 261.01300049]
[-54.19445038 275.69540405]
[-63.08780289 287.99468994]
[-75.82575226 296.24752808]
[-90.68560028 299.33773804]
[-105.65766907 296.84741211]
[-118.71710968 289.11337280]
[-128.09773254 277.18157959]
[-132.53089905 262.66564941]
[-131.41706848 247.52882385]
[-124.90684509 233.81819153]
[-113.88070679 223.38801575]
[-99.82984924 217.64888000]
[-84.65451813 217.37695312]
[-70.40707397 222.60903931]
[-59.01434708 232.63751221]
[-52.01712418 246.10610962]
[-37.11022949 244.43743896]
[-25.32269287 235.33232117]
[-10.74744129 241.48638916]
[4.15945339 239.81770325]
[19.06634903 238.14903259]
[31.20160294 229.33226013]
[37.39509201 215.67060852]
[43.58858490 202.00895691]
[49.78207397 188.34730530]
[45.81609726 176.88043213]
[50.91157150 165.42787170]
[62.82365417 160.38237000]
[69.29274750 146.84904480]
[75.76184845 133.31571960]
[82.23094940 119.78240204]
[67.39250183 100.81033325]
[72.78050995 72.56888580]
[65.76828003 59.30884552]
[58.75605392 46.04880524]
[44.58819199 37.79024887]
[44.92694473 21.39460182]
[59.42383575 13.72829723]
[73.16570282 22.67777252]
[72.01609039 39.03657532]
[79.02832031 52.29661560]
[86.04055023 65.55665588]
[93.53708649 65.78463745]
[93.74047852 50.78601837]
[93.94387054 35.78739548]
[94.14726257 20.78877449]
[94.35065460 5.79015350]
[87.93826294 -7.77012825]
[96.15509796 -20.31937599]
[111.14818573 -19.86404991]
[118.58836365 -6.83931398]
[111.36380768 6.30755568]
[110.65539551 21.29081726]
[109.94698334 36.27407837]
[109.23857117 51.25734329]
[108.53015137 66.24060822]
[116.02668762 66.46858978]
[123.83174133 53.65917206]
[131.63679504 40.84975433]
[139.44183350 28.04033470]
[137.06967163 12.17362785]
[148.10079956 0.52486694]
[164.07310486 2.02998352]
[172.73397827 15.53438091]
[167.43955994 30.67864227]
[152.25125122 35.84538651]
[144.44621277 48.65480423]
[136.64115906 61.46422195]
[128.83610535 74.27363586]
[125.05872345 79.12020111]
[120.99211121 83.67781067]
[134.94992065 78.18421936]
[148.90773010 72.69062805]
[162.86553955 67.19704437]
[176.82334900 61.70345306]
[190.78115845 56.20986176]
[204.73898315 50.71627426]
[217.26321411 39.28911591]
[231.71084595 48.16054535]
[227.18560791 64.49941254]
[210.23255920 64.67407990]
[196.27474976 70.16767120]
[182.31694031 75.66126251]
[168.35913086 81.15485382]
[154.40132141 86.64843750]
[140.44351196 92.14202881]
[126.48570251 97.63562012]
[123.10827637 113.15637207]
[111.48537445 123.98268127]
[95.76426697 126.25150299]
[89.29516602 139.78482056]
[82.82607269 153.31814575]
[76.35697174 166.85147095]
[78.23416138 185.14234924]
[63.44372177 194.54078674]
[57.25023270 208.20243835]
[51.05674362 221.86408997]
[44.86325455 235.52574158]
[47.89247894 239.40449524]
[49.94013977 243.87707520]
[50.89593887 248.69985962]
[50.70902634 253.61044312]
[49.39070129 258.34191895]
[47.01371765 262.63735962]
[47.31772232 277.63427734]
[47.62172699 292.63119507]
[47.92572784 307.62811279]
[48.22973251 322.62503052]
[48.53373718 337.62194824]
[48.83774185 352.61886597]
[49.14174652 367.61578369]
[49.44575119 382.61270142]
[49.74975586 397.60961914]
[64.50312805 400.65686035]
[78.20831299 406.91110229]
[90.17786407 416.05865479]
[99.81139374 427.64065552]
[106.62567902 441.07617188]
[110.27893066 455.69128418]
[110.58789825 470.75289917]
[107.53708649 485.50555420]
[101.27951813 499.20922852]
[92.12906647 511.17654419]
[80.54472351 520.80725098]
[67.10755920 527.61828613]
[52.49155807 531.26800537]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 141]
[14 140]
[15 139]
[16 138]
[17 137]
[18 136]
[19 135]
[20 134]
[21 133]
[22 132]
[23 49]
[24 48]
[25 47]
[27 45]
[28 44]
[50 126]
[51 125]
[52 124]
[53 123]
[56 121]
[57 120]
[58 119]
[59 118]
[61 70]
[62 69]
[63 68]
[85 97]
[86 96]
[87 95]
[88 94]
[99 115]
[100 114]
[101 113]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
