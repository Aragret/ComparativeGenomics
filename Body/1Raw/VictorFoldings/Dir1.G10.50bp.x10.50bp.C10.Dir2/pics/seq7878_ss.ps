%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:56 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCCCUAAAAGGGGGGGGGGAUCUUUGAAAUAGGGCCCGUAUUUACCCUAUAGCACCCCCUCUACCCCCUxxxxxxxxxxACCAUCAUUCCCCCUAAAUAAAUUAAAAAAACUAUUAAACCCAUAUAACCCCCCCCCCCCUCCCCCAAAA\
) } def
/len { sequence length } bind def

/coor [
[299.75082397 244.99787903]
[292.28134155 231.98312378]
[285.71743774 218.48898315]
[280.08972168 204.57835388]
[275.42443848 190.31610107]
[271.74328613 175.76872253]
[269.06350708 161.00405884]
[267.39752197 146.09094238]
[266.75314331 131.09889221]
[267.13339233 116.09781647]
[252.19908142 114.69551086]
[237.26477051 113.29320526]
[222.33045959 111.89090729]
[207.39614868 110.48860168]
[192.46185303 109.08629608]
[177.48213196 108.30644989]
[162.48294067 108.15041351]
[147.48374939 107.99437714]
[132.48457336 107.83834076]
[117.48537445 107.68230438]
[107.06054688 117.74555969]
[92.57180786 117.59483337]
[82.35858917 107.31687927]
[67.35939789 107.16084290]
[75.51976013 119.74688721]
[70.97021484 134.04029846]
[57.03610992 139.59375000]
[43.90215302 132.34812927]
[41.16820145 117.59938049]
[50.83195114 106.12792969]
[35.93004990 104.41524506]
[21.02814865 102.70255280]
[6.12624550 100.98986053]
[-8.77565670 99.27717590]
[-23.67755890 97.56448364]
[-32.76092529 109.94947052]
[-46.82630157 116.11881256]
[-62.09017181 114.41298676]
[-74.44663239 105.29084015]
[-80.57185364 91.20619202]
[-78.81818390 75.94774628]
[-69.65735626 63.61994171]
[-55.55358124 57.53889847]
[-40.30070496 59.34038544]
[-28.00167465 68.53981018]
[-21.96486855 82.66258240]
[-7.06296682 84.37526703]
[7.83893538 86.08795929]
[22.74083710 87.80065155]
[37.64273834 89.51333618]
[52.54464340 91.22602844]
[67.51543427 92.16165924]
[82.51462555 92.31769562]
[92.93945312 82.25444031]
[107.42819214 82.40516663]
[117.64141083 92.68312073]
[132.64060974 92.83915710]
[147.63978577 92.99519348]
[162.63897705 93.15122986]
[177.63816833 93.30726624]
[181.46255493 90.95448303]
[185.43652344 90.07210541]
[189.06706238 90.52057648]
[191.96060181 92.01099396]
[193.86415100 94.15199280]
[208.79846191 95.55429077]
[223.73275757 96.95659637]
[238.66706848 98.35890198]
[253.60137939 99.76120758]
[268.53567505 101.16350555]
[270.95462036 86.35386658]
[274.37857056 71.74382782]
[278.79159546 57.40150452]
[284.17306519 43.39377594]
[290.49789429 29.78594589]
[297.73663330 16.64146614]
[305.85552979 4.02162027]
[314.81668091 -8.01475143]
[324.57836914 -19.41152954]
[335.09503174 -30.11557579]
[346.31762695 -40.07698059]
[358.19387817 -49.24930573]
[370.66839600 -57.58977890]
[383.68298340 -65.05950928]
[397.17700195 -71.62368011]
[411.08752441 -77.25167847]
[425.34967041 -81.91726685]
[439.89697266 -85.59869385]
[454.66159058 -88.27878571]
[469.57467651 -89.94505310]
[484.56671143 -90.58972931]
[499.56777954 -90.20980072]
[514.50799561 -88.80705261]
[529.31762695 -86.38800812]
[543.92761230 -82.96395874]
[558.26989746 -78.55085754]
[572.27758789 -73.16929626]
[585.88537598 -66.84435272]
[599.02984619 -59.60552216]
[611.64959717 -51.48655701]
[623.68591309 -42.52531052]
[635.08264160 -32.76356125]
[645.78662109 -22.24682999]
[655.74792480 -11.02414703]
[664.92016602 0.85216087]
[673.26055908 13.32672119]
[680.73022461 26.34137154]
[687.29431152 39.83543015]
[692.92218018 53.74597931]
[697.58770752 68.00816345]
[701.26904297 82.55548859]
[703.94903564 97.32012177]
[705.61517334 112.23322296]
[706.25976562 127.22526550]
[705.87976074 142.22633362]
[704.47686768 157.16651917]
[702.05773926 171.97612000]
[698.63360596 186.58612061]
[694.22039795 200.92837524]
[688.83874512 214.93603516]
[682.51373291 228.54377747]
[675.27478027 241.68815613]
[667.15576172 254.30789185]
[658.19439697 266.34414673]
[648.43261719 277.74078369]
[637.91577148 288.44470215]
[626.69305420 298.40594482]
[614.81665039 307.57812500]
[602.34204102 315.91842651]
[589.32733154 323.38800049]
[575.83325195 329.95196533]
[561.92266846 335.57980347]
[547.66046143 340.24517822]
[533.11309814 343.92642212]
[518.34844971 346.60632324]
[503.43533325 348.27236938]
[488.44329834 348.91683960]
[473.44219971 348.53671265]
[458.50204468 347.13375854]
[443.69244385 344.71453857]
[429.08248901 341.29028320]
[414.74026489 336.87698364]
[400.73263550 331.49523926]
[387.12493896 325.17010498]
[373.98059082 317.93112183]
[361.36090088 309.81198120]
[349.32470703 300.85055542]
[337.92813110 291.08865356]
[327.22430420 280.57177734]
[317.26312256 269.34896851]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 70]
[11 69]
[12 68]
[13 67]
[14 66]
[15 65]
[16 60]
[17 59]
[18 58]
[19 57]
[20 56]
[23 53]
[24 52]
[30 51]
[31 50]
[32 49]
[33 48]
[34 47]
[35 46]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
