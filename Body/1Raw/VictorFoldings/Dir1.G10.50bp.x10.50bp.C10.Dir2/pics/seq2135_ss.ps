%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCCAAAGCUAAGAGGGGGGGGGGCCCCCGAAACCAGACGAGCUACCUAAGAACAGCUAAAAGAGCACACCCGUxxxxxxxxxxCCUUUUUCCAAGGACAAAUCAGAGAAAAAGUCUUUAACUCCACCAUUAGCCCCCCCCCCCACCCAAAGCUAAGA\
) } def
/len { sequence length } bind def

/coor [
[84.56360626 446.78979492]
[70.54887390 441.30587769]
[57.87344742 433.19293213]
[47.02454758 422.76278687]
[38.41917419 410.41638184]
[32.38809204 396.62826538]
[29.16312027 381.92840576]
[28.86822128 366.88183594]
[31.51472855 352.06692505]
[37.00091553 338.05307007]
[45.11591339 325.37896729]
[55.54779816 314.53173828]
[67.89559937 305.92837524]
[81.68469238 299.89950562]
[96.38507080 296.67691040]
[96.08871460 281.67984009]
[95.79235840 266.68276978]
[95.49600220 251.68571472]
[95.19963837 236.68862915]
[94.90328217 221.69155884]
[94.60692596 206.69448853]
[94.31056976 191.69741821]
[94.01421356 176.70034790]
[93.71785736 161.70327759]
[93.42150116 146.70620728]
[80.65529633 144.33392334]
[68.71479797 138.45535278]
[58.56573486 129.35198975]
[51.07926941 117.57146454]
[36.40092087 120.66114044]
[30.18471336 134.87867737]
[16.78184128 142.69805908]
[1.34597981 141.11256409]
[-10.18746662 130.73184204]
[-13.38365269 115.54750824]
[-7.01357889 101.39823914]
[6.47333097 93.72472382]
[21.89108467 95.47757721]
[33.31124115 105.98279572]
[47.98958969 102.89311981]
[49.32152557 87.95236969]
[35.42118454 82.31495667]
[21.52083969 76.67754364]
[7.62049484 71.04013062]
[-4.44544172 80.54322052]
[-19.64868164 82.72428894]
[-33.89963150 76.99663544]
[-43.36485672 64.90097046]
[-45.49825668 49.69096756]
[-39.72596359 35.45804214]
[-27.60068893 26.03077698]
[-12.38407326 23.94506264]
[1.83068931 29.76194191]
[11.21990013 41.91670609]
[13.25790882 57.13978577]
[27.15825272 62.77719879]
[41.05859756 68.41461182]
[54.95894241 74.05202484]
[80.40642548 54.46243668]
[111.00467682 54.13451004]
[116.77913666 40.29053879]
[122.55360413 26.44656372]
[128.32806396 12.60259056]
[134.10252380 -1.24138284]
[122.10699463 7.76458025]
[108.15309143 13.26808548]
[93.23944092 14.87526608]
[78.43336487 12.47110176]
[64.79447174 6.22765017]
[53.29886246 -3.40826702]
[44.76922607 -15.74704075]
[39.81600571 -29.90562820]
[38.79368591 -44.87075043]
[41.77542496 -59.57140350]
[48.54783630 -72.95551300]
[58.62623596 -84.06523132]
[71.28935242 -92.10546875]
[85.63093567 -96.50081635]
[100.62460327 -96.93671417]
[115.19730377 -93.38196564]
[128.30613708 -86.09097290]
[139.01293945 -75.58552551]
[146.55146790 -62.61746216]
[150.38220215 -48.11486435]
[150.23100281 -33.11562347]
[146.10726929 -18.68991852]
[156.97256470 -29.03135109]
[167.83787537 -39.37277985]
[178.70317078 -49.71421051]
[189.56848145 -60.05564499]
[200.43377686 -70.39707184]
[211.29907227 -80.73850250]
[205.48611450 -94.75898743]
[205.13436890 -109.93267059]
[210.29142761 -124.20744324]
[220.25982666 -135.65275574]
[233.69143677 -142.72073364]
[248.76972961 -144.45549011]
[263.45550537 -140.62240601]
[275.76263428 -131.73986816]
[284.02664185 -119.00918579]
[287.12994385 -104.15206146]
[284.65280151 -89.17781067]
[276.93023682 -76.11157227]
[265.00668335 -66.72045135]
[250.49467468 -62.27451706]
[235.35687256 -63.37504959]
[221.64051819 -69.87319946]
[210.77520752 -59.53177261]
[199.90991211 -49.19034195]
[189.04460144 -38.84891129]
[178.17930603 -28.50747871]
[167.31399536 -18.16604805]
[156.44869995 -7.82461643]
[147.94650269 4.53307819]
[142.17202759 18.37705231]
[136.39756775 32.22102356]
[130.62310791 46.06499863]
[124.84865570 59.90897369]
[131.34191895 64.75187683]
[136.91079712 70.63439178]
[141.39103699 77.38300323]
[144.65048218 84.79867554]
[146.59303284 92.66269684]
[147.16136169 100.74312592]
[146.33872986 108.80163574]
[144.14938354 116.60054779]
[140.65789795 123.90985107]
[135.96726990 130.51396179]
[130.21582031 136.21809387]
[123.57319641 140.85401917]
[116.23530579 144.28500366]
[108.41857147 146.40985107]
[108.71492767 161.40692139]
[109.01128387 176.40399170]
[109.30764008 191.40106201]
[109.60399628 206.39813232]
[109.90036011 221.39520264]
[110.19671631 236.39227295]
[110.49307251 251.38934326]
[110.78942871 266.38641357]
[111.08578491 281.38348389]
[111.38214111 296.38055420]
[126.19835663 299.01986694]
[140.21487427 304.49926758]
[152.89291382 312.60809326]
[163.74519348 323.03472900]
[172.35456848 335.37832642]
[178.39012146 349.16452026]
[181.61984253 363.86331177]
[181.91961670 378.90979004]
[179.27790833 393.72558594]
[173.79624939 407.74121094]
[165.68536377 420.41793823]
[155.25698853 431.26852417]
[142.91197205 439.87591553]
[129.12483215 445.90921021]
[114.42549133 449.13656616]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[15 143]
[16 142]
[17 141]
[18 140]
[19 139]
[20 138]
[21 137]
[22 136]
[23 135]
[24 134]
[25 133]
[29 40]
[30 39]
[41 58]
[42 57]
[43 56]
[44 55]
[60 119]
[61 118]
[62 117]
[63 116]
[64 115]
[86 114]
[87 113]
[88 112]
[89 111]
[90 110]
[91 109]
[92 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
