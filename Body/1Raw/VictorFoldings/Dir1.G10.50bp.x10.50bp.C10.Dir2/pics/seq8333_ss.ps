%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUCACCACCCGGGGGGGGGGAACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACxxxxxxxxxxUAGCAGAAAAUAGCCCACUAAUCCAAACUCUAACACUAUGCUUAGGCGCUCCCCCCCCCCAUCACCACUC\
) } def
/len { sequence length } bind def

/coor [
[85.19730377 390.08670044]
[71.35136414 384.07067871]
[59.64270401 374.54125977]
[50.94018173 362.20556641]
[45.88957977 347.97906494]
[44.86568832 332.91738892]
[47.94448853 318.13821411]
[54.89751053 304.73828125]
[65.20879364 293.71194458]
[78.11317444 285.87744141]
[92.65306091 281.81613159]
[92.65306091 266.81613159]
[92.65306091 251.81613159]
[92.65306091 236.81613159]
[92.65306091 221.81613159]
[92.65306091 206.81613159]
[92.65306091 191.81613159]
[92.65306091 176.81613159]
[92.65306091 161.81613159]
[92.65306091 146.81613159]
[92.65306091 131.81613159]
[84.91576385 119.08885956]
[92.65306091 105.28868866]
[90.28324890 102.15493774]
[89.33691406 97.97760010]
[90.25396729 93.43037415]
[93.15031433 89.36036682]
[86.28886414 75.10444641]
[94.80496979 62.88457489]
[95.74059296 47.91378403]
[96.67622375 32.94299316]
[97.61185455 17.97220039]
[90.75040436 3.71628475]
[99.26651001 -8.50358868]
[100.20213318 -23.47438049]
[85.33444977 -25.51377487]
[70.65798187 -28.64562416]
[56.25288773 -32.85282135]
[42.19784546 -38.11238480]
[28.56962013 -44.39559555]
[15.44264603 -51.66812897]
[2.88861656 -59.89026642]
[-9.02390003 -69.01710510]
[-20.22984314 -78.99879456]
[-30.66800499 -89.78081512]
[-40.28137970 -101.30427551]
[-49.01745987 -113.50624847]
[-56.82853317 -126.32008362]
[-63.67193222 -139.67579651]
[-69.51028442 -153.50044250]
[-74.31170654 -167.71852112]
[-78.04997253 -182.25236511]
[-80.70465851 -197.02259827]
[-82.26126862 -211.94854736]
[-82.71130371 -226.94871521]
[-82.05230713 -241.94114685]
[-80.28787231 -256.84396362]
[-77.42763519 -271.57577515]
[-73.48722839 -286.05612183]
[-68.48816681 -300.20590210]
[-62.45774841 -313.94784546]
[-55.42891693 -327.20690918]
[-47.44005966 -339.91067505]
[-38.53480911 -351.98974609]
[-28.76180267 -363.37814331]
[-18.17441940 -374.01367188]
[-6.83048391 -383.83825684]
[5.20804691 -392.79821777]
[17.87542152 -400.84463501]
[31.10245705 -407.93356323]
[44.81690598 -414.02624512]
[58.94387054 -419.08947754]
[73.40618896 -423.09555054]
[88.12487030 -426.02258301]
[103.01952362 -427.85461426]
[118.00881195 -428.58163452]
[133.01084900 -428.19967651]
[147.94372559 -426.71081543]
[162.72584534 -424.12316895]
[177.27650452 -420.45089722]
[191.51622009 -415.71401978]
[205.36721802 -409.93847656]
[218.75384521 -403.15573120]
[231.60298157 -395.40289307]
[243.84446716 -386.72225952]
[255.41143799 -377.16128540]
[266.24072266 -366.77212524]
[276.27313232 -355.61160278]
[285.45394897 -343.74063110]
[293.73294067 -331.22402954]
[301.06497192 -318.13018799]
[307.40994263 -304.53060913]
[312.73324585 -290.49957275]
[317.00576782 -276.11370850]
[320.20416260 -261.45159912]
[322.31100464 -246.59333801]
[323.31475830 -231.62004089]
[323.20993042 -216.61349487]
[321.99713135 -201.65567017]
[319.68298340 -186.82827759]
[316.28009033 -172.21226501]
[311.80703735 -157.88749695]
[306.28829956 -143.93218994]
[299.75399780 -130.42256165]
[292.23977661 -117.43241119]
[283.78674316 -105.03267670]
[274.44104004 -93.29109192]
[264.25369263 -82.27177429]
[253.28038025 -72.03491211]
[241.58099365 -62.63642120]
[229.21945190 -54.12762833]
[216.26327515 -46.55500793]
[202.78320312 -39.95991898]
[188.85289001 -34.37838364]
[174.54841614 -29.84088135]
[159.94787598 -26.37220192]
[145.13104248 -23.99128723]
[130.17884827 -22.71113968]
[115.17292786 -22.53875160]
[114.23729706 -7.56795979]
[121.16566467 5.61714506]
[112.58264160 18.90782928]
[111.64701843 33.87862015]
[110.71138763 48.84941101]
[109.77575684 63.82020569]
[116.70412445 77.00531006]
[108.12110138 90.29598999]
[107.65306091 105.28868866]
[115.39035797 119.08885956]
[107.65306091 131.81613159]
[107.65306091 146.81613159]
[107.65306091 161.81613159]
[107.65306091 176.81613159]
[107.65306091 191.81613159]
[107.65306091 206.81613159]
[107.65306091 221.81613159]
[107.65306091 236.81613159]
[107.65306091 251.81613159]
[107.65306091 266.81613159]
[107.65306091 281.81613159]
[122.19294739 285.87744141]
[135.09733582 293.71194458]
[145.40861511 304.73828125]
[152.36163330 318.13821411]
[155.44042969 332.91738892]
[154.41654968 347.97906494]
[149.36593628 362.20556641]
[140.66342163 374.54125977]
[128.95475769 384.07067871]
[115.10881805 390.08670044]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[23 128]
[27 127]
[29 125]
[30 124]
[31 123]
[32 122]
[34 120]
[35 119]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
