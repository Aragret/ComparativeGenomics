%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:39 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUAGAGGAGGGGGGGGGGGACAAGUCGUAACAUGGUAAGUGUACUGGAAAGUGCACUUGGACGAACCAGxxxxxxxxxxAUAAGCUUCUGACUCUUACCUCCCUCUCUCCUACUCCUGCUCGCAUCUGCCCCCCCCCCCUAUAGUGGAG\
) } def
/len { sequence length } bind def

/coor [
[83.33353424 395.84197998]
[70.46026611 387.93908691]
[60.33596802 376.72857666]
[53.78138733 363.11926270]
[51.32786560 348.21432495]
[53.17430115 333.22207642]
[59.17101288 319.35787964]
[68.83187866 307.74563599]
[81.37372589 299.32666016]
[95.77984619 294.78350830]
[95.46778870 279.78674316]
[95.15573120 264.79000854]
[94.84367371 249.79324341]
[94.53162384 234.79649353]
[94.21956635 219.79974365]
[93.90750885 204.80299377]
[93.59545135 189.80622864]
[93.28339386 174.80947876]
[92.97133636 159.81272888]
[92.65928650 144.81597900]
[89.35433197 138.15092468]
[92.50000000 129.50473022]
[92.50000000 114.50473022]
[83.91878510 110.47136688]
[77.98981476 101.33965302]
[64.08725739 106.97160339]
[54.43506622 120.22933197]
[38.15821075 118.23031616]
[32.00092697 103.03098297]
[42.29729843 90.26708984]
[58.45529938 93.06905365]
[72.35785675 87.43709564]
[81.74501801 75.73747253]
[84.23013306 60.94476318]
[86.71525574 46.15205383]
[72.90081024 47.51794434]
[62.15359879 40.08156586]
[58.99087906 28.23980713]
[45.46669006 21.75164223]
[31.94249916 15.26347733]
[18.41831017 8.77531242]
[4.89411974 2.28714752]
[-8.63007069 -4.20101738]
[-22.15426064 -10.68918228]
[-35.67845154 -17.17734718]
[-49.20264053 -23.66551208]
[-65.50395203 -21.87687111]
[-74.98412323 -35.25814056]
[-67.89076233 -50.04381943]
[-51.52091599 -51.02367020]
[-42.71447372 -37.18970108]
[-29.19028473 -30.70153809]
[-15.66609478 -24.21337318]
[-2.14190531 -17.72520828]
[11.38228416 -11.23704243]
[24.90647507 -4.74887753]
[38.43066406 1.73928773]
[51.95485306 8.22745323]
[65.47904205 14.71561813]
[73.53057098 10.26440239]
[83.18880463 10.49221611]
[91.80863190 15.79819775]
[96.80036163 25.13025665]
[106.78308868 13.93449211]
[116.76581573 2.73872590]
[116.81762695 -10.20156670]
[125.41684723 -19.32693672]
[137.52958679 -20.09436035]
[147.74305725 -31.08002663]
[157.95654297 -42.06568909]
[148.38302612 -53.64165115]
[140.40243530 -66.36820221]
[134.15132141 -80.02758026]
[129.73664856 -94.38604736]
[127.23395538 -109.19792175]
[126.68607330 -124.20974731]
[128.10237122 -139.16464233]
[131.45861816 -153.80673218]
[136.69738770 -167.88545227]
[143.72901917 -181.15989685]
[152.43322754 -193.40293884]
[162.66104126 -204.40507507]
[174.23745728 -213.97802734]
[186.96438599 -221.95802307]
[200.62405396 -228.20848083]
[214.98274231 -232.62248230]
[229.79472351 -235.12446594]
[244.80657959 -235.67163086]
[259.76141357 -234.25462341]
[274.40335083 -230.89767456]
[288.48181152 -225.65823364]
[301.75592041 -218.62596130]
[313.99853516 -209.92118835]
[325.00018311 -199.69285583]
[334.57260132 -188.11598206]
[342.55197144 -175.38867188]
[348.80178833 -161.72869873]
[353.21511841 -147.36981201]
[355.71640015 -132.55769348]
[356.26284790 -117.54582214]
[354.84512329 -102.59105682]
[351.48748779 -87.94928741]
[346.24737549 -73.87107086]
[339.21447754 -60.59728622]
[330.50909424 -48.35507965]
[320.28024292 -37.35391998]
[308.70291138 -27.78206062]
[295.97521973 -19.80328369]
[282.31497192 -13.55411816]
[267.95584106 -9.14149475]
[253.14363098 -6.64091873]
[238.13172913 -6.09517908]
[223.17703247 -7.51361418]
[208.53541565 -10.87195206]
[194.45744324 -16.11272812]
[181.18400574 -23.14626503]
[168.94221497 -31.85221100]
[158.72872925 -20.86654663]
[148.51524353 -9.88088131]
[145.55537415 7.38872004]
[127.96157837 12.72145271]
[117.97885132 23.91721725]
[107.99612427 35.11298370]
[101.50796509 48.63717270]
[99.02284241 63.42988205]
[96.53772736 78.22258759]
[118.23120117 94.01015472]
[107.50000000 114.50473022]
[107.50000000 129.50473022]
[107.65603638 144.50392151]
[107.96809387 159.50067139]
[108.28015137 174.49742126]
[108.59220886 189.49417114]
[108.90425873 204.49093628]
[109.21631622 219.48768616]
[109.52837372 234.48443604]
[109.84043121 249.48118591]
[110.15248871 264.47793579]
[110.46454620 279.47470093]
[110.77659607 294.47146606]
[125.35923767 298.41140747]
[138.24044800 306.30136108]
[148.37599182 317.50167847]
[154.94424438 331.10443115]
[157.41275024 346.00686646]
[155.58137512 361.00097656]
[149.59858704 374.87118530]
[139.94940186 386.49313354]
[127.41601562 394.92468262]
[113.01446533 399.48233032]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[10 140]
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[22 129]
[23 128]
[25 32]
[26 31]
[33 126]
[34 125]
[35 124]
[38 59]
[39 58]
[40 57]
[41 56]
[42 55]
[43 54]
[44 53]
[45 52]
[46 51]
[63 123]
[64 122]
[65 121]
[68 119]
[69 118]
[70 117]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
