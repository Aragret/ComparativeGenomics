%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCAUUCUAAGGGGGGGGGGUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAAAUUCUAGGCUAUAUAxxxxxxxxxxAAUCGAACCCAUCCCUGAGAAUCCAAAAUUCUCCGUGCCACCUAUCACACCCCCCCCCCCCCCAUCCUAA\
) } def
/len { sequence length } bind def

/coor [
[81.11781311 396.22567749]
[67.27187347 390.20965576]
[55.56320953 380.68023682]
[46.86068726 368.34457397]
[41.81008530 354.11804199]
[40.78619385 339.05636597]
[43.86499405 324.27719116]
[50.81801224 310.87725830]
[61.12929916 299.85092163]
[74.03367615 292.01641846]
[88.57356262 287.95510864]
[88.57356262 272.95510864]
[88.57356262 257.95510864]
[88.57356262 242.95510864]
[88.57356262 227.95510864]
[88.57356262 212.95510864]
[88.57356262 197.95510864]
[88.57356262 182.95510864]
[88.57356262 167.95510864]
[88.57356262 152.95510864]
[77.27455902 143.08938599]
[62.41151428 145.11172485]
[47.54846573 147.13406372]
[42.91357422 160.36900330]
[33.06542206 170.25863647]
[19.97502518 174.90476990]
[6.22755289 173.45059204]
[-5.48819399 166.23806763]
[-12.90565872 154.72978210]
[-27.80756187 156.44247437]
[-42.70946503 158.15516663]
[-57.61136627 159.86785889]
[-72.51326752 161.58055115]
[-87.55844879 169.39584351]
[-99.23324585 157.10212708]
[-90.65187073 142.48034668]
[-74.22595978 146.67864990]
[-59.32405472 144.96595764]
[-44.42215347 143.25326538]
[-29.52025032 141.54057312]
[-14.61834812 139.82788086]
[-8.57504177 124.87361908]
[4.24755001 114.93565369]
[20.42233086 112.78938293]
[35.56583023 119.11156464]
[45.52613449 132.27101135]
[60.38917923 130.24867249]
[75.25222778 128.22634888]
[68.08567810 114.01428223]
[67.83634186 99.24634552]
[73.58431244 86.89177704]
[62.28530884 77.02605438]
[50.98630524 67.16033173]
[35.07844162 61.29721069]
[36.30869675 44.38795853]
[52.89770126 40.88918686]
[60.85202789 55.86132812]
[72.15103149 65.72705078]
[83.45003510 75.59277344]
[91.57678986 68.46699524]
[102.63883972 64.30936432]
[104.50645447 49.42608261]
[106.37406921 34.54280090]
[92.09274292 29.79621124]
[79.01200104 22.35441208]
[67.63462067 12.50344849]
[58.39792633 0.62196565]
[51.65694427 -12.83334541]
[47.67078018 -27.34529686]
[46.59265518 -42.35609055]
[48.46401215 -57.28874588]
[53.21291351 -71.56929779]
[60.65682983 -84.64883423]
[70.50963593 -96.02462006]
[82.39261627 -105.25939941]
[95.84901428 -111.99819946]
[110.36161041 -115.98201752]
[125.37257385 -117.05770874]
[140.30493164 -115.18393707]
[154.58471680 -110.43272400]
[167.66305542 -102.98668671]
[179.03723145 -93.13204193]
[188.27009583 -81.24757385]
[195.00671387 -67.79007721]
[198.98817444 -53.27683640]
[200.06144714 -38.26569748]
[198.18525696 -23.33364677]
[193.43173218 -9.05463314]
[185.98358154 4.02249575]
[176.12709045 15.39509010]
[164.24113464 24.62601662]
[150.78254700 31.36046600]
[136.26866150 35.33958054]
[121.25734711 36.41041565]
[119.38973236 51.29369354]
[117.52211761 66.17697144]
[129.22174072 75.56414032]
[143.34654236 70.51538086]
[157.47134399 65.46662140]
[171.59614563 60.41786957]
[185.72096252 55.36911011]
[199.84576416 50.32035446]
[207.98175049 36.49338531]
[223.88449097 34.37613297]
[235.35473633 45.59277344]
[233.59350586 61.53886032]
[219.95187378 69.98191833]
[204.89451599 64.44515991]
[190.76971436 69.49391174]
[176.64491272 74.54267120]
[162.52011108 79.59143066]
[148.39530945 84.64018250]
[134.27049255 89.68894196]
[134.66156006 111.94955444]
[121.64496613 130.67041016]
[135.54751587 136.30236816]
[149.45007324 141.93432617]
[161.51228333 132.42649841]
[176.71466064 130.23947144]
[190.96786499 135.96151733]
[200.43783569 148.05346680]
[202.57720947 163.26263428]
[196.81050110 177.49783325]
[184.68891907 186.92985535]
[169.47312927 189.02154541]
[155.25608826 183.21023560]
[145.86210632 171.05915833]
[143.81811523 155.83688354]
[129.91555786 150.20492554]
[116.01300812 144.57296753]
[103.57356262 152.95510864]
[103.57356262 167.95510864]
[103.57356262 182.95510864]
[103.57356262 197.95510864]
[103.57356262 212.95510864]
[103.57356262 227.95510864]
[103.57356262 242.95510864]
[103.57356262 257.95510864]
[103.57356262 272.95510864]
[103.57356262 287.95510864]
[118.11345673 292.01641846]
[131.01783752 299.85092163]
[141.32911682 310.87725830]
[148.28213501 324.27719116]
[151.36093140 339.05636597]
[150.33705139 354.11804199]
[145.28645325 368.34457397]
[136.58392334 380.68023682]
[124.87525940 390.20965576]
[111.02931976 396.22567749]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 48]
[22 47]
[23 46]
[29 41]
[30 40]
[31 39]
[32 38]
[33 37]
[51 59]
[52 58]
[53 57]
[61 96]
[62 95]
[63 94]
[97 113]
[98 112]
[99 111]
[100 110]
[101 109]
[102 108]
[115 130]
[116 129]
[117 128]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
