%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUACUAACCGGGGGGGGGGAACACACUAACCAUAUACCAAUGAUGGCGCGAUGUAACACGAGAAAGCACxxxxxxxxxxGGUCAACCUCGCUUCCCCACCCUUACUAACAUUAACGAAAAUAACCCCACCCCCCCCCCCCCUACUAAAC\
) } def
/len { sequence length } bind def

/coor [
[91.70639038 368.84472656]
[78.48619080 361.57223511]
[67.59938812 351.12524414]
[59.78825760 338.21600342]
[55.58537674 323.72467041]
[55.27730560 308.63934326]
[58.88504791 293.98852539]
[66.16262054 280.77111816]
[76.61383057 269.88836670]
[89.52609253 262.08221436]
[104.01902771 257.88491821]
[103.70697021 242.88816833]
[103.39491272 227.89141846]
[103.08285522 212.89466858]
[102.77079773 197.89791870]
[102.45874786 182.90115356]
[102.14669037 167.90440369]
[101.83463287 152.90765381]
[101.52257538 137.91090393]
[101.21051788 122.91414642]
[94.29454803 136.22463989]
[92.23405457 151.08244324]
[82.61329651 162.59074402]
[68.35598755 167.25219727]
[53.79488754 163.65020752]
[43.35507584 152.87939453]
[40.20917892 138.21299744]
[45.31322861 124.10807800]
[57.11611938 114.85108948]
[72.03099060 113.25521088]
[85.55080414 106.75792694]
[70.57108307 105.97808838]
[55.59137344 105.19824219]
[40.61165619 104.41839600]
[31.69123268 117.00527954]
[17.37338829 122.75008392]
[2.22689509 119.81967926]
[-8.91505623 109.14913940]
[-12.49710846 94.14339447]
[-7.37624216 79.59072113]
[4.81349277 70.13482666]
[20.18239594 68.79305267]
[33.82630539 75.99355316]
[41.39150238 89.43868256]
[56.37121582 90.21852875]
[71.35092926 90.99836731]
[86.33064270 91.77821350]
[98.59301758 83.13909912]
[102.90059662 68.77091217]
[94.32291412 53.56037140]
[99.27134705 37.16534042]
[114.23162842 29.54640961]
[118.23936462 15.09172153]
[122.24710846 0.63703352]
[126.25484467 -13.81765461]
[128.12246704 -28.70093536]
[127.81040192 -43.69768906]
[119.03732300 -53.21014786]
[119.12174988 -65.74856567]
[127.47030640 -74.55815125]
[127.47030640 -89.55815125]
[127.47030640 -104.55815125]
[127.47030640 -119.55815125]
[112.83109283 -123.15770721]
[99.47901917 -130.15667725]
[88.19036865 -140.14816284]
[79.62143707 -152.55126953]
[74.27041626 -166.64488220]
[72.44841003 -181.60963440]
[74.26134491 -196.57548523]
[79.60382080 -210.67233276]
[88.16522217 -223.08062744]
[99.44782257 -233.07894897]
[112.79564667 -240.08602905]
[127.43267822 -243.69445801]
[142.50793457 -243.69445801]
[157.14497375 -240.08602905]
[170.49279785 -233.07894897]
[181.77539062 -223.08062744]
[190.33679199 -210.67233276]
[195.67927551 -196.57548523]
[197.49220276 -181.60963440]
[195.67019653 -166.64488220]
[190.31918335 -152.55126953]
[181.75024414 -140.14816284]
[170.46159363 -130.15667725]
[157.10952759 -123.15770721]
[142.47030640 -119.55815125]
[142.47030640 -104.55815125]
[142.47030640 -89.55815125]
[142.47030640 -74.55815125]
[152.06141663 -59.89491272]
[142.80715942 -44.00974655]
[143.11921692 -29.01299095]
[151.18099976 -41.66240311]
[163.40823364 -50.35116577]
[178.00555420 -53.80345917]
[192.82955933 -51.51237488]
[205.70355225 -43.81431580]
[214.73721313 -31.83963013]
[218.60406494 -17.34661484]
[216.73631287 -2.46335149]
[209.40823364 10.62478161]
[197.69583130 19.99599075]
[183.31889343 24.27425766]
[168.38844299 22.83138275]
[155.09681702 15.87923050]
[145.39566040 4.43861818]
[140.70953369 -9.80991459]
[136.70179749 4.64477396]
[132.69406128 19.09946251]
[128.68630981 33.55414963]
[136.55433655 43.80554199]
[137.06887817 56.91315842]
[129.81634521 68.07688141]
[117.26878357 73.07849884]
[112.96119690 87.44668579]
[121.52009583 75.12818909]
[134.25651550 67.20457458]
[149.08923340 64.97062683]
[163.59446716 68.79138184]
[175.40194702 78.04250336]
[182.58226013 91.21228790]
[183.96206665 106.14868927]
[179.31591797 120.41098785]
[169.40299988 131.66862488]
[155.84320068 138.08200073]
[140.85224915 138.60313416]
[126.87980652 133.14686584]
[116.20727539 122.60208893]
[116.51933289 137.59884644]
[116.83138275 152.59559631]
[117.14344025 167.59234619]
[117.45549774 182.58909607]
[117.76755524 197.58586121]
[118.07961273 212.58261108]
[118.39167023 227.57936096]
[118.70372009 242.57611084]
[119.01577759 257.57287598]
[133.67077637 261.16363525]
[146.89657593 268.42590332]
[157.79144287 278.86450195]
[165.61254883 291.76770020]
[169.82661438 306.25576782]
[170.14633179 321.34085083]
[166.54991150 335.99447632]
[159.28254700 349.21746826]
[148.83975220 360.10830688]
[135.93351746 367.92443848]
[121.44382477 372.13290405]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[31 47]
[32 46]
[33 45]
[34 44]
[48 117]
[49 116]
[52 112]
[53 111]
[54 110]
[55 109]
[56 94]
[57 93]
[60 91]
[61 90]
[62 89]
[63 88]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
