%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:06 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCCUACUCCUCGGGGGGGGGGAUUGUACCCAUUCUAAUCGCAAUGGCAUUCCUAAUGCUUACCGAACGAAAxxxxxxxxxxAACCCAAUACCAAACGCCCCUCUUCGUCUGAUCCGUCCUAAUCACAGCAGCCCCCCCCCCUCCUACUUCUC\
) } def
/len { sequence length } bind def

/coor [
[85.03749847 376.89871216]
[71.01555634 371.34570312]
[58.81560135 362.47937012]
[49.20452881 350.85705566]
[42.78650284 337.20935059]
[39.96496582 322.39416504]
[40.91728210 307.34280396]
[45.58358765 293.00137329]
[53.67055511 280.27142334]
[64.66983032 269.95312500]
[77.88998413 262.69515991]
[92.50000000 258.95373535]
[92.50000000 243.95373535]
[92.50000000 228.95373535]
[92.50000000 213.95373535]
[92.50000000 198.95373535]
[92.50000000 183.95373535]
[92.50000000 168.95373535]
[92.50000000 153.95373535]
[92.50000000 138.95373535]
[92.50000000 123.95372772]
[80.81378937 114.54987335]
[66.16106415 117.75886536]
[51.50834274 120.96786499]
[36.85561752 124.17685699]
[22.20289230 127.38585663]
[19.16978455 142.30966187]
[10.32355690 154.70579529]
[-2.80312943 162.42655945]
[-17.93599510 164.13426208]
[-32.45318222 159.53303528]
[-43.83949661 149.42008972]
[-50.12219238 135.54754639]
[-50.21275711 120.31889343]
[-44.09549713 106.37260437]
[-32.83026505 96.12495422]
[-18.36882782 91.35140228]
[-3.21672153 92.87899780]
[10.00086212 100.44308472]
[18.99389648 112.73313141]
[33.64662170 109.52413177]
[48.29934692 106.31513977]
[62.95207214 103.10614014]
[77.60479736 99.89714813]
[78.90715790 92.51108551]
[82.81423950 70.35291290]
[70.14272308 62.32591629]
[57.47120667 54.29891968]
[44.79969406 46.27192307]
[32.12817764 38.24492645]
[15.51219177 34.87663269]
[14.14908791 17.97757149]
[30.01038170 11.98961163]
[40.15517426 25.57341003]
[52.82669067 33.60040665]
[65.49820709 41.62740326]
[78.16972351 49.65439987]
[90.84123993 57.68139648]
[94.19091797 64.39180756]
[86.91896820 51.27240753]
[79.64701080 38.15300751]
[91.80735779 29.37086678]
[96.67006683 43.56085587]
[97.70126343 58.52536774]
[98.73246765 73.48988342]
[102.08215332 80.20029449]
[108.35155487 66.57331085]
[114.62096405 52.94633484]
[120.89036560 39.31935501]
[127.15977478 25.69237518]
[114.83541107 17.06973457]
[104.24889374 6.38491392]
[95.74052429 -6.01861286]
[89.58382416 -19.74212456]
[85.97669220 -34.34446716]
[85.03508759 -49.35623550]
[86.78928375 -64.29486084]
[91.18289185 -78.68013000]
[98.07466125 -92.04962158]
[107.24306488 -103.97355652]
[118.39337158 -114.06862640]
[131.16714478 -122.01031494]
[145.15376282 -127.54334259]
[159.90361023 -130.48983765]
[174.94253540 -130.75508118]
[189.78710938 -128.33055115]
[203.96014404 -123.29417419]
[217.00601196 -115.80786133]
[228.50537109 -106.11226654]
[238.08854675 -94.51905823]
[245.44749451 -81.40090942]
[250.34562683 -67.17951202]
[252.62551880 -52.31203842]
[252.21386719 -37.27640152]
[249.12390137 -22.55594254]
[243.45495605 -8.62386227]
[235.38928223 4.07198238]
[225.18612671 15.12347126]
[213.17349243 24.17534637]
[199.73753357 30.93662453]
[185.31016541 35.18996048]
[170.35516357 36.79862595]
[155.35328674 35.71091080]
[140.78674316 31.96178055]
[134.51734924 45.58876038]
[128.24794006 59.21574020]
[121.97853851 72.84272003]
[115.70912933 86.46969604]
[122.39520264 99.89714813]
[137.04792786 103.10614014]
[151.70065308 106.31513977]
[166.83659363 101.70928192]
[177.61393738 111.99023438]
[186.60697937 99.70018768]
[199.82455444 92.13610840]
[214.97666931 90.60850525]
[229.43811035 95.38205719]
[240.70333862 105.62970734]
[246.82060242 119.57599640]
[246.73004150 134.80464172]
[240.44734192 148.67720032]
[229.06101990 158.79014587]
[214.54383850 163.39135742]
[199.41096497 161.68365479]
[186.28428650 153.96290588]
[177.43804932 141.56677246]
[174.40495300 126.64295959]
[160.31706238 131.47834778]
[148.49165344 120.96786499]
[133.83892822 117.75886536]
[119.18621063 114.54987335]
[107.50000000 123.95372772]
[107.50000000 138.95373535]
[107.50000000 153.95373535]
[107.50000000 168.95373535]
[107.50000000 183.95373535]
[107.50000000 198.95373535]
[107.50000000 213.95373535]
[107.50000000 228.95373535]
[107.50000000 243.95373535]
[107.50000000 258.95373535]
[122.11001587 262.69515991]
[135.33016968 269.95312500]
[146.32945251 280.27142334]
[154.41641235 293.00137329]
[159.08271790 307.34280396]
[160.03503418 322.39416504]
[157.21350098 337.20935059]
[150.79547119 350.85705566]
[141.18440247 362.47937012]
[128.98443604 371.34570312]
[114.96250153 376.89871216]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 44]
[23 43]
[24 42]
[25 41]
[26 40]
[46 58]
[47 57]
[48 56]
[49 55]
[50 54]
[66 108]
[67 107]
[68 106]
[69 105]
[70 104]
[109 131]
[110 130]
[111 129]
[113 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
