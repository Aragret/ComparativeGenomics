%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:53 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUCACCACCCAGGGGGGGGGGACAAUGACUAAUCAAACUAACCUCAAAACAAAUGAUAACCAUACACAACAxxxxxxxxxxACACUCCACCUCCUAUUCUUGCACGAAACGGGAUCAAACAACCCCCUAGGCCCCCCCCCCAAUCACCUCCCA\
) } def
/len { sequence length } bind def

/coor [
[85.03220367 374.80407715]
[70.87159729 369.64907837]
[58.28185654 361.36685181]
[47.94191742 350.40408325]
[40.40940475 337.35195923]
[36.09054184 322.91436768]
[35.21823120 307.86990356]
[37.83952332 293.02990723]
[43.81304932 279.19467163]
[52.81666565 267.11032104]
[64.36482239 257.42855835]
[77.83473969 250.67147827]
[92.50000000 247.20350647]
[92.50000000 232.20350647]
[92.50000000 217.20350647]
[92.50000000 202.20350647]
[92.50000000 187.20350647]
[92.50000000 172.20350647]
[92.50000000 157.20350647]
[92.50000000 142.20350647]
[92.50000000 127.20349884]
[92.50000000 112.20349884]
[85.67605591 100.00000000]
[92.50000000 87.79650116]
[77.52111053 86.92420197]
[62.61828232 85.18243408]
[47.84194183 82.57707977]
[33.24208832 79.11697388]
[18.86812401 74.81380463]
[4.76868677 69.68215179]
[-9.00851727 63.73936081]
[-22.41686821 57.00555420]
[-35.41099548 49.50350952]
[-47.94693756 41.25861359]
[-59.98226547 32.29876328]
[-71.47626495 22.65428162]
[-82.39003754 12.35779572]
[-92.68666077 1.44415009]
[-102.33128357 -10.04972839]
[-111.29128265 -22.08494759]
[-119.53633118 -34.62078476]
[-127.03854370 -47.61481857]
[-133.77252197 -61.02308655]
[-139.71546936 -74.80021667]
[-144.84730530 -88.89958954]
[-149.15065002 -103.27349854]
[-152.61094666 -117.87331390]
[-155.21647644 -132.64961243]
[-156.95843506 -147.55242920]
[-157.83091736 -162.53131104]
[-157.83097839 -177.53556824]
[-156.95861816 -192.51446533]
[-155.21678162 -207.41728210]
[-152.61137390 -222.19361877]
[-149.15119934 -236.79345703]
[-144.84797668 -251.16738892]
[-139.71626282 -265.26681519]
[-133.77342224 -279.04400635]
[-127.03955078 -292.45230103]
[-119.53745270 -305.44641113]
[-111.29251099 -317.98233032]
[-102.33261108 -330.01760864]
[-92.68807983 -341.51156616]
[-82.39154816 -352.42529297]
[-71.47785950 -362.72186279]
[-59.98394012 -372.36645508]
[-47.94868469 -381.32641602]
[-35.41281509 -389.57141113]
[-22.41874695 -397.07354736]
[-9.01045227 -403.80746460]
[4.76670265 -409.75036621]
[18.86609840 -414.88214111]
[33.24002457 -419.18542480]
[47.83985138 -422.64566040]
[62.61616898 -425.25112915]
[77.51898193 -426.99304199]
[92.49786377 -427.86544800]
[107.50213623 -427.86544800]
[122.48101807 -426.99304199]
[137.38383484 -425.25112915]
[152.16015625 -422.64566040]
[166.75997925 -419.18542480]
[181.13389587 -414.88214111]
[195.23329163 -409.75036621]
[209.01045227 -403.80746460]
[222.41874695 -397.07354736]
[235.41281128 -389.57141113]
[247.94868469 -381.32641602]
[259.98394775 -372.36645508]
[271.47787476 -362.72186279]
[282.39154053 -352.42529297]
[292.68807983 -341.51156616]
[302.33261108 -330.01760864]
[311.29251099 -317.98233032]
[319.53744507 -305.44641113]
[327.03955078 -292.45230103]
[333.77340698 -279.04400635]
[339.71624756 -265.26681519]
[344.84799194 -251.16738892]
[349.15121460 -236.79345703]
[352.61138916 -222.19361877]
[355.21679688 -207.41728210]
[356.95861816 -192.51446533]
[357.83096313 -177.53556824]
[357.83090210 -162.53131104]
[356.95843506 -147.55242920]
[355.21646118 -132.64961243]
[352.61093140 -117.87331390]
[349.15066528 -103.27349854]
[344.84732056 -88.89958954]
[339.71548462 -74.80021667]
[333.77252197 -61.02308655]
[327.03854370 -47.61481857]
[319.53634644 -34.62078476]
[311.29129028 -22.08494759]
[302.33129883 -10.04972839]
[292.68664551 1.44415009]
[282.39004517 12.35779572]
[271.47625732 22.65428162]
[259.98226929 32.29876328]
[247.94692993 41.25861359]
[235.41099548 49.50350952]
[222.41687012 57.00555420]
[209.00851440 63.73936081]
[195.23130798 69.68215179]
[181.13188171 74.81380463]
[166.75790405 79.11697388]
[152.15806580 82.57707977]
[137.38171387 85.18243408]
[122.47888947 86.92420197]
[107.50000000 87.79650116]
[114.32394409 100.00000000]
[107.50000000 112.20349884]
[107.50000000 127.20349884]
[107.50000000 142.20350647]
[107.50000000 157.20350647]
[107.50000000 172.20350647]
[107.50000000 187.20350647]
[107.50000000 202.20350647]
[107.50000000 217.20350647]
[107.50000000 232.20350647]
[107.50000000 247.20350647]
[122.16526031 250.67147827]
[135.63517761 257.42855835]
[147.18333435 267.11032104]
[156.18695068 279.19467163]
[162.16047668 293.02990723]
[164.78176880 307.86990356]
[163.90945435 322.91436768]
[159.59059143 337.35195923]
[152.05809021 350.40408325]
[141.71813965 361.36685181]
[129.12840271 369.64907837]
[114.96779633 374.80407715]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[24 131]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
