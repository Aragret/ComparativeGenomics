%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:15 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAAGCGAACUGGGGGGGGGGACUAUACUCAAUUGAUCCAAUAACUUGACCAACGGAACAAGUUACCCUAGxxxxxxxxxxACAAGAGUGCUACUCUCCUCGCUCCGGGCCCAUAACACUUGGGGGUAGCUCCCCCCCCCCAAAGUGAACU\
) } def
/len { sequence length } bind def

/coor [
[85.40820312 374.26507568]
[71.56226349 368.24905396]
[59.85360336 358.71963501]
[51.15108109 346.38397217]
[46.10047913 332.15744019]
[45.07658768 317.09576416]
[48.15538406 302.31658936]
[55.10840607 288.91668701]
[65.41969299 277.89035034]
[78.32407379 270.05584717]
[92.86396027 265.99450684]
[92.86396027 250.99452209]
[92.86396027 235.99452209]
[92.86396027 220.99452209]
[92.86396027 205.99452209]
[92.86396027 190.99452209]
[92.86396027 175.99452209]
[92.86396027 160.99452209]
[92.86396027 145.99452209]
[92.86396027 130.99452209]
[92.86396027 115.99452209]
[89.14893341 112.07578278]
[87.06909180 107.51383209]
[86.63589478 102.90452576]
[87.66320038 98.78252411]
[89.80735016 95.56090546]
[79.36753845 84.79010010]
[68.92772675 74.01929474]
[58.48791504 63.24848175]
[52.14534760 61.03955460]
[48.46701431 56.60095596]
[47.84947968 51.80573273]
[37.86675262 40.60996628]
[27.88402557 29.41420174]
[8.35421085 37.73786545]
[-12.84199905 38.26700592]
[-32.71249008 30.94672585]
[-48.45959854 16.82876778]
[-57.87399673 -2.07953501]
[-59.64465332 -23.10065651]
[-53.54137421 -43.26602936]
[-65.80374146 -51.90514374]
[-78.06610870 -60.54426193]
[-90.32847595 -69.18338013]
[-102.59085083 -77.82249451]
[-114.85321808 -86.46160889]
[-127.11558533 -95.10072327]
[-145.46046448 -96.30299377]
[-152.26101685 -112.45082092]
[-164.70046997 -120.83296204]
[-181.21453857 -124.66981506]
[-182.09919739 -141.60066223]
[-166.07489014 -147.13766479]
[-156.31831360 -133.27239990]
[-143.87887573 -124.89025879]
[-131.90786743 -126.89080048]
[-121.46263123 -119.95423126]
[-118.47647095 -107.36309814]
[-106.21409607 -98.72397614]
[-93.95172882 -90.08486176]
[-81.68936157 -81.44574738]
[-69.42699432 -72.80663300]
[-57.16462708 -64.16751099]
[-44.90225983 -55.52839661]
[-37.77067947 -62.03342056]
[-29.62486458 -67.22116089]
[-20.70544243 -70.93643951]
[-11.27623463 -73.06757355]
[-1.61644220 -73.54978943]
[7.98761749 -72.36714935]
[17.25099564 -69.55308533]
[25.89856911 -65.18946838]
[33.67321014 -59.40420914]
[40.34342957 -52.36751556]
[45.71028137 -44.28688812]
[49.61326981 -35.40099716]
[51.93518448 -25.97264290]
[52.60558701 -16.28096962]
[51.60296249 -6.61320782]
[48.95541382 2.74383569]
[44.73985291 11.51229095]
[39.07979202 19.43147469]
[49.06251907 30.62724113]
[59.04524231 41.82300568]
[69.25872040 52.80867004]
[79.69853973 63.57947922]
[90.13835144 74.35028839]
[100.57816315 85.12109375]
[114.85362244 89.72666168]
[129.61967468 87.08779907]
[144.38572693 84.44892883]
[159.15179443 81.81006622]
[173.91784668 79.17120361]
[188.68389893 76.53234100]
[186.83279419 67.49733734]
[190.08863831 56.96533966]
[199.05487061 47.61155319]
[212.57905579 41.12339020]
[219.01393127 34.54735184]
[226.45275879 34.64420700]
[240.10900879 28.43880081]
[252.02787781 16.38156509]
[266.91339111 24.49686432]
[263.23596191 41.04717636]
[246.31440735 42.09504318]
[232.65817261 48.30044937]
[219.06721497 54.64757919]
[205.54302979 61.13574219]
[208.02815247 75.92845154]
[222.93005371 77.64114380]
[237.83195496 79.35382843]
[252.73385620 81.06652069]
[263.96234131 70.18282318]
[279.56341553 69.11453247]
[292.17065430 78.36606598]
[295.83139038 93.56912994]
[288.81707764 107.54530334]
[274.43966675 113.69546509]
[259.48776245 109.11569214]
[251.02116394 95.96842194]
[236.11926270 94.25572968]
[221.21736145 92.54304504]
[206.31546021 90.83035278]
[191.32276917 91.29839325]
[176.55670166 93.93725586]
[161.79064941 96.57612610]
[147.02459717 99.21498871]
[132.25854492 101.85385132]
[117.49248505 104.49271393]
[107.86396027 115.99452209]
[107.86396027 130.99452209]
[107.86396027 145.99452209]
[107.86396027 160.99452209]
[107.86396027 175.99452209]
[107.86396027 190.99452209]
[107.86396027 205.99452209]
[107.86396027 220.99452209]
[107.86396027 235.99452209]
[107.86396027 250.99452209]
[107.86396027 265.99450684]
[122.40384674 270.05584717]
[135.30822754 277.89035034]
[145.61950684 288.91668701]
[152.57254028 302.31658936]
[155.65133667 317.09576416]
[154.62744141 332.15744019]
[149.57684326 346.38397217]
[140.87431335 358.71963501]
[129.16564941 368.24905396]
[115.31971741 374.26507568]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[26 88]
[27 87]
[28 86]
[29 85]
[32 84]
[33 83]
[34 82]
[41 64]
[42 63]
[43 62]
[44 61]
[45 60]
[46 59]
[47 58]
[49 55]
[50 54]
[89 129]
[90 128]
[91 127]
[92 126]
[93 125]
[94 124]
[97 108]
[98 107]
[100 106]
[101 105]
[109 123]
[110 122]
[111 121]
[112 120]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
