%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUCUUCCUAGGGGGGGGGGCACAUCGGGCGAGGCCUAUAUUACGGAUCAUUUCUCUACUCAGAAACCUGxxxxxxxxxxCGAUCCGUCCCUAACAAACUAGGAGGCGUCCUUGCCCUAUUACUAUCCAUCCCCCCCCCCCCUCAUCCUA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 374.18914795]
[71.19830322 368.17312622]
[59.48964310 358.64370728]
[50.78712082 346.30804443]
[45.73651886 332.08154297]
[44.71262741 317.01983643]
[47.79142761 302.24069214]
[54.74444962 288.84075928]
[65.05573273 277.81442261]
[77.96011353 269.97991943]
[92.50000000 265.91860962]
[92.50000000 250.91860962]
[92.50000000 235.91860962]
[92.50000000 220.91860962]
[92.50000000 205.91860962]
[92.50000000 190.91860962]
[92.50000000 175.91860962]
[92.50000000 160.91860962]
[92.50000000 145.91860962]
[92.50000000 130.91860962]
[82.08892822 126.29455566]
[73.97418213 118.29936981]
[69.19612122 107.95807648]
[68.36732483 96.59650421]
[71.59404755 85.67128754]
[78.46260834 76.58310699]
[88.09241486 70.49712372]
[85.91557312 55.65592194]
[83.73873901 40.81471634]
[81.56190491 25.97351074]
[78.92303467 11.20745468]
[75.82471466 -3.46907043]
[65.40377808 -15.37346649]
[70.34534454 -29.42445183]
[67.24702454 -44.10097885]
[64.14870453 -58.77750397]
[61.05038071 -73.45402527]
[48.69259644 -69.36624908]
[36.28143692 -71.66429901]
[26.81766510 -79.40766907]
[22.40347481 -90.38740540]
[23.78070831 -101.74398041]
[30.23264885 -110.70957184]
[24.16963577 -124.42962646]
[18.10662270 -138.14967346]
[12.04361057 -151.86973572]
[5.98059702 -165.58978271]
[-0.08241608 -179.30984497]
[-6.14542913 -193.02989197]
[-20.99104691 -190.44276428]
[-36.01534271 -191.48333740]
[-50.34527969 -196.08683777]
[-63.14920425 -203.98149109]
[-73.68512726 -214.70472717]
[-81.34369659 -227.63017273]
[-85.68348694 -242.00425720]
[-86.45636749 -256.99020386]
[-83.62175751 -271.71667480]
[-77.34869385 -285.32846069]
[-68.00576782 -297.03613281]
[-56.13945007 -306.16186523]
[-62.20246124 -319.88192749]
[-68.26547241 -333.60195923]
[-81.81791687 -342.83578491]
[-80.32776642 -359.16708374]
[-65.32794952 -365.79562378]
[-52.24900436 -355.90255737]
[-54.54542160 -339.66497803]
[-48.48241043 -325.94494629]
[-42.41939545 -312.22488403]
[-27.68272209 -314.85525513]
[-12.73575401 -313.88150024]
[1.55237997 -309.35589600]
[14.34982014 -301.53735352]
[24.91040611 -290.87667847]
[32.61718369 -277.99047852]
[37.01844025 -263.62561035]
[37.85419083 -248.61578369]
[35.07151031 -233.83326721]
[28.82789421 -220.13813782]
[19.48231888 -208.32829285]
[7.57462454 -199.09291077]
[13.63763714 -185.37284851]
[19.70065117 -171.65280151]
[25.76366425 -157.93273926]
[31.82667732 -144.21269226]
[37.88969040 -130.49263000]
[43.95270157 -116.77258301]
[59.35802460 -114.77534485]
[70.99993134 -102.23071289]
[82.50173187 -111.85923767]
[94.00354004 -121.48776245]
[105.50534058 -131.11628723]
[106.65114594 -146.87898254]
[118.66172791 -157.15135193]
[134.41143799 -155.83895874]
[144.55622864 -143.72042847]
[143.07740784 -127.98548889]
[130.85229492 -117.96937561]
[115.13386536 -119.61448669]
[103.63206482 -109.98596191]
[92.13025665 -100.35743713]
[80.62845612 -90.72890472]
[75.72690582 -76.55235291]
[78.82522583 -61.87582397]
[81.92354584 -47.19929886]
[85.02187347 -32.52277374]
[95.22119904 -21.66814041]
[90.50124359 -6.56739235]
[93.59956360 8.10913372]
[96.40377045 10.34607315]
[98.23415375 14.08122826]
[98.38538361 18.82775497]
[96.40310669 23.79667282]
[98.57994843 38.63787842]
[100.75678253 53.47908401]
[102.93361664 68.32028961]
[125.02086639 80.34888458]
[131.47248840 104.65753937]
[145.37504578 110.28949738]
[161.53305054 107.48754120]
[171.82942200 120.25142670]
[165.67213440 135.45075989]
[149.39527893 137.44976807]
[139.74308777 124.19205475]
[125.84053040 118.56009674]
[122.95398712 122.03008270]
[119.60545349 125.05666351]
[115.86231232 127.57892609]
[111.79990387 129.54611206]
[107.50000000 130.91860962]
[107.50000000 145.91860962]
[107.50000000 160.91860962]
[107.50000000 175.91860962]
[107.50000000 190.91860962]
[107.50000000 205.91860962]
[107.50000000 220.91860962]
[107.50000000 235.91860962]
[107.50000000 250.91860962]
[107.50000000 265.91860962]
[122.03988647 269.97991943]
[134.94427490 277.81442261]
[145.25555420 288.84075928]
[152.20857239 302.24069214]
[155.28736877 317.01983643]
[154.26348877 332.08154297]
[149.21287537 346.30804443]
[140.51036072 358.64370728]
[128.80169678 368.17312622]
[114.95575714 374.18914795]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[27 117]
[28 116]
[29 115]
[30 114]
[31 110]
[32 109]
[34 107]
[35 106]
[36 105]
[37 104]
[43 88]
[44 87]
[45 86]
[46 85]
[47 84]
[48 83]
[49 82]
[61 70]
[62 69]
[63 68]
[90 103]
[91 102]
[92 101]
[93 100]
[119 126]
[120 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
