%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:51 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCCACGUAAAGGGGGGGGGGGACGUUAGGUCAAGGUGUAGCCCAUGAGGUGGCAAGAAAUGGGCUACAUUxxxxxxxxxxUCCCUGUACGAAAGGACAAGAGAAAUAAGGCCUACUUCACAAAGCGCCUUCCCCCCCCCCCCCCCGUAAA\
) } def
/len { sequence length } bind def

/coor [
[123.29296112 401.63174438]
[109.44702148 395.61572266]
[97.73835754 386.08630371]
[89.03583527 373.75064087]
[83.98523712 359.52410889]
[82.96134186 344.46243286]
[86.04014587 329.68325806]
[92.99316406 316.28332520]
[103.30445099 305.25698853]
[116.20883179 297.42248535]
[130.74871826 293.36117554]
[130.74871826 278.36117554]
[130.74871826 263.36117554]
[130.74871826 248.36117554]
[130.74871826 233.36117554]
[130.74871826 218.36117554]
[130.74871826 203.36117554]
[130.74871826 188.36117554]
[130.74871826 173.36117554]
[130.74871826 158.36117554]
[117.89031219 150.63710022]
[104.64772797 157.68223572]
[91.40514374 164.72735596]
[85.36187744 179.58866882]
[69.93476105 183.99134827]
[56.95815277 174.55804443]
[56.38660049 158.52517700]
[68.65854645 148.19178772]
[84.36000824 151.48477173]
[97.60259247 144.43963623]
[110.84517670 137.39450073]
[81.50602722 130.89360046]
[67.64769745 106.88516998]
[75.32423401 82.68003845]
[65.57658386 71.27902222]
[54.38081741 61.29629517]
[41.94137573 52.91415024]
[29.50193596 44.53200912]
[17.06249428 36.14986420]
[4.62305450 27.76772118]
[-7.81638575 19.38557816]
[-20.25582695 11.00343513]
[-32.69526672 2.62129164]
[-45.13470840 -5.76085186]
[-57.57414627 -14.14299488]
[-70.46283722 -6.03118229]
[-85.53753662 -3.86940289]
[-100.18646240 -8.03219795]
[-111.87160492 -17.79833794]
[-118.56842804 -31.47577858]
[-119.11667633 -46.69482422]
[-113.42136383 -60.81867981]
[-102.46923828 -71.40029907]
[-88.15781403 -76.60636139]
[-72.96663666 -75.53488159]
[-59.52767181 -68.37149811]
[-50.16930008 -56.35730743]
[-46.51291275 -41.57384491]
[-49.19200516 -26.58243561]
[-36.75256348 -18.20029259]
[-24.31312370 -9.81814861]
[-11.87368298 -1.43600559]
[0.56575739 6.94613743]
[13.00519753 15.32828045]
[25.44463730 23.71042442]
[37.88407898 32.09256744]
[50.32351685 40.47471237]
[62.76295853 48.85685349]
[57.27357101 34.89738846]
[57.82349014 19.90747261]
[64.32097626 6.38775921]
[75.68210602 -3.40636086]
[90.01158142 -7.84100819]
[104.91893005 -6.17638397]
[117.91726685 1.30981529]
[126.83818817 13.36872292]
[130.19346619 27.98864365]
[127.42338562 42.73064423]
[118.99004364 55.13543320]
[106.30031586 63.13360596]
[91.47113037 65.39089203]
[76.97760010 61.53136826]
[86.72525787 72.93238831]
[117.05744171 69.96405792]
[138.80500793 96.81596375]
[148.06996155 85.01931763]
[157.33491516 73.22267914]
[159.77383423 57.59059143]
[173.71994019 52.36036682]
[175.50665283 36.05884171]
[190.62446594 29.70399475]
[203.52145386 39.83314514]
[200.93031311 56.02629471]
[185.51658630 61.62531662]
[183.74035645 76.41363525]
[169.13154602 82.48763275]
[159.86660767 94.28427124]
[150.60165405 106.08090973]
[153.12603760 113.14331055]
[166.91239929 107.23263550]
[177.14906311 96.26856995]
[191.83830261 99.30603790]
[196.88705444 113.43083954]
[187.45147705 125.09144592]
[172.58419800 123.10050964]
[158.17478943 127.26811218]
[160.69917297 134.33052063]
[175.34266663 137.58134460]
[189.98617554 140.83216858]
[204.62966919 144.08299255]
[219.27317810 147.33381653]
[233.94969177 150.43214417]
[248.65765381 153.37762451]
[259.31027222 142.21853638]
[274.31027222 138.61239624]
[288.87115479 143.70986938]
[298.34661865 155.88439941]
[299.71307373 171.25112915]
[292.53448486 184.90658569]
[279.10153198 192.49337769]
[263.70062256 191.59056091]
[251.24609375 182.48625183]
[245.71217346 168.08558655]
[231.00421143 165.14010620]
[223.78131104 166.92204285]
[216.02233887 161.97732544]
[201.37884521 158.72650146]
[186.73533630 155.47566223]
[172.09184265 152.22483826]
[157.44833374 148.97401428]
[145.74871826 158.36117554]
[145.74871826 173.36117554]
[145.74871826 188.36117554]
[145.74871826 203.36117554]
[145.74871826 218.36117554]
[145.74871826 233.36117554]
[145.74871826 248.36117554]
[145.74871826 263.36117554]
[145.74871826 278.36117554]
[145.74871826 293.36117554]
[160.28860474 297.42248535]
[173.19297791 305.25698853]
[183.50427246 316.28332520]
[190.45729065 329.68325806]
[193.53608704 344.46243286]
[192.51219177 359.52410889]
[187.46159363 373.75064087]
[178.75907898 386.08630371]
[167.05041504 395.61572266]
[153.20446777 401.63174438]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 31]
[22 30]
[23 29]
[34 83]
[35 82]
[36 68]
[37 67]
[38 66]
[39 65]
[40 64]
[41 63]
[42 62]
[43 61]
[44 60]
[45 59]
[85 98]
[86 97]
[87 96]
[89 94]
[107 130]
[108 129]
[109 128]
[110 127]
[111 126]
[112 124]
[113 123]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
