%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAUGUCUCCAGGGGGGGGGGUCUAUUGAUGAGGGUCUUACUCUUUUAGUAUAAAUAGUACCGUUAACUUCxxxxxxxxxxCACCCCACUACUAGGCCUCCUCCUAGCAGCAGCAGGCAAAUCAGCCCAAUCCCCCCCCCCUAGGUCUCCA\
) } def
/len { sequence length } bind def

/coor [
[82.51043701 450.45593262]
[68.66449738 444.43991089]
[56.95583725 434.91049194]
[48.25331497 422.57482910]
[43.20271301 408.34829712]
[42.17882156 393.28662109]
[45.25761795 378.50744629]
[52.21063995 365.10751343]
[62.52192307 354.08117676]
[75.42630768 346.24667358]
[89.96619415 342.18536377]
[89.96619415 327.18536377]
[89.96619415 312.18536377]
[89.96619415 297.18536377]
[89.96619415 282.18536377]
[89.96619415 267.18536377]
[89.96619415 252.18536377]
[89.96619415 237.18536377]
[89.96619415 222.18536377]
[89.96619415 207.18536377]
[87.68450928 204.41744995]
[86.66511536 200.38476562]
[87.49755859 195.70936584]
[90.46343994 191.25704956]
[91.39907074 176.28625488]
[92.33470154 161.31546021]
[93.27033234 146.34466553]
[70.95670319 113.27423859]
[85.65051270 90.81876373]
[75.66779327 79.62300110]
[67.56574249 75.26310730]
[65.59680939 68.08892059]
[55.84915924 56.68789673]
[46.10150909 45.28687668]
[36.35385513 33.88585663]
[24.55721474 24.62090683]
[6.23206949 26.09362221]
[-2.83991385 11.10365582]
[-16.36410332 4.61549091]
[-29.88829422 -1.87267411]
[-43.41248322 -8.36083889]
[-55.86006546 -4.82366991]
[-67.01148987 -10.55644131]
[-71.10640717 -21.98180771]
[-84.49269104 -28.74992371]
[-97.87897491 -35.51803589]
[-111.26525879 -42.28615189]
[-128.12855530 -44.03702164]
[-131.11433411 -60.72598267]
[-115.90412903 -68.21504211]
[-104.49714661 -55.67243576]
[-91.11085510 -48.90432358]
[-77.72457123 -42.13620758]
[-64.33828735 -35.36809158]
[-46.92495346 -37.31121445]
[-36.92432022 -21.88502884]
[-23.40012932 -15.39686394]
[-9.87593842 -8.90869904]
[3.64825130 -2.42053390]
[15.20221138 -6.13716173]
[26.54352188 -0.78986007]
[31.32533073 11.23462200]
[23.44634247 -1.52945101]
[19.59898186 -16.02765083]
[20.11260223 -31.01885605]
[24.94323349 -45.21973419]
[33.67734909 -57.41461945]
[45.56726074 -66.55956268]
[59.59513092 -71.87170410]
[74.56009674 -72.89630127]
[89.18107605 -69.54563904]
[102.20643616 -62.10655594]
[112.52114105 -51.21587372]
[119.24218750 -37.80589676]
[121.79421997 -23.02458763]
[119.95877838 -8.13730526]
[113.89297485 5.58151627]
[104.11608887 16.95747375]
[91.46505737 25.01672363]
[77.02288818 29.06935310]
[62.02590942 28.76843071]
[47.75487518 24.13820457]
[57.50252914 35.53922653]
[67.25018311 46.94024658]
[76.99783325 58.34126663]
[86.86355591 69.64027405]
[96.84628296 80.83603668]
[111.74818420 82.54872894]
[124.01055145 73.90961456]
[130.83584595 59.63634872]
[145.69650269 58.63136673]
[157.95887756 49.99224854]
[170.22123718 41.35313416]
[182.48361206 32.71401978]
[194.74597168 24.07490158]
[197.19808960 8.46199989]
[210.02099609 -0.77642691]
[225.60710144 1.84061563]
[234.70944214 14.76048279]
[231.92776489 30.31804657]
[218.91238403 39.28327942]
[203.38510132 36.33726883]
[191.12272644 44.97638702]
[178.86035156 53.61550140]
[166.59799194 62.25461960]
[154.33561707 70.89373779]
[148.38742065 84.54906464]
[132.64967346 86.17198181]
[120.38729858 94.81109619]
[121.55285645 102.21997070]
[134.92510986 95.42419434]
[145.52041626 106.04208374]
[138.69615173 119.39983368]
[123.88395691 117.03773499]
[125.04950714 124.44660950]
[139.37210083 128.90342712]
[153.69470215 133.36024475]
[167.56744385 125.78907013]
[182.70681763 130.32504272]
[190.13088989 144.27705383]
[185.43510437 159.36763000]
[171.40538025 166.64378357]
[156.36531067 161.78871155]
[149.23788452 147.68284607]
[134.91528320 143.22602844]
[120.59268951 138.76921082]
[108.24111938 147.28030396]
[107.30548859 162.25108337]
[106.36986542 177.22187805]
[105.43423462 192.19267273]
[104.96619415 207.18536377]
[104.96619415 222.18536377]
[104.96619415 237.18536377]
[104.96619415 252.18536377]
[104.96619415 267.18536377]
[104.96619415 282.18536377]
[104.96619415 297.18536377]
[104.96619415 312.18536377]
[104.96619415 327.18536377]
[104.96619415 342.18536377]
[119.50608063 346.24667358]
[132.41046143 354.08117676]
[142.72174072 365.10751343]
[149.67477417 378.50744629]
[152.75357056 393.28662109]
[151.72967529 408.34829712]
[146.67907715 422.57482910]
[137.97654724 434.91049194]
[126.26788330 444.43991089]
[112.42195129 450.45593262]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[24 130]
[25 129]
[26 128]
[27 127]
[29 87]
[30 86]
[32 85]
[33 84]
[34 83]
[35 82]
[36 62]
[38 59]
[39 58]
[40 57]
[41 56]
[44 54]
[45 53]
[46 52]
[47 51]
[88 109]
[89 108]
[91 106]
[92 105]
[93 104]
[94 103]
[95 102]
[115 126]
[116 125]
[117 124]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
