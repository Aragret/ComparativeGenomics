%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:50 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAACCUCCCUGGGGGGGGGGGUUCUUAUGAAUUCGAACAGCAUACCCCCGAUUCCGCUACGACCAACUCAxxxxxxxxxxAAAAAUUUUGGUGCAACUCCAAAUAAAAGUAAUAACCAUGCACACUACUACCCCCCCCCCUAACCACCCU\
) } def
/len { sequence length } bind def

/coor [
[125.02569580 466.39477539]
[110.53600311 462.18627930]
[97.62977600 454.37017822]
[87.18697357 443.47933960]
[79.91960907 430.25631714]
[76.32318115 415.60272217]
[76.64290619 400.51763916]
[80.85697174 386.02957153]
[88.67807007 373.12634277]
[99.57293701 362.68774414]
[112.79875183 355.42550659]
[127.45374298 351.83471680]
[127.76580048 336.83798218]
[128.07785034 321.84121704]
[128.38990784 306.84448242]
[128.70196533 291.84771729]
[129.01402283 276.85095215]
[129.32608032 261.85421753]
[129.63813782 246.85745239]
[129.95019531 231.86070251]
[130.26225281 216.86395264]
[130.57431030 201.86718750]
[112.49273682 191.08465576]
[107.64749908 172.14860535]
[116.81779480 156.61228943]
[110.75478363 142.89222717]
[104.69176483 129.17218018]
[98.62875366 115.45212555]
[86.73637390 106.31039429]
[71.91861725 103.97928619]
[57.10086060 101.64818573]
[42.28310013 99.31707764]
[33.25309753 101.08085632]
[27.18263435 96.78025818]
[12.41657829 94.14139557]
[3.90647650 106.77065277]
[-9.00811005 114.84117126]
[-24.08965302 116.95469666]
[-38.72518158 112.74504089]
[-50.37900162 102.94155884]
[-57.03202057 89.24275208]
[-57.53156281 74.02203369]
[-51.79107666 59.91647339]
[-40.80514145 49.36995697]
[-26.47712898 44.20972443]
[-11.28946114 45.32981873]
[2.12651062 52.53617477]
[11.44638634 64.58025360]
[15.05544281 79.37534332]
[29.82149887 82.01420593]
[44.61420441 84.49932098]
[59.43196487 86.83042908]
[74.24971771 89.16152954]
[89.06748199 91.49263763]
[90.58454132 89.47690582]
[92.47581482 87.73591614]
[92.16375732 72.73916626]
[89.69279480 68.99005127]
[88.68684387 65.04554749]
[89.02182007 61.40279388]
[90.42121887 58.46414566]
[92.50177765 56.49472427]
[93.43740845 41.52393341]
[94.37303925 26.55314255]
[95.30866241 11.58235168]
[96.24429321 -3.38844013]
[81.98604584 -8.34877396]
[69.59546661 -16.97294044]
[59.99203491 -28.62097168]
[53.88837433 -42.42850113]
[51.73742294 -57.37092590]
[53.69879913 -72.33940887]
[59.62694931 -86.22319794]
[69.08196259 -97.99202728]
[81.36222839 -106.77256012]
[95.55645752 -111.91322327]
[110.61134338 -113.03255463]
[125.40972137 -110.04748535]
[138.85345459 -103.17953491]
[149.94491577 -92.93833923]
[157.86105347 -80.08386993]
[162.01443481 -65.57001495]
[162.09686279 -50.47380066]
[158.10220337 -35.91545868]
[150.32688904 -22.97532082]
[139.34791565 -12.61362743]
[125.97998047 -5.59928799]
[111.21508026 -2.45281172]
[110.27945709 12.51797962]
[109.34382629 27.48877144]
[108.40819550 42.45956421]
[107.47257233 57.43035507]
[107.16051483 72.42710876]
[107.47257233 87.42385864]
[115.13912201 74.53107452]
[128.72529602 68.17372131]
[143.53608704 70.54873657]
[154.45327759 80.83536530]
[157.70420837 95.47884369]
[152.16543579 109.41878510]
[139.75100708 117.83793640]
[124.75100708 117.82685852]
[112.34880829 109.38911438]
[118.41181946 123.10916901]
[124.47483826 136.82922363]
[130.53784180 150.54927063]
[151.40309143 155.92179871]
[160.61853027 178.27079773]
[175.26202393 181.52162170]
[189.90553284 184.77244568]
[204.54902649 188.02326965]
[213.24284363 175.55387878]
[226.04940796 167.36483765]
[241.01580811 164.70494080]
[255.85980225 167.97978210]
[268.31774902 176.68998718]
[276.48992920 189.50732422]
[279.13015747 204.47721863]
[275.83578491 219.31687927]
[267.10919189 231.76336670]
[254.28112793 239.91867065]
[239.30776978 242.53919983]
[224.47245789 239.22531128]
[212.03746033 230.48234558]
[203.89901733 217.64356995]
[201.29820251 202.66677856]
[186.65469360 199.41595459]
[172.01119995 196.16513062]
[157.36769104 192.91430664]
[145.57106018 202.17924500]
[145.25900269 217.17601013]
[144.94694519 232.17276001]
[144.63488770 247.16950989]
[144.32283020 262.16625977]
[144.01077271 277.16302490]
[143.69871521 292.15975952]
[143.38665771 307.15652466]
[143.07461548 322.15328979]
[142.76255798 337.15002441]
[142.45050049 352.14678955]
[156.94343567 356.34408569]
[169.85569763 364.15020752]
[180.30690002 375.03298950]
[187.58447266 388.25036621]
[191.19221497 402.90118408]
[190.88414001 417.98654175]
[186.68125916 432.47784424]
[178.87013245 445.38711548]
[167.98332214 455.83410645]
[154.76313782 463.10656738]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 140]
[13 139]
[14 138]
[15 137]
[16 136]
[17 135]
[18 134]
[19 133]
[20 132]
[21 131]
[22 130]
[25 106]
[26 105]
[27 104]
[28 103]
[29 54]
[30 53]
[31 52]
[32 51]
[34 50]
[35 49]
[56 94]
[57 93]
[62 92]
[63 91]
[64 90]
[65 89]
[66 88]
[108 129]
[109 128]
[110 127]
[111 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
