%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:57 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UUCACCCUCUAGGGGGGGGGGAAUCACCACGAUCAAAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCxxxxxxxxxxCAUUGCCCCCACAAUCCUAGGCCUACCCGCCGCAGUACUGAUCAUUCUAUCCCCCCCCCCUUCCCCCUCUA\
) } def
/len { sequence length } bind def

/coor [
[94.37410736 541.42187500]
[80.35216522 535.86883545]
[68.15220642 527.00250244]
[58.54113770 515.38024902]
[52.12311172 501.73251343]
[49.30157471 486.91732788]
[50.25389099 471.86596680]
[54.92019653 457.52453613]
[63.00716019 444.79458618]
[74.00643921 434.47631836]
[87.22659302 427.21832275]
[101.83660889 423.47689819]
[101.83660889 408.47689819]
[101.83660889 393.47689819]
[101.83660889 378.47689819]
[101.83660889 363.47689819]
[101.83660889 348.47689819]
[101.83660889 333.47689819]
[101.83660889 318.47689819]
[101.83660889 303.47689819]
[101.83660889 288.47689819]
[101.83660889 273.47689819]
[89.22939301 269.16918945]
[78.55496216 261.15890503]
[70.86906433 250.22065735]
[66.93730927 237.41944885]
[67.15896606 224.00700378]
[71.52642059 211.29946899]
[79.62455750 200.54814148]
[90.67018127 192.81632996]
[103.58772278 188.87417603]
[104.20354462 173.88682556]
[104.81937408 158.89947510]
[105.43519592 143.91212463]
[106.05102539 128.92475891]
[82.89295197 120.95829773]
[75.44383240 99.88798523]
[86.20764160 82.78437042]
[81.36782074 68.58661652]
[76.52800751 54.38886261]
[71.68819427 40.19110870]
[51.58959198 39.42318726]
[33.54475403 30.64734650]
[20.59259033 15.38412476]
[14.89717865 -3.75703597]
[17.38623810 -23.52388191]
[4.09889746 -30.48423767]
[-11.58119488 -27.09097099]
[-23.91893196 -37.34571457]
[-23.44985962 -53.38190842]
[-10.53380871 -62.89795685]
[4.92113161 -58.59396362]
[11.05925369 -43.77157974]
[24.34659576 -36.81122208]
[27.70919418 -40.86291122]
[31.49236298 -44.52499771]
[35.65125275 -47.75406647]
[40.13655853 -50.51183319]
[44.89510345 -52.76560974]
[49.87047195 -54.48867035]
[48.02714539 -69.37497711]
[46.18382263 -84.26128387]
[44.34049988 -99.14759064]
[42.49717331 -114.03390503]
[40.65385056 -128.92021179]
[25.87496567 -132.29072571]
[13.14182568 -140.51525879]
[3.99201989 -152.60066223]
[-0.46956953 -167.08755493]
[0.29581654 -182.22657776]
[6.19575405 -196.18962097]
[16.51779747 -207.29057312]
[30.01550674 -214.18894958]
[45.05897141 -216.05172729]
[59.83161926 -212.65399170]
[72.54958344 -204.40600586]
[81.67710114 -192.30375671]
[86.11198425 -177.80867004]
[85.31870270 -162.67108154]
[79.39304352 -148.71893311]
[69.05056000 -137.63702393]
[55.54015732 -130.76353455]
[57.38348007 -115.87722778]
[59.22680664 -100.99092102]
[61.07012939 -86.10460663]
[62.91345596 -71.21829987]
[64.75678253 -56.33199692]
[78.61714172 -53.89660645]
[91.20730591 -47.56774902]
[101.45761108 -37.87110138]
[108.49369812 -25.61897087]
[111.71115875 -11.84227371]
[110.82739258 2.29623246]
[105.90641785 15.60006809]
[97.35435486 26.94029045]
[85.88594055 35.35129166]
[90.72576141 49.54904556]
[95.56557465 63.74679947]
[100.40539551 77.94454956]
[117.56768036 81.09822845]
[129.42727661 97.29962921]
[143.57460022 92.31430054]
[157.72190857 87.32897949]
[164.32089233 72.96829987]
[179.17041016 67.55837250]
[193.46051025 74.30880737]
[198.71315002 89.21469116]
[191.81201172 103.43263245]
[176.85142517 108.52737427]
[162.70722961 101.47629547]
[148.55992126 106.46162415]
[134.41259766 111.44694519]
[149.34014893 109.97446442]
[162.04557800 117.94767761]
[167.21186829 132.02990723]
[162.67701721 146.32798767]
[150.33877563 154.85839844]
[135.36050415 154.05130005]
[124.01036835 144.24443054]
[121.03837585 129.54058838]
[120.42255402 144.52793884]
[119.80672455 159.51528931]
[119.19090271 174.50265503]
[118.57507324 189.49000549]
[133.94799805 196.30967712]
[145.51635742 208.46607971]
[151.53973389 224.08969116]
[151.12747192 240.79249573]
[144.37034607 256.03302002]
[132.32237244 267.50296021]
[116.83660889 273.47689819]
[116.83660889 288.47689819]
[116.83660889 303.47689819]
[116.83660889 318.47689819]
[116.83660889 333.47689819]
[116.83660889 348.47689819]
[116.83660889 363.47689819]
[116.83660889 378.47689819]
[116.83660889 393.47689819]
[116.83660889 408.47689819]
[116.83660889 423.47689819]
[131.44662476 427.21832275]
[144.66677856 434.47631836]
[155.66606140 444.79458618]
[163.75302124 457.52453613]
[168.41932678 471.86596680]
[169.37164307 486.91732788]
[166.55010986 501.73251343]
[160.13208008 515.38024902]
[150.52101135 527.00250244]
[138.32104492 535.86883545]
[124.29911041 541.42187500]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[31 124]
[32 123]
[33 122]
[34 121]
[35 120]
[38 99]
[39 98]
[40 97]
[41 96]
[46 54]
[47 53]
[60 87]
[61 86]
[62 85]
[63 84]
[64 83]
[65 82]
[101 112]
[102 111]
[103 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
