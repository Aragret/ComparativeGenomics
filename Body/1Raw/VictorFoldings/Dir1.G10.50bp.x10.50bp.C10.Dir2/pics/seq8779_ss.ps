%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:40:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCCUCUACCUGGGGGGGGGGGCACGACAACACAUAAUGACCCACCAAUCACAUGCCUAUCAUAUAGUAAAxxxxxxxxxxCUGAAUCAUCCGCUACCUUCACGCCAAUGGCGCCUCAAUAUUCUUUAUCUCCCCCCCCCCGCCUCUUCCU\
) } def
/len { sequence length } bind def

/coor [
[87.36345673 410.99768066]
[73.51751709 404.98165894]
[61.80885315 395.45223999]
[53.10633087 383.11657715]
[48.05572891 368.89004517]
[47.03183746 353.82836914]
[50.11063766 339.04919434]
[57.06365967 325.64926147]
[67.37493896 314.62292480]
[80.27931976 306.78842163]
[94.81920624 302.72711182]
[94.81920624 287.72711182]
[94.81920624 272.72711182]
[94.81920624 257.72711182]
[94.81920624 242.72711182]
[94.81920624 227.72711182]
[94.81920624 212.72711182]
[94.81920624 197.72711182]
[94.81920624 182.72711182]
[94.81920624 167.72711182]
[94.81920624 152.72711182]
[92.53752136 149.95919800]
[91.51812744 145.92651367]
[92.35057831 141.25111389]
[95.31645966 136.79879761]
[96.25209045 121.82800293]
[90.13188934 135.52264404]
[75.89323425 140.24076843]
[62.80626297 132.91061401]
[59.39130783 118.30451202]
[67.87168884 105.93183899]
[82.72579193 103.84775543]
[68.08229065 100.59692383]
[53.43879318 97.34609985]
[42.11822510 103.61496735]
[29.95699501 100.56153870]
[23.37683487 90.36306763]
[8.80413151 86.80830383]
[-5.76857138 83.25354767]
[-17.51692963 93.39039612]
[-32.98261642 94.65221405]
[-46.21875763 86.55380249]
[-52.13578796 72.20917511]
[-48.45848465 57.13412476]
[-36.60085297 47.12532043]
[-21.12238884 46.03135300]
[-7.97487879 54.27286911]
[-2.21380925 68.68083954]
[12.35889339 72.23560333]
[26.93159676 75.79036713]
[43.45007324 69.94743347]
[56.68961716 82.70259857]
[71.33312225 85.95342255]
[85.97662354 89.20425415]
[94.35913086 76.76425171]
[102.74090576 64.32537079]
[94.22981262 51.97379684]
[85.71872711 39.62222672]
[77.20763397 27.27065277]
[63.24163055 17.65883636]
[68.61164093 1.57781160]
[85.55077362 2.28628707]
[89.55921173 18.75956345]
[98.07029724 31.11113548]
[106.58139038 43.46270752]
[115.09247589 55.81428146]
[129.93368530 57.99111557]
[141.63330078 48.60395432]
[153.33293152 39.21679306]
[165.03256226 29.82963181]
[150.05473328 30.64511108]
[136.16058350 24.99246407]
[126.00608826 13.95225048]
[121.53239441 -0.36508378]
[123.59468842 -15.22263908]
[131.79873657 -27.78024673]
[144.57626343 -35.63739777]
[159.48472595 -37.29211426]
[173.67419434 -32.42808914]
[184.43223572 -21.97512436]
[189.70234680 -7.93140697]
[188.47708130 7.01846647]
[180.99166870 20.01558876]
[194.64790344 13.81018162]
[208.30415344 7.60477448]
[221.96038818 1.39936721]
[207.75933838 -3.43076110]
[198.97889709 -15.59233189]
[198.86325073 -30.59188652]
[207.45515442 -42.88738632]
[221.58004761 -47.93589401]
[236.01907349 -43.87208176]
[245.43728638 -32.19744873]
[246.35487366 -17.22553825]
[238.43344116 -4.48874474]
[240.50567627 -19.52142715]
[248.15483093 -32.58027649]
[260.18841553 -41.69106674]
[274.75390625 -45.49029160]
[289.62390137 -43.42913437]
[302.53668213 -35.85253143]
[311.54037476 -23.94189835]
[326.03594971 -27.79905701]
[340.53155518 -31.65621567]
[355.02716064 -35.51337433]
[368.77890015 -45.42933273]
[382.11419678 -34.96003342]
[375.74560547 -19.24769592]
[358.88430786 -21.01777840]
[344.38870239 -17.16061974]
[329.89312744 -13.30346012]
[315.39752197 -9.44630051]
[313.50405884 5.36396885]
[306.06445312 18.35618210]
[294.18536377 27.53505325]
[279.65789795 31.47722435]
[264.68768311 29.55191612]
[251.55995178 22.02163124]
[242.29060364 10.00685215]
[228.16580200 15.05560875]
[214.50955200 21.26101494]
[200.85331726 27.46642303]
[187.19706726 33.67182922]
[174.41972351 41.52925491]
[162.72009277 50.91641617]
[151.02047729 60.30357742]
[139.32084656 69.69074249]
[111.22287750 122.76362610]
[110.28725433 137.73442078]
[109.81920624 152.72711182]
[109.81920624 167.72711182]
[109.81920624 182.72711182]
[109.81920624 197.72711182]
[109.81920624 212.72711182]
[109.81920624 227.72711182]
[109.81920624 242.72711182]
[109.81920624 257.72711182]
[109.81920624 272.72711182]
[109.81920624 287.72711182]
[109.81920624 302.72711182]
[124.35910034 306.78842163]
[137.26347351 314.62292480]
[147.57476807 325.64926147]
[154.52778625 339.04919434]
[157.60658264 353.82836914]
[156.58268738 368.89004517]
[151.53208923 383.11657715]
[142.82955933 395.45223999]
[131.12091064 404.98165894]
[117.27496338 410.99768066]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 129]
[26 128]
[32 54]
[33 53]
[34 52]
[37 50]
[38 49]
[39 48]
[56 66]
[57 65]
[58 64]
[59 63]
[67 127]
[68 126]
[69 125]
[70 124]
[83 123]
[84 122]
[85 121]
[86 120]
[95 119]
[102 112]
[103 111]
[104 110]
[105 109]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
