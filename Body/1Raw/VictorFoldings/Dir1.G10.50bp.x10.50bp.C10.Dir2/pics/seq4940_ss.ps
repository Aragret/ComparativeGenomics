%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:13 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AUUAAUAAUCAUGGGGGGGGGGAAUAGCUAUAGCAAUAAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCxxxxxxxxxxUGAGCCCUACAAACAACUAACCUGCCACUAAUAGUUAUGUCAUCCCUCUUCCCCCCCCCCAUUAAUCAUCAU\
) } def
/len { sequence length } bind def

/coor [
[92.61845398 404.93502808]
[78.45785522 399.78002930]
[65.86811066 391.49783325]
[55.52817154 380.53506470]
[47.99565887 367.48291016]
[43.67679596 353.04531860]
[42.80448532 338.00085449]
[45.42577744 323.16085815]
[51.39930344 309.32562256]
[60.40292358 297.24127197]
[71.95108032 287.55950928]
[85.42099762 280.80242920]
[100.08625793 277.33444214]
[100.08625793 262.33444214]
[100.08625793 247.33445740]
[100.08625793 232.33445740]
[100.08625793 217.33445740]
[100.08625793 202.33445740]
[100.08625793 187.33445740]
[100.08625793 172.33445740]
[100.08625793 157.33445740]
[100.08625793 142.33445740]
[100.08625793 127.33445740]
[100.08625793 112.33445740]
[93.54262543 121.09214783]
[82.02365875 126.20990753]
[67.35213470 125.62924194]
[52.35906601 125.17327881]
[37.36599731 124.71730804]
[22.37293053 124.26134491]
[7.37986183 123.80537415]
[1.78787351 137.89457703]
[-8.28798485 149.21945190]
[-21.63100433 156.41247559]
[-36.62995148 158.60505676]
[-51.47362900 155.53242493]
[-64.36959076 147.56562805]
[-73.76058960 135.66667175]
[-78.51261139 121.27243805]
[-78.05182648 106.12108612]
[-72.43388367 92.04222107]
[-62.33717346 80.73593140]
[-48.98092270 73.56750488]
[-33.97795868 71.40256500]
[-19.13996887 74.50254822]
[-6.25871134 82.49310303]
[3.11034131 94.40933990]
[7.83582926 108.81230927]
[22.82889748 109.26827240]
[37.82196426 109.72424316]
[52.81503296 110.18020630]
[67.80810547 110.63617706]
[71.77532959 104.27134705]
[58.83628082 96.68313599]
[43.85854721 95.86610413]
[36.93926620 82.55732727]
[44.87416458 69.82793427]
[59.87002945 70.18002319]
[67.19878387 83.26674652]
[79.70979309 91.54167938]
[83.67702484 85.17684937]
[76.66479492 71.91680908]
[69.65256500 58.65677261]
[55.48470306 50.39821625]
[55.82345581 34.00256729]
[70.32034302 26.33626366]
[84.06221008 35.28573990]
[82.91260529 51.64454269]
[89.92483521 64.90457916]
[96.93706512 78.16461945]
[97.14044952 63.16600037]
[97.34384155 48.16737747]
[93.84796143 33.58044052]
[97.48541260 19.02815628]
[107.43356323 7.80165625]
[121.44255066 2.43990922]
[136.34411621 4.15552139]
[148.76814270 12.56049252]
[155.90483093 25.75396347]
[156.14015198 40.75211716]
[149.42088318 54.16299057]
[137.26721191 62.95336914]
[127.65184784 74.46617889]
[118.03648376 85.97898865]
[131.99429321 80.48539734]
[145.95210266 74.99181366]
[144.44091797 60.58715057]
[146.71908569 46.29603577]
[152.62417603 33.09739304]
[161.74554443 21.89365578]
[173.45283508 13.44905663]
[186.93962097 8.33751202]
[201.27888489 6.90361118]
[215.48678589 9.23939323]
[228.59014893 15.17847157]
[239.69308472 24.30786324]
[248.03828430 35.99670792]
[262.10458374 30.78713036]
[276.17086792 25.57755089]
[290.23715210 20.36797333]
[304.30340576 15.15839386]
[305.68630981 -0.04194735]
[313.53479004 -13.13255596]
[326.29055786 -21.51428223]
[341.42092896 -23.52293015]
[355.92175293 -18.75967789]
[366.91390991 -8.17027378]
[372.21487427 6.14274693]
[370.77212524 21.33752441]
[362.87216187 34.39712524]
[350.08349609 42.72855377]
[334.94531250 44.67760468]
[320.46334839 39.85728455]
[309.51300049 29.22467613]
[295.44671631 34.43425369]
[281.38043213 39.64383316]
[267.31414795 44.85341263]
[253.24786377 50.06299210]
[254.46580505 65.58472443]
[251.27037048 80.83753967]
[243.91105652 94.59078217]
[232.97367859 105.73246765]
[219.33367920 113.35916138]
[204.08609009 116.84923553]
[188.45767212 115.91355133]
[173.70812988 110.61936188]
[161.02867126 101.38558197]
[151.44569397 88.94962311]
[137.48788452 94.44320679]
[123.53007507 99.93679810]
[115.08625793 112.33445740]
[115.08625793 127.33445740]
[115.08625793 142.33445740]
[115.08625793 157.33445740]
[115.08625793 172.33445740]
[115.08625793 187.33445740]
[115.08625793 202.33445740]
[115.08625793 217.33445740]
[115.08625793 232.33445740]
[115.08625793 247.33445740]
[115.08625793 262.33444214]
[115.08625793 277.33444214]
[129.75151062 280.80242920]
[143.22143555 287.55950928]
[154.76959229 297.24127197]
[163.77320862 309.32562256]
[169.74673462 323.16085815]
[172.36802673 338.00085449]
[171.49571228 353.04531860]
[167.17684937 367.48291016]
[159.64433289 380.53506470]
[149.30439758 391.49783325]
[136.71466064 399.78002930]
[122.55405426 404.93502808]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[13 142]
[14 141]
[15 140]
[16 139]
[17 138]
[18 137]
[19 136]
[20 135]
[21 134]
[22 133]
[23 132]
[24 131]
[27 52]
[28 51]
[29 50]
[30 49]
[31 48]
[61 70]
[62 69]
[63 68]
[84 130]
[85 129]
[86 128]
[97 118]
[98 117]
[99 116]
[100 115]
[101 114]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
