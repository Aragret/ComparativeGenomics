%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:16 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCUUACUACCAGGGGGGGGGGGACAACCUUAGCCAAACCAUUUACCCAAAUAAAGUAUAGGCGAUAGAAAUxxxxxxxxxxAGCACUCGAAUAAUUCUUCUCACCCUAACAGGUCAACCUCGCUUCCCCACCCCCCCCCCCCCUUACUAACA\
) } def
/len { sequence length } bind def

/coor [
[88.88610840 573.55975342]
[74.86416626 568.00677490]
[62.66420746 559.14044189]
[53.05313492 547.51812744]
[46.63510895 533.87042236]
[43.81357193 519.05523682]
[44.76588821 504.00384521]
[49.43219376 489.66244507]
[57.51916122 476.93246460]
[68.51843262 466.61419678]
[81.73859406 459.35623169]
[96.34860229 455.61480713]
[96.34860229 440.61480713]
[96.34860229 425.61480713]
[96.34860229 410.61480713]
[96.34860229 395.61480713]
[96.34860229 380.61480713]
[96.34860229 365.61480713]
[96.34860229 350.61480713]
[96.34860229 335.61480713]
[96.34860229 320.61480713]
[96.34860229 305.61480713]
[80.90893555 302.67007446]
[66.32456207 296.79708862]
[53.14536285 288.21539307]
[41.86858749 277.24670410]
[32.92009735 264.30282593]
[26.63830948 249.87026978]
[23.26136971 234.49179077]
[22.91813660 218.74617004]
[25.62327003 203.22631836]
[31.27660370 188.51696777]
[39.66686249 175.17269897]
[50.47954941 163.69691467]
[63.30873489 154.52299500]
[77.67230988 147.99778748]
[93.03008270 144.36863708]
[92.41425323 129.38127136]
[91.79843140 114.39392090]
[82.63648987 102.51709747]
[68.29643250 98.11679840]
[53.95637131 93.71649933]
[39.61631012 89.31620026]
[23.76357079 93.51413727]
[12.39514065 81.69505310]
[17.20588493 66.01740265]
[33.24692535 62.60900879]
[44.01660919 74.97613525]
[58.35667038 79.37643433]
[72.69673157 83.77674103]
[87.03679657 88.17704010]
[93.57014465 84.49391937]
[93.72410583 69.49470520]
[106.63683319 77.12767792]
[113.17018127 73.44455719]
[116.82888794 58.89760590]
[115.88715363 49.74834824]
[120.71493530 44.09107590]
[124.67154694 29.62230682]
[128.62815857 15.15353966]
[132.58476257 0.68477231]
[127.48065948 -16.97814751]
[140.35864258 -28.86100006]
[144.01734924 -43.40795517]
[138.55166626 -60.96235657]
[151.18295288 -73.10710907]
[154.54220581 -87.72612000]
[157.90147400 -102.34512329]
[161.26072693 -116.96413422]
[147.74461365 -123.62831879]
[136.13008118 -133.23036194]
[127.04347992 -145.25244141]
[120.97484589 -159.04621887]
[118.25144958 -173.86782837]
[119.02016449 -188.91793823]
[123.23953247 -203.38491821]
[130.68200684 -216.48858643]
[140.94622803 -227.52229309]
[153.47865295 -235.89097595]
[167.60343933 -241.14335632]
[182.55883789 -242.99613953]
[197.53831482 -241.34944153]
[211.73408508 -236.29205322]
[224.38053894 -228.09671021]
[234.79571533 -217.20536804]
[242.41789246 -204.20541382]
[246.83605957 -189.79789734]
[247.81192017 -174.75979614]
[245.29284668 -159.90209961]
[239.41471863 -146.02607727]
[230.49450684 -133.88002014]
[219.01327515 -124.11897278]
[205.59019470 -117.26932526]
[190.94915771 -113.70046997]
[175.87973022 -113.60487366]
[172.52047729 -98.98587036]
[169.16122437 -84.36685944]
[165.80195618 -69.74785614]
[171.96505737 -59.29422379]
[169.24151611 -47.05683899]
[158.56430054 -39.74924850]
[154.90559387 -25.20229530]
[160.85276794 -14.62432957]
[157.87852478 -2.44544363]
[147.05352783 4.64138269]
[143.09692383 19.11014938]
[139.14031982 33.57891846]
[135.18370056 48.04768372]
[131.37583923 62.55631256]
[127.71714020 77.10326385]
[125.08401489 105.38210297]
[106.78578186 113.77809906]
[107.40161133 128.76545715]
[108.01743317 143.75280762]
[122.19628143 145.76336670]
[135.79917908 150.22883606]
[148.40467834 157.00952148]
[159.62248230 165.89404297]
[169.10546875 176.60589600]
[176.56053162 188.81207275]
[181.75752258 202.13336182]
[184.53648376 216.15620422]
[184.81245422 230.44551086]
[182.57814026 244.55812073]
[177.90406799 258.05657959]
[170.93638611 270.52267456]
[161.89225769 281.57046509]
[151.05313110 290.85815430]
[138.75596619 298.09866333]
[125.38273621 303.06851196]
[111.34860229 305.61480713]
[111.34860229 320.61480713]
[111.34860229 335.61480713]
[111.34860229 350.61480713]
[111.34860229 365.61480713]
[111.34860229 380.61480713]
[111.34860229 395.61480713]
[111.34860229 410.61480713]
[111.34860229 425.61480713]
[111.34860229 440.61480713]
[111.34860229 455.61480713]
[125.95861816 459.35623169]
[139.17877197 466.61419678]
[150.17805481 476.93246460]
[158.26501465 489.66244507]
[162.93132019 504.00384521]
[163.88363647 519.05523682]
[161.06210327 533.87042236]
[154.64407349 547.51812744]
[145.03300476 559.14044189]
[132.83305359 568.00677490]
[118.81110382 573.55975342]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[22 131]
[37 114]
[38 113]
[39 112]
[40 51]
[41 50]
[42 49]
[43 48]
[55 110]
[56 109]
[58 108]
[59 107]
[60 106]
[61 105]
[63 102]
[64 101]
[66 98]
[67 97]
[68 96]
[69 95]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
