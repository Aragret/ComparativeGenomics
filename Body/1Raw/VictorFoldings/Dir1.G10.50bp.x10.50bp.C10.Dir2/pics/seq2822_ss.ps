%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:55 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
GCUUUAAUUUGGGGGGGGGGAUUAAUGCAAACAGUACCUAACAAACCCACAGGUCCUAAACUACCAAACCxxxxxxxxxxACUUCCAAUUAACUAGUUUUGACAACAUUCAAAAAAGAGUAAUAAACUUCCCCCCCCCCCGCCUUAAUUU\
) } def
/len { sequence length } bind def

/coor [
[73.10588074 400.59863281]
[59.88568497 393.32617188]
[48.99888229 382.87915039]
[41.18775177 369.96990967]
[36.98487091 355.47857666]
[36.67679977 340.39324951]
[40.28453827 325.74243164]
[47.56211472 312.52502441]
[58.01332092 301.64227295]
[70.92558289 293.83612061]
[85.41851807 289.63882446]
[85.10646057 274.64208984]
[84.79440308 259.64532471]
[84.48235321 244.64857483]
[84.17029572 229.65182495]
[83.85823822 214.65507507]
[83.54618073 199.65830994]
[83.23412323 184.66156006]
[82.92206573 169.66481018]
[82.61001587 154.66806030]
[82.29795837 139.67129517]
[85.69369507 95.11405945]
[75.25388336 84.34324646]
[64.81407166 73.57244110]
[54.37425995 62.80163193]
[43.93444824 52.03082275]
[31.69552994 56.37066269]
[18.77226448 55.73877335]
[7.09999800 50.26544189]
[-1.58681691 40.80331039]
[-6.01233006 28.79475021]
[-5.54660606 16.05206490]
[-0.29503709 4.48397636]
[-10.27776337 -6.71178961]
[-20.26049042 -17.90755463]
[-32.87161636 -26.02909660]
[-47.19421387 -30.48591232]
[-61.51681137 -34.94272995]
[-75.83940887 -39.39954376]
[-86.61249542 -28.52759743]
[-101.20752716 -23.91852760]
[-116.27068329 -26.63146210]
[-128.34054565 -36.04299164]
[-134.64356995 -49.99041367]
[-133.73133850 -65.26871490]
[-125.81350708 -78.36705017]
[-112.70951080 -86.27552032]
[-97.43056488 -87.17681885]
[-83.48764801 -80.86382294]
[-74.08475494 -68.78723145]
[-71.38259125 -53.72214127]
[-57.05999756 -49.26532745]
[-42.73740005 -44.80850983]
[-28.41480255 -40.35169601]
[-38.29648590 -51.63674545]
[-45.47508240 -64.80745697]
[-49.60403061 -79.22799683]
[-50.48399734 -94.20215607]
[-48.07249832 -109.00704956]
[-42.48595810 -122.92790985]
[-33.99407196 -135.29269409]
[-23.00681305 -145.50445557]
[-10.05461311 -153.07020569]
[4.23722982 -157.62467957]
[19.17874336 -158.94801331]
[34.04859161 -156.97630310]
[48.12889481 -151.80473328]
[60.73989868 -143.68299866]
[71.27277374 -133.00318909]
[79.21902466 -120.28087616]
[84.19502258 -106.13027954]
[85.96054077 -91.23454285]
[84.43035126 -76.31279755]
[79.67832184 -62.08541870]
[71.93386841 -49.23927307]
[61.57086945 -38.39453888]
[49.08962631 -30.07476616]
[35.09270096 -24.68161392]
[20.25582695 -22.47544861]
[5.29528856 -23.56277657]
[-9.06472397 -27.89028168]
[0.91800231 -16.69451523]
[10.90072918 -5.49875021]
[27.56334496 -9.61718273]
[44.11268234 -4.74142742]
[56.00226212 7.88222599]
[59.91881561 24.86633682]
[54.70525742 41.59101105]
[65.14507294 52.36181641]
[75.58488464 63.13262558]
[86.02469635 73.90343475]
[96.46450806 84.67424011]
[111.07340240 88.07722473]
[125.19820404 83.02846527]
[131.43994141 71.69292450]
[143.35877991 67.79930878]
[154.36009216 72.92556763]
[168.58686829 68.17175293]
[182.81364441 63.41794205]
[197.04042053 58.66412354]
[211.26719666 53.91030884]
[225.49398804 49.15649414]
[232.32640076 34.90540314]
[247.26222229 29.73849487]
[261.44027710 36.72120285]
[266.44897461 51.71081161]
[259.31677246 65.81424713]
[244.27503967 70.66419983]
[230.24780273 63.38327408]
[216.02101135 68.13709259]
[201.79423523 72.89090729]
[187.56745911 77.64472198]
[173.34068298 82.39853668]
[159.11390686 87.15235138]
[148.24613953 100.89614105]
[130.24696350 97.15326691]
[116.12215424 102.20202637]
[115.65411377 117.19471741]
[129.43649292 123.11468506]
[143.21887207 129.03465271]
[158.59226990 124.44787598]
[171.68070984 133.72538757]
[172.44386292 149.75028992]
[160.29631042 160.22962952]
[144.55661011 157.12455750]
[137.29891968 142.81703186]
[123.51653290 136.89706421]
[109.73415375 130.97709656]
[97.29470825 139.35923767]
[97.60676575 154.35600281]
[97.91882324 169.35275269]
[98.23088074 184.34950256]
[98.54293823 199.34625244]
[98.85498810 214.34301758]
[99.16704559 229.33976746]
[99.47910309 244.33651733]
[99.79116058 259.33328247]
[100.10321808 274.33001709]
[100.41527557 289.32678223]
[115.07026672 292.91754150]
[128.29608154 300.17980957]
[139.19094849 310.61840820]
[147.01203918 323.52160645]
[151.22610474 338.00967407]
[151.54583740 353.09478760]
[147.94940186 367.74838257]
[140.68203735 380.97137451]
[130.23924255 391.86221313]
[117.33300781 399.67834473]
[102.84332275 403.88681030]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[22 92]
[23 91]
[24 90]
[25 89]
[26 88]
[33 83]
[34 82]
[35 81]
[36 54]
[37 53]
[38 52]
[39 51]
[93 117]
[94 116]
[97 114]
[98 113]
[99 112]
[100 111]
[101 110]
[102 109]
[118 128]
[119 127]
[120 126]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
