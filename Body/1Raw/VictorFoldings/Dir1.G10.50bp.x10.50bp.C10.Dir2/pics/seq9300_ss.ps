%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UAAUAAUCAACACCCGGGGGGGGGGUCCUAGCCUUACUACUAAUAAUUAUUACAUUUUGACUACCACAACUCAACxxxxxxxxxxAUCUCAAUUACAAUAUAUACACCAACAAACAAUGUUCAACCAGUAACUACCCCCCCCCCCUACUAAUCAACGCCC\
) } def
/len { sequence length } bind def

/coor [
[83.98137665 415.22073364]
[69.85028839 410.06060791]
[56.90810394 402.39154053]
[45.59562683 392.47476196]
[36.29816055 380.64801025]
[29.33236694 367.31411743]
[24.93550301 352.92724609]
[23.25732231 337.97738647]
[24.35498428 322.97372437]
[28.19110107 308.42730713]
[34.63501740 294.83352661]
[43.46725845 282.65542603]
[54.38699722 272.30776978]
[67.02230835 264.14300537]
[80.94284821 258.43920898]
[95.67447662 255.39065552]
[95.38180542 240.39350891]
[95.08912659 225.39636230]
[94.79644775 210.39921570]
[94.50377655 195.40206909]
[94.21109772 180.40492249]
[93.91841888 165.40777588]
[93.62574768 150.41064453]
[93.33306885 135.41349792]
[93.04039001 120.41635132]
[92.74771881 105.41920471]
[90.32992554 102.34250641]
[89.30367279 98.20348358]
[90.11693573 93.65869141]
[92.90262604 89.54199982]
[93.48786926 74.55342102]
[90.71694183 68.46067047]
[91.37741852 62.75197601]
[94.39969635 58.99476624]
[95.56929016 44.04043579]
[96.73888397 29.08610153]
[97.90847015 14.13177013]
[99.07806396 -0.82256252]
[84.23562622 -3.03316545]
[69.58354950 -6.27374458]
[55.19321442 -10.52851105]
[41.13473511 -15.77673721]
[27.47660065 -21.99285316]
[14.28535366 -29.14657402]
[1.62526047 -37.20304871]
[-10.44199944 -46.12302399]
[-21.85763359 -55.86304474]
[-32.56602859 -66.37565613]
[-42.51501083 -77.60964203]
[-51.65611267 -89.51027679]
[-59.94479752 -102.01956940]
[-67.34068298 -115.07658386]
[-73.80773163 -128.61770630]
[-79.31444550 -142.57696533]
[-83.83399200 -156.88633728]
[-87.34435272 -171.47613525]
[-89.82843018 -186.27526855]
[-91.27410889 -201.21162415]
[-91.67435455 -216.21243286]
[-91.02722168 -231.20463562]
[-89.33585358 -246.11515808]
[-86.60849762 -260.87139893]
[-82.85843658 -275.40142822]
[-78.10394287 -289.63446045]
[-72.36817169 -303.50119019]
[-65.67908478 -316.93399048]
[-58.06925964 -329.86749268]
[-49.57577133 -342.23864746]
[-40.24000168 -353.98718262]
[-30.10743523 -365.05587769]
[-19.22743416 -375.39077759]
[-7.65300560 -384.94155884]
[4.55945873 -393.66168213]
[17.35046196 -401.50863647]
[30.65768623 -408.44424438]
[44.41629791 -414.43469238]
[58.55926895 -419.45077515]
[73.01769257 -423.46804810]
[87.72113037 -426.46701050]
[102.59794617 -428.43295288]
[117.57566833 -429.35638428]
[132.58131409 -429.23275757]
[147.54177856 -428.06268311]
[162.38418579 -425.85186768]
[177.03622437 -422.61108398]
[191.42649841 -418.35610962]
[205.48489380 -413.10769653]
[219.14294434 -406.89135742]
[232.33409119 -399.73745728]
[244.99406433 -391.68081665]
[257.06118774 -382.76065063]
[268.47668457 -373.02047729]
[279.18493652 -362.50772095]
[289.13375854 -351.27359009]
[298.27468872 -339.37280273]
[306.56320190 -326.86340332]
[313.95889282 -313.80627441]
[320.42575073 -300.26507568]
[325.93225098 -286.30572510]
[330.45159912 -271.99627686]
[333.96176147 -257.40643311]
[336.44561768 -242.60728455]
[337.89108276 -227.67091370]
[338.29110718 -212.67008972]
[337.64376831 -197.67790222]
[335.95217896 -182.76737976]
[333.22460938 -168.01119995]
[329.47433472 -153.48121643]
[324.71963501 -139.24824524]
[318.98367310 -125.38161469]
[312.29440308 -111.94889069]
[304.68438721 -99.01550293]
[296.19073486 -86.64447021]
[286.85479736 -74.89606476]
[276.72207642 -63.82752609]
[265.84191895 -53.49277496]
[254.26734924 -43.94216537]
[242.05476379 -35.22222519]
[229.26364136 -27.37543488]
[215.95632935 -20.44002724]
[202.19761658 -14.44979000]
[188.05458069 -9.43390751]
[173.59609985 -5.41681719]
[158.89262390 -2.41808987]
[144.01577759 -0.45233473]
[129.03804016 0.47087079]
[114.03239441 0.34702894]
[112.86280060 15.30136108]
[111.69321442 30.25569344]
[110.52362061 45.21002579]
[109.35402679 60.16436005]
[108.47644806 75.13866425]
[107.89120483 90.12724304]
[107.74485779 105.12652588]
[108.03753662 120.12367249]
[108.33021545 135.12081909]
[108.62288666 150.11796570]
[108.91556549 165.11511230]
[109.20824432 180.11225891]
[109.50091553 195.10939026]
[109.79359436 210.10653687]
[110.08627319 225.10368347]
[110.37894440 240.10083008]
[110.67162323 255.09797668]
[125.51097870 257.56942749]
[139.64346313 262.72576904]
[152.58770752 270.39132690]
[163.90286255 280.30505371]
[173.20352173 292.12930298]
[180.17289734 305.46130371]
[184.57363892 319.84698486]
[186.25585938 334.79638672]
[185.16223145 349.80035400]
[181.33003235 364.34783936]
[174.88978577 377.94332886]
[166.06083679 390.12380981]
[155.14387512 400.47442627]
[142.51077271 408.64257812]
[128.59176636 414.35012817]
[113.86096191 417.40264893]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[16 144]
[17 143]
[18 142]
[19 141]
[20 140]
[21 139]
[22 138]
[23 137]
[24 136]
[25 135]
[26 134]
[30 133]
[31 132]
[34 131]
[35 130]
[36 129]
[37 128]
[38 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
