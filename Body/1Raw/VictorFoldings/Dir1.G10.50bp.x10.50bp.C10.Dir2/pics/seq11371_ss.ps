%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:35 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACCCCACUAAGGGGGGGGGGAACACUCACCAAGACCUCAACCCCUGACCCCCAUGCCUCAGGAUACUCCUxxxxxxxxxxCGCUAACAAUCAAUACUAAACCCCCAUAAAUAGGAGAAGGCUUAGAAGAACCCCCCCCCCAACCCCACAAA\
) } def
/len { sequence length } bind def

/coor [
[77.88002777 551.17810059]
[63.85808563 545.62512207]
[51.65812683 536.75878906]
[42.04705811 525.13647461]
[35.62903214 511.48876953]
[32.80749512 496.67358398]
[33.75981140 481.62219238]
[38.42611694 467.28076172]
[46.51308060 454.55081177]
[57.51235580 444.23254395]
[70.73251343 436.97457886]
[85.34252930 433.23312378]
[85.34252930 418.23312378]
[85.34252930 403.23312378]
[85.34252930 388.23312378]
[85.34252930 373.23312378]
[85.34252930 358.23312378]
[85.34252930 343.23312378]
[85.34252930 328.23312378]
[85.34252930 313.23312378]
[85.34252930 298.23312378]
[74.66165924 287.91543579]
[74.44797516 272.70330811]
[85.34252930 261.57019043]
[75.75189209 246.90512085]
[85.01007080 231.02062988]
[84.70208740 216.02380371]
[82.70906067 213.96980286]
[81.43575287 210.97850037]
[81.25255585 207.32977295]
[82.41802979 203.43551636]
[85.03535461 199.79556274]
[85.95877075 184.82402039]
[86.88218689 169.85246277]
[84.13795471 162.94006348]
[87.98136902 154.58398438]
[89.21198273 139.63455200]
[90.44259644 124.68511963]
[84.48775482 121.44922638]
[79.54975128 116.80733490]
[75.95227051 111.06371307]
[73.93112183 104.59485626]
[73.61879730 97.82481384]
[75.03577423 91.19734955]
[62.88244247 82.40550995]
[50.72911072 73.61366272]
[38.57577515 64.82182312]
[26.42244339 56.02997971]
[12.43723106 62.37894821]
[-2.84723258 60.86874008]
[-15.31950474 51.90559387]
[-21.62460518 37.90055084]
[-20.06649590 22.62089539]
[-11.06429863 10.17677975]
[2.96044087 3.91560817]
[18.23513794 5.52160501]
[30.65097427 14.56276417]
[36.86815262 28.60705948]
[35.21428680 43.87664795]
[47.36761856 52.66849136]
[59.52095413 61.46033096]
[71.67428589 70.25217438]
[83.82762146 79.04401398]
[89.55466461 75.67729187]
[95.93961334 73.84254456]
[102.58030701 73.65534210]
[109.05847931 75.12746429]
[117.97463226 63.06503296]
[126.89077759 51.00260162]
[135.80693054 38.94017029]
[144.72308350 26.87773705]
[134.06674194 16.28244019]
[125.06673431 4.24842215]
[117.91487885 -8.96781063]
[112.76361847 -23.08455276]
[109.72276306 -37.80090714]
[108.85712433 -52.80319214]
[110.18515015 -67.77162933]
[113.67854309 -82.38717651]
[119.26282501 -96.33828735]
[126.81898499 -109.32760620]
[136.18594360 -121.07825470]
[147.16406250 -131.33978271]
[159.51933289 -139.89344788]
[172.98840332 -146.55693054]
[187.28417969 -151.18820190]
[202.10194397 -153.68855286]
[217.12585449 -154.00468445]
[232.03567505 -152.12985229]
[246.51361084 -148.10401917]
[260.25103760 -142.01301575]
[272.95520020 -133.98663330]
[284.35525513 -124.19599152]
[294.20819092 -112.84975433]
[302.30407715 -100.18978119]
[308.47024536 -86.48591614]
[312.57534790 -72.03025818]
[314.53186035 -57.13093185]
[314.29803467 -42.10551453]
[311.87890625 -27.27427292]
[307.32604980 -12.95333862]
[300.73645020 0.55203694]
[292.25061035 12.95398712]
[282.04937744 23.98816299]
[270.35025024 33.41936874]
[257.40252686 41.04658127]
[243.48220825 46.70722198]
[228.88601685 50.28063965]
[213.92507935 51.69066238]
[198.91828918 50.90723419]
[184.18548584 47.94705582]
[170.04074097 42.87322617]
[156.78550720 35.79388809]
[147.86936951 47.85631943]
[138.95321655 59.91875076]
[130.03706360 71.98118591]
[121.12091064 84.04361725]
[124.78008270 109.30841064]
[105.39202881 125.91573334]
[104.16141510 140.86517334]
[102.93080139 155.81460571]
[101.85373688 170.77587891]
[100.93032074 185.74743652]
[100.00690460 200.71897888]
[99.69892883 215.71582031]
[100.00690460 230.71266174]
[108.77638245 240.22579956]
[108.69018555 252.76231384]
[100.34252930 261.57019043]
[111.23708344 272.70330811]
[111.02339935 287.91543579]
[100.34252930 298.23312378]
[100.34252930 313.23312378]
[100.34252930 328.23312378]
[100.34252930 343.23312378]
[100.34252930 358.23312378]
[100.34252930 373.23312378]
[100.34252930 388.23312378]
[100.34252930 403.23312378]
[100.34252930 418.23312378]
[100.34252930 433.23312378]
[114.95253754 436.97457886]
[128.17269897 444.23254395]
[139.17198181 454.55081177]
[147.25894165 467.28076172]
[151.92524719 481.62219238]
[152.87756348 496.67358398]
[150.05603027 511.48876953]
[143.63800049 525.13647461]
[134.02693176 536.75878906]
[121.82697296 545.62512207]
[107.80503082 551.17810059]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 129]
[26 126]
[27 125]
[32 124]
[33 123]
[34 122]
[36 121]
[37 120]
[38 119]
[44 63]
[45 62]
[46 61]
[47 60]
[48 59]
[67 117]
[68 116]
[69 115]
[70 114]
[71 113]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
