%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:12 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AACAAUAUACGGGGGGGGGGUCUCCGGACAAUGAACCAUAACCAAUACUACCAAUCAAUACUCAUCAUUAxxxxxxxxxxCUGAUGUUCGCCGACCGUUGACUAUUCUCUACAAACCACAAAGACAUUGGCCCCCCCCCCAACACUAUAC\
) } def
/len { sequence length } bind def

/coor [
[79.34276581 410.35177612]
[65.49682617 404.33575439]
[53.78816605 394.80633545]
[45.08563995 382.47067261]
[40.03503799 368.24414062]
[39.01114655 353.18246460]
[42.08994675 338.40328979]
[49.04296875 325.00338745]
[59.35425186 313.97705078]
[72.25863647 306.14254761]
[86.79852295 302.08123779]
[86.79852295 287.08123779]
[86.79852295 272.08123779]
[86.79852295 257.08123779]
[86.79852295 242.08122253]
[86.79852295 227.08122253]
[86.79852295 212.08122253]
[86.79852295 197.08122253]
[86.79852295 182.08122253]
[86.79852295 167.08122253]
[86.79852295 152.08122253]
[68.61207581 130.09281921]
[67.46573639 106.80277252]
[78.41781616 92.07086945]
[92.17929077 89.93356323]
[83.66819763 77.58198547]
[75.15711212 65.23041534]
[60.95561981 58.25701904]
[60.10527802 43.38670731]
[44.81728745 40.40090179]
[36.36178207 27.75340652]
[39.30250549 13.19704247]
[30.79141617 0.84546989]
[22.28032494 -11.50610256]
[13.76923561 -23.85767555]
[14.52713013 -8.87683392]
[12.10747337 5.92672157]
[6.61918497 19.88661766]
[-1.69068170 32.37445450]
[-12.44806290 42.82810211]
[-25.16872025 50.77699661]
[-39.28004074 55.86331558]
[-54.14680862 57.85810471]
[-69.09980774 56.67156982]
[-83.46593475 52.35712433]
[-96.59850311 45.10897446]
[-107.90635681 35.25339890]
[-116.88048553 23.23403549]
[-123.11691284 9.59193516]
[-126.33492279 -5.05881357]
[-126.38964081 -20.05871391]
[-123.27862549 -34.73255157]
[-117.14189911 -48.41979599]
[-108.25570679 -60.50431824]
[-97.02006531 -70.44213867]
[-83.94073486 -77.78591919]
[-69.60646820 -82.20507050]
[-54.66252899 -83.50067902]
[-39.78160095 -81.61441803]
[-25.63354492 -76.63119507]
[-12.85522652 -68.77533722]
[-2.02185678 -58.40045547]
[6.37997723 -45.97156525]
[5.75600004 -60.95858383]
[5.13202238 -75.94560242]
[4.50804520 -90.93261719]
[3.88406777 -105.91963196]
[-10.40159130 -111.11466980]
[-21.60838699 -121.38482666]
[-28.02736664 -135.16398621]
[-28.67968178 -150.35092163]
[-23.46585655 -164.62973022]
[-13.18096542 -175.82299805]
[0.60662252 -182.22384644]
[15.79440022 -182.85618591]
[30.06634140 -177.62358093]
[41.24607849 -167.32397461]
[47.62878418 -153.52798462]
[48.24114227 -138.33938599]
[42.98976898 -124.07434082]
[32.67546463 -112.90815735]
[18.87108421 -106.54360962]
[19.49506187 -91.55659485]
[20.11903763 -76.56958008]
[20.74301529 -61.58256149]
[21.36699295 -46.59554291]
[26.12080765 -32.36876678]
[34.63189697 -20.01719284]
[43.14299011 -7.66562033]
[51.65407944 4.68595219]
[66.30342865 7.12153387]
[75.11083984 19.52654076]
[72.45684814 34.87561417]
[86.04956818 40.96554565]
[87.50868225 56.71932602]
[96.01977539 69.07089996]
[104.53086090 81.42247009]
[118.70742035 86.32402039]
[133.03001404 81.86720276]
[147.35261536 77.41039276]
[150.05477905 62.34530258]
[159.45767212 50.26870728]
[173.40058899 43.95571899]
[188.67953491 44.85701370]
[201.78352356 52.76548386]
[209.70137024 65.86382294]
[210.61358643 81.14212036]
[204.31057739 95.08953857]
[192.24070740 104.50106812]
[177.17755127 107.21400452]
[162.58251953 102.60493469]
[151.80943298 91.73298645]
[137.48683167 96.18980408]
[123.16423798 100.64662170]
[122.61858368 108.12674713]
[137.57881165 109.21828461]
[136.48704529 124.17849731]
[121.52726746 123.08699036]
[120.98161316 130.56712341]
[134.50579834 137.05528259]
[148.02999878 143.54344177]
[163.58088684 139.60015869]
[176.27206421 149.41410828]
[176.36793518 165.45686340]
[163.79498291 175.42181396]
[148.19807434 171.66468811]
[141.54182434 157.06764221]
[128.01763916 150.57946777]
[114.49345398 144.09130859]
[101.79852295 152.08122253]
[101.79852295 167.08122253]
[101.79852295 182.08122253]
[101.79852295 197.08122253]
[101.79852295 212.08122253]
[101.79852295 227.08122253]
[101.79852295 242.08122253]
[101.79852295 257.08123779]
[101.79852295 272.08123779]
[101.79852295 287.08123779]
[101.79852295 302.08123779]
[116.33840942 306.14254761]
[129.24278259 313.97705078]
[139.55407715 325.00338745]
[146.50709534 338.40328979]
[149.58589172 353.18246460]
[148.56199646 368.24414062]
[143.51139832 382.47067261]
[134.80886841 394.80633545]
[123.10021210 404.33575439]
[109.25427246 410.35177612]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[25 97]
[26 96]
[27 95]
[29 93]
[32 90]
[33 89]
[34 88]
[35 87]
[63 86]
[64 85]
[65 84]
[66 83]
[67 82]
[98 114]
[99 113]
[100 112]
[119 129]
[120 128]
[121 127]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
