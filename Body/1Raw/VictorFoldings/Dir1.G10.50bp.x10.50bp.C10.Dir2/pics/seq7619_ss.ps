%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AAUACUAACAGGGGGGGGGGUCUCAGACGCUCAGGAAAUAGAAACCGUCUGAACUAUCCUGCCCGCCAUCxxxxxxxxxxUAAACCCCAUUAAACGCCUGGCAGCCGGAAGCCUAUUCGCAGGAUUUCUCCCCCCCCCCCAUUACUAACA\
) } def
/len { sequence length } bind def

/coor [
[83.72521973 381.05963135]
[70.50502777 373.78717041]
[59.61822128 363.34014893]
[51.80709076 350.43090820]
[47.60420990 335.93960571]
[47.29613495 320.85424805]
[50.90387726 306.20343018]
[58.18144989 292.98605347]
[68.63265991 282.10327148]
[81.54492188 274.29711914]
[96.03785706 270.09985352]
[95.72579956 255.10308838]
[95.41374207 240.10633850]
[95.10168457 225.10957336]
[94.78963470 210.11282349]
[94.47757721 195.11607361]
[94.16551971 180.11932373]
[93.85346222 165.12255859]
[93.54140472 150.12580872]
[93.22934723 135.12905884]
[80.49407959 129.99018860]
[70.63305664 120.43219757]
[65.09931183 107.86347961]
[50.10012436 108.01951599]
[35.10093307 108.17555237]
[20.10174561 108.33158875]
[5.10255814 108.48762512]
[-9.89663029 108.64366150]
[-24.89581871 108.79969788]
[-29.90839958 123.10528564]
[-39.51388550 134.83177185]
[-52.55236816 142.56312561]
[-67.44938660 145.36573792]
[-82.40605164 142.90119934]
[-95.61627197 135.46710205]
[-105.48485565 123.96115112]
[-110.82012177 109.77275085]
[-110.97780609 94.61521149]
[-105.93886566 80.31888580]
[-96.31179047 68.61012268]
[-83.25907898 60.90281296]
[-68.35692596 58.12765121]
[-53.40482330 60.61975098]
[-40.20832443 68.07817841]
[-30.36096191 79.60229492]
[-25.05185509 93.80050659]
[-10.05266666 93.64447021]
[4.94652128 93.48843384]
[19.94570923 93.33239746]
[34.94489670 93.17636108]
[49.94408798 93.02032471]
[64.94327545 92.86428833]
[71.44489288 78.44777679]
[83.52654266 68.24283600]
[98.82730103 64.24364471]
[114.35722351 67.23168945]
[123.12343597 55.05984879]
[131.88964844 42.88801193]
[140.65585327 30.71617699]
[149.42205811 18.54434013]
[158.18826294 6.37250280]
[166.95446777 -5.79933405]
[157.42904663 -14.71101570]
[153.99134827 -30.32170296]
[160.57644653 -48.18453979]
[165.47801208 -62.36109543]
[170.37956238 -76.53765106]
[175.28111267 -90.71421051]
[162.28819275 -98.30831909]
[151.02667236 -108.29152679]
[141.92941284 -120.28010559]
[135.34608459 -133.81324768]
[131.52972412 -148.37077332]
[130.62704468 -163.39314270]
[132.67271423 -178.30291748]
[137.58811951 -192.52702332]
[145.18434143 -205.51870728]
[155.16935730 -216.77861023]
[167.15940857 -225.87393188]
[180.69361877 -232.45506287]
[195.25177002 -236.26905823]
[210.27427673 -237.16932678]
[225.18373108 -235.12123108]
[239.40702820 -230.20352173]
[252.39747620 -222.60520935]
[263.65576172 -212.61834717]
[272.74914551 -200.62683105]
[279.32809448 -187.09155273]
[283.13973999 -172.53279114]
[284.03756714 -157.51013184]
[281.98706055 -142.60102844]
[277.06704712 -128.37852478]
[269.46664429 -115.38929749]
[259.47796631 -104.13262177]
[247.48497009 -95.04118347]
[233.94862366 -88.46442413]
[219.38925171 -84.65513611]
[204.36643982 -83.75974274]
[189.45765686 -85.81266022]
[184.55610657 -71.63610077]
[179.65455627 -57.45954514]
[174.75300598 -43.28298950]
[179.13610840 -37.19707108]
[188.00346375 -49.29542160]
[202.24978638 -44.60049057]
[202.18681335 -29.60062218]
[187.90232849 -25.02523232]
[192.28543091 -18.93931389]
[207.28462219 -19.09535027]
[222.28379822 -19.25138664]
[234.49140930 -29.66070747]
[250.21299744 -26.46519661]
[257.38830566 -12.11617374]
[250.51306152 2.37901688]
[234.86135864 5.90090561]
[222.43983459 -4.25219870]
[207.44065857 -4.09616232]
[192.44146729 -3.94012570]
[179.12631226 2.96687293]
[170.36010742 15.13871002]
[161.59388733 27.31054688]
[152.82768250 39.48238373]
[144.06147766 51.65422058]
[135.29527283 63.82605743]
[126.52906036 75.99789429]
[133.95281982 88.72621155]
[135.61679077 103.36701965]
[131.23869324 117.43664551]
[121.56123352 128.54830933]
[108.22610474 134.81700134]
[108.53816223 149.81375122]
[108.85021973 164.81050110]
[109.16226959 179.80726624]
[109.47432709 194.80401611]
[109.78638458 209.80076599]
[110.09844208 224.79751587]
[110.41049957 239.79428101]
[110.72255707 254.79103088]
[111.03460693 269.78778076]
[125.68960571 273.37854004]
[138.91540527 280.64080811]
[149.81027222 291.07940674]
[157.63137817 303.98260498]
[161.84544373 318.47067261]
[162.16517639 333.55578613]
[158.56874084 348.20938110]
[151.30137634 361.43237305]
[140.85858154 372.32321167]
[127.95234680 380.13934326]
[113.46265411 384.34780884]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[23 52]
[24 51]
[25 50]
[26 49]
[27 48]
[28 47]
[29 46]
[56 125]
[57 124]
[58 123]
[59 122]
[60 121]
[61 120]
[62 119]
[65 102]
[66 101]
[67 100]
[68 99]
[108 118]
[109 117]
[110 116]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
