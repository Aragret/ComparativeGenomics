%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:28 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACCACGAUCAAGGGGGGGGGGAAGGAACAAGCAUCAAGCACGCAGCAAUGCAGCUCAAAACGCUUAGCCUAxxxxxxxxxxCCUGGCGGUGCUUCAUAUCCCUCUAGAGGAGCCUGUUCUGUAAUCGAUAACCCCCCCCCCACCCCGAUCAA\
) } def
/len { sequence length } bind def

/coor [
[170.43687439 639.12158203]
[156.41493225 633.56860352]
[144.21498108 624.70227051]
[134.60391235 613.07995605]
[128.18588257 599.43225098]
[125.36434174 584.61706543]
[126.31665802 569.56567383]
[130.98297119 555.22424316]
[139.06993103 542.49432373]
[150.06919861 532.17602539]
[163.28936768 524.91802979]
[177.89938354 521.17663574]
[177.89938354 506.17660522]
[177.89938354 491.17660522]
[177.89938354 476.17660522]
[177.89938354 461.17660522]
[177.89938354 446.17660522]
[177.89938354 431.17660522]
[177.89938354 416.17660522]
[177.89938354 401.17660522]
[177.89938354 386.17660522]
[165.03652954 375.31481934]
[163.23527527 358.27038574]
[173.91558838 344.47912598]
[171.15934753 329.73452759]
[168.40310669 314.98992920]
[165.64686584 300.24536133]
[162.89062500 285.50076294]
[160.13438416 270.75616455]
[150.19018555 259.66732788]
[155.25997925 244.68038940]
[152.50373840 229.93579102]
[147.66390991 215.73803711]
[140.84033203 202.37994385]
[128.16026306 194.56553650]
[128.77287292 178.75619507]
[121.94929504 165.39808655]
[115.12572479 152.03999329]
[108.30214691 138.68190002]
[101.47856903 125.32379913]
[94.65499878 111.96569824]
[83.36471558 102.08998871]
[69.21739960 97.10466766]
[55.07008362 92.11934662]
[39.05836105 95.66291046]
[28.18474960 83.38706207]
[33.63508606 67.92012787]
[49.80253220 65.17317963]
[60.05540466 77.97203064]
[74.20272064 82.95735168]
[88.35003662 87.94267273]
[96.50670624 75.35423279]
[86.17579651 64.47891998]
[75.84489441 53.60360718]
[60.24915695 54.74679565]
[47.59761429 45.55590439]
[43.86394119 30.37059021]
[50.81106186 16.36089706]
[65.15876007 10.14177227]
[80.13249207 14.64969635]
[88.66211700 27.75616455]
[86.72021484 43.27270508]
[97.05111694 54.14801788]
[107.38201904 65.02333069]
[114.37555695 62.31401825]
[128.36264038 56.89539337]
[135.35618591 54.18608093]
[135.66415405 39.18924332]
[135.97213745 24.19240570]
[121.92372131 18.44727898]
[110.90203857 8.01239491]
[104.39766693 -5.70101500]
[103.29027557 -20.83832359]
[107.72963715 -35.35233688]
[117.11534882 -47.28014755]
[130.17808533 -55.00862503]
[145.15121460 -57.49255371]
[160.00973511 -54.39599609]
[172.74417114 -46.13774490]
[181.63227844 -33.83465958]
[185.47201538 -19.15062523]
[183.74411011 -4.07154322]
[176.68222046 9.36326790]
[165.24140930 19.33685875]
[150.96897888 24.50038338]
[150.66099548 39.49721909]
[150.35302734 54.49406052]
[138.56452942 96.82385254]
[108.01309204 105.14212036]
[114.83666992 118.50022125]
[121.66024780 131.85832214]
[128.48382568 145.21641541]
[135.30738831 158.57452393]
[142.13096619 171.93261719]
[155.29911804 180.70248413]
[154.19844055 195.55636597]
[161.02201843 208.91445923]
[164.09318542 204.20561218]
[168.49794006 200.15078735]
[182.31152344 194.30400085]
[196.12510681 188.45721436]
[200.53916931 173.45553589]
[213.59196472 164.84399414]
[229.12036133 166.68869019]
[239.79232788 178.11862183]
[240.56887817 193.73690796]
[231.08337402 206.16908264]
[215.81454468 209.54505920]
[201.97189331 202.27079773]
[188.15830994 208.11758423]
[174.34472656 213.96437073]
[167.24832153 227.17955017]
[170.00457764 241.92414856]
[180.14590454 254.06762695]
[174.87898254 267.99990845]
[177.63522339 282.74450684]
[180.39146423 297.48910522]
[183.14770508 312.23370361]
[185.90394592 326.97830200]
[188.66018677 341.72290039]
[203.61546326 351.07455444]
[207.61343384 367.77844238]
[221.04089355 374.46453857]
[236.64801025 370.75003052]
[249.19369507 380.74929810]
[249.05397034 396.79174805]
[236.33602905 406.57098389]
[220.79597473 402.58520508]
[214.35481262 387.89196777]
[200.92736816 381.20590210]
[197.17855835 384.11953735]
[192.89938354 386.17660522]
[192.89938354 401.17660522]
[192.89938354 416.17660522]
[192.89938354 431.17660522]
[192.89938354 446.17660522]
[192.89938354 461.17660522]
[192.89938354 476.17660522]
[192.89938354 491.17660522]
[192.89938354 506.17660522]
[192.89938354 521.17663574]
[207.50938416 524.91802979]
[220.72955322 532.17602539]
[231.72882080 542.49432373]
[239.81579590 555.22424316]
[244.48210144 569.56567383]
[245.43441772 584.61706543]
[242.61286926 599.43225098]
[236.19485474 613.07995605]
[226.58377075 624.70227051]
[214.38381958 633.56860352]
[200.36187744 639.12158203]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[12 141]
[13 140]
[14 139]
[15 138]
[16 137]
[17 136]
[18 135]
[19 134]
[20 133]
[21 132]
[24 120]
[25 119]
[26 118]
[27 117]
[28 116]
[29 115]
[31 113]
[32 112]
[33 97]
[34 96]
[36 94]
[37 93]
[38 92]
[39 91]
[40 90]
[41 89]
[42 51]
[43 50]
[44 49]
[52 64]
[53 63]
[54 62]
[67 87]
[68 86]
[69 85]
[99 111]
[100 110]
[101 109]
[122 130]
[123 129]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
