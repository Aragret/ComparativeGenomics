%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:41:01 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
ACUAGUCUCAGGGGGGGGGGGGCUUCAACAUCGAAUACGCCGCAGGCCCCUUCGCCCUAUUCUUCAUAGCxxxxxxxxxxAAAGACGCCCUCGGCUUACUUCUCUUCCUUCUCUCCUUAAUGACAUUAACCCCCCCCCCCACUAUUCUCA\
) } def
/len { sequence length } bind def

/coor [
[85.04424286 371.67636108]
[71.19830322 365.66033936]
[59.48964310 356.13092041]
[50.78712082 343.79525757]
[45.73651886 329.56872559]
[44.71262741 314.50704956]
[47.79142761 299.72787476]
[54.74444962 286.32794189]
[65.05573273 275.30163574]
[77.96011353 267.46710205]
[92.50000000 263.40579224]
[92.50000000 248.40579224]
[92.50000000 233.40579224]
[92.50000000 218.40579224]
[92.50000000 203.40579224]
[92.50000000 188.40579224]
[92.50000000 173.40579224]
[92.50000000 158.40579224]
[92.50000000 143.40579224]
[92.50000000 128.40579224]
[92.50000000 113.40579987]
[90.01488495 98.61309052]
[74.96969604 99.65115356]
[60.17997742 96.76155853]
[46.65274811 90.14718628]
[35.30746841 80.26431274]
[26.91356277 67.79113770]
[22.03823471 53.58127594]
[21.00813866 38.60531235]
[23.88749886 23.88452148]
[30.47414589 10.42121792]
[40.31369400 -0.86949176]
[52.73088837 -9.22190380]
[47.82933807 -23.39846230]
[42.92778778 -37.57501984]
[37.87902832 -51.69982147]
[32.68361282 -65.77133942]
[20.64540100 -76.03739929]
[23.49554062 -90.65676880]
[18.30012512 -104.72829437]
[13.10470963 -118.79981232]
[7.90929413 -132.87132263]
[-6.16698074 -139.54188538]
[-11.23541641 -153.88641357]
[-4.78931952 -167.26487732]
[-9.98473454 -181.33639526]
[-15.18015099 -195.40791321]
[-29.25642586 -202.07847595]
[-34.32486343 -216.42300415]
[-27.87876511 -229.80146790]
[-33.07418060 -243.87298584]
[-38.26959610 -257.94451904]
[-53.15028000 -255.67512512]
[-68.18315887 -256.44799805]
[-82.75265503 -260.23150635]
[-96.26214600 -266.87066650]
[-108.15843201 -276.09362793]
[-117.95436096 -287.52273560]
[-125.24880219 -300.68997192]
[-129.74305725 -315.05615234]
[-131.25308228 -330.03295898]
[-129.71702576 -345.00711060]
[-125.19783020 -359.36544800]
[-117.88051605 -372.51998901]
[-108.06474304 -383.93203735]
[-96.15245056 -393.13433838]
[-82.63144684 -399.75003052]
[-68.05539703 -403.50820923]
[-53.02119827 -404.25494385]
[-38.14447784 -401.95971680]
[-24.03443336 -396.71649170]
[-11.26886177 -388.73995972]
[-0.37050542 -378.35675049]
[8.21435547 -365.99209595]
[14.13417530 -352.15225220]
[17.14654350 -337.40402222]
[17.12810135 -322.35128784]
[14.07960796 -307.61047363]
[8.12589550 -293.78521729]
[-0.48923472 -281.44161987]
[-11.41299915 -271.08514404]
[-24.19807625 -263.13992310]
[-19.00266075 -249.06840515]
[-13.80724525 -234.99688721]
[-0.21386179 -229.01728821]
[5.25548267 -214.82078552]
[-1.10863113 -200.60333252]
[4.08678436 -186.53181458]
[9.28219986 -172.46029663]
[22.87558365 -166.48069763]
[28.34492683 -152.28419495]
[21.98081398 -138.06674194]
[27.17622948 -123.99522400]
[32.37164307 -109.92370605]
[37.56705856 -95.85218811]
[49.23366165 -86.59261322]
[46.75513458 -70.96675873]
[51.95055008 -56.89523697]
[57.25201035 -51.67602921]
[57.10434341 -42.47657013]
[62.00589371 -28.30001259]
[66.90744781 -14.12345409]
[81.83183289 -15.22440624]
[96.54393005 -12.42243767]
[110.03974152 -5.90265083]
[121.39668274 3.89593124]
[129.83666992 16.30991936]
[134.77941895 30.49647141]
[135.88230896 45.49051285]
[133.06419373 60.27039337]
[126.51125336 73.82749176]
[116.66478729 85.23505402]
[104.19143677 93.71154022]
[108.55377960 90.87984467]
[113.87094116 89.41191101]
[119.79789734 89.52835083]
[125.94592285 91.37113190]
[139.72830200 97.29109192]
[153.51068115 103.21105194]
[167.29307556 109.13101959]
[181.07545471 115.05097961]
[198.01512146 115.74658966]
[202.03607178 132.21681213]
[187.32261658 140.64002991]
[175.15548706 128.83335876]
[161.37310791 122.91339874]
[147.59072876 116.99343872]
[133.80834961 111.07347107]
[120.02596283 105.15351105]
[107.50000000 113.40579987]
[107.50000000 128.40579224]
[107.50000000 143.40579224]
[107.50000000 158.40579224]
[107.50000000 173.40579224]
[107.50000000 188.40579224]
[107.50000000 203.40579224]
[107.50000000 218.40579224]
[107.50000000 233.40579224]
[107.50000000 248.40579224]
[107.50000000 263.40579224]
[122.03988647 267.46710205]
[134.94427490 275.30163574]
[145.25555420 286.32794189]
[152.20857239 299.72787476]
[155.28736877 314.50704956]
[154.26348877 329.56872559]
[149.21287537 343.79525757]
[140.51036072 356.13092041]
[128.80169678 365.66033936]
[114.95575714 371.67636108]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 113]
[33 102]
[34 101]
[35 100]
[36 98]
[37 97]
[39 95]
[40 94]
[41 93]
[42 92]
[45 89]
[46 88]
[47 87]
[50 84]
[51 83]
[52 82]
[117 129]
[118 128]
[119 127]
[120 126]
[121 125]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
