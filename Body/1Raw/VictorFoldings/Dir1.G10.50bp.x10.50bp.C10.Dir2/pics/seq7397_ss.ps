%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:20 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
CCAACCCCAUGGGGGGGGGGGGCCUCCAUGACUUUUUCAAAAAGGUAUUAGAAAAACCAUUUCAUAACUUxxxxxxxxxxGCAAAACUAACCCCCUAAUAAAAUUAAUUAACCACUCAUUCAUCGACCUCCCCCCCCCCCCCCACCCCAU\
) } def
/len { sequence length } bind def

/coor [
[86.18901825 515.09729004]
[72.34307861 509.08126831]
[60.63441467 499.55184937]
[51.93189240 487.21618652]
[46.88129044 472.98965454]
[45.85739899 457.92797852]
[48.93619537 443.14880371]
[55.88921738 429.74890137]
[66.20050049 418.72256470]
[79.10488129 410.88806152]
[93.64476776 406.82672119]
[93.64476776 391.82672119]
[93.64476776 376.82672119]
[93.64476776 361.82672119]
[93.64476776 346.82672119]
[93.64476776 331.82672119]
[93.64476776 316.82672119]
[93.64476776 301.82672119]
[93.64476776 286.82672119]
[93.64476776 271.82672119]
[93.64476776 256.82672119]
[93.64476776 241.82673645]
[82.96389771 231.50904846]
[82.75022125 216.29692078]
[93.64476776 205.16378784]
[93.64476776 190.16378784]
[85.90747070 177.43652344]
[93.64476776 163.63635254]
[93.64476776 148.63635254]
[93.64476776 133.63635254]
[93.64476776 118.63635254]
[83.09348297 107.97472382]
[68.09429169 107.81868744]
[53.09510422 107.66265106]
[38.09591675 107.50661469]
[23.09672737 107.35057831]
[7.19555521 113.23182678]
[-2.85773277 99.58016968]
[7.47738504 86.14060974]
[23.25276375 92.35138702]
[38.25195312 92.50742340]
[53.25114059 92.66345978]
[68.25032806 92.81949615]
[83.24951935 92.97553253]
[84.67913818 86.15962982]
[88.94084930 79.68566132]
[87.38326263 64.76674652]
[85.82568359 49.84783554]
[84.26810455 34.92892456]
[82.71052551 20.01000977]
[81.15293884 5.09109831]
[66.13755035 4.55798483]
[51.34249878 1.94024491]
[37.05577469 -2.71116590]
[23.55547333 -9.30570698]
[11.10438061 -17.71501350]
[-0.05513751 -27.77539444]
[-9.70585823 -39.29102325]
[-17.65992737 -52.03774643]
[-23.76251793 -65.76744080]
[-27.89483833 -80.21286011]
[-29.97645378 -95.09281158]
[-29.96684456 -110.11766052]
[-27.86619949 -124.99493408]
[-23.71540451 -139.43505859]
[-17.59525871 -153.15693665]
[-9.62489223 -165.89347839]
[0.04055039 -177.39674377]
[11.21292782 -187.44284058]
[23.67476654 -195.83622742]
[37.18349075 -202.41348267]
[51.47615433 -207.04661560]
[66.27454376 -209.64543152]
[81.29060364 -210.15934753]
[96.23204041 -208.57833862]
[110.80801392 -204.93319702]
[124.73480988 -199.29489136]
[137.74131775 -191.77313232]
[149.57438660 -182.51437378]
[160.00366211 -171.69882202]
[168.82615662 -159.53698730]
[175.87010193 -146.26564026]
[180.99842834 -132.14309692]
[184.11128235 -117.44423676]
[185.14808655 -102.45520020]
[184.08863831 -87.46775055]
[180.95359802 -72.77361298]
[175.80395508 -58.65882492]
[168.73995972 -45.39812851]
[159.89910889 -33.24964523]
[149.45350647 -22.44985390]
[137.60647583 -13.20897198]
[124.58860779 -5.70687723]
[110.65332031 -0.08960024]
[96.07185364 3.53351736]
[97.62943268 18.45242882]
[99.18701935 33.37134171]
[100.74459839 48.29025269]
[102.30217743 63.20916748]
[103.85975647 78.12807465]
[116.55468750 86.11799622]
[130.67948914 81.06923676]
[138.81549072 67.24227142]
[154.71821594 65.12501526]
[166.18846130 76.34165955]
[164.42724609 92.28774261]
[150.78559875 100.73080444]
[135.72824097 95.19403839]
[121.60344696 100.24279785]
[135.82054138 95.46010590]
[150.58538818 98.10577393]
[162.25724792 107.52742004]
[167.95811462 121.40186310]
[166.28224182 136.30795288]
[157.64288330 148.57014465]
[144.17031860 155.16484070]
[129.18659973 154.46591187]
[116.38642883 146.64570618]
[108.92605591 133.63252258]
[108.64476776 118.63635254]
[108.64476776 133.63635254]
[108.64476776 148.63635254]
[108.64476776 163.63635254]
[116.38207245 177.43652344]
[108.64476776 190.16378784]
[108.64476776 205.16378784]
[119.53932190 216.29692078]
[119.32564545 231.50904846]
[108.64476776 241.82673645]
[108.64476776 256.82672119]
[108.64476776 271.82672119]
[108.64476776 286.82672119]
[108.64476776 301.82672119]
[108.64476776 316.82672119]
[108.64476776 331.82672119]
[108.64476776 346.82672119]
[108.64476776 361.82672119]
[108.64476776 376.82672119]
[108.64476776 391.82672119]
[108.64476776 406.82672119]
[123.18465424 410.88806152]
[136.08903503 418.72256470]
[146.40032959 429.74890137]
[153.35334778 443.14880371]
[156.43214417 457.92797852]
[155.40824890 472.98965454]
[150.35765076 487.21618652]
[141.65512085 499.55184937]
[129.94647217 509.08126831]
[116.10052490 515.09729004]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 140]
[12 139]
[13 138]
[14 137]
[15 136]
[16 135]
[17 134]
[18 133]
[19 132]
[20 131]
[21 130]
[22 129]
[25 126]
[26 125]
[28 123]
[29 122]
[30 121]
[31 120]
[32 44]
[33 43]
[34 42]
[35 41]
[36 40]
[46 100]
[47 99]
[48 98]
[49 97]
[50 96]
[51 95]
[101 109]
[102 108]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
