%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:43:11 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
AGCUAUAGCAAUAGGGGGGGGGGAAACUAGGAAUAGCCCCCUUUCACUUCUGAGUCCCAGAGGUUACCCAAGGxxxxxxxxxxUCAUUUCUCUACUCAGAAACCUGAAACAUCGGCAUUAUCCUCCUGCUUGCCCCCCCCCCCAACUAUAGCAACA\
) } def
/len { sequence length } bind def

/coor [
[88.69688416 553.32000732]
[74.82274628 547.47174072]
[62.46794510 538.86639404]
[52.17256927 527.88006592]
[44.38669205 514.99310303]
[39.45067978 500.76882935]
[37.58031082 485.82910156]
[38.85734940 470.82702637]
[43.22597504 456.41839600]
[50.49520111 443.23309326]
[60.34725571 431.84753418]
[72.35144806 422.75946045]
[85.98300171 416.36614990]
[100.64600372 412.94708252]
[100.34587097 397.95010376]
[100.04573822 382.95309448]
[99.74560547 367.95611572]
[99.44547272 352.95910645]
[99.14533997 337.96209717]
[98.84521484 322.96511841]
[98.54508209 307.96810913]
[98.24494934 292.97113037]
[97.94481659 277.97412109]
[89.95440674 265.40420532]
[97.41403198 251.45198059]
[97.11389923 236.45498657]
[86.22872162 226.35308838]
[85.71070862 211.14826965]
[96.38031769 199.79939270]
[96.08018494 184.80239868]
[95.78005219 169.80538940]
[95.47991943 154.80839539]
[94.87977600 139.82040405]
[93.97986603 124.84742737]
[93.07994843 109.87445068]
[91.88062286 94.92247009]
[90.38236237 79.99748230]
[88.88410187 65.07250214]
[74.17845917 56.76968384]
[67.36787415 41.49765778]
[70.94613647 25.33300591]
[83.31565857 14.57981110]
[81.51906586 -0.31220952]
[79.72248077 -15.20422935]
[77.92588806 -30.09625053]
[76.12930298 -44.98826981]
[63.29634476 -60.48652267]
[71.51530457 -77.95294952]
[69.12432861 -92.76116943]
[66.73335266 -107.56938171]
[64.34237671 -122.37760162]
[61.95140076 -137.18580627]
[59.56042862 -151.99403381]
[57.16945267 -166.80224609]
[54.77847672 -181.61045837]
[51.40443039 -185.73933411]
[50.11948395 -190.29617310]
[50.73018265 -194.39923096]
[52.71621323 -197.37648010]
[51.21795654 -212.30146790]
[49.71969604 -227.22645569]
[48.22143936 -242.15144348]
[33.26266098 -243.89758301]
[19.02913094 -248.81904602]
[6.18657541 -256.68560791]
[-4.66433525 -267.12936401]
[-13.01608467 -279.66180420]
[-18.47804642 -293.69680786]
[-20.79475403 -308.57788086]
[-19.85785294 -323.60906982]
[-15.71115971 -338.08728027]
[-8.54862690 -351.33538818]
[1.29474354 -362.73373413]
[13.35855770 -371.74917603]
[27.07857132 -377.96008301]
[41.81307220 -381.07595825]
[56.87290192 -380.95101929]
[71.55368042 -377.59115601]
[85.16876984 -371.15350342]
[97.08136749 -361.93914795]
[106.73429108 -350.37908936]
[113.67605591 -337.01397705]
[117.58199310 -322.46896362]
[118.26940918 -307.42431641]
[115.70615387 -292.58370972]
[110.01210785 -278.64123535]
[101.45360565 -266.24908447]
[90.43093109 -255.98677063]
[77.45964050 -248.33433533]
[63.14642715 -243.64968872]
[64.64468384 -228.72470093]
[66.14294434 -213.79972839]
[67.64119720 -198.87474060]
[69.58669281 -184.00143433]
[71.97766876 -169.19322205]
[74.36864471 -154.38500977]
[76.75962067 -139.57678223]
[79.15058899 -124.76856995]
[81.54156494 -109.96035767]
[83.93254089 -95.15214539]
[86.32351685 -80.34392548]
[95.16657257 -75.08901978]
[99.72569275 -65.62285614]
[98.26157379 -54.99610901]
[91.02131653 -46.78485870]
[92.81790924 -31.89283943]
[94.61450195 -17.00082016]
[96.41108704 -2.10879898]
[98.20767975 12.78322124]
[110.44903564 18.18849373]
[118.47394562 29.03203011]
[120.09159851 42.53395081]
[114.77119446 55.16616058]
[103.80908966 63.57424164]
[105.30735016 78.49922943]
[106.80560303 93.42421722]
[110.05078125 97.62199402]
[110.68125916 103.34594727]
[108.05292511 108.97453308]
[108.95284271 123.94751740]
[109.85276031 138.92050171]
[113.21710205 144.71696472]
[113.12070465 150.46981812]
[110.47692108 154.50827026]
[110.77705383 169.50526428]
[111.07718658 184.50225830]
[111.37731934 199.49925232]
[122.49244690 210.41217041]
[122.58318329 225.62553406]
[112.11090088 236.15486145]
[112.41102600 251.15185547]
[120.42290497 264.79446411]
[112.94181061 277.67398071]
[113.24194336 292.67098999]
[113.54207611 307.66796875]
[113.84220886 322.66497803]
[114.14234161 337.66198730]
[114.44247437 352.65896606]
[114.74260712 367.65597534]
[115.04273987 382.65295410]
[115.34287262 397.64996338]
[115.64299774 412.64697266]
[130.43106079 415.47662354]
[144.30749512 421.31942749]
[156.66567993 429.91992188]
[166.96537781 440.90219116]
[174.75633240 453.78610229]
[179.69793701 468.00839233]
[181.57417297 482.94738770]
[180.30303955 497.94998169]
[175.94009399 512.36035156]
[168.67604065 525.54852295]
[158.82847595 536.93792725]
[146.82786560 546.03070068]
[133.19882202 552.42938232]
[118.53716278 555.85418701]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[14 142]
[15 141]
[16 140]
[17 139]
[18 138]
[19 137]
[20 136]
[21 135]
[22 134]
[23 133]
[25 131]
[26 130]
[29 127]
[30 126]
[31 125]
[32 124]
[33 121]
[34 120]
[35 119]
[36 116]
[37 115]
[38 114]
[42 109]
[43 108]
[44 107]
[45 106]
[46 105]
[48 101]
[49 100]
[50 99]
[51 98]
[52 97]
[53 96]
[54 95]
[55 94]
[59 93]
[60 92]
[61 91]
[62 90]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
