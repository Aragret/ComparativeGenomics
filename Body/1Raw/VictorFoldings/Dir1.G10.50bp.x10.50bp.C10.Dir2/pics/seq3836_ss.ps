%!PS-Adobe-3.0 EPSF-3.0
%%Creator: ViennaRNA-2.4.14
%%CreationDate: Fri May 22 11:42:09 2020
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 0 0 700 700
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

% Program options: 

% To switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

/RNAplot 100 dict def

RNAplot begin

%%BeginProlog

/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall        % draw outline of 2nd sequence
     } {
        /i 0 def
        coor {
            /p coor i get def
            /a arcs i get def
            /l a length def
            l 0 eq {
                %% standard point... draw simple line
                p 0 2 getinterval aload pop lineto
            } {
                %% point in loop... draw arc around loop center
                /clockwise a 5 get def
                clockwise 0.0000000 gt {
                    a 0 5 getinterval aload pop arcn
                } {
                    a 0 5 getinterval aload pop arc
                } ifelse
            } ifelse
            /i i 1 add def
        } forall
    }
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def
/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  /width {xmax xmin sub} bind def
  /height {ymax ymin sub} bind def
  10 10 translate
  680 size 10 add div dup scale
  size width sub width xmin sub xmax sub add 2 div 5 add
  size height sub height ymin sub ymax sub add 2 div 5 add
  translate
} bind def

%%EndProlog

% data start here
/sequence { (\
UCAUUCUACUGGGGGGGGGGAUCAACAUUACUAAUAAGUGGCUCCUUUAACCUCUCCACCCUUAUCACAAxxxxxxxxxxAGCAAUAUCAACCAUUAACCUUCCCUCUACACUUAUCAUCUUCACAAUUCCCCCCCCCCCUAAUUCUACU\
) } def
/len { sequence length } bind def

/coor [
[84.69139862 427.49197388]
[71.47119904 420.21951294]
[60.58439636 409.77249146]
[52.77326584 396.86325073]
[48.57038498 382.37194824]
[48.26231384 367.28659058]
[51.87005234 352.63577271]
[59.14762497 339.41839600]
[69.59883118 328.53561401]
[82.51109314 320.72946167]
[97.00403595 316.53219604]
[96.69197845 301.53543091]
[96.37992096 286.53866577]
[96.06786346 271.54193115]
[95.75580597 256.54516602]
[95.44374847 241.54841614]
[95.13169861 226.55166626]
[94.81964111 211.55490112]
[94.50758362 196.55815125]
[94.19552612 181.56140137]
[93.88346863 166.56465149]
[79.22711182 163.53543091]
[65.61205292 157.32131958]
[53.72079468 148.23379517]
[44.14942169 136.72842407]
[37.37771988 123.38191986]
[33.74514771 108.86333466]
[33.43379593 93.90044403]
[36.45927048 79.24330902]
[42.66991806 65.62667084]
[51.75440216 53.73309708]
[63.25733948 44.15878677]
[76.60211182 37.38368225]
[91.11977386 33.74740982]
[90.80771637 18.75065613]
[90.49566650 3.75390172]
[90.18360901 -11.24285221]
[89.87155151 -26.23960495]
[89.55949402 -41.23635864]
[89.24743652 -56.23311234]
[74.27186584 -57.24793625]
[59.44458771 -59.58234406]
[44.88165283 -63.21806717]
[30.69703102 -68.12664795]
[17.00174332 -74.26966858]
[3.90297365 -81.59905243]
[-8.49675846 -90.05743408]
[-20.10040855 -99.57862091]
[-30.81715775 -110.08808899]
[-40.56313324 -121.50358582]
[-49.26206207 -133.73576355]
[-56.84585190 -146.68890381]
[-63.25516129 -160.26161194]
[-68.43981171 -174.34767151]
[-72.35924530 -188.83682251]
[-74.98277283 -203.61569214]
[-76.28985596 -218.56858826]
[-76.27028656 -233.57849121]
[-74.92419434 -248.52792358]
[-72.26213074 -263.29989624]
[-68.30491638 -277.77877808]
[-63.08353806 -291.85125732]
[-56.63885117 -305.40719604]
[-49.02129364 -318.34051514]
[-40.29049301 -330.54995728]
[-30.51477242 -341.94000244]
[-19.77064514 -352.42147827]
[-8.14219952 -361.91235352]
[4.27955389 -370.33837891]
[17.39739609 -377.63357544]
[31.10866165 -383.74084473]
[45.30603790 -388.61239624]
[59.87841034 -392.21014404]
[74.71172333 -394.50585938]
[89.68989563 -395.48162842]
[104.69568634 -395.12976074]
[119.61166382 -393.45306396]
[134.32107544 -390.46466064]
[148.70881653 -386.18789673]
[162.66226196 -380.65628052]
[176.07221985 -373.91308594]
[188.83374023 -366.01107788]
[200.84692383 -357.01214600]
[212.01776123 -346.98669434]
[222.25883484 -336.01315308]
[231.48997498 -324.17745972]
[239.63893127 -311.57223511]
[246.64195251 -298.29611206]
[252.44421387 -284.45300293]
[257.00030518 -270.15127563]
[260.27453613 -255.50282288]
[262.24133301 -240.62232971]
[262.88528442 -225.62622070]
[262.20135498 -210.63189697]
[260.19488525 -195.75669861]
[256.88156128 -181.11703491]
[252.28735352 -166.82749939]
[246.44819641 -152.99992371]
[239.40980530 -139.74252319]
[231.22724915 -127.15906525]
[221.96456909 -115.34803772]
[211.69427490 -104.40186310]
[200.49673462 -94.40622711]
[188.45959473 -85.43935394]
[175.67706299 -77.57142639]
[162.24916077 -70.86402130]
[148.28100586 -65.36962891]
[133.88192749 -61.13125610]
[119.16458893 -58.18207550]
[104.24419403 -56.54516983]
[104.55625153 -41.54841614]
[104.86830139 -26.55166245]
[105.18035889 -11.55490875]
[105.49241638 3.44184542]
[105.80447388 18.43859863]
[106.11653137 33.43535233]
[120.77288818 36.46456528]
[134.38793945 42.67868423]
[146.27920532 51.76620102]
[155.85058594 63.27157974]
[162.62228394 76.61808014]
[166.25485229 91.13666534]
[166.56620789 106.09955597]
[163.54072571 120.75669098]
[157.33007812 134.37332153]
[148.24560547 146.26690674]
[136.74266052 155.84121704]
[123.39788818 162.61631775]
[108.88022614 166.25259399]
[109.19228363 181.24934387]
[109.50433350 196.24609375]
[109.81639099 211.24285889]
[110.12844849 226.23960876]
[110.44050598 241.23635864]
[110.75256348 256.23312378]
[111.06462097 271.22985840]
[111.37667084 286.22662354]
[111.68872833 301.22338867]
[112.00078583 316.22012329]
[126.65577698 319.81088257]
[139.88159180 327.07315063]
[150.77645874 337.51174927]
[158.59754944 350.41494751]
[162.81163025 364.90301514]
[163.13134766 379.98812866]
[159.53491211 394.64172363]
[152.26754761 407.86474609]
[141.82475281 418.75555420]
[128.91851807 426.57168579]
[114.42883301 430.78015137]
] def
/arcs [
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
[]
] def
/pairs [
[11 139]
[12 138]
[13 137]
[14 136]
[15 135]
[16 134]
[17 133]
[18 132]
[19 131]
[20 130]
[21 129]
[34 116]
[35 115]
[36 114]
[37 113]
[38 112]
[39 111]
[40 110]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
showpage
end
%%EOF
